{"sha": "82184440ecd33e87cd03a8f7c70af2ad95d5400f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMTg0NDQwZWNkMzNlODdjZDAzYThmN2M3MGFmMmFkOTVkNTQwMGY=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-18T17:00:59Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-18T17:16:19Z"}, "message": "Propagate cfg bootstrap", "tree": {"sha": "1eda0bfec40ffa7bc2d180c8182cfa81912df2dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eda0bfec40ffa7bc2d180c8182cfa81912df2dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82184440ecd33e87cd03a8f7c70af2ad95d5400f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82184440ecd33e87cd03a8f7c70af2ad95d5400f", "html_url": "https://github.com/rust-lang/rust/commit/82184440ecd33e87cd03a8f7c70af2ad95d5400f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82184440ecd33e87cd03a8f7c70af2ad95d5400f/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a400ee14967a0210c31a6e272d56cbbb2b372dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a400ee14967a0210c31a6e272d56cbbb2b372dd", "html_url": "https://github.com/rust-lang/rust/commit/6a400ee14967a0210c31a6e272d56cbbb2b372dd"}], "stats": {"total": 710, "additions": 169, "deletions": 541}, "files": [{"sha": "5a6d4ee2aea9320d824a87e04c0ff87095effd2f", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -275,10 +275,7 @@ impl<T> LinkedList<T> {\n     /// let list: LinkedList<u32> = LinkedList::new();\n     /// ```\n     #[inline]\n-    #[cfg_attr(\n-        not(bootstrap),\n-        rustc_const_stable(feature = \"const_linked_list_new\", since = \"1.32.0\"),\n-    )]\n+    #[rustc_const_stable(feature = \"const_linked_list_new\", since = \"1.32.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn new() -> Self {\n         LinkedList {"}, {"sha": "0137275bc1589d3784d919be754ea8b4e6dd256f", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -116,8 +116,6 @@\n #![feature(unsize)]\n #![feature(unsized_locals)]\n #![feature(allocator_internals)]\n-#![cfg_attr(bootstrap, feature(on_unimplemented))]\n-#![cfg_attr(bootstrap, feature(rustc_const_unstable))]\n #![feature(slice_partition_dedup)]\n #![feature(maybe_uninit_extra, maybe_uninit_slice)]\n #![feature(alloc_layout_extra)]"}, {"sha": "f880f5915a36a857bc8b8f389f3f2fa3eb7725aa", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -367,10 +367,7 @@ impl String {\n     /// let s = String::new();\n     /// ```\n     #[inline]\n-    #[cfg_attr(\n-        not(bootstrap),\n-        rustc_const_stable(feature = \"const_string_new\", since = \"1.32.0\"),\n-    )]\n+    #[rustc_const_stable(feature = \"const_string_new\", since = \"1.32.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn new() -> String {\n         String { vec: Vec::new() }"}, {"sha": "19c95e2079313492ee115a2a425f75c5fc9bad3e", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -315,10 +315,7 @@ impl<T> Vec<T> {\n     /// let mut vec: Vec<i32> = Vec::new();\n     /// ```\n     #[inline]\n-    #[cfg_attr(\n-        not(bootstrap),\n-        rustc_const_stable(feature = \"const_vec_new\", since = \"1.32.0\"),\n-    )]\n+    #[rustc_const_stable(feature = \"const_vec_new\", since = \"1.32.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn new() -> Vec<T> {\n         Vec {"}, {"sha": "cb476acfb3a9ed6a3eeb144ed745dc431eb82937", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -100,7 +100,7 @@ impl Layout {\n     /// This function is unsafe as it does not verify the preconditions from\n     /// [`Layout::from_size_align`](#method.from_size_align).\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"alloc_layout\", since = \"1.28.0\"))]\n+    #[rustc_const_stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[inline]\n     pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {\n         Layout { size_: size, align_: NonZeroUsize::new_unchecked(align) }"}, {"sha": "882c4a53faf2aff4e6e1a711678f2ae3bf366738", "filename": "src/libcore/any.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -423,14 +423,9 @@ impl TypeId {\n     /// assert_eq!(is_string(&\"cookie monster\".to_string()), true);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(bootstrap, rustc_const_unstable(feature=\"const_type_id\"))]\n-    #[cfg_attr(not(bootstrap), rustc_const_unstable(feature=\"const_type_id\", issue = \"41875\"))]\n+    #[rustc_const_unstable(feature=\"const_type_id\", issue = \"41875\")]\n     pub const fn of<T: ?Sized + 'static>() -> TypeId {\n         TypeId {\n-            #[cfg(bootstrap)]\n-            // SAFETY: going away soon\n-            t: unsafe { intrinsics::type_id::<T>() },\n-            #[cfg(not(bootstrap))]\n             t: intrinsics::type_id::<T>(),\n         }\n     }\n@@ -462,8 +457,7 @@ impl TypeId {\n /// );\n /// ```\n #[stable(feature = \"type_name\", since = \"1.38.0\")]\n-#[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_type_name\"))]\n-#[cfg_attr(not(bootstrap), rustc_const_unstable(feature = \"const_type_name\", issue = \"63084\"))]\n+#[rustc_const_unstable(feature = \"const_type_name\", issue = \"63084\")]\n pub const fn type_name<T: ?Sized>() -> &'static str {\n     intrinsics::type_name::<T>()\n }\n@@ -501,8 +495,7 @@ pub const fn type_name<T: ?Sized>() -> &'static str {\n /// println!(\"{}\", type_name_of_val(&y));\n /// ```\n #[unstable(feature = \"type_name_of_val\", issue = \"66359\")]\n-#[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_type_name\"))]\n-#[cfg_attr(not(bootstrap), rustc_const_unstable(feature = \"const_type_name\", issue = \"63084\"))]\n+#[rustc_const_unstable(feature = \"const_type_name\", issue = \"63084\")]\n pub const fn type_name_of_val<T: ?Sized>(val: &T) -> &'static str {\n     let _ = val;\n     type_name::<T>()"}, {"sha": "099e5307f64c80844dfef4986d761124fb946fbc", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -324,7 +324,7 @@ impl<T> Cell<T> {\n     /// let c = Cell::new(5);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_cell_new\", since = \"1.32.0\"))]\n+    #[rustc_const_stable(feature = \"const_cell_new\", since = \"1.32.0\")]\n     #[inline]\n     pub const fn new(value: T) -> Cell<T> {\n         Cell {\n@@ -470,7 +470,7 @@ impl<T: ?Sized> Cell<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"cell_as_ptr\", since = \"1.12.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_cell_as_ptr\", since = \"1.32.0\"))]\n+    #[rustc_const_stable(feature = \"const_cell_as_ptr\", since = \"1.32.0\")]\n     pub const fn as_ptr(&self) -> *mut T {\n         self.value.get()\n     }\n@@ -651,7 +651,7 @@ impl<T> RefCell<T> {\n     /// let c = RefCell::new(5);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_refcell_new\", since = \"1.32.0\"))]\n+    #[rustc_const_stable(feature = \"const_refcell_new\", since = \"1.32.0\")]\n     #[inline]\n     pub const fn new(value: T) -> RefCell<T> {\n         RefCell {\n@@ -1504,10 +1504,7 @@ impl<T> UnsafeCell<T> {\n     /// let uc = UnsafeCell::new(5);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(\n-        not(bootstrap),\n-        rustc_const_stable(feature = \"const_unsafe_cell_new\", since = \"1.32.0\"),\n-    )]\n+    #[rustc_const_stable(feature = \"const_unsafe_cell_new\", since = \"1.32.0\")]\n     #[inline]\n     pub const fn new(value: T) -> UnsafeCell<T> {\n         UnsafeCell { value }\n@@ -1550,10 +1547,7 @@ impl<T: ?Sized> UnsafeCell<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(\n-        not(bootstrap),\n-        rustc_const_stable(feature = \"const_unsafecell_get\", since = \"1.32.0\"),\n-    )]\n+    #[rustc_const_stable(feature = \"const_unsafecell_get\", since = \"1.32.0\")]\n     pub const fn get(&self) -> *mut T {\n         // We can just cast the pointer from `UnsafeCell<T>` to `T` because of\n         // #[repr(transparent)]. This exploits libstd's special status, there is"}, {"sha": "bb6d6db57d214e9b1e9676838c454330d245550b", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -911,10 +911,7 @@ impl char {\n     /// assert!(!non_ascii.is_ascii());\n     /// ```\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n-    #[cfg_attr(\n-        not(bootstrap),\n-        rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.32.0\"),\n-    )]\n+    #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.32.0\")]\n     #[inline]\n     pub const fn is_ascii(&self) -> bool {\n         *self as u32 <= 0x7F"}, {"sha": "959fd63df51c2928e7617c9e26f3d439c2b63002", "filename": "src/libcore/convert/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert%2Fmod.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -101,7 +101,7 @@ pub use num::FloatToInt;\n /// assert_eq!(vec![1, 3], filtered);\n /// ```\n #[stable(feature = \"convert_id\", since = \"1.33.0\")]\n-#[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_identity\", since = \"1.33.0\"))]\n+#[rustc_const_stable(feature = \"const_identity\", since = \"1.33.0\")]\n #[inline]\n pub const fn identity<T>(x: T) -> T {\n     x"}, {"sha": "596da6f786bbd5dc431d774e9b588269c19567db", "filename": "src/libcore/convert/num.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fconvert%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fconvert%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert%2Fnum.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -13,7 +13,6 @@ mod private {\n /// Typically doesn\u2019t need to be used directly.\n #[unstable(feature = \"convert_float_to_int\", issue = \"67057\")]\n pub trait FloatToInt<Int>: private::Sealed + Sized {\n-    #[cfg(not(bootstrap))]\n     #[unstable(feature = \"float_approx_unchecked_to\", issue = \"67058\")]\n     #[doc(hidden)]\n     unsafe fn approx_unchecked(self) -> Int;\n@@ -26,7 +25,6 @@ macro_rules! impl_float_to_int {\n         $(\n             #[unstable(feature = \"convert_float_to_int\", issue = \"67057\")]\n             impl FloatToInt<$Int> for $Float {\n-                #[cfg(not(bootstrap))]\n                 #[doc(hidden)]\n                 #[inline]\n                 unsafe fn approx_unchecked(self) -> $Int {"}, {"sha": "b02acce2d00bb17b6e551dd02c450d8092d12579", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -939,11 +939,7 @@ extern \"rust-intrinsic\" {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_transmute\"))]\n-    #[cfg_attr(\n-        not(bootstrap),\n-        rustc_const_unstable(feature = \"const_transmute\", issue = \"53605\"),\n-    )]\n+    #[rustc_const_unstable(feature = \"const_transmute\", issue = \"53605\")]\n     pub fn transmute<T, U>(e: T) -> U;\n \n     /// Returns `true` if the actual type given as `T` requires drop\n@@ -1150,7 +1146,6 @@ extern \"rust-intrinsic\" {\n \n     /// Convert with LLVM\u2019s fptoui/fptosi, which may return undef for values out of range\n     /// https://github.com/rust-lang/rust/issues/10184\n-    #[cfg(not(bootstrap))]\n     pub fn float_to_int_approx_unchecked<Float, Int>(value: Float) -> Int;\n \n \n@@ -1361,7 +1356,6 @@ extern \"rust-intrinsic\" {\n     /// Compiles to a NOP during non-Miri codegen.\n     ///\n     /// Perma-unstable: do not use\n-    #[cfg(not(bootstrap))]\n     pub fn miri_start_panic(data: *mut (dyn crate::any::Any + crate::marker::Send)) -> ();\n }\n "}, {"sha": "019a3290f01e1252c2ae6bb7b6b4b4ac01ebad4a", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -517,14 +517,6 @@ impl<I> Iterator for StepBy<I> where I: Iterator {\n         // overflow handling\n         loop {\n             let mul = n.checked_mul(step);\n-            #[cfg(bootstrap)]\n-            {\n-                // SAFETY: going away soon\n-                if unsafe { intrinsics::likely(mul.is_some()) } {\n-                    return self.iter.nth(mul.unwrap() - 1);\n-                }\n-            }\n-            #[cfg(not(bootstrap))]\n             {\n                 if intrinsics::likely(mul.is_some()) {\n                     return self.iter.nth(mul.unwrap() - 1);"}, {"sha": "a65d47cc2c1f00805baba5b8be57965425fc46aa", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -281,7 +281,7 @@ impl<T> Default for Empty<T> {\n /// assert_eq!(None, nope.next());\n /// ```\n #[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n-#[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_iter_empty\", since = \"1.32.0\"))]\n+#[rustc_const_stable(feature = \"const_iter_empty\", since = \"1.32.0\")]\n pub const fn empty<T>() -> Empty<T> {\n     Empty(marker::PhantomData)\n }"}, {"sha": "a2ab85e64baa18d1f1bd2e40676b32f80d148225", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -74,8 +74,8 @@\n #![feature(const_fn)]\n #![feature(const_fn_union)]\n #![feature(const_generics)]\n-#![cfg_attr(not(bootstrap), feature(const_ptr_offset_from))]\n-#![cfg_attr(not(bootstrap), feature(const_type_name))]\n+#![feature(const_ptr_offset_from)]\n+#![feature(const_type_name)]\n #![feature(custom_inner_attributes)]\n #![feature(decl_macro)]\n #![feature(doc_cfg)]\n@@ -91,18 +91,16 @@\n #![feature(nll)]\n #![feature(exhaustive_patterns)]\n #![feature(no_core)]\n-#![cfg_attr(bootstrap, feature(on_unimplemented))]\n #![feature(optin_builtin_traits)]\n #![feature(prelude_import)]\n #![feature(repr_simd, platform_intrinsics)]\n #![feature(rustc_attrs)]\n-#![cfg_attr(bootstrap, feature(rustc_const_unstable))]\n #![feature(simd_ffi)]\n #![feature(specialization)]\n #![feature(staged_api)]\n #![feature(std_internals)]\n #![feature(stmt_expr_attributes)]\n-#![cfg_attr(not(bootstrap), feature(track_caller))]\n+#![feature(track_caller)]\n #![feature(transparent_unions)]\n #![feature(unboxed_closures)]\n #![feature(unsized_locals)]"}, {"sha": "af4635f89f61e4babcebee6da09e2f4f84cd0097", "filename": "src/libcore/mem/manually_drop.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fmem%2Fmanually_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fmem%2Fmanually_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmanually_drop.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -63,10 +63,7 @@ impl<T> ManuallyDrop<T> {\n     /// ManuallyDrop::new(Box::new(()));\n     /// ```\n     #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n-    #[cfg_attr(\n-        not(bootstrap),\n-        rustc_const_stable(feature = \"const_manually_drop\", since = \"1.36.0\"),\n-    )]\n+    #[rustc_const_stable(feature = \"const_manually_drop\", since = \"1.36.0\")]\n     #[inline(always)]\n     pub const fn new(value: T) -> ManuallyDrop<T> {\n         ManuallyDrop { value }\n@@ -84,10 +81,7 @@ impl<T> ManuallyDrop<T> {\n     /// let _: Box<()> = ManuallyDrop::into_inner(x); // This drops the `Box`.\n     /// ```\n     #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n-    #[cfg_attr(\n-        not(bootstrap),\n-        rustc_const_stable(feature = \"const_manually_drop\", since = \"1.36.0\"),\n-    )]\n+    #[rustc_const_stable(feature = \"const_manually_drop\", since = \"1.36.0\")]\n     #[inline(always)]\n     pub const fn into_inner(slot: ManuallyDrop<T>) -> T {\n         slot.value"}, {"sha": "7f80f61aaf96da98c0e1418af57046544771894f", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -250,10 +250,7 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// [`assume_init`]: #method.assume_init\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n-    #[cfg_attr(\n-        not(bootstrap),\n-        rustc_const_stable(feature = \"const_maybe_uninit\", since = \"1.36.0\"),\n-    )]\n+    #[rustc_const_stable(feature = \"const_maybe_uninit\", since = \"1.36.0\")]\n     #[inline(always)]\n     pub const fn new(val: T) -> MaybeUninit<T> {\n         MaybeUninit { value: ManuallyDrop::new(val) }\n@@ -268,12 +265,9 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// [type]: union.MaybeUninit.html\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n-    #[cfg_attr(\n-        not(bootstrap),\n-        rustc_const_stable(feature = \"const_maybe_uninit\", since = \"1.36.0\"),\n-    )]\n+    #[rustc_const_stable(feature = \"const_maybe_uninit\", since = \"1.36.0\")]\n     #[inline(always)]\n-    #[cfg_attr(all(not(bootstrap)), rustc_diagnostic_item = \"maybe_uninit_uninit\")]\n+    #[rustc_diagnostic_item = \"maybe_uninit_uninit\"]\n     pub const fn uninit() -> MaybeUninit<T> {\n         MaybeUninit { uninit: () }\n     }\n@@ -357,7 +351,7 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n     #[inline]\n-    #[cfg_attr(all(not(bootstrap)), rustc_diagnostic_item = \"maybe_uninit_zeroed\")]\n+    #[rustc_diagnostic_item = \"maybe_uninit_zeroed\"]\n     pub fn zeroed() -> MaybeUninit<T> {\n         let mut u = MaybeUninit::<T>::uninit();\n         unsafe {\n@@ -498,7 +492,7 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n     #[inline(always)]\n-    #[cfg_attr(all(not(bootstrap)), rustc_diagnostic_item = \"assume_init\")]\n+    #[rustc_diagnostic_item = \"assume_init\"]\n     pub unsafe fn assume_init(self) -> T {\n         intrinsics::panic_if_uninhabited::<T>();\n         ManuallyDrop::into_inner(self.value)"}, {"sha": "4e8ba8131f7a64707ff3c463897b58406ab8f61b", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -271,7 +271,7 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n #[inline(always)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n-#[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_size_of\", since = \"1.32.0\"))]\n+#[rustc_const_stable(feature = \"const_size_of\", since = \"1.32.0\")]\n pub const fn size_of<T>() -> usize {\n     intrinsics::size_of::<T>()\n }\n@@ -299,10 +299,6 @@ pub const fn size_of<T>() -> usize {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn size_of_val<T: ?Sized>(val: &T) -> usize {\n-    #[cfg(bootstrap)]\n-    // SAFETY: going away soon\n-    unsafe { intrinsics::size_of_val(val) }\n-    #[cfg(not(bootstrap))]\n     intrinsics::size_of_val(val)\n }\n \n@@ -347,10 +343,6 @@ pub fn min_align_of<T>() -> usize {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_deprecated(reason = \"use `align_of_val` instead\", since = \"1.2.0\")]\n pub fn min_align_of_val<T: ?Sized>(val: &T) -> usize {\n-    #[cfg(bootstrap)]\n-    // SAFETY: going away soon\n-    unsafe { intrinsics::min_align_of_val(val) }\n-    #[cfg(not(bootstrap))]\n     intrinsics::min_align_of_val(val)\n }\n \n@@ -372,7 +364,7 @@ pub fn min_align_of_val<T: ?Sized>(val: &T) -> usize {\n #[inline(always)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n-#[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_align_of\", since = \"1.32.0\"))]\n+#[rustc_const_stable(feature = \"const_align_of\", since = \"1.32.0\")]\n pub const fn align_of<T>() -> usize {\n     intrinsics::min_align_of::<T>()\n }\n@@ -455,7 +447,7 @@ pub fn align_of_val<T: ?Sized>(val: &T) -> usize {\n /// ```\n #[inline]\n #[stable(feature = \"needs_drop\", since = \"1.21.0\")]\n-#[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_needs_drop\", since = \"1.36.0\"))]\n+#[rustc_const_stable(feature = \"const_needs_drop\", since = \"1.36.0\")]\n pub const fn needs_drop<T>() -> bool {\n     intrinsics::needs_drop::<T>()\n }\n@@ -501,7 +493,7 @@ pub const fn needs_drop<T>() -> bool {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated_in_future)]\n #[allow(deprecated)]\n-#[cfg_attr(all(not(bootstrap)), rustc_diagnostic_item = \"mem_zeroed\")]\n+#[rustc_diagnostic_item = \"mem_zeroed\"]\n pub unsafe fn zeroed<T>() -> T {\n     intrinsics::panic_if_uninhabited::<T>();\n     intrinsics::init()\n@@ -534,7 +526,7 @@ pub unsafe fn zeroed<T>() -> T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated_in_future)]\n #[allow(deprecated)]\n-#[cfg_attr(all(not(bootstrap)), rustc_diagnostic_item = \"mem_uninitialized\")]\n+#[rustc_diagnostic_item = \"mem_uninitialized\"]\n pub unsafe fn uninitialized<T>() -> T {\n     intrinsics::panic_if_uninhabited::<T>();\n     intrinsics::uninit()\n@@ -874,11 +866,5 @@ impl<T> fmt::Debug for Discriminant<T> {\n /// ```\n #[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\n pub fn discriminant<T>(v: &T) -> Discriminant<T> {\n-    #[cfg(bootstrap)]\n-    // SAFETY: going away soon\n-    unsafe {\n-        Discriminant(intrinsics::discriminant_value(v), PhantomData)\n-    }\n-    #[cfg(not(bootstrap))]\n     Discriminant(intrinsics::discriminant_value(v), PhantomData)\n }"}, {"sha": "9e379e638103e1e0671415592283aa6cd89324d6", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -7,7 +7,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(not(bootstrap))]\n use crate::convert::FloatToInt;\n #[cfg(not(test))]\n use crate::intrinsics;\n@@ -423,7 +422,6 @@ impl f32 {\n     /// * Not be `NaN`\n     /// * Not be infinite\n     /// * Be representable in the return type `Int`, after truncating off its fractional part\n-    #[cfg(not(bootstrap))]\n     #[unstable(feature = \"float_approx_unchecked_to\", issue = \"67058\")]\n     #[inline]\n     pub unsafe fn approx_unchecked_to<Int>(self) -> Int where Self: FloatToInt<Int> {"}, {"sha": "540c6a529d7c85c08e74c3d9de5117f61ddf97a1", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -7,7 +7,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(not(bootstrap))]\n use crate::convert::FloatToInt;\n #[cfg(not(test))]\n use crate::intrinsics;\n@@ -436,7 +435,6 @@ impl f64 {\n     /// * Not be `NaN`\n     /// * Not be infinite\n     /// * Be representable in the return type `Int`, after truncating off its fractional part\n-    #[cfg(not(bootstrap))]\n     #[unstable(feature = \"float_approx_unchecked_to\", issue = \"67058\")]\n     #[inline]\n     pub unsafe fn approx_unchecked_to<Int>(self) -> Int"}, {"sha": "6c864f74b1f14ced9f93af92858b200ca4e77854", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 77, "deletions": 325, "changes": 402, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -61,10 +61,7 @@ assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", s\n                 ///\n                 /// The value must not be zero.\n                 #[$stability]\n-                #[cfg_attr(\n-                    not(bootstrap),\n-                    rustc_const_stable(feature = \"nonzero\", since = \"1.34.0\"),\n-                )]\n+                #[rustc_const_stable(feature = \"nonzero\", since = \"1.34.0\")]\n                 #[inline]\n                 pub const unsafe fn new_unchecked(n: $Int) -> Self {\n                     Self(n)\n@@ -85,10 +82,7 @@ assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", s\n                 /// Returns the value as a primitive type.\n                 #[$stability]\n                 #[inline]\n-                #[cfg_attr(\n-                    not(bootstrap),\n-                    rustc_const_stable(feature = \"nonzero\", since = \"1.34.0\"),\n-                )]\n+                #[rustc_const_stable(feature = \"nonzero\", since = \"1.34.0\")]\n                 pub const fn get(self) -> $Int {\n                     self.0\n                 }\n@@ -264,10 +258,7 @@ $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[inline(always)]\n             #[rustc_promotable]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_min_value\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_min_value\", since = \"1.32.0\")]\n             pub const fn min_value() -> Self {\n                 !0 ^ ((!0 as $UnsignedT) >> 1) as Self\n             }\n@@ -287,10 +278,7 @@ $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[inline(always)]\n             #[rustc_promotable]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]\n             pub const fn max_value() -> Self {\n                 !Self::min_value()\n             }\n@@ -340,10 +328,7 @@ $EndFeature, \"\n ```\n \"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[inline]\n             pub const fn count_ones(self) -> u32 { (self as $UnsignedT).count_ones() }\n         }\n@@ -359,10 +344,7 @@ Basic usage:\n \", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::max_value().count_zeros(), 1);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[inline]\n             pub const fn count_zeros(self) -> u32 {\n                 (!self).count_ones()\n@@ -383,10 +365,7 @@ assert_eq!(n.leading_zeros(), 0);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[inline]\n             pub const fn leading_zeros(self) -> u32 {\n                 (self as $UnsignedT).leading_zeros()\n@@ -407,10 +386,7 @@ assert_eq!(n.trailing_zeros(), 2);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[inline]\n             pub const fn trailing_zeros(self) -> u32 {\n                 (self as $UnsignedT).trailing_zeros()\n@@ -434,10 +410,7 @@ let m = \", $rot_result, \";\n assert_eq!(n.rotate_left(\", $rot, \"), m);\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -464,10 +437,7 @@ let m = \", $rot_op, \";\n assert_eq!(n.rotate_right(\", $rot, \"), m);\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -491,10 +461,7 @@ let m = n.swap_bytes();\n assert_eq!(m, \", $swapped, \");\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[inline]\n             pub const fn swap_bytes(self) -> Self {\n                 (self as $UnsignedT).swap_bytes() as Self\n@@ -515,10 +482,7 @@ let m = n.reverse_bits();\n assert_eq!(m, \", $reversed, \");\n ```\"),\n             #[stable(feature = \"reverse_bits\", since = \"1.37.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[inline]\n             #[must_use]\n             pub const fn reverse_bits(self) -> Self {\n@@ -546,10 +510,7 @@ if cfg!(target_endian = \\\"big\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_conversions\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_conversions\", since = \"1.32.0\")]\n             #[inline]\n             pub const fn from_be(x: Self) -> Self {\n                 #[cfg(target_endian = \"big\")]\n@@ -583,10 +544,7 @@ if cfg!(target_endian = \\\"little\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_conversions\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_conversions\", since = \"1.32.0\")]\n             #[inline]\n             pub const fn from_le(x: Self) -> Self {\n                 #[cfg(target_endian = \"little\")]\n@@ -620,10 +578,7 @@ if cfg!(target_endian = \\\"big\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_conversions\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_conversions\", since = \"1.32.0\")]\n             #[inline]\n             pub const fn to_be(self) -> Self { // or not to be?\n                 #[cfg(target_endian = \"big\")]\n@@ -657,10 +612,7 @@ if cfg!(target_endian = \\\"little\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_conversions\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_conversions\", since = \"1.32.0\")]\n             #[inline]\n             pub const fn to_le(self) -> Self {\n                 #[cfg(target_endian = \"little\")]\n@@ -1013,11 +965,7 @@ $EndFeature, \"\n ```\"),\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_saturating_int_methods\"))]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\"),\n-            )]\n+            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1043,11 +991,7 @@ assert_eq!(\", stringify!($SelfT), \"::max_value().saturating_sub(-1), \", stringif\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_saturating_int_methods\"))]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\"),\n-            )]\n+            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1187,10 +1131,7 @@ assert_eq!(\", stringify!($SelfT), \"::max_value().wrapping_add(2), \", stringify!(\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1214,10 +1155,7 @@ stringify!($SelfT), \"::max_value());\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1240,10 +1178,7 @@ assert_eq!(11i8.wrapping_mul(12), -124);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1388,10 +1323,7 @@ assert_eq!(\", stringify!($SelfT), \"::min_value().wrapping_neg(), \", stringify!($\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[inline]\n             pub const fn wrapping_neg(self) -> Self {\n                 self.overflowing_neg().0\n@@ -1417,10 +1349,7 @@ assert_eq!((-1\", stringify!($SelfT), \").wrapping_shl(128), -1);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1452,10 +1381,7 @@ assert_eq!((-128i16).wrapping_shr(64), -128);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1489,10 +1415,7 @@ assert_eq!((-128i8).wrapping_abs() as u8, 128);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[inline]\n             pub const fn wrapping_abs(self) -> Self {\n                 // sign is -1 (all ones) for negative numbers, 0 otherwise.\n@@ -1567,10 +1490,7 @@ assert_eq!(\", stringify!($SelfT), \"::MAX.overflowing_add(1), (\", stringify!($Sel\n \"::MIN, true));\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1598,10 +1518,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_sub(1), (\", stringify!($Sel\n \"::MAX, true));\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1627,10 +1544,7 @@ assert_eq!(1_000_000_000i32.overflowing_mul(10), (1410065408, true));\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1798,10 +1712,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_neg(), (\", stringify!($Self\n ```\"),\n             #[inline]\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             pub const fn overflowing_neg(self) -> (Self, bool) {\n                 ((!self).wrapping_add(1), self == Self::min_value())\n             }\n@@ -1824,10 +1735,7 @@ assert_eq!(0x1i32.overflowing_shl(36), (0x10, true));\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1853,10 +1761,7 @@ assert_eq!(0x10i32.overflowing_shr(36), (0x1, true));\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1885,10 +1790,7 @@ assert_eq!((\", stringify!($SelfT), \"::min_value()).overflowing_abs(), (\", string\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[inline]\n             pub const fn overflowing_abs(self) -> (Self, bool) {\n                 (self.wrapping_abs(), self == Self::min_value())\n@@ -2093,10 +1995,7 @@ assert_eq!((-10\", stringify!($SelfT), \").abs(), 10);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             pub const fn abs(self) -> Self {\n@@ -2139,11 +2038,7 @@ assert_eq!((-10\", stringify!($SelfT), \").signum(), -1);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_int_sign\"))]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_unstable(feature = \"const_int_sign\", issue = \"53718\"),\n-            )]\n+            #[rustc_const_unstable(feature = \"const_int_sign\", issue = \"53718\")]\n             #[inline]\n             pub const fn signum(self) -> Self {\n                 (self > 0) as Self - (self < 0) as Self\n@@ -2164,10 +2059,7 @@ assert!(!(-10\", stringify!($SelfT), \").is_positive());\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[inline]\n             pub const fn is_positive(self) -> bool { self > 0 }\n         }\n@@ -2186,10 +2078,7 @@ assert!(!10\", stringify!($SelfT), \".is_negative());\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[inline]\n             pub const fn is_negative(self) -> bool { self < 0 }\n         }\n@@ -2207,11 +2096,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_be_bytes();\n assert_eq!(bytes, \", $be_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_int_conversion\"))]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\"),\n-            )]\n+            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n             #[inline]\n             pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_be().to_ne_bytes()\n@@ -2231,11 +2116,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_le_bytes();\n assert_eq!(bytes, \", $le_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_int_conversion\"))]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\"),\n-            )]\n+            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n             #[inline]\n             pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_le().to_ne_bytes()\n@@ -2270,11 +2151,7 @@ assert_eq!(\n );\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_int_conversion\"))]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\"),\n-            )]\n+            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 // SAFETY: integers are plain old datatypes so we can always transmute them to\n@@ -2308,11 +2185,7 @@ fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_int_conversion\"))]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\"),\n-            )]\n+            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n             #[inline]\n             pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_be(Self::from_ne_bytes(bytes))\n@@ -2345,11 +2218,7 @@ fn read_le_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_int_conversion\"))]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\"),\n-            )]\n+            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n             #[inline]\n             pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_le(Self::from_ne_bytes(bytes))\n@@ -2392,11 +2261,7 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_int_conversion\"))]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\"),\n-            )]\n+            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 // SAFETY: integers are plain old datatypes so we can always transmute to them\n@@ -2490,10 +2355,7 @@ Basic usage:\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_promotable]\n             #[inline(always)]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_min_value\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_min_value\", since = \"1.32.0\")]\n             pub const fn min_value() -> Self { 0 }\n         }\n \n@@ -2511,10 +2373,7 @@ stringify!($MaxV), \");\", $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_promotable]\n             #[inline(always)]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]\n             pub const fn max_value() -> Self { !0 }\n         }\n \n@@ -2561,10 +2420,7 @@ Basic usage:\n assert_eq!(n.count_ones(), 3);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_math\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n             #[inline]\n             pub const fn count_ones(self) -> u32 {\n                 intrinsics::ctpop(self as $ActualT) as u32\n@@ -2582,10 +2438,7 @@ Basic usage:\n \", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::max_value().count_zeros(), 0);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_math\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n             #[inline]\n             pub const fn count_zeros(self) -> u32 {\n                 (!self).count_ones()\n@@ -2605,10 +2458,7 @@ Basic usage:\n assert_eq!(n.leading_zeros(), 2);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_math\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n             #[inline]\n             pub const fn leading_zeros(self) -> u32 {\n                 intrinsics::ctlz(self as $ActualT) as u32\n@@ -2629,10 +2479,7 @@ Basic usage:\n assert_eq!(n.trailing_zeros(), 3);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_math\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n             #[inline]\n             pub const fn trailing_zeros(self) -> u32 {\n                 intrinsics::cttz(self) as u32\n@@ -2656,10 +2503,7 @@ let m = \", $rot_result, \";\n assert_eq!(n.rotate_left(\", $rot, \"), m);\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_math\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -2686,10 +2530,7 @@ let m = \", $rot_op, \";\n assert_eq!(n.rotate_right(\", $rot, \"), m);\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_math\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -2713,10 +2554,7 @@ let m = n.swap_bytes();\n assert_eq!(m, \", $swapped, \");\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_math\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n             #[inline]\n             pub const fn swap_bytes(self) -> Self {\n                 intrinsics::bswap(self as $ActualT) as Self\n@@ -2737,10 +2575,7 @@ let m = n.reverse_bits();\n assert_eq!(m, \", $reversed, \");\n ```\"),\n             #[stable(feature = \"reverse_bits\", since = \"1.37.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_math\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n             #[inline]\n             #[must_use]\n             pub const fn reverse_bits(self) -> Self {\n@@ -2768,10 +2603,7 @@ if cfg!(target_endian = \\\"big\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_math\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n             #[inline]\n             pub const fn from_be(x: Self) -> Self {\n                 #[cfg(target_endian = \"big\")]\n@@ -2805,10 +2637,7 @@ if cfg!(target_endian = \\\"little\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_math\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n             #[inline]\n             pub const fn from_le(x: Self) -> Self {\n                 #[cfg(target_endian = \"little\")]\n@@ -2842,10 +2671,7 @@ if cfg!(target_endian = \\\"big\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_math\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n             #[inline]\n             pub const fn to_be(self) -> Self { // or not to be?\n                 #[cfg(target_endian = \"big\")]\n@@ -2879,10 +2705,7 @@ if cfg!(target_endian = \\\"little\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_math\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n             #[inline]\n             pub const fn to_le(self) -> Self {\n                 #[cfg(target_endian = \"little\")]\n@@ -3188,11 +3011,7 @@ assert_eq!(200u8.saturating_add(127), 255);\", $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_saturating_int_methods\"))]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\"),\n-            )]\n+            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n             #[inline]\n             pub const fn saturating_add(self, rhs: Self) -> Self {\n                 intrinsics::saturating_add(self, rhs)\n@@ -3214,11 +3033,7 @@ assert_eq!(13\", stringify!($SelfT), \".saturating_sub(127), 0);\", $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_saturating_int_methods\"))]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\"),\n-            )]\n+            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n             #[inline]\n             pub const fn saturating_sub(self, rhs: Self) -> Self {\n                 intrinsics::saturating_sub(self, rhs)\n@@ -3290,10 +3105,7 @@ assert_eq!(200\", stringify!($SelfT), \".wrapping_add(\", stringify!($SelfT), \"::ma\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3316,10 +3128,7 @@ assert_eq!(100\", stringify!($SelfT), \".wrapping_sub(\", stringify!($SelfT), \"::ma\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3343,10 +3152,7 @@ $EndFeature, \"\n         /// assert_eq!(25u8.wrapping_mul(12), 44);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[cfg_attr(\n-            not(bootstrap),\n-            rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\"),\n-        )]\n+        #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n         #[inline]\n@@ -3476,10 +3282,7 @@ assert_eq!(100\", stringify!($SelfT), \".wrapping_rem_euclid(10), 0);\n         /// assert_eq!((-128i8).wrapping_neg(), -128);\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-        #[cfg_attr(\n-            not(bootstrap),\n-            rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\"),\n-        )]\n+        #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n         #[inline]\n         pub const fn wrapping_neg(self) -> Self {\n             self.overflowing_neg().0\n@@ -3506,10 +3309,7 @@ Basic usage:\n assert_eq!(1\", stringify!($SelfT), \".wrapping_shl(128), 1);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3543,10 +3343,7 @@ Basic usage:\n assert_eq!(128\", stringify!($SelfT), \".wrapping_shr(128), 128);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3616,10 +3413,7 @@ assert_eq!(5\", stringify!($SelfT), \".overflowing_add(2), (7, false));\n assert_eq!(\", stringify!($SelfT), \"::MAX.overflowing_add(1), (0, true));\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3648,10 +3442,7 @@ assert_eq!(0\", stringify!($SelfT), \".overflowing_sub(1), (\", stringify!($SelfT),\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3679,10 +3470,7 @@ $EndFeature, \"\n         /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));\n         /// ```\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[cfg_attr(\n-            not(bootstrap),\n-            rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\"),\n-        )]\n+        #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n         #[inline]\n@@ -3828,10 +3616,7 @@ assert_eq!(2\", stringify!($SelfT), \".overflowing_neg(), (-2i32 as \", stringify!(\n ```\"),\n             #[inline]\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n             pub const fn overflowing_neg(self) -> (Self, bool) {\n                 ((!self).wrapping_add(1), self != 0)\n             }\n@@ -3855,10 +3640,7 @@ Basic usage\n assert_eq!(0x1\", stringify!($SelfT), \".overflowing_shl(132), (0x10, true));\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3885,10 +3667,7 @@ Basic usage\n assert_eq!(0x10\", stringify!($SelfT), \".overflowing_shr(132), (0x1, true));\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -4054,10 +3833,7 @@ Basic usage:\n assert!(!10\", stringify!($SelfT), \".is_power_of_two());\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_is_power_of_two\", since = \"1.32.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_is_power_of_two\", since = \"1.32.0\")]\n             #[inline]\n             pub const fn is_power_of_two(self) -> bool {\n                 self.count_ones() == 1\n@@ -4169,11 +3945,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_be_bytes();\n assert_eq!(bytes, \", $be_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_int_conversion\"))]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\"),\n-            )]\n+            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n             #[inline]\n             pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_be().to_ne_bytes()\n@@ -4193,11 +3965,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_le_bytes();\n assert_eq!(bytes, \", $le_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_int_conversion\"))]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\"),\n-            )]\n+            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n             #[inline]\n             pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_le().to_ne_bytes()\n@@ -4232,11 +4000,7 @@ assert_eq!(\n );\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_int_conversion\"))]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\"),\n-            )]\n+            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 // SAFETY: integers are plain old datatypes so we can always transmute them to\n@@ -4270,11 +4034,7 @@ fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_int_conversion\"))]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\"),\n-            )]\n+            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n             #[inline]\n             pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_be(Self::from_ne_bytes(bytes))\n@@ -4307,11 +4067,7 @@ fn read_le_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_int_conversion\"))]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\"),\n-            )]\n+            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n             #[inline]\n             pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_le(Self::from_ne_bytes(bytes))\n@@ -4354,11 +4110,7 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_int_conversion\"))]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\"),\n-            )]\n+            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 // SAFETY: integers are plain old datatypes so we can always transmute to them"}, {"sha": "82fa6acfbd62a4b9e81fa71764003a32b31c4ff7", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -530,10 +530,7 @@ assert_eq!(n.trailing_zeros(), 3);\n             /// assert_eq!(m, Wrapping(-22016));\n             /// ```\n             #[stable(feature = \"reverse_bits\", since = \"1.37.0\")]\n-            #[cfg_attr(\n-                not(bootstrap),\n-                rustc_const_stable(feature = \"const_reverse_bits\", since = \"1.37.0\"),\n-            )]\n+            #[rustc_const_stable(feature = \"const_reverse_bits\", since = \"1.37.0\")]\n             #[inline]\n             #[must_use]\n             pub const fn reverse_bits(self) -> Self {"}, {"sha": "be6d8edb99f594f8df9b306df75bec2455581870", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -398,7 +398,7 @@ impl<Idx> RangeInclusive<Idx> {\n     #[stable(feature = \"inclusive_range_methods\", since = \"1.27.0\")]\n     #[inline]\n     #[rustc_promotable]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_range_new\", since = \"1.32.0\"))]\n+    #[rustc_const_stable(feature = \"const_range_new\", since = \"1.32.0\")]\n     pub const fn new(start: Idx, end: Idx) -> Self {\n         Self { start, end, is_empty: None }\n     }\n@@ -422,10 +422,7 @@ impl<Idx> RangeInclusive<Idx> {\n     /// assert_eq!((3..=5).start(), &3);\n     /// ```\n     #[stable(feature = \"inclusive_range_methods\", since = \"1.27.0\")]\n-    #[cfg_attr(\n-        not(bootstrap),\n-        rustc_const_stable(feature = \"const_inclusive_range_methods\", since = \"1.32.0\"),\n-    )]\n+    #[rustc_const_stable(feature = \"const_inclusive_range_methods\", since = \"1.32.0\")]\n     #[inline]\n     pub const fn start(&self) -> &Idx {\n         &self.start\n@@ -450,10 +447,7 @@ impl<Idx> RangeInclusive<Idx> {\n     /// assert_eq!((3..=5).end(), &5);\n     /// ```\n     #[stable(feature = \"inclusive_range_methods\", since = \"1.27.0\")]\n-    #[cfg_attr(\n-        not(bootstrap),\n-        rustc_const_stable(feature = \"const_inclusive_range_methods\", since = \"1.32.0\"),\n-    )]\n+    #[rustc_const_stable(feature = \"const_inclusive_range_methods\", since = \"1.32.0\")]\n     #[inline]\n     pub const fn end(&self) -> &Idx {\n         &self.end"}, {"sha": "996a01d413cbc1f03c0867cc7b32ac2e611171bb", "filename": "src/libcore/ops/try.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fops%2Ftry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fops%2Ftry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ftry.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -5,26 +5,23 @@\n /// extracting those success or failure values from an existing instance and\n /// creating a new instance from a success or failure value.\n #[unstable(feature = \"try_trait\", issue = \"42327\")]\n-#[cfg_attr(\n-    not(bootstrap),\n-    rustc_on_unimplemented(\n-        on(\n-            all(\n-                any(from_method = \"from_error\", from_method = \"from_ok\"),\n-                from_desugaring = \"QuestionMark\"\n-            ),\n-            message = \"the `?` operator can only be used in {ItemContext} \\\n-                       that returns `Result` or `Option` \\\n-                       (or another type that implements `{Try}`)\",\n-            label = \"cannot use the `?` operator in {ItemContext} that returns `{Self}`\",\n-            enclosing_scope = \"this function should return `Result` or `Option` to accept `?`\"\n+#[rustc_on_unimplemented(\n+    on(\n+        all(\n+            any(from_method = \"from_error\", from_method = \"from_ok\"),\n+            from_desugaring = \"QuestionMark\"\n         ),\n-        on(\n-            all(from_method = \"into_result\", from_desugaring = \"QuestionMark\"),\n-            message = \"the `?` operator can only be applied to values \\\n-                       that implement `{Try}`\",\n-            label = \"the `?` operator cannot be applied to type `{Self}`\"\n-        )\n+        message = \"the `?` operator can only be used in {ItemContext} \\\n+                    that returns `Result` or `Option` \\\n+                    (or another type that implements `{Try}`)\",\n+        label = \"cannot use the `?` operator in {ItemContext} that returns `{Self}`\",\n+        enclosing_scope = \"this function should return `Result` or `Option` to accept `?`\"\n+    ),\n+    on(\n+        all(from_method = \"into_result\", from_desugaring = \"QuestionMark\"),\n+        message = \"the `?` operator can only be applied to values \\\n+                    that implement `{Try}`\",\n+        label = \"the `?` operator cannot be applied to type `{Self}`\"\n     )\n )]\n #[doc(alias = \"?\")]"}, {"sha": "c9a1c4b0049491e87d4f826dc676a24a79b97a26", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -222,7 +222,6 @@ impl<'a> Location<'a> {\n     /// assert_ne!(this_location.line(), another_location.line());\n     /// assert_ne!(this_location.column(), another_location.column());\n     /// ```\n-    #[cfg(not(bootstrap))]\n     #[unstable(feature = \"track_caller\",\n                reason = \"uses #[track_caller] which is not yet stable\",\n                issue = \"47809\")]"}, {"sha": "776165e7bd70c12beb1a02a425f9a0e3ec9268fb", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -198,7 +198,7 @@ unsafe fn real_drop_in_place<T: ?Sized>(to_drop: &mut T) {\n #[inline(always)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n-#[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_ptr_null\", since = \"1.32.0\"))]\n+#[rustc_const_stable(feature = \"const_ptr_null\", since = \"1.32.0\")]\n pub const fn null<T>() -> *const T {\n     0 as *const T\n }\n@@ -216,7 +216,7 @@ pub const fn null<T>() -> *const T {\n #[inline(always)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n-#[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_ptr_null\", since = \"1.32.0\"))]\n+#[rustc_const_stable(feature = \"const_ptr_null\", since = \"1.32.0\")]\n pub const fn null_mut<T>() -> *mut T {\n     0 as *mut T\n }\n@@ -1062,7 +1062,7 @@ impl<T: ?Sized> *const T {\n \n     /// Casts to a pointer of another type.\n     #[stable(feature = \"ptr_cast\", since = \"1.38.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_ptr_cast\", since = \"1.38.0\"))]\n+    #[rustc_const_stable(feature = \"const_ptr_cast\", since = \"1.38.0\")]\n     #[inline]\n     pub const fn cast<U>(self) -> *const U {\n         self as _\n@@ -1310,11 +1310,7 @@ impl<T: ?Sized> *const T {\n     /// }\n     /// ```\n     #[unstable(feature = \"ptr_offset_from\", issue = \"41079\")]\n-    #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_ptr_offset_from\"))]\n-    #[cfg_attr(\n-        not(bootstrap),\n-        rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"41079\"),\n-    )]\n+    #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"41079\")]\n     #[inline]\n     pub const unsafe fn offset_from(self, origin: *const T) -> isize\n     where\n@@ -1770,7 +1766,7 @@ impl<T: ?Sized> *mut T {\n \n     /// Casts to a pointer of another type.\n     #[stable(feature = \"ptr_cast\", since = \"1.38.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_ptr_cast\", since = \"1.38.0\"))]\n+    #[rustc_const_stable(feature = \"const_ptr_cast\", since = \"1.38.0\")]\n     #[inline]\n     pub const fn cast<U>(self) -> *mut U {\n         self as _\n@@ -2057,11 +2053,7 @@ impl<T: ?Sized> *mut T {\n     /// }\n     /// ```\n     #[unstable(feature = \"ptr_offset_from\", issue = \"41079\")]\n-    #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_ptr_offset_from\"))]\n-    #[cfg_attr(\n-        not(bootstrap),\n-        rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"41079\"),\n-    )]\n+    #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"41079\")]\n     #[inline]\n     pub const unsafe fn offset_from(self, origin: *const T) -> isize\n     where"}, {"sha": "6946fd2413eb316e901c800ddbcb562b7d8f704f", "filename": "src/libcore/ptr/non_null.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fnon_null.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -66,10 +66,7 @@ impl<T: Sized> NonNull<T> {\n     /// sentinel value. Types that lazily allocate must track initialization by\n     /// some other means.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n-    #[cfg_attr(\n-        not(bootstrap),\n-        rustc_const_stable(feature = \"const_nonnull_dangling\", since = \"1.32.0\"),\n-    )]\n+    #[rustc_const_stable(feature = \"const_nonnull_dangling\", since = \"1.32.0\")]\n     #[inline]\n     pub const fn dangling() -> Self {\n         unsafe {\n@@ -86,10 +83,7 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// `ptr` must be non-null.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n-    #[cfg_attr(\n-        not(bootstrap),\n-        rustc_const_stable(feature = \"const_nonnull_new_unchecked\", since = \"1.32.0\"),\n-    )]\n+    #[rustc_const_stable(feature = \"const_nonnull_new_unchecked\", since = \"1.32.0\")]\n     #[inline]\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n         NonNull { pointer: ptr as _ }\n@@ -104,10 +98,7 @@ impl<T: ?Sized> NonNull<T> {\n \n     /// Acquires the underlying `*mut` pointer.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n-    #[cfg_attr(\n-        not(bootstrap),\n-        rustc_const_stable(feature = \"const_nonnull_as_ptr\", since = \"1.32.0\"),\n-    )]\n+    #[rustc_const_stable(feature = \"const_nonnull_as_ptr\", since = \"1.32.0\")]\n     #[inline]\n     pub const fn as_ptr(self) -> *mut T {\n         self.pointer as *mut T\n@@ -137,10 +128,7 @@ impl<T: ?Sized> NonNull<T> {\n \n     /// Casts to a pointer of another type.\n     #[stable(feature = \"nonnull_cast\", since = \"1.27.0\")]\n-    #[cfg_attr(\n-        not(bootstrap),\n-        rustc_const_stable(feature = \"const_nonnull_cast\", since = \"1.32.0\"),\n-    )]\n+    #[rustc_const_stable(feature = \"const_nonnull_cast\", since = \"1.32.0\")]\n     #[inline]\n     pub const fn cast<U>(self) -> NonNull<U> {\n         unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }"}, {"sha": "05baa1899b3e0f2fa452f1516bdb2c16f970b92b", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -62,7 +62,7 @@ impl<T> [T] {\n     /// assert_eq!(a.len(), 3);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_slice_len\", since = \"1.32.0\"))]\n+    #[rustc_const_stable(feature = \"const_slice_len\", since = \"1.32.0\")]\n     #[inline]\n     // SAFETY: const sound because we transmute out the length field as a usize (which it must be)\n     #[allow(unused_attributes)]\n@@ -82,10 +82,7 @@ impl<T> [T] {\n     /// assert!(!a.is_empty());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(\n-        not(bootstrap),\n-        rustc_const_stable(feature = \"const_slice_is_empty\", since = \"1.32.0\"),\n-    )]\n+    #[rustc_const_stable(feature = \"const_slice_is_empty\", since = \"1.32.0\")]\n     #[inline]\n     pub const fn is_empty(&self) -> bool {\n         self.len() == 0\n@@ -381,10 +378,7 @@ impl<T> [T] {\n     ///\n     /// [`as_mut_ptr`]: #method.as_mut_ptr\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(\n-        not(bootstrap),\n-        rustc_const_stable(feature = \"const_slice_as_ptr\", since = \"1.32.0\"),\n-    )]\n+    #[rustc_const_stable(feature = \"const_slice_as_ptr\", since = \"1.32.0\")]\n     #[inline]\n     pub const fn as_ptr(&self) -> *const T {\n         self as *const [T] as *const T"}, {"sha": "3da992dca30eefcebd46d61f6796cd7f09c9963c", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -2090,7 +2090,7 @@ impl str {\n     /// assert_eq!(\"\u0192oo\".chars().count(), 3);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_str_len\", since = \"1.32.0\"))]\n+    #[rustc_const_stable(feature = \"const_str_len\", since = \"1.32.0\")]\n     #[inline]\n     pub const fn len(&self) -> usize {\n         self.as_bytes().len()\n@@ -2111,10 +2111,7 @@ impl str {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(\n-        not(bootstrap),\n-        rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.32.0\"),\n-    )]\n+    #[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.32.0\")]\n     pub const fn is_empty(&self) -> bool {\n         self.len() == 0\n     }\n@@ -2171,7 +2168,7 @@ impl str {\n     /// assert_eq!(b\"bors\", bytes);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"str_as_bytes\", since = \"1.32.0\"))]\n+    #[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.32.0\")]\n     #[inline(always)]\n     // SAFETY: const sound because we transmute two types with the same layout\n     #[allow(unused_attributes)]\n@@ -2245,7 +2242,7 @@ impl str {\n     /// let ptr = s.as_ptr();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\"))]\n+    #[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]\n     #[inline]\n     pub const fn as_ptr(&self) -> *const u8 {\n         self as *const str as *const u8"}, {"sha": "1f09895597a872efb44b3504d691b2eab5a15f80", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -331,7 +331,7 @@ impl AtomicBool {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_atomic_new\", since = \"1.32.0\"))]\n+    #[rustc_const_stable(feature = \"const_atomic_new\", since = \"1.32.0\")]\n     pub const fn new(v: bool) -> AtomicBool {\n         AtomicBool { v: UnsafeCell::new(v as u8) }\n     }\n@@ -856,7 +856,7 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_atomic_new\", since = \"1.32.0\"))]\n+    #[rustc_const_stable(feature = \"const_atomic_new\", since = \"1.32.0\")]\n     pub const fn new(p: *mut T) -> AtomicPtr<T> {\n         AtomicPtr { p: UnsafeCell::new(p) }\n     }\n@@ -1261,7 +1261,7 @@ let atomic_forty_two = \", stringify!($atomic_type), \"::new(42);\n ```\"),\n                 #[inline]\n                 #[$stable]\n-                #[cfg_attr(not(bootstrap), $const_stable)]\n+                #[$const_stable]\n                 pub const fn new(v: $int_type) -> Self {\n                     Self {v: UnsafeCell::new(v)}\n                 }"}, {"sha": "b070b665b4d09be4b447956284687990523428f1", "filename": "src/libcore/task/wake.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fwake.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -39,7 +39,7 @@ impl RawWaker {\n     /// function in the `vtable` of the underlying `RawWaker` will be called.\n     #[rustc_promotable]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"futures_api\", since = \"1.36.0\"))]\n+    #[rustc_const_stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub const fn new(data: *const (), vtable: &'static RawWakerVTable) -> RawWaker {\n         RawWaker { data, vtable }\n     }\n@@ -152,7 +152,7 @@ impl RawWakerVTable {\n     // FIXME: remove whenever we have a stable way to accept fn pointers from const fn\n     // (see https://github.com/rust-rfcs/const-eval/issues/19#issuecomment-472799062)\n     #[rustc_allow_const_fn_ptr]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"futures_api\", since = \"1.36.0\"))]\n+    #[rustc_const_stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub const fn new(\n         clone: unsafe fn(*const ()) -> RawWaker,\n         wake: unsafe fn(*const ()),"}, {"sha": "c1d405239f96f6541d462efbcbc045e0cc44640d", "filename": "src/libcore/time.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -130,7 +130,7 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\"))]\n+    #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n     pub fn new(secs: u64, nanos: u32) -> Duration {\n         let secs =\n             secs.checked_add((nanos / NANOS_PER_SEC) as u64).expect(\"overflow in Duration::new\");\n@@ -153,7 +153,7 @@ impl Duration {\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n     #[rustc_promotable]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\"))]\n+    #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n     pub const fn from_secs(secs: u64) -> Duration {\n         Duration { secs, nanos: 0 }\n     }\n@@ -173,7 +173,7 @@ impl Duration {\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n     #[rustc_promotable]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\"))]\n+    #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n     pub const fn from_millis(millis: u64) -> Duration {\n         Duration {\n             secs: millis / MILLIS_PER_SEC,\n@@ -196,7 +196,7 @@ impl Duration {\n     #[stable(feature = \"duration_from_micros\", since = \"1.27.0\")]\n     #[inline]\n     #[rustc_promotable]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\"))]\n+    #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n     pub const fn from_micros(micros: u64) -> Duration {\n         Duration {\n             secs: micros / MICROS_PER_SEC,\n@@ -219,7 +219,7 @@ impl Duration {\n     #[stable(feature = \"duration_extras\", since = \"1.27.0\")]\n     #[inline]\n     #[rustc_promotable]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\"))]\n+    #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n     pub const fn from_nanos(nanos: u64) -> Duration {\n         Duration {\n             secs: nanos / (NANOS_PER_SEC as u64),\n@@ -256,7 +256,7 @@ impl Duration {\n     ///\n     /// [`subsec_nanos`]: #method.subsec_nanos\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"duration\", since = \"1.32.0\"))]\n+    #[rustc_const_stable(feature = \"duration\", since = \"1.32.0\")]\n     #[inline]\n     pub const fn as_secs(&self) -> u64 {\n         self.secs\n@@ -278,7 +278,7 @@ impl Duration {\n     /// assert_eq!(duration.subsec_millis(), 432);\n     /// ```\n     #[stable(feature = \"duration_extras\", since = \"1.27.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"duration_extras\", since = \"1.32.0\"))]\n+    #[rustc_const_stable(feature = \"duration_extras\", since = \"1.32.0\")]\n     #[inline]\n     pub const fn subsec_millis(&self) -> u32 {\n         self.nanos / NANOS_PER_MILLI\n@@ -300,7 +300,7 @@ impl Duration {\n     /// assert_eq!(duration.subsec_micros(), 234_567);\n     /// ```\n     #[stable(feature = \"duration_extras\", since = \"1.27.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"duration_extras\", since = \"1.32.0\"))]\n+    #[rustc_const_stable(feature = \"duration_extras\", since = \"1.32.0\")]\n     #[inline]\n     pub const fn subsec_micros(&self) -> u32 {\n         self.nanos / NANOS_PER_MICRO\n@@ -322,7 +322,7 @@ impl Duration {\n     /// assert_eq!(duration.subsec_nanos(), 10_000_000);\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"duration\", since = \"1.32.0\"))]\n+    #[rustc_const_stable(feature = \"duration\", since = \"1.32.0\")]\n     #[inline]\n     pub const fn subsec_nanos(&self) -> u32 {\n         self.nanos\n@@ -339,7 +339,7 @@ impl Duration {\n     /// assert_eq!(duration.as_millis(), 5730);\n     /// ```\n     #[stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"duration_as_u128\", since = \"1.33.0\"))]\n+    #[rustc_const_stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n     #[inline]\n     pub const fn as_millis(&self) -> u128 {\n         self.secs as u128 * MILLIS_PER_SEC as u128 + (self.nanos / NANOS_PER_MILLI) as u128\n@@ -356,7 +356,7 @@ impl Duration {\n     /// assert_eq!(duration.as_micros(), 5730023);\n     /// ```\n     #[stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"duration_as_u128\", since = \"1.33.0\"))]\n+    #[rustc_const_stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n     #[inline]\n     pub const fn as_micros(&self) -> u128 {\n         self.secs as u128 * MICROS_PER_SEC as u128 + (self.nanos / NANOS_PER_MICRO) as u128\n@@ -373,7 +373,7 @@ impl Duration {\n     /// assert_eq!(duration.as_nanos(), 5730023852);\n     /// ```\n     #[stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"duration_as_u128\", since = \"1.33.0\"))]\n+    #[rustc_const_stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n     #[inline]\n     pub const fn as_nanos(&self) -> u128 {\n         self.secs as u128 * NANOS_PER_SEC as u128 + self.nanos as u128"}, {"sha": "10c6a349ec80134d4e092475564c6312351b908d", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -76,9 +76,6 @@ pub fn encode_with_shorthand<E, T, M>(encoder: &mut E,\n \n     // The shorthand encoding uses the same usize as the\n     // discriminant, with an offset so they can't conflict.\n-    #[cfg(bootstrap)]\n-    let discriminant = unsafe { intrinsics::discriminant_value(variant) };\n-    #[cfg(not(bootstrap))]\n     let discriminant = intrinsics::discriminant_value(variant);\n     assert!(discriminant < SHORTHAND_OFFSET as u64);\n     let shorthand = start + SHORTHAND_OFFSET;"}, {"sha": "05008958ed2f00dc35edf7fa848e92317ba1baa9", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -1065,8 +1065,7 @@ impl CStr {\n     /// ```\n     #[inline]\n     #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n-    #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_cstr_unchecked\"))]\n-    #[cfg_attr(not(bootstrap), rustc_const_unstable(feature = \"const_cstr_unchecked\", issue = \"0\"))]\n+    #[rustc_const_unstable(feature = \"const_cstr_unchecked\", issue = \"0\")]\n     pub const unsafe fn from_bytes_with_nul_unchecked(bytes: &[u8]) -> &CStr {\n         &*(bytes as *const [u8] as *const CStr)\n     }\n@@ -1120,7 +1119,7 @@ impl CStr {\n     /// [`CString`]: struct.CString.html\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_str_as_ptr\", since = \"1.32.0\"))]\n+    #[rustc_const_stable(feature = \"const_str_as_ptr\", since = \"1.32.0\")]\n     pub const fn as_ptr(&self) -> *const c_char {\n         self.inner.as_ptr()\n     }"}, {"sha": "340313b06dd4072cfb6541ebc5ad2a4e253186b2", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -283,7 +283,6 @@\n #![feature(needs_panic_runtime)]\n #![feature(never_type)]\n #![feature(nll)]\n-#![cfg_attr(bootstrap, feature(on_unimplemented))]\n #![feature(optin_builtin_traits)]\n #![feature(panic_info_message)]\n #![feature(panic_internals)]\n@@ -293,7 +292,6 @@\n #![feature(raw)]\n #![feature(renamed_spin_loop)]\n #![feature(rustc_attrs)]\n-#![cfg_attr(bootstrap, feature(rustc_const_unstable))]\n #![feature(rustc_private)]\n #![feature(shrink_to)]\n #![feature(slice_concat_ext)]"}, {"sha": "9e24d707f77b544c4bfe71dfe6ee5453fff05f54", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -319,7 +319,7 @@ impl Ipv4Addr {\n     /// let addr = Ipv4Addr::new(127, 0, 0, 1);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_ipv4\", since = \"1.32.0\"))]\n+    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.32.0\")]\n     pub const fn new(a: u8, b: u8, c: u8, d: u8) -> Ipv4Addr {\n         // FIXME: should just be u32::from_be_bytes([a, b, c, d]),\n         // once that method is no longer rustc_const_unstable\n@@ -407,7 +407,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(45, 22, 13, 197).is_unspecified(), false);\n     /// ```\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_ipv4\", since = \"1.32.0\"))]\n+    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.32.0\")]\n     pub const fn is_unspecified(&self) -> bool {\n         self.inner.s_addr == 0\n     }\n@@ -1017,7 +1017,7 @@ impl Ipv6Addr {\n     /// let addr = Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_ipv6\", since = \"1.32.0\"))]\n+    #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.32.0\")]\n     pub const fn new(a: u16, b: u16, c: u16, d: u16, e: u16, f: u16,\n                      g: u16, h: u16) -> Ipv6Addr {\n         Ipv6Addr {\n@@ -1483,7 +1483,7 @@ impl Ipv6Addr {\n     ///            [255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n     /// ```\n     #[stable(feature = \"ipv6_to_octets\", since = \"1.12.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_ipv6\", since = \"1.32.0\"))]\n+    #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.32.0\")]\n     pub const fn octets(&self) -> [u8; 16] {\n         self.inner.s6_addr\n     }"}, {"sha": "61c4d0c2dbfbab51aa10500a1939fbd2982c3e7d", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -188,7 +188,7 @@ struct WaiterQueue<'a> {\n impl Once {\n     /// Creates a new `Once` value.\n     #[stable(feature = \"once_new\", since = \"1.2.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_once_new\", since = \"1.32.0\"))]\n+    #[rustc_const_stable(feature = \"const_once_new\", since = \"1.32.0\")]\n     pub const fn new() -> Once {\n         Once { state_and_queue: AtomicUsize::new(INCOMPLETE), _marker: marker::PhantomData }\n     }"}, {"sha": "dc3d5789d1b55ab092eea590b71b1aeda3c571c1", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82184440ecd33e87cd03a8f7c70af2ad95d5400f/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=82184440ecd33e87cd03a8f7c70af2ad95d5400f", "patch": "@@ -85,7 +85,6 @@ macro_rules! ast_fragments {\n                     $($(AstFragment::$Kind(ast) => ast.extend(placeholders.iter().flat_map(|id| {\n                         // We are repeating through arguments with `many`, to do that we have to\n                         // mention some macro variable from those arguments even if it's not used.\n-                        #[cfg_attr(bootstrap, allow(unused_macros))]\n                         macro _repeating($flat_map_ast_elt) {}\n                         placeholder(AstFragmentKind::$Kind, *id, None).$make_ast()\n                     })),)?)*"}]}