{"sha": "3dc8a3695825a8f7c5375d2560bc58573326699d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYzhhMzY5NTgyNWE4ZjdjNTM3NWQyNTYwYmM1ODU3MzMyNjY5OWQ=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-08-07T01:11:44Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-08-08T02:03:44Z"}, "message": "Eliminate `librustc_hir`'s dependency on `librustc_session`.", "tree": {"sha": "e0aa387fe4ce69b26abfa0e7be4dd8e1b7c15016", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0aa387fe4ce69b26abfa0e7be4dd8e1b7c15016"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dc8a3695825a8f7c5375d2560bc58573326699d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dc8a3695825a8f7c5375d2560bc58573326699d", "html_url": "https://github.com/rust-lang/rust/commit/3dc8a3695825a8f7c5375d2560bc58573326699d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dc8a3695825a8f7c5375d2560bc58573326699d/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e539dd65f8ba80837f7477c0547c61514bceb3ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/e539dd65f8ba80837f7477c0547c61514bceb3ad", "html_url": "https://github.com/rust-lang/rust/commit/e539dd65f8ba80837f7477c0547c61514bceb3ad"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "a3b37465f1a7dbcca43e52abeb6115a1b60c85bb", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3dc8a3695825a8f7c5375d2560bc58573326699d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3dc8a3695825a8f7c5375d2560bc58573326699d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3dc8a3695825a8f7c5375d2560bc58573326699d", "patch": "@@ -3466,7 +3466,6 @@ dependencies = [\n  \"rustc_index\",\n  \"rustc_macros\",\n  \"rustc_serialize\",\n- \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"smallvec 1.4.0\","}, {"sha": "4a404e176e148de43a4c580a186901d794064a9b", "filename": "src/librustc_hir/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3dc8a3695825a8f7c5375d2560bc58573326699d/src%2Flibrustc_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3dc8a3695825a8f7c5375d2560bc58573326699d/src%2Flibrustc_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2FCargo.toml?ref=3dc8a3695825a8f7c5375d2560bc58573326699d", "patch": "@@ -16,7 +16,6 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_serialize = { path = \"../librustc_serialize\" }\n-rustc_session = { path = \"../librustc_session\" }\n rustc_ast = { path = \"../librustc_ast\" }\n lazy_static = \"1\"\n log = { package = \"tracing\", version = \"0.1\" }"}, {"sha": "7f473a458481f853975d3bef708668b4442101ed", "filename": "src/librustc_hir/lang_items.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3dc8a3695825a8f7c5375d2560bc58573326699d/src%2Flibrustc_hir%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc8a3695825a8f7c5375d2560bc58573326699d/src%2Flibrustc_hir%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flang_items.rs?ref=3dc8a3695825a8f7c5375d2560bc58573326699d", "patch": "@@ -16,7 +16,6 @@ use rustc_ast::ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_macros::HashStable_Generic;\n-use rustc_session::Session;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n \n@@ -142,12 +141,20 @@ impl<CTX> HashStable<CTX> for LangItem {\n /// Extracts the first `lang = \"$name\"` out of a list of attributes.\n /// The attributes `#[panic_handler]` and `#[alloc_error_handler]`\n /// are also extracted out when found.\n-pub fn extract(sess: &Session, attrs: &[ast::Attribute]) -> Option<(Symbol, Span)> {\n+///\n+/// About the `check_name` argument: passing in a `Session` would be simpler,\n+/// because then we could call `Session::check_name` directly. But we want to\n+/// avoid the need for `librustc_hir` to depend on `librustc_session`, so we\n+/// use a closure instead.\n+pub fn extract<'a, F>(check_name: F, attrs: &'a [ast::Attribute]) -> Option<(Symbol, Span)>\n+where\n+    F: Fn(&'a ast::Attribute, Symbol) -> bool,\n+{\n     attrs.iter().find_map(|attr| {\n         Some(match attr {\n-            _ if sess.check_name(attr, sym::lang) => (attr.value_str()?, attr.span),\n-            _ if sess.check_name(attr, sym::panic_handler) => (sym::panic_impl, attr.span),\n-            _ if sess.check_name(attr, sym::alloc_error_handler) => (sym::oom, attr.span),\n+            _ if check_name(attr, sym::lang) => (attr.value_str()?, attr.span),\n+            _ if check_name(attr, sym::panic_handler) => (sym::panic_impl, attr.span),\n+            _ if check_name(attr, sym::alloc_error_handler) => (sym::oom, attr.span),\n             _ => return None,\n         })\n     })"}, {"sha": "fd64361cb3540009ed34389ce63feb292509e82d", "filename": "src/librustc_hir/weak_lang_items.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3dc8a3695825a8f7c5375d2560bc58573326699d/src%2Flibrustc_hir%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc8a3695825a8f7c5375d2560bc58573326699d/src%2Flibrustc_hir%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fweak_lang_items.rs?ref=3dc8a3695825a8f7c5375d2560bc58573326699d", "patch": "@@ -5,7 +5,6 @@ use crate::{lang_items, LangItem, LanguageItems};\n \n use rustc_ast::ast;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n \n use lazy_static::lazy_static;\n@@ -21,8 +20,13 @@ lazy_static! {\n     };\n }\n \n-pub fn link_name(sess: &Session, attrs: &[ast::Attribute]) -> Option<Symbol> {\n-    lang_items::extract(sess, attrs).and_then(|(name, _)| {\n+/// The `check_name` argument avoids the need for `librustc_hir` to depend on\n+/// `librustc_session`.\n+pub fn link_name<'a, F>(check_name: F, attrs: &'a [ast::Attribute]) -> Option<Symbol>\n+where\n+    F: Fn(&'a ast::Attribute, Symbol) -> bool\n+{\n+    lang_items::extract(check_name, attrs).and_then(|(name, _)| {\n         $(if name == sym::$name {\n             Some(sym::$sym)\n         } else)* {"}, {"sha": "07415870549f172d1021ae1578915bf994548142", "filename": "src/librustc_passes/lang_items.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3dc8a3695825a8f7c5375d2560bc58573326699d/src%2Flibrustc_passes%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc8a3695825a8f7c5375d2560bc58573326699d/src%2Flibrustc_passes%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flang_items.rs?ref=3dc8a3695825a8f7c5375d2560bc58573326699d", "patch": "@@ -56,7 +56,8 @@ impl LanguageItemCollector<'tcx> {\n     }\n \n     fn check_for_lang(&mut self, actual_target: Target, hir_id: HirId, attrs: &[Attribute]) {\n-        if let Some((value, span)) = extract(&self.tcx.sess, &attrs) {\n+        let check_name = |attr, sym| self.tcx.sess.check_name(attr, sym);\n+        if let Some((value, span)) = extract(check_name, &attrs) {\n             match ITEM_REFS.get(&value).cloned() {\n                 // Known lang item with attribute on correct target.\n                 Some((item_index, expected_target)) if actual_target == expected_target => {"}, {"sha": "2749b96bc85397be96a045dfdef9534701ae5c0b", "filename": "src/librustc_passes/weak_lang_items.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3dc8a3695825a8f7c5375d2560bc58573326699d/src%2Flibrustc_passes%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc8a3695825a8f7c5375d2560bc58573326699d/src%2Flibrustc_passes%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fweak_lang_items.rs?ref=3dc8a3695825a8f7c5375d2560bc58573326699d", "patch": "@@ -100,7 +100,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n     }\n \n     fn visit_foreign_item(&mut self, i: &hir::ForeignItem<'_>) {\n-        if let Some((lang_item, _)) = hir::lang_items::extract(&self.tcx.sess, &i.attrs) {\n+        let check_name = |attr, sym| self.tcx.sess.check_name(attr, sym);\n+        if let Some((lang_item, _)) = hir::lang_items::extract(check_name, &i.attrs) {\n             self.register(lang_item, i.span, i.hir_id);\n         }\n         intravisit::walk_foreign_item(self, i)"}, {"sha": "34ce7ca31c06f9bc723fb72df79a142df9cdd5c7", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3dc8a3695825a8f7c5375d2560bc58573326699d/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc8a3695825a8f7c5375d2560bc58573326699d/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=3dc8a3695825a8f7c5375d2560bc58573326699d", "patch": "@@ -2614,7 +2614,8 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     if tcx.is_weak_lang_item(id) {\n         codegen_fn_attrs.flags |= CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL;\n     }\n-    if let Some(name) = weak_lang_items::link_name(&tcx.sess, &attrs) {\n+    let check_name = |attr, sym| tcx.sess.check_name(attr, sym);\n+    if let Some(name) = weak_lang_items::link_name(check_name, &attrs) {\n         codegen_fn_attrs.export_name = Some(name);\n         codegen_fn_attrs.link_name = Some(name);\n     }"}]}