{"sha": "becec6d01e22e28137019b4cd7f142cb76ec39af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlY2VjNmQwMWUyMmUyODEzNzAxOWI0Y2Q3ZjE0MmNiNzZlYzM5YWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-01T02:45:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-01T02:45:26Z"}, "message": "Auto merge of #77875 - poliorcetics:more-intra-doc-links, r=jyn514\n\nMore intra doc links\n\nHelps with #75080.\n\nI did a commit by group of file, I can squash if wanted.\n\n`@rustbot` modify labels: T-doc, A-intra-doc-links\n\nr? `@jyn514`", "tree": {"sha": "29bf74316fb7a9a600d17213cf7a32cd7bf0496f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29bf74316fb7a9a600d17213cf7a32cd7bf0496f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/becec6d01e22e28137019b4cd7f142cb76ec39af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/becec6d01e22e28137019b4cd7f142cb76ec39af", "html_url": "https://github.com/rust-lang/rust/commit/becec6d01e22e28137019b4cd7f142cb76ec39af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/becec6d01e22e28137019b4cd7f142cb76ec39af/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7ebc6b0c1ba3c27ebb17c0b496ece778ef11e18", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7ebc6b0c1ba3c27ebb17c0b496ece778ef11e18", "html_url": "https://github.com/rust-lang/rust/commit/b7ebc6b0c1ba3c27ebb17c0b496ece778ef11e18"}, {"sha": "5bdd6409139193ad73d991cba0ee8354457fa99a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bdd6409139193ad73d991cba0ee8354457fa99a", "html_url": "https://github.com/rust-lang/rust/commit/5bdd6409139193ad73d991cba0ee8354457fa99a"}], "stats": {"total": 100, "additions": 47, "deletions": 53}, "files": [{"sha": "c7a76d33a6666381dcab93efc9f85312c16c6ac4", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/becec6d01e22e28137019b4cd7f142cb76ec39af/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/becec6d01e22e28137019b4cd7f142cb76ec39af/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=becec6d01e22e28137019b4cd7f142cb76ec39af", "patch": "@@ -929,7 +929,7 @@ impl<T: ?Sized> RefCell<T> {\n     /// Also, please be aware that this method is only for special circumstances and is usually\n     /// not what you want. In case of doubt, use [`borrow_mut`] instead.\n     ///\n-    /// [`borrow_mut`]: #method.borrow_mut\n+    /// [`borrow_mut`]: RefCell::borrow_mut()\n     ///\n     /// # Examples\n     ///\n@@ -953,7 +953,7 @@ impl<T: ?Sized> RefCell<T> {\n     /// ensure no borrows exist and then resets the state tracking shared borrows. This is relevant\n     /// if some `Ref` or `RefMut` borrows have been leaked.\n     ///\n-    /// [`get_mut`]: #method.get_mut\n+    /// [`get_mut`]: RefCell::get_mut()\n     ///\n     /// # Examples\n     ///\n@@ -1745,7 +1745,7 @@ impl<T: ?Sized> UnsafeCell<T> {\n     /// when casting to `&mut T`, and ensure that there are no mutations\n     /// or mutable aliases going on when casting to `&T`.\n     ///\n-    /// [`get`]: #method.get\n+    /// [`get`]: UnsafeCell::get()\n     ///\n     /// # Examples\n     ///"}, {"sha": "2baea7842a796ed12293d701b8e872f66d0d49d7", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/becec6d01e22e28137019b4cd7f142cb76ec39af/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/becec6d01e22e28137019b4cd7f142cb76ec39af/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=becec6d01e22e28137019b4cd7f142cb76ec39af", "patch": "@@ -109,8 +109,6 @@ impl char {\n     /// `char`s. `from_u32()` will return `None` if the input is not a valid value\n     /// for a `char`.\n     ///\n-    /// [`u32`]: primitive.u32.html\n-    ///\n     /// For an unsafe version of this function which ignores these checks, see\n     /// [`from_u32_unchecked`].\n     ///\n@@ -159,8 +157,6 @@ impl char {\n     /// `char`s. `from_u32_unchecked()` will ignore this, and blindly cast to\n     /// `char`, possibly creating an invalid one.\n     ///\n-    /// [`u32`]: primitive.u32.html\n-    ///\n     /// # Safety\n     ///\n     /// This function is unsafe, as it may construct invalid `char` values.\n@@ -249,7 +245,7 @@ impl char {\n     /// sixteen, hexadecimal, to give some common values. Arbitrary\n     /// radices are supported.\n     ///\n-    /// Compared to `is_numeric()`, this function only recognizes the characters\n+    /// Compared to [`is_numeric()`], this function only recognizes the characters\n     /// `0-9`, `a-z` and `A-Z`.\n     ///\n     /// 'Digit' is defined to be only the following characters:\n@@ -258,9 +254,9 @@ impl char {\n     /// * `a-z`\n     /// * `A-Z`\n     ///\n-    /// For a more comprehensive understanding of 'digit', see [`is_numeric`][is_numeric].\n+    /// For a more comprehensive understanding of 'digit', see [`is_numeric()`].\n     ///\n-    /// [is_numeric]: #method.is_numeric\n+    /// [`is_numeric()`]: #method.is_numeric\n     ///\n     /// # Panics\n     ///\n@@ -483,9 +479,9 @@ impl char {\n     /// * Any character in the 'printable ASCII' range `0x20` .. `0x7e`\n     ///   inclusive is not escaped.\n     /// * All other characters are given hexadecimal Unicode escapes; see\n-    ///   [`escape_unicode`][escape_unicode].\n+    ///   [`escape_unicode`].\n     ///\n-    /// [escape_unicode]: #method.escape_unicode\n+    /// [`escape_unicode`]: #method.escape_unicode\n     ///\n     /// # Examples\n     ///\n@@ -504,7 +500,6 @@ impl char {\n     /// println!(\"{}\", '\"'.escape_default());\n     /// ```\n     ///\n-    ///\n     /// Both are equivalent to:\n     ///\n     /// ```\n@@ -584,10 +579,10 @@ impl char {\n     /// Returns the number of 16-bit code units this `char` would need if\n     /// encoded in UTF-16.\n     ///\n-    /// See the documentation for [`len_utf8`] for more explanation of this\n+    /// See the documentation for [`len_utf8()`] for more explanation of this\n     /// concept. This function is a mirror, but for UTF-16 instead of UTF-8.\n     ///\n-    /// [`len_utf8`]: #method.len_utf8\n+    /// [`len_utf8()`]: #method.len_utf8\n     ///\n     /// # Examples\n     ///\n@@ -1075,10 +1070,10 @@ impl char {\n     /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n     /// but non-ASCII letters are unchanged.\n     ///\n-    /// To uppercase the value in-place, use [`make_ascii_uppercase`].\n+    /// To uppercase the value in-place, use [`make_ascii_uppercase()`].\n     ///\n     /// To uppercase ASCII characters in addition to non-ASCII characters, use\n-    /// [`to_uppercase`].\n+    /// [`to_uppercase()`].\n     ///\n     /// # Examples\n     ///\n@@ -1090,8 +1085,8 @@ impl char {\n     /// assert_eq!('\u2764', non_ascii.to_ascii_uppercase());\n     /// ```\n     ///\n-    /// [`make_ascii_uppercase`]: #method.make_ascii_uppercase\n-    /// [`to_uppercase`]: #method.to_uppercase\n+    /// [`make_ascii_uppercase()`]: #method.make_ascii_uppercase\n+    /// [`to_uppercase()`]: #method.to_uppercase\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_uppercase(&self) -> char {\n@@ -1103,10 +1098,10 @@ impl char {\n     /// ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\n     /// but non-ASCII letters are unchanged.\n     ///\n-    /// To lowercase the value in-place, use [`make_ascii_lowercase`].\n+    /// To lowercase the value in-place, use [`make_ascii_lowercase()`].\n     ///\n     /// To lowercase ASCII characters in addition to non-ASCII characters, use\n-    /// [`to_lowercase`].\n+    /// [`to_lowercase()`].\n     ///\n     /// # Examples\n     ///\n@@ -1118,8 +1113,8 @@ impl char {\n     /// assert_eq!('\u2764', non_ascii.to_ascii_lowercase());\n     /// ```\n     ///\n-    /// [`make_ascii_lowercase`]: #method.make_ascii_lowercase\n-    /// [`to_lowercase`]: #method.to_lowercase\n+    /// [`make_ascii_lowercase()`]: #method.make_ascii_lowercase\n+    /// [`to_lowercase()`]: #method.to_lowercase\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_lowercase(&self) -> char {\n@@ -1153,7 +1148,7 @@ impl char {\n     /// but non-ASCII letters are unchanged.\n     ///\n     /// To return a new uppercased value without modifying the existing one, use\n-    /// [`to_ascii_uppercase`].\n+    /// [`to_ascii_uppercase()`].\n     ///\n     /// # Examples\n     ///\n@@ -1165,7 +1160,7 @@ impl char {\n     /// assert_eq!('A', ascii);\n     /// ```\n     ///\n-    /// [`to_ascii_uppercase`]: #method.to_ascii_uppercase\n+    /// [`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn make_ascii_uppercase(&mut self) {\n@@ -1178,7 +1173,7 @@ impl char {\n     /// but non-ASCII letters are unchanged.\n     ///\n     /// To return a new lowercased value without modifying the existing one, use\n-    /// [`to_ascii_lowercase`].\n+    /// [`to_ascii_lowercase()`].\n     ///\n     /// # Examples\n     ///\n@@ -1190,7 +1185,7 @@ impl char {\n     /// assert_eq!('a', ascii);\n     /// ```\n     ///\n-    /// [`to_ascii_lowercase`]: #method.to_ascii_lowercase\n+    /// [`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn make_ascii_lowercase(&mut self) {"}, {"sha": "29e191db0f62f6307687685b3587617fc614bd43", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/becec6d01e22e28137019b4cd7f142cb76ec39af/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/becec6d01e22e28137019b4cd7f142cb76ec39af/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=becec6d01e22e28137019b4cd7f142cb76ec39af", "patch": "@@ -120,8 +120,7 @@ where\n /// This `struct` is created by the [`flatten`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`flatten`]: Iterator::flatten\n-/// [`Iterator`]: trait.Iterator.html\n+/// [`flatten`]: Iterator::flatten()\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n pub struct Flatten<I: Iterator<Item: IntoIterator>> {"}, {"sha": "b8d3430f91099a82adf33b25d2c0410f2d5c3382", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/becec6d01e22e28137019b4cd7f142cb76ec39af/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/becec6d01e22e28137019b4cd7f142cb76ec39af/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=becec6d01e22e28137019b4cd7f142cb76ec39af", "patch": "@@ -110,7 +110,7 @@ pub unsafe trait SourceIter {\n     /// * whatever remains in the source after iteration has stopped\n     /// * the memory that has become unused by advancing a consuming iterator\n     ///\n-    /// [`next()`]: Iterator::next\n+    /// [`next()`]: Iterator::next()\n     unsafe fn as_inner(&mut self) -> &mut Self::Source;\n }\n "}, {"sha": "8fd9ff768c4f4a4a23f027ad54445391d30a4e41", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/becec6d01e22e28137019b4cd7f142cb76ec39af/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/becec6d01e22e28137019b4cd7f142cb76ec39af/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=becec6d01e22e28137019b4cd7f142cb76ec39af", "patch": "@@ -723,7 +723,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// See [`ptr::read`] for safety concerns and examples.\n     ///\n-    /// [`ptr::read`]: ./ptr/fn.read.html\n+    /// [`ptr::read`]: crate::ptr::read()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn read(self) -> T\n@@ -743,7 +743,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// See [`ptr::read_volatile`] for safety concerns and examples.\n     ///\n-    /// [`ptr::read_volatile`]: ./ptr/fn.read_volatile.html\n+    /// [`ptr::read_volatile`]: crate::ptr::read_volatile()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn read_volatile(self) -> T\n@@ -761,7 +761,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// See [`ptr::read_unaligned`] for safety concerns and examples.\n     ///\n-    /// [`ptr::read_unaligned`]: ./ptr/fn.read_unaligned.html\n+    /// [`ptr::read_unaligned`]: crate::ptr::read_unaligned()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn read_unaligned(self) -> T\n@@ -779,7 +779,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// See [`ptr::copy`] for safety concerns and examples.\n     ///\n-    /// [`ptr::copy`]: ./ptr/fn.copy.html\n+    /// [`ptr::copy`]: crate::ptr::copy()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn copy_to(self, dest: *mut T, count: usize)\n@@ -797,7 +797,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// See [`ptr::copy_nonoverlapping`] for safety concerns and examples.\n     ///\n-    /// [`ptr::copy_nonoverlapping`]: ./ptr/fn.copy_nonoverlapping.html\n+    /// [`ptr::copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn copy_to_nonoverlapping(self, dest: *mut T, count: usize)"}, {"sha": "5f94c2393aef33b90c0fe3b8666bc7ea1d77f4a3", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/becec6d01e22e28137019b4cd7f142cb76ec39af/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/becec6d01e22e28137019b4cd7f142cb76ec39af/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=becec6d01e22e28137019b4cd7f142cb76ec39af", "patch": "@@ -830,7 +830,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::read`] for safety concerns and examples.\n     ///\n-    /// [`ptr::read`]: ./ptr/fn.read.html\n+    /// [`ptr::read`]: crate::ptr::read()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn read(self) -> T\n@@ -850,7 +850,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::read_volatile`] for safety concerns and examples.\n     ///\n-    /// [`ptr::read_volatile`]: ./ptr/fn.read_volatile.html\n+    /// [`ptr::read_volatile`]: crate::ptr::read_volatile()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn read_volatile(self) -> T\n@@ -868,7 +868,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::read_unaligned`] for safety concerns and examples.\n     ///\n-    /// [`ptr::read_unaligned`]: ./ptr/fn.read_unaligned.html\n+    /// [`ptr::read_unaligned`]: crate::ptr::read_unaligned()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn read_unaligned(self) -> T\n@@ -886,7 +886,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::copy`] for safety concerns and examples.\n     ///\n-    /// [`ptr::copy`]: ./ptr/fn.copy.html\n+    /// [`ptr::copy`]: crate::ptr::copy()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn copy_to(self, dest: *mut T, count: usize)\n@@ -904,7 +904,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::copy_nonoverlapping`] for safety concerns and examples.\n     ///\n-    /// [`ptr::copy_nonoverlapping`]: ./ptr/fn.copy_nonoverlapping.html\n+    /// [`ptr::copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn copy_to_nonoverlapping(self, dest: *mut T, count: usize)\n@@ -922,7 +922,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::copy`] for safety concerns and examples.\n     ///\n-    /// [`ptr::copy`]: ./ptr/fn.copy.html\n+    /// [`ptr::copy`]: crate::ptr::copy()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn copy_from(self, src: *const T, count: usize)\n@@ -940,7 +940,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::copy_nonoverlapping`] for safety concerns and examples.\n     ///\n-    /// [`ptr::copy_nonoverlapping`]: ./ptr/fn.copy_nonoverlapping.html\n+    /// [`ptr::copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn copy_from_nonoverlapping(self, src: *const T, count: usize)\n@@ -955,7 +955,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::drop_in_place`] for safety concerns and examples.\n     ///\n-    /// [`ptr::drop_in_place`]: ./ptr/fn.drop_in_place.html\n+    /// [`ptr::drop_in_place`]: crate::ptr::drop_in_place()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn drop_in_place(self) {\n@@ -968,7 +968,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::write`] for safety concerns and examples.\n     ///\n-    /// [`ptr::write`]: ./ptr/fn.write.html\n+    /// [`ptr::write`]: crate::ptr::write()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn write(self, val: T)\n@@ -984,7 +984,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::write_bytes`] for safety concerns and examples.\n     ///\n-    /// [`ptr::write_bytes`]: ./ptr/fn.write_bytes.html\n+    /// [`ptr::write_bytes`]: crate::ptr::write_bytes()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn write_bytes(self, val: u8, count: usize)\n@@ -1004,7 +1004,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::write_volatile`] for safety concerns and examples.\n     ///\n-    /// [`ptr::write_volatile`]: ./ptr/fn.write_volatile.html\n+    /// [`ptr::write_volatile`]: crate::ptr::write_volatile()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn write_volatile(self, val: T)\n@@ -1022,7 +1022,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::write_unaligned`] for safety concerns and examples.\n     ///\n-    /// [`ptr::write_unaligned`]: ./ptr/fn.write_unaligned.html\n+    /// [`ptr::write_unaligned`]: crate::ptr::write_unaligned()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn write_unaligned(self, val: T)\n@@ -1038,7 +1038,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::replace`] for safety concerns and examples.\n     ///\n-    /// [`ptr::replace`]: ./ptr/fn.replace.html\n+    /// [`ptr::replace`]: crate::ptr::replace()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn replace(self, src: T) -> T\n@@ -1055,7 +1055,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::swap`] for safety concerns and examples.\n     ///\n-    /// [`ptr::swap`]: ./ptr/fn.swap.html\n+    /// [`ptr::swap`]: crate::ptr::swap()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn swap(self, with: *mut T)"}, {"sha": "a944514f694b68d63819578ed9ba55338edfdced", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/becec6d01e22e28137019b4cd7f142cb76ec39af/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/becec6d01e22e28137019b4cd7f142cb76ec39af/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=becec6d01e22e28137019b4cd7f142cb76ec39af", "patch": "@@ -2252,9 +2252,9 @@ impl str {\n     /// but non-ASCII letters are unchanged.\n     ///\n     /// To return a new uppercased value without modifying the existing one, use\n-    /// [`to_ascii_uppercase`].\n+    /// [`to_ascii_uppercase()`].\n     ///\n-    /// [`to_ascii_uppercase`]: #method.to_ascii_uppercase\n+    /// [`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n     ///\n     /// # Examples\n     ///\n@@ -2279,9 +2279,9 @@ impl str {\n     /// but non-ASCII letters are unchanged.\n     ///\n     /// To return a new lowercased value without modifying the existing one, use\n-    /// [`to_ascii_lowercase`].\n+    /// [`to_ascii_lowercase()`].\n     ///\n-    /// [`to_ascii_lowercase`]: #method.to_ascii_lowercase\n+    /// [`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n     ///\n     /// # Examples\n     ///"}]}