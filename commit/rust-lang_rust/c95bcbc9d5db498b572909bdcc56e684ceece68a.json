{"sha": "c95bcbc9d5db498b572909bdcc56e684ceece68a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NWJjYmM5ZDVkYjQ5OGI1NzI5MDliZGNjNTZlNjg0Y2VlY2U2OGE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-27T01:26:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-27T01:26:13Z"}, "message": "Rollup merge of #71409 - estebank:point-at-ret-question-mark-op, r=petrochenkov\n\nPoint at the return type on `.into()` failure caused by `?`\n\nFix #35946.", "tree": {"sha": "75931a16e227fced8b9fde5491e8d2a14b71096e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75931a16e227fced8b9fde5491e8d2a14b71096e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c95bcbc9d5db498b572909bdcc56e684ceece68a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJepjS1CRBK7hj4Ov3rIwAAdHIIALI9mJKmfySp6SpKXRwKEbF8\nLu/SURgVTo3aSsJwrZnVFt8PlAy5kC5yiv0cXXWq2LQn4iEkK1IXJaw315rWRejk\nbOjbbwFfFwfWAQQFRVVEEQm5RRsEWF3buPEoXYsottSEbY/c2YswDU63RTQBTwW2\n+3JK6coWQAAZ8xcJVoABvnNy/2GXZNNKho18AyhmHnvjL8otUP2vqM5MxStnd4+R\nPIqMszHcqxH04j/VWLpDbw3BhylXP2LR78KhmMJKipK4nMeiwFdLKNGzVW0SzFZ9\ngQhVR/iWvG8bYzEPp/XY/R9C4pkKOI0s13KCf0tMf5VPLK5yXbNnH5Rfae49lX4=\n=G+Mt\n-----END PGP SIGNATURE-----\n", "payload": "tree 75931a16e227fced8b9fde5491e8d2a14b71096e\nparent 89aff5f33e1b28093e881e812b670672f724d8aa\nparent be90f90810438eed6f0090acfb4d29a787a43c1e\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587950773 +0200\ncommitter GitHub <noreply@github.com> 1587950773 +0200\n\nRollup merge of #71409 - estebank:point-at-ret-question-mark-op, r=petrochenkov\n\nPoint at the return type on `.into()` failure caused by `?`\n\nFix #35946.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c95bcbc9d5db498b572909bdcc56e684ceece68a", "html_url": "https://github.com/rust-lang/rust/commit/c95bcbc9d5db498b572909bdcc56e684ceece68a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c95bcbc9d5db498b572909bdcc56e684ceece68a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89aff5f33e1b28093e881e812b670672f724d8aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/89aff5f33e1b28093e881e812b670672f724d8aa", "html_url": "https://github.com/rust-lang/rust/commit/89aff5f33e1b28093e881e812b670672f724d8aa"}, {"sha": "be90f90810438eed6f0090acfb4d29a787a43c1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/be90f90810438eed6f0090acfb4d29a787a43c1e", "html_url": "https://github.com/rust-lang/rust/commit/be90f90810438eed6f0090acfb4d29a787a43c1e"}], "stats": {"total": 62, "additions": 48, "deletions": 14}, "files": [{"sha": "35eb5d73adac6cb25a9cbebf0835842fb7000d2e", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c95bcbc9d5db498b572909bdcc56e684ceece68a/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95bcbc9d5db498b572909bdcc56e684ceece68a/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c95bcbc9d5db498b572909bdcc56e684ceece68a", "patch": "@@ -317,20 +317,30 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                 .starts_with(\"std::convert::From<std::option::NoneError\");\n                         let should_convert_result_to_option = format!(\"{}\", trait_ref)\n                             .starts_with(\"<std::option::NoneError as std::convert::From<\");\n-                        if is_try && is_from && should_convert_option_to_result {\n-                            err.span_suggestion_verbose(\n-                                span.shrink_to_lo(),\n-                                \"consider converting the `Option<T>` into a `Result<T, _>` using `Option::ok_or` or `Option::ok_or_else`\",\n-                                \".ok_or_else(|| /* error value */)\".to_string(),\n-                                Applicability::HasPlaceholders,\n-                            );\n-                        } else if is_try && is_from && should_convert_result_to_option {\n-                            err.span_suggestion_verbose(\n-                                span.shrink_to_lo(),\n-                                \"consider converting the `Result<T, _>` into an `Option<T>` using `Result::ok`\",\n-                                \".ok()\".to_string(),\n-                                Applicability::MachineApplicable,\n-                            );\n+                        if is_try && is_from {\n+                            if should_convert_option_to_result {\n+                                err.span_suggestion_verbose(\n+                                    span.shrink_to_lo(),\n+                                    \"consider converting the `Option<T>` into a `Result<T, _>` \\\n+                                     using `Option::ok_or` or `Option::ok_or_else`\",\n+                                    \".ok_or_else(|| /* error value */)\".to_string(),\n+                                    Applicability::HasPlaceholders,\n+                                );\n+                            } else if should_convert_result_to_option {\n+                                err.span_suggestion_verbose(\n+                                    span.shrink_to_lo(),\n+                                    \"consider converting the `Result<T, _>` into an `Option<T>` \\\n+                                     using `Result::ok`\",\n+                                    \".ok()\".to_string(),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                            }\n+                            if let Some(ret_span) = self.return_type_span(obligation) {\n+                                err.span_label(\n+                                    ret_span,\n+                                    &format!(\"expected `{}` because of this\", trait_ref.self_ty()),\n+                                );\n+                            }\n                         }\n \n                         let explanation ="}, {"sha": "a927013e25f5f101d3a3ce40ffaf72e71bd7bcdc", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c95bcbc9d5db498b572909bdcc56e684ceece68a/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95bcbc9d5db498b572909bdcc56e684ceece68a/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=c95bcbc9d5db498b572909bdcc56e684ceece68a", "patch": "@@ -84,6 +84,8 @@ pub trait InferCtxtExt<'tcx> {\n         trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n     );\n \n+    fn return_type_span(&self, obligation: &PredicateObligation<'tcx>) -> Option<Span>;\n+\n     fn suggest_impl_trait(\n         &self,\n         err: &mut DiagnosticBuilder<'tcx>,\n@@ -761,6 +763,17 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn return_type_span(&self, obligation: &PredicateObligation<'tcx>) -> Option<Span> {\n+        let hir = self.tcx.hir();\n+        let parent_node = hir.get_parent_node(obligation.cause.body_id);\n+        let sig = match hir.find(parent_node) {\n+            Some(hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(sig, ..), .. })) => sig,\n+            _ => return None,\n+        };\n+\n+        if let hir::FnRetTy::Return(ret_ty) = sig.decl.output { Some(ret_ty.span) } else { None }\n+    }\n+\n     /// If all conditions are met to identify a returned `dyn Trait`, suggest using `impl Trait` if\n     /// applicable and signal that the error has been expanded appropriately and needs to be\n     /// emitted."}, {"sha": "af272633f210d4d80e0abaf415d1a930fbb5f1bb", "filename": "src/test/ui/issues/issue-32709.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c95bcbc9d5db498b572909bdcc56e684ceece68a/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c95bcbc9d5db498b572909bdcc56e684ceece68a/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr?ref=c95bcbc9d5db498b572909bdcc56e684ceece68a", "patch": "@@ -1,6 +1,8 @@\n error[E0277]: `?` couldn't convert the error to `()`\n   --> $DIR/issue-32709.rs:4:11\n    |\n+LL | fn a() -> Result<i32, ()> {\n+   |           --------------- expected `()` because of this\n LL |     Err(5)?;\n    |           ^ the trait `std::convert::From<{integer}>` is not implemented for `()`\n    |"}, {"sha": "5fa06778389d9754c056948f3b04b1a0e42ff6ee", "filename": "src/test/ui/option-to-result.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c95bcbc9d5db498b572909bdcc56e684ceece68a/src%2Ftest%2Fui%2Foption-to-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c95bcbc9d5db498b572909bdcc56e684ceece68a/src%2Ftest%2Fui%2Foption-to-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foption-to-result.stderr?ref=c95bcbc9d5db498b572909bdcc56e684ceece68a", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: `?` couldn't convert the error to `()`\n   --> $DIR/option-to-result.rs:5:6\n    |\n+LL | fn test_result() -> Result<(),()> {\n+   |                     ------------- expected `()` because of this\n+LL |     let a:Option<()> = Some(());\n LL |     a?;\n    |      ^ the trait `std::convert::From<std::option::NoneError>` is not implemented for `()`\n    |\n@@ -14,6 +17,9 @@ LL |     a.ok_or_else(|| /* error value */)?;\n error[E0277]: `?` couldn't convert the error to `std::option::NoneError`\n   --> $DIR/option-to-result.rs:11:6\n    |\n+LL | fn test_option() -> Option<i32>{\n+   |                     ----------- expected `std::option::NoneError` because of this\n+LL |     let a:Result<i32, i32> = Ok(5);\n LL |     a?;\n    |      ^ the trait `std::convert::From<i32>` is not implemented for `std::option::NoneError`\n    |"}, {"sha": "33ca58bf7feb17e366cf284b0d5bb98216d63069", "filename": "src/test/ui/try-on-option.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c95bcbc9d5db498b572909bdcc56e684ceece68a/src%2Ftest%2Fui%2Ftry-on-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c95bcbc9d5db498b572909bdcc56e684ceece68a/src%2Ftest%2Fui%2Ftry-on-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-on-option.stderr?ref=c95bcbc9d5db498b572909bdcc56e684ceece68a", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: `?` couldn't convert the error to `()`\n   --> $DIR/try-on-option.rs:7:6\n    |\n+LL | fn foo() -> Result<u32, ()> {\n+   |             --------------- expected `()` because of this\n+LL |     let x: Option<u32> = None;\n LL |     x?;\n    |      ^ the trait `std::convert::From<std::option::NoneError>` is not implemented for `()`\n    |"}]}