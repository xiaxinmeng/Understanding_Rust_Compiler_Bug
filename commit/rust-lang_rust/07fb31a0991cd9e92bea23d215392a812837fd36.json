{"sha": "07fb31a0991cd9e92bea23d215392a812837fd36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZmIzMWEwOTkxY2Q5ZTkyYmVhMjNkMjE1MzkyYTgxMjgzN2ZkMzY=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-01-22T23:09:59Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-01-22T23:09:59Z"}, "message": "Rollup merge of #21471 - michaelwoerister:associated-types, r=alexcrichton\n\nThis should fix issue #20797 (but I don't want to close it automatically).\r\nAs the actual fix is very small this would be a perfect candidate for a rollup.", "tree": {"sha": "3b4934ad2bc324a6ce6acc9d8a3a66c45f71bacc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b4934ad2bc324a6ce6acc9d8a3a66c45f71bacc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07fb31a0991cd9e92bea23d215392a812837fd36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07fb31a0991cd9e92bea23d215392a812837fd36", "html_url": "https://github.com/rust-lang/rust/commit/07fb31a0991cd9e92bea23d215392a812837fd36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07fb31a0991cd9e92bea23d215392a812837fd36/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1644978616e5c950eb345dc6773e8eb5a3e0c25a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1644978616e5c950eb345dc6773e8eb5a3e0c25a", "html_url": "https://github.com/rust-lang/rust/commit/1644978616e5c950eb345dc6773e8eb5a3e0c25a"}, {"sha": "3a44107f9eb70342c0b2cac56c0b6ebc0f94f253", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a44107f9eb70342c0b2cac56c0b6ebc0f94f253", "html_url": "https://github.com/rust-lang/rust/commit/3a44107f9eb70342c0b2cac56c0b6ebc0f94f253"}], "stats": {"total": 160, "additions": 159, "deletions": 1}, "files": [{"sha": "39413d63482499bc828e13b751c6409ce73a2c0e", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07fb31a0991cd9e92bea23d215392a812837fd36/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07fb31a0991cd9e92bea23d215392a812837fd36/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=07fb31a0991cd9e92bea23d215392a812837fd36", "patch": "@@ -2088,7 +2088,13 @@ fn prepare_struct_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                                   unique_type_id,\n                                                   containing_scope);\n \n-    let fields = ty::struct_fields(cx.tcx(), def_id, substs);\n+    let mut fields = ty::struct_fields(cx.tcx(), def_id, substs);\n+\n+    // The `Ty` values returned by `ty::struct_fields` can still contain\n+    // `ty_projection` variants, so normalize those away.\n+    for field in fields.iter_mut() {\n+        field.mt.ty = monomorphize::normalize_associated_type(cx.tcx(), &field.mt.ty);\n+    }\n \n     create_and_register_recursive_type_forward_declaration(\n         cx,"}, {"sha": "6a624e39e326775c93c0bf3d9a2522a3ad8984d4", "filename": "src/test/debuginfo/associated-types.rs", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/07fb31a0991cd9e92bea23d215392a812837fd36/src%2Ftest%2Fdebuginfo%2Fassociated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07fb31a0991cd9e92bea23d215392a812837fd36/src%2Ftest%2Fdebuginfo%2Fassociated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fassociated-types.rs?ref=07fb31a0991cd9e92bea23d215392a812837fd36", "patch": "@@ -0,0 +1,152 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-android: FIXME(#10381)\n+// min-lldb-version: 310\n+\n+// compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+// gdb-command:run\n+\n+// gdb-command:print arg\n+// gdb-check:$1 = {b = -1, b1 = 0}\n+// gdb-command:continue\n+\n+// gdb-command:print inferred\n+// gdb-check:$2 = 1\n+// gdb-command:print explicitly\n+// gdb-check:$3 = 1\n+// gdb-command:continue\n+\n+// gdb-command:print arg\n+// gdb-check:$4 = 2\n+// gdb-command:continue\n+\n+// gdb-command:print arg\n+// gdb-check:$5 = {4, 5}\n+// gdb-command:continue\n+\n+// gdb-command:print a\n+// gdb-check:$6 = 6\n+// gdb-command:print b\n+// gdb-check:$7 = 7\n+// gdb-command:continue\n+\n+// gdb-command:print a\n+// gdb-check:$8 = 8\n+// gdb-command:print b\n+// gdb-check:$9 = 9\n+// gdb-command:continue\n+\n+// === LLDB TESTS ==================================================================================\n+// lldb-command:run\n+\n+// lldb-command:print arg\n+// lldb-check:[...]$0 = Struct<i32> { b: -1, b1: 0 }\n+// lldb-command:continue\n+\n+// lldb-command:print inferred\n+// lldb-check:[...]$1 = 1\n+// lldb-command:print explicitly\n+// lldb-check:[...]$2 = 1\n+// lldb-command:continue\n+\n+// lldb-command:print arg\n+// lldb-check:[...]$3 = 2\n+// lldb-command:continue\n+\n+// lldb-command:print arg\n+// lldb-check:[...]$4 = (4, 5)\n+// lldb-command:continue\n+\n+// lldb-command:print a\n+// lldb-check:[...]$5 = 6\n+// lldb-command:print b\n+// lldb-check:[...]$6 = 7\n+// lldb-command:continue\n+\n+// lldb-command:print a\n+// lldb-check:[...]$7 = 8\n+// lldb-command:print b\n+// lldb-check:[...]$8 = 9\n+// lldb-command:continue\n+\n+#![allow(unused_variables)]\n+#![allow(dead_code)]\n+#![omit_gdb_pretty_printer_section]\n+\n+trait TraitWithAssocType {\n+    type Type;\n+\n+    fn get_value(&self) -> Self::Type;\n+}\n+impl TraitWithAssocType for i32 {\n+    type Type = i64;\n+\n+    fn get_value(&self) -> i64 { *self as i64 }\n+}\n+\n+struct Struct<T: TraitWithAssocType> {\n+    b: T,\n+    b1: T::Type,\n+}\n+\n+enum Enum<T: TraitWithAssocType> {\n+    Variant1(T, T::Type),\n+    Variant2(T::Type, T)\n+}\n+\n+fn assoc_struct<T: TraitWithAssocType>(arg: Struct<T>) {\n+    zzz(); // #break\n+}\n+\n+fn assoc_local<T: TraitWithAssocType>(x: T) {\n+    let inferred = x.get_value();\n+    let explicitly: T::Type = x.get_value();\n+\n+    zzz(); // #break\n+}\n+\n+fn assoc_arg<T: TraitWithAssocType>(arg: T::Type) {\n+    zzz(); // #break\n+}\n+\n+fn assoc_return_value<T: TraitWithAssocType>(arg: T) -> T::Type {\n+    return arg.get_value();\n+}\n+\n+fn assoc_tuple<T: TraitWithAssocType>(arg: (T, T::Type)) {\n+    zzz(); // #break\n+}\n+\n+fn assoc_enum<T: TraitWithAssocType>(arg: Enum<T>) {\n+\n+    match arg {\n+        Enum::Variant1(a, b) => {\n+            zzz(); // #break\n+        }\n+        Enum::Variant2(a, b) => {\n+            zzz(); // #break\n+        }\n+    }\n+}\n+\n+fn main() {\n+    assoc_struct(Struct { b: -1i32, b1: 0i64 });\n+    assoc_local(1i32);\n+    assoc_arg::<i32>(2i64);\n+    assoc_return_value(3i32);\n+    assoc_tuple((4i32, 5i64));\n+    assoc_enum(Enum::Variant1(6i32, 7i64));\n+    assoc_enum(Enum::Variant2(8i64, 9i32));\n+}\n+\n+fn zzz() { () }\n\\ No newline at end of file"}]}