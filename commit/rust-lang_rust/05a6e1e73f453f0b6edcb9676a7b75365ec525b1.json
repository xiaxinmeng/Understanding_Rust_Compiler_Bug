{"sha": "05a6e1e73f453f0b6edcb9676a7b75365ec525b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YTZlMWU3M2Y0NTNmMGI2ZWRjYjk2NzZhN2I3NTM2NWVjNTI1YjE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-03T14:35:44Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-10T12:22:31Z"}, "message": "pacify the mercilous tidy", "tree": {"sha": "a5ecb95b93d5220edc2e526032cfb0d350a52d4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5ecb95b93d5220edc2e526032cfb0d350a52d4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05a6e1e73f453f0b6edcb9676a7b75365ec525b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05a6e1e73f453f0b6edcb9676a7b75365ec525b1", "html_url": "https://github.com/rust-lang/rust/commit/05a6e1e73f453f0b6edcb9676a7b75365ec525b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05a6e1e73f453f0b6edcb9676a7b75365ec525b1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e1b97884ba806210f97f5e5ee0029604031d1af", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e1b97884ba806210f97f5e5ee0029604031d1af", "html_url": "https://github.com/rust-lang/rust/commit/7e1b97884ba806210f97f5e5ee0029604031d1af"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "ef686cb1dd6f6d1d4a3dd9b8fa2b0ae6dd724db2", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05a6e1e73f453f0b6edcb9676a7b75365ec525b1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a6e1e73f453f0b6edcb9676a7b75365ec525b1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=05a6e1e73f453f0b6edcb9676a7b75365ec525b1", "patch": "@@ -547,7 +547,10 @@ impl<'cx, 'bccx, 'gcx, 'tcx> TypeRelation<'cx, 'gcx, 'tcx>\n \n             // Reset ambient variance to contravariance. See the\n             // covariant case above for an explanation.\n-            let variance = ::std::mem::replace(&mut self.ambient_variance, ty::Variance::Contravariant);\n+            let variance = ::std::mem::replace(\n+                &mut self.ambient_variance,\n+                ty::Variance::Contravariant,\n+            );\n \n             self.relate(a.skip_binder(), b.skip_binder())?;\n \n@@ -629,7 +632,7 @@ impl<'cx, 'gcx, 'tcx> TypeVisitor<'tcx> for ScopeInstantiator<'cx, 'gcx, 'tcx> {\n /// so that the resulting generalized type is independent from the\n /// scopes.\n ///\n-/// [blog post]: http://smallcultfollowing.com/babysteps/blog/2014/07/09/an-experimental-new-type-inference-scheme-for-rust/\n+/// [blog post]: https://is.gd/0hKvIr\n struct TypeGeneralizer<'me, 'bccx: 'me, 'gcx: 'tcx, 'tcx: 'bccx> {\n     type_rel: &'me TypeRelating<'me, 'bccx, 'gcx, 'tcx>,\n "}, {"sha": "e05e0bb0470f4011064de3932a455c93414af991", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05a6e1e73f453f0b6edcb9676a7b75365ec525b1/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a6e1e73f453f0b6edcb9676a7b75365ec525b1/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=05a6e1e73f453f0b6edcb9676a7b75365ec525b1", "patch": "@@ -1235,7 +1235,8 @@ fn pat_constructors<'tcx>(cx: &mut MatchCheckCtxt,\n                           -> Option<Vec<Constructor<'tcx>>>\n {\n     match *pat.kind {\n-        PatternKind::AscribeUserType { ref subpattern, .. } => pat_constructors(cx, subpattern, pcx),\n+        PatternKind::AscribeUserType { ref subpattern, .. } =>\n+            pat_constructors(cx, subpattern, pcx),\n         PatternKind::Binding { .. } | PatternKind::Wild => None,\n         PatternKind::Leaf { .. } | PatternKind::Deref { .. } => Some(vec![Single]),\n         PatternKind::Variant { adt_def, variant_index, .. } => {"}]}