{"sha": "5b95df4bdc330f34213812ad65cae86ced90d80c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViOTVkZjRiZGMzMzBmMzQyMTM4MTJhZDY1Y2FlODZjZWQ5MGQ4MGM=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-08-02T00:18:50Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-08-31T01:18:43Z"}, "message": "Add let-else tests", "tree": {"sha": "791b8ecd4a8e627a0d334319ebdb1c5a6044d161", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/791b8ecd4a8e627a0d334319ebdb1c5a6044d161"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b95df4bdc330f34213812ad65cae86ced90d80c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b95df4bdc330f34213812ad65cae86ced90d80c", "html_url": "https://github.com/rust-lang/rust/commit/5b95df4bdc330f34213812ad65cae86ced90d80c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b95df4bdc330f34213812ad65cae86ced90d80c/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df9a2e0687895731e12f4a2651e8d70acd08872d", "url": "https://api.github.com/repos/rust-lang/rust/commits/df9a2e0687895731e12f4a2651e8d70acd08872d", "html_url": "https://github.com/rust-lang/rust/commit/df9a2e0687895731e12f4a2651e8d70acd08872d"}], "stats": {"total": 322, "additions": 322, "deletions": 0}, "files": [{"sha": "e47f7f23d7e07938aa54dc3b978c7ff4a04de780", "filename": "src/test/ui/let-else/let-else-bool-binop-init.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.fixed?ref=5b95df4bdc330f34213812ad65cae86ced90d80c", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+\n+#![feature(let_else)]\n+\n+fn main() {\n+    let true = (true && false) else { return }; //~ ERROR a `&&` expression cannot be directly assigned in `let...else`\n+    let true = (true || false) else { return }; //~ ERROR a `||` expression cannot be directly assigned in `let...else`\n+}"}, {"sha": "e443fb0d6a376a4f57ebe0c20edcde8cfc3bdf11", "filename": "src/test/ui/let-else/let-else-bool-binop-init.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.rs?ref=5b95df4bdc330f34213812ad65cae86ced90d80c", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+\n+#![feature(let_else)]\n+\n+fn main() {\n+    let true = true && false else { return }; //~ ERROR a `&&` expression cannot be directly assigned in `let...else`\n+    let true = true || false else { return }; //~ ERROR a `||` expression cannot be directly assigned in `let...else`\n+}"}, {"sha": "6551e24cc83d063376dd6a066269ea9f4f587618", "filename": "src/test/ui/let-else/let-else-bool-binop-init.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.stderr?ref=5b95df4bdc330f34213812ad65cae86ced90d80c", "patch": "@@ -0,0 +1,24 @@\n+error: a `&&` expression cannot be directly assigned in `let...else`\n+  --> $DIR/let-else-bool-binop-init.rs:6:16\n+   |\n+LL |     let true = true && false else { return };\n+   |                ^^^^^^^^^^^^^\n+   |\n+help: wrap the expression in parenthesis\n+   |\n+LL |     let true = (true && false) else { return };\n+   |                +             +\n+\n+error: a `||` expression cannot be directly assigned in `let...else`\n+  --> $DIR/let-else-bool-binop-init.rs:7:16\n+   |\n+LL |     let true = true || false else { return };\n+   |                ^^^^^^^^^^^^^\n+   |\n+help: wrap the expression in parenthesis\n+   |\n+LL |     let true = (true || false) else { return };\n+   |                +             +\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "fb4fd77791e030045f71f4e584ac32133a720996", "filename": "src/test/ui/let-else/let-else-brace-before-else.fixed", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.fixed?ref=5b95df4bdc330f34213812ad65cae86ced90d80c", "patch": "@@ -0,0 +1,26 @@\n+// run-rustfix\n+\n+#![feature(let_else)]\n+\n+fn main() {\n+    let Some(1) = ({ Some(1) }) else {\n+        //~^ ERROR right curly brace `}` before `else` in a `let...else` statement not allowed\n+        return;\n+    };\n+    let Some(1) = (loop { break Some(1) }) else {\n+        //~^ ERROR right curly brace `}` before `else` in a `let...else` statement not allowed\n+        return;\n+    };\n+    let 2 = 1 + (match 1 { n => n }) else {\n+        //~^ ERROR right curly brace `}` before `else` in a `let...else` statement not allowed\n+        return;\n+    };\n+    let Some(1) = (unsafe { unsafe_fn() }) else {\n+        //~^ ERROR right curly brace `}` before `else` in a `let...else` statement not allowed\n+        return;\n+    };\n+}\n+\n+unsafe fn unsafe_fn<T>() -> T {\n+    unimplemented!();\n+}"}, {"sha": "c4c5a1ca28bbefbc588af6456fea6224e70b809f", "filename": "src/test/ui/let-else/let-else-brace-before-else.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.rs?ref=5b95df4bdc330f34213812ad65cae86ced90d80c", "patch": "@@ -0,0 +1,26 @@\n+// run-rustfix\n+\n+#![feature(let_else)]\n+\n+fn main() {\n+    let Some(1) = { Some(1) } else {\n+        //~^ ERROR right curly brace `}` before `else` in a `let...else` statement not allowed\n+        return;\n+    };\n+    let Some(1) = loop { break Some(1) } else {\n+        //~^ ERROR right curly brace `}` before `else` in a `let...else` statement not allowed\n+        return;\n+    };\n+    let 2 = 1 + match 1 { n => n } else {\n+        //~^ ERROR right curly brace `}` before `else` in a `let...else` statement not allowed\n+        return;\n+    };\n+    let Some(1) = unsafe { unsafe_fn() } else {\n+        //~^ ERROR right curly brace `}` before `else` in a `let...else` statement not allowed\n+        return;\n+    };\n+}\n+\n+unsafe fn unsafe_fn<T>() -> T {\n+    unimplemented!();\n+}"}, {"sha": "eac029c848b20ada60838cc0cab55d844302fb26", "filename": "src/test/ui/let-else/let-else-brace-before-else.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.stderr?ref=5b95df4bdc330f34213812ad65cae86ced90d80c", "patch": "@@ -0,0 +1,46 @@\n+error: right curly brace `}` before `else` in a `let...else` statement not allowed\n+  --> $DIR/let-else-brace-before-else.rs:6:29\n+   |\n+LL |     let Some(1) = { Some(1) } else {\n+   |                             ^\n+   |\n+help: try wrapping the expression in parenthesis\n+   |\n+LL |     let Some(1) = ({ Some(1) }) else {\n+   |                   +           +\n+\n+error: right curly brace `}` before `else` in a `let...else` statement not allowed\n+  --> $DIR/let-else-brace-before-else.rs:10:40\n+   |\n+LL |     let Some(1) = loop { break Some(1) } else {\n+   |                                        ^\n+   |\n+help: try wrapping the expression in parenthesis\n+   |\n+LL |     let Some(1) = (loop { break Some(1) }) else {\n+   |                   +                      +\n+\n+error: right curly brace `}` before `else` in a `let...else` statement not allowed\n+  --> $DIR/let-else-brace-before-else.rs:14:34\n+   |\n+LL |     let 2 = 1 + match 1 { n => n } else {\n+   |                                  ^\n+   |\n+help: try wrapping the expression in parenthesis\n+   |\n+LL |     let 2 = 1 + (match 1 { n => n }) else {\n+   |                 +                  +\n+\n+error: right curly brace `}` before `else` in a `let...else` statement not allowed\n+  --> $DIR/let-else-brace-before-else.rs:18:40\n+   |\n+LL |     let Some(1) = unsafe { unsafe_fn() } else {\n+   |                                        ^\n+   |\n+help: try wrapping the expression in parenthesis\n+   |\n+LL |     let Some(1) = (unsafe { unsafe_fn() }) else {\n+   |                   +                      +\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "ab763447ef7e1abe754064a5c02765bf4840c7db", "filename": "src/test/ui/let-else/let-else-check.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.rs?ref=5b95df4bdc330f34213812ad65cae86ced90d80c", "patch": "@@ -0,0 +1,14 @@\n+#![feature(let_else)]\n+\n+#![deny(unused_variables)]\n+\n+fn main() {\n+    // type annotation, attributes\n+    #[allow(unused_variables)]\n+    let Some(_): Option<u32> = Some(Default::default()) else {\n+        let x = 1; // OK\n+        return;\n+    };\n+\n+    let x = 1; //~ ERROR unused variable: `x`\n+}"}, {"sha": "50e54d320b006ced046b0147259e197d38427225", "filename": "src/test/ui/let-else/let-else-check.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.stderr?ref=5b95df4bdc330f34213812ad65cae86ced90d80c", "patch": "@@ -0,0 +1,14 @@\n+error: unused variable: `x`\n+  --> $DIR/let-else-check.rs:13:9\n+   |\n+LL |     let x = 1;\n+   |         ^ help: if this is intentional, prefix it with an underscore: `_x`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/let-else-check.rs:3:9\n+   |\n+LL | #![deny(unused_variables)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "b1e09a1248ff7cae6e0c3964c08f343cc16605da", "filename": "src/test/ui/let-else/let-else-irrefutable.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-irrefutable.rs?ref=5b95df4bdc330f34213812ad65cae86ced90d80c", "patch": "@@ -0,0 +1,7 @@\n+// check-pass\n+\n+#![feature(let_else)]\n+\n+fn main() {\n+    let x = 1 else { return }; //~ WARN irrefutable `let...else` pattern\n+}"}, {"sha": "e030c50d45dcf7b4aed415121f370d5007a31b54", "filename": "src/test/ui/let-else/let-else-irrefutable.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-irrefutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-irrefutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-irrefutable.stderr?ref=5b95df4bdc330f34213812ad65cae86ced90d80c", "patch": "@@ -0,0 +1,12 @@\n+warning: irrefutable `let...else` pattern\n+  --> $DIR/let-else-irrefutable.rs:6:5\n+   |\n+LL |     let x = 1 else { return };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(irrefutable_let_patterns)]` on by default\n+   = note: this pattern will always match, so the `else` clause is useless\n+   = help: consider removing the `else` clause\n+\n+warning: 1 warning emitted\n+"}, {"sha": "ed9d79f1ebde9c45dcb9cfabbb02397742cd6e18", "filename": "src/test/ui/let-else/let-else-missing-semicolon.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-missing-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-missing-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-missing-semicolon.rs?ref=5b95df4bdc330f34213812ad65cae86ced90d80c", "patch": "@@ -0,0 +1,11 @@\n+#![feature(let_else)]\n+\n+fn main() {\n+    let Some(x) = Some(1) else {\n+        return;\n+    } //~ ERROR expected `;`, found keyword `let`\n+    let _ = \"\";\n+    let Some(x) = Some(1) else {\n+        panic!();\n+    } //~ ERROR expected `;`, found `}`\n+}"}, {"sha": "1818a0b1263487cbcff6f130557c155b990a7b8e", "filename": "src/test/ui/let-else/let-else-missing-semicolon.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-missing-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-missing-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-missing-semicolon.stderr?ref=5b95df4bdc330f34213812ad65cae86ced90d80c", "patch": "@@ -0,0 +1,18 @@\n+error: expected `;`, found keyword `let`\n+  --> $DIR/let-else-missing-semicolon.rs:6:6\n+   |\n+LL |     }\n+   |      ^ help: add `;` here\n+LL |     let _ = \"\";\n+   |     --- unexpected token\n+\n+error: expected `;`, found `}`\n+  --> $DIR/let-else-missing-semicolon.rs:10:6\n+   |\n+LL |     }\n+   |      ^ help: add `;` here\n+LL | }\n+   | - unexpected token\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a1cee335aeeba49d20849be48c0b51c8529b6a3f", "filename": "src/test/ui/let-else/let-else-non-diverging.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.rs?ref=5b95df4bdc330f34213812ad65cae86ced90d80c", "patch": "@@ -0,0 +1,13 @@\n+#![feature(let_else)]\n+\n+fn main() {\n+    let Some(x) = Some(1) else { //~ ERROR does not diverge\n+        Some(2)\n+    };\n+    let Some(x) = Some(1) else { //~ ERROR does not diverge\n+        if 1 == 1 {\n+            panic!();\n+        }\n+    };\n+    let Some(x) = Some(1) else { Some(2) }; //~ ERROR does not diverge\n+}"}, {"sha": "fd5a18ce7ea51278921b65d6723a052e41f33792", "filename": "src/test/ui/let-else/let-else-non-diverging.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.stderr?ref=5b95df4bdc330f34213812ad65cae86ced90d80c", "patch": "@@ -0,0 +1,44 @@\n+error[E0308]: `else` clause of `let...else` does not diverge\n+  --> $DIR/let-else-non-diverging.rs:12:32\n+   |\n+LL |     let Some(x) = Some(1) else { Some(2) };\n+   |                                ^^^^^^^^^^^ expected `!`, found enum `Option`\n+   |\n+   = note: expected type `!`\n+              found type `Option<{integer}>`\n+   = help: try adding a diverging expression, such as `return` or `panic!(..)`\n+   = help: ...or use `match` instead of `let...else`\n+\n+error[E0308]: `else` clause of `let...else` does not diverge\n+  --> $DIR/let-else-non-diverging.rs:7:32\n+   |\n+LL |       let Some(x) = Some(1) else {\n+   |  ________________________________^\n+LL | |         if 1 == 1 {\n+LL | |             panic!();\n+LL | |         }\n+LL | |     };\n+   | |_____^ expected `!`, found `()`\n+   |\n+   = note: expected type `!`\n+              found type `()`\n+   = help: try adding a diverging expression, such as `return` or `panic!(..)`\n+   = help: ...or use `match` instead of `let...else`\n+\n+error[E0308]: `else` clause of `let...else` does not diverge\n+  --> $DIR/let-else-non-diverging.rs:4:32\n+   |\n+LL |       let Some(x) = Some(1) else {\n+   |  ________________________________^\n+LL | |         Some(2)\n+LL | |     };\n+   | |_____^ expected `!`, found enum `Option`\n+   |\n+   = note: expected type `!`\n+              found type `Option<{integer}>`\n+   = help: try adding a diverging expression, such as `return` or `panic!(..)`\n+   = help: ...or use `match` instead of `let...else`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "5d96623236dab6bc6e7798f81e9910af88c241c7", "filename": "src/test/ui/let-else/let-else-run-pass.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-run-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-run-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-run-pass.rs?ref=5b95df4bdc330f34213812ad65cae86ced90d80c", "patch": "@@ -0,0 +1,35 @@\n+// run-pass\n+\n+#![feature(let_else)]\n+\n+fn main() {\n+    #[allow(dead_code)]\n+    enum MyEnum {\n+        A(String),\n+        B { f: String },\n+        C,\n+    }\n+    // ref binding to non-copy value and or-pattern\n+    let (MyEnum::A(ref x) | MyEnum::B { f: ref x }) = (MyEnum::B { f: String::new() }) else {\n+        panic!();\n+    };\n+    assert_eq!(x, \"\");\n+\n+    // nested let-else\n+    let mut x = 1;\n+    loop {\n+        let 4 = x else {\n+            let 3 = x else {\n+                x += 1;\n+                continue;\n+            };\n+            break;\n+        };\n+        panic!();\n+    }\n+    assert_eq!(x, 3);\n+\n+    // else return\n+    let Some(1) = Some(2) else { return };\n+    panic!();\n+}"}, {"sha": "f17682db4c3bd04529bed5c680b2fc2cd623a574", "filename": "src/test/ui/let-else/let-else-scope.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-scope.rs?ref=5b95df4bdc330f34213812ad65cae86ced90d80c", "patch": "@@ -0,0 +1,7 @@\n+#![feature(let_else)]\n+\n+fn main() {\n+    let Some(x) = Some(2) else {\n+        panic!(\"{}\", x); //~ ERROR cannot find value `x` in this scope\n+    };\n+}"}, {"sha": "4b3936eac4bd5a93d2996b71348d1eb7dba5635c", "filename": "src/test/ui/let-else/let-else-scope.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b95df4bdc330f34213812ad65cae86ced90d80c/src%2Ftest%2Fui%2Flet-else%2Flet-else-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-scope.stderr?ref=5b95df4bdc330f34213812ad65cae86ced90d80c", "patch": "@@ -0,0 +1,9 @@\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/let-else-scope.rs:5:22\n+   |\n+LL |         panic!(\"{}\", x);\n+   |                      ^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}]}