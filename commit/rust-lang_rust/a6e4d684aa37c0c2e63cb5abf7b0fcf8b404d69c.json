{"sha": "a6e4d684aa37c0c2e63cb5abf7b0fcf8b404d69c", "node_id": "C_kwDOAAsO6NoAKGE2ZTRkNjg0YWEzN2MwYzJlNjNjYjVhYmY3YjBmY2Y4YjQwNGQ2OWM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-01T09:48:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-01T09:48:54Z"}, "message": "Rollup merge of #92097 - saethlin:split-without-deref, r=the8472\n\nImplement split_at_spare_mut without Deref to a slice so that the spare slice is valid\n\n~I'm not sure I understand what's going on here correctly. And I'm pretty sure this safety comment needs to be changed. I'm just referring to the same thing that `as_mut_ptr_range` does.~ (Thanks `@RalfJung` for the guidance and clearing things up)\n\nI tried to run https://github.com/rust-lang/miri-test-libstd on alloc with -Zmiri-track-raw-pointers, and got a failure on the test `vec::test_extend_from_within`.\n\nI minimized the test failure into this program:\n```rust\n#![feature(vec_split_at_spare)]\nfn main() {\n    Vec::<i32>::with_capacity(1).split_at_spare_mut();\n}\n```\n\nThe problem is that the existing implementation is actually getting a pointer range where both pointers are derived from the initialized region of the Vec's allocation, but we need the second one to be valid for the region between len and capacity. (thanks Ralf for clearing this up)", "tree": {"sha": "6581e05472c5e6686fccb4a347beb5f94ee78696", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6581e05472c5e6686fccb4a347beb5f94ee78696"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6e4d684aa37c0c2e63cb5abf7b0fcf8b404d69c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh0COGCRBK7hj4Ov3rIwAAY7cIAAmGMtDgDxHaTyFuxXqeWLfB\nHISyvSxVd1JKahRjMhVD8x8yS0wTojGf/KczPWU5Fb4vj4RNRdYtwpCkGIFU5/n9\nSAtd+3VcGb8E0pIqeUpKwElF2A7fyoKH18l+WVBvfezgbLd7GY3GunXYrZhRTjWP\n7VnTojAFbn6gt3FEyAnwlPehHBW3CbhxqIswBej0dTRr12Maw5FKo/wWZWm379oi\n7VrH6AvAmFoFa6mfxOfxvptHncMQjwu/sIUnq96t7nE+pObBtM9tOZgEXj+SfpY4\nn0MzwOEkpKMeBqjk6OzRiyE4FhVUaJml2+uuvX873LHWeREp5HEgJMI9nLYBP2w=\n=DVb5\n-----END PGP SIGNATURE-----\n", "payload": "tree 6581e05472c5e6686fccb4a347beb5f94ee78696\nparent 5a5c9282e04711df07beb883eb463a136f91fbf9\nparent 777c853b4a8274b293f30c029cc18bccedde9ecf\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1641030534 +0100\ncommitter GitHub <noreply@github.com> 1641030534 +0100\n\nRollup merge of #92097 - saethlin:split-without-deref, r=the8472\n\nImplement split_at_spare_mut without Deref to a slice so that the spare slice is valid\n\n~I'm not sure I understand what's going on here correctly. And I'm pretty sure this safety comment needs to be changed. I'm just referring to the same thing that `as_mut_ptr_range` does.~ (Thanks `@RalfJung` for the guidance and clearing things up)\n\nI tried to run https://github.com/rust-lang/miri-test-libstd on alloc with -Zmiri-track-raw-pointers, and got a failure on the test `vec::test_extend_from_within`.\n\nI minimized the test failure into this program:\n```rust\n#![feature(vec_split_at_spare)]\nfn main() {\n    Vec::<i32>::with_capacity(1).split_at_spare_mut();\n}\n```\n\nThe problem is that the existing implementation is actually getting a pointer range where both pointers are derived from the initialized region of the Vec's allocation, but we need the second one to be valid for the region between len and capacity. (thanks Ralf for clearing this up)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6e4d684aa37c0c2e63cb5abf7b0fcf8b404d69c", "html_url": "https://github.com/rust-lang/rust/commit/a6e4d684aa37c0c2e63cb5abf7b0fcf8b404d69c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6e4d684aa37c0c2e63cb5abf7b0fcf8b404d69c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a5c9282e04711df07beb883eb463a136f91fbf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a5c9282e04711df07beb883eb463a136f91fbf9", "html_url": "https://github.com/rust-lang/rust/commit/5a5c9282e04711df07beb883eb463a136f91fbf9"}, {"sha": "777c853b4a8274b293f30c029cc18bccedde9ecf", "url": "https://api.github.com/repos/rust-lang/rust/commits/777c853b4a8274b293f30c029cc18bccedde9ecf", "html_url": "https://github.com/rust-lang/rust/commit/777c853b4a8274b293f30c029cc18bccedde9ecf"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "fffdc2c3ac09d234e25defd6d2da3dd3842dd26c", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a6e4d684aa37c0c2e63cb5abf7b0fcf8b404d69c/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6e4d684aa37c0c2e63cb5abf7b0fcf8b404d69c/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=a6e4d684aa37c0c2e63cb5abf7b0fcf8b404d69c", "patch": "@@ -2141,12 +2141,17 @@ impl<T, A: Allocator> Vec<T, A> {\n     unsafe fn split_at_spare_mut_with_len(\n         &mut self,\n     ) -> (&mut [T], &mut [MaybeUninit<T>], &mut usize) {\n-        let Range { start: ptr, end: spare_ptr } = self.as_mut_ptr_range();\n+        let ptr = self.as_mut_ptr();\n+        // SAFETY:\n+        // - `ptr` is guaranteed to be valid for `self.len` elements\n+        // - but the allocation extends out to `self.buf.capacity()` elements, possibly\n+        // uninitialized\n+        let spare_ptr = unsafe { ptr.add(self.len) };\n         let spare_ptr = spare_ptr.cast::<MaybeUninit<T>>();\n         let spare_len = self.buf.capacity() - self.len;\n \n         // SAFETY:\n-        // - `ptr` is guaranteed to be valid for `len` elements\n+        // - `ptr` is guaranteed to be valid for `self.len` elements\n         // - `spare_ptr` is pointing one element past the buffer, so it doesn't overlap with `initialized`\n         unsafe {\n             let initialized = slice::from_raw_parts_mut(ptr, self.len);"}]}