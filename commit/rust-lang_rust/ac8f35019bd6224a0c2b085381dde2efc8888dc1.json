{"sha": "ac8f35019bd6224a0c2b085381dde2efc8888dc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjOGYzNTAxOWJkNjIyNGEwYzJiMDg1MzgxZGRlMmVmYzg4ODhkYzE=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-03-31T12:51:17Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-02T07:03:30Z"}, "message": "Fix tslint error", "tree": {"sha": "39e3e7961c4c3a59ff2d733c6efb23ef68baab7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39e3e7961c4c3a59ff2d733c6efb23ef68baab7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac8f35019bd6224a0c2b085381dde2efc8888dc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac8f35019bd6224a0c2b085381dde2efc8888dc1", "html_url": "https://github.com/rust-lang/rust/commit/ac8f35019bd6224a0c2b085381dde2efc8888dc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac8f35019bd6224a0c2b085381dde2efc8888dc1/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3683df0cd67ca97c83f5a7ea58a780dbe4e1b8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3683df0cd67ca97c83f5a7ea58a780dbe4e1b8e", "html_url": "https://github.com/rust-lang/rust/commit/b3683df0cd67ca97c83f5a7ea58a780dbe4e1b8e"}], "stats": {"total": 128, "additions": 65, "deletions": 63}, "files": [{"sha": "c6ce6ba0653c1c05bdb6eb55e7a18cf49933aff7", "filename": "editors/code/src/commands/cargo_watch.ts", "status": "modified", "additions": 28, "deletions": 63, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/ac8f35019bd6224a0c2b085381dde2efc8888dc1/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ac8f35019bd6224a0c2b085381dde2efc8888dc1/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts?ref=ac8f35019bd6224a0c2b085381dde2efc8888dc1", "patch": "@@ -1,61 +1,24 @@\n import * as child_process from 'child_process';\n import * as path from 'path';\n+import * as timers from 'timers';\n import * as vscode from 'vscode';\n-import { setInterval } from 'timers';\n-\n-const spinnerFrames = ['\u280b', '\u2819', '\u2839', '\u2838', '\u283c', '\u2834', '\u2826', '\u2827', '\u2807', '\u280f'];\n-\n-class StatusDisplay {\n-    private i = 0;    \n-    private statusBarItem: vscode.StatusBarItem;\n-    private timer?: NodeJS.Timeout;\n-\n-    constructor(subscriptions: vscode.Disposable[]) {\n-        this.statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 10);\n-        subscriptions.push(this.statusBarItem);\n-        this.statusBarItem.hide();\n-    }\n-\n-    public show() {\n-        this.timer = this.timer || setInterval(() => {\n-            this.statusBarItem!.text = \"cargo check \" + this.frame();\n-        }, 300);        \n-        \n-        this.statusBarItem!.show();            \n-    }\n-\n-    public hide() {\n-        if(this.timer) {\n-            clearInterval(this.timer);\n-            this.timer = undefined;\n-        }\n-\n-        this.statusBarItem!.hide();                        \n-    }\n-\n-    frame() {\n-        return spinnerFrames[this.i = ++this.i % spinnerFrames.length];\n-    }\n-}\n+import {StatusDisplay} from './watch_status';\n \n export class CargoWatchProvider {\n     private diagnosticCollection?: vscode.DiagnosticCollection;\n     private cargoProcess?: child_process.ChildProcess;\n-    private outBuffer: string = \"\";    \n-    private statusDisplay? : StatusDisplay;\n-\n-    constructor() {\n-    }\n+    private outBuffer: string = '';\n+    private statusDisplay?: StatusDisplay;\n \n     public activate(subscriptions: vscode.Disposable[]) {\n         subscriptions.push(this);\n-        this.diagnosticCollection = vscode.languages.createDiagnosticCollection(\"rustc\");\n+        this.diagnosticCollection = vscode.languages.createDiagnosticCollection('rustc');\n \n         this.statusDisplay = new StatusDisplay(subscriptions);\n \n         // Start the cargo watch with json message \n         this.cargoProcess = child_process.spawn('cargo',\n-            [\"watch\", \"-x\", \"\\\"check --message-format json\\\"\"],\n+            ['watch', '-x', '\\\"check --message-format json\\\"'],\n             {\n                 // stdio: ['ignore', 'pipe', 'ignore'], \n                 shell: true,\n@@ -68,11 +31,11 @@ export class CargoWatchProvider {\n         });\n \n         this.cargoProcess.stderr.on('data', (s: string) => {\n-            console.error('Error on cargo watch : ' + s);\n+            // console.error('Error on cargo watch : ' + s);\n         });\n \n         this.cargoProcess.on('error', (err: Error) => {\n-            console.error('Error on spawn cargo process : ' + err);\n+            // console.error('Error on spawn cargo process : ' + err);\n         });\n     }\n \n@@ -87,22 +50,24 @@ export class CargoWatchProvider {\n         }\n     }\n \n-    parseLine(line: string) {\n-        if (line.startsWith(\"[Running\")) {\n+    private parseLine(line: string) {\n+        if (line.startsWith('[Running')) {\n             this.diagnosticCollection!.clear();\n             this.statusDisplay!.show();\n         }\n \n-        if (line.startsWith(\"[Finished running\")) {\n+        if (line.startsWith('[Finished running')) {\n             this.statusDisplay!.hide();\n         }\n \n         function getLevel(s: string): vscode.DiagnosticSeverity {\n-            if (s === \"error\")\n+            if (s === 'error') {\n                 return vscode.DiagnosticSeverity.Error;\n+            }\n \n-            if (s.startsWith(\"warn\"))\n+            if (s.startsWith('warn')) {\n                 return vscode.DiagnosticSeverity.Warning;\n+            }\n \n             return vscode.DiagnosticSeverity.Information;\n         }\n@@ -117,51 +82,51 @@ export class CargoWatchProvider {\n         }\n \n         // Only handle compiler-message now\n-        if (data.reason !== \"compiler-message\") {\n+        if (data.reason !== 'compiler-message') {\n             return;\n         }\n \n         let spans: any[] = data.message.spans;\n         spans = spans.filter(o => o.is_primary);\n-        let file_name = null;\n \n         // We only handle primary span right now.\n         if (spans.length > 0) {\n-            let o = spans[0];\n+            const o = spans[0];\n \n-            console.log(\"o\", o);\n-            let rendered = data.message.rendered;\n-            let level = getLevel(data.message.level);\n-            let range = new vscode.Range(\n+            const rendered = data.message.rendered;\n+            const level = getLevel(data.message.level);\n+            const range = new vscode.Range(\n                 new vscode.Position(o.line_start - 1, o.column_start - 1),\n                 new vscode.Position(o.line_end - 1, o.column_end - 1)\n             );\n \n-            file_name = path.join(vscode.workspace.rootPath!, o.file_name);\n+            const fileName = path.join(vscode.workspace.rootPath!, o.file_name);\n             const diagnostic = new vscode.Diagnostic(range, rendered, level);\n \n             diagnostic.source = 'rustc';\n             diagnostic.code = data.message.code.code;\n             diagnostic.relatedInformation = [];\n \n-            let fileUrl = vscode.Uri.file(file_name!);\n+            const fileUrl = vscode.Uri.file(fileName!);\n \n-            let diagnostics: vscode.Diagnostic[] = [...(this.diagnosticCollection!.get(fileUrl) || [])];\n+            const diagnostics: vscode.Diagnostic[] = [...(this.diagnosticCollection!.get(fileUrl) || [])];\n             diagnostics.push(diagnostic);\n \n             this.diagnosticCollection!.set(fileUrl, diagnostics);\n         }\n     }\n \n-    processOutput(chunk: string) {\n+    private processOutput(chunk: string) {\n         // The stdout is not line based, convert it to line based for proceess.\n         this.outBuffer += chunk;\n-        let eolIndex;\n-        while ((eolIndex = this.outBuffer.indexOf('\\n')) >= 0) {\n+        let eolIndex = this.outBuffer.indexOf('\\n');\n+        while (eolIndex >= 0) {\n             // line includes the EOL\n             const line = this.outBuffer.slice(0, eolIndex + 1);\n             this.parseLine(line);\n             this.outBuffer = this.outBuffer.slice(eolIndex + 1);\n+\n+            eolIndex = this.outBuffer.indexOf('\\n');\n         }\n     }\n "}, {"sha": "0943e8533f91b4ba174ed2328749fd926f51160c", "filename": "editors/code/src/commands/watch_status.ts", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ac8f35019bd6224a0c2b085381dde2efc8888dc1/editors%2Fcode%2Fsrc%2Fcommands%2Fwatch_status.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ac8f35019bd6224a0c2b085381dde2efc8888dc1/editors%2Fcode%2Fsrc%2Fcommands%2Fwatch_status.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fwatch_status.ts?ref=ac8f35019bd6224a0c2b085381dde2efc8888dc1", "patch": "@@ -0,0 +1,37 @@\n+import * as timers from 'timers';\n+import * as vscode from 'vscode';\n+\n+const spinnerFrames = ['\u280b', '\u2819', '\u2839', '\u2838', '\u283c', '\u2834', '\u2826', '\u2827', '\u2807', '\u280f'];\n+\n+export class StatusDisplay {\n+    private i = 0;\n+    private statusBarItem: vscode.StatusBarItem;\n+    private timer?: NodeJS.Timeout;\n+\n+    constructor(subscriptions: vscode.Disposable[]) {\n+        this.statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 10);\n+        subscriptions.push(this.statusBarItem);\n+        this.statusBarItem.hide();\n+    }\n+\n+    public show() {\n+        this.timer = this.timer || setInterval(() => {\n+            this.statusBarItem!.text = 'cargo check ' + this.frame();\n+        }, 300);\n+\n+        this.statusBarItem!.show();\n+    }\n+\n+    public hide() {\n+        if (this.timer) {\n+            clearInterval(this.timer);\n+            this.timer = undefined;\n+        }\n+\n+        this.statusBarItem!.hide();\n+    }\n+\n+    private frame() {\n+        return spinnerFrames[this.i = ++this.i % spinnerFrames.length];\n+    }\n+}\n\\ No newline at end of file"}]}