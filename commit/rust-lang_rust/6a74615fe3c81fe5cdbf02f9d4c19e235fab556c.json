{"sha": "6a74615fe3c81fe5cdbf02f9d4c19e235fab556c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNzQ2MTVmZTNjODFmZTVjZGJmMDJmOWQ0YzE5ZTIzNWZhYjU1NmM=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-02-22T18:53:54Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-02-23T00:27:52Z"}, "message": "Run rustfmt over bitvec.rs and region_infer/values.rs", "tree": {"sha": "169c8b48a923ace9a42ca68cc040c40bf67808da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/169c8b48a923ace9a42ca68cc040c40bf67808da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a74615fe3c81fe5cdbf02f9d4c19e235fab556c", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAlqPYAgACgkQiMlBzaHU\nZDKH8A/9EkS8iI0HKq3hPF2jp4ybY3/o5U9aPaMYDQkLh6ArvQ4Mzd3IUNeGiu+r\nA+zMGyTTxrtjcGJEmxMJNslp9DqrswFvHClJ3YUgvmATiskXenqik3Wa4zL/8ukR\n9xMI2oShYjcEBvjS333SPJ3YxWSGPnrDoN8/81ZsjuWcPxw92Kpbd6G+aHgxW1Hf\nxakM2N+bXAyQ9dYXjSz2igryp4vbcoq9k9x6U6vPuzxJyXPYeRa9qrEpYIF+bJpA\n+mGucVBZQvQUzNnCFBBgYk6tH5fNtc3UnzajD1yHALXux9MbMTBUpTpaANrIVHVz\nKRqjgsEYNtppVG1mT25y8vVCe+A8BhHBg78/YvJGgvibeb4e1Qju5GRiEOaIGuN3\nu1LLGhVS6NxM2VWy8dzEiESHpuiQMyhST67gg18kntYjyrZs0JjwQRfuYp3NRUCP\nDdpvZhsDtcgonM/VSU273C+g6+txxjPzZal66sxXuvHUZNt/qlveCIW2lTQIpcOf\nh3fYjwiYcN/3U1GH7Uk5jWw3ga4TdRmJZe9fbESewHcvKICapHvuJTxFrCDETJm0\n6NneH38DywWR+tj9LQn3iNatgyDuOZmWwBGXvYBsU2SGHQ0CKhnTL/lt9JU848S0\ncbGjP+BlH+YyT+FS4A/ZbAeNnK4pV+BhhGK6Ci3yostf/3q/jE0=\n=cmZi\n-----END PGP SIGNATURE-----", "payload": "tree 169c8b48a923ace9a42ca68cc040c40bf67808da\nparent aa3409c898b2418c927f3db1743a777fa05bb514\nauthor Santiago Pastorino <spastorino@gmail.com> 1519325634 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1519345672 -0300\n\nRun rustfmt over bitvec.rs and region_infer/values.rs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a74615fe3c81fe5cdbf02f9d4c19e235fab556c", "html_url": "https://github.com/rust-lang/rust/commit/6a74615fe3c81fe5cdbf02f9d4c19e235fab556c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a74615fe3c81fe5cdbf02f9d4c19e235fab556c/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa3409c898b2418c927f3db1743a777fa05bb514", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa3409c898b2418c927f3db1743a777fa05bb514", "html_url": "https://github.com/rust-lang/rust/commit/aa3409c898b2418c927f3db1743a777fa05bb514"}], "stats": {"total": 98, "additions": 52, "deletions": 46}, "files": [{"sha": "54565afa4c6c7be4154cd9c5f15529c4b61c41d1", "filename": "src/librustc_data_structures/bitvec.rs", "status": "modified", "additions": 44, "deletions": 32, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/6a74615fe3c81fe5cdbf02f9d4c19e235fab556c/src%2Flibrustc_data_structures%2Fbitvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a74615fe3c81fe5cdbf02f9d4c19e235fab556c/src%2Flibrustc_data_structures%2Fbitvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbitvec.rs?ref=6a74615fe3c81fe5cdbf02f9d4c19e235fab556c", "patch": "@@ -27,7 +27,9 @@ impl BitVector {\n     #[inline]\n     pub fn new(num_bits: usize) -> BitVector {\n         let num_words = words(num_bits);\n-        BitVector { data: vec![0; num_words] }\n+        BitVector {\n+            data: vec![0; num_words],\n+        }\n     }\n \n     #[inline]\n@@ -133,7 +135,10 @@ impl<'a> Iterator for BitVectorIter<'a> {\n }\n \n impl FromIterator<bool> for BitVector {\n-    fn from_iter<I>(iter: I) -> BitVector where I: IntoIterator<Item=bool> {\n+    fn from_iter<I>(iter: I) -> BitVector\n+    where\n+        I: IntoIterator<Item = bool>,\n+    {\n         let iter = iter.into_iter();\n         let (len, _) = iter.size_hint();\n         // Make the minimum length for the bitvector WORD_BITS bits since that's\n@@ -262,7 +267,11 @@ impl BitMatrix {\n }\n \n #[derive(Clone, Debug)]\n-pub struct SparseBitMatrix<R, C> where R: Idx, C: Idx {\n+pub struct SparseBitMatrix<R, C>\n+where\n+    R: Idx,\n+    C: Idx,\n+{\n     vector: IndexVec<R, SparseBitSet<C>>,\n }\n \n@@ -340,7 +349,7 @@ impl<I: Idx> SparseChunk<I> {\n         SparseChunk {\n             key,\n             bits: 1 << (index % 128),\n-            _marker: PhantomData\n+            _marker: PhantomData,\n         }\n     }\n \n@@ -351,26 +360,28 @@ impl<I: Idx> SparseChunk<I> {\n     pub fn iter(&self) -> impl Iterator<Item = I> {\n         let base = self.key as usize * 128;\n         let mut bits = self.bits;\n-        (0..128).map(move |i| {\n-            let current_bits = bits;\n-            bits >>= 1;\n-            (i, current_bits)\n-        }).take_while(|&(_, bits)| bits != 0)\n-          .filter_map(move |(i, bits)| {\n-            if (bits & 1) != 0 {\n-                Some(I::new(base + i))\n-            } else {\n-                None\n-            }\n-        })\n+        (0..128)\n+            .map(move |i| {\n+                let current_bits = bits;\n+                bits >>= 1;\n+                (i, current_bits)\n+            })\n+            .take_while(|&(_, bits)| bits != 0)\n+            .filter_map(move |(i, bits)| {\n+                if (bits & 1) != 0 {\n+                    Some(I::new(base + i))\n+                } else {\n+                    None\n+                }\n+            })\n     }\n }\n \n impl<I: Idx> SparseBitSet<I> {\n     pub fn new() -> Self {\n         SparseBitSet {\n             chunk_bits: BTreeMap::new(),\n-            _marker: PhantomData\n+            _marker: PhantomData,\n         }\n     }\n \n@@ -380,7 +391,9 @@ impl<I: Idx> SparseBitSet<I> {\n \n     pub fn contains_chunk(&self, chunk: SparseChunk<I>) -> SparseChunk<I> {\n         SparseChunk {\n-            bits: self.chunk_bits.get(&chunk.key).map_or(0, |bits| bits & chunk.bits),\n+            bits: self.chunk_bits\n+                .get(&chunk.key)\n+                .map_or(0, |bits| bits & chunk.bits),\n             ..chunk\n         }\n     }\n@@ -415,7 +428,7 @@ impl<I: Idx> SparseBitSet<I> {\n                 }\n                 new_bits ^ old_bits\n             }\n-            Entry::Vacant(_) => 0\n+            Entry::Vacant(_) => 0,\n         };\n         SparseChunk {\n             bits: changed,\n@@ -428,12 +441,10 @@ impl<I: Idx> SparseBitSet<I> {\n     }\n \n     pub fn chunks<'a>(&'a self) -> impl Iterator<Item = SparseChunk<I>> + 'a {\n-        self.chunk_bits.iter().map(|(&key, &bits)| {\n-            SparseChunk {\n-                key,\n-                bits,\n-                _marker: PhantomData\n-            }\n+        self.chunk_bits.iter().map(|(&key, &bits)| SparseChunk {\n+            key,\n+            bits,\n+            _marker: PhantomData,\n         })\n     }\n \n@@ -478,11 +489,12 @@ fn bitvec_iter_works() {\n     bitvec.insert(65);\n     bitvec.insert(66);\n     bitvec.insert(99);\n-    assert_eq!(bitvec.iter().collect::<Vec<_>>(),\n-               [1, 10, 19, 62, 63, 64, 65, 66, 99]);\n+    assert_eq!(\n+        bitvec.iter().collect::<Vec<_>>(),\n+        [1, 10, 19, 62, 63, 64, 65, 66, 99]\n+    );\n }\n \n-\n #[test]\n fn bitvec_iter_works_2() {\n     let mut bitvec = BitVector::new(319);\n@@ -514,24 +526,24 @@ fn union_two_vecs() {\n #[test]\n fn grow() {\n     let mut vec1 = BitVector::new(65);\n-    for index in 0 .. 65 {\n+    for index in 0..65 {\n         assert!(vec1.insert(index));\n         assert!(!vec1.insert(index));\n     }\n     vec1.grow(128);\n \n     // Check if the bits set before growing are still set\n-    for index in 0 .. 65 {\n+    for index in 0..65 {\n         assert!(vec1.contains(index));\n     }\n \n     // Check if the new bits are all un-set\n-    for index in 65 .. 128 {\n+    for index in 65..128 {\n         assert!(!vec1.contains(index));\n     }\n \n     // Check that we can set all new bits without running out of bounds\n-    for index in 65 .. 128 {\n+    for index in 65..128 {\n         assert!(vec1.insert(index));\n         assert!(!vec1.insert(index));\n     }"}, {"sha": "e6f2a43bfc8f79d74ec021fc051b935836c7aa29", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6a74615fe3c81fe5cdbf02f9d4c19e235fab556c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a74615fe3c81fe5cdbf02f9d4c19e235fab556c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=6a74615fe3c81fe5cdbf02f9d4c19e235fab556c", "patch": "@@ -69,9 +69,7 @@ impl RegionValueElements {\n \n     /// Iterates over the `RegionElementIndex` for all points in the CFG.\n     pub(super) fn all_point_indices<'a>(&'a self) -> impl Iterator<Item = RegionElementIndex> + 'a {\n-        (0..self.num_points).map(move |i| {\n-            RegionElementIndex::new(i + self.num_universal_regions)\n-        })\n+        (0..self.num_points).map(move |i| RegionElementIndex::new(i + self.num_universal_regions))\n     }\n \n     /// Iterates over the `RegionElementIndex` for all points in the CFG.\n@@ -154,7 +152,6 @@ pub(super) enum RegionElement {\n     UniversalRegion(RegionVid),\n }\n \n-\n pub(super) trait ToElementIndex {\n     fn to_element_index(self, elements: &RegionValueElements) -> RegionElementIndex;\n }\n@@ -214,8 +211,10 @@ impl RegionValues {\n \n         Self {\n             elements: elements.clone(),\n-            matrix: SparseBitMatrix::new(RegionVid::new(num_region_variables),\n-                                         RegionElementIndex::new(elements.num_elements())),\n+            matrix: SparseBitMatrix::new(\n+                RegionVid::new(num_region_variables),\n+                RegionElementIndex::new(elements.num_elements()),\n+            ),\n             causes: if track_causes.0 {\n                 Some(CauseMap::default())\n             } else {\n@@ -295,8 +294,7 @@ impl RegionValues {\n         // complicate causal tracking though.\n         debug!(\n             \"add_universal_regions_outlived_by(from_region={:?}, to_region={:?})\",\n-            from_region,\n-            to_region\n+            from_region, to_region\n         );\n         let mut changed = false;\n         for elem in self.elements.all_universal_region_indices() {\n@@ -326,9 +324,7 @@ impl RegionValues {\n         &'a self,\n         r: RegionVid,\n     ) -> impl Iterator<Item = RegionElementIndex> + 'a {\n-        self.matrix\n-            .iter(r)\n-            .map(move |i| i)\n+        self.matrix.iter(r).map(move |i| i)\n     }\n \n     /// Returns just the universal regions that are contained in a given region's value.\n@@ -416,9 +412,7 @@ impl RegionValues {\n             assert_eq!(location1.block, location2.block);\n             str.push_str(&format!(\n                 \"{:?}[{}..={}]\",\n-                location1.block,\n-                location1.statement_index,\n-                location2.statement_index\n+                location1.block, location1.statement_index, location2.statement_index\n             ));\n         }\n     }"}]}