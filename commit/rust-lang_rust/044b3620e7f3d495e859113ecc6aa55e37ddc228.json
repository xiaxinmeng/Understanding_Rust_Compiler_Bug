{"sha": "044b3620e7f3d495e859113ecc6aa55e37ddc228", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NGIzNjIwZTdmM2Q0OTVlODU5MTEzZWNjNmFhNTVlMzdkZGMyMjg=", "commit": {"author": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-06-16T22:23:34Z"}, "committer": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-06-16T22:23:34Z"}, "message": "Move some hard error logic to InterpError", "tree": {"sha": "b1950166e3c085757ee4cc013a3db8b79b31da99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1950166e3c085757ee4cc013a3db8b79b31da99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/044b3620e7f3d495e859113ecc6aa55e37ddc228", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/044b3620e7f3d495e859113ecc6aa55e37ddc228", "html_url": "https://github.com/rust-lang/rust/commit/044b3620e7f3d495e859113ecc6aa55e37ddc228", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/044b3620e7f3d495e859113ecc6aa55e37ddc228/comments", "author": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3", "html_url": "https://github.com/rust-lang/rust/commit/4fe4ff95f6c459d98c2449c9993e0f7e0b8c47d3"}], "stats": {"total": 42, "additions": 27, "deletions": 15}, "files": [{"sha": "cce360713b55324bcf4b1fc233b55a212be100b8", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/044b3620e7f3d495e859113ecc6aa55e37ddc228/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044b3620e7f3d495e859113ecc6aa55e37ddc228/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=044b3620e7f3d495e859113ecc6aa55e37ddc228", "patch": "@@ -502,4 +502,14 @@ impl InterpError<'_> {\n             _ => false,\n         }\n     }\n+\n+    /// Should this error be reported as a hard error, preventing compilation, or a soft error,\n+    /// causing a deny-by-default lint?\n+    pub fn is_hard_err(&self) -> bool {\n+        use InterpError::*;\n+        match *self {\n+            MachineStop(ref err) => err.is_hard_err(),\n+            _ => false,\n+        }\n+    }\n }"}, {"sha": "536dbad4f764d9d20853b49768775e32699f9ccd", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/044b3620e7f3d495e859113ecc6aa55e37ddc228/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044b3620e7f3d495e859113ecc6aa55e37ddc228/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=044b3620e7f3d495e859113ecc6aa55e37ddc228", "patch": "@@ -2,8 +2,8 @@ use super::{CompileTimeEvalContext, CompileTimeInterpreter, ConstEvalErr, Memory\n use crate::interpret::eval_nullary_intrinsic;\n use crate::interpret::{\n     intern_const_alloc_recursive, Allocation, ConstAlloc, ConstValue, CtfeValidationMode, GlobalId,\n-    Immediate, InternKind, InterpCx, InterpError, InterpResult, MPlaceTy, MemoryKind, OpTy,\n-    RefTracking, Scalar, ScalarMaybeUninit, StackPopCleanup,\n+    Immediate, InternKind, InterpCx, InterpResult, MPlaceTy, MemoryKind, OpTy, RefTracking, Scalar,\n+    ScalarMaybeUninit, StackPopCleanup,\n };\n use crate::util::pretty::display_allocation;\n \n@@ -312,23 +312,17 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n             let err = ConstEvalErr::new(&ecx, error, None);\n             // Some CTFE errors raise just a lint, not a hard error; see\n             // <https://github.com/rust-lang/rust/issues/71800>.\n-            let emit_as_lint = if let Some(def) = def.as_local() {\n+            let is_hard_err = if let Some(def) = def.as_local() {\n                 // (Associated) consts only emit a lint, since they might be unused.\n-                matches!(tcx.def_kind(def.did.to_def_id()), DefKind::Const | DefKind::AssocConst)\n-                    && !matches!(&err.error, InterpError::MachineStop(err) if err.is_hard_err())\n+                !matches!(tcx.def_kind(def.did.to_def_id()), DefKind::Const | DefKind::AssocConst)\n+                    // check if the inner InterpError is hard\n+                    || err.error.is_hard_err()\n             } else {\n                 // use of broken constant from other crate: always an error\n-                false\n+                true\n             };\n-            if emit_as_lint {\n-                let hir_id = tcx.hir().local_def_id_to_hir_id(def.as_local().unwrap().did);\n-                Err(err.report_as_lint(\n-                    tcx.at(tcx.def_span(def.did)),\n-                    \"any use of this value will cause an error\",\n-                    hir_id,\n-                    Some(err.span),\n-                ))\n-            } else {\n+\n+            if is_hard_err {\n                 let msg = if is_static {\n                     Cow::from(\"could not evaluate static initializer\")\n                 } else {\n@@ -346,6 +340,14 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n                 };\n \n                 Err(err.report_as_error(ecx.tcx.at(ecx.cur_span()), &msg))\n+            } else {\n+                let hir_id = tcx.hir().local_def_id_to_hir_id(def.as_local().unwrap().did);\n+                Err(err.report_as_lint(\n+                    tcx.at(tcx.def_span(def.did)),\n+                    \"any use of this value will cause an error\",\n+                    hir_id,\n+                    Some(err.span),\n+                ))\n             }\n         }\n         Ok(mplace) => {"}]}