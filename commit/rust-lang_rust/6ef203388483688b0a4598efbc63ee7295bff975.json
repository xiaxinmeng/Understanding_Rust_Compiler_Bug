{"sha": "6ef203388483688b0a4598efbc63ee7295bff975", "node_id": "C_kwDOAAsO6NoAKDZlZjIwMzM4ODQ4MzY4OGIwYTQ1OThlZmJjNjNlZTcyOTViZmY5NzU", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-05-18T02:51:52Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-06-08T20:32:41Z"}, "message": "Fix FFI-unwind unsoundness with mixed panic mode", "tree": {"sha": "987623cb6b1214023462a9cb6e69f1dbb6471c08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/987623cb6b1214023462a9cb6e69f1dbb6471c08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ef203388483688b0a4598efbc63ee7295bff975", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ef203388483688b0a4598efbc63ee7295bff975", "html_url": "https://github.com/rust-lang/rust/commit/6ef203388483688b0a4598efbc63ee7295bff975", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ef203388483688b0a4598efbc63ee7295bff975/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1", "html_url": "https://github.com/rust-lang/rust/commit/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1"}], "stats": {"total": 226, "additions": 212, "deletions": 14}, "files": [{"sha": "ef9c7859dbb7a8b052fcf3ef780569b7d919c2b8", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ef203388483688b0a4598efbc63ee7295bff975/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef203388483688b0a4598efbc63ee7295bff975/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=6ef203388483688b0a4598efbc63ee7295bff975", "patch": "@@ -944,6 +944,7 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n             if !tcx.sess.opts.debugging_opts.thir_unsafeck {\n                 rustc_mir_transform::check_unsafety::check_unsafety(tcx, def_id);\n             }\n+            tcx.ensure().has_ffi_unwind_calls(def_id);\n \n             if tcx.hir().body_const_context(def_id).is_some() {\n                 tcx.ensure()"}, {"sha": "48d89a785c117dc11b43aa50a4640b0c0ad55ccf", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6ef203388483688b0a4598efbc63ee7295bff975/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef203388483688b0a4598efbc63ee7295bff975/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=6ef203388483688b0a4598efbc63ee7295bff975", "patch": "@@ -3230,6 +3230,7 @@ declare_lint_pass! {\n         UNEXPECTED_CFGS,\n         DEPRECATED_WHERE_CLAUSE_LOCATION,\n         TEST_UNSTABLE_LINT,\n+        FFI_UNWIND_CALLS,\n     ]\n }\n \n@@ -3895,3 +3896,42 @@ declare_lint! {\n     \"this unstable lint is only for testing\",\n     @feature_gate = sym::test_unstable_lint;\n }\n+\n+declare_lint! {\n+    /// The `ffi_unwind_calls` lint detects calls to foreign functions or function pointers with\n+    /// `C-unwind` or other FFI-unwind ABIs.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,ignore (need FFI)\n+    /// #![feature(ffi_unwind_calls)]\n+    /// #![feature(c_unwind)]\n+    ///\n+    /// # mod impl {\n+    /// #     #[no_mangle]\n+    /// #     pub fn \"C-unwind\" fn foo() {}\n+    /// # }\n+    ///\n+    /// extern \"C-unwind\" {\n+    ///     fn foo();\n+    /// }\n+    ///\n+    /// fn bar() {\n+    ///     unsafe { foo(); }\n+    ///     let ptr: unsafe extern \"C-unwind\" fn() = foo;\n+    ///     unsafe { ptr(); }\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// For crates containing such calls, if they are compiled with `-C panic=unwind` then the\n+    /// produced library cannot be linked with crates compiled with `-C panic=abort`. For crates\n+    /// that desire this ability it is therefore necessary to avoid such calls.\n+    pub FFI_UNWIND_CALLS,\n+    Allow,\n+    \"call to foreign functions or function pointers with FFI-unwind ABI\",\n+    @feature_gate = sym::c_unwind;\n+}"}, {"sha": "3f6d1f050056d5ad3b06ca0d850319b5733bde7e", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ef203388483688b0a4598efbc63ee7295bff975/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef203388483688b0a4598efbc63ee7295bff975/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=6ef203388483688b0a4598efbc63ee7295bff975", "patch": "@@ -744,7 +744,7 @@ impl<'a> CrateLoader<'a> {\n         if !data.is_panic_runtime() {\n             self.sess.err(&format!(\"the crate `{}` is not a panic runtime\", name));\n         }\n-        if data.panic_strategy() != desired_strategy {\n+        if data.panic_strategy() != Some(desired_strategy) {\n             self.sess.err(&format!(\n                 \"the crate `{}` does not have the panic \\\n                                     strategy `{}`\","}, {"sha": "349ff08124cf6198f6c3e29fa3875ba678c65709", "filename": "compiler/rustc_metadata/src/dependency_format.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6ef203388483688b0a4598efbc63ee7295bff975/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef203388483688b0a4598efbc63ee7295bff975/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs?ref=6ef203388483688b0a4598efbc63ee7295bff975", "patch": "@@ -60,7 +60,6 @@ use rustc_middle::ty::TyCtxt;\n use rustc_session::config::CrateType;\n use rustc_session::cstore::CrateDepKind;\n use rustc_session::cstore::LinkagePreference::{self, RequireDynamic, RequireStatic};\n-use rustc_target::spec::PanicStrategy;\n \n pub(crate) fn calculate(tcx: TyCtxt<'_>) -> Dependencies {\n     tcx.sess\n@@ -367,7 +366,7 @@ fn verify_ok(tcx: TyCtxt<'_>, list: &[Linkage]) {\n                     prev_name, cur_name\n                 ));\n             }\n-            panic_runtime = Some((cnum, tcx.panic_strategy(cnum)));\n+            panic_runtime = Some((cnum, tcx.panic_strategy(cnum).unwrap()));\n         }\n     }\n \n@@ -397,18 +396,14 @@ fn verify_ok(tcx: TyCtxt<'_>, list: &[Linkage]) {\n             if let Linkage::NotLinked = *linkage {\n                 continue;\n             }\n-            if desired_strategy == PanicStrategy::Abort {\n-                continue;\n-            }\n             let cnum = CrateNum::new(i + 1);\n             if tcx.is_compiler_builtins(cnum) {\n                 continue;\n             }\n \n-            let found_strategy = tcx.panic_strategy(cnum);\n-            if desired_strategy != found_strategy {\n+            if let Some(found_strategy) = tcx.panic_strategy(cnum) && desired_strategy != found_strategy {\n                 sess.err(&format!(\n-                    \"the crate `{}` is compiled with the \\\n+                    \"the crate `{}` requires \\\n                                panic strategy `{}` which is \\\n                                incompatible with this crate's \\\n                                strategy of `{}`\","}, {"sha": "658c51bf62043c507fa20b639a8d504dce532f67", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ef203388483688b0a4598efbc63ee7295bff975/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef203388483688b0a4598efbc63ee7295bff975/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=6ef203388483688b0a4598efbc63ee7295bff975", "patch": "@@ -1759,7 +1759,7 @@ impl CrateMetadata {\n         self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))\n     }\n \n-    pub(crate) fn panic_strategy(&self) -> PanicStrategy {\n+    pub(crate) fn panic_strategy(&self) -> Option<PanicStrategy> {\n         self.root.panic_strategy\n     }\n "}, {"sha": "cf685a7bd6217e04543126cbee7dc08ca986f29b", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ef203388483688b0a4598efbc63ee7295bff975/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef203388483688b0a4598efbc63ee7295bff975/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=6ef203388483688b0a4598efbc63ee7295bff975", "patch": "@@ -665,7 +665,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             triple: tcx.sess.opts.target_triple.clone(),\n             hash: tcx.crate_hash(LOCAL_CRATE),\n             stable_crate_id: tcx.def_path_hash(LOCAL_CRATE.as_def_id()).stable_crate_id(),\n-            panic_strategy: tcx.sess.panic_strategy(),\n+            panic_strategy: tcx.required_panic_strategy(()),\n             panic_in_drop_strategy: tcx.sess.opts.debugging_opts.panic_in_drop,\n             edition: tcx.sess.edition(),\n             has_global_allocator: tcx.has_global_allocator(LOCAL_CRATE),"}, {"sha": "60510e535b244177b97a7825f140c0ccffcdd68a", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ef203388483688b0a4598efbc63ee7295bff975/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef203388483688b0a4598efbc63ee7295bff975/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=6ef203388483688b0a4598efbc63ee7295bff975", "patch": "@@ -217,7 +217,7 @@ pub(crate) struct CrateRoot {\n     extra_filename: String,\n     hash: Svh,\n     stable_crate_id: StableCrateId,\n-    panic_strategy: PanicStrategy,\n+    panic_strategy: Option<PanicStrategy>,\n     panic_in_drop_strategy: PanicStrategy,\n     edition: Edition,\n     has_global_allocator: bool,"}, {"sha": "5d0d11a1b784a77c77cde6cc9defb930e9aed820", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6ef203388483688b0a4598efbc63ee7295bff975/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef203388483688b0a4598efbc63ee7295bff975/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=6ef203388483688b0a4598efbc63ee7295bff975", "patch": "@@ -1365,9 +1365,16 @@ rustc_queries! {\n         desc { \"query a crate is `#![profiler_runtime]`\" }\n         separate_provide_extern\n     }\n-    query panic_strategy(_: CrateNum) -> PanicStrategy {\n+    query has_ffi_unwind_calls(key: LocalDefId) -> bool {\n+        desc { |tcx| \"check if `{}` contains FFI-unwind calls\", tcx.def_path_str(key.to_def_id()) }\n+        cache_on_disk_if { true }\n+    }\n+    query required_panic_strategy(_: ()) -> Option<PanicStrategy> {\n+        desc { \"compute the required panic strategy for the current crate\" }\n+    }\n+    query panic_strategy(_: CrateNum) -> Option<PanicStrategy> {\n         fatal_cycle\n-        desc { \"query a crate's configured panic strategy\" }\n+        desc { \"query a crate's required panic strategy\" }\n         separate_provide_extern\n     }\n     query panic_in_drop_strategy(_: CrateNum) -> PanicStrategy {"}, {"sha": "e6f8ef5759a113a92ac63bb0749095d5d39efe0d", "filename": "compiler/rustc_mir_transform/src/ffi_unwind_calls.rs", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/6ef203388483688b0a4598efbc63ee7295bff975/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef203388483688b0a4598efbc63ee7295bff975/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs?ref=6ef203388483688b0a4598efbc63ee7295bff975", "patch": "@@ -0,0 +1,148 @@\n+use rustc_hir::def::DefKind;\n+use rustc_hir::def_id::LocalDefId;\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::layout;\n+use rustc_middle::ty::query::Providers;\n+use rustc_middle::ty::{self, TyCtxt};\n+use rustc_session::lint::builtin::FFI_UNWIND_CALLS;\n+use rustc_target::spec::abi::Abi;\n+use rustc_target::spec::PanicStrategy;\n+\n+fn abi_can_unwind(abi: Abi) -> bool {\n+    use Abi::*;\n+    match abi {\n+        C { unwind }\n+        | System { unwind }\n+        | Cdecl { unwind }\n+        | Stdcall { unwind }\n+        | Fastcall { unwind }\n+        | Vectorcall { unwind }\n+        | Thiscall { unwind }\n+        | Aapcs { unwind }\n+        | Win64 { unwind }\n+        | SysV64 { unwind } => unwind,\n+        PtxKernel\n+        | Msp430Interrupt\n+        | X86Interrupt\n+        | AmdGpuKernel\n+        | EfiApi\n+        | AvrInterrupt\n+        | AvrNonBlockingInterrupt\n+        | CCmseNonSecureCall\n+        | Wasm\n+        | RustIntrinsic\n+        | PlatformIntrinsic\n+        | Unadjusted => false,\n+        Rust | RustCall | RustCold => true,\n+    }\n+}\n+\n+// Check if the body of this def_id can possibly leak a foreign unwind into Rust code.\n+fn has_ffi_unwind_calls(tcx: TyCtxt<'_>, local_def_id: LocalDefId) -> bool {\n+    debug!(\"has_ffi_unwind_calls({local_def_id:?})\");\n+\n+    // Only perform check on functions because constants cannot call FFI functions.\n+    let def_id = local_def_id.to_def_id();\n+    let kind = tcx.def_kind(def_id);\n+    let is_function = match kind {\n+        DefKind::Fn | DefKind::AssocFn | DefKind::Ctor(..) => true,\n+        _ => tcx.is_closure(def_id),\n+    };\n+    if !is_function {\n+        return false;\n+    }\n+\n+    let body = &*tcx.mir_built(ty::WithOptConstParam::unknown(local_def_id)).borrow();\n+\n+    let body_ty = tcx.type_of(def_id);\n+    let body_abi = match body_ty.kind() {\n+        ty::FnDef(..) => body_ty.fn_sig(tcx).abi(),\n+        ty::Closure(..) => Abi::RustCall,\n+        ty::Generator(..) => Abi::Rust,\n+        _ => span_bug!(body.span, \"unexpected body ty: {:?}\", body_ty),\n+    };\n+    let body_can_unwind = layout::fn_can_unwind(tcx, Some(def_id), body_abi);\n+\n+    // Foreign unwinds cannot leak past functions that themselves cannot unwind.\n+    if !body_can_unwind {\n+        return false;\n+    }\n+\n+    let mut tainted = false;\n+\n+    for block in body.basic_blocks() {\n+        if block.is_cleanup {\n+            continue;\n+        }\n+        let Some(terminator) = &block.terminator else { continue };\n+        let TerminatorKind::Call { func, .. } = &terminator.kind else { continue };\n+\n+        let ty = func.ty(body, tcx);\n+        let sig = ty.fn_sig(tcx);\n+\n+        // Rust calls cannot themselves create foreign unwinds.\n+        if let Abi::Rust | Abi::RustCall | Abi::RustCold = sig.abi() {\n+            continue;\n+        };\n+\n+        let fn_def_id = match ty.kind() {\n+            ty::FnPtr(_) => None,\n+            &ty::FnDef(def_id, _) => {\n+                // Rust calls cannot themselves create foreign unwinds.\n+                if !tcx.is_foreign_item(def_id) {\n+                    continue;\n+                }\n+                Some(def_id)\n+            }\n+            _ => bug!(\"invalid callee of type {:?}\", ty),\n+        };\n+\n+        if layout::fn_can_unwind(tcx, fn_def_id, sig.abi()) && abi_can_unwind(sig.abi()) {\n+            // We have detected a call that can possibly leak foreign unwind.\n+            //\n+            // Because the function body itself can unwind, we are not aborting this function call\n+            // upon unwind, so this call can possibly leak foreign unwind into Rust code if the\n+            // panic runtime linked is panic-abort.\n+\n+            let lint_root = body.source_scopes[terminator.source_info.scope]\n+                .local_data\n+                .as_ref()\n+                .assert_crate_local()\n+                .lint_root;\n+            let span = terminator.source_info.span;\n+\n+            tcx.struct_span_lint_hir(FFI_UNWIND_CALLS, lint_root, span, |lint| {\n+                let msg = match fn_def_id {\n+                    Some(_) => \"call to foreign function with FFI-unwind ABI\",\n+                    None => \"call to function pointer with FFI-unwind ABI\",\n+                };\n+                let mut db = lint.build(msg);\n+                db.span_label(span, msg);\n+                db.emit();\n+            });\n+\n+            tainted = true;\n+        }\n+    }\n+\n+    tainted\n+}\n+\n+fn required_panic_strategy(tcx: TyCtxt<'_>, (): ()) -> Option<PanicStrategy> {\n+    if tcx.sess.panic_strategy() == PanicStrategy::Abort {\n+        return Some(PanicStrategy::Abort);\n+    }\n+\n+    for def_id in tcx.hir().body_owners() {\n+        if tcx.has_ffi_unwind_calls(def_id) {\n+            return Some(PanicStrategy::Unwind);\n+        }\n+    }\n+\n+    // This crate can be linked with either runtime.\n+    None\n+}\n+\n+pub(crate) fn provide(providers: &mut Providers) {\n+    *providers = Providers { has_ffi_unwind_calls, required_panic_strategy, ..*providers };\n+}"}, {"sha": "e4591c3f23e71dce9cd2c26639d68299f7d4be7b", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ef203388483688b0a4598efbc63ee7295bff975/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef203388483688b0a4598efbc63ee7295bff975/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=6ef203388483688b0a4598efbc63ee7295bff975", "patch": "@@ -57,6 +57,7 @@ mod dest_prop;\n pub mod dump_mir;\n mod early_otherwise_branch;\n mod elaborate_drops;\n+mod ffi_unwind_calls;\n mod function_item_references;\n mod generator;\n mod inline;\n@@ -96,6 +97,7 @@ pub fn provide(providers: &mut Providers) {\n     check_unsafety::provide(providers);\n     check_packed_ref::provide(providers);\n     coverage::query::provide(providers);\n+    ffi_unwind_calls::provide(providers);\n     shim::provide(providers);\n     *providers = Providers {\n         mir_keys,\n@@ -221,6 +223,9 @@ fn mir_const<'tcx>(\n         }\n     }\n \n+    // has_ffi_unwind_calls query uses the raw mir, so make sure it is run.\n+    tcx.ensure().has_ffi_unwind_calls(def.did);\n+\n     let mut body = tcx.mir_built(def).steal();\n \n     rustc_middle::mir::dump_mir(tcx, None, \"mir_map\", &0, &body, |_, _| Ok(()));"}, {"sha": "fc2ff3635133cf7e2bfd755402d06b4c4c4ab15b", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ef203388483688b0a4598efbc63ee7295bff975/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef203388483688b0a4598efbc63ee7295bff975/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=6ef203388483688b0a4598efbc63ee7295bff975", "patch": "@@ -210,6 +210,8 @@\n #![allow(unused_lifetimes)]\n // Tell the compiler to link to either panic_abort or panic_unwind\n #![needs_panic_runtime]\n+// Ensure that std can be linked against panic_abort despite compiled with `-C panic=unwind`\n+#![cfg_attr(not(bootstrap), deny(ffi_unwind_calls))]\n // std may use features in a platform-specific way\n #![allow(unused_features)]\n #![cfg_attr(test, feature(internal_output_capture, print_internals, update_panic_count))]"}]}