{"sha": "acf33f2d6bca429196692d2b557c8e53e10bb9fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZjMzZjJkNmJjYTQyOTE5NjY5MmQyYjU1N2M4ZTUzZTEwYmI5ZmU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-28T19:18:29Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-21T22:29:27Z"}, "message": "Use Arena inside hir::ForeignItem.", "tree": {"sha": "40aba9e65c02480ef65bdd605711b6018be42b35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40aba9e65c02480ef65bdd605711b6018be42b35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acf33f2d6bca429196692d2b557c8e53e10bb9fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acf33f2d6bca429196692d2b557c8e53e10bb9fe", "html_url": "https://github.com/rust-lang/rust/commit/acf33f2d6bca429196692d2b557c8e53e10bb9fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acf33f2d6bca429196692d2b557c8e53e10bb9fe/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0", "html_url": "https://github.com/rust-lang/rust/commit/abbe6259e1a4e7bf6e2eccbae0748c0e5c15ebb0"}], "stats": {"total": 135, "additions": 72, "deletions": 63}, "files": [{"sha": "3f0c0277f8ac6424c6088230bde280132e2bd4ca", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=acf33f2d6bca429196692d2b557c8e53e10bb9fe", "patch": "@@ -126,6 +126,8 @@ macro_rules! arena_types {\n             [few] hir_forest: rustc::hir::map::Forest<$tcx>,\n             [] attribute: syntax::ast::Attribute,\n             [] global_asm: rustc::hir::GlobalAsm,\n+            [] fn_decl: rustc::hir::FnDecl,\n+            [] foreign_item: rustc::hir::ForeignItem<$tcx>,\n             [] impl_item_ref: rustc::hir::ImplItemRef,\n             [] macro_def: rustc::hir::MacroDef<$tcx>,\n             [] path: rustc::hir::Path,"}, {"sha": "d5acde2f46364e3d39cd7df3a5800eacffe574e8", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=acf33f2d6bca429196692d2b557c8e53e10bb9fe", "patch": "@@ -120,7 +120,7 @@ impl Target {\n         }\n     }\n \n-    fn from_foreign_item(foreign_item: &hir::ForeignItem) -> Target {\n+    fn from_foreign_item(foreign_item: &hir::ForeignItem<'_>) -> Target {\n         match foreign_item.kind {\n             hir::ForeignItemKind::Fn(..) => Target::ForeignFn,\n             hir::ForeignItemKind::Static(..) => Target::ForeignStatic,\n@@ -504,7 +504,7 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         intravisit::walk_trait_item(self, trait_item)\n     }\n \n-    fn visit_foreign_item(&mut self, f_item: &'tcx hir::ForeignItem) {\n+    fn visit_foreign_item(&mut self, f_item: &'tcx hir::ForeignItem<'tcx>) {\n         let target = Target::from_foreign_item(f_item);\n         self.check_attributes(f_item.hir_id, &f_item.attrs, &f_item.span, target, None);\n         intravisit::walk_foreign_item(self, f_item)"}, {"sha": "d10b5cd03738a48a7f1f9a741a4e18776419f664", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=acf33f2d6bca429196692d2b557c8e53e10bb9fe", "patch": "@@ -250,7 +250,7 @@ pub trait Visitor<'v>: Sized {\n     fn visit_mod(&mut self, m: &'v Mod, _s: Span, n: HirId) {\n         walk_mod(self, m, n)\n     }\n-    fn visit_foreign_item(&mut self, i: &'v ForeignItem) {\n+    fn visit_foreign_item(&mut self, i: &'v ForeignItem<'v>) {\n         walk_foreign_item(self, i)\n     }\n     fn visit_local(&mut self, l: &'v Local) {\n@@ -498,7 +498,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n         }\n         ItemKind::ForeignMod(ref foreign_module) => {\n             visitor.visit_id(item.hir_id);\n-            walk_list!(visitor, visit_foreign_item, &foreign_module.items);\n+            walk_list!(visitor, visit_foreign_item, foreign_module.items);\n         }\n         ItemKind::GlobalAsm(_) => {\n             visitor.visit_id(item.hir_id);\n@@ -735,13 +735,13 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n     }\n }\n \n-pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V, foreign_item: &'v ForeignItem) {\n+pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V, foreign_item: &'v ForeignItem<'v>) {\n     visitor.visit_id(foreign_item.hir_id);\n     visitor.visit_vis(&foreign_item.vis);\n     visitor.visit_ident(foreign_item.ident);\n \n     match foreign_item.kind {\n-        ForeignItemKind::Fn(ref function_declaration, ref param_names, ref generics) => {\n+        ForeignItemKind::Fn(ref function_declaration, param_names, ref generics) => {\n             visitor.visit_generics(generics);\n             visitor.visit_fn_decl(function_declaration);\n             for &param_name in param_names {\n@@ -752,7 +752,7 @@ pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V, foreign_item: &'v\n         ForeignItemKind::Type => (),\n     }\n \n-    walk_list!(visitor, visit_attribute, &foreign_item.attrs);\n+    walk_list!(visitor, visit_attribute, foreign_item.attrs);\n }\n \n pub fn walk_param_bound<'v, V: Visitor<'v>>(visitor: &mut V, bound: &'v GenericBound) {"}, {"sha": "a19ddd5fd94ff4a49fdc305ca48fb54700a4b825", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=acf33f2d6bca429196692d2b557c8e53e10bb9fe", "patch": "@@ -706,12 +706,12 @@ impl LoweringContext<'_, 'hir> {\n         respan(vis.span, vis_kind)\n     }\n \n-    fn lower_foreign_item(&mut self, i: &ForeignItem) -> hir::ForeignItem {\n+    fn lower_foreign_item(&mut self, i: &ForeignItem) -> hir::ForeignItem<'hir> {\n         let def_id = self.resolver.definitions().local_def_id(i.id);\n         hir::ForeignItem {\n             hir_id: self.lower_node_id(i.id),\n             ident: i.ident,\n-            attrs: self.lower_attrs(&i.attrs),\n+            attrs: self.lower_attrs_arena(&i.attrs),\n             kind: match i.kind {\n                 ForeignItemKind::Fn(ref fdec, ref generics) => {\n                     let (generics, (fn_dec, fn_args)) = self.add_in_band_defs(\n@@ -726,12 +726,14 @@ impl LoweringContext<'_, 'hir> {\n                             )\n                         },\n                     );\n+                    let fn_dec = self.arena.alloc(fn_dec.into_inner());\n+                    let fn_args = self.arena.alloc_from_iter(fn_args.into_iter());\n \n                     hir::ForeignItemKind::Fn(fn_dec, fn_args, generics)\n                 }\n                 ForeignItemKind::Static(ref t, m) => {\n                     hir::ForeignItemKind::Static(\n-                        self.lower_ty(t, ImplTraitContext::disallowed()), m)\n+                        self.arena.alloc(self.lower_ty(t, ImplTraitContext::disallowed()).into_inner()), m)\n                 }\n                 ForeignItemKind::Ty => hir::ForeignItemKind::Type,\n                 ForeignItemKind::Macro(_) => panic!(\"macro shouldn't exist here\"),\n@@ -741,13 +743,12 @@ impl LoweringContext<'_, 'hir> {\n         }\n     }\n \n-    fn lower_foreign_mod(&mut self, fm: &ForeignMod) -> hir::ForeignMod {\n+    fn lower_foreign_mod(&mut self, fm: &ForeignMod) -> hir::ForeignMod<'hir> {\n         hir::ForeignMod {\n             abi: fm.abi.map_or(abi::Abi::C, |abi| self.lower_abi(abi)),\n-            items: fm.items\n+            items: self.arena.alloc_from_iter(fm.items\n                 .iter()\n-                .map(|x| self.lower_foreign_item(x))\n-                .collect(),\n+                .map(|x| self.lower_foreign_item(x))),\n         }\n     }\n "}, {"sha": "c29ad49aca122d64819ad7883558443793692a61", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=acf33f2d6bca429196692d2b557c8e53e10bb9fe", "patch": "@@ -385,7 +385,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         });\n     }\n \n-    fn visit_foreign_item(&mut self, foreign_item: &'hir ForeignItem) {\n+    fn visit_foreign_item(&mut self, foreign_item: &'hir ForeignItem<'hir>) {\n         self.insert(foreign_item.span, foreign_item.hir_id, Node::ForeignItem(foreign_item));\n \n         self.with_parent(foreign_item.hir_id, |this| {"}, {"sha": "df4bc7cc817acdb6bdf9b650f858c36f6cf9175b", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=acf33f2d6bca429196692d2b557c8e53e10bb9fe", "patch": "@@ -1002,7 +1002,7 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn expect_foreign_item(&self, id: HirId) -> &'hir ForeignItem {\n+    pub fn expect_foreign_item(&self, id: HirId) -> &'hir ForeignItem<'hir> {\n         match self.find(id) {\n             Some(Node::ForeignItem(item)) => item,\n             _ => bug!(\"expected foreign item, found {}\", self.node_to_string(id))\n@@ -1249,7 +1249,7 @@ trait Named {\n impl<T:Named> Named for Spanned<T> { fn name(&self) -> Name { self.node.name() } }\n \n impl Named for Item<'_> { fn name(&self) -> Name { self.ident.name } }\n-impl Named for ForeignItem { fn name(&self) -> Name { self.ident.name } }\n+impl Named for ForeignItem<'_> { fn name(&self) -> Name { self.ident.name } }\n impl Named for Variant { fn name(&self) -> Name { self.ident.name } }\n impl Named for StructField { fn name(&self) -> Name { self.ident.name } }\n impl Named for TraitItem { fn name(&self) -> Name { self.ident.name } }"}, {"sha": "d3137ee6ac1a585152d280bc2b0bc8c34c5bc3d1", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=acf33f2d6bca429196692d2b557c8e53e10bb9fe", "patch": "@@ -2252,9 +2252,9 @@ pub struct Mod {\n }\n \n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub struct ForeignMod {\n+pub struct ForeignMod<'hir> {\n     pub abi: Abi,\n-    pub items: HirVec<ForeignItem>,\n+    pub items: &'hir [ForeignItem<'hir>],\n }\n \n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n@@ -2491,7 +2491,7 @@ pub enum ItemKind<'hir> {\n     /// A module.\n     Mod(Mod),\n     /// An external module, e.g. `extern { .. }`.\n-    ForeignMod(ForeignMod),\n+    ForeignMod(ForeignMod<'hir>),\n     /// Module-level inline assembly (from `global_asm!`).\n     GlobalAsm(&'hir GlobalAsm),\n     /// A type alias, e.g., `type Foo = Bar<u8>`.\n@@ -2607,28 +2607,28 @@ pub enum AssocItemKind {\n }\n \n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub struct ForeignItem {\n+pub struct ForeignItem<'hir> {\n     #[stable_hasher(project(name))]\n     pub ident: Ident,\n-    pub attrs: HirVec<Attribute>,\n-    pub kind: ForeignItemKind,\n+    pub attrs: &'hir [Attribute],\n+    pub kind: ForeignItemKind<'hir>,\n     pub hir_id: HirId,\n     pub span: Span,\n     pub vis: Visibility,\n }\n \n /// An item within an `extern` block.\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub enum ForeignItemKind {\n+pub enum ForeignItemKind<'hir> {\n     /// A foreign function.\n-    Fn(P<FnDecl>, HirVec<Ident>, Generics),\n+    Fn(&'hir FnDecl, &'hir [Ident], Generics),\n     /// A foreign static item (`static ext: u8`).\n-    Static(P<Ty>, Mutability),\n+    Static(&'hir Ty, Mutability),\n     /// A foreign type.\n     Type,\n }\n \n-impl ForeignItemKind {\n+impl ForeignItemKind<'hir> {\n     pub fn descriptive_variant(&self) -> &str {\n         match *self {\n             ForeignItemKind::Fn(..) => \"foreign function\",\n@@ -2788,7 +2788,7 @@ impl CodegenFnAttrs {\n pub enum Node<'hir> {\n     Param(&'hir Param),\n     Item(&'hir Item<'hir>),\n-    ForeignItem(&'hir ForeignItem),\n+    ForeignItem(&'hir ForeignItem<'hir>),\n     TraitItem(&'hir TraitItem),\n     ImplItem(&'hir ImplItem),\n     Variant(&'hir Variant),"}, {"sha": "b6f7f840d0863a5a777aaaca087eae43c831ad8e", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=acf33f2d6bca429196692d2b557c8e53e10bb9fe", "patch": "@@ -267,11 +267,11 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_foreign_mod(&mut self,\n-                             nmod: &hir::ForeignMod,\n+                             nmod: &hir::ForeignMod<'_>,\n                              attrs: &[ast::Attribute])\n                              {\n         self.print_inner_attributes(attrs);\n-        for item in &nmod.items {\n+        for item in nmod.items {\n             self.print_foreign_item(item);\n         }\n     }\n@@ -361,7 +361,7 @@ impl<'a> State<'a> {\n         self.end()\n     }\n \n-    pub fn print_foreign_item(&mut self, item: &hir::ForeignItem) {\n+    pub fn print_foreign_item(&mut self, item: &hir::ForeignItem<'_>) {\n         self.hardbreak_if_not_bol();\n         self.maybe_print_comment(item.span.lo());\n         self.print_outer_attributes(&item.attrs);"}, {"sha": "c3cd50b488512c08d6ffeb3d3ea3431d11a7a7b0", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=acf33f2d6bca429196692d2b557c8e53e10bb9fe", "patch": "@@ -943,7 +943,7 @@ for LateContextAndPass<'a, 'tcx, T> {\n         self.context.generics = generics;\n     }\n \n-    fn visit_foreign_item(&mut self, it: &'tcx hir::ForeignItem) {\n+    fn visit_foreign_item(&mut self, it: &'tcx hir::ForeignItem<'tcx>) {\n         self.with_lint_attrs(it.hir_id, &it.attrs, |cx| {\n             cx.with_param_env(it.hir_id, |cx| {\n                 lint_callback!(cx, check_foreign_item, it);"}, {"sha": "79fb53c92b073d7a99f53c7dc9c461d092182bcc", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=acf33f2d6bca429196692d2b557c8e53e10bb9fe", "patch": "@@ -94,8 +94,8 @@ macro_rules! late_lint_methods {\n             fn check_crate_post(a: &$hir hir::Crate<$hir>);\n             fn check_mod(a: &$hir hir::Mod, b: Span, c: hir::HirId);\n             fn check_mod_post(a: &$hir hir::Mod, b: Span, c: hir::HirId);\n-            fn check_foreign_item(a: &$hir hir::ForeignItem);\n-            fn check_foreign_item_post(a: &$hir hir::ForeignItem);\n+            fn check_foreign_item(a: &$hir hir::ForeignItem<$hir>);\n+            fn check_foreign_item_post(a: &$hir hir::ForeignItem<$hir>);\n             fn check_item(a: &$hir hir::Item<$hir>);\n             fn check_item_post(a: &$hir hir::Item<$hir>);\n             fn check_local(a: &$hir hir::Local);\n@@ -610,7 +610,7 @@ impl intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n         });\n     }\n \n-    fn visit_foreign_item(&mut self, it: &'tcx hir::ForeignItem) {\n+    fn visit_foreign_item(&mut self, it: &'tcx hir::ForeignItem<'tcx>) {\n         self.with_lint_attrs(it.hir_id, &it.attrs, |builder| {\n             intravisit::walk_foreign_item(builder, it);\n         })"}, {"sha": "7a852ef9ef4d914a9f426bc909ebab8f5bb23b04", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=acf33f2d6bca429196692d2b557c8e53e10bb9fe", "patch": "@@ -536,7 +536,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem) {\n+    fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem<'tcx>) {\n         match item.kind {\n             hir::ForeignItemKind::Fn(ref decl, _, ref generics) => {\n                 self.visit_early_late(None, decl, generics, |this| {"}, {"sha": "27830c86ed16900b39882387750cd65f3b438473", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=acf33f2d6bca429196692d2b557c8e53e10bb9fe", "patch": "@@ -318,7 +318,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         });\n     }\n \n-    fn visit_foreign_item(&mut self, i: &'tcx hir::ForeignItem) {\n+    fn visit_foreign_item(&mut self, i: &'tcx hir::ForeignItem<'tcx>) {\n         self.annotate(i.hir_id, &i.attrs, i.span, AnnotationKind::Required, |v| {\n             intravisit::walk_foreign_item(v, i);\n         });\n@@ -392,7 +392,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'a, 'tcx> {\n         intravisit::walk_struct_field(self, s);\n     }\n \n-    fn visit_foreign_item(&mut self, i: &'tcx hir::ForeignItem) {\n+    fn visit_foreign_item(&mut self, i: &'tcx hir::ForeignItem<'tcx>) {\n         self.check_missing_stability(i.hir_id, i.span, i.kind.descriptive_variant());\n         intravisit::walk_foreign_item(self, i);\n     }"}, {"sha": "2acea7c5b685968de2ec64027d4a4313bc0a69b0", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=acf33f2d6bca429196692d2b557c8e53e10bb9fe", "patch": "@@ -136,7 +136,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n         NestedVisitorMap::None\n     }\n \n-    fn visit_foreign_item(&mut self, i: &hir::ForeignItem) {\n+    fn visit_foreign_item(&mut self, i: &hir::ForeignItem<'_>) {\n         if let Some((lang_item, _)) = lang_items::extract(&i.attrs) {\n             self.register(lang_item, i.span);\n         }"}, {"sha": "030fb8dc3399dab19908b26d14914f302d60dba7", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=acf33f2d6bca429196692d2b557c8e53e10bb9fe", "patch": "@@ -996,7 +996,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnreachablePub {\n         self.perform_lint(cx, \"item\", item.hir_id, &item.vis, item.span, true);\n     }\n \n-    fn check_foreign_item(&mut self, cx: &LateContext<'_, '_>, foreign_item: &hir::ForeignItem) {\n+    fn check_foreign_item(&mut self, cx: &LateContext<'_, '_>, foreign_item: &hir::ForeignItem<'tcx>) {\n         self.perform_lint(cx, \"item\", foreign_item.hir_id, &foreign_item.vis,\n                           foreign_item.span, true);\n     }"}, {"sha": "f1cd2037edd7a03043c036d140a56e41e78bcf6b", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=acf33f2d6bca429196692d2b557c8e53e10bb9fe", "patch": "@@ -1009,7 +1009,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypes {\n-    fn check_foreign_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::ForeignItem) {\n+    fn check_foreign_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::ForeignItem<'_>) {\n         let mut vis = ImproperCTypesVisitor { cx };\n         let abi = cx.tcx.hir().get_foreign_abi(it.hir_id);\n         if let Abi::Rust | Abi::RustCall | Abi::RustIntrinsic | Abi::PlatformIntrinsic = abi {"}, {"sha": "93e04c18f5f9e83788fc67486a8fab22a016bfe1", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=acf33f2d6bca429196692d2b557c8e53e10bb9fe", "patch": "@@ -1525,7 +1525,7 @@ impl EncodeContext<'tcx> {\n     fn encode_info_for_foreign_item(\n         &mut self,\n         def_id: DefId,\n-        nitem: &hir::ForeignItem,\n+        nitem: &hir::ForeignItem<'_>,\n     )  {\n         let tcx = self.tcx;\n \n@@ -1551,7 +1551,7 @@ impl EncodeContext<'tcx> {\n         record!(self.per_def.visibility[def_id] <-\n             ty::Visibility::from_hir(&nitem.vis, nitem.hir_id, self.tcx));\n         record!(self.per_def.span[def_id] <- nitem.span);\n-        record!(self.per_def.attributes[def_id] <- &nitem.attrs);\n+        record!(self.per_def.attributes[def_id] <- nitem.attrs);\n         self.encode_stability(def_id);\n         self.encode_const_stability(def_id);\n         self.encode_deprecation(def_id);\n@@ -1590,7 +1590,7 @@ impl Visitor<'tcx> for EncodeContext<'tcx> {\n         }\n         self.encode_addl_info_for_item(item);\n     }\n-    fn visit_foreign_item(&mut self, ni: &'tcx hir::ForeignItem) {\n+    fn visit_foreign_item(&mut self, ni: &'tcx hir::ForeignItem<'tcx>) {\n         intravisit::walk_foreign_item(self, ni);\n         let def_id = self.tcx.hir().local_def_id(ni.hir_id);\n         self.encode_info_for_foreign_item(def_id, ni);"}, {"sha": "ee67e44afc85459b7ec1834e0f93c3beb40b74cb", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=acf33f2d6bca429196692d2b557c8e53e10bb9fe", "patch": "@@ -510,7 +510,7 @@ impl DeadVisitor<'tcx> {\n                                                  &variant.attrs)\n     }\n \n-    fn should_warn_about_foreign_item(&mut self, fi: &hir::ForeignItem) -> bool {\n+    fn should_warn_about_foreign_item(&mut self, fi: &hir::ForeignItem<'_>) -> bool {\n         !self.symbol_is_live(fi.hir_id)\n             && !has_allow_dead_code_or_lang_attr(self.tcx, fi.hir_id, &fi.attrs)\n     }\n@@ -621,7 +621,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n         }\n     }\n \n-    fn visit_foreign_item(&mut self, fi: &'tcx hir::ForeignItem) {\n+    fn visit_foreign_item(&mut self, fi: &'tcx hir::ForeignItem<'tcx>) {\n         if self.should_warn_about_foreign_item(fi) {\n             self.warn_dead_code(fi.hir_id, fi.span, fi.ident.name,\n                                 fi.kind.descriptive_variant(), \"used\");"}, {"sha": "4cde255fc83fe2ad23898364ac8ef056a5b0e77d", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=acf33f2d6bca429196692d2b557c8e53e10bb9fe", "patch": "@@ -133,7 +133,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_mod(self, m, n)\n     }\n \n-    fn visit_foreign_item(&mut self, i: &'v hir::ForeignItem) {\n+    fn visit_foreign_item(&mut self, i: &'v hir::ForeignItem<'v>) {\n         self.record(\"ForeignItem\", Id::Node(i.hir_id), i);\n         hir_visit::walk_foreign_item(self, i)\n     }"}, {"sha": "5963561c5bbd451b42c1acb58942ee2852695939", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=acf33f2d6bca429196692d2b557c8e53e10bb9fe", "patch": "@@ -708,7 +708,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                 }\n             }\n             hir::ItemKind::ForeignMod(ref foreign_mod) => {\n-                for foreign_item in &foreign_mod.items {\n+                for foreign_item in foreign_mod.items {\n                     if foreign_item.vis.node.is_pub() {\n                         self.update(foreign_item.hir_id, item_level);\n                     }\n@@ -812,7 +812,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             }\n             // Visit everything, but foreign items have their own levels.\n             hir::ItemKind::ForeignMod(ref foreign_mod) => {\n-                for foreign_item in &foreign_mod.items {\n+                for foreign_item in foreign_mod.items {\n                     let foreign_item_level = self.get(foreign_item.hir_id);\n                     if foreign_item_level.is_some() {\n                         self.reach(foreign_item.hir_id, foreign_item_level)\n@@ -1621,7 +1621,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem) {\n+    fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem<'tcx>) {\n         if self.access_levels.is_reachable(item.hir_id) {\n             intravisit::walk_foreign_item(self, item)\n         }\n@@ -1898,7 +1898,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n             }\n             // Subitems of foreign modules have their own publicity.\n             hir::ItemKind::ForeignMod(ref foreign_mod) => {\n-                for foreign_item in &foreign_mod.items {\n+                for foreign_item in foreign_mod.items {\n                     let vis = ty::Visibility::from_hir(&foreign_item.vis, item.hir_id, tcx);\n                     self.check(foreign_item.hir_id, vis).generics().predicates().ty();\n                 }"}, {"sha": "d6661a7ec6aa73128c124528a08681cba4a55804", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=acf33f2d6bca429196692d2b557c8e53e10bb9fe", "patch": "@@ -17,7 +17,7 @@ use std::iter;\n \n fn equate_intrinsic_type<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    it: &hir::ForeignItem,\n+    it: &hir::ForeignItem<'_>,\n     n_tps: usize,\n     abi: Abi,\n     safety: hir::Unsafety,\n@@ -83,7 +83,7 @@ pub fn intrinsic_operation_unsafety(intrinsic: &str) -> hir::Unsafety {\n \n /// Remember to add all intrinsics here, in librustc_codegen_llvm/intrinsic.rs,\n /// and in libcore/intrinsics.rs\n-pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n+pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n     let param = |n| tcx.mk_ty_param(n, Symbol::intern(&format!(\"P{}\", n)));\n     let name = it.ident.as_str();\n \n@@ -399,7 +399,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n }\n \n /// Type-check `extern \"platform-intrinsic\" { ... }` functions.\n-pub fn check_platform_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n+pub fn check_platform_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n     let param = |n| {\n         let name = Symbol::intern(&format!(\"P{}\", n));\n         tcx.mk_ty_param(n, name)"}, {"sha": "4c83ee1c644585efee737bf88941d91833c94a4d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=acf33f2d6bca429196692d2b557c8e53e10bb9fe", "patch": "@@ -1766,15 +1766,15 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item<'tcx>) {\n             check_abi(tcx, it.span, m.abi);\n \n             if m.abi == Abi::RustIntrinsic {\n-                for item in &m.items {\n+                for item in m.items {\n                     intrinsic::check_intrinsic_type(tcx, item);\n                 }\n             } else if m.abi == Abi::PlatformIntrinsic {\n-                for item in &m.items {\n+                for item in m.items {\n                     intrinsic::check_platform_intrinsic_type(tcx, item);\n                 }\n             } else {\n-                for item in &m.items {\n+                for item in m.items {\n                     let generics = tcx.generics_of(tcx.hir().local_def_id(item.hir_id));\n                     let own_counts = generics.own_counts();\n                     if generics.params.len() - own_counts.lifetimes != 0 {\n@@ -4689,7 +4689,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Some(Node::ForeignItem(hir::ForeignItem {\n                     kind: hir::ForeignItemKind::Fn(_, idents, _),\n                     ..\n-                })) |\n+                })) => sugg_call = idents.iter()\n+                        .map(|ident| if ident.name != kw::SelfLower {\n+                            ident.to_string()\n+                        } else {\n+                            \"_\".to_string()\n+                        }).collect::<Vec<_>>()\n+                        .join(\", \"),\n                 Some(Node::TraitItem(hir::TraitItem {\n                     kind: hir::TraitItemKind::Method(.., hir::TraitMethod::Required(idents)),\n                     .."}, {"sha": "02831784c9663b191ab5788a3b85a6a4a4a0f963", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=acf33f2d6bca429196692d2b557c8e53e10bb9fe", "patch": "@@ -417,7 +417,7 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::HirId) {\n         | hir::ItemKind::Mod(_)\n         | hir::ItemKind::GlobalAsm(_) => {}\n         hir::ItemKind::ForeignMod(ref foreign_mod) => {\n-            for item in &foreign_mod.items {\n+            for item in foreign_mod.items {\n                 let def_id = tcx.hir().local_def_id(item.hir_id);\n                 tcx.generics_of(def_id);\n                 tcx.type_of(def_id);"}, {"sha": "d15d8d09df70ab86a1bbf1b5121fded4810703d0", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=acf33f2d6bca429196692d2b557c8e53e10bb9fe", "patch": "@@ -93,7 +93,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n             }\n \n             hir::ItemKind::ForeignMod(ref foreign_mod) => {\n-                for foreign_item in &foreign_mod.items {\n+                for foreign_item in foreign_mod.items {\n                     if let hir::ForeignItemKind::Fn(..) = foreign_item.kind {\n                         self.visit_node_helper(foreign_item.hir_id);\n                     }"}, {"sha": "7567bb791fa747a5eb916b0ba737cdbee04bbf3f", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=acf33f2d6bca429196692d2b557c8e53e10bb9fe", "patch": "@@ -156,7 +156,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> {\n             }\n \n             hir::ItemKind::ForeignMod(ref foreign_mod) => {\n-                for foreign_item in &foreign_mod.items {\n+                for foreign_item in foreign_mod.items {\n                     if let hir::ForeignItemKind::Fn(..) = foreign_item.kind {\n                         self.add_inferreds_for_item(foreign_item.hir_id);\n                     }"}, {"sha": "57208bd5966dca7ecb7a77e5ca59269f9d26e4c3", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=acf33f2d6bca429196692d2b557c8e53e10bb9fe", "patch": "@@ -217,7 +217,7 @@ pub struct ForeignItem<'hir> {\n     pub vis: &'hir hir::Visibility,\n     pub id: hir::HirId,\n     pub name: Name,\n-    pub kind: &'hir hir::ForeignItemKind,\n+    pub kind: &'hir hir::ForeignItemKind<'hir>,\n     pub attrs: &'hir [ast::Attribute],\n     pub whence: Span,\n }"}, {"sha": "2c2a51928d9cad7ff18c28ceb12888a0036ef322", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf33f2d6bca429196692d2b557c8e53e10bb9fe/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=acf33f2d6bca429196692d2b557c8e53e10bb9fe", "patch": "@@ -363,7 +363,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n         match item.kind {\n             hir::ItemKind::ForeignMod(ref fm) => {\n-                for item in &fm.items {\n+                for item in fm.items {\n                     self.visit_foreign_item(item, None, om);\n                 }\n             }"}]}