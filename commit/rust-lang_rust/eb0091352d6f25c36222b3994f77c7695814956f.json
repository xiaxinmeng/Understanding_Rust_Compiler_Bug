{"sha": "eb0091352d6f25c36222b3994f77c7695814956f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMDA5MTM1MmQ2ZjI1YzM2MjIyYjM5OTRmNzdjNzY5NTgxNDk1NmY=", "commit": {"author": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2015-01-20T19:14:52Z"}, "committer": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2015-01-21T08:05:57Z"}, "message": "Remove ratchet().", "tree": {"sha": "84c1d1e8a1cf7eeecd41de8f5c3f252fe53cbcb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84c1d1e8a1cf7eeecd41de8f5c3f252fe53cbcb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb0091352d6f25c36222b3994f77c7695814956f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb0091352d6f25c36222b3994f77c7695814956f", "html_url": "https://github.com/rust-lang/rust/commit/eb0091352d6f25c36222b3994f77c7695814956f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb0091352d6f25c36222b3994f77c7695814956f/comments", "author": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72ae5186b586becdbefc6aed119a800a6081f00e", "url": "https://api.github.com/repos/rust-lang/rust/commits/72ae5186b586becdbefc6aed119a800a6081f00e", "html_url": "https://github.com/rust-lang/rust/commit/72ae5186b586becdbefc6aed119a800a6081f00e"}], "stats": {"total": 68, "additions": 0, "deletions": 68}, "files": [{"sha": "664c78161181d72093875f00bda5ff85e6b20271", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/eb0091352d6f25c36222b3994f77c7695814956f/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb0091352d6f25c36222b3994f77c7695814956f/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=eb0091352d6f25c36222b3994f77c7695814956f", "patch": "@@ -239,12 +239,6 @@ impl Clone for MetricMap {\n     }\n }\n \n-/// Analysis of a single change in metric\n-#[derive(Copy, PartialEq, Show)]\n-pub struct MetricChange;\n-\n-pub type MetricDiff = BTreeMap<String,MetricChange>;\n-\n // The default console test runner. It accepts the command line\n // arguments and a vector of test_descs.\n pub fn test_main(args: &[String], tests: Vec<TestDescAndFn> ) {\n@@ -1166,26 +1160,6 @@ impl MetricMap {\n         let MetricMap(ref mut map) = *self;\n         map.insert(name.to_string(), m);\n     }\n-\n-    /// Attempt to \"ratchet\" an external metric file. This involves loading\n-    /// metrics from a metric file (if it exists), comparing against\n-    /// the metrics in `self` using `compare_to_old`, and rewriting the\n-    /// file to contain the metrics in `self` if none of the\n-    /// `MetricChange`s are `Regression`. Returns the diff as well\n-    /// as a boolean indicating whether the ratchet succeeded.\n-    pub fn ratchet(&self, p: &Path) -> (MetricDiff, bool) {\n-        let diff : MetricDiff = BTreeMap::new();\n-        let ok = diff.iter().all(|(_, v)| {\n-            match *v {\n-                _ => true\n-            }\n-        });\n-\n-        if ok {\n-            self.save(p).unwrap();\n-        }\n-        return (diff, ok)\n-    }\n }\n \n \n@@ -1594,46 +1568,4 @@ mod tests {\n         m1.insert_metric(\"in-both-want-upwards-and-improved\", 1000.0, -10.0);\n         m2.insert_metric(\"in-both-want-upwards-and-improved\", 2000.0, -10.0);\n     }\n-\n-    #[test]\n-    pub fn ratchet_test() {\n-\n-        let dpth = TempDir::new(\"test-ratchet\").ok().expect(\"missing test for ratchet\");\n-        let pth = dpth.path().join(\"ratchet.json\");\n-\n-        let mut m1 = MetricMap::new();\n-        m1.insert_metric(\"runtime\", 1000.0, 2.0);\n-        m1.insert_metric(\"throughput\", 50.0, 2.0);\n-\n-        let mut m2 = MetricMap::new();\n-        m2.insert_metric(\"runtime\", 1100.0, 2.0);\n-        m2.insert_metric(\"throughput\", 50.0, 2.0);\n-\n-        m1.save(&pth).unwrap();\n-\n-        // Ask for a ratchet that should fail to advance.\n-        let (diff1, ok1) = m2.ratchet(&pth);\n-        assert_eq!(ok1, false);\n-        assert_eq!(diff1.len(), 2);\n-\n-        // Check that it was not rewritten.\n-        let m3 = MetricMap::load(&pth);\n-        let MetricMap(m3) = m3;\n-        assert_eq!(m3.len(), 2);\n-        assert_eq!(*(m3.get(&\"runtime\".to_string()).unwrap()), Metric::new(1000.0, 2.0));\n-        assert_eq!(*(m3.get(&\"throughput\".to_string()).unwrap()), Metric::new(50.0, 2.0));\n-\n-        // Ask for a ratchet with an explicit noise-percentage override,\n-        // that should advance.\n-        let (diff2, ok2) = m2.ratchet(&pth);\n-        assert_eq!(ok2, true);\n-        assert_eq!(diff2.len(), 2);\n-\n-        // Check that it was rewritten.\n-        let m4 = MetricMap::load(&pth);\n-        let MetricMap(m4) = m4;\n-        assert_eq!(m4.len(), 2);\n-        assert_eq!(*(m4.get(&\"runtime\".to_string()).unwrap()), Metric::new(1100.0, 2.0));\n-        assert_eq!(*(m4.get(&\"throughput\".to_string()).unwrap()), Metric::new(50.0, 2.0));\n-    }\n }"}]}