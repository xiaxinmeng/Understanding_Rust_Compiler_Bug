{"sha": "65c876f2d30ddbd316849dc9092eb2b7b20bdff9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1Yzg3NmYyZDMwZGRiZDMxNjg0OWRjOTA5MmViMmI3YjIwYmRmZjk=", "commit": {"author": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-02-18T19:09:11Z"}, "committer": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-02-18T19:09:11Z"}, "message": "add test for max value", "tree": {"sha": "23416c4fa7ab30165134f7c0a71bda3e7840ee13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23416c4fa7ab30165134f7c0a71bda3e7840ee13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65c876f2d30ddbd316849dc9092eb2b7b20bdff9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65c876f2d30ddbd316849dc9092eb2b7b20bdff9", "html_url": "https://github.com/rust-lang/rust/commit/65c876f2d30ddbd316849dc9092eb2b7b20bdff9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65c876f2d30ddbd316849dc9092eb2b7b20bdff9/comments", "author": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "328818934b3cc3a19c29fd4f87f165808bf9c037", "url": "https://api.github.com/repos/rust-lang/rust/commits/328818934b3cc3a19c29fd4f87f165808bf9c037", "html_url": "https://github.com/rust-lang/rust/commit/328818934b3cc3a19c29fd4f87f165808bf9c037"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "0fa73b19343653c0530fdc5c2ba59352c0889ee8", "filename": "src/libcollectionstest/btree/map.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65c876f2d30ddbd316849dc9092eb2b7b20bdff9/src%2Flibcollectionstest%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c876f2d30ddbd316849dc9092eb2b7b20bdff9/src%2Flibcollectionstest%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbtree%2Fmap.rs?ref=65c876f2d30ddbd316849dc9092eb2b7b20bdff9", "patch": "@@ -205,6 +205,14 @@ fn test_range_inclusive() {\n     check(map.range(-1...2), vec![(&0, &0), (&1, &1), (&2, &2)]);\n }\n \n+#[test]\n+fn test_range_inclusive_max_value() {\n+    let max = ::std::usize::MAX;\n+    let map: BTreeMap<_, _> = vec![(max, 0)].into_iter().collect();\n+\n+    assert_eq!(map.range(max...max).collect::<Vec<_>>(), &[(&max, &0)]);\n+}\n+\n #[test]\n fn test_range_equal_empty_cases() {\n     let map: BTreeMap<_, _> = (0..5).map(|i| (i, i)).collect();"}]}