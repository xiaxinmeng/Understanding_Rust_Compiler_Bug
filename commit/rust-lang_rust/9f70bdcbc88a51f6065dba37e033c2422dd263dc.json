{"sha": "9f70bdcbc88a51f6065dba37e033c2422dd263dc", "node_id": "C_kwDOAAsO6NoAKDlmNzBiZGNiYzg4YTUxZjYwNjVkYmEzN2UwMzNjMjQyMmRkMjYzZGM", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-01-20T15:02:52Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-01-27T13:41:33Z"}, "message": "Improve code readability", "tree": {"sha": "66d3aa51f3fe1286d46eec5043e178c977afbfe0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66d3aa51f3fe1286d46eec5043e178c977afbfe0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f70bdcbc88a51f6065dba37e033c2422dd263dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f70bdcbc88a51f6065dba37e033c2422dd263dc", "html_url": "https://github.com/rust-lang/rust/commit/9f70bdcbc88a51f6065dba37e033c2422dd263dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f70bdcbc88a51f6065dba37e033c2422dd263dc/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3623613dc7384c7956b19f25be94538e310b9a77", "url": "https://api.github.com/repos/rust-lang/rust/commits/3623613dc7384c7956b19f25be94538e310b9a77", "html_url": "https://github.com/rust-lang/rust/commit/3623613dc7384c7956b19f25be94538e310b9a77"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "ca3e9916487aad060546b9ac358d9f3a7fb20515", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f70bdcbc88a51f6065dba37e033c2422dd263dc/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f70bdcbc88a51f6065dba37e033c2422dd263dc/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=9f70bdcbc88a51f6065dba37e033c2422dd263dc", "patch": "@@ -138,7 +138,7 @@ pub(super) fn write_shared(\n         Ok((ret, krates))\n     }\n \n-    /// Read a file and return all lines that match the <code>\"{crate}\":{data},\\</code> format,\n+    /// Read a file and return all lines that match the <code>\"{crate}\":{data},\\ </code> format,\n     /// and return a tuple `(Vec<DataString>, Vec<CrateNameString>)`.\n     ///\n     /// This forms the payload of files that look like this:"}, {"sha": "952304d40eccf55dac17bb275caf6056fe758088", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9f70bdcbc88a51f6065dba37e033c2422dd263dc/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f70bdcbc88a51f6065dba37e033c2422dd263dc/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=9f70bdcbc88a51f6065dba37e033c2422dd263dc", "patch": "@@ -192,6 +192,16 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         ret\n     }\n \n+    #[inline]\n+    fn add_to_current_mod(\n+        &mut self,\n+        item: &'tcx hir::Item<'_>,\n+        renamed: Option<Symbol>,\n+        parent_id: Option<hir::HirId>,\n+    ) {\n+        self.modules.last_mut().unwrap().items.push((item, renamed, parent_id))\n+    }\n+\n     fn visit_item_inner(\n         &mut self,\n         item: &'tcx hir::Item<'_>,\n@@ -253,7 +263,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                         }\n                     }\n \n-                    self.modules.last_mut().unwrap().items.push((item, renamed, parent_id));\n+                    self.add_to_current_mod(item, renamed, parent_id);\n                 }\n             }\n             hir::ItemKind::Macro(ref macro_def, _) => {\n@@ -273,7 +283,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 let nonexported = !tcx.has_attr(def_id, sym::macro_export);\n \n                 if is_macro_2_0 || nonexported || self.inlining {\n-                    self.modules.last_mut().unwrap().items.push((item, renamed, None));\n+                    self.add_to_current_mod(item, renamed, None);\n                 }\n             }\n             hir::ItemKind::Mod(ref m) => {\n@@ -289,20 +299,20 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             | hir::ItemKind::Static(..)\n             | hir::ItemKind::Trait(..)\n             | hir::ItemKind::TraitAlias(..) => {\n-                self.modules.last_mut().unwrap().items.push((item, renamed, parent_id))\n+                self.add_to_current_mod(item, renamed, parent_id);\n             }\n             hir::ItemKind::Const(..) => {\n                 // Underscore constants do not correspond to a nameable item and\n                 // so are never useful in documentation.\n                 if name != kw::Underscore {\n-                    self.modules.last_mut().unwrap().items.push((item, renamed, parent_id));\n+                    self.add_to_current_mod(item, renamed, parent_id);\n                 }\n             }\n             hir::ItemKind::Impl(impl_) => {\n                 // Don't duplicate impls when inlining or if it's implementing a trait, we'll pick\n                 // them up regardless of where they're located.\n                 if !self.inlining && impl_.of_trait.is_none() {\n-                    self.modules.last_mut().unwrap().items.push((item, None, None));\n+                    self.add_to_current_mod(item, None, None);\n                 }\n             }\n         }\n@@ -339,15 +349,13 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         // macro in the same module.\n         let mut inserted = FxHashSet::default();\n         for export in self.cx.tcx.module_reexports(CRATE_DEF_ID).unwrap_or(&[]) {\n-            if let Res::Def(DefKind::Macro(_), def_id) = export.res {\n-                if let Some(local_def_id) = def_id.as_local() {\n-                    if self.cx.tcx.has_attr(def_id, sym::macro_export) {\n-                        if inserted.insert(def_id) {\n-                            let item = self.cx.tcx.hir().expect_item(local_def_id);\n-                            top_level_module.items.push((item, None, None));\n-                        }\n-                    }\n-                }\n+            if let Res::Def(DefKind::Macro(_), def_id) = export.res &&\n+                let Some(local_def_id) = def_id.as_local() &&\n+                self.cx.tcx.has_attr(def_id, sym::macro_export) &&\n+                inserted.insert(def_id)\n+            {\n+                    let item = self.cx.tcx.hir().expect_item(local_def_id);\n+                    top_level_module.items.push((item, None, None));\n             }\n         }\n "}]}