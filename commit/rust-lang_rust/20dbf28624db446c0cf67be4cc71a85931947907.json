{"sha": "20dbf28624db446c0cf67be4cc71a85931947907", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwZGJmMjg2MjRkYjQ0NmMwY2Y2N2JlNGNjNzFhODU5MzE5NDc5MDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-05T15:01:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-05T15:01:07Z"}, "message": "Auto merge of #59076 - dtolnay:comma, r=alexcrichton\n\nInclude trailing comma in multiline Debug representation\n\nThis PR changes the behavior of [`Formatter::debug_struct`](https://doc.rust-lang.org/std/fmt/struct.Formatter.html#method.debug_struct), [`debug_tuple`](https://doc.rust-lang.org/std/fmt/struct.Formatter.html#method.debug_tuple), [`debug_list`](https://doc.rust-lang.org/std/fmt/struct.Formatter.html#method.debug_list), [`debug_set`](https://doc.rust-lang.org/std/fmt/struct.Formatter.html#method.debug_set), and [`debug_map`](https://doc.rust-lang.org/std/fmt/struct.Formatter.html#method.debug_map) to render trailing commas in `{:#?}` mode, which is the dominant style in modern Rust code.\n\n#### Before:\n\n```console\nLanguage {\n    name: \"Rust\",\n    trailing_commas: false\n}\n```\n\n#### After:\n\n```console\nLanguage {\n    name: \"Rust\",\n    trailing_commas: true,\n}\n```", "tree": {"sha": "2e103cda036b4b6c704ed4ca65c24e6dec9a902f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e103cda036b4b6c704ed4ca65c24e6dec9a902f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20dbf28624db446c0cf67be4cc71a85931947907", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20dbf28624db446c0cf67be4cc71a85931947907", "html_url": "https://github.com/rust-lang/rust/commit/20dbf28624db446c0cf67be4cc71a85931947907", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20dbf28624db446c0cf67be4cc71a85931947907/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d7defb26584b0d4e5cad372b2ab8888bfc22f3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d7defb26584b0d4e5cad372b2ab8888bfc22f3a", "html_url": "https://github.com/rust-lang/rust/commit/4d7defb26584b0d4e5cad372b2ab8888bfc22f3a"}, {"sha": "cfd31fb4df214ab84a917ba9afd148ed13d01a3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfd31fb4df214ab84a917ba9afd148ed13d01a3a", "html_url": "https://github.com/rust-lang/rust/commit/cfd31fb4df214ab84a917ba9afd148ed13d01a3a"}], "stats": {"total": 478, "additions": 226, "deletions": 252}, "files": [{"sha": "df3852973b8ddd78bc8429f8c7b3faf1382abf2a", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 32, "deletions": 58, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -11,7 +11,7 @@ impl<'a> PadAdapter<'a> {\n         fmt.wrap_buf(move |buf| {\n             *slot = Some(PadAdapter {\n                 buf,\n-                on_newline: false,\n+                on_newline: true,\n             });\n             slot.as_mut().unwrap()\n         })\n@@ -128,22 +128,21 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn field(&mut self, name: &str, value: &dyn fmt::Debug) -> &mut DebugStruct<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n-            let prefix = if self.has_fields {\n-                \",\"\n-            } else {\n-                \" {\"\n-            };\n-\n             if self.is_pretty() {\n+                if !self.has_fields {\n+                    self.fmt.write_str(\" {\\n\")?;\n+                }\n                 let mut slot = None;\n                 let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot);\n-                writer.write_str(prefix)?;\n-                writer.write_str(\"\\n\")?;\n                 writer.write_str(name)?;\n                 writer.write_str(\": \")?;\n-                value.fmt(&mut writer)\n+                value.fmt(&mut writer)?;\n+                writer.write_str(\",\\n\")\n             } else {\n-                write!(self.fmt, \"{} {}: \", prefix, name)?;\n+                let prefix = if self.has_fields { \", \" } else { \" { \" };\n+                self.fmt.write_str(prefix)?;\n+                self.fmt.write_str(name)?;\n+                self.fmt.write_str(\": \")?;\n                 value.fmt(self.fmt)\n             }\n         });\n@@ -184,7 +183,7 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n         if self.has_fields {\n             self.result = self.result.and_then(|_| {\n                 if self.is_pretty() {\n-                    self.fmt.write_str(\"\\n}\")\n+                    self.fmt.write_str(\"}\")\n                 } else {\n                     self.fmt.write_str(\" }\")\n                 }\n@@ -275,21 +274,17 @@ impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn field(&mut self, value: &dyn fmt::Debug) -> &mut DebugTuple<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n-            let (prefix, space) = if self.fields > 0 {\n-                (\",\", \" \")\n-            } else {\n-                (\"(\", \"\")\n-            };\n-\n             if self.is_pretty() {\n+                if self.fields == 0 {\n+                    self.fmt.write_str(\"(\\n\")?;\n+                }\n                 let mut slot = None;\n                 let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot);\n-                writer.write_str(prefix)?;\n-                writer.write_str(\"\\n\")?;\n-                value.fmt(&mut writer)\n+                value.fmt(&mut writer)?;\n+                writer.write_str(\",\\n\")\n             } else {\n+                let prefix = if self.fields == 0 { \"(\" } else { \", \" };\n                 self.fmt.write_str(prefix)?;\n-                self.fmt.write_str(space)?;\n                 value.fmt(self.fmt)\n             }\n         });\n@@ -326,10 +321,7 @@ impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n     pub fn finish(&mut self) -> fmt::Result {\n         if self.fields > 0 {\n             self.result = self.result.and_then(|_| {\n-                if self.is_pretty() {\n-                    self.fmt.write_str(\"\\n\")?;\n-                }\n-                if self.fields == 1 && self.empty_name {\n+                if self.fields == 1 && self.empty_name && !self.is_pretty() {\n                     self.fmt.write_str(\",\")?;\n                 }\n                 self.fmt.write_str(\")\")\n@@ -353,14 +345,13 @@ impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n     fn entry(&mut self, entry: &dyn fmt::Debug) {\n         self.result = self.result.and_then(|_| {\n             if self.is_pretty() {\n+                if !self.has_fields {\n+                    self.fmt.write_str(\"\\n\")?;\n+                }\n                 let mut slot = None;\n                 let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot);\n-                writer.write_str(if self.has_fields {\n-                    \",\\n\"\n-                } else {\n-                    \"\\n\"\n-                })?;\n-                entry.fmt(&mut writer)\n+                entry.fmt(&mut writer)?;\n+                writer.write_str(\",\\n\")\n             } else {\n                 if self.has_fields {\n                     self.fmt.write_str(\", \")?\n@@ -372,15 +363,6 @@ impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n         self.has_fields = true;\n     }\n \n-    pub fn finish(&mut self) {\n-        let prefix = if self.is_pretty() && self.has_fields {\n-            \"\\n\"\n-        } else {\n-            \"\"\n-        };\n-        self.result = self.result.and_then(|_| self.fmt.write_str(prefix));\n-    }\n-\n     fn is_pretty(&self) -> bool {\n         self.fmt.alternate()\n     }\n@@ -421,7 +403,7 @@ pub struct DebugSet<'a, 'b: 'a> {\n }\n \n pub fn debug_set_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugSet<'a, 'b> {\n-    let result = write!(fmt, \"{{\");\n+    let result = fmt.write_str(\"{\");\n     DebugSet {\n         inner: DebugInner {\n             fmt,\n@@ -519,7 +501,6 @@ impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn finish(&mut self) -> fmt::Result {\n-        self.inner.finish();\n         self.inner.result.and_then(|_| self.inner.fmt.write_str(\"}\"))\n     }\n }\n@@ -559,7 +540,7 @@ pub struct DebugList<'a, 'b: 'a> {\n }\n \n pub fn debug_list_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugList<'a, 'b> {\n-    let result = write!(fmt, \"[\");\n+    let result = fmt.write_str(\"[\");\n     DebugList {\n         inner: DebugInner {\n             fmt,\n@@ -657,7 +638,6 @@ impl<'a, 'b: 'a> DebugList<'a, 'b> {\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn finish(&mut self) -> fmt::Result {\n-        self.inner.finish();\n         self.inner.result.and_then(|_| self.inner.fmt.write_str(\"]\"))\n     }\n }\n@@ -699,7 +679,7 @@ pub struct DebugMap<'a, 'b: 'a> {\n }\n \n pub fn debug_map_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugMap<'a, 'b> {\n-    let result = write!(fmt, \"{{\");\n+    let result = fmt.write_str(\"{\");\n     DebugMap {\n         fmt,\n         result,\n@@ -734,16 +714,15 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     pub fn entry(&mut self, key: &dyn fmt::Debug, value: &dyn fmt::Debug) -> &mut DebugMap<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n             if self.is_pretty() {\n+                if !self.has_fields {\n+                    self.fmt.write_str(\"\\n\")?;\n+                }\n                 let mut slot = None;\n                 let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot);\n-                writer.write_str(if self.has_fields {\n-                    \",\\n\"\n-                } else {\n-                    \"\\n\"\n-                })?;\n                 key.fmt(&mut writer)?;\n                 writer.write_str(\": \")?;\n-                value.fmt(&mut writer)\n+                value.fmt(&mut writer)?;\n+                writer.write_str(\",\\n\")\n             } else {\n                 if self.has_fields {\n                     self.fmt.write_str(\", \")?\n@@ -818,12 +797,7 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn finish(&mut self) -> fmt::Result {\n-        let prefix = if self.is_pretty() && self.has_fields {\n-            \"\\n\"\n-        } else {\n-            \"\"\n-        };\n-        self.result.and_then(|_| write!(self.fmt, \"{}}}\", prefix))\n+        self.result.and_then(|_| self.fmt.write_str(\"}\"))\n     }\n \n     fn is_pretty(&self) -> bool {"}, {"sha": "e4b75fe1fa265a08c26d4a757e9ff7eea6853ba5", "filename": "src/libcore/tests/fmt/builders.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Flibcore%2Ftests%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Flibcore%2Ftests%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Fbuilders.rs?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -30,7 +30,7 @@ mod debug_struct {\n         assert_eq!(\"Foo { bar: true }\", format!(\"{:?}\", Foo));\n         assert_eq!(\n \"Foo {\n-    bar: true\n+    bar: true,\n }\",\n                    format!(\"{:#?}\", Foo));\n     }\n@@ -52,7 +52,7 @@ mod debug_struct {\n         assert_eq!(\n \"Foo {\n     bar: true,\n-    baz: 10/20\n+    baz: 10/20,\n }\",\n                    format!(\"{:#?}\", Foo));\n     }\n@@ -87,9 +87,9 @@ mod debug_struct {\n \"Bar {\n     foo: Foo {\n         bar: true,\n-        baz: 10/20\n+        baz: 10/20,\n     },\n-    hello: \\\"world\\\"\n+    hello: \\\"world\\\",\n }\",\n                    format!(\"{:#?}\", Bar));\n     }\n@@ -127,7 +127,7 @@ mod debug_tuple {\n         assert_eq!(\"Foo(true)\", format!(\"{:?}\", Foo));\n         assert_eq!(\n \"Foo(\n-    true\n+    true,\n )\",\n                    format!(\"{:#?}\", Foo));\n     }\n@@ -149,7 +149,7 @@ mod debug_tuple {\n         assert_eq!(\n \"Foo(\n     true,\n-    10/20\n+    10/20,\n )\",\n                    format!(\"{:#?}\", Foo));\n     }\n@@ -184,9 +184,9 @@ mod debug_tuple {\n \"Bar(\n     Foo(\n         true,\n-        10/20\n+        10/20,\n     ),\n-    \\\"world\\\"\n+    \\\"world\\\",\n )\",\n                    format!(\"{:#?}\", Bar));\n     }\n@@ -224,7 +224,7 @@ mod debug_map {\n         assert_eq!(\"{\\\"bar\\\": true}\", format!(\"{:?}\", Foo));\n         assert_eq!(\n \"{\n-    \\\"bar\\\": true\n+    \\\"bar\\\": true,\n }\",\n                    format!(\"{:#?}\", Foo));\n     }\n@@ -246,7 +246,7 @@ mod debug_map {\n         assert_eq!(\n \"{\n     \\\"bar\\\": true,\n-    10: 10/20\n+    10: 10/20,\n }\",\n                    format!(\"{:#?}\", Foo));\n     }\n@@ -282,12 +282,12 @@ mod debug_map {\n \"{\n     \\\"foo\\\": {\n         \\\"bar\\\": true,\n-        10: 10/20\n+        10: 10/20,\n     },\n     {\n         \\\"bar\\\": true,\n-        10: 10/20\n-    }: \\\"world\\\"\n+        10: 10/20,\n+    }: \\\"world\\\",\n }\",\n                    format!(\"{:#?}\", Bar));\n     }\n@@ -325,7 +325,7 @@ mod debug_set {\n         assert_eq!(\"{true}\", format!(\"{:?}\", Foo));\n         assert_eq!(\n \"{\n-    true\n+    true,\n }\",\n                    format!(\"{:#?}\", Foo));\n     }\n@@ -347,7 +347,7 @@ mod debug_set {\n         assert_eq!(\n \"{\n     true,\n-    10/20\n+    10/20,\n }\",\n                    format!(\"{:#?}\", Foo));\n     }\n@@ -382,9 +382,9 @@ mod debug_set {\n \"{\n     {\n         true,\n-        10/20\n+        10/20,\n     },\n-    \\\"world\\\"\n+    \\\"world\\\",\n }\",\n                    format!(\"{:#?}\", Bar));\n     }\n@@ -422,7 +422,7 @@ mod debug_list {\n         assert_eq!(\"[true]\", format!(\"{:?}\", Foo));\n         assert_eq!(\n \"[\n-    true\n+    true,\n ]\",\n                    format!(\"{:#?}\", Foo));\n     }\n@@ -444,7 +444,7 @@ mod debug_list {\n         assert_eq!(\n \"[\n     true,\n-    10/20\n+    10/20,\n ]\",\n                    format!(\"{:#?}\", Foo));\n     }\n@@ -479,9 +479,9 @@ mod debug_list {\n \"[\n     [\n         true,\n-        10/20\n+        10/20,\n     ],\n-    \\\"world\\\"\n+    \\\"world\\\",\n ]\",\n                    format!(\"{:#?}\", Bar));\n     }\n@@ -513,31 +513,31 @@ fn test_formatting_parameters_are_forwarded() {\n     assert_eq!(format!(\"{:#03?}\", struct_), \"\n Foo {\n     bar: 1024,\n-    baz: 007\n+    baz: 007,\n }\n     \".trim());\n     assert_eq!(format!(\"{:#03?}\", tuple), \"\n (\n     1024,\n-    007\n+    007,\n )\n     \".trim());\n     assert_eq!(format!(\"{:#03?}\", list), \"\n [\n     1024,\n-    007\n+    007,\n ]\n     \".trim());\n     assert_eq!(format!(\"{:#03?}\", map), r#\"\n {\n     \"bar\": 1024,\n-    \"baz\": 007\n+    \"baz\": 007,\n }\n     \"#.trim());\n     assert_eq!(format!(\"{:#03?}\", set), \"\n {\n     007,\n-    1024\n+    1024,\n }\n     \".trim());\n }"}, {"sha": "20041389b3c3813e3dd8761d16d751fa4dabb339", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -6,7 +6,7 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |\n    = note: defining type: DefId(0/1:9 ~ escape_argument_callee[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) mut &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) i32))\n+               for<'r, 's, 't0> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) mut &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) i32)),\n            ]\n \n error: lifetime may not live long enough"}, {"sha": "b08ec9539318ad878007182b084fc4a11b3cfaae", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -6,7 +6,7 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |\n    = note: defining type: DefId(0/1:9 ~ escape_argument[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) mut &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) i32))\n+               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) mut &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) i32)),\n            ]\n \n note: No external requirements"}, {"sha": "7178b22bb5f2de7a7edb58be0884f3c1c1a12ff8", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -8,7 +8,7 @@ LL |             let mut closure1 = || p = &y;\n                i16,\n                extern \"rust-call\" fn(()),\n                &'_#1r mut &'_#2r i32,\n-               &'_#3r i32\n+               &'_#3r i32,\n            ]\n    = note: number of external vids: 4\n    = note: where '_#3r: '_#2r\n@@ -27,7 +27,7 @@ LL | |         };\n                i16,\n                extern \"rust-call\" fn(()),\n                &'_#1r mut &'_#2r i32,\n-               &'_#3r i32\n+               &'_#3r i32,\n            ]\n    = note: number of external vids: 4\n    = note: where '_#3r: '_#2r"}, {"sha": "d129f945f252ad22f9c4c9d94075d3cd613e72ef", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -8,7 +8,7 @@ LL |         let mut closure = || p = &y;\n                i16,\n                extern \"rust-call\" fn(()),\n                &'_#1r mut &'_#2r i32,\n-               &'_#3r i32\n+               &'_#3r i32,\n            ]\n    = note: number of external vids: 4\n    = note: where '_#3r: '_#2r"}, {"sha": "4db1f0407704334d5271e6c59d74e44ed5b15406", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -10,7 +10,7 @@ LL | |         },\n    |\n    = note: defining type: DefId(0/1:20 ~ propagate_approximated_fail_no_postdom[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n+               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>)),\n            ]\n    = note: late-bound region is '_#4r\n    = note: late-bound region is '_#5r"}, {"sha": "7dedae715bea06356883193f3f3693aebca5f86e", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -11,7 +11,7 @@ LL | |     });\n    |\n    = note: defining type: DefId(0/1:18 ~ propagate_approximated_ref[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>))\n+               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>)),\n            ]\n    = note: late-bound region is '_#3r\n    = note: late-bound region is '_#4r"}, {"sha": "b2d7fd8df6d339860fb3d2ca4d522acf85669017", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -10,7 +10,7 @@ LL | |     })\n    |\n    = note: defining type: DefId(0/1:12 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case1[0]::{{closure}}[0]) with closure substs [\n                i32,\n-               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>))\n+               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>)),\n            ]\n \n error[E0521]: borrowed data escapes outside of closure\n@@ -48,7 +48,7 @@ LL | |     })\n    |\n    = note: defining type: DefId(0/1:13 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case2[0]::{{closure}}[0]) with closure substs [\n                i32,\n-               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>))\n+               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>)),\n            ]\n    = note: number of external vids: 2\n    = note: where '_#1r: '_#0r"}, {"sha": "e30e2dfee63017494647a94d0fcbdb92361cc179", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -12,7 +12,7 @@ LL | |     });\n    |\n    = note: defining type: DefId(0/1:18 ~ propagate_approximated_shorter_to_static_no_bound[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) u32>))\n+               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) u32>)),\n            ]\n    = note: late-bound region is '_#2r\n    = note: late-bound region is '_#3r"}, {"sha": "ec608590a7104eb7e0c1d29adc952fad6de87491", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -12,7 +12,7 @@ LL | |     });\n    |\n    = note: defining type: DefId(0/1:18 ~ propagate_approximated_shorter_to_static_wrong_bound[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>))\n+               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>)),\n            ]\n    = note: late-bound region is '_#3r\n    = note: late-bound region is '_#4r"}, {"sha": "223c29f596922d0e6bddffbc8d6481031bf7cbdd", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -11,7 +11,7 @@ LL | |     });\n    |\n    = note: defining type: DefId(0/1:18 ~ propagate_approximated_val[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n+               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>)),\n            ]\n    = note: late-bound region is '_#3r\n    = note: late-bound region is '_#4r"}, {"sha": "d618b4d06a1d85eb2cf492f6998473966194539c", "filename": "src/test/ui/nll/closure-requirements/propagate-despite-same-free-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -10,7 +10,7 @@ LL | |         },\n    |\n    = note: defining type: DefId(0/1:16 ~ propagate_despite_same_free_region[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n+               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>)),\n            ]\n    = note: late-bound region is '_#3r\n    = note: number of external vids: 4"}, {"sha": "07fb4d0d5e3ae177eb97f20e83bdcba9840a23ae", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -11,7 +11,7 @@ LL | |     });\n    |\n    = note: defining type: DefId(0/1:18 ~ propagate_fail_to_approximate_longer_no_bounds[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n+               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>)),\n            ]\n    = note: late-bound region is '_#2r\n    = note: late-bound region is '_#3r"}, {"sha": "a0744c27db72cf2682cc7a110891ff73419f93aa", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -11,7 +11,7 @@ LL | |     });\n    |\n    = note: defining type: DefId(0/1:18 ~ propagate_fail_to_approximate_longer_wrong_bounds[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>))\n+               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>)),\n            ]\n    = note: late-bound region is '_#3r\n    = note: late-bound region is '_#4r"}, {"sha": "282246f81666bb966d771dfc0114e5642a653986", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -15,7 +15,7 @@ LL | |     });\n                '_#1r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((T,))\n+               extern \"rust-call\" fn((T,)),\n            ]\n    = note: number of external vids: 2\n    = note: where T: '_#1r\n@@ -34,7 +34,7 @@ LL | | }\n    |\n    = note: defining type: DefId(0/0:6 ~ propagate_from_trait_match[317d]::supply[0]) with substs [\n                '_#1r,\n-               T\n+               T,\n            ]\n \n error[E0309]: the parameter type `T` may not live long enough"}, {"sha": "c5645413c77cd066a94fc7f056242726f8822b8b", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -6,7 +6,7 @@ LL |     expect_sig(|a, b| b); // ought to return `a`\n    |\n    = note: defining type: DefId(0/1:9 ~ return_wrong_bound_region[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) i32)) -> &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) i32\n+               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) i32)) -> &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) i32,\n            ]\n \n error: lifetime may not live long enough"}, {"sha": "cda1f7d36311cc973ed9b38cd7670c6e265c72aa", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -8,7 +8,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n                '_#1r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>,\n            ]\n    = note: number of external vids: 3\n    = note: where <T as std::iter::Iterator>::Item: '_#2r\n@@ -27,7 +27,7 @@ LL | | }\n    |\n    = note: defining type: DefId(0/0:6 ~ projection_no_regions_closure[317d]::no_region[0]) with substs [\n                '_#1r,\n-               T\n+               T,\n            ]\n \n error[E0309]: the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n@@ -48,7 +48,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n                '_#1r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>,\n            ]\n    = note: number of external vids: 3\n    = note: where <T as std::iter::Iterator>::Item: '_#2r\n@@ -66,7 +66,7 @@ LL | | }\n    |\n    = note: defining type: DefId(0/0:7 ~ projection_no_regions_closure[317d]::correct_region[0]) with substs [\n                '_#1r,\n-               T\n+               T,\n            ]\n \n note: External requirements\n@@ -80,7 +80,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n                '_#2r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>,\n            ]\n    = note: number of external vids: 4\n    = note: where <T as std::iter::Iterator>::Item: '_#3r\n@@ -100,7 +100,7 @@ LL | | }\n    = note: defining type: DefId(0/0:8 ~ projection_no_regions_closure[317d]::wrong_region[0]) with substs [\n                '_#1r,\n                '_#2r,\n-               T\n+               T,\n            ]\n \n error[E0309]: the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n@@ -122,7 +122,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n                '_#2r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>,\n            ]\n    = note: number of external vids: 4\n    = note: where <T as std::iter::Iterator>::Item: '_#3r\n@@ -142,7 +142,7 @@ LL | | }\n    = note: defining type: DefId(0/0:9 ~ projection_no_regions_closure[317d]::outlives_region[0]) with substs [\n                '_#1r,\n                '_#2r,\n-               T\n+               T,\n            ]\n \n error: aborting due to 2 previous errors"}, {"sha": "9d716006500b779c15e91d1181baf3006e586a09", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -8,7 +8,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                '_#1r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n            ]\n    = note: late-bound region is '_#3r\n    = note: number of external vids: 4\n@@ -29,7 +29,7 @@ LL | | }\n    |\n    = note: defining type: DefId(0/0:8 ~ projection_one_region_closure[317d]::no_relationships_late[0]) with substs [\n                '_#1r,\n-               T\n+               T,\n            ]\n \n error[E0309]: the parameter type `T` may not live long enough\n@@ -62,7 +62,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                '_#2r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n    = note: number of external vids: 4\n    = note: where T: '_#3r\n@@ -83,7 +83,7 @@ LL | | }\n    = note: defining type: DefId(0/0:9 ~ projection_one_region_closure[317d]::no_relationships_early[0]) with substs [\n                '_#1r,\n                '_#2r,\n-               T\n+               T,\n            ]\n \n error[E0309]: the parameter type `T` may not live long enough\n@@ -116,7 +116,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                '_#2r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n    = note: number of external vids: 4\n    = note: where <T as Anything<ReClosureBound('_#2r)>>::AssocType: '_#3r\n@@ -136,7 +136,7 @@ LL | | }\n    = note: defining type: DefId(0/0:10 ~ projection_one_region_closure[317d]::projection_outlives[0]) with substs [\n                '_#1r,\n                '_#2r,\n-               T\n+               T,\n            ]\n \n note: External requirements\n@@ -150,7 +150,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                '_#2r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n    = note: number of external vids: 4\n    = note: where T: '_#3r\n@@ -171,7 +171,7 @@ LL | | }\n    = note: defining type: DefId(0/0:11 ~ projection_one_region_closure[317d]::elements_outlive[0]) with substs [\n                '_#1r,\n                '_#2r,\n-               T\n+               T,\n            ]\n \n error: aborting due to 4 previous errors"}, {"sha": "0fa4060137a3f837969a7227ac5a001e771d0efa", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -8,7 +8,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                '_#1r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n            ]\n    = note: late-bound region is '_#3r\n    = note: number of external vids: 4\n@@ -28,7 +28,7 @@ LL | | }\n    |\n    = note: defining type: DefId(0/0:8 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_late[0]) with substs [\n                '_#1r,\n-               T\n+               T,\n            ]\n \n error: lifetime may not live long enough\n@@ -53,7 +53,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                '_#2r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n    = note: number of external vids: 4\n    = note: where '_#2r: '_#3r\n@@ -73,7 +73,7 @@ LL | | }\n    = note: defining type: DefId(0/0:9 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_early[0]) with substs [\n                '_#1r,\n                '_#2r,\n-               T\n+               T,\n            ]\n \n error: lifetime may not live long enough\n@@ -98,7 +98,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                '_#2r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n    = note: number of external vids: 4\n    = note: where <T as Anything<ReClosureBound('_#2r)>>::AssocType: '_#3r\n@@ -118,7 +118,7 @@ LL | | }\n    = note: defining type: DefId(0/0:10 ~ projection_one_region_trait_bound_closure[317d]::projection_outlives[0]) with substs [\n                '_#1r,\n                '_#2r,\n-               T\n+               T,\n            ]\n \n note: External requirements\n@@ -132,7 +132,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                '_#2r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n    = note: number of external vids: 4\n    = note: where '_#2r: '_#3r\n@@ -152,7 +152,7 @@ LL | | }\n    = note: defining type: DefId(0/0:11 ~ projection_one_region_trait_bound_closure[317d]::elements_outlive[0]) with substs [\n                '_#1r,\n                '_#2r,\n-               T\n+               T,\n            ]\n \n note: External requirements\n@@ -165,7 +165,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                '_#1r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n            ]\n    = note: number of external vids: 3\n    = note: where '_#1r: '_#2r\n@@ -184,7 +184,7 @@ LL | | }\n    |\n    = note: defining type: DefId(0/0:12 ~ projection_one_region_trait_bound_closure[317d]::one_region[0]) with substs [\n                '_#1r,\n-               T\n+               T,\n            ]\n \n error: aborting due to 2 previous errors"}, {"sha": "f616a7feae3f01bf606554db66b82ff2069cc00b", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-static-closure.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -8,7 +8,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                '_#1r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n            ]\n    = note: late-bound region is '_#3r\n \n@@ -25,7 +25,7 @@ LL | | }\n    |\n    = note: defining type: DefId(0/0:8 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_late[0]) with substs [\n                '_#1r,\n-               T\n+               T,\n            ]\n \n note: No external requirements\n@@ -39,7 +39,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                '_#2r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n \n note: No external requirements\n@@ -57,7 +57,7 @@ LL | | }\n    = note: defining type: DefId(0/0:9 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_early[0]) with substs [\n                '_#1r,\n                '_#2r,\n-               T\n+               T,\n            ]\n \n note: No external requirements\n@@ -71,7 +71,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                '_#2r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n \n note: No external requirements\n@@ -89,7 +89,7 @@ LL | | }\n    = note: defining type: DefId(0/0:10 ~ projection_one_region_trait_bound_static_closure[317d]::projection_outlives[0]) with substs [\n                '_#1r,\n                '_#2r,\n-               T\n+               T,\n            ]\n \n note: No external requirements\n@@ -103,7 +103,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                '_#2r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n \n note: No external requirements\n@@ -121,7 +121,7 @@ LL | | }\n    = note: defining type: DefId(0/0:11 ~ projection_one_region_trait_bound_static_closure[317d]::elements_outlive[0]) with substs [\n                '_#1r,\n                '_#2r,\n-               T\n+               T,\n            ]\n \n note: No external requirements\n@@ -134,7 +134,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                '_#1r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n            ]\n \n note: No external requirements\n@@ -151,6 +151,6 @@ LL | | }\n    |\n    = note: defining type: DefId(0/0:12 ~ projection_one_region_trait_bound_static_closure[317d]::one_region[0]) with substs [\n                '_#1r,\n-               T\n+               T,\n            ]\n "}, {"sha": "b761b031444dac454a1498112a55605f8e7c8a8b", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -9,7 +9,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                '_#2r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n    = note: late-bound region is '_#4r\n    = note: number of external vids: 5\n@@ -30,7 +30,7 @@ LL | | }\n    = note: defining type: DefId(0/0:8 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]) with substs [\n                '_#1r,\n                '_#2r,\n-               T\n+               T,\n            ]\n \n error[E0309]: the associated type `<T as Anything<'_#5r, '_#6r>>::AssocType` may not live long enough\n@@ -53,7 +53,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                '_#3r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T))\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T)),\n            ]\n    = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n@@ -74,7 +74,7 @@ LL | | }\n                '_#1r,\n                '_#2r,\n                '_#3r,\n-               T\n+               T,\n            ]\n \n error[E0309]: the associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n@@ -97,7 +97,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                '_#3r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T))\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T)),\n            ]\n    = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n@@ -118,7 +118,7 @@ LL | | }\n                '_#1r,\n                '_#2r,\n                '_#3r,\n-               T\n+               T,\n            ]\n \n note: External requirements\n@@ -133,7 +133,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                '_#3r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T))\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T)),\n            ]\n    = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n@@ -154,7 +154,7 @@ LL | | }\n                '_#1r,\n                '_#2r,\n                '_#3r,\n-               T\n+               T,\n            ]\n \n note: External requirements\n@@ -169,7 +169,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                '_#3r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T))\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T)),\n            ]\n    = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n@@ -190,7 +190,7 @@ LL | | }\n                '_#1r,\n                '_#2r,\n                '_#3r,\n-               T\n+               T,\n            ]\n \n note: External requirements\n@@ -203,7 +203,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                '_#1r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n            ]\n    = note: late-bound region is '_#3r\n    = note: number of external vids: 4\n@@ -223,7 +223,7 @@ LL | | }\n    |\n    = note: defining type: DefId(0/0:13 ~ projection_two_region_trait_bound_closure[317d]::two_regions[0]) with substs [\n                '_#1r,\n-               T\n+               T,\n            ]\n \n error: lifetime may not live long enough\n@@ -248,7 +248,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                '_#2r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n    = note: number of external vids: 4\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#2r)>>::AssocType: '_#3r\n@@ -268,7 +268,7 @@ LL | | }\n    = note: defining type: DefId(0/0:14 ~ projection_two_region_trait_bound_closure[317d]::two_regions_outlive[0]) with substs [\n                '_#1r,\n                '_#2r,\n-               T\n+               T,\n            ]\n \n note: External requirements\n@@ -281,7 +281,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                '_#1r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n            ]\n    = note: number of external vids: 3\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n@@ -300,7 +300,7 @@ LL | | }\n    |\n    = note: defining type: DefId(0/0:15 ~ projection_two_region_trait_bound_closure[317d]::one_region[0]) with substs [\n                '_#1r,\n-               T\n+               T,\n            ]\n \n error: aborting due to 3 previous errors"}, {"sha": "6f3071becfd0e75584db0f2df36ffb2634bd49a4", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -7,7 +7,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    = note: defining type: DefId(0/1:14 ~ ty_param_closure_approximate_lower_bound[317d]::generic[0]::{{closure}}[0]) with closure substs [\n                T,\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) T))\n+               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) T)),\n            ]\n    = note: number of external vids: 2\n    = note: where T: '_#1r\n@@ -22,7 +22,7 @@ LL | | }\n    | |_^\n    |\n    = note: defining type: DefId(0/0:5 ~ ty_param_closure_approximate_lower_bound[317d]::generic[0]) with substs [\n-               T\n+               T,\n            ]\n \n note: External requirements\n@@ -34,7 +34,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    = note: defining type: DefId(0/1:17 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]::{{closure}}[0]) with closure substs [\n                T,\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) T))\n+               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) T)),\n            ]\n    = note: late-bound region is '_#2r\n    = note: number of external vids: 3\n@@ -50,7 +50,7 @@ LL | | }\n    | |_^\n    |\n    = note: defining type: DefId(0/0:6 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]) with substs [\n-               T\n+               T,\n            ]\n \n error[E0309]: the parameter type `T` may not live long enough"}, {"sha": "cdb715762031fbf1dea2ac7f6be858c659f8f256", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -8,7 +8,7 @@ LL |     with_signature(x, |y| y)\n                '_#1r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn std::fmt::Debug + '_#2r)>\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn std::fmt::Debug + '_#2r)>,\n            ]\n    = note: number of external vids: 3\n    = note: where T: '_#2r\n@@ -27,7 +27,7 @@ LL | | }\n    |\n    = note: defining type: DefId(0/0:5 ~ ty_param_closure_outlives_from_return_type[317d]::no_region[0]) with substs [\n                '_#1r,\n-               T\n+               T,\n            ]\n \n error[E0309]: the parameter type `T` may not live long enough"}, {"sha": "68798a335f9df52760e0b6bf078c0f42980c61f8", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -14,7 +14,7 @@ LL | |     })\n    = note: defining type: DefId(0/1:16 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]::{{closure}}[0]) with closure substs [\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#1r ()>, T))\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#1r ()>, T)),\n            ]\n    = note: late-bound region is '_#2r\n    = note: number of external vids: 3\n@@ -33,7 +33,7 @@ LL | | }\n    | |_^\n    |\n    = note: defining type: DefId(0/0:6 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]) with substs [\n-               T\n+               T,\n            ]\n \n error[E0309]: the parameter type `T` may not live long enough\n@@ -68,7 +68,7 @@ LL | |     })\n                '_#1r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n            ]\n    = note: number of external vids: 3\n    = note: where T: '_#2r\n@@ -87,7 +87,7 @@ LL | | }\n    |\n    = note: defining type: DefId(0/0:7 ~ ty_param_closure_outlives_from_where_clause[317d]::correct_region[0]) with substs [\n                '_#1r,\n-               T\n+               T,\n            ]\n \n note: External requirements\n@@ -105,7 +105,7 @@ LL | |     })\n                '_#1r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n            ]\n    = note: late-bound region is '_#3r\n    = note: number of external vids: 4\n@@ -125,7 +125,7 @@ LL | | }\n    |\n    = note: defining type: DefId(0/0:8 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]) with substs [\n                '_#1r,\n-               T\n+               T,\n            ]\n \n error[E0309]: the parameter type `T` may not live long enough\n@@ -156,7 +156,7 @@ LL | |     })\n                '_#2r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n    = note: number of external vids: 4\n    = note: where T: '_#3r\n@@ -176,7 +176,7 @@ LL | | }\n    = note: defining type: DefId(0/0:9 ~ ty_param_closure_outlives_from_where_clause[317d]::outlives_region[0]) with substs [\n                '_#1r,\n                '_#2r,\n-               T\n+               T,\n            ]\n \n error: aborting due to 2 previous errors"}, {"sha": "618380d7f0bee8aae443bbba997c7972182f238f", "filename": "src/test/ui/proc-macro/dollar-crate-issue-57089.stdout", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -2,79 +2,79 @@ PROC MACRO INPUT (PRETTY-PRINTED): struct M ( $crate :: S ) ;\n PROC MACRO INPUT: TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #2 bytes(LO..HI)\n+        span: #2 bytes(LO..HI),\n     },\n     Ident {\n         ident: \"M\",\n-        span: #2 bytes(LO..HI)\n+        span: #2 bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #2 bytes(LO..HI)\n+                span: #2 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #2 bytes(LO..HI)\n+                span: #2 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #2 bytes(LO..HI)\n+                span: #2 bytes(LO..HI),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #2 bytes(LO..HI)\n-            }\n+                span: #2 bytes(LO..HI),\n+            },\n         ],\n-        span: #2 bytes(LO..HI)\n+        span: #2 bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #2 bytes(LO..HI)\n-    }\n+        span: #2 bytes(LO..HI),\n+    },\n ]\n ATTRIBUTE INPUT (PRETTY-PRINTED): struct A(crate::S);\n ATTRIBUTE INPUT: TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #2 bytes(LO..HI)\n+        span: #2 bytes(LO..HI),\n     },\n     Ident {\n         ident: \"A\",\n-        span: #2 bytes(LO..HI)\n+        span: #2 bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #2 bytes(LO..HI)\n+                span: #2 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #2 bytes(LO..HI)\n+                span: #2 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #2 bytes(LO..HI)\n+                span: #2 bytes(LO..HI),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #2 bytes(LO..HI)\n-            }\n+                span: #2 bytes(LO..HI),\n+            },\n         ],\n-        span: #2 bytes(LO..HI)\n+        span: #2 bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #2 bytes(LO..HI)\n-    }\n+        span: #2 bytes(LO..HI),\n+    },\n ]"}, {"sha": "454da53943054f8cf380ace5b7a327fb18e14209", "filename": "src/test/ui/proc-macro/dollar-crate.stdout", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -2,239 +2,239 @@ PROC MACRO INPUT (PRETTY-PRINTED): struct M ( $crate :: S ) ;\n PROC MACRO INPUT: TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #2 bytes(LO..HI)\n+        span: #2 bytes(LO..HI),\n     },\n     Ident {\n         ident: \"M\",\n-        span: #2 bytes(LO..HI)\n+        span: #2 bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #2 bytes(LO..HI)\n+                span: #2 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #2 bytes(LO..HI)\n+                span: #2 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #2 bytes(LO..HI)\n+                span: #2 bytes(LO..HI),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #2 bytes(LO..HI)\n-            }\n+                span: #2 bytes(LO..HI),\n+            },\n         ],\n-        span: #2 bytes(LO..HI)\n+        span: #2 bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #2 bytes(LO..HI)\n-    }\n+        span: #2 bytes(LO..HI),\n+    },\n ]\n ATTRIBUTE INPUT (PRETTY-PRINTED): struct A(crate::S);\n ATTRIBUTE INPUT: TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #2 bytes(LO..HI)\n+        span: #2 bytes(LO..HI),\n     },\n     Ident {\n         ident: \"A\",\n-        span: #2 bytes(LO..HI)\n+        span: #2 bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #2 bytes(LO..HI)\n+                span: #2 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #2 bytes(LO..HI)\n+                span: #2 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #2 bytes(LO..HI)\n+                span: #2 bytes(LO..HI),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #2 bytes(LO..HI)\n-            }\n+                span: #2 bytes(LO..HI),\n+            },\n         ],\n-        span: #2 bytes(LO..HI)\n+        span: #2 bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #2 bytes(LO..HI)\n-    }\n+        span: #2 bytes(LO..HI),\n+    },\n ]\n DERIVE INPUT (PRETTY-PRINTED): struct D(crate::S);\n DERIVE INPUT: TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #2 bytes(LO..HI)\n+        span: #2 bytes(LO..HI),\n     },\n     Ident {\n         ident: \"D\",\n-        span: #2 bytes(LO..HI)\n+        span: #2 bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #2 bytes(LO..HI)\n+                span: #2 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #2 bytes(LO..HI)\n+                span: #2 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #2 bytes(LO..HI)\n+                span: #2 bytes(LO..HI),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #2 bytes(LO..HI)\n-            }\n+                span: #2 bytes(LO..HI),\n+            },\n         ],\n-        span: #2 bytes(LO..HI)\n+        span: #2 bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #2 bytes(LO..HI)\n-    }\n+        span: #2 bytes(LO..HI),\n+    },\n ]\n PROC MACRO INPUT (PRETTY-PRINTED): struct M ( $crate :: S ) ;\n PROC MACRO INPUT: TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #10 bytes(LO..HI)\n+        span: #10 bytes(LO..HI),\n     },\n     Ident {\n         ident: \"M\",\n-        span: #10 bytes(LO..HI)\n+        span: #10 bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #10 bytes(LO..HI)\n+                span: #10 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #10 bytes(LO..HI)\n+                span: #10 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #10 bytes(LO..HI)\n+                span: #10 bytes(LO..HI),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #10 bytes(LO..HI)\n-            }\n+                span: #10 bytes(LO..HI),\n+            },\n         ],\n-        span: #10 bytes(LO..HI)\n+        span: #10 bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #10 bytes(LO..HI)\n-    }\n+        span: #10 bytes(LO..HI),\n+    },\n ]\n ATTRIBUTE INPUT (PRETTY-PRINTED): struct A(::dollar_crate_external::S);\n ATTRIBUTE INPUT: TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #10 bytes(LO..HI)\n+        span: #10 bytes(LO..HI),\n     },\n     Ident {\n         ident: \"A\",\n-        span: #10 bytes(LO..HI)\n+        span: #10 bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #10 bytes(LO..HI)\n+                span: #10 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #10 bytes(LO..HI)\n+                span: #10 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #10 bytes(LO..HI)\n+                span: #10 bytes(LO..HI),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #10 bytes(LO..HI)\n-            }\n+                span: #10 bytes(LO..HI),\n+            },\n         ],\n-        span: #10 bytes(LO..HI)\n+        span: #10 bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #10 bytes(LO..HI)\n-    }\n+        span: #10 bytes(LO..HI),\n+    },\n ]\n DERIVE INPUT (PRETTY-PRINTED): struct D(::dollar_crate_external::S);\n DERIVE INPUT: TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #10 bytes(LO..HI)\n+        span: #10 bytes(LO..HI),\n     },\n     Ident {\n         ident: \"D\",\n-        span: #10 bytes(LO..HI)\n+        span: #10 bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #10 bytes(LO..HI)\n+                span: #10 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #10 bytes(LO..HI)\n+                span: #10 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #10 bytes(LO..HI)\n+                span: #10 bytes(LO..HI),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #10 bytes(LO..HI)\n-            }\n+                span: #10 bytes(LO..HI),\n+            },\n         ],\n-        span: #10 bytes(LO..HI)\n+        span: #10 bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #10 bytes(LO..HI)\n-    }\n+        span: #10 bytes(LO..HI),\n+    },\n ]"}, {"sha": "f1b73ee115db14f62f481686bc9589c32309dac1", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-expected-behavior.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20dbf28624db446c0cf67be4cc71a85931947907/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs?ref=20dbf28624db446c0cf67be4cc71a85931947907", "patch": "@@ -64,22 +64,22 @@ fn validate_stderr(stderr: Vec<String>) {\n \n         \":28] Point{x: 42, y: 24,} = Point {\",\n         \"    x: 42,\",\n-        \"    y: 24\",\n+        \"    y: 24,\",\n         \"}\",\n \n         \":29] b = Point {\",\n         \"    x: 42,\",\n-        \"    y: 24\",\n+        \"    y: 24,\",\n         \"}\",\n \n         \":37]\",\n \n         \":41] &a = NoCopy(\",\n-        \"    1337\",\n+        \"    1337,\",\n         \")\",\n \n         \":41] dbg!(& a) = NoCopy(\",\n-        \"    1337\",\n+        \"    1337,\",\n         \")\",\n         \":46] f(&42) = 42\",\n "}]}