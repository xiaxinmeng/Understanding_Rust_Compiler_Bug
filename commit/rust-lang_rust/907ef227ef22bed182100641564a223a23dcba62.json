{"sha": "907ef227ef22bed182100641564a223a23dcba62", "node_id": "C_kwDOAAsO6NoAKDkwN2VmMjI3ZWYyMmJlZDE4MjEwMDY0MTU2NGEyMjNhMjNkY2JhNjI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-30T14:47:40Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-30T14:47:40Z"}, "message": "Remove PredicateS type", "tree": {"sha": "3e7635f0e6a8870e116f00e80b38298268fd0e4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e7635f0e6a8870e116f00e80b38298268fd0e4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/907ef227ef22bed182100641564a223a23dcba62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/907ef227ef22bed182100641564a223a23dcba62", "html_url": "https://github.com/rust-lang/rust/commit/907ef227ef22bed182100641564a223a23dcba62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/907ef227ef22bed182100641564a223a23dcba62/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46ba1545b89020486fb9da460e9f3b7b60e83c40", "url": "https://api.github.com/repos/rust-lang/rust/commits/46ba1545b89020486fb9da460e9f3b7b60e83c40", "html_url": "https://github.com/rust-lang/rust/commit/46ba1545b89020486fb9da460e9f3b7b60e83c40"}], "stats": {"total": 80, "additions": 28, "deletions": 52}, "files": [{"sha": "f8063dd238b2ef4e56ec584b5df9b77cf22dde82", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/907ef227ef22bed182100641564a223a23dcba62/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907ef227ef22bed182100641564a223a23dcba62/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=907ef227ef22bed182100641564a223a23dcba62", "patch": "@@ -91,7 +91,7 @@ macro_rules! arena_types {\n \n             // Interned types\n             [] tys: rustc_type_ir::WithCachedTypeInfo<rustc_middle::ty::TyKind<'tcx>>,\n-            [] predicates: rustc_type_ir::WithCachedTypeInfo<rustc_middle::ty::PredicateS<'tcx>>,\n+            [] predicates: rustc_type_ir::WithCachedTypeInfo<rustc_middle::ty::PredicateKind<'tcx>>,\n             [] consts: rustc_middle::ty::ConstS<'tcx>,\n \n             // Note that this deliberately duplicates items in the `rustc_hir::arena`,"}, {"sha": "850b25473d642bcb8bafea07a71944f77c67a833", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/907ef227ef22bed182100641564a223a23dcba62/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907ef227ef22bed182100641564a223a23dcba62/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=907ef227ef22bed182100641564a223a23dcba62", "patch": "@@ -21,9 +21,9 @@ use crate::ty::{\n     self, AdtDef, AdtDefData, AdtKind, Binder, BindingMode, BoundVar, CanonicalPolyFnSig,\n     ClosureSizeProfileData, Const, ConstS, DefIdTree, FloatTy, FloatVar, FloatVid,\n     GenericParamDefKind, InferTy, IntTy, IntVar, IntVid, List, ParamConst, ParamTy,\n-    PolyExistentialPredicate, PolyFnSig, Predicate, PredicateKind, PredicateS, ProjectionTy,\n-    Region, RegionKind, ReprOptions, TraitObjectVisitor, Ty, TyKind, TyVar, TyVid, TypeAndMut,\n-    UintTy, Visibility,\n+    PolyExistentialPredicate, PolyFnSig, Predicate, PredicateKind, ProjectionTy, Region,\n+    RegionKind, ReprOptions, TraitObjectVisitor, Ty, TyKind, TyVar, TyVid, TypeAndMut, UintTy,\n+    Visibility,\n };\n use crate::ty::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef, UserSubsts};\n use rustc_ast as ast;\n@@ -145,7 +145,7 @@ pub struct CtxtInterners<'tcx> {\n     canonical_var_infos: InternedSet<'tcx, List<CanonicalVarInfo<'tcx>>>,\n     region: InternedSet<'tcx, RegionKind<'tcx>>,\n     poly_existential_predicates: InternedSet<'tcx, List<PolyExistentialPredicate<'tcx>>>,\n-    predicate: InternedSet<'tcx, WithCachedTypeInfo<PredicateS<'tcx>>>,\n+    predicate: InternedSet<'tcx, WithCachedTypeInfo<ty::Binder<'tcx, PredicateKind<'tcx>>>>,\n     predicates: InternedSet<'tcx, List<Predicate<'tcx>>>,\n     projs: InternedSet<'tcx, List<ProjectionKind>>,\n     place_elems: InternedSet<'tcx, List<PlaceElem<'tcx>>>,\n@@ -245,16 +245,12 @@ impl<'tcx> CtxtInterners<'tcx> {\n                     let stable_hash =\n                         self.stable_hash(&flags, sess, definitions, cstore, source_span, &kind);\n \n-                    let predicate_struct = PredicateS {\n-                        kind,\n+                    InternedInSet(self.arena.alloc(WithCachedTypeInfo {\n+                        internee: kind,\n+                        stable_hash,\n                         flags: flags.flags,\n                         outer_exclusive_binder: flags.outer_exclusive_binder,\n-                    };\n-\n-                    InternedInSet(\n-                        self.arena\n-                            .alloc(WithCachedTypeInfo { internee: predicate_struct, stable_hash }),\n-                    )\n+                    }))\n                 })\n                 .0,\n         ))\n@@ -2191,27 +2187,32 @@ impl<'tcx> Hash for InternedInSet<'tcx, WithCachedTypeInfo<TyKind<'tcx>>> {\n }\n \n impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>>\n-    for InternedInSet<'tcx, WithCachedTypeInfo<PredicateS<'tcx>>>\n+    for InternedInSet<'tcx, WithCachedTypeInfo<ty::Binder<'tcx, PredicateKind<'tcx>>>>\n {\n     fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {\n-        &self.0.kind\n+        &self.0.internee\n     }\n }\n \n-impl<'tcx> PartialEq for InternedInSet<'tcx, WithCachedTypeInfo<PredicateS<'tcx>>> {\n-    fn eq(&self, other: &InternedInSet<'tcx, WithCachedTypeInfo<PredicateS<'tcx>>>) -> bool {\n+impl<'tcx> PartialEq\n+    for InternedInSet<'tcx, WithCachedTypeInfo<ty::Binder<'tcx, PredicateKind<'tcx>>>>\n+{\n+    fn eq(\n+        &self,\n+        other: &InternedInSet<'tcx, WithCachedTypeInfo<ty::Binder<'tcx, PredicateKind<'tcx>>>>,\n+    ) -> bool {\n         // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals\n         // `x == y`.\n-        self.0.kind == other.0.kind\n+        self.0.internee == other.0.internee\n     }\n }\n \n-impl<'tcx> Eq for InternedInSet<'tcx, WithCachedTypeInfo<PredicateS<'tcx>>> {}\n+impl<'tcx> Eq for InternedInSet<'tcx, WithCachedTypeInfo<ty::Binder<'tcx, PredicateKind<'tcx>>>> {}\n \n-impl<'tcx> Hash for InternedInSet<'tcx, WithCachedTypeInfo<PredicateS<'tcx>>> {\n+impl<'tcx> Hash for InternedInSet<'tcx, WithCachedTypeInfo<ty::Binder<'tcx, PredicateKind<'tcx>>>> {\n     fn hash<H: Hasher>(&self, s: &mut H) {\n         // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.\n-        self.0.kind.hash(s)\n+        self.0.internee.hash(s)\n     }\n }\n "}, {"sha": "4b4b5126719ed553efbb03cf1f11d1557eff6fb3", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 31, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/907ef227ef22bed182100641564a223a23dcba62/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907ef227ef22bed182100641564a223a23dcba62/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=907ef227ef22bed182100641564a223a23dcba62", "patch": "@@ -474,28 +474,18 @@ impl ty::EarlyBoundRegion {\n     }\n }\n \n-/// Represents a predicate.\n-///\n-/// See comments on `WithCachedTypeInfo`, which apply here too (albeit for\n-/// `PredicateS`/`Predicate` rather than `TyKind`/`Ty`).\n-#[derive(Debug)]\n-pub(crate) struct PredicateS<'tcx> {\n-    kind: Binder<'tcx, PredicateKind<'tcx>>,\n-    flags: TypeFlags,\n-    /// See the comment for the corresponding field of [WithCachedTypeInfo].\n-    outer_exclusive_binder: ty::DebruijnIndex,\n-}\n-\n-/// Use this rather than `PredicateS`, whenever possible.\n+/// Use this rather than `PredicateKind`, whenever possible.\n #[derive(Clone, Copy, PartialEq, Eq, Hash, HashStable)]\n #[rustc_pass_by_value]\n-pub struct Predicate<'tcx>(Interned<'tcx, WithCachedTypeInfo<PredicateS<'tcx>>>);\n+pub struct Predicate<'tcx>(\n+    Interned<'tcx, WithCachedTypeInfo<ty::Binder<'tcx, PredicateKind<'tcx>>>>,\n+);\n \n impl<'tcx> Predicate<'tcx> {\n     /// Gets the inner `Binder<'tcx, PredicateKind<'tcx>>`.\n     #[inline]\n     pub fn kind(self) -> Binder<'tcx, PredicateKind<'tcx>> {\n-        self.0.kind\n+        self.0.internee\n     }\n \n     #[inline(always)]\n@@ -570,21 +560,6 @@ impl<'tcx> Predicate<'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for PredicateS<'tcx> {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let PredicateS {\n-            ref kind,\n-\n-            // The other fields just provide fast access to information that is\n-            // also contained in `kind`, so no need to hash them.\n-            flags: _,\n-            outer_exclusive_binder: _,\n-        } = self;\n-\n-        kind.hash_stable(hcx, hasher);\n-    }\n-}\n-\n impl rustc_errors::IntoDiagnosticArg for Predicate<'_> {\n     fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n         rustc_errors::DiagnosticArgValue::Str(std::borrow::Cow::Owned(self.to_string()))\n@@ -2631,7 +2606,7 @@ mod size_asserts {\n     use super::*;\n     use rustc_data_structures::static_assert_size;\n     // tidy-alphabetical-start\n-    static_assert_size!(PredicateS<'_>, 48);\n+    static_assert_size!(PredicateKind<'_>, 32);\n     static_assert_size!(WithCachedTypeInfo<TyKind<'_>>, 56);\n     // tidy-alphabetical-end\n }"}]}