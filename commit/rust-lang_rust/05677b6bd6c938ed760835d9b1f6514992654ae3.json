{"sha": "05677b6bd6c938ed760835d9b1f6514992654ae3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1Njc3YjZiZDZjOTM4ZWQ3NjA4MzVkOWIxZjY1MTQ5OTI2NTRhZTM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-08-05T13:32:02Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-08-05T13:32:02Z"}, "message": "Rustup to rustc 1.56.0-nightly (25b764849 2021-08-04)", "tree": {"sha": "f035d356372f7cd7eedf20a9975ea9a96f6fa076", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f035d356372f7cd7eedf20a9975ea9a96f6fa076"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05677b6bd6c938ed760835d9b1f6514992654ae3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05677b6bd6c938ed760835d9b1f6514992654ae3", "html_url": "https://github.com/rust-lang/rust/commit/05677b6bd6c938ed760835d9b1f6514992654ae3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05677b6bd6c938ed760835d9b1f6514992654ae3/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20491379c209f8282e998e715d0fdc0a7fbeb0ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/20491379c209f8282e998e715d0fdc0a7fbeb0ba", "html_url": "https://github.com/rust-lang/rust/commit/20491379c209f8282e998e715d0fdc0a7fbeb0ba"}], "stats": {"total": 68, "additions": 33, "deletions": 35}, "files": [{"sha": "cda8153083c337fd004cf2e3d5c0ac631156fd19", "filename": "patches/0027-sysroot-128bit-atomic-operations.patch", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/05677b6bd6c938ed760835d9b1f6514992654ae3/patches%2F0027-sysroot-128bit-atomic-operations.patch", "raw_url": "https://github.com/rust-lang/rust/raw/05677b6bd6c938ed760835d9b1f6514992654ae3/patches%2F0027-sysroot-128bit-atomic-operations.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0027-sysroot-128bit-atomic-operations.patch?ref=05677b6bd6c938ed760835d9b1f6514992654ae3", "patch": "@@ -1,20 +1,44 @@\n-From 894e07dfec2624ba539129b1c1d63e1d7d812bda Mon Sep 17 00:00:00 2001\n+From 6a4e6f5dc8c8a529a822eb9b57f9e57519595439 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n Date: Thu, 18 Feb 2021 18:45:28 +0100\n Subject: [PATCH] Disable 128bit atomic operations\n \n Cranelift doesn't support them yet\n ---\n- library/core/src/sync/atomic.rs | 38 ---------------------------------\n- library/core/tests/atomic.rs    |  4 ----\n- library/std/src/panic.rs        |  6 ------\n+ library/core/src/panic/unwind_safe.rs |  6 -----\n+ library/core/src/sync/atomic.rs       | 38 ---------------------------\n+ library/core/tests/atomic.rs          |  4 ---\n  3 files changed, 48 deletions(-)\n \n+diff --git a/library/core/src/panic/unwind_safe.rs b/library/core/src/panic/unwind_safe.rs\n+index 092b7cf..158cf71 100644\n+--- a/library/core/src/panic/unwind_safe.rs\n++++ b/library/core/src/panic/unwind_safe.rs\n+@@ -216,9 +216,6 @@ impl RefUnwindSafe for crate::sync::atomic::AtomicI32 {}\n+ #[cfg(target_has_atomic_load_store = \"64\")]\n+ #[stable(feature = \"integer_atomics_stable\", since = \"1.34.0\")]\n+ impl RefUnwindSafe for crate::sync::atomic::AtomicI64 {}\n+-#[cfg(target_has_atomic_load_store = \"128\")]\n+-#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+-impl RefUnwindSafe for crate::sync::atomic::AtomicI128 {}\n+ \n+ #[cfg(target_has_atomic_load_store = \"ptr\")]\n+ #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n+@@ -235,9 +232,6 @@ impl RefUnwindSafe for crate::sync::atomic::AtomicU32 {}\n+ #[cfg(target_has_atomic_load_store = \"64\")]\n+ #[stable(feature = \"integer_atomics_stable\", since = \"1.34.0\")]\n+ impl RefUnwindSafe for crate::sync::atomic::AtomicU64 {}\n+-#[cfg(target_has_atomic_load_store = \"128\")]\n+-#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+-impl RefUnwindSafe for crate::sync::atomic::AtomicU128 {}\n+ \n+ #[cfg(target_has_atomic_load_store = \"8\")]\n+ #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n diff --git a/library/core/src/sync/atomic.rs b/library/core/src/sync/atomic.rs\n-index 81c9e1d..65c9503 100644\n+index 0194c58..25a0038 100644\n --- a/library/core/src/sync/atomic.rs\n +++ b/library/core/src/sync/atomic.rs\n-@@ -2228,44 +2228,6 @@ atomic_int! {\n+@@ -2229,44 +2229,6 @@ atomic_int! {\n      \"AtomicU64::new(0)\",\n      u64 AtomicU64 ATOMIC_U64_INIT\n  }\n@@ -60,10 +84,10 @@ index 81c9e1d..65c9503 100644\n  macro_rules! atomic_int_ptr_sized {\n      ( $($target_pointer_width:literal $align:literal)* ) => { $(\n diff --git a/library/core/tests/atomic.rs b/library/core/tests/atomic.rs\n-index 2d1e449..cb6da5d 100644\n+index b735957..ea728b6 100644\n --- a/library/core/tests/atomic.rs\n +++ b/library/core/tests/atomic.rs\n-@@ -145,10 +145,6 @@ fn atomic_alignment() {\n+@@ -185,10 +185,6 @@ fn atomic_alignment() {\n      assert_eq!(align_of::<AtomicU64>(), size_of::<AtomicU64>());\n      #[cfg(target_has_atomic = \"64\")]\n      assert_eq!(align_of::<AtomicI64>(), size_of::<AtomicI64>());\n@@ -74,30 +98,6 @@ index 2d1e449..cb6da5d 100644\n      #[cfg(target_has_atomic = \"ptr\")]\n      assert_eq!(align_of::<AtomicUsize>(), size_of::<AtomicUsize>());\n      #[cfg(target_has_atomic = \"ptr\")]\n-diff --git a/library/std/src/panic.rs b/library/std/src/panic.rs\n-index 89a822a..779fd88 100644\n---- a/library/std/src/panic.rs\n-+++ b/library/std/src/panic.rs\n-@@ -279,9 +279,6 @@ impl RefUnwindSafe for atomic::AtomicI32 {}\n- #[cfg(target_has_atomic_load_store = \"64\")]\n- #[stable(feature = \"integer_atomics_stable\", since = \"1.34.0\")]\n- impl RefUnwindSafe for atomic::AtomicI64 {}\n--#[cfg(target_has_atomic_load_store = \"128\")]\n--#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n--impl RefUnwindSafe for atomic::AtomicI128 {}\n- \n- #[cfg(target_has_atomic_load_store = \"ptr\")]\n- #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n-@@ -298,9 +295,6 @@ impl RefUnwindSafe for atomic::AtomicU32 {}\n- #[cfg(target_has_atomic_load_store = \"64\")]\n- #[stable(feature = \"integer_atomics_stable\", since = \"1.34.0\")]\n- impl RefUnwindSafe for atomic::AtomicU64 {}\n--#[cfg(target_has_atomic_load_store = \"128\")]\n--#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n--impl RefUnwindSafe for atomic::AtomicU128 {}\n- \n- #[cfg(target_has_atomic_load_store = \"8\")]\n- #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n -- \n 2.26.2.7.g19db9cfb68\n "}, {"sha": "f074ebe7a42e0dabf88c234aadb2ebcf9896ef64", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05677b6bd6c938ed760835d9b1f6514992654ae3/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/05677b6bd6c938ed760835d9b1f6514992654ae3/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=05677b6bd6c938ed760835d9b1f6514992654ae3", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-07-27\"\n+channel = \"nightly-2021-08-05\"\n components = [\"rust-src\", \"rustc-dev\", \"llvm-tools-preview\"]"}, {"sha": "d9c4647cba3a98938f6e861f494e01b2ad605f6a", "filename": "src/unsize.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05677b6bd6c938ed760835d9b1f6514992654ae3/src%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05677b6bd6c938ed760835d9b1f6514992654ae3/src%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funsize.rs?ref=05677b6bd6c938ed760835d9b1f6514992654ae3", "patch": "@@ -77,12 +77,10 @@ fn unsize_ptr<'tcx>(\n         (&ty::Ref(_, a, _), &ty::Ref(_, b, _))\n         | (&ty::Ref(_, a, _), &ty::RawPtr(ty::TypeAndMut { ty: b, .. }))\n         | (&ty::RawPtr(ty::TypeAndMut { ty: a, .. }), &ty::RawPtr(ty::TypeAndMut { ty: b, .. })) => {\n-            assert!(!fx.layout_of(a).is_unsized());\n             (src, unsized_info(fx, a, b, old_info))\n         }\n         (&ty::Adt(def_a, _), &ty::Adt(def_b, _)) if def_a.is_box() && def_b.is_box() => {\n             let (a, b) = (src_layout.ty.boxed_ty(), dst_layout.ty.boxed_ty());\n-            assert!(!fx.layout_of(a).is_unsized());\n             (src, unsized_info(fx, a, b, old_info))\n         }\n         (&ty::Adt(def_a, _), &ty::Adt(def_b, _)) => {"}]}