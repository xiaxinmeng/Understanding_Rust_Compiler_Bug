{"sha": "1ef98856c741ceeeec8509c0d22698a531649f3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZjk4ODU2Yzc0MWNlZWVlYzg1MDljMGQyMjY5OGE1MzE2NDlmM2Y=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-30T12:06:26Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-30T12:33:16Z"}, "message": "Remove CrateNum::ReservedForIncrCompCache", "tree": {"sha": "4df9cd5527001654cabf97fd8086b244f0871d61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4df9cd5527001654cabf97fd8086b244f0871d61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ef98856c741ceeeec8509c0d22698a531649f3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ef98856c741ceeeec8509c0d22698a531649f3f", "html_url": "https://github.com/rust-lang/rust/commit/1ef98856c741ceeeec8509c0d22698a531649f3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ef98856c741ceeeec8509c0d22698a531649f3f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d93b6a4598946a6a97e8f1b073b1cfc08d332a86", "url": "https://api.github.com/repos/rust-lang/rust/commits/d93b6a4598946a6a97e8f1b073b1cfc08d332a86", "html_url": "https://github.com/rust-lang/rust/commit/d93b6a4598946a6a97e8f1b073b1cfc08d332a86"}], "stats": {"total": 73, "additions": 7, "deletions": 66}, "files": [{"sha": "588928146360d2dcbbb8de7c3e366e73a8902815", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ef98856c741ceeeec8509c0d22698a531649f3f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef98856c741ceeeec8509c0d22698a531649f3f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=1ef98856c741ceeeec8509c0d22698a531649f3f", "patch": "@@ -300,7 +300,7 @@ impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {\n     {\n         let tcx = self.tcx();\n \n-        let key = ty::CReaderCacheKey { cnum: self.cdata().cnum, pos: shorthand };\n+        let key = ty::CReaderCacheKey { cnum: Some(self.cdata().cnum), pos: shorthand };\n \n         if let Some(&ty) = tcx.ty_rcache.borrow().get(&key) {\n             return Ok(ty);"}, {"sha": "fa4030e26f9bb2f2ee097e82bef071c91000d473", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ef98856c741ceeeec8509c0d22698a531649f3f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef98856c741ceeeec8509c0d22698a531649f3f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=1ef98856c741ceeeec8509c0d22698a531649f3f", "patch": "@@ -269,7 +269,7 @@ pub struct CrateVariancesMap<'tcx> {\n // the types of AST nodes.\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n pub struct CReaderCacheKey {\n-    pub cnum: CrateNum,\n+    pub cnum: Option<CrateNum>,\n     pub pos: usize,\n }\n "}, {"sha": "fe2eaf632125cbec94dfb92e9268584803074d7a", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ef98856c741ceeeec8509c0d22698a531649f3f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef98856c741ceeeec8509c0d22698a531649f3f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=1ef98856c741ceeeec8509c0d22698a531649f3f", "patch": "@@ -758,8 +758,7 @@ impl<'a, 'tcx> TyDecoder<'tcx> for CacheDecoder<'a, 'tcx> {\n     {\n         let tcx = self.tcx();\n \n-        let cache_key =\n-            ty::CReaderCacheKey { cnum: CrateNum::ReservedForIncrCompCache, pos: shorthand };\n+        let cache_key = ty::CReaderCacheKey { cnum: None, pos: shorthand };\n \n         if let Some(&ty) = tcx.ty_rcache.borrow().get(&cache_key) {\n             return Ok(ty);"}, {"sha": "f6672335cb1385d6e80b58767dd6a7755524c66b", "filename": "compiler/rustc_mir/src/transform/coverage/debug.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ef98856c741ceeeec8509c0d22698a531649f3f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef98856c741ceeeec8509c0d22698a531649f3f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs?ref=1ef98856c741ceeeec8509c0d22698a531649f3f", "patch": "@@ -116,7 +116,6 @@ use crate::util::pretty;\n use crate::util::spanview::{self, SpanViewable};\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_index::vec::Idx;\n use rustc_middle::mir::coverage::*;\n use rustc_middle::mir::{self, BasicBlock, TerminatorKind};\n use rustc_middle::ty::TyCtxt;"}, {"sha": "770b52a4d4b0fbb3ffc26e9bdf3030b23e2d7e4c", "filename": "compiler/rustc_mir/src/util/generic_graph.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ef98856c741ceeeec8509c0d22698a531649f3f/compiler%2Frustc_mir%2Fsrc%2Futil%2Fgeneric_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef98856c741ceeeec8509c0d22698a531649f3f/compiler%2Frustc_mir%2Fsrc%2Futil%2Fgeneric_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fgeneric_graph.rs?ref=1ef98856c741ceeeec8509c0d22698a531649f3f", "patch": "@@ -1,6 +1,5 @@\n use gsgdt::{Edge, Graph, Node, NodeStyle};\n use rustc_hir::def_id::DefId;\n-use rustc_index::vec::Idx;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n "}, {"sha": "e54a54030c6f73a044dace68c5793006e360b197", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 4, "deletions": 60, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1ef98856c741ceeeec8509c0d22698a531649f3f/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef98856c741ceeeec8509c0d22698a531649f3f/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=1ef98856c741ceeeec8509c0d22698a531649f3f", "patch": "@@ -10,76 +10,29 @@ use std::borrow::Borrow;\n use std::fmt;\n \n rustc_index::newtype_index! {\n-    pub struct CrateId {\n+    pub struct CrateNum {\n         ENCODABLE = custom\n+        DEBUG_FORMAT = \"crate{}\"\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub enum CrateNum {\n-    /// A special `CrateNum` that we use for the `tcx.rcache` when decoding from\n-    /// the incr. comp. cache.\n-    ReservedForIncrCompCache,\n-    Index(CrateId),\n-}\n-\n /// Item definitions in the currently-compiled crate would have the `CrateNum`\n /// `LOCAL_CRATE` in their `DefId`.\n-pub const LOCAL_CRATE: CrateNum = CrateNum::Index(CrateId::from_u32(0));\n-\n-impl Idx for CrateNum {\n-    #[inline]\n-    fn new(value: usize) -> Self {\n-        CrateNum::Index(Idx::new(value))\n-    }\n-\n-    #[inline]\n-    fn index(self) -> usize {\n-        match self {\n-            CrateNum::Index(idx) => Idx::index(idx),\n-            _ => panic!(\"Tried to get crate index of {:?}\", self),\n-        }\n-    }\n-}\n+pub const LOCAL_CRATE: CrateNum = CrateNum::from_u32(0);\n \n impl CrateNum {\n     pub fn new(x: usize) -> CrateNum {\n         CrateNum::from_usize(x)\n     }\n \n-    pub fn from_usize(x: usize) -> CrateNum {\n-        CrateNum::Index(CrateId::from_usize(x))\n-    }\n-\n-    pub fn from_u32(x: u32) -> CrateNum {\n-        CrateNum::Index(CrateId::from_u32(x))\n-    }\n-\n-    pub fn as_usize(self) -> usize {\n-        match self {\n-            CrateNum::Index(id) => id.as_usize(),\n-            _ => panic!(\"tried to get index of non-standard crate {:?}\", self),\n-        }\n-    }\n-\n-    pub fn as_u32(self) -> u32 {\n-        match self {\n-            CrateNum::Index(id) => id.as_u32(),\n-            _ => panic!(\"tried to get index of non-standard crate {:?}\", self),\n-        }\n-    }\n-\n     pub fn as_def_id(&self) -> DefId {\n         DefId { krate: *self, index: CRATE_DEF_INDEX }\n     }\n }\n \n impl fmt::Display for CrateNum {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self {\n-            CrateNum::Index(id) => fmt::Display::fmt(&id.private, f),\n-            CrateNum::ReservedForIncrCompCache => write!(f, \"crate for decoding incr comp cache\"),\n-        }\n+        fmt::Display::fmt(&self.private, f)\n     }\n }\n \n@@ -97,15 +50,6 @@ impl<D: Decoder> Decodable<D> for CrateNum {\n     }\n }\n \n-impl ::std::fmt::Debug for CrateNum {\n-    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n-        match self {\n-            CrateNum::Index(id) => write!(fmt, \"crate{}\", id.private),\n-            CrateNum::ReservedForIncrCompCache => write!(fmt, \"crate for decoding incr comp cache\"),\n-        }\n-    }\n-}\n-\n /// A `DefPathHash` is a fixed-size representation of a `DefPath` that is\n /// stable across crate and compilation session boundaries. It consists of two\n /// separate 64-bit hashes. The first uniquely identifies the crate this"}]}