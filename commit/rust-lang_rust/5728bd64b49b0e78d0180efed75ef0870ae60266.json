{"sha": "5728bd64b49b0e78d0180efed75ef0870ae60266", "node_id": "C_kwDOAAsO6NoAKDU3MjhiZDY0YjQ5YjBlNzhkMDE4MGVmZWQ3NWVmMDg3MGFlNjAyNjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-13T10:38:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-13T10:38:12Z"}, "message": "Auto merge of #89587 - camelid:all-candidates, r=petrochenkov\n\nInclude rmeta candidates in \"multiple matching crates\" error\n\nOnly dylib and rlib candidates were included in the error. I think the\nreason is that at the time this error was originally implemented, rmeta\ncrate sources were represented different from dylib and rlib sources.\nI wrote up more detailed analysis in [this comment][1].\n\nThe new version of the code is also a bit easier to read and should be\nmore robust to future changes since it uses `CrateSources::paths()`.\n\nI also changed the code to sort the candidates to make the output deterministic;\nadded full stderr tests for the error; and added a long error code explanation.\n\n[1]: https://github.com/rust-lang/rust/pull/88675#issuecomment-935282436\n\ncc `@Mark-Simulacrum` `@jyn514`", "tree": {"sha": "971aa79ac6cdd03061cb6ea2130f28381b03d61f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/971aa79ac6cdd03061cb6ea2130f28381b03d61f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5728bd64b49b0e78d0180efed75ef0870ae60266", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5728bd64b49b0e78d0180efed75ef0870ae60266", "html_url": "https://github.com/rust-lang/rust/commit/5728bd64b49b0e78d0180efed75ef0870ae60266", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5728bd64b49b0e78d0180efed75ef0870ae60266/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a16f686e4a0ea15dcd3b5aa3db7b1cba27bb9453", "url": "https://api.github.com/repos/rust-lang/rust/commits/a16f686e4a0ea15dcd3b5aa3db7b1cba27bb9453", "html_url": "https://github.com/rust-lang/rust/commit/a16f686e4a0ea15dcd3b5aa3db7b1cba27bb9453"}, {"sha": "bf2d2e559725d57bcc225e1950f228478e06d52b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf2d2e559725d57bcc225e1950f228478e06d52b", "html_url": "https://github.com/rust-lang/rust/commit/bf2d2e559725d57bcc225e1950f228478e06d52b"}], "stats": {"total": 158, "additions": 139, "deletions": 19}, "files": [{"sha": "27b2bfbaf474417041b689b3f1f5cf34108a9b2c", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5728bd64b49b0e78d0180efed75ef0870ae60266/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5728bd64b49b0e78d0180efed75ef0870ae60266/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=5728bd64b49b0e78d0180efed75ef0870ae60266", "patch": "@@ -237,6 +237,7 @@ E0455: include_str!(\"./error_codes/E0455.md\"),\n E0458: include_str!(\"./error_codes/E0458.md\"),\n E0459: include_str!(\"./error_codes/E0459.md\"),\n E0463: include_str!(\"./error_codes/E0463.md\"),\n+E0464: include_str!(\"./error_codes/E0464.md\"),\n E0466: include_str!(\"./error_codes/E0466.md\"),\n E0468: include_str!(\"./error_codes/E0468.md\"),\n E0469: include_str!(\"./error_codes/E0469.md\"),\n@@ -587,7 +588,6 @@ E0785: include_str!(\"./error_codes/E0785.md\"),\n     E0460, // found possibly newer version of crate `..`\n     E0461, // couldn't find crate `..` with expected target triple ..\n     E0462, // found staticlib `..` instead of rlib or dylib\n-    E0464, // multiple matching crates for `..`\n     E0465, // multiple .. candidates for `..` found\n //  E0467, removed\n //  E0470, removed"}, {"sha": "9108d856c9d7724f557b243130917c9bcca19cc5", "filename": "compiler/rustc_error_codes/src/error_codes/E0464.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5728bd64b49b0e78d0180efed75ef0870ae60266/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0464.md", "raw_url": "https://github.com/rust-lang/rust/raw/5728bd64b49b0e78d0180efed75ef0870ae60266/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0464.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0464.md?ref=5728bd64b49b0e78d0180efed75ef0870ae60266", "patch": "@@ -0,0 +1,6 @@\n+The compiler found multiple library files with the requested crate name.\n+\n+This error can occur in several different cases -- for example, when using\n+`extern crate` or passing `--extern` options without crate paths. It can also be\n+caused by caching issues with the build directory, in which case `cargo clean`\n+may help."}, {"sha": "c54ea61060271979b26867832579f6288c80a284", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5728bd64b49b0e78d0180efed75ef0870ae60266/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5728bd64b49b0e78d0180efed75ef0870ae60266/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=5728bd64b49b0e78d0180efed75ef0870ae60266", "patch": "@@ -232,6 +232,7 @@ use rustc_span::Span;\n use rustc_target::spec::{Target, TargetTriple};\n \n use snap::read::FrameDecoder;\n+use std::fmt::Write as _;\n use std::io::{Read, Result as IoResult, Write};\n use std::path::{Path, PathBuf};\n use std::{cmp, fmt, fs};\n@@ -910,23 +911,30 @@ impl CrateError {\n                     \"multiple matching crates for `{}`\",\n                     crate_name\n                 );\n+                let mut libraries: Vec<_> = libraries.into_values().collect();\n+                // Make ordering of candidates deterministic.\n+                // This has to `clone()` to work around lifetime restrictions with `sort_by_key()`.\n+                // `sort_by()` could be used instead, but this is in the error path,\n+                // so the performance shouldn't matter.\n+                libraries.sort_by_cached_key(|lib| lib.source.paths().next().unwrap().clone());\n                 let candidates = libraries\n                     .iter()\n-                    .filter_map(|(_, lib)| {\n+                    .map(|lib| {\n                         let crate_name = &lib.metadata.get_root().name().as_str();\n-                        match (&lib.source.dylib, &lib.source.rlib) {\n-                            (Some((pd, _)), Some((pr, _))) => Some(format!(\n-                                \"\\ncrate `{}`: {}\\n{:>padding$}\",\n-                                crate_name,\n-                                pd.display(),\n-                                pr.display(),\n-                                padding = 8 + crate_name.len()\n-                            )),\n-                            (Some((p, _)), None) | (None, Some((p, _))) => {\n-                                Some(format!(\"\\ncrate `{}`: {}\", crate_name, p.display()))\n-                            }\n-                            (None, None) => None,\n+                        let mut paths = lib.source.paths();\n+\n+                        // This `unwrap()` should be okay because there has to be at least one\n+                        // source file. `CrateSource`'s docs confirm that too.\n+                        let mut s = format!(\n+                            \"\\ncrate `{}`: {}\",\n+                            crate_name,\n+                            paths.next().unwrap().display()\n+                        );\n+                        let padding = 8 + crate_name.len();\n+                        for path in paths {\n+                            write!(s, \"\\n{:>padding$}\", path.display(), padding = padding).unwrap();\n                         }\n+                        s\n                     })\n                     .collect::<String>();\n                 err.note(&format!(\"candidates:{}\", candidates));"}, {"sha": "e9459ed0719fdeac98aeb2b3e47bfe68fe2d463d", "filename": "src/test/ui/crate-loading/auxiliary/crateresolve2-1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5728bd64b49b0e78d0180efed75ef0870ae60266/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve2-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5728bd64b49b0e78d0180efed75ef0870ae60266/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve2-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve2-1.rs?ref=5728bd64b49b0e78d0180efed75ef0870ae60266", "patch": "@@ -0,0 +1,5 @@\n+// compile-flags:-C extra-filename=-1 --emit=metadata\n+#![crate_name = \"crateresolve2\"]\n+#![crate_type = \"lib\"]\n+\n+pub fn f() -> isize { 10 }"}, {"sha": "c4541682723b8c0aef8017755480380c5c53e118", "filename": "src/test/ui/crate-loading/auxiliary/crateresolve2-2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5728bd64b49b0e78d0180efed75ef0870ae60266/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve2-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5728bd64b49b0e78d0180efed75ef0870ae60266/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve2-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve2-2.rs?ref=5728bd64b49b0e78d0180efed75ef0870ae60266", "patch": "@@ -0,0 +1,5 @@\n+// compile-flags:-C extra-filename=-2 --emit=metadata\n+#![crate_name = \"crateresolve2\"]\n+#![crate_type = \"lib\"]\n+\n+pub fn f() -> isize { 20 }"}, {"sha": "b356db4b6fc31e6bd396730b9ccc96dde048f6b2", "filename": "src/test/ui/crate-loading/auxiliary/crateresolve2-3.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5728bd64b49b0e78d0180efed75ef0870ae60266/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve2-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5728bd64b49b0e78d0180efed75ef0870ae60266/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve2-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fauxiliary%2Fcrateresolve2-3.rs?ref=5728bd64b49b0e78d0180efed75ef0870ae60266", "patch": "@@ -0,0 +1,5 @@\n+// compile-flags:-C extra-filename=-3 --emit=metadata\n+#![crate_name = \"crateresolve2\"]\n+#![crate_type = \"lib\"]\n+\n+pub fn f() -> isize { 30 }"}, {"sha": "f4795e9536af70cd32171c878ae7a71dcf5b5762", "filename": "src/test/ui/crate-loading/crateresolve1.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5728bd64b49b0e78d0180efed75ef0870ae60266/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5728bd64b49b0e78d0180efed75ef0870ae60266/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve1.rs?ref=5728bd64b49b0e78d0180efed75ef0870ae60266", "patch": "@@ -1,10 +1,15 @@\n-// dont-check-compiler-stderr\n // aux-build:crateresolve1-1.rs\n // aux-build:crateresolve1-2.rs\n // aux-build:crateresolve1-3.rs\n-// error-pattern:multiple matching crates for `crateresolve1`\n+\n+// normalize-stderr-test: \"\\.nll/\" -> \"/\"\n+// normalize-stderr-test: \"\\\\\\?\\\\\" -> \"\"\n+// normalize-stderr-test: \"(lib)?crateresolve1-([123])\\.[a-z]+\" -> \"libcrateresolve1-$2.somelib\"\n+\n+// NOTE: This test is duplicated at `src/test/ui/error-codes/E0464.rs`.\n \n extern crate crateresolve1;\n+//~^ ERROR multiple matching crates for `crateresolve1`\n \n fn main() {\n }"}, {"sha": "0d7538eafd8127ddef34779fd6c6cb6b8a8b278c", "filename": "src/test/ui/crate-loading/crateresolve1.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5728bd64b49b0e78d0180efed75ef0870ae60266/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5728bd64b49b0e78d0180efed75ef0870ae60266/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve1.stderr?ref=5728bd64b49b0e78d0180efed75ef0870ae60266", "patch": "@@ -0,0 +1,14 @@\n+error[E0464]: multiple matching crates for `crateresolve1`\n+  --> $DIR/crateresolve1.rs:11:1\n+   |\n+LL | extern crate crateresolve1;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: candidates:\n+           crate `crateresolve1`: $TEST_BUILD_DIR/crate-loading/crateresolve1/auxiliary/libcrateresolve1-1.somelib\n+           crate `crateresolve1`: $TEST_BUILD_DIR/crate-loading/crateresolve1/auxiliary/libcrateresolve1-2.somelib\n+           crate `crateresolve1`: $TEST_BUILD_DIR/crate-loading/crateresolve1/auxiliary/libcrateresolve1-3.somelib\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0464`."}, {"sha": "5a4fee7ed6afad19db5227d8980bee1192145331", "filename": "src/test/ui/crate-loading/crateresolve2.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5728bd64b49b0e78d0180efed75ef0870ae60266/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5728bd64b49b0e78d0180efed75ef0870ae60266/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve2.rs?ref=5728bd64b49b0e78d0180efed75ef0870ae60266", "patch": "@@ -0,0 +1,14 @@\n+// check-fail\n+\n+// aux-build:crateresolve2-1.rs\n+// aux-build:crateresolve2-2.rs\n+// aux-build:crateresolve2-3.rs\n+\n+// normalize-stderr-test: \"\\.nll/\" -> \"/\"\n+// normalize-stderr-test: \"\\\\\\?\\\\\" -> \"\"\n+\n+extern crate crateresolve2;\n+//~^ ERROR multiple matching crates for `crateresolve2`\n+\n+fn main() {\n+}"}, {"sha": "afd3702de7f73895b77052591bebf930fdbe16a7", "filename": "src/test/ui/crate-loading/crateresolve2.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5728bd64b49b0e78d0180efed75ef0870ae60266/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5728bd64b49b0e78d0180efed75ef0870ae60266/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve2.stderr?ref=5728bd64b49b0e78d0180efed75ef0870ae60266", "patch": "@@ -0,0 +1,14 @@\n+error[E0464]: multiple matching crates for `crateresolve2`\n+  --> $DIR/crateresolve2.rs:10:1\n+   |\n+LL | extern crate crateresolve2;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: candidates:\n+           crate `crateresolve2`: $TEST_BUILD_DIR/crate-loading/crateresolve2/auxiliary/libcrateresolve2-1.rmeta\n+           crate `crateresolve2`: $TEST_BUILD_DIR/crate-loading/crateresolve2/auxiliary/libcrateresolve2-2.rmeta\n+           crate `crateresolve2`: $TEST_BUILD_DIR/crate-loading/crateresolve2/auxiliary/libcrateresolve2-3.rmeta\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0464`."}, {"sha": "969115a7d9774162b0dcb22f8c7a66afb8c38e7d", "filename": "src/test/ui/error-codes/E0464.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5728bd64b49b0e78d0180efed75ef0870ae60266/src%2Ftest%2Fui%2Ferror-codes%2FE0464.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5728bd64b49b0e78d0180efed75ef0870ae60266/src%2Ftest%2Fui%2Ferror-codes%2FE0464.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0464.rs?ref=5728bd64b49b0e78d0180efed75ef0870ae60266", "patch": "@@ -0,0 +1,15 @@\n+// aux-build:crateresolve1-1.rs\n+// aux-build:crateresolve1-2.rs\n+// aux-build:crateresolve1-3.rs\n+\n+// normalize-stderr-test: \"\\.nll/\" -> \"/\"\n+// normalize-stderr-test: \"\\\\\\?\\\\\" -> \"\"\n+// normalize-stderr-test: \"(lib)?crateresolve1-([123])\\.[a-z]+\" -> \"libcrateresolve1-$2.somelib\"\n+\n+// NOTE: This test is duplicated from `src/test/ui/crate-loading/crateresolve1.rs`.\n+\n+extern crate crateresolve1;\n+//~^ ERROR multiple matching crates for `crateresolve1`\n+\n+fn main() {\n+}"}, {"sha": "3d950ddd28ee00428abbff31ff17f6119ca7f273", "filename": "src/test/ui/error-codes/E0464.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5728bd64b49b0e78d0180efed75ef0870ae60266/src%2Ftest%2Fui%2Ferror-codes%2FE0464.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5728bd64b49b0e78d0180efed75ef0870ae60266/src%2Ftest%2Fui%2Ferror-codes%2FE0464.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0464.stderr?ref=5728bd64b49b0e78d0180efed75ef0870ae60266", "patch": "@@ -0,0 +1,14 @@\n+error[E0464]: multiple matching crates for `crateresolve1`\n+  --> $DIR/E0464.rs:11:1\n+   |\n+LL | extern crate crateresolve1;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: candidates:\n+           crate `crateresolve1`: $TEST_BUILD_DIR/error-codes/E0464/auxiliary/libcrateresolve1-1.somelib\n+           crate `crateresolve1`: $TEST_BUILD_DIR/error-codes/E0464/auxiliary/libcrateresolve1-2.somelib\n+           crate `crateresolve1`: $TEST_BUILD_DIR/error-codes/E0464/auxiliary/libcrateresolve1-3.somelib\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0464`."}, {"sha": "a00a19e46d519fbad8d1c876250fbedf73503b7b", "filename": "src/test/ui/error-codes/auxiliary/crateresolve1-1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5728bd64b49b0e78d0180efed75ef0870ae60266/src%2Ftest%2Fui%2Ferror-codes%2Fauxiliary%2Fcrateresolve1-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5728bd64b49b0e78d0180efed75ef0870ae60266/src%2Ftest%2Fui%2Ferror-codes%2Fauxiliary%2Fcrateresolve1-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fauxiliary%2Fcrateresolve1-1.rs?ref=5728bd64b49b0e78d0180efed75ef0870ae60266", "patch": "@@ -0,0 +1,5 @@\n+// compile-flags:-C extra-filename=-1\n+#![crate_name = \"crateresolve1\"]\n+#![crate_type = \"lib\"]\n+\n+pub fn f() -> isize { 10 }"}, {"sha": "71cc0a12ea37946301e39ceb594836edc93cec69", "filename": "src/test/ui/error-codes/auxiliary/crateresolve1-2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5728bd64b49b0e78d0180efed75ef0870ae60266/src%2Ftest%2Fui%2Ferror-codes%2Fauxiliary%2Fcrateresolve1-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5728bd64b49b0e78d0180efed75ef0870ae60266/src%2Ftest%2Fui%2Ferror-codes%2Fauxiliary%2Fcrateresolve1-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fauxiliary%2Fcrateresolve1-2.rs?ref=5728bd64b49b0e78d0180efed75ef0870ae60266", "patch": "@@ -0,0 +1,5 @@\n+// compile-flags:-C extra-filename=-2\n+#![crate_name = \"crateresolve1\"]\n+#![crate_type = \"lib\"]\n+\n+pub fn f() -> isize { 20 }"}, {"sha": "921687d4c3bffd199e3c73b0264a1c811e23eca7", "filename": "src/test/ui/error-codes/auxiliary/crateresolve1-3.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5728bd64b49b0e78d0180efed75ef0870ae60266/src%2Ftest%2Fui%2Ferror-codes%2Fauxiliary%2Fcrateresolve1-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5728bd64b49b0e78d0180efed75ef0870ae60266/src%2Ftest%2Fui%2Ferror-codes%2Fauxiliary%2Fcrateresolve1-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fauxiliary%2Fcrateresolve1-3.rs?ref=5728bd64b49b0e78d0180efed75ef0870ae60266", "patch": "@@ -0,0 +1,5 @@\n+// compile-flags:-C extra-filename=-3\n+#![crate_name = \"crateresolve1\"]\n+#![crate_type = \"lib\"]\n+\n+pub fn f() -> isize { 30 }"}, {"sha": "6d3e470bf43caac50206f10e5812097aaedb8d9d", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5728bd64b49b0e78d0180efed75ef0870ae60266/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5728bd64b49b0e78d0180efed75ef0870ae60266/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=5728bd64b49b0e78d0180efed75ef0870ae60266", "patch": "@@ -10,12 +10,12 @@ use regex::Regex;\n \n // A few of those error codes can't be tested but all the others can and *should* be tested!\n const EXEMPTED_FROM_TEST: &[&str] = &[\n-    \"E0227\", \"E0279\", \"E0280\", \"E0313\", \"E0377\", \"E0461\", \"E0462\", \"E0464\", \"E0465\", \"E0476\",\n-    \"E0514\", \"E0519\", \"E0523\", \"E0554\", \"E0640\", \"E0717\", \"E0729\",\n+    \"E0227\", \"E0279\", \"E0280\", \"E0313\", \"E0377\", \"E0461\", \"E0462\", \"E0465\", \"E0476\", \"E0514\",\n+    \"E0519\", \"E0523\", \"E0554\", \"E0640\", \"E0717\", \"E0729\",\n ];\n \n // Some error codes don't have any tests apparently...\n-const IGNORE_EXPLANATION_CHECK: &[&str] = &[\"E0570\", \"E0601\", \"E0602\", \"E0729\"];\n+const IGNORE_EXPLANATION_CHECK: &[&str] = &[\"E0464\", \"E0570\", \"E0601\", \"E0602\", \"E0729\"];\n \n // If the file path contains any of these, we don't want to try to extract error codes from it.\n //"}]}