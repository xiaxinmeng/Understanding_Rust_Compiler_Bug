{"sha": "11f4baeafb83459befd0196b2b82cda7ed5ea2f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZjRiYWVhZmI4MzQ1OWJlZmQwMTk2YjJiODJjZGE3ZWQ1ZWEyZjE=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-03T19:55:19Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-06T01:13:25Z"}, "message": "Fix tests", "tree": {"sha": "3a32c669d76eae74604ac3d931ba97804f3ef9a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a32c669d76eae74604ac3d931ba97804f3ef9a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11f4baeafb83459befd0196b2b82cda7ed5ea2f1", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11f4baeafb83459befd0196b2b82cda7ed5ea2f1", "html_url": "https://github.com/rust-lang/rust/commit/11f4baeafb83459befd0196b2b82cda7ed5ea2f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11f4baeafb83459befd0196b2b82cda7ed5ea2f1/comments", "author": null, "committer": null, "parents": [{"sha": "62168222493c8302e9f6b4291f0ba9e124e196cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/62168222493c8302e9f6b4291f0ba9e124e196cb", "html_url": "https://github.com/rust-lang/rust/commit/62168222493c8302e9f6b4291f0ba9e124e196cb"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "e4af5795e1cc99f3e473de423f6e9dfbb814ddcd", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11f4baeafb83459befd0196b2b82cda7ed5ea2f1/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f4baeafb83459befd0196b2b82cda7ed5ea2f1/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=11f4baeafb83459befd0196b2b82cda7ed5ea2f1", "patch": "@@ -1598,15 +1598,15 @@ mod tests {\n     #[test]\n     fn test_total_ord() {\n         let c: &[int] = &[1, 2, 3];\n-        [1, 2, 3, 4][].cmp(& c) == Greater;\n+        [1, 2, 3, 4][].cmp(c) == Greater;\n         let c: &[int] = &[1, 2, 3, 4];\n-        [1, 2, 3][].cmp(& c) == Less;\n+        [1, 2, 3][].cmp(c) == Less;\n         let c: &[int] = &[1, 2, 3, 6];\n-        [1, 2, 3, 4][].cmp(& c) == Equal;\n+        [1, 2, 3, 4][].cmp(c) == Equal;\n         let c: &[int] = &[1, 2, 3, 4, 5, 6];\n-        [1, 2, 3, 4, 5, 5, 5, 5][].cmp(& c) == Less;\n+        [1, 2, 3, 4, 5, 5, 5, 5][].cmp(c) == Less;\n         let c: &[int] = &[1, 2, 3, 4];\n-        [2, 2][].cmp(& c) == Greater;\n+        [2, 2][].cmp(c) == Greater;\n     }\n \n     #[test]"}, {"sha": "cdca0d10eedde3ebeff8f02ddce4891d05555729", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11f4baeafb83459befd0196b2b82cda7ed5ea2f1/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f4baeafb83459befd0196b2b82cda7ed5ea2f1/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=11f4baeafb83459befd0196b2b82cda7ed5ea2f1", "patch": "@@ -1530,11 +1530,11 @@ mod tests {\n \n     #[test]\n     fn test_total_ord() {\n-        \"1234\".cmp(&(\"123\")) == Greater;\n-        \"123\".cmp(&(\"1234\")) == Less;\n-        \"1234\".cmp(&(\"1234\")) == Equal;\n-        \"12345555\".cmp(&(\"123456\")) == Less;\n-        \"22\".cmp(&(\"1234\")) == Greater;\n+        \"1234\".cmp(\"123\") == Greater;\n+        \"123\".cmp(\"1234\") == Less;\n+        \"1234\".cmp(\"1234\") == Equal;\n+        \"12345555\".cmp(\"123456\") == Less;\n+        \"22\".cmp(\"1234\") == Greater;\n     }\n \n     #[test]"}, {"sha": "8e24eabfccfe65d709174e7dd83fb78414a2f5e6", "filename": "src/libcollections/tree/map.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11f4baeafb83459befd0196b2b82cda7ed5ea2f1/src%2Flibcollections%2Ftree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f4baeafb83459befd0196b2b82cda7ed5ea2f1/src%2Flibcollections%2Ftree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftree%2Fmap.rs?ref=11f4baeafb83459befd0196b2b82cda7ed5ea2f1", "patch": "@@ -579,7 +579,7 @@ impl<K, V> TreeMap<K, V> {\n     /// let headers = get_headers();\n     /// let ua_key = \"User-Agent\";\n     /// let ua = headers.find_with(|k| {\n-    ///    ua_key.cmp(&k.as_slice())\n+    ///    ua_key.cmp(k.as_slice())\n     /// });\n     ///\n     /// assert_eq!((*ua.unwrap()).as_slice(), \"Curl-Rust/0.1\");\n@@ -603,7 +603,7 @@ impl<K, V> TreeMap<K, V> {\n     /// t.insert(\"User-Agent\", \"Curl-Rust/0.1\");\n     ///\n     /// let new_ua = \"Safari/156.0\";\n-    /// match t.find_with_mut(|k| \"User-Agent\".cmp(k)) {\n+    /// match t.find_with_mut(|&k| \"User-Agent\".cmp(k)) {\n     ///    Some(x) => *x = new_ua,\n     ///    None => panic!(),\n     /// }\n@@ -1302,7 +1302,7 @@ mod test_treemap {\n     #[test]\n     fn find_with_empty() {\n         let m: TreeMap<&'static str,int> = TreeMap::new();\n-        assert!(m.find_with(|k| \"test\".cmp(k)) == None);\n+        assert!(m.find_with(|&k| \"test\".cmp(k)) == None);\n     }\n \n     #[test]\n@@ -1311,7 +1311,7 @@ mod test_treemap {\n         assert!(m.insert(\"test1\", 2i));\n         assert!(m.insert(\"test2\", 3i));\n         assert!(m.insert(\"test3\", 3i));\n-        assert_eq!(m.find_with(|k| \"test4\".cmp(k)), None);\n+        assert_eq!(m.find_with(|&k| \"test4\".cmp(k)), None);\n     }\n \n     #[test]\n@@ -1320,7 +1320,7 @@ mod test_treemap {\n         assert!(m.insert(\"test1\", 2i));\n         assert!(m.insert(\"test2\", 3i));\n         assert!(m.insert(\"test3\", 4i));\n-        assert_eq!(m.find_with(|k| \"test2\".cmp(k)), Some(&3i));\n+        assert_eq!(m.find_with(|&k| \"test2\".cmp(k)), Some(&3i));\n     }\n \n     #[test]\n@@ -1343,10 +1343,10 @@ mod test_treemap {\n         assert!(m.insert(\"t2\", 8));\n         assert!(m.insert(\"t5\", 14));\n         let new = 100;\n-        match m.find_with_mut(|k| \"t5\".cmp(k)) {\n+        match m.find_with_mut(|&k| \"t5\".cmp(k)) {\n           None => panic!(), Some(x) => *x = new\n         }\n-        assert_eq!(m.find_with(|k| \"t5\".cmp(k)), Some(&new));\n+        assert_eq!(m.find_with(|&k| \"t5\".cmp(k)), Some(&new));\n     }\n \n     #[test]"}, {"sha": "18be03f97d934ef1db232563788b18402c47b877", "filename": "src/test/compile-fail/deriving-no-inner-impl-error-message.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11f4baeafb83459befd0196b2b82cda7ed5ea2f1/src%2Ftest%2Fcompile-fail%2Fderiving-no-inner-impl-error-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f4baeafb83459befd0196b2b82cda7ed5ea2f1/src%2Ftest%2Fcompile-fail%2Fderiving-no-inner-impl-error-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-no-inner-impl-error-message.rs?ref=11f4baeafb83459befd0196b2b82cda7ed5ea2f1", "patch": "@@ -12,8 +12,8 @@ struct NoCloneOrEq;\n \n #[deriving(PartialEq)]\n struct E {\n-    x: NoCloneOrEq //~ ERROR does not implement any method in scope named `eq`\n-         //~^ ERROR does not implement any method in scope named `ne`\n+    x: NoCloneOrEq //~ ERROR binary operation `==` cannot be applied to type `NoCloneOrEq`\n+         //~^ ERROR binary operation `!=` cannot be applied to type `NoCloneOrEq`\n }\n #[deriving(Clone)]\n struct C {"}]}