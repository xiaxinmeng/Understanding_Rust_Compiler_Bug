{"sha": "603d820b85ef6fa62721c931ec9a6010fbda9115", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwM2Q4MjBiODVlZjZmYTYyNzIxYzkzMWVjOWE2MDEwZmJkYTkxMTU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-09T22:09:02Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-09T22:09:02Z"}, "message": "rustc: Have demand_pat() extract type parameters from tags. Add a test case.", "tree": {"sha": "e27754729b1f99cfe894094b3726a21fd30cf399", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e27754729b1f99cfe894094b3726a21fd30cf399"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/603d820b85ef6fa62721c931ec9a6010fbda9115", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/603d820b85ef6fa62721c931ec9a6010fbda9115", "html_url": "https://github.com/rust-lang/rust/commit/603d820b85ef6fa62721c931ec9a6010fbda9115", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/603d820b85ef6fa62721c931ec9a6010fbda9115/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2986ed43e9326d87e97072979a44ebe22e829d66", "url": "https://api.github.com/repos/rust-lang/rust/commits/2986ed43e9326d87e97072979a44ebe22e829d66", "html_url": "https://github.com/rust-lang/rust/commit/2986ed43e9326d87e97072979a44ebe22e829d66"}], "stats": {"total": 38, "additions": 30, "deletions": 8}, "files": [{"sha": "a0adf55a784b1ddbc4a31cbccd162aac9fb21522", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/603d820b85ef6fa62721c931ec9a6010fbda9115/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/603d820b85ef6fa62721c931ec9a6010fbda9115/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=603d820b85ef6fa62721c931ec9a6010fbda9115", "patch": "@@ -1071,15 +1071,25 @@ fn demand_pat(&@fn_ctxt fcx, @ty.t expected, @ast.pat pat) -> @ast.pat {\n         case (ast.pat_tag(?id, ?subpats, ?vdef_opt, ?ann)) {\n             auto t = demand(fcx, pat.span, expected, ann_to_type(ann));\n \n+            // Figure out the type parameters of the tag.\n+            auto tag_id = option.get[ast.variant_def](vdef_opt)._0;\n+            auto ty_params = fcx.ccx.item_ty_params.get(tag_id);\n+\n+            // Take the type parameters out of the expected type.\n+            auto ty_param_substs;\n+            alt (t.struct) {\n+                case (ty.ty_tag(_, ?tps)) { ty_param_substs = tps; }\n+                case (_) {\n+                    log \"demand_pat(): expected type for tag pat isn't \" +\n+                        \"actually a tag?!\";\n+                    fail;\n+                }\n+            }\n+\n             // The type of the tag isn't enough; we also have to get the type\n             // of the variant, which is either a tag type in the case of\n             // nullary variants or a function type in the case of n-ary\n             // variants.\n-            //\n-            // TODO: When we have type-parametric tags, this will get a little\n-            // trickier. Basically, we have to instantiate the variant type we\n-            // acquire here with the type parameters provided to us by\n-            // \"expected\".\n \n             auto vdef = option.get[ast.variant_def](vdef_opt);\n             auto variant_ty = fcx.ccx.item_types.get(vdef._1);\n@@ -1088,18 +1098,19 @@ fn demand_pat(&@fn_ctxt fcx, @ty.t expected, @ast.pat pat) -> @ast.pat {\n             alt (variant_ty.struct) {\n                 case (ty.ty_tag(_, _)) {\n                     // Nullary tag variant.\n-                    // TODO: ty param substs\n                     check (subpats_len == 0u);\n                     p_1 = ast.pat_tag(id, subpats, vdef_opt,\n                                       ast.ann_type(t, none[vec[@ty.t]]));\n                 }\n                 case (ty.ty_fn(_, ?args, ?tag_ty)) {\n                     // N-ary tag variant.\n-                    // TODO: ty param substs\n                     let vec[@ast.pat] new_subpats = vec();\n                     auto i = 0u;\n                     for (arg a in args) {\n-                        auto new_subpat = demand_pat(fcx, a.ty, subpats.(i));\n+                        auto subpat_ty = substitute_ty_params(fcx.ccx, a.ty,\n+                            ty_params, ty_param_substs, pat.span);\n+                        auto new_subpat = demand_pat(fcx, subpat_ty,\n+                                                     subpats.(i));\n                         new_subpats += vec(new_subpat);\n                         i += 1u;\n                     }"}, {"sha": "85db5c7c168affac6fc98ad329093281465ad3b4", "filename": "src/test/run-pass/simple-generic-alt.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/603d820b85ef6fa62721c931ec9a6010fbda9115/src%2Ftest%2Frun-pass%2Fsimple-generic-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/603d820b85ef6fa62721c931ec9a6010fbda9115/src%2Ftest%2Frun-pass%2Fsimple-generic-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-generic-alt.rs?ref=603d820b85ef6fa62721c931ec9a6010fbda9115", "patch": "@@ -0,0 +1,11 @@\n+tag clam[T] {\n+    a(T);\n+}\n+\n+fn main() {\n+    auto c = a(2);\n+    alt (c) {\n+        case (a[int](_)) {}\n+    }\n+}\n+"}]}