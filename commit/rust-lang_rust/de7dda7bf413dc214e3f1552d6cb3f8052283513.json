{"sha": "de7dda7bf413dc214e3f1552d6cb3f8052283513", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlN2RkYTdiZjQxM2RjMjE0ZTNmMTU1MmQ2Y2IzZjgwNTIyODM1MTM=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-04-29T07:15:07Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-05-02T17:59:22Z"}, "message": "Add illegal_floating_point_literal_pattern compat lint\n\nAdds a compatibility lint to disallow floating point literals in\npatterns like in match.\n\nSee the tracking issue #41620.", "tree": {"sha": "9c06491c00734f6c57b7a1c9c8f2d893577d354a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c06491c00734f6c57b7a1c9c8f2d893577d354a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de7dda7bf413dc214e3f1552d6cb3f8052283513", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de7dda7bf413dc214e3f1552d6cb3f8052283513", "html_url": "https://github.com/rust-lang/rust/commit/de7dda7bf413dc214e3f1552d6cb3f8052283513", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de7dda7bf413dc214e3f1552d6cb3f8052283513/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed1f26ddda15b2bcf613a257e813e8b02ee14dff", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed1f26ddda15b2bcf613a257e813e8b02ee14dff", "html_url": "https://github.com/rust-lang/rust/commit/ed1f26ddda15b2bcf613a257e813e8b02ee14dff"}], "stats": {"total": 132, "additions": 132, "deletions": 0}, "files": [{"sha": "715a769158bc3fb832b0613d52f996068cb6eda6", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/de7dda7bf413dc214e3f1552d6cb3f8052283513/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7dda7bf413dc214e3f1552d6cb3f8052283513/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=de7dda7bf413dc214e3f1552d6cb3f8052283513", "patch": "@@ -692,6 +692,82 @@ impl EarlyLintPass for DeprecatedAttr {\n     }\n }\n \n+declare_lint! {\n+    pub ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n+    Warn,\n+    \"floating-point literals cannot be used in patterns\"\n+}\n+\n+/// Checks for floating point literals in patterns.\n+#[derive(Clone)]\n+pub struct IllegalFloatLiteralPattern;\n+\n+impl LintPass for IllegalFloatLiteralPattern {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(ILLEGAL_FLOATING_POINT_LITERAL_PATTERN)\n+    }\n+}\n+\n+fn fl_lit_check_expr(cx: &EarlyContext, expr: &ast::Expr) {\n+    use self::ast::{ExprKind, LitKind};\n+    match expr.node {\n+        ExprKind::Lit(ref l) => {\n+            match l.node {\n+                LitKind::FloatUnsuffixed(..) |\n+                LitKind::Float(..) => {\n+                    cx.span_lint(ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n+                                 l.span,\n+                                 \"floating-point literals cannot be used in patterns\");\n+                    error!(\"span mc spanspam\");\n+                    },\n+                _ => (),\n+            }\n+        }\n+        // These may occur in patterns\n+        // and can maybe contain float literals\n+        ExprKind::Unary(_, ref f) => fl_lit_check_expr(cx, f),\n+        // These may occur in patterns\n+        // and can't contain float literals\n+        ExprKind::Path(..) => (),\n+        // If something unhandled is encountered, we need to expand the\n+        // search or ignore more ExprKinds.\n+        _ => span_bug!(expr.span, \"Unhandled expression {:?} in float lit pattern lint\",\n+                       expr.node),\n+    }\n+}\n+\n+impl EarlyLintPass for IllegalFloatLiteralPattern {\n+    fn check_pat(&mut self, cx: &EarlyContext, pat: &ast::Pat) {\n+        use self::ast::PatKind;\n+        pat.walk(&mut |p| {\n+            match p.node {\n+                // Wildcard patterns and paths are uninteresting for the lint\n+                PatKind::Wild |\n+                PatKind::Path(..) => (),\n+\n+                // The walk logic recurses inside these\n+                PatKind::Ident(..) |\n+                PatKind::Struct(..) |\n+                PatKind::Tuple(..) |\n+                PatKind::TupleStruct(..) |\n+                PatKind::Ref(..) |\n+                PatKind::Box(..) |\n+                PatKind::Slice(..) => (),\n+\n+                // Extract the expressions and check them\n+                PatKind::Lit(ref e) => fl_lit_check_expr(cx, e),\n+                PatKind::Range(ref st, ref en, _) => {\n+                    fl_lit_check_expr(cx, st);\n+                    fl_lit_check_expr(cx, en);\n+                },\n+\n+                PatKind::Mac(_) => bug!(\"lint must run post-expansion\"),\n+            }\n+            true\n+        });\n+    }\n+}\n+\n declare_lint! {\n     pub UNCONDITIONAL_RECURSION,\n     Warn,"}, {"sha": "53ea3a8333f2d761c8027d1d9295ac87829d7d1d", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de7dda7bf413dc214e3f1552d6cb3f8052283513/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7dda7bf413dc214e3f1552d6cb3f8052283513/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=de7dda7bf413dc214e3f1552d6cb3f8052283513", "patch": "@@ -113,6 +113,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                        UnusedParens,\n                        UnusedImportBraces,\n                        AnonymousParameters,\n+                       IllegalFloatLiteralPattern,\n                        );\n \n     add_early_builtin_with_new!(sess,\n@@ -201,6 +202,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN),\n             reference: \"issue #36890 <https://github.com/rust-lang/rust/issues/36890>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(ILLEGAL_FLOATING_POINT_LITERAL_PATTERN),\n+            reference: \"issue #41620 <https://github.com/rust-lang/rust/issues/41620>\",\n+        },\n         FutureIncompatibleInfo {\n             id: LintId::of(ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN),\n             reference: \"issue #36891 <https://github.com/rust-lang/rust/issues/36891>\","}, {"sha": "191b867e7a8b5cbfa4fee4ebeaf516e8f4af093f", "filename": "src/test/compile-fail/issue-41255.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/de7dda7bf413dc214e3f1552d6cb3f8052283513/src%2Ftest%2Fcompile-fail%2Fissue-41255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7dda7bf413dc214e3f1552d6cb3f8052283513/src%2Ftest%2Fcompile-fail%2Fissue-41255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-41255.rs?ref=de7dda7bf413dc214e3f1552d6cb3f8052283513", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Matching against float literals should result in a linter error\n+\n+#![feature(slice_patterns)]\n+#![feature(exclusive_range_pattern)]\n+#![allow(unused)]\n+#![forbid(illegal_floating_point_literal_pattern)]\n+\n+fn main() {\n+    let x = 42.0;\n+    match x {\n+        5.0 => {}, //~ ERROR floating-point literals cannot be used\n+                   //~| WARNING hard error\n+        5.0f32 => {}, //~ ERROR floating-point literals cannot be used\n+                      //~| WARNING hard error\n+        -5.0 => {}, //~ ERROR floating-point literals cannot be used\n+                    //~| WARNING hard error\n+        1.0 .. 33.0 => {}, //~ ERROR floating-point literals cannot be used\n+                           //~| WARNING hard error\n+                           //~| ERROR floating-point literals cannot be used\n+                           //~| WARNING hard error\n+        39.0 ... 70.0 => {}, //~ ERROR floating-point literals cannot be used\n+                             //~| WARNING hard error\n+                             //~| ERROR floating-point literals cannot be used\n+                             //~| WARNING hard error\n+        _ => {},\n+    };\n+    let y = 5.0;\n+    // Same for tuples\n+    match (x, 5) {\n+        (3.14, 1) => {}, //~ ERROR floating-point literals cannot be used\n+                         //~| WARNING hard error\n+        _ => {},\n+    }\n+    // Or structs\n+    struct Foo { x: f32 };\n+    match (Foo { x }) {\n+        Foo { x: 2.0 } => {}, //~ ERROR floating-point literals cannot be used\n+                              //~| WARNING hard error\n+        _ => {},\n+    }\n+}"}]}