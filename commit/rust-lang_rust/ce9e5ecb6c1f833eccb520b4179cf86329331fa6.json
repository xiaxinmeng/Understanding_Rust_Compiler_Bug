{"sha": "ce9e5ecb6c1f833eccb520b4179cf86329331fa6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlOWU1ZWNiNmMxZjgzM2VjY2I1MjBiNDE3OWNmODYzMjkzMzFmYTY=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-28T15:46:08Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-28T20:11:24Z"}, "message": "core: Inline mallocing wrapper functions\n\nAs far as I can tell, this doesn't make rust compile any\nfaster, but it does at least remove one level of indirection\non malloc, which might help speed up some operations.", "tree": {"sha": "8dac921e0ee1118f3140cd0469d29669e4abafdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dac921e0ee1118f3140cd0469d29669e4abafdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce9e5ecb6c1f833eccb520b4179cf86329331fa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce9e5ecb6c1f833eccb520b4179cf86329331fa6", "html_url": "https://github.com/rust-lang/rust/commit/ce9e5ecb6c1f833eccb520b4179cf86329331fa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce9e5ecb6c1f833eccb520b4179cf86329331fa6/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb14ea922b236b5c152c2770221b0f9181c2cc7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb14ea922b236b5c152c2770221b0f9181c2cc7f", "html_url": "https://github.com/rust-lang/rust/commit/bb14ea922b236b5c152c2770221b0f9181c2cc7f"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "ff96029bc0e31b887a2f256c27f88c802dd8d0bc", "filename": "src/libcore/unstable/lang.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ce9e5ecb6c1f833eccb520b4179cf86329331fa6/src%2Flibcore%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9e5ecb6c1f833eccb520b4179cf86329331fa6/src%2Flibcore%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Flang.rs?ref=ce9e5ecb6c1f833eccb520b4179cf86329331fa6", "patch": "@@ -64,6 +64,7 @@ pub unsafe fn fail_borrowed() {\n \n // FIXME #4942: Make these signatures agree with exchange_alloc's signatures\n #[lang=\"exchange_malloc\"]\n+#[inline(always)]\n pub unsafe fn exchange_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n     transmute(exchange_alloc::malloc(transmute(td), transmute(size)))\n }\n@@ -72,11 +73,13 @@ pub unsafe fn exchange_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n // inside a landing pad may corrupt the state of the exception handler. If a\n // problem occurs, call exit instead.\n #[lang=\"exchange_free\"]\n+#[inline(always)]\n pub unsafe fn exchange_free(ptr: *c_char) {\n     exchange_alloc::free(transmute(ptr))\n }\n \n #[lang=\"malloc\"]\n+#[inline(always)]\n pub unsafe fn local_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n     return rustrt::rust_upcall_malloc(td, size);\n }\n@@ -85,6 +88,7 @@ pub unsafe fn local_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n // inside a landing pad may corrupt the state of the exception handler. If a\n // problem occurs, call exit instead.\n #[lang=\"free\"]\n+#[inline(always)]\n pub unsafe fn local_free(ptr: *c_char) {\n     rustrt::rust_upcall_free(ptr);\n }\n@@ -117,6 +121,7 @@ pub unsafe fn check_not_borrowed(a: *u8) {\n }\n \n #[lang=\"strdup_uniq\"]\n+#[inline(always)]\n pub unsafe fn strdup_uniq(ptr: *c_uchar, len: uint) -> ~str {\n     str::raw::from_buf_len(ptr, len)\n }"}]}