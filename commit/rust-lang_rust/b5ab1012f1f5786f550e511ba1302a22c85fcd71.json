{"sha": "b5ab1012f1f5786f550e511ba1302a22c85fcd71", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1YWIxMDEyZjFmNTc4NmY1NTBlNTExYmExMzAyYTIyYzg1ZmNkNzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-24T12:34:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-24T12:34:45Z"}, "message": "auto merge of #6680 : ben0x539/rust/slashslashslash, r=graydon\n\nThere's currently a function in the lexer that rejects a line comment that is all slashes from being a doc comment. I think the intention was that you could draw boxes,\r\n\r\n    /////////////\r\n    // like so //\r\n    /////////////\r\n\r\nSince a line doc comment split up over multiple paragraphs will have a \"blank\" line that is just /// between the paragraphs, that would get mistaken for a box segment, lexed as a regular comment, and go missing from the sequence of doc comment attributes before they were reassembled by rustdoc into markdown input.\r\n\r\nI figure the best plan here is to just declare that a comment that is exactly `///` is a doc comment after all, and to only omit comments with four slashes or more, which is what this commit implements. Can't really draw boxes that narrow, anyway.", "tree": {"sha": "c61e703ad8e2f14fa1119f73ad4d662bcf6c8668", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c61e703ad8e2f14fa1119f73ad4d662bcf6c8668"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5ab1012f1f5786f550e511ba1302a22c85fcd71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ab1012f1f5786f550e511ba1302a22c85fcd71", "html_url": "https://github.com/rust-lang/rust/commit/b5ab1012f1f5786f550e511ba1302a22c85fcd71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5ab1012f1f5786f550e511ba1302a22c85fcd71/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f69bb9ba9d622ccab77840c08f4562a10b44c29", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f69bb9ba9d622ccab77840c08f4562a10b44c29", "html_url": "https://github.com/rust-lang/rust/commit/2f69bb9ba9d622ccab77840c08f4562a10b44c29"}, {"sha": "5a424813667a27a0def860d96a5e79801718592b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a424813667a27a0def860d96a5e79801718592b", "html_url": "https://github.com/rust-lang/rust/commit/5a424813667a27a0def860d96a5e79801718592b"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "d49a3d7fe42b7689a850fc8e2050d42512206c9d", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b5ab1012f1f5786f550e511ba1302a22c85fcd71/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ab1012f1f5786f550e511ba1302a22c85fcd71/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=b5ab1012f1f5786f550e511ba1302a22c85fcd71", "patch": "@@ -247,7 +247,8 @@ fn consume_whitespace_and_comments(rdr: @mut StringReader)\n }\n \n pub fn is_line_non_doc_comment(s: &str) -> bool {\n-    s.trim_right().all(|ch| ch == '/')\n+    let s = s.trim_right();\n+    s.len() > 3 && s.all(|ch| ch == '/')\n }\n \n // PRECONDITION: rdr.curr is not whitespace\n@@ -268,7 +269,7 @@ fn consume_any_line_comment(rdr: @mut StringReader)\n                     str::push_char(&mut acc, rdr.curr);\n                     bump(rdr);\n                 }\n-                // but comments with only \"/\"s are not\n+                // but comments with only more \"/\"s are not\n                 if !is_line_non_doc_comment(acc) {\n                     return Some(TokenAndSpan{\n                         tok: token::DOC_COMMENT(rdr.interner.intern(acc)),\n@@ -891,4 +892,10 @@ mod test {\n         let id = env.interner.intern(\"abc\");\n         assert_eq!(tok, token::LIFETIME(id));\n     }\n+\n+    #[test] fn line_doc_comments() {\n+        assert!(!is_line_non_doc_comment(\"///\"));\n+        assert!(!is_line_non_doc_comment(\"/// blah\"));\n+        assert!(is_line_non_doc_comment(\"////\"));\n+    }\n }"}]}