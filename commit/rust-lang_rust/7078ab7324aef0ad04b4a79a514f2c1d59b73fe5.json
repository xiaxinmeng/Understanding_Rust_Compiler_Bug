{"sha": "7078ab7324aef0ad04b4a79a514f2c1d59b73fe5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNzhhYjczMjRhZWYwYWQwNGI0YTc5YTUxNGYyYzFkNTliNzNmZTU=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-07-25T15:03:46Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-07-25T15:03:46Z"}, "message": "Generate branchless code when \"if\" can be evaluated at compile time\n\nWe already avoid the conditional branch, but still have an\nunconditional branch in the generated code. Remove it.", "tree": {"sha": "e7984ac2611d1f69a3aa666aef95118662e51632", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7984ac2611d1f69a3aa666aef95118662e51632"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7078ab7324aef0ad04b4a79a514f2c1d59b73fe5", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7078ab7324aef0ad04b4a79a514f2c1d59b73fe5", "html_url": "https://github.com/rust-lang/rust/commit/7078ab7324aef0ad04b4a79a514f2c1d59b73fe5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7078ab7324aef0ad04b4a79a514f2c1d59b73fe5/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0685e22a3a7a5735f635bd28bdcb5084dd5be34", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0685e22a3a7a5735f635bd28bdcb5084dd5be34", "html_url": "https://github.com/rust-lang/rust/commit/e0685e22a3a7a5735f635bd28bdcb5084dd5be34"}], "stats": {"total": 32, "additions": 14, "deletions": 18}, "files": [{"sha": "8c87766bbbe1f025b7914eabc0919aec155ec4bc", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7078ab7324aef0ad04b4a79a514f2c1d59b73fe5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7078ab7324aef0ad04b4a79a514f2c1d59b73fe5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=7078ab7324aef0ad04b4a79a514f2c1d59b73fe5", "patch": "@@ -74,20 +74,18 @@ pub fn trans_if(bcx: @mut Block,\n     if is_const(cond_val) && !is_undef(cond_val) {\n         if const_to_uint(cond_val) == 1 {\n             // if true { .. } [else { .. }]\n-            let then_bcx_in = scope_block(bcx, thn.info(), \"if_true_then\");\n-            let then_bcx_out = trans_block(then_bcx_in, thn, dest);\n-            let then_bcx_out = trans_block_cleanups(then_bcx_out,\n-                                                    block_cleanups(then_bcx_in));\n-            Br(bcx, then_bcx_in.llbb);\n-            return then_bcx_out;\n+            return do with_scope(bcx, thn.info(), \"if_true_then\") |bcx| {\n+                let bcx_out = trans_block(bcx, thn, dest);\n+                trans_block_cleanups(bcx_out, block_cleanups(bcx))\n+            }\n         } else {\n             match els {\n                 // if false { .. } else { .. }\n                 Some(elexpr) => {\n-                    let (else_bcx_in, else_bcx_out) =\n-                        trans_if_else(bcx, elexpr, dest, \"if_false_else\");\n-                    Br(bcx, else_bcx_in.llbb);\n-                    return else_bcx_out;\n+                    return do with_scope(bcx, elexpr.info(), \"if_false_then\") |bcx| {\n+                        let bcx_out = trans_if_else(bcx, elexpr, dest);\n+                        trans_block_cleanups(bcx_out, block_cleanups(bcx))\n+                    }\n                 }\n                 // if false { .. }\n                 None => return bcx,\n@@ -107,7 +105,8 @@ pub fn trans_if(bcx: @mut Block,\n     // 'else' context\n     let (else_bcx_in, next_bcx) = match els {\n       Some(elexpr) => {\n-          let (else_bcx_in, else_bcx_out) = trans_if_else(bcx, elexpr, dest, \"else\");\n+          let else_bcx_in = scope_block(bcx, elexpr.info(), \"else\");\n+          let else_bcx_out = trans_if_else(else_bcx_in, elexpr, dest);\n           (else_bcx_in, join_blocks(bcx, [then_bcx_out, else_bcx_out]))\n       }\n       _ => {\n@@ -125,9 +124,8 @@ pub fn trans_if(bcx: @mut Block,\n     return next_bcx;\n \n     // trans `else [ if { .. } ... | { .. } ]`\n-    fn trans_if_else(bcx: @mut Block, elexpr: @ast::expr,\n-                     dest: expr::Dest, scope_name: &str) -> (@mut Block, @mut Block) {\n-        let else_bcx_in = scope_block(bcx, elexpr.info(), scope_name);\n+    fn trans_if_else(else_bcx_in: @mut Block, elexpr: @ast::expr,\n+                     dest: expr::Dest) -> @mut Block {\n         let else_bcx_out = match elexpr.node {\n             ast::expr_if(_, _, _) => {\n                 let elseif_blk = ast_util::block_from_expr(elexpr);\n@@ -137,11 +135,9 @@ pub fn trans_if(bcx: @mut Block,\n                 trans_block(else_bcx_in, blk, dest)\n             }\n             // would be nice to have a constraint on ifs\n-            _ => bcx.tcx().sess.bug(\"strange alternative in if\")\n+            _ => else_bcx_in.tcx().sess.bug(\"strange alternative in if\")\n         };\n-        let else_bcx_out = trans_block_cleanups(else_bcx_out,\n-                                                block_cleanups(else_bcx_in));\n-        (else_bcx_in, else_bcx_out)\n+        trans_block_cleanups(else_bcx_out, block_cleanups(else_bcx_in))\n     }\n }\n "}]}