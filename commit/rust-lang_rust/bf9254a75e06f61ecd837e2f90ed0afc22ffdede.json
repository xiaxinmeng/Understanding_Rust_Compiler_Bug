{"sha": "bf9254a75e06f61ecd837e2f90ed0afc22ffdede", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmOTI1NGE3NWUwNmY2MWVjZDgzN2UyZjkwZWQwYWZjMjJmZmRlZGU=", "commit": {"author": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2015-09-16T13:25:51Z"}, "committer": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2015-09-16T13:25:51Z"}, "message": "Reuse cmp in totally ordered types\n\nInstead of manually defining it, `partial_cmp` can simply wrap the\nresult of `cmp` for totally ordered types.", "tree": {"sha": "27d200fc983da5335683e42a80b08191e4137e55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27d200fc983da5335683e42a80b08191e4137e55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf9254a75e06f61ecd837e2f90ed0afc22ffdede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf9254a75e06f61ecd837e2f90ed0afc22ffdede", "html_url": "https://github.com/rust-lang/rust/commit/bf9254a75e06f61ecd837e2f90ed0afc22ffdede", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf9254a75e06f61ecd837e2f90ed0afc22ffdede/comments", "author": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d04b8b5818819470457fc00f87176b273d756980", "url": "https://api.github.com/repos/rust-lang/rust/commits/d04b8b5818819470457fc00f87176b273d756980", "html_url": "https://github.com/rust-lang/rust/commit/d04b8b5818819470457fc00f87176b273d756980"}], "stats": {"total": 4, "additions": 1, "deletions": 3}, "files": [{"sha": "3344d7ea5d7fc2fcf0ab467607abb45106a097d0", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf9254a75e06f61ecd837e2f90ed0afc22ffdede/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf9254a75e06f61ecd837e2f90ed0afc22ffdede/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=bf9254a75e06f61ecd837e2f90ed0afc22ffdede", "patch": "@@ -471,9 +471,7 @@ mod impls {\n             impl PartialOrd for $t {\n                 #[inline]\n                 fn partial_cmp(&self, other: &$t) -> Option<Ordering> {\n-                    if *self == *other { Some(Equal) }\n-                    else if *self < *other { Some(Less) }\n-                    else { Some(Greater) }\n+                    Some(self.cmp(other))\n                 }\n                 #[inline]\n                 fn lt(&self, other: &$t) -> bool { (*self) < (*other) }"}]}