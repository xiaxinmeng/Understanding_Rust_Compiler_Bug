{"sha": "7dc3f17ef999940a4337a5ea5823acb5c3da65e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkYzNmMTdlZjk5OTk0MGE0MzM3YTVlYTU4MjNhY2I1YzNkYTY1ZTQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-06T08:25:40Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-06T12:52:31Z"}, "message": "Rollup merge of #48753 - tbu-:pr_hashmap_isize, r=BurntSushi\n\nRemove a couple of `isize` references from hashmap docs\n\nAlso fix a spelling mistake.", "tree": {"sha": "3bdcc3343e4d61eeed751ebbd413ec83764190f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bdcc3343e4d61eeed751ebbd413ec83764190f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dc3f17ef999940a4337a5ea5823acb5c3da65e4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlqejw8ACgkQ/vbIBR0O\nATxOrRAAgLzcMlNlthL6kIKrO5nl4fOL0kGA4qHQT1Ezbef9uHHnuHj+wAt1HWNZ\nbED2z3IreOkknsJZWe/bOPRRT6EQGzF2Daho/6YSR6poAIt2gGft1R79TvB7FGdL\n4PCtcwFq08t1DbelmLwi+oqxp4Pt4g5myFm50i/po5a9c40Xvl5nfPlqWxH2lRy9\n1lNqA2SxhRYHn7/npA010uVaBygVpr6habetgQyqaqIN/nyQpiLme+ZBvQ/5cFGq\nItW/EdnWgSLQvBsWz7cb+GP4IKe10KEB3tEJY06r03Q/KfBexLTv3jQkgrrmpLDh\nrtOU/UDguZkSmImO/ruclv4YN/IK5BpsmZ1ZFkTmC+NR1InUUEgBUA+6t+HdFMy/\ncKsZqt4GB9m5CrUhAEAi95RWNpkFz35lwTWGZftGD0bvdQ6qCd/oIYsxQ44/vhpw\nDeECxFoIeTn5pxlOhUIku6k1Qmx3D3R+QiBhu8f5FEDvXARjWdLtQHzG6zJU6+Tu\nEhZfzFBqs5jNF9gM+2sm1Tp4B/5JHXHFLMZdegrtQtLruX9RNxJOEJ0UcNtjID65\nQEQBy9ZZF65UfYvlQFPhNK+KdYQaloRymdz5C6UEGrrRtMa2RKCRQOElTBD4oQuc\nCQXbLcjFk/8sD6+mMwLr5+y7Mr/HSnol0KtuGzw/i03Q92nQhSo=\n=PJAr\n-----END PGP SIGNATURE-----", "payload": "tree 3bdcc3343e4d61eeed751ebbd413ec83764190f5\nparent 178b2c4b48660f51122c47628d432d233e63fd95\nparent 88f32d15afac7bc5cff5daca7a0ac80fdedb6dce\nauthor kennytm <kennytm@gmail.com> 1520324740 +0800\ncommitter kennytm <kennytm@gmail.com> 1520340751 +0800\n\nRollup merge of #48753 - tbu-:pr_hashmap_isize, r=BurntSushi\n\nRemove a couple of `isize` references from hashmap docs\n\nAlso fix a spelling mistake.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dc3f17ef999940a4337a5ea5823acb5c3da65e4", "html_url": "https://github.com/rust-lang/rust/commit/7dc3f17ef999940a4337a5ea5823acb5c3da65e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dc3f17ef999940a4337a5ea5823acb5c3da65e4/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "178b2c4b48660f51122c47628d432d233e63fd95", "url": "https://api.github.com/repos/rust-lang/rust/commits/178b2c4b48660f51122c47628d432d233e63fd95", "html_url": "https://github.com/rust-lang/rust/commit/178b2c4b48660f51122c47628d432d233e63fd95"}, {"sha": "88f32d15afac7bc5cff5daca7a0ac80fdedb6dce", "url": "https://api.github.com/repos/rust-lang/rust/commits/88f32d15afac7bc5cff5daca7a0ac80fdedb6dce", "html_url": "https://github.com/rust-lang/rust/commit/88f32d15afac7bc5cff5daca7a0ac80fdedb6dce"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "b023fec810ec362cf916f6232958c299f73a2416", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3f17ef999940a4337a5ea5823acb5c3da65e4/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3f17ef999940a4337a5ea5823acb5c3da65e4/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=7dc3f17ef999940a4337a5ea5823acb5c3da65e4", "patch": "@@ -620,7 +620,7 @@ impl<K: Hash + Eq, V> HashMap<K, V, RandomState> {\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n-    /// let mut map: HashMap<&str, isize> = HashMap::new();\n+    /// let mut map: HashMap<&str, i32> = HashMap::new();\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -637,7 +637,7 @@ impl<K: Hash + Eq, V> HashMap<K, V, RandomState> {\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n-    /// let mut map: HashMap<&str, isize> = HashMap::with_capacity(10);\n+    /// let mut map: HashMap<&str, i32> = HashMap::with_capacity(10);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -724,7 +724,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// use std::collections::hash_map::RandomState;\n     ///\n     /// let hasher = RandomState::new();\n-    /// let map: HashMap<isize, isize> = HashMap::with_hasher(hasher);\n+    /// let map: HashMap<i32, i32> = HashMap::with_hasher(hasher);\n     /// let hasher: &RandomState = map.hasher();\n     /// ```\n     #[stable(feature = \"hashmap_public_hasher\", since = \"1.9.0\")]\n@@ -741,7 +741,7 @@ impl<K, V, S> HashMap<K, V, S>\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n-    /// let map: HashMap<isize, isize> = HashMap::with_capacity(100);\n+    /// let map: HashMap<i32, i32> = HashMap::with_capacity(100);\n     /// assert!(map.capacity() >= 100);\n     /// ```\n     #[inline]\n@@ -770,7 +770,7 @@ impl<K, V, S> HashMap<K, V, S>\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n-    /// let mut map: HashMap<&str, isize> = HashMap::new();\n+    /// let mut map: HashMap<&str, i32> = HashMap::new();\n     /// map.reserve(10);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -849,7 +849,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// ```\n     /// use std::collections::HashMap;\n     ///\n-    /// let mut map: HashMap<isize, isize> = HashMap::with_capacity(100);\n+    /// let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);\n     /// map.insert(1, 2);\n     /// map.insert(3, 4);\n     /// assert!(map.capacity() >= 100);\n@@ -1306,7 +1306,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// ```\n     /// use std::collections::HashMap;\n     ///\n-    /// let mut map: HashMap<isize, isize> = (0..8).map(|x|(x, x*10)).collect();\n+    /// let mut map: HashMap<i32, i32> = (0..8).map(|x|(x, x*10)).collect();\n     /// map.retain(|&k, _| k % 2 == 0);\n     /// assert_eq!(map.len(), 4);\n     /// ```\n@@ -1722,7 +1722,7 @@ impl<K, V, S> IntoIterator for HashMap<K, V, S>\n     /// map.insert(\"c\", 3);\n     ///\n     /// // Not possible with .iter()\n-    /// let vec: Vec<(&str, isize)> = map.into_iter().collect();\n+    /// let vec: Vec<(&str, i32)> = map.into_iter().collect();\n     /// ```\n     fn into_iter(self) -> IntoIter<K, V> {\n         IntoIter { inner: self.table.into_iter() }\n@@ -2786,34 +2786,34 @@ mod test_map {\n         assert_eq!(m2.len(), 2);\n     }\n \n-    thread_local! { static DROP_VECTOR: RefCell<Vec<isize>> = RefCell::new(Vec::new()) }\n+    thread_local! { static DROP_VECTOR: RefCell<Vec<i32>> = RefCell::new(Vec::new()) }\n \n     #[derive(Hash, PartialEq, Eq)]\n-    struct Dropable {\n+    struct Droppable {\n         k: usize,\n     }\n \n-    impl Dropable {\n-        fn new(k: usize) -> Dropable {\n+    impl Droppable {\n+        fn new(k: usize) -> Droppable {\n             DROP_VECTOR.with(|slot| {\n                 slot.borrow_mut()[k] += 1;\n             });\n \n-            Dropable { k: k }\n+            Droppable { k: k }\n         }\n     }\n \n-    impl Drop for Dropable {\n+    impl Drop for Droppable {\n         fn drop(&mut self) {\n             DROP_VECTOR.with(|slot| {\n                 slot.borrow_mut()[self.k] -= 1;\n             });\n         }\n     }\n \n-    impl Clone for Dropable {\n-        fn clone(&self) -> Dropable {\n-            Dropable::new(self.k)\n+    impl Clone for Droppable {\n+        fn clone(&self) -> Droppable {\n+            Droppable::new(self.k)\n         }\n     }\n \n@@ -2833,8 +2833,8 @@ mod test_map {\n             });\n \n             for i in 0..100 {\n-                let d1 = Dropable::new(i);\n-                let d2 = Dropable::new(i + 100);\n+                let d1 = Droppable::new(i);\n+                let d2 = Droppable::new(i + 100);\n                 m.insert(d1, d2);\n             }\n \n@@ -2845,7 +2845,7 @@ mod test_map {\n             });\n \n             for i in 0..50 {\n-                let k = Dropable::new(i);\n+                let k = Droppable::new(i);\n                 let v = m.remove(&k);\n \n                 assert!(v.is_some());\n@@ -2892,8 +2892,8 @@ mod test_map {\n             });\n \n             for i in 0..100 {\n-                let d1 = Dropable::new(i);\n-                let d2 = Dropable::new(i + 100);\n+                let d1 = Droppable::new(i);\n+                let d2 = Droppable::new(i + 100);\n                 hm.insert(d1, d2);\n             }\n \n@@ -2943,13 +2943,13 @@ mod test_map {\n \n     #[test]\n     fn test_empty_remove() {\n-        let mut m: HashMap<isize, bool> = HashMap::new();\n+        let mut m: HashMap<i32, bool> = HashMap::new();\n         assert_eq!(m.remove(&0), None);\n     }\n \n     #[test]\n     fn test_empty_entry() {\n-        let mut m: HashMap<isize, bool> = HashMap::new();\n+        let mut m: HashMap<i32, bool> = HashMap::new();\n         match m.entry(0) {\n             Occupied(_) => panic!(),\n             Vacant(_) => {}\n@@ -2960,7 +2960,7 @@ mod test_map {\n \n     #[test]\n     fn test_empty_iter() {\n-        let mut m: HashMap<isize, bool> = HashMap::new();\n+        let mut m: HashMap<i32, bool> = HashMap::new();\n         assert_eq!(m.drain().next(), None);\n         assert_eq!(m.keys().next(), None);\n         assert_eq!(m.values().next(), None);\n@@ -3461,7 +3461,7 @@ mod test_map {\n     fn test_entry_take_doesnt_corrupt() {\n         #![allow(deprecated)] //rand\n         // Test for #19292\n-        fn check(m: &HashMap<isize, ()>) {\n+        fn check(m: &HashMap<i32, ()>) {\n             for k in m.keys() {\n                 assert!(m.contains_key(k),\n                         \"{} is in keys() but not in the map?\", k);\n@@ -3570,7 +3570,7 @@ mod test_map {\n \n     #[test]\n     fn test_retain() {\n-        let mut map: HashMap<isize, isize> = (0..100).map(|x|(x, x*10)).collect();\n+        let mut map: HashMap<i32, i32> = (0..100).map(|x|(x, x*10)).collect();\n \n         map.retain(|&k, _| k % 2 == 0);\n         assert_eq!(map.len(), 50);"}, {"sha": "67d413b5a38c429bcae1c582f968c62d2bd6583e", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3f17ef999940a4337a5ea5823acb5c3da65e4/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3f17ef999940a4337a5ea5823acb5c3da65e4/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=7dc3f17ef999940a4337a5ea5823acb5c3da65e4", "patch": "@@ -724,7 +724,7 @@ impl<T, S> HashSet<T, S>\n     /// use std::collections::HashSet;\n     ///\n     /// let xs = [1,2,3,4,5,6];\n-    /// let mut set: HashSet<isize> = xs.iter().cloned().collect();\n+    /// let mut set: HashSet<i32> = xs.iter().cloned().collect();\n     /// set.retain(|&k| k % 2 == 0);\n     /// assert_eq!(set.len(), 3);\n     /// ```\n@@ -1745,7 +1745,7 @@ mod test_set {\n     #[test]\n     fn test_retain() {\n         let xs = [1, 2, 3, 4, 5, 6];\n-        let mut set: HashSet<isize> = xs.iter().cloned().collect();\n+        let mut set: HashSet<i32> = xs.iter().cloned().collect();\n         set.retain(|&k| k % 2 == 0);\n         assert_eq!(set.len(), 3);\n         assert!(set.contains(&2));"}]}