{"sha": "b663d9d5e85c06ca980e75c545fadc51226ab38c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NjNkOWQ1ZTg1YzA2Y2E5ODBlNzVjNTQ1ZmFkYzUxMjI2YWIzOGM=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-02-10T18:19:32Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-02-11T06:10:41Z"}, "message": "Rebase fallout\n\nBecause certain somebody sucks at resolving big conflicts", "tree": {"sha": "efc914f84e22c2f3f35a606767aa75ede79c0be2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efc914f84e22c2f3f35a606767aa75ede79c0be2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b663d9d5e85c06ca980e75c545fadc51226ab38c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b663d9d5e85c06ca980e75c545fadc51226ab38c", "html_url": "https://github.com/rust-lang/rust/commit/b663d9d5e85c06ca980e75c545fadc51226ab38c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b663d9d5e85c06ca980e75c545fadc51226ab38c/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3bd7231015706bee72846a758e1234febaaa60a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3bd7231015706bee72846a758e1234febaaa60a", "html_url": "https://github.com/rust-lang/rust/commit/f3bd7231015706bee72846a758e1234febaaa60a"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "f429053d8bb1223a782cddd013c95b8bb766baef", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b663d9d5e85c06ca980e75c545fadc51226ab38c/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b663d9d5e85c06ca980e75c545fadc51226ab38c/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=b663d9d5e85c06ca980e75c545fadc51226ab38c", "patch": "@@ -1190,9 +1190,7 @@ impl<'a, 'gcx, 'tcx> Layout {\n \n                     // FIXME: should handle i128? signed-value based impl is weird and hard to\n                     // grok.\n-                    let (discr, signed) = Integer::repr_discr(tcx, ty, &hints[..],\n-                                                              min,\n-                                                              max);\n+                    let (discr, signed) = Integer::repr_discr(tcx, ty, &def.repr, min, max);\n                     return success(CEnum {\n                         discr: discr,\n                         signed: signed,\n@@ -1309,7 +1307,7 @@ impl<'a, 'gcx, 'tcx> Layout {\n                 // The general case.\n                 let discr_max = (variants.len() - 1) as i64;\n                 assert!(discr_max >= 0);\n-                let (min_ity, _) = Integer::repr_discr(tcx, ty, &hints[..], 0, discr_max);\n+                let (min_ity, _) = Integer::repr_discr(tcx, ty, &def.repr, 0, discr_max);\n                 let mut align = dl.aggregate_align;\n                 let mut size = Size::from_bytes(0);\n "}, {"sha": "abc3ffcf86b11d49c35fdb405d7f11079ce06275", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b663d9d5e85c06ca980e75c545fadc51226ab38c/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b663d9d5e85c06ca980e75c545fadc51226ab38c/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=b663d9d5e85c06ca980e75c545fadc51226ab38c", "patch": "@@ -546,12 +546,12 @@ impl<'a, 'tcx> CrateMetadata {\n         let did = self.local_def_id(item_id);\n         let (kind, ty) = match item.kind {\n             EntryKind::Enum(dt, _) => (ty::AdtKind::Enum, Some(dt.decode(self))),\n-            EntryKind::Struct(_) => (ty::AdtKind::Struct, None),\n-            EntryKind::Union(_) => (ty::AdtKind::Union, None),\n+            EntryKind::Struct(_, _) => (ty::AdtKind::Struct, None),\n+            EntryKind::Union(_, _) => (ty::AdtKind::Union, None),\n             _ => bug!(\"get_adt_def called on a non-ADT {:?}\", did),\n         };\n         let mut ctor_index = None;\n-        let variants = if let EntryKind::Enum(_) = item.kind {\n+        let variants = if let ty::AdtKind::Enum = kind {\n             item.children\n                 .decode(self)\n                 .map(|index| {"}, {"sha": "0f9491aaf15b4385b2ffde92b21500fcd5342954", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b663d9d5e85c06ca980e75c545fadc51226ab38c/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b663d9d5e85c06ca980e75c545fadc51226ab38c/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=b663d9d5e85c06ca980e75c545fadc51226ab38c", "patch": "@@ -661,7 +661,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             }\n             hir::ItemForeignMod(_) => EntryKind::ForeignMod,\n             hir::ItemTy(..) => EntryKind::Type,\n-            hir::ItemEnum(..) => EntryKind::Enum(self.lazy(&tcx.lookup_adt_def(def_id).discr_ty), get_repr_options(&tcx, def_id)),\n+            hir::ItemEnum(..) => EntryKind::Enum(self.lazy(&tcx.lookup_adt_def(def_id).discr_ty),\n+                                                 get_repr_options(&tcx, def_id)),\n             hir::ItemStruct(ref struct_def, _) => {\n                 let variant = tcx.lookup_adt_def(def_id).struct_variant();\n "}]}