{"sha": "688697d607ae8f174ba0a00c6cc5013eff241e68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ODY5N2Q2MDdhZThmMTc0YmEwYTAwYzZjYzUwMTNlZmYyNDFlNjg=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-04-09T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-04-10T14:29:09Z"}, "message": "Add ThreadSanitizer test case", "tree": {"sha": "5fcefdce3bb1c0146e71bc9de57c05ef8e207306", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fcefdce3bb1c0146e71bc9de57c05ef8e207306"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/688697d607ae8f174ba0a00c6cc5013eff241e68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/688697d607ae8f174ba0a00c6cc5013eff241e68", "html_url": "https://github.com/rust-lang/rust/commit/688697d607ae8f174ba0a00c6cc5013eff241e68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/688697d607ae8f174ba0a00c6cc5013eff241e68/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96d77f0e5f103612d62b85938aacfb33f5768433", "url": "https://api.github.com/repos/rust-lang/rust/commits/96d77f0e5f103612d62b85938aacfb33f5768433", "html_url": "https://github.com/rust-lang/rust/commit/96d77f0e5f103612d62b85938aacfb33f5768433"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "26590be8b1870f5155534a920ddc318721b172b3", "filename": "src/test/ui/sanitize/thread.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/688697d607ae8f174ba0a00c6cc5013eff241e68/src%2Ftest%2Fui%2Fsanitize%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688697d607ae8f174ba0a00c6cc5013eff241e68/src%2Ftest%2Fui%2Fsanitize%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fthread.rs?ref=688697d607ae8f174ba0a00c6cc5013eff241e68", "patch": "@@ -0,0 +1,57 @@\n+// Verifies that ThreadSanitizer is able to detect a data race in heap allocated\n+// memory block.\n+//\n+// Test case minimizes the use of the standard library to avoid its ambiguous\n+// status with respect to instrumentation (it could vary depending on whatever\n+// a function call is inlined or not).\n+//\n+// The conflicting data access is de-facto synchronized with a special TSAN\n+// barrier, which does not introduce synchronization from TSAN perspective, but\n+// is necessary to make the test robust. Without the barrier data race detection\n+// would occasionally fail, making test flaky.\n+//\n+// needs-sanitizer-support\n+// only-x86_64\n+//\n+// compile-flags: -Z sanitizer=thread -O\n+//\n+// run-fail\n+// error-pattern: WARNING: ThreadSanitizer: data race\n+// error-pattern: Location is heap block of size 4\n+// error-pattern: allocated by main thread\n+\n+#![feature(raw_ref_op)]\n+#![feature(rustc_private)]\n+extern crate libc;\n+\n+use std::mem;\n+use std::ptr;\n+\n+static mut BARRIER: u64 = 0;\n+\n+extern \"C\" {\n+    fn __tsan_testonly_barrier_init(barrier: *mut u64, count: u32);\n+    fn __tsan_testonly_barrier_wait(barrier: *mut u64);\n+}\n+\n+extern \"C\" fn start(c: *mut libc::c_void) -> *mut libc::c_void {\n+    unsafe {\n+        let c: *mut u32 = c.cast();\n+        *c += 1;\n+        __tsan_testonly_barrier_wait(&raw mut BARRIER);\n+        ptr::null_mut()\n+    }\n+}\n+\n+fn main() {\n+    unsafe {\n+        __tsan_testonly_barrier_init(&raw mut BARRIER, 2);\n+        let c: *mut u32 = Box::into_raw(Box::new(1));\n+        let mut t: libc::pthread_t = mem::zeroed();\n+        libc::pthread_create(&mut t, ptr::null(), start, c.cast());\n+        __tsan_testonly_barrier_wait(&raw mut BARRIER);\n+        *c += 1;\n+        libc::pthread_join(t, ptr::null_mut());\n+        Box::from_raw(c);\n+    }\n+}"}]}