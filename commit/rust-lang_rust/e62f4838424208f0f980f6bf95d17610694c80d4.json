{"sha": "e62f4838424208f0f980f6bf95d17610694c80d4", "node_id": "C_kwDOAAsO6NoAKGU2MmY0ODM4NDI0MjA4ZjBmOTgwZjZiZjk1ZDE3NjEwNjk0YzgwZDQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-10T18:07:27Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-31T16:14:54Z"}, "message": "Create trait_def table.", "tree": {"sha": "6abcfd013c2a51352fb8f7e412279513a3af4647", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6abcfd013c2a51352fb8f7e412279513a3af4647"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e62f4838424208f0f980f6bf95d17610694c80d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e62f4838424208f0f980f6bf95d17610694c80d4", "html_url": "https://github.com/rust-lang/rust/commit/e62f4838424208f0f980f6bf95d17610694c80d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e62f4838424208f0f980f6bf95d17610694c80d4/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "618138b923a4139d0a752d9a9a049169a569cd39", "url": "https://api.github.com/repos/rust-lang/rust/commits/618138b923a4139d0a752d9a9a049169a569cd39", "html_url": "https://github.com/rust-lang/rust/commit/618138b923a4139d0a752d9a9a049169a569cd39"}], "stats": {"total": 88, "additions": 16, "deletions": 72}, "files": [{"sha": "388d36e2766fc3695ebf2eaa391bbdbe2add7ba3", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 3, "deletions": 34, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e62f4838424208f0f980f6bf95d17610694c80d4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62f4838424208f0f980f6bf95d17610694c80d4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=e62f4838424208f0f980f6bf95d17610694c80d4", "patch": "@@ -909,37 +909,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         )\n     }\n \n-    fn get_trait_def(self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {\n-        match self.kind(item_id) {\n-            EntryKind::Trait(data) => {\n-                let data = data.decode((self, sess));\n-                ty::TraitDef::new(\n-                    self.local_def_id(item_id),\n-                    data.unsafety,\n-                    data.paren_sugar,\n-                    data.has_auto_impl,\n-                    data.is_marker,\n-                    data.skip_array_during_method_dispatch,\n-                    data.specialization_kind,\n-                    self.def_path_hash(item_id),\n-                    data.must_implement_one_of,\n-                )\n-            }\n-            EntryKind::TraitAlias => ty::TraitDef::new(\n-                self.local_def_id(item_id),\n-                hir::Unsafety::Normal,\n-                false,\n-                false,\n-                false,\n-                false,\n-                ty::trait_def::TraitSpecializationKind::None,\n-                self.def_path_hash(item_id),\n-                None,\n-            ),\n-            _ => bug!(\"def-index does not refer to trait or trait alias\"),\n-        }\n-    }\n-\n     fn get_variant(self, kind: &EntryKind, index: DefIndex, parent_did: DefId) -> ty::VariantDef {\n         let data = match kind {\n             EntryKind::Variant(data) | EntryKind::Struct(data) | EntryKind::Union(data) => {\n@@ -1172,7 +1141,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                     callback(exp);\n                 }\n             }\n-            EntryKind::Enum | EntryKind::Trait(..) => {}\n+            EntryKind::Enum | EntryKind::Trait => {}\n             _ => bug!(\"`for_each_module_child` is called on a non-module: {:?}\", self.def_kind(id)),\n         }\n     }\n@@ -1187,7 +1156,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n     fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {\n         match self.kind(id) {\n-            EntryKind::Mod(_) | EntryKind::Enum | EntryKind::Trait(_) => {\n+            EntryKind::Mod(_) | EntryKind::Enum | EntryKind::Trait => {\n                 self.get_expn_that_defined(id, sess)\n             }\n             _ => panic!(\"Expected module, found {:?}\", self.local_def_id(id)),\n@@ -1396,7 +1365,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             _ => return None,\n         }\n         def_key.parent.and_then(|parent_index| match self.kind(parent_index) {\n-            EntryKind::Trait(_) | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),\n+            EntryKind::Trait | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),\n             _ => None,\n         })\n     }"}, {"sha": "87ea041b432029fa54d53d8345565b4a5fbf3d31", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e62f4838424208f0f980f6bf95d17610694c80d4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62f4838424208f0f980f6bf95d17610694c80d4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=e62f4838424208f0f980f6bf95d17610694c80d4", "patch": "@@ -153,8 +153,8 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     asyncness => { table }\n     fn_arg_names => { table }\n     generator_kind => { table }\n+    trait_def => { table }\n \n-    trait_def => { cdata.get_trait_def(def_id.index, tcx.sess) }\n     adt_def => { cdata.get_adt_def(def_id.index, tcx) }\n     adt_destructor => {\n         let _ = cdata;"}, {"sha": "648a7972cbb78cafbccf07be9573ebbf73c857e6", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e62f4838424208f0f980f6bf95d17610694c80d4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62f4838424208f0f980f6bf95d17610694c80d4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=e62f4838424208f0f980f6bf95d17610694c80d4", "patch": "@@ -1474,19 +1474,16 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             }\n             hir::ItemKind::Trait(..) => {\n                 let trait_def = self.tcx.trait_def(def_id);\n-                let data = TraitData {\n-                    unsafety: trait_def.unsafety,\n-                    paren_sugar: trait_def.paren_sugar,\n-                    has_auto_impl: self.tcx.trait_is_auto(def_id),\n-                    is_marker: trait_def.is_marker,\n-                    skip_array_during_method_dispatch: trait_def.skip_array_during_method_dispatch,\n-                    specialization_kind: trait_def.specialization_kind,\n-                    must_implement_one_of: trait_def.must_implement_one_of.clone(),\n-                };\n+                record!(self.tables.trait_def[def_id] <- trait_def);\n+\n+                EntryKind::Trait\n+            }\n+            hir::ItemKind::TraitAlias(..) => {\n+                let trait_def = self.tcx.trait_def(def_id);\n+                record!(self.tables.trait_def[def_id] <- trait_def);\n \n-                EntryKind::Trait(self.lazy(data))\n+                EntryKind::TraitAlias\n             }\n-            hir::ItemKind::TraitAlias(..) => EntryKind::TraitAlias,\n             hir::ItemKind::ExternCrate(_) | hir::ItemKind::Use(..) => {\n                 bug!(\"cannot encode info for item {:?}\", item)\n             }"}, {"sha": "15e8693d71282f1d866b04c445e493dabb671188", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e62f4838424208f0f980f6bf95d17610694c80d4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62f4838424208f0f980f6bf95d17610694c80d4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=e62f4838424208f0f980f6bf95d17610694c80d4", "patch": "@@ -320,6 +320,7 @@ define_tables! {\n     asyncness: Table<DefIndex, Lazy!(hir::IsAsync)>,\n     fn_arg_names: Table<DefIndex, Lazy!([Ident])>,\n     generator_kind: Table<DefIndex, Lazy!(hir::GeneratorKind)>,\n+    trait_def: Table<DefIndex, Lazy!(ty::TraitDef)>,\n \n     trait_item_def_id: Table<DefIndex, Lazy<DefId>>,\n     inherent_impls: Table<DefIndex, Lazy<[DefIndex]>>,\n@@ -360,7 +361,7 @@ enum EntryKind {\n     ProcMacro(MacroKind),\n     Closure,\n     Generator,\n-    Trait(Lazy<TraitData>),\n+    Trait,\n     Impl,\n     AssocFn(Lazy<AssocFnData>),\n     AssocType(AssocContainer),\n@@ -377,17 +378,6 @@ struct VariantData {\n     is_non_exhaustive: bool,\n }\n \n-#[derive(TyEncodable, TyDecodable)]\n-struct TraitData {\n-    unsafety: hir::Unsafety,\n-    paren_sugar: bool,\n-    has_auto_impl: bool,\n-    is_marker: bool,\n-    skip_array_during_method_dispatch: bool,\n-    specialization_kind: ty::trait_def::TraitSpecializationKind,\n-    must_implement_one_of: Option<Box<[Ident]>>,\n-}\n-\n /// Describes whether the container of an associated item\n /// is a trait or an impl and whether, in a trait, it has\n /// a default, or an in impl, whether it's marked \"default\"."}, {"sha": "ca6fabf7f401825a99bdb474ed84fa771c0d2ead", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e62f4838424208f0f980f6bf95d17610694c80d4/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62f4838424208f0f980f6bf95d17610694c80d4/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=e62f4838424208f0f980f6bf95d17610694c80d4", "patch": "@@ -5,18 +5,15 @@ use crate::ty::{Ident, Ty, TyCtxt};\n use hir::def_id::LOCAL_CRATE;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::definitions::DefPathHash;\n use std::iter;\n \n use rustc_data_structures::fx::FxIndexMap;\n use rustc_errors::ErrorGuaranteed;\n use rustc_macros::HashStable;\n \n /// A trait's definition with type information.\n-#[derive(HashStable)]\n+#[derive(HashStable, Encodable, Decodable)]\n pub struct TraitDef {\n-    // We already have the def_path_hash below, no need to hash it twice\n-    #[stable_hasher(ignore)]\n     pub def_id: DefId,\n \n     pub unsafety: hir::Unsafety,\n@@ -43,18 +40,14 @@ pub struct TraitDef {\n     /// on this trait.\n     pub specialization_kind: TraitSpecializationKind,\n \n-    /// The ICH of this trait's DefPath, cached here so it doesn't have to be\n-    /// recomputed all the time.\n-    pub def_path_hash: DefPathHash,\n-\n     /// List of functions from `#[rustc_must_implement_one_of]` attribute one of which\n     /// must be implemented.\n     pub must_implement_one_of: Option<Box<[Ident]>>,\n }\n \n /// Whether this trait is treated specially by the standard library\n /// specialization lint.\n-#[derive(HashStable, PartialEq, Clone, Copy, TyEncodable, TyDecodable)]\n+#[derive(HashStable, PartialEq, Clone, Copy, Encodable, Decodable)]\n pub enum TraitSpecializationKind {\n     /// The default. Specializing on this trait is not allowed.\n     None,\n@@ -92,7 +85,6 @@ impl<'tcx> TraitDef {\n         is_marker: bool,\n         skip_array_during_method_dispatch: bool,\n         specialization_kind: TraitSpecializationKind,\n-        def_path_hash: DefPathHash,\n         must_implement_one_of: Option<Box<[Ident]>>,\n     ) -> TraitDef {\n         TraitDef {\n@@ -103,7 +95,6 @@ impl<'tcx> TraitDef {\n             is_marker,\n             skip_array_during_method_dispatch,\n             specialization_kind,\n-            def_path_hash,\n             must_implement_one_of,\n         }\n     }"}, {"sha": "90b880adcd03103025ecd196df2d9f45fd6f8518", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e62f4838424208f0f980f6bf95d17610694c80d4/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62f4838424208f0f980f6bf95d17610694c80d4/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=e62f4838424208f0f980f6bf95d17610694c80d4", "patch": "@@ -1218,8 +1218,6 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n     } else {\n         ty::trait_def::TraitSpecializationKind::None\n     };\n-    let def_path_hash = tcx.def_path_hash(def_id);\n-\n     let must_implement_one_of = tcx\n         .get_attrs(def_id)\n         .iter()\n@@ -1326,7 +1324,6 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n         is_marker,\n         skip_array_during_method_dispatch,\n         spec_kind,\n-        def_path_hash,\n         must_implement_one_of,\n     )\n }"}]}