{"sha": "9105cb6d5ddf6be881d9cbfd016600d1b69241ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMDVjYjZkNWRkZjZiZTg4MWQ5Y2JmZDAxNjYwMGQxYjY5MjQxZWM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-08T21:35:11Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-08T21:35:11Z"}, "message": "revise map interface so that K need not be copyable", "tree": {"sha": "60b17bcebd6f419e37bb05f4adc090966391208d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60b17bcebd6f419e37bb05f4adc090966391208d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9105cb6d5ddf6be881d9cbfd016600d1b69241ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9105cb6d5ddf6be881d9cbfd016600d1b69241ec", "html_url": "https://github.com/rust-lang/rust/commit/9105cb6d5ddf6be881d9cbfd016600d1b69241ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9105cb6d5ddf6be881d9cbfd016600d1b69241ec/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc9eadf75bc68be413d7894d70be2a2ad5a5bd79", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc9eadf75bc68be413d7894d70be2a2ad5a5bd79", "html_url": "https://github.com/rust-lang/rust/commit/fc9eadf75bc68be413d7894d70be2a2ad5a5bd79"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "fc6d3ee52fc7fffddffde7780419f804952f4935", "filename": "src/libstd/map.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9105cb6d5ddf6be881d9cbfd016600d1b69241ec/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9105cb6d5ddf6be881d9cbfd016600d1b69241ec/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=9105cb6d5ddf6be881d9cbfd016600d1b69241ec", "patch": "@@ -21,7 +21,7 @@ type set<K> = hashmap<K, ()>;\n \n type hashmap<K, V> = chained::t<K, V>;\n \n-iface map<K: copy, V: copy> {\n+iface map<K, V: copy> {\n     #[doc = \"Return the number of elements in the map\"]\n     fn size() -> uint;\n \n@@ -33,7 +33,7 @@ iface map<K: copy, V: copy> {\n \n     Returns true if the key did not already exist in the map\n     \"]\n-    fn insert(K, V) -> bool;\n+    fn insert(+K, +V) -> bool;\n \n     #[doc = \"Returns true if the map contains a value for the specified key\"]\n     fn contains_key(K) -> bool;\n@@ -96,7 +96,7 @@ mod chained {\n         found_after(@entry<K,V>, @entry<K,V>)\n     }\n \n-    impl private_methods<K: copy, V: copy> for t<K, V> {\n+    impl private_methods<K, V: copy> for t<K, V> {\n         fn search_rem(k: K, h: uint, idx: uint,\n                       e_root: @entry<K,V>) -> search_result<K,V> {\n             let mut e0 = e_root;\n@@ -174,7 +174,7 @@ mod chained {\n         }\n     }\n \n-    impl hashmap<K: copy, V: copy> of map<K, V> for t<K, V> {\n+    impl hashmap<K, V: copy> of map<K, V> for t<K, V> {\n         fn size() -> uint { self.count }\n \n         fn contains_key(k: K) -> bool {\n@@ -185,7 +185,7 @@ mod chained {\n             }\n         }\n \n-        fn insert(k: K, v: V) -> bool {\n+        fn insert(+k: K, +v: V) -> bool {\n             let hash = self.hasher(k);\n             alt self.search_tbl(k, hash) {\n               not_found {\n@@ -249,7 +249,7 @@ mod chained {\n \n         fn each(blk: fn(K,V) -> bool) {\n             for self.each_entry { |entry|\n-                if !blk(copy entry.key, copy entry.value) { break; }\n+                if !blk(entry.key, copy entry.value) { break; }\n             }\n         }\n "}, {"sha": "1abf54b438dd1afbbb60f0594d3636d0265d2c59", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9105cb6d5ddf6be881d9cbfd016600d1b69241ec/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9105cb6d5ddf6be881d9cbfd016600d1b69241ec/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=9105cb6d5ddf6be881d9cbfd016600d1b69241ec", "patch": "@@ -62,7 +62,7 @@ impl <V: copy> of map::map<uint, V> for smallintmap<V> {\n         }\n         sz\n     }\n-    fn insert(&&key: uint, value: V) -> bool {\n+    fn insert(+key: uint, +value: V) -> bool {\n         let exists = contains_key(self, key);\n         insert(self, key, value);\n         ret !exists;"}, {"sha": "b7533bfe4267707e366415ffc32796ed5193f591", "filename": "src/test/run-pass/class-impl-parameterized-iface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9105cb6d5ddf6be881d9cbfd016600d1b69241ec/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-iface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9105cb6d5ddf6be881d9cbfd016600d1b69241ec/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-iface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-iface.rs?ref=9105cb6d5ddf6be881d9cbfd016600d1b69241ec", "patch": "@@ -36,7 +36,7 @@ class cat implements map<int, bool> {\n   }\n \n   fn size() -> uint { self.meows as uint }\n-  fn insert(&&k: int, &&v: bool) -> bool { \n+  fn insert(+k: int, +v: bool) -> bool { \n     if v { self.meows += k; } else { self.meows -= k; };\n     true\n   }"}, {"sha": "89674fecfa49535f6c66499de5d3422431dd4b81", "filename": "src/test/run-pass/class-impl-very-parameterized-iface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9105cb6d5ddf6be881d9cbfd016600d1b69241ec/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-iface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9105cb6d5ddf6be881d9cbfd016600d1b69241ec/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-iface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-iface.rs?ref=9105cb6d5ddf6be881d9cbfd016600d1b69241ec", "patch": "@@ -41,7 +41,7 @@ class cat<T: copy> implements map<int, T> {\n   }\n \n   fn size() -> uint { self.meows as uint }\n-  fn insert(&&k: int, &&_v: T) -> bool {\n+  fn insert(+k: int, +_v: T) -> bool {\n     self.meows += k;\n     true\n   }"}]}