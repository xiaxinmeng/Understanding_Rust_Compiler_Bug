{"sha": "345530412f6f198a8c27258020ab65e5b9a0305a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NTUzMDQxMmY2ZjE5OGE4YzI3MjU4MDIwYWI2NWU1YjlhMDMwNWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-28T01:20:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-28T01:20:01Z"}, "message": "Auto merge of #85909 - cjgillot:alloc-kind-query, r=Aaron1011\n\nMake allocator_kind a query.\n\nPart of #85153\n\nr? `@Aaron1011`", "tree": {"sha": "ee7d2a1f9d5bbf13507e22ac3569a6cf0b118f23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee7d2a1f9d5bbf13507e22ac3569a6cf0b118f23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/345530412f6f198a8c27258020ab65e5b9a0305a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/345530412f6f198a8c27258020ab65e5b9a0305a", "html_url": "https://github.com/rust-lang/rust/commit/345530412f6f198a8c27258020ab65e5b9a0305a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/345530412f6f198a8c27258020ab65e5b9a0305a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e9d7ecf784e5ecaf7437d04be3992ad23fa7cb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e9d7ecf784e5ecaf7437d04be3992ad23fa7cb6", "html_url": "https://github.com/rust-lang/rust/commit/3e9d7ecf784e5ecaf7437d04be3992ad23fa7cb6"}, {"sha": "cbdfbdd40bb6c25cf33c922339f0b303d0576377", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbdfbdd40bb6c25cf33c922339f0b303d0576377", "html_url": "https://github.com/rust-lang/rust/commit/cbdfbdd40bb6c25cf33c922339f0b303d0576377"}], "stats": {"total": 28, "additions": 11, "deletions": 17}, "files": [{"sha": "1976e4ad3c9fc73e4fe06f704990a7bcebacff7c", "filename": "compiler/rustc_ast/src/expand/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/345530412f6f198a8c27258020ab65e5b9a0305a/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/345530412f6f198a8c27258020ab65e5b9a0305a/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fallocator.rs?ref=345530412f6f198a8c27258020ab65e5b9a0305a", "patch": "@@ -1,6 +1,6 @@\n use rustc_span::symbol::{sym, Symbol};\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone, Debug, Copy, HashStable_Generic)]\n pub enum AllocatorKind {\n     Global,\n     Default,"}, {"sha": "d39486c2f1002e485f849fb0c27fb3564c384e46", "filename": "compiler/rustc_codegen_cranelift/src/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/345530412f6f198a8c27258020ab65e5b9a0305a/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/345530412f6f198a8c27258020ab65e5b9a0305a/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs?ref=345530412f6f198a8c27258020ab65e5b9a0305a", "patch": "@@ -19,7 +19,7 @@ pub(crate) fn codegen(\n     });\n     if any_dynamic_crate {\n         false\n-    } else if let Some(kind) = tcx.allocator_kind() {\n+    } else if let Some(kind) = tcx.allocator_kind(()) {\n         codegen_inner(module, unwind_context, kind);\n         true\n     } else {"}, {"sha": "8a035e62e2a93263ad67700382f2e7b7a9080307", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/345530412f6f198a8c27258020ab65e5b9a0305a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/345530412f6f198a8c27258020ab65e5b9a0305a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=345530412f6f198a8c27258020ab65e5b9a0305a", "patch": "@@ -180,7 +180,7 @@ fn exported_symbols_provider_local(\n         symbols.push((exported_symbol, SymbolExportLevel::C));\n     }\n \n-    if tcx.allocator_kind().is_some() {\n+    if tcx.allocator_kind(()).is_some() {\n         for method in ALLOCATOR_METHODS {\n             let symbol_name = format!(\"__rust_{}\", method.name);\n             let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, &symbol_name));"}, {"sha": "31ae84f4ca11d4d628fe7d115a30cc8f2d7198ca", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/345530412f6f198a8c27258020ab65e5b9a0305a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/345530412f6f198a8c27258020ab65e5b9a0305a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=345530412f6f198a8c27258020ab65e5b9a0305a", "patch": "@@ -518,7 +518,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     });\n     let allocator_module = if any_dynamic_crate {\n         None\n-    } else if let Some(kind) = tcx.allocator_kind() {\n+    } else if let Some(kind) = tcx.allocator_kind(()) {\n         let llmod_id =\n             cgu_name_builder.build_cgu_name(LOCAL_CRATE, &[\"crate\"], Some(\"allocator\")).to_string();\n         let mut modules = backend.new_metadata(tcx, &llmod_id);"}, {"sha": "5e1161221798c0200f61ad846be74d0c71f40425", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/345530412f6f198a8c27258020ab65e5b9a0305a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/345530412f6f198a8c27258020ab65e5b9a0305a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=345530412f6f198a8c27258020ab65e5b9a0305a", "patch": "@@ -4,7 +4,6 @@ use crate::native_libs;\n use crate::rmeta::encoder;\n \n use rustc_ast as ast;\n-use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_data_structures::stable_map::FxHashMap;\n use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n@@ -242,6 +241,7 @@ pub fn provide(providers: &mut Providers) {\n     // therefore no actual inputs, they're just reading tables calculated in\n     // resolve! Does this work? Unsure! That's what the issue is about\n     *providers = Providers {\n+        allocator_kind: |tcx, ()| CStore::from_tcx(tcx).allocator_kind(),\n         is_dllimport_foreign_item: |tcx, id| match tcx.native_library_kind(id) {\n             Some(\n                 NativeLibKind::Dylib { .. } | NativeLibKind::RawDylib | NativeLibKind::Unspecified,\n@@ -535,8 +535,4 @@ impl CrateStore for CStore {\n     fn encode_metadata(&self, tcx: TyCtxt<'_>) -> EncodedMetadata {\n         encoder::encode_metadata(tcx)\n     }\n-\n-    fn allocator_kind(&self) -> Option<AllocatorKind> {\n-        self.allocator_kind()\n-    }\n }"}, {"sha": "8476929eaeced2b1d230e5e6f6d964e2e7d2a088", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/345530412f6f198a8c27258020ab65e5b9a0305a/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/345530412f6f198a8c27258020ab65e5b9a0305a/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=345530412f6f198a8c27258020ab65e5b9a0305a", "patch": "@@ -285,7 +285,7 @@ pub type DepNode = rustc_query_system::dep_graph::DepNode<DepKind>;\n // required that their size stay the same, but we don't want to change\n // it inadvertently. This assert just ensures we're aware of any change.\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-static_assert_size!(DepNode, 17);\n+static_assert_size!(DepNode, 18);\n \n #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n static_assert_size!(DepNode, 24);"}, {"sha": "1f40b227d9153fc6ac0b7b4d951f247142f9cdc7", "filename": "compiler/rustc_middle/src/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/345530412f6f198a8c27258020ab65e5b9a0305a/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/345530412f6f198a8c27258020ab65e5b9a0305a/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs?ref=345530412f6f198a8c27258020ab65e5b9a0305a", "patch": "@@ -5,7 +5,6 @@\n use crate::ty::TyCtxt;\n \n use rustc_ast as ast;\n-use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{self, MetadataRef};\n use rustc_hir::def::DefKind;\n@@ -215,7 +214,6 @@ pub trait CrateStore {\n \n     // utility functions\n     fn encode_metadata(&self, tcx: TyCtxt<'_>) -> EncodedMetadata;\n-    fn allocator_kind(&self) -> Option<AllocatorKind>;\n }\n \n pub type CrateStoreDyn = dyn CrateStore + sync::Sync;"}, {"sha": "f66ff008801b689d9a76424fb38f639654ef054a", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/345530412f6f198a8c27258020ab65e5b9a0305a/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/345530412f6f198a8c27258020ab65e5b9a0305a/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=345530412f6f198a8c27258020ab65e5b9a0305a", "patch": "@@ -1416,6 +1416,10 @@ rustc_queries! {\n         eval_always\n         desc { \"check whether crate {} is a private dependency\", c }\n     }\n+    query allocator_kind(_: ()) -> Option<AllocatorKind> {\n+        eval_always\n+        desc { \"allocator kind for the current crate\" }\n+    }\n \n     query upvars_mentioned(def_id: DefId) -> Option<&'tcx FxIndexMap<hir::HirId, hir::Upvar>> {\n         desc { |tcx| \"collecting upvars mentioned in `{}`\", tcx.def_path_str(def_id) }"}, {"sha": "892996189a6537fda8577bae1b8675668009ad26", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/345530412f6f198a8c27258020ab65e5b9a0305a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/345530412f6f198a8c27258020ab65e5b9a0305a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=345530412f6f198a8c27258020ab65e5b9a0305a", "patch": "@@ -26,7 +26,6 @@ use crate::ty::{\n     TraitObjectVisitor, Ty, TyKind, TyS, TyVar, TyVid, TypeAndMut, UintTy, Visibility,\n };\n use rustc_ast as ast;\n-use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::SelfProfilerRef;\n@@ -1260,10 +1259,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.all_crate_nums(())\n     }\n \n-    pub fn allocator_kind(self) -> Option<AllocatorKind> {\n-        self.cstore.allocator_kind()\n-    }\n-\n     pub fn features(self) -> &'tcx rustc_feature::Features {\n         self.features_query(())\n     }"}, {"sha": "2ac121fec7ee0db4df90c7de2766bf16695d300d", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/345530412f6f198a8c27258020ab65e5b9a0305a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/345530412f6f198a8c27258020ab65e5b9a0305a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=345530412f6f198a8c27258020ab65e5b9a0305a", "patch": "@@ -33,6 +33,7 @@ use crate::traits::{self, ImplSource};\n use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::util::AlwaysRequiresDrop;\n use crate::ty::{self, AdtSizedConstraint, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n+use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::svh::Svh;"}]}