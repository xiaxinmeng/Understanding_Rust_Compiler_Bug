{"sha": "9e4ed337c783fab801d8a2e37feb58974205cfa3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNGVkMzM3Yzc4M2ZhYjgwMWQ4YTJlMzdmZWI1ODk3NDIwNWNmYTM=", "commit": {"author": {"name": "Hirochika Matsumoto", "email": "matsujika@gmail.com", "date": "2021-01-28T20:43:35Z"}, "committer": {"name": "Hirochika Matsumoto", "email": "matsujika@gmail.com", "date": "2021-01-28T21:52:49Z"}, "message": "Suggest accessing field when code compiles with it", "tree": {"sha": "a58f4b38e8b2646843c00772b04587560b968368", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a58f4b38e8b2646843c00772b04587560b968368"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e4ed337c783fab801d8a2e37feb58974205cfa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e4ed337c783fab801d8a2e37feb58974205cfa3", "html_url": "https://github.com/rust-lang/rust/commit/9e4ed337c783fab801d8a2e37feb58974205cfa3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e4ed337c783fab801d8a2e37feb58974205cfa3/comments", "author": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e32f372c4203b2527221b313cf63b05ea178e8a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e32f372c4203b2527221b313cf63b05ea178e8a9", "html_url": "https://github.com/rust-lang/rust/commit/e32f372c4203b2527221b313cf63b05ea178e8a9"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "68ffe3cd70fa81ac384a570f3d62910c32b4e589", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9e4ed337c783fab801d8a2e37feb58974205cfa3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4ed337c783fab801d8a2e37feb58974205cfa3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=9e4ed337c783fab801d8a2e37feb58974205cfa3", "patch": "@@ -1661,6 +1661,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         debug!(\"exp_found {:?} terr {:?}\", exp_found, terr);\n         if let Some(exp_found) = exp_found {\n             self.suggest_as_ref_where_appropriate(span, &exp_found, diag);\n+            self.suggest_field_where_appropriate(cause, &exp_found, diag);\n             self.suggest_await_on_expect_found(cause, span, &exp_found, diag);\n         }\n \n@@ -1819,6 +1820,46 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn suggest_field_where_appropriate(\n+        &self,\n+        cause: &ObligationCause<'tcx>,\n+        exp_found: &ty::error::ExpectedFound<Ty<'tcx>>,\n+        diag: &mut DiagnosticBuilder<'tcx>,\n+    ) {\n+        debug!(\"suggest_field_where_appropriate(cause={:?}, exp_found={:?})\", cause, exp_found);\n+        if let ty::Adt(expected_def, expected_substs) = exp_found.expected.kind() {\n+            if expected_def.is_enum() {\n+                return;\n+            }\n+\n+            if let Some((name, ty)) = expected_def\n+                .non_enum_variant()\n+                .fields\n+                .iter()\n+                .filter(|field| field.vis.is_accessible_from(field.did, self.tcx))\n+                .map(|field| (field.ident.name, field.ty(self.tcx, expected_substs)))\n+                .inspect(|(name, ty)| {\n+                    debug!(\"suggest_field_where_appropriate: name={:?}, ty={:?}\", name, ty)\n+                })\n+                .find(|(_, ty)| ty::TyS::same_type(ty, exp_found.found))\n+            {\n+                if let ObligationCauseCode::Pattern { span: Some(span), .. } = cause.code {\n+                    if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                        diag.span_suggestion(\n+                            span,\n+                            &format!(\n+                                \"you might have meant to use field `{}` of type `{}`\",\n+                                name, ty\n+                            ),\n+                            format!(\"{}.{}\", snippet, name),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     /// When encountering a case where `.as_ref()` on a `Result` or `Option` would be appropriate,\n     /// suggests it.\n     fn suggest_as_ref_where_appropriate("}, {"sha": "822f66f2a479fff139ac9cd440d44edad97493d5", "filename": "src/test/ui/suggestions/field-access.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9e4ed337c783fab801d8a2e37feb58974205cfa3/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4ed337c783fab801d8a2e37feb58974205cfa3/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.rs?ref=9e4ed337c783fab801d8a2e37feb58974205cfa3", "patch": "@@ -0,0 +1,15 @@\n+struct A {\n+    b: B,\n+}\n+\n+enum B {\n+    Fst,\n+    Snd,\n+}\n+\n+fn main() {\n+    let a = A { b: B::Fst };\n+    if let B::Fst = a {};\n+    //~^ ERROR mismatched types [E0308]\n+    // note: you might have meant to use field `b` of type `B`\n+}"}, {"sha": "58bc6d3f2da31ea946225f27f8de21da802a9a81", "filename": "src/test/ui/suggestions/field-access.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9e4ed337c783fab801d8a2e37feb58974205cfa3/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e4ed337c783fab801d8a2e37feb58974205cfa3/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.stderr?ref=9e4ed337c783fab801d8a2e37feb58974205cfa3", "patch": "@@ -0,0 +1,19 @@\n+error[E0308]: mismatched types\n+  --> $DIR/field-access.rs:12:12\n+   |\n+LL |     Fst,\n+   |     --- unit variant defined here\n+...\n+LL |     if let B::Fst = a {};\n+   |            ^^^^^^   - this expression has type `A`\n+   |            |\n+   |            expected struct `A`, found enum `B`\n+   |\n+help: you might have meant to use field `b` of type `B`\n+   |\n+LL |     if let B::Fst = a.b {};\n+   |                     ^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}