{"sha": "ba0947ddede4aacff929f9f826078195b8bbcc4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMDk0N2RkZWRlNGFhY2ZmOTI5ZjlmODI2MDc4MTk1YjhiYmNjNGI=", "commit": {"author": {"name": "Dezhi Wu", "email": "wu543065657@163.com", "date": "2021-08-15T12:46:13Z"}, "committer": {"name": "Dezhi Wu", "email": "wu543065657@163.com", "date": "2021-08-30T07:11:42Z"}, "message": "switch `log` crate to `tracing`", "tree": {"sha": "5d3d59c126b6cb55a4d2c3d5fb82c1f9295a9d87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d3d59c126b6cb55a4d2c3d5fb82c1f9295a9d87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba0947ddede4aacff929f9f826078195b8bbcc4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba0947ddede4aacff929f9f826078195b8bbcc4b", "html_url": "https://github.com/rust-lang/rust/commit/ba0947ddede4aacff929f9f826078195b8bbcc4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba0947ddede4aacff929f9f826078195b8bbcc4b/comments", "author": {"login": "dzvon", "id": 3402811, "node_id": "MDQ6VXNlcjM0MDI4MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3402811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzvon", "html_url": "https://github.com/dzvon", "followers_url": "https://api.github.com/users/dzvon/followers", "following_url": "https://api.github.com/users/dzvon/following{/other_user}", "gists_url": "https://api.github.com/users/dzvon/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzvon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzvon/subscriptions", "organizations_url": "https://api.github.com/users/dzvon/orgs", "repos_url": "https://api.github.com/users/dzvon/repos", "events_url": "https://api.github.com/users/dzvon/events{/privacy}", "received_events_url": "https://api.github.com/users/dzvon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dzvon", "id": 3402811, "node_id": "MDQ6VXNlcjM0MDI4MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3402811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzvon", "html_url": "https://github.com/dzvon", "followers_url": "https://api.github.com/users/dzvon/followers", "following_url": "https://api.github.com/users/dzvon/following{/other_user}", "gists_url": "https://api.github.com/users/dzvon/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzvon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzvon/subscriptions", "organizations_url": "https://api.github.com/users/dzvon/orgs", "repos_url": "https://api.github.com/users/dzvon/repos", "events_url": "https://api.github.com/users/dzvon/events{/privacy}", "received_events_url": "https://api.github.com/users/dzvon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d15f646ff17e2da0d4e8dc2754ba83213cf1a8bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d15f646ff17e2da0d4e8dc2754ba83213cf1a8bb", "html_url": "https://github.com/rust-lang/rust/commit/d15f646ff17e2da0d4e8dc2754ba83213cf1a8bb"}], "stats": {"total": 514, "additions": 276, "deletions": 238}, "files": [{"sha": "3854c35cae1116eeb32ec026169c0f8cbfbe683c", "filename": "Cargo.lock", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -324,15 +324,6 @@ dependencies = [\n  \"log\",\n ]\n \n-[[package]]\n-name = \"env_logger\"\n-version = \"0.9.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0b2cf0344971ee6c64c31be0d530793fba457d322dfec2810c453d0ef228f9c3\"\n-dependencies = [\n- \"log\",\n-]\n-\n [[package]]\n name = \"expect-test\"\n version = \"1.1.0\"\n@@ -380,12 +371,12 @@ dependencies = [\n  \"cargo_metadata\",\n  \"crossbeam-channel\",\n  \"jod-thread\",\n- \"log\",\n  \"paths\",\n  \"serde\",\n  \"serde_json\",\n  \"stdx\",\n  \"toolchain\",\n+ \"tracing\",\n ]\n \n [[package]]\n@@ -462,7 +453,6 @@ dependencies = [\n  \"hir_ty\",\n  \"indexmap\",\n  \"itertools\",\n- \"log\",\n  \"once_cell\",\n  \"profile\",\n  \"rustc-hash\",\n@@ -490,7 +480,6 @@ dependencies = [\n  \"itertools\",\n  \"la-arena\",\n  \"limit\",\n- \"log\",\n  \"mbe\",\n  \"once_cell\",\n  \"profile\",\n@@ -499,6 +488,7 @@ dependencies = [\n  \"stdx\",\n  \"syntax\",\n  \"test_utils\",\n+ \"tracing\",\n  \"tt\",\n ]\n \n@@ -514,13 +504,13 @@ dependencies = [\n  \"itertools\",\n  \"la-arena\",\n  \"limit\",\n- \"log\",\n  \"mbe\",\n  \"parser\",\n  \"profile\",\n  \"rustc-hash\",\n  \"syntax\",\n  \"test_utils\",\n+ \"tracing\",\n  \"tt\",\n ]\n \n@@ -541,7 +531,6 @@ dependencies = [\n  \"itertools\",\n  \"la-arena\",\n  \"limit\",\n- \"log\",\n  \"once_cell\",\n  \"profile\",\n  \"rustc-hash\",\n@@ -581,7 +570,6 @@ dependencies = [\n  \"ide_ssr\",\n  \"indexmap\",\n  \"itertools\",\n- \"log\",\n  \"oorandom\",\n  \"profile\",\n  \"pulldown-cmark\",\n@@ -591,6 +579,7 @@ dependencies = [\n  \"syntax\",\n  \"test_utils\",\n  \"text_edit\",\n+ \"tracing\",\n  \"url\",\n ]\n \n@@ -625,7 +614,6 @@ dependencies = [\n  \"hir\",\n  \"ide_db\",\n  \"itertools\",\n- \"log\",\n  \"once_cell\",\n  \"profile\",\n  \"rustc-hash\",\n@@ -634,6 +622,7 @@ dependencies = [\n  \"syntax\",\n  \"test_utils\",\n  \"text_edit\",\n+ \"tracing\",\n  \"xshell\",\n ]\n \n@@ -649,7 +638,6 @@ dependencies = [\n  \"hir\",\n  \"itertools\",\n  \"limit\",\n- \"log\",\n  \"once_cell\",\n  \"profile\",\n  \"rayon\",\n@@ -658,6 +646,7 @@ dependencies = [\n  \"syntax\",\n  \"test_utils\",\n  \"text_edit\",\n+ \"tracing\",\n ]\n \n [[package]]\n@@ -889,14 +878,14 @@ version = \"0.0.0\"\n dependencies = [\n  \"cov-mark\",\n  \"expect-test\",\n- \"log\",\n  \"parser\",\n  \"profile\",\n  \"rustc-hash\",\n  \"smallvec\",\n  \"stdx\",\n  \"syntax\",\n  \"test_utils\",\n+ \"tracing\",\n  \"tt\",\n ]\n \n@@ -1121,7 +1110,6 @@ version = \"0.0.0\"\n dependencies = [\n  \"crossbeam-channel\",\n  \"jod-thread\",\n- \"log\",\n  \"memmap2\",\n  \"object\",\n  \"paths\",\n@@ -1130,6 +1118,7 @@ dependencies = [\n  \"serde_json\",\n  \"snap\",\n  \"stdx\",\n+ \"tracing\",\n  \"tt\",\n ]\n \n@@ -1188,7 +1177,6 @@ dependencies = [\n  \"cfg\",\n  \"expect-test\",\n  \"la-arena\",\n- \"log\",\n  \"paths\",\n  \"profile\",\n  \"rustc-hash\",\n@@ -1197,6 +1185,7 @@ dependencies = [\n  \"serde_json\",\n  \"stdx\",\n  \"toolchain\",\n+ \"tracing\",\n ]\n \n [[package]]\n@@ -1308,7 +1297,6 @@ dependencies = [\n  \"cfg\",\n  \"crossbeam-channel\",\n  \"dissimilar\",\n- \"env_logger\",\n  \"expect-test\",\n  \"flycheck\",\n  \"hir\",\n@@ -1319,7 +1307,6 @@ dependencies = [\n  \"ide_ssr\",\n  \"itertools\",\n  \"jod-thread\",\n- \"log\",\n  \"lsp-server\",\n  \"lsp-types\",\n  \"mbe\",\n@@ -1343,6 +1330,7 @@ dependencies = [\n  \"tikv-jemallocator\",\n  \"toolchain\",\n  \"tracing\",\n+ \"tracing-log\",\n  \"tracing-subscriber\",\n  \"tracing-tree\",\n  \"tt\",\n@@ -1737,6 +1725,7 @@ dependencies = [\n  \"thread_local\",\n  \"tracing\",\n  \"tracing-core\",\n+ \"tracing-log\",\n ]\n \n [[package]]\n@@ -1838,10 +1827,10 @@ version = \"0.0.0\"\n dependencies = [\n  \"crossbeam-channel\",\n  \"jod-thread\",\n- \"log\",\n  \"notify\",\n  \"paths\",\n  \"rustc-hash\",\n+ \"tracing\",\n  \"vfs\",\n  \"walkdir\",\n ]"}, {"sha": "83624b494e5576210d2ee6581912d56f60b8987d", "filename": "crates/flycheck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fflycheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fflycheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2FCargo.toml?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -10,7 +10,7 @@ doctest = false\n \n [dependencies]\n crossbeam-channel = \"0.5.0\"\n-log = \"0.4.8\"\n+tracing = \"0.1\"\n cargo_metadata = \"0.14\"\n serde = { version = \"1.0.106\", features = [\"derive\"] }\n serde_json = \"1.0.48\""}, {"sha": "36604b81cb4e7c589d812ad662d805a9f45c4851", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -163,7 +163,7 @@ impl FlycheckActor {\n                     self.cancel_check_process();\n \n                     let mut command = self.check_command();\n-                    log::info!(\"restart flycheck {:?}\", command);\n+                    tracing::info!(\"restart flycheck {:?}\", command);\n                     command.stdout(Stdio::piped()).stderr(Stdio::null()).stdin(Stdio::null());\n                     if let Ok(child) = command.spawn().map(JodChild) {\n                         self.cargo_handle = Some(CargoHandle::spawn(child));\n@@ -176,7 +176,7 @@ impl FlycheckActor {\n                     let cargo_handle = self.cargo_handle.take().unwrap();\n                     let res = cargo_handle.join();\n                     if res.is_err() {\n-                        log::error!(\n+                        tracing::error!(\n                             \"Flycheck failed to run the following command: {:?}\",\n                             self.check_command()\n                         )\n@@ -319,7 +319,7 @@ impl CargoActor {\n             let message = match message {\n                 Ok(message) => message,\n                 Err(err) => {\n-                    log::error!(\"Invalid json from cargo check, ignoring ({})\", err);\n+                    tracing::error!(\"Invalid json from cargo check, ignoring ({})\", err);\n                     continue;\n                 }\n             };"}, {"sha": "ea1afb46d6cebac07846cf7187f69e078c30b993", "filename": "crates/hir/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2FCargo.toml?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -9,7 +9,6 @@ edition = \"2018\"\n doctest = false\n \n [dependencies]\n-log = \"0.4.8\"\n rustc-hash = \"1.1.0\"\n either = \"1.5.3\"\n arrayvec = \"0.7\""}, {"sha": "f5e60a4f54de76190060cb2c9a136ad8f2945f99", "filename": "crates/hir_def/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_def%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_def%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2FCargo.toml?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -11,7 +11,7 @@ doctest = false\n [dependencies]\n cov-mark = \"2.0.0-pre.1\"\n dashmap = { version = \"4.0.2\", features = [\"raw-api\"] }\n-log = \"0.4.8\"\n+tracing = \"0.1\"\n once_cell = \"1.3.1\"\n rustc-hash = \"1.1.0\"\n either = \"1.5.3\""}, {"sha": "5320a96bc52fc65b2d8b3a2073a1164f8d523ab1", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -135,7 +135,7 @@ impl Expander {\n             None => {\n                 // Only `None` if the macro expansion produced no usable AST.\n                 if err.is_none() {\n-                    log::warn!(\"no error despite `parse_or_expand` failing\");\n+                    tracing::warn!(\"no error despite `parse_or_expand` failing\");\n                 }\n \n                 return Ok(ExpandResult::only_err(err.unwrap_or_else(|| {\n@@ -152,7 +152,7 @@ impl Expander {\n             }\n         };\n \n-        log::debug!(\"macro expansion {:#?}\", node.syntax());\n+        tracing::debug!(\"macro expansion {:#?}\", node.syntax());\n \n         self.recursion_limit += 1;\n         let mark = Mark {"}, {"sha": "209eedb005c354b2ac870130ea4569e06a0e8def", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -64,7 +64,7 @@ pub(super) fn collect_defs(\n     if block.is_none() {\n         // populate external prelude\n         for dep in &crate_graph[def_map.krate].dependencies {\n-            log::debug!(\"crate dep {:?} -> {:?}\", dep.name, dep.crate_id);\n+            tracing::debug!(\"crate dep {:?} -> {:?}\", dep.name, dep.crate_id);\n             let dep_def_map = db.crate_def_map(dep.crate_id);\n             def_map\n                 .extern_prelude\n@@ -358,7 +358,7 @@ impl DefCollector<'_> {\n \n                 i += 1;\n                 if FIXED_POINT_LIMIT.check(i).is_err() {\n-                    log::error!(\"name resolution is stuck\");\n+                    tracing::error!(\"name resolution is stuck\");\n                     break 'outer;\n                 }\n             }\n@@ -510,7 +510,7 @@ impl DefCollector<'_> {\n                     return;\n                 }\n                 _ => {\n-                    log::debug!(\n+                    tracing::debug!(\n                         \"could not resolve prelude path `{}` to module (resolved to {:?})\",\n                         path,\n                         per_ns.types\n@@ -654,7 +654,7 @@ impl DefCollector<'_> {\n         current_module_id: LocalModuleId,\n         extern_crate: &item_tree::ExternCrate,\n     ) {\n-        log::debug!(\n+        tracing::debug!(\n             \"importing macros from extern crate: {:?} ({:?})\",\n             extern_crate,\n             self.def_map.edition,\n@@ -718,7 +718,7 @@ impl DefCollector<'_> {\n     }\n \n     fn resolve_import(&self, module_id: LocalModuleId, import: &Import) -> PartialResolvedImport {\n-        log::debug!(\"resolving import: {:?} ({:?})\", import, self.def_map.edition);\n+        tracing::debug!(\"resolving import: {:?} ({:?})\", import, self.def_map.edition);\n         if import.is_extern_crate {\n             let res = self.def_map.resolve_name_in_extern_prelude(\n                 self.db,\n@@ -794,7 +794,7 @@ impl DefCollector<'_> {\n                     def.macros = None;\n                 }\n \n-                log::debug!(\"resolved import {:?} ({:?}) to {:?}\", name, import, def);\n+                tracing::debug!(\"resolved import {:?} ({:?}) to {:?}\", name, import, def);\n \n                 // extern crates in the crate root are special-cased to insert entries into the extern prelude: rust-lang/rust#54658\n                 if import.is_extern_crate && module_id == self.def_map.root {\n@@ -806,7 +806,7 @@ impl DefCollector<'_> {\n                 self.update(module_id, &[(name, def)], vis, ImportType::Named);\n             }\n             ImportKind::Glob => {\n-                log::debug!(\"glob import: {:?}\", import);\n+                tracing::debug!(\"glob import: {:?}\", import);\n                 match def.take_types() {\n                     Some(ModuleDefId::ModuleId(m)) => {\n                         if import.is_prelude {\n@@ -895,10 +895,10 @@ impl DefCollector<'_> {\n                         self.update(module_id, &resolutions, vis, ImportType::Glob);\n                     }\n                     Some(d) => {\n-                        log::debug!(\"glob import {:?} from non-module/enum {:?}\", import, d);\n+                        tracing::debug!(\"glob import {:?} from non-module/enum {:?}\", import, d);\n                     }\n                     None => {\n-                        log::debug!(\"glob import {:?} didn't resolve as type\", import);\n+                        tracing::debug!(\"glob import {:?} didn't resolve as type\", import);\n                     }\n                 }\n             }\n@@ -947,7 +947,7 @@ impl DefCollector<'_> {\n                     let tr = match res.take_types() {\n                         Some(ModuleDefId::TraitId(tr)) => tr,\n                         Some(other) => {\n-                            log::debug!(\"non-trait `_` import of {:?}\", other);\n+                            tracing::debug!(\"non-trait `_` import of {:?}\", other);\n                             continue;\n                         }\n                         None => continue,\n@@ -1167,7 +1167,7 @@ impl DefCollector<'_> {\n     ) {\n         if EXPANSION_DEPTH_LIMIT.check(depth).is_err() {\n             cov_mark::hit!(macro_expansion_overflow);\n-            log::warn!(\"macro expansion is too deep\");\n+            tracing::warn!(\"macro expansion is too deep\");\n             return;\n         }\n         let file_id = macro_call_id.as_file();\n@@ -1694,7 +1694,7 @@ impl ModCollector<'_, '_> {\n             } else if self.is_builtin_or_registered_attr(&attr.path) {\n                 continue;\n             } else {\n-                log::debug!(\"non-builtin attribute {}\", attr.path);\n+                tracing::debug!(\"non-builtin attribute {}\", attr.path);\n \n                 let ast_id = AstIdWithPath::new(\n                     self.file_id(),\n@@ -1768,7 +1768,7 @@ impl ModCollector<'_, '_> {\n             }\n             None => {\n                 // FIXME: diagnose\n-                log::debug!(\"malformed derive: {:?}\", attr);\n+                tracing::debug!(\"malformed derive: {:?}\", attr);\n             }\n         }\n     }"}, {"sha": "031ff8b181a69e4447911e9efc5e49f1ade15f37", "filename": "crates/hir_def/src/nameres/mod_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -27,7 +27,7 @@ impl ModDir {\n     fn child(&self, dir_path: DirPath, root_non_dir_owner: bool) -> Option<ModDir> {\n         let depth = self.depth + 1;\n         if MOD_DEPTH_LIMIT.check(depth as usize).is_err() {\n-            log::error!(\"MOD_DEPTH_LIMIT exceeded\");\n+            tracing::error!(\"MOD_DEPTH_LIMIT exceeded\");\n             cov_mark::hit!(circular_mods);\n             return None;\n         }"}, {"sha": "3beab9dcc372a974518fa6fb7c8aa2ad18705dd3", "filename": "crates/hir_def/src/nameres/path_resolution.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -116,7 +116,7 @@ impl DefMap {\n             if self.block_id() != m.block {\n                 cov_mark::hit!(adjust_vis_in_block_def_map);\n                 vis = Visibility::Module(self.module_id(self.root()));\n-                log::debug!(\"visibility {:?} points outside DefMap, adjusting to {:?}\", m, vis);\n+                tracing::debug!(\"visibility {:?} points outside DefMap, adjusting to {:?}\", m, vis);\n             }\n         }\n \n@@ -204,7 +204,7 @@ impl DefMap {\n                     Some((idx, segment)) => (idx, segment),\n                     None => return ResolvePathResult::empty(ReachedFixedPoint::Yes),\n                 };\n-                log::debug!(\"resolving {:?} in crate root (+ extern prelude)\", segment);\n+                tracing::debug!(\"resolving {:?} in crate root (+ extern prelude)\", segment);\n                 self.resolve_name_in_crate_root_or_extern_prelude(db, segment)\n             }\n             PathKind::Plain => {\n@@ -221,7 +221,7 @@ impl DefMap {\n                 let prefer_module =\n                     if path.segments().len() == 1 { shadow } else { BuiltinShadowMode::Module };\n \n-                log::debug!(\"resolving {:?} in module\", segment);\n+                tracing::debug!(\"resolving {:?} in module\", segment);\n                 self.resolve_name_in_module(db, original_module, segment, prefer_module)\n             }\n             PathKind::Super(lvl) => {\n@@ -236,7 +236,11 @@ impl DefMap {\n                                     PathKind::Super(lvl - i),\n                                     path.segments().to_vec(),\n                                 );\n-                                log::debug!(\"`super` path: {} -> {} in parent map\", path, new_path);\n+                                tracing::debug!(\n+                                    \"`super` path: {} -> {} in parent map\",\n+                                    path,\n+                                    new_path\n+                                );\n                                 return block.parent.def_map(db).resolve_path_fp_with_macro(\n                                     db,\n                                     mode,\n@@ -246,7 +250,7 @@ impl DefMap {\n                                 );\n                             }\n                             None => {\n-                                log::debug!(\"super path in root module\");\n+                                tracing::debug!(\"super path in root module\");\n                                 return ResolvePathResult::empty(ReachedFixedPoint::Yes);\n                             }\n                         },\n@@ -270,7 +274,7 @@ impl DefMap {\n                     None => return ResolvePathResult::empty(ReachedFixedPoint::Yes),\n                 };\n                 if let Some(def) = self.extern_prelude.get(segment) {\n-                    log::debug!(\"absolute path {:?} resolved to crate {:?}\", path, def);\n+                    tracing::debug!(\"absolute path {:?} resolved to crate {:?}\", path, def);\n                     PerNs::types(*def, Visibility::Public)\n                 } else {\n                     return ResolvePathResult::empty(ReachedFixedPoint::No); // extern crate declarations can add to the extern prelude\n@@ -299,7 +303,7 @@ impl DefMap {\n                             PathKind::Super(0),\n                             path.segments()[i..].iter().cloned(),\n                         );\n-                        log::debug!(\"resolving {:?} in other crate\", path);\n+                        tracing::debug!(\"resolving {:?} in other crate\", path);\n                         let defp_map = module.def_map(db);\n                         let (def, s) = defp_map.resolve_path(db, module.local_id, &path, shadow);\n                         return ResolvePathResult::with(\n@@ -351,7 +355,7 @@ impl DefMap {\n                 s => {\n                     // could be an inherent method call in UFCS form\n                     // (`Struct::method`), or some other kind of associated item\n-                    log::debug!(\n+                    tracing::debug!(\n                         \"path segment {:?} resolved to non-module {:?}, but is not last\",\n                         segment,\n                         curr,"}, {"sha": "8c3454b31b7d5f933125d814a18114cb1de279d8", "filename": "crates/hir_def/src/nameres/proc_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_def%2Fsrc%2Fnameres%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_def%2Fsrc%2Fnameres%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fproc_macro.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -70,7 +70,7 @@ impl Attrs {\n                 }\n \n                 _ => {\n-                    log::trace!(\"malformed `#[proc_macro_derive]`: {}\", derive);\n+                    tracing::trace!(\"malformed `#[proc_macro_derive]`: {}\", derive);\n                     None\n                 }\n             }"}, {"sha": "9cd27681061eb237ab6c05c5698f14f30b0f265e", "filename": "crates/hir_expand/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2FCargo.toml?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -10,7 +10,7 @@ doctest = false\n \n [dependencies]\n cov-mark = \"2.0.0-pre.1\"\n-log = \"0.4.8\"\n+tracing = \"0.1\"\n either = \"1.5.3\"\n rustc-hash = \"1.0.0\"\n la-arena = { version = \"0.2.0\", path = \"../../lib/arena\" }"}, {"sha": "9ab61ce7cee29aad2224b7f67dad102cd641ad84", "filename": "crates/hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -1,6 +1,6 @@\n //! Builtin derives.\n \n-use log::debug;\n+use tracing::debug;\n \n use mbe::ExpandResult;\n use parser::FragmentKind;"}, {"sha": "e990d5fce6a04dae0c81d9dec7433b967299fb1f", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -203,7 +203,7 @@ fn parse_macro_expansion(\n                 .collect::<Vec<_>>()\n                 .join(\"\\n\");\n \n-        log::warn!(\n+        tracing::warn!(\n             \"fail on macro_parse: (reason: {:?} macro_call: {:#}) parents: {}\",\n             err,\n             node.value,\n@@ -217,13 +217,13 @@ fn parse_macro_expansion(\n \n     let fragment_kind = macro_fragment_kind(db, macro_file.macro_call_id);\n \n-    log::debug!(\"expanded = {}\", tt.as_debug_string());\n-    log::debug!(\"kind = {:?}\", fragment_kind);\n+    tracing::debug!(\"expanded = {}\", tt.as_debug_string());\n+    tracing::debug!(\"kind = {:?}\", fragment_kind);\n \n     let (parse, rev_token_map) = match mbe::token_tree_to_syntax_node(&tt, fragment_kind) {\n         Ok(it) => it,\n         Err(err) => {\n-            log::debug!(\n+            tracing::debug!(\n                 \"failed to parse expansion to {:?} = {}\",\n                 fragment_kind,\n                 tt.as_debug_string()\n@@ -250,7 +250,7 @@ fn parse_macro_expansion(\n             }\n         }\n         None => {\n-            log::debug!(\"parse = {:?}\", parse.syntax_node().kind());\n+            tracing::debug!(\"parse = {:?}\", parse.syntax_node().kind());\n             ExpandResult { value: Some((parse, Arc::new(rev_token_map))), err: None }\n         }\n     }\n@@ -321,7 +321,7 @@ fn macro_def(db: &dyn AstDatabase, id: MacroDefId) -> Option<Arc<TokenExpander>>\n                     Ok(it) => it,\n                     Err(err) => {\n                         let name = macro_rules.name().map(|n| n.to_string()).unwrap_or_default();\n-                        log::warn!(\"fail on macro_def parse ({}): {:?} {:#?}\", name, err, tt);\n+                        tracing::warn!(\"fail on macro_def parse ({}): {:?} {:#?}\", name, err, tt);\n                         return None;\n                     }\n                 };\n@@ -334,7 +334,7 @@ fn macro_def(db: &dyn AstDatabase, id: MacroDefId) -> Option<Arc<TokenExpander>>\n                     Ok(it) => it,\n                     Err(err) => {\n                         let name = macro_def.name().map(|n| n.to_string()).unwrap_or_default();\n-                        log::warn!(\"fail on macro_def parse ({}): {:?} {:#?}\", name, err, tt);\n+                        tracing::warn!(\"fail on macro_def parse ({}): {:?} {:#?}\", name, err, tt);\n                         return None;\n                     }\n                 };"}, {"sha": "512cafe69d33f7004ea789660a09cfecefc740b1", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -561,7 +561,7 @@ impl<'a> InFile<&'a SyntaxNode> {\n             Some(range) => {\n                 let original_file = range.file_id.original_file(db);\n                 if range.file_id != original_file.into() {\n-                    log::error!(\"Failed mapping up more for {:?}\", range);\n+                    tracing::error!(\"Failed mapping up more for {:?}\", range);\n                 }\n                 Some(FileRange { file_id: original_file, range: range.value })\n             }"}, {"sha": "a3c07518e7a795df814adfa9795e6f35a7c0ec54", "filename": "crates/hir_ty/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2FCargo.toml?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -14,7 +14,7 @@ itertools = \"0.10.0\"\n arrayvec = \"0.7\"\n smallvec = \"1.2.0\"\n ena = \"0.14.0\"\n-log = \"0.4.8\"\n+tracing = \"0.1\"\n rustc-hash = \"1.1.0\"\n scoped-tls = \"1\"\n chalk-solve = { version = \"0.70\", default-features = false }"}, {"sha": "8c18c6dfed015be7882759df2d7327ecc8950316", "filename": "crates/hir_ty/src/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -10,7 +10,7 @@ use chalk_ir::{cast::Cast, fold::Fold, interner::HasInterner, VariableKind};\n use hir_def::lang_item::LangItemTarget;\n use hir_expand::name::name;\n use limit::Limit;\n-use log::{info, warn};\n+use tracing::{info, warn};\n \n use crate::{\n     db::HirDatabase, static_lifetime, AliasEq, AliasTy, BoundVar, Canonical, CanonicalVarKinds,"}, {"sha": "d26a0293db87da531edecced1be48b242b2363b1", "filename": "crates/hir_ty/src/chalk_db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -3,7 +3,7 @@\n use std::sync::Arc;\n \n use cov_mark::hit;\n-use log::debug;\n+use tracing::debug;\n \n use chalk_ir::{cast::Cast, fold::shift::Shift, CanonicalVarKinds};\n use chalk_solve::rust_ir::{self, OpaqueTyDatumBound, WellKnownTrait};"}, {"sha": "0e323c3013a3700a6c76e4a17371664ce712967b", "filename": "crates/hir_ty/src/consteval.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -28,7 +28,10 @@ impl ConstExt for Const {\n             chalk_ir::ConstValue::Concrete(..) => false,\n \n             _ => {\n-                log::error!(\"is_unknown was called on a non-concrete constant value! {:?}\", self);\n+                tracing::error!(\n+                    \"is_unknown was called on a non-concrete constant value! {:?}\",\n+                    self\n+                );\n                 true\n             }\n         }"}, {"sha": "976c1308e7a0b5b3cdbe6ae912945b344b65b03b", "filename": "crates/hir_ty/src/traits.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -81,7 +81,7 @@ pub(crate) fn trait_solve_query(\n         GoalData::DomainGoal(DomainGoal::Holds(WhereClause::AliasEq(_))) => \"alias_eq\".to_string(),\n         _ => \"??\".to_string(),\n     });\n-    log::info!(\"trait_solve_query({:?})\", goal.value.goal);\n+    tracing::info!(\"trait_solve_query({:?})\", goal.value.goal);\n \n     if let GoalData::DomainGoal(DomainGoal::Holds(WhereClause::AliasEq(AliasEq {\n         alias: AliasTy::Projection(projection_ty),\n@@ -106,7 +106,7 @@ fn solve(\n     goal: &chalk_ir::UCanonical<chalk_ir::InEnvironment<chalk_ir::Goal<Interner>>>,\n ) -> Option<chalk_solve::Solution<Interner>> {\n     let context = ChalkContext { db, krate };\n-    log::debug!(\"solve goal: {:?}\", goal);\n+    tracing::debug!(\"solve goal: {:?}\", goal);\n     let mut solver = create_chalk_solver();\n \n     let fuel = std::cell::Cell::new(CHALK_SOLVER_FUEL);\n@@ -116,7 +116,7 @@ fn solve(\n         let remaining = fuel.get();\n         fuel.set(remaining - 1);\n         if remaining == 0 {\n-            log::debug!(\"fuel exhausted\");\n+            tracing::debug!(\"fuel exhausted\");\n         }\n         remaining > 0\n     };\n@@ -136,7 +136,7 @@ fn solve(\n             solver.solve_limited(&context, goal, &should_continue)\n         };\n \n-        log::debug!(\"solve({:?}) => {:?}\", goal, solution);\n+        tracing::debug!(\"solve({:?}) => {:?}\", goal, solution);\n \n         solution\n     };"}, {"sha": "804002a4b334af5ee4617cb69580d8bcafe396f2", "filename": "crates/ide/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2FCargo.toml?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -13,7 +13,7 @@ cov-mark = \"2.0.0-pre.1\"\n either = \"1.5.3\"\n indexmap = \"1.4.0\"\n itertools = \"0.10.0\"\n-log = \"0.4.8\"\n+tracing = \"0.1\"\n rustc-hash = \"1.1.0\"\n oorandom = \"11.1.2\"\n pulldown-cmark-to-cmark = \"6.0.0\""}, {"sha": "4a0c0fcca9c21cc09ba221c2732b0cacc93e7570", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -353,7 +353,7 @@ impl TryToNav for hir::MacroDef {\n             Either::Left(it) => it,\n             Either::Right(it) => it,\n         };\n-        log::debug!(\"nav target {:#?}\", name_owner.syntax());\n+        tracing::debug!(\"nav target {:#?}\", name_owner.syntax());\n         let mut res = NavigationTarget::from_named(\n             db,\n             src.as_ref().with_value(name_owner),"}, {"sha": "67c86216f1f3e0f60cd8309df96f3d8367d3e5ad", "filename": "crates/ide_completion/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fide_completion%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fide_completion%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2FCargo.toml?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -11,7 +11,7 @@ doctest = false\n [dependencies]\n cov-mark = \"2.0.0-pre.1\"\n itertools = \"0.10.0\"\n-log = \"0.4.8\"\n+tracing = \"0.1\"\n rustc-hash = \"1.1.0\"\n either = \"1.6.1\"\n once_cell = \"1.7\""}, {"sha": "981a58347a515fa7cb1e16523a52e7c43fe61d28", "filename": "crates/ide_db/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fide_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fide_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2FCargo.toml?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -10,7 +10,7 @@ doctest = false\n \n [dependencies]\n cov-mark = \"2.0.0-pre.1\"\n-log = \"0.4.8\"\n+tracing = \"0.1\"\n rayon = \"1.5.0\"\n fst = { version = \"0.4\", default-features = false }\n rustc-hash = \"1.1.0\""}, {"sha": "d9bf7c9cc713b1955af1dfdb48cd9d6e4af7c3d1", "filename": "crates/ide_db/src/apply_change.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fide_db%2Fsrc%2Fapply_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fide_db%2Fsrc%2Fapply_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fapply_change.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -20,7 +20,7 @@ impl RootDatabase {\n     pub fn apply_change(&mut self, change: Change) {\n         let _p = profile::span(\"RootDatabase::apply_change\");\n         self.request_cancellation();\n-        log::info!(\"apply_change {:?}\", change);\n+        tracing::info!(\"apply_change {:?}\", change);\n         if let Some(roots) = &change.roots {\n             let mut local_roots = FxHashSet::default();\n             let mut library_roots = FxHashSet::default();"}, {"sha": "1a522e907044a884720ddf30f0aca226d1ecab7d", "filename": "crates/mbe/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fmbe%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fmbe%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2FCargo.toml?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -12,8 +12,8 @@ doctest = false\n cov-mark = \"2.0.0-pre.1\"\n rustc-hash = \"1.1.0\"\n smallvec = \"1.2.0\"\n-log = \"0.4.8\"\n expect-test = \"1.1\"\n+tracing = \"0.1\"\n \n syntax = { path = \"../syntax\", version = \"0.0.0\" }\n parser = { path = \"../parser\", version = \"0.0.0\" }"}, {"sha": "8140f25b0673d0d1514d5b4cb0ac3bda451c5078", "filename": "crates/mbe/src/expander/transcriber.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fmbe%2Fsrc%2Fexpander%2Ftranscriber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fmbe%2Fsrc%2Fexpander%2Ftranscriber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Ftranscriber.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -174,7 +174,11 @@ fn expand_repeat(\n \n         counter += 1;\n         if counter == limit {\n-            log::warn!(\"expand_tt in repeat pattern exceed limit => {:#?}\\n{:#?}\", template, ctx);\n+            tracing::warn!(\n+                \"expand_tt in repeat pattern exceed limit => {:#?}\\n{:#?}\",\n+                template,\n+                ctx\n+            );\n             return ExpandResult {\n                 value: Fragment::Tokens(Subtree::default().into()),\n                 err: Some(ExpandError::Other(\"Expand exceed limit\".to_string())),"}, {"sha": "e59b903bc5bae6b3d70d8613748b9a0f2a6de95f", "filename": "crates/proc_macro_api/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fproc_macro_api%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fproc_macro_api%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2FCargo.toml?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -11,7 +11,7 @@ doctest = false\n [dependencies]\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = { version = \"1.0\", features = [\"unbounded_depth\"] }\n-log = \"0.4.8\"\n+tracing = \"0.1\"\n crossbeam-channel = \"0.5.0\"\n jod-thread = \"0.1.1\"\n memmap2 = \"0.3.0\""}, {"sha": "04248e04478c96cb0e3d5b640f93525909448525", "filename": "crates/proc_macro_api/src/msg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fproc_macro_api%2Fsrc%2Fmsg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fproc_macro_api%2Fsrc%2Fmsg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fmsg.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -93,7 +93,7 @@ fn read_json<'a>(\n         // Some ill behaved macro try to use stdout for debugging\n         // We ignore it here\n         if !buf.starts_with('{') {\n-            log::error!(\"proc-macro tried to print : {}\", buf);\n+            tracing::error!(\"proc-macro tried to print : {}\", buf);\n             continue;\n         }\n \n@@ -102,7 +102,7 @@ fn read_json<'a>(\n }\n \n fn write_json(out: &mut impl Write, msg: &str) -> io::Result<()> {\n-    log::debug!(\"> {}\", msg);\n+    tracing::debug!(\"> {}\", msg);\n     out.write_all(msg.as_bytes())?;\n     out.write_all(b\"\\n\")?;\n     out.flush()?;"}, {"sha": "2fa5d65be28b3d7b4d7b2e08c15ae6162001708e", "filename": "crates/proc_macro_api/src/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -54,7 +54,7 @@ impl ProcMacroProcessSrv {\n             Ok(res) => res,\n             Err(err) => {\n                 let result = self.process.child.try_wait();\n-                log::error!(\n+                tracing::error!(\n                     \"proc macro server crashed, server process state: {:?}, server request error: {:?}\",\n                     result,\n                     err"}, {"sha": "cea2c16a638c06f26238cdaa7ee388e14fae581a", "filename": "crates/project_model/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fproject_model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fproject_model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2FCargo.toml?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -9,7 +9,7 @@ edition = \"2018\"\n doctest = false\n \n [dependencies]\n-log = \"0.4.8\"\n+tracing = \"0.1\"\n rustc-hash = \"1.1.0\"\n cargo_metadata = \"0.14\"\n semver = \"1\""}, {"sha": "764784d7708e0768cb8133b715f275937c7c2792", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -283,7 +283,7 @@ impl CargoWorkspace {\n             let meta = from_value::<PackageMetadata>(metadata.clone()).unwrap_or_default();\n             let is_member = ws_members.contains(id);\n             let edition = edition.parse::<Edition>().unwrap_or_else(|err| {\n-                log::error!(\"Failed to parse edition {}\", err);\n+                tracing::error!(\"Failed to parse edition {}\", err);\n                 Edition::CURRENT\n             });\n \n@@ -322,7 +322,7 @@ impl CargoWorkspace {\n                 // https://github.com/rust-lang/cargo/issues/7841\n                 // is fixed and hits stable (around 1.43-is probably?).\n                 None => {\n-                    log::error!(\"Node id do not match in cargo metadata, ignoring {}\", node.id);\n+                    tracing::error!(\"Node id do not match in cargo metadata, ignoring {}\", node.id);\n                     continue;\n                 }\n             };\n@@ -335,7 +335,7 @@ impl CargoWorkspace {\n                 let pkg = match pkg_by_id.get(&dep_node.pkg) {\n                     Some(&pkg) => pkg,\n                     None => {\n-                        log::error!(\n+                        tracing::error!(\n                             \"Dep node id do not match in cargo metadata, ignoring {}\",\n                             dep_node.pkg\n                         );\n@@ -385,7 +385,7 @@ impl CargoWorkspace {\n fn rustc_discover_host_triple(cargo_toml: &ManifestPath) -> Option<String> {\n     let mut rustc = Command::new(toolchain::rustc());\n     rustc.current_dir(cargo_toml.parent()).arg(\"-vV\");\n-    log::debug!(\"Discovering host platform by {:?}\", rustc);\n+    tracing::debug!(\"Discovering host platform by {:?}\", rustc);\n     match utf8_stdout(rustc) {\n         Ok(stdout) => {\n             let field = \"host: \";\n@@ -394,12 +394,12 @@ fn rustc_discover_host_triple(cargo_toml: &ManifestPath) -> Option<String> {\n                 Some(target.to_string())\n             } else {\n                 // If we fail to resolve the host platform, it's not the end of the world.\n-                log::info!(\"rustc -vV did not report host platform, got:\\n{}\", stdout);\n+                tracing::info!(\"rustc -vV did not report host platform, got:\\n{}\", stdout);\n                 None\n             }\n         }\n         Err(e) => {\n-            log::warn!(\"Failed to discover host platform: {}\", e);\n+            tracing::warn!(\"Failed to discover host platform: {}\", e);\n             None\n         }\n     }\n@@ -412,7 +412,7 @@ fn cargo_config_build_target(cargo_toml: &ManifestPath) -> Option<String> {\n         .args(&[\"-Z\", \"unstable-options\", \"config\", \"get\", \"build.target\"])\n         .env(\"RUSTC_BOOTSTRAP\", \"1\");\n     // if successful we receive `build.target = \"target-triple\"`\n-    log::debug!(\"Discovering cargo config target by {:?}\", cargo_config);\n+    tracing::debug!(\"Discovering cargo config target by {:?}\", cargo_config);\n     match utf8_stdout(cargo_config) {\n         Ok(stdout) => stdout\n             .strip_prefix(\"build.target = \\\"\")"}, {"sha": "515fe20031669f63d11661cf4f384942a4018990", "filename": "crates/project_model/src/rustc_cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fproject_model%2Fsrc%2Frustc_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fproject_model%2Fsrc%2Frustc_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Frustc_cfg.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -20,7 +20,7 @@ pub(crate) fn get(cargo_toml: Option<&ManifestPath>, target: Option<&str>) -> Ve\n \n     match get_rust_cfgs(cargo_toml, target) {\n         Ok(rustc_cfgs) => res.extend(rustc_cfgs.lines().map(|it| it.parse().unwrap())),\n-        Err(e) => log::error!(\"failed to get rustc cfgs: {:#}\", e),\n+        Err(e) => tracing::error!(\"failed to get rustc cfgs: {:#}\", e),\n     }\n \n     res"}, {"sha": "6c17492948bb9ad28f44ed40190ecb19e28637fe", "filename": "crates/project_model/src/sysroot.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fsysroot.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -54,15 +54,15 @@ impl Sysroot {\n     }\n \n     pub fn discover(dir: &AbsPath) -> Result<Sysroot> {\n-        log::debug!(\"Discovering sysroot for {}\", dir.display());\n+        tracing::debug!(\"Discovering sysroot for {}\", dir.display());\n         let sysroot_dir = discover_sysroot_dir(dir)?;\n         let sysroot_src_dir = discover_sysroot_src_dir(&sysroot_dir, dir)?;\n         let res = Sysroot::load(sysroot_src_dir)?;\n         Ok(res)\n     }\n \n     pub fn discover_rustc(cargo_toml: &ManifestPath) -> Option<ManifestPath> {\n-        log::debug!(\"Discovering rustc source for {}\", cargo_toml.display());\n+        tracing::debug!(\"Discovering rustc source for {}\", cargo_toml.display());\n         let current_dir = cargo_toml.parent();\n         discover_sysroot_dir(current_dir).ok().and_then(|sysroot_dir| get_rustc_src(&sysroot_dir))\n     }\n@@ -132,7 +132,7 @@ impl Sysroot {\n fn discover_sysroot_dir(current_dir: &AbsPath) -> Result<AbsPathBuf> {\n     let mut rustc = Command::new(toolchain::rustc());\n     rustc.current_dir(current_dir).args(&[\"--print\", \"sysroot\"]);\n-    log::debug!(\"Discovering sysroot by {:?}\", rustc);\n+    tracing::debug!(\"Discovering sysroot by {:?}\", rustc);\n     let stdout = utf8_stdout(rustc)?;\n     Ok(AbsPathBuf::assert(PathBuf::from(stdout)))\n }\n@@ -146,10 +146,10 @@ fn discover_sysroot_src_dir(\n             .map_err(|path| format_err!(\"RUST_SRC_PATH must be absolute: {}\", path.display()))?;\n         let core = path.join(\"core\");\n         if fs::metadata(&core).is_ok() {\n-            log::debug!(\"Discovered sysroot by RUST_SRC_PATH: {}\", path.display());\n+            tracing::debug!(\"Discovered sysroot by RUST_SRC_PATH: {}\", path.display());\n             return Ok(path);\n         }\n-        log::debug!(\"RUST_SRC_PATH is set, but is invalid (no core: {:?}), ignoring\", core);\n+        tracing::debug!(\"RUST_SRC_PATH is set, but is invalid (no core: {:?}), ignoring\", core);\n     }\n \n     get_rust_src(sysroot_path)\n@@ -174,7 +174,7 @@ try installing the Rust source the same way you installed rustc\",\n fn get_rustc_src(sysroot_path: &AbsPath) -> Option<ManifestPath> {\n     let rustc_src = sysroot_path.join(\"lib/rustlib/rustc-src/rust/compiler/rustc/Cargo.toml\");\n     let rustc_src = ManifestPath::try_from(rustc_src).ok()?;\n-    log::debug!(\"Checking for rustc source code: {}\", rustc_src.display());\n+    tracing::debug!(\"Checking for rustc source code: {}\", rustc_src.display());\n     if fs::metadata(&rustc_src).is_ok() {\n         Some(rustc_src)\n     } else {\n@@ -185,7 +185,10 @@ fn get_rustc_src(sysroot_path: &AbsPath) -> Option<ManifestPath> {\n fn get_rust_src(sysroot_path: &AbsPath) -> Option<AbsPathBuf> {\n     // Try the new path first since the old one still exists.\n     let rust_src = sysroot_path.join(\"lib/rustlib/src/rust\");\n-    log::debug!(\"Checking sysroot (looking for `library` and `src` dirs): {}\", rust_src.display());\n+    tracing::debug!(\n+        \"Checking sysroot (looking for `library` and `src` dirs): {}\",\n+        rust_src.display()\n+    );\n     [\"library\", \"src\"].iter().map(|it| rust_src.join(it)).find(|it| fs::metadata(it).is_ok())\n }\n "}, {"sha": "8e4aa0506f655b62ffc5aab4908b911869c7986b", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -384,9 +384,9 @@ impl ProjectWorkspace {\n             }\n         };\n         if crate_graph.patch_cfg_if() {\n-            log::debug!(\"Patched std to depend on cfg-if\")\n+            tracing::debug!(\"Patched std to depend on cfg-if\")\n         } else {\n-            log::debug!(\"Did not patch std to depend on cfg-if\")\n+            tracing::debug!(\"Did not patch std to depend on cfg-if\")\n         }\n         crate_graph\n     }\n@@ -623,7 +623,7 @@ fn detached_files_to_crate_graph(\n         let file_id = match load(detached_file) {\n             Some(file_id) => file_id,\n             None => {\n-                log::error!(\"Failed to load detached file {:?}\", detached_file);\n+                tracing::error!(\"Failed to load detached file {:?}\", detached_file);\n                 continue;\n             }\n         };\n@@ -847,7 +847,7 @@ fn sysroot_to_crate_graph(\n \n fn add_dep(graph: &mut CrateGraph, from: CrateId, name: CrateName, to: CrateId) {\n     if let Err(err) = graph.add_dep(from, name, to) {\n-        log::error!(\"{}\", err)\n+        tracing::error!(\"{}\", err)\n     }\n }\n "}, {"sha": "a81581894fb3b14df9c90d56685817ae05cff930", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -20,10 +20,8 @@ path = \"src/bin/main.rs\"\n anyhow = \"1.0.26\"\n crossbeam-channel = \"0.5.0\"\n dissimilar = \"1.0.2\"\n-env_logger = { version = \"0.9\", default-features = false }\n itertools = \"0.10.0\"\n jod-thread = \"0.1.0\"\n-log = \"0.4.8\"\n lsp-types = { version = \"0.89.0\", features = [\"proposed\"] }\n parking_lot = \"0.11.0\"\n xflags = \"0.2.1\"\n@@ -36,7 +34,8 @@ rayon = \"1.5\"\n mimalloc = { version = \"0.1.19\", default-features = false, optional = true }\n lsp-server = \"0.5.1\"\n tracing = \"0.1\"\n-tracing-subscriber = { version = \"0.2\", default-features = false, features = [\"env-filter\", \"registry\"] }\n+tracing-subscriber = { version = \"0.2\", default-features = false, features = [\"env-filter\", \"registry\", \"fmt\", \"tracing-log\"] }\n+tracing-log = \"0.1.2\"\n tracing-tree = { version = \"0.1.4\" }\n always-assert = \"0.1\"\n "}, {"sha": "9a31dec7e3f5c66d8c9eae2705a360f549ec87d1", "filename": "crates/rust-analyzer/src/bin/logger.rs", "status": "modified", "additions": 118, "deletions": 64, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -1,88 +1,142 @@\n-//! Simple logger that logs either to stderr or to a file, using `env_logger`\n-//! filter syntax. Amusingly, there's no crates.io crate that can do this and\n-//! only this.\n+//! Simple logger that logs either to stderr or to a file, using `tracing_subscriber`\n+//! filter syntax and `tracing_appender` for non blocking output.\n \n use std::{\n+    fmt::{self, Write},\n     fs::File,\n-    io::{self, BufWriter, Write},\n+    io,\n+    sync::Arc,\n };\n \n-use env_logger::filter::{Builder, Filter};\n-use log::{Log, Metadata, Record};\n-use parking_lot::Mutex;\n+use rust_analyzer::Result;\n+use tracing::{level_filters::LevelFilter, Event, Subscriber};\n+use tracing_log::NormalizeEvent;\n+use tracing_subscriber::{\n+    fmt::{writer::BoxMakeWriter, FmtContext, FormatEvent, FormatFields, FormattedFields},\n+    layer::SubscriberExt,\n+    registry::LookupSpan,\n+    util::SubscriberInitExt,\n+    EnvFilter, Registry,\n+};\n+use tracing_tree::HierarchicalLayer;\n \n pub(crate) struct Logger {\n-    filter: Filter,\n-    file: Option<Mutex<BufWriter<File>>>,\n-    no_buffering: bool,\n+    filter: EnvFilter,\n+    file: Option<File>,\n }\n \n impl Logger {\n-    pub(crate) fn new(log_file: Option<File>, no_buffering: bool, filter: Option<&str>) -> Logger {\n-        let filter = {\n-            let mut builder = Builder::new();\n-            if let Some(filter) = filter {\n-                builder.parse(filter);\n-            }\n-            builder.build()\n-        };\n+    pub(crate) fn new(file: Option<File>, filter: Option<&str>) -> Logger {\n+        let filter = filter.map_or(EnvFilter::default(), |dirs| EnvFilter::new(dirs));\n \n-        let file = log_file.map(|it| Mutex::new(BufWriter::new(it)));\n-\n-        Logger { filter, file, no_buffering }\n+        Logger { filter, file }\n     }\n \n-    pub(crate) fn install(self) {\n-        let max_level = self.filter.filter();\n-        let _ = log::set_boxed_logger(Box::new(self)).map(|()| log::set_max_level(max_level));\n-    }\n-}\n+    pub(crate) fn install(self) -> Result<()> {\n+        // The meaning of CHALK_DEBUG I suspected is to tell chalk crates\n+        // (i.e. chalk-solve, chalk-ir, chalk-recursive) how to filter tracing\n+        // logs. But now we can only have just one filter, which means we have to\n+        // merge chalk filter to our main filter (from RA_LOG env).\n+        //\n+        // The acceptable syntax of CHALK_DEBUG is `target[span{field=value}]=level`.\n+        // As the value should only affect chalk crates, we'd better mannually\n+        // specify the target. And for simplicity, CHALK_DEBUG only accept the value\n+        // that specify level.\n+        let chalk_level_dir = std::env::var(\"CHALK_DEBUG\")\n+            .map(|val| {\n+                val.parse::<LevelFilter>().expect(\n+                    \"invalid CHALK_DEBUG value, expect right log level (like debug or trace)\",\n+                )\n+            })\n+            .ok();\n \n-impl Log for Logger {\n-    fn enabled(&self, metadata: &Metadata) -> bool {\n-        self.filter.enabled(metadata)\n-    }\n+        let chalk_layer = HierarchicalLayer::default()\n+            .with_indent_lines(true)\n+            .with_ansi(false)\n+            .with_indent_amount(2)\n+            .with_writer(std::io::stderr);\n+\n+        let writer = match self.file {\n+            Some(file) => BoxMakeWriter::new(Arc::new(file)),\n+            None => BoxMakeWriter::new(io::stderr),\n+        };\n+        let ra_fmt_layer =\n+            tracing_subscriber::fmt::layer().event_format(LoggerFormatter).with_writer(writer);\n \n-    fn log(&self, record: &Record) {\n-        if !self.filter.matches(record) {\n-            return;\n-        }\n-\n-        match &self.file {\n-            Some(w) => {\n-                let mut writer = w.lock();\n-                let _ = writeln!(\n-                    writer,\n-                    \"[{} {}] {}\",\n-                    record.level(),\n-                    record.module_path().unwrap_or_default(),\n-                    record.args(),\n-                );\n-\n-                if self.no_buffering {\n-                    let _ = writer.flush();\n-                }\n+        match chalk_level_dir {\n+            Some(val) => {\n+                Registry::default()\n+                    .with(\n+                        self.filter\n+                            .add_directive(format!(\"chalk_solve={}\", val).parse()?)\n+                            .add_directive(format!(\"chalk_ir={}\", val).parse()?)\n+                            .add_directive(format!(\"chalk_recursive={}\", val).parse()?),\n+                    )\n+                    .with(ra_fmt_layer)\n+                    .with(chalk_layer)\n+                    .init();\n             }\n             None => {\n-                let message = format!(\n-                    \"[{} {}] {}\\n\",\n-                    record.level(),\n-                    record.module_path().unwrap_or_default(),\n-                    record.args(),\n-                );\n-                eprint!(\"{}\", message);\n+                Registry::default().with(self.filter).with(ra_fmt_layer).init();\n             }\n         };\n+\n+        Ok(())\n     }\n+}\n \n-    fn flush(&self) {\n-        match &self.file {\n-            Some(w) => {\n-                let _ = w.lock().flush();\n-            }\n-            None => {\n-                let _ = io::stderr().flush();\n+#[derive(Debug)]\n+struct LoggerFormatter;\n+\n+impl<S, N> FormatEvent<S, N> for LoggerFormatter\n+where\n+    S: Subscriber + for<'a> LookupSpan<'a>,\n+    N: for<'a> FormatFields<'a> + 'static,\n+{\n+    fn format_event(\n+        &self,\n+        ctx: &FmtContext<'_, S, N>,\n+        writer: &mut dyn Write,\n+        event: &Event<'_>,\n+    ) -> fmt::Result {\n+        // Write level and target\n+        let level = *event.metadata().level();\n+\n+        // If this event is issued from `log` crate, then the value of target is\n+        // always \"log\". `tracing-log` has hard coded it for some reason, so we\n+        // need to extract it using `normalized_metadata` method which is part of\n+        // `tracing_log::NormalizeEvent`.\n+        let target = match event.normalized_metadata() {\n+            // This event is issued from `log` crate\n+            Some(log) => log.target(),\n+            None => event.metadata().target(),\n+        };\n+        write!(writer, \"[{} {}] \", level, target)?;\n+\n+        // Write spans and fields of each span\n+        ctx.visit_spans(|span| {\n+            write!(writer, \"{}\", span.name())?;\n+\n+            let ext = span.extensions();\n+\n+            // `FormattedFields` is a a formatted representation of the span's\n+            // fields, which is stored in its extensions by the `fmt` layer's\n+            // `new_span` method. The fields will have been formatted\n+            // by the same field formatter that's provided to the event\n+            // formatter in the `FmtContext`.\n+            let fields = &ext.get::<FormattedFields<N>>().expect(\"will never be `None`\");\n+\n+            if !fields.is_empty() {\n+                write!(writer, \"{{{}}}\", fields)?;\n             }\n-        }\n+            write!(writer, \": \")?;\n+\n+            Ok(())\n+        })?;\n+\n+        // Write fields on the event\n+        ctx.field_format().format_fields(writer, event)?;\n+\n+        writeln!(writer)\n     }\n }"}, {"sha": "f7e9415cc029d46b9ba6460ae90d6733ccdafad8", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 10, "deletions": 32, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -35,7 +35,7 @@ fn main() {\n     }\n \n     if let Err(err) = try_main() {\n-        log::error!(\"Unexpected error: {}\", err);\n+        tracing::error!(\"Unexpected error: {}\", err);\n         eprintln!(\"{}\", err);\n         process::exit(101);\n     }\n@@ -60,7 +60,7 @@ fn try_main() -> Result<()> {\n         log_file = Some(Path::new(env_log_file));\n     }\n \n-    setup_logging(log_file, flags.no_log_buffering)?;\n+    setup_logging(log_file)?;\n     let verbosity = flags.verbosity();\n \n     match flags.subcommand {\n@@ -91,7 +91,7 @@ fn try_main() -> Result<()> {\n     Ok(())\n }\n \n-fn setup_logging(log_file: Option<&Path>, no_buffering: bool) -> Result<()> {\n+fn setup_logging(log_file: Option<&Path>) -> Result<()> {\n     env::set_var(\"RUST_BACKTRACE\", \"short\");\n \n     let log_file = match log_file {\n@@ -104,42 +104,20 @@ fn setup_logging(log_file: Option<&Path>, no_buffering: bool) -> Result<()> {\n         None => None,\n     };\n     let filter = env::var(\"RA_LOG\").ok();\n-    logger::Logger::new(log_file, no_buffering, filter.as_deref()).install();\n-\n-    tracing_setup::setup_tracing()?;\n+    logger::Logger::new(log_file, filter.as_deref()).install()?;\n \n     profile::init();\n \n     Ok(())\n }\n \n-mod tracing_setup {\n-    use tracing::subscriber;\n-    use tracing_subscriber::layer::SubscriberExt;\n-    use tracing_subscriber::EnvFilter;\n-    use tracing_subscriber::Registry;\n-    use tracing_tree::HierarchicalLayer;\n-\n-    pub(crate) fn setup_tracing() -> super::Result<()> {\n-        let filter = EnvFilter::from_env(\"CHALK_DEBUG\");\n-        let layer = HierarchicalLayer::default()\n-            .with_indent_lines(true)\n-            .with_ansi(false)\n-            .with_indent_amount(2)\n-            .with_writer(std::io::stderr);\n-        let subscriber = Registry::default().with(filter).with(layer);\n-        subscriber::set_global_default(subscriber)?;\n-        Ok(())\n-    }\n-}\n-\n fn run_server() -> Result<()> {\n-    log::info!(\"server version {} will start\", env!(\"REV\"));\n+    tracing::info!(\"server version {} will start\", env!(\"REV\"));\n \n     let (connection, io_threads) = Connection::stdio();\n \n     let (initialize_id, initialize_params) = connection.initialize_start()?;\n-    log::info!(\"InitializeParams: {}\", initialize_params);\n+    tracing::info!(\"InitializeParams: {}\", initialize_params);\n     let initialize_params =\n         from_json::<lsp_types::InitializeParams>(\"InitializeParams\", initialize_params)?;\n \n@@ -176,7 +154,7 @@ fn run_server() -> Result<()> {\n     connection.initialize_finish(initialize_id, initialize_result)?;\n \n     if let Some(client_info) = initialize_params.client_info {\n-        log::info!(\"Client '{}' {}\", client_info.name, client_info.version.unwrap_or_default());\n+        tracing::info!(\"Client '{}' {}\", client_info.name, client_info.version.unwrap_or_default());\n     }\n \n     if config.linked_projects().is_empty() && config.detached_files().is_empty() {\n@@ -193,16 +171,16 @@ fn run_server() -> Result<()> {\n             .unwrap_or_else(|| vec![config.root_path.clone()]);\n \n         let discovered = ProjectManifest::discover_all(&workspace_roots);\n-        log::info!(\"discovered projects: {:?}\", discovered);\n+        tracing::info!(\"discovered projects: {:?}\", discovered);\n         if discovered.is_empty() {\n-            log::error!(\"failed to find any projects in {:?}\", workspace_roots);\n+            tracing::error!(\"failed to find any projects in {:?}\", workspace_roots);\n         }\n         config.discovered_projects = Some(discovered);\n     }\n \n     rust_analyzer::main_loop(config, connection)?;\n \n     io_threads.join()?;\n-    log::info!(\"server did shut down\");\n+    tracing::info!(\"server did shut down\");\n     Ok(())\n }"}, {"sha": "1823fddc086bc240d10995706519a05967aa6f20", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -131,7 +131,7 @@ fn completions_resolve_provider(client_caps: &ClientCapabilities) -> Option<bool\n     if completion_item_edit_resolve(client_caps) {\n         Some(true)\n     } else {\n-        log::info!(\"No `additionalTextEdits` completion resolve capability was found in the client capabilities, autoimport completion is disabled\");\n+        tracing::info!(\"No `additionalTextEdits` completion resolve capability was found in the client capabilities, autoimport completion is disabled\");\n         None\n     }\n }"}, {"sha": "7b6404eb2a7e6d377c3b6b3a266c725f4396a10f", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -85,7 +85,7 @@ pub fn load_workspace(\n         version: 0,\n     });\n \n-    log::debug!(\"crate graph: {:?}\", crate_graph);\n+    tracing::debug!(\"crate graph: {:?}\", crate_graph);\n     let host =\n         load_crate_graph(crate_graph, project_folders.source_root_config, &mut vfs, &receiver);\n "}, {"sha": "44a433028444a20617627c12aeacadbe501f8536", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -432,7 +432,7 @@ impl Config {\n         }\n     }\n     pub fn update(&mut self, mut json: serde_json::Value) {\n-        log::info!(\"updating config from JSON: {:#}\", json);\n+        tracing::info!(\"updating config from JSON: {:#}\", json);\n         if json.is_null() || json.as_object().map_or(false, |it| it.is_empty()) {\n             return;\n         }\n@@ -478,7 +478,9 @@ impl Config {\n                         ManifestOrProjectJson::Manifest(it) => {\n                             let path = self.root_path.join(it);\n                             ProjectManifest::from_manifest_file(path)\n-                                .map_err(|e| log::error!(\"failed to load linked project: {}\", e))\n+                                .map_err(|e| {\n+                                    tracing::error!(\"failed to load linked project: {}\", e)\n+                                })\n                                 .ok()?\n                                 .into()\n                         }"}, {"sha": "9cfd6c35af769d7c9529393b3e3d3a1c959c2211", "filename": "crates/rust-analyzer/src/dispatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -88,7 +88,7 @@ impl<'a> RequestDispatcher<'a> {\n \n     pub(crate) fn finish(&mut self) {\n         if let Some(req) = self.req.take() {\n-            log::error!(\"unknown request: {:?}\", req);\n+            tracing::error!(\"unknown request: {:?}\", req);\n             let response = lsp_server::Response::new_err(\n                 req.id,\n                 lsp_server::ErrorCode::MethodNotFound as i32,\n@@ -208,7 +208,7 @@ impl<'a> NotificationDispatcher<'a> {\n     pub(crate) fn finish(&mut self) {\n         if let Some(not) = &self.not {\n             if !not.method.starts_with(\"$/\") {\n-                log::error!(\"unhandled notification: {:?}\", not);\n+                tracing::error!(\"unhandled notification: {:?}\", not);\n             }\n         }\n     }"}, {"sha": "f2a40cb1992e7ee6f194e6816d83e7ff22fd1cff", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -271,7 +271,7 @@ impl GlobalState {\n             }\n \n             let duration = start.elapsed();\n-            log::info!(\"handled {} - ({}) in {:0.2?}\", method, response.id, duration);\n+            tracing::info!(\"handled {} - ({}) in {:0.2?}\", method, response.id, duration);\n             self.send(response.into());\n         }\n     }"}, {"sha": "aa56a028186a4c8c6cc59f2197d5619f3b686e29", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -1651,7 +1651,7 @@ fn run_rustfmt(\n                     }\n                 }\n                 Err(_) => {\n-                    log::error!(\n+                    tracing::error!(\n                         \"Unable to get file path for {}, rustfmt.toml might be ignored\",\n                         text_document.uri\n                     );\n@@ -1721,7 +1721,7 @@ fn run_rustfmt(\n                 // formatting because otherwise an error is surfaced to the user on top of the\n                 // syntax error diagnostics they're already receiving. This is especially jarring\n                 // if they have format on save enabled.\n-                log::info!(\"rustfmt exited with status 1, assuming parse error and ignoring\");\n+                tracing::info!(\"rustfmt exited with status 1, assuming parse error and ignoring\");\n                 Ok(None)\n             }\n             _ => {"}, {"sha": "8995d5a9b1a08beb65a2014178936c9f96011990", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -27,7 +27,7 @@ use crate::{\n };\n \n pub fn main_loop(config: Config, connection: Connection) -> Result<()> {\n-    log::info!(\"initial config: {:#?}\", config);\n+    tracing::info!(\"initial config: {:#?}\", config);\n \n     // Windows scheduler implements priority boosts: if thread waits for an\n     // event (like a condvar), and event fires, priority of the thread is\n@@ -182,10 +182,10 @@ impl GlobalState {\n         // NOTE: don't count blocking select! call as a loop-turn time\n         let _p = profile::span(\"GlobalState::handle_event\");\n \n-        log::info!(\"handle_event({:?})\", event);\n+        tracing::info!(\"handle_event({:?})\", event);\n         let task_queue_len = self.task_pool.handle.len();\n         if task_queue_len > 0 {\n-            log::info!(\"task queue len: {}\", task_queue_len);\n+            tracing::info!(\"task queue len: {}\", task_queue_len);\n         }\n \n         let was_quiescent = self.is_quiescent();\n@@ -359,7 +359,7 @@ impl GlobalState {\n                                         diag.fixes,\n                                     ),\n                                     Err(err) => {\n-                                        log::error!(\n+                                        tracing::error!(\n                                             \"File with cargo diagnostic not found in VFS: {}\",\n                                             err\n                                         );\n@@ -380,7 +380,7 @@ impl GlobalState {\n                                 flycheck::Progress::DidCancel => (Progress::End, None),\n                                 flycheck::Progress::DidFinish(result) => {\n                                     if let Err(err) = result {\n-                                        log::error!(\"cargo check failed: {}\", err)\n+                                        tracing::error!(\"cargo check failed: {}\", err)\n                                     }\n                                     (Progress::End, None)\n                                 }\n@@ -486,7 +486,7 @@ impl GlobalState {\n \n         let loop_duration = loop_start.elapsed();\n         if loop_duration > Duration::from_millis(100) {\n-            log::warn!(\"overly long loop turn: {:?}\", loop_duration);\n+            tracing::warn!(\"overly long loop turn: {:?}\", loop_duration);\n             self.poke_rust_analyzer_developer(format!(\n                 \"overly long loop turn: {:?}\",\n                 loop_duration\n@@ -617,7 +617,7 @@ impl GlobalState {\n                         .insert(path.clone(), DocumentData::new(params.text_document.version))\n                         .is_err()\n                     {\n-                        log::error!(\"duplicate DidOpenTextDocument: {}\", path)\n+                        tracing::error!(\"duplicate DidOpenTextDocument: {}\", path)\n                     }\n                     this.vfs\n                         .write()\n@@ -635,7 +635,7 @@ impl GlobalState {\n                             doc.version = params.text_document.version;\n                         }\n                         None => {\n-                            log::error!(\"expected DidChangeTextDocument: {}\", path);\n+                            tracing::error!(\"expected DidChangeTextDocument: {}\", path);\n                             return Ok(());\n                         }\n                     };\n@@ -652,7 +652,7 @@ impl GlobalState {\n             .on::<lsp_types::notification::DidCloseTextDocument>(|this, params| {\n                 if let Ok(path) = from_proto::vfs_path(&params.text_document.uri) {\n                     if this.mem_docs.remove(&path).is_err() {\n-                        log::error!(\"orphan DidCloseTextDocument: {}\", path);\n+                        tracing::error!(\"orphan DidCloseTextDocument: {}\", path);\n                     }\n \n                     this.semantic_tokens_cache.lock().remove(&params.text_document.uri);\n@@ -683,12 +683,12 @@ impl GlobalState {\n                         }],\n                     },\n                     |this, resp| {\n-                        log::debug!(\"config update response: '{:?}\", resp);\n+                        tracing::debug!(\"config update response: '{:?}\", resp);\n                         let lsp_server::Response { error, result, .. } = resp;\n \n                         match (error, result) {\n                             (Some(err), _) => {\n-                                log::error!(\"failed to fetch the server settings: {:?}\", err)\n+                                tracing::error!(\"failed to fetch the server settings: {:?}\", err)\n                             }\n                             (None, Some(mut configs)) => {\n                                 if let Some(json) = configs.get_mut(0) {\n@@ -699,7 +699,7 @@ impl GlobalState {\n                                     this.update_configuration(config);\n                                 }\n                             }\n-                            (None, None) => log::error!(\n+                            (None, None) => tracing::error!(\n                                 \"received empty server settings response from the client\"\n                             ),\n                         }\n@@ -727,7 +727,7 @@ impl GlobalState {\n             .map(|path| self.vfs.read().0.file_id(path).unwrap())\n             .collect::<Vec<_>>();\n \n-        log::trace!(\"updating notifications for {:?}\", subscriptions);\n+        tracing::trace!(\"updating notifications for {:?}\", subscriptions);\n \n         let snapshot = self.snapshot();\n         self.task_pool.handle.spawn(move || {\n@@ -737,7 +737,7 @@ impl GlobalState {\n                     handlers::publish_diagnostics(&snapshot, file_id)\n                         .map_err(|err| {\n                             if !is_cancelled(&*err) {\n-                                log::error!(\"failed to compute diagnostics: {:?}\", err);\n+                                tracing::error!(\"failed to compute diagnostics: {:?}\", err);\n                             }\n                             ()\n                         })"}, {"sha": "fa9f05bc3835466d1acea61dde86917592a354e1", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -61,7 +61,7 @@ impl GlobalState {\n         if !changes.iter().any(|(path, kind)| is_interesting(path, *kind)) {\n             return;\n         }\n-        log::info!(\n+        tracing::info!(\n             \"Requesting workspace reload because of the following changes: {}\",\n             itertools::join(\n                 changes\n@@ -153,7 +153,7 @@ impl GlobalState {\n         if !self.fetch_workspaces_queue.should_start_op() {\n             return;\n         }\n-        log::info!(\"will fetch workspaces\");\n+        tracing::info!(\"will fetch workspaces\");\n \n         self.task_pool.handle.spawn_with_sender({\n             let linked_projects = self.config.linked_projects();\n@@ -196,7 +196,7 @@ impl GlobalState {\n                         .push(project_model::ProjectWorkspace::load_detached_files(detached_files));\n                 }\n \n-                log::info!(\"did fetch workspaces {:?}\", workspaces);\n+                tracing::info!(\"did fetch workspaces {:?}\", workspaces);\n                 sender\n                     .send(Task::FetchWorkspace(ProjectWorkspaceProgress::End(workspaces)))\n                     .unwrap();\n@@ -245,10 +245,10 @@ impl GlobalState {\n \n     pub(crate) fn switch_workspaces(&mut self) {\n         let _p = profile::span(\"GlobalState::switch_workspaces\");\n-        log::info!(\"will switch workspaces\");\n+        tracing::info!(\"will switch workspaces\");\n \n         if let Some(error_message) = self.fetch_workspace_error() {\n-            log::error!(\"failed to switch workspaces: {}\", error_message);\n+            tracing::error!(\"failed to switch workspaces: {}\", error_message);\n             if !self.workspaces.is_empty() {\n                 // It only makes sense to switch to a partially broken workspace\n                 // if we don't have any workspace at all yet.\n@@ -257,7 +257,7 @@ impl GlobalState {\n         }\n \n         if let Some(error_message) = self.fetch_build_data_error() {\n-            log::error!(\"failed to switch build data: {}\", error_message);\n+            tracing::error!(\"failed to switch build data: {}\", error_message);\n         }\n \n         let workspaces = self\n@@ -367,7 +367,7 @@ impl GlobalState {\n                 Some((path, args)) => match ProcMacroClient::extern_process(path.clone(), args) {\n                     Ok(it) => Some(it),\n                     Err(err) => {\n-                        log::error!(\n+                        tracing::error!(\n                             \"Failed to run proc_macro_srv from path {}, error: {:?}\",\n                             path.display(),\n                             err\n@@ -407,7 +407,7 @@ impl GlobalState {\n                 }\n                 let res = vfs.file_id(&vfs_path);\n                 if res.is_none() {\n-                    log::warn!(\"failed to load {}\", path.display())\n+                    tracing::warn!(\"failed to load {}\", path.display())\n                 }\n                 res\n             };\n@@ -425,7 +425,7 @@ impl GlobalState {\n         self.analysis_host.apply_change(change);\n         self.process_changes();\n         self.reload_flycheck();\n-        log::info!(\"did switch workspaces\");\n+        tracing::info!(\"did switch workspaces\");\n     }\n \n     fn fetch_workspace_error(&self) -> Option<String> {"}, {"sha": "5cf9158082d48da0146aa935cd74a0ec7009a20e", "filename": "crates/rust-analyzer/tests/slow-tests/support.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -71,7 +71,10 @@ impl<'a> Project<'a> {\n         let tmp_dir = self.tmp_dir.unwrap_or_else(TestDir::new);\n         static INIT: Once = Once::new();\n         INIT.call_once(|| {\n-            env_logger::builder().is_test(true).parse_env(\"RA_LOG\").try_init().unwrap();\n+            tracing_subscriber::fmt()\n+                .with_test_writer()\n+                .with_env_filter(tracing_subscriber::EnvFilter::from_env(\"RA_LOG\"))\n+                .init();\n             profile::init_from(crate::PROFILE);\n         });\n "}, {"sha": "ecd589c58275616ec13c01c5a93133ec604fa39c", "filename": "crates/vfs-notify/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fvfs-notify%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fvfs-notify%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs-notify%2FCargo.toml?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -9,7 +9,7 @@ edition = \"2018\"\n doctest = false\n \n [dependencies]\n-log = \"0.4.8\"\n+tracing = \"0.1\"\n rustc-hash = \"1.0\"\n jod-thread = \"0.1.0\"\n walkdir = \"2.3.1\""}, {"sha": "637438bd66c3834f4bb9926b0c67b69374d55e56", "filename": "crates/vfs-notify/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0947ddede4aacff929f9f826078195b8bbcc4b/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs-notify%2Fsrc%2Flib.rs?ref=ba0947ddede4aacff929f9f826078195b8bbcc4b", "patch": "@@ -76,7 +76,7 @@ impl NotifyActor {\n     }\n     fn run(mut self, inbox: Receiver<Message>) {\n         while let Some(event) = self.next_event(&inbox) {\n-            log::debug!(\"vfs-notify event: {:?}\", event);\n+            tracing::debug!(\"vfs-notify event: {:?}\", event);\n             match event {\n                 Event::Message(msg) => match msg {\n                     Message::Config(config) => {\n@@ -227,5 +227,5 @@ fn read(path: &AbsPath) -> Option<Vec<u8>> {\n }\n \n fn log_notify_error<T>(res: notify::Result<T>) -> Option<T> {\n-    res.map_err(|err| log::warn!(\"notify error: {}\", err)).ok()\n+    res.map_err(|err| tracing::warn!(\"notify error: {}\", err)).ok()\n }"}]}