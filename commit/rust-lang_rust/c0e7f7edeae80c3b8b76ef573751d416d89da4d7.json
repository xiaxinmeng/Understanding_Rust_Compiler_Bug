{"sha": "c0e7f7edeae80c3b8b76ef573751d416d89da4d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZTdmN2VkZWFlODBjM2I4Yjc2ZWY1NzM3NTFkNDE2ZDg5ZGE0ZDc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-09-13T19:20:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-13T19:20:40Z"}, "message": "Rollup merge of #88859 - RalfJung:size-helpers, r=oli-obk\n\ninterpreter PointerArithmetic: use new Size helper methods", "tree": {"sha": "2897547ff0215214a6a62d21b11c294d11c2bb89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2897547ff0215214a6a62d21b11c294d11c2bb89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0e7f7edeae80c3b8b76ef573751d416d89da4d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhP6SJCRBK7hj4Ov3rIwAA5W4IAIS9vEiyMWJzcaL2ASpMaiNJ\ni/xApcpViLItotYOMONDZl3RFX0ghZ91mlaeqyuiBNBCwM+BeVA8qAemFcEy09v+\nLQ5qKNrpjyOgIY6rBWLwdsfO3YNr1Dlqk6Z1crSOjSxA0pH+i2EwzhB1afgl/AeA\nF+bLGmpVUflKD1E9Yf3eOsbC+3hlLETrfuC5tEpuQ95L6Vb7kRfev6KynV0j/G8L\nxaOBb/zJ8kw8IX3xkEydqtmE9fmf8KZ1DwwJWgefVux6oG4WSQryklbMZJAN2SQk\nq/lWOSQnMx7dbhWXtFj949y/kHuc/PU//0ayvN8qWB+1RE+UbJMDSEfG1+GiLOg=\n=BQL9\n-----END PGP SIGNATURE-----\n", "payload": "tree 2897547ff0215214a6a62d21b11c294d11c2bb89\nparent a9bc2ef89424091b435d7fb50343d64d6f05c9a3\nparent 07b64bfd3a292cda71f7e0e2211691feef649a75\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1631560840 +0200\ncommitter GitHub <noreply@github.com> 1631560840 +0200\n\nRollup merge of #88859 - RalfJung:size-helpers, r=oli-obk\n\ninterpreter PointerArithmetic: use new Size helper methods\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0e7f7edeae80c3b8b76ef573751d416d89da4d7", "html_url": "https://github.com/rust-lang/rust/commit/c0e7f7edeae80c3b8b76ef573751d416d89da4d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0e7f7edeae80c3b8b76ef573751d416d89da4d7/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9bc2ef89424091b435d7fb50343d64d6f05c9a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9bc2ef89424091b435d7fb50343d64d6f05c9a3", "html_url": "https://github.com/rust-lang/rust/commit/a9bc2ef89424091b435d7fb50343d64d6f05c9a3"}, {"sha": "07b64bfd3a292cda71f7e0e2211691feef649a75", "url": "https://api.github.com/repos/rust-lang/rust/commits/07b64bfd3a292cda71f7e0e2211691feef649a75", "html_url": "https://github.com/rust-lang/rust/commit/07b64bfd3a292cda71f7e0e2211691feef649a75"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "c9dc5a0f3b5ec22c3111cbc5198f4f67f85ad823", "filename": "compiler/rustc_middle/src/mir/interpret/pointer.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c0e7f7edeae80c3b8b76ef573751d416d89da4d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e7f7edeae80c3b8b76ef573751d416d89da4d7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs?ref=c0e7f7edeae80c3b8b76ef573751d416d89da4d7", "patch": "@@ -3,7 +3,7 @@ use super::{AllocId, InterpResult};\n use rustc_macros::HashStable;\n use rustc_target::abi::{HasDataLayout, Size};\n \n-use std::convert::TryFrom;\n+use std::convert::{TryFrom, TryInto};\n use std::fmt;\n \n ////////////////////////////////////////////////////////////////////////////////\n@@ -20,29 +20,27 @@ pub trait PointerArithmetic: HasDataLayout {\n \n     #[inline]\n     fn machine_usize_max(&self) -> u64 {\n-        let max_usize_plus_1 = 1u128 << self.pointer_size().bits();\n-        u64::try_from(max_usize_plus_1 - 1).unwrap()\n+        self.pointer_size().unsigned_int_max().try_into().unwrap()\n     }\n \n     #[inline]\n     fn machine_isize_min(&self) -> i64 {\n-        let max_isize_plus_1 = 1i128 << (self.pointer_size().bits() - 1);\n-        i64::try_from(-max_isize_plus_1).unwrap()\n+        self.pointer_size().signed_int_min().try_into().unwrap()\n     }\n \n     #[inline]\n     fn machine_isize_max(&self) -> i64 {\n-        let max_isize_plus_1 = 1u128 << (self.pointer_size().bits() - 1);\n-        i64::try_from(max_isize_plus_1 - 1).unwrap()\n+        self.pointer_size().signed_int_max().try_into().unwrap()\n     }\n \n     #[inline]\n     fn machine_usize_to_isize(&self, val: u64) -> i64 {\n         let val = val as i64;\n-        // Now clamp into the machine_isize range.\n+        // Now wrap-around into the machine_isize range.\n         if val > self.machine_isize_max() {\n             // This can only happen the the ptr size is < 64, so we know max_usize_plus_1 fits into\n             // i64.\n+            debug_assert!(self.pointer_size().bits() < 64);\n             let max_usize_plus_1 = 1u128 << self.pointer_size().bits();\n             val - i64::try_from(max_usize_plus_1).unwrap()\n         } else {"}]}