{"sha": "1e26094bdd18c704e1c060e2cf7d2b9bfec037ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMjYwOTRiZGQxOGM3MDRlMWMwNjBlMmNmN2QyYjliZmVjMDM3ZWQ=", "commit": {"author": {"name": "James Munns", "email": "james.munns@gmail.com", "date": "2017-10-02T13:42:08Z"}, "committer": {"name": "James Munns", "email": "james.munns@gmail.com", "date": "2017-10-02T14:53:43Z"}, "message": "Allow atomic operations up to 32 bits\n\nThe ARMv5te platform does not have instruction-level support for atomics, however the kernel provides [user space helpers](https://www.kernel.org/doc/Documentation/arm/kernel_user_helpers.txt) which can be used to perform atomic operations. When linked with `libc`, the atomic symbols needed by Rust will be provided, rather than CPU level intrinsics.\n\nAs this target is specifically `linux` and `gnueabi`, it is reasonable to assume the Linux Kernel and libc will be available for the target. There is a large performance penalty, as we are not using CPU level intrinsics, however this penalty is likely preferable to not having the target at all.\n\nI have used this change in a custom target (along with `xargo`) to build `std`, as well as a number of higher level crates.", "tree": {"sha": "cb0df96596ca2760fc3ec4852326631dd275718c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb0df96596ca2760fc3ec4852326631dd275718c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e26094bdd18c704e1c060e2cf7d2b9bfec037ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e26094bdd18c704e1c060e2cf7d2b9bfec037ed", "html_url": "https://github.com/rust-lang/rust/commit/1e26094bdd18c704e1c060e2cf7d2b9bfec037ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e26094bdd18c704e1c060e2cf7d2b9bfec037ed/comments", "author": {"login": "jamesmunns", "id": 2097964, "node_id": "MDQ6VXNlcjIwOTc5NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2097964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesmunns", "html_url": "https://github.com/jamesmunns", "followers_url": "https://api.github.com/users/jamesmunns/followers", "following_url": "https://api.github.com/users/jamesmunns/following{/other_user}", "gists_url": "https://api.github.com/users/jamesmunns/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesmunns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesmunns/subscriptions", "organizations_url": "https://api.github.com/users/jamesmunns/orgs", "repos_url": "https://api.github.com/users/jamesmunns/repos", "events_url": "https://api.github.com/users/jamesmunns/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesmunns/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamesmunns", "id": 2097964, "node_id": "MDQ6VXNlcjIwOTc5NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2097964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesmunns", "html_url": "https://github.com/jamesmunns", "followers_url": "https://api.github.com/users/jamesmunns/followers", "following_url": "https://api.github.com/users/jamesmunns/following{/other_user}", "gists_url": "https://api.github.com/users/jamesmunns/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesmunns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesmunns/subscriptions", "organizations_url": "https://api.github.com/users/jamesmunns/orgs", "repos_url": "https://api.github.com/users/jamesmunns/repos", "events_url": "https://api.github.com/users/jamesmunns/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesmunns/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ae6ed78acf9dc865e2300a7db556389eed9692d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ae6ed78acf9dc865e2300a7db556389eed9692d", "html_url": "https://github.com/rust-lang/rust/commit/9ae6ed78acf9dc865e2300a7db556389eed9692d"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "97397ca49622e4d53c5db5d2c1e6ff12fc6d4c96", "filename": "src/librustc_back/target/armv5te_unknown_linux_gnueabi.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e26094bdd18c704e1c060e2cf7d2b9bfec037ed/src%2Flibrustc_back%2Ftarget%2Farmv5te_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e26094bdd18c704e1c060e2cf7d2b9bfec037ed/src%2Flibrustc_back%2Ftarget%2Farmv5te_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv5te_unknown_linux_gnueabi.rs?ref=1e26094bdd18c704e1c060e2cf7d2b9bfec037ed", "patch": "@@ -27,8 +27,12 @@ pub fn target() -> TargetResult {\n \n         options: TargetOptions {\n             features: \"+soft-float,+strict-align\".to_string(),\n-            // No atomic instructions on ARMv5\n-            max_atomic_width: Some(0),\n+\n+            // Atomic operations provided when linked with libgcc.\n+            // FIXME: If the following PR is merged, the atomic operations would be\n+            // provided by compiler-builtins instead with no change of behavior:\n+            // https://github.com/rust-lang-nursery/compiler-builtins/pull/115/files\n+            max_atomic_width: Some(32),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n             .. base\n         }"}]}