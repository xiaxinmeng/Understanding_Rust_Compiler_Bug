{"sha": "9f1d3702a4b994100f6aa01178bfb0530d31cb26", "node_id": "C_kwDOAAsO6NoAKDlmMWQzNzAyYTRiOTk0MTAwZjZhYTAxMTc4YmZiMDUzMGQzMWNiMjY", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2022-06-10T20:47:00Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2022-06-10T20:47:00Z"}, "message": "the day that i make a PR without a tidy error..", "tree": {"sha": "4de39541b12b33e60b0f3abcd47d6948b6da9288", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4de39541b12b33e60b0f3abcd47d6948b6da9288"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f1d3702a4b994100f6aa01178bfb0530d31cb26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f1d3702a4b994100f6aa01178bfb0530d31cb26", "html_url": "https://github.com/rust-lang/rust/commit/9f1d3702a4b994100f6aa01178bfb0530d31cb26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f1d3702a4b994100f6aa01178bfb0530d31cb26/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d91e9e941a069cc715d630b9b9826de6275f0a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d91e9e941a069cc715d630b9b9826de6275f0a9", "html_url": "https://github.com/rust-lang/rust/commit/5d91e9e941a069cc715d630b9b9826de6275f0a9"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "ce2698ef44cd49d4e1fdd68fbe5a7e47469b120d", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9f1d3702a4b994100f6aa01178bfb0530d31cb26/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1d3702a4b994100f6aa01178bfb0530d31cb26/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=9f1d3702a4b994100f6aa01178bfb0530d31cb26", "patch": "@@ -111,7 +111,7 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     }\n \n     /// Makes `a <: b`, where `a` may or may not be expected.\n-    /// \n+    ///\n     /// See [`At::trace_exp`] and [`Trace::sub`] for a version of\n     /// this method that only requires `T: Relate<'tcx>`\n     pub fn sub_exp<T>(self, a_is_expected: bool, a: T, b: T) -> InferResult<'tcx, ()>\n@@ -125,7 +125,7 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     /// call like `foo(x)`, where `foo: fn(i32)`, you might have\n     /// `sup(i32, x)`, since the \"expected\" type is the type that\n     /// appears in the signature.\n-    /// \n+    ///\n     /// See [`At::trace`] and [`Trace::sub`] for a version of\n     /// this method that only requires `T: Relate<'tcx>`\n     pub fn sup<T>(self, expected: T, actual: T) -> InferResult<'tcx, ()>\n@@ -136,7 +136,7 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     }\n \n     /// Makes `expected <: actual`.\n-    /// \n+    ///\n     /// See [`At::trace`] and [`Trace::sub`] for a version of\n     /// this method that only requires `T: Relate<'tcx>`\n     pub fn sub<T>(self, expected: T, actual: T) -> InferResult<'tcx, ()>\n@@ -147,7 +147,7 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     }\n \n     /// Makes `expected <: actual`.\n-    /// \n+    ///\n     /// See [`At::trace_exp`] and [`Trace::eq`] for a version of\n     /// this method that only requires `T: Relate<'tcx>`\n     pub fn eq_exp<T>(self, a_is_expected: bool, a: T, b: T) -> InferResult<'tcx, ()>\n@@ -158,7 +158,7 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     }\n \n     /// Makes `expected <: actual`.\n-    /// \n+    ///\n     /// See [`At::trace`] and [`Trace::eq`] for a version of\n     /// this method that only requires `T: Relate<'tcx>`\n     pub fn eq<T>(self, expected: T, actual: T) -> InferResult<'tcx, ()>\n@@ -191,7 +191,7 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     /// this can result in an error (e.g., if asked to compute LUB of\n     /// u32 and i32), it is meaningful to call one of them the\n     /// \"expected type\".\n-    /// \n+    ///\n     /// See [`At::trace`] and [`Trace::lub`] for a version of\n     /// this method that only requires `T: Relate<'tcx>`\n     pub fn lub<T>(self, expected: T, actual: T) -> InferResult<'tcx, T>\n@@ -204,7 +204,7 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     /// Computes the greatest-lower-bound, or mutual subtype, of two\n     /// values. As with `lub` order doesn't matter, except for error\n     /// cases.\n-    /// \n+    ///\n     /// See [`At::trace`] and [`Trace::glb`] for a version of\n     /// this method that only requires `T: Relate<'tcx>`\n     pub fn glb<T>(self, expected: T, actual: T) -> InferResult<'tcx, T>"}]}