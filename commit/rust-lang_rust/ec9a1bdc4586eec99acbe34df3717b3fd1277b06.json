{"sha": "ec9a1bdc4586eec99acbe34df3717b3fd1277b06", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjOWExYmRjNDU4NmVlYzk5YWNiZTM0ZGYzNzE3YjNmZDEyNzdiMDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-14T08:46:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-14T08:46:22Z"}, "message": "Auto merge of #88914 - GuillaumeGomez:rollup-h5svc6w, r=GuillaumeGomez\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #88033 (Add links for primitives in \"jump to definition\" feature)\n - #88722 (Make `UnsafeCell::get_mut` const)\n - #88851 (Fix duplicate bounds for const_trait_impl)\n - #88859 (interpreter PointerArithmetic: use new Size helper methods)\n - #88885 (Fix jump def background)\n - #88894 (Improve error message for missing trait in trait impl)\n - #88896 (Reduce possibility of flaky tests)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "1b45d045bf596184c37ae58cefb2d04fbf43d8fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b45d045bf596184c37ae58cefb2d04fbf43d8fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec9a1bdc4586eec99acbe34df3717b3fd1277b06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec9a1bdc4586eec99acbe34df3717b3fd1277b06", "html_url": "https://github.com/rust-lang/rust/commit/ec9a1bdc4586eec99acbe34df3717b3fd1277b06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f85cd6f2ab2769c16e89dcdddb3e11d9736b351", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f85cd6f2ab2769c16e89dcdddb3e11d9736b351", "html_url": "https://github.com/rust-lang/rust/commit/9f85cd6f2ab2769c16e89dcdddb3e11d9736b351"}, {"sha": "fb673bfdaafc903c351c2d0f7fdf665cb4ee3d8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb673bfdaafc903c351c2d0f7fdf665cb4ee3d8f", "html_url": "https://github.com/rust-lang/rust/commit/fb673bfdaafc903c351c2d0f7fdf665cb4ee3d8f"}], "stats": {"total": 190, "additions": 165, "deletions": 25}, "files": [{"sha": "c9dc5a0f3b5ec22c3111cbc5198f4f67f85ad823", "filename": "compiler/rustc_middle/src/mir/interpret/pointer.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs?ref=ec9a1bdc4586eec99acbe34df3717b3fd1277b06", "patch": "@@ -3,7 +3,7 @@ use super::{AllocId, InterpResult};\n use rustc_macros::HashStable;\n use rustc_target::abi::{HasDataLayout, Size};\n \n-use std::convert::TryFrom;\n+use std::convert::{TryFrom, TryInto};\n use std::fmt;\n \n ////////////////////////////////////////////////////////////////////////////////\n@@ -20,29 +20,27 @@ pub trait PointerArithmetic: HasDataLayout {\n \n     #[inline]\n     fn machine_usize_max(&self) -> u64 {\n-        let max_usize_plus_1 = 1u128 << self.pointer_size().bits();\n-        u64::try_from(max_usize_plus_1 - 1).unwrap()\n+        self.pointer_size().unsigned_int_max().try_into().unwrap()\n     }\n \n     #[inline]\n     fn machine_isize_min(&self) -> i64 {\n-        let max_isize_plus_1 = 1i128 << (self.pointer_size().bits() - 1);\n-        i64::try_from(-max_isize_plus_1).unwrap()\n+        self.pointer_size().signed_int_min().try_into().unwrap()\n     }\n \n     #[inline]\n     fn machine_isize_max(&self) -> i64 {\n-        let max_isize_plus_1 = 1u128 << (self.pointer_size().bits() - 1);\n-        i64::try_from(max_isize_plus_1 - 1).unwrap()\n+        self.pointer_size().signed_int_max().try_into().unwrap()\n     }\n \n     #[inline]\n     fn machine_usize_to_isize(&self, val: u64) -> i64 {\n         let val = val as i64;\n-        // Now clamp into the machine_isize range.\n+        // Now wrap-around into the machine_isize range.\n         if val > self.machine_isize_max() {\n             // This can only happen the the ptr size is < 64, so we know max_usize_plus_1 fits into\n             // i64.\n+            debug_assert!(self.pointer_size().bits() < 64);\n             let max_usize_plus_1 = 1u128 << self.pointer_size().bits();\n             val - i64::try_from(max_usize_plus_1).unwrap()\n         } else {"}, {"sha": "04a7948e8c96e6670a0047991c95a0e21e6367af", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=ec9a1bdc4586eec99acbe34df3717b3fd1277b06", "patch": "@@ -493,7 +493,20 @@ impl<'a> Parser<'a> {\n         let ty_first = if self.token.is_keyword(kw::For) && self.look_ahead(1, |t| t != &token::Lt)\n         {\n             let span = self.prev_token.span.between(self.token.span);\n-            self.struct_span_err(span, \"missing trait in a trait impl\").emit();\n+            self.struct_span_err(span, \"missing trait in a trait impl\")\n+                .span_suggestion(\n+                    span,\n+                    \"add a trait here\",\n+                    \" Trait \".into(),\n+                    Applicability::HasPlaceholders,\n+                )\n+                .span_suggestion(\n+                    span.to(self.token.span),\n+                    \"for an inherent impl, drop this `for`\",\n+                    \"\".into(),\n+                    Applicability::MaybeIncorrect,\n+                )\n+                .emit();\n             P(Ty {\n                 kind: TyKind::Path(None, err_path(span)),\n                 span,"}, {"sha": "8adf9015933c3f6121a2e1cd9ea726b16163c548", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=ec9a1bdc4586eec99acbe34df3717b3fd1277b06", "patch": "@@ -1487,10 +1487,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ) => false,\n \n             (ParamCandidate(other), ParamCandidate(victim)) => {\n-                let value_same_except_bound_vars = other.value.skip_binder()\n+                let same_except_bound_vars = other.value.skip_binder()\n                     == victim.value.skip_binder()\n+                    && other.constness == victim.constness\n                     && !other.value.skip_binder().has_escaping_bound_vars();\n-                if value_same_except_bound_vars {\n+                if same_except_bound_vars {\n                     // See issue #84398. In short, we can generate multiple ParamCandidates which are\n                     // the same except for unused bound vars. Just pick the one with the fewest bound vars\n                     // or the current one if tied (they should both evaluate to the same answer). This is"}, {"sha": "e56b631dbaf8db537afb2bd8196e709ba074f396", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=ec9a1bdc4586eec99acbe34df3717b3fd1277b06", "patch": "@@ -1916,7 +1916,8 @@ impl<T: ?Sized> UnsafeCell<T> {\n     /// ```\n     #[inline(always)]\n     #[stable(feature = \"unsafe_cell_get_mut\", since = \"1.50.0\")]\n-    pub fn get_mut(&mut self) -> &mut T {\n+    #[rustc_const_unstable(feature = \"const_unsafecell_get_mut\", issue = \"88836\")]\n+    pub const fn get_mut(&mut self) -> &mut T {\n         &mut self.value\n     }\n "}, {"sha": "386ffb384a81ee744d9201e516ce466800c92a61", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=ec9a1bdc4586eec99acbe34df3717b3fd1277b06", "patch": "@@ -925,6 +925,11 @@ impl Step for RustdocGUI {\n                     .env(\"RUSTDOC\", builder.rustdoc(self.compiler))\n                     .env(\"RUSTC\", builder.rustc(self.compiler))\n                     .current_dir(path);\n+                // FIXME: implement a `// compile-flags` command or similar\n+                //        instead of hard-coding this test\n+                if entry.file_name() == \"link_to_definition\" {\n+                    cargo.env(\"RUSTDOCFLAGS\", \"-Zunstable-options --generate-link-to-definition\");\n+                }\n                 builder.run(&mut cargo);\n             }\n         }"}, {"sha": "ece3ee640e2a69a6f8193a4f2672032b87b8097c", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=ec9a1bdc4586eec99acbe34df3717b3fd1277b06", "patch": "@@ -5,6 +5,7 @@\n //!\n //! Use the `render_with_highlighting` to highlight some rust code.\n \n+use crate::clean::PrimitiveType;\n use crate::html::escape::Escape;\n use crate::html::render::Context;\n \n@@ -584,6 +585,13 @@ fn string<T: Display>(\n                             .ok()\n                             .map(|(url, _, _)| url)\n                     }\n+                    LinkFromSrc::Primitive(prim) => format::href_with_root_path(\n+                        PrimitiveType::primitive_locations(context.tcx())[&prim],\n+                        context,\n+                        Some(context_info.root_path),\n+                    )\n+                    .ok()\n+                    .map(|(url, _, _)| url),\n                 }\n             })\n         {"}, {"sha": "d517f3ac0e3a9e1a16db7d886a31dc263bedc90b", "filename": "src/librustdoc/html/render/span_map.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs?ref=ec9a1bdc4586eec99acbe34df3717b3fd1277b06", "patch": "@@ -1,4 +1,4 @@\n-use crate::clean;\n+use crate::clean::{self, PrimitiveType};\n use crate::html::sources;\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -22,6 +22,7 @@ use std::path::{Path, PathBuf};\n crate enum LinkFromSrc {\n     Local(clean::Span),\n     External(DefId),\n+    Primitive(PrimitiveType),\n }\n \n /// This function will do at most two things:\n@@ -73,17 +74,20 @@ impl<'tcx> SpanMapVisitor<'tcx> {\n                 Some(def_id)\n             }\n             Res::Local(_) => None,\n+            Res::PrimTy(p) => {\n+                // FIXME: Doesn't handle \"path-like\" primitives like arrays or tuples.\n+                let span = path_span.unwrap_or(path.span);\n+                self.matches.insert(span, LinkFromSrc::Primitive(PrimitiveType::from(p)));\n+                return;\n+            }\n             Res::Err => return,\n             _ => return,\n         };\n         if let Some(span) = self.tcx.hir().res_span(path.res) {\n-            self.matches.insert(\n-                path_span.unwrap_or_else(|| path.span),\n-                LinkFromSrc::Local(clean::Span::new(span)),\n-            );\n-        } else if let Some(def_id) = info {\n             self.matches\n-                .insert(path_span.unwrap_or_else(|| path.span), LinkFromSrc::External(def_id));\n+                .insert(path_span.unwrap_or(path.span), LinkFromSrc::Local(clean::Span::new(span)));\n+        } else if let Some(def_id) = info {\n+            self.matches.insert(path_span.unwrap_or(path.span), LinkFromSrc::External(def_id));\n         }\n     }\n }"}, {"sha": "eada8f4a04daedfb04cb99c39b888569a464885b", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=ec9a1bdc4586eec99acbe34df3717b3fd1277b06", "patch": "@@ -217,7 +217,7 @@ a {\n \tcolor: #c5c5c5;\n }\n body.source .example-wrap pre.rust a {\n-\tbackground: #c5c5c5;\n+\tbackground: #333;\n }\n \n .docblock:not(.type-decl) a:not(.srclink):not(.test-arrow),"}, {"sha": "6fb92e196602e399c87a8746a3d7d38809cf66b2", "filename": "src/test/rustdoc-gui/code-sidebar-toggle.goml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Ftest%2Frustdoc-gui%2Fcode-sidebar-toggle.goml", "raw_url": "https://github.com/rust-lang/rust/raw/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Ftest%2Frustdoc-gui%2Fcode-sidebar-toggle.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcode-sidebar-toggle.goml?ref=ec9a1bdc4586eec99acbe34df3717b3fd1277b06", "patch": "@@ -1,5 +1,6 @@\n goto: file://|DOC_PATH|/test_docs/index.html\n click: \".srclink\"\n+wait-for: \"#sidebar-toggle\"\n click: \"#sidebar-toggle\"\n wait-for: 500\n fail: true"}, {"sha": "3df899e0f2618d528dbe8f3b367cf0ad14433aa8", "filename": "src/test/rustdoc-gui/jump-to-def-background.goml", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Ftest%2Frustdoc-gui%2Fjump-to-def-background.goml", "raw_url": "https://github.com/rust-lang/rust/raw/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Ftest%2Frustdoc-gui%2Fjump-to-def-background.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fjump-to-def-background.goml?ref=ec9a1bdc4586eec99acbe34df3717b3fd1277b06", "patch": "@@ -0,0 +1,23 @@\n+// We check the background color on the jump to definition links in the source code page.\n+goto: file://|DOC_PATH|/src/link_to_definition/lib.rs.html\n+\n+// Set the theme to dark.\n+local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-preferred-dark-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n+// We reload the page so the local storage settings are being used.\n+reload:\n+\n+assert-css: (\"body.source .example-wrap pre.rust a\", {\"background-color\": \"rgb(51, 51, 51)\"}, ALL)\n+\n+// Set the theme to ayu.\n+local-storage: {\"rustdoc-theme\": \"ayu\", \"rustdoc-preferred-dark-theme\": \"ayu\", \"rustdoc-use-system-theme\": \"false\"}\n+// We reload the page so the local storage settings are being used.\n+reload:\n+\n+assert-css: (\"body.source .example-wrap pre.rust a\", {\"background-color\": \"rgb(51, 51, 51)\"}, ALL)\n+\n+// Set the theme to light.\n+local-storage: {\"rustdoc-theme\": \"light\", \"rustdoc-use-system-theme\": \"false\"}\n+// We reload the page so the local storage settings are being used.\n+reload:\n+\n+assert-css: (\"body.source .example-wrap pre.rust a\", {\"background-color\": \"rgb(238, 238, 238)\"}, ALL)"}, {"sha": "e4b4e52d028e502931ae658b24baa90f1a69f4a1", "filename": "src/test/rustdoc-gui/src/link_to_definition/Cargo.lock", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flink_to_definition%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flink_to_definition%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flink_to_definition%2FCargo.lock?ref=ec9a1bdc4586eec99acbe34df3717b3fd1277b06", "patch": "@@ -0,0 +1,7 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 3\n+\n+[[package]]\n+name = \"link_to_definition\"\n+version = \"0.1.0\""}, {"sha": "cdd294d74d3aef70851343f37de69513e58a53e2", "filename": "src/test/rustdoc-gui/src/link_to_definition/Cargo.toml", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flink_to_definition%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flink_to_definition%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flink_to_definition%2FCargo.toml?ref=ec9a1bdc4586eec99acbe34df3717b3fd1277b06", "patch": "@@ -0,0 +1,7 @@\n+[package]\n+name = \"link_to_definition\"\n+version = \"0.1.0\"\n+edition = \"2018\"\n+\n+[lib]\n+path = \"lib.rs\""}, {"sha": "de9ee66a2bad08acd7ea8c562007f57d72540f54", "filename": "src/test/rustdoc-gui/src/link_to_definition/lib.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flink_to_definition%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flink_to_definition%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flink_to_definition%2Flib.rs?ref=ec9a1bdc4586eec99acbe34df3717b3fd1277b06", "patch": "@@ -0,0 +1,6 @@\n+pub struct Bar {\n+    pub a: String,\n+    pub b: u32,\n+}\n+\n+pub fn foo(_b: &Bar) {}"}, {"sha": "b129ceb5b7302ebd4d611d50684a7aadbba3fc6e", "filename": "src/test/rustdoc/check-source-code-urls-to-def-std.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def-std.rs?ref=ec9a1bdc4586eec99acbe34df3717b3fd1277b06", "patch": "@@ -0,0 +1,17 @@\n+// compile-flags: -Zunstable-options --generate-link-to-definition\n+\n+#![crate_name = \"foo\"]\n+\n+// @has 'src/foo/check-source-code-urls-to-def-std.rs.html'\n+\n+fn babar() {}\n+\n+// @has - '//a[@href=\"{{channel}}/std/primitive.u32.html\"]' 'u32'\n+// @has - '//a[@href=\"{{channel}}/std/primitive.str.html\"]' 'str'\n+// @has - '//a[@href=\"{{channel}}/std/primitive.bool.html\"]' 'bool'\n+// @has - '//a[@href=\"../../src/foo/check-source-code-urls-to-def-std.rs.html#7\"]' 'babar'\n+pub fn foo(a: u32, b: &str, c: String) {\n+    let x = 12;\n+    let y: bool = true;\n+    babar();\n+}"}, {"sha": "0cb8e4230166ff0d2484afd7e8142479938bcce9", "filename": "src/test/rustdoc/check-source-code-urls-to-def.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def.rs?ref=ec9a1bdc4586eec99acbe34df3717b3fd1277b06", "patch": "@@ -27,6 +27,8 @@ impl Foo {\n fn babar() {}\n \n // @has - '//a/@href' '/struct.String.html'\n+// @has - '//a/@href' '/primitive.u32.html'\n+// @has - '//a/@href' '/primitive.str.html'\n // @count - '//a[@href=\"../../src/foo/check-source-code-urls-to-def.rs.html#21\"]' 5\n // @has - '//a[@href=\"../../source_code/struct.SourceCode.html\"]' 'source_code::SourceCode'\n pub fn foo(a: u32, b: &str, c: String, d: Foo, e: bar::Bar, f: source_code::SourceCode) {\n@@ -40,5 +42,9 @@ pub fn foo(a: u32, b: &str, c: String, d: Foo, e: bar::Bar, f: source_code::Sour\n \n // @has - '//a[@href=\"../../src/foo/auxiliary/source-code-bar.rs.html#14-16\"]' 'bar::sub::Trait'\n // @has - '//a[@href=\"../../src/foo/auxiliary/source-code-bar.rs.html#14-16\"]' 'Trait'\n-pub fn foo2<T: bar::sub::Trait, V: Trait>(t: &T, v: &V) {\n+pub fn foo2<T: bar::sub::Trait, V: Trait>(t: &T, v: &V, b: bool) {\n }\n+\n+// @has - '//a[@href=\"../../foo/primitive.bool.html\"]' 'bool'\n+#[doc(primitive = \"bool\")]\n+mod whatever {}"}, {"sha": "7ee5bc6ec617470f0acefbc8a9724bad42e47088", "filename": "src/test/ui/issues/issue-56031.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Ftest%2Fui%2Fissues%2Fissue-56031.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Ftest%2Fui%2Fissues%2Fissue-56031.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56031.stderr?ref=ec9a1bdc4586eec99acbe34df3717b3fd1277b06", "patch": "@@ -3,6 +3,16 @@ error: missing trait in a trait impl\n    |\n LL | impl for T {}\n    |     ^\n+   |\n+help: add a trait here\n+   |\n+LL | impl Trait for T {}\n+   |      +++++\n+help: for an inherent impl, drop this `for`\n+   |\n+LL - impl for T {}\n+LL + impl T {}\n+   | \n \n error: aborting due to previous error\n "}, {"sha": "b9233ca8339e19305cc11695b178d242bc665ce1", "filename": "src/test/ui/parser/issue-88818.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Ftest%2Fui%2Fparser%2Fissue-88818.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Ftest%2Fui%2Fparser%2Fissue-88818.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-88818.rs?ref=ec9a1bdc4586eec99acbe34df3717b3fd1277b06", "patch": "@@ -0,0 +1,10 @@\n+// Regression test for #88818 (improve error message for missing trait\n+// in `impl for X`).\n+\n+struct S { }\n+impl for S { }\n+//~^ ERROR: missing trait in a trait impl\n+//~| HELP: add a trait here\n+//~| HELP: for an inherent impl, drop this `for`\n+\n+fn main() {}"}, {"sha": "d30990ae5820faeb6c726813b4aedf8502ddcfc7", "filename": "src/test/ui/parser/issue-88818.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Ftest%2Fui%2Fparser%2Fissue-88818.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Ftest%2Fui%2Fparser%2Fissue-88818.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-88818.stderr?ref=ec9a1bdc4586eec99acbe34df3717b3fd1277b06", "patch": "@@ -0,0 +1,18 @@\n+error: missing trait in a trait impl\n+  --> $DIR/issue-88818.rs:5:5\n+   |\n+LL | impl for S { }\n+   |     ^\n+   |\n+help: add a trait here\n+   |\n+LL | impl Trait for S { }\n+   |      +++++\n+help: for an inherent impl, drop this `for`\n+   |\n+LL - impl for S { }\n+LL + impl S { }\n+   | \n+\n+error: aborting due to previous error\n+"}, {"sha": "cc24dbd96d2532ebc82c59a2e9fc4a7514891d86", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-dup-bound.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9a1bdc4586eec99acbe34df3717b3fd1277b06/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs?ref=ec9a1bdc4586eec99acbe34df3717b3fd1277b06", "patch": "@@ -16,12 +16,17 @@ impl const PartialEq for S {\n \n // This duplicate bound should not result in ambiguities. It should be equivalent to a single ~const\n // bound.\n-// const fn equals_self<T: PartialEq + ~const PartialEq>(t: &T) -> bool {\n-// FIXME(fee1-dead)^ why should the order matter here?\n-const fn equals_self<T: ~const PartialEq + PartialEq>(t: &T) -> bool {\n+const fn equals_self<T: PartialEq + ~const PartialEq>(t: &T) -> bool {\n     *t == *t\n }\n \n-pub const EQ: bool = equals_self(&S);\n+trait A: PartialEq {}\n+impl<T: PartialEq> A for T {}\n+\n+const fn equals_self2<T: A + ~const PartialEq>(t: &T) -> bool {\n+    *t == *t\n+}\n+\n+pub const EQ: bool = equals_self(&S) && equals_self2(&S);\n \n fn main() {}"}]}