{"sha": "51af19547313cc129dcccbe728ab2b9de439405f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxYWYxOTU0NzMxM2NjMTI5ZGNjY2JlNzI4YWIyYjlkZTQzOTQwNWY=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-03-04T12:01:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-04T12:01:30Z"}, "message": "Merge pull request #3415 from rchaser53/issue-3198\n\nfix the comment for self are swallowed", "tree": {"sha": "198fd3457ac2b0d855d76ec8db916361a02fb13e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/198fd3457ac2b0d855d76ec8db916361a02fb13e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51af19547313cc129dcccbe728ab2b9de439405f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcfROaCRBK7hj4Ov3rIwAAdHIIADO2gEH9iFjAHLAO5QdhLFSJ\nusoxyNsdkN3fS5iOAxgwZ6z7La2SC5sKPIkLxpRYMY1oLGCHBt2UlVc+B4xJR0YP\nczm5wVoT26tI6R4eFXM8r41gkcdEGYitIzPP5FZKql7reFzItK41+wozW1alpAXm\nrdp5xQfBbU0/Hth41ZWGFodcXi256hgVuq1CnfdBB4/FhOGzpd1deLRvyA+nvPgg\nxZebxLsWY3UGQuwHK+jnGSWqopyVlLuzKJ9p1S/13Wzi3SzFbSDQwxDaIgtMmgVb\nKCKWIS52POQs+T7oel0PAFOpmKzJKp8Pz1tGNCtYR5Re0Gbxm+0NjNsqnz8ECc8=\n=FUx6\n-----END PGP SIGNATURE-----\n", "payload": "tree 198fd3457ac2b0d855d76ec8db916361a02fb13e\nparent 51778090fc769f768ab86df2ee86c67a776fd722\nparent dec390207685351dd67dcc0185a861771363d4d1\nauthor Seiichi Uchida <seuchida@gmail.com> 1551700890 +0900\ncommitter GitHub <noreply@github.com> 1551700890 +0900\n\nMerge pull request #3415 from rchaser53/issue-3198\n\nfix the comment for self are swallowed"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51af19547313cc129dcccbe728ab2b9de439405f", "html_url": "https://github.com/rust-lang/rust/commit/51af19547313cc129dcccbe728ab2b9de439405f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51af19547313cc129dcccbe728ab2b9de439405f/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51778090fc769f768ab86df2ee86c67a776fd722", "url": "https://api.github.com/repos/rust-lang/rust/commits/51778090fc769f768ab86df2ee86c67a776fd722", "html_url": "https://github.com/rust-lang/rust/commit/51778090fc769f768ab86df2ee86c67a776fd722"}, {"sha": "dec390207685351dd67dcc0185a861771363d4d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/dec390207685351dd67dcc0185a861771363d4d1", "html_url": "https://github.com/rust-lang/rust/commit/dec390207685351dd67dcc0185a861771363d4d1"}], "stats": {"total": 237, "additions": 213, "deletions": 24}, "files": [{"sha": "5f751035f3e9dd0b71b8a44e1b4f6295f63ba5f4", "filename": "src/items.rs", "status": "modified", "additions": 46, "deletions": 23, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/51af19547313cc129dcccbe728ab2b9de439405f/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51af19547313cc129dcccbe728ab2b9de439405f/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=51af19547313cc129dcccbe728ab2b9de439405f", "patch": "@@ -20,7 +20,8 @@ use crate::expr::{\n     ExprType, RhsTactics,\n };\n use crate::lists::{\n-    definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator,\n+    definitive_tactic, extract_post_comment, extract_pre_comment, get_comment_end,\n+    has_extra_newline, itemize_list, write_list, ListFormatting, ListItem, Separator,\n };\n use crate::macros::{rewrite_macro, MacroPosition};\n use crate::overflow;\n@@ -2280,6 +2281,10 @@ fn rewrite_args(\n     variadic: bool,\n     generics_str_contains_newline: bool,\n ) -> Option<String> {\n+    let terminator = \")\";\n+    let separator = \",\";\n+    let next_span_start = span.hi();\n+\n     let mut arg_item_strs = args\n         .iter()\n         .map(|arg| {\n@@ -2289,11 +2294,20 @@ fn rewrite_args(\n         .collect::<Vec<_>>();\n \n     // Account for sugary self.\n-    // FIXME: the comment for the self argument is dropped. This is blocked\n-    // on rust issue #27522.\n+    let mut pre_comment_str = \"\";\n+    let mut post_comment_str = \"\";\n     let min_args = explicit_self\n         .and_then(|explicit_self| rewrite_explicit_self(explicit_self, args, context))\n         .map_or(1, |self_str| {\n+            pre_comment_str = context.snippet(mk_sp(span.lo(), args[0].pat.span.lo()));\n+\n+            let next_start = if args.len() > 1 {\n+                args[1].pat.span().lo()\n+            } else {\n+                span.hi()\n+            };\n+            post_comment_str = context.snippet(mk_sp(args[0].ty.span.hi(), next_start));\n+\n             arg_item_strs[0] = self_str;\n             2\n         });\n@@ -2310,14 +2324,18 @@ fn rewrite_args(\n     // it is explicit.\n     if args.len() >= min_args || variadic {\n         let comment_span_start = if min_args == 2 {\n-            let second_arg_start = if arg_has_pattern(&args[1]) {\n-                args[1].pat.span.lo()\n+            let remove_comma_byte_pos = context\n+                .snippet_provider\n+                .span_after(mk_sp(args[0].ty.span.hi(), args[1].pat.span.lo()), \",\");\n+            let first_post_and_second_pre_span =\n+                mk_sp(remove_comma_byte_pos, args[1].pat.span.lo());\n+            if count_newlines(context.snippet(first_post_and_second_pre_span)) > 0 {\n+                context\n+                    .snippet_provider\n+                    .span_after(first_post_and_second_pre_span, \"\\n\")\n             } else {\n-                args[1].ty.span.lo()\n-            };\n-            let reduced_span = mk_sp(span.lo(), second_arg_start);\n-\n-            context.snippet_provider.span_after_last(reduced_span, \",\")\n+                remove_comma_byte_pos\n+            }\n         } else {\n             span.lo()\n         };\n@@ -2342,8 +2360,8 @@ fn rewrite_args(\n                 .iter()\n                 .map(ArgumentKind::Regular)\n                 .chain(variadic_arg),\n-            \")\",\n-            \",\",\n+            terminator,\n+            separator,\n             |arg| match *arg {\n                 ArgumentKind::Regular(arg) => span_lo_for_arg(arg),\n                 ArgumentKind::Variadic(start) => start,\n@@ -2357,18 +2375,31 @@ fn rewrite_args(\n                 ArgumentKind::Variadic(..) => Some(\"...\".to_owned()),\n             },\n             comment_span_start,\n-            span.hi(),\n+            next_span_start,\n             false,\n         );\n \n         arg_items.extend(more_items);\n     }\n \n+    let arg_items_len = arg_items.len();\n     let fits_in_one_line = !generics_str_contains_newline\n         && (arg_items.is_empty()\n-            || arg_items.len() == 1 && arg_item_strs[0].len() <= one_line_budget);\n+            || arg_items_len == 1 && arg_item_strs[0].len() <= one_line_budget);\n \n-    for (item, arg) in arg_items.iter_mut().zip(arg_item_strs) {\n+    for (index, (item, arg)) in arg_items.iter_mut().zip(arg_item_strs).enumerate() {\n+        // add pre comment and post comment for first arg(self)\n+        if index == 0 && explicit_self.is_some() {\n+            let (pre_comment, pre_comment_style) = extract_pre_comment(pre_comment_str);\n+            item.pre_comment = pre_comment;\n+            item.pre_comment_style = pre_comment_style;\n+\n+            let comment_end =\n+                get_comment_end(post_comment_str, separator, terminator, arg_items_len == 1);\n+\n+            item.new_lines = has_extra_newline(post_comment_str, comment_end);\n+            item.post_comment = extract_post_comment(post_comment_str, comment_end, separator);\n+        }\n         item.item = Some(arg);\n     }\n \n@@ -2418,14 +2449,6 @@ fn rewrite_args(\n     write_list(&arg_items, &fmt)\n }\n \n-fn arg_has_pattern(arg: &ast::Arg) -> bool {\n-    if let ast::PatKind::Ident(_, ident, _) = arg.pat.node {\n-        ident != symbol::keywords::Invalid.ident()\n-    } else {\n-        true\n-    }\n-}\n-\n fn compute_budgets_for_args(\n     context: &RewriteContext<'_>,\n     result: &str,"}, {"sha": "cb404123af090d975b2f427273ffaee6e76d8cc5", "filename": "src/lists.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51af19547313cc129dcccbe728ab2b9de439405f/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51af19547313cc129dcccbe728ab2b9de439405f/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=51af19547313cc129dcccbe728ab2b9de439405f", "patch": "@@ -683,7 +683,7 @@ pub fn get_comment_end(\n \n // Account for extra whitespace between items. This is fiddly\n // because of the way we divide pre- and post- comments.\n-fn has_extra_newline(post_snippet: &str, comment_end: usize) -> bool {\n+pub fn has_extra_newline(post_snippet: &str, comment_end: usize) -> bool {\n     if post_snippet.is_empty() || comment_end == 0 {\n         return false;\n     }"}, {"sha": "48cb24a00259edaff855c4e632c393db0379761a", "filename": "tests/source/issue-3198.rs", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/51af19547313cc129dcccbe728ab2b9de439405f/tests%2Fsource%2Fissue-3198.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51af19547313cc129dcccbe728ab2b9de439405f/tests%2Fsource%2Fissue-3198.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3198.rs?ref=51af19547313cc129dcccbe728ab2b9de439405f", "patch": "@@ -0,0 +1,99 @@\n+impl TestTrait {\n+    fn foo_one_pre(/* Important comment1 */\n+    self) {\n+    }\n+\n+    fn foo_one_post(self\n+    /* Important comment1 */) {\n+    }\n+\n+    fn foo_pre(\n+        /* Important comment1 */\n+        self,\n+        /* Important comment2 */\n+        a: i32,\n+    ) {\n+    }\n+\n+    fn foo_post(\n+        self\n+        /* Important comment1 */,\n+        a: i32\n+        /* Important comment2 */,\n+    ) {\n+    }\n+\n+    fn bar_pre(\n+            /* Important comment1 */\n+    &mut self,\n+        /* Important comment2 */\n+            a: i32,\n+    ) {\n+    }\n+\n+    fn bar_post(\n+    &mut self\n+            /* Important comment1 */,\n+            a: i32\n+        /* Important comment2 */,\n+    ) {\n+    }\n+\n+    fn baz_pre(\n+    /* Important comment1 */\n+            self: X< 'a ,  'b >,\n+            /* Important comment2 */\n+    a: i32,\n+    ) {\n+    }\n+\n+    fn baz_post(\n+            self: X< 'a ,  'b >\n+    /* Important comment1 */,\n+    a: i32\n+            /* Important comment2 */,\n+    ) {\n+    }\n+\n+    fn baz_tree_pre(\n+    /* Important comment1 */\n+            self: X< 'a ,  'b >,\n+        /* Important comment2 */\n+        a: i32,\n+        /* Important comment3 */\n+        b: i32,\n+    ) {\n+    }\n+\n+    fn baz_tree_post(\n+            self: X< 'a ,  'b >\n+    /* Important comment1 */,\n+        a: i32\n+        /* Important comment2 */,\n+        b: i32\n+        /* Important comment3 */,){\n+    }\n+\n+    fn multi_line(\n+        self: X<'a, 'b>, /* Important comment1-1 */\n+  /* Important comment1-2 */\n+        a: i32, /* Important comment2 */\n+        b: i32, /* Important comment3 */\n+    ) {\n+    }\n+\n+    fn two_line_comment(\n+        self: X<'a, 'b>, /* Important comment1-1\n+      Important comment1-2 */\n+        a: i32, /* Important comment2 */\n+        b: i32, /* Important comment3 */\n+    ) {\n+    }\n+\n+    fn no_first_line_comment(\n+        self: X<'a, 'b>,\n+        /* Important comment2 */a: i32,\n+        /* Important comment3 */b: i32,\n+    ) {\n+    }\n+}"}, {"sha": "9291f181d03a27f1566b395281e30045d8db9f42", "filename": "tests/target/issue-3198.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/51af19547313cc129dcccbe728ab2b9de439405f/tests%2Ftarget%2Fissue-3198.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51af19547313cc129dcccbe728ab2b9de439405f/tests%2Ftarget%2Fissue-3198.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3198.rs?ref=51af19547313cc129dcccbe728ab2b9de439405f", "patch": "@@ -0,0 +1,67 @@\n+impl TestTrait {\n+    fn foo_one_pre(/* Important comment1 */ self) {}\n+\n+    fn foo_one_post(self /* Important comment1 */) {}\n+\n+    fn foo_pre(/* Important comment1 */ self, /* Important comment2 */ a: i32) {}\n+\n+    fn foo_post(self /* Important comment1 */, a: i32 /* Important comment2 */) {}\n+\n+    fn bar_pre(/* Important comment1 */ &mut self, /* Important comment2 */ a: i32) {}\n+\n+    fn bar_post(&mut self /* Important comment1 */, a: i32 /* Important comment2 */) {}\n+\n+    fn baz_pre(\n+        /* Important comment1 */\n+        self: X<'a, 'b>,\n+        /* Important comment2 */\n+        a: i32,\n+    ) {\n+    }\n+\n+    fn baz_post(\n+        self: X<'a, 'b>, /* Important comment1 */\n+        a: i32,          /* Important comment2 */\n+    ) {\n+    }\n+\n+    fn baz_tree_pre(\n+        /* Important comment1 */\n+        self: X<'a, 'b>,\n+        /* Important comment2 */\n+        a: i32,\n+        /* Important comment3 */\n+        b: i32,\n+    ) {\n+    }\n+\n+    fn baz_tree_post(\n+        self: X<'a, 'b>, /* Important comment1 */\n+        a: i32,          /* Important comment2 */\n+        b: i32,          /* Important comment3 */\n+    ) {\n+    }\n+\n+    fn multi_line(\n+        self: X<'a, 'b>, /* Important comment1-1 */\n+        /* Important comment1-2 */\n+        a: i32, /* Important comment2 */\n+        b: i32, /* Important comment3 */\n+    ) {\n+    }\n+\n+    fn two_line_comment(\n+        self: X<'a, 'b>, /* Important comment1-1\n+                         Important comment1-2 */\n+        a: i32, /* Important comment2 */\n+        b: i32, /* Important comment3 */\n+    ) {\n+    }\n+\n+    fn no_first_line_comment(\n+        self: X<'a, 'b>,\n+        /* Important comment2 */ a: i32,\n+        /* Important comment3 */ b: i32,\n+    ) {\n+    }\n+}"}]}