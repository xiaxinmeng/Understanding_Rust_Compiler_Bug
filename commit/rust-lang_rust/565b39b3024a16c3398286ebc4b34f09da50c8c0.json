{"sha": "565b39b3024a16c3398286ebc4b34f09da50c8c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NWIzOWIzMDI0YTE2YzMzOTgyODZlYmM0YjM0ZjA5ZGE1MGM4YzA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-28T22:48:25Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-28T23:13:03Z"}, "message": "rename iter2 to each2, make it follow iterator protocol", "tree": {"sha": "ae4dc48a1b77c23784865ebcbbf68bffd2039bc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae4dc48a1b77c23784865ebcbbf68bffd2039bc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/565b39b3024a16c3398286ebc4b34f09da50c8c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/565b39b3024a16c3398286ebc4b34f09da50c8c0", "html_url": "https://github.com/rust-lang/rust/commit/565b39b3024a16c3398286ebc4b34f09da50c8c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/565b39b3024a16c3398286ebc4b34f09da50c8c0/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd8e7aab710ead7bcf1eeb77163e2ff028d0fc34", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd8e7aab710ead7bcf1eeb77163e2ff028d0fc34", "html_url": "https://github.com/rust-lang/rust/commit/fd8e7aab710ead7bcf1eeb77163e2ff028d0fc34"}], "stats": {"total": 51, "additions": 28, "deletions": 23}, "files": [{"sha": "4f3761bc70be69e5a0ddd944f32870ececd32316", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/565b39b3024a16c3398286ebc4b34f09da50c8c0/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565b39b3024a16c3398286ebc4b34f09da50c8c0/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=565b39b3024a16c3398286ebc4b34f09da50c8c0", "patch": "@@ -82,7 +82,7 @@ export swap;\n export reverse;\n export reversed;\n export each, each_mut, each_const, eachi, rev_each, rev_eachi;\n-export iter2;\n+export each2;\n export permute;\n export windowed;\n export as_imm_buf;\n@@ -1266,10 +1266,12 @@ pure fn rev_eachi<T>(v: &r/[T], blk: fn(i: uint, v: &r/T) -> bool) {\n  * Both vectors must have the same length\n  */\n #[inline]\n-fn iter2<U, T>(v1: &[U], v2: &[T], f: fn(u: &U, t: &T)) {\n+fn each2<U, T>(v1: &[U], v2: &[T], f: fn(u: &U, t: &T) -> bool) {\n     assert len(v1) == len(v2);\n     for uint::range(0u, len(v1)) |i| {\n-        f(&v1[i], &v2[i])\n+        if !f(&v1[i], &v2[i]) {\n+            return;\n+        }\n     }\n }\n "}, {"sha": "64915c607425fe39642a3cbba86045e2c8dadc34", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/565b39b3024a16c3398286ebc4b34f09da50c8c0/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565b39b3024a16c3398286ebc4b34f09da50c8c0/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=565b39b3024a16c3398286ebc4b34f09da50c8c0", "patch": "@@ -566,7 +566,7 @@ fn mk_ser_fn(cx: ext_ctxt, span: span, name: ast::ident,\n                     tp_inputs);\n \n     let tps_map = map::HashMap();\n-    do vec::iter2(tps, tp_inputs) |tp, arg| {\n+    for vec::each2(tps, tp_inputs) |tp, arg| {\n         let arg_ident = arg.ident;\n         tps_map.insert(\n             tp.ident,\n@@ -773,7 +773,7 @@ fn mk_deser_fn(cx: ext_ctxt, span: span,\n                     tp_inputs);\n \n     let tps_map = map::HashMap();\n-    do vec::iter2(tps, tp_inputs) |tp, arg| {\n+    for vec::each2(tps, tp_inputs) |tp, arg| {\n         let arg_ident = arg.ident;\n         tps_map.insert(\n             tp.ident,"}, {"sha": "0c79c0fcd7f36b69a074c24a5f2e5d332b13d01f", "filename": "src/rustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/565b39b3024a16c3398286ebc4b34f09da50c8c0/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565b39b3024a16c3398286ebc4b34f09da50c8c0/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=565b39b3024a16c3398286ebc4b34f09da50c8c0", "patch": "@@ -524,7 +524,7 @@ impl check_loan_ctxt {\n         let arg_tys =\n             ty::ty_fn_args(\n                 ty::node_id_to_type(self.tcx(), callee_id));\n-        do vec::iter2(args, arg_tys) |arg, arg_ty| {\n+        for vec::each2(args, arg_tys) |arg, arg_ty| {\n             match ty::resolved_mode(self.tcx(), arg_ty.mode) {\n                 ast::by_move => {\n                     self.check_move_out(*arg);"}, {"sha": "327db51518be580f216e6273db47ccf615c0be07", "filename": "src/rustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/565b39b3024a16c3398286ebc4b34f09da50c8c0/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565b39b3024a16c3398286ebc4b34f09da50c8c0/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=565b39b3024a16c3398286ebc4b34f09da50c8c0", "patch": "@@ -113,7 +113,7 @@ fn req_loans_in_expr(ex: @ast::expr,\n       ast::expr_call(f, args, _) => {\n         let arg_tys = ty::ty_fn_args(ty::expr_ty(self.tcx(), f));\n         let scope_r = ty::re_scope(ex.id);\n-        do vec::iter2(args, arg_tys) |arg, arg_ty| {\n+        for vec::each2(args, arg_tys) |arg, arg_ty| {\n             match ty::resolved_mode(self.tcx(), arg_ty.mode) {\n               ast::by_mutbl_ref => {\n                 let arg_cmt = self.bccx.cat_expr(*arg);"}, {"sha": "9aff382775c85ca40b2bcc9bdf12447452f903f6", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/565b39b3024a16c3398286ebc4b34f09da50c8c0/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565b39b3024a16c3398286ebc4b34f09da50c8c0/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=565b39b3024a16c3398286ebc4b34f09da50c8c0", "patch": "@@ -272,7 +272,7 @@ fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n                       tys_to_str(cx.tcx, *ts), ts.len(),\n                       *bounds, (*bounds).len());\n         }\n-        do vec::iter2(*ts, *bounds) |ty, bound| {\n+        for vec::each2(*ts, *bounds) |ty, bound| {\n             check_bounds(cx, id_to_use, e.span, *ty, *bound)\n         }\n     }\n@@ -376,7 +376,7 @@ fn check_ty(aty: @ty, cx: ctx, v: visit::vt<ctx>) {\n         do option::iter(&cx.tcx.node_type_substs.find(id)) |ts| {\n             let did = ast_util::def_id_of_def(cx.tcx.def_map.get(id));\n             let bounds = ty::lookup_item_type(cx.tcx, did).bounds;\n-            do vec::iter2(*ts, *bounds) |ty, bound| {\n+            for vec::each2(*ts, *bounds) |ty, bound| {\n                 check_bounds(cx, aty.id, aty.span, *ty, *bound)\n             }\n         }"}, {"sha": "964e2359527e720a7c7444c8bfc8f965b109b1d9", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/565b39b3024a16c3398286ebc4b34f09da50c8c0/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565b39b3024a16c3398286ebc4b34f09da50c8c0/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=565b39b3024a16c3398286ebc4b34f09da50c8c0", "patch": "@@ -675,7 +675,7 @@ fn check_fn_deprecated_modes(tcx: ty::ctxt, fn_ty: ty::t, decl: ast::fn_decl,\n     match ty::get(fn_ty).sty {\n         ty::ty_fn(fn_ty) => {\n             let mut counter = 0;\n-            do vec::iter2(fn_ty.sig.inputs, decl.inputs) |arg_ty, arg_ast| {\n+            for vec::each2(fn_ty.sig.inputs, decl.inputs) |arg_ty, arg_ast| {\n                 counter += 1;\n                 debug!(\"arg %d, ty=%s, mode=%s\",\n                        counter,"}, {"sha": "90c1b6ba54e708e4502956f867b47e69b188ebc2", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/565b39b3024a16c3398286ebc4b34f09da50c8c0/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565b39b3024a16c3398286ebc4b34f09da50c8c0/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=565b39b3024a16c3398286ebc4b34f09da50c8c0", "patch": "@@ -1571,7 +1571,7 @@ fn check_expr(expr: @expr, &&self: @Liveness, vt: vt<@Liveness>) {\n \n       expr_call(f, args, _) => {\n         let targs = ty::ty_fn_args(ty::expr_ty(self.tcx, f));\n-        do vec::iter2(args, targs) |arg_expr, arg_ty| {\n+        for vec::each2(args, targs) |arg_expr, arg_ty| {\n             match ty::resolved_mode(self.tcx, arg_ty.mode) {\n                 by_val | by_copy | by_ref | by_mutbl_ref => {}\n                 by_move => {"}, {"sha": "76888471bf978c6cd03e67004082b0412c2dc96f", "filename": "src/rustc/middle/trans/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/565b39b3024a16c3398286ebc4b34f09da50c8c0/src%2Frustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565b39b3024a16c3398286ebc4b34f09da50c8c0/src%2Frustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Finline.rs?ref=565b39b3024a16c3398286ebc4b34f09da50c8c0", "patch": "@@ -49,7 +49,7 @@ fn maybe_instantiate_inline(ccx: @crate_ctxt, fn_id: ast::def_id)\n               ast::item_enum(_, _) => {\n                 let vs_here = ty::enum_variants(ccx.tcx, local_def(item.id));\n                 let vs_there = ty::enum_variants(ccx.tcx, parent_id);\n-                do vec::iter2(*vs_here, *vs_there) |here, there| {\n+                for vec::each2(*vs_here, *vs_there) |here, there| {\n                     if there.id == fn_id { my_id = here.id.node; }\n                     ccx.external.insert(there.id, Some(here.id.node));\n                 }"}, {"sha": "6bd3c22f626a2fe395018bf8073b8f85c04fed98", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/565b39b3024a16c3398286ebc4b34f09da50c8c0/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565b39b3024a16c3398286ebc4b34f09da50c8c0/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=565b39b3024a16c3398286ebc4b34f09da50c8c0", "patch": "@@ -204,10 +204,10 @@ fn mark_for_expr(cx: ctx, e: @expr) {\n       expr_path(_) => {\n         do cx.ccx.tcx.node_type_substs.find(e.id).iter |ts| {\n             let id = ast_util::def_id_of_def(cx.ccx.tcx.def_map.get(e.id));\n-            vec::iter2(type_uses_for(cx.ccx, id, ts.len()), *ts,\n-                       |uses, subst| {\n-                           type_needs(cx, *uses, *subst)\n-                       })\n+            let uses_for_ts = type_uses_for(cx.ccx, id, ts.len());\n+            for vec::each2(uses_for_ts, *ts) |uses, subst| {\n+                type_needs(cx, *uses, *subst)\n+            }\n         }\n       }\n       expr_fn(*) | expr_fn_block(*) => {\n@@ -238,8 +238,10 @@ fn mark_for_expr(cx: ctx, e: @expr) {\n             match mth.origin {\n               typeck::method_static(did) => {\n                 do cx.ccx.tcx.node_type_substs.find(e.id).iter |ts| {\n-                    do vec::iter2(type_uses_for(cx.ccx, did, ts.len()), *ts)\n-                        |uses, subst| { type_needs(cx, *uses, *subst)}\n+                    let type_uses = type_uses_for(cx.ccx, did, ts.len());\n+                    for vec::each2(type_uses, *ts) |uses, subst| {\n+                        type_needs(cx, *uses, *subst)\n+                    }\n                 }\n               }\n               typeck::method_param({param_num: param, _}) => {"}, {"sha": "41acc2ce070f15bf919bd661b8b7c080e1d283a3", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/565b39b3024a16c3398286ebc4b34f09da50c8c0/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565b39b3024a16c3398286ebc4b34f09da50c8c0/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=565b39b3024a16c3398286ebc4b34f09da50c8c0", "patch": "@@ -308,7 +308,7 @@ fn check_fn(ccx: @crate_ctxt,\n     for self_info.each |info| {\n         fcx.write_ty(info.self_id, info.self_ty);\n     }\n-    do vec::iter2(decl.inputs, arg_tys) |input, arg| {\n+    for vec::each2(decl.inputs, arg_tys) |input, arg| {\n         fcx.write_ty(input.id, *arg);\n     }\n \n@@ -351,7 +351,7 @@ fn check_fn(ccx: @crate_ctxt,\n         }\n \n         // Add formal parameters.\n-        do vec::iter2(arg_tys, decl.inputs) |arg_ty, input| {\n+        for vec::each2(arg_tys, decl.inputs) |arg_ty, input| {\n             assign(input.ty.span, input.id, Some(*arg_ty));\n             debug!(\"Argument %s is assigned to %s\",\n                    tcx.sess.str_of(input.ident),"}, {"sha": "0b2e9c8ab3dda0287d15693f3209ed9c64d23b93", "filename": "src/rustc/middle/typeck/check/alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/565b39b3024a16c3398286ebc4b34f09da50c8c0/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565b39b3024a16c3398286ebc4b34f09da50c8c0/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs?ref=565b39b3024a16c3398286ebc4b34f09da50c8c0", "patch": "@@ -164,7 +164,7 @@ fn check_pat_variant(pcx: pat_ctxt, pat: @ast::pat, path: @ast::path,\n             }\n \n             do subpats.iter() |pats| {\n-                do vec::iter2(*pats, arg_types) |subpat, arg_ty| {\n+                for vec::each2(*pats, arg_types) |subpat, arg_ty| {\n                   check_pat(pcx, *subpat, *arg_ty);\n                 }\n             };"}, {"sha": "2d1455d04ce2efe18d167b23057dd898b206ced7", "filename": "src/rustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/565b39b3024a16c3398286ebc4b34f09da50c8c0/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565b39b3024a16c3398286ebc4b34f09da50c8c0/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=565b39b3024a16c3398286ebc4b34f09da50c8c0", "patch": "@@ -392,8 +392,9 @@ fn connect_trait_tps(fcx: @fn_ctxt, expr: @ast::expr, impl_tys: ~[ty::t],\n            ty::get(trait_ty).sty, impl_did);\n     match ty::get(trait_ty).sty {\n      ty::ty_trait(_, substs, _) => {\n-        vec::iter2(substs.tps, trait_tys,\n-                   |a, b| demand::suptype(fcx, expr.span, *a, *b));\n+         for vec::each2(substs.tps, trait_tys) |a, b| {\n+             demand::suptype(fcx, expr.span, *a, *b)\n+         }\n       }\n      _ => tcx.sess.impossible_case(expr.span, \"connect_trait_tps: \\\n             don't know how to handle a non-trait ty\")"}]}