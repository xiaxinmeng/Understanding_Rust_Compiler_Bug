{"sha": "5e656baf8bc832d3b77a1e49373352b3b2685fc0", "node_id": "C_kwDOAAsO6NoAKDVlNjU2YmFmOGJjODMyZDNiNzdhMWU0OTM3MzM1MmIzYjI2ODVmYzA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-23T02:44:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-23T02:44:32Z"}, "message": "Auto merge of #106070 - matthiaskrgr:rollup-jv9ctkl, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #105978 (Mark `proc_macro_decls_static` as always used)\n - #106051 (Allow building std with cranelift)\n - #106056 (Make `sess.bug` much less noisy)\n - #106057 (Give a more helpful error for \"trimmed_def_paths constructed\")\n - #106058 (Fix the issue number in comment for as_local_call_operand)\n - #106059 (Avoid running the `Profile` step twice on `x setup`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "41c3fe35f7c61e7ad001a48f67d3b57df7d7d9d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41c3fe35f7c61e7ad001a48f67d3b57df7d7d9d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e656baf8bc832d3b77a1e49373352b3b2685fc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e656baf8bc832d3b77a1e49373352b3b2685fc0", "html_url": "https://github.com/rust-lang/rust/commit/5e656baf8bc832d3b77a1e49373352b3b2685fc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e656baf8bc832d3b77a1e49373352b3b2685fc0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daccb3d974ca20d78e02c9691fb3bddc90194935", "url": "https://api.github.com/repos/rust-lang/rust/commits/daccb3d974ca20d78e02c9691fb3bddc90194935", "html_url": "https://github.com/rust-lang/rust/commit/daccb3d974ca20d78e02c9691fb3bddc90194935"}, {"sha": "fa1e34fbaf5a21d6ddc677c280ff8510b471bb96", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa1e34fbaf5a21d6ddc677c280ff8510b471bb96", "html_url": "https://github.com/rust-lang/rust/commit/fa1e34fbaf5a21d6ddc677c280ff8510b471bb96"}], "stats": {"total": 57, "additions": 45, "deletions": 12}, "files": [{"sha": "4081f0636056e7c9d7b8209821aed966797cb5ee", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e656baf8bc832d3b77a1e49373352b3b2685fc0/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5e656baf8bc832d3b77a1e49373352b3b2685fc0/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5e656baf8bc832d3b77a1e49373352b3b2685fc0", "patch": "@@ -4129,6 +4129,7 @@ dependencies = [\n  \"rustc_ast\",\n  \"rustc_attr\",\n  \"rustc_data_structures\",\n+ \"rustc_error_messages\",\n  \"rustc_errors\",\n  \"rustc_feature\",\n  \"rustc_graphviz\","}, {"sha": "b88de224675379a24f1f78e50c9ea9f0fc7f60a1", "filename": "compiler/rustc_builtin_macros/src/proc_macro_harness.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e656baf8bc832d3b77a1e49373352b3b2685fc0/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e656baf8bc832d3b77a1e49373352b3b2685fc0/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs?ref=5e656baf8bc832d3b77a1e49373352b3b2685fc0", "patch": "@@ -262,6 +262,7 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n //          use proc_macro::bridge::client::ProcMacro;\n //\n //          #[rustc_proc_macro_decls]\n+//          #[used]\n //          #[allow(deprecated)]\n //          static DECLS: &[ProcMacro] = &[\n //              ProcMacro::custom_derive($name_trait1, &[], ::$name1);\n@@ -364,6 +365,7 @@ fn mk_decls(cx: &mut ExtCtxt<'_>, macros: &[ProcMacro]) -> P<ast::Item> {\n         )\n         .map(|mut i| {\n             i.attrs.push(cx.attr_word(sym::rustc_proc_macro_decls, span));\n+            i.attrs.push(cx.attr_word(sym::used, span));\n             i.attrs.push(cx.attr_nested_word(sym::allow, sym::deprecated, span));\n             i\n         });"}, {"sha": "1ce48f82e1c9b739bf26fd800d132544706f72d7", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e656baf8bc832d3b77a1e49373352b3b2685fc0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e656baf8bc832d3b77a1e49373352b3b2685fc0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=5e656baf8bc832d3b77a1e49373352b3b2685fc0", "patch": "@@ -567,7 +567,7 @@ fn codegen_msvc_try<'ll>(\n         // module.\n         //\n         // When modifying, make sure that the type_name string exactly matches\n-        // the one used in src/libpanic_unwind/seh.rs.\n+        // the one used in library/panic_unwind/src/seh.rs.\n         let type_info_vtable = bx.declare_global(\"??_7type_info@@6B@\", bx.type_i8p());\n         let type_name = bx.const_bytes(b\"rust_panic\\0\");\n         let type_info ="}, {"sha": "236f66eae72c33cee18652a0bb9ffc97f32dcb60", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5e656baf8bc832d3b77a1e49373352b3b2685fc0/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e656baf8bc832d3b77a1e49373352b3b2685fc0/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=5e656baf8bc832d3b77a1e49373352b3b2685fc0", "patch": "@@ -1199,10 +1199,13 @@ static DEFAULT_HOOK: LazyLock<Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send +\n             };\n \n             // Invoke the default handler, which prints the actual panic message and optionally a backtrace\n-            (*DEFAULT_HOOK)(info);\n+            // Don't do this for `ExplicitBug`, which has an unhelpful message and backtrace.\n+            if !info.payload().is::<rustc_errors::ExplicitBug>() {\n+                (*DEFAULT_HOOK)(info);\n \n-            // Separate the output with an empty line\n-            eprintln!();\n+                // Separate the output with an empty line\n+                eprintln!();\n+            }\n \n             // Print the ICE message\n             report_ice(info, BUG_REPORT_URL);"}, {"sha": "8b1ac617af827972363dfd49e326a3c54eddf89d", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e656baf8bc832d3b77a1e49373352b3b2685fc0/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e656baf8bc832d3b77a1e49373352b3b2685fc0/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=5e656baf8bc832d3b77a1e49373352b3b2685fc0", "patch": "@@ -381,7 +381,7 @@ impl<S: Into<String>> From<S> for DiagnosticMessage {\n     }\n }\n \n-/// A workaround for \"good path\" ICEs when formatting types in disables lints.\n+/// A workaround for \"good path\" ICEs when formatting types in disabled lints.\n ///\n /// Delays formatting until `.into(): DiagnosticMessage` is used.\n pub struct DelayDm<F>(pub F);"}, {"sha": "543bd56a20c18e863b5aa714dc000b71c95a1fef", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e656baf8bc832d3b77a1e49373352b3b2685fc0/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5e656baf8bc832d3b77a1e49373352b3b2685fc0/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=5e656baf8bc832d3b77a1e49373352b3b2685fc0", "patch": "@@ -18,6 +18,8 @@ rustc_ast = { path = \"../rustc_ast\" }\n rustc_attr = { path = \"../rustc_attr\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n+# Used for intra-doc links\n+rustc_error_messages = { path = \"../rustc_error_messages\" }\n rustc_feature = { path = \"../rustc_feature\" }\n rustc_graphviz = { path = \"../rustc_graphviz\" }\n rustc_hir = { path = \"../rustc_hir\" }"}, {"sha": "c49e75d68ad32b3401efcfa533edcf6e94ba9933", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e656baf8bc832d3b77a1e49373352b3b2685fc0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e656baf8bc832d3b77a1e49373352b3b2685fc0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=5e656baf8bc832d3b77a1e49373352b3b2685fc0", "patch": "@@ -2883,13 +2883,19 @@ fn for_each_def(tcx: TyCtxt<'_>, mut collect_fn: impl for<'b> FnMut(&'b Ident, N\n /// `std::vec::Vec` to just `Vec`, as long as there is no other `Vec` importable anywhere.\n ///\n /// The implementation uses similar import discovery logic to that of 'use' suggestions.\n+///\n+/// See also [`DelayDm`](rustc_error_messages::DelayDm) and [`with_no_trimmed_paths`].\n fn trimmed_def_paths(tcx: TyCtxt<'_>, (): ()) -> FxHashMap<DefId, Symbol> {\n     let mut map: FxHashMap<DefId, Symbol> = FxHashMap::default();\n \n     if let TrimmedDefPaths::GoodPath = tcx.sess.opts.trimmed_def_paths {\n+        // Trimming paths is expensive and not optimized, since we expect it to only be used for error reporting.\n+        //\n         // For good paths causing this bug, the `rustc_middle::ty::print::with_no_trimmed_paths`\n         // wrapper can be used to suppress this query, in exchange for full paths being formatted.\n-        tcx.sess.delay_good_path_bug(\"trimmed_def_paths constructed\");\n+        tcx.sess.delay_good_path_bug(\n+            \"trimmed_def_paths constructed but no error emitted; use `DelayDm` for lints or `with_no_trimmed_paths` for debugging\",\n+        );\n     }\n \n     let unique_symbols_rev: &mut FxHashMap<(Namespace, Symbol), Option<DefId>> ="}, {"sha": "dbcb0132c9f88f5993ca0c7920ba79ada3cb9d07", "filename": "compiler/rustc_mir_build/src/build/expr/as_operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e656baf8bc832d3b77a1e49373352b3b2685fc0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e656baf8bc832d3b77a1e49373352b3b2685fc0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs?ref=5e656baf8bc832d3b77a1e49373352b3b2685fc0", "patch": "@@ -72,7 +72,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// will actually provide a pointer to the interior of the box, and not move the `dyn Debug`\n     /// value to the stack.\n     ///\n-    /// See #68034 for more details.\n+    /// See #68304 for more details.\n     pub(crate) fn as_local_call_operand(\n         &mut self,\n         block: BasicBlock,"}, {"sha": "72d6a48b37ad759576267c77122047ab9a7df6fe", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e656baf8bc832d3b77a1e49373352b3b2685fc0/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e656baf8bc832d3b77a1e49373352b3b2685fc0/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=5e656baf8bc832d3b77a1e49373352b3b2685fc0", "patch": "@@ -1864,7 +1864,10 @@ impl<'a> Builder<'a> {\n             };\n \n             if let Some(limit) = limit {\n-                rustflags.arg(&format!(\"-Cllvm-args=-import-instr-limit={}\", limit));\n+                if stage == 0 || self.config.default_codegen_backend().unwrap_or_default() == \"llvm\"\n+                {\n+                    rustflags.arg(&format!(\"-Cllvm-args=-import-instr-limit={}\", limit));\n+                }\n             }\n         }\n "}, {"sha": "0e3bbad9909eb243c7a02618bc6d0332db49c07c", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5e656baf8bc832d3b77a1e49373352b3b2685fc0/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e656baf8bc832d3b77a1e49373352b3b2685fc0/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=5e656baf8bc832d3b77a1e49373352b3b2685fc0", "patch": "@@ -321,8 +321,15 @@ pub fn std_cargo(builder: &Builder<'_>, target: TargetSelection, stage: u32, car\n         \"\"\n     };\n \n+    let mut features = String::new();\n+\n+    // Cranelift doesn't support `asm`.\n+    if stage != 0 && builder.config.default_codegen_backend().unwrap_or_default() == \"cranelift\" {\n+        features += \" compiler-builtins-no-asm\";\n+    }\n+\n     if builder.no_std(target) == Some(true) {\n-        let mut features = \"compiler-builtins-mem\".to_string();\n+        features += \" compiler-builtins-mem\";\n         if !target.starts_with(\"bpf\") {\n             features.push_str(compiler_builtins_c_feature);\n         }\n@@ -335,7 +342,7 @@ pub fn std_cargo(builder: &Builder<'_>, target: TargetSelection, stage: u32, car\n             .arg(\"--features\")\n             .arg(features);\n     } else {\n-        let mut features = builder.std_features(target);\n+        features += &builder.std_features(target);\n         features.push_str(compiler_builtins_c_feature);\n \n         cargo\n@@ -754,7 +761,7 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetS\n         .env(\"CFG_RELEASE_CHANNEL\", &builder.config.channel)\n         .env(\"CFG_VERSION\", builder.rust_version());\n \n-    if let Some(backend) = builder.config.rust_codegen_backends.get(0) {\n+    if let Some(backend) = builder.config.default_codegen_backend() {\n         cargo.env(\"CFG_DEFAULT_CODEGEN_BACKEND\", backend);\n     }\n "}, {"sha": "842785838460f719cb9fa41e8075ac6e65769dc2", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e656baf8bc832d3b77a1e49373352b3b2685fc0/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e656baf8bc832d3b77a1e49373352b3b2685fc0/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=5e656baf8bc832d3b77a1e49373352b3b2685fc0", "patch": "@@ -1611,6 +1611,10 @@ impl Config {\n         self.submodules.unwrap_or(rust_info.is_managed_git_subrepository())\n     }\n \n+    pub fn default_codegen_backend(&self) -> Option<Interned<String>> {\n+        self.rust_codegen_backends.get(0).cloned()\n+    }\n+\n     /// Returns the commit to download, or `None` if we shouldn't download CI artifacts.\n     fn download_ci_rustc_commit(&self, download_rustc: Option<StringOrBool>) -> Option<String> {\n         // If `download-rustc` is not set, default to rebuilding."}, {"sha": "f84fcd21cfcfeacb7be2938ed3e5239377822a48", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e656baf8bc832d3b77a1e49373352b3b2685fc0/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e656baf8bc832d3b77a1e49373352b3b2685fc0/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=5e656baf8bc832d3b77a1e49373352b3b2685fc0", "patch": "@@ -796,7 +796,7 @@ impl Build {\n     /// Gets the space-separated set of activated features for the standard\n     /// library.\n     fn std_features(&self, target: TargetSelection) -> String {\n-        let mut features = \"panic-unwind\".to_string();\n+        let mut features = \" panic-unwind\".to_string();\n \n         match self.config.llvm_libunwind(target) {\n             LlvmLibunwind::InTree => features.push_str(\" llvm-libunwind\"),"}, {"sha": "cd360cbef9654b3108d2c1100f6613c5039f6278", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e656baf8bc832d3b77a1e49373352b3b2685fc0/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e656baf8bc832d3b77a1e49373352b3b2685fc0/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=5e656baf8bc832d3b77a1e49373352b3b2685fc0", "patch": "@@ -96,6 +96,10 @@ impl Step for Profile {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n+        if run.builder.config.dry_run() {\n+            return;\n+        }\n+\n         // for Profile, `run.paths` will have 1 and only 1 element\n         // this is because we only accept at most 1 path from user input.\n         // If user calls `x.py setup` without arguments, the interactive TUI"}, {"sha": "9f64a1e06b9d41b2aedcd95002b7a5568d85a1ee", "filename": "src/test/ui/proc-macro/quote-debug.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e656baf8bc832d3b77a1e49373352b3b2685fc0/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5e656baf8bc832d3b77a1e49373352b3b2685fc0/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout?ref=5e656baf8bc832d3b77a1e49373352b3b2685fc0", "patch": "@@ -42,6 +42,7 @@ const _: () =\n     {\n         extern crate proc_macro;\n         #[rustc_proc_macro_decls]\n+        #[used]\n         #[allow(deprecated)]\n         static _DECLS: &[proc_macro::bridge::client::ProcMacro] = &[];\n     };"}]}