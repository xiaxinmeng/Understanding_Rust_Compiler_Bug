{"sha": "79e2afc28c53bbda4b86ae824519430f0a7d7516", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZTJhZmMyOGM1M2JiZGE0Yjg2YWU4MjQ1MTk0MzBmMGE3ZDc1MTY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-14T05:16:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-14T05:16:16Z"}, "message": "Rollup merge of #66253 - ohadravid:improve-errors-after-re-rebalance-coherence, r=estebank\n\nImprove errors after re rebalance coherence\n\nFollowing #65247, I noticed that some error messages should be updated to reflect the changes of `re_rebalance_coherence` (also there was a [note](https://rust-lang.github.io/rfcs/2451-re-rebalancing-coherence.html#teaching-users) in the RFC about it).\n\nFirst, error message `E0210` was updated to match the RFC, and I also tried to improve a little the error when the \"order\" of types is problematic.\n\nFor code like this:\n```\n#![feature(re_rebalance_coherence)] // Now stable\n\nstruct Wrap<T>(T);\n\nimpl<T> From<Wrap<T>> for T {\n    fn from(x: Wrap<T>) -> T {\n        x.0\n    }\n}\n```\n\nThe old error was:\n```\nerror[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n --> src/lib.rs:5:6\n  |\n5 | impl<T> From<Wrap<T>> for T {\n  |      ^ type parameter `T` must be used as the type parameter for some local type\n  |\n  = note: only traits defined in the current crate can be implemented for a type parameter\n\n```\n\nand the new error is:\n```\nerror[E0210]: type parameter `T` must be covered by another type when it appears before the first local type (`Wrap<T>`)\n  --> main.rs:66:6\n   |\n66 | impl<T> From<Wrap<T>> for T {\n   |      ^ type parameter `T` must be covered by another type when it appears before the first local type (`Wrap<T>`)\n   |\n   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local, and no uncovered type parameters appear before that first local type\n   = note: in this case, 'before' refers to the following order: `impl<..> ForeignTrait<T1, ..., Tn> for T0`, where `T0` is the first and `Tn` is the last\n```\n\nI tried to point at the uncovered `T`, but couldn't get something which was reliable (but I'll be happy to try if someone points me in the right direction).\n\nr? @estebank\ncc @nikomatsakis\n\nFixes #65247", "tree": {"sha": "b4d28d6e19b90e8ed7e62b8e8c4d5700ebf1f821", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4d28d6e19b90e8ed7e62b8e8c4d5700ebf1f821"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79e2afc28c53bbda4b86ae824519430f0a7d7516", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdzOMgCRBK7hj4Ov3rIwAAdHIIAGAQ2PjIfh+CiLwcGUPaNlJH\nNvd3/3O8gD6twHrHWynGYEGQCzsmjZIgl9FatnqK30wZXJa1YfdxqQJr/pG9um8d\neZ4c75SLya9cCcBgrH/E6uf051rjikcJyO2kFMiXKJrOZ9hDX41upWeCGuKeIN15\nxV90ZYx6EdQGBUQqRvaGsqE6lPsSxK2j40gChYr3gfkUuL4q8mt8fTR8+hEtjblt\nA0k/zq8g3fbKfO0tAfMuoWkXVpX7dzhcKglKy32dbZE++3a2//2euMmSiPY0ND5L\nPj32x834/ufqGa0xEh/FpmB5ilrBe1F9Ok9nOS2pkaiiof1iXijlhn+ohWSKbnw=\n=0v02\n-----END PGP SIGNATURE-----\n", "payload": "tree b4d28d6e19b90e8ed7e62b8e8c4d5700ebf1f821\nparent 3f07f1cd78432c9901788de2feafc0c2331edee3\nparent 2db744ca9d4da28c5d0088f5d21e237e7f678abb\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1573708576 +0900\ncommitter GitHub <noreply@github.com> 1573708576 +0900\n\nRollup merge of #66253 - ohadravid:improve-errors-after-re-rebalance-coherence, r=estebank\n\nImprove errors after re rebalance coherence\n\nFollowing #65247, I noticed that some error messages should be updated to reflect the changes of `re_rebalance_coherence` (also there was a [note](https://rust-lang.github.io/rfcs/2451-re-rebalancing-coherence.html#teaching-users) in the RFC about it).\n\nFirst, error message `E0210` was updated to match the RFC, and I also tried to improve a little the error when the \"order\" of types is problematic.\n\nFor code like this:\n```\n#![feature(re_rebalance_coherence)] // Now stable\n\nstruct Wrap<T>(T);\n\nimpl<T> From<Wrap<T>> for T {\n    fn from(x: Wrap<T>) -> T {\n        x.0\n    }\n}\n```\n\nThe old error was:\n```\nerror[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n --> src/lib.rs:5:6\n  |\n5 | impl<T> From<Wrap<T>> for T {\n  |      ^ type parameter `T` must be used as the type parameter for some local type\n  |\n  = note: only traits defined in the current crate can be implemented for a type parameter\n\n```\n\nand the new error is:\n```\nerror[E0210]: type parameter `T` must be covered by another type when it appears before the first local type (`Wrap<T>`)\n  --> main.rs:66:6\n   |\n66 | impl<T> From<Wrap<T>> for T {\n   |      ^ type parameter `T` must be covered by another type when it appears before the first local type (`Wrap<T>`)\n   |\n   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local, and no uncovered type parameters appear before that first local type\n   = note: in this case, 'before' refers to the following order: `impl<..> ForeignTrait<T1, ..., Tn> for T0`, where `T0` is the first and `Tn` is the last\n```\n\nI tried to point at the uncovered `T`, but couldn't get something which was reliable (but I'll be happy to try if someone points me in the right direction).\n\nr? @estebank\ncc @nikomatsakis\n\nFixes #65247\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79e2afc28c53bbda4b86ae824519430f0a7d7516", "html_url": "https://github.com/rust-lang/rust/commit/79e2afc28c53bbda4b86ae824519430f0a7d7516", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79e2afc28c53bbda4b86ae824519430f0a7d7516/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f07f1cd78432c9901788de2feafc0c2331edee3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f07f1cd78432c9901788de2feafc0c2331edee3", "html_url": "https://github.com/rust-lang/rust/commit/3f07f1cd78432c9901788de2feafc0c2331edee3"}, {"sha": "2db744ca9d4da28c5d0088f5d21e237e7f678abb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2db744ca9d4da28c5d0088f5d21e237e7f678abb", "html_url": "https://github.com/rust-lang/rust/commit/2db744ca9d4da28c5d0088f5d21e237e7f678abb"}], "stats": {"total": 171, "additions": 122, "deletions": 49}, "files": [{"sha": "778bba1eef68f099998fdf2858467ee1f62fa5d3", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=79e2afc28c53bbda4b86ae824519430f0a7d7516", "patch": "@@ -238,7 +238,7 @@ pub fn trait_ref_is_local_or_fundamental<'tcx>(\n \n pub enum OrphanCheckErr<'tcx> {\n     NonLocalInputType(Vec<(Ty<'tcx>, bool /* Is this the first input type? */)>),\n-    UncoveredTy(Ty<'tcx>),\n+    UncoveredTy(Ty<'tcx>, Option<Ty<'tcx>>),\n }\n \n /// Checks the coherence orphan rules. `impl_def_id` should be the\n@@ -402,7 +402,15 @@ fn orphan_check_trait_ref<'tcx>(\n             return Ok(());\n         } else if let ty::Param(_) = input_ty.kind {\n             debug!(\"orphan_check_trait_ref: uncovered ty: `{:?}`\", input_ty);\n-            return Err(OrphanCheckErr::UncoveredTy(input_ty))\n+            let local_type = trait_ref\n+                .input_types()\n+                .flat_map(|ty| uncover_fundamental_ty(tcx, ty, in_crate))\n+                .filter(|ty| ty_is_non_local_constructor(tcx, ty, in_crate).is_none())\n+                .next();\n+\n+            debug!(\"orphan_check_trait_ref: uncovered ty local_type: `{:?}`\", local_type);\n+\n+            return Err(OrphanCheckErr::UncoveredTy(input_ty, local_type))\n         }\n         if let Some(non_local_tys) = non_local_tys {\n             for input_ty in non_local_tys {"}, {"sha": "88fa09cc9366a39d3f9bc24f94c58f5dafe26577", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 46, "deletions": 18, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=79e2afc28c53bbda4b86ae824519430f0a7d7516", "patch": "@@ -77,30 +77,58 @@ impl ItemLikeVisitor<'v> for OrphanChecker<'tcx> {\n                     err.emit();\n                     return;\n                 }\n-                Err(traits::OrphanCheckErr::UncoveredTy(param_ty)) => {\n+                Err(traits::OrphanCheckErr::UncoveredTy(param_ty, local_type)) => {\n                     let mut sp = sp;\n                     for param in &generics.params {\n                         if param.name.ident().to_string() == param_ty.to_string() {\n                             sp = param.span;\n                         }\n                     }\n-                    let mut err = struct_span_err!(\n-                        self.tcx.sess,\n-                        sp,\n-                        E0210,\n-                        \"type parameter `{}` must be used as the type parameter for some local \\\n-                         type (e.g., `MyStruct<{}>`)\",\n-                        param_ty,\n-                        param_ty\n-                    );\n-                    err.span_label(sp, format!(\n-                        \"type parameter `{}` must be used as the type parameter for some local \\\n-                         type\",\n-                        param_ty,\n-                    ));\n-                    err.note(\"only traits defined in the current crate can be implemented for a \\\n-                              type parameter\");\n-                    err.emit();\n+\n+                    match local_type {\n+                        Some(local_type) => {\n+                            struct_span_err!(\n+                                self.tcx.sess,\n+                                sp,\n+                                E0210,\n+                                \"type parameter `{}` must be covered by another type \\\n+                                when it appears before the first local type (`{}`)\",\n+                                param_ty,\n+                                local_type\n+                            ).span_label(sp, format!(\n+                                \"type parameter `{}` must be covered by another type \\\n+                                when it appears before the first local type (`{}`)\",\n+                                param_ty,\n+                                local_type\n+                            )).note(\"implementing a foreign trait is only possible if at \\\n+                                    least one of the types for which is it implemented is local, \\\n+                                    and no uncovered type parameters appear before that first \\\n+                                    local type\"\n+                            ).note(\"in this case, 'before' refers to the following order: \\\n+                                    `impl<..> ForeignTrait<T1, ..., Tn> for T0`, \\\n+                                    where `T0` is the first and `Tn` is the last\"\n+                            ).emit();\n+                        }\n+                        None => {\n+                            struct_span_err!(\n+                                self.tcx.sess,\n+                                sp,\n+                                E0210,\n+                                \"type parameter `{}` must be used as the type parameter for some \\\n+                                local type (e.g., `MyStruct<{}>`)\",\n+                                param_ty,\n+                                param_ty\n+                            ).span_label(sp, format!(\n+                                \"type parameter `{}` must be used as the type parameter for some \\\n+                                local type\",\n+                                param_ty,\n+                            )).note(\"implementing a foreign trait is only possible if at \\\n+                                    least one of the types for which is it implemented is local\"\n+                            ).note(\"only traits defined in the current crate can be \\\n+                                    implemented for a type parameter\"\n+                            ).emit();\n+                        }\n+                    };\n                     return;\n                 }\n             }"}, {"sha": "02783f65df537550cc09bc23276e2ec627a83a8d", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=79e2afc28c53bbda4b86ae824519430f0a7d7516", "patch": "@@ -2114,8 +2114,13 @@ E0210: r##\"\n This error indicates a violation of one of Rust's orphan rules for trait\n implementations. The rule concerns the use of type parameters in an\n implementation of a foreign trait (a trait defined in another crate), and\n-states that type parameters must be \"covered\" by a local type. To understand\n-what this means, it is perhaps easiest to consider a few examples.\n+states that type parameters must be \"covered\" by a local type.\n+\n+When implementing a foreign trait for a foreign type,\n+the trait must have one or more type parameters.\n+A type local to your crate must appear before any use of any type parameters.\n+\n+To understand what this means, it is perhaps easier to consider a few examples.\n \n If `ForeignTrait` is a trait defined in some external crate `foo`, then the\n following trait `impl` is an error:\n@@ -2173,12 +2178,18 @@ impl<P1, ..., Pm> ForeignTrait<T1, ..., Tn> for T0 { ... }\n \n where `P1, ..., Pm` are the type parameters of the `impl` and `T0, ..., Tn`\n are types. One of the types `T0, ..., Tn` must be a local type (this is another\n-orphan rule, see the explanation for E0117). Let `i` be the smallest integer\n-such that `Ti` is a local type. Then no type parameter can appear in any of the\n-`Tj` for `j < i`.\n+orphan rule, see the explanation for E0117).\n \n-For information on the design of the orphan rules, see [RFC 1023].\n+Both of the following must be true:\n+1. At least one of the types `T0..=Tn` must be a local type.\n+Let `Ti` be the first such type.\n+2. No uncovered type parameters `P1..=Pm` may appear in `T0..Ti`\n+(excluding `Ti`).\n+\n+For information on the design of the orphan rules,\n+see [RFC 2451] and [RFC 1023].\n \n+[RFC 2451]: https://rust-lang.github.io/rfcs/2451-re-rebalancing-coherence.html\n [RFC 1023]: https://github.com/rust-lang/rfcs/blob/master/text/1023-rebalancing-coherence.md\n \"##,\n "}, {"sha": "6ecfb2c5eb0e32f7e153e4ccb6cd2483c018ba9a", "filename": "src/test/ui/coherence/coherence-all-remote.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-all-remote.stderr?ref=79e2afc28c53bbda4b86ae824519430f0a7d7516", "patch": "@@ -4,6 +4,7 @@ error[E0210]: type parameter `T` must be used as the type parameter for some loc\n LL | impl<T> Remote1<T> for isize { }\n    |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error: aborting due to previous error"}, {"sha": "d431c5f4b52519a66ca68dfb41eb9b90defce42a", "filename": "src/test/ui/coherence/coherence-bigint-param.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-bigint-param.stderr?ref=79e2afc28c53bbda4b86ae824519430f0a7d7516", "patch": "@@ -1,10 +1,11 @@\n-error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n+error[E0210]: type parameter `T` must be covered by another type when it appears before the first local type (`BigInt`)\n   --> $DIR/coherence-bigint-param.rs:8:6\n    |\n LL | impl<T> Remote1<BigInt> for T { }\n-   |      ^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be covered by another type when it appears before the first local type (`BigInt`)\n    |\n-   = note: only traits defined in the current crate can be implemented for a type parameter\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local, and no uncovered type parameters appear before that first local type\n+   = note: in this case, 'before' refers to the following order: `impl<..> ForeignTrait<T1, ..., Tn> for T0`, where `T0` is the first and `Tn` is the last\n \n error: aborting due to previous error\n "}, {"sha": "c00751a0f2338d97924baa57e3ce04a335a87377", "filename": "src/test/ui/coherence/coherence-cross-crate-conflict.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.stderr?ref=79e2afc28c53bbda4b86ae824519430f0a7d7516", "patch": "@@ -13,6 +13,7 @@ error[E0210]: type parameter `A` must be used as the type parameter for some loc\n LL | impl<A> Foo for A {\n    |      ^ type parameter `A` must be used as the type parameter for some local type\n    |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error: aborting due to 2 previous errors"}, {"sha": "2c3b4fc3ad2a86ec0de1874f81f271015aef5502", "filename": "src/test/ui/coherence/coherence-lone-type-parameter.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-lone-type-parameter.stderr?ref=79e2afc28c53bbda4b86ae824519430f0a7d7516", "patch": "@@ -4,6 +4,7 @@ error[E0210]: type parameter `T` must be used as the type parameter for some loc\n LL | impl<T> Remote for T { }\n    |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error: aborting due to previous error"}, {"sha": "8a951d407ca4668b49007c67f933c9746cf2c488", "filename": "src/test/ui/coherence/impl[t]-foreign-for-fundamental[t].stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-fundamental%5Bt%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-fundamental%5Bt%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-fundamental%5Bt%5D.stderr?ref=79e2afc28c53bbda4b86ae824519430f0a7d7516", "patch": "@@ -4,6 +4,7 @@ error[E0210]: type parameter `T` must be used as the type parameter for some loc\n LL | impl<T> Remote for Box<T> {\n    |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error: aborting due to previous error"}, {"sha": "c5759244eff498e594e69e27a8615c52ec697ee7", "filename": "src/test/ui/coherence/impl[t]-foreign[foreign]-for-fundamental[t].stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-fundamental%5Bt%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-fundamental%5Bt%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-fundamental%5Bt%5D.stderr?ref=79e2afc28c53bbda4b86ae824519430f0a7d7516", "patch": "@@ -4,6 +4,7 @@ error[E0210]: type parameter `T` must be used as the type parameter for some loc\n LL | impl<T> Remote1<u32> for Box<T> {\n    |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n@@ -12,6 +13,7 @@ error[E0210]: type parameter `T` must be used as the type parameter for some loc\n LL | impl<'a, T> Remote1<u32> for &'a T {\n    |          ^ type parameter `T` must be used as the type parameter for some local type\n    |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error: aborting due to 2 previous errors"}, {"sha": "e8663fd7d820d9078c050812a187168aba70effd", "filename": "src/test/ui/coherence/impl[t]-foreign[foreign]-for-t.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-t.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-t.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bforeign%5D-for-t.stderr?ref=79e2afc28c53bbda4b86ae824519430f0a7d7516", "patch": "@@ -4,6 +4,7 @@ error[E0210]: type parameter `T` must be used as the type parameter for some loc\n LL | impl<T> Remote1<u32> for T {\n    |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error: aborting due to previous error"}, {"sha": "639bee2b8ec74ee3892f5487137a6fffd35dd613", "filename": "src/test/ui/coherence/impl[t]-foreign[fundamental[t]]-for-foreign.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-foreign.stderr?ref=79e2afc28c53bbda4b86ae824519430f0a7d7516", "patch": "@@ -4,6 +4,7 @@ error[E0210]: type parameter `T` must be used as the type parameter for some loc\n LL | impl<T> Remote1<Box<T>> for u32 {\n    |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n@@ -12,6 +13,7 @@ error[E0210]: type parameter `T` must be used as the type parameter for some loc\n LL | impl<'a, T> Remote1<&'a T> for u32 {\n    |          ^ type parameter `T` must be used as the type parameter for some local type\n    |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error: aborting due to 2 previous errors"}, {"sha": "0b6c81b53cd5ff7b26092668d1f8ad8b65a37125", "filename": "src/test/ui/coherence/impl[t]-foreign[fundamental[t]]-for-fundamental[t].stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-fundamental%5Bt%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-fundamental%5Bt%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-fundamental%5Bt%5D.stderr?ref=79e2afc28c53bbda4b86ae824519430f0a7d7516", "patch": "@@ -4,6 +4,7 @@ error[E0210]: type parameter `T` must be used as the type parameter for some loc\n LL | impl<'a, T> Remote1<Box<T>> for &'a T {\n    |          ^ type parameter `T` must be used as the type parameter for some local type\n    |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n@@ -12,6 +13,7 @@ error[E0210]: type parameter `T` must be used as the type parameter for some loc\n LL | impl<'a, T> Remote1<&'a T> for Box<T> {\n    |          ^ type parameter `T` must be used as the type parameter for some local type\n    |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error: aborting due to 2 previous errors"}, {"sha": "fe40490822e0f3183132f366b57001771b256b5d", "filename": "src/test/ui/coherence/impl[t]-foreign[fundamental[t]]-for-t.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-t.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-t.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D%5D-for-t.stderr?ref=79e2afc28c53bbda4b86ae824519430f0a7d7516", "patch": "@@ -4,6 +4,7 @@ error[E0210]: type parameter `T` must be used as the type parameter for some loc\n LL | impl<T> Remote1<Box<T>> for T {\n    |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n@@ -12,6 +13,7 @@ error[E0210]: type parameter `T` must be used as the type parameter for some loc\n LL | impl<'a, T> Remote1<&'a T> for T {\n    |          ^ type parameter `T` must be used as the type parameter for some local type\n    |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error: aborting due to 2 previous errors"}, {"sha": "c9e3594cd342f3a58ec01eb72aaa2b767e736849", "filename": "src/test/ui/coherence/impl[t]-foreign[fundamental[t]_local]-for-foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D_local%5D-for-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D_local%5D-for-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D_local%5D-for-foreign.rs?ref=79e2afc28c53bbda4b86ae824519430f0a7d7516", "patch": "@@ -8,11 +8,11 @@ use std::rc::Rc;\n struct Local;\n \n impl<T> Remote2<Box<T>, Local> for u32 {\n-    //~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+    //~^ ERROR type parameter `T` must be covered by another type\n }\n \n impl<'a, T> Remote2<&'a T, Local> for u32 {\n-    //~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+    //~^ ERROR type parameter `T` must be covered by another type\n }\n \n fn main() {}"}, {"sha": "1eaef59b3f8804095442669883e0a9a60cc0960f", "filename": "src/test/ui/coherence/impl[t]-foreign[fundamental[t]_local]-for-foreign.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D_local%5D-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D_local%5D-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bfundamental%5Bt%5D_local%5D-for-foreign.stderr?ref=79e2afc28c53bbda4b86ae824519430f0a7d7516", "patch": "@@ -1,18 +1,20 @@\n-error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n+error[E0210]: type parameter `T` must be covered by another type when it appears before the first local type (`Local`)\n   --> $DIR/impl[t]-foreign[fundamental[t]_local]-for-foreign.rs:10:6\n    |\n LL | impl<T> Remote2<Box<T>, Local> for u32 {\n-   |      ^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be covered by another type when it appears before the first local type (`Local`)\n    |\n-   = note: only traits defined in the current crate can be implemented for a type parameter\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local, and no uncovered type parameters appear before that first local type\n+   = note: in this case, 'before' refers to the following order: `impl<..> ForeignTrait<T1, ..., Tn> for T0`, where `T0` is the first and `Tn` is the last\n \n-error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n+error[E0210]: type parameter `T` must be covered by another type when it appears before the first local type (`Local`)\n   --> $DIR/impl[t]-foreign[fundamental[t]_local]-for-foreign.rs:14:10\n    |\n LL | impl<'a, T> Remote2<&'a T, Local> for u32 {\n-   |          ^ type parameter `T` must be used as the type parameter for some local type\n+   |          ^ type parameter `T` must be covered by another type when it appears before the first local type (`Local`)\n    |\n-   = note: only traits defined in the current crate can be implemented for a type parameter\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local, and no uncovered type parameters appear before that first local type\n+   = note: in this case, 'before' refers to the following order: `impl<..> ForeignTrait<T1, ..., Tn> for T0`, where `T0` is the first and `Tn` is the last\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7709bd9c89b6f3420f010e1043972f6e72ee0dd3", "filename": "src/test/ui/coherence/impl[t]-foreign[local]-for-fundamental[t].rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bt%5D.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bt%5D.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bt%5D.rs?ref=79e2afc28c53bbda4b86ae824519430f0a7d7516", "patch": "@@ -8,11 +8,11 @@ use std::rc::Rc;\n struct Local;\n \n impl<T> Remote1<Local> for Box<T> {\n-    //~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+    //~^ ERROR type parameter `T` must be covered by another type\n }\n \n impl<T> Remote1<Local> for &T {\n-    //~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+    //~^ ERROR type parameter `T` must be covered by another type\n }\n \n fn main() {}"}, {"sha": "4d39186d494c996093d18443070f26ed63610ec0", "filename": "src/test/ui/coherence/impl[t]-foreign[local]-for-fundamental[t].stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bt%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bt%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bt%5D.stderr?ref=79e2afc28c53bbda4b86ae824519430f0a7d7516", "patch": "@@ -1,18 +1,20 @@\n-error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n+error[E0210]: type parameter `T` must be covered by another type when it appears before the first local type (`Local`)\n   --> $DIR/impl[t]-foreign[local]-for-fundamental[t].rs:10:6\n    |\n LL | impl<T> Remote1<Local> for Box<T> {\n-   |      ^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be covered by another type when it appears before the first local type (`Local`)\n    |\n-   = note: only traits defined in the current crate can be implemented for a type parameter\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local, and no uncovered type parameters appear before that first local type\n+   = note: in this case, 'before' refers to the following order: `impl<..> ForeignTrait<T1, ..., Tn> for T0`, where `T0` is the first and `Tn` is the last\n \n-error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n+error[E0210]: type parameter `T` must be covered by another type when it appears before the first local type (`Local`)\n   --> $DIR/impl[t]-foreign[local]-for-fundamental[t].rs:14:6\n    |\n LL | impl<T> Remote1<Local> for &T {\n-   |      ^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be covered by another type when it appears before the first local type (`Local`)\n    |\n-   = note: only traits defined in the current crate can be implemented for a type parameter\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local, and no uncovered type parameters appear before that first local type\n+   = note: in this case, 'before' refers to the following order: `impl<..> ForeignTrait<T1, ..., Tn> for T0`, where `T0` is the first and `Tn` is the last\n \n error: aborting due to 2 previous errors\n "}, {"sha": "eed3a4b5c235bac44d7ab494702ab91832b4f445", "filename": "src/test/ui/coherence/impl[t]-foreign[local]-for-t.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-t.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-t.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-t.rs?ref=79e2afc28c53bbda4b86ae824519430f0a7d7516", "patch": "@@ -8,7 +8,7 @@ use std::rc::Rc;\n struct Local;\n \n impl<T> Remote1<Local> for T {\n-    //~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+    //~^ ERROR type parameter `T` must be covered by another type\n }\n \n fn main() {}"}, {"sha": "d74be4cec728df020dfc93bb3f800e3e6b243581", "filename": "src/test/ui/coherence/impl[t]-foreign[local]-for-t.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-t.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-t.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-t.stderr?ref=79e2afc28c53bbda4b86ae824519430f0a7d7516", "patch": "@@ -1,10 +1,11 @@\n-error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n+error[E0210]: type parameter `T` must be covered by another type when it appears before the first local type (`Local`)\n   --> $DIR/impl[t]-foreign[local]-for-t.rs:10:6\n    |\n LL | impl<T> Remote1<Local> for T {\n-   |      ^ type parameter `T` must be used as the type parameter for some local type\n+   |      ^ type parameter `T` must be covered by another type when it appears before the first local type (`Local`)\n    |\n-   = note: only traits defined in the current crate can be implemented for a type parameter\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local, and no uncovered type parameters appear before that first local type\n+   = note: in this case, 'before' refers to the following order: `impl<..> ForeignTrait<T1, ..., Tn> for T0`, where `T0` is the first and `Tn` is the last\n \n error: aborting due to previous error\n "}, {"sha": "b26feb4914c63830ffc5d9ec1c90d49954f705bf", "filename": "src/test/ui/coherence/impl[t]-foreign[t]-for-foreign.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-foreign.stderr?ref=79e2afc28c53bbda4b86ae824519430f0a7d7516", "patch": "@@ -4,6 +4,7 @@ error[E0210]: type parameter `T` must be used as the type parameter for some loc\n LL | impl<T> Remote1<T> for u32 {\n    |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error: aborting due to previous error"}, {"sha": "5e8cc552c98341ba94d48ac6eb107767aac80c45", "filename": "src/test/ui/coherence/impl[t]-foreign[t]-for-fundamental.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-fundamental.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-fundamental.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-fundamental.stderr?ref=79e2afc28c53bbda4b86ae824519430f0a7d7516", "patch": "@@ -4,6 +4,7 @@ error[E0210]: type parameter `T` must be used as the type parameter for some loc\n LL | impl<T> Remote1<T> for Box<T> {\n    |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error[E0210]: type parameter `B` must be used as the type parameter for some local type (e.g., `MyStruct<B>`)\n@@ -12,6 +13,7 @@ error[E0210]: type parameter `B` must be used as the type parameter for some loc\n LL | impl<'a, A, B> Remote1<A> for &'a B {\n    |             ^ type parameter `B` must be used as the type parameter for some local type\n    |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error: aborting due to 2 previous errors"}, {"sha": "d3226d33beec75eb2e85fa2187377a96cbc8b8b7", "filename": "src/test/ui/coherence/impl[t]-foreign[t]-for-t.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-t.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-t.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Bt%5D-for-t.stderr?ref=79e2afc28c53bbda4b86ae824519430f0a7d7516", "patch": "@@ -4,6 +4,7 @@ error[E0210]: type parameter `T` must be used as the type parameter for some loc\n LL | impl<T> Remote1<T> for T {\n    |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error: aborting due to previous error"}, {"sha": "2a78cc8b2db26c451f65d6ef3a33df842255c9ae", "filename": "src/test/ui/error-codes/e0119/issue-28981.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-28981.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-28981.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-28981.stderr?ref=79e2afc28c53bbda4b86ae824519430f0a7d7516", "patch": "@@ -14,6 +14,7 @@ error[E0210]: type parameter `Foo` must be used as the type parameter for some l\n LL | impl<Foo> Deref for Foo { }\n    |      ^^^ type parameter `Foo` must be used as the type parameter for some local type\n    |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error: aborting due to 2 previous errors"}, {"sha": "9f164822deacb5381667ca51a2f12aa9fb9dbb83", "filename": "src/test/ui/issues/issue-41974.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fissues%2Fissue-41974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Fissues%2Fissue-41974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41974.stderr?ref=79e2afc28c53bbda4b86ae824519430f0a7d7516", "patch": "@@ -21,6 +21,7 @@ error[E0210]: type parameter `T` must be used as the type parameter for some loc\n LL | impl<T> Drop for T where T: A {\n    |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error: aborting due to 3 previous errors"}, {"sha": "c84d401898c91b5772d2142e9bda7854cb55901d", "filename": "src/test/ui/orphan-check-diagnostics.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Forphan-check-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79e2afc28c53bbda4b86ae824519430f0a7d7516/src%2Ftest%2Fui%2Forphan-check-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Forphan-check-diagnostics.stderr?ref=79e2afc28c53bbda4b86ae824519430f0a7d7516", "patch": "@@ -4,6 +4,7 @@ error[E0210]: type parameter `T` must be used as the type parameter for some loc\n LL | impl<T> RemoteTrait for T where T: LocalTrait {}\n    |      ^ type parameter `T` must be used as the type parameter for some local type\n    |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n error: aborting due to previous error"}]}