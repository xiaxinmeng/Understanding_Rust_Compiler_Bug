{"sha": "820bba1c467aa5aa54d6db2869b15c643e5c350c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMGJiYTFjNDY3YWE1YWE1NGQ2ZGIyODY5YjE1YzY0M2U1YzM1MGM=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-06-12T19:12:36Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-06-20T18:12:42Z"}, "message": "Add codegen test for multiple `asm!` options", "tree": {"sha": "a4ba25c662c26a5a6362cf8ea040aed5f259f128", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4ba25c662c26a5a6362cf8ea040aed5f259f128"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/820bba1c467aa5aa54d6db2869b15c643e5c350c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/820bba1c467aa5aa54d6db2869b15c643e5c350c", "html_url": "https://github.com/rust-lang/rust/commit/820bba1c467aa5aa54d6db2869b15c643e5c350c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/820bba1c467aa5aa54d6db2869b15c643e5c350c/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27cc7c7d9fb8a25cce9ab73ece034a9282406ce3", "url": "https://api.github.com/repos/rust-lang/rust/commits/27cc7c7d9fb8a25cce9ab73ece034a9282406ce3", "html_url": "https://github.com/rust-lang/rust/commit/27cc7c7d9fb8a25cce9ab73ece034a9282406ce3"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "c702742bf1a6369df09476451ce615b5d88c839a", "filename": "src/test/codegen/asm-multiple-options.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/820bba1c467aa5aa54d6db2869b15c643e5c350c/src%2Ftest%2Fcodegen%2Fasm-multiple-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/820bba1c467aa5aa54d6db2869b15c643e5c350c/src%2Ftest%2Fcodegen%2Fasm-multiple-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasm-multiple-options.rs?ref=820bba1c467aa5aa54d6db2869b15c643e5c350c", "patch": "@@ -0,0 +1,53 @@\n+// compile-flags: -O\n+// only-x86_64\n+\n+#![crate_type = \"rlib\"]\n+#![feature(asm)]\n+\n+// CHECK-LABEL: @pure\n+// CHECK-NOT: asm\n+// CHECK: ret void\n+#[no_mangle]\n+pub unsafe fn pure(x: i32) {\n+    let y: i32;\n+    asm!(\"\", out(\"ax\") y, in(\"bx\") x, options(pure), options(nomem));\n+}\n+\n+pub static mut VAR: i32 = 0;\n+pub static mut DUMMY_OUTPUT: i32 = 0;\n+\n+// CHECK-LABEL: @readonly\n+// CHECK: call i32 asm\n+// CHECK: ret i32 1\n+#[no_mangle]\n+pub unsafe fn readonly() -> i32 {\n+    VAR = 1;\n+    asm!(\"\", out(\"ax\") DUMMY_OUTPUT, options(pure), options(readonly));\n+    VAR\n+}\n+\n+// CHECK-LABEL: @nomem\n+// CHECK-NOT: store\n+// CHECK: call i32 asm\n+// CHECK: store\n+// CHECK: ret i32 2\n+#[no_mangle]\n+pub unsafe fn nomem() -> i32 {\n+    VAR = 1;\n+    asm!(\"\", out(\"ax\") DUMMY_OUTPUT, options(pure), options(nomem));\n+    VAR = 2;\n+    VAR\n+}\n+\n+// CHECK-LABEL: @not_nomem\n+// CHECK: store\n+// CHECK: call i32 asm\n+// CHECK: store\n+// CHECK: ret i32 2\n+#[no_mangle]\n+pub unsafe fn not_nomem() -> i32 {\n+    VAR = 1;\n+    asm!(\"\", out(\"ax\") DUMMY_OUTPUT, options(pure), options(readonly));\n+    VAR = 2;\n+    VAR\n+}"}]}