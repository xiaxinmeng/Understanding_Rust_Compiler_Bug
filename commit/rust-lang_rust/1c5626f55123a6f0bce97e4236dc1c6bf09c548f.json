{"sha": "1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNTYyNmY1NTEyM2E2ZjBiY2U5N2U0MjM2ZGMxYzZiZjA5YzU0OGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-09T01:32:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-09T01:32:48Z"}, "message": "Auto merge of #51042 - matthewjasper:reenable-trivial-bounds, r=nikomatsakis\n\nRe-enable trivial bounds\n\ncc #50825\n\nRemove implementations from global bounds in winnowing when there is ambiguity.\n\nThis results in the reverse of #24066 happening sometimes. I'm not sure if anything can be done about that though.\n\ncc #48214\n\nr? @nikomatsakis", "tree": {"sha": "b8acb28bc264e126dd79c08395a2ec592330876c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8acb28bc264e126dd79c08395a2ec592330876c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "html_url": "https://github.com/rust-lang/rust/commit/1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf91e9b9bae3e421212f91b61d52971c5de2914e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf91e9b9bae3e421212f91b61d52971c5de2914e", "html_url": "https://github.com/rust-lang/rust/commit/cf91e9b9bae3e421212f91b61d52971c5de2914e"}, {"sha": "a1bddcfe7b3ac7e321275c4191e0f3d8bd42a1eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1bddcfe7b3ac7e321275c4191e0f3d8bd42a1eb", "html_url": "https://github.com/rust-lang/rust/commit/a1bddcfe7b3ac7e321275c4191e0f3d8bd42a1eb"}], "stats": {"total": 358, "additions": 302, "deletions": 56}, "files": [{"sha": "e284b3fc75a6418475c3f7934f63dc8dae14fdbf", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "patch": "@@ -648,13 +648,8 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let predicates: Vec<_> =\n         util::elaborate_predicates(tcx, unnormalized_env.caller_bounds.to_vec())\n-        .filter(|p| !p.is_global() || p.has_late_bound_regions()) // (*)\n         .collect();\n \n-    // (*) FIXME(#50825) This shouldn't be needed.\n-    // Removing the bounds here stopped them from being prefered in selection.\n-    // See the issue-50825 ui tests for examples\n-\n     debug!(\"normalize_param_env_or_error: elaborated-predicates={:?}\",\n            predicates);\n "}, {"sha": "08af80543dff2c51a936c2584fc023708f5f6be5", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 61, "deletions": 11, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "patch": "@@ -2011,9 +2011,6 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     // attempt to evaluate recursive bounds to see if they are\n     // satisfied.\n \n-    /// Returns true if `candidate_i` should be dropped in favor of\n-    /// `candidate_j`.  Generally speaking we will drop duplicate\n-    /// candidates and prefer where-clause candidates.\n     /// Returns true if `victim` should be dropped in favor of\n     /// `other`.  Generally speaking we will drop duplicate\n     /// candidates and prefer where-clause candidates.\n@@ -2025,13 +2022,46 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         other: &EvaluatedCandidate<'tcx>)\n         -> bool\n     {\n+        // Check if a bound would previously have been removed when normalizing\n+        // the param_env so that it can be given the lowest priority. See\n+        // #50825 for the motivation for this.\n+        let is_global = |cand: &ty::PolyTraitRef<'_>| {\n+            cand.is_global() && !cand.has_late_bound_regions()\n+        };\n+\n         if victim.candidate == other.candidate {\n             return true;\n         }\n \n         match other.candidate {\n+            ParamCandidate(ref cand) => match victim.candidate {\n+                AutoImplCandidate(..) => {\n+                    bug!(\n+                        \"default implementations shouldn't be recorded \\\n+                         when there are other valid candidates\");\n+                }\n+                ImplCandidate(..) |\n+                ClosureCandidate |\n+                GeneratorCandidate |\n+                FnPointerCandidate |\n+                BuiltinObjectCandidate |\n+                BuiltinUnsizeCandidate |\n+                BuiltinCandidate { .. } => {\n+                    // Global bounds from the where clause should be ignored\n+                    // here (see issue #50825). Otherwise, we have a where\n+                    // clause so don't go around looking for impls.\n+                    !is_global(cand)\n+                }\n+                ObjectCandidate |\n+                ProjectionCandidate => {\n+                    // Arbitrarily give param candidates priority\n+                    // over projection and object candidates.\n+                    !is_global(cand)\n+                },\n+                ParamCandidate(..) => false,\n+            },\n             ObjectCandidate |\n-            ParamCandidate(_) | ProjectionCandidate => match victim.candidate {\n+            ProjectionCandidate => match victim.candidate {\n                 AutoImplCandidate(..) => {\n                     bug!(\n                         \"default implementations shouldn't be recorded \\\n@@ -2044,8 +2074,6 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 BuiltinObjectCandidate |\n                 BuiltinUnsizeCandidate |\n                 BuiltinCandidate { .. } => {\n-                    // We have a where-clause so don't go around looking\n-                    // for impls.\n                     true\n                 }\n                 ObjectCandidate |\n@@ -2054,22 +2082,44 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     // over projection and object candidates.\n                     true\n                 },\n-                ParamCandidate(..) => false,\n+                ParamCandidate(ref cand) => is_global(cand),\n             },\n             ImplCandidate(other_def) => {\n                 // See if we can toss out `victim` based on specialization.\n                 // This requires us to know *for sure* that the `other` impl applies\n                 // i.e. EvaluatedToOk:\n                 if other.evaluation == EvaluatedToOk {\n-                    if let ImplCandidate(victim_def) = victim.candidate {\n-                        let tcx = self.tcx().global_tcx();\n-                        return tcx.specializes((other_def, victim_def)) ||\n-                            tcx.impls_are_allowed_to_overlap(other_def, victim_def);\n+                    match victim.candidate {\n+                        ImplCandidate(victim_def) => {\n+                            let tcx = self.tcx().global_tcx();\n+                            return tcx.specializes((other_def, victim_def)) ||\n+                                tcx.impls_are_allowed_to_overlap(other_def, victim_def);\n+                        }\n+                        ParamCandidate(ref cand) => {\n+                            // Prefer the impl to a global where clause candidate.\n+                            return is_global(cand);\n+                        }\n+                        _ => ()\n                     }\n                 }\n \n                 false\n             },\n+            ClosureCandidate |\n+            GeneratorCandidate |\n+            FnPointerCandidate |\n+            BuiltinObjectCandidate |\n+            BuiltinUnsizeCandidate |\n+            BuiltinCandidate { .. } => {\n+                match victim.candidate {\n+                    ParamCandidate(ref cand) => {\n+                        // Prefer these to a global where-clause bound\n+                        // (see issue #50825)\n+                        is_global(cand) && other.evaluation == EvaluatedToOk\n+                    }\n+                    _ => false,\n+                }\n+            }\n             _ => false\n         }\n     }"}, {"sha": "65725bfb95d0e281bbcc4e5a8647f0ae80647cef", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "patch": "@@ -711,6 +711,7 @@ fn check_false_global_bounds<'a, 'gcx, 'tcx>(\n     for pred in implied_obligations {\n         // Match the existing behavior.\n         if pred.is_global() && !pred.has_late_bound_regions() {\n+            let pred = fcx.normalize_associated_types_in(span, &pred);\n             let obligation = traits::Obligation::new(\n                 traits::ObligationCause::new(\n                     span,"}, {"sha": "dba66e0b69bfc916d0be64ef466dffe694831172", "filename": "src/test/ui/feature-gate-trivial_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.rs?ref=1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "patch": "@@ -28,7 +28,7 @@ union U where i32: Foo { f: i32 } //~ ERROR\n type Y where i32: Foo = (); // OK - bound is ignored\n \n impl Foo for () where i32: Foo { //~ ERROR\n-    fn test(&self) { //~ ERROR\n+    fn test(&self) {\n         3i32.test();\n         Foo::test(&4i32);\n         generic_function(5i32);\n@@ -60,7 +60,7 @@ struct Dst<X: ?Sized> {\n }\n \n struct TwoStrs(str, str) where str: Sized; //~ ERROR\n-//~^ ERROR\n+\n \n fn unsized_local() where Dst<A>: Sized { //~ ERROR\n     let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);"}, {"sha": "9c2c80600b8c8f0f80204850a963298e5a62e7fd", "filename": "src/test/ui/feature-gate-trivial_bounds.stderr", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr?ref=1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "patch": "@@ -38,7 +38,7 @@ error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/feature-gate-trivial_bounds.rs:30:1\n    |\n LL | / impl Foo for () where i32: Foo { //~ ERROR\n-LL | |     fn test(&self) { //~ ERROR\n+LL | |     fn test(&self) {\n LL | |         3i32.test();\n LL | |         Foo::test(&4i32);\n LL | |         generic_function(5i32);\n@@ -97,15 +97,6 @@ LL | struct TwoStrs(str, str) where str: Sized; //~ ERROR\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n \n-error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n-  --> $DIR/feature-gate-trivial_bounds.rs:62:16\n-   |\n-LL | struct TwoStrs(str, str) where str: Sized; //~ ERROR\n-   |                ^^^ `str` does not have a constant size known at compile-time\n-   |\n-   = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: only the last field of a struct may have a dynamically sized type\n-\n error[E0277]: the trait bound `A + 'static: std::marker::Sized` is not satisfied in `Dst<A + 'static>`\n   --> $DIR/feature-gate-trivial_bounds.rs:65:1\n    |\n@@ -131,22 +122,6 @@ LL | | }\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n \n-error[E0277]: the trait bound `i32: Foo` is not satisfied\n-  --> $DIR/feature-gate-trivial_bounds.rs:31:5\n-   |\n-LL | /     fn test(&self) { //~ ERROR\n-LL | |         3i32.test();\n-LL | |         Foo::test(&4i32);\n-LL | |         generic_function(5i32);\n-LL | |     }\n-   | |_____^ the trait `Foo` is not implemented for `i32`\n-   |\n-note: required by `Foo`\n-  --> $DIR/feature-gate-trivial_bounds.rs:14:1\n-   |\n-LL | pub trait Foo {\n-   | ^^^^^^^^^^^^^\n-\n-error: aborting due to 13 previous errors\n+error: aborting due to 11 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "1eee9b7c883c60ef877ccc4cf888e4f0bbe35308", "filename": "src/test/ui/issue-50825-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Fissue-50825-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Fissue-50825-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-50825-1.rs?ref=1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "patch": "@@ -10,7 +10,7 @@\n \n // run-pass\n // regression test for issue #50825\n-// Make sure that the `impl` bound (): X<T = ()> is prefered over\n+// Make sure that the `impl` bound (): X<T = ()> is preferred over\n // the (): X bound in the where clause.\n \n trait X {"}, {"sha": "e45156b96cd2c316a4c84b0c00d972c08416516c", "filename": "src/test/ui/issue-50825.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Fissue-50825.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Fissue-50825.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-50825.rs?ref=1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "patch": "@@ -10,7 +10,7 @@\n \n // run-pass\n // regression test for issue #50825\n-// Make sure that the built-in bound {integer}: Sized is prefered over\n+// Make sure that the built-in bound {integer}: Sized is preferred over\n // the u64: Sized bound in the where clause.\n \n fn foo(y: &[()])"}, {"sha": "6424c4229bda8ca0eda5855fb5cf661b51ec5fe1", "filename": "src/test/ui/issue-51044.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Fissue-51044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Fissue-51044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51044.rs?ref=1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+// regression test for issue #50825\n+// Check that the feature gate normalizes associated types.\n+\n+#![allow(dead_code)]\n+struct Foo<T>(T);\n+struct Duck;\n+struct Quack;\n+\n+trait Hello<A> where A: Animal {\n+}\n+\n+trait Animal {\n+    type Noise;\n+}\n+\n+trait Loud<R>  {\n+}\n+\n+impl Loud<Quack> for f32 {\n+}\n+\n+impl Animal for Duck {\n+    type Noise = Quack;\n+}\n+\n+impl Hello<Duck> for Foo<f32> where f32: Loud<<Duck as Animal>::Noise> {\n+}\n+\n+fn main() {}"}, {"sha": "49c9df95bc7720d347463c32d4e921351cdc5bd2", "filename": "src/test/ui/trivial-bounds-inconsistent-associated-functions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-associated-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-associated-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-associated-functions.rs?ref=1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test FIXME(#50825)\n // run-pass\n // Inconsistent bounds with trait implementations\n "}, {"sha": "2c4d9d813856c857d416fb660ffa5efdc0b97777", "filename": "src/test/ui/trivial-bounds-inconsistent-copy-reborrow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.rs?ref=1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test FIXME(#50825)\n // Check that reborrows are still illegal with Copy mutable references\n #![feature(trivial_bounds)]\n #![allow(unused)]"}, {"sha": "375885a02c75a56f70217508cae3ece7b8558754", "filename": "src/test/ui/trivial-bounds-inconsistent-copy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy.rs?ref=1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test FIXME(#50825)\n // run-pass\n // Check tautalogically false `Copy` bounds\n #![feature(trivial_bounds)]"}, {"sha": "1a3bd3a8cd7cc32c4327f09a558f8bdd0097eead", "filename": "src/test/ui/trivial-bounds-inconsistent-projection-error.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-projection-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-projection-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-projection-error.rs?ref=1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(trivial_bounds)]\n+#![allow(unused)]\n+\n+struct B;\n+\n+trait A {\n+    type X;\n+    fn get_x() -> Self::X;\n+}\n+\n+impl A for B {\n+    type X = u8;\n+    fn get_x() -> u8 { 0 }\n+}\n+\n+fn global_bound_is_hidden() -> u8\n+where\n+    B: A<X = i32>\n+{\n+    B::get_x() //~ ERROR\n+}\n+\n+fn main () {}"}, {"sha": "0f720bee2b4e66a3f3e2fc09de20de7444278204", "filename": "src/test/ui/trivial-bounds-inconsistent-projection-error.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-projection-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-projection-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-projection-error.stderr?ref=1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/trivial-bounds-inconsistent-projection-error.rs:30:5\n+   |\n+LL | fn global_bound_is_hidden() -> u8\n+   |                                -- expected `u8` because of return type\n+...\n+LL |     B::get_x() //~ ERROR\n+   |     ^^^^^^^^^^ expected u8, found i32\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "8de6f06bf5f5de41b272f46c13f659894256449e", "filename": "src/test/ui/trivial-bounds-inconsistent-projection.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-projection.rs?ref=1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "patch": "@@ -0,0 +1,64 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+// Check that global bounds result in the expected choice of associated type\n+\n+#![feature(trivial_bounds)]\n+#![allow(unused)]\n+\n+struct B;\n+\n+trait A {\n+    type X;\n+    fn get_x() -> Self::X;\n+}\n+\n+impl A for B {\n+    type X = u8;\n+    fn get_x() -> u8 { 0 }\n+}\n+\n+fn underspecified_bound() -> u8\n+where\n+    B: A\n+{\n+    B::get_x()\n+}\n+\n+fn inconsistent_bound() -> i32\n+where\n+    B: A<X = i32>\n+{\n+    B::get_x()\n+}\n+\n+fn redundant_bound() -> u8\n+where\n+    B: A<X = u8>\n+{\n+    B::get_x()\n+}\n+\n+fn inconsistent_dup_bound() -> i32\n+where\n+    B: A<X = i32> + A\n+{\n+    B::get_x()\n+}\n+\n+fn redundant_dup_bound() -> u8\n+where\n+    B: A<X = u8> + A\n+{\n+    B::get_x()\n+}\n+\n+fn main () {}"}, {"sha": "201a041830f84a372bdb74104d9575d5a9a3f52f", "filename": "src/test/ui/trivial-bounds-inconsistent-projection.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-projection.stderr?ref=1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "patch": "@@ -0,0 +1,57 @@\n+warning: Trait bound B: A does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-projection.rs:29:1\n+   |\n+LL | / fn underspecified_bound() -> u8\n+LL | | where\n+LL | |     B: A\n+LL | | {\n+LL | |     B::get_x()\n+LL | | }\n+   | |_^\n+   |\n+   = note: #[warn(trivial_bounds)] on by default\n+\n+warning: Trait bound B: A does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-projection.rs:36:1\n+   |\n+LL | / fn inconsistent_bound() -> i32\n+LL | | where\n+LL | |     B: A<X = i32>\n+LL | | {\n+LL | |     B::get_x()\n+LL | | }\n+   | |_^\n+\n+warning: Trait bound B: A does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-projection.rs:43:1\n+   |\n+LL | / fn redundant_bound() -> u8\n+LL | | where\n+LL | |     B: A<X = u8>\n+LL | | {\n+LL | |     B::get_x()\n+LL | | }\n+   | |_^\n+\n+warning: Trait bound B: A does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-projection.rs:50:1\n+   |\n+LL | / fn inconsistent_dup_bound() -> i32\n+LL | | where\n+LL | |     B: A<X = i32> + A\n+LL | | {\n+LL | |     B::get_x()\n+LL | | }\n+   | |_^\n+\n+warning: Trait bound B: A does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-projection.rs:57:1\n+   |\n+LL | / fn redundant_dup_bound() -> u8\n+LL | | where\n+LL | |     B: A<X = u8> + A\n+LL | | {\n+LL | |     B::get_x()\n+LL | | }\n+   | |_^\n+"}, {"sha": "14ba11c44de138639e830677d847907c29556f50", "filename": "src/test/ui/trivial-bounds-inconsistent-sized.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-sized.rs?ref=1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test FIXME(#50825)\n // run-pass\n // Check tautalogically false `Sized` bounds\n #![feature(trivial_bounds)]"}, {"sha": "5fcdbfc437a81387c402e1d05f9f6337af34d916", "filename": "src/test/ui/trivial-bounds-inconsistent-well-formed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-well-formed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-well-formed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-well-formed.rs?ref=1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test FIXME(#50825)\n // run-pass\n // Test that inconsistent bounds are used in well-formedness checks\n #![feature(trivial_bounds)]"}, {"sha": "2c8b873b8c9462db590283b28bf0778bd62ac0e4", "filename": "src/test/ui/trivial-bounds-inconsistent.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent.rs?ref=1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test FIXME(#50825)\n // run-pass\n \n // Check that tautalogically false bounds are accepted, and are used"}, {"sha": "9850ec2bd1fc0b8e946cac2c9375cdd92d96cecd", "filename": "src/test/ui/trivial-bounds-leak-copy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-leak-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-leak-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-leak-copy.rs?ref=1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test FIXME(#50825)\n // Check that false Copy bounds don't leak\n #![feature(trivial_bounds)]\n "}, {"sha": "98cb5b2b503325f9e37cfaccae68bca781cca798", "filename": "src/test/ui/trivial-bounds-leak.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-leak.rs?ref=1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test FIXME(#50825)\n // Check that false bounds don't leak\n #![feature(trivial_bounds)]\n "}, {"sha": "e6988cb9f8bfe5689007c40e7d80469be4967983", "filename": "src/test/ui/trivial-bounds-lint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-lint.rs?ref=1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test FIXME(#50825)\n #![feature(trivial_bounds)]\n #![allow(unused)]\n #![deny(trivial_bounds)]"}, {"sha": "00986eefbda7d69178baad72ec6a19907998b298", "filename": "src/test/ui/trivial-bounds-object.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5626f55123a6f0bce97e4236dc1c6bf09c548f/src%2Ftest%2Fui%2Ftrivial-bounds-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-object.rs?ref=1c5626f55123a6f0bce97e4236dc1c6bf09c548f", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+// Check that the object bound dyn A + 'a: A is preferred over the\n+// where clause bound dyn A + 'static: A.\n+\n+#![allow(unused)]\n+\n+trait A {\n+    fn test(&self);\n+}\n+\n+fn foo(x: &dyn A)\n+where\n+    dyn A + 'static: A, // Using this bound would lead to a lifetime error.\n+{\n+    x.test();\n+}\n+\n+fn main () {}"}]}