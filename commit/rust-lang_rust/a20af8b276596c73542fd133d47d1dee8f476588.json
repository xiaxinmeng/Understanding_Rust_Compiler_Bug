{"sha": "a20af8b276596c73542fd133d47d1dee8f476588", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMGFmOGIyNzY1OTZjNzM1NDJmZDEzM2Q0N2QxZGVlOGY0NzY1ODg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-08-16T22:06:00Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-08-28T01:47:57Z"}, "message": "librustc: Convert check loans to use the new visitor", "tree": {"sha": "231521b95ef30d182b5cf6893c5b8f737eaabcb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/231521b95ef30d182b5cf6893c5b8f737eaabcb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a20af8b276596c73542fd133d47d1dee8f476588", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a20af8b276596c73542fd133d47d1dee8f476588", "html_url": "https://github.com/rust-lang/rust/commit/a20af8b276596c73542fd133d47d1dee8f476588", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a20af8b276596c73542fd133d47d1dee8f476588/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8693943676487c01fa09f5f3daf0df6a1f71e24d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8693943676487c01fa09f5f3daf0df6a1f71e24d", "html_url": "https://github.com/rust-lang/rust/commit/8693943676487c01fa09f5f3daf0df6a1f71e24d"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "3ed5e886414b7b9466f9987086efebd364069205", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a20af8b276596c73542fd133d47d1dee8f476588/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a20af8b276596c73542fd133d47d1dee8f476588/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=a20af8b276596c73542fd133d47d1dee8f476588", "patch": "@@ -27,8 +27,8 @@ use syntax::ast::m_mutbl;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::codemap::span;\n-use syntax::visit;\n use syntax::visit::Visitor;\n+use syntax::visit;\n use util::ppaux::Repr;\n \n #[deriving(Clone)]\n@@ -68,7 +68,7 @@ pub fn check_loans(bccx: @BorrowckCtxt,\n                    body: &ast::Block) {\n     debug!(\"check_loans(body id=%?)\", body.id);\n \n-    let clcx = CheckLoanCtxt {\n+    let mut clcx = CheckLoanCtxt {\n         bccx: bccx,\n         dfcx_loans: dfcx_loans,\n         move_data: @move_data,\n@@ -86,6 +86,44 @@ enum MoveError {\n }\n \n impl<'self> CheckLoanCtxt<'self> {\n+    fn check_by_move_capture(&self,\n+                             closure_id: ast::NodeId,\n+                             cap_var: &moves::CaptureVar,\n+                             move_path: @LoanPath) {\n+        let move_err = self.analyze_move_out_from(closure_id, move_path);\n+        match move_err {\n+            MoveOk => {}\n+            MoveWhileBorrowed(loan_path, loan_span) => {\n+                self.bccx.span_err(\n+                    cap_var.span,\n+                    fmt!(\"cannot move `%s` into closure \\\n+                          because it is borrowed\",\n+                         self.bccx.loan_path_to_str(move_path)));\n+                self.bccx.span_note(\n+                    loan_span,\n+                    fmt!(\"borrow of `%s` occurs here\",\n+                         self.bccx.loan_path_to_str(loan_path)));\n+            }\n+        }\n+    }\n+\n+    fn check_captured_variables(&self, closure_id: ast::NodeId, span: span) {\n+        let cap_vars = self.bccx.capture_map.get(&closure_id);\n+        for cap_var in cap_vars.iter() {\n+            let var_id = ast_util::def_id_of_def(cap_var.def).node;\n+            let var_path = @LpVar(var_id);\n+            self.check_if_path_is_moved(closure_id, span,\n+                                        MovedInCapture, var_path);\n+            match cap_var.mode {\n+                moves::CapRef | moves::CapCopy => {}\n+                moves::CapMove => {\n+                    self.check_by_move_capture(closure_id, cap_var, var_path);\n+                }\n+            }\n+        }\n+        return;\n+    }\n+\n     pub fn tcx(&self) -> ty::ctxt { self.bccx.tcx }\n \n     pub fn each_issued_loan(&self,\n@@ -827,3 +865,4 @@ fn check_loans_in_block<'a>(vt: &mut CheckLoanVisitor,\n     visit::walk_block(vt, blk, this);\n     this.check_for_conflicting_loans(blk.id);\n }\n+"}]}