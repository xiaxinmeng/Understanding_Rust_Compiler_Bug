{"sha": "91a43f04237dc9fe839fe8466d459e4f215d02fc", "node_id": "C_kwDOAAsO6NoAKDkxYTQzZjA0MjM3ZGM5ZmU4MzlmZTg0NjZkNDU5ZTRmMjE1ZDAyZmM", "commit": {"author": {"name": "Rob Pilling", "email": "robpilling@gmail.com", "date": "2022-01-28T23:17:47Z"}, "committer": {"name": "Rob Pilling", "email": "robpilling@gmail.com", "date": "2022-01-28T23:43:47Z"}, "message": "Only suggest 1-tuple if expected and found types match", "tree": {"sha": "e27a4b2c217d52ff55e8354dbb422e16426431f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e27a4b2c217d52ff55e8354dbb422e16426431f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91a43f04237dc9fe839fe8466d459e4f215d02fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91a43f04237dc9fe839fe8466d459e4f215d02fc", "html_url": "https://github.com/rust-lang/rust/commit/91a43f04237dc9fe839fe8466d459e4f215d02fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91a43f04237dc9fe839fe8466d459e4f215d02fc/comments", "author": {"login": "bobrippling", "id": 205673, "node_id": "MDQ6VXNlcjIwNTY3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/205673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobrippling", "html_url": "https://github.com/bobrippling", "followers_url": "https://api.github.com/users/bobrippling/followers", "following_url": "https://api.github.com/users/bobrippling/following{/other_user}", "gists_url": "https://api.github.com/users/bobrippling/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobrippling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobrippling/subscriptions", "organizations_url": "https://api.github.com/users/bobrippling/orgs", "repos_url": "https://api.github.com/users/bobrippling/repos", "events_url": "https://api.github.com/users/bobrippling/events{/privacy}", "received_events_url": "https://api.github.com/users/bobrippling/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bobrippling", "id": 205673, "node_id": "MDQ6VXNlcjIwNTY3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/205673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobrippling", "html_url": "https://github.com/bobrippling", "followers_url": "https://api.github.com/users/bobrippling/followers", "following_url": "https://api.github.com/users/bobrippling/following{/other_user}", "gists_url": "https://api.github.com/users/bobrippling/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobrippling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobrippling/subscriptions", "organizations_url": "https://api.github.com/users/bobrippling/orgs", "repos_url": "https://api.github.com/users/bobrippling/repos", "events_url": "https://api.github.com/users/bobrippling/events{/privacy}", "received_events_url": "https://api.github.com/users/bobrippling/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18cea90d4a01cbb3a1285f633b1058fd39931956", "url": "https://api.github.com/repos/rust-lang/rust/commits/18cea90d4a01cbb3a1285f633b1058fd39931956", "html_url": "https://github.com/rust-lang/rust/commit/18cea90d4a01cbb3a1285f633b1058fd39931956"}], "stats": {"total": 52, "additions": 28, "deletions": 24}, "files": [{"sha": "c16181aab04fb1635c849a123dbb398d4d54757d", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/91a43f04237dc9fe839fe8466d459e4f215d02fc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a43f04237dc9fe839fe8466d459e4f215d02fc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=91a43f04237dc9fe839fe8466d459e4f215d02fc", "patch": "@@ -2044,26 +2044,34 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         // If a tuple of length one was expected and the found expression has\n                         // parentheses around it, perhaps the user meant to write `(expr,)` to\n                         // build a tuple (issue #86100)\n-                        (ty::Tuple(_), _) if expected.tuple_fields().count() == 1 => {\n-                            if let Ok(code) = self.tcx.sess().source_map().span_to_snippet(span) {\n-                                if code.starts_with('(') && code.ends_with(')') {\n-                                    let before_close = span.hi() - BytePos::from_u32(1);\n-\n-                                    err.span_suggestion(\n-                                        span.with_hi(before_close).shrink_to_hi(),\n-                                        \"use a trailing comma to create a tuple with one element\",\n-                                        \",\".into(),\n-                                        Applicability::MaybeIncorrect,\n-                                    );\n-                                } else {\n-                                    err.multipart_suggestion(\n-                                        \"use a trailing comma to create a tuple with one element\",\n-                                        vec![\n-                                            (span.shrink_to_lo(), \"(\".into()),\n-                                            (span.shrink_to_hi(), \",)\".into()),\n-                                        ],\n-                                        Applicability::MaybeIncorrect,\n-                                    );\n+                        (ty::Tuple(_), _) => {\n+                            if let [expected_tup_elem] =\n+                                expected.tuple_fields().collect::<Vec<_>>()[..]\n+                            {\n+                                if same_type_modulo_infer(expected_tup_elem, found) {\n+                                    if let Ok(code) =\n+                                        self.tcx.sess().source_map().span_to_snippet(span)\n+                                    {\n+                                        if code.starts_with('(') && code.ends_with(')') {\n+                                            let before_close = span.hi() - BytePos::from_u32(1);\n+\n+                                            err.span_suggestion(\n+                                                span.with_hi(before_close).shrink_to_hi(),\n+                                                \"use a trailing comma to create a tuple with one element\",\n+                                                \",\".into(),\n+                                                Applicability::MaybeIncorrect,\n+                                            );\n+                                        } else {\n+                                            err.multipart_suggestion(\n+                                                \"use a trailing comma to create a tuple with one element\",\n+                                                vec![\n+                                                    (span.shrink_to_lo(), \"(\".into()),\n+                                                    (span.shrink_to_hi(), \",)\".into()),\n+                                                ],\n+                                                Applicability::MaybeIncorrect,\n+                                            );\n+                                        }\n+                                    }\n                                 }\n                             }\n                         }"}, {"sha": "0a79d539ea96246da68fc42f57b0fb72155e1c41", "filename": "src/test/ui/typeck/issue-84768.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91a43f04237dc9fe839fe8466d459e4f215d02fc/src%2Ftest%2Fui%2Ftypeck%2Fissue-84768.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91a43f04237dc9fe839fe8466d459e4f215d02fc/src%2Ftest%2Fui%2Ftypeck%2Fissue-84768.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-84768.stderr?ref=91a43f04237dc9fe839fe8466d459e4f215d02fc", "patch": "@@ -12,10 +12,6 @@ LL |     <F as FnOnce(&mut u8)>::call_once(f, 1)\n    |\n    = note: expected tuple `(&mut u8,)`\n                found type `{integer}`\n-help: use a trailing comma to create a tuple with one element\n-   |\n-LL |     <F as FnOnce(&mut u8)>::call_once(f, (1,))\n-   |                                          + ++\n \n error: aborting due to 2 previous errors\n "}]}