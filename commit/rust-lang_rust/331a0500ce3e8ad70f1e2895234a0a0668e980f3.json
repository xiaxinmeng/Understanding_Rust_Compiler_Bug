{"sha": "331a0500ce3e8ad70f1e2895234a0a0668e980f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMWEwNTAwY2UzZThhZDcwZjFlMjg5NTIzNGEwYTA2NjhlOTgwZjM=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-03-14T13:50:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-14T13:50:20Z"}, "message": "Merge pull request #3441 from rchaser53/const-generics\n\nimplement for const generics", "tree": {"sha": "8c9677c801709909283d816ff252354d511307e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c9677c801709909283d816ff252354d511307e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/331a0500ce3e8ad70f1e2895234a0a0668e980f3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcilwdCRBK7hj4Ov3rIwAAdHIIAH7abre99ziy1kwwjyopPMj5\n0guibpFAWIslPSttLZpkAohZy+6QjdtaF4q1V8pQIRnFe9pvKM24an5SkKirYWxu\nBZ77J7QEivsuZGVshYmtGj0Mm5/O7aZAAp4j2YKlSMaRiNDzykYronHBeoblSPEm\nkiTOCPdrQSZIlCiKUxpHUBcW0unnHf/0BWbwq0FUwm5H/0kANzfEq470D6rkxwXP\nmUaBeLoMn5uwng9UmK9AdDeXZvQaGpdl2hvZ0IgTv6ySqzsAzoIIKMzixVk8Z5lQ\naRKx/0pRrcD3SHRieeC3q+75Xx5DyGn+kACVB6UJe1NsBIUcPohr34LPkA+cPsQ=\n=XizU\n-----END PGP SIGNATURE-----\n", "payload": "tree 8c9677c801709909283d816ff252354d511307e4\nparent be5ffc3abeb66a88b4920d6e16997ef26d679d56\nparent f0c861bfa95a497bcb48f81276136f38627fcbd1\nauthor Seiichi Uchida <seuchida@gmail.com> 1552571420 +0900\ncommitter GitHub <noreply@github.com> 1552571420 +0900\n\nMerge pull request #3441 from rchaser53/const-generics\n\nimplement for const generics"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/331a0500ce3e8ad70f1e2895234a0a0668e980f3", "html_url": "https://github.com/rust-lang/rust/commit/331a0500ce3e8ad70f1e2895234a0a0668e980f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/331a0500ce3e8ad70f1e2895234a0a0668e980f3/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be5ffc3abeb66a88b4920d6e16997ef26d679d56", "url": "https://api.github.com/repos/rust-lang/rust/commits/be5ffc3abeb66a88b4920d6e16997ef26d679d56", "html_url": "https://github.com/rust-lang/rust/commit/be5ffc3abeb66a88b4920d6e16997ef26d679d56"}, {"sha": "f0c861bfa95a497bcb48f81276136f38627fcbd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0c861bfa95a497bcb48f81276136f38627fcbd1", "html_url": "https://github.com/rust-lang/rust/commit/f0c861bfa95a497bcb48f81276136f38627fcbd1"}], "stats": {"total": 92, "additions": 85, "deletions": 7}, "files": [{"sha": "14b799622c930005f187e43490d6f63d917de486", "filename": "src/lists.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/331a0500ce3e8ad70f1e2895234a0a0668e980f3/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331a0500ce3e8ad70f1e2895234a0a0668e980f3/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=331a0500ce3e8ad70f1e2895234a0a0668e980f3", "patch": "@@ -622,8 +622,12 @@ pub fn extract_post_comment(\n     } else {\n         post_snippet\n     };\n-\n-    if !post_snippet_trimmed.is_empty() {\n+    // FIXME(#3441): post_snippet includes 'const' now\n+    // it should not include here\n+    let removed_newline_snippet = post_snippet_trimmed.trim();\n+    if !post_snippet_trimmed.is_empty()\n+        && (removed_newline_snippet.starts_with(\"//\") || removed_newline_snippet.starts_with(\"/*\"))\n+    {\n         Some(post_snippet_trimmed.to_owned())\n     } else {\n         None"}, {"sha": "118b84526e7ecd31abbb7d5c4be7a594759029a5", "filename": "src/spanned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/331a0500ce3e8ad70f1e2895234a0a0668e980f3/src%2Fspanned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331a0500ce3e8ad70f1e2895234a0a0668e980f3/src%2Fspanned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fspanned.rs?ref=331a0500ce3e8ad70f1e2895234a0a0668e980f3", "patch": "@@ -168,7 +168,7 @@ impl Spanned for ast::GenericArg {\n         match *self {\n             ast::GenericArg::Lifetime(ref lt) => lt.ident.span,\n             ast::GenericArg::Type(ref ty) => ty.span(),\n-            ast::GenericArg::Const(..) => unreachable!(), // FIXME(#3336)\n+            ast::GenericArg::Const(ref _const) => _const.value.span(),\n         }\n     }\n }"}, {"sha": "f8193e1c9f2e419b420059c62f8252e434332a77", "filename": "src/types.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/331a0500ce3e8ad70f1e2895234a0a0668e980f3/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331a0500ce3e8ad70f1e2895234a0a0668e980f3/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=331a0500ce3e8ad70f1e2895234a0a0668e980f3", "patch": "@@ -7,7 +7,7 @@ use syntax::symbol::keywords;\n \n use crate::config::lists::*;\n use crate::config::{IndentStyle, TypeDensity};\n-use crate::expr::{rewrite_assign_rhs, rewrite_tuple, rewrite_unary_prefix};\n+use crate::expr::{format_expr, rewrite_assign_rhs, rewrite_tuple, rewrite_unary_prefix, ExprType};\n use crate::lists::{definitive_tactic, itemize_list, write_list, ListFormatting, Separator};\n use crate::macros::{rewrite_macro, MacroPosition};\n use crate::overflow;\n@@ -132,6 +132,7 @@ where\n \n #[derive(Debug)]\n pub enum SegmentParam<'a> {\n+    Const(&'a ast::AnonConst),\n     LifeTime(&'a ast::Lifetime),\n     Type(&'a ast::Ty),\n     Binding(&'a ast::TypeBinding),\n@@ -142,14 +143,15 @@ impl<'a> SegmentParam<'a> {\n         match arg {\n             ast::GenericArg::Lifetime(ref lt) => SegmentParam::LifeTime(lt),\n             ast::GenericArg::Type(ref ty) => SegmentParam::Type(ty),\n-            ast::GenericArg::Const(..) => unreachable!(), // FIXME(#3336)\n+            ast::GenericArg::Const(const_) => SegmentParam::Const(const_),\n         }\n     }\n }\n \n impl<'a> Spanned for SegmentParam<'a> {\n     fn span(&self) -> Span {\n         match *self {\n+            SegmentParam::Const(const_) => const_.value.span,\n             SegmentParam::LifeTime(lt) => lt.ident.span,\n             SegmentParam::Type(ty) => ty.span,\n             SegmentParam::Binding(binding) => binding.span,\n@@ -160,6 +162,7 @@ impl<'a> Spanned for SegmentParam<'a> {\n impl<'a> Rewrite for SegmentParam<'a> {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n         match *self {\n+            SegmentParam::Const(const_) => const_.rewrite(context, shape),\n             SegmentParam::LifeTime(lt) => lt.rewrite(context, shape),\n             SegmentParam::Type(ty) => ty.rewrite(context, shape),\n             SegmentParam::Binding(binding) => {\n@@ -454,7 +457,7 @@ impl Rewrite for ast::GenericArg {\n         match *self {\n             ast::GenericArg::Lifetime(ref lt) => lt.rewrite(context, shape),\n             ast::GenericArg::Type(ref ty) => ty.rewrite(context, shape),\n-            ast::GenericArg::Const(..) => unreachable!(), // FIXME(#3336)\n+            ast::GenericArg::Const(ref const_) => const_.rewrite(context, shape),\n         }\n     }\n }\n@@ -482,6 +485,12 @@ fn rewrite_bounded_lifetime(\n     }\n }\n \n+impl Rewrite for ast::AnonConst {\n+    fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n+        format_expr(&self.value, ExprType::SubExpression, context, shape)\n+    }\n+}\n+\n impl Rewrite for ast::Lifetime {\n     fn rewrite(&self, context: &RewriteContext<'_>, _: Shape) -> Option<String> {\n         Some(rewrite_ident(context, self.ident).to_owned())\n@@ -525,7 +534,16 @@ impl Rewrite for ast::GenericParam {\n             Some(ref rw) if !rw.is_empty() => result.push_str(&format!(\"{} \", rw)),\n             _ => (),\n         }\n-        result.push_str(rewrite_ident(context, self.ident));\n+\n+        if let syntax::ast::GenericParamKind::Const { ref ty } = &self.kind {\n+            result.push_str(\"const \");\n+            result.push_str(rewrite_ident(context, self.ident));\n+            result.push_str(\": \");\n+            result.push_str(&ty.rewrite(context, shape)?);\n+        } else {\n+            result.push_str(rewrite_ident(context, self.ident));\n+        }\n+\n         if !self.bounds.is_empty() {\n             result.push_str(type_bound_colon(context));\n             result.push_str(&self.bounds.rewrite(context, shape)?)"}, {"sha": "420810b92ead57eda89919d7fb37ee6be9e608c5", "filename": "tests/source/const_generics.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/331a0500ce3e8ad70f1e2895234a0a0668e980f3/tests%2Fsource%2Fconst_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331a0500ce3e8ad70f1e2895234a0a0668e980f3/tests%2Fsource%2Fconst_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconst_generics.rs?ref=331a0500ce3e8ad70f1e2895234a0a0668e980f3", "patch": "@@ -0,0 +1,32 @@\n+struct Message {\n+    field2: Vec<\n+      \"MessageEntity\"\n+    >,\n+    field3: Vec<\n+      1\n+    >,\n+    field4: Vec<\n+      2 ,    3\n+    >,\n+\n+}\n+\n+struct RectangularArray<T, const WIDTH: usize, const HEIGHT: usize> {\n+    array: [[T; WIDTH]; HEIGHT],\n+}\n+\n+fn main() {\n+  const X: usize = 7;\n+  let x: RectangularArray<i32, 2, 4>;\n+  let y: RectangularArray<i32,  X,  {2 \n+  * 2} >;\n+}\n+\n+fn foo<const X: usize>() {\n+    const Y: usize = X * 2;\n+    static Z: (usize, usize) = (X, X);\n+\n+    struct Foo([i32; X]);\n+}\n+\n+type Foo<const N: usize> = [i32; N + 1];"}, {"sha": "f60b7eb08800ea1dc1b45ca0a8a6313c8477df70", "filename": "tests/target/const_generics.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/331a0500ce3e8ad70f1e2895234a0a0668e980f3/tests%2Ftarget%2Fconst_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331a0500ce3e8ad70f1e2895234a0a0668e980f3/tests%2Ftarget%2Fconst_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconst_generics.rs?ref=331a0500ce3e8ad70f1e2895234a0a0668e980f3", "patch": "@@ -0,0 +1,24 @@\n+struct Message {\n+    field2: Vec<\"MessageEntity\">,\n+    field3: Vec<1>,\n+    field4: Vec<2, 3>,\n+}\n+\n+struct RectangularArray<T, const WIDTH: usize, const HEIGHT: usize> {\n+    array: [[T; WIDTH]; HEIGHT],\n+}\n+\n+fn main() {\n+    const X: usize = 7;\n+    let x: RectangularArray<i32, 2, 4>;\n+    let y: RectangularArray<i32, X, { 2 * 2 }>;\n+}\n+\n+fn foo<const X: usize>() {\n+    const Y: usize = X * 2;\n+    static Z: (usize, usize) = (X, X);\n+\n+    struct Foo([i32; X]);\n+}\n+\n+type Foo<const N: usize> = [i32; N + 1];"}]}