{"sha": "adb8ac41620b42c1a27c8c013628e49701fb3b27", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYjhhYzQxNjIwYjQyYzFhMjdjOGMwMTM2MjhlNDk3MDFmYjNiMjc=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-06-22T18:43:15Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-24T05:35:11Z"}, "message": "Fix/annotate a variety of xfails", "tree": {"sha": "451b989399d85cd00b5ce074a45df3d31c57da92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/451b989399d85cd00b5ce074a45df3d31c57da92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adb8ac41620b42c1a27c8c013628e49701fb3b27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adb8ac41620b42c1a27c8c013628e49701fb3b27", "html_url": "https://github.com/rust-lang/rust/commit/adb8ac41620b42c1a27c8c013628e49701fb3b27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adb8ac41620b42c1a27c8c013628e49701fb3b27/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2e39234cc5509fb461b8805eeb32c5ce538ee6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2e39234cc5509fb461b8805eeb32c5ce538ee6e", "html_url": "https://github.com/rust-lang/rust/commit/e2e39234cc5509fb461b8805eeb32c5ce538ee6e"}], "stats": {"total": 344, "additions": 98, "deletions": 246}, "files": [{"sha": "0fe30059ef65a36891e19e66fd84efb2ef7ae67e", "filename": "src/test/run-pass/autoderef-method-priority.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -1,6 +1,4 @@\n-// xfail-test\n-// xfail'd because of a problem with by-value self.\n-\n+// xfail-test #5321\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "6674147e147696d8d6cc42021f6881bdcd048f4c", "filename": "src/test/run-pass/class-cast-to-trait-cross-crate.rs", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e2e39234cc5509fb461b8805eeb32c5ce538ee6e/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e39234cc5509fb461b8805eeb32c5ce538ee6e/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate.rs?ref=e2e39234cc5509fb461b8805eeb32c5ce538ee6e", "patch": "@@ -1,60 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-test\n-\n-use to_str::*;\n-use to_str::to_str;\n-\n-class cat : to_str {\n-  priv {\n-    let mut meows : uint;\n-    fn meow() {\n-      error!(\"Meow\");\n-      self.meows += 1u;\n-      if self.meows % 5u == 0u {\n-          self.how_hungry += 1;\n-      }\n-    }\n-  }\n-\n-  let mut how_hungry : int;\n-  let name : str;\n-\n-  new(in_x : uint, in_y : int, in_name: str)\n-    { self.meows = in_x; self.how_hungry = in_y; self.name = in_name; }\n-\n-  fn speak() { self.meow(); }\n-\n-  fn eat() -> bool {\n-    if self.how_hungry > 0 {\n-        error!(\"OM NOM NOM\");\n-        self.how_hungry -= 2;\n-        return true;\n-    }\n-    else {\n-        error!(\"Not hungry!\");\n-        return false;\n-    }\n-  }\n-\n-  fn to_str() -> str { self.name }\n-}\n-\n-fn print_out<T:to_str>(thing: T, expected: str) {\n-  let actual = thing.to_str();\n-  debug!(\"%s\", actual);\n-  assert_eq!(actual, expected);\n-}\n-\n-pub fn main() {\n-  let nyan : to_str  = cat(0u, 2, \"nyan\") as to_str;\n-  print_out(nyan, \"nyan\");\n-}"}, {"sha": "655a9d4a0c072133304dd1fd19c87b75dcf92e69", "filename": "src/test/run-pass/class-impl-parameterized-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// xfail-test FIXME #7307\n // xfail-fast\n \n extern mod extra;"}, {"sha": "8565ab038413c81ced410b335a78149c50fb3fc6", "filename": "src/test/run-pass/class-implements-multiple-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// xfail-test FIXME #7305\n \n extern mod extra;\n use extra::oldmap::*;"}, {"sha": "f0c5b58d1559ceb9559b71cdd0ccb2895ecced0c", "filename": "src/test/run-pass/coerce-reborrow-imm-vec-arg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-arg.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -1,8 +1,6 @@\n-// xfail-test\n-\n fn sum(x: &[int]) -> int {\n     let mut sum = 0;\n-    for x.each |y| { sum += *y; }\n+    for x.iter().advance |y| { sum += *y; }\n     return sum;\n }\n \n@@ -14,8 +12,10 @@ fn sum_imm(y: &[int]) -> int {\n     sum(y)\n }\n \n+/* FIXME #7304\n fn sum_const(y: &const [int]) -> int {\n     sum(y)\n }\n+*/\n \n pub fn main() {}"}, {"sha": "590cd8250208a7fbb221d477c589b4de5cc49644", "filename": "src/test/run-pass/coerce-reborrow-imm-vec-rcvr.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -1,20 +1,20 @@\n-// xfail-test\n-\n+/* FIXME #7302\n fn foo(v: &const [uint]) -> ~[uint] {\n-    v.to_vec()\n+    v.to_owned()\n }\n+*/\n \n fn bar(v: &mut [uint]) -> ~[uint] {\n-    v.to_vec()\n+    v.to_owned()\n }\n \n fn bip(v: &[uint]) -> ~[uint] {\n-    v.to_vec()\n+    v.to_owned()\n }\n \n pub fn main() {\n-    let mut the_vec = ~[1, 2, 3, 100];\n-    assert_eq!(the_vec, foo(the_vec));\n-    assert_eq!(the_vec, bar(the_vec));\n-    assert_eq!(the_vec, bip(the_vec));\n+    let mut the_vec = ~[1u, 2, 3, 100];\n+//    assert_eq!(the_vec.clone(), foo(the_vec));\n+    assert_eq!(the_vec.clone(), bar(the_vec));\n+    assert_eq!(the_vec.clone(), bip(the_vec));\n }"}, {"sha": "409c31f1fa5ebe248a5c17e5697da43e464cd16f", "filename": "src/test/run-pass/deriving-global.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-global.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -1,4 +1,4 @@\n-// xfail-test #7103 `extern mod` does not work on windows\n+// xfail-fast #7103 `extern mod` does not work on windows\n \n // Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at"}, {"sha": "363c54f68129a2c0f8f28a62bc1ea9f79f7272b2", "filename": "src/test/run-pass/extern-mod-url.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fextern-mod-url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fextern-mod-url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-mod-url.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -10,7 +10,7 @@\n \n // Just a test that new-style extern mods parse\n \n-// xfail-test\n+// xfail-test FIXME #6407\n extern mod test = \"github.com/catamorphism/test-pkg\";\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "144cc7c1e287a661592896068ec793d0cea5f19c", "filename": "src/test/run-pass/fn-bare-size.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Ffn-bare-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Ffn-bare-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-size.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -8,12 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-\n-extern mod extra;\n+use std::sys;\n \n pub fn main() {\n     // Bare functions should just be a pointer\n-    assert!(sys::rustrt::size_of::<fn()>() ==\n-        sys::rustrt::size_of::<int>());\n+    assert_eq!(sys::size_of::<extern \"Rust\" fn()>(), sys::size_of::<int>());\n }"}, {"sha": "a11e89f37be1533fd71960ae8a94fe785934858c", "filename": "src/test/run-pass/foreign-mod.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fforeign-mod.rc", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fforeign-mod.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-mod.rc?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// xfail-test FIXME #7308\n // -*- rust -*-\n \n native mod libc = target_libc {"}, {"sha": "530f40c6a83d4d5bf30ce36f09be9cf4fbd653e9", "filename": "src/test/run-pass/issue-1866.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fissue-1866.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fissue-1866.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1866.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// xfail-test FIXME #1866\n mod a {\n     pub type rust_task = uint;\n     pub mod rustrt {\n+        use super::rust_task;\n         pub extern {\n             pub fn rust_task_is_unwinding(rt: *rust_task) -> bool;\n         }\n@@ -21,6 +22,7 @@ mod a {\n mod b {\n     pub type rust_task = bool;\n     pub mod rustrt {\n+        use super::rust_task;\n         pub extern {\n             pub fn rust_task_is_unwinding(rt: *rust_task) -> bool;\n         }"}, {"sha": "423888c1cf5b6e6c67c05b1e716707872bac8ce2", "filename": "src/test/run-pass/issue-2101.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e2e39234cc5509fb461b8805eeb32c5ce538ee6e/src%2Ftest%2Frun-pass%2Fissue-2101.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e39234cc5509fb461b8805eeb32c5ce538ee6e/src%2Ftest%2Frun-pass%2Fissue-2101.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2101.rs?ref=e2e39234cc5509fb461b8805eeb32c5ce538ee6e", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-test\n-extern mod extra;\n-use extra::arena;\n-use extra::arena::Arena;\n-\n-enum hold { s(str) }\n-\n-fn init(ar: &a.arena::Arena, str: str) -> &a.hold {\n-    new(*ar) s(str)\n-}\n-\n-pub fn main(args: ~[str]) {\n-    let ar = arena::Arena();\n-    let leak = init(&ar, args[0]);\n-    match *leak {\n-        s(astr) {\n-            io::println(fmt!(\"%?\", astr));\n-        }\n-    };\n-}"}, {"sha": "d5ee712d412bca43b86a39b9ead0fda9739f089e", "filename": "src/test/run-pass/issue-2190-2.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fissue-2190-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fissue-2190-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2190-2.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -8,23 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// xfail-test FIXME #2190\n mod a {\n-fn foo(f: &fn()) { f() }\n-fn bar() {}\n-pub fn main() { foo(||bar()); }\n+    fn foo(f: &fn()) { f() }\n+    fn bar() {}\n+    pub fn main() { foo(||bar()); }\n }\n \n mod b {\n-fn foo(f: Option<&fn()>) { f.iter(|x|x()) }\n-fn bar() {}\n-pub fn main() { foo(Some(bar)); }\n+    fn foo(f: Option<&fn()>) { f.iter(|x|x()) }\n+    fn bar() {}\n+    pub fn main() { foo(Some(bar)); }\n }\n \n mod c {\n-fn foo(f: Option<&fn()>) { f.iter(|x|x()) }\n-fn bar() {}\n-pub fn main() { foo(Some(||bar())); }\n+    fn foo(f: Option<&fn()>) { f.iter(|x|x()) }\n+    fn bar() {}\n+    pub fn main() { foo(Some(||bar())); }\n }\n \n pub fn main() {"}, {"sha": "5cdc4238eafbab3f529c1a290dcb58732cd2b414", "filename": "src/test/run-pass/issue-3290.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fissue-3290.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fissue-3290.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3290.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// xfail-test FIXME #3290\n fn main() {\n    let mut x = ~3;\n    x = x;"}, {"sha": "5f4409391396a39ca339c564b75dabb4a175a985", "filename": "src/test/run-pass/issue-3796.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fissue-3796.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fissue-3796.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3796.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// xfail-test FIXME #3796\n #[deny(dead_assignment)];\n fn main() {\n     let mut x = 1;"}, {"sha": "e293e40ac6903152e242d9c71ebedc7c841f3ef2", "filename": "src/test/run-pass/issue-3874.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fissue-3874.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fissue-3874.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3874.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// xfail-test FIXME #3874\n enum PureCounter { PureCounter(uint) }\n \n fn each(self: PureCounter, blk: &fn(v: &uint)) {"}, {"sha": "9a8b90db185bc43875d52da98c3f292c58cef582", "filename": "src/test/run-pass/issue-3979-2.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fissue-3979-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fissue-3979-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3979-2.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -9,16 +9,17 @@\n // except according to those terms.\n \n // xfail-test\n+\n trait A {\n-    fn a_method();\n+    fn a_method(&self);\n }\n \n trait B: A {\n-    fn b_method();\n+    fn b_method(&self);\n }\n \n trait C: B {\n-    fn c_method() {\n+    fn c_method(&self) {\n         self.a_method();\n     }\n }"}, {"sha": "5884a35a1a1066e107328aaf6fbdc811896bd8e2", "filename": "src/test/run-pass/issue-3979-generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// xfail-test FIXME #5946\n trait Positioned<S> {\n   fn SetX(&mut self, S);\n   fn X(&self) -> S;"}, {"sha": "720ce7a2c27faf77faf729c161c59cb176518ae9", "filename": "src/test/run-pass/issue-4241.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4241.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -8,11 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n extern mod extra;\n \n use extra::net::tcp::TcpSocketBuf;\n \n+use std::io;\n+use std::int;\n+\n use std::io::{ReaderUtil,WriterUtil};\n \n enum Result {\n@@ -97,9 +99,9 @@ priv fn cmd_to_str(cmd: ~[~str]) -> ~str {\n   let mut res = ~\"*\";\n   res.push_str(cmd.len().to_str());\n   res.push_str(\"\\r\\n\");\n-    for cmd.each |s| {\n+    for cmd.iter().advance |s| {\n     res.push_str([~\"$\", s.len().to_str(), ~\"\\r\\n\",\n-                  copy *s, ~\"\\r\\n\"].concat()));\n+                  copy *s, ~\"\\r\\n\"].concat() );\n     }\n   res\n }"}, {"sha": "4d59ea0fba32ccc6f54c544dc45ec25441019a1d", "filename": "src/test/run-pass/issue-4541.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fissue-4541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fissue-4541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4541.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+use std::io;\n+\n fn parse_args() -> ~str {\n     let args = std::os::args();\n     let mut n = 0;"}, {"sha": "4aa83b853de45518bef149d8cf58670bb58472b7", "filename": "src/test/run-pass/issue-4542.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fissue-4542.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fissue-4542.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4542.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -8,9 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+use std::os;\n+\n pub fn main() {\n-    for os::args().each |arg| {\n+    let x = os::args();\n+    for x.iter().advance |arg| {\n         match arg.clone() {\n             s => { }\n         }"}, {"sha": "202385681ce6234c4661c9fa2a7cf80610855121", "filename": "src/test/run-pass/issue_3882.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fissue_3882.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fissue_3882.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue_3882.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -1,5 +1,3 @@\n-// xfail-test\n-\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -10,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-test\n // aux-build:issue_3882.rc\n extern mod linenoise;\n use linenoise::issue_3882::*;"}, {"sha": "b6b6e0e143795c461bc0d5f58bd5211068f9a0f1", "filename": "src/test/run-pass/labeled-break.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Flabeled-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Flabeled-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flabeled-break.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-fast\n-// xfail-test\n-\n pub fn main() {\n     'foo: loop {\n         loop {"}, {"sha": "99e1ae6ec56e300efd1fd9134b94c373b6355113", "filename": "src/test/run-pass/match-borrowed_str.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fmatch-borrowed_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fmatch-borrowed_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-borrowed_str.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -1,6 +1,8 @@\n-// xfail-test\n+// FIXME #7306\n // xfail-fast\n-// -*- rust -*-\n+\n+use std::io;\n+\n fn f1(ref_string: &str) {\n     match ref_string {\n         \"a\" => io::println(\"found a\"),"}, {"sha": "2db66054145068582a47489c576a36582c27d862", "filename": "src/test/run-pass/pipe-select-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// FIXME #7303: xfail-test\n \n // Protocols\n proto! foo ("}, {"sha": "aa750c21d4588570be3c22e745bbfad2d3864955", "filename": "src/test/run-pass/preempt.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fpreempt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fpreempt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpreempt.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -11,23 +11,30 @@\n // xfail-test\n // This checks that preemption works.\n \n-fn starve_main(alive: chan<int>) {\n+// note: halfway done porting to modern rust\n+extern mod extra;\n+\n+use std::comm;\n+use extra::comm;\n+\n+fn starve_main(alive: Port<int>) {\n     debug!(\"signalling main\");\n-    alive.recv(1);\n+    alive.recv();\n     debug!(\"starving main\");\n-    let i: int = 0;\n+    let mut i: int = 0;\n     loop { i += 1; }\n }\n \n pub fn main() {\n-    let alive: port<int> = port();\n+    let (port, chan) = stream();\n+\n     debug!(\"main started\");\n-    let s: task = do task::spawn {\n-        starve_main(chan(alive));\n+    do spawn {\n+        starve_main(port);\n     };\n-    let i: int;\n+    let mut i: int = 0;\n     debug!(\"main waiting for alive signal\");\n-    alive.send(i);\n+    chan.send(i);\n     debug!(\"main got alive signal\");\n     while i < 50 { debug!(\"main iterated\"); i += 1; }\n     debug!(\"main completed\");"}, {"sha": "c8e87af9ec0a392a6cceae4d0d6090e3269a796e", "filename": "src/test/run-pass/rcvr-borrowed-to-region.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -1,6 +1,3 @@\n-// xfail-test\n-// xfail'd due to segfaults with by-value self.\n-\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -15,26 +12,24 @@ trait get {\n     fn get(self) -> int;\n }\n \n-// Note: impl on a slice\n-impl get for &'self int {\n+// FIXME #7302: Note: impl on a slice\n+impl<'self> get for &'self int {\n     fn get(self) -> int {\n-        return **self;\n+        return *self;\n     }\n }\n \n pub fn main() {\n-    /*\n     let x = @mut 6;\n     let y = x.get();\n     assert_eq!(y, 6);\n-    */\n \n     let x = @6;\n     let y = x.get();\n     debug!(\"y=%d\", y);\n     assert_eq!(y, 6);\n \n-    let mut x = ~6;\n+    let x = ~6;\n     let y = x.get();\n     debug!(\"y=%d\", y);\n     assert_eq!(y, 6);"}, {"sha": "45e5b1ad9c94a6164d3d04a565e70cacbe9675e5", "filename": "src/test/run-pass/regions-borrow-evec-at.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-at.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-\n fn foo(x: &[uint]) -> uint {\n     x[0]\n }"}, {"sha": "57f6596d1d7209d7325d5790a64822f5e81c25ef", "filename": "src/test/run-pass/resolve-issue-2428.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fresolve-issue-2428.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Fresolve-issue-2428.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresolve-issue-2428.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-\n static foo: int = 4 >> 1;\n enum bs { thing = foo }\n pub fn main() { assert!((thing as int == foo)); }"}, {"sha": "c360b6134551a4330e153e1ef92b25c5127bf2ef", "filename": "src/test/run-pass/tag-align-dyn-variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+use std::ptr;\n \n enum a_tag<A,B> {\n     varA(A),"}, {"sha": "776c7d9ca448f0ac336c21d0b0211b7ff34af5d2", "filename": "src/test/run-pass/tag-align-u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Ftag-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Ftag-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-u64.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+use std::ptr;\n \n enum a_tag {\n     a_tag(u64)"}, {"sha": "637fc7a70f585d44170cd12c13c36e933d8a1327", "filename": "src/test/run-pass/trait-cast.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-cast.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -1,4 +1,4 @@\n-// xfail-test\n+// xfail-test FIXME #5882\n // Weird borrow check bug\n \n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n@@ -17,45 +17,45 @@ struct Tree(@mut TreeR);\n struct TreeR {\n     left: Option<Tree>,\n     right: Option<Tree>,\n-    val: to_str\n+    val: ~to_str\n }\n \n trait to_str {\n-    fn to_str(&self) -> ~str;\n+    fn to_str_(&self) -> ~str;\n }\n \n impl<T:to_str> to_str for Option<T> {\n-    fn to_str(&self) -> ~str {\n+    fn to_str_(&self) -> ~str {\n         match *self {\n           None => { ~\"none\" }\n-          Some(ref t) => { ~\"some(\" + t.to_str() + ~\")\" }\n+          Some(ref t) => { ~\"some(\" + t.to_str_() + ~\")\" }\n         }\n     }\n }\n \n impl to_str for int {\n-    fn to_str(&self) -> ~str { int::str(*self) }\n+    fn to_str_(&self) -> ~str { self.to_str() }\n }\n \n impl to_str for Tree {\n-    fn to_str(&self) -> ~str {\n-        let l = self.left, r = self.right;\n+    fn to_str_(&self) -> ~str {\n+        let (l, r) = (self.left, self.right);\n         let val = &self.val;\n-        fmt!(\"[%s, %s, %s]\", val.to_str(), l.to_str(), r.to_str())\n+        fmt!(\"[%s, %s, %s]\", val.to_str_(), l.to_str_(), r.to_str_())\n     }\n }\n \n-fn foo<T:to_str>(x: T) -> ~str { x.to_str() }\n+fn foo<T:to_str>(x: T) -> ~str { x.to_str_() }\n \n pub fn main() {\n     let t1 = Tree(@mut TreeR{left: None,\n                              right: None,\n-                             val: 1 as to_str });\n+                             val: ~1 as ~to_str });\n     let t2 = Tree(@mut TreeR{left: Some(t1),\n                              right: Some(t1),\n-                             val: 2 as to_str });\n+                             val: ~2 as ~to_str });\n     let expected = ~\"[2, some([1, none, none]), some([1, none, none])]\";\n-    assert_eq!(t2.to_str(), expected);\n-    assert_eq!(foo(t2 as to_str), expected);\n+    assert!(t2.to_str_() == expected);\n+    assert!(foo(t2) == expected);\n     t1.left = Some(t2); // create cycle\n }"}, {"sha": "ba3e8e082b3454f5db3cd3ba986ca90f6ccf8ac2", "filename": "src/test/run-pass/traits.rs", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e2e39234cc5509fb461b8805eeb32c5ce538ee6e/src%2Ftest%2Frun-pass%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e39234cc5509fb461b8805eeb32c5ce538ee6e/src%2Ftest%2Frun-pass%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits.rs?ref=e2e39234cc5509fb461b8805eeb32c5ce538ee6e", "patch": "@@ -1,55 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//xfail-test\n-\n-// Sketching traits.\n-\n-// methods with no implementation are required; methods with an\n-// implementation are provided.  No \"req\" keyword necessary.\n-trait Eq {\n-    fn eq(a: self) -> bool;\n-\n-    fn neq(a: self) -> bool {\n-        !self.eq(a)\n-    }\n-}\n-\n-// The `<` is pronounced `extends`.  Also under consideration is `<:`.\n-// Just using `:` is frowned upon, because (paraphrasing dherman) `:`\n-// is supposed to separate things from different universes.\n-trait Ord < Eq {\n-\n-    fn lt(a: self) -> bool;\n-\n-    fn lte(a: self) -> bool {\n-        self.lt(a) || self.eq(a)\n-    }\n-\n-    fn gt(a: self) -> bool {\n-        !self.lt(a) && !self.eq(a)\n-    }\n-\n-    fn gte(a: self) -> bool {\n-        !self.lt(a)\n-    }\n-}\n-\n-// pronounced \"impl of Ord for int\" -- not sold on this yet\n-impl Ord for int {\n-    fn lt(a: &int) -> bool {\n-        self < (*a)\n-    }\n-\n-    // is this the place to put this?\n-    fn eq(a: &int) -> bool {\n-        self == (*a)\n-    }\n-}"}, {"sha": "4882baceaa816154fa3281f49f25a85ac958bb91", "filename": "src/test/run-pass/unconstrained-region.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Funconstrained-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb8ac41620b42c1a27c8c013628e49701fb3b27/src%2Ftest%2Frun-pass%2Funconstrained-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funconstrained-region.rs?ref=adb8ac41620b42c1a27c8c013628e49701fb3b27", "patch": "@@ -8,15 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-// See #3283\n-fn foo(blk: &fn(p: &'a fn() -> &'a fn())) {\n-        let mut state = 0;\n-        let statep = &mut state;\n+fn foo<'a>(blk: &fn(p: &'a fn() -> &'a fn())) {\n+    let mut state = 0;\n+    let statep = &mut state;\n     do blk {\n         || { *statep = 1; }\n     }\n }\n fn main() {\n     do foo |p| { p()() }\n-}\n\\ No newline at end of file\n+}"}]}