{"sha": "0837a6ba04bd3cf8330901678dc38b6f2c953f20", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MzdhNmJhMDRiZDNjZjgzMzA5MDE2NzhkYzM4YjZmMmM5NTNmMjA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-13T21:12:44Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-13T21:13:13Z"}, "message": "rustc: Don't cache ast_ty_to_ty results for types that have references", "tree": {"sha": "a1b2c15401cb3cfc382e1f05c0e11a50705a2a40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1b2c15401cb3cfc382e1f05c0e11a50705a2a40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0837a6ba04bd3cf8330901678dc38b6f2c953f20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0837a6ba04bd3cf8330901678dc38b6f2c953f20", "html_url": "https://github.com/rust-lang/rust/commit/0837a6ba04bd3cf8330901678dc38b6f2c953f20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0837a6ba04bd3cf8330901678dc38b6f2c953f20/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02e9400a82048b75c690308e2b9ca4a5cc1b155c", "url": "https://api.github.com/repos/rust-lang/rust/commits/02e9400a82048b75c690308e2b9ca4a5cc1b155c", "html_url": "https://github.com/rust-lang/rust/commit/02e9400a82048b75c690308e2b9ca4a5cc1b155c"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "ea5347a6074506c751eb22743f9b90fe5f47dc0e", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0837a6ba04bd3cf8330901678dc38b6f2c953f20/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0837a6ba04bd3cf8330901678dc38b6f2c953f20/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=0837a6ba04bd3cf8330901678dc38b6f2c953f20", "patch": "@@ -135,6 +135,8 @@ export param_bounds_to_kind;\n export default_arg_mode_for_ty;\n export item_path;\n export item_path_str;\n+export ast_ty_to_ty_cache_entry;\n+export atttce_unresolved, atttce_resolved, atttce_has_regions;\n \n // Data types\n \n@@ -162,6 +164,12 @@ type creader_cache = hashmap<{cnum: int, pos: uint, len: uint}, t>;\n \n type intern_key = {struct: sty, o_def_id: option<ast::def_id>};\n \n+enum ast_ty_to_ty_cache_entry {\n+    atttce_unresolved,  /* not resolved yet */\n+    atttce_resolved(t), /* resolved to a type, irrespective of region */\n+    atttce_has_regions  /* has regions; cannot be cached */\n+}\n+\n type ctxt =\n     @{interner: hashmap<intern_key, t_box>,\n       mutable next_id: uint,\n@@ -177,7 +185,7 @@ type ctxt =\n       short_names_cache: hashmap<t, @str>,\n       needs_drop_cache: hashmap<t, bool>,\n       kind_cache: hashmap<t, kind>,\n-      ast_ty_to_ty_cache: hashmap<@ast::ty, option<t>>,\n+      ast_ty_to_ty_cache: hashmap<@ast::ty, ast_ty_to_ty_cache_entry>,\n       enum_var_cache: hashmap<def_id, @[variant_info]>,\n       iface_method_cache: hashmap<def_id, @[method]>,\n       ty_param_bounds: hashmap<ast::node_id, param_bounds>,"}, {"sha": "337b22663856c57af2190e3750ca6f005618148b", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0837a6ba04bd3cf8330901678dc38b6f2c953f20/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0837a6ba04bd3cf8330901678dc38b6f2c953f20/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=0837a6ba04bd3cf8330901678dc38b6f2c953f20", "patch": "@@ -270,16 +270,16 @@ fn ast_ty_to_ty(tcx: ty::ctxt, mode: mode, &&ast_ty: @ast::ty) -> ty::t {\n         }\n     }\n     alt tcx.ast_ty_to_ty_cache.find(ast_ty) {\n-      some(some(ty)) { ret ty; }\n-      some(none) {\n+      some(ty::atttce_resolved(ty)) { ret ty; }\n+      some(ty::atttce_unresolved) {\n         tcx.sess.span_fatal(ast_ty.span, \"illegal recursive type. \\\n                                           insert a enum in the cycle, \\\n                                           if this is desired)\");\n       }\n-      none { }\n-    } /* go on */\n+      some(ty::atttce_has_regions) | none { /* go on */ }\n+    }\n \n-    tcx.ast_ty_to_ty_cache.insert(ast_ty, none::<ty::t>);\n+    tcx.ast_ty_to_ty_cache.insert(ast_ty, ty::atttce_unresolved);\n     fn ast_mt_to_mt(tcx: ty::ctxt, mode: mode, mt: ast::mt) -> ty::mt {\n         ret {ty: ast_ty_to_ty(tcx, mode, mt.ty), mutbl: mt.mutbl};\n     }\n@@ -425,7 +425,13 @@ fn ast_ty_to_ty(tcx: ty::ctxt, mode: mode, &&ast_ty: @ast::ty) -> ty::t {\n                                 \"found `ty_mac` in unexpected place\");\n       }\n     };\n-    tcx.ast_ty_to_ty_cache.insert(ast_ty, some(typ));\n+\n+    if ty::type_has_rptrs(typ) {\n+        tcx.ast_ty_to_ty_cache.insert(ast_ty, ty::atttce_has_regions);\n+    } else {\n+        tcx.ast_ty_to_ty_cache.insert(ast_ty, ty::atttce_resolved(typ));\n+    }\n+\n     ret typ;\n }\n "}]}