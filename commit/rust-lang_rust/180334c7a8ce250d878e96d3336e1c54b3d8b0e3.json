{"sha": "180334c7a8ce250d878e96d3336e1c54b3d8b0e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MDMzNGM3YThjZTI1MGQ4NzhlOTZkMzMzNmUxYzU0YjNkOGIwZTM=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-06T14:41:48Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-20T08:58:05Z"}, "message": "remove `pop_placeholders`", "tree": {"sha": "d8c9e3d2ae048752d774a97f5574d93da00ff0d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8c9e3d2ae048752d774a97f5574d93da00ff0d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/180334c7a8ce250d878e96d3336e1c54b3d8b0e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/180334c7a8ce250d878e96d3336e1c54b3d8b0e3", "html_url": "https://github.com/rust-lang/rust/commit/180334c7a8ce250d878e96d3336e1c54b3d8b0e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/180334c7a8ce250d878e96d3336e1c54b3d8b0e3/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a24c8977eeef97a445336af597fd628de65524cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a24c8977eeef97a445336af597fd628de65524cb", "html_url": "https://github.com/rust-lang/rust/commit/a24c8977eeef97a445336af597fd628de65524cb"}], "stats": {"total": 83, "additions": 3, "deletions": 80}, "files": [{"sha": "0499dc9ed2232ee8f2f39015a672fa00d6973cc0", "filename": "src/librustc_infer/infer/higher_ranked/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/180334c7a8ce250d878e96d3336e1c54b3d8b0e3/src%2Flibrustc_infer%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/180334c7a8ce250d878e96d3336e1c54b3d8b0e3/src%2Flibrustc_infer%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=180334c7a8ce250d878e96d3336e1c54b3d8b0e3", "patch": "@@ -63,14 +63,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// placeholder region. This is the first step of checking subtyping\n     /// when higher-ranked things are involved.\n     ///\n-    /// **Important:** you must call this function from within a snapshot.\n-    /// Moreover, before committing the snapshot, you must eventually call\n-    /// either `plug_leaks` or `pop_placeholders` to remove the placeholder\n-    /// regions. If you rollback the snapshot (or are using a probe), then\n-    /// the pop occurs as part of the rollback, so an explicit call is not\n-    /// needed (but is also permitted).\n-    ///\n-    /// For more information about how placeholders and HRTBs work, see\n+    /// **Important:** You have to be careful to not leak these placeholders,\n+    /// for more information about how placeholders and HRTBs work, see\n     /// the [rustc dev guide].\n     ///\n     /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html"}, {"sha": "91c39a0e78ffb732ef8340a2cc8b4512b6983013", "filename": "src/librustc_infer/infer/region_constraints/leak_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/180334c7a8ce250d878e96d3336e1c54b3d8b0e3/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/180334c7a8ce250d878e96d3336e1c54b3d8b0e3/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=180334c7a8ce250d878e96d3336e1c54b3d8b0e3", "patch": "@@ -128,7 +128,7 @@ impl<'tcx> TaintSet<'tcx> {\n                         verifys[i].origin.span(),\n                         \"we never add verifications while doing higher-ranked things\",\n                     ),\n-                    &Purged | &AddCombination(..) | &AddVar(..) => {}\n+                    &AddCombination(..) | &AddVar(..) => {}\n                 }\n             }\n         }"}, {"sha": "2902c41a6bcae779c85d64979c53082c3a6b57d8", "filename": "src/librustc_infer/infer/region_constraints/mod.rs", "status": "modified", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/180334c7a8ce250d878e96d3336e1c54b3d8b0e3/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/180334c7a8ce250d878e96d3336e1c54b3d8b0e3/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs?ref=180334c7a8ce250d878e96d3336e1c54b3d8b0e3", "patch": "@@ -289,14 +289,6 @@ pub(crate) enum UndoLog<'tcx> {\n \n     /// We added a GLB/LUB \"combination variable\".\n     AddCombination(CombineMapType, TwoRegions<'tcx>),\n-\n-    /// During freshening, we sometimes purge entries from the undo\n-    /// log in a kind of minisnapshot (unlike other snapshots, this\n-    /// purging actually takes place *on success*). In that case, we\n-    /// replace the corresponding entry with `Noop` so as to avoid the\n-    /// need to do a bunch of swapping. (We can't use `swap_remove` as\n-    /// the order of the vector is important.)\n-    Purged,\n }\n \n #[derive(Copy, Clone, PartialEq)]\n@@ -357,9 +349,6 @@ impl<'tcx> RegionConstraintStorage<'tcx> {\n \n     fn rollback_undo_entry(&mut self, undo_entry: UndoLog<'tcx>) {\n         match undo_entry {\n-            Purged => {\n-                // nothing to do here\n-            }\n             AddVar(vid) => {\n                 self.var_infos.pop().unwrap();\n                 assert_eq!(self.var_infos.len(), vid.index() as usize);\n@@ -488,62 +477,6 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         self.var_infos[vid].origin\n     }\n \n-    /// Removes all the edges to/from the placeholder regions that are\n-    /// in `placeholders`. This is used after a higher-ranked operation\n-    /// completes to remove all trace of the placeholder regions\n-    /// created in that time.\n-    pub fn pop_placeholders(&mut self, placeholders: &FxHashSet<ty::Region<'tcx>>) {\n-        debug!(\"pop_placeholders(placeholders={:?})\", placeholders);\n-\n-        assert!(UndoLogs::<super::UndoLog<'_>>::in_snapshot(&self.undo_log));\n-\n-        let constraints_to_kill: Vec<usize> = self\n-            .undo_log\n-            .iter()\n-            .enumerate()\n-            .rev()\n-            .filter(|&(_, undo_entry)| match undo_entry {\n-                super::UndoLog::RegionConstraintCollector(undo_entry) => {\n-                    kill_constraint(placeholders, undo_entry)\n-                }\n-                _ => false,\n-            })\n-            .map(|(index, _)| index)\n-            .collect();\n-\n-        for index in constraints_to_kill {\n-            let undo_entry = match &mut self.undo_log[index] {\n-                super::UndoLog::RegionConstraintCollector(undo_entry) => {\n-                    mem::replace(undo_entry, Purged)\n-                }\n-                _ => unreachable!(),\n-            };\n-            self.rollback_undo_entry(undo_entry);\n-        }\n-\n-        return;\n-\n-        fn kill_constraint<'tcx>(\n-            placeholders: &FxHashSet<ty::Region<'tcx>>,\n-            undo_entry: &UndoLog<'tcx>,\n-        ) -> bool {\n-            match undo_entry {\n-                &AddConstraint(Constraint::VarSubVar(..)) => false,\n-                &AddConstraint(Constraint::RegSubVar(a, _)) => placeholders.contains(&a),\n-                &AddConstraint(Constraint::VarSubReg(_, b)) => placeholders.contains(&b),\n-                &AddConstraint(Constraint::RegSubReg(a, b)) => {\n-                    placeholders.contains(&a) || placeholders.contains(&b)\n-                }\n-                &AddGiven(..) => false,\n-                &AddVerify(_) => false,\n-                &AddCombination(_, ref two_regions) => {\n-                    placeholders.contains(&two_regions.a) || placeholders.contains(&two_regions.b)\n-                }\n-                &AddVar(..) | &Purged => false,\n-            }\n-        }\n-    }\n-\n     fn add_constraint(&mut self, constraint: Constraint<'tcx>, origin: SubregionOrigin<'tcx>) {\n         // cannot add constraints once regions are resolved\n         debug!(\"RegionConstraintCollector: add_constraint({:?})\", constraint);"}, {"sha": "2cfd6bb904c410558a310f727d1914cc45922e34", "filename": "src/librustc_infer/infer/undo_log.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/180334c7a8ce250d878e96d3336e1c54b3d8b0e3/src%2Flibrustc_infer%2Finfer%2Fundo_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/180334c7a8ce250d878e96d3336e1c54b3d8b0e3/src%2Flibrustc_infer%2Finfer%2Fundo_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fundo_log.rs?ref=180334c7a8ce250d878e96d3336e1c54b3d8b0e3", "patch": "@@ -198,10 +198,6 @@ impl<'tcx> InferCtxtUndoLogs<'tcx> {\n         assert!(self.logs.len() >= snapshot.undo_len);\n         assert!(self.num_open_snapshots > 0);\n     }\n-\n-    pub(crate) fn iter(&self) -> std::slice::Iter<'_, UndoLog<'tcx>> {\n-        self.logs.iter()\n-    }\n }\n \n impl<'tcx> std::ops::Index<usize> for InferCtxtUndoLogs<'tcx> {"}]}