{"sha": "e6fa9b016fab4bf38f4e2a798fcabcc13b58e9ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ZmE5YjAxNmZhYjRiZjM4ZjRlMmE3OThmY2FiY2MxM2I1OGU5YWI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-13T13:06:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-13T13:06:27Z"}, "message": "Merge #9247\n\n9247: internal: refactor unresolved extern crate diagnostic r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "3e01ba8fb758b685abc4ea0fa162aa48aa81efd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e01ba8fb758b685abc4ea0fa162aa48aa81efd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6fa9b016fab4bf38f4e2a798fcabcc13b58e9ab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgxgLTCRBK7hj4Ov3rIwAAGWAIACzaiR9V/3Z6HZAB60KcOIxf\ng0Hza72a029ne0RTqY+lpurPpopkqiRvAQOWF/fktH4BVF8zPdodGFkIbj45eVMX\njC0GB6S8TPWmwYdhcupduEwIYjtcQf7tF5QwNfh0JsbuSXE3FhRwKrH8BsAzdzTp\nUoq22hUVNvl7PGulr8ZKhKiDEbZSWMDdYYWCb+9qyUUEaXjsmuM3uYz8+QaKciFz\nkk8Y22iXr5nZWCypqYyW+gQYjiu2mS5zBfwSAxRp8NpyDkLlCB8BlStndAfJJ4D0\nH7TuOHu47//c4/2dkVmDIINmAF91Jc+G5xFSj1Zbuqvt4sTui0GsZBYWKIFaMeY=\n=28dV\n-----END PGP SIGNATURE-----\n", "payload": "tree 3e01ba8fb758b685abc4ea0fa162aa48aa81efd5\nparent cc6d761a99ab3b7e28ed13ca3839358f3341da4d\nparent 39f190b72ccab9a166529f6ae1c8d5d562b15571\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623589587 +0000\ncommitter GitHub <noreply@github.com> 1623589587 +0000\n\nMerge #9247\n\n9247: internal: refactor unresolved extern crate diagnostic r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6fa9b016fab4bf38f4e2a798fcabcc13b58e9ab", "html_url": "https://github.com/rust-lang/rust/commit/e6fa9b016fab4bf38f4e2a798fcabcc13b58e9ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6fa9b016fab4bf38f4e2a798fcabcc13b58e9ab/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc6d761a99ab3b7e28ed13ca3839358f3341da4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc6d761a99ab3b7e28ed13ca3839358f3341da4d", "html_url": "https://github.com/rust-lang/rust/commit/cc6d761a99ab3b7e28ed13ca3839358f3341da4d"}, {"sha": "39f190b72ccab9a166529f6ae1c8d5d562b15571", "url": "https://api.github.com/repos/rust-lang/rust/commits/39f190b72ccab9a166529f6ae1c8d5d562b15571", "html_url": "https://github.com/rust-lang/rust/commit/39f190b72ccab9a166529f6ae1c8d5d562b15571"}], "stats": {"total": 114, "additions": 60, "deletions": 54}, "files": [{"sha": "ec0a8fe41b36c5f0148427710f77cf96b65d364d", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e6fa9b016fab4bf38f4e2a798fcabcc13b58e9ab/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6fa9b016fab4bf38f4e2a798fcabcc13b58e9ab/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=e6fa9b016fab4bf38f4e2a798fcabcc13b58e9ab", "patch": "@@ -32,36 +32,17 @@ macro_rules! diagnostics {\n     };\n }\n \n-diagnostics![UnresolvedModule, MissingFields];\n+diagnostics![UnresolvedModule, UnresolvedExternCrate, MissingFields];\n \n #[derive(Debug)]\n pub struct UnresolvedModule {\n     pub decl: InFile<AstPtr<ast::Module>>,\n     pub candidate: String,\n }\n \n-// Diagnostic: unresolved-extern-crate\n-//\n-// This diagnostic is triggered if rust-analyzer is unable to discover referred extern crate.\n #[derive(Debug)]\n pub struct UnresolvedExternCrate {\n-    pub file: HirFileId,\n-    pub item: AstPtr<ast::ExternCrate>,\n-}\n-\n-impl Diagnostic for UnresolvedExternCrate {\n-    fn code(&self) -> DiagnosticCode {\n-        DiagnosticCode(\"unresolved-extern-crate\")\n-    }\n-    fn message(&self) -> String {\n-        \"unresolved extern crate\".to_string()\n-    }\n-    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile::new(self.file, self.item.clone().into())\n-    }\n-    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n-        self\n-    }\n+    pub decl: InFile<AstPtr<ast::ExternCrate>>,\n }\n \n #[derive(Debug)]"}, {"sha": "f7883c46971a319ba46c48f4135dc8be2c629571", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e6fa9b016fab4bf38f4e2a798fcabcc13b58e9ab/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6fa9b016fab4bf38f4e2a798fcabcc13b58e9ab/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=e6fa9b016fab4bf38f4e2a798fcabcc13b58e9ab", "patch": "@@ -484,10 +484,12 @@ impl Module {\n                 }\n                 DefDiagnosticKind::UnresolvedExternCrate { ast } => {\n                     let item = ast.to_node(db.upcast());\n-                    sink.push(UnresolvedExternCrate {\n-                        file: ast.file_id,\n-                        item: AstPtr::new(&item),\n-                    });\n+                    acc.push(\n+                        UnresolvedExternCrate {\n+                            decl: InFile::new(ast.file_id, AstPtr::new(&item)),\n+                        }\n+                        .into(),\n+                    );\n                 }\n \n                 DefDiagnosticKind::UnresolvedImport { id, index } => {"}, {"sha": "84d6fdc93044f316f3dfa3fae0244e4466e58521", "filename": "crates/hir_def/src/nameres/tests/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e6fa9b016fab4bf38f4e2a798fcabcc13b58e9ab/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6fa9b016fab4bf38f4e2a798fcabcc13b58e9ab/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs?ref=e6fa9b016fab4bf38f4e2a798fcabcc13b58e9ab", "patch": "@@ -25,35 +25,6 @@ fn unresolved_import() {\n     );\n }\n \n-#[test]\n-fn unresolved_extern_crate() {\n-    check_diagnostics(\n-        r\"\n-        //- /main.rs crate:main deps:core\n-        extern crate core;\n-          extern crate doesnotexist;\n-        //^^^^^^^^^^^^^^^^^^^^^^^^^^ UnresolvedExternCrate\n-        //- /lib.rs crate:core\n-        \",\n-    );\n-}\n-\n-#[test]\n-fn extern_crate_self_as() {\n-    cov_mark::check!(extern_crate_self_as);\n-    check_diagnostics(\n-        r\"\n-        //- /lib.rs\n-          extern crate doesnotexist;\n-        //^^^^^^^^^^^^^^^^^^^^^^^^^^ UnresolvedExternCrate\n-        // Should not error.\n-        extern crate self as foo;\n-        struct Foo;\n-        use foo::Foo as Bar;\n-        \",\n-    );\n-}\n-\n #[test]\n fn dedup_unresolved_import_from_unresolved_crate() {\n     check_diagnostics("}, {"sha": "1fbb7131d2f21220556a0214633e7e54d3a6615d", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e6fa9b016fab4bf38f4e2a798fcabcc13b58e9ab/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6fa9b016fab4bf38f4e2a798fcabcc13b58e9ab/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=e6fa9b016fab4bf38f4e2a798fcabcc13b58e9ab", "patch": "@@ -5,6 +5,7 @@\n //! original files. So we need to map the ranges.\n \n mod unresolved_module;\n+mod unresolved_extern_crate;\n mod missing_fields;\n \n mod fixes;\n@@ -229,8 +230,10 @@ pub(crate) fn diagnostics(\n \n     let ctx = DiagnosticsContext { config, sema, resolve };\n     for diag in diags {\n+        #[rustfmt::skip]\n         let d = match diag {\n             AnyDiagnostic::UnresolvedModule(d) => unresolved_module::unresolved_module(&ctx, &d),\n+            AnyDiagnostic::UnresolvedExternCrate(d) => unresolved_extern_crate::unresolved_extern_crate(&ctx, &d),\n             AnyDiagnostic::MissingFields(d) => missing_fields::missing_fields(&ctx, &d),\n         };\n         if let Some(code) = d.code {"}, {"sha": "2ea79c2eee1c894bf7c051db21267ca2e33daf7b", "filename": "crates/ide/src/diagnostics/unresolved_extern_crate.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e6fa9b016fab4bf38f4e2a798fcabcc13b58e9ab/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_extern_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6fa9b016fab4bf38f4e2a798fcabcc13b58e9ab/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_extern_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_extern_crate.rs?ref=e6fa9b016fab4bf38f4e2a798fcabcc13b58e9ab", "patch": "@@ -0,0 +1,49 @@\n+use crate::diagnostics::{Diagnostic, DiagnosticsContext};\n+\n+// Diagnostic: unresolved-extern-crate\n+//\n+// This diagnostic is triggered if rust-analyzer is unable to discover referred extern crate.\n+pub(super) fn unresolved_extern_crate(\n+    ctx: &DiagnosticsContext<'_>,\n+    d: &hir::UnresolvedExternCrate,\n+) -> Diagnostic {\n+    Diagnostic::new(\n+        \"unresolved-extern-crate\",\n+        \"unresolved extern crate\",\n+        ctx.sema.diagnostics_display_range(d.decl.clone().map(|it| it.into())).range,\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::diagnostics::tests::check_diagnostics;\n+\n+    #[test]\n+    fn unresolved_extern_crate() {\n+        check_diagnostics(\n+            r#\"\n+//- /main.rs crate:main deps:core\n+extern crate core;\n+  extern crate doesnotexist;\n+//^^^^^^^^^^^^^^^^^^^^^^^^^^ unresolved extern crate\n+//- /lib.rs crate:core\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn extern_crate_self_as() {\n+        cov_mark::check!(extern_crate_self_as);\n+        check_diagnostics(\n+            r#\"\n+//- /lib.rs\n+  extern crate doesnotexist;\n+//^^^^^^^^^^^^^^^^^^^^^^^^^^ unresolved extern crate\n+// Should not error.\n+extern crate self as foo;\n+struct Foo;\n+use foo::Foo as Bar;\n+\"#,\n+        );\n+    }\n+}"}]}