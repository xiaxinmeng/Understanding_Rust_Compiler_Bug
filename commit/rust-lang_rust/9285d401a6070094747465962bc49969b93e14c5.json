{"sha": "9285d401a6070094747465962bc49969b93e14c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyODVkNDAxYTYwNzAwOTQ3NDc0NjU5NjJiYzQ5OTY5YjkzZTE0YzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-28T04:21:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-28T04:21:44Z"}, "message": "Auto merge of #65885 - Centril:rollup-y6b2qbf, r=Centril\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #64747 (Stabilize `Option::flatten`)\n - #65664 (`std::panic::Location` is a lang_item, add `core::intrinsics::caller_location` (RFC 2091 3/N))\n - #65792 (rustc, rustc_passes: reduce deps on rustc_expand)\n - #65849 (librustc_lexer: Enhance documentation)\n - #65873 (doc: explain why it is unsafe to construct Vec<u8> from Vec<u16>)\n - #65880 (Gather together usefulness tests)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "6380d967e96679b26297a1c8a2adc7641f65551e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6380d967e96679b26297a1c8a2adc7641f65551e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9285d401a6070094747465962bc49969b93e14c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9285d401a6070094747465962bc49969b93e14c5", "html_url": "https://github.com/rust-lang/rust/commit/9285d401a6070094747465962bc49969b93e14c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9285d401a6070094747465962bc49969b93e14c5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95f437b3cfb2fec966d7eaf69d7c2e36f9c274d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/95f437b3cfb2fec966d7eaf69d7c2e36f9c274d1", "html_url": "https://github.com/rust-lang/rust/commit/95f437b3cfb2fec966d7eaf69d7c2e36f9c274d1"}, {"sha": "606743e8c70821d2aaaf4886d601f1bf96884ce2", "url": "https://api.github.com/repos/rust-lang/rust/commits/606743e8c70821d2aaaf4886d601f1bf96884ce2", "html_url": "https://github.com/rust-lang/rust/commit/606743e8c70821d2aaaf4886d601f1bf96884ce2"}], "stats": {"total": 998, "additions": 698, "deletions": 300}, "files": [{"sha": "4b264ef3f9fafab5380c75e73e47df034c5c7f6f", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -3135,7 +3135,6 @@ dependencies = [\n  \"serialize\",\n  \"smallvec\",\n  \"syntax\",\n- \"syntax_expand\",\n  \"syntax_pos\",\n ]\n \n@@ -3451,7 +3450,6 @@ dependencies = [\n  \"rustc_target\",\n  \"serialize\",\n  \"syntax\",\n- \"syntax_expand\",\n  \"syntax_pos\",\n  \"tempfile\",\n ]\n@@ -3707,7 +3705,6 @@ dependencies = [\n  \"rustc_index\",\n  \"rustc_target\",\n  \"syntax\",\n- \"syntax_expand\",\n  \"syntax_pos\",\n ]\n "}, {"sha": "79e5ba340b78475e89ce58b72b91396d0b302bcf", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -3,7 +3,6 @@\n #![feature(drain_filter)]\n #![feature(exact_size_is_empty)]\n #![feature(new_uninit)]\n-#![feature(option_flattening)]\n #![feature(pattern)]\n #![feature(trusted_len)]\n #![feature(try_reserve)]"}, {"sha": "5e733fa43d7054251ab22e559ac06a62dd926631", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -411,7 +411,11 @@ impl<T> Vec<T> {\n     ///\n     /// Violating these may cause problems like corrupting the allocator's\n     /// internal data structures. For example it is **not** safe\n-    /// to build a `Vec<u8>` from a pointer to a C `char` array and a `size_t`.\n+    /// to build a `Vec<u8>` from a pointer to a C `char` array with length `size_t`.\n+    /// It's also not safe to build one from a `Vec<u16>` and its length, because\n+    /// the allocator cares about the alignment, and these two types have different\n+    /// alignments. The buffer was allocated with alignment 2 (for `u16`), but after\n+    /// turning it into a `Vec<u8>` it'll be deallocated with alignment 1.\n     ///\n     /// The ownership of `ptr` is effectively transferred to the\n     /// `Vec<T>` which may then deallocate, reallocate or change the"}, {"sha": "4e0f18b88fe0a45e256638704c64e7d135ef2d35", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -696,6 +696,10 @@ extern \"rust-intrinsic\" {\n     /// This will statically either panic, or do nothing.\n     pub fn panic_if_uninhabited<T>();\n \n+    /// Gets a reference to a static `Location` indicating where it was called.\n+    #[cfg(not(bootstrap))]\n+    pub fn caller_location() -> &'static crate::panic::Location<'static>;\n+\n     /// Creates a value initialized to zero.\n     ///\n     /// `init` is unsafe because it returns a zeroed-out datum,"}, {"sha": "8ccd31c95d51030dd88acd71ffc0bdf662457965", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -1,8 +1,9 @@\n /// Panics the current thread.\n ///\n /// For details, see `std::macros`.\n+#[cfg(bootstrap)]\n #[macro_export]\n-#[allow_internal_unstable(core_panic)]\n+#[allow_internal_unstable(core_panic, panic_internals)]\n #[stable(feature = \"core\", since = \"1.6.0\")]\n macro_rules! panic {\n     () => (\n@@ -20,6 +21,38 @@ macro_rules! panic {\n     });\n }\n \n+/// Panics the current thread.\n+///\n+/// For details, see `std::macros`.\n+#[cfg(not(bootstrap))]\n+#[macro_export]\n+#[allow_internal_unstable(core_panic, panic_internals)]\n+#[stable(feature = \"core\", since = \"1.6.0\")]\n+macro_rules! panic {\n+    () => (\n+        $crate::panic!(\"explicit panic\")\n+    );\n+    ($msg:expr) => ({\n+        const LOC: &$crate::panic::Location<'_> = &$crate::panic::Location::internal_constructor(\n+            $crate::file!(),\n+            $crate::line!(),\n+            $crate::column!(),\n+        );\n+        $crate::panicking::panic($msg, LOC)\n+    });\n+    ($msg:expr,) => (\n+        $crate::panic!($msg)\n+    );\n+    ($fmt:expr, $($arg:tt)+) => ({\n+        const LOC: &$crate::panic::Location<'_> = &$crate::panic::Location::internal_constructor(\n+            $crate::file!(),\n+            $crate::line!(),\n+            $crate::column!(),\n+        );\n+        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+), LOC)\n+    });\n+}\n+\n /// Asserts that two expressions are equal to each other (using [`PartialEq`]).\n ///\n /// On panic, this macro will print the values of the expressions with their"}, {"sha": "f0ac5e749f6b3825d00e01d71dc61914e11856ff", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -1567,7 +1567,6 @@ impl<T> Option<Option<T>> {\n     /// # Examples\n     /// Basic usage:\n     /// ```\n-    /// #![feature(option_flattening)]\n     /// let x: Option<Option<u32>> = Some(Some(6));\n     /// assert_eq!(Some(6), x.flatten());\n     ///\n@@ -1579,13 +1578,12 @@ impl<T> Option<Option<T>> {\n     /// ```\n     /// Flattening once only removes one level of nesting:\n     /// ```\n-    /// #![feature(option_flattening)]\n     /// let x: Option<Option<Option<u32>>> = Some(Some(Some(6)));\n     /// assert_eq!(Some(Some(6)), x.flatten());\n     /// assert_eq!(Some(6), x.flatten().flatten());\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"option_flattening\", issue = \"60258\")]\n+    #[stable(feature = \"option_flattening\", since = \"1.40.0\")]\n     pub fn flatten(self) -> Option<T> {\n         self.and_then(convert::identity)\n     }"}, {"sha": "51bbf3a8fd221bf4cb2f120a6db4f45a9550433b", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -35,7 +35,7 @@ use crate::fmt;\n pub struct PanicInfo<'a> {\n     payload: &'a (dyn Any + Send),\n     message: Option<&'a fmt::Arguments<'a>>,\n-    location: Location<'a>,\n+    location: &'a Location<'a>,\n }\n \n impl<'a> PanicInfo<'a> {\n@@ -45,11 +45,16 @@ impl<'a> PanicInfo<'a> {\n                 issue = \"0\")]\n     #[doc(hidden)]\n     #[inline]\n-    pub fn internal_constructor(message: Option<&'a fmt::Arguments<'a>>,\n-                                location: Location<'a>)\n-                                -> Self {\n+    pub fn internal_constructor(\n+        message: Option<&'a fmt::Arguments<'a>>,\n+        location: &'a Location<'a>,\n+    ) -> Self {\n         struct NoPayload;\n-        PanicInfo { payload: &NoPayload, location, message }\n+        PanicInfo {\n+            location,\n+            message,\n+            payload: &NoPayload,\n+        }\n     }\n \n     #[doc(hidden)]\n@@ -162,6 +167,7 @@ impl fmt::Display for PanicInfo<'_> {\n ///\n /// panic!(\"Normal panic\");\n /// ```\n+#[cfg_attr(not(bootstrap), lang = \"panic_location\")]\n #[derive(Debug)]\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n pub struct Location<'a> {\n@@ -176,7 +182,7 @@ impl<'a> Location<'a> {\n                           and related macros\",\n                 issue = \"0\")]\n     #[doc(hidden)]\n-    pub fn internal_constructor(file: &'a str, line: u32, col: u32) -> Self {\n+    pub const fn internal_constructor(file: &'a str, line: u32, col: u32) -> Self {\n         Location { file, line, col }\n     }\n "}, {"sha": "685b749776b1dcca7567903dde3a2083b1f212b9", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 59, "deletions": 4, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -29,6 +29,7 @@\n use crate::fmt;\n use crate::panic::{Location, PanicInfo};\n \n+#[cfg(bootstrap)]\n #[cold]\n // never inline unless panic_immediate_abort to avoid code\n // bloat at the call sites as much as possible\n@@ -49,6 +50,27 @@ pub fn panic(expr_file_line_col: &(&'static str, &'static str, u32, u32)) -> ! {\n     panic_fmt(fmt::Arguments::new_v1(&[expr], &[]), &(file, line, col))\n }\n \n+#[cfg(not(bootstrap))]\n+#[cold]\n+// never inline unless panic_immediate_abort to avoid code\n+// bloat at the call sites as much as possible\n+#[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n+#[lang = \"panic\"]\n+pub fn panic(expr: &str, location: &Location<'_>) -> ! {\n+    if cfg!(feature = \"panic_immediate_abort\") {\n+        unsafe { super::intrinsics::abort() }\n+    }\n+\n+    // Use Arguments::new_v1 instead of format_args!(\"{}\", expr) to potentially\n+    // reduce size overhead. The format_args! macro uses str's Display trait to\n+    // write expr, which calls Formatter::pad, which must accommodate string\n+    // truncation and padding (even though none is used here). Using\n+    // Arguments::new_v1 may allow the compiler to omit Formatter::pad from the\n+    // output binary, saving up to a few kilobytes.\n+    panic_fmt(fmt::Arguments::new_v1(&[expr], &[]), location)\n+}\n+\n+#[cfg(bootstrap)]\n #[cold]\n #[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n #[lang = \"panic_bounds_check\"]\n@@ -62,6 +84,22 @@ fn panic_bounds_check(file_line_col: &(&'static str, u32, u32),\n                            len, index), file_line_col)\n }\n \n+#[cfg(not(bootstrap))]\n+#[cold]\n+#[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n+#[lang = \"panic_bounds_check\"]\n+fn panic_bounds_check(location: &Location<'_>, index: usize, len: usize) -> ! {\n+    if cfg!(feature = \"panic_immediate_abort\") {\n+        unsafe { super::intrinsics::abort() }\n+    }\n+\n+    panic_fmt(\n+        format_args!(\"index out of bounds: the len is {} but the index is {}\", len, index),\n+        location\n+    )\n+}\n+\n+#[cfg(bootstrap)]\n #[cold]\n #[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n #[cfg_attr(    feature=\"panic_immediate_abort\" ,inline)]\n@@ -77,9 +115,26 @@ pub fn panic_fmt(fmt: fmt::Arguments<'_>, file_line_col: &(&'static str, u32, u3\n     }\n \n     let (file, line, col) = *file_line_col;\n-    let pi = PanicInfo::internal_constructor(\n-        Some(&fmt),\n-        Location::internal_constructor(file, line, col),\n-    );\n+    let location = Location::internal_constructor(file, line, col);\n+    let pi = PanicInfo::internal_constructor(Some(&fmt), &location);\n+    unsafe { panic_impl(&pi) }\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[cold]\n+#[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n+#[cfg_attr(    feature=\"panic_immediate_abort\" ,inline)]\n+pub fn panic_fmt(fmt: fmt::Arguments<'_>, location: &Location<'_>) -> ! {\n+    if cfg!(feature = \"panic_immediate_abort\") {\n+        unsafe { super::intrinsics::abort() }\n+    }\n+\n+    // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call\n+    extern \"Rust\" {\n+        #[lang = \"panic_impl\"]\n+        fn panic_impl(pi: &PanicInfo<'_>) -> !;\n+    }\n+\n+    let pi = PanicInfo::internal_constructor(Some(&fmt), location);\n     unsafe { panic_impl(&pi) }\n }"}, {"sha": "9d26ff6001767dcd1e97c6884271a3f397b7770b", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -29,7 +29,6 @@ rustc_index = { path = \"../librustc_index\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n-syntax_expand = { path = \"../libsyntax_expand\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n backtrace = \"0.3.3\"\n parking_lot = \"0.9\""}, {"sha": "d4d7af92fe359593f9516d83011d45ea74be5ce1", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -6,8 +6,8 @@ use crate::ty;\n use crate::util::nodemap::DefIdMap;\n \n use syntax::ast;\n-use syntax_expand::base::MacroKind;\n use syntax::ast::NodeId;\n+use syntax_pos::hygiene::MacroKind;\n use syntax_pos::Span;\n use rustc_macros::HashStable;\n "}, {"sha": "12ab44515c38d03b6e21102c743714b04b38908c", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -64,7 +64,7 @@ use syntax::ast;\n use syntax::ptr::P as AstP;\n use syntax::ast::*;\n use syntax::errors;\n-use syntax_expand::base::SpecialDerives;\n+use syntax::expand::SpecialDerives;\n use syntax::print::pprust;\n use syntax::parse::token::{self, Nonterminal, Token};\n use syntax::tokenstream::{TokenStream, TokenTree};"}, {"sha": "9da87090c79bb75bdfb17ca2b3449045ca78dfe4", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -18,7 +18,7 @@ use smallvec::SmallVec;\n use syntax::attr;\n use syntax::ast::*;\n use syntax::visit::{self, Visitor};\n-use syntax_expand::base::SpecialDerives;\n+use syntax::expand::SpecialDerives;\n use syntax::source_map::{respan, DesugaringKind, Spanned};\n use syntax::symbol::{kw, sym};\n use syntax_pos::Span;"}, {"sha": "e9970e30bf9e5d716a33eff2839567be8dc61324", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -2,10 +2,10 @@ use crate::hir::map::definitions::*;\n use crate::hir::def_id::DefIndex;\n \n use syntax::ast::*;\n-use syntax_expand::hygiene::ExpnId;\n use syntax::visit;\n use syntax::symbol::{kw, sym};\n use syntax::parse::token::{self, Token};\n+use syntax_pos::hygiene::ExpnId;\n use syntax_pos::Span;\n \n /// Creates `DefId`s for nodes in the AST."}, {"sha": "4e163314f6b07de17d6279962cf7d0928a518020", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -17,8 +17,8 @@ use std::borrow::Borrow;\n use std::fmt::Write;\n use std::hash::Hash;\n use syntax::ast;\n-use syntax_expand::hygiene::ExpnId;\n-use syntax::symbol::{Symbol, sym};\n+use syntax_pos::symbol::{Symbol, sym};\n+use syntax_pos::hygiene::ExpnId;\n use syntax_pos::{Span, DUMMY_SP};\n \n /// The `DefPathTable` maps `DefIndex`es to `DefKey`s and vice versa."}, {"sha": "cd36944253dbbdc492e94f2ab36f4c9b0e52c994", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -20,7 +20,7 @@ use rustc_data_structures::svh::Svh;\n use rustc_index::vec::IndexVec;\n use syntax::ast::{self, Name, NodeId};\n use syntax::source_map::Spanned;\n-use syntax_expand::base::MacroKind;\n+use syntax_pos::hygiene::MacroKind;\n use syntax_pos::{Span, DUMMY_SP};\n \n pub mod blocks;"}, {"sha": "957dab39414f04e4790e6edbd5cde05e424deb3e", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -13,11 +13,10 @@ use std::cell::RefCell;\n \n use syntax::ast;\n use syntax::source_map::SourceMap;\n-use syntax_expand::hygiene::SyntaxContext;\n use syntax::symbol::Symbol;\n use syntax::tokenstream::DelimSpan;\n use syntax_pos::{Span, DUMMY_SP};\n-use syntax_pos::hygiene;\n+use syntax_pos::hygiene::{self, SyntaxContext};\n \n use rustc_data_structures::stable_hasher::{\n     HashStable, StableHasher, ToStableHashKey,"}, {"sha": "51aa79078f2fc3ad89bb97b1d45494c884990b4f", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -60,7 +60,7 @@ impl_stable_hash_for!(enum ::syntax::ast::AsmDialect {\n     Intel\n });\n \n-impl_stable_hash_for!(enum ::syntax_expand::base::MacroKind {\n+impl_stable_hash_for!(enum ::syntax_pos::hygiene::MacroKind {\n     Bang,\n     Attr,\n     Derive,"}, {"sha": "4da146b1e5d57dedd77167ee25ab2fe7fba9eb7b", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -39,8 +39,8 @@ use syntax::ast;\n use syntax::source_map::{MultiSpan, ExpnKind, DesugaringKind};\n use syntax::early_buffered_lints::BufferedEarlyLintId;\n use syntax::edition::Edition;\n-use syntax_expand::base::MacroKind;\n use syntax::symbol::{Symbol, sym};\n+use syntax_pos::hygiene::MacroKind;\n use syntax_pos::Span;\n \n pub use crate::lint::context::{LateContext, EarlyContext, LintContext, LintStore,"}, {"sha": "72fb1fd3561f01b6f92d446ad505fb03902ad087", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -370,6 +370,7 @@ language_item_table! {\n     PanicFnLangItem,             \"panic\",              panic_fn,                Target::Fn;\n     PanicBoundsCheckFnLangItem,  \"panic_bounds_check\", panic_bounds_check_fn,   Target::Fn;\n     PanicInfoLangItem,           \"panic_info\",         panic_info,              Target::Struct;\n+    PanicLocationLangItem,       \"panic_location\",     panic_location,          Target::Struct;\n     PanicImplLangItem,           \"panic_impl\",         panic_impl,              Target::Fn;\n     // Libstd panic entry point. Necessary for const eval to be able to catch it\n     BeginPanicFnLangItem,        \"begin_panic\",        begin_panic_fn,          Target::Fn;"}, {"sha": "f628e1947487665ac5f53a1f7fb711a08c6b0bcc", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -466,6 +466,12 @@ rustc_queries! {\n             no_force\n             desc { \"extract field of const\" }\n         }\n+\n+        query const_caller_location(key: (syntax_pos::Symbol, u32, u32)) -> &'tcx ty::Const<'tcx> {\n+            eval_always\n+            no_force\n+            desc { \"get a &core::panic::Location referring to a span\" }\n+        }\n     }\n \n     TypeChecking {"}, {"sha": "8bf4765111d36cae823d9477b95e50afa7a6fc6b", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -24,7 +24,7 @@ use errors::emitter::HumanReadableErrorType;\n use errors::annotate_snippet_emitter_writer::{AnnotateSnippetEmitterWriter};\n use syntax::ast::{self, NodeId};\n use syntax::edition::Edition;\n-use syntax_expand::allocator::AllocatorKind;\n+use syntax::expand::allocator::AllocatorKind;\n use syntax::feature_gate::{self, AttributeType};\n use syntax::json::JsonEmitter;\n use syntax::source_map;"}, {"sha": "60028f2488a337dfe4048f76854e77eff7ed8481", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -46,8 +46,8 @@ use std::{mem, ptr};\n use std::ops::Range;\n use syntax::ast::{self, Name, Ident, NodeId};\n use syntax::attr;\n-use syntax_expand::hygiene::ExpnId;\n-use syntax::symbol::{kw, sym, Symbol};\n+use syntax_pos::symbol::{kw, sym, Symbol};\n+use syntax_pos::hygiene::ExpnId;\n use syntax_pos::Span;\n \n use smallvec;"}, {"sha": "a9e0a5d6ab564b4a1f8247e4e96cf0b26ef6f9b0", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -208,3 +208,13 @@ impl<'tcx, T> Key for Canonical<'tcx, T> {\n         DUMMY_SP\n     }\n }\n+\n+impl Key for (Symbol, u32, u32) {\n+    fn query_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+\n+    fn default_span(&self, _tcx: TyCtxt<'_>) -> Span {\n+        DUMMY_SP\n+    }\n+}"}, {"sha": "11b6e0befa1b10fb28c35c3f1297a1d419ded267", "filename": "src/librustc_codegen_llvm/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fallocator.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -3,7 +3,7 @@ use std::ffi::CString;\n use crate::attributes;\n use libc::c_uint;\n use rustc::ty::TyCtxt;\n-use syntax_expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n+use syntax::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n \n use crate::ModuleLlvm;\n use crate::llvm::{self, False, True};"}, {"sha": "312c41b88b0924601c3620b121e5ebf648ed7a65", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -23,7 +23,6 @@ use std::ffi::CStr;\n use std::ops::{Deref, Range};\n use std::ptr;\n use std::iter::TrustedLen;\n-use syntax::symbol::Symbol;\n \n // All Builders must have an llfn associated with them\n #[must_use]\n@@ -1067,36 +1066,6 @@ impl StaticBuilderMethods for Builder<'a, 'll, 'tcx> {\n         // Forward to the `get_static` method of `CodegenCx`\n         self.cx().get_static(def_id)\n     }\n-\n-    fn static_panic_msg(\n-        &mut self,\n-        msg: Option<Symbol>,\n-        filename: Symbol,\n-        line: Self::Value,\n-        col: Self::Value,\n-        kind: &str,\n-    ) -> Self::Value {\n-        let align = self.tcx.data_layout.aggregate_align.abi\n-            .max(self.tcx.data_layout.i32_align.abi)\n-            .max(self.tcx.data_layout.pointer_align.abi);\n-\n-        let filename = self.const_str_slice(filename);\n-\n-        let with_msg_components;\n-        let without_msg_components;\n-\n-        let components = if let Some(msg) = msg {\n-            let msg = self.const_str_slice(msg);\n-            with_msg_components = [msg, filename, line, col];\n-            &with_msg_components as &[_]\n-        } else {\n-            without_msg_components = [filename, line, col];\n-            &without_msg_components as &[_]\n-        };\n-\n-        let struct_ = self.const_struct(&components, false);\n-        self.static_addr_of(struct_, align, Some(kind))\n-    }\n }\n \n impl Builder<'a, 'll, 'tcx> {"}, {"sha": "f38f9dfecd38705e63e7b0c418da2ee828b0f8e5", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -3,7 +3,6 @@\n //! Code that is useful in various codegen modules.\n \n use crate::llvm::{self, True, False, Bool, BasicBlock, OperandBundleDef, ConstantInt};\n-use crate::abi;\n use crate::consts;\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n@@ -96,16 +95,6 @@ impl BackendTypes for CodegenCx<'ll, 'tcx> {\n }\n \n impl CodegenCx<'ll, 'tcx> {\n-    pub fn const_fat_ptr(\n-        &self,\n-        ptr: &'ll Value,\n-        meta: &'ll Value\n-    ) -> &'ll Value {\n-        assert_eq!(abi::FAT_PTR_ADDR, 0);\n-        assert_eq!(abi::FAT_PTR_EXTRA, 1);\n-        self.const_struct(&[ptr, meta], false)\n-    }\n-\n     pub fn const_array(&self, ty: &'ll Type, elts: &[&'ll Value]) -> &'ll Value {\n         unsafe {\n             return llvm::LLVMConstArray(ty, elts.as_ptr(), elts.len() as c_uint);\n@@ -150,13 +139,6 @@ impl CodegenCx<'ll, 'tcx> {\n         }\n     }\n \n-    pub fn const_str_slice(&self, s: Symbol) -> &'ll Value {\n-        let len = s.as_str().len();\n-        let cs = consts::ptrcast(self.const_cstr(s, false),\n-            self.type_ptr_to(self.layout_of(self.tcx.mk_str()).llvm_type(self)));\n-        self.const_fat_ptr(cs, self.const_usize(len as u64))\n-    }\n-\n     pub fn const_get_elt(&self, v: &'ll Value, idx: u64) -> &'ll Value {\n         unsafe {\n             assert_eq!(idx as c_uint as u64, idx);\n@@ -237,6 +219,13 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         unsafe { llvm::LLVMConstReal(t, val) }\n     }\n \n+    fn const_str(&self, s: Symbol) -> (&'ll Value, &'ll Value) {\n+        let len = s.as_str().len();\n+        let cs = consts::ptrcast(self.const_cstr(s, false),\n+            self.type_ptr_to(self.layout_of(self.tcx.mk_str()).llvm_type(self)));\n+        (cs, self.const_usize(len as u64))\n+    }\n+\n     fn const_struct(\n         &self,\n         elts: &[&'ll Value],"}, {"sha": "2ad6c28cd0838d2c24b58b9e5b5b19f5ebda4228", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -39,7 +39,6 @@ extern crate rustc_driver as _;\n \n #[macro_use] extern crate log;\n extern crate syntax;\n-extern crate syntax_expand;\n extern crate syntax_pos;\n extern crate rustc_errors as errors;\n \n@@ -49,7 +48,7 @@ use rustc_codegen_ssa::back::lto::{SerializedModule, LtoModuleCodegen, ThinModul\n use rustc_codegen_ssa::CompiledModule;\n use errors::{FatalError, Handler};\n use rustc::dep_graph::WorkProduct;\n-use syntax_expand::allocator::AllocatorKind;\n+use syntax::expand::allocator::AllocatorKind;\n pub use llvm_util::target_features;\n use std::any::Any;\n use std::sync::Arc;"}, {"sha": "c7d09a423d5e3b7c2ec9aef13a13a4480c66c811", "filename": "src/librustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2FCargo.toml?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -21,7 +21,6 @@ tempfile = \"3.1\"\n \n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n-syntax_expand = { path = \"../libsyntax_expand\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc = { path = \"../librustc\" }\n rustc_apfloat = { path = \"../librustc_apfloat\" }"}, {"sha": "9443f225723788faaac36c3849ea27ab752d8027", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -14,7 +14,7 @@ use rustc::ty::query::Providers;\n use rustc::ty::subst::SubstsRef;\n use rustc::util::nodemap::{FxHashMap, DefIdMap};\n use rustc_index::vec::IndexVec;\n-use syntax_expand::allocator::ALLOCATOR_METHODS;\n+use syntax::expand::allocator::ALLOCATOR_METHODS;\n \n pub type ExportedSymbols = FxHashMap<\n     CrateNum,"}, {"sha": "b302b9ae7f0e4a4b9997cf10dcb6234c25e4e5b2", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -27,7 +27,7 @@ use rustc_errors::{Handler, Level, FatalError, DiagnosticId, SourceMapperDyn};\n use rustc_errors::emitter::{Emitter};\n use rustc_target::spec::MergeFunctions;\n use syntax::attr;\n-use syntax_expand::hygiene::ExpnId;\n+use syntax_pos::hygiene::ExpnId;\n use syntax_pos::symbol::{Symbol, sym};\n use jobserver::{Client, Acquired};\n "}, {"sha": "79855311f370a9470dbb6ef7fcbd71bbb5c5dde6", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 38, "deletions": 43, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -15,8 +15,7 @@ use crate::traits::*;\n \n use std::borrow::Cow;\n \n-use syntax::symbol::Symbol;\n-use syntax_pos::Pos;\n+use syntax::{source_map::Span, symbol::Symbol};\n \n use super::{FunctionCx, LocalRef};\n use super::place::PlaceRef;\n@@ -421,38 +420,19 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         self.set_debug_loc(&mut bx, terminator.source_info);\n \n         // Get the location information.\n-        let loc = bx.sess().source_map().lookup_char_pos(span.lo());\n-        let filename = Symbol::intern(&loc.file.name.to_string());\n-        let line = bx.const_u32(loc.line as u32);\n-        let col = bx.const_u32(loc.col.to_usize() as u32 + 1);\n+        let location = self.get_caller_location(&mut bx, span).immediate();\n \n         // Put together the arguments to the panic entry point.\n         let (lang_item, args) = match msg {\n             PanicInfo::BoundsCheck { ref len, ref index } => {\n                 let len = self.codegen_operand(&mut bx, len).immediate();\n                 let index = self.codegen_operand(&mut bx, index).immediate();\n-\n-                let file_line_col = bx.static_panic_msg(\n-                    None,\n-                    filename,\n-                    line,\n-                    col,\n-                    \"panic_bounds_check_loc\",\n-                );\n-                (lang_items::PanicBoundsCheckFnLangItem,\n-                    vec![file_line_col, index, len])\n+                (lang_items::PanicBoundsCheckFnLangItem, vec![location, index, len])\n             }\n             _ => {\n                 let msg_str = Symbol::intern(msg.description());\n-                let msg_file_line_col = bx.static_panic_msg(\n-                    Some(msg_str),\n-                    filename,\n-                    line,\n-                    col,\n-                    \"panic_loc\",\n-                );\n-                (lang_items::PanicFnLangItem,\n-                    vec![msg_file_line_col])\n+                let msg = bx.const_str(msg_str);\n+                (lang_items::PanicFnLangItem, vec![msg.0, msg.1, location])\n             }\n         };\n \n@@ -553,23 +533,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             let ty = instance.unwrap().substs.type_at(0);\n             let layout = bx.layout_of(ty);\n             if layout.abi.is_uninhabited() {\n-                let loc = bx.sess().source_map().lookup_char_pos(span.lo());\n-                let filename = Symbol::intern(&loc.file.name.to_string());\n-                let line = bx.const_u32(loc.line as u32);\n-                let col = bx.const_u32(loc.col.to_usize() as u32 + 1);\n-\n-                let str = format!(\n-                    \"Attempted to instantiate uninhabited type {}\",\n-                    ty\n-                );\n-                let msg_str = Symbol::intern(&str);\n-                let msg_file_line_col = bx.static_panic_msg(\n-                    Some(msg_str),\n-                    filename,\n-                    line,\n-                    col,\n-                    \"panic_loc\",\n-                );\n+                let msg_str = format!(\"Attempted to instantiate uninhabited type {}\", ty);\n+                let msg = bx.const_str(Symbol::intern(&msg_str));\n+                let location = self.get_caller_location(&mut bx, span).immediate();\n \n                 // Obtain the panic entry point.\n                 let def_id =\n@@ -587,7 +553,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     &mut bx,\n                     fn_ty,\n                     llfn,\n-                    &[msg_file_line_col],\n+                    &[msg.0, msg.1, location],\n                     destination.as_ref().map(|(_, bb)| (ReturnDest::Nothing, *bb)),\n                     cleanup,\n                 );\n@@ -613,6 +579,21 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             ReturnDest::Nothing\n         };\n \n+        if intrinsic == Some(\"caller_location\") {\n+            if let Some((_, target)) = destination.as_ref() {\n+                let location = self.get_caller_location(&mut bx, span);\n+\n+                if let ReturnDest::IndirectOperand(tmp, _) = ret_dest {\n+                    location.val.store(&mut bx, tmp);\n+                }\n+                self.store_return(&mut bx, ret_dest, &fn_ty.ret, location.immediate());\n+\n+                helper.maybe_sideeffect(self.mir, &mut bx, &[*target]);\n+                helper.funclet_br(self, &mut bx, *target);\n+            }\n+            return;\n+        }\n+\n         if intrinsic.is_some() && intrinsic != Some(\"drop_in_place\") {\n             let dest = match ret_dest {\n                 _ if fn_ty.ret.is_indirect() => llargs[0],\n@@ -1009,6 +990,20 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         }\n     }\n \n+    fn get_caller_location(\n+        &mut self,\n+        bx: &mut Bx,\n+        span: Span,\n+    ) -> OperandRef<'tcx, Bx::Value> {\n+        let caller = bx.tcx().sess.source_map().lookup_char_pos(span.lo());\n+        let const_loc = bx.tcx().const_caller_location((\n+            Symbol::intern(&caller.file.name.to_string()),\n+            caller.line as u32,\n+            caller.col_display as u32 + 1,\n+        ));\n+        OperandRef::from_const(bx, const_loc)\n+    }\n+\n     fn get_personality_slot(\n         &mut self,\n         bx: &mut Bx"}, {"sha": "8ab8243afdab7c43f88038d0abffd89fd53fc773", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -9,7 +9,7 @@ use rustc::ty::TyCtxt;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use std::sync::Arc;\n use std::sync::mpsc;\n-use syntax_expand::allocator::AllocatorKind;\n+use syntax::expand::allocator::AllocatorKind;\n use syntax_pos::symbol::Symbol;\n \n pub trait BackendTypes {"}, {"sha": "8c462e77d5e0533973e08ea82a002128670cfb2d", "filename": "src/librustc_codegen_ssa/traits/consts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -3,6 +3,7 @@ use crate::mir::place::PlaceRef;\n use rustc::mir::interpret::Allocation;\n use rustc::mir::interpret::Scalar;\n use rustc::ty::layout;\n+use syntax_pos::Symbol;\n \n pub trait ConstMethods<'tcx>: BackendTypes {\n     // Constant constructors\n@@ -19,6 +20,7 @@ pub trait ConstMethods<'tcx>: BackendTypes {\n     fn const_u8(&self, i: u8) -> Self::Value;\n     fn const_real(&self, t: Self::Type, val: f64) -> Self::Value;\n \n+    fn const_str(&self, s: Symbol) -> (Self::Value, Self::Value);\n     fn const_struct(&self, elts: &[Self::Value], packed: bool) -> Self::Value;\n \n     fn const_to_opt_uint(&self, v: Self::Value) -> Option<u64>;"}, {"sha": "5c108f9fa6cc532c39da506f30e6a2c3cdda835c", "filename": "src/librustc_codegen_ssa/traits/statics.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -1,5 +1,4 @@\n use super::BackendTypes;\n-use syntax_pos::symbol::Symbol;\n use rustc::hir::def_id::DefId;\n use rustc::ty::layout::Align;\n \n@@ -10,12 +9,4 @@ pub trait StaticMethods: BackendTypes {\n \n pub trait StaticBuilderMethods: BackendTypes {\n     fn get_static(&mut self, def_id: DefId) -> Self::Value;\n-    fn static_panic_msg(\n-        &mut self,\n-        msg: Option<Symbol>,\n-        filename: Symbol,\n-        line: Self::Value,\n-        col: Self::Value,\n-        kind: &str,\n-    ) -> Self::Value;\n }"}, {"sha": "b8593bd91990e0efac2c283fe73946c6e34cd030", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -502,7 +502,7 @@ pub fn lower_to_hir(\n \n     // Discard hygiene data, which isn't required after lowering to HIR.\n     if !sess.opts.debugging_opts.keep_hygiene_data {\n-        syntax_expand::hygiene::clear_syntax_context_map();\n+        syntax_pos::hygiene::clear_syntax_context_map();\n     }\n \n     Ok(hir_forest)"}, {"sha": "73d305c6d4fe2c292e3d46863b28d69f92ccb81d", "filename": "src/librustc_lexer/src/cursor.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_lexer%2Fsrc%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_lexer%2Fsrc%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Fcursor.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -1,5 +1,9 @@\n use std::str::Chars;\n \n+/// Peekable iterator over a char sequence.\n+///\n+/// Next characters can be peeked via `nth_char` method,\n+/// and position can be shifted forward via `bump` method.\n pub(crate) struct Cursor<'a> {\n     initial_len: usize,\n     chars: Chars<'a>,\n@@ -18,7 +22,9 @@ impl<'a> Cursor<'a> {\n             prev: EOF_CHAR,\n         }\n     }\n+\n     /// For debug assertions only\n+    /// Returns the last eaten symbol (or '\\0' in release builds).\n     pub(crate) fn prev(&self) -> char {\n         #[cfg(debug_assertions)]\n         {\n@@ -30,19 +36,30 @@ impl<'a> Cursor<'a> {\n             '\\0'\n         }\n     }\n+\n+    /// Returns nth character relative to the current cursor position.\n+    /// If requested position doesn't exist, `EOF_CHAR` is returned.\n+    /// However, getting `EOF_CHAR` doesn't always mean actual end of file,\n+    /// it should be checked with `is_eof` method.\n     pub(crate) fn nth_char(&self, n: usize) -> char {\n         self.chars().nth(n).unwrap_or(EOF_CHAR)\n     }\n+\n+    /// Checks if there is nothing more to consume.\n     pub(crate) fn is_eof(&self) -> bool {\n         self.chars.as_str().is_empty()\n     }\n+\n+    /// Returns amount of already consumed symbols.\n     pub(crate) fn len_consumed(&self) -> usize {\n         self.initial_len - self.chars.as_str().len()\n     }\n-    /// Returns an iterator over the remaining characters.\n+\n+    /// Returns a `Chars` iterator over the remaining characters.\n     fn chars(&self) -> Chars<'a> {\n         self.chars.clone()\n     }\n+\n     /// Moves to the next character.\n     pub(crate) fn bump(&mut self) -> Option<char> {\n         let c = self.chars.next()?;"}, {"sha": "d55ef46d7506e6b3eddf5dea3bf56baa2150a67e", "filename": "src/librustc_lexer/src/lib.rs", "status": "modified", "additions": 145, "deletions": 11, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Flib.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -1,3 +1,16 @@\n+//! Low-level Rust lexer.\n+//!\n+//! Tokens produced by this lexer are not yet ready for parsing the Rust syntax,\n+//! for that see `libsyntax::parse::lexer`, which converts this basic token stream\n+//! into wide tokens used by actual parser.\n+//!\n+//! The purpose of this crate is to convert raw sources into a labeled sequence\n+//! of well-known token types, so building an actual Rust token stream will\n+//! be easier.\n+//!\n+//! Main entity of this crate is [`TokenKind`] enum which represents common\n+//! lexeme types.\n+\n // We want to be able to build this crate with a stable compiler, so no\n // `#![feature]` attributes should be added.\n \n@@ -6,78 +19,144 @@ pub mod unescape;\n \n use crate::cursor::{Cursor, EOF_CHAR};\n \n+/// Parsed token.\n+/// It doesn't contain information about data that has been parsed,\n+/// only the type of the token and its size.\n pub struct Token {\n     pub kind: TokenKind,\n     pub len: usize,\n }\n \n+impl Token {\n+    fn new(kind: TokenKind, len: usize) -> Token {\n+        Token { kind, len }\n+    }\n+}\n+\n+/// Enum represening common lexeme types.\n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]\n pub enum TokenKind {\n+    // Multi-char tokens:\n+\n+    /// \"// comment\"\n     LineComment,\n+    /// \"/* block comment */\"\n+    /// Block comments can be recursive, so the sequence like \"/* /* */\"\n+    /// will not be considered terminated and will result in a parsing error.\n     BlockComment { terminated: bool },\n+    /// Any whitespace characters sequence.\n     Whitespace,\n+    /// \"ident\" or \"continue\"\n+    /// At this step keywords are also considered identifiers.\n     Ident,\n+    /// \"r#ident\"\n     RawIdent,\n+    /// \"12_u8\", \"1.0e-40\", \"b\"123\"\". See `LiteralKind` for more details.\n     Literal { kind: LiteralKind, suffix_start: usize },\n+    /// \"'a\"\n     Lifetime { starts_with_number: bool },\n+\n+    // One-char tokens:\n+\n+    /// \";\"\n     Semi,\n+    /// \",\"\n     Comma,\n+    /// \".\"\n     Dot,\n+    /// \"(\"\n     OpenParen,\n+    /// \")\"\n     CloseParen,\n+    /// \"{\"\n     OpenBrace,\n+    /// \"}\"\n     CloseBrace,\n+    /// \"[\"\n     OpenBracket,\n+    /// \"]\"\n     CloseBracket,\n+    /// \"@\"\n     At,\n+    /// \"#\"\n     Pound,\n+    /// \"~\"\n     Tilde,\n+    /// \"?\"\n     Question,\n+    /// \":\"\n     Colon,\n+    /// \"$\"\n     Dollar,\n+    /// \"=\"\n     Eq,\n+    /// \"!\"\n     Not,\n+    /// \"<\"\n     Lt,\n+    /// \">\"\n     Gt,\n+    /// \"-\"\n     Minus,\n+    /// \"&\"\n     And,\n+    /// \"|\"\n     Or,\n+    /// \"+\"\n     Plus,\n+    /// \"*\"\n     Star,\n+    /// \"/\"\n     Slash,\n+    /// \"^\"\n     Caret,\n+    /// \"%\"\n     Percent,\n+\n+    /// Unknown token, not expected by the lexer, e.g. \"\u2116\"\n     Unknown,\n }\n use self::TokenKind::*;\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]\n pub enum LiteralKind {\n+    /// \"12_u8\", \"0o100\", \"0b120i99\"\n     Int { base: Base, empty_int: bool },\n+    /// \"12.34f32\", \"0b100.100\"\n     Float { base: Base, empty_exponent: bool },\n+    /// \"'a'\", \"'\\\\'\", \"'''\", \"';\"\n     Char { terminated: bool },\n+    /// \"b'a'\", \"b'\\\\'\", \"b'''\", \"b';\"\n     Byte { terminated: bool },\n+    /// \"\"abc\"\", \"\"abc\"\n     Str { terminated: bool },\n+    /// \"b\"abc\"\", \"b\"abc\"\n     ByteStr { terminated: bool },\n+    /// \"r\"abc\"\", \"r#\"abc\"#\", \"r####\"ab\"###\"c\"####\", \"r#\"a\"\n     RawStr { n_hashes: usize, started: bool, terminated: bool },\n+    /// \"br\"abc\"\", \"br#\"abc\"#\", \"br####\"ab\"###\"c\"####\", \"br#\"a\"\n     RawByteStr { n_hashes: usize, started: bool, terminated: bool },\n }\n use self::LiteralKind::*;\n \n+/// Base of numeric literal encoding according to its prefix.\n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]\n pub enum Base {\n+    /// Literal starts with \"0b\".\n     Binary,\n+    /// Literal starts with \"0o\".\n     Octal,\n+    /// Literal starts with \"0x\".\n     Hexadecimal,\n+    /// Literal doesn't contain a prefix.\n     Decimal,\n }\n \n-impl Token {\n-    fn new(kind: TokenKind, len: usize) -> Token {\n-        Token { kind, len }\n-    }\n-}\n-\n+/// `rustc` allows files to have a shebang, e.g. \"#!/usr/bin/rustrun\",\n+/// but shebang isn't a part of rust syntax, so this function\n+/// skips the line if it starts with a shebang (\"#!\").\n+/// Line won't be skipped if it represents a valid Rust syntax\n+/// (e.g. \"#![deny(missing_docs)]\").\n pub fn strip_shebang(input: &str) -> Option<usize> {\n     debug_assert!(!input.is_empty());\n     if !input.starts_with(\"#!\") || input.starts_with(\"#![\") {\n@@ -86,11 +165,13 @@ pub fn strip_shebang(input: &str) -> Option<usize> {\n     Some(input.find('\\n').unwrap_or(input.len()))\n }\n \n+/// Parses the first token from the provided input string.\n pub fn first_token(input: &str) -> Token {\n     debug_assert!(!input.is_empty());\n     Cursor::new(input).advance_token()\n }\n \n+/// Creates an iterator that produces tokens from the input string.\n pub fn tokenize(mut input: &str) -> impl Iterator<Item = Token> + '_ {\n     std::iter::from_fn(move || {\n         if input.is_empty() {\n@@ -102,10 +183,9 @@ pub fn tokenize(mut input: &str) -> impl Iterator<Item = Token> + '_ {\n     })\n }\n \n-// See [UAX #31](http://unicode.org/reports/tr31) for definitions of these\n-// classes.\n-\n /// True if `c` is considered a whitespace according to Rust language definition.\n+/// See [Rust language reference](https://doc.rust-lang.org/reference/whitespace.html)\n+/// for definitions of these classes.\n pub fn is_whitespace(c: char) -> bool {\n     // This is Pattern_White_Space.\n     //\n@@ -137,6 +217,8 @@ pub fn is_whitespace(c: char) -> bool {\n }\n \n /// True if `c` is valid as a first character of an identifier.\n+/// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for\n+/// a formal definition of valid identifier name.\n pub fn is_id_start(c: char) -> bool {\n     // This is XID_Start OR '_' (which formally is not a XID_Start).\n     // We also add fast-path for ascii idents\n@@ -147,6 +229,8 @@ pub fn is_id_start(c: char) -> bool {\n }\n \n /// True if `c` is valid as a non-first character of an identifier.\n+/// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for\n+/// a formal definition of valid identifier name.\n pub fn is_id_continue(c: char) -> bool {\n     // This is exactly XID_Continue.\n     // We also add fast-path for ascii idents\n@@ -159,15 +243,21 @@ pub fn is_id_continue(c: char) -> bool {\n \n \n impl Cursor<'_> {\n+    /// Parses a token from the input string.\n     fn advance_token(&mut self) -> Token {\n         let first_char = self.bump().unwrap();\n         let token_kind = match first_char {\n+            // Slash, comment or block comment.\n             '/' => match self.nth_char(0) {\n                 '/' => self.line_comment(),\n                 '*' => self.block_comment(),\n                 _ => Slash,\n             },\n+\n+            // Whitespace sequence.\n             c if is_whitespace(c) => self.whitespace(),\n+\n+            // Raw string literal or identifier.\n             'r' => match (self.nth_char(0), self.nth_char(1)) {\n                 ('#', c1) if is_id_start(c1) => self.raw_ident(),\n                 ('#', _) | ('\"', _) => {\n@@ -181,6 +271,8 @@ impl Cursor<'_> {\n                 }\n                 _ => self.ident(),\n             },\n+\n+            // Byte literal, byte string literal, raw byte string literal or identifier.\n             'b' => match (self.nth_char(0), self.nth_char(1)) {\n                 ('\\'', _) => {\n                     self.bump();\n@@ -214,13 +306,20 @@ impl Cursor<'_> {\n                 }\n                 _ => self.ident(),\n             },\n+\n+            // Identifier (this should be checked after other variant that can\n+            // start as identifier).\n             c if is_id_start(c) => self.ident(),\n+\n+            // Numeric literal.\n             c @ '0'..='9' => {\n                 let literal_kind = self.number(c);\n                 let suffix_start = self.len_consumed();\n                 self.eat_literal_suffix();\n                 TokenKind::Literal { kind: literal_kind, suffix_start }\n             }\n+\n+            // One-symbol tokens.\n             ';' => Semi,\n             ',' => Comma,\n             '.' => Dot,\n@@ -247,7 +346,11 @@ impl Cursor<'_> {\n             '*' => Star,\n             '^' => Caret,\n             '%' => Percent,\n+\n+            // Lifetime or character literal.\n             '\\'' => self.lifetime_or_char(),\n+\n+            // String literal.\n             '\"' => {\n                 let terminated = self.double_quoted_string();\n                 let suffix_start = self.len_consumed();\n@@ -291,6 +394,9 @@ impl Cursor<'_> {\n                     self.bump();\n                     depth -= 1;\n                     if depth == 0 {\n+                        // This block comment is closed, so for a construction like \"/* */ */\"\n+                        // there will be a successfully parsed block comment \"/* */\"\n+                        // and \" */\" will be processed separately.\n                         break;\n                     }\n                 }\n@@ -335,6 +441,7 @@ impl Cursor<'_> {\n         debug_assert!('0' <= self.prev() && self.prev() <= '9');\n         let mut base = Base::Decimal;\n         if first_digit == '0' {\n+            // Attempt to parse encoding base.\n             let has_digits = match self.nth_char(0) {\n                 'b' => {\n                     base = Base::Binary;\n@@ -351,17 +458,21 @@ impl Cursor<'_> {\n                     self.bump();\n                     self.eat_hexadecimal_digits()\n                 }\n+                // Not a base prefix.\n                 '0'..='9' | '_' | '.' | 'e' | 'E' => {\n                     self.eat_decimal_digits();\n                     true\n                 }\n-                // just a 0\n+                // Just a 0.\n                 _ => return Int { base, empty_int: false },\n             };\n+            // Base prefix was provided, but there were no digits\n+            // after it, e.g. \"0x\".\n             if !has_digits {\n                 return Int { base, empty_int: true };\n             }\n         } else {\n+            // No base prefix, parse number in the usual way.\n             self.eat_decimal_digits();\n         };\n \n@@ -400,6 +511,9 @@ impl Cursor<'_> {\n     fn lifetime_or_char(&mut self) -> TokenKind {\n         debug_assert!(self.prev() == '\\'');\n         let mut starts_with_number = false;\n+\n+        // Check if the first symbol after '\\'' is a valid identifier\n+        // character or a number (not a digit followed by '\\'').\n         if (is_id_start(self.nth_char(0))\n             || self.nth_char(0).is_digit(10) && {\n                 starts_with_number = true;\n@@ -408,6 +522,8 @@ impl Cursor<'_> {\n             && self.nth_char(1) != '\\''\n         {\n             self.bump();\n+\n+            // Skip the identifier.\n             while is_id_continue(self.nth_char(0)) {\n                 self.bump();\n             }\n@@ -420,6 +536,8 @@ impl Cursor<'_> {\n                 Lifetime { starts_with_number }\n             };\n         }\n+\n+        // This is not a lifetime (checked above), parse a char literal.\n         let terminated = self.single_quoted_string();\n         let suffix_start = self.len_consumed();\n         if terminated {\n@@ -431,24 +549,32 @@ impl Cursor<'_> {\n \n     fn single_quoted_string(&mut self) -> bool {\n         debug_assert!(self.prev() == '\\'');\n-        // parse `'''` as a single char literal\n+        // Parse `'''` as a single char literal.\n         if self.nth_char(0) == '\\'' && self.nth_char(1) == '\\'' {\n             self.bump();\n         }\n+        // Parse until either quotes are terminated or error is detected.\n         let mut first = true;\n         loop {\n             match self.nth_char(0) {\n+                // Probably beginning of the comment, which we don't want to include\n+                // to the error report.\n                 '/' if !first => break,\n+                // Newline without following '\\'' means unclosed quote, stop parsing.\n                 '\\n' if self.nth_char(1) != '\\'' => break,\n+                // End of file, stop parsing.\n                 EOF_CHAR if self.is_eof() => break,\n+                // Quotes are terminated, finish parsing.\n                 '\\'' => {\n                     self.bump();\n                     return true;\n                 }\n+                // Escaped slash is considered one character, so bump twice.\n                 '\\\\' => {\n                     self.bump();\n                     self.bump();\n                 }\n+                // Skip the character.\n                 _ => {\n                     self.bump();\n                 }\n@@ -458,6 +584,8 @@ impl Cursor<'_> {\n         false\n     }\n \n+    /// Eats double-quoted string and returns true\n+    /// if string is terminated.\n     fn double_quoted_string(&mut self) -> bool {\n         debug_assert!(self.prev() == '\"');\n         loop {\n@@ -476,8 +604,11 @@ impl Cursor<'_> {\n         }\n     }\n \n+    /// Eats the double-quoted string and returns a tuple of\n+    /// (amount of the '#' symbols, raw string started, raw string terminated)\n     fn raw_double_quoted_string(&mut self) -> (usize, bool, bool) {\n         debug_assert!(self.prev() == 'r');\n+        // Count opening '#' symbols.\n         let n_hashes = {\n             let mut acc: usize = 0;\n             loop {\n@@ -489,6 +620,8 @@ impl Cursor<'_> {\n             }\n         };\n \n+        // Skip the string itself and check that amount of closing '#'\n+        // symbols is equal to the amount of opening ones.\n         loop {\n             match self.bump() {\n                 Some('\"') => {\n@@ -549,6 +682,7 @@ impl Cursor<'_> {\n         if self.eat_decimal_digits() { Ok(()) } else { Err(()) }\n     }\n \n+    // Eats the suffix if it's an identifier.\n     fn eat_literal_suffix(&mut self) {\n         if !is_id_start(self.nth_char(0)) {\n             return;"}, {"sha": "dee7bc2260bf0556a735b34229e880f9240042a9", "filename": "src/librustc_lexer/src/unescape.rs", "status": "modified", "additions": 62, "deletions": 12, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_lexer%2Fsrc%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_lexer%2Fsrc%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Funescape.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -7,32 +7,54 @@ use std::ops::Range;\n #[cfg(test)]\n mod tests;\n \n+/// Errors that can occur during string unescaping.\n #[derive(Debug, PartialEq, Eq)]\n pub enum EscapeError {\n+    /// Expected 1 char, but 0 were found.\n     ZeroChars,\n+    /// Expected 1 char, but more than 1 were found.\n     MoreThanOneChar,\n \n+    /// Escaped '\\' character without continuation.\n     LoneSlash,\n+    /// Invalid escape characted (e.g. '\\z').\n     InvalidEscape,\n+    /// Raw '\\r' encountered.\n     BareCarriageReturn,\n+    /// Raw '\\r' encountered in raw string.\n     BareCarriageReturnInRawString,\n+    /// Unescaped character that was expected to be escaped (e.g. raw '\\t').\n     EscapeOnlyChar,\n \n+    /// Numeric character escape is too short (e.g. '\\x1').\n     TooShortHexEscape,\n+    /// Invalid character in numeric escape (e.g. '\\xz')\n     InvalidCharInHexEscape,\n+    /// Character code in numeric escape is non-ascii (e.g. '\\xFF').\n     OutOfRangeHexEscape,\n \n+    /// '\\u' not followed by '{'.\n     NoBraceInUnicodeEscape,\n+    /// Non-hexadecimal value in '\\u{..}'.\n     InvalidCharInUnicodeEscape,\n+    /// '\\u{}'\n     EmptyUnicodeEscape,\n+    /// No closing brace in '\\u{..}', e.g. '\\u{12'.\n     UnclosedUnicodeEscape,\n+    /// '\\u{_12}'\n     LeadingUnderscoreUnicodeEscape,\n+    /// More than 6 charactes in '\\u{..}', e.g. '\\u{10FFFF_FF}'\n     OverlongUnicodeEscape,\n+    /// Invalid in-bound unicode character code, e.g. '\\u{DFFF}'.\n     LoneSurrogateUnicodeEscape,\n+    /// Out of bounds unicode character code, e.g. '\\u{FFFFFF}'.\n     OutOfRangeUnicodeEscape,\n \n+    /// Unicode escape code in byte literal.\n     UnicodeEscapeInByte,\n+    /// Non-ascii character in byte literal.\n     NonAsciiCharInByte,\n+    /// Non-ascii character in byte string literal.\n     NonAsciiCharInByteString,\n }\n \n@@ -44,15 +66,8 @@ pub fn unescape_char(literal_text: &str) -> Result<char, (usize, EscapeError)> {\n         .map_err(|err| (literal_text.len() - chars.as_str().len(), err))\n }\n \n-/// Takes a contents of a string literal (without quotes) and produces a\n-/// sequence of escaped characters or errors.\n-pub fn unescape_str<F>(literal_text: &str, callback: &mut F)\n-where\n-    F: FnMut(Range<usize>, Result<char, EscapeError>),\n-{\n-    unescape_str_or_byte_str(literal_text, Mode::Str, callback)\n-}\n-\n+/// Takes a contents of a byte literal (without quotes), and returns an\n+/// unescaped byte or an error.\n pub fn unescape_byte(literal_text: &str) -> Result<u8, (usize, EscapeError)> {\n     let mut chars = literal_text.chars();\n     unescape_char_or_byte(&mut chars, Mode::Byte)\n@@ -62,6 +77,17 @@ pub fn unescape_byte(literal_text: &str) -> Result<u8, (usize, EscapeError)> {\n \n /// Takes a contents of a string literal (without quotes) and produces a\n /// sequence of escaped characters or errors.\n+/// Values are returned through invoking of the provided callback.\n+pub fn unescape_str<F>(literal_text: &str, callback: &mut F)\n+where\n+    F: FnMut(Range<usize>, Result<char, EscapeError>),\n+{\n+    unescape_str_or_byte_str(literal_text, Mode::Str, callback)\n+}\n+\n+/// Takes a contents of a byte string literal (without quotes) and produces a\n+/// sequence of bytes or errors.\n+/// Values are returned through invoking of the provided callback.\n pub fn unescape_byte_str<F>(literal_text: &str, callback: &mut F)\n where\n     F: FnMut(Range<usize>, Result<u8, EscapeError>),\n@@ -71,8 +97,9 @@ where\n     })\n }\n \n-/// Takes a contents of a string literal (without quotes) and produces a\n+/// Takes a contents of a raw string literal (without quotes) and produces a\n /// sequence of characters or errors.\n+/// Values are returned through invoking of the provided callback.\n /// NOTE: Raw strings do not perform any explicit character escaping, here we\n /// only translate CRLF to LF and produce errors on bare CR.\n pub fn unescape_raw_str<F>(literal_text: &str, callback: &mut F)\n@@ -82,8 +109,9 @@ where\n     unescape_raw_str_or_byte_str(literal_text, Mode::Str, callback)\n }\n \n-/// Takes a contents of a string literal (without quotes) and produces a\n-/// sequence of characters or errors.\n+/// Takes a contents of a raw byte string literal (without quotes) and produces a\n+/// sequence of bytes or errors.\n+/// Values are returned through invoking of the provided callback.\n /// NOTE: Raw strings do not perform any explicit character escaping, here we\n /// only translate CRLF to LF and produce errors on bare CR.\n pub fn unescape_raw_byte_str<F>(literal_text: &str, callback: &mut F)\n@@ -95,6 +123,7 @@ where\n     })\n }\n \n+/// What kind of literal do we parse.\n #[derive(Debug, Clone, Copy)]\n pub enum Mode {\n     Char,\n@@ -126,20 +155,25 @@ impl Mode {\n \n fn scan_escape(first_char: char, chars: &mut Chars<'_>, mode: Mode) -> Result<char, EscapeError> {\n     if first_char != '\\\\' {\n+        // Previous character was not a slash, and we don't expect it to be\n+        // an escape-only character.\n         return match first_char {\n             '\\t' | '\\n' => Err(EscapeError::EscapeOnlyChar),\n             '\\r' => Err(EscapeError::BareCarriageReturn),\n             '\\'' if mode.in_single_quotes() => Err(EscapeError::EscapeOnlyChar),\n             '\"' if mode.in_double_quotes() => Err(EscapeError::EscapeOnlyChar),\n             _ => {\n                 if mode.is_bytes() && !first_char.is_ascii() {\n+                    // Byte literal can't be a non-ascii character.\n                     return Err(EscapeError::NonAsciiCharInByte);\n                 }\n                 Ok(first_char)\n             }\n         };\n     }\n \n+    // Previous character is '\\\\', try to unescape it.\n+\n     let second_char = chars.next().ok_or(EscapeError::LoneSlash)?;\n \n     let res = match second_char {\n@@ -152,6 +186,8 @@ fn scan_escape(first_char: char, chars: &mut Chars<'_>, mode: Mode) -> Result<ch\n         '0' => '\\0',\n \n         'x' => {\n+            // Parse hexadecimal character code.\n+\n             let hi = chars.next().ok_or(EscapeError::TooShortHexEscape)?;\n             let hi = hi.to_digit(16).ok_or(EscapeError::InvalidCharInHexEscape)?;\n \n@@ -160,6 +196,7 @@ fn scan_escape(first_char: char, chars: &mut Chars<'_>, mode: Mode) -> Result<ch\n \n             let value = hi * 16 + lo;\n \n+            // For a byte literal verify that it is within ASCII range.\n             if !mode.is_bytes() && !is_ascii(value) {\n                 return Err(EscapeError::OutOfRangeHexEscape);\n             }\n@@ -169,17 +206,22 @@ fn scan_escape(first_char: char, chars: &mut Chars<'_>, mode: Mode) -> Result<ch\n         }\n \n         'u' => {\n+            // We've parsed '\\u', now we have to parse '{..}'.\n+\n             if chars.next() != Some('{') {\n                 return Err(EscapeError::NoBraceInUnicodeEscape);\n             }\n \n+            // First characrer must be a hexadecimal digit.\n             let mut n_digits = 1;\n             let mut value: u32 = match chars.next().ok_or(EscapeError::UnclosedUnicodeEscape)? {\n                 '_' => return Err(EscapeError::LeadingUnderscoreUnicodeEscape),\n                 '}' => return Err(EscapeError::EmptyUnicodeEscape),\n                 c => c.to_digit(16).ok_or(EscapeError::InvalidCharInUnicodeEscape)?,\n             };\n \n+            // First character is valid, now parse the rest of the number\n+            // and closing brace.\n             loop {\n                 match chars.next() {\n                     None => return Err(EscapeError::UnclosedUnicodeEscape),\n@@ -188,6 +230,9 @@ fn scan_escape(first_char: char, chars: &mut Chars<'_>, mode: Mode) -> Result<ch\n                         if n_digits > 6 {\n                             return Err(EscapeError::OverlongUnicodeEscape);\n                         }\n+\n+                        // Incorrect syntax has higher priority for error reporting\n+                        // than unallowed value for a literal.\n                         if mode.is_bytes() {\n                             return Err(EscapeError::UnicodeEscapeInByte);\n                         }\n@@ -204,6 +249,7 @@ fn scan_escape(first_char: char, chars: &mut Chars<'_>, mode: Mode) -> Result<ch\n                         let digit = c.to_digit(16).ok_or(EscapeError::InvalidCharInUnicodeEscape)?;\n                         n_digits += 1;\n                         if n_digits > 6 {\n+                            // Stop updating value since we're sure that it's is incorrect already.\n                             continue;\n                         }\n                         let digit = digit as u32;\n@@ -243,6 +289,10 @@ where\n                 let second_char = chars.clone().next();\n                 match second_char {\n                     Some('\\n') => {\n+                        // Rust language specification requires us to skip whitespaces\n+                        // if unescaped '\\' character is followed by '\\n'.\n+                        // For details see [Rust language reference]\n+                        // (https://doc.rust-lang.org/reference/tokens.html#string-literals).\n                         skip_ascii_whitespace(&mut chars);\n                         continue;\n                     }"}, {"sha": "234a5395047c6a321d2166a020ee45d759922e7d", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -25,7 +25,7 @@ use std::{cmp, fs};\n \n use syntax::ast;\n use syntax::attr;\n-use syntax_expand::allocator::{global_allocator_spans, AllocatorKind};\n+use syntax::expand::allocator::{global_allocator_spans, AllocatorKind};\n use syntax::symbol::{Symbol, sym};\n use syntax::span_fatal;\n use syntax_pos::{Span, DUMMY_SP};"}, {"sha": "0e6ecbbf0176a8c0a69900df4e12e21ca89eafac", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -33,12 +33,12 @@ use rustc_serialize::{Decodable, Decoder, Encodable, SpecializedDecoder, opaque}\n use syntax::attr;\n use syntax::ast::{self, Ident};\n use syntax::source_map::{self, respan, Spanned};\n-use syntax::symbol::{Symbol, sym};\n-use syntax_expand::base::{MacroKind, SyntaxExtensionKind, SyntaxExtension};\n-use syntax_pos::{self, Span, BytePos, Pos, DUMMY_SP};\n+use syntax_expand::base::{SyntaxExtensionKind, SyntaxExtension};\n+use syntax_expand::proc_macro::{AttrProcMacro, ProcMacroDerive, BangProcMacro};\n+use syntax_pos::{self, Span, BytePos, Pos, DUMMY_SP, hygiene::MacroKind};\n+use syntax_pos::symbol::{Symbol, sym};\n use log::debug;\n use proc_macro::bridge::client::ProcMacro;\n-use syntax_expand::proc_macro::{AttrProcMacro, ProcMacroDerive, BangProcMacro};\n \n crate struct DecodeContext<'a, 'tcx> {\n     opaque: opaque::Decoder<'a>,"}, {"sha": "f6498f4eaa8919011a212465d0c3c971fb58acc2", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -32,7 +32,7 @@ use std::path::Path;\n use std::u32;\n use syntax::ast;\n use syntax::attr;\n-use syntax_expand::proc_macro::is_proc_macro_attr;\n+use syntax::expand::is_proc_macro_attr;\n use syntax::source_map::Spanned;\n use syntax::symbol::{kw, sym, Ident, Symbol};\n use syntax_pos::{self, FileName, SourceFile, Span};"}, {"sha": "89bdf7391c3e8bd6b6af49064593f71cb1ed3243", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -9,6 +9,7 @@ use std::convert::TryInto;\n \n use rustc::hir::def::DefKind;\n use rustc::hir::def_id::DefId;\n+use rustc::middle::lang_items::PanicLocationLangItem;\n use rustc::mir::interpret::{ConstEvalErr, ErrorHandled, ScalarMaybeUndef};\n use rustc::mir;\n use rustc::ty::{self, Ty, TyCtxt, subst::Subst};\n@@ -17,7 +18,7 @@ use rustc::traits::Reveal;\n use rustc_data_structures::fx::FxHashMap;\n use crate::interpret::eval_nullary_intrinsic;\n \n-use syntax::source_map::{Span, DUMMY_SP};\n+use syntax::{source_map::{Span, DUMMY_SP}, symbol::Symbol};\n \n use crate::interpret::{self,\n     PlaceTy, MPlaceTy, OpTy, ImmTy, Immediate, Scalar, Pointer,\n@@ -158,11 +159,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n     ecx.run()?;\n \n     // Intern the result\n-    intern_const_alloc_recursive(\n-        ecx,\n-        cid.instance.def_id(),\n-        ret,\n-    )?;\n+    intern_const_alloc_recursive(ecx, tcx.static_mutability(cid.instance.def_id()), ret)?;\n \n     debug!(\"eval_body_using_ecx done: {:?}\", *ret);\n     Ok(ret)\n@@ -374,11 +371,12 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n \n     fn call_intrinsic(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx>],\n         dest: PlaceTy<'tcx>,\n     ) -> InterpResult<'tcx> {\n-        if ecx.emulate_intrinsic(instance, args, dest)? {\n+        if ecx.emulate_intrinsic(span, instance, args, dest)? {\n             return Ok(());\n         }\n         // An intrinsic that we do not support\n@@ -505,6 +503,28 @@ pub fn const_field<'tcx>(\n     op_to_const(&ecx, field)\n }\n \n+pub fn const_caller_location<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    (file, line, col): (Symbol, u32, u32),\n+) -> &'tcx ty::Const<'tcx> {\n+    trace!(\"const_caller_location: {}:{}:{}\", file, line, col);\n+    let mut ecx = mk_eval_cx(tcx, DUMMY_SP, ty::ParamEnv::reveal_all());\n+\n+    let loc_ty = tcx.mk_imm_ref(\n+        tcx.lifetimes.re_static,\n+        tcx.type_of(tcx.require_lang_item(PanicLocationLangItem, None))\n+            .subst(tcx, tcx.mk_substs([tcx.lifetimes.re_static.into()].iter())),\n+    );\n+    let loc_place = ecx.alloc_caller_location(file, line, col).unwrap();\n+    intern_const_alloc_recursive(&mut ecx, None, loc_place).unwrap();\n+    let loc_const = ty::Const {\n+        ty: loc_ty,\n+        val: ConstValue::Scalar(loc_place.ptr.into()),\n+    };\n+\n+    tcx.mk_const(loc_const)\n+}\n+\n // this function uses `unwrap` copiously, because an already validated constant must have valid\n // fields and can thus never fail outside of compiler bugs\n pub fn const_variant_index<'tcx>("}, {"sha": "0009524ef6f935ef80a96f5a7874d7b6a8af8d59", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -1,3 +1,6 @@\n+/// Note: most tests relevant to this file can be found (at the time of writing)\n+/// in src/tests/ui/pattern/usefulness.\n+///\n /// This file includes the logic for exhaustiveness and usefulness checking for\n /// pattern-matching. Specifically, given a list of patterns for a type, we can\n /// tell whether:"}, {"sha": "924529d7f55794a7fdd6500b0fd727b6c4e2692d", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -6,7 +6,6 @@\n use rustc::ty::{Ty, self};\n use rustc::mir::interpret::{InterpResult, ErrorHandled};\n use rustc::hir;\n-use rustc::hir::def_id::DefId;\n use super::validity::RefTracking;\n use rustc_data_structures::fx::FxHashSet;\n \n@@ -270,12 +269,12 @@ for\n \n pub fn intern_const_alloc_recursive(\n     ecx: &mut CompileTimeEvalContext<'mir, 'tcx>,\n-    def_id: DefId,\n+    // The `mutability` of the place, ignoring the type.\n+    place_mut: Option<hir::Mutability>,\n     ret: MPlaceTy<'tcx>,\n ) -> InterpResult<'tcx> {\n     let tcx = ecx.tcx;\n-    // this `mutability` is the mutability of the place, ignoring the type\n-    let (base_mutability, base_intern_mode) = match tcx.static_mutability(def_id) {\n+    let (base_mutability, base_intern_mode) = match place_mut {\n         Some(hir::Mutability::MutImmutable) => (Mutability::Immutable, InternMode::Static),\n         // `static mut` doesn't care about interior mutability, it's mutable anyway\n         Some(hir::Mutability::MutMutable) => (Mutability::Mutable, InternMode::Static),"}, {"sha": "519f4f0322228e9474d7c45f674eaec7e09c7496", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -3,6 +3,7 @@\n //! and miri.\n \n use syntax::symbol::Symbol;\n+use syntax_pos::Span;\n use rustc::ty;\n use rustc::ty::layout::{LayoutOf, Primitive, Size};\n use rustc::ty::subst::SubstsRef;\n@@ -15,6 +16,7 @@ use super::{\n     Machine, PlaceTy, OpTy, InterpCx,\n };\n \n+mod caller_location;\n mod type_name;\n \n fn numeric_intrinsic<'tcx, Tag>(\n@@ -86,6 +88,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Returns `true` if emulation happened.\n     pub fn emulate_intrinsic(\n         &mut self,\n+        span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, M::PointerTag>],\n         dest: PlaceTy<'tcx, M::PointerTag>,\n@@ -94,6 +97,16 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         let intrinsic_name = &self.tcx.item_name(instance.def_id()).as_str()[..];\n         match intrinsic_name {\n+            \"caller_location\" => {\n+                let caller = self.tcx.sess.source_map().lookup_char_pos(span.lo());\n+                let location = self.alloc_caller_location(\n+                    Symbol::intern(&caller.file.name.to_string()),\n+                    caller.line as u32,\n+                    caller.col_display as u32 + 1,\n+                )?;\n+                self.write_scalar(location.ptr, dest)?;\n+            }\n+\n             \"min_align_of\" |\n             \"pref_align_of\" |\n             \"needs_drop\" |\n@@ -301,18 +314,19 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, bool> {\n         let def_id = instance.def_id();\n         if Some(def_id) == self.tcx.lang_items().panic_fn() {\n-            assert!(args.len() == 1);\n-            // &(&'static str, &'static str, u32, u32)\n-            let place = self.deref_operand(args[0])?;\n-            let (msg, file, line, col) = (\n-                self.mplace_field(place, 0)?,\n-                self.mplace_field(place, 1)?,\n-                self.mplace_field(place, 2)?,\n-                self.mplace_field(place, 3)?,\n-            );\n+            // &'static str, &core::panic::Location { &'static str, u32, u32 }\n+            assert!(args.len() == 2);\n \n-            let msg_place = self.deref_operand(msg.into())?;\n+            let msg_place = self.deref_operand(args[0])?;\n             let msg = Symbol::intern(self.read_str(msg_place)?);\n+\n+            let location = self.deref_operand(args[1])?;\n+            let (file, line, col) = (\n+                self.mplace_field(location, 0)?,\n+                self.mplace_field(location, 1)?,\n+                self.mplace_field(location, 2)?,\n+            );\n+\n             let file_place = self.deref_operand(file.into())?;\n             let file = Symbol::intern(self.read_str(file_place)?);\n             let line = self.read_scalar(line.into())?.to_u32()?;"}, {"sha": "249d2f9ff536a510ef6c0a9867172ee9eb0953ac", "filename": "src/librustc_mir/interpret/intrinsics/caller_location.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -0,0 +1,49 @@\n+use rustc::middle::lang_items::PanicLocationLangItem;\n+use rustc::mir::interpret::{Pointer, PointerArithmetic, Scalar};\n+use rustc::ty::subst::Subst;\n+use rustc_target::abi::{LayoutOf, Size};\n+use syntax_pos::Symbol;\n+\n+use crate::interpret::{MemoryKind, MPlaceTy, intrinsics::{InterpCx, InterpResult, Machine}};\n+\n+impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n+    pub fn alloc_caller_location(\n+        &mut self,\n+        filename: Symbol,\n+        line: u32,\n+        col: u32,\n+    ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n+        let line = Scalar::from_u32(line);\n+        let col = Scalar::from_u32(col);\n+\n+        let ptr_size = self.pointer_size();\n+        let u32_size = Size::from_bits(32);\n+\n+        let loc_ty = self.tcx.type_of(self.tcx.require_lang_item(PanicLocationLangItem, None))\n+            .subst(*self.tcx, self.tcx.mk_substs([self.tcx.lifetimes.re_static.into()].iter()));\n+        let loc_layout = self.layout_of(loc_ty)?;\n+\n+        let file_alloc = self.tcx.allocate_bytes(filename.as_str().as_bytes());\n+        let file_ptr = Pointer::new(file_alloc, Size::ZERO);\n+        let file = Scalar::Ptr(self.tag_static_base_pointer(file_ptr));\n+        let file_len = Scalar::from_uint(filename.as_str().len() as u128, ptr_size);\n+\n+        let location = self.allocate(loc_layout, MemoryKind::Stack);\n+\n+        let file_out = self.mplace_field(location, 0)?;\n+        let file_ptr_out = self.force_ptr(self.mplace_field(file_out, 0)?.ptr)?;\n+        let file_len_out = self.force_ptr(self.mplace_field(file_out, 1)?.ptr)?;\n+        let line_out = self.force_ptr(self.mplace_field(location, 1)?.ptr)?;\n+        let col_out = self.force_ptr(self.mplace_field(location, 2)?.ptr)?;\n+\n+        let layout = &self.tcx.data_layout;\n+        let alloc = self.memory.get_mut(file_ptr_out.alloc_id)?;\n+\n+        alloc.write_scalar(layout, file_ptr_out, file.into(), ptr_size)?;\n+        alloc.write_scalar(layout, file_len_out, file_len.into(), ptr_size)?;\n+        alloc.write_scalar(layout, line_out, line.into(), u32_size)?;\n+        alloc.write_scalar(layout, col_out, col.into(), u32_size)?;\n+\n+        Ok(location)\n+    }\n+}"}, {"sha": "870e50a3cbb9a19a03c7ebff982d5c2490c8680c", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -8,6 +8,7 @@ use std::hash::Hash;\n use rustc::hir::def_id::DefId;\n use rustc::mir;\n use rustc::ty::{self, Ty, TyCtxt};\n+use syntax_pos::Span;\n \n use super::{\n     Allocation, AllocId, InterpResult, Scalar, AllocationExtra,\n@@ -152,6 +153,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// If this returns successfully, the engine will take care of jumping to the next block.\n     fn call_intrinsic(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Self::PointerTag>],\n         dest: PlaceTy<'tcx, Self::PointerTag>,"}, {"sha": "d90f2058aa74fe15311e9932df201c0d1fc8cb53", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -255,7 +255,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     Some(dest) => dest,\n                     None => throw_ub!(Unreachable)\n                 };\n-                M::call_intrinsic(self, instance, args, dest)?;\n+                M::call_intrinsic(self, span, instance, args, dest)?;\n                 // No stack frame gets pushed, the main loop will just act as if the\n                 // call completed.\n                 self.goto_block(ret)?;"}, {"sha": "4d604cb025c8e66592e32825254d12fb080fed5f", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -58,6 +58,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     providers.const_eval = const_eval::const_eval_provider;\n     providers.const_eval_raw = const_eval::const_eval_raw_provider;\n     providers.check_match = hair::pattern::check_match;\n+    providers.const_caller_location = const_eval::const_caller_location;\n     providers.const_field = |tcx, param_env_and_value| {\n         let (param_env, (value, field)) = param_env_and_value.into_parts();\n         const_eval::const_field(tcx, param_env, None, field, value)"}, {"sha": "e7095101f465dd3f68ada30031505a8543cacd67", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -158,6 +158,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n \n     fn call_intrinsic(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        _span: Span,\n         _instance: ty::Instance<'tcx>,\n         _args: &[OpTy<'tcx>],\n         _dest: PlaceTy<'tcx>,"}, {"sha": "9d29a230314437f8e6b887d91c901551ebffdd78", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -13,7 +13,6 @@ log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n syntax = { path = \"../libsyntax\" }\n-syntax_expand = { path = \"../libsyntax_expand\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_target = { path = \"../librustc_target\" }"}, {"sha": "994e9405fb6431c033d6bfb39c06ea84fc7f8f7f", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -14,7 +14,7 @@ use rustc::session::Session;\n use rustc_data_structures::fx::FxHashMap;\n use syntax::ast::*;\n use syntax::attr;\n-use syntax_expand::proc_macro::is_proc_macro_attr;\n+use syntax::expand::is_proc_macro_attr;\n use syntax::feature_gate::is_builtin_attr;\n use syntax::source_map::Spanned;\n use syntax::symbol::{kw, sym};"}, {"sha": "d0725c7b8028d1c79c2ab193c59113feb37cc372", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -32,17 +32,16 @@ use syntax::attr;\n \n use syntax::ast::{self, Block, ForeignItem, ForeignItemKind, Item, ItemKind, NodeId};\n use syntax::ast::{MetaItemKind, StmtKind, TraitItem, TraitItemKind};\n-use syntax_expand::base::{MacroKind, SyntaxExtension};\n-use syntax_expand::expand::AstFragment;\n-use syntax_expand::hygiene::ExpnId;\n use syntax::feature_gate::is_builtin_attr;\n use syntax::parse::token::{self, Token};\n use syntax::print::pprust;\n use syntax::{span_err, struct_span_err};\n use syntax::source_map::{respan, Spanned};\n use syntax::symbol::{kw, sym};\n use syntax::visit::{self, Visitor};\n-\n+use syntax_expand::base::SyntaxExtension;\n+use syntax_expand::expand::AstFragment;\n+use syntax_pos::hygiene::{MacroKind, ExpnId};\n use syntax_pos::{Span, DUMMY_SP};\n \n use log::debug;"}, {"sha": "c0dfb7381acc255f3767a21778a9fec1bea398cb", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -10,12 +10,12 @@ use rustc::session::Session;\n use rustc::ty::{self, DefIdTree};\n use rustc::util::nodemap::FxHashSet;\n use syntax::ast::{self, Ident, Path};\n-use syntax_expand::base::MacroKind;\n use syntax::feature_gate::BUILTIN_ATTRIBUTES;\n use syntax::source_map::SourceMap;\n use syntax::struct_span_err;\n use syntax::symbol::{Symbol, kw};\n use syntax::util::lev_distance::find_best_match_for_name;\n+use syntax_pos::hygiene::MacroKind;\n use syntax_pos::{BytePos, Span, MultiSpan};\n \n use crate::resolve_imports::{ImportDirective, ImportDirectiveSubclass, ImportResolver};"}, {"sha": "3e896e373fb01cbd8c91e3e14e31b8531818b887", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -13,9 +13,9 @@ use rustc::hir::PrimTy;\n use rustc::session::config::nightly_options;\n use rustc::util::nodemap::FxHashSet;\n use syntax::ast::{self, Expr, ExprKind, Ident, NodeId, Path, Ty, TyKind};\n-use syntax_expand::base::MacroKind;\n use syntax::symbol::kw;\n use syntax::util::lev_distance::find_best_match_for_name;\n+use syntax_pos::hygiene::MacroKind;\n use syntax_pos::Span;\n \n type Res = def::Res<ast::NodeId>;"}, {"sha": "cea205a8236650691d3ec4f208527dd5e5b05258", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -35,17 +35,18 @@ use rustc::span_bug;\n use rustc_metadata::creader::CrateLoader;\n use rustc_metadata::cstore::CStore;\n \n-use syntax_expand::hygiene::{ExpnId, Transparency, SyntaxContext};\n-use syntax_expand::base::{SyntaxExtension, MacroKind, SpecialDerives};\n use syntax::{struct_span_err, unwrap_or};\n-use syntax::attr;\n+use syntax::expand::SpecialDerives;\n use syntax::ast::{self, Name, NodeId, Ident, FloatTy, IntTy, UintTy};\n-use syntax::ast::{ItemKind, Path, CRATE_NODE_ID, Crate};\n+use syntax::ast::{CRATE_NODE_ID, Crate};\n+use syntax::ast::{ItemKind, Path};\n+use syntax::attr;\n use syntax::print::pprust;\n use syntax::symbol::{kw, sym};\n use syntax::source_map::Spanned;\n use syntax::visit::{self, Visitor};\n-\n+use syntax_expand::base::SyntaxExtension;\n+use syntax_pos::hygiene::{MacroKind, ExpnId, Transparency, SyntaxContext};\n use syntax_pos::{Span, DUMMY_SP};\n use errors::{Applicability, DiagnosticBuilder};\n "}, {"sha": "8b1b6db3ddc230342d43c38ef1a70ef6a64f4c98", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -14,20 +14,21 @@ use rustc::{ty, lint, span_bug};\n use syntax::ast::{self, NodeId, Ident};\n use syntax::attr::StabilityLevel;\n use syntax::edition::Edition;\n-use syntax_expand::base::{self, InvocationRes, Indeterminate, SpecialDerives};\n-use syntax_expand::base::{MacroKind, SyntaxExtension};\n-use syntax_expand::expand::{AstFragment, AstFragmentKind, Invocation, InvocationKind};\n-use syntax_expand::hygiene::{self, ExpnId, ExpnData, ExpnKind};\n-use syntax_expand::compile_declarative_macro;\n+use syntax::expand::SpecialDerives;\n use syntax::feature_gate::{emit_feature_err, is_builtin_attr_name};\n use syntax::feature_gate::GateIssue;\n use syntax::print::pprust;\n use syntax::symbol::{Symbol, kw, sym};\n+use syntax_expand::base::{self, InvocationRes, Indeterminate};\n+use syntax_expand::base::SyntaxExtension;\n+use syntax_expand::expand::{AstFragment, AstFragmentKind, Invocation, InvocationKind};\n+use syntax_expand::compile_declarative_macro;\n+use syntax_pos::hygiene::{self, ExpnId, ExpnData, ExpnKind};\n use syntax_pos::{Span, DUMMY_SP};\n \n use std::{mem, ptr};\n use rustc_data_structures::sync::Lrc;\n-use syntax_pos::hygiene::AstPass;\n+use syntax_pos::hygiene::{MacroKind, AstPass};\n \n type Res = def::Res<NodeId>;\n "}, {"sha": "c95009858e4c0f91353cf3681043a841dbf26206", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -28,10 +28,10 @@ use rustc::util::nodemap::FxHashSet;\n use rustc::{bug, span_bug};\n \n use syntax::ast::{Ident, Name, NodeId, CRATE_NODE_ID};\n-use syntax_expand::hygiene::ExpnId;\n use syntax::symbol::kw;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::{struct_span_err, unwrap_or};\n+use syntax_pos::hygiene::ExpnId;\n use syntax_pos::{MultiSpan, Span};\n \n use log::*;"}, {"sha": "76cc7062d3b8792145f1eb08e434b12d72ff10e0", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -1,6 +1,7 @@\n //! Type-checking for the rust-intrinsic and platform-intrinsic\n //! intrinsics that the compiler exposes.\n \n+use rustc::middle::lang_items::PanicLocationLangItem;\n use rustc::traits::{ObligationCause, ObligationCauseCode};\n use rustc::ty::{self, TyCtxt, Ty};\n use rustc::ty::subst::Subst;\n@@ -65,7 +66,7 @@ fn equate_intrinsic_type<'tcx>(\n /// Returns `true` if the given intrinsic is unsafe to call or not.\n pub fn intrinsic_operation_unsafety(intrinsic: &str) -> hir::Unsafety {\n     match intrinsic {\n-        \"size_of\" | \"min_align_of\" | \"needs_drop\" |\n+        \"size_of\" | \"min_align_of\" | \"needs_drop\" | \"caller_location\" |\n         \"add_with_overflow\" | \"sub_with_overflow\" | \"mul_with_overflow\" |\n         \"wrapping_add\" | \"wrapping_sub\" | \"wrapping_mul\" |\n         \"saturating_add\" | \"saturating_sub\" |\n@@ -143,6 +144,15 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n                  ], tcx.types.usize)\n             }\n             \"rustc_peek\" => (1, vec![param(0)], param(0)),\n+            \"caller_location\" => (\n+                0,\n+                vec![],\n+                tcx.mk_imm_ref(\n+                    tcx.lifetimes.re_static,\n+                    tcx.type_of(tcx.require_lang_item(PanicLocationLangItem, None))\n+                        .subst(tcx, tcx.mk_substs([tcx.lifetimes.re_static.into()].iter())),\n+                ),\n+            ),\n             \"panic_if_uninhabited\" => (1, Vec::new(), tcx.mk_unit()),\n             \"init\" => (1, Vec::new(), param(0)),\n             \"uninit\" => (1, Vec::new(), param(0)),"}, {"sha": "b3b3750320a95c75df46cf91ed4b4278d174d512", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -3,8 +3,8 @@\n use std::iter::once;\n \n use syntax::ast;\n-use syntax_expand::base::MacroKind;\n use syntax::symbol::sym;\n+use syntax_pos::hygiene::MacroKind;\n use syntax_pos::Span;\n \n use rustc::hir;"}, {"sha": "bdc0206223036d2a8b7a823dc391a33eeb28afec", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -28,10 +28,10 @@ use rustc::ty::layout::VariantIdx;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use syntax::ast::{self, Attribute, AttrStyle, AttrItem, Ident};\n use syntax::attr;\n-use syntax_expand::base::MacroKind;\n use syntax::parse::lexer::comments;\n use syntax::source_map::DUMMY_SP;\n-use syntax::symbol::{Symbol, kw, sym};\n+use syntax_pos::symbol::{Symbol, kw, sym};\n+use syntax_pos::hygiene::MacroKind;\n use syntax_pos::{self, Pos, FileName};\n \n use std::collections::hash_map::Entry;"}, {"sha": "002ca6fe983ba0c89c74df32356b505debdf82b2", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -4,7 +4,7 @@ pub use self::StructType::*;\n \n use syntax::ast;\n use syntax::ast::Name;\n-use syntax_expand::base::MacroKind;\n+use syntax_pos::hygiene::MacroKind;\n use syntax_pos::{self, Span};\n \n use rustc::hir;"}, {"sha": "f5e45924893eabbcc82c7ed1884b6d89ea827cc6", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -1,7 +1,7 @@\n //! Item types.\n \n use std::fmt;\n-use syntax_expand::base::MacroKind;\n+use syntax_pos::hygiene::MacroKind;\n use crate::clean;\n \n /// Item type. Corresponds to `clean::ItemEnum` variants."}, {"sha": "c4ee84d33f39b3ebf322ae28a86cdc0387769428", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -49,7 +49,7 @@ use syntax::feature_gate::UnstableFeatures;\n use syntax::print::pprust;\n use syntax::source_map::FileName;\n use syntax::symbol::{Symbol, sym};\n-use syntax_expand::base::MacroKind;\n+use syntax_pos::hygiene::MacroKind;\n use rustc::hir::def_id::DefId;\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability;"}, {"sha": "5a83569f02a5c344df6348ea7d7e271de69b3333", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -8,9 +8,9 @@ use rustc::middle::privacy::AccessLevel;\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n use rustc::ty::TyCtxt;\n use syntax::ast;\n-use syntax_expand::base::MacroKind;\n use syntax::source_map::Spanned;\n use syntax::symbol::sym;\n+use syntax_pos::hygiene::MacroKind;\n use syntax_pos::{self, Span};\n \n use std::mem;"}, {"sha": "f76969146fdd2318688e549ad6ba19093f1658ae", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -323,10 +323,8 @@ pub fn begin_panic_fmt(msg: &fmt::Arguments<'_>,\n     }\n \n     let (file, line, col) = *file_line_col;\n-    let info = PanicInfo::internal_constructor(\n-        Some(msg),\n-        Location::internal_constructor(file, line, col),\n-    );\n+    let location = Location::internal_constructor(file, line, col);\n+    let info = PanicInfo::internal_constructor(Some(msg), &location);\n     continue_panic_fmt(&info)\n }\n \n@@ -453,10 +451,8 @@ fn rust_panic_with_hook(payload: &mut dyn BoxMeUp,\n     }\n \n     unsafe {\n-        let mut info = PanicInfo::internal_constructor(\n-            message,\n-            Location::internal_constructor(file, line, col),\n-        );\n+        let location = Location::internal_constructor(file, line, col);\n+        let mut info = PanicInfo::internal_constructor(message, &location);\n         HOOK_LOCK.read();\n         match HOOK {\n             // Some platforms know that printing to stderr won't ever actually"}, {"sha": "3e240a855e280105f09943d20fe31568ab870cbe", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -15,7 +15,7 @@ use crate::ast::{Lit, LitKind, Expr, Item, Local, Stmt, StmtKind, GenericParam};\n use crate::mut_visit::visit_clobber;\n use crate::source_map::{BytePos, Spanned};\n use crate::parse::lexer::comments::doc_comment_style;\n-use crate::parse::parser::Parser;\n+use crate::parse;\n use crate::parse::PResult;\n use crate::parse::token::{self, Token};\n use crate::ptr::P;\n@@ -280,35 +280,10 @@ impl Attribute {\n         self.item.meta(self.span)\n     }\n \n-    crate fn parse<'a, T, F>(&self, sess: &'a ParseSess, mut f: F) -> PResult<'a, T>\n-        where F: FnMut(&mut Parser<'a>) -> PResult<'a, T>,\n-    {\n-        let mut parser = Parser::new(\n-            sess,\n-            self.tokens.clone(),\n-            None,\n-            false,\n-            false,\n-            Some(\"attribute\"),\n-        );\n-        let result = f(&mut parser)?;\n-        if parser.token != token::Eof {\n-            parser.unexpected()?;\n-        }\n-        Ok(result)\n-    }\n-\n-    pub fn parse_derive_paths<'a>(&self, sess: &'a ParseSess) -> PResult<'a, Vec<Path>> {\n-        if self.tokens.is_empty() {\n-            return Ok(Vec::new());\n-        }\n-        self.parse(sess, |p| p.parse_derive_paths())\n-    }\n-\n     pub fn parse_meta<'a>(&self, sess: &'a ParseSess) -> PResult<'a, MetaItem> {\n         Ok(MetaItem {\n             path: self.path.clone(),\n-            kind: self.parse(sess, |parser| parser.parse_meta_item_kind())?,\n+            kind: parse::parse_in_attr(sess, self, |p| p.parse_meta_item_kind())?,\n             span: self.span,\n         })\n     }"}, {"sha": "6003fd1d2861a5cee84df5516bcf1c6e20e06db6", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -10,6 +10,7 @@ use crate::attr;\n use crate::ast;\n use crate::edition::Edition;\n use crate::mut_visit::*;\n+use crate::parse;\n use crate::ptr::P;\n use crate::sess::ParseSess;\n use crate::symbol::sym;\n@@ -112,7 +113,8 @@ impl<'a> StripUnconfigured<'a> {\n             return vec![];\n         }\n \n-        let (cfg_predicate, expanded_attrs) = match attr.parse(self.sess, |p| p.parse_cfg_attr()) {\n+        let res = parse::parse_in_attr(self.sess, &attr, |p| p.parse_cfg_attr());\n+        let (cfg_predicate, expanded_attrs) = match res {\n             Ok(result) => result,\n             Err(mut e) => {\n                 e.emit();"}, {"sha": "20487b9af03a6525bce1f32b80f5e079addb3f66", "filename": "src/libsyntax/expand/allocator.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax%2Fexpand%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax%2Fexpand%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fexpand%2Fallocator.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -1,5 +1,5 @@\n-use syntax::{ast, attr, visit};\n-use syntax::symbol::{sym, Symbol};\n+use crate::{ast, attr, visit};\n+use syntax_pos::symbol::{sym, Symbol};\n use syntax_pos::Span;\n \n #[derive(Clone, Copy)]", "previous_filename": "src/libsyntax_expand/allocator.rs"}, {"sha": "038f60287befdd231dac141552ad340e22de628c", "filename": "src/libsyntax/expand/mod.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax%2Fexpand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax%2Fexpand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fexpand%2Fmod.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -0,0 +1,21 @@\n+//! Definitions shared by macros / syntax extensions and e.g. librustc.\n+\n+use crate::ast::Attribute;\n+use syntax_pos::symbol::sym;\n+\n+pub mod allocator;\n+\n+bitflags::bitflags! {\n+    /// Built-in derives that need some extra tracking beyond the usual macro functionality.\n+    #[derive(Default)]\n+    pub struct SpecialDerives: u8 {\n+        const PARTIAL_EQ = 1 << 0;\n+        const EQ         = 1 << 1;\n+        const COPY       = 1 << 2;\n+    }\n+}\n+\n+pub fn is_proc_macro_attr(attr: &Attribute) -> bool {\n+    [sym::proc_macro, sym::proc_macro_attribute, sym::proc_macro_derive]\n+        .iter().any(|kind| attr.check_name(*kind))\n+}"}, {"sha": "7be6e6c7e1876ecad9015494c3d6763b040e7831", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -95,9 +95,9 @@ pub mod json;\n \n pub mod ast;\n pub mod attr;\n+pub mod expand;\n pub mod source_map;\n-#[macro_use]\n-pub mod config;\n+#[macro_use] pub mod config;\n pub mod entry;\n pub mod feature_gate;\n pub mod mut_visit;"}, {"sha": "f5e416b722bbf01a161a01da9da60d9c4ad740a3", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -288,6 +288,27 @@ pub fn stream_to_parser_with_base_dir<'a>(\n     Parser::new(sess, stream, Some(base_dir), true, false, None)\n }\n \n+/// Runs the given subparser `f` on the tokens of the given `attr`'s item.\n+pub fn parse_in_attr<'a, T>(\n+    sess: &'a ParseSess,\n+    attr: &ast::Attribute,\n+    mut f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,\n+) -> PResult<'a, T> {\n+    let mut parser = Parser::new(\n+        sess,\n+        attr.tokens.clone(),\n+        None,\n+        false,\n+        false,\n+        Some(\"attribute\"),\n+    );\n+    let result = f(&mut parser)?;\n+    if parser.token != token::Eof {\n+        parser.unexpected()?;\n+    }\n+    Ok(result)\n+}\n+\n // NOTE(Centril): The following probably shouldn't be here but it acknowledges the\n // fact that architecturally, we are using parsing (read on below to understand why).\n "}, {"sha": "38a28224daba44d5c028aed686a5421f92e38f56", "filename": "src/libsyntax/parse/parser/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -130,7 +130,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse a list of paths inside `#[derive(path_0, ..., path_n)]`.\n-    crate fn parse_derive_paths(&mut self) -> PResult<'a, Vec<Path>> {\n+    pub fn parse_derive_paths(&mut self) -> PResult<'a, Vec<Path>> {\n         self.expect(&token::OpenDelim(token::Paren))?;\n         let mut list = Vec::new();\n         while !self.eat(&token::CloseDelim(token::Paren)) {"}, {"sha": "a66263a9a028a17359b20cc35517acc5062a607c", "filename": "src/libsyntax_expand/base.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fbase.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -1,5 +1,4 @@\n use crate::expand::{self, AstFragment, Invocation};\n-use crate::hygiene::ExpnId;\n \n use syntax::ast::{self, NodeId, Attribute, Name, PatKind};\n use syntax::attr::{self, HasAttrs, Stability, Deprecation};\n@@ -14,11 +13,12 @@ use syntax::symbol::{kw, sym, Ident, Symbol};\n use syntax::{ThinVec, MACRO_ARGUMENTS};\n use syntax::tokenstream::{self, TokenStream};\n use syntax::visit::Visitor;\n+crate use syntax::expand::SpecialDerives;\n \n use errors::{DiagnosticBuilder, DiagnosticId};\n use smallvec::{smallvec, SmallVec};\n use syntax_pos::{FileName, Span, MultiSpan, DUMMY_SP};\n-use syntax_pos::hygiene::{AstPass, ExpnData, ExpnKind};\n+use syntax_pos::hygiene::{AstPass, ExpnId, ExpnData, ExpnKind};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{self, Lrc};\n@@ -27,7 +27,7 @@ use std::path::PathBuf;\n use std::rc::Rc;\n use std::default::Default;\n \n-pub use syntax_pos::hygiene::MacroKind;\n+crate use syntax_pos::hygiene::MacroKind;\n \n #[derive(Debug,Clone)]\n pub enum Annotatable {\n@@ -837,16 +837,6 @@ pub enum InvocationRes {\n /// Error type that denotes indeterminacy.\n pub struct Indeterminate;\n \n-bitflags::bitflags! {\n-    /// Built-in derives that need some extra tracking beyond the usual macro functionality.\n-    #[derive(Default)]\n-    pub struct SpecialDerives: u8 {\n-        const PARTIAL_EQ = 1 << 0;\n-        const EQ         = 1 << 1;\n-        const COPY       = 1 << 2;\n-    }\n-}\n-\n pub trait Resolver {\n     fn next_node_id(&mut self) -> NodeId;\n "}, {"sha": "10eb3ecb20bd02d542c3f8e33db66bc2ac96b12a", "filename": "src/libsyntax_expand/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax_expand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax_expand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Flib.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -28,9 +28,8 @@ macro_rules! panictry {\n mod placeholders;\n mod proc_macro_server;\n \n-pub use syntax_pos::hygiene;\n+crate use syntax_pos::hygiene;\n pub use mbe::macro_rules::compile_declarative_macro;\n-pub mod allocator;\n pub mod base;\n pub mod build;\n pub mod expand;"}, {"sha": "bda9478ce96a9ea436763014665c3afc739e1a90", "filename": "src/libsyntax_expand/proc_macro.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax_expand%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax_expand%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fproc_macro.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -178,11 +178,6 @@ impl<'a> Visitor<'a> for MarkAttrs<'a> {\n     fn visit_mac(&mut self, _mac: &Mac) {}\n }\n \n-pub fn is_proc_macro_attr(attr: &Attribute) -> bool {\n-    [sym::proc_macro, sym::proc_macro_attribute, sym::proc_macro_derive]\n-        .iter().any(|kind| attr.check_name(*kind))\n-}\n-\n crate fn collect_derives(cx: &mut ExtCtxt<'_>, attrs: &mut Vec<ast::Attribute>) -> Vec<ast::Path> {\n     let mut result = Vec::new();\n     attrs.retain(|attr| {\n@@ -200,7 +195,14 @@ crate fn collect_derives(cx: &mut ExtCtxt<'_>, attrs: &mut Vec<ast::Attribute>)\n             return false;\n         }\n \n-        match attr.parse_derive_paths(cx.parse_sess) {\n+        let parse_derive_paths = |attr: &ast::Attribute| {\n+            if attr.tokens.is_empty() {\n+                return Ok(Vec::new());\n+            }\n+            parse::parse_in_attr(cx.parse_sess, attr, |p| p.parse_derive_paths())\n+        };\n+\n+        match parse_derive_paths(attr) {\n             Ok(traits) => {\n                 result.extend(traits);\n                 true"}, {"sha": "061afa379c6e3fae402e5dd4b5c6057a935fbc70", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -3,7 +3,8 @@ use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n \n use syntax::ast::{self, Expr, GenericArg, Generics, ItemKind, MetaItem, VariantData};\n-use syntax_expand::base::{Annotatable, ExtCtxt, SpecialDerives};\n+use syntax::expand::SpecialDerives;\n+use syntax_expand::base::{Annotatable, ExtCtxt};\n use syntax::ptr::P;\n use syntax::symbol::{kw, sym, Symbol};\n use syntax_pos::Span;"}, {"sha": "eddf8eea1db32f779767d21c730eefcdb70b8970", "filename": "src/libsyntax_ext/deriving/cmp/eq.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -3,9 +3,10 @@ use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n \n use syntax::ast::{self, Ident, Expr, MetaItem, GenericArg};\n-use syntax_expand::base::{Annotatable, ExtCtxt, SpecialDerives};\n+use syntax::expand::SpecialDerives;\n use syntax::ptr::P;\n use syntax::symbol::{sym, Symbol};\n+use syntax_expand::base::{Annotatable, ExtCtxt};\n use syntax_pos::Span;\n \n pub fn expand_deriving_eq(cx: &mut ExtCtxt<'_>,"}, {"sha": "2e2be91de8a4623c7d4989a6768b4b9ccfaf0342", "filename": "src/libsyntax_ext/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -3,10 +3,11 @@ use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n \n use syntax::ast::{BinOpKind, Expr, MetaItem};\n-use syntax_expand::base::{Annotatable, ExtCtxt, SpecialDerives};\n+use syntax::expand::SpecialDerives;\n use syntax::ptr::P;\n use syntax::symbol::sym;\n-use syntax_pos::{self, Span};\n+use syntax_expand::base::{Annotatable, ExtCtxt};\n+use syntax_pos::Span;\n \n pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt<'_>,\n                                   span: Span,"}, {"sha": "c04b65245e1f7911b8f4edf09e98d0caf9f47fcf", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -186,13 +186,14 @@ use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, BinOpKind, EnumDef, Expr, Generics, Ident, PatKind};\n use syntax::ast::{VariantData, GenericParamKind, GenericArg};\n use syntax::attr;\n+use syntax::expand::SpecialDerives;\n use syntax::source_map::respan;\n use syntax::util::map_in_place::MapInPlace;\n use syntax::ptr::P;\n use syntax::sess::ParseSess;\n use syntax::symbol::{Symbol, kw, sym};\n-use syntax_expand::base::{Annotatable, ExtCtxt, SpecialDerives};\n-use syntax_pos::{Span};\n+use syntax_expand::base::{Annotatable, ExtCtxt};\n+use syntax_pos::Span;\n \n use ty::{LifetimeBounds, Path, Ptr, PtrTy, Self_, Ty};\n "}, {"sha": "90d2ea38bc33604f903f2cc12fc3b073918afd57", "filename": "src/libsyntax_ext/global_allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax_ext%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax_ext%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_allocator.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -2,10 +2,10 @@ use crate::util::check_builtin_macro_attribute;\n \n use syntax::ast::{ItemKind, Mutability, Stmt, Ty, TyKind, Unsafety};\n use syntax::ast::{self, Param, Attribute, Expr, FnHeader, Generics, Ident};\n-use syntax_expand::allocator::{AllocatorKind, AllocatorMethod, AllocatorTy, ALLOCATOR_METHODS};\n-use syntax_expand::base::{Annotatable, ExtCtxt};\n+use syntax::expand::allocator::{AllocatorKind, AllocatorMethod, AllocatorTy, ALLOCATOR_METHODS};\n use syntax::ptr::P;\n use syntax::symbol::{kw, sym, Symbol};\n+use syntax_expand::base::{Annotatable, ExtCtxt};\n use syntax_pos::Span;\n \n pub fn expand("}, {"sha": "fc4a7a0a0fe4729d6c469f52ef250a830dd8aa41", "filename": "src/libsyntax_ext/proc_macro_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_harness.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -3,14 +3,14 @@ use std::mem;\n use smallvec::smallvec;\n use syntax::ast::{self, Ident};\n use syntax::attr;\n+use syntax::expand::is_proc_macro_attr;\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::sess::ParseSess;\n use syntax::symbol::{kw, sym};\n use syntax::visit::{self, Visitor};\n use syntax_expand::base::{ExtCtxt, Resolver};\n use syntax_expand::expand::{AstFragment, ExpansionConfig};\n-use syntax_expand::proc_macro::is_proc_macro_attr;\n use syntax_pos::{Span, DUMMY_SP};\n use syntax_pos::hygiene::AstPass;\n "}, {"sha": "6514ff5e252684cc2eb0f7fa4e2f1d1d560a2e44", "filename": "src/libsyntax_ext/standard_library_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax_ext%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Flibsyntax_ext%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fstandard_library_imports.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -4,9 +4,9 @@ use syntax::ptr::P;\n use syntax::sess::ParseSess;\n use syntax::symbol::{Ident, Symbol, kw, sym};\n use syntax_expand::expand::ExpansionConfig;\n-use syntax_expand::hygiene::AstPass;\n use syntax_expand::base::{ExtCtxt, Resolver};\n use syntax_pos::DUMMY_SP;\n+use syntax_pos::hygiene::AstPass;\n \n pub fn inject(\n     mut krate: ast::Crate,"}, {"sha": "c63822f052b2fbe20762ac69ec5dd85cbebb8881", "filename": "src/test/ui/consts/const-eval/const_caller_location.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_caller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_caller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_caller_location.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -0,0 +1,23 @@\n+// run-pass\n+\n+#![feature(const_fn, core_intrinsics)]\n+\n+use std::{intrinsics::caller_location, panic::Location};\n+\n+const LOCATION: &Location = caller_location();\n+const NESTED: &Location = {\n+    const fn nested_location() -> &'static Location<'static> {\n+        caller_location()\n+    };\n+    nested_location()\n+};\n+\n+fn main() {\n+    assert_eq!(LOCATION.file(), file!());\n+    assert_eq!(LOCATION.line(), 7);\n+    assert_eq!(LOCATION.column(), 29);\n+\n+    assert_eq!(NESTED.file(), file!());\n+    assert_eq!(NESTED.line(), 10);\n+    assert_eq!(NESTED.column(), 9);\n+}"}, {"sha": "8727c9d1ca6551e20163665562ac59b398dc3830", "filename": "src/test/ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fextern%2Fissue-64655-allow-unwind-when-calling-panic-directly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fextern%2Fissue-64655-allow-unwind-when-calling-panic-directly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fissue-64655-allow-unwind-when-calling-panic-directly.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -22,7 +22,7 @@\n //[thin]compile-flags: -C lto=thin\n //[fat]compile-flags: -C lto=fat\n \n-#![feature(core_panic)]\n+#![feature(core_panic, panic_internals)]\n \n // (For some reason, reproducing the LTO issue requires pulling in std\n // explicitly this way.)\n@@ -51,7 +51,8 @@ fn main() {\n \n         let _guard = Droppable;\n         let s = \"issue-64655-allow-unwind-when-calling-panic-directly.rs\";\n-        core::panicking::panic(&(\"???\", s, 17, 4));\n+        let location = core::panic::Location::internal_constructor(s, 17, 4);\n+        core::panicking::panic(\"???\", &location);\n     });\n \n     let wait = handle.join();"}, {"sha": "11eae2af9c95f74711ca9c4e0e5e9c0a316129ff", "filename": "src/test/ui/pattern/usefulness/always-inhabited-union-ref.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/uninhabited/always-inhabited-union-ref.rs"}, {"sha": "792ab6f59a43966382f1b7c3d73610f2b19e2ddf", "filename": "src/test/ui/pattern/usefulness/always-inhabited-union-ref.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/uninhabited/always-inhabited-union-ref.stderr"}, {"sha": "59f749198971b5a1931817cdc9a91e48380d1476", "filename": "src/test/ui/pattern/usefulness/exhaustive_integer_patterns.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fexhaustive_integer_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fexhaustive_integer_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fexhaustive_integer_patterns.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/exhaustive_integer_patterns.rs"}, {"sha": "7a3a36a820c65cfc1540aae208b095030f99d11c", "filename": "src/test/ui/pattern/usefulness/exhaustive_integer_patterns.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fexhaustive_integer_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fexhaustive_integer_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fexhaustive_integer_patterns.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/exhaustive_integer_patterns.stderr"}, {"sha": "b74f162c0c62225cb8dcb9c0fe0bea3148d9f3f6", "filename": "src/test/ui/pattern/usefulness/guards-not-exhaustive.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fguards-not-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fguards-not-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fguards-not-exhaustive.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/guards-not-exhaustive.rs"}, {"sha": "ff065882d96e291407dab5eb429d67dc3e8959d5", "filename": "src/test/ui/pattern/usefulness/irrefutable-exhaustive-integer-binding.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Firrefutable-exhaustive-integer-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Firrefutable-exhaustive-integer-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Firrefutable-exhaustive-integer-binding.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/pattern/irrefutable-exhaustive-integer-binding.rs"}, {"sha": "dd8f03b6dbd591b9892e8c3c924395bfd43b4f16", "filename": "src/test/ui/pattern/usefulness/irrefutable-unit.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Firrefutable-unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Firrefutable-unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Firrefutable-unit.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/irrefutable-unit.rs"}, {"sha": "8ef75e3511e8a2776372932e7f0aefa15eeaaee2", "filename": "src/test/ui/pattern/usefulness/issue-35609.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/check_match/issue-35609.rs"}, {"sha": "af22535c55e5a8498e7fd0b4718ba8a78193a97f", "filename": "src/test/ui/pattern/usefulness/issue-35609.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/check_match/issue-35609.stderr"}, {"sha": "5c6834459f0d4021538bb4f5f6ca5d4b5f9fe80f", "filename": "src/test/ui/pattern/usefulness/issue-43253.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-43253.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-43253.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-43253.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/check_match/issue-43253.rs"}, {"sha": "cb4a0486eef9ab244f6884659a7dc1a2982a649d", "filename": "src/test/ui/pattern/usefulness/issue-43253.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-43253.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-43253.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-43253.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/check_match/issue-43253.stderr"}, {"sha": "4c5f2d356491b8c7e579ec4715a34887c0cdad4f", "filename": "src/test/ui/pattern/usefulness/match-arm-statics-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/match/match-argm-statics-2.rs"}, {"sha": "8521e37d3fddca7f6fdc6c0b8b90e845420a6f5a", "filename": "src/test/ui/pattern/usefulness/match-arm-statics-2.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -1,21 +1,21 @@\n error[E0004]: non-exhaustive patterns: `(true, false)` not covered\n-  --> $DIR/match-argm-statics-2.rs:17:11\n+  --> $DIR/match-arm-statics-2.rs:17:11\n    |\n LL |     match (true, false) {\n    |           ^^^^^^^^^^^^^ pattern `(true, false)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Some(Some(West))` not covered\n-  --> $DIR/match-argm-statics-2.rs:29:11\n+  --> $DIR/match-arm-statics-2.rs:29:11\n    |\n LL |     match Some(Some(North)) {\n    |           ^^^^^^^^^^^^^^^^^ pattern `Some(Some(West))` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Foo { bar: Some(North), baz: NewBool(true) }` not covered\n-  --> $DIR/match-argm-statics-2.rs:48:11\n+  --> $DIR/match-arm-statics-2.rs:48:11\n    |\n LL | / struct Foo {\n LL | |     bar: Option<Direction>,", "previous_filename": "src/test/ui/match/match-argm-statics-2.stderr"}, {"sha": "91db76ebb9f01c430e356c85e15d2520eb8b591d", "filename": "src/test/ui/pattern/usefulness/match-arm-statics.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/match/match-arm-statics.rs"}, {"sha": "3d9e900a4e9885a279b3422618f79d1aaf9f4718", "filename": "src/test/ui/pattern/usefulness/match-arm-statics.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/match/match-arm-statics.stderr"}, {"sha": "33468d03fae40338f4b76e7cd28cf0206f2f03e5", "filename": "src/test/ui/pattern/usefulness/match-byte-array-patterns-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/match/match-byte-array-patterns-2.rs"}, {"sha": "d53e2e25b3dbd44300dfe8e687958f36604c4193", "filename": "src/test/ui/pattern/usefulness/match-byte-array-patterns-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/match/match-byte-array-patterns-2.stderr"}, {"sha": "7541ea3e2e2632988ec80e5def457bcc9a1cb7e7", "filename": "src/test/ui/pattern/usefulness/match-byte-array-patterns.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/match/match-byte-array-patterns.rs"}, {"sha": "b28646b50cf01e15b4acf33b9c26eb21ec616d75", "filename": "src/test/ui/pattern/usefulness/match-byte-array-patterns.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/match/match-byte-array-patterns.stderr"}, {"sha": "3b210a115d21a2f10165c35a65a3711c2482bf26", "filename": "src/test/ui/pattern/usefulness/match-non-exhaustive.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/match/match-non-exhaustive.rs"}, {"sha": "211f333882b10cba929556cca0ee81b909aaf9fa", "filename": "src/test/ui/pattern/usefulness/match-non-exhaustive.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/match/match-non-exhaustive.stderr"}, {"sha": "315eb03d165642a9300580b3ab78761b551414af", "filename": "src/test/ui/pattern/usefulness/match-privately-empty.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/match/match-privately-empty.rs"}, {"sha": "f79d180a1b8b5c0f82765f868c761e1ff6950d62", "filename": "src/test/ui/pattern/usefulness/match-privately-empty.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/match/match-privately-empty.stderr"}, {"sha": "7de7b7e79be44faf85c4b75fe98ff73dd672e40b", "filename": "src/test/ui/pattern/usefulness/match-range-fail-dominate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-range-fail-dominate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-range-fail-dominate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-range-fail-dominate.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/match/match-range-fail-dominate.rs"}, {"sha": "c15186d2558f24402c0746132a7f3fbf4c3b1783", "filename": "src/test/ui/pattern/usefulness/match-range-fail-dominate.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-range-fail-dominate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-range-fail-dominate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-range-fail-dominate.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/match/match-range-fail-dominate.stderr"}, {"sha": "dee110f96cd6310a836a2af4c530d8f01de2837d", "filename": "src/test/ui/pattern/usefulness/match-ref-ice.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-ref-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-ref-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-ref-ice.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/match/match-ref-ice.rs"}, {"sha": "c4bfa0afcc278656cc0e0da7c19beca7ccd5e1de", "filename": "src/test/ui/pattern/usefulness/match-ref-ice.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-ref-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-ref-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-ref-ice.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/match/match-ref-ice.stderr"}, {"sha": "afbeb61e4415af0cd799b08d37fbc2f8c7f24f7b", "filename": "src/test/ui/pattern/usefulness/match-slice-patterns.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/match/match-slice-patterns.rs"}, {"sha": "24769db34c9322f252d1917967674717fc3448bb", "filename": "src/test/ui/pattern/usefulness/match-slice-patterns.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/match/match-slice-patterns.stderr"}, {"sha": "e611779dec27486451216d1918226da3e3a57a84", "filename": "src/test/ui/pattern/usefulness/match-vec-fixed.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-vec-fixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-vec-fixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-vec-fixed.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/match/match-vec-fixed.rs"}, {"sha": "ae2dd87b6954b9554157c8f9a9884a2b51b32b94", "filename": "src/test/ui/pattern/usefulness/match-vec-fixed.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-vec-fixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-vec-fixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-vec-fixed.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/match/match-vec-fixed.stderr"}, {"sha": "78810525bad0f76b4653d3ab4abbf5df382c9f85", "filename": "src/test/ui/pattern/usefulness/match-vec-unreachable.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-vec-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-vec-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-vec-unreachable.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/match/match-vec-unreachable.rs"}, {"sha": "415c24ae77ef5271e91bdbd981699289b8e1d748", "filename": "src/test/ui/pattern/usefulness/match-vec-unreachable.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-vec-unreachable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-vec-unreachable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-vec-unreachable.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/match/match-vec-unreachable.stderr"}, {"sha": "8b2294f8432726b3b7ade6ea9abb8c1ca70d5d44", "filename": "src/test/ui/pattern/usefulness/nested-exhaustive-match.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnested-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnested-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnested-exhaustive-match.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/binding/nested-exhaustive-match.rs"}, {"sha": "6f009acbdfe1818ac9984720917a2a5146f3e0d2", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-defined-here.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/match/non-exhaustive-defined-here.rs"}, {"sha": "e5f01174ac1bf7539ebbb0d6cab2a6f0acf806a0", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-defined-here.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/match/non-exhaustive-defined-here.stderr"}, {"sha": "588fecbf10dd50ff7cdb36a205247358804d0c21", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-float-range-match.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-float-range-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-float-range-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-float-range-match.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/non-exhaustive/non-exhaustive-float-range-match.rs"}, {"sha": "6de615c3de4fd1309280000e480cde7525c4dd14", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-float-range-match.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-float-range-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-float-range-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-float-range-match.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/non-exhaustive/non-exhaustive-float-range-match.stderr"}, {"sha": "9423a2891a62085166f6345b8a2f5cda28f12416", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match-nested.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/non-exhaustive/non-exhaustive-match-nested.rs"}, {"sha": "67c818e19cbdabd19ab2657e8c179d9aa8524ac5", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match-nested.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/non-exhaustive/non-exhaustive-match-nested.stderr"}, {"sha": "0e5a9203c5f80ac5f532dc8d61a6f4882c2791ce", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/non-exhaustive/non-exhaustive-match.rs"}, {"sha": "5dba05e16427a8df24a27d5308bbe316b5d2c2c3", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/non-exhaustive/non-exhaustive-match.stderr"}, {"sha": "4ca1cbcebccf51a94b249e9f5d6dc30535b11137", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-pattern-witness.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/non-exhaustive/non-exhaustive-pattern-witness.rs"}, {"sha": "a0b497dd4c0ba12da984e3e19d19eddccbbf011b", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-pattern-witness.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/non-exhaustive/non-exhaustive-pattern-witness.stderr"}, {"sha": "d4afe17ca748cfeb8c3d0627ab6d004de6750b3c", "filename": "src/test/ui/pattern/usefulness/refutable-pattern-errors.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-errors.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/refutable-pattern-errors.rs"}, {"sha": "0cf5d9cd5f12a6e6a223a61aae2ff7fa475d002b", "filename": "src/test/ui/pattern/usefulness/refutable-pattern-errors.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-errors.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/refutable-pattern-errors.stderr"}, {"sha": "a2d9e1935de746d1b67c4de6eaebe47612853c9c", "filename": "src/test/ui/pattern/usefulness/refutable-pattern-in-fn-arg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-in-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-in-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-in-fn-arg.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/refutable-pattern-in-fn-arg.rs"}, {"sha": "8666e6bb73ebf3e741388bfb83c31fc7305e5820", "filename": "src/test/ui/pattern/usefulness/refutable-pattern-in-fn-arg.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-in-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-in-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-in-fn-arg.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/refutable-pattern-in-fn-arg.stderr"}, {"sha": "b1fc0f5ad3e1478989e983728df273d6a8404964", "filename": "src/test/ui/pattern/usefulness/struct-like-enum-nonexhaustive.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-like-enum-nonexhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-like-enum-nonexhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-like-enum-nonexhaustive.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/structs/struct-like-enum-nonexhaustive.rs"}, {"sha": "d6b5af1796403b2d295f751653b4bf0a0c0ecf72", "filename": "src/test/ui/pattern/usefulness/struct-like-enum-nonexhaustive.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-like-enum-nonexhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-like-enum-nonexhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-like-enum-nonexhaustive.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/structs/struct-like-enum-nonexhaustive.stderr"}, {"sha": "93f0a9317616926cf7d2d99681a05de04ac8c6f2", "filename": "src/test/ui/pattern/usefulness/struct-pattern-match-useless.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-pattern-match-useless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-pattern-match-useless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-pattern-match-useless.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/structs/struct-pattern-match-useless.rs"}, {"sha": "5b0c9305448a7e603951500fe03e48227aa49647", "filename": "src/test/ui/pattern/usefulness/struct-pattern-match-useless.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-pattern-match-useless.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-pattern-match-useless.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-pattern-match-useless.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/structs/struct-pattern-match-useless.stderr"}, {"sha": "76bcf3fbd4d100abadb66ef0ed533c097ab1d108", "filename": "src/test/ui/pattern/usefulness/tuple-struct-nonexhaustive.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/tuple/tuple-struct-nonexhaustive.rs"}, {"sha": "bbdf9ceed23a2685a9c219cfadbc98300f0c78ea", "filename": "src/test/ui/pattern/usefulness/tuple-struct-nonexhaustive.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "previous_filename": "src/test/ui/tuple/tuple-struct-nonexhaustive.stderr"}, {"sha": "ab6c59384c43bf4161347f180361d9baceba0347", "filename": "src/test/ui/rfc-2091-track-caller/caller-location-intrinsic.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-intrinsic.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -0,0 +1,9 @@\n+// run-pass\n+\n+#![feature(core_intrinsics)]\n+fn main() {\n+    let loc = core::intrinsics::caller_location();\n+    assert_eq!(loc.file(), file!());\n+    assert_eq!(loc.line(), 5);\n+    assert_eq!(loc.column(), 15);\n+}"}]}