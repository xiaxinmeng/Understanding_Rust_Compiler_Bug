{"sha": "7a37e0c2ff8b8fb0346e519418e1e7cb2a33bc45", "node_id": "C_kwDOAAsO6NoAKDdhMzdlMGMyZmY4YjhmYjAzNDZlNTE5NDE4ZTFlN2NiMmEzM2JjNDU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-05-19T05:59:52Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-05-19T06:53:06Z"}, "message": "Move condition out of `maybe_report_ambiguous_plus` and `maybe_recover_from_bad_type_plus`.", "tree": {"sha": "f2ed640d63ad36e4647814d1bedaddf45ae7d9c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2ed640d63ad36e4647814d1bedaddf45ae7d9c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a37e0c2ff8b8fb0346e519418e1e7cb2a33bc45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a37e0c2ff8b8fb0346e519418e1e7cb2a33bc45", "html_url": "https://github.com/rust-lang/rust/commit/7a37e0c2ff8b8fb0346e519418e1e7cb2a33bc45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a37e0c2ff8b8fb0346e519418e1e7cb2a33bc45/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a148a32fdc3f3767487d54147edbbe2c225c4fbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/a148a32fdc3f3767487d54147edbbe2c225c4fbf", "html_url": "https://github.com/rust-lang/rust/commit/a148a32fdc3f3767487d54147edbbe2c225c4fbf"}], "stats": {"total": 25, "additions": 9, "deletions": 16}, "files": [{"sha": "c58b43de1b8d51bfa20c254c81e004d7cf699c0f", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7a37e0c2ff8b8fb0346e519418e1e7cb2a33bc45/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a37e0c2ff8b8fb0346e519418e1e7cb2a33bc45/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=7a37e0c2ff8b8fb0346e519418e1e7cb2a33bc45", "patch": "@@ -1,5 +1,4 @@\n use super::pat::Expected;\n-use super::ty::AllowPlus;\n use super::{\n     BlockMode, CommaRecoveryMode, Parser, PathStyle, RecoverColon, RecoverComma, Restrictions,\n     SemiColonMode, SeqSep, TokenExpectType, TokenType,\n@@ -1236,13 +1235,8 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub(super) fn maybe_report_ambiguous_plus(\n-        &mut self,\n-        allow_plus: AllowPlus,\n-        impl_dyn_multi: bool,\n-        ty: &Ty,\n-    ) {\n-        if matches!(allow_plus, AllowPlus::No) && impl_dyn_multi {\n+    pub(super) fn maybe_report_ambiguous_plus(&mut self, impl_dyn_multi: bool, ty: &Ty) {\n+        if impl_dyn_multi {\n             self.sess.emit_err(AmbiguousPlus { sum_ty: pprust::ty_to_string(&ty), span: ty.span });\n         }\n     }\n@@ -1268,13 +1262,9 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub(super) fn maybe_recover_from_bad_type_plus(\n-        &mut self,\n-        allow_plus: AllowPlus,\n-        ty: &Ty,\n-    ) -> PResult<'a, ()> {\n+    pub(super) fn maybe_recover_from_bad_type_plus(&mut self, ty: &Ty) -> PResult<'a, ()> {\n         // Do not add `+` to expected tokens.\n-        if matches!(allow_plus, AllowPlus::No) || !self.token.is_like_plus() {\n+        if !self.token.is_like_plus() {\n             return Ok(());\n         }\n "}, {"sha": "708940c8aa8d9fb999c49647a97bc742e2c97ab0", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a37e0c2ff8b8fb0346e519418e1e7cb2a33bc45/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a37e0c2ff8b8fb0346e519418e1e7cb2a33bc45/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=7a37e0c2ff8b8fb0346e519418e1e7cb2a33bc45", "patch": "@@ -315,8 +315,11 @@ impl<'a> Parser<'a> {\n         let mut ty = self.mk_ty(span, kind);\n \n         // Try to recover from use of `+` with incorrect priority.\n-        self.maybe_report_ambiguous_plus(allow_plus, impl_dyn_multi, &ty);\n-        self.maybe_recover_from_bad_type_plus(allow_plus, &ty)?;\n+        if matches!(allow_plus, AllowPlus::Yes) {\n+            self.maybe_recover_from_bad_type_plus(&ty)?;\n+        } else {\n+            self.maybe_report_ambiguous_plus(impl_dyn_multi, &ty);\n+        }\n         if let RecoverQuestionMark::Yes = recover_question_mark {\n             ty = self.maybe_recover_from_question_mark(ty);\n         }"}]}