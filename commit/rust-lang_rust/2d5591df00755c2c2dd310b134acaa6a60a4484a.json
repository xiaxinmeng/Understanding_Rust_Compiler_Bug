{"sha": "2d5591df00755c2c2dd310b134acaa6a60a4484a", "node_id": "C_kwDOAAsO6NoAKDJkNTU5MWRmMDA3NTVjMmMyZGQzMTBiMTM0YWNhYTZhNjBhNDQ4NGE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-26T20:33:34Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-26T20:33:40Z"}, "message": "Make make_identity take CanonicalVarInfos", "tree": {"sha": "a946fcc187927cebacfd03b08e3028d94d8ae01c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a946fcc187927cebacfd03b08e3028d94d8ae01c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d5591df00755c2c2dd310b134acaa6a60a4484a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d5591df00755c2c2dd310b134acaa6a60a4484a", "html_url": "https://github.com/rust-lang/rust/commit/2d5591df00755c2c2dd310b134acaa6a60a4484a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d5591df00755c2c2dd310b134acaa6a60a4484a/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ff674f94237a1a21c7a1c1f6801bf751de41cdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ff674f94237a1a21c7a1c1f6801bf751de41cdf", "html_url": "https://github.com/rust-lang/rust/commit/4ff674f94237a1a21c7a1c1f6801bf751de41cdf"}], "stats": {"total": 75, "additions": 27, "deletions": 48}, "files": [{"sha": "6e130bbf7d8284403fccb3af90c7e1a229a08c86", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2d5591df00755c2c2dd310b134acaa6a60a4484a/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5591df00755c2c2dd310b134acaa6a60a4484a/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=2d5591df00755c2c2dd310b134acaa6a60a4484a", "patch": "@@ -337,51 +337,49 @@ TrivialTypeTraversalAndLiftImpls! {\n }\n \n impl<'tcx> CanonicalVarValues<'tcx> {\n-    /// Creates dummy var values which should not be used in a\n-    /// canonical response.\n-    pub fn dummy() -> CanonicalVarValues<'tcx> {\n-        CanonicalVarValues { var_values: ty::List::empty() }\n-    }\n-\n-    #[inline]\n-    pub fn len(&self) -> usize {\n-        self.var_values.len()\n-    }\n-\n-    /// Makes an identity substitution from this one: each bound var\n-    /// is matched to the same bound var, preserving the original kinds.\n-    /// For example, if we have:\n-    /// `self.var_values == [Type(u32), Lifetime('a), Type(u64)]`\n-    /// we'll return a substitution `subst` with:\n-    /// `subst.var_values == [Type(^0), Lifetime(^1), Type(^2)]`.\n-    pub fn make_identity(&self, tcx: TyCtxt<'tcx>) -> Self {\n-        use crate::ty::subst::GenericArgKind;\n-\n+    // Given a list of canonical variables, construct a set of values which are\n+    // the identity response.\n+    pub fn make_identity(\n+        tcx: TyCtxt<'tcx>,\n+        infos: CanonicalVarInfos<'tcx>,\n+    ) -> CanonicalVarValues<'tcx> {\n         CanonicalVarValues {\n-            var_values: tcx.mk_substs(self.var_values.iter().enumerate().map(\n-                |(i, kind)| -> ty::GenericArg<'tcx> {\n-                    match kind.unpack() {\n-                        GenericArgKind::Type(..) => tcx\n+            var_values: tcx.mk_substs(infos.iter().enumerate().map(\n+                |(i, info)| -> ty::GenericArg<'tcx> {\n+                    match info.kind {\n+                        CanonicalVarKind::Ty(_) | CanonicalVarKind::PlaceholderTy(_) => tcx\n                             .mk_ty(ty::Bound(ty::INNERMOST, ty::BoundVar::from_usize(i).into()))\n                             .into(),\n-                        GenericArgKind::Lifetime(..) => {\n+                        CanonicalVarKind::Region(_) | CanonicalVarKind::PlaceholderRegion(_) => {\n                             let br = ty::BoundRegion {\n                                 var: ty::BoundVar::from_usize(i),\n                                 kind: ty::BrAnon(i as u32, None),\n                             };\n                             tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br)).into()\n                         }\n-                        GenericArgKind::Const(ct) => tcx\n+                        CanonicalVarKind::Const(_, ty)\n+                        | CanonicalVarKind::PlaceholderConst(_, ty) => tcx\n                             .mk_const(\n                                 ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from_usize(i)),\n-                                ct.ty(),\n+                                ty,\n                             )\n                             .into(),\n                     }\n                 },\n             )),\n         }\n     }\n+\n+    /// Creates dummy var values which should not be used in a\n+    /// canonical response.\n+    pub fn dummy() -> CanonicalVarValues<'tcx> {\n+        CanonicalVarValues { var_values: ty::List::empty() }\n+    }\n+\n+    #[inline]\n+    pub fn len(&self) -> usize {\n+        self.var_values.len()\n+    }\n }\n \n impl<'a, 'tcx> IntoIterator for &'a CanonicalVarValues<'tcx> {"}, {"sha": "cfb0dccd7b009b1a7d5b3d956808254d06b69411", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2d5591df00755c2c2dd310b134acaa6a60a4484a/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5591df00755c2c2dd310b134acaa6a60a4484a/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=2d5591df00755c2c2dd310b134acaa6a60a4484a", "patch": "@@ -18,7 +18,7 @@\n use std::mem;\n \n use rustc_hir::def_id::DefId;\n-use rustc_infer::infer::canonical::{Canonical, CanonicalVarKind, CanonicalVarValues};\n+use rustc_infer::infer::canonical::{Canonical, CanonicalVarValues};\n use rustc_infer::infer::canonical::{OriginalQueryValues, QueryRegionConstraints, QueryResponse};\n use rustc_infer::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n use rustc_infer::traits::query::NoSolution;\n@@ -481,30 +481,11 @@ pub(super) fn response_no_constraints<'tcx>(\n     goal: Canonical<'tcx, impl Sized>,\n     certainty: Certainty,\n ) -> QueryResult<'tcx> {\n-    let var_values =\n-        tcx.mk_substs(goal.variables.iter().enumerate().map(|(i, info)| -> ty::GenericArg<'tcx> {\n-            match info.kind {\n-                CanonicalVarKind::Ty(_) | CanonicalVarKind::PlaceholderTy(_) => {\n-                    tcx.mk_ty(ty::Bound(ty::INNERMOST, ty::BoundVar::from_usize(i).into())).into()\n-                }\n-                CanonicalVarKind::Region(_) | CanonicalVarKind::PlaceholderRegion(_) => {\n-                    let br = ty::BoundRegion {\n-                        var: ty::BoundVar::from_usize(i),\n-                        kind: ty::BrAnon(i as u32, None),\n-                    };\n-                    tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br)).into()\n-                }\n-                CanonicalVarKind::Const(_, ty) | CanonicalVarKind::PlaceholderConst(_, ty) => tcx\n-                    .mk_const(ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from_usize(i)), ty)\n-                    .into(),\n-            }\n-        }));\n-\n     Ok(Canonical {\n         max_universe: goal.max_universe,\n         variables: goal.variables,\n         value: Response {\n-            var_values: CanonicalVarValues { var_values },\n+            var_values: CanonicalVarValues::make_identity(tcx, goal.variables),\n             external_constraints: Default::default(),\n             certainty,\n         },"}]}