{"sha": "b870ce7a9fe1368462c3ba8b62a1f85c9e5444ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NzBjZTdhOWZlMTM2ODQ2MmMzYmE4YjYyYTFmODVjOWU1NDQ0Y2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-17T17:01:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-17T17:01:58Z"}, "message": "auto merge of #11030 : cmr/rust/rustdoc_on_fire, r=metajack\n\nBy returning the items to process and storing them in a queue, we were losing\nthe context that was setup for that item during the recursion. This is an easy\nfix, rather than hoisting out the state that it needs.", "tree": {"sha": "969c8a65121bd2d7f7f70cfb43342ac28f044591", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/969c8a65121bd2d7f7f70cfb43342ac28f044591"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b870ce7a9fe1368462c3ba8b62a1f85c9e5444ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b870ce7a9fe1368462c3ba8b62a1f85c9e5444ce", "html_url": "https://github.com/rust-lang/rust/commit/b870ce7a9fe1368462c3ba8b62a1f85c9e5444ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b870ce7a9fe1368462c3ba8b62a1f85c9e5444ce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5798b3902c4af50bf0f24e1c4bbf5e4a4dcc6ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5798b3902c4af50bf0f24e1c4bbf5e4a4dcc6ca", "html_url": "https://github.com/rust-lang/rust/commit/d5798b3902c4af50bf0f24e1c4bbf5e4a4dcc6ca"}, {"sha": "8b5a317d48eb26c3af875a409e4a16587aec7544", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b5a317d48eb26c3af875a409e4a16587aec7544", "html_url": "https://github.com/rust-lang/rust/commit/8b5a317d48eb26c3af875a409e4a16587aec7544"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "cf12eecd91463238eb611175e007419bec87fe9e", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b870ce7a9fe1368462c3ba8b62a1f85c9e5444ce/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b870ce7a9fe1368462c3ba8b62a1f85c9e5444ce/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=b870ce7a9fe1368462c3ba8b62a1f85c9e5444ce", "patch": "@@ -648,9 +648,13 @@ impl Context {\n         self.root_path.push_str(\"../\");\n         self.current.push(s);\n \n+        info!(\"Recursing into {}\", self.dst.display());\n+\n         mkdir(&self.dst);\n         let ret = f(self);\n \n+        info!(\"Recursed; leaving {}\", self.dst.display());\n+\n         // Go back to where we were at\n         self.dst = prev;\n         let len = self.root_path.len();\n@@ -674,23 +678,18 @@ impl Context {\n         // using a rwarc makes this parallelizable in the future\n         local_data::set(cache_key, Arc::new(cache));\n \n-        let mut work = ~[item];\n-        while work.len() > 0 {\n-            let item = work.pop();\n-            self.item(item, |_cx, item| {\n-                work.push(item);\n-            })\n-        }\n+        self.item(item);\n     }\n \n     /// Non-parellelized version of rendering an item. This will take the input\n     /// item, render its contents, and then invoke the specified closure with\n     /// all sub-items which need to be rendered.\n     ///\n     /// The rendering driver uses this closure to queue up more work.\n-    fn item(&mut self, item: clean::Item, f: |&mut Context, clean::Item|) {\n+    fn item(&mut self, item: clean::Item) {\n         fn render(w: io::File, cx: &mut Context, it: &clean::Item,\n                   pushname: bool) {\n+            info!(\"Rendering an item to {}\", w.path().display());\n             // A little unfortunate that this is done like this, but it sure\n             // does make formatting *a lot* nicer.\n             local_data::set(current_location_key, cx.current.clone());\n@@ -734,7 +733,7 @@ impl Context {\n                     };\n                     this.sidebar = build_sidebar(&m);\n                     for item in m.items.move_iter() {\n-                        f(this, item);\n+                        this.item(item);\n                     }\n                 })\n             }"}]}