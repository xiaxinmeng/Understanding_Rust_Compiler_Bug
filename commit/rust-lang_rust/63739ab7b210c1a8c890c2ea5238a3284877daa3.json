{"sha": "63739ab7b210c1a8c890c2ea5238a3284877daa3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNzM5YWI3YjIxMGMxYThjODkwYzJlYTUyMzhhMzI4NDg3N2RhYTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-21T17:14:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-21T17:14:05Z"}, "message": "Auto merge of #46166 - kennytm:rollup, r=kennytm\n\nRollup of 11 pull requests\n\n- Successful merges: #45987, #46031, #46050, #46052, #46103, #46120, #46134, #46141, #46148, #46155, #46157\n- Failed merges:", "tree": {"sha": "3a6ffba1817907b557e03e8663d4bae6a27c413f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a6ffba1817907b557e03e8663d4bae6a27c413f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63739ab7b210c1a8c890c2ea5238a3284877daa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63739ab7b210c1a8c890c2ea5238a3284877daa3", "html_url": "https://github.com/rust-lang/rust/commit/63739ab7b210c1a8c890c2ea5238a3284877daa3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63739ab7b210c1a8c890c2ea5238a3284877daa3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f28df200260c89b2a0bdf942510e0f888c29a70d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f28df200260c89b2a0bdf942510e0f888c29a70d", "html_url": "https://github.com/rust-lang/rust/commit/f28df200260c89b2a0bdf942510e0f888c29a70d"}, {"sha": "7c8b36f6f151707833e75463068f0630dd0a0644", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c8b36f6f151707833e75463068f0630dd0a0644", "html_url": "https://github.com/rust-lang/rust/commit/7c8b36f6f151707833e75463068f0630dd0a0644"}], "stats": {"total": 854, "additions": 392, "deletions": 462}, "files": [{"sha": "e3767df2808fa765501388991b2780ff5cc8ad84", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -421,7 +421,7 @@ Here are those same steps in detail:\n \n These instructions are specific to updating `rustfmt`, however they may apply\n to the other submodules as well. Please help by improving these instructions\n-if you find any discrepencies or special cases that need to be addressed.\n+if you find any discrepancies or special cases that need to be addressed.\n \n To update the `rustfmt` submodule, start by running the appropriate\n [`git submodule` command](https://git-scm.com/book/en/v2/Git-Tools-Submodules)."}, {"sha": "7f5035a837cf07d4cc57165b401557678f574ce2", "filename": "RELEASES.md", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -5,9 +5,6 @@ Language\n --------\n - [`non_snake_case` lint now allows extern no-mangle functions][44966]\n - [Now accepts underscores in unicode escapes][43716]\n-- [`#![feature(const_fn)]` is now no longer required for\n-  calling const functions.][43017] It's still required for creating\n-  constant functions.\n - [`T op= &T` now works for numeric types.][44287] eg. `let mut x = 2; x += &8;`\n - [types that impl `Drop` are now allowed in `const` and `static` types][44456]\n \n@@ -45,8 +42,8 @@ Cargo\n Misc\n ----\n - [`libbacktrace` is now available on Apple platforms.][44251]\n-- [Stabilised the `compile_fail` attribute for code fences.][43949] This now\n-  lets you specify that a given code example will fail to compile.\n+- [Stabilised the `compile_fail` attribute for code fences in doc-comments.][43949]\n+  This now lets you specify that a given code example will fail to compile.\n \n Compatibility Notes\n -------------------\n@@ -624,7 +621,7 @@ Misc\n ----\n \n - [rustdoc can now use pulldown-cmark with the `--enable-commonmark` flag][40338]\n-- [Added rust-winbg script for better debugging on Windows][39983]\n+- [Added rust-windbg script for better debugging on Windows][39983]\n - [Rust now uses the official cross compiler for NetBSD][40612]\n - [rustdoc now accepts `#` at the start of files][40828]\n - [Fixed jemalloc support for musl][41168]\n@@ -1658,7 +1655,7 @@ Diagnostics\n -----------\n \n * [Replace macro backtraces with labeled local uses][35702]\n-* [Improve error message for missplaced doc comments][33922]\n+* [Improve error message for misplaced doc comments][33922]\n * [Buffer unix and lock windows to prevent message interleaving][35975]\n * [Update lifetime errors to specifically note temporaries][36171]\n * [Special case a few colors for Windows][36178]\n@@ -1966,7 +1963,7 @@ Language\n   useful](https://github.com/rust-lang/rust/pull/34908)\n * [`macro_rules!` `stmt` matchers correctly consume the entire contents when\n   inside non-braces invocations](https://github.com/rust-lang/rust/pull/34886)\n-* [Semicolons are properly required as statement delimeters inside\n+* [Semicolons are properly required as statement delimiters inside\n   `macro_rules!` invocations](https://github.com/rust-lang/rust/pull/34660)\n * [`cfg_attr` works on `path` attributes](https://github.com/rust-lang/rust/pull/34546)\n \n@@ -2191,7 +2188,7 @@ Compatibility Notes\n * [`const`s and `static`s may not have unsized types](https://github.com/rust-lang/rust/pull/34443)\n * [The new follow-set rules that place restrictions on `macro_rules!`\n   in order to ensure syntax forward-compatibility have been enabled](https://github.com/rust-lang/rust/pull/33982)\n-  This was an [ammendment to RFC 550](https://github.com/rust-lang/rfcs/pull/1384),\n+  This was an [amendment to RFC 550](https://github.com/rust-lang/rfcs/pull/1384),\n   and has been a warning since 1.10.\n * [`cfg` attribute process has been refactored to fix various bugs](https://github.com/rust-lang/rust/pull/33706).\n   This causes breakage in some corner cases.\n@@ -3348,7 +3345,7 @@ Libraries\n * `FromStr` is [implemented for `SockAddrV4` and `SockAddrV6`][1.5s].\n * There are now `From` conversions [between floating point\n   types][1.5f] where the conversions are lossless.\n-* Thera are now `From` conversions [between integer types][1.5i] where\n+* There are now `From` conversions [between integer types][1.5i] where\n   the conversions are lossless.\n * [`fs::Metadata` implements `Clone`][1.5fs].\n * The `parse` method [accepts a leading \"+\" when parsing\n@@ -3548,7 +3545,7 @@ Libraries\n * [`IntoIterator` is implemented for references to `Option` and\n   `Result`][into2].\n * [`HashMap` and `HashSet` implement `Extend<&T>` where `T:\n-  Copy`][ext] as part of [RFC 839]. This will cause type inferance\n+  Copy`][ext] as part of [RFC 839]. This will cause type inference\n   breakage in rare situations.\n * [`BinaryHeap` implements `Debug`][bh2].\n * [`Borrow` and `BorrowMut` are implemented for fixed-size\n@@ -3559,7 +3556,7 @@ Libraries\n * `&mut T` where `T: std::fmt::Write` [also implements\n   `std::fmt::Write`][mutw].\n * [A stable regression in `VecDeque::push_back` and other\n-  capicity-altering methods that caused panics for zero-sized types\n+  capacity-altering methods that caused panics for zero-sized types\n   was fixed][vd].\n * [Function pointers implement traits for up to 12 parameters][fp2].\n \n@@ -3746,7 +3743,7 @@ Libraries\n   [better for long data][sh].\n * [`AtomicPtr`] implements [`Send`].\n * The [`read_to_end`] implementations for [`Stdin`] and [`File`]\n-  are now [specialized to use uninitalized buffers for increased\n+  are now [specialized to use uninitialized buffers for increased\n   performance][rte].\n * Lifetime parameters of foreign functions [are now resolved\n   properly][f].\n@@ -3875,7 +3872,7 @@ Highlights\n * This is the first release with [experimental support for linking\n   with the MSVC linker and lib C on Windows (instead of using the GNU\n   variants via MinGW)][win]. It is yet recommended only for the most\n-  intrepid Rusticians.\n+  intrepid Rustaceans.\n * Benchmark compilations are showing a 30% improvement in\n   bootstrapping over 1.1.\n \n@@ -4741,7 +4738,7 @@ Version 0.11.0 (2014-07-02)\n   * Libraries\n     * The standard library is now a \"facade\" over a number of underlying\n       libraries. This means that development on the standard library should\n-      be speeder due to smaller crates, as well as a clearer line between\n+      be speedier due to smaller crates, as well as a clearer line between\n       all dependencies.\n     * A new library, libcore, lives under the standard library's facade\n       which is Rust's \"0-assumption\" library, suitable for embedded and"}, {"sha": "95be9a396c17c3bd3aeef6fb98518f9aa236784d", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -1168,7 +1168,12 @@ impl Step for Rustfmt {\n             compiler: builder.compiler(stage, build.build),\n             target\n         }).expect(\"Rustfmt to build: toolstate is testing\");\n+        let cargofmt = builder.ensure(tool::Cargofmt {\n+            compiler: builder.compiler(stage, build.build),\n+            target\n+        }).expect(\"Cargofmt to build: toolstate is testing\");\n         install(&rustfmt, &image.join(\"bin\"), 0o755);\n+        install(&cargofmt, &image.join(\"bin\"), 0o755);\n         let doc = image.join(\"share/doc/rustfmt\");\n         install(&src.join(\"README.md\"), &doc, 0o644);\n         install(&src.join(\"LICENSE-MIT\"), &doc, 0o644);"}, {"sha": "fa3ba02482f569b81903c27ff85f716ae8a3ede3", "filename": "src/bootstrap/job.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fbootstrap%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fbootstrap%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fjob.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -185,7 +185,7 @@ pub unsafe fn setup(build: &mut Build) {\n                             0, FALSE, DUPLICATE_SAME_ACCESS);\n \n     // If this failed, well at least we tried! An example of DuplicateHandle\n-    // failing in the past has been when the wrong python2 package spawed this\n+    // failing in the past has been when the wrong python2 package spawned this\n     // build system (e.g. the `python2` package in MSYS instead of\n     // `mingw-w64-x86_64-python2`. Not sure why it failed, but the \"failure\n     // mode\" here is that we only clean everything up when the build system"}, {"sha": "bc275b7fc745c2b903aca80eec1cc71b5d757345", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -78,7 +78,7 @@ pub fn check(build: &mut Build) {\n     }\n \n     let mut cmd_finder = Finder::new();\n-    // If we've got a git directory we're gona need git to update\n+    // If we've got a git directory we're gonna need git to update\n     // submodules and learn about various other aspects.\n     if build.rust_info.is_git() {\n         cmd_finder.must_have(\"git\");"}, {"sha": "9b16ca0980acb22612b0fa480e12ff2cd44cdcf8", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 52, "deletions": 135, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -403,71 +403,66 @@ impl Step for Cargo {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-pub struct Clippy {\n-    pub compiler: Compiler,\n-    pub target: Interned<String>,\n-}\n+macro_rules! tool_extended {\n+    (($sel:ident, $builder:ident),\n+       $($name:ident,\n+       $toolstate:ident,\n+       $path:expr,\n+       $tool_name:expr,\n+       $extra_deps:block;)+) => {\n+        $(\n+            #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+        pub struct $name {\n+            pub compiler: Compiler,\n+            pub target: Interned<String>,\n+        }\n \n-impl Step for Clippy {\n-    type Output = Option<PathBuf>;\n-    const DEFAULT: bool = true;\n-    const ONLY_HOSTS: bool = true;\n+        impl Step for $name {\n+            type Output = Option<PathBuf>;\n+            const DEFAULT: bool = true;\n+            const ONLY_HOSTS: bool = true;\n \n-    fn should_run(run: ShouldRun) -> ShouldRun {\n-        let builder = run.builder;\n-        run.path(\"src/tools/clippy\").default_condition(builder.build.config.extended)\n-    }\n+            fn should_run(run: ShouldRun) -> ShouldRun {\n+                let builder = run.builder;\n+                run.path($path).default_condition(builder.build.config.extended)\n+            }\n \n-    fn make_run(run: RunConfig) {\n-        run.builder.ensure(Clippy {\n-            compiler: run.builder.compiler(run.builder.top_stage, run.builder.build.build),\n-            target: run.target,\n-        });\n+            fn make_run(run: RunConfig) {\n+                run.builder.ensure($name {\n+                    compiler: run.builder.compiler(run.builder.top_stage, run.builder.build.build),\n+                    target: run.target,\n+                });\n+            }\n+\n+            fn run($sel, $builder: &Builder) -> Option<PathBuf> {\n+                $extra_deps\n+                let toolstate = $builder.build.config.toolstate.$toolstate;\n+                $builder.ensure(ToolBuild {\n+                    compiler: $sel.compiler,\n+                    target: $sel.target,\n+                    tool: $tool_name,\n+                    mode: Mode::Librustc,\n+                    path: $path,\n+                    expectation: toolstate.passes(ToolState::Compiling),\n+                })\n+            }\n+        }\n+        )+\n     }\n+}\n \n-    fn run(self, builder: &Builder) -> Option<PathBuf> {\n+tool_extended!((self, builder),\n+    Cargofmt, rustfmt, \"src/tools/rustfmt\", \"cargo-fmt\", {};\n+    Clippy, clippy, \"src/tools/clippy\", \"clippy-driver\", {\n         // Clippy depends on procedural macros (serde), which requires a full host\n         // compiler to be available, so we need to depend on that.\n         builder.ensure(compile::Rustc {\n             compiler: self.compiler,\n             target: builder.build.build,\n         });\n-        builder.ensure(ToolBuild {\n-            compiler: self.compiler,\n-            target: self.target,\n-            tool: \"clippy-driver\",\n-            mode: Mode::Librustc,\n-            path: \"src/tools/clippy\",\n-            expectation: builder.build.config.toolstate.clippy.passes(ToolState::Compiling),\n-        })\n-    }\n-}\n-\n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-pub struct Rls {\n-    pub compiler: Compiler,\n-    pub target: Interned<String>,\n-}\n-\n-impl Step for Rls {\n-    type Output = Option<PathBuf>;\n-    const DEFAULT: bool = true;\n-    const ONLY_HOSTS: bool = true;\n-\n-    fn should_run(run: ShouldRun) -> ShouldRun {\n-        let builder = run.builder;\n-        run.path(\"src/tools/rls\").default_condition(builder.build.config.extended)\n-    }\n-\n-    fn make_run(run: RunConfig) {\n-        run.builder.ensure(Rls {\n-            compiler: run.builder.compiler(run.builder.top_stage, run.builder.build.build),\n-            target: run.target,\n-        });\n-    }\n-\n-    fn run(self, builder: &Builder) -> Option<PathBuf> {\n+    };\n+    Miri, miri, \"src/tools/miri\", \"miri\", {};\n+    Rls, rls, \"src/tools/rls\", \"rls\", {\n         builder.ensure(native::Openssl {\n             target: self.target,\n         });\n@@ -477,87 +472,9 @@ impl Step for Rls {\n             compiler: self.compiler,\n             target: builder.build.build,\n         });\n-        builder.ensure(ToolBuild {\n-            compiler: self.compiler,\n-            target: self.target,\n-            tool: \"rls\",\n-            mode: Mode::Librustc,\n-            path: \"src/tools/rls\",\n-            expectation: builder.build.config.toolstate.rls.passes(ToolState::Compiling),\n-        })\n-    }\n-}\n-\n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-pub struct Rustfmt {\n-    pub compiler: Compiler,\n-    pub target: Interned<String>,\n-}\n-\n-impl Step for Rustfmt {\n-    type Output = Option<PathBuf>;\n-    const DEFAULT: bool = true;\n-    const ONLY_HOSTS: bool = true;\n-\n-    fn should_run(run: ShouldRun) -> ShouldRun {\n-        let builder = run.builder;\n-        run.path(\"src/tools/rustfmt\").default_condition(builder.build.config.extended)\n-    }\n-\n-    fn make_run(run: RunConfig) {\n-        run.builder.ensure(Rustfmt {\n-            compiler: run.builder.compiler(run.builder.top_stage, run.builder.build.build),\n-            target: run.target,\n-        });\n-    }\n-\n-    fn run(self, builder: &Builder) -> Option<PathBuf> {\n-        builder.ensure(ToolBuild {\n-            compiler: self.compiler,\n-            target: self.target,\n-            tool: \"rustfmt\",\n-            mode: Mode::Librustc,\n-            path: \"src/tools/rustfmt\",\n-            expectation: builder.build.config.toolstate.rustfmt.passes(ToolState::Compiling),\n-        })\n-    }\n-}\n-\n-\n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-pub struct Miri {\n-    pub compiler: Compiler,\n-    pub target: Interned<String>,\n-}\n-\n-impl Step for Miri {\n-    type Output = Option<PathBuf>;\n-    const DEFAULT: bool = true;\n-    const ONLY_HOSTS: bool = true;\n-\n-    fn should_run(run: ShouldRun) -> ShouldRun {\n-        let build_miri = run.builder.build.config.test_miri;\n-        run.path(\"src/tools/miri\").default_condition(build_miri)\n-    }\n-\n-    fn make_run(run: RunConfig) {\n-        run.builder.ensure(Miri {\n-            compiler: run.builder.compiler(run.builder.top_stage, run.builder.build.build),\n-            target: run.target,\n-        });\n-    }\n-\n-    fn run(self, builder: &Builder) -> Option<PathBuf> {\n-        builder.ensure(ToolBuild {\n-            compiler: self.compiler,\n-            target: self.target,\n-            tool: \"miri\",\n-            mode: Mode::Librustc,\n-            path: \"src/tools/miri\",\n-            expectation: builder.build.config.toolstate.miri.passes(ToolState::Compiling),\n-        })\n-    }\n-}\n+    };\n+    Rustfmt, rustfmt, \"src/tools/rustfmt\", \"rustfmt\", {};\n+);\n \n impl<'a> Builder<'a> {\n     /// Get a `Command` which is ready to run `tool` in `stage` built for"}, {"sha": "8d4dbc399986fa1865208170018d51c450ef3f0b", "filename": "src/ci/docker/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fci%2Fdocker%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fci%2Fdocker%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2FREADME.md?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -36,14 +36,14 @@ a Docker image.\n \n     1. Select the \"default\" virtual machine inside VirtualBox, then click\n         \"Settings\"\n-    2. Go to \"Shared Folders\", click \"Add shared foldrer\" (the folder icon with\n+    2. Go to \"Shared Folders\", click \"Add shared folder\" (the folder icon with\n         a plus sign), fill in the following information, then click \"OK\":\n \n         * Folder path: `E:\\rust`\n         * Folder name: `e/rust`\n         * Read-only: \u2610 *unchecked*\n         * Auto-mount: \u2611 *checked*\n-        * Make Permanant: \u2611 *checked*\n+        * Make Permanent: \u2611 *checked*\n \n 3. VirtualBox might not support creating symbolic links inside a shared folder\n     by default. You can enable it manually by running these from `cmd.exe`:"}, {"sha": "5b4314d57e6ccd7968971032c7a80c05f00d62e4", "filename": "src/ci/docker/dist-x86_64-netbsd/build-netbsd-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -52,7 +52,7 @@ curl $URL/2017-03-17-netbsd-comp.tgz | \\\n cd usr/src\n \n # The options, in order, do the following\n-# * this is an unpriviledged build\n+# * this is an unprivileged build\n # * output to a predictable location\n # * disable various uneeded stuff\n MKUNPRIVED=yes TOOLDIR=/x-tools/x86_64-unknown-netbsd \\"}, {"sha": "ffb3532f497f99077628396d554abd25dab27a5a", "filename": "src/ci/run.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -37,7 +37,7 @@ if [ \"$DIST_SRC\" = \"\" ]; then\n fi\n \n # If we're deploying artifacts then we set the release channel, otherwise if\n-# we're not deploying then we want to be sure to enable all assertions becauase\n+# we're not deploying then we want to be sure to enable all assertions because\n # we'll be running tests\n #\n # FIXME: need a scheme for changing this `nightly` value to `beta` and `stable`"}, {"sha": "e51c63cf008981ae5f4cfcfcbdb2f77cd6bb9f85", "filename": "src/doc/rustdoc/src/command-line-arguments.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -279,7 +279,7 @@ $ rustdoc README.md --markdown-playground-url https://play.rust-lang.org/\n ```\n \n When rendering a Markdown file, this flag gives the base URL of the Rust\n-Playround, to use for generating `Run` buttons.\n+Playground, to use for generating `Run` buttons.\n \n \n ## `--markdown-no-toc`: don't generate a table of contents\n@@ -291,7 +291,7 @@ $ rustdoc README.md --markdown-no-toc\n ```\n \n When generating documentation from a Markdown file, by default, `rustdoc` will\n-generate a table of contents. This flag supresses that, and no TOC will be\n+generate a table of contents. This flag suppresses that, and no TOC will be\n generated.\n \n "}, {"sha": "e5a603a3709f6453dc4eaa4ca4610b69bbd94afe", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -50,7 +50,7 @@ running them. Here's the full algorithm rustdoc uses to preprocess examples:\n 5. Finally, if the example does not contain `fn main`, the remainder of the\n    text is wrapped in `fn main() { your_code }`.\n \n-For more about that caveat in rule 4, see \"Documeting Macros\" below.\n+For more about that caveat in rule 4, see \"Documenting Macros\" below.\n \n ## Hiding portions of the example\n "}, {"sha": "5c8124c9c6b7d459e2b19ec4a2cf381991e8ca34", "filename": "src/doc/unstable-book/src/language-features/optin-builtin-traits.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foptin-builtin-traits.md", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foptin-builtin-traits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foptin-builtin-traits.md?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -10,7 +10,7 @@ The `optin_builtin_traits` feature gate allows you to define auto traits.\n \n Auto traits, like [`Send`] or [`Sync`] in the standard library, are marker traits\n that are automatically implemented for every type, unless the type, or a type it contains, \n-has explictly opted out via a negative impl. \n+has explicitly opted out via a negative impl. \n \n [`Send`]: https://doc.rust-lang.org/std/marker/trait.Send.html\n [`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html"}, {"sha": "d845c99a88a691946d439861d7df4acec850a998", "filename": "src/doc/unstable-book/src/language-features/unboxed-closures.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funboxed-closures.md", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funboxed-closures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funboxed-closures.md?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -9,7 +9,7 @@ See Also: [`fn_traits`](library-features/fn-traits.html)\n ----\n \n The `unboxed_closures` feature allows you to write functions using the `\"rust-call\"` ABI,\n-required for implmenting the [`Fn*`] family of traits. `\"rust-call\"` functions must have \n+required for implementing the [`Fn*`] family of traits. `\"rust-call\"` functions must have \n exactly one (non self) argument, a tuple representing the argument list.\n \n [`Fn*`]: https://doc.rust-lang.org/std/ops/trait.Fn.html"}, {"sha": "2cfc8698c4b67f7e9c8c9cb569aaa54758645542", "filename": "src/etc/installer/exe/modpath.iss", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fetc%2Finstaller%2Fexe%2Fmodpath.iss", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fetc%2Finstaller%2Fexe%2Fmodpath.iss", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Finstaller%2Fexe%2Fmodpath.iss?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -144,7 +144,7 @@ begin\n \tend;\n end;\n \n-// Split a string into an array using passed delimeter\n+// Split a string into an array using passed delimiter\n procedure Explode(var Dest: TArrayOfString; Text: String; Separator: String);\n var\n \ti: Integer;"}, {"sha": "7148a1143fd46e985da8054a584eddf904817951", "filename": "src/liballoc/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fliballoc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fliballoc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ffmt.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -536,7 +536,7 @@ use string;\n /// assert_eq!(s, \"Hello, world!\");\n /// ```\n ///\n-/// Please note that using [`format!`] might be preferrable.\n+/// Please note that using [`format!`] might be preferable.\n /// Example:\n ///\n /// ```"}, {"sha": "472eef77d7956411ddfa93d4ab60d7e291860ef9", "filename": "src/liballoc/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fliballoc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fliballoc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fmacros.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -72,7 +72,7 @@ macro_rules! vec {\n \n /// Creates a `String` using interpolation of runtime expressions.\n ///\n-/// The first argument `format!` recieves is a format string.  This must be a string\n+/// The first argument `format!` receives is a format string.  This must be a string\n /// literal.  The power of the formatting string is in the `{}`s contained.\n ///\n /// Additional parameters passed to `format!` replace the `{}`s within the"}, {"sha": "58f08fd8bc11d854216f571034d8d0213c53606e", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -346,7 +346,7 @@ impl<T> Rc<T> {\n             unsafe {\n                 let val = ptr::read(&*this); // copy the contained object\n \n-                // Indicate to Weaks that they can't be promoted by decrememting\n+                // Indicate to Weaks that they can't be promoted by decrementing\n                 // the strong count, and then remove the implicit \"strong weak\"\n                 // pointer while also handling drop logic by just crafting a\n                 // fake Weak."}, {"sha": "cd0f4a22e9cfac32009a54cb535cfab4260129b8", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -596,7 +596,7 @@ impl String {\n     /// Decode a UTF-16 encoded vector `v` into a `String`, returning [`Err`]\n     /// if `v` contains any invalid data.\n     ///\n-    /// [`Err`]: ../../std/result/enum.Result.htlm#variant.Err\n+    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///"}, {"sha": "a14a5d32738b3198dbdec3c7c9de9eada796c063", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -1427,12 +1427,12 @@ mod pattern {\n         Reject(6, 7),\n         Match (7, 7),\n     ]);\n-    make_test!(str_searcher_mulibyte_haystack, \" \", \"\u251c\u2500\u2500\", [\n+    make_test!(str_searcher_multibyte_haystack, \" \", \"\u251c\u2500\u2500\", [\n         Reject(0, 3),\n         Reject(3, 6),\n         Reject(6, 9),\n     ]);\n-    make_test!(str_searcher_empty_needle_mulibyte_haystack, \"\", \"\u251c\u2500\u2500\", [\n+    make_test!(str_searcher_empty_needle_multibyte_haystack, \"\", \"\u251c\u2500\u2500\", [\n         Match (0, 0),\n         Reject(0, 3),\n         Match (3, 3),\n@@ -1455,7 +1455,7 @@ mod pattern {\n         Match (5, 6),\n         Reject(6, 7),\n     ]);\n-    make_test!(char_searcher_mulibyte_haystack, ' ', \"\u251c\u2500\u2500\", [\n+    make_test!(char_searcher_multibyte_haystack, ' ', \"\u251c\u2500\u2500\", [\n         Reject(0, 3),\n         Reject(3, 6),\n         Reject(6, 9),"}, {"sha": "c29449a241e4576dbf447252e9b59eebe02dd374", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -1089,7 +1089,7 @@ impl<T> Vec<T> {\n         // Memory safety\n         //\n         // When the Drain is first created, it shortens the length of\n-        // the source vector to make sure no uninitalized or moved-from elements\n+        // the source vector to make sure no uninitialized or moved-from elements\n         // are accessible at all if the Drain's destructor never gets to run.\n         //\n         // Drain will ptr::read out the values to remove."}, {"sha": "8bdb29d25606f81756b37437032f286dadcad96d", "filename": "src/libbacktrace/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Flibbacktrace%2Fconfigure", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Flibbacktrace%2Fconfigure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fconfigure?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -14584,7 +14584,7 @@ func_basename ()\n #             to NONDIR_REPLACEMENT.\n #             value returned in \"$func_dirname_result\"\n #   basename: Compute filename of FILE.\n-#             value retuned in \"$func_basename_result\"\n+#             value returned in \"$func_basename_result\"\n # Implementation must be kept synchronized with func_dirname\n # and func_basename. For efficiency, we do not delegate to\n # those functions but instead duplicate the functionality here."}, {"sha": "eff9e62be8a05644a842fd99ca5ae814282797b0", "filename": "src/libbacktrace/ltmain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Flibbacktrace%2Fltmain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Flibbacktrace%2Fltmain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fltmain.sh?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -177,7 +177,7 @@ basename=\"s,^.*/,,\"\n #             to NONDIR_REPLACEMENT.\n #             value returned in \"$func_dirname_result\"\n #   basename: Compute filename of FILE.\n-#             value retuned in \"$func_basename_result\"\n+#             value returned in \"$func_basename_result\"\n # Implementation must be kept synchronized with func_dirname\n # and func_basename. For efficiency, we do not delegate to\n # those functions but instead duplicate the functionality here."}, {"sha": "cc324b585bcf9143a21c8cb1402607c8876fd215", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -952,7 +952,7 @@ pub trait UpperExp {\n /// assert_eq!(output, \"Hello world!\");\n /// ```\n ///\n-/// Please note that using [`write!`] might be preferrable. Example:\n+/// Please note that using [`write!`] might be preferable. Example:\n ///\n /// ```\n /// use std::fmt::Write;"}, {"sha": "8858023ec1d7ba6eaececfc866d1920a904aeed0", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -17,8 +17,8 @@ use std::u32;\n \n newtype_index!(CrateNum\n     {\n-        derive[Debug]\n         ENCODABLE = custom\n+        DEBUG_FORMAT = \"crate{}\",\n \n         /// Item definitions in the currently-compiled crate would have the CrateNum\n         /// LOCAL_CRATE in their DefId.\n@@ -172,17 +172,19 @@ pub struct DefId {\n \n impl fmt::Debug for DefId {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"DefId {{ krate: {:?}, index: {:?}\",\n-               self.krate, self.index)?;\n+        write!(f, \"DefId({:?}/{}:{}\",\n+               self.krate.index(),\n+               self.index.address_space().index(),\n+               self.index.as_array_index())?;\n \n         ty::tls::with_opt(|opt_tcx| {\n             if let Some(tcx) = opt_tcx {\n-                write!(f, \" => {}\", tcx.def_path_debug_str(*self))?;\n+                write!(f, \" ~ {}\", tcx.def_path_debug_str(*self))?;\n             }\n             Ok(())\n         })?;\n \n-        write!(f, \" }}\")\n+        write!(f, \")\")\n     }\n }\n "}, {"sha": "21eb772b1b37664d09a2c797aa87d0d57c4cc2a2", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -531,13 +531,15 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n                       id: ast::NodeId,\n                       span: syntax_pos::Span,\n                       name: ast::Name,\n-                      node_type: &str) {\n+                      node_type: &str,\n+                      participle: &str) {\n         if !name.as_str().starts_with(\"_\") {\n             self.tcx\n                 .lint_node(lint::builtin::DEAD_CODE,\n                            id,\n                            span,\n-                           &format!(\"{} is never used: `{}`\", node_type, name));\n+                           &format!(\"{} is never {}: `{}`\",\n+                                    node_type, participle, name));\n         }\n     }\n }\n@@ -570,7 +572,8 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n                 item.id,\n                 span,\n                 item.name,\n-                item.node.descriptive_variant()\n+                item.node.descriptive_variant(),\n+                \"used\",\n             );\n         } else {\n             // Only continue if we didn't warn\n@@ -583,23 +586,24 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n                      g: &'tcx hir::Generics,\n                      id: ast::NodeId) {\n         if self.should_warn_about_variant(&variant.node) {\n-            self.warn_dead_code(variant.node.data.id(), variant.span, variant.node.name, \"variant\");\n+            self.warn_dead_code(variant.node.data.id(), variant.span, variant.node.name,\n+                                \"variant\", \"constructed\");\n         } else {\n             intravisit::walk_variant(self, variant, g, id);\n         }\n     }\n \n     fn visit_foreign_item(&mut self, fi: &'tcx hir::ForeignItem) {\n         if self.should_warn_about_foreign_item(fi) {\n-            self.warn_dead_code(fi.id, fi.span, fi.name, fi.node.descriptive_variant());\n+            self.warn_dead_code(fi.id, fi.span, fi.name,\n+                                fi.node.descriptive_variant(), \"used\");\n         }\n         intravisit::walk_foreign_item(self, fi);\n     }\n \n     fn visit_struct_field(&mut self, field: &'tcx hir::StructField) {\n         if self.should_warn_about_field(&field) {\n-            self.warn_dead_code(field.id, field.span,\n-                                field.name, \"field\");\n+            self.warn_dead_code(field.id, field.span, field.name, \"field\", \"used\");\n         }\n         intravisit::walk_struct_field(self, field);\n     }\n@@ -611,14 +615,15 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n                     self.warn_dead_code(impl_item.id,\n                                         impl_item.span,\n                                         impl_item.name,\n-                                        \"associated const\");\n+                                        \"associated const\",\n+                                        \"used\");\n                 }\n                 self.visit_nested_body(body_id)\n             }\n             hir::ImplItemKind::Method(_, body_id) => {\n                 if !self.symbol_is_live(impl_item.id, None) {\n                     let span = self.tcx.sess.codemap().def_span(impl_item.span);\n-                    self.warn_dead_code(impl_item.id, span, impl_item.name, \"method\");\n+                    self.warn_dead_code(impl_item.id, span, impl_item.name, \"method\", \"used\");\n                 }\n                 self.visit_nested_body(body_id)\n             }"}, {"sha": "1b39e029604d5c63aec60a0de3098b7b5658b8f3", "filename": "src/librustc_data_structures/array_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Flibrustc_data_structures%2Farray_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Flibrustc_data_structures%2Farray_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Farray_vec.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -111,7 +111,7 @@ impl<A: Array> ArrayVec<A> {\n         // Memory safety\n         //\n         // When the Drain is first created, it shortens the length of\n-        // the source vector to make sure no uninitalized or moved-from elements\n+        // the source vector to make sure no uninitialized or moved-from elements\n         // are accessible at all if the Drain's destructor never gets to run.\n         //\n         // Drain will ptr::read out the values to remove."}, {"sha": "c2f4701999ea90aa01928079718b42487fc0ada7", "filename": "src/librustc_errors/snippet.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Flibrustc_errors%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Flibrustc_errors%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fsnippet.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -70,7 +70,7 @@ impl MultilineAnnotation {\n \n     pub fn as_end(&self) -> Annotation {\n         Annotation {\n-            start_col: self.end_col - 1,\n+            start_col: self.end_col.saturating_sub(1),\n             end_col: self.end_col,\n             is_primary: self.is_primary,\n             label: self.label.clone(),"}, {"sha": "c95f45c872dbff4f147fe769b6ee98325ceaaee3", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -3680,18 +3680,24 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n             }\n             let mut links = HashSet::new();\n             let ret = v.iter()\n-                       .filter_map(|i| if let Some(ref i) = i.inner_impl().trait_ {\n-                           let i_display = format!(\"{:#}\", i);\n-                           let out = Escape(&i_display);\n-                           let encoded = small_url_encode(&format!(\"{:#}\", i));\n-                           let generated = format!(\"<a href=\\\"#impl-{}\\\">{}</a>\", encoded, out);\n-                           if !links.contains(&generated) && links.insert(generated.clone()) {\n-                               Some(generated)\n+                       .filter_map(|i| {\n+                           let is_negative_impl = is_negative_impl(i.inner_impl());\n+                           if let Some(ref i) = i.inner_impl().trait_ {\n+                               let i_display = format!(\"{:#}\", i);\n+                               let out = Escape(&i_display);\n+                               let encoded = small_url_encode(&format!(\"{:#}\", i));\n+                               let generated = format!(\"<a href=\\\"#impl-{}\\\">{}{}</a>\",\n+                                                       encoded,\n+                                                       if is_negative_impl { \"!\" } else { \"\" },\n+                                                       out);\n+                               if !links.contains(&generated) && links.insert(generated.clone()) {\n+                                   Some(generated)\n+                               } else {\n+                                   None\n+                               }\n                            } else {\n                                None\n                            }\n-                       } else {\n-                           None\n                        })\n                        .collect::<String>();\n             if !ret.is_empty() {\n@@ -3738,6 +3744,10 @@ fn extract_for_impl_name(item: &clean::Item) -> Option<(String, String)> {\n     }\n }\n \n+fn is_negative_impl(i: &clean::Impl) -> bool {\n+    i.polarity == Some(clean::ImplPolarity::Negative)\n+}\n+\n fn sidebar_trait(fmt: &mut fmt::Formatter, it: &clean::Item,\n                  t: &clean::Trait) -> fmt::Result {\n     let mut sidebar = String::new();"}, {"sha": "54ee8880ec3c1d0e7b3b992f8c3c7375181ceac7", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -366,16 +366,13 @@ fn append_to_string<F>(buf: &mut String, f: F) -> Result<usize>\n fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize> {\n     let start_len = buf.len();\n     let mut g = Guard { len: buf.len(), buf: buf };\n-    let mut new_write_size = 16;\n     let ret;\n     loop {\n         if g.len == g.buf.len() {\n-            if new_write_size < DEFAULT_BUF_SIZE {\n-                new_write_size *= 2;\n-            }\n             unsafe {\n-                g.buf.reserve(new_write_size);\n-                g.buf.set_len(g.len + new_write_size);\n+                g.buf.reserve(32);\n+                let capacity = g.buf.capacity();\n+                g.buf.set_len(capacity);\n                 r.initializer().initialize(&mut g.buf[g.len..]);\n             }\n         }"}, {"sha": "1ca7e66ed9ca91aa1755ff896535b7ea6bafde71", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -759,7 +759,7 @@ impl hash::Hash for SocketAddrV6 {\n /// ```\n ///\n /// [`TcpStream::connect`] is an example of an function that utilizes\n-/// `ToSocketsAddr` as a trait bound on its parameter in order to accept\n+/// `ToSocketAddrs` as a trait bound on its parameter in order to accept\n /// different types:\n ///\n /// ```no_run"}, {"sha": "4e35cf840de96434d6e1ec3512258836627e31b2", "filename": "src/libstd/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -3752,7 +3752,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_eq_recievers() {\n+    fn test_eq_receivers() {\n         use borrow::Cow;\n \n         let borrowed: &Path = Path::new(\"foo/bar\");"}, {"sha": "80ac0cb4faf7da04150a989de9915a1d2e226ffb", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -24,11 +24,12 @@ use syntax_pos::{self, MacroBacktrace, Span, SpanLabel, MultiSpan};\n use errors::registry::Registry;\n use errors::{DiagnosticBuilder, SubDiagnostic, CodeSuggestion, CodeMapper};\n use errors::DiagnosticId;\n-use errors::emitter::Emitter;\n+use errors::emitter::{Emitter, EmitterWriter};\n \n use std::rc::Rc;\n use std::io::{self, Write};\n use std::vec;\n+use std::sync::{Arc, Mutex};\n \n use rustc_serialize::json::{as_json, as_pretty_json};\n \n@@ -95,7 +96,7 @@ struct Diagnostic {\n     spans: Vec<DiagnosticSpan>,\n     /// Associated diagnostic messages.\n     children: Vec<Diagnostic>,\n-    /// The message as rustc would render it. Currently this is always `None`\n+    /// The message as rustc would render it.\n     rendered: Option<String>,\n }\n \n@@ -170,6 +171,27 @@ impl Diagnostic {\n                 rendered: None,\n             }\n         });\n+\n+        // generate regular command line output and store it in the json\n+\n+        // A threadsafe buffer for writing.\n+        #[derive(Default, Clone)]\n+        struct BufWriter(Arc<Mutex<Vec<u8>>>);\n+\n+        impl Write for BufWriter {\n+            fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+                self.0.lock().unwrap().write(buf)\n+            }\n+            fn flush(&mut self) -> io::Result<()> {\n+                self.0.lock().unwrap().flush()\n+            }\n+        }\n+        let buf = BufWriter::default();\n+        let output = buf.clone();\n+        EmitterWriter::new(Box::new(buf), Some(je.cm.clone()), false).emit(db);\n+        let output = Arc::try_unwrap(output.0).unwrap().into_inner().unwrap();\n+        let output = String::from_utf8(output).unwrap();\n+\n         Diagnostic {\n             message: db.message(),\n             code: DiagnosticCode::map_opt_string(db.code.clone(), je),\n@@ -178,7 +200,7 @@ impl Diagnostic {\n             children: db.children.iter().map(|c| {\n                 Diagnostic::from_sub_diagnostic(c, je)\n             }).chain(sugg).collect(),\n-            rendered: None,\n+            rendered: Some(output),\n         }\n     }\n "}, {"sha": "d6ca5e6b1d969bdd2549db4e541c3f7b6d6c8caa", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -74,7 +74,7 @@ pub enum pub_enum3 {\n enum priv_enum { foo2, bar2 } //~ ERROR: enum is never used\n enum used_enum {\n     foo3,\n-    bar3 //~ ERROR variant is never used\n+    bar3 //~ ERROR variant is never constructed\n }\n \n fn f<T>() {}"}, {"sha": "1296cf46e6fe4d803d3a5124ba130941c2e71b77", "filename": "src/test/compile-fail/lint-dead-code-4.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -22,8 +22,8 @@ fn field_read(f: Foo) -> usize {\n }\n \n enum XYZ {\n-    X, //~ ERROR variant is never used\n-    Y { //~ ERROR variant is never used\n+    X, //~ ERROR variant is never constructed\n+    Y { //~ ERROR variant is never constructed\n         a: String,\n         b: i32,\n         c: i32,\n@@ -43,13 +43,13 @@ enum ABC { //~ ERROR enum is never used\n \n // ensure struct variants get warning for their fields\n enum IJK {\n-    I, //~ ERROR variant is never used\n+    I, //~ ERROR variant is never constructed\n     J {\n         a: String,\n         b: i32, //~ ERROR field is never used\n         c: i32, //~ ERROR field is never used\n     },\n-    K //~ ERROR variant is never used\n+    K //~ ERROR variant is never constructed\n \n }\n "}, {"sha": "ee5cf24823d408a80bfab5dea3454172fe31cdbd", "filename": "src/test/compile-fail/lint-dead-code-5.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftest%2Fcompile-fail%2Flint-dead-code-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftest%2Fcompile-fail%2Flint-dead-code-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-5.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -13,15 +13,15 @@\n \n enum Enum1 {\n     Variant1(isize),\n-    Variant2 //~ ERROR: variant is never used\n+    Variant2 //~ ERROR: variant is never constructed\n }\n \n enum Enum2 {\n     Variant3(bool),\n     #[allow(dead_code)]\n     Variant4(isize),\n-    Variant5 { _x: isize }, //~ ERROR: variant is never used: `Variant5`\n-    Variant6(isize), //~ ERROR: variant is never used: `Variant6`\n+    Variant5 { _x: isize }, //~ ERROR: variant is never constructed: `Variant5`\n+    Variant6(isize), //~ ERROR: variant is never constructed: `Variant6`\n     _Variant7,\n }\n "}, {"sha": "3301560c315008f80bdfbf5e2fec3426d3acec14", "filename": "src/test/compile-fail/lint-dead-code-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftest%2Fcompile-fail%2Flint-dead-code-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftest%2Fcompile-fail%2Flint-dead-code-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-variant.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -12,7 +12,7 @@\n \n #[derive(Clone)]\n enum Enum {\n-    Variant1, //~ ERROR: variant is never used\n+    Variant1, //~ ERROR: variant is never constructed\n     Variant2,\n }\n "}, {"sha": "dd8bd8fcff24c7cb768017c0cb1f48bd453773dd", "filename": "src/test/incremental/hashes/let_expressions.rs", "status": "modified", "additions": 36, "deletions": 210, "changes": 246, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -32,26 +32,9 @@ pub fn change_name() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"MirValidated\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"MirValidated\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"MirOptimized\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"MirOptimized\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeckTables\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"FnSignature\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"FnSignature\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\",\n+    except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n pub fn change_name() {\n     let _y = 2u64;\n }\n@@ -65,26 +48,11 @@ pub fn add_type() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\",\n+    except=\"HirBody,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-#[rustc_clean(label=\"MirValidated\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"MirValidated\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"MirOptimized\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"MirOptimized\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeckTables\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"FnSignature\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"FnSignature\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n pub fn add_type() {\n     let _x: u32 = 2u32;\n }\n@@ -98,26 +66,11 @@ pub fn change_type() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\",\n+    except=\"HirBody,TypeckTables,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"MirValidated\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"MirValidated\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"MirOptimized\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"MirOptimized\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeckTables\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"FnSignature\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"FnSignature\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n pub fn change_type() {\n     let _x: u8 = 2;\n }\n@@ -131,26 +84,11 @@ pub fn change_mutability_of_reference_type() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\",\n+    except=\"HirBody,TypeckTables,MirValidated\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"MirValidated\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"MirValidated\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"MirOptimized\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"MirOptimized\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeckTables\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"FnSignature\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"FnSignature\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n pub fn change_mutability_of_reference_type() {\n     let _x: &mut u64;\n }\n@@ -164,26 +102,11 @@ pub fn change_mutability_of_slot() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\",\n+    except=\"HirBody,TypeckTables,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"MirValidated\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"MirValidated\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"MirOptimized\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"MirOptimized\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeckTables\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"FnSignature\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"FnSignature\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n pub fn change_mutability_of_slot() {\n     let _x: u64 = 0;\n }\n@@ -197,26 +120,11 @@ pub fn change_simple_binding_to_pattern() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\",\n+    except=\"HirBody,TypeckTables,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"MirValidated\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"MirValidated\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"MirOptimized\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"MirOptimized\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeckTables\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"FnSignature\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"FnSignature\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n pub fn change_simple_binding_to_pattern() {\n     let (_a, _b) = (0u8, 'x');\n }\n@@ -230,26 +138,11 @@ pub fn change_name_in_pattern() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\",\n+    except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"MirValidated\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"MirValidated\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"MirOptimized\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"MirOptimized\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeckTables\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"FnSignature\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"FnSignature\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n pub fn change_name_in_pattern() {\n     let (_a, _c) = (1u8, 'y');\n }\n@@ -263,26 +156,11 @@ pub fn add_ref_in_pattern() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\",\n+    except=\"HirBody,TypeckTables,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"MirValidated\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"MirValidated\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"MirOptimized\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"MirOptimized\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeckTables\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"FnSignature\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"FnSignature\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n pub fn add_ref_in_pattern() {\n     let (ref _a, _b) = (1u8, 'y');\n }\n@@ -296,18 +174,11 @@ pub fn add_amp_in_pattern() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\",\n+    except=\"HirBody,TypeckTables,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"MirValidated\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"MirValidated\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"MirOptimized\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"MirOptimized\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeckTables\", cfg=\"cfail3\")]\n pub fn add_amp_in_pattern() {\n     let (&_a, _b) = (&1u8, 'y');\n }\n@@ -321,26 +192,11 @@ pub fn change_mutability_of_binding_in_pattern() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\",\n+    except=\"HirBody,TypeckTables,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"MirValidated\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"MirValidated\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"MirOptimized\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"MirOptimized\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeckTables\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"FnSignature\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"FnSignature\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n pub fn change_mutability_of_binding_in_pattern() {\n     let (mut _a, _b) = (99u8, 'q');\n }\n@@ -354,26 +210,11 @@ pub fn add_initializer() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\",\n+    except=\"HirBody,TypeckTables,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"MirValidated\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"MirValidated\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"MirOptimized\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"MirOptimized\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeckTables\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"FnSignature\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"FnSignature\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n pub fn add_initializer() {\n     let _x: i16 = 3i16;\n }\n@@ -387,26 +228,11 @@ pub fn change_initializer() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\",\n+    except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"MirValidated\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"MirValidated\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"MirOptimized\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"MirOptimized\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeckTables\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"FnSignature\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"FnSignature\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n pub fn change_initializer() {\n     let _x = 5u16;\n }"}, {"sha": "4d2ba5e2b120c7cfd8bae548a12cb025314d4621", "filename": "src/test/mir-opt/issue-41697.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftest%2Fmir-opt%2Fissue-41697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftest%2Fmir-opt%2Fissue-41697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41697.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -12,7 +12,7 @@\n // artificial cycles: during type-checking, we had to get the MIR for\n // the constant expressions in `[u8; 2]`, which in turn would trigger\n // an attempt to get the item-path, which in turn would request the\n-// types of the impl, which would trigger a cycle. We supressed this\n+// types of the impl, which would trigger a cycle. We suppressed this\n // cycle now by forcing mir-dump to avoid asking for types of an impl.\n \n #![feature(rustc_attrs)]"}, {"sha": "b7360a0e08733b8df777bf74a28dceaa8afbcb27", "filename": "src/test/mir-opt/validate_1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -30,7 +30,7 @@ fn main() {\n // END RUST SOURCE\n // START rustc.{{impl}}-foo.EraseRegions.after.mir\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:5) => validate_1[317d]::{{impl}}[0]::foo[0] }, BrAnon(0)) Test, _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:5) => validate_1[317d]::{{impl}}[0]::foo[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId(0/0:5 ~ validate_1[317d]::{{impl}}[0]::foo[0]), BrAnon(0)) Test, _2: &ReFree(DefId(0/0:5 ~ validate_1[317d]::{{impl}}[0]::foo[0]), BrAnon(1)) mut i32]);\n //         ...\n //         return;\n //     }\n@@ -62,7 +62,7 @@ fn main() {\n // fn main::{{closure}}(_1: &ReErased [closure@NodeId(50)], _2: &ReErased mut i32) -> i32 {\n //     ...\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:11) => validate_1[317d]::main[0]::{{closure}}[0] }, BrEnv) [closure@NodeId(50)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:11) => validate_1[317d]::main[0]::{{closure}}[0] }, BrAnon(0)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId(0/1:11 ~ validate_1[317d]::main[0]::{{closure}}[0]), BrEnv) [closure@NodeId(50)], _2: &ReFree(DefId(0/1:11 ~ validate_1[317d]::main[0]::{{closure}}[0]), BrAnon(0)) mut i32]);\n //         StorageLive(_3);\n //         Validate(Suspend(ReScope(Remainder(BlockRemainder { block: ItemLocalId(22), first_statement_index: 0 }))), [(*_2): i32]);\n //         _3 = &ReErased (*_2);"}, {"sha": "39438af4b449a74366a4a01ce7e97b99906e148d", "filename": "src/test/mir-opt/validate_4.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -51,8 +51,8 @@ fn main() {\n // fn write_42::{{closure}}(_1: &ReErased [closure@NodeId(22)], _2: *mut i32) -> () {\n //     ...\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_4[317d]::write_42[0]::{{closure}}[0] }, BrEnv) [closure@NodeId(22)], _2: *mut i32]);\n-//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_4[317d]::write_42[0]::{{closure}}[0] }, BrEnv) [closure@NodeId(22)], _2: *mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId(0/1:9 ~ validate_4[317d]::write_42[0]::{{closure}}[0]), BrEnv) [closure@NodeId(22)], _2: *mut i32]);\n+//         Validate(Release, [_1: &ReFree(DefId(0/1:9 ~ validate_4[317d]::write_42[0]::{{closure}}[0]), BrEnv) [closure@NodeId(22)], _2: *mut i32]);\n //         (*_2) = const 23i32;\n //         return;\n //     }\n@@ -62,8 +62,8 @@ fn main() {\n // fn test(_1: &ReErased mut i32) -> () {\n //     ...\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:4) => validate_4[317d]::test[0] }, BrAnon(0)) mut i32]);\n-//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:4) => validate_4[317d]::test[0] }, BrAnon(0)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId(0/0:4 ~ validate_4[317d]::test[0]), BrAnon(0)) mut i32]);\n+//         Validate(Release, [_1: &ReFree(DefId(0/0:4 ~ validate_4[317d]::test[0]), BrAnon(0)) mut i32]);\n //         ...\n //         _2 = const write_42(_3) -> bb1;\n //     }\n@@ -78,8 +78,8 @@ fn main() {\n // fn main::{{closure}}(_1: &ReErased [closure@NodeId(60)], _2: &ReErased mut i32) -> bool {\n //     ...\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[317d]::main[0]::{{closure}}[0] }, BrEnv) [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[317d]::main[0]::{{closure}}[0] }, BrAnon(0)) mut i32]);\n-//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[317d]::main[0]::{{closure}}[0] }, BrEnv) [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[317d]::main[0]::{{closure}}[0] }, BrAnon(0)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId(0/1:10 ~ validate_4[317d]::main[0]::{{closure}}[0]), BrEnv) [closure@NodeId(60)], _2: &ReFree(DefId(0/1:10 ~ validate_4[317d]::main[0]::{{closure}}[0]), BrAnon(0)) mut i32]);\n+//         Validate(Release, [_1: &ReFree(DefId(0/1:10 ~ validate_4[317d]::main[0]::{{closure}}[0]), BrEnv) [closure@NodeId(60)], _2: &ReFree(DefId(0/1:10 ~ validate_4[317d]::main[0]::{{closure}}[0]), BrAnon(0)) mut i32]);\n //         StorageLive(_3);\n //         ...\n //         _0 = const write_42(_3) -> bb1;"}, {"sha": "043338c8089832514be617f08a1e1ccd9877468b", "filename": "src/test/mir-opt/validate_5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -37,7 +37,7 @@ fn main() {\n // fn test(_1: &ReErased mut i32) -> () {\n //     ...\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:4) => validate_5[317d]::test[0] }, BrAnon(0)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId(0/0:4 ~ validate_5[317d]::test[0]), BrAnon(0)) mut i32]);\n //         ...\n //         Validate(Release, [_2: bool, _3: *mut i32]);\n //         _2 = const write_42(_3) -> bb1;\n@@ -49,7 +49,7 @@ fn main() {\n // fn main::{{closure}}(_1: &ReErased [closure@NodeId(46)], _2: &ReErased mut i32) -> bool {\n //     ...\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_5[317d]::main[0]::{{closure}}[0] }, BrEnv) [closure@NodeId(46)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_5[317d]::main[0]::{{closure}}[0] }, BrAnon(0)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId(0/1:9 ~ validate_5[317d]::main[0]::{{closure}}[0]), BrEnv) [closure@NodeId(46)], _2: &ReFree(DefId(0/1:9 ~ validate_5[317d]::main[0]::{{closure}}[0]), BrAnon(0)) mut i32]);\n //         StorageLive(_3);\n //         StorageLive(_4);\n //         Validate(Suspend(ReScope(Node(ItemLocalId(9)))), [(*_2): i32]);"}, {"sha": "dc27b26241d59d97b6a1d14ab12dd227bd2ed82d", "filename": "src/test/rustdoc/negative-impl-sidebar.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftest%2Frustdoc%2Fnegative-impl-sidebar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftest%2Frustdoc%2Fnegative-impl-sidebar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fnegative-impl-sidebar.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(optin_builtin_traits)]\n+#![crate_name = \"foo\"]\n+\n+pub struct Foo;\n+\n+// @has foo/struct.Foo.html\n+// @has - '//*[@class=\"sidebar-title\"][@href=\"#implementations\"]' 'Trait Implementations'\n+// @has - '//*[@class=\"sidebar-links\"]/a' '!Sync'\n+impl !Sync for Foo {}"}, {"sha": "fe113eda3dd22ce6d67330b5a5d95b6b475183eb", "filename": "src/test/ui/lint/unused_parens_json_suggestion.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -87,5 +87,17 @@\n       \"rendered\": null\n     }\n   ],\n-  \"rendered\": null\n+  \"rendered\": \"warning: unnecessary parentheses around assigned value\n+  --> $DIR/unused_parens_json_suggestion.rs:24:14\n+   |\n+24 |     let _a = (1 / (2 + 3));\n+   |              ^^^^^^^^^^^^^ help: remove these parentheses\n+   |\n+note: lint level defined here\n+  --> $DIR/unused_parens_json_suggestion.rs:19:9\n+   |\n+19 | #![warn(unused_parens)]\n+   |         ^^^^^^^^^^^^^\n+\n+\"\n }"}, {"sha": "846d7df445d581610b409ceb995d87c309bccfc3", "filename": "src/test/ui/lint/use_suggestion_json.stderr", "status": "modified", "additions": 123, "deletions": 15, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -2,7 +2,72 @@\n   \"message\": \"cannot find type `Iter` in this scope\",\n   \"code\": {\n     \"code\": \"E0412\",\n-    \"explanation\": \"/nThe type name used is not in scope./n/nErroneous code examples:/n/n```compile_fail,E0412/nimpl Something {} // error: type name `Something` is not in scope/n/n// or:/n/ntrait Foo {/n    fn bar(N); // error: type name `N` is not in scope/n}/n/n// or:/n/nfn foo(x: T) {} // type name `T` is not in scope/n```/n/nTo fix this error, please verify you didn't misspell the type name, you did/ndeclare it or imported it into the scope. Examples:/n/n```/nstruct Something;/n/nimpl Something {} // ok!/n/n// or:/n/ntrait Foo {/n    type N;/n/n    fn bar(_: Self::N); // ok!/n}/n/n// or:/n/nfn foo<T>(x: T) {} // ok!/n```/n/nAnother case that causes this error is when a type is imported into a parent/nmodule. To fix this, you can follow the suggestion and use File directly or/n`use super::File;` which will import the types from the parent namespace. An/nexample that causes this error is below:/n/n```compile_fail,E0412/nuse std::fs::File;/n/nmod foo {/n    fn some_function(f: File) {}/n}/n```/n/n```/nuse std::fs::File;/n/nmod foo {/n    // either/n    use super::File;/n    // or/n    // use std::fs::File;/n    fn foo(f: File) {}/n}/n# fn main() {} // don't insert it for us; that'll break imports/n```/n\"\n+    \"explanation\": \"\n+The type name used is not in scope.\n+\n+Erroneous code examples:\n+\n+```compile_fail,E0412\n+impl Something {} // error: type name `Something` is not in scope\n+\n+// or:\n+\n+trait Foo {\n+    fn bar(N); // error: type name `N` is not in scope\n+}\n+\n+// or:\n+\n+fn foo(x: T) {} // type name `T` is not in scope\n+```\n+\n+To fix this error, please verify you didn't misspell the type name, you did\n+declare it or imported it into the scope. Examples:\n+\n+```\n+struct Something;\n+\n+impl Something {} // ok!\n+\n+// or:\n+\n+trait Foo {\n+    type N;\n+\n+    fn bar(_: Self::N); // ok!\n+}\n+\n+// or:\n+\n+fn foo<T>(x: T) {} // ok!\n+```\n+\n+Another case that causes this error is when a type is imported into a parent\n+module. To fix this, you can follow the suggestion and use File directly or\n+`use super::File;` which will import the types from the parent namespace. An\n+example that causes this error is below:\n+\n+```compile_fail,E0412\n+use std::fs::File;\n+\n+mod foo {\n+    fn some_function(f: File) {}\n+}\n+```\n+\n+```\n+use std::fs::File;\n+\n+mod foo {\n+    // either\n+    use super::File;\n+    // or\n+    // use std::fs::File;\n+    fn foo(f: File) {}\n+}\n+# fn main() {} // don't insert it for us; that'll break imports\n+```\n+\"\n   },\n   \"level\": \"error\",\n   \"spans\": [\n@@ -50,7 +115,9 @@\n             }\n           ],\n           \"label\": null,\n-          \"suggested_replacement\": \"use std::collections::binary_heap::Iter;/n/n\",\n+          \"suggested_replacement\": \"use std::collections::binary_heap::Iter;\n+\n+\",\n           \"expansion\": null\n         },\n         {\n@@ -70,7 +137,9 @@\n             }\n           ],\n           \"label\": null,\n-          \"suggested_replacement\": \"use std::collections::btree_map::Iter;/n/n\",\n+          \"suggested_replacement\": \"use std::collections::btree_map::Iter;\n+\n+\",\n           \"expansion\": null\n         },\n         {\n@@ -90,7 +159,9 @@\n             }\n           ],\n           \"label\": null,\n-          \"suggested_replacement\": \"use std::collections::btree_set::Iter;/n/n\",\n+          \"suggested_replacement\": \"use std::collections::btree_set::Iter;\n+\n+\",\n           \"expansion\": null\n         },\n         {\n@@ -110,7 +181,9 @@\n             }\n           ],\n           \"label\": null,\n-          \"suggested_replacement\": \"use std::collections::hash_map::Iter;/n/n\",\n+          \"suggested_replacement\": \"use std::collections::hash_map::Iter;\n+\n+\",\n           \"expansion\": null\n         },\n         {\n@@ -130,7 +203,9 @@\n             }\n           ],\n           \"label\": null,\n-          \"suggested_replacement\": \"use std::collections::hash_set::Iter;/n/n\",\n+          \"suggested_replacement\": \"use std::collections::hash_set::Iter;\n+\n+\",\n           \"expansion\": null\n         },\n         {\n@@ -150,7 +225,9 @@\n             }\n           ],\n           \"label\": null,\n-          \"suggested_replacement\": \"use std::collections::linked_list::Iter;/n/n\",\n+          \"suggested_replacement\": \"use std::collections::linked_list::Iter;\n+\n+\",\n           \"expansion\": null\n         },\n         {\n@@ -170,7 +247,9 @@\n             }\n           ],\n           \"label\": null,\n-          \"suggested_replacement\": \"use std::collections::vec_deque::Iter;/n/n\",\n+          \"suggested_replacement\": \"use std::collections::vec_deque::Iter;\n+\n+\",\n           \"expansion\": null\n         },\n         {\n@@ -190,7 +269,9 @@\n             }\n           ],\n           \"label\": null,\n-          \"suggested_replacement\": \"use std::option::Iter;/n/n\",\n+          \"suggested_replacement\": \"use std::option::Iter;\n+\n+\",\n           \"expansion\": null\n         },\n         {\n@@ -210,7 +291,9 @@\n             }\n           ],\n           \"label\": null,\n-          \"suggested_replacement\": \"use std::path::Iter;/n/n\",\n+          \"suggested_replacement\": \"use std::path::Iter;\n+\n+\",\n           \"expansion\": null\n         },\n         {\n@@ -230,7 +313,9 @@\n             }\n           ],\n           \"label\": null,\n-          \"suggested_replacement\": \"use std::result::Iter;/n/n\",\n+          \"suggested_replacement\": \"use std::result::Iter;\n+\n+\",\n           \"expansion\": null\n         },\n         {\n@@ -250,7 +335,9 @@\n             }\n           ],\n           \"label\": null,\n-          \"suggested_replacement\": \"use std::slice::Iter;/n/n\",\n+          \"suggested_replacement\": \"use std::slice::Iter;\n+\n+\",\n           \"expansion\": null\n         },\n         {\n@@ -270,21 +357,42 @@\n             }\n           ],\n           \"label\": null,\n-          \"suggested_replacement\": \"use std::sync::mpsc::Iter;/n/n\",\n+          \"suggested_replacement\": \"use std::sync::mpsc::Iter;\n+\n+\",\n           \"expansion\": null\n         }\n       ],\n       \"children\": [],\n       \"rendered\": null\n     }\n   ],\n-  \"rendered\": null\n+  \"rendered\": \"error[E0412]: cannot find type `Iter` in this scope\n+  --> $DIR/use_suggestion_json.rs:20:12\n+   |\n+20 |     let x: Iter;\n+   |            ^^^^ not found in this scope\n+help: possible candidates are found in other modules, you can import them into scope\n+   |\n+19 | use std::collections::binary_heap::Iter;\n+   |\n+19 | use std::collections::btree_map::Iter;\n+   |\n+19 | use std::collections::btree_set::Iter;\n+   |\n+19 | use std::collections::hash_map::Iter;\n+   |\n+and 8 other candidates\n+\n+\"\n }\n {\n   \"message\": \"aborting due to previous error\",\n   \"code\": null,\n   \"level\": \"error\",\n   \"spans\": [],\n   \"children\": [],\n-  \"rendered\": null\n+  \"rendered\": \"error: aborting due to previous error\n+\n+\"\n }"}, {"sha": "d04231bbac0894efa5c914a76fd0e97543bf457a", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -60,8 +60,8 @@ const TEST_REPOS: &'static [Test] = &[\n     },\n     Test {\n         name: \"servo\",\n-        repo: \"https://github.com/eddyb/servo\",\n-        sha: \"6031de9a397e2feba4ff98725991825f62b68518\",\n+        repo: \"https://github.com/servo/servo\",\n+        sha: \"17e97b9320fdb7cdb33bbc5f4d0fde0653bbf2e4\",\n         lock: None,\n         // Only test Stylo a.k.a. Quantum CSS, the parts of Servo going into Firefox.\n         // This takes much less time to build than all of Servo and supports stable Rust."}, {"sha": "1fd48881ba23613c8dbd2bef03b81edc1081bf50", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63739ab7b210c1a8c890c2ea5238a3284877daa3/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=63739ab7b210c1a8c890c2ea5238a3284877daa3", "patch": "@@ -2424,15 +2424,25 @@ actual:\\n\\\n     fn normalize_output(&self, output: &str, custom_rules: &[(String, String)]) -> String {\n         let parent_dir = self.testpaths.file.parent().unwrap();\n         let cflags = self.props.compile_flags.join(\" \");\n-        let parent_dir_str = if cflags.contains(\"--error-format json\")\n-                             || cflags.contains(\"--error-format pretty-json\") {\n+        let json = cflags.contains(\"--error-format json\") ||\n+                   cflags.contains(\"--error-format pretty-json\");\n+        let parent_dir_str = if json {\n             parent_dir.display().to_string().replace(\"\\\\\", \"\\\\\\\\\")\n         } else {\n             parent_dir.display().to_string()\n         };\n \n-        let mut normalized = output.replace(&parent_dir_str, \"$DIR\")\n-              .replace(\"\\\\\\\\\", \"\\\\\") // denormalize for paths on windows\n+        let mut normalized = output.replace(&parent_dir_str, \"$DIR\");\n+\n+        if json {\n+            // escaped newlines in json strings should be readable\n+            // in the stderr files. There's no point int being correct,\n+            // since only humans process the stderr files.\n+            // Thus we just turn escaped newlines back into newlines.\n+            normalized = normalized.replace(\"\\\\n\", \"\\n\");\n+        }\n+\n+        normalized = normalized.replace(\"\\\\\\\\\", \"\\\\\") // denormalize for paths on windows\n               .replace(\"\\\\\", \"/\") // normalize for paths on windows\n               .replace(\"\\r\\n\", \"\\n\") // normalize for linebreaks on windows\n               .replace(\"\\t\", \"\\\\t\"); // makes tabs visible"}]}