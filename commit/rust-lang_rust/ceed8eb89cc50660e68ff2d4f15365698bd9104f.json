{"sha": "ceed8eb89cc50660e68ff2d4f15365698bd9104f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZWQ4ZWI4OWNjNTA2NjBlNjhmZjJkNGYxNTM2NTY5OGJkOTEwNGY=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-16T16:17:29Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-17T14:03:59Z"}, "message": "Make `bless` a flag instead of a subcommand", "tree": {"sha": "88060e3c9ede0503e6eea555559e0a644e8b24a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88060e3c9ede0503e6eea555559e0a644e8b24a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ceed8eb89cc50660e68ff2d4f15365698bd9104f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ceed8eb89cc50660e68ff2d4f15365698bd9104f", "html_url": "https://github.com/rust-lang/rust/commit/ceed8eb89cc50660e68ff2d4f15365698bd9104f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ceed8eb89cc50660e68ff2d4f15365698bd9104f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37dee69dacb0fc199d52d9baba3a3caf3018958a", "url": "https://api.github.com/repos/rust-lang/rust/commits/37dee69dacb0fc199d52d9baba3a3caf3018958a", "html_url": "https://github.com/rust-lang/rust/commit/37dee69dacb0fc199d52d9baba3a3caf3018958a"}], "stats": {"total": 33, "additions": 11, "deletions": 22}, "files": [{"sha": "e5824010ef2cc0309e5f0006ba0bff76d630dde6", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ceed8eb89cc50660e68ff2d4f15365698bd9104f/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceed8eb89cc50660e68ff2d4f15365698bd9104f/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=ceed8eb89cc50660e68ff2d4f15365698bd9104f", "patch": "@@ -311,8 +311,6 @@ impl<'a> ShouldRun<'a> {\n pub enum Kind {\n     Build,\n     Check,\n-    /// Run tests and replace any failing tests' output files (stderr/stout) with the correct ones\n-    Bless,\n     Test,\n     Bench,\n     Dist,\n@@ -336,7 +334,6 @@ impl<'a> Builder<'a> {\n                 native::Llvm, tool::Rustfmt, tool::Miri, native::Lld),\n             Kind::Check => describe!(check::Std, check::Test, check::Rustc, check::CodegenBackend,\n                 check::Rustdoc),\n-            Kind::Bless |\n             Kind::Test => describe!(test::Tidy, test::Bootstrap, test::Ui, test::RunPass,\n                 test::CompileFail, test::ParseFail, test::RunFail, test::RunPassValgrind,\n                 test::MirOpt, test::Codegen, test::CodegenUnits, test::Incremental, test::Debuginfo,\n@@ -370,7 +367,6 @@ impl<'a> Builder<'a> {\n         let kind = match subcommand {\n             \"build\" => Kind::Build,\n             \"doc\" => Kind::Doc,\n-            \"bless\" => Kind::Bless,\n             \"test\" => Kind::Test,\n             \"bench\" => Kind::Bench,\n             \"dist\" => Kind::Dist,\n@@ -412,7 +408,6 @@ impl<'a> Builder<'a> {\n             Subcommand::Build { ref paths } => (Kind::Build, &paths[..]),\n             Subcommand::Check { ref paths } => (Kind::Check, &paths[..]),\n             Subcommand::Doc { ref paths } => (Kind::Doc, &paths[..]),\n-            Subcommand::Test { ref paths, bless: true, .. } => (Kind::Bless, &paths[..]),\n             Subcommand::Test { ref paths, .. } => (Kind::Test, &paths[..]),\n             Subcommand::Bench { ref paths, .. } => (Kind::Bench, &paths[..]),\n             Subcommand::Dist { ref paths } => (Kind::Dist, &paths[..]),"}, {"sha": "90dd5d819b0da2a79330881bb85d5c425a584fc0", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ceed8eb89cc50660e68ff2d4f15365698bd9104f/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceed8eb89cc50660e68ff2d4f15365698bd9104f/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=ceed8eb89cc50660e68ff2d4f15365698bd9104f", "patch": "@@ -144,7 +144,6 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\");\n         let subcommand = args.iter().find(|&s|\n             (s == \"build\")\n             || (s == \"check\")\n-            || (s == \"bless\")\n             || (s == \"test\")\n             || (s == \"bench\")\n             || (s == \"doc\")\n@@ -165,7 +164,6 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\");\n \n         // Some subcommands get extra options\n         match subcommand.as_str() {\n-            \"bless\" |\n             \"test\"  => {\n                 opts.optflag(\"\", \"no-fail-fast\", \"Run all tests regardless of failure\");\n                 opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\");\n@@ -177,6 +175,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\");\n                 );\n                 opts.optflag(\"\", \"no-doc\", \"do not run doc tests\");\n                 opts.optflag(\"\", \"doc\", \"only run doc tests\");\n+                opts.optflag(\"\", \"bless\", \"update all stderr/stdout files of failing ui tests\");\n             },\n             \"bench\" => { opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\"); },\n             \"clean\" => { opts.optflag(\"\", \"all\", \"clean all build artifacts\"); },\n@@ -252,12 +251,6 @@ Arguments:\n     compilation, so there's no need to pass it separately, though it won't hurt. We also completely\n     ignore the stage passed, as there's no way to compile in non-stage 0 without actually building\n     the compiler.\");\n-            }\n-            \"bless\" => {\n-                subcommand_help.push_str(\"\\n\n-Arguments:\n-    This subcommand works exactly like the `test` subcommand, but also updates stderr/stdout files\n-    before they cause a test failure\");\n             }\n             \"test\" => {\n                 subcommand_help.push_str(\"\\n\n@@ -268,6 +261,7 @@ Arguments:\n         ./x.py test src/test/run-pass\n         ./x.py test src/libstd --test-args hash_map\n         ./x.py test src/libstd --stage 0\n+        ./x.py test src/test/ui --bless\n \n     If no arguments are passed then the complete artifacts for that stage are\n     compiled and tested.\n@@ -329,11 +323,10 @@ Arguments:\n             \"check\" => {\n                 Subcommand::Check { paths: paths }\n             }\n-            \"bless\" |\n             \"test\" => {\n                 Subcommand::Test {\n                     paths,\n-                    bless: subcommand.as_str() == \"bless\",\n+                    bless: matches.opt_present(\"bless\"),\n                     test_args: matches.opt_strs(\"test-args\"),\n                     rustc_args: matches.opt_strs(\"rustc-args\"),\n                     fail_fast: !matches.opt_present(\"no-fail-fast\"),\n@@ -436,6 +429,13 @@ impl Subcommand {\n             _ => DocTests::Yes,\n         }\n     }\n+\n+    pub fn bless(&self) -> bool {\n+        match *self {\n+            Subcommand::Test { bless, .. } => bless,\n+            _ => false,\n+        }\n+    }\n }\n \n fn split(s: Vec<String>) -> Vec<String> {"}, {"sha": "7a4924f03c8d23eef3cb1ee26cb5b6c690673fcb", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ceed8eb89cc50660e68ff2d4f15365698bd9104f/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceed8eb89cc50660e68ff2d4f15365698bd9104f/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=ceed8eb89cc50660e68ff2d4f15365698bd9104f", "patch": "@@ -41,8 +41,6 @@ const ADB_TEST_DIR: &str = \"/data/tmp/work\";\n /// The two modes of the test runner; tests or benchmarks.\n #[derive(Debug, PartialEq, Eq, Hash, Copy, Clone, PartialOrd, Ord)]\n pub enum TestKind {\n-    /// Run `cargo bless`\n-    Bless,\n     /// Run `cargo test`\n     Test,\n     /// Run `cargo bench`\n@@ -53,7 +51,6 @@ impl From<Kind> for TestKind {\n     fn from(kind: Kind) -> Self {\n         match kind {\n             Kind::Test => TestKind::Test,\n-            Kind::Bless => TestKind::Bless,\n             Kind::Bench => TestKind::Bench,\n             _ => panic!(\"unexpected kind in crate: {:?}\", kind)\n         }\n@@ -64,8 +61,6 @@ impl TestKind {\n     // Return the cargo subcommand for this test kind\n     fn subcommand(self) -> &'static str {\n         match self {\n-            // bless and test are both `test` for folder names and cargo subcommands\n-            TestKind::Bless |\n             TestKind::Test => \"test\",\n             TestKind::Bench => \"bench\",\n         }\n@@ -75,7 +70,6 @@ impl TestKind {\n impl fmt::Display for TestKind {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.write_str(match *self {\n-            TestKind::Bless => \"Testing (bless)\",\n             TestKind::Test => \"Testing\",\n             TestKind::Bench => \"Benchmarking\",\n         })\n@@ -967,7 +961,7 @@ impl Step for Compiletest {\n         cmd.arg(\"--host\").arg(&*compiler.host);\n         cmd.arg(\"--llvm-filecheck\").arg(builder.llvm_filecheck(builder.config.build));\n \n-        if builder.kind == Kind::Bless {\n+        if builder.config.cmd.bless() {\n             cmd.arg(\"--bless\");\n         }\n "}]}