{"sha": "48635226d8d71f18b09ea40f5cdbe34dbaaf378f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NjM1MjI2ZDhkNzFmMThiMDllYTQwZjVjZGJlMzRkYmFhZjM3OGY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-18T19:23:13Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-10T21:12:07Z"}, "message": "Remove `MacroKind::ProcMacroStub`\n\nIt's internal to resolve and always results in `Res::Err` outside of resolve.\nInstead put `DefKind::Fn`s themselves into the macro namespace, it's ok.\n\nProc macro stubs are items placed into macro namespase for functions that define proc macros.\nhttps://github.com/rust-lang/rust/pull/52383\n\nThe rustdoc test is changed because the old test didn't actually reproduce the ICE it was supposed to reproduce.", "tree": {"sha": "18c6d28bd7c6eecd2ebdfff76834f07d9947ad44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18c6d28bd7c6eecd2ebdfff76834f07d9947ad44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48635226d8d71f18b09ea40f5cdbe34dbaaf378f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48635226d8d71f18b09ea40f5cdbe34dbaaf378f", "html_url": "https://github.com/rust-lang/rust/commit/48635226d8d71f18b09ea40f5cdbe34dbaaf378f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48635226d8d71f18b09ea40f5cdbe34dbaaf378f/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6a9e766f90a5271c2356fbc7941e38559200ab5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6a9e766f90a5271c2356fbc7941e38559200ab5", "html_url": "https://github.com/rust-lang/rust/commit/c6a9e766f90a5271c2356fbc7941e38559200ab5"}], "stats": {"total": 88, "additions": 35, "deletions": 53}, "files": [{"sha": "c09b2003f38672dd56aa4f17e2288788a20e2713", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48635226d8d71f18b09ea40f5cdbe34dbaaf378f/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48635226d8d71f18b09ea40f5cdbe34dbaaf378f/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=48635226d8d71f18b09ea40f5cdbe34dbaaf378f", "patch": "@@ -89,7 +89,6 @@ impl_stable_hash_for!(enum ::syntax::ext::base::MacroKind {\n     Bang,\n     Attr,\n     Derive,\n-    ProcMacroStub,\n });\n \n "}, {"sha": "974487ab9d2d76dc3cf986a827ef5d949f9d06d4", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/48635226d8d71f18b09ea40f5cdbe34dbaaf378f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48635226d8d71f18b09ea40f5cdbe34dbaaf378f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=48635226d8d71f18b09ea40f5cdbe34dbaaf378f", "patch": "@@ -29,7 +29,7 @@ use syntax::attr;\n \n use syntax::ast::{self, Block, ForeignItem, ForeignItemKind, Item, ItemKind, NodeId};\n use syntax::ast::{MetaItemKind, StmtKind, TraitItem, TraitItemKind, Variant};\n-use syntax::ext::base::{MacroKind, SyntaxExtension};\n+use syntax::ext::base::SyntaxExtension;\n use syntax::ext::base::Determinacy::Undetermined;\n use syntax::ext::hygiene::Mark;\n use syntax::ext::tt::macro_rules;\n@@ -46,6 +46,20 @@ use log::debug;\n \n type Res = def::Res<NodeId>;\n \n+fn proc_macro_stub(item: &Item) -> Option<(Ident, Span)> {\n+    if attr::contains_name(&item.attrs, sym::proc_macro) ||\n+       attr::contains_name(&item.attrs, sym::proc_macro_attribute) {\n+        return Some((item.ident, item.span));\n+    } else if let Some(attr) = attr::find_by_name(&item.attrs, sym::proc_macro_derive) {\n+        if let Some(nested_meta) = attr.meta_item_list().and_then(|list| list.get(0).cloned()) {\n+            if let Some(ident) = nested_meta.ident() {\n+                return Some((ident, ident.span));\n+            }\n+        }\n+    }\n+    None\n+}\n+\n impl<'a> ToNameBinding<'a> for (Module<'a>, ty::Visibility, Span, Mark) {\n     fn to_name_binding(self, arenas: &'a ResolverArenas<'a>) -> &'a NameBinding<'a> {\n         arenas.alloc_name_binding(NameBinding {\n@@ -456,22 +470,8 @@ impl<'a> Resolver<'a> {\n \n                 // Functions introducing procedural macros reserve a slot\n                 // in the macro namespace as well (see #52225).\n-                if attr::contains_name(&item.attrs, sym::proc_macro) ||\n-                   attr::contains_name(&item.attrs, sym::proc_macro_attribute) {\n-                    let res = Res::Def(DefKind::Macro(MacroKind::ProcMacroStub), res.def_id());\n-                    self.define(parent, ident, MacroNS, (res, vis, sp, expansion));\n-                }\n-                if let Some(attr) = attr::find_by_name(&item.attrs, sym::proc_macro_derive) {\n-                    if let Some(trait_attr) =\n-                            attr.meta_item_list().and_then(|list| list.get(0).cloned()) {\n-                        if let Some(ident) = trait_attr.ident() {\n-                            let res = Res::Def(\n-                                DefKind::Macro(MacroKind::ProcMacroStub),\n-                                res.def_id(),\n-                            );\n-                            self.define(parent, ident, MacroNS, (res, vis, ident.span, expansion));\n-                        }\n-                    }\n+                if let Some((ident, span)) = proc_macro_stub(item) {\n+                    self.define(parent, ident, MacroNS, (res, vis, span, expansion));\n                 }\n             }\n \n@@ -778,8 +778,6 @@ impl<'a> Resolver<'a> {\n \n     crate fn opt_get_macro(&mut self, res: Res) -> Option<Lrc<SyntaxExtension>> {\n         let def_id = match res {\n-            Res::Def(DefKind::Macro(MacroKind::ProcMacroStub), _) =>\n-                return Some(self.non_macro_attr(true)), // some dummy extension\n             Res::Def(DefKind::Macro(..), def_id) => def_id,\n             Res::NonMacroAttr(attr_kind) =>\n                 return Some(self.non_macro_attr(attr_kind == NonMacroAttrKind::Tool)),"}, {"sha": "a3e00bcb81a9f555fc76cda1b14881f6cb5da210", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/48635226d8d71f18b09ea40f5cdbe34dbaaf378f/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48635226d8d71f18b09ea40f5cdbe34dbaaf378f/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=48635226d8d71f18b09ea40f5cdbe34dbaaf378f", "patch": "@@ -102,12 +102,11 @@ fn sub_namespace_match(candidate: Option<MacroKind>, requirement: Option<MacroKi\n     #[derive(PartialEq)]\n     enum SubNS { Bang, AttrLike }\n     let sub_ns = |kind| match kind {\n-        MacroKind::Bang => Some(SubNS::Bang),\n-        MacroKind::Attr | MacroKind::Derive => Some(SubNS::AttrLike),\n-        MacroKind::ProcMacroStub => None,\n+        MacroKind::Bang => SubNS::Bang,\n+        MacroKind::Attr | MacroKind::Derive => SubNS::AttrLike,\n     };\n-    let requirement = requirement.and_then(|kind| sub_ns(kind));\n-    let candidate = candidate.and_then(|kind| sub_ns(kind));\n+    let candidate = candidate.map(sub_ns);\n+    let requirement = requirement.map(sub_ns);\n     // \"No specific sub-namespace\" means \"matches anything\" for both requirements and candidates.\n     candidate.is_none() || requirement.is_none() || candidate == requirement\n }\n@@ -310,15 +309,15 @@ impl<'a> Resolver<'a> {\n         let res = res?;\n \n         match res {\n-            Res::Def(DefKind::Macro(macro_kind), def_id) => {\n+            Res::Def(DefKind::Macro(_), def_id) => {\n                 if let Some(node_id) = self.definitions.as_local_node_id(def_id) {\n                     self.unused_macros.remove(&node_id);\n                 }\n-                if macro_kind == MacroKind::ProcMacroStub {\n-                    let msg = \"can't use a procedural macro from the same crate that defines it\";\n-                    self.session.span_err(path.span, msg);\n-                    return Err(Determinacy::Determined);\n-                }\n+            }\n+            Res::Def(DefKind::Fn, _) => {\n+                let msg = \"can't use a procedural macro from the same crate that defines it\";\n+                self.session.span_err(path.span, msg);\n+                return Err(Determinacy::Determined);\n             }\n             Res::NonMacroAttr(attr_kind) => {\n                 if kind == MacroKind::Attr {"}, {"sha": "72e6614dc06526b64391aaa9ade2349276838716", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48635226d8d71f18b09ea40f5cdbe34dbaaf378f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48635226d8d71f18b09ea40f5cdbe34dbaaf378f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=48635226d8d71f18b09ea40f5cdbe34dbaaf378f", "patch": "@@ -4199,7 +4199,6 @@ pub fn register_res(cx: &DocContext<'_>, res: Res) -> DefId {\n             MacroKind::Bang => (i, TypeKind::Macro),\n             MacroKind::Attr => (i, TypeKind::Attr),\n             MacroKind::Derive => (i, TypeKind::Derive),\n-            MacroKind::ProcMacroStub => unreachable!(),\n         },\n         Res::Def(DefKind::TraitAlias, i) => (i, TypeKind::TraitAlias),\n         Res::SelfTy(Some(def_id), _) => (def_id, TypeKind::Trait),"}, {"sha": "9affc08141d09bd89f51e79df6295e3ad74355e9", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48635226d8d71f18b09ea40f5cdbe34dbaaf378f/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48635226d8d71f18b09ea40f5cdbe34dbaaf378f/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=48635226d8d71f18b09ea40f5cdbe34dbaaf378f", "patch": "@@ -92,7 +92,6 @@ impl<'a> From<&'a clean::Item> for ItemType {\n                 MacroKind::Bang            => ItemType::Macro,\n                 MacroKind::Attr            => ItemType::ProcAttribute,\n                 MacroKind::Derive          => ItemType::ProcDerive,\n-                MacroKind::ProcMacroStub   => unreachable!(),\n             }\n             clean::StrippedItem(..)        => unreachable!(),\n         }"}, {"sha": "5c6847b414136765a69b208a99a0d9cb66a41cb6", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48635226d8d71f18b09ea40f5cdbe34dbaaf378f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48635226d8d71f18b09ea40f5cdbe34dbaaf378f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=48635226d8d71f18b09ea40f5cdbe34dbaaf378f", "patch": "@@ -2471,7 +2471,6 @@ impl<'a> fmt::Display for Item<'a> {\n                 MacroKind::Bang => write!(fmt, \"Macro \")?,\n                 MacroKind::Attr => write!(fmt, \"Attribute Macro \")?,\n                 MacroKind::Derive => write!(fmt, \"Derive Macro \")?,\n-                MacroKind::ProcMacroStub => unreachable!(),\n             }\n             clean::PrimitiveItem(..) => write!(fmt, \"Primitive Type \")?,\n             clean::StaticItem(..) | clean::ForeignStaticItem(..) => write!(fmt, \"Static \")?,\n@@ -5092,7 +5091,6 @@ fn item_proc_macro(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item, m\n             }\n             write!(w, \"</pre>\")?;\n         }\n-        _ => {}\n     }\n     document(w, cx, it)\n }"}, {"sha": "acf7a951856ea9a1f60534e95e092bf28eabd521", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/48635226d8d71f18b09ea40f5cdbe34dbaaf378f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48635226d8d71f18b09ea40f5cdbe34dbaaf378f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=48635226d8d71f18b09ea40f5cdbe34dbaaf378f", "patch": "@@ -429,15 +429,11 @@ fn macro_resolve(cx: &DocContext<'_>, path_str: &str) -> Option<Res> {\n     let segment = ast::PathSegment::from_ident(Ident::from_str(path_str));\n     let path = ast::Path { segments: vec![segment], span: DUMMY_SP };\n     cx.enter_resolver(|resolver| {\n-        let parent_scope = resolver.dummy_parent_scope();\n-        if let Ok(res) = resolver.resolve_macro_to_res_inner(&path, MacroKind::Bang,\n-                                                            &parent_scope, false, false) {\n-            if let Res::Def(DefKind::Macro(MacroKind::ProcMacroStub), _) = res {\n-                // skip proc-macro stubs, they'll cause `get_macro` to crash\n-            } else {\n-                if let SyntaxExtensionKind::LegacyBang(..) = resolver.get_macro(res).kind {\n-                    return Some(res.map_id(|_| panic!(\"unexpected id\")));\n-                }\n+        if let Ok(res @ Res::Def(DefKind::Macro(_), _)) = resolver.resolve_macro_to_res_inner(\n+            &path, MacroKind::Bang, &resolver.dummy_parent_scope(), false, false\n+        ) {\n+            if let SyntaxExtensionKind::LegacyBang { .. } = resolver.get_macro(res).kind {\n+                return Some(res.map_id(|_| panic!(\"unexpected id\")));\n             }\n         }\n         if let Some(res) = resolver.all_macros.get(&Symbol::intern(path_str)) {"}, {"sha": "009d681ed8353de12c8edbffe6ac12ff5e7679d1", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/48635226d8d71f18b09ea40f5cdbe34dbaaf378f/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48635226d8d71f18b09ea40f5cdbe34dbaaf378f/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=48635226d8d71f18b09ea40f5cdbe34dbaaf378f", "patch": "@@ -406,11 +406,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n                 // Struct and variant constructors and proc macro stubs always show up alongside\n                 // their definitions, we've already processed them so just discard these.\n-                match path.res {\n-                    Res::Def(DefKind::Ctor(..), _)\n-                    | Res::SelfCtor(..)\n-                    | Res::Def(DefKind::Macro(MacroKind::ProcMacroStub), _) => return,\n-                    _ => {}\n+                if let Res::Def(DefKind::Ctor(..), _) | Res::SelfCtor(..) = path.res {\n+                    return;\n                 }\n \n                 // If there was a private module in the current path then don't bother inlining"}, {"sha": "8d5e4a3369e7c840cdb59f72afd45898ce96e862", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48635226d8d71f18b09ea40f5cdbe34dbaaf378f/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48635226d8d71f18b09ea40f5cdbe34dbaaf378f/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=48635226d8d71f18b09ea40f5cdbe34dbaaf378f", "patch": "@@ -527,8 +527,6 @@ pub enum MacroKind {\n     Attr,\n     /// A derive attribute macro - #[derive(Foo)]\n     Derive,\n-    /// A view of a procedural macro from the same crate that defines it.\n-    ProcMacroStub,\n }\n \n impl MacroKind {\n@@ -537,7 +535,6 @@ impl MacroKind {\n             MacroKind::Bang => \"macro\",\n             MacroKind::Attr => \"attribute macro\",\n             MacroKind::Derive => \"derive macro\",\n-            MacroKind::ProcMacroStub => \"crate-local procedural macro\",\n         }\n     }\n "}, {"sha": "4bd0b092b55a718b2d9bf52c8b2ddbac40f7d80f", "filename": "src/test/rustdoc/proc-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48635226d8d71f18b09ea40f5cdbe34dbaaf378f/src%2Ftest%2Frustdoc%2Fproc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48635226d8d71f18b09ea40f5cdbe34dbaaf378f/src%2Ftest%2Frustdoc%2Fproc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fproc-macro.rs?ref=48635226d8d71f18b09ea40f5cdbe34dbaaf378f", "patch": "@@ -7,7 +7,7 @@\n // @has some_macros/index.html\n // @has - '//a/[@href=\"attr.some_proc_attr.html\"]' 'some_proc_attr'\n \n-//! include a link to [some_proc_attr] to make sure it works.\n+//! include a link to [some_proc_macro] to make sure it works.\n \n extern crate proc_macro;\n "}]}