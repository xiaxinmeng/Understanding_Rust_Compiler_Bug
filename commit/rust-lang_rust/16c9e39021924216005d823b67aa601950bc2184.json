{"sha": "16c9e39021924216005d823b67aa601950bc2184", "node_id": "C_kwDOAAsO6NoAKDE2YzllMzkwMjE5MjQyMTYwMDVkODIzYjY3YWE2MDE5NTBiYzIxODQ", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-11-21T14:26:23Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-11-21T14:26:23Z"}, "message": "negative_impl_exists should take an InferCtxt", "tree": {"sha": "7bebc837dd3f26dc52cb111bfeeaa82d5dcb28e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bebc837dd3f26dc52cb111bfeeaa82d5dcb28e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16c9e39021924216005d823b67aa601950bc2184", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmN7io8ACgkQgTGiTgx5\n769+Hw//WG9Hr6Js1lo0E2AwL5l++OEY/xOwiVf/TNfWjZyMfip+8ScqMmnnXj27\nsugCrZeVQnUbXMtFonevAfIG6dte1DynJRijfqEnLGbgpj435ZexMDP74Du96XVx\nofCW3TljbFmukpi+kGhBxGs3jS9vbt8rjlJAbBTKP1alz3BhaAT4eTpsPFxoE9le\nZ/KPFtUb4kDKf26zZ84fsZLwSlT8eaaA34tLTna+sEI3WnJLB0xqGtn5enQeXyss\nZkoY82O5Dskq8LonFefZs4WsV5+2Nih+mcMdYabZuV04MkIZafzoKIaFZESH2DQC\nMT9Xn01+uwSSTJWRXFr05EJTVxzS0rAbioiCrKUzGbWUyh68bRZQP4i8wILbVE4g\nTVe0ujhpWX1J90R8BkzLhrLNInuA1YAYOw/OxcA4sKHtrT8JDXkkzDhBO0OCqGqO\nAzT4TE1Z3dSwpsEYEFjEYKQ8aM5ZchfQotupw6L/vt/tZfCRL8G1C6nwV3yJmW5S\nxaXzFWZGOQy871rg+ZwFHECm5299o+m+iBtBg/ev1wIZARnAyZd5aQo89Y0AfnWa\ngMkm/i+yeqHBmhQfHWzOIr7Tf+nvkPsuUlttPiPVBLJCBqV+ilCbcDGklmQ4ZEdH\nq0vupLUj/AudJCEdQXt43eyd1Bsv1cxO9+u/Bopiz8DYQlSHH4c=\n=4v6W\n-----END PGP SIGNATURE-----", "payload": "tree 7bebc837dd3f26dc52cb111bfeeaa82d5dcb28e2\nparent 2faad3b699b7b80b08f4af7cfc67fff097256630\nauthor Santiago Pastorino <spastorino@gmail.com> 1669040783 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1669040783 -0300\n\nnegative_impl_exists should take an InferCtxt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16c9e39021924216005d823b67aa601950bc2184", "html_url": "https://github.com/rust-lang/rust/commit/16c9e39021924216005d823b67aa601950bc2184", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16c9e39021924216005d823b67aa601950bc2184/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2faad3b699b7b80b08f4af7cfc67fff097256630", "url": "https://api.github.com/repos/rust-lang/rust/commits/2faad3b699b7b80b08f4af7cfc67fff097256630", "html_url": "https://github.com/rust-lang/rust/commit/2faad3b699b7b80b08f4af7cfc67fff097256630"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "1ef77e06b4874901129299d4a1cc86f130b74c8f", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/16c9e39021924216005d823b67aa601950bc2184/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c9e39021924216005d823b67aa601950bc2184/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=16c9e39021924216005d823b67aa601950bc2184", "patch": "@@ -327,11 +327,10 @@ fn equate<'tcx>(\n         return true;\n     };\n \n-    let selcx = &mut SelectionContext::new(&infcx);\n     let opt_failing_obligation = obligations\n         .into_iter()\n         .chain(more_obligations)\n-        .find(|o| negative_impl_exists(selcx, o, body_def_id));\n+        .find(|o| negative_impl_exists(infcx, o, body_def_id));\n \n     if let Some(failing_obligation) = opt_failing_obligation {\n         debug!(\"overlap: obligation unsatisfiable {:?}\", failing_obligation);\n@@ -342,19 +341,19 @@ fn equate<'tcx>(\n }\n \n /// Try to prove that a negative impl exist for the given obligation and its super predicates.\n-#[instrument(level = \"debug\", skip(selcx))]\n-fn negative_impl_exists<'cx, 'tcx>(\n-    selcx: &SelectionContext<'cx, 'tcx>,\n+#[instrument(level = \"debug\", skip(infcx))]\n+fn negative_impl_exists<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n     o: &PredicateObligation<'tcx>,\n     body_def_id: DefId,\n ) -> bool {\n-    if resolve_negative_obligation(selcx.infcx().fork(), o, body_def_id) {\n+    if resolve_negative_obligation(infcx.fork(), o, body_def_id) {\n         return true;\n     }\n \n     // Try to prove a negative obligation exists for super predicates\n-    for o in util::elaborate_predicates(selcx.tcx(), iter::once(o.predicate)) {\n-        if resolve_negative_obligation(selcx.infcx().fork(), &o, body_def_id) {\n+    for o in util::elaborate_predicates(infcx.tcx, iter::once(o.predicate)) {\n+        if resolve_negative_obligation(infcx.fork(), &o, body_def_id) {\n             return true;\n         }\n     }"}]}