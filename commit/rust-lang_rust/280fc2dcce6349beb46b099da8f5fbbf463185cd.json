{"sha": "280fc2dcce6349beb46b099da8f5fbbf463185cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4MGZjMmRjY2U2MzQ5YmViNDZiMDk5ZGE4ZjVmYmJmNDYzMTg1Y2Q=", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-11T23:01:49Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-11T23:01:49Z"}, "message": "rustdoc: Cleanup a pattern match in `external_generic_args()`", "tree": {"sha": "ab57bbc5171f077024ad01f155972735ae3a6663", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab57bbc5171f077024ad01f155972735ae3a6663"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/280fc2dcce6349beb46b099da8f5fbbf463185cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/280fc2dcce6349beb46b099da8f5fbbf463185cd", "html_url": "https://github.com/rust-lang/rust/commit/280fc2dcce6349beb46b099da8f5fbbf463185cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/280fc2dcce6349beb46b099da8f5fbbf463185cd/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "913764dcefb0ba69fcc1dcaa667de01273270331", "url": "https://api.github.com/repos/rust-lang/rust/commits/913764dcefb0ba69fcc1dcaa667de01273270331", "html_url": "https://github.com/rust-lang/rust/commit/913764dcefb0ba69fcc1dcaa667de01273270331"}], "stats": {"total": 5, "additions": 2, "deletions": 3}, "files": [{"sha": "b0021d1234cd610ecdabb6494631ef10624dcffd", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/280fc2dcce6349beb46b099da8f5fbbf463185cd/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/280fc2dcce6349beb46b099da8f5fbbf463185cd/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=280fc2dcce6349beb46b099da8f5fbbf463185cd", "patch": "@@ -122,9 +122,8 @@ fn external_generic_args(\n         .collect();\n \n     if cx.tcx.fn_trait_kind_from_lang_item(did).is_some() {\n-        assert!(ty_kind.is_some());\n-        let inputs = match ty_kind {\n-            Some(ty::Tuple(ref tys)) => tys.iter().map(|t| t.expect_ty().clean(cx)).collect(),\n+        let inputs = match ty_kind.unwrap() {\n+            ty::Tuple(tys) => tys.iter().map(|t| t.expect_ty().clean(cx)).collect(),\n             _ => return GenericArgs::AngleBracketed { args, bindings },\n         };\n         let output = None;"}]}