{"sha": "25a677ccef5f355184a835aa2ba39380724a77ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YTY3N2NjZWY1ZjM1NTE4NGE4MzVhYTJiYTM5MzgwNzI0YTc3ZWY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-08-24T02:48:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-24T02:48:47Z"}, "message": "Rollup merge of #75831 - lzutao:https, r=Dylan-DPC\n\ndoc: Prefer https link for wikipedia URLs\n\nA tiny changes.", "tree": {"sha": "883a60a4188d286fff11e006091f12f2e087d531", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/883a60a4188d286fff11e006091f12f2e087d531"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25a677ccef5f355184a835aa2ba39380724a77ef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfQyqQCRBK7hj4Ov3rIwAAdHIIADwF8xGZTd6ZDCG7Q3wymnLs\n0KORRFvG6BJNe3K88X0NiVNZ5bW8nASACEriVy5Gp8a0aLMn4c02w+/xbbgNJliB\nBKLC08w+f/1OB3ulra7WaaScm9GFGOyJlrah0PtzR+iYEN0BZ9np1P567wZcqaz8\nIOkYvtW7CE/DRKkr2t2foTJ/d+bSvvH6NyTupBQ9qds+B6ECLGdI1k/MXFtisCBY\nCQfy4KPBfSEOMx4w2QZ/K3wg0N+7H8fDvLGKeAW4fM1TPg2WW0OJPKO9GrhPlkVA\nuyTe038OPzvCQq3N43dveiOxVJy6JGkSL1HSNq5IjjN8V/z1TAfyOYt8zWbUgmk=\n=xKLv\n-----END PGP SIGNATURE-----\n", "payload": "tree 883a60a4188d286fff11e006091f12f2e087d531\nparent 427e969c4334fb2d4e2c8b25fff9a729c0a754aa\nparent 2c995d29f72c0d295ecddd6315520f8abf1ab8f8\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1598237327 +0900\ncommitter GitHub <noreply@github.com> 1598237327 +0900\n\nRollup merge of #75831 - lzutao:https, r=Dylan-DPC\n\ndoc: Prefer https link for wikipedia URLs\n\nA tiny changes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25a677ccef5f355184a835aa2ba39380724a77ef", "html_url": "https://github.com/rust-lang/rust/commit/25a677ccef5f355184a835aa2ba39380724a77ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25a677ccef5f355184a835aa2ba39380724a77ef/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "427e969c4334fb2d4e2c8b25fff9a729c0a754aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/427e969c4334fb2d4e2c8b25fff9a729c0a754aa", "html_url": "https://github.com/rust-lang/rust/commit/427e969c4334fb2d4e2c8b25fff9a729c0a754aa"}, {"sha": "2c995d29f72c0d295ecddd6315520f8abf1ab8f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c995d29f72c0d295ecddd6315520f8abf1ab8f8", "html_url": "https://github.com/rust-lang/rust/commit/2c995d29f72c0d295ecddd6315520f8abf1ab8f8"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "477a598ff5b0027512da38aae24b426601d3302f", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25a677ccef5f355184a835aa2ba39380724a77ef/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a677ccef5f355184a835aa2ba39380724a77ef/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=25a677ccef5f355184a835aa2ba39380724a77ef", "patch": "@@ -12,9 +12,9 @@\n //! to solve the [shortest path problem][sssp] on a [directed graph][dir_graph].\n //! It shows how to use [`BinaryHeap`] with custom types.\n //!\n-//! [dijkstra]: http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\n-//! [sssp]: http://en.wikipedia.org/wiki/Shortest_path_problem\n-//! [dir_graph]: http://en.wikipedia.org/wiki/Directed_graph\n+//! [dijkstra]: https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\n+//! [sssp]: https://en.wikipedia.org/wiki/Shortest_path_problem\n+//! [dir_graph]: https://en.wikipedia.org/wiki/Directed_graph\n //! [`BinaryHeap`]: struct.BinaryHeap.html\n //!\n //! ```"}, {"sha": "3953c73319fe419e5b33d735e68020a2cad20c85", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a677ccef5f355184a835aa2ba39380724a77ef/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a677ccef5f355184a835aa2ba39380724a77ef/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=25a677ccef5f355184a835aa2ba39380724a77ef", "patch": "@@ -25,7 +25,7 @@\n use self::Ordering::*;\n \n /// Trait for equality comparisons which are [partial equivalence\n-/// relations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).\n+/// relations](https://en.wikipedia.org/wiki/Partial_equivalence_relation).\n ///\n /// This trait allows for partial equality, for types that do not have a full\n /// equivalence relation. For example, in floating point numbers `NaN != NaN`,"}, {"sha": "23c989fd2fdfb78cee8678a22addb8b61886788d", "filename": "library/std/src/sync/barrier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a677ccef5f355184a835aa2ba39380724a77ef/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a677ccef5f355184a835aa2ba39380724a77ef/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs?ref=25a677ccef5f355184a835aa2ba39380724a77ef", "patch": "@@ -131,7 +131,7 @@ impl Barrier {\n         lock.count += 1;\n         if lock.count < self.num_threads {\n             // We need a while loop to guard against spurious wakeups.\n-            // http://en.wikipedia.org/wiki/Spurious_wakeup\n+            // https://en.wikipedia.org/wiki/Spurious_wakeup\n             while local_gen == lock.generation_id && lock.count < self.num_threads {\n                 lock = self.cvar.wait(lock).unwrap();\n             }"}, {"sha": "c02f93bf9d42f1ed27d8c13e56a2331075eb064c", "filename": "library/test/src/stats.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25a677ccef5f355184a835aa2ba39380724a77ef/library%2Ftest%2Fsrc%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a677ccef5f355184a835aa2ba39380724a77ef/library%2Ftest%2Fsrc%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fstats.rs?ref=25a677ccef5f355184a835aa2ba39380724a77ef", "patch": "@@ -84,7 +84,7 @@ pub trait Stats {\n     /// by the constant `1.4826` to allow its use as a consistent estimator for the standard\n     /// deviation.\n     ///\n-    /// See: <http://en.wikipedia.org/wiki/Median_absolute_deviation>\n+    /// See: <https://en.wikipedia.org/wiki/Median_absolute_deviation>\n     fn median_abs_dev(&self) -> f64;\n \n     /// Median absolute deviation as a percent of the median. See `median_abs_dev` and `median`.\n@@ -96,7 +96,7 @@ pub trait Stats {\n     ///\n     /// Calculated by linear interpolation between closest ranks.\n     ///\n-    /// See: <http://en.wikipedia.org/wiki/Percentile>\n+    /// See: <https://en.wikipedia.org/wiki/Percentile>\n     fn percentile(&self, pct: f64) -> f64;\n \n     /// Quartiles of the sample: three values that divide the sample into four equal groups, each\n@@ -302,7 +302,7 @@ fn percentile_of_sorted(sorted_samples: &[f64], pct: f64) -> f64 {\n /// It differs from trimming in that it does not change the number of samples,\n /// just changes the values of those that are outliers.\n ///\n-/// See: <http://en.wikipedia.org/wiki/Winsorising>\n+/// See: <https://en.wikipedia.org/wiki/Winsorising>\n pub fn winsorize(samples: &mut [f64], pct: f64) {\n     let mut tmp = samples.to_vec();\n     local_sort(&mut tmp);"}, {"sha": "9aed307ec93ae5a78398dd95ced150c549be0e0b", "filename": "src/librustc_expand/mbe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a677ccef5f355184a835aa2ba39380724a77ef/src%2Flibrustc_expand%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a677ccef5f355184a835aa2ba39380724a77ef/src%2Flibrustc_expand%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe.rs?ref=25a677ccef5f355184a835aa2ba39380724a77ef", "patch": "@@ -61,7 +61,7 @@ impl KleeneToken {\n     }\n }\n \n-/// A Kleene-style [repetition operator](http://en.wikipedia.org/wiki/Kleene_star)\n+/// A Kleene-style [repetition operator](https://en.wikipedia.org/wiki/Kleene_star)\n /// for token sequences.\n #[derive(Clone, PartialEq, Encodable, Decodable, Debug, Copy)]\n enum KleeneOp {"}, {"sha": "c1f354c7a15f3fd1cacfbe89b233ff55a2b777fa", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a677ccef5f355184a835aa2ba39380724a77ef/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a677ccef5f355184a835aa2ba39380724a77ef/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=25a677ccef5f355184a835aa2ba39380724a77ef", "patch": "@@ -1264,7 +1264,7 @@ rustc_index::newtype_index! {\n     /// De Bruijn index of 0, because the innermost binder in that location\n     /// is the outer fn.\n     ///\n-    /// [dbi]: http://en.wikipedia.org/wiki/De_Bruijn_index\n+    /// [dbi]: https://en.wikipedia.org/wiki/De_Bruijn_index\n     #[derive(HashStable)]\n     pub struct DebruijnIndex {\n         DEBUG_FORMAT = \"DebruijnIndex({})\","}, {"sha": "24356844bafc952f494bf86622532209652a3147", "filename": "src/librustc_symbol_mangling/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a677ccef5f355184a835aa2ba39380724a77ef/src%2Flibrustc_symbol_mangling%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a677ccef5f355184a835aa2ba39380724a77ef/src%2Flibrustc_symbol_mangling%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Flegacy.rs?ref=25a677ccef5f355184a835aa2ba39380724a77ef", "patch": "@@ -136,7 +136,7 @@ fn get_symbol_hash<'tcx>(\n }\n \n // Follow C++ namespace-mangling style, see\n-// http://en.wikipedia.org/wiki/Name_mangling for more info.\n+// https://en.wikipedia.org/wiki/Name_mangling for more info.\n //\n // It turns out that on macOS you can actually have arbitrary symbols in\n // function names (at least when given to LLVM), but this is not possible"}, {"sha": "a0fbbafe25ffbb88e4cb1c0478f061561b605fad", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-recursive-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a677ccef5f355184a835aa2ba39380724a77ef/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-recursive-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a677ccef5f355184a835aa2ba39380724a77ef/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-recursive-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-recursive-fn.rs?ref=25a677ccef5f355184a835aa2ba39380724a77ef", "patch": "@@ -7,7 +7,7 @@ use std::marker::PhantomData;\n // closure.  As far as I can tell, coding up a recursive closure\n // requires the good ol' [Y Combinator].\n //\n-// [Y Combinator]: http://en.wikipedia.org/wiki/Fixed-point_combinator#Y_combinator\n+// [Y Combinator]: https://en.wikipedia.org/wiki/Fixed-point_combinator#Y_combinator\n \n struct YCombinator<F,A,R> {\n     func: F,"}]}