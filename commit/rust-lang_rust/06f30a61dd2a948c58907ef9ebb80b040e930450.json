{"sha": "06f30a61dd2a948c58907ef9ebb80b040e930450", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZjMwYTYxZGQyYTk0OGM1ODkwN2VmOWViYjgwYjA0MGU5MzA0NTA=", "commit": {"author": {"name": "Johannes Linke", "email": "johannes.linke@posteo.de", "date": "2016-01-01T16:48:19Z"}, "committer": {"name": "Johannes Linke", "email": "johannes.linke@posteo.de", "date": "2016-01-01T16:48:19Z"}, "message": "Add \"warn/allow by default\" to lint descriptions where it was missing.", "tree": {"sha": "236e50a52d58337a50b1dfb6b05d7c0805d17fa4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/236e50a52d58337a50b1dfb6b05d7c0805d17fa4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06f30a61dd2a948c58907ef9ebb80b040e930450", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06f30a61dd2a948c58907ef9ebb80b040e930450", "html_url": "https://github.com/rust-lang/rust/commit/06f30a61dd2a948c58907ef9ebb80b040e930450", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06f30a61dd2a948c58907ef9ebb80b040e930450/comments", "author": {"login": "karyon", "id": 1891915, "node_id": "MDQ6VXNlcjE4OTE5MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1891915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karyon", "html_url": "https://github.com/karyon", "followers_url": "https://api.github.com/users/karyon/followers", "following_url": "https://api.github.com/users/karyon/following{/other_user}", "gists_url": "https://api.github.com/users/karyon/gists{/gist_id}", "starred_url": "https://api.github.com/users/karyon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karyon/subscriptions", "organizations_url": "https://api.github.com/users/karyon/orgs", "repos_url": "https://api.github.com/users/karyon/repos", "events_url": "https://api.github.com/users/karyon/events{/privacy}", "received_events_url": "https://api.github.com/users/karyon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "karyon", "id": 1891915, "node_id": "MDQ6VXNlcjE4OTE5MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1891915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karyon", "html_url": "https://github.com/karyon", "followers_url": "https://api.github.com/users/karyon/followers", "following_url": "https://api.github.com/users/karyon/following{/other_user}", "gists_url": "https://api.github.com/users/karyon/gists{/gist_id}", "starred_url": "https://api.github.com/users/karyon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karyon/subscriptions", "organizations_url": "https://api.github.com/users/karyon/orgs", "repos_url": "https://api.github.com/users/karyon/repos", "events_url": "https://api.github.com/users/karyon/events{/privacy}", "received_events_url": "https://api.github.com/users/karyon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "261bed1f8e4717228d5270133522f65da9ced034", "url": "https://api.github.com/repos/rust-lang/rust/commits/261bed1f8e4717228d5270133522f65da9ced034", "html_url": "https://github.com/rust-lang/rust/commit/261bed1f8e4717228d5270133522f65da9ced034"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "f0dbf390ebb3d1320231a4dcf218145db2587046", "filename": "src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06f30a61dd2a948c58907ef9ebb80b040e930450/src%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f30a61dd2a948c58907ef9ebb80b040e930450/src%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattrs.rs?ref=06f30a61dd2a948c58907ef9ebb80b040e930450", "patch": "@@ -8,7 +8,7 @@ use syntax::attr::*;\n use syntax::ast::{Attribute, MetaList, MetaWord};\n use utils::{in_macro, match_path, span_lint, BEGIN_UNWIND};\n \n-/// **What it does:** This lint warns on items annotated with `#[inline(always)]`, unless the annotated function is empty or simply panics.\n+/// **What it does:** This lint `Warn`s on items annotated with `#[inline(always)]`, unless the annotated function is empty or simply panics.\n ///\n /// **Why is this bad?** While there are valid uses of this annotation (and once you know when to use it, by all means `allow` this lint), it's a common newbie-mistake to pepper one's code with it.\n ///"}, {"sha": "03265635b1d8dde11f3c762f2cecc14eb0033a8b", "filename": "src/block_in_if_condition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06f30a61dd2a948c58907ef9ebb80b040e930450/src%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f30a61dd2a948c58907ef9ebb80b040e930450/src%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fblock_in_if_condition.rs?ref=06f30a61dd2a948c58907ef9ebb80b040e930450", "patch": "@@ -3,7 +3,7 @@ use rustc::lint::{LateLintPass, LateContext, LintArray, LintPass};\n use rustc_front::intravisit::{Visitor, walk_expr};\n use utils::*;\n \n-/// **What it does:** This lint checks for `if` conditions that use blocks to contain an expression.\n+/// **What it does:** This lint checks for `if` conditions that use blocks to contain an expression. It is `Warn` by default.\n ///\n /// **Why is this bad?** It isn't really rust style, same as using parentheses to contain expressions.\n ///\n@@ -15,7 +15,7 @@ declare_lint! {\n     \"braces can be eliminated in conditions that are expressions, e.g `if { true } ...`\"\n }\n \n-/// **What it does:** This lint checks for `if` conditions that use blocks containing statements, or conditions that use closures with blocks.\n+/// **What it does:** This lint checks for `if` conditions that use blocks containing statements, or conditions that use closures with blocks. It is `Warn` by default.\n ///\n /// **Why is this bad?** Using blocks in the condition makes it hard to read.\n ///"}, {"sha": "21bf30e131c6e02f8d1a0e2c35b062fff8ea3e2a", "filename": "src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06f30a61dd2a948c58907ef9ebb80b040e930450/src%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f30a61dd2a948c58907ef9ebb80b040e930450/src%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fescape.rs?ref=06f30a61dd2a948c58907ef9ebb80b040e930450", "patch": "@@ -14,7 +14,7 @@ use utils::span_lint;\n \n pub struct EscapePass;\n \n-/// **What it does:** This lint checks for usage of `Box<T>` where an unboxed `T` would work fine\n+/// **What it does:** This lint checks for usage of `Box<T>` where an unboxed `T` would work fine. It is `Warn` by default.\n ///\n /// **Why is this bad?** This is an unnecessary allocation, and bad for performance\n ///"}, {"sha": "9f103f4e7a80448504baf56b0c136473fb359640", "filename": "src/loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06f30a61dd2a948c58907ef9ebb80b040e930450/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f30a61dd2a948c58907ef9ebb80b040e930450/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=06f30a61dd2a948c58907ef9ebb80b040e930450", "patch": "@@ -50,7 +50,7 @@ declare_lint!{ pub EXPLICIT_ITER_LOOP, Warn,\n declare_lint!{ pub ITER_NEXT_LOOP, Warn,\n                \"for-looping over `_.next()` which is probably not intended\" }\n \n-/// **What it does:** This lint detects `loop + match` combinations that are easier written as a `while let` loop.\n+/// **What it does:** This lint detects `loop + match` combinations that are easier written as a `while let` loop. It is `Warn` by default.\n ///\n /// **Why is this bad?** The `while let` loop is usually shorter and more readable\n ///\n@@ -85,7 +85,7 @@ declare_lint!{ pub UNUSED_COLLECT, Warn,\n                \"`collect()`ing an iterator without using the result; this is usually better \\\n                 written as a for loop\" }\n \n-/// **What it does:** This lint checks for loops over ranges `x..y` where both `x` and `y` are constant and `x` is greater or equal to `y`, unless the range is reversed or has a negative `.step_by(_)`.\n+/// **What it does:** This lint checks for loops over ranges `x..y` where both `x` and `y` are constant and `x` is greater or equal to `y`, unless the range is reversed or has a negative `.step_by(_)`. It is `Warn` by default.\n ///\n /// **Why is it bad?** Such loops will either be skipped or loop until wrap-around (in debug code, this may `panic!()`). Both options are probably not intended.\n ///"}, {"sha": "b63e839612c0e105d3bacc1c4444a7b9a57adf5f", "filename": "src/minmax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06f30a61dd2a948c58907ef9ebb80b040e930450/src%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f30a61dd2a948c58907ef9ebb80b040e930450/src%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fminmax.rs?ref=06f30a61dd2a948c58907ef9ebb80b040e930450", "patch": "@@ -8,7 +8,7 @@ use consts::{Constant, constant_simple};\n use utils::{match_def_path, span_lint};\n use self::MinMax::{Min, Max};\n \n-/// **What it does:** This lint checks for expressions where `std::cmp::min` and `max` are used to clamp values, but switched so that the result is constant.\n+/// **What it does:** This lint checks for expressions where `std::cmp::min` and `max` are used to clamp values, but switched so that the result is constant. It is `Warn` by default.\n ///\n /// **Why is this bad?** This is in all probability not the intended outcome. At the least it hurts readability of the code.\n ///"}, {"sha": "92276961d11c634d468df6f7b05cbd8a4694a8bc", "filename": "src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06f30a61dd2a948c58907ef9ebb80b040e930450/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f30a61dd2a948c58907ef9ebb80b040e930450/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=06f30a61dd2a948c58907ef9ebb80b040e930450", "patch": "@@ -281,7 +281,7 @@ impl LateLintPass for ModuloOne {\n     }\n }\n \n-/// **What it does:** This lint checks for patterns in the form `name @ _`.\n+/// **What it does:** This lint checks for patterns in the form `name @ _`. It is `Warn` by default.\n ///\n /// **Why is this bad?** It's almost always more readable to just use direct bindings.\n ///"}, {"sha": "133462071e4303fa06998353ea3211b77e12fafc", "filename": "src/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06f30a61dd2a948c58907ef9ebb80b040e930450/src%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f30a61dd2a948c58907ef9ebb80b040e930450/src%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_reference.rs?ref=06f30a61dd2a948c58907ef9ebb80b040e930450", "patch": "@@ -4,7 +4,7 @@ use utils::span_lint;\n use rustc::middle::ty::{TypeAndMut, TypeVariants, MethodCall, TyS};\n use syntax::ptr::P;\n \n-/// **What it does:** This lint detects giving a mutable reference to a function that only requires an immutable reference.\n+/// **What it does:** This lint detects giving a mutable reference to a function that only requires an immutable reference. It is `Warn` by default.\n ///\n /// **Why is this bad?** The immutable reference rules out all other references to the value. Also the code misleads about the intent of the call site.\n ///"}, {"sha": "d60a045aa7539993ddc0181682f1bc9642337eda", "filename": "src/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06f30a61dd2a948c58907ef9ebb80b040e930450/src%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f30a61dd2a948c58907ef9ebb80b040e930450/src%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstrings.rs?ref=06f30a61dd2a948c58907ef9ebb80b040e930450", "patch": "@@ -11,7 +11,7 @@ use eq_op::is_exp_equal;\n use utils::{match_type, span_lint, walk_ptrs_ty, get_parent_expr};\n use utils::STRING_PATH;\n \n-/// **What it does:** This lint matches code of the form `x = x + y` (without `let`!)\n+/// **What it does:** This lint matches code of the form `x = x + y` (without `let`!). It is `Allow` by default.\n ///\n /// **Why is this bad?** Because this expression needs another copy as opposed to `x.push_str(y)` (in practice LLVM will usually elide it, though). Despite [llogiq](https://github.com/llogiq)'s reservations, this lint also is `allow` by default, as some people opine that it's more readable.\n ///"}, {"sha": "f332659188b472301c171ad15f2e30551db93da6", "filename": "src/types.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/06f30a61dd2a948c58907ef9ebb80b040e930450/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f30a61dd2a948c58907ef9ebb80b040e930450/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=06f30a61dd2a948c58907ef9ebb80b040e930450", "patch": "@@ -17,7 +17,7 @@ use utils::{LL_PATH, VEC_PATH};\n #[allow(missing_copy_implementations)]\n pub struct TypePass;\n \n-/// **What it does:** This lint checks for use of `Box<Vec<_>>` anywhere in the code.\n+/// **What it does:** This lint checks for use of `Box<Vec<_>>` anywhere in the code. It is `Warn` by default.\n ///\n /// **Why is this bad?** `Vec` already keeps its contents in a separate area on the heap. So if you `Box` it, you just add another level of indirection without any benefit whatsoever.\n ///\n@@ -26,7 +26,8 @@ pub struct TypePass;\n /// **Example:** `struct X { values: Box<Vec<Foo>> }`\n declare_lint!(pub BOX_VEC, Warn,\n               \"usage of `Box<Vec<T>>`, vector elements are already on the heap\");\n-/// **What it does:** This lint checks for usage of any `LinkedList`, suggesting to use a `Vec` or a `VecDeque` (formerly called `RingBuf`).\n+\n+/// **What it does:** This lint checks for usage of any `LinkedList`, suggesting to use a `Vec` or a `VecDeque` (formerly called `RingBuf`). It is `Warn` by default.\n ///\n /// **Why is this bad?** Gankro says:\n ///"}, {"sha": "5a4d3931606f8e1ebcd72fd083fe8682b30095e3", "filename": "src/zero_div_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06f30a61dd2a948c58907ef9ebb80b040e930450/src%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f30a61dd2a948c58907ef9ebb80b040e930450/src%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fzero_div_zero.rs?ref=06f30a61dd2a948c58907ef9ebb80b040e930450", "patch": "@@ -9,7 +9,7 @@ use consts::{Constant, constant_simple, FloatWidth};\n /// 0.0/0.0 with std::f32::NaN or std::f64::NaN, depending on the precision.\n pub struct ZeroDivZeroPass;\n \n-/// **What it does:** This lint checks for `0.0 / 0.0`\n+/// **What it does:** This lint checks for `0.0 / 0.0`. It is `Warn` by default.\n ///\n /// **Why is this bad?** It's less readable than `std::f32::NAN` or `std::f64::NAN`\n ///"}]}