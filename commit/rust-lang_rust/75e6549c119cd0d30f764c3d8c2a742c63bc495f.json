{"sha": "75e6549c119cd0d30f764c3d8c2a742c63bc495f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZTY1NDljMTE5Y2QwZDMwZjc2NGMzZDhjMmE3NDJjNjNiYzQ5NWY=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-19T21:18:30Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T21:26:36Z"}, "message": "Improve prctl, add a test.", "tree": {"sha": "8f51c01fad311e4f34200a93ce228cf3df3ccaab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f51c01fad311e4f34200a93ce228cf3df3ccaab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75e6549c119cd0d30f764c3d8c2a742c63bc495f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75e6549c119cd0d30f764c3d8c2a742c63bc495f", "html_url": "https://github.com/rust-lang/rust/commit/75e6549c119cd0d30f764c3d8c2a742c63bc495f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75e6549c119cd0d30f764c3d8c2a742c63bc495f/comments", "author": null, "committer": null, "parents": [{"sha": "eab38dfe00d99bca183b7744823f8614d04e5304", "url": "https://api.github.com/repos/rust-lang/rust/commits/eab38dfe00d99bca183b7744823f8614d04e5304", "html_url": "https://github.com/rust-lang/rust/commit/eab38dfe00d99bca183b7744823f8614d04e5304"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "ab3b436b86655a7e9870f4355158aef61946da24", "filename": "src/shims/thread.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/75e6549c119cd0d30f764c3d8c2a742c63bc495f/src%2Fshims%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e6549c119cd0d30f764c3d8c2a742c63bc495f/src%2Fshims%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fthread.rs?ref=75e6549c119cd0d30f764c3d8c2a742c63bc495f", "patch": "@@ -102,12 +102,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         let option = this.read_scalar(option)?.not_undef()?.to_i32()?;\n-        if option != this.eval_libc_i32(\"PR_SET_NAME\")? {\n-            throw_unsup_format!(\"Miri supports only PR_SET_NAME\");\n+        if option == this.eval_libc_i32(\"PR_SET_NAME\")? {\n+            let address = this.read_scalar(arg2)?.not_undef()?;\n+            let name = this.memory.read_c_str(address)?.to_owned();\n+            this.set_active_thread_name(name)?;\n+        } else if option == this.eval_libc_i32(\"PR_GET_NAME\")? {\n+            let address = this.read_scalar(arg2)?.not_undef()?;\n+            let name = this.get_active_thread_name()?;\n+            this.memory.write_bytes(address, name)?;\n+        } else {\n+            throw_unsup_format!(\"Unsupported prctl option.\");\n         }\n-        let address = this.read_scalar(arg2)?.not_undef()?;\n-        let name = this.memory.read_c_str(address)?.to_owned();\n-        this.set_active_thread_name(name)?;\n \n         Ok(0)\n     }"}, {"sha": "235ac27e0a59ffc729b18fc5d55f542ad070dfc3", "filename": "tests/run-pass/concurrency/libc_prctl_thread_name.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/75e6549c119cd0d30f764c3d8c2a742c63bc495f/tests%2Frun-pass%2Fconcurrency%2Flibc_prctl_thread_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e6549c119cd0d30f764c3d8c2a742c63bc495f/tests%2Frun-pass%2Fconcurrency%2Flibc_prctl_thread_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Flibc_prctl_thread_name.rs?ref=75e6549c119cd0d30f764c3d8c2a742c63bc495f", "patch": "@@ -0,0 +1,17 @@\n+// ignore-windows: No libc on Windows\n+\n+#![feature(rustc_private)]\n+\n+extern crate libc;\n+\n+use std::ffi::CString;\n+\n+fn main() {\n+    unsafe {\n+        let thread_name = CString::new(\"hello\").expect(\"CString::new failed\");\n+        assert_eq!(libc::prctl(libc::PR_SET_NAME, thread_name.as_ptr() as u64, 0, 0, 0), 0);\n+        let mut buf = [0; 6];\n+        assert_eq!(libc::prctl(libc::PR_GET_NAME, buf.as_mut_ptr() as u64, 0, 0, 0), 0);\n+        assert_eq!(thread_name.as_bytes_with_nul(), buf);\n+    }\n+}"}]}