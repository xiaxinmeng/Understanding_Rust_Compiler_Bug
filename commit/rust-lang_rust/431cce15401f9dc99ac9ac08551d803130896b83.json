{"sha": "431cce15401f9dc99ac9ac08551d803130896b83", "node_id": "C_kwDOAAsO6NoAKDQzMWNjZTE1NDAxZjlkYzk5YWM5YWMwODU1MWQ4MDMxMzA4OTZiODM", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-20T03:26:58Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-05-02T22:44:39Z"}, "message": "Restrict `From<S>` for `{D,Subd}iagnosticMessage`.\n\nCurrently a `{D,Subd}iagnosticMessage` can be created from any type that\nimpls `Into<String>`. That includes `&str`, `String`, and `Cow<'static,\nstr>`, which are reasonable. It also includes `&String`, which is pretty\nweird, and results in many places making unnecessary allocations for\npatterns like this:\n```\nself.fatal(&format!(...))\n```\nThis creates a string with `format!`, takes a reference, passes the\nreference to `fatal`, which does an `into()`, which clones the\nreference, doing a second allocation. Two allocations for a single\nstring, bleh.\n\nThis commit changes the `From` impls so that you can only create a\n`{D,Subd}iagnosticMessage` from `&str`, `String`, or `Cow<'static,\nstr>`. This requires changing all the places that currently create one\nfrom a `&String`. Most of these are of the `&format!(...)` form\ndescribed above; each one removes an unnecessary static `&`, plus an\nallocation when executed. There are also a few places where the existing\nuse of `&String` was more reasonable; these now just use `clone()` at\nthe call site.\n\nAs well as making the code nicer and more efficient, this is a step\ntowards possibly using `Cow<'static, str>` in\n`{D,Subd}iagnosticMessage::{Str,Eager}`. That would require changing\nthe `From<&'a str>` impls to `From<&'static str>`, which is doable, but\nI'm not yet sure if it's worthwhile.", "tree": {"sha": "f531c9cf33f997c18bda08425188aa6951f81cbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f531c9cf33f997c18bda08425188aa6951f81cbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/431cce15401f9dc99ac9ac08551d803130896b83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/431cce15401f9dc99ac9ac08551d803130896b83", "html_url": "https://github.com/rust-lang/rust/commit/431cce15401f9dc99ac9ac08551d803130896b83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/431cce15401f9dc99ac9ac08551d803130896b83/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d36bde7db093f8db983dd564b2a4a111f9f60334", "url": "https://api.github.com/repos/rust-lang/rust/commits/d36bde7db093f8db983dd564b2a4a111f9f60334", "html_url": "https://github.com/rust-lang/rust/commit/d36bde7db093f8db983dd564b2a4a111f9f60334"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "d1314795f580344f096db7750b7a9d5b43f938bc", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/431cce15401f9dc99ac9ac08551d803130896b83/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431cce15401f9dc99ac9ac08551d803130896b83/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=431cce15401f9dc99ac9ac08551d803130896b83", "patch": "@@ -96,7 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                                 if let PredicateKind::Clause(Clause::Trait(trait_pred)) =\n                                     obligation.predicate.kind().skip_binder()\n                                 {\n-                                    db.note(&format!(\n+                                    db.note(format!(\n                                         \"`{}` doesn't implement `{}`\",\n                                         trait_pred.self_ty(),\n                                         trait_pred.trait_ref.print_only_trait_path(),"}, {"sha": "9e65f9ecd1664b85770ff6719f5b22db30c6acf8", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/431cce15401f9dc99ac9ac08551d803130896b83/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431cce15401f9dc99ac9ac08551d803130896b83/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=431cce15401f9dc99ac9ac08551d803130896b83", "patch": "@@ -353,7 +353,7 @@ pub fn register_pre_expansion_lints(store: &mut rustc_lint::LintStore, sess: &Se\n pub fn read_conf(sess: &Session, path: &io::Result<(Option<PathBuf>, Vec<String>)>) -> Conf {\n     if let Ok((_, warnings)) = path {\n         for warning in warnings {\n-            sess.warn(warning);\n+            sess.warn(warning.clone());\n         }\n     }\n     let file_name = match path {"}, {"sha": "91f7ce1dbe58e438c7944854d7ac50ea61371586", "filename": "clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/431cce15401f9dc99ac9ac08551d803130896b83/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431cce15401f9dc99ac9ac08551d803130896b83/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=431cce15401f9dc99ac9ac08551d803130896b83", "patch": "@@ -175,13 +175,13 @@ fn check_manual_split_once_indirect(\n             let remove_msg = format!(\"remove the `{iter_ident}` usages\");\n             diag.span_suggestion(\n                 first.span,\n-                &remove_msg,\n+                remove_msg.clone(),\n                 \"\",\n                 app,\n             );\n             diag.span_suggestion(\n                 second.span,\n-                &remove_msg,\n+                remove_msg,\n                 \"\",\n                 app,\n             );"}, {"sha": "7eaa7db78a4706753f84ba60330710ab58117e1c", "filename": "clippy_lints/src/non_send_fields_in_send_ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/431cce15401f9dc99ac9ac08551d803130896b83/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431cce15401f9dc99ac9ac08551d803130896b83/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs?ref=431cce15401f9dc99ac9ac08551d803130896b83", "patch": "@@ -131,13 +131,13 @@ impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n                             for field in non_send_fields {\n                                 diag.span_note(\n                                     field.def.span,\n-                                    &format!(\"it is not safe to send field `{}` to another thread\", field.def.ident.name),\n+                                    format!(\"it is not safe to send field `{}` to another thread\", field.def.ident.name),\n                                 );\n \n                                 match field.generic_params.len() {\n                                     0 => diag.help(\"use a thread-safe type that implements `Send`\"),\n-                                    1 if is_ty_param(field.ty) => diag.help(&format!(\"add `{}: Send` bound in `Send` impl\", field.ty)),\n-                                    _ => diag.help(&format!(\n+                                    1 if is_ty_param(field.ty) => diag.help(format!(\"add `{}: Send` bound in `Send` impl\", field.ty)),\n+                                    _ => diag.help(format!(\n                                         \"add bounds on type parameter{} `{}` that satisfy `{}: Send`\",\n                                         if field.generic_params.len() > 1 { \"s\" } else { \"\" },\n                                         field.generic_params_string(),"}, {"sha": "49cb9718ef66e201414a13c6f59da771d17111cd", "filename": "clippy_utils/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/431cce15401f9dc99ac9ac08551d803130896b83/clippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431cce15401f9dc99ac9ac08551d803130896b83/clippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fattrs.rs?ref=431cce15401f9dc99ac9ac08551d803130896b83", "patch": "@@ -133,7 +133,7 @@ pub fn get_unique_attr<'a>(\n     let mut unique_attr: Option<&ast::Attribute> = None;\n     for attr in get_attr(sess, attrs, name) {\n         if let Some(duplicate) = unique_attr {\n-            sess.struct_span_err(attr.span, &format!(\"`{name}` is defined multiple times\"))\n+            sess.struct_span_err(attr.span, format!(\"`{name}` is defined multiple times\"))\n                 .span_note(duplicate.span, \"first definition found here\")\n                 .emit();\n         } else {"}]}