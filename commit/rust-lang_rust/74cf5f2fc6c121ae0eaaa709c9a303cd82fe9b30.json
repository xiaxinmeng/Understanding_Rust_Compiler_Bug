{"sha": "74cf5f2fc6c121ae0eaaa709c9a303cd82fe9b30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0Y2Y1ZjJmYzZjMTIxYWUwZWFhYTcwOWM5YTMwM2NkODJmZTliMzA=", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-04-02T21:53:14Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-04-22T13:36:32Z"}, "message": "Fix `implicit_return` suggestion for async functions", "tree": {"sha": "5403c9c05fb5f9ef0fb91197b73bd41b3e53faf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5403c9c05fb5f9ef0fb91197b73bd41b3e53faf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74cf5f2fc6c121ae0eaaa709c9a303cd82fe9b30", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nComment: Created with Krypton\n\niF4EABYKAAYFAmCBe+4ACgkQ2lnoZDo37QaZiwEA1djUVk46vxZdDSlsLkJhnpYA\nmQZXA+1lgbOJu5lE0k4A/2cTsE8vrIyPhHg5TOK66Oagbu6wOmvZq91hvbVhQroA\n=5ids\n-----END PGP SIGNATURE-----", "payload": "tree 5403c9c05fb5f9ef0fb91197b73bd41b3e53faf2\nparent 22f8c13cf5650d6c9d6ee7b4f0e88bffba9076ca\nauthor Jason Newcomb <jsnewcomb@pm.me> 1617400394 -0400\ncommitter Jason Newcomb <jsnewcomb@pm.me> 1619098592 -0400\n\nFix `implicit_return` suggestion for async functions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74cf5f2fc6c121ae0eaaa709c9a303cd82fe9b30", "html_url": "https://github.com/rust-lang/rust/commit/74cf5f2fc6c121ae0eaaa709c9a303cd82fe9b30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74cf5f2fc6c121ae0eaaa709c9a303cd82fe9b30/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22f8c13cf5650d6c9d6ee7b4f0e88bffba9076ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/22f8c13cf5650d6c9d6ee7b4f0e88bffba9076ca", "html_url": "https://github.com/rust-lang/rust/commit/22f8c13cf5650d6c9d6ee7b4f0e88bffba9076ca"}], "stats": {"total": 101, "additions": 81, "deletions": 20}, "files": [{"sha": "39612dbf05004d5f9c7414ca986352a188b213d4", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/74cf5f2fc6c121ae0eaaa709c9a303cd82fe9b30/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74cf5f2fc6c121ae0eaaa709c9a303cd82fe9b30/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=74cf5f2fc6c121ae0eaaa709c9a303cd82fe9b30", "patch": "@@ -1,5 +1,6 @@\n use clippy_utils::{\n     diagnostics::span_lint_and_sugg,\n+    get_async_fn_body, is_async_fn,\n     source::{snippet_with_applicability, snippet_with_context, walk_span_to_context},\n     visitors::visit_break_exprs,\n };\n@@ -219,6 +220,14 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitReturn {\n             return;\n         }\n \n-        lint_implicit_returns(cx, &body.value, body.value.span.ctxt(), None);\n+        let expr = if is_async_fn(kind) {\n+            match get_async_fn_body(cx.tcx, body) {\n+                Some(e) => e,\n+                None => return,\n+            }\n+        } else {\n+            &body.value\n+        };\n+        lint_implicit_returns(cx, expr, expr.span.ctxt(), None);\n     }\n }"}, {"sha": "6dc96e51a6b1ec65f326f30f901953ea9dc5fb16", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/74cf5f2fc6c121ae0eaaa709c9a303cd82fe9b30/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74cf5f2fc6c121ae0eaaa709c9a303cd82fe9b30/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=74cf5f2fc6c121ae0eaaa709c9a303cd82fe9b30", "patch": "@@ -60,12 +60,12 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n-use rustc_hir::intravisit::{self, walk_expr, ErasedMap, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, walk_expr, ErasedMap, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::LangItem::{ResultErr, ResultOk};\n use rustc_hir::{\n     def, Arm, BindingAnnotation, Block, Body, Constness, Destination, Expr, ExprKind, FnDecl, GenericArgs, HirId, Impl,\n-    ImplItem, ImplItemKind, Item, ItemKind, LangItem, Local, MatchSource, Node, Param, Pat, PatKind, Path, PathSegment,\n-    QPath, Stmt, StmtKind, TraitItem, TraitItemKind, TraitRef, TyKind,\n+    ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local, MatchSource, Node, Param, Pat, PatKind, Path,\n+    PathSegment, QPath, Stmt, StmtKind, TraitItem, TraitItemKind, TraitRef, TyKind,\n };\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::exports::Export;\n@@ -1300,6 +1300,40 @@ pub fn if_sequence<'tcx>(mut expr: &'tcx Expr<'tcx>) -> (Vec<&'tcx Expr<'tcx>>,\n     (conds, blocks)\n }\n \n+/// Checks if the given function kind is an async function.\n+pub fn is_async_fn(kind: FnKind) -> bool {\n+    matches!(kind, FnKind::ItemFn(_, _, header, _) if header.asyncness == IsAsync::Async)\n+}\n+\n+/// Peels away all the compiler generated code surrounding the body of an async function,\n+pub fn get_async_fn_body(tcx: TyCtxt<'tcx>, body: &Body<'_>) -> Option<&'tcx Expr<'tcx>> {\n+    if let ExprKind::Call(\n+        _,\n+        &[Expr {\n+            kind: ExprKind::Closure(_, _, body, _, _),\n+            ..\n+        }],\n+    ) = body.value.kind\n+    {\n+        if let ExprKind::Block(\n+            Block {\n+                stmts: [],\n+                expr:\n+                    Some(Expr {\n+                        kind: ExprKind::DropTemps(expr),\n+                        ..\n+                    }),\n+                ..\n+            },\n+            _,\n+        ) = tcx.hir().body(body).value.kind\n+        {\n+            return Some(expr);\n+        }\n+    };\n+    None\n+}\n+\n // Finds the `#[must_use]` attribute, if any\n pub fn must_use_attr(attrs: &[Attribute]) -> Option<&Attribute> {\n     attrs.iter().find(|a| a.has_name(sym::must_use))"}, {"sha": "7698b88a88c8aa80a143ac27ab11e145a880ef51", "filename": "tests/ui/implicit_return.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74cf5f2fc6c121ae0eaaa709c9a303cd82fe9b30/tests%2Fui%2Fimplicit_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/74cf5f2fc6c121ae0eaaa709c9a303cd82fe9b30/tests%2Fui%2Fimplicit_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.fixed?ref=74cf5f2fc6c121ae0eaaa709c9a303cd82fe9b30", "patch": "@@ -1,3 +1,4 @@\n+// edition:2018\n // run-rustfix\n \n #![warn(clippy::implicit_return)]\n@@ -122,4 +123,9 @@ fn divergent_test() -> bool {\n     diverge()\n }\n \n+// issue #6940\n+async fn foo() -> bool {\n+    return true\n+}\n+\n fn main() {}"}, {"sha": "45bbc2ec670e05463d1a0f8d6f8d5fc557561cfe", "filename": "tests/ui/implicit_return.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74cf5f2fc6c121ae0eaaa709c9a303cd82fe9b30/tests%2Fui%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74cf5f2fc6c121ae0eaaa709c9a303cd82fe9b30/tests%2Fui%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.rs?ref=74cf5f2fc6c121ae0eaaa709c9a303cd82fe9b30", "patch": "@@ -1,3 +1,4 @@\n+// edition:2018\n // run-rustfix\n \n #![warn(clippy::implicit_return)]\n@@ -122,4 +123,9 @@ fn divergent_test() -> bool {\n     diverge()\n }\n \n+// issue #6940\n+async fn foo() -> bool {\n+    true\n+}\n+\n fn main() {}"}, {"sha": "16fe9ed444ff696d20c0c3411cb56913a631a6d2", "filename": "tests/ui/implicit_return.stderr", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/74cf5f2fc6c121ae0eaaa709c9a303cd82fe9b30/tests%2Fui%2Fimplicit_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74cf5f2fc6c121ae0eaaa709c9a303cd82fe9b30/tests%2Fui%2Fimplicit_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.stderr?ref=74cf5f2fc6c121ae0eaaa709c9a303cd82fe9b30", "patch": "@@ -1,91 +1,91 @@\n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:12:5\n+  --> $DIR/implicit_return.rs:13:5\n    |\n LL |     true\n    |     ^^^^ help: add `return` as shown: `return true`\n    |\n    = note: `-D clippy::implicit-return` implied by `-D warnings`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:16:15\n+  --> $DIR/implicit_return.rs:17:15\n    |\n LL |     if true { true } else { false }\n    |               ^^^^ help: add `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:16:29\n+  --> $DIR/implicit_return.rs:17:29\n    |\n LL |     if true { true } else { false }\n    |                             ^^^^^ help: add `return` as shown: `return false`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:22:17\n+  --> $DIR/implicit_return.rs:23:17\n    |\n LL |         true => false,\n    |                 ^^^^^ help: add `return` as shown: `return false`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:23:20\n+  --> $DIR/implicit_return.rs:24:20\n    |\n LL |         false => { true },\n    |                    ^^^^ help: add `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:36:9\n+  --> $DIR/implicit_return.rs:37:9\n    |\n LL |         break true;\n    |         ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:43:13\n+  --> $DIR/implicit_return.rs:44:13\n    |\n LL |             break true;\n    |             ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:51:13\n+  --> $DIR/implicit_return.rs:52:13\n    |\n LL |             break true;\n    |             ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:69:18\n+  --> $DIR/implicit_return.rs:70:18\n    |\n LL |     let _ = || { true };\n    |                  ^^^^ help: add `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:70:16\n+  --> $DIR/implicit_return.rs:71:16\n    |\n LL |     let _ = || true;\n    |                ^^^^ help: add `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:78:5\n+  --> $DIR/implicit_return.rs:79:5\n    |\n LL |     format!(\"test {}\", \"test\")\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add `return` as shown: `return format!(\"test {}\", \"test\")`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:87:5\n+  --> $DIR/implicit_return.rs:88:5\n    |\n LL |     m!(true, false)\n    |     ^^^^^^^^^^^^^^^ help: add `return` as shown: `return m!(true, false)`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:93:13\n+  --> $DIR/implicit_return.rs:94:13\n    |\n LL |             break true;\n    |             ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:98:17\n+  --> $DIR/implicit_return.rs:99:17\n    |\n LL |                 break 'outer false;\n    |                 ^^^^^^^^^^^^^^^^^^ help: change `break` to `return` as shown: `return false`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:113:5\n+  --> $DIR/implicit_return.rs:114:5\n    |\n LL | /     loop {\n LL | |         m!(true);\n@@ -99,5 +99,11 @@ LL |         m!(true);\n LL |     }\n    |\n \n-error: aborting due to 15 previous errors\n+error: missing `return` statement\n+  --> $DIR/implicit_return.rs:128:5\n+   |\n+LL |     true\n+   |     ^^^^ help: add `return` as shown: `return true`\n+\n+error: aborting due to 16 previous errors\n "}]}