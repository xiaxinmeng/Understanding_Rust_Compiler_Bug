{"sha": "c952c0446294d59a5926268f60fb6a2076a7c97f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NTJjMDQ0NjI5NGQ1OWE1OTI2MjY4ZjYwZmI2YTIwNzZhN2M5N2Y=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-02-08T23:36:40Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-02-09T21:37:05Z"}, "message": "re-special-case Option in JSON encoding", "tree": {"sha": "e2d146e3158a9f0ef8f325b917dbe222380a213f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2d146e3158a9f0ef8f325b917dbe222380a213f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c952c0446294d59a5926268f60fb6a2076a7c97f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c952c0446294d59a5926268f60fb6a2076a7c97f", "html_url": "https://github.com/rust-lang/rust/commit/c952c0446294d59a5926268f60fb6a2076a7c97f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c952c0446294d59a5926268f60fb6a2076a7c97f/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f91160b687e88c24e5163c8e6b1bd70d9619f8c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f91160b687e88c24e5163c8e6b1bd70d9619f8c3", "html_url": "https://github.com/rust-lang/rust/commit/f91160b687e88c24e5163c8e6b1bd70d9619f8c3"}], "stats": {"total": 73, "additions": 64, "deletions": 9}, "files": [{"sha": "07dbef64d2e4f40884cefaa770c99910957eb907", "filename": "src/libstd/json.rs", "status": "modified", "additions": 64, "deletions": 9, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/c952c0446294d59a5926268f60fb6a2076a7c97f/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c952c0446294d59a5926268f60fb6a2076a7c97f/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=c952c0446294d59a5926268f60fb6a2076a7c97f", "patch": "@@ -126,16 +126,42 @@ pub impl Encoder: serialize::Encoder {\n     }\n \n     fn emit_enum_variant(&self, name: &str, _id: uint, _cnt: uint, f: fn()) {\n-        // emitting enums as arrays where the first\n-        // element provides the enum variant name\n-        self.wr.write_char('[');\n-        self.wr.write_str(escape_str(name));\n-        f();\n-        self.wr.write_char(']');\n+        // encoding of enums is special-cased for Option. Specifically:\n+        // Some(34) => 34\n+        // None => null\n+\n+        // other enums are encoded as vectors:\n+        // Kangaroo(34,\"William\") => [\"Kangaroo\",[34,\"William\"]]\n+        \n+        // the default expansion for enums is more verbose than I'd like;\n+        // specifically, the inner pair of brackets seems superfluous,\n+        // BUT the design of the enumeration framework and the requirements\n+        // of the special-case for Option mean that a first argument must\n+        // be encoded \"naked\"--with no commas--and that the option name\n+        // can't be followed by just a comma, because there might not\n+        // be any elements in the tuple.\n+        \n+        // FIXME : this would be more precise and less frightening\n+        // with fully-qualified option names. To get that information,\n+        // we'd have to change the expansion of auto-encode to pass those along.\n+\n+        if (name == ~\"Some\") {\n+            f();\n+        } else if (name == ~\"None\") {\n+            self.wr.write_str(~\"null\");\n+        } else {\n+            self.wr.write_char('[');\n+            self.wr.write_str(escape_str(name));\n+            self.wr.write_char(',');\n+            self.wr.write_char('[');\n+            f();\n+            self.wr.write_char(']');\n+            self.wr.write_char(']');\n+        }\n     }\n \n-    fn emit_enum_variant_arg(&self, _idx: uint, f: fn()) {\n-        self.wr.write_char(',');\n+    fn emit_enum_variant_arg(&self, idx: uint, f: fn()) {\n+        if (idx != 0) {self.wr.write_char(',');}\n         f();\n     }\n \n@@ -1286,7 +1312,36 @@ mod tests {\n             }\n         }\n         check_equal(str::from_bytes(bw.bytes.data),\n-                    ~\"[\\\"frog\\\",\\\"Henry\\\",349]\");\n+                    ~\"[\\\"frog\\\",[\\\"Henry\\\",349]]\");\n+    }\n+\n+    #[test]\n+    fn test_write_some () {\n+        let bw = @io::BytesWriter {bytes: dvec::DVec(), pos: 0};\n+        let bww : @io::Writer = (bw as @io::Writer);\n+        let encoder = (@Encoder(bww) as @serialize::Encoder);\n+        do encoder.emit_enum(~\"Option\") {\n+            do encoder.emit_enum_variant (~\"Some\",37,1242) {\n+                do encoder.emit_enum_variant_arg (0) {\n+                    encoder.emit_owned_str(~\"jodhpurs\")\n+                }\n+            }\n+        }\n+        check_equal(str::from_bytes(bw.bytes.data),\n+                    ~\"\\\"jodhpurs\\\"\");\n+    }\n+\n+    #[test]\n+    fn test_write_none () {\n+        let bw = @io::BytesWriter {bytes: dvec::DVec(), pos: 0};\n+        let bww : @io::Writer = (bw as @io::Writer);\n+        let encoder = (@Encoder(bww) as @serialize::Encoder);\n+        do encoder.emit_enum(~\"Option\") {\n+            do encoder.emit_enum_variant (~\"None\",37,1242) {\n+            }\n+        }\n+        check_equal(str::from_bytes(bw.bytes.data),\n+                    ~\"null\");\n     }\n \n     #[test]"}]}