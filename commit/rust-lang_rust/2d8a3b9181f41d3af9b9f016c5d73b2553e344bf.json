{"sha": "2d8a3b9181f41d3af9b9f016c5d73b2553e344bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkOGEzYjkxODFmNDFkM2FmOWI5ZjAxNmM1ZDczYjI1NTNlMzQ0YmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-26T20:31:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-26T20:31:44Z"}, "message": "Auto merge of #75944 - jumbatm:issue-75924-clashing-extern-decl-ice, r=spastorino\n\nFix ICE on unwrap of unknown layout in ClashingExternDeclarations.\n\nFixes #75924.", "tree": {"sha": "e165cb7eae6fe81601f57b91f8672d1866ec9743", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e165cb7eae6fe81601f57b91f8672d1866ec9743"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d8a3b9181f41d3af9b9f016c5d73b2553e344bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d8a3b9181f41d3af9b9f016c5d73b2553e344bf", "html_url": "https://github.com/rust-lang/rust/commit/2d8a3b9181f41d3af9b9f016c5d73b2553e344bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d8a3b9181f41d3af9b9f016c5d73b2553e344bf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48717b6f3ce661d2a0d64f7bdfdfb5fd3484ee5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/48717b6f3ce661d2a0d64f7bdfdfb5fd3484ee5b", "html_url": "https://github.com/rust-lang/rust/commit/48717b6f3ce661d2a0d64f7bdfdfb5fd3484ee5b"}, {"sha": "8c0128bb02ef528588777bda1e818e72749a7006", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c0128bb02ef528588777bda1e818e72749a7006", "html_url": "https://github.com/rust-lang/rust/commit/8c0128bb02ef528588777bda1e818e72749a7006"}], "stats": {"total": 57, "additions": 47, "deletions": 10}, "files": [{"sha": "4bcf31ef0bfc5e88f818a84235186b1d8a7d29d4", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2d8a3b9181f41d3af9b9f016c5d73b2553e344bf/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8a3b9181f41d3af9b9f016c5d73b2553e344bf/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=2d8a3b9181f41d3af9b9f016c5d73b2553e344bf", "patch": "@@ -40,7 +40,7 @@ use rustc_hir::{ForeignItemKind, GenericParamKind, PatKind};\n use rustc_hir::{HirId, HirIdSet, Node};\n use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::ty::subst::{GenericArgKind, Subst};\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, layout::LayoutError, Ty, TyCtxt};\n use rustc_session::lint::FutureIncompatibleInfo;\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n@@ -2177,11 +2177,17 @@ impl ClashingExternDeclarations {\n                 let a_kind = &a.kind;\n                 let b_kind = &b.kind;\n \n-                let compare_layouts = |a, b| -> bool {\n-                    let a_layout = &cx.layout_of(a).unwrap().layout.abi;\n-                    let b_layout = &cx.layout_of(b).unwrap().layout.abi;\n-                    debug!(\"{:?} == {:?} = {}\", a_layout, b_layout, a_layout == b_layout);\n-                    a_layout == b_layout\n+                let compare_layouts = |a, b| -> Result<bool, LayoutError<'tcx>> {\n+                    debug!(\"compare_layouts({:?}, {:?})\", a, b);\n+                    let a_layout = &cx.layout_of(a)?.layout.abi;\n+                    let b_layout = &cx.layout_of(b)?.layout.abi;\n+                    debug!(\n+                        \"comparing layouts: {:?} == {:?} = {}\",\n+                        a_layout,\n+                        b_layout,\n+                        a_layout == b_layout\n+                    );\n+                    Ok(a_layout == b_layout)\n                 };\n \n                 #[allow(rustc::usage_of_ty_tykind)]\n@@ -2196,11 +2202,19 @@ impl ClashingExternDeclarations {\n                             let b = b.subst(cx.tcx, b_substs);\n                             debug!(\"Comparing {:?} and {:?}\", a, b);\n \n+                            // We can immediately rule out these types as structurally same if\n+                            // their layouts differ.\n+                            match compare_layouts(a, b) {\n+                                Ok(false) => return false,\n+                                _ => (), // otherwise, continue onto the full, fields comparison\n+                            }\n+\n                             // Grab a flattened representation of all fields.\n                             let a_fields = a_def.variants.iter().flat_map(|v| v.fields.iter());\n                             let b_fields = b_def.variants.iter().flat_map(|v| v.fields.iter());\n-                            compare_layouts(a, b)\n-                            && a_fields.eq_by(\n+\n+                            // Perform a structural comparison for each field.\n+                            a_fields.eq_by(\n                                 b_fields,\n                                 |&ty::FieldDef { did: a_did, .. },\n                                  &ty::FieldDef { did: b_did, .. }| {\n@@ -2287,13 +2301,13 @@ impl ClashingExternDeclarations {\n                             if let Some(ty) = crate::types::repr_nullable_ptr(cx, adt, ckind) {\n                                 ty == primitive\n                             } else {\n-                                compare_layouts(a, b)\n+                                compare_layouts(a, b).unwrap_or(false)\n                             }\n                         }\n                         // Otherwise, just compare the layouts. This may fail to lint for some\n                         // incompatible types, but at the very least, will stop reads into\n                         // uninitialised memory.\n-                        _ => compare_layouts(a, b),\n+                        _ => compare_layouts(a, b).unwrap_or(false),\n                     }\n                 })\n             }"}, {"sha": "44cef19b0d34bd581690e14a3fce899022ca1240", "filename": "src/test/ui/lint/clashing-extern-fn.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2d8a3b9181f41d3af9b9f016c5d73b2553e344bf/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8a3b9181f41d3af9b9f016c5d73b2553e344bf/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs?ref=2d8a3b9181f41d3af9b9f016c5d73b2553e344bf", "patch": "@@ -285,3 +285,26 @@ mod null_optimised_enums {\n         }\n     }\n }\n+\n+#[allow(improper_ctypes)]\n+mod unknown_layout {\n+    mod a {\n+        extern \"C\" {\n+            pub fn generic(l: Link<u32>);\n+        }\n+        pub struct Link<T> {\n+            pub item: T,\n+            pub next: *const Link<T>,\n+        }\n+    }\n+\n+    mod b {\n+        extern \"C\" {\n+            pub fn generic(l: Link<u32>);\n+        }\n+        pub struct Link<T> {\n+            pub item: T,\n+            pub next: *const Link<T>,\n+        }\n+    }\n+}"}]}