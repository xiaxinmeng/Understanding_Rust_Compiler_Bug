{"sha": "368943998de2dee5f47c8e05e2facb11dfd148b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ODk0Mzk5OGRlMmRlZTVmNDdjOGUwNWUyZmFjYjExZGZkMTQ4Yjc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-20T00:24:15Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-20T00:24:15Z"}, "message": "Translate lazy && and || operators in rustc.", "tree": {"sha": "07d0768680939bb4475ad6f039f6d826b68e435d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07d0768680939bb4475ad6f039f6d826b68e435d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/368943998de2dee5f47c8e05e2facb11dfd148b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/368943998de2dee5f47c8e05e2facb11dfd148b7", "html_url": "https://github.com/rust-lang/rust/commit/368943998de2dee5f47c8e05e2facb11dfd148b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/368943998de2dee5f47c8e05e2facb11dfd148b7/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71b1f1d117e2444e4588c67c9aa2772e74ad5678", "url": "https://api.github.com/repos/rust-lang/rust/commits/71b1f1d117e2444e4588c67c9aa2772e74ad5678", "html_url": "https://github.com/rust-lang/rust/commit/71b1f1d117e2444e4588c67c9aa2772e74ad5678"}], "stats": {"total": 65, "additions": 58, "deletions": 7}, "files": [{"sha": "493dea4ce8eec95f64f85a90300f654fb310a036", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 58, "deletions": 7, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/368943998de2dee5f47c8e05e2facb11dfd148b7/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/368943998de2dee5f47c8e05e2facb11dfd148b7/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=368943998de2dee5f47c8e05e2facb11dfd148b7", "patch": "@@ -137,6 +137,10 @@ fn T_f64() -> TypeRef {\n     ret llvm.LLVMDoubleType();\n }\n \n+fn T_bool() -> TypeRef {\n+    ret T_i1();\n+}\n+\n fn T_int() -> TypeRef {\n     // FIXME: switch on target type.\n     ret T_i32();\n@@ -228,7 +232,7 @@ fn T_taskptr() -> TypeRef {\n fn type_of(@trans_ctxt cx, @ast.ty t) -> TypeRef {\n     alt (t.node) {\n         case (ast.ty_nil) { ret T_nil(); }\n-        case (ast.ty_bool) { ret T_i1(); }\n+        case (ast.ty_bool) { ret T_bool(); }\n         case (ast.ty_int) { ret T_int(); }\n         case (ast.ty_uint) { ret T_int(); }\n         case (ast.ty_machine(?tm)) {\n@@ -291,9 +295,9 @@ fn C_nil() -> ValueRef {\n \n fn C_bool(bool b) -> ValueRef {\n     if (b) {\n-        ret C_integral(1, T_i1());\n+        ret C_integral(1, T_bool());\n     } else {\n-        ret C_integral(0, T_i1());\n+        ret C_integral(0, T_bool());\n     }\n }\n \n@@ -465,6 +469,54 @@ fn trans_unary(@block_ctxt cx, ast.unop op, &ast.expr e) -> result {\n fn trans_binary(@block_ctxt cx, ast.binop op,\n                 &ast.expr a, &ast.expr b) -> result {\n \n+    // First couple cases are lazy:\n+\n+    alt (op) {\n+        case (ast.and) {\n+            // Lazy-eval and\n+            auto lhs_res = trans_expr(cx, a);\n+\n+            auto rhs_cx = new_empty_block_ctxt(cx.fcx);\n+            auto rhs_res = trans_expr(rhs_cx, b);\n+\n+            auto next_cx = new_extension_block_ctxt(cx);\n+            rhs_res.bcx.build.Br(next_cx.llbb);\n+\n+            lhs_res.bcx.build.CondBr(lhs_res.val,\n+                                     rhs_cx.llbb,\n+                                     next_cx.llbb);\n+            auto phi = next_cx.build.Phi(T_bool(),\n+                                         vec(lhs_res.val,\n+                                             rhs_res.val),\n+                                         vec(lhs_res.bcx.llbb,\n+                                             rhs_res.bcx.llbb));\n+            ret res(next_cx, phi);\n+        }\n+\n+        case (ast.or) {\n+            // Lazy-eval or\n+            auto lhs_res = trans_expr(cx, a);\n+\n+            auto rhs_cx = new_empty_block_ctxt(cx.fcx);\n+            auto rhs_res = trans_expr(rhs_cx, b);\n+\n+            auto next_cx = new_extension_block_ctxt(cx);\n+            rhs_res.bcx.build.Br(next_cx.llbb);\n+\n+            lhs_res.bcx.build.CondBr(lhs_res.val,\n+                                     next_cx.llbb,\n+                                     rhs_cx.llbb);\n+            auto phi = next_cx.build.Phi(T_bool(),\n+                                         vec(lhs_res.val,\n+                                             rhs_res.val),\n+                                         vec(lhs_res.bcx.llbb,\n+                                             rhs_res.bcx.llbb));\n+            ret res(next_cx, phi);\n+        }\n+    }\n+\n+    // Remaining cases are eager:\n+\n     auto lhs = trans_expr(cx, a);\n     auto sub = trans_expr(lhs.bcx, b);\n \n@@ -774,10 +826,9 @@ fn new_top_block_ctxt(@fn_ctxt fcx) -> @block_ctxt {\n \n }\n \n-// Use this when you are making a block_ctxt to replace the\n-// current one, i.e. when chaining together sequences of stmts\n-// or making sub-blocks you will branch back out of and wish to\n-// \"carry on\" in the parent block's context.\n+// Use this when you are making a block_ctxt that starts with a fresh\n+// terminator and empty cleanups (no locals, no implicit return when\n+// falling off the end).\n fn new_empty_block_ctxt(@fn_ctxt fcx) -> @block_ctxt {\n     fn terminate_no_op(@fn_ctxt cx, builder build) {\n     }"}]}