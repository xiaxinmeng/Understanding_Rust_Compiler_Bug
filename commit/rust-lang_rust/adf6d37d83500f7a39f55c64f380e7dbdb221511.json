{"sha": "adf6d37d83500f7a39f55c64f380e7dbdb221511", "node_id": "C_kwDOAAsO6NoAKGFkZjZkMzdkODM1MDBmN2EzOWY1NWM2NGYzODBlN2RiZGIyMjE1MTE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-20T00:19:15Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-20T21:12:07Z"}, "message": "slightly cleaner, if more verbose, vtable handling in codegen backends", "tree": {"sha": "10df649771ff4daf0a0f23c14152f5edf2cad5b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10df649771ff4daf0a0f23c14152f5edf2cad5b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adf6d37d83500f7a39f55c64f380e7dbdb221511", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adf6d37d83500f7a39f55c64f380e7dbdb221511", "html_url": "https://github.com/rust-lang/rust/commit/adf6d37d83500f7a39f55c64f380e7dbdb221511", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adf6d37d83500f7a39f55c64f380e7dbdb221511/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dad266f4018a8356b8259012d09088520735b13", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dad266f4018a8356b8259012d09088520735b13", "html_url": "https://github.com/rust-lang/rust/commit/3dad266f4018a8356b8259012d09088520735b13"}], "stats": {"total": 50, "additions": 28, "deletions": 22}, "files": [{"sha": "b5a143485893fb5897f0b46c39162ad8a2387456", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/adf6d37d83500f7a39f55c64f380e7dbdb221511/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf6d37d83500f7a39f55c64f380e7dbdb221511/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=adf6d37d83500f7a39f55c64f380e7dbdb221511", "patch": "@@ -195,11 +195,6 @@ pub(crate) fn codegen_const_value<'tcx>(\n             }\n             Scalar::Ptr(ptr, _size) => {\n                 let (alloc_id, offset) = ptr.into_parts(); // we know the `offset` is relative\n-                // For vtables, get the underlying data allocation.\n-                let alloc_id = match fx.tcx.global_alloc(alloc_id) {\n-                    GlobalAlloc::VTable(ty, trait_ref) => fx.tcx.vtable_allocation((ty, trait_ref)),\n-                    _ => alloc_id,\n-                };\n                 let base_addr = match fx.tcx.global_alloc(alloc_id) {\n                     GlobalAlloc::Memory(alloc) => {\n                         let data_id = data_id_for_alloc_id(\n@@ -221,7 +216,20 @@ pub(crate) fn codegen_const_value<'tcx>(\n                             fx.module.declare_func_in_func(func_id, &mut fx.bcx.func);\n                         fx.bcx.ins().func_addr(fx.pointer_type, local_func_id)\n                     }\n-                    GlobalAlloc::VTable(..) => bug!(\"vtables are already handled\"),\n+                    GlobalAlloc::VTable(ty, trait_ref) => {\n+                        let alloc_id = fx.tcx.vtable_allocation((ty, trait_ref));\n+                        let alloc = fx.tcx.global_alloc(alloc_id).unwrap_memory();\n+                        // FIXME: factor this common code with the `Memory` arm into a function?\n+                        let data_id = data_id_for_alloc_id(\n+                            &mut fx.constants_cx,\n+                            fx.module,\n+                            alloc_id,\n+                            alloc.inner().mutability,\n+                        );\n+                        let local_data_id =\n+                            fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n+                        fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n+                    }\n                     GlobalAlloc::Static(def_id) => {\n                         assert!(fx.tcx.is_static(def_id));\n                         let data_id = data_id_for_static(fx.tcx, fx.module, def_id, false);"}, {"sha": "ccb6cbbc2c8a74bb98ab5a977c8698dea5b7c769", "filename": "compiler/rustc_codegen_gcc/src/common.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/adf6d37d83500f7a39f55c64f380e7dbdb221511/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf6d37d83500f7a39f55c64f380e7dbdb221511/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs?ref=adf6d37d83500f7a39f55c64f380e7dbdb221511", "patch": "@@ -183,13 +183,6 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n             }\n             Scalar::Ptr(ptr, _size) => {\n                 let (alloc_id, offset) = ptr.into_parts();\n-                // For vtables, get the underlying data allocation.\n-                let alloc_id = match self.tcx.global_alloc(alloc_id) {\n-                    GlobalAlloc::VTable(ty, trait_ref) => {\n-                        self.tcx.vtable_allocation((ty, trait_ref))\n-                    }\n-                    _ => alloc_id,\n-                };\n                 let base_addr =\n                     match self.tcx.global_alloc(alloc_id) {\n                         GlobalAlloc::Memory(alloc) => {\n@@ -208,7 +201,11 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n                         GlobalAlloc::Function(fn_instance) => {\n                             self.get_fn_addr(fn_instance)\n                         },\n-                        GlobalAlloc::VTable(..) => panic!(\"vtables are already handled\"),\n+                        GlobalAlloc::VTable(ty, trait_ref) => {\n+                            let alloc = self.tcx.global_alloc(self.tcx.vtable_allocation((ty, trait_ref))).unwrap_memory();\n+                            let init = const_alloc_to_gcc(self, alloc);\n+                            self.static_addr_of(init, alloc.inner().align, None)\n+                        }\n                         GlobalAlloc::Static(def_id) => {\n                             assert!(self.tcx.is_static(def_id));\n                             self.get_static(def_id).get_address(None)"}, {"sha": "fb4da9a5f33705bacfba08fbb3b2a968e77ac903", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/adf6d37d83500f7a39f55c64f380e7dbdb221511/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf6d37d83500f7a39f55c64f380e7dbdb221511/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=adf6d37d83500f7a39f55c64f380e7dbdb221511", "patch": "@@ -240,13 +240,6 @@ impl<'ll, 'tcx> ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             }\n             Scalar::Ptr(ptr, _size) => {\n                 let (alloc_id, offset) = ptr.into_parts();\n-                // For vtables, get the underlying data allocation.\n-                let alloc_id = match self.tcx.global_alloc(alloc_id) {\n-                    GlobalAlloc::VTable(ty, trait_ref) => {\n-                        self.tcx.vtable_allocation((ty, trait_ref))\n-                    }\n-                    _ => alloc_id,\n-                };\n                 let (base_addr, base_addr_space) = match self.tcx.global_alloc(alloc_id) {\n                     GlobalAlloc::Memory(alloc) => {\n                         let init = const_alloc_to_llvm(self, alloc);\n@@ -264,7 +257,15 @@ impl<'ll, 'tcx> ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                         self.get_fn_addr(fn_instance.polymorphize(self.tcx)),\n                         self.data_layout().instruction_address_space,\n                     ),\n-                    GlobalAlloc::VTable(..) => bug!(\"vtables are already handled\"),\n+                    GlobalAlloc::VTable(ty, trait_ref) => {\n+                        let alloc = self\n+                            .tcx\n+                            .global_alloc(self.tcx.vtable_allocation((ty, trait_ref)))\n+                            .unwrap_memory();\n+                        let init = const_alloc_to_llvm(self, alloc);\n+                        let value = self.static_addr_of(init, alloc.inner().align, None);\n+                        (value, AddressSpace::DATA)\n+                    }\n                     GlobalAlloc::Static(def_id) => {\n                         assert!(self.tcx.is_static(def_id));\n                         assert!(!self.tcx.is_thread_local_static(def_id));"}]}