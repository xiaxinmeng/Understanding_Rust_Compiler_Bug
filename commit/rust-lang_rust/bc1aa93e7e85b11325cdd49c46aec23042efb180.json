{"sha": "bc1aa93e7e85b11325cdd49c46aec23042efb180", "node_id": "C_kwDOAAsO6NoAKGJjMWFhOTNlN2U4NWIxMTMyNWNkZDQ5YzQ2YWVjMjMwNDJlZmIxODA", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-15T16:35:48Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-15T16:35:48Z"}, "message": "Polish", "tree": {"sha": "be1390bf4ba7c37720c22cbf3dcea1d92e599a3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be1390bf4ba7c37720c22cbf3dcea1d92e599a3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc1aa93e7e85b11325cdd49c46aec23042efb180", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc1aa93e7e85b11325cdd49c46aec23042efb180", "html_url": "https://github.com/rust-lang/rust/commit/bc1aa93e7e85b11325cdd49c46aec23042efb180", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc1aa93e7e85b11325cdd49c46aec23042efb180/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6438ef9aa3eec59f413e89278519df38646baeb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6438ef9aa3eec59f413e89278519df38646baeb0", "html_url": "https://github.com/rust-lang/rust/commit/6438ef9aa3eec59f413e89278519df38646baeb0"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "e327476f3bc03f64183b0e3718a0fdffdb475172", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bc1aa93e7e85b11325cdd49c46aec23042efb180/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1aa93e7e85b11325cdd49c46aec23042efb180/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=bc1aa93e7e85b11325cdd49c46aec23042efb180", "patch": "@@ -157,22 +157,25 @@ impl FlycheckActor {\n         while let Some(event) = self.next_event(&inbox) {\n             match event {\n                 Event::Restart(Restart) => {\n-                    // Drop and cancel the previously spawned process\n-                    self.cargo_handle.take();\n+                    if let Some(cargo_handle) = self.cargo_handle.take() {\n+                        // Cancel the previously spawned process\n+                        cargo_handle.cancel();\n+                    }\n                     while let Ok(Restart) = inbox.recv_timeout(Duration::from_millis(50)) {}\n \n                     self.cancel_check_process();\n \n                     let command = self.check_command();\n-                    let command_f = format!(\"restart flycheck {command:?}\");\n+                    let command_f = format!(\"{command:?}\");\n+                    tracing::debug!(?command, \"will restart flycheck\");\n                     match CargoHandle::spawn(command) {\n                         Ok(cargo_handle) => {\n-                            tracing::info!(\"{}\", command_f);\n+                            tracing::debug!(%command_f, \"did  restart flycheck\");\n                             self.cargo_handle = Some(cargo_handle);\n                             self.progress(Progress::DidStart);\n                         }\n-                        Err(e) => {\n-                            tracing::error!(\"{command_f} failed: {e:?}\",);\n+                        Err(error) => {\n+                            tracing::error!(%command_f, %error, \"failed to restart flycheck\");\n                         }\n                     }\n                 }\n@@ -289,7 +292,13 @@ impl CargoHandle {\n         Ok(CargoHandle { child, thread, receiver })\n     }\n \n-    fn join(self) -> io::Result<()> {\n+    fn cancel(mut self) {\n+        let _ = self.child.kill();\n+        let _ = self.child.wait();\n+    }\n+\n+    fn join(mut self) -> io::Result<()> {\n+        let _ = self.child.kill();\n         let exit_status = self.child.wait()?;\n         let (read_at_least_one_message, error) = self.thread.join()?;\n         if read_at_least_one_message || exit_status.success() {"}, {"sha": "66fa25ec2318b01af57afbc2cb08c779361b384e", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bc1aa93e7e85b11325cdd49c46aec23042efb180/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1aa93e7e85b11325cdd49c46aec23042efb180/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=bc1aa93e7e85b11325cdd49c46aec23042efb180", "patch": "@@ -1,7 +1,7 @@\n //! Missing batteries for standard libraries.\n-use std::iter;\n use std::process::Command;\n use std::{cmp::Ordering, ops, time::Instant};\n+use std::{io as sio, iter};\n \n mod macros;\n pub mod process;\n@@ -159,16 +159,10 @@ impl Drop for JodChild {\n }\n \n impl JodChild {\n-    pub fn spawn(mut command: Command) -> std::io::Result<Self> {\n+    pub fn spawn(mut command: Command) -> sio::Result<Self> {\n         command.spawn().map(Self)\n     }\n \n-    pub fn wait(self) -> std::io::Result<std::process::ExitStatus> {\n-        let mut inner = self.into_inner();\n-        let _ = inner.kill();\n-        inner.wait()\n-    }\n-\n     pub fn into_inner(self) -> std::process::Child {\n         if cfg!(target_arch = \"wasm32\") {\n             panic!(\"no processes on wasm\");"}]}