{"sha": "f352f0eec010ff2814ca27ac0e5a84cd533f2918", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNTJmMGVlYzAxMGZmMjgxNGNhMjdhYzBlNWE4NGNkNTMzZjI5MTg=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2016-10-08T12:32:57Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2016-10-09T08:48:07Z"}, "message": "Dynamically detect presence of `p{read,write}64` on Android", "tree": {"sha": "958c4e7aa408fbed0f53e76cd066fad8d1974a71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/958c4e7aa408fbed0f53e76cd066fad8d1974a71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f352f0eec010ff2814ca27ac0e5a84cd533f2918", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f352f0eec010ff2814ca27ac0e5a84cd533f2918", "html_url": "https://github.com/rust-lang/rust/commit/f352f0eec010ff2814ca27ac0e5a84cd533f2918", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f352f0eec010ff2814ca27ac0e5a84cd533f2918/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3f2644b66647d47338051d783cae8e661312472", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3f2644b66647d47338051d783cae8e661312472", "html_url": "https://github.com/rust-lang/rust/commit/b3f2644b66647d47338051d783cae8e661312472"}], "stats": {"total": 91, "additions": 68, "deletions": 23}, "files": [{"sha": "08e6b45dcd35819e207de7f989f72d974901f41e", "filename": "src/libstd/sys/unix/android.rs", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f352f0eec010ff2814ca27ac0e5a84cd533f2918/src%2Flibstd%2Fsys%2Funix%2Fandroid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f352f0eec010ff2814ca27ac0e5a84cd533f2918/src%2Flibstd%2Fsys%2Funix%2Fandroid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fandroid.rs?ref=f352f0eec010ff2814ca27ac0e5a84cd533f2918", "patch": "@@ -28,10 +28,11 @@\n \n #![cfg(target_os = \"android\")]\n \n-use libc::{c_int, sighandler_t};\n+use libc::{c_int, c_void, sighandler_t, size_t, ssize_t};\n+use libc::{ftruncate, pread, pwrite};\n \n use io;\n-use sys::cvt_r;\n+use super::{cvt, cvt_r};\n \n // The `log2` and `log2f` functions apparently appeared in android-18, or at\n // least you can see they're not present in the android-17 header [1] and they\n@@ -99,10 +100,6 @@ pub unsafe fn signal(signum: c_int, handler: sighandler_t) -> sighandler_t {\n pub fn ftruncate64(fd: c_int, size: u64) -> io::Result<()> {\n     weak!(fn ftruncate64(c_int, i64) -> c_int);\n \n-    extern {\n-        fn ftruncate(fd: c_int, off: i32) -> c_int;\n-    }\n-\n     unsafe {\n         match ftruncate64.get() {\n             Some(f) => cvt_r(|| f(fd, size as i64)).map(|_| ()),\n@@ -117,3 +114,35 @@ pub fn ftruncate64(fd: c_int, size: u64) -> io::Result<()> {\n         }\n     }\n }\n+\n+pub unsafe fn cvt_pread64(fd: c_int, buf: *mut c_void, count: size_t, offset: i64)\n+    -> io::Result<ssize_t>\n+{\n+    weak!(fn pread64(c_int, *mut c_void, size_t, i64) -> ssize_t);\n+    unsafe {\n+        pread64.get().map(|f| cvt(f(fd, buf, count, offset))).unwrap_or_else(|| {\n+            if offset as u64 > i32::max_value() as u64 {\n+                Err(io::Error::new(io::Error::InvalidInput,\n+                                   \"cannot pread >2GB\"))\n+            } else {\n+                cvt(pread(fd, buf, count, offset as i32))\n+            }\n+        })\n+    }\n+}\n+\n+pub unsafe fn cvt_pwrite64(fd: c_int, buf: *const c_void, count: size_t, offset: i64)\n+    -> io::Result<ssize_t>\n+{\n+    weak!(fn pwrite64(c_int, *const c_void, size_t, i64) -> ssize_t);\n+    unsafe {\n+        pwrite64.get().map(|f| cvt(f(fd, buf, count, offset))).unwrap_or_else(|| {\n+            if offset as u64 > i32::max_value() as u64 {\n+                Err(io::Error::new(io::Error::InvalidInput,\n+                                   \"cannot pwrite >2GB\"))\n+            } else {\n+                cvt(pwrite(fd, buf, count, offset as i32))\n+            }\n+        })\n+    }\n+}"}, {"sha": "30573d695aac7d8af8f394689cd7227da28abcb8", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f352f0eec010ff2814ca27ac0e5a84cd533f2918/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f352f0eec010ff2814ca27ac0e5a84cd533f2918/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=f352f0eec010ff2814ca27ac0e5a84cd533f2918", "patch": "@@ -18,10 +18,26 @@ use sys::cvt;\n use sys_common::AsInner;\n use sys_common::io::read_to_end_uninitialized;\n \n-#[cfg(any(target_os = \"linux\", target_os = \"emscripten\", target_os = \"android\"))]\n-use libc::{pread64, pwrite64, off64_t};\n+#[cfg(target_os = \"android\")]\n+use super::android::{cvt_pread64, cvt_pwrite64};\n+#[cfg(any(target_os = \"linux\", target_os = \"emscripten\"))]\n+use libc::{pread64, pwrite64, off64_t, ssize_t};\n #[cfg(not(any(target_os = \"linux\", target_os = \"emscripten\", target_os = \"android\")))]\n-use libc::{pread as pread64, pwrite as pwrite64, off_t as off64_t};\n+use libc::{pread as pread64, pwrite as pwrite64, off_t as off64_t, ssize_t};\n+\n+#[cfg(not(target_os = \"android\"))]\n+unsafe fn cvt_pread64(fd: c_int, buf: *mut c_void, count: size_t, offset: off64_t)\n+    -> io::Result<ssize_t>\n+{\n+    cvt(pread64(fd, buf, count, offset))\n+}\n+\n+#[cfg(not(target_os = \"android\"))]\n+unsafe fn cvt_pwrite64(fd: c_int, buf: *const c_void, count: size_t, offset: off64_t)\n+    -> io::Result<ssize_t>\n+{\n+    cvt(pwrite64(fd, buf, count, offset))\n+}\n \n pub struct FileDesc {\n     fd: c_int,\n@@ -56,13 +72,13 @@ impl FileDesc {\n     }\n \n     pub fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {\n-        let ret = cvt(unsafe {\n-            pread64(self.fd,\n-                    buf.as_mut_ptr() as *mut c_void,\n-                    buf.len(),\n-                    offset as off64_t)\n-        })?;\n-        Ok(ret as usize)\n+        unsafe {\n+            cvt_pread64(self.fd,\n+                        buf.as_mut_ptr() as *mut c_void,\n+                        buf.len(),\n+                        offset as off64_t)\n+                .map(|n| n as usize)\n+        }\n     }\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n@@ -75,13 +91,13 @@ impl FileDesc {\n     }\n \n     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {\n-        let ret = cvt(unsafe {\n-            pwrite64(self.fd,\n-                     buf.as_ptr() as *const c_void,\n-                     buf.len(),\n-                     offset as off64_t)\n-        })?;\n-        Ok(ret as usize)\n+        unsafe {\n+            cvt_pwrite64(self.fd,\n+                         buf.as_ptr() as *const c_void,\n+                         buf.len(),\n+                         offset as off64_t)\n+                .map(|n| n as usize)\n+        }\n     }\n \n     #[cfg(not(any(target_env = \"newlib\","}]}