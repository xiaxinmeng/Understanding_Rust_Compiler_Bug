{"sha": "294aeaf4b3246b8976acf454c85f851c6e3520b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NGFlYWY0YjMyNDZiODk3NmFjZjQ1NGM4NWY4NTFjNmUzNTIwYjE=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-06-21T19:23:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-21T19:23:39Z"}, "message": "Merge pull request #1012 from Manishearth/nohyg\n\nDon't use identifier hygiene in HIR", "tree": {"sha": "2199c3b8065591034427db82e67051d6c3277a74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2199c3b8065591034427db82e67051d6c3277a74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/294aeaf4b3246b8976acf454c85f851c6e3520b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/294aeaf4b3246b8976acf454c85f851c6e3520b1", "html_url": "https://github.com/rust-lang/rust/commit/294aeaf4b3246b8976acf454c85f851c6e3520b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/294aeaf4b3246b8976acf454c85f851c6e3520b1/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78686c82cb75fa93f95c427fa91db76079c0e9e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/78686c82cb75fa93f95c427fa91db76079c0e9e7", "html_url": "https://github.com/rust-lang/rust/commit/78686c82cb75fa93f95c427fa91db76079c0e9e7"}, {"sha": "92c02bd4afdb691a762060a393603321933be34e", "url": "https://api.github.com/repos/rust-lang/rust/commits/92c02bd4afdb691a762060a393603321933be34e", "html_url": "https://github.com/rust-lang/rust/commit/92c02bd4afdb691a762060a393603321933be34e"}], "stats": {"total": 85, "additions": 58, "deletions": 27}, "files": [{"sha": "630c8bf809228bd674848d6e30c22b50ce978f9a", "filename": "CHANGELOG.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/294aeaf4b3246b8976acf454c85f851c6e3520b1/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/294aeaf4b3246b8976acf454c85f851c6e3520b1/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=294aeaf4b3246b8976acf454c85f851c6e3520b1", "patch": "@@ -1,7 +1,11 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n-## 0.0.76 \u2014 TBD\n+## 0.0.77 \u2014 2016-06-21\n+* Rustup to *rustc 1.11.0-nightly (5522e678b 2016-06-20)*\n+* New lints: [`stutter`] and [`iter_nth`]\n+\n+## 0.0.76 \u2014 2016-06-10\n * Rustup to *rustc 1.11.0-nightly (7d2f75a95 2016-06-09)*\n * `cargo clippy` now automatically defines the `clippy` feature\n "}, {"sha": "e52342d3860d37ecdaabea7efc2e86d4815fc2fc", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/294aeaf4b3246b8976acf454c85f851c6e3520b1/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/294aeaf4b3246b8976acf454c85f851c6e3520b1/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=294aeaf4b3246b8976acf454c85f851c6e3520b1", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.0.76\"\n+version = \"0.0.77\"\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n \t\"Andre Bogus <bogusandre@gmail.com>\",\n@@ -25,7 +25,7 @@ test = false\n [dependencies]\n regex_macros = { version = \"0.1.33\", optional = true }\n # begin automatic update\n-clippy_lints = { version = \"0.0.76\", path = \"clippy_lints\" }\n+clippy_lints = { version = \"0.0.77\", path = \"clippy_lints\" }\n # end automatic update\n \n [dev-dependencies]"}, {"sha": "a1012e94ee5a660310a526650e707e81e4dd5de2", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/294aeaf4b3246b8976acf454c85f851c6e3520b1/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/294aeaf4b3246b8976acf454c85f851c6e3520b1/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=294aeaf4b3246b8976acf454c85f851c6e3520b1", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"clippy_lints\"\n # begin automatic update\n-version = \"0.0.76\"\n+version = \"0.0.77\"\n # end automatic update\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\","}, {"sha": "495325764690c18b96e8d2e167cd47a539b2e1ca", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/294aeaf4b3246b8976acf454c85f851c6e3520b1/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294aeaf4b3246b8976acf454c85f851c6e3520b1/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=294aeaf4b3246b8976acf454c85f851c6e3520b1", "patch": "@@ -10,8 +10,8 @@ use rustc_const_math::ConstFloat;\n use syntax::codemap::{Span, Spanned, ExpnFormat};\n use syntax::ptr::P;\n use utils::{\n-    get_item_name, get_parent_expr, implements_trait, is_integer_literal, match_path, snippet,\n-    span_lint, span_lint_and_then, walk_ptrs_ty\n+    get_item_name, get_parent_expr, implements_trait, in_macro, is_integer_literal, match_path,\n+    snippet, span_lint, span_lint_and_then, walk_ptrs_ty\n };\n \n /// **What it does:** This lint checks for function arguments and let bindings denoted as `ref`.\n@@ -405,15 +405,18 @@ impl LateLintPass for UsedUnderscoreBinding {\n         }\n         let binding = match expr.node {\n             ExprPath(_, ref path) => {\n-                let segment = path.segments\n+                let binding = path.segments\n                                 .last()\n                                 .expect(\"path should always have at least one segment\")\n-                                .name;\n-                if segment.as_str().starts_with('_') &&\n-                   !segment.as_str().starts_with(\"__\") &&\n-                   segment != segment.unhygienize() && // not in bang macro\n-                   is_used(cx, expr) {\n-                    Some(segment.as_str())\n+                                .name\n+                                .as_str();\n+                if binding.starts_with('_') &&\n+                   !binding.starts_with(\"__\") &&\n+                   binding != \"_result\" && // FIXME: #944\n+                   is_used(cx, expr) &&\n+                   // don't lint if the declaration is in a macro\n+                   non_macro_local(cx, &cx.tcx.expect_def(expr.id)) {\n+                    Some(binding)\n                 } else {\n                     None\n                 }\n@@ -429,13 +432,11 @@ impl LateLintPass for UsedUnderscoreBinding {\n             _ => None,\n         };\n         if let Some(binding) = binding {\n-            if binding != \"_result\" { // FIXME: #944\n-                span_lint(cx,\n-                          USED_UNDERSCORE_BINDING,\n-                          expr.span,\n-                          &format!(\"used binding `{}` which is prefixed with an underscore. A leading \\\n-                                    underscore signals that a binding will not be used.\", binding));\n-            }\n+            span_lint(cx,\n+                      USED_UNDERSCORE_BINDING,\n+                      expr.span,\n+                      &format!(\"used binding `{}` which is prefixed with an underscore. A leading \\\n+                                underscore signals that a binding will not be used.\", binding));\n         }\n     }\n }\n@@ -463,3 +464,17 @@ fn in_attributes_expansion(cx: &LateContext, expr: &Expr) -> bool {\n         })\n     })\n }\n+\n+/// Test whether `def` is a variable defined outside a macro.\n+fn non_macro_local(cx: &LateContext, def: &def::Def) -> bool {\n+    match *def {\n+        def::Def::Local(_, id) | def::Def::Upvar(_, id, _, _) => {\n+            if let Some(span) = cx.tcx.map.opt_span(id) {\n+                !in_macro(cx, span)\n+            } else {\n+                true\n+            }\n+        }\n+        _ => false,\n+    }\n+}"}, {"sha": "5bb3e006862f0329f3a37a8a9b3cc5daf09babd6", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/294aeaf4b3246b8976acf454c85f851c6e3520b1/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294aeaf4b3246b8976acf454c85f851c6e3520b1/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=294aeaf4b3246b8976acf454c85f851c6e3520b1", "patch": "@@ -66,7 +66,7 @@ fn check_fn(cx: &LateContext, decl: &FnDecl, block: &Block) {\n     let mut bindings = Vec::new();\n     for arg in &decl.inputs {\n         if let PatKind::Binding(_, ident, _) = arg.pat.node {\n-            bindings.push((ident.node.unhygienize(), ident.span))\n+            bindings.push((ident.node, ident.span))\n         }\n     }\n     check_block(cx, block, &mut bindings);\n@@ -120,7 +120,7 @@ fn check_pat(cx: &LateContext, pat: &Pat, init: &Option<&Expr>, span: Span, bind\n     // TODO: match more stuff / destructuring\n     match pat.node {\n         PatKind::Binding(_, ref ident, ref inner) => {\n-            let name = ident.node.unhygienize();\n+            let name = ident.node;\n             if is_binding(cx, pat) {\n                 let mut new_binding = true;\n                 for tup in bindings.iter_mut() {\n@@ -139,7 +139,6 @@ fn check_pat(cx: &LateContext, pat: &Pat, init: &Option<&Expr>, span: Span, bind\n                 check_pat(cx, p, init, span, bindings);\n             }\n         }\n-        // PatEnum(Path, Option<Vec<P<Pat>>>),\n         PatKind::Struct(_, ref pfields, _) => {\n             if let Some(ref init_struct) = *init {\n                 if let ExprStruct(_, ref efields, _) = init_struct.node {\n@@ -327,7 +326,7 @@ fn is_self_shadow(name: Name, expr: &Expr) -> bool {\n }\n \n fn path_eq_name(name: Name, path: &Path) -> bool {\n-    !path.global && path.segments.len() == 1 && path.segments[0].name.unhygienize() == name\n+    !path.global && path.segments.len() == 1 && path.segments[0].name.as_str() == name.as_str()\n }\n \n struct ContainsSelf {\n@@ -337,7 +336,7 @@ struct ContainsSelf {\n \n impl<'v> Visitor<'v> for ContainsSelf {\n     fn visit_name(&mut self, _: Span, name: Name) {\n-        if self.name == name.unhygienize() {\n+        if self.name == name {\n             self.result = true;\n         }\n     }"}, {"sha": "c3700d1b1cd430108ac7e7439443505195509c2e", "filename": "tests/compile-fail/used_underscore_binding.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/294aeaf4b3246b8976acf454c85f851c6e3520b1/tests%2Fcompile-fail%2Fused_underscore_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294aeaf4b3246b8976acf454c85f851c6e3520b1/tests%2Fcompile-fail%2Fused_underscore_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fused_underscore_binding.rs?ref=294aeaf4b3246b8976acf454c85f851c6e3520b1", "patch": "@@ -5,14 +5,27 @@\n #![allow(blacklisted_name)]\n #![deny(used_underscore_binding)]\n \n+macro_rules! test_macro {\n+    () => {{\n+        let _foo = 42;\n+        _foo + 1\n+    }}\n+}\n+\n /// Test that we lint if we use a binding with a single leading underscore\n fn prefix_underscore(_foo: u32) -> u32 {\n     _foo + 1 //~ ERROR used binding `_foo` which is prefixed with an underscore\n }\n \n-/// Test that we lint even if the use is within a macro expansion\n+/// Test that we lint if we use a `_`-variable defined outside within a macro expansion\n fn in_macro(_foo: u32) {\n-    println!(\"{}\", _foo); //~ ERROR used binding `_foo` which is prefixed with an underscore\n+    println!(\"{}\", _foo);\n+    //~^ ERROR used binding `_foo` which is prefixed with an underscore\n+    assert_eq!(_foo, _foo);\n+    //~^ ERROR used binding `_foo` which is prefixed with an underscore\n+    //~| ERROR used binding `_foo` which is prefixed with an underscore\n+\n+    test_macro!() + 1;\n }\n \n // Struct for testing use of fields prefixed with an underscore"}]}