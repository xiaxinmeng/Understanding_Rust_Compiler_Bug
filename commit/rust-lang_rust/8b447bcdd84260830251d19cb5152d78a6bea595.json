{"sha": "8b447bcdd84260830251d19cb5152d78a6bea595", "node_id": "C_kwDOAAsO6NoAKDhiNDQ3YmNkZDg0MjYwODMwMjUxZDE5Y2I1MTUyZDc4YTZiZWE1OTU", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-04-09T15:06:45Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-04-09T15:06:45Z"}, "message": "Sync from rust af06dce64bf87ea9206bdf6cff61c144b9ce8458", "tree": {"sha": "74b154caf40cfbbd298ccce776adbb9100bb29c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74b154caf40cfbbd298ccce776adbb9100bb29c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b447bcdd84260830251d19cb5152d78a6bea595", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b447bcdd84260830251d19cb5152d78a6bea595", "html_url": "https://github.com/rust-lang/rust/commit/8b447bcdd84260830251d19cb5152d78a6bea595", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b447bcdd84260830251d19cb5152d78a6bea595/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4b379460fce873c411e639dc8db2a7a492b5b81", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4b379460fce873c411e639dc8db2a7a492b5b81", "html_url": "https://github.com/rust-lang/rust/commit/c4b379460fce873c411e639dc8db2a7a492b5b81"}, {"sha": "446650cb008d7f7c3fee06b9692d2f42d48041d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/446650cb008d7f7c3fee06b9692d2f42d48041d5", "html_url": "https://github.com/rust-lang/rust/commit/446650cb008d7f7c3fee06b9692d2f42d48041d5"}], "stats": {"total": 61, "additions": 37, "deletions": 24}, "files": [{"sha": "70eb0d0fa9740f9faef2a5b5fb3b003cb3ce57df", "filename": "src/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b447bcdd84260830251d19cb5152d78a6bea595/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b447bcdd84260830251d19cb5152d78a6bea595/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=8b447bcdd84260830251d19cb5152d78a6bea595", "patch": "@@ -327,7 +327,7 @@ pub(crate) fn codegen_fn_prelude<'tcx>(fx: &mut FunctionCx<'_, '_, 'tcx>, start_\n             ArgKind::Spread(params) => {\n                 for (i, param) in params.into_iter().enumerate() {\n                     if let Some(param) = param {\n-                        place.place_field(fx, mir::Field::new(i)).write_cvalue(fx, param);\n+                        place.place_field(fx, FieldIdx::new(i)).write_cvalue(fx, param);\n                     }\n                 }\n             }\n@@ -460,7 +460,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n         args.push(self_arg);\n         for i in 0..tupled_arguments.len() {\n             args.push(CallArgument {\n-                value: pack_arg.value.value_field(fx, mir::Field::new(i)),\n+                value: pack_arg.value.value_field(fx, FieldIdx::new(i)),\n                 is_owned: pack_arg.is_owned,\n             });\n         }"}, {"sha": "24b0cb534b1272f422d0c98756d3a0282a4bf2f9", "filename": "src/base.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8b447bcdd84260830251d19cb5152d78a6bea595/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b447bcdd84260830251d19cb5152d78a6bea595/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=8b447bcdd84260830251d19cb5152d78a6bea595", "patch": "@@ -335,7 +335,7 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n             TerminatorKind::Return => {\n                 crate::abi::codegen_return(fx);\n             }\n-            TerminatorKind::Assert { cond, expected, msg, target, cleanup: _ } => {\n+            TerminatorKind::Assert { cond, expected, msg, target, unwind: _ } => {\n                 if !fx.tcx.sess.overflow_checks() && msg.is_optional_overflow_check() {\n                     let target = fx.get_block(*target);\n                     fx.bcx.ins().jump(target, &[]);\n@@ -369,6 +369,18 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n                             source_info.span,\n                         );\n                     }\n+                    AssertKind::MisalignedPointerDereference { ref required, ref found } => {\n+                        let required = codegen_operand(fx, required).load_scalar(fx);\n+                        let found = codegen_operand(fx, found).load_scalar(fx);\n+                        let location = fx.get_caller_location(source_info).load_scalar(fx);\n+\n+                        codegen_panic_inner(\n+                            fx,\n+                            rustc_hir::LangItem::PanicBoundsCheck,\n+                            &[required, found, location],\n+                            source_info.span,\n+                        );\n+                    }\n                     _ => {\n                         let msg_str = msg.description();\n                         codegen_panic(fx, msg_str, source_info);\n@@ -428,7 +440,7 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n                 destination,\n                 target,\n                 fn_span,\n-                cleanup: _,\n+                unwind: _,\n                 from_hir_call: _,\n             } => {\n                 fx.tcx.prof.generic_activity(\"codegen call\").run(|| {\n@@ -448,7 +460,7 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n                 options,\n                 destination,\n                 line_spans: _,\n-                cleanup: _,\n+                unwind: _,\n             } => {\n                 if options.contains(InlineAsmOptions::MAY_UNWIND) {\n                     fx.tcx.sess.span_fatal(\n@@ -466,7 +478,7 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n                     *destination,\n                 );\n             }\n-            TerminatorKind::Abort => {\n+            TerminatorKind::Terminate => {\n                 codegen_panic_cannot_unwind(fx, source_info);\n             }\n             TerminatorKind::Resume => {\n@@ -784,14 +796,15 @@ fn codegen_stmt<'tcx>(\n                     if active_field_index.is_some() {\n                         assert_eq!(operands.len(), 1);\n                     }\n-                    for (i, operand) in operands.iter().enumerate() {\n+                    for (i, operand) in operands.iter_enumerated() {\n                         let operand = codegen_operand(fx, operand);\n                         let field_index = active_field_index.unwrap_or(i);\n                         let to = if let mir::AggregateKind::Array(_) = **kind {\n-                            let index = fx.bcx.ins().iconst(fx.pointer_type, field_index as i64);\n+                            let array_index = i64::from(field_index.as_u32());\n+                            let index = fx.bcx.ins().iconst(fx.pointer_type, array_index);\n                             variant_dest.place_index(fx, index)\n                         } else {\n-                            variant_dest.place_field(fx, mir::Field::new(field_index))\n+                            variant_dest.place_field(fx, field_index)\n                         };\n                         to.write_cvalue(fx, operand);\n                     }"}, {"sha": "bc2867a625c4a0747973ceddb1c0b9063da3fe38", "filename": "src/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b447bcdd84260830251d19cb5152d78a6bea595/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b447bcdd84260830251d19cb5152d78a6bea595/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=8b447bcdd84260830251d19cb5152d78a6bea595", "patch": "@@ -551,7 +551,7 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n                     TerminatorKind::Goto { .. }\n                     | TerminatorKind::SwitchInt { .. }\n                     | TerminatorKind::Resume\n-                    | TerminatorKind::Abort\n+                    | TerminatorKind::Terminate\n                     | TerminatorKind::Return\n                     | TerminatorKind::Unreachable\n                     | TerminatorKind::Drop { .. }"}, {"sha": "f740945a03c31578b8b025a062288d44d9ea6a16", "filename": "src/discriminant.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b447bcdd84260830251d19cb5152d78a6bea595/src%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b447bcdd84260830251d19cb5152d78a6bea595/src%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiscriminant.rs?ref=8b447bcdd84260830251d19cb5152d78a6bea595", "patch": "@@ -26,7 +26,7 @@ pub(crate) fn codegen_set_discriminant<'tcx>(\n             tag_encoding: TagEncoding::Direct,\n             variants: _,\n         } => {\n-            let ptr = place.place_field(fx, mir::Field::new(tag_field));\n+            let ptr = place.place_field(fx, FieldIdx::new(tag_field));\n             let to = layout.ty.discriminant_for_variant(fx.tcx, variant_index).unwrap().val;\n             let to = if ptr.layout().abi.is_signed() {\n                 ty::ScalarInt::try_from_int(\n@@ -47,7 +47,7 @@ pub(crate) fn codegen_set_discriminant<'tcx>(\n             variants: _,\n         } => {\n             if variant_index != untagged_variant {\n-                let niche = place.place_field(fx, mir::Field::new(tag_field));\n+                let niche = place.place_field(fx, FieldIdx::new(tag_field));\n                 let niche_type = fx.clif_type(niche.layout().ty).unwrap();\n                 let niche_value = variant_index.as_u32() - niche_variants.start().as_u32();\n                 let niche_value = (niche_value as u128).wrapping_add(niche_start);\n@@ -107,7 +107,7 @@ pub(crate) fn codegen_get_discriminant<'tcx>(\n     let cast_to = fx.clif_type(dest_layout.ty).unwrap();\n \n     // Read the tag/niche-encoded discriminant from memory.\n-    let tag = value.value_field(fx, mir::Field::new(tag_field));\n+    let tag = value.value_field(fx, FieldIdx::new(tag_field));\n     let tag = tag.load_scalar(fx);\n \n     // Decode the discriminant (specifically if it's niche-encoded)."}, {"sha": "0f32d1a25ffade75762b0c7b39f5cbbfcb411089", "filename": "src/intrinsics/llvm_x86.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b447bcdd84260830251d19cb5152d78a6bea595/src%2Fintrinsics%2Fllvm_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b447bcdd84260830251d19cb5152d78a6bea595/src%2Fintrinsics%2Fllvm_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm_x86.rs?ref=8b447bcdd84260830251d19cb5152d78a6bea595", "patch": "@@ -179,8 +179,8 @@ fn llvm_add_sub<'tcx>(\n \n     // c + carry -> c + first intermediate carry or borrow respectively\n     let int0 = crate::num::codegen_checked_int_binop(fx, bin_op, a, b);\n-    let c = int0.value_field(fx, mir::Field::new(0));\n-    let cb0 = int0.value_field(fx, mir::Field::new(1)).load_scalar(fx);\n+    let c = int0.value_field(fx, FieldIdx::new(0));\n+    let cb0 = int0.value_field(fx, FieldIdx::new(1)).load_scalar(fx);\n \n     // c + carry -> c + second intermediate carry or borrow respectively\n     let cb_in_as_u64 = fx.bcx.ins().uextend(types::I64, cb_in);"}, {"sha": "c705532c55e9d2dd2d2c4be90e884db64eff6889", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b447bcdd84260830251d19cb5152d78a6bea595/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b447bcdd84260830251d19cb5152d78a6bea595/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=8b447bcdd84260830251d19cb5152d78a6bea595", "patch": "@@ -86,7 +86,7 @@ mod prelude {\n         self, FloatTy, Instance, InstanceDef, IntTy, ParamEnv, Ty, TyCtxt, TypeAndMut,\n         TypeFoldable, TypeVisitableExt, UintTy,\n     };\n-    pub(crate) use rustc_target::abi::{Abi, Scalar, Size, VariantIdx, FIRST_VARIANT};\n+    pub(crate) use rustc_target::abi::{Abi, FieldIdx, Scalar, Size, VariantIdx, FIRST_VARIANT};\n \n     pub(crate) use rustc_data_structures::fx::FxHashMap;\n "}, {"sha": "ff0e12410e7031498d13b61e02bc1e3525401055", "filename": "src/unsize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b447bcdd84260830251d19cb5152d78a6bea595/src%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b447bcdd84260830251d19cb5152d78a6bea595/src%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funsize.rs?ref=8b447bcdd84260830251d19cb5152d78a6bea595", "patch": "@@ -147,8 +147,8 @@ pub(crate) fn coerce_unsized_into<'tcx>(\n             assert_eq!(def_a, def_b);\n \n             for i in 0..def_a.variant(FIRST_VARIANT).fields.len() {\n-                let src_f = src.value_field(fx, mir::Field::new(i));\n-                let dst_f = dst.place_field(fx, mir::Field::new(i));\n+                let src_f = src.value_field(fx, FieldIdx::new(i));\n+                let dst_f = dst.place_field(fx, FieldIdx::new(i));\n \n                 if dst_f.layout().is_zst() {\n                     continue;"}, {"sha": "c964d1ac5e0dd4608de6fcd852b09fa8be73d38f", "filename": "src/value_and_place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b447bcdd84260830251d19cb5152d78a6bea595/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b447bcdd84260830251d19cb5152d78a6bea595/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=8b447bcdd84260830251d19cb5152d78a6bea595", "patch": "@@ -10,7 +10,7 @@ fn codegen_field<'tcx>(\n     base: Pointer,\n     extra: Option<Value>,\n     layout: TyAndLayout<'tcx>,\n-    field: mir::Field,\n+    field: FieldIdx,\n ) -> (Pointer, TyAndLayout<'tcx>) {\n     let field_offset = layout.fields.offset(field.index());\n     let field_layout = layout.field(&*fx, field.index());\n@@ -210,7 +210,7 @@ impl<'tcx> CValue<'tcx> {\n     pub(crate) fn value_field(\n         self,\n         fx: &mut FunctionCx<'_, '_, 'tcx>,\n-        field: mir::Field,\n+        field: FieldIdx,\n     ) -> CValue<'tcx> {\n         let layout = self.1;\n         match self.0 {\n@@ -644,7 +644,7 @@ impl<'tcx> CPlace<'tcx> {\n     pub(crate) fn place_field(\n         self,\n         fx: &mut FunctionCx<'_, '_, 'tcx>,\n-        field: mir::Field,\n+        field: FieldIdx,\n     ) -> CPlace<'tcx> {\n         let layout = self.layout();\n "}, {"sha": "b309695c190f8b4b6489a251870fa04116c39957", "filename": "src/vtable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b447bcdd84260830251d19cb5152d78a6bea595/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b447bcdd84260830251d19cb5152d78a6bea595/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=8b447bcdd84260830251d19cb5152d78a6bea595", "patch": "@@ -50,7 +50,7 @@ pub(crate) fn get_ptr_and_method_ref<'tcx>(\n         if let Abi::Scalar(_) = arg.layout().abi {\n             'descend_newtypes: while !arg.layout().ty.is_unsafe_ptr() && !arg.layout().ty.is_ref() {\n                 for i in 0..arg.layout().fields.count() {\n-                    let field = arg.value_field(fx, mir::Field::new(i));\n+                    let field = arg.value_field(fx, FieldIdx::new(i));\n                     if !field.layout().is_zst() {\n                         // we found the one non-zero-sized field that is allowed\n                         // now find *its* non-zero-sized field, or stop if it's a\n@@ -68,9 +68,9 @@ pub(crate) fn get_ptr_and_method_ref<'tcx>(\n             if ty.is_dyn_star() {\n                 let inner_layout = fx.layout_of(arg.layout().ty.builtin_deref(true).unwrap().ty);\n                 let dyn_star = CPlace::for_ptr(Pointer::new(arg.load_scalar(fx)), inner_layout);\n-                let ptr = dyn_star.place_field(fx, mir::Field::new(0)).to_ptr();\n+                let ptr = dyn_star.place_field(fx, FieldIdx::new(0)).to_ptr();\n                 let vtable =\n-                    dyn_star.place_field(fx, mir::Field::new(1)).to_cvalue(fx).load_scalar(fx);\n+                    dyn_star.place_field(fx, FieldIdx::new(1)).to_cvalue(fx).load_scalar(fx);\n                 break 'block (ptr, vtable);\n             }\n         }"}]}