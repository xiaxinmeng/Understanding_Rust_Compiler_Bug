{"sha": "979d0c975636cd87a27dd020c1ace644aa1aa4e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3OWQwYzk3NTYzNmNkODdhMjdkZDAyMGMxYWNlNjQ0YWExYWE0ZTk=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-07-17T06:26:10Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-07-17T06:26:10Z"}, "message": "Resolve some warnings", "tree": {"sha": "05a4ab4e37da2a886e6168a14db60ba6cabfbf7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05a4ab4e37da2a886e6168a14db60ba6cabfbf7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/979d0c975636cd87a27dd020c1ace644aa1aa4e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/979d0c975636cd87a27dd020c1ace644aa1aa4e9", "html_url": "https://github.com/rust-lang/rust/commit/979d0c975636cd87a27dd020c1ace644aa1aa4e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/979d0c975636cd87a27dd020c1ace644aa1aa4e9/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3375078e5b0303480d7cc34fc93c1c776b94512", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3375078e5b0303480d7cc34fc93c1c776b94512", "html_url": "https://github.com/rust-lang/rust/commit/c3375078e5b0303480d7cc34fc93c1c776b94512"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "1973115cd435046baac35eddb18f2a6fb1837b71", "filename": "src/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/979d0c975636cd87a27dd020c1ace644aa1aa4e9/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979d0c975636cd87a27dd020c1ace644aa1aa4e9/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=979d0c975636cd87a27dd020c1ace644aa1aa4e9", "patch": "@@ -109,7 +109,7 @@ impl<'a> FmtVisitor<'a> {\n         let first_index = if has_self { 0 } else { 1 };\n \n         if self.config.reorder_imports {\n-            items.tail_mut().sort_by(|a, b| a.item.cmp(&b.item));\n+            items[1..].sort_by(|a, b| a.item.cmp(&b.item));\n         }\n \n         let list = write_list(&items[first_index..], &fmt);"}, {"sha": "a3a0659c29288bdbca84ba8e8e44df78f3a64244", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/979d0c975636cd87a27dd020c1ace644aa1aa4e9/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979d0c975636cd87a27dd020c1ace644aa1aa4e9/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=979d0c975636cd87a27dd020c1ace644aa1aa4e9", "patch": "@@ -11,7 +11,7 @@\n #![feature(rustc_private)]\n #![feature(str_escape)]\n #![feature(str_char)]\n-#![feature(slice_extras)]\n+\n \n // TODO we're going to allocate a whole bunch of temp Strings, is it worth\n // keeping some scratch mem for this and running our own StrPool?"}, {"sha": "474881b8ad2a5843f9da30dda338ac30310babad", "filename": "src/types.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/979d0c975636cd87a27dd020c1ace644aa1aa4e9/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979d0c975636cd87a27dd020c1ace644aa1aa4e9/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=979d0c975636cd87a27dd020c1ace644aa1aa4e9", "patch": "@@ -26,16 +26,16 @@ impl<'a> FmtVisitor<'a> {\n                 if bound_lifetimes.len() > 0 {\n                     format!(\"for<{}> {}: {}\",\n                             bound_lifetimes.iter().map(|l| self.rewrite_lifetime_def(l))\n-                                .collect::<Vec<_>>().connect(\", \"),\n+                                .collect::<Vec<_>>().join(\", \"),\n                             pprust::ty_to_string(bounded_ty),\n                             bounds.iter().map(|b| self.rewrite_ty_bound(b))\n-                                .collect::<Vec<_>>().connect(\" + \"))\n+                                .collect::<Vec<_>>().join(\" + \"))\n \n                 } else {\n                     format!(\"{}: {}\",\n                             pprust::ty_to_string(bounded_ty),\n                             bounds.iter().map(|b| self.rewrite_ty_bound(b))\n-                                .collect::<Vec<_>>().connect(\" + \"))\n+                                .collect::<Vec<_>>().join(\" + \"))\n                 }\n             }\n             &ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate{ref lifetime,\n@@ -44,7 +44,7 @@ impl<'a> FmtVisitor<'a> {\n                 format!(\"{}: {}\",\n                         pprust::lifetime_to_string(lifetime),\n                         bounds.iter().map(|l| pprust::lifetime_to_string(l))\n-                            .collect::<Vec<_>>().connect(\" + \"))\n+                            .collect::<Vec<_>>().join(\" + \"))\n             }\n             &ast::WherePredicate::EqPredicate(ast::WhereEqPredicate{ref path, ref ty, ..}) => {\n                 format!(\"{} = {}\", pprust::path_to_string(path), pprust::ty_to_string(ty))\n@@ -60,7 +60,7 @@ impl<'a> FmtVisitor<'a> {\n         format!(\"{}: {}\",\n                 pprust::lifetime_to_string(&lifetime.lifetime),\n                 lifetime.bounds.iter().map(|l| pprust::lifetime_to_string(l))\n-                    .collect::<Vec<_>>().connect(\" + \"))\n+                    .collect::<Vec<_>>().join(\" + \"))\n     }\n \n     pub fn rewrite_ty_bound(&self, bound: &ast::TyParamBound) -> String {\n@@ -83,7 +83,7 @@ impl<'a> FmtVisitor<'a> {\n         if ty_param.bounds.len() > 0 {\n             result.push_str(\": \");\n             result.push_str(&ty_param.bounds.iter().map(|b| self.rewrite_ty_bound(b))\n-                                .collect::<Vec<_>>().connect(\" + \"));\n+                                .collect::<Vec<_>>().join(\" + \"));\n         }\n         if let Some(ref def) = ty_param.default {\n             result.push_str(\" = \");\n@@ -97,7 +97,7 @@ impl<'a> FmtVisitor<'a> {\n         if t.bound_lifetimes.len() > 0 {\n             format!(\"for<{}> {}\",\n                     t.bound_lifetimes.iter().map(|l| self.rewrite_lifetime_def(l))\n-                        .collect::<Vec<_>>().connect(\", \"),\n+                        .collect::<Vec<_>>().join(\", \"),\n                     pprust::path_to_string(&t.trait_ref.path))\n \n         } else {"}]}