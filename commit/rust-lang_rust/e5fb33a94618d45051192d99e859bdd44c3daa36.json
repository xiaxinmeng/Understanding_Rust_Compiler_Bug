{"sha": "e5fb33a94618d45051192d99e859bdd44c3daa36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZmIzM2E5NDYxOGQ0NTA1MTE5MmQ5OWU4NTliZGQ0NGMzZGFhMzY=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-23T12:17:53Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-23T12:17:53Z"}, "message": "Merge #879\n\n879: Fixes to goto definition r=vipentti a=vipentti\n\nPreviously goto definition would fail when the cursor was over the name of the definition. Now we should properly resolve to a `NavigationTarget` when on top of the name of a definition.\r\n\r\nIn addition this adds `name_range` field to `FileSymbol`, this further fixes goto_definition and symbol based navigation by allowing the `NavigationTarget` to actually have a `focus_range`, meaning instead of focusing on the start of the `full_range`, we can have the cursor focus on the name.\r\n\r\ne.g. goto definition\r\n```rust\r\nfn bar() {\r\n    fn foo() { }\r\n  \r\n   foo<|>();\r\n}\r\n```\r\n\r\nPreviously this would put the cursor at the start of the FN_DEF:\r\n```rust\r\nfn bar() {\r\n   <|>fn foo() { }\r\n  \r\n   foo();\r\n}\r\n```\r\nNow when using the symbol based resolving, we'll have a proper focus range and instead put the cursor at the start of the name.\r\n\r\n```rust\r\nfn bar() {\r\n   fn <|>foo() { }\r\n  \r\n   foo();\r\n}\r\n```\r\n\r\nThis fixes #877 but doesn't contain the refactoring of the return type for `goto_definition`\n\nCo-authored-by: Ville Penttinen <villem.penttinen@gmail.com>", "tree": {"sha": "b77da2812c973e2270d7abf808634cb9655e2c68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b77da2812c973e2270d7abf808634cb9655e2c68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5fb33a94618d45051192d99e859bdd44c3daa36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5fb33a94618d45051192d99e859bdd44c3daa36", "html_url": "https://github.com/rust-lang/rust/commit/e5fb33a94618d45051192d99e859bdd44c3daa36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5fb33a94618d45051192d99e859bdd44c3daa36/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "38add103c3f30493e336a37827a76f48a6e7c584", "url": "https://api.github.com/repos/rust-lang/rust/commits/38add103c3f30493e336a37827a76f48a6e7c584", "html_url": "https://github.com/rust-lang/rust/commit/38add103c3f30493e336a37827a76f48a6e7c584"}, {"sha": "40e6cb196b3e4fdb580812a418edfb8df08cf423", "url": "https://api.github.com/repos/rust-lang/rust/commits/40e6cb196b3e4fdb580812a418edfb8df08cf423", "html_url": "https://github.com/rust-lang/rust/commit/40e6cb196b3e4fdb580812a418edfb8df08cf423"}], "stats": {"total": 150, "additions": 139, "deletions": 11}, "files": [{"sha": "4dac96bfec252e6c95bacb0e5ed6efef8fce7602", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 119, "deletions": 2, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/e5fb33a94618d45051192d99e859bdd44c3daa36/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fb33a94618d45051192d99e859bdd44c3daa36/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=e5fb33a94618d45051192d99e859bdd44c3daa36", "patch": "@@ -1,7 +1,8 @@\n use ra_db::{FileId, SourceDatabase};\n use ra_syntax::{\n     AstNode, ast,\n-    algo::find_node_at_offset,\n+    algo::{find_node_at_offset, visit::{visitor, Visitor}},\n+    SyntaxNode,\n };\n use test_utils::tested_by;\n use hir::Resolution;\n@@ -114,7 +115,9 @@ fn name_definition(\n     file_id: FileId,\n     name: &ast::Name,\n ) -> Option<Vec<NavigationTarget>> {\n-    if let Some(module) = name.syntax().parent().and_then(ast::Module::cast) {\n+    let parent = name.syntax().parent()?;\n+\n+    if let Some(module) = ast::Module::cast(&parent) {\n         if module.has_semi() {\n             if let Some(child_module) =\n                 hir::source_binder::module_from_declaration(db, file_id, module)\n@@ -124,9 +127,29 @@ fn name_definition(\n             }\n         }\n     }\n+\n+    if let Some(nav) = named_target(file_id, &parent) {\n+        return Some(vec![nav]);\n+    }\n+\n     None\n }\n \n+fn named_target(file_id: FileId, node: &SyntaxNode) -> Option<NavigationTarget> {\n+    visitor()\n+        .visit(|node: &ast::StructDef| NavigationTarget::from_named(file_id, node))\n+        .visit(|node: &ast::EnumDef| NavigationTarget::from_named(file_id, node))\n+        .visit(|node: &ast::EnumVariant| NavigationTarget::from_named(file_id, node))\n+        .visit(|node: &ast::FnDef| NavigationTarget::from_named(file_id, node))\n+        .visit(|node: &ast::TypeDef| NavigationTarget::from_named(file_id, node))\n+        .visit(|node: &ast::ConstDef| NavigationTarget::from_named(file_id, node))\n+        .visit(|node: &ast::StaticDef| NavigationTarget::from_named(file_id, node))\n+        .visit(|node: &ast::TraitDef| NavigationTarget::from_named(file_id, node))\n+        .visit(|node: &ast::NamedFieldDef| NavigationTarget::from_named(file_id, node))\n+        .visit(|node: &ast::Module| NavigationTarget::from_named(file_id, node))\n+        .accept(node)\n+}\n+\n #[cfg(test)]\n mod tests {\n     use test_utils::covers;\n@@ -231,4 +254,98 @@ mod tests {\n             \"spam NAMED_FIELD_DEF FileId(1) [17; 26) [17; 21)\",\n         );\n     }\n+\n+    #[test]\n+    fn goto_definition_works_when_used_on_definition_name_itself() {\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            struct Foo<|> { value: u32 }\n+            \",\n+            \"Foo STRUCT_DEF FileId(1) [0; 25) [7; 10)\",\n+        );\n+\n+        check_goto(\n+            r#\"\n+            //- /lib.rs\n+            struct Foo {\n+                field<|>: string,\n+            }\n+            \"#,\n+            \"field NAMED_FIELD_DEF FileId(1) [17; 30) [17; 22)\",\n+        );\n+\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            fn foo_test<|>() {\n+            }\n+            \",\n+            \"foo_test FN_DEF FileId(1) [0; 17) [3; 11)\",\n+        );\n+\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            enum Foo<|> {\n+                Variant,\n+            }\n+            \",\n+            \"Foo ENUM_DEF FileId(1) [0; 25) [5; 8)\",\n+        );\n+\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            enum Foo {\n+                Variant1,\n+                Variant2<|>,\n+                Variant3,\n+            }\n+            \",\n+            \"Variant2 ENUM_VARIANT FileId(1) [29; 37) [29; 37)\",\n+        );\n+\n+        check_goto(\n+            r#\"\n+            //- /lib.rs\n+            static inner<|>: &str = \"\";\n+            \"#,\n+            \"inner STATIC_DEF FileId(1) [0; 24) [7; 12)\",\n+        );\n+\n+        check_goto(\n+            r#\"\n+            //- /lib.rs\n+            const inner<|>: &str = \"\";\n+            \"#,\n+            \"inner CONST_DEF FileId(1) [0; 23) [6; 11)\",\n+        );\n+\n+        check_goto(\n+            r#\"\n+            //- /lib.rs\n+            type Thing<|> = Option<()>;\n+            \"#,\n+            \"Thing TYPE_DEF FileId(1) [0; 24) [5; 10)\",\n+        );\n+\n+        check_goto(\n+            r#\"\n+            //- /lib.rs\n+            trait Foo<|> {\n+            }\n+            \"#,\n+            \"Foo TRAIT_DEF FileId(1) [0; 13) [6; 9)\",\n+        );\n+\n+        check_goto(\n+            r#\"\n+            //- /lib.rs\n+            mod bar<|> {\n+            }\n+            \"#,\n+            \"bar MODULE FileId(1) [0; 11) [4; 7)\",\n+        );\n+    }\n }"}, {"sha": "ce5ae0363193337a10d72c67e525f1cbdbdd6149", "filename": "crates/ra_ide_api/src/navigation_target.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e5fb33a94618d45051192d99e859bdd44c3daa36/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fb33a94618d45051192d99e859bdd44c3daa36/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs?ref=e5fb33a94618d45051192d99e859bdd44c3daa36", "patch": "@@ -67,7 +67,7 @@ impl NavigationTarget {\n             name: symbol.name.clone(),\n             kind: symbol.ptr.kind(),\n             full_range: symbol.ptr.range(),\n-            focus_range: None,\n+            focus_range: symbol.name_range,\n             container_name: symbol.container_name.clone(),\n         }\n     }\n@@ -193,12 +193,13 @@ impl NavigationTarget {\n             buf.push_str(&format!(\" {:?}\", focus_range))\n         }\n         if let Some(container_name) = self.container_name() {\n-            buf.push_str(&format!(\" {:?}\", container_name))\n+            buf.push_str(&format!(\" {}\", container_name))\n         }\n         buf\n     }\n \n-    fn from_named(file_id: FileId, node: &impl ast::NameOwner) -> NavigationTarget {\n+    /// Allows `NavigationTarget` to be created from a `NameOwner`\n+    pub(crate) fn from_named(file_id: FileId, node: &impl ast::NameOwner) -> NavigationTarget {\n         let name = node.name().map(|it| it.text().clone()).unwrap_or_default();\n         let focus_range = node.name().map(|it| it.syntax().range());\n         NavigationTarget::from_syntax(file_id, name, focus_range, node.syntax())"}, {"sha": "93bdf05d8fca696391973262522083457654ff76", "filename": "crates/ra_ide_api/src/symbol_index.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e5fb33a94618d45051192d99e859bdd44c3daa36/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fb33a94618d45051192d99e859bdd44c3daa36/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs?ref=e5fb33a94618d45051192d99e859bdd44c3daa36", "patch": "@@ -33,6 +33,7 @@ use ra_syntax::{\n     SyntaxKind::{self, *},\n     ast::{self, NameOwner},\n     WalkEvent,\n+    TextRange,\n };\n use ra_db::{\n     SourceRootId, SourceDatabase,\n@@ -70,7 +71,7 @@ fn file_symbols(db: &impl SymbolsDatabase, file_id: FileId) -> Arc<SymbolIndex>\n         let node = find_covering_node(source_file.syntax(), text_range);\n         let ptr = SyntaxNodePtr::new(node);\n         // TODO: Should we get container name for macro symbols?\n-        symbols.push(FileSymbol { file_id, name, ptr, container_name: None })\n+        symbols.push(FileSymbol { file_id, name, ptr, name_range: None, container_name: None })\n     }\n \n     Arc::new(SymbolIndex::new(symbols))\n@@ -207,6 +208,7 @@ pub(crate) struct FileSymbol {\n     pub(crate) file_id: FileId,\n     pub(crate) name: SmolStr,\n     pub(crate) ptr: SyntaxNodePtr,\n+    pub(crate) name_range: Option<TextRange>,\n     pub(crate) container_name: Option<SmolStr>,\n }\n \n@@ -236,12 +238,14 @@ fn source_file_to_file_symbols(source_file: &SourceFile, file_id: FileId) -> Vec\n     symbols\n }\n \n-fn to_symbol(node: &SyntaxNode) -> Option<(SmolStr, SyntaxNodePtr)> {\n-    fn decl<N: NameOwner>(node: &N) -> Option<(SmolStr, SyntaxNodePtr)> {\n-        let name = node.name()?.text().clone();\n+fn to_symbol(node: &SyntaxNode) -> Option<(SmolStr, SyntaxNodePtr, TextRange)> {\n+    fn decl<N: NameOwner>(node: &N) -> Option<(SmolStr, SyntaxNodePtr, TextRange)> {\n+        let name = node.name()?;\n+        let name_range = name.syntax().range();\n+        let name = name.text().clone();\n         let ptr = SyntaxNodePtr::new(node.syntax());\n \n-        Some((name, ptr))\n+        Some((name, ptr, name_range))\n     }\n     visitor()\n         .visit(decl::<ast::FnDef>)\n@@ -256,5 +260,11 @@ fn to_symbol(node: &SyntaxNode) -> Option<(SmolStr, SyntaxNodePtr)> {\n }\n \n fn to_file_symbol(node: &SyntaxNode, file_id: FileId) -> Option<FileSymbol> {\n-    to_symbol(node).map(move |(name, ptr)| FileSymbol { name, ptr, file_id, container_name: None })\n+    to_symbol(node).map(move |(name, ptr, name_range)| FileSymbol {\n+        name,\n+        ptr,\n+        file_id,\n+        name_range: Some(name_range),\n+        container_name: None,\n+    })\n }"}]}