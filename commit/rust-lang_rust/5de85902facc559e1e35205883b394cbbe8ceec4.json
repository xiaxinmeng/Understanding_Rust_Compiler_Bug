{"sha": "5de85902facc559e1e35205883b394cbbe8ceec4", "node_id": "C_kwDOAAsO6NoAKDVkZTg1OTAyZmFjYzU1OWUxZTM1MjA1ODgzYjM5NGNiYmU4Y2VlYzQ", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-06-28T18:15:30Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-07-01T15:04:19Z"}, "message": "Factor out hir::Node::Binding", "tree": {"sha": "f02133aa185f836ec64b181efd308a5082ebf59b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f02133aa185f836ec64b181efd308a5082ebf59b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5de85902facc559e1e35205883b394cbbe8ceec4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5de85902facc559e1e35205883b394cbbe8ceec4", "html_url": "https://github.com/rust-lang/rust/commit/5de85902facc559e1e35205883b394cbbe8ceec4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5de85902facc559e1e35205883b394cbbe8ceec4/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09f5df5087c1d045db3bbf1b886702ec343a2f61", "url": "https://api.github.com/repos/rust-lang/rust/commits/09f5df5087c1d045db3bbf1b886702ec343a2f61", "html_url": "https://github.com/rust-lang/rust/commit/09f5df5087c1d045db3bbf1b886702ec343a2f61"}], "stats": {"total": 29, "additions": 11, "deletions": 18}, "files": [{"sha": "1ac7bfba06ba217a38c4d23560be1ac841116126", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5de85902facc559e1e35205883b394cbbe8ceec4/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de85902facc559e1e35205883b394cbbe8ceec4/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=5de85902facc559e1e35205883b394cbbe8ceec4", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_hir;\n use clippy_utils::ty::contains_ty;\n use rustc_hir::intravisit;\n-use rustc_hir::{self, AssocItemKind, Body, FnDecl, HirId, HirIdSet, Impl, ItemKind, Node};\n+use rustc_hir::{self, AssocItemKind, Body, FnDecl, HirId, HirIdSet, Impl, ItemKind, Node, Pat, PatKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::FakeReadCause;\n@@ -132,7 +132,10 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n // TODO: Replace with Map::is_argument(..) when it's fixed\n fn is_argument(map: rustc_middle::hir::map::Map<'_>, id: HirId) -> bool {\n     match map.find(id) {\n-        Some(Node::Binding(_)) => (),\n+        Some(Node::Pat(Pat {\n+            kind: PatKind::Binding(..),\n+            ..\n+        })) => (),\n         _ => return false,\n     }\n \n@@ -144,15 +147,6 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n         if cmt.place.projections.is_empty() {\n             if let PlaceBase::Local(lid) = cmt.place.base {\n                 self.set.remove(&lid);\n-                let map = &self.cx.tcx.hir();\n-                if let Some(Node::Binding(_)) = map.find(cmt.hir_id) {\n-                    if self.set.contains(&lid) {\n-                        // let y = x where x is known\n-                        // remove x, insert y\n-                        self.set.insert(cmt.hir_id);\n-                        self.set.remove(&lid);\n-                    }\n-                }\n             }\n         }\n     }"}, {"sha": "5bf4313b41a49ae062fa7e8faf6f55ef83f52b9b", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5de85902facc559e1e35205883b394cbbe8ceec4/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de85902facc559e1e35205883b394cbbe8ceec4/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=5de85902facc559e1e35205883b394cbbe8ceec4", "patch": "@@ -125,7 +125,7 @@ fn look_in_block<'tcx, 'hir>(cx: &LateContext<'tcx>, kind: &'tcx ExprKind<'hir>)\n         // Find id of the local that expr_end_of_block resolves to\n         if let ExprKind::Path(QPath::Resolved(None, expr_path)) = expr_end_of_block.kind;\n         if let Res::Local(expr_res) = expr_path.res;\n-        if let Some(Node::Binding(res_pat)) = cx.tcx.hir().find(expr_res);\n+        if let Some(Node::Pat(res_pat)) = cx.tcx.hir().find(expr_res);\n \n         // Find id of the local we found in the block\n         if let PatKind::Binding(BindingAnnotation::Unannotated, local_hir_id, _ident, None) = local.pat.kind;"}, {"sha": "aedf3810b23e95c88de5d867eea3c03d446d0e24", "filename": "clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5de85902facc559e1e35205883b394cbbe8ceec4/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de85902facc559e1e35205883b394cbbe8ceec4/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=5de85902facc559e1e35205883b394cbbe8ceec4", "patch": "@@ -43,7 +43,7 @@ fn mut_warn_with_span(cx: &LateContext<'_>, span: Option<Span>) {\n fn check_for_mutability(cx: &LateContext<'_>, bound: &Expr<'_>) -> Option<HirId> {\n     if_chain! {\n         if let Some(hir_id) = path_to_local(bound);\n-        if let Node::Binding(pat) = cx.tcx.hir().get(hir_id);\n+        if let Node::Pat(pat) = cx.tcx.hir().get(hir_id);\n         if let PatKind::Binding(BindingAnnotation::Mutable, ..) = pat.kind;\n         then {\n             return Some(hir_id);"}, {"sha": "1439f1f4c75d5b03555c10edc1c2d67166c46d86", "filename": "clippy_lints/src/loops/same_item_push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5de85902facc559e1e35205883b394cbbe8ceec4/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de85902facc559e1e35205883b394cbbe8ceec4/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs?ref=5de85902facc559e1e35205883b394cbbe8ceec4", "patch": "@@ -63,7 +63,7 @@ pub(super) fn check<'tcx>(\n                         Res::Local(hir_id) => {\n                             let node = cx.tcx.hir().get(hir_id);\n                             if_chain! {\n-                                if let Node::Binding(pat) = node;\n+                                if let Node::Pat(pat) = node;\n                                 if let PatKind::Binding(bind_ann, ..) = pat.kind;\n                                 if !matches!(bind_ann, BindingAnnotation::RefMut | BindingAnnotation::Mutable);\n                                 let parent_node = cx.tcx.hir().get_parent_node(hir_id);"}, {"sha": "2ce9d0e77c1fd167f093fd0cb2613bfaf9bab27b", "filename": "clippy_lints/src/manual_rem_euclid.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5de85902facc559e1e35205883b394cbbe8ceec4/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de85902facc559e1e35205883b394cbbe8ceec4/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs?ref=5de85902facc559e1e35205883b394cbbe8ceec4", "patch": "@@ -71,8 +71,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualRemEuclid {\n             && let Some(const3) = check_for_unsigned_int_constant(cx, right)\n             // Also ensures the const is nonzero since zero can't be a divisor\n             && const1 == const2 && const2 == const3\n-            && let Some(hir_id) = path_to_local(expr3)\n-            && let Some(Node::Binding(_)) = cx.tcx.hir().find(hir_id) {\n+            && let Some(hir_id) = path_to_local(expr3) {\n                 // Apply only to params or locals with annotated types\n                 match cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n                     Some(Node::Param(..)) => (),"}, {"sha": "43e9451f7d37eb4f42b24e2b1bb39d2c5b8c74e8", "filename": "clippy_lints/src/methods/iter_skip_next.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5de85902facc559e1e35205883b394cbbe8ceec4/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de85902facc559e1e35205883b394cbbe8ceec4/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs?ref=5de85902facc559e1e35205883b394cbbe8ceec4", "patch": "@@ -22,7 +22,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n             |diag| {\n                 if_chain! {\n                     if let Some(id) = path_to_local(recv);\n-                    if let Node::Binding(pat) = cx.tcx.hir().get(id);\n+                    if let Node::Pat(pat) = cx.tcx.hir().get(id);\n                     if let PatKind::Binding(ann, _, _, _)  = pat.kind;\n                     if ann != BindingAnnotation::Mutable;\n                     then {"}, {"sha": "5cfd02232dec68e95e28ffd7d4e24f2712e90d34", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5de85902facc559e1e35205883b394cbbe8ceec4/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de85902facc559e1e35205883b394cbbe8ceec4/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=5de85902facc559e1e35205883b394cbbe8ceec4", "patch": "@@ -183,7 +183,7 @@ pub fn expr_or_init<'a, 'b, 'tcx: 'b>(cx: &LateContext<'tcx>, mut expr: &'a Expr\n pub fn find_binding_init<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<&'tcx Expr<'tcx>> {\n     let hir = cx.tcx.hir();\n     if_chain! {\n-        if let Some(Node::Binding(pat)) = hir.find(hir_id);\n+        if let Some(Node::Pat(pat)) = hir.find(hir_id);\n         if matches!(pat.kind, PatKind::Binding(BindingAnnotation::Unannotated, ..));\n         let parent = hir.get_parent_node(hir_id);\n         if let Some(Node::Local(local)) = hir.find(parent);"}]}