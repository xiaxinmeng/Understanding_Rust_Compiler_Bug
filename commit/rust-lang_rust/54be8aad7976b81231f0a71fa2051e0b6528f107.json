{"sha": "54be8aad7976b81231f0a71fa2051e0b6528f107", "node_id": "C_kwDOAAsO6NoAKDU0YmU4YWFkNzk3NmI4MTIzMWYwYTcxZmEyMDUxZTBiNjUyOGYxMDc", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2023-01-06T03:41:53Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2023-01-06T03:41:53Z"}, "message": "Ignore symbol shim clash when symbol is provided by `compiler_builtins`\n\nWhen this happens, we ignore the symbol from `compiler_builtins`\nin favor of Miri's builtin support.\n\nThis allows Miri to target platforms like wasm32-unknown-unknown,\nwhere functions like `memcmp` are provided by `compiler_builtins`.", "tree": {"sha": "b3ad218700123b9007cb633cbd7293a36deb751f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3ad218700123b9007cb633cbd7293a36deb751f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54be8aad7976b81231f0a71fa2051e0b6528f107", "comment_count": 0, "verification": {"verified": false, "reason": "invalid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmO3mRsACgkQtAh+UQ6Y\nsWQ8KA//XMnHPHhZzUSd8EZTddFhnGSt3sFluITtOP3JYs7SrBEJlA20589vNTGx\n//Qgw1NVm87DIToUPneFbW6x4smC9c9iodRh28b/5zVWn7eG1I+Xjx5YVy6/MykH\nuXlB65D2RjUQ89IFQQ8ft8KSCLAntzf4icS82jTpsLN5It7465ea1vj1sNBToRG9\nvTdh89T5ojbeeamsru1n+T6xAzqLHJmZ+1dELGFy+MAhSH+Mb6nHvgGEYYtHVKnO\nnNE/y0Uj6Lz1snq0eKunXJT7m4kwwCEDxQXHXtvR+nNu33I0eNUvbgpzBTa172J6\nqWZdNFSn5sPGlU/NlUS5z8kP3R9sfcWSuRk+TOPfhuLK5d1kvTfMeOro1n8BnFxf\nSWkbZXbD90XmQRvhS5fIjbCKAbavO95fHF1OL0m+fbSGBGALDNs5Q/d+KsBaKGkd\naSRAOEwHEy7WXaw9L13a/78br+eo+XLJ5FrZsn7KjMCL3UiLxR2EDyjflacvw6Ru\n2eyJaNe97RVw8ADDCxcycvO+heFdBcu+if1e1DMTrmgbuKdK/oVHrPiaEDdI5mCV\nNPUZ/7XB7mi04gSy4TBDwKmFSJA42+N2zmqHIARdvg5giqv79zuI0VQQZOBshHmC\nTygqOLBYTrp1soV9bN9RmxYYuPOANcMyCk+icfrumEkwO3T5sH0=\n=ksF5\n-----END PGP SIGNATURE-----", "payload": "tree b3ad218700123b9007cb633cbd7293a36deb751f\nparent e1968dd6120935055e138ab10c6e0a3f3f2288b9\nauthor Aaron Hill <aa1ronham@gmail.com> 1672976513 -0600\ncommitter Aaron Hill <aa1ronham@gmail.com> 1672976513 -0600\n\nIgnore symbol shim clash when symbol is provided by `compiler_builtins`\n\nWhen this happens, we ignore the symbol from `compiler_builtins`\nin favor of Miri's builtin support.\n\nThis allows Miri to target platforms like wasm32-unknown-unknown,\nwhere functions like `memcmp` are provided by `compiler_builtins`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54be8aad7976b81231f0a71fa2051e0b6528f107", "html_url": "https://github.com/rust-lang/rust/commit/54be8aad7976b81231f0a71fa2051e0b6528f107", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54be8aad7976b81231f0a71fa2051e0b6528f107/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1968dd6120935055e138ab10c6e0a3f3f2288b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1968dd6120935055e138ab10c6e0a3f3f2288b9", "html_url": "https://github.com/rust-lang/rust/commit/e1968dd6120935055e138ab10c6e0a3f3f2288b9"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "527d31d1f0ae8acc199671562b425742a8a0eb15", "filename": "src/tools/miri/src/helpers.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/54be8aad7976b81231f0a71fa2051e0b6528f107/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54be8aad7976b81231f0a71fa2051e0b6528f107/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs?ref=54be8aad7976b81231f0a71fa2051e0b6528f107", "patch": "@@ -943,7 +943,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         link_name: Symbol,\n     ) -> InterpResult<'tcx, ()> {\n         self.check_abi(abi, exp_abi)?;\n-        if let Some((body, _)) = self.eval_context_mut().lookup_exported_symbol(link_name)? {\n+        if let Some((body, instance)) = self.eval_context_mut().lookup_exported_symbol(link_name)? {\n+            // If compiler-builtins is providing the symbol, then don't treat it as a clash.\n+            // We'll use our built-in implementation in `emulate_foreign_item_by_name` for increased\n+            // performance. Note that this means we won't catch any undefined behavior in\n+            // compiler-builtins when running other crates, but Miri can still be run on\n+            // compiler-builtins itself (or any crate that uses it as a normal dependency)\n+            if self.eval_context_ref().tcx.is_compiler_builtins(instance.def_id().krate) {\n+                return Ok(());\n+            }\n+\n             throw_machine_stop!(TerminationInfo::SymbolShimClashing {\n                 link_name,\n                 span: body.span.data(),"}]}