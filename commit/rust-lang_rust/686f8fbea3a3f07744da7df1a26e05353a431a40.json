{"sha": "686f8fbea3a3f07744da7df1a26e05353a431a40", "node_id": "C_kwDOAAsO6NoAKDY4NmY4ZmJlYTNhM2YwNzc0NGRhN2RmMWEyNmUwNTM1M2E0MzFhNDA", "commit": {"author": {"name": "Anatol Ulrich", "email": "anatol.ulrich@ferrous-systems.com", "date": "2021-10-26T10:21:18Z"}, "committer": {"name": "Anatol Ulrich", "email": "anatol.ulrich@ferrous-systems.com", "date": "2021-10-26T10:21:18Z"}, "message": "simplify", "tree": {"sha": "3ec187483caa55021f5859b594b1fe2d6b9168af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ec187483caa55021f5859b594b1fe2d6b9168af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/686f8fbea3a3f07744da7df1a26e05353a431a40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/686f8fbea3a3f07744da7df1a26e05353a431a40", "html_url": "https://github.com/rust-lang/rust/commit/686f8fbea3a3f07744da7df1a26e05353a431a40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/686f8fbea3a3f07744da7df1a26e05353a431a40/comments", "author": null, "committer": null, "parents": [{"sha": "2490807ca53197310600a4d5a353a645c4a52667", "url": "https://api.github.com/repos/rust-lang/rust/commits/2490807ca53197310600a4d5a353a645c4a52667", "html_url": "https://github.com/rust-lang/rust/commit/2490807ca53197310600a4d5a353a645c4a52667"}], "stats": {"total": 29, "additions": 12, "deletions": 17}, "files": [{"sha": "4a999142ecc7ec6d1ae15d37d6fa1f17cecb4cba", "filename": "crates/ide/src/goto_type_definition.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/686f8fbea3a3f07744da7df1a26e05353a431a40/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686f8fbea3a3f07744da7df1a26e05353a431a40/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs?ref=686f8fbea3a3f07744da7df1a26e05353a431a40", "patch": "@@ -36,13 +36,11 @@ pub(crate) fn goto_type_definition(\n             }\n         }\n     };\n-\n-    // TODO this became pretty baroque after refactoring for `descend_into_macros(_many)`\n-    let range = sema\n-        .descend_into_macros(token)\n+    let range = token.text_range();\n+    sema.descend_into_macros(token)\n         .iter()\n         .filter_map(|token| {\n-            let ty_range = sema.token_ancestors_with_macros(token.clone()).find_map(|node| {\n+            let ty = sema.token_ancestors_with_macros(token.clone()).find_map(|node| {\n                 let ty = match_ast! {\n                     match node {\n                         ast::Expr(it) => sema.type_of_expr(&it)?.original,\n@@ -64,12 +62,11 @@ pub(crate) fn goto_type_definition(\n                     }\n                 };\n \n-                let range = node.text_range();\n-                Some((ty, range.start(), range.end()))\n+                Some(ty)\n             });\n-            ty_range\n+            ty\n         })\n-        .inspect(|(ty, _range_start, _range_end)| {\n+        .for_each(|ty| {\n             // collect from each `ty` into the `res` result vec\n             let ty = ty.strip_references();\n             ty.walk(db, |t| {\n@@ -83,14 +80,12 @@ pub(crate) fn goto_type_definition(\n                     push(trait_.into());\n                 }\n             });\n-        }) // reduce all ranges into a single umbrella span (TODO fishy?)\n-        .map(|(_, range_start, range_end)| (range_start, range_end))\n-        .reduce(|(start_acc, end_acc), (start_cur, end_cur)| {\n-            (start_acc.min(start_cur), end_acc.max(end_cur))\n-        })\n-        .map(|(range_start, range_end)| TextRange::new(range_start, range_end))?; // TODO easy to miss `?` bail\n-\n-    Some(RangeInfo::new(range, res))\n+        });\n+    if res.is_empty() {\n+        None\n+    } else {\n+        Some(RangeInfo::new(range, res))\n+    }\n }\n \n #[cfg(test)]"}]}