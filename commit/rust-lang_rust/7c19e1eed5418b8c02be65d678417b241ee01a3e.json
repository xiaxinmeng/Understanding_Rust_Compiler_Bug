{"sha": "7c19e1eed5418b8c02be65d678417b241ee01a3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMTllMWVlZDU0MThiOGMwMmJlNjVkNjc4NDE3YjI0MWVlMDFhM2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-12T18:58:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-12T18:58:23Z"}, "message": "Auto merge of #58015 - icefoxen:tryfrom-docs, r=SimonSapin\n\nExpand docs for `TryFrom` and `TryInto`.\n\nThe examples are still lacking for now, both for module docs and for methods/impl's.  Will be adding those in further pushes.\n\nShould hopefully resolve the doc concern in #33417 when finished?", "tree": {"sha": "10833a99ac6f165ef304c60f3c8b835c344884e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10833a99ac6f165ef304c60f3c8b835c344884e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c19e1eed5418b8c02be65d678417b241ee01a3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c19e1eed5418b8c02be65d678417b241ee01a3e", "html_url": "https://github.com/rust-lang/rust/commit/7c19e1eed5418b8c02be65d678417b241ee01a3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c19e1eed5418b8c02be65d678417b241ee01a3e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d06a020e2b100d8a22252d8877783d8869e5a9ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/d06a020e2b100d8a22252d8877783d8869e5a9ad", "html_url": "https://github.com/rust-lang/rust/commit/d06a020e2b100d8a22252d8877783d8869e5a9ad"}, {"sha": "db99a3bccdc21e80d832b061defe1002527c1c46", "url": "https://api.github.com/repos/rust-lang/rust/commits/db99a3bccdc21e80d832b061defe1002527c1c46", "html_url": "https://github.com/rust-lang/rust/commit/db99a3bccdc21e80d832b061defe1002527c1c46"}], "stats": {"total": 78, "additions": 72, "deletions": 6}, "files": [{"sha": "774d648558b48ebd80f30dc519b4f253c7e619c1", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 60, "deletions": 6, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/7c19e1eed5418b8c02be65d678417b241ee01a3e/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c19e1eed5418b8c02be65d678417b241ee01a3e/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=7c19e1eed5418b8c02be65d678417b241ee01a3e", "patch": "@@ -361,11 +361,17 @@ pub trait From<T>: Sized {\n /// An attempted conversion that consumes `self`, which may or may not be\n /// expensive.\n ///\n-/// Library authors should not directly implement this trait, but should prefer\n-/// implementing the [`TryFrom`] trait, which offers greater flexibility and\n-/// provides an equivalent `TryInto` implementation for free, thanks to a\n-/// blanket implementation in the standard library. For more information on this,\n-/// see the documentation for [`Into`].\n+/// Library authors should usually not directly implement this trait,\n+/// but should prefer implementing the [`TryFrom`] trait, which offers\n+/// greater flexibility and provides an equivalent `TryInto`\n+/// implementation for free, thanks to a blanket implementation in the\n+/// standard library. For more information on this, see the\n+/// documentation for [`Into`].\n+///\n+/// # Implementing `TryInto`\n+///\n+/// This suffers the same restrictions and reasoning as implementing\n+/// [`Into`], see there for details.\n ///\n /// [`TryFrom`]: trait.TryFrom.html\n /// [`Into`]: trait.Into.html\n@@ -380,7 +386,55 @@ pub trait TryInto<T>: Sized {\n     fn try_into(self) -> Result<T, Self::Error>;\n }\n \n-/// Attempt to construct `Self` via a conversion.\n+/// Simple and safe type conversions that may fail in a controlled\n+/// way under some circumstances. It is the reciprocal of [`TryInto`].\n+///\n+/// This is useful when you are doing a type conversion that may\n+/// trivially succeed but may also need special handling.\n+/// For example, there is no way to convert an `i64` into an `i32`\n+/// using the [`From`] trait, because an `i64` may contain a value\n+/// that an `i32` cannot represent and so the conversion would lose data.\n+/// This might be handled by truncating the `i64` to an `i32` (essentially\n+/// giving the `i64`'s value modulo `i32::MAX`) or by simply returning\n+/// `i32::MAX`, or by some other method.  The `From` trait is intended\n+/// for perfect conversions, so the `TryFrom` trait informs the\n+/// programmer when a type conversion could go bad and lets them\n+/// decide how to handle it.\n+///\n+/// # Generic Implementations\n+///\n+/// - `TryFrom<T> for U` implies [`TryInto<U>`]` for T`\n+/// - [`try_from`] is reflexive, which means that `TryFrom<T> for T`\n+/// is implemented and cannot fail -- the associated `Error` type for\n+/// calling `T::try_from()` on a value of type `T` is `Infallible`.\n+/// When the `!` type is stablized `Infallible` and `!` will be\n+/// equivalent.\n+///\n+/// # Examples\n+///\n+/// As described, [`i32`] implements `TryFrom<i64>`:\n+///\n+/// ```\n+/// use std::convert::TryFrom;\n+///\n+/// let big_number = 1_000_000_000_000i64;\n+/// // Silently truncates `big_number`, requires detecting\n+/// // and handling the truncation after the fact.\n+/// let smaller_number = big_number as i32;\n+/// assert_eq!(smaller_number, -727379968);\n+///\n+/// // Returns an error because `big_number` is too big to\n+/// // fit in an `i32`.\n+/// let try_smaller_number = i32::try_from(big_number);\n+/// assert!(try_smaller_number.is_err());\n+///\n+/// // Returns `Ok(3)`.\n+/// let try_successful_smaller_number = i32::try_from(3);\n+/// assert!(try_successful_smaller_number.is_ok());\n+/// ```\n+///\n+/// [`try_from`]: trait.TryFrom.html#tymethod.try_from\n+/// [`TryInto`]: trait.TryInto.html\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub trait TryFrom<T>: Sized {\n     /// The type returned in the event of a conversion error."}, {"sha": "fb40bccee6abf369d1272d8cafbfb698267bcf7b", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7c19e1eed5418b8c02be65d678417b241ee01a3e/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c19e1eed5418b8c02be65d678417b241ee01a3e/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=7c19e1eed5418b8c02be65d678417b241ee01a3e", "patch": "@@ -4442,6 +4442,9 @@ macro_rules! try_from_unbounded {\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n \n+            /// Try to create the target number type from a source\n+            /// number type. This returns an error if the source value\n+            /// is outside of the range of the target type.\n             #[inline]\n             fn try_from(value: $source) -> Result<Self, Self::Error> {\n                 Ok(value as $target)\n@@ -4457,6 +4460,9 @@ macro_rules! try_from_lower_bounded {\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n \n+            /// Try to create the target number type from a source\n+            /// number type. This returns an error if the source value\n+            /// is outside of the range of the target type.\n             #[inline]\n             fn try_from(u: $source) -> Result<$target, TryFromIntError> {\n                 if u >= 0 {\n@@ -4476,6 +4482,9 @@ macro_rules! try_from_upper_bounded {\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n \n+            /// Try to create the target number type from a source\n+            /// number type. This returns an error if the source value\n+            /// is outside of the range of the target type.\n             #[inline]\n             fn try_from(u: $source) -> Result<$target, TryFromIntError> {\n                 if u > (<$target>::max_value() as $source) {\n@@ -4495,6 +4504,9 @@ macro_rules! try_from_both_bounded {\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n \n+            /// Try to create the target number type from a source\n+            /// number type. This returns an error if the source value\n+            /// is outside of the range of the target type.\n             #[inline]\n             fn try_from(u: $source) -> Result<$target, TryFromIntError> {\n                 let min = <$target>::min_value() as $source;"}]}