{"sha": "543aea6c03fde24aa35f2bfbff7915868d074bca", "node_id": "C_kwDOAAsO6NoAKDU0M2FlYTZjMDNmZGUyNGFhMzVmMmJmYmZmNzkxNTg2OGQwNzRiY2E", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-07T16:52:28Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-07T16:52:28Z"}, "message": "Use an enum to record polarity in `clean::Impl`", "tree": {"sha": "e3520d47b3cfc978fc0c8ae1bd43b520eaba701c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3520d47b3cfc978fc0c8ae1bd43b520eaba701c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/543aea6c03fde24aa35f2bfbff7915868d074bca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/543aea6c03fde24aa35f2bfbff7915868d074bca", "html_url": "https://github.com/rust-lang/rust/commit/543aea6c03fde24aa35f2bfbff7915868d074bca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/543aea6c03fde24aa35f2bfbff7915868d074bca/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b7023cb723775fa20bda42e97dbc44abe7ecb0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b7023cb723775fa20bda42e97dbc44abe7ecb0c", "html_url": "https://github.com/rust-lang/rust/commit/7b7023cb723775fa20bda42e97dbc44abe7ecb0c"}], "stats": {"total": 57, "additions": 34, "deletions": 23}, "files": [{"sha": "ca52aa194aeb2367b22df0c985c59c081f473557", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/543aea6c03fde24aa35f2bfbff7915868d074bca/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543aea6c03fde24aa35f2bfbff7915868d074bca/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=543aea6c03fde24aa35f2bfbff7915868d074bca", "patch": "@@ -76,17 +76,17 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             new_generics\n         });\n \n-        let negative_polarity;\n+        let polarity;\n         let new_generics = match result {\n             AutoTraitResult::PositiveImpl(new_generics) => {\n-                negative_polarity = false;\n+                polarity = ImplPolarity::Positive;\n                 if discard_positive_impl {\n                     return None;\n                 }\n                 new_generics\n             }\n             AutoTraitResult::NegativeImpl => {\n-                negative_polarity = true;\n+                polarity = ImplPolarity::Negative;\n \n                 // For negative impls, we use the generic params, but *not* the predicates,\n                 // from the original type. Otherwise, the displayed impl appears to be a\n@@ -120,7 +120,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 trait_: Some(trait_ref.clean(self.cx)),\n                 for_: ty.clean(self.cx),\n                 items: Vec::new(),\n-                negative_polarity,\n+                polarity,\n                 kind: ImplKind::Auto,\n             }),\n             cfg: None,"}, {"sha": "bb76d39d3f28e406196388e8707c8f530925fce1", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/543aea6c03fde24aa35f2bfbff7915868d074bca/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543aea6c03fde24aa35f2bfbff7915868d074bca/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=543aea6c03fde24aa35f2bfbff7915868d074bca", "patch": "@@ -123,7 +123,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             .in_definition_order()\n                             .collect::<Vec<_>>()\n                             .clean(self.cx),\n-                        negative_polarity: false,\n+                        polarity: ImplPolarity::Positive,\n                         kind: ImplKind::Blanket(box trait_ref.self_ty().clean(self.cx)),\n                     }),\n                     cfg: None,"}, {"sha": "fc04f90329b1aabf57111e2ec1bf51da42153115", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/543aea6c03fde24aa35f2bfbff7915868d074bca/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543aea6c03fde24aa35f2bfbff7915868d074bca/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=543aea6c03fde24aa35f2bfbff7915868d074bca", "patch": "@@ -497,7 +497,7 @@ crate fn build_impl(\n             trait_,\n             for_,\n             items: trait_items,\n-            negative_polarity: polarity.clean(cx),\n+            polarity: polarity.clean(cx),\n             kind: ImplKind::Normal,\n         }),\n         box merged_attrs,"}, {"sha": "d733f9b44bc2061fef672c2eefa44bae0e60533d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/543aea6c03fde24aa35f2bfbff7915868d074bca/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543aea6c03fde24aa35f2bfbff7915868d074bca/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=543aea6c03fde24aa35f2bfbff7915868d074bca", "patch": "@@ -1856,14 +1856,14 @@ impl Clean<Item> for hir::Variant<'_> {\n     }\n }\n \n-impl Clean<bool> for ty::ImplPolarity {\n+impl Clean<ImplPolarity> for ty::ImplPolarity {\n     /// Returns whether the impl has negative polarity.\n-    fn clean(&self, _: &mut DocContext<'_>) -> bool {\n+    fn clean(&self, _: &mut DocContext<'_>) -> ImplPolarity {\n         match self {\n-            &ty::ImplPolarity::Positive |\n+            ty::ImplPolarity::Positive |\n             // FIXME: do we want to do something else here?\n-            &ty::ImplPolarity::Reservation => false,\n-            &ty::ImplPolarity::Negative => true,\n+            ty::ImplPolarity::Reservation => ImplPolarity::Positive,\n+            ty::ImplPolarity::Negative => ImplPolarity::Negative,\n         }\n     }\n }\n@@ -1894,7 +1894,7 @@ fn clean_impl(impl_: &hir::Impl<'_>, hir_id: hir::HirId, cx: &mut DocContext<'_>\n             trait_,\n             for_,\n             items,\n-            negative_polarity: tcx.impl_polarity(def_id).clean(cx),\n+            polarity: tcx.impl_polarity(def_id).clean(cx),\n             kind: ImplKind::Normal,\n         });\n         Item::from_hir_id_and_parts(hir_id, None, kind, cx)"}, {"sha": "fbc04845f1295ce2b21475d86c1d2bfc34251d6c", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/543aea6c03fde24aa35f2bfbff7915868d074bca/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543aea6c03fde24aa35f2bfbff7915868d074bca/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=543aea6c03fde24aa35f2bfbff7915868d074bca", "patch": "@@ -2177,7 +2177,7 @@ crate struct Impl {\n     crate trait_: Option<Path>,\n     crate for_: Type,\n     crate items: Vec<Item>,\n-    crate negative_polarity: bool,\n+    crate polarity: ImplPolarity,\n     crate kind: ImplKind,\n }\n \n@@ -2227,6 +2227,13 @@ impl ImplKind {\n     }\n }\n \n+// FIXME: remove this and use ty::ImplPolarity instead\n+#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n+crate enum ImplPolarity {\n+    Positive,\n+    Negative,\n+}\n+\n #[derive(Clone, Debug)]\n crate struct Import {\n     crate kind: ImportKind,"}, {"sha": "426ff8022817b4a31ce3920178d37eac811198a5", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/543aea6c03fde24aa35f2bfbff7915868d074bca/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543aea6c03fde24aa35f2bfbff7915868d074bca/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=543aea6c03fde24aa35f2bfbff7915868d074bca", "patch": "@@ -990,8 +990,9 @@ impl clean::Impl {\n             }\n \n             if let Some(ref ty) = self.trait_ {\n-                if self.negative_polarity {\n-                    write!(f, \"!\")?;\n+                match self.polarity {\n+                    clean::ImplPolarity::Positive => {}\n+                    clean::ImplPolarity::Negative => write!(f, \"!\")?,\n                 }\n                 fmt::Display::fmt(&ty.print(cx), f)?;\n                 write!(f, \" for \")?;"}, {"sha": "0d39e1de6c39a0e83e67030227225706ebcb6fa0", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/543aea6c03fde24aa35f2bfbff7915868d074bca/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543aea6c03fde24aa35f2bfbff7915868d074bca/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=543aea6c03fde24aa35f2bfbff7915868d074bca", "patch": "@@ -2033,12 +2033,12 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n                             let i_display = format!(\"{:#}\", i.print(cx));\n                             let out = Escape(&i_display);\n                             let encoded = small_url_encode(format!(\"{:#}\", i.print(cx)));\n-                            let generated = format!(\n-                                \"<a href=\\\"#impl-{}\\\">{}{}</a>\",\n-                                encoded,\n-                                if it.inner_impl().negative_polarity { \"!\" } else { \"\" },\n-                                out\n-                            );\n+                            let prefix = match it.inner_impl().polarity {\n+                                clean::ImplPolarity::Positive => \"\",\n+                                clean::ImplPolarity::Negative => \"!\",\n+                            };\n+                            let generated =\n+                                format!(\"<a href=\\\"#impl-{}\\\">{}{}</a>\", encoded, prefix, out);\n                             if links.insert(generated.clone()) { Some(generated) } else { None }\n                         } else {\n                             None"}, {"sha": "8dc7a33cb1382f556efb9501c3231cc12b005b9f", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/543aea6c03fde24aa35f2bfbff7915868d074bca/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543aea6c03fde24aa35f2bfbff7915868d074bca/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=543aea6c03fde24aa35f2bfbff7915868d074bca", "patch": "@@ -500,8 +500,7 @@ impl FromWithTcx<clean::Trait> for Trait {\n impl FromWithTcx<clean::Impl> for Impl {\n     fn from_tcx(impl_: clean::Impl, tcx: TyCtxt<'_>) -> Self {\n         let provided_trait_methods = impl_.provided_trait_methods(tcx);\n-        let clean::Impl { unsafety, generics, trait_, for_, items, negative_polarity, kind } =\n-            impl_;\n+        let clean::Impl { unsafety, generics, trait_, for_, items, polarity, kind } = impl_;\n         // FIXME: should `trait_` be a clean::Path equivalent in JSON?\n         let trait_ = trait_.map(|path| {\n             let did = path.def_id();\n@@ -513,6 +512,10 @@ impl FromWithTcx<clean::Impl> for Impl {\n             clean::ImplKind::Auto => (true, None),\n             clean::ImplKind::Blanket(ty) => (false, Some(*ty)),\n         };\n+        let negative_polarity = match polarity {\n+            clean::ImplPolarity::Positive => false,\n+            clean::ImplPolarity::Negative => true,\n+        };\n         Impl {\n             is_unsafe: unsafety == rustc_hir::Unsafety::Unsafe,\n             generics: generics.into_tcx(tcx),"}]}