{"sha": "37ea010b0d9e8cbccbe040134708028e6bb05c48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZWEwMTBiMGQ5ZThjYmNjYmUwNDAxMzQ3MDgwMjhlNmJiMDVjNDg=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-04-19T21:46:11Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-04-19T22:30:58Z"}, "message": "Move some functions from pprust to classify\n\nAs per a FIXME in syntax::parse::classify, move predicates on exprs\nand stmts into classify, out of pprust", "tree": {"sha": "ba58af53a05a74db01f406497e530267707c8a64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba58af53a05a74db01f406497e530267707c8a64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37ea010b0d9e8cbccbe040134708028e6bb05c48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37ea010b0d9e8cbccbe040134708028e6bb05c48", "html_url": "https://github.com/rust-lang/rust/commit/37ea010b0d9e8cbccbe040134708028e6bb05c48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37ea010b0d9e8cbccbe040134708028e6bb05c48/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1da18c70ac96ddec31627d2454a60ce441cf29e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1da18c70ac96ddec31627d2454a60ce441cf29e1", "html_url": "https://github.com/rust-lang/rust/commit/1da18c70ac96ddec31627d2454a60ce441cf29e1"}], "stats": {"total": 109, "additions": 54, "deletions": 55}, "files": [{"sha": "caba09bfefccd818944a6c8e0a107916aef8e9a1", "filename": "src/librustsyntax/parse/classify.rs", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/37ea010b0d9e8cbccbe040134708028e6bb05c48/src%2Flibrustsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ea010b0d9e8cbccbe040134708028e6bb05c48/src%2Flibrustsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fclassify.rs?ref=37ea010b0d9e8cbccbe040134708028e6bb05c48", "patch": "@@ -1,5 +1,6 @@\n-// FIXME: There are a bunch of similar functions in pprust that\n-// likely belong here\n+/*\n+  Predicates on exprs and stmts that the pretty-printer and parser use\n+ */\n \n fn expr_requires_semi_to_be_stmt(e: @ast::expr) -> bool {\n     alt e.node {\n@@ -29,3 +30,47 @@ fn stmt_ends_with_semi(stmt: ast::stmt) -> bool {\n       }\n     }\n }\n+\n+fn operator_prec(op: ast::binop) -> int {\n+    for vec::each(*parse::prec::binop_prec_table()) {|spec|\n+        if spec.op == op { ret spec.prec; }\n+    }\n+    core::unreachable();\n+}\n+\n+fn need_parens(expr: @ast::expr, outer_prec: int) -> bool {\n+    alt expr.node {\n+      ast::expr_binary(op, _, _) { operator_prec(op) < outer_prec }\n+      ast::expr_cast(_, _) { parse::prec::as_prec < outer_prec }\n+      // This may be too conservative in some cases\n+      ast::expr_assign(_, _) { true }\n+      ast::expr_move(_, _) { true }\n+      ast::expr_swap(_, _) { true }\n+      ast::expr_assign_op(_, _, _) { true }\n+      ast::expr_ret(_) { true }\n+      ast::expr_be(_) { true }\n+      ast::expr_assert(_) { true }\n+      ast::expr_check(_, _) { true }\n+      ast::expr_log(_, _, _) { true }\n+      _ { !parse::classify::expr_requires_semi_to_be_stmt(expr) }\n+    }\n+}\n+\n+fn ends_in_lit_int(ex: @ast::expr) -> bool {\n+    alt ex.node {\n+      ast::expr_lit(@{node: ast::lit_int(_, ast::ty_i), _}) { true }\n+      ast::expr_binary(_, _, sub) | ast::expr_unary(_, sub) |\n+      ast::expr_move(_, sub) | ast::expr_copy(sub) |\n+      ast::expr_assign(_, sub) | ast::expr_be(sub) |\n+      ast::expr_assign_op(_, _, sub) | ast::expr_swap(_, sub) |\n+      ast::expr_log(_, _, sub) | ast::expr_assert(sub) |\n+      ast::expr_check(_, sub) { ends_in_lit_int(sub) }\n+      ast::expr_fail(osub) | ast::expr_ret(osub) {\n+        alt osub {\n+          some(ex) { ends_in_lit_int(ex) }\n+          _ { false }\n+        }\n+      }\n+      _ { false }\n+    }\n+}"}, {"sha": "29557785fc71bf6eb12f71a622ee5eea764229f5", "filename": "src/librustsyntax/print/pprust.rs", "status": "modified", "additions": 7, "deletions": 53, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/37ea010b0d9e8cbccbe040134708028e6bb05c48/src%2Flibrustsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ea010b0d9e8cbccbe040134708028e6bb05c48/src%2Flibrustsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fprint%2Fpprust.rs?ref=37ea010b0d9e8cbccbe040134708028e6bb05c48", "patch": "@@ -1,3 +1,4 @@\n+import parse::classify::*;\n import parse::comments;\n import parse::lexer;\n import codemap::codemap;\n@@ -242,6 +243,12 @@ fn is_bol(s: ps) -> bool {\n             s.s.last_token() == pp::hardbreak_tok();\n }\n \n+fn in_cbox(s: ps) -> bool {\n+    let len = vec::len(s.boxes);\n+    if len == 0u { ret false; }\n+    ret s.boxes[len - 1u] == pp::consistent;\n+}\n+\n fn hardbreak_if_not_bol(s: ps) { if !is_bol(s) { hardbreak(s.s); } }\n fn space_if_not_bol(s: ps) { if !is_bol(s) { space(s.s); } }\n fn break_offset_if_not_bol(s: ps, n: uint, off: int) {\n@@ -1484,34 +1491,6 @@ fn print_view_item(s: ps, item: @ast::view_item) {\n     end(s); // end outer head-block\n }\n \n-\n-// FIXME: The fact that this builds up the table anew for every call is\n-// not good. Eventually, table should be a const.\n-fn operator_prec(op: ast::binop) -> int {\n-    for vec::each(*parse::prec::binop_prec_table()) {|spec|\n-        if spec.op == op { ret spec.prec; }\n-    }\n-    core::unreachable();\n-}\n-\n-fn need_parens(expr: @ast::expr, outer_prec: int) -> bool {\n-    alt expr.node {\n-      ast::expr_binary(op, _, _) { operator_prec(op) < outer_prec }\n-      ast::expr_cast(_, _) { parse::prec::as_prec < outer_prec }\n-      // This may be too conservative in some cases\n-      ast::expr_assign(_, _) { true }\n-      ast::expr_move(_, _) { true }\n-      ast::expr_swap(_, _) { true }\n-      ast::expr_assign_op(_, _, _) { true }\n-      ast::expr_ret(_) { true }\n-      ast::expr_be(_) { true }\n-      ast::expr_assert(_) { true }\n-      ast::expr_check(_, _) { true }\n-      ast::expr_log(_, _, _) { true }\n-      _ { !parse::classify::expr_requires_semi_to_be_stmt(expr) }\n-    }\n-}\n-\n fn print_op_maybe_parens(s: ps, expr: @ast::expr, outer_prec: int) {\n     let add_them = need_parens(expr, outer_prec);\n     if add_them { popen(s); }\n@@ -1596,12 +1575,6 @@ fn print_remaining_comments(s: ps) {\n     }\n }\n \n-fn in_cbox(s: ps) -> bool {\n-    let len = vec::len(s.boxes);\n-    if len == 0u { ret false; }\n-    ret s.boxes[len - 1u] == pp::consistent;\n-}\n-\n fn print_literal(s: ps, &&lit: @ast::lit) {\n     maybe_print_comment(s, lit.span.lo);\n     alt next_lit(s, lit.span.lo) {\n@@ -1839,25 +1812,6 @@ fn proto_to_str(p: ast::proto) -> str {\n     };\n }\n \n-fn ends_in_lit_int(ex: @ast::expr) -> bool {\n-    alt ex.node {\n-      ast::expr_lit(@{node: ast::lit_int(_, ast::ty_i), _}) { true }\n-      ast::expr_binary(_, _, sub) | ast::expr_unary(_, sub) |\n-      ast::expr_move(_, sub) | ast::expr_copy(sub) |\n-      ast::expr_assign(_, sub) | ast::expr_be(sub) |\n-      ast::expr_assign_op(_, _, sub) | ast::expr_swap(_, sub) |\n-      ast::expr_log(_, _, sub) | ast::expr_assert(sub) |\n-      ast::expr_check(_, sub) { ends_in_lit_int(sub) }\n-      ast::expr_fail(osub) | ast::expr_ret(osub) {\n-        alt osub {\n-          some(ex) { ends_in_lit_int(ex) }\n-          _ { false }\n-        }\n-      }\n-      _ { false }\n-    }\n-}\n-\n //\n // Local Variables:\n // mode: rust"}]}