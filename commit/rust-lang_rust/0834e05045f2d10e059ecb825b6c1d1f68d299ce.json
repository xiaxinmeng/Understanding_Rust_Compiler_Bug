{"sha": "0834e05045f2d10e059ecb825b6c1d1f68d299ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MzRlMDUwNDVmMmQxMGUwNTllY2I4MjViNmMxZDFmNjhkMjk5Y2U=", "commit": {"author": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-08-12T12:56:39Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-08-12T12:56:39Z"}, "message": "Always fall back to focusing on generated function body", "tree": {"sha": "49ebe5d267a76a42fcdef3f56f0cc64c31c0b7dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49ebe5d267a76a42fcdef3f56f0cc64c31c0b7dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0834e05045f2d10e059ecb825b6c1d1f68d299ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0834e05045f2d10e059ecb825b6c1d1f68d299ce", "html_url": "https://github.com/rust-lang/rust/commit/0834e05045f2d10e059ecb825b6c1d1f68d299ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0834e05045f2d10e059ecb825b6c1d1f68d299ce/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c619cb12d7f7c1cf65d44007b144b4c9bcafc7c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c619cb12d7f7c1cf65d44007b144b4c9bcafc7c5", "html_url": "https://github.com/rust-lang/rust/commit/c619cb12d7f7c1cf65d44007b144b4c9bcafc7c5"}], "stats": {"total": 36, "additions": 23, "deletions": 13}, "files": [{"sha": "ae33a96a0a012f37fb59da4da6d387eb929f73eb", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0834e05045f2d10e059ecb825b6c1d1f68d299ce/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0834e05045f2d10e059ecb825b6c1d1f68d299ce/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=0834e05045f2d10e059ecb825b6c1d1f68d299ce", "patch": "@@ -172,19 +172,26 @@ struct FunctionTemplate {\n     leading_ws: String,\n     fn_def: ast::Fn,\n     ret_type: ast::RetType,\n-    should_render_snippet: bool,\n+    should_focus_tail_expr: bool,\n     trailing_ws: String,\n     file: FileId,\n+    tail_expr: ast::Expr,\n }\n \n impl FunctionTemplate {\n     fn to_string(&self, cap: Option<SnippetCap>) -> String {\n-        let f = match (cap, self.should_render_snippet) {\n-            (Some(cap), true) => {\n-                render_snippet(cap, self.fn_def.syntax(), Cursor::Replace(self.ret_type.syntax()))\n+        let f = match cap {\n+            Some(cap) => {\n+                let cursor = if self.should_focus_tail_expr {\n+                    self.ret_type.syntax()\n+                } else {\n+                    self.tail_expr.syntax()\n+                };\n+                render_snippet(cap, self.fn_def.syntax(), Cursor::Replace(cursor))\n             }\n-            _ => self.fn_def.to_string(),\n+            None => self.fn_def.to_string(),\n         };\n+\n         format!(\"{}{}{}\", self.leading_ws, f, self.trailing_ws)\n     }\n }\n@@ -195,7 +202,7 @@ struct FunctionBuilder {\n     type_params: Option<ast::GenericParamList>,\n     params: ast::ParamList,\n     ret_type: ast::RetType,\n-    should_render_snippet: bool,\n+    should_focus_tail_expr: bool,\n     file: FileId,\n     needs_pub: bool,\n     is_async: bool,\n@@ -228,7 +235,7 @@ impl FunctionBuilder {\n         let await_expr = call.syntax().parent().and_then(ast::AwaitExpr::cast);\n         let is_async = await_expr.is_some();\n \n-        // should_render_snippet intends to express a rough level of confidence about\n+        // should_focus_tail_expr intends to express a rough level of confidence about\n         // the correctness of the return type.\n         //\n         // If we are able to infer some return type, and that return type is not unit, we\n@@ -240,7 +247,7 @@ impl FunctionBuilder {\n         // user does in fact intend for this generated function to return some non unit\n         // type, but that the current state of their code doesn't allow that return type\n         // to be accurately inferred.\n-        let (ret_ty, should_render_snippet) = {\n+        let (ret_ty, should_focus_tail_expr) = {\n             match ctx.sema.type_of_expr(&ast::Expr::CallExpr(call.clone())).map(TypeInfo::original)\n             {\n                 Some(ty) if ty.is_unknown() || ty.is_unit() => (make::ty_unit(), true),\n@@ -262,7 +269,7 @@ impl FunctionBuilder {\n             type_params,\n             params,\n             ret_type,\n-            should_render_snippet,\n+            should_focus_tail_expr,\n             file,\n             needs_pub,\n             is_async,\n@@ -335,7 +342,7 @@ impl FunctionBuilder {\n             type_params,\n             params,\n             ret_type,\n-            should_render_snippet,\n+            should_focus_tail_expr: should_render_snippet,\n             file,\n             needs_pub,\n             is_async,\n@@ -378,8 +385,11 @@ impl FunctionBuilder {\n         FunctionTemplate {\n             insert_offset,\n             leading_ws,\n+            // PANIC: we guarantee we always create a function with a return type\n             ret_type: fn_def.ret_type().unwrap(),\n-            should_render_snippet: self.should_render_snippet,\n+            // PANIC: we guarantee we always create a function body with a tail expr\n+            tail_expr: fn_def.body().unwrap().tail_expr().unwrap(),\n+            should_focus_tail_expr: self.should_focus_tail_expr,\n             fn_def,\n             trailing_ws,\n             file: self.file,\n@@ -795,7 +805,7 @@ impl Baz {\n }\n \n fn bar(baz: Baz) -> Baz {\n-    todo!()\n+    ${0:todo!()}\n }\n \",\n         )\n@@ -1316,7 +1326,7 @@ fn main() {\n }\n \n fn foo() -> u32 {\n-    todo!()\n+    ${0:todo!()}\n }\n \",\n         )"}]}