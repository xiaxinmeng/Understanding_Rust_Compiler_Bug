{"sha": "71f04bdb5aeaa3d4a013337afd95bb50db4ddd46", "node_id": "C_kwDOAAsO6NoAKDcxZjA0YmRiNWFlYWEzZDRhMDEzMzM3YWZkOTViYjUwZGI0ZGRkNDY", "commit": {"author": {"name": "Joshua Nelson", "email": "github@jyn.dev", "date": "2023-04-09T22:59:24Z"}, "committer": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-04-18T12:14:01Z"}, "message": "Fix no_std tests that load libc when download-rustc is enabled\n\nThere were a series of unfortunate interactions here. Here's an MCVE of the test this fixes (committed as `tests/ui/meta/no_std-extern-libc.rs`):\n```rust\n #![crate_type = \"lib\"]\n #![no_std]\n #![feature(rustc_private)]\nextern crate libc;\n```\n\nBefore, this would give an error about duplicate versions of libc:\n```\nerror[E0464]: multiple candidates for `rlib` dependency `libc` found\n  --> fake-test-src-base/allocator/no_std-alloc-error-handler-default.rs:15:1\n   |\nLL | extern crate libc;\n   | ^^^^^^^^^^^^^^^^^^\n   |\n   = note: candidate #1: /home/gh-jyn514/rust/build/aarch64-unknown-linux-gnu/stage2/lib/rustlib/aarch64-unknown-linux-gnu/lib/liblibc-358db1024b7d9957.rlib\n   = note: candidate #2: /home/gh-jyn514/rust/build/aarch64-unknown-linux-gnu/stage2/lib/rustlib/aarch64-unknown-linux-gnu/lib/liblibc-ebc478710122a279.rmeta\n```\nBoth these versions were downloaded from CI, but one came from the `rust-std` component and one came from `rustc-dev`:\n```\n; tar -tf build/cache/f2d9a3d0771504f1ae776226a5799dcb4408a91a/rust-std-nightly-x86_64-unknown-linux-gnu.tar.xz | grep liblibc\nrust-std-nightly-x86_64-unknown-linux-gnu/rust-std-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/liblibc-68a2d9e195dd6ed2.rlib\n; tar -tf build/cache/f2d9a3d0771504f1ae776226a5799dcb4408a91a/rustc-dev-nightly-x86_64-unknown-linux-gnu.tar.xz | grep liblibc\nrustc-dev-nightly-x86_64-unknown-linux-gnu/rustc-dev/lib/rustlib/x86_64-unknown-linux-gnu/lib/liblibc-f226c9fbdd92a0fd.rmeta\n```\nThe fix was to only copy files from `rust-std` unless a Step explicitly requests for the `rustc-dev` components to be available by calling `builder.ensure(compile::Rustc)`.\n\nTo avoid having to re-parse the `rustc-dev.tar.xz` tarball every time, which is quite slow, this adds a new `build/host/ci-rustc/.rustc-dev-contents` cache file which stores only the names of files we need to copy into the sysroot.\n\nThis also allows reverting the hack in\nhttps://github.com/rust-lang/rust/pull/110121; now that we only copy\nrustc-dev on-demand, we can correctly add the `Rustc` check artifacts\ninto the sysroot, so that this works correctly even when\n`download-rustc` is forced to `true`.\n\n---\n\nSee https://github.com/rust-lang/rust/issues/108767#issuecomment-1501217657 for why `no_std` is required for the MCVE test to fail; it's complicated and not particularly important.\n\nFixes https://github.com/rust-lang/rust/issues/108767.", "tree": {"sha": "64400bca78a3e935a495203ac11f9b39f1d89292", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64400bca78a3e935a495203ac11f9b39f1d89292"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71f04bdb5aeaa3d4a013337afd95bb50db4ddd46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71f04bdb5aeaa3d4a013337afd95bb50db4ddd46", "html_url": "https://github.com/rust-lang/rust/commit/71f04bdb5aeaa3d4a013337afd95bb50db4ddd46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71f04bdb5aeaa3d4a013337afd95bb50db4ddd46/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce1073ba9d894b2e351b2a85fcd39f2c99b78974", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce1073ba9d894b2e351b2a85fcd39f2c99b78974", "html_url": "https://github.com/rust-lang/rust/commit/ce1073ba9d894b2e351b2a85fcd39f2c99b78974"}], "stats": {"total": 101, "additions": 84, "deletions": 17}, "files": [{"sha": "44efc502e39d48e96560bfc423c0671a5a33af23", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/71f04bdb5aeaa3d4a013337afd95bb50db4ddd46/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f04bdb5aeaa3d4a013337afd95bb50db4ddd46/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=71f04bdb5aeaa3d4a013337afd95bb50db4ddd46", "patch": "@@ -271,17 +271,9 @@ impl Step for Rustc {\n             false,\n         );\n \n-        // HACK: This avoids putting the newly built artifacts in the sysroot if we're using\n-        // `download-rustc`, to avoid \"multiple candidates for `rmeta`\" errors. Technically, that's\n-        // not quite right: people can set `download-rustc = true` to download even if there are\n-        // changes to the compiler, and in that case ideally we would put the *new* artifacts in the\n-        // sysroot, in case there are API changes that should be used by tools.  In practice,\n-        // though, that should be very uncommon, and people can still disable download-rustc.\n-        if !builder.download_rustc() {\n-            let libdir = builder.sysroot_libdir(compiler, target);\n-            let hostdir = builder.sysroot_libdir(compiler, compiler.host);\n-            add_to_sysroot(&builder, &libdir, &hostdir, &librustc_stamp(builder, compiler, target));\n-        }\n+        let libdir = builder.sysroot_libdir(compiler, target);\n+        let hostdir = builder.sysroot_libdir(compiler, compiler.host);\n+        add_to_sysroot(&builder, &libdir, &hostdir, &librustc_stamp(builder, compiler, target));\n     }\n }\n "}, {"sha": "d04eb1d1f679ecac2a1992769edc697d8febf457", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/71f04bdb5aeaa3d4a013337afd95bb50db4ddd46/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f04bdb5aeaa3d4a013337afd95bb50db4ddd46/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=71f04bdb5aeaa3d4a013337afd95bb50db4ddd46", "patch": "@@ -9,6 +9,7 @@\n use std::borrow::Cow;\n use std::collections::HashSet;\n use std::env;\n+use std::ffi::OsStr;\n use std::fs;\n use std::io::prelude::*;\n use std::io::BufReader;\n@@ -652,8 +653,19 @@ impl Step for Rustc {\n         // so its artifacts can't be reused.\n         if builder.download_rustc() && compiler.stage != 0 {\n             // Copy the existing artifacts instead of rebuilding them.\n-            // NOTE: this path is only taken for tools linking to rustc-dev.\n-            builder.ensure(Sysroot { compiler });\n+            // NOTE: this path is only taken for tools linking to rustc-dev (including ui-fulldeps tests).\n+            let sysroot = builder.ensure(Sysroot { compiler });\n+\n+            let ci_rustc_dir = builder.out.join(&*builder.build.build.triple).join(\"ci-rustc\");\n+            for file in builder.config.rustc_dev_contents() {\n+                let src = ci_rustc_dir.join(&file);\n+                let dst = sysroot.join(file);\n+                if src.is_dir() {\n+                    t!(fs::create_dir_all(dst));\n+                } else {\n+                    builder.copy(&src, &dst);\n+                }\n+            }\n             return;\n         }\n \n@@ -1281,7 +1293,40 @@ impl Step for Sysroot {\n             }\n \n             // Copy the compiler into the correct sysroot.\n-            builder.cp_r(&builder.ci_rustc_dir(builder.build.build), &sysroot);\n+            // NOTE(#108767): We intentionally don't copy `rustc-dev` artifacts until they're requested with `builder.ensure(Rustc)`.\n+            // This fixes an issue where we'd have multiple copies of libc in the sysroot with no way to tell which to load.\n+            // There are a few quirks of bootstrap that interact to make this reliable:\n+            // 1. The order `Step`s are run is hard-coded in `builder.rs` and not configurable. This\n+            //    avoids e.g. reordering `test::UiFulldeps` before `test::Ui` and causing the latter to\n+            //    fail because of duplicate metadata.\n+            // 2. The sysroot is deleted and recreated between each invocation, so running `x test\n+            //    ui-fulldeps && x test ui` can't cause failures.\n+            let mut filtered_files = Vec::new();\n+            // Don't trim directories or files that aren't loaded per-target; they can't cause conflicts.\n+            let suffix = format!(\"lib/rustlib/{}/lib\", compiler.host);\n+            for path in builder.config.rustc_dev_contents() {\n+                let path = Path::new(&path);\n+                if path.parent().map_or(false, |parent| parent.ends_with(&suffix)) {\n+                    filtered_files.push(path.file_name().unwrap().to_owned());\n+                }\n+            }\n+\n+            let filtered_extensions = [OsStr::new(\"rmeta\"), OsStr::new(\"rlib\"), OsStr::new(\"so\")];\n+            let ci_rustc_dir = builder.ci_rustc_dir(builder.config.build);\n+            builder.cp_filtered(&ci_rustc_dir, &sysroot, &|path| {\n+                if path.extension().map_or(true, |ext| !filtered_extensions.contains(&ext)) {\n+                    return true;\n+                }\n+                if !path.parent().map_or(true, |p| p.ends_with(&suffix)) {\n+                    return true;\n+                }\n+                if !filtered_files.iter().all(|f| f != path.file_name().unwrap()) {\n+                    builder.verbose_than(1, &format!(\"ignoring {}\", path.display()));\n+                    false\n+                } else {\n+                    true\n+                }\n+            });\n             return INTERNER.intern_path(sysroot);\n         }\n "}, {"sha": "133cda639d976ccfe6d0dd673f255b58a1598aa2", "filename": "src/bootstrap/download.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/71f04bdb5aeaa3d4a013337afd95bb50db4ddd46/src%2Fbootstrap%2Fdownload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f04bdb5aeaa3d4a013337afd95bb50db4ddd46/src%2Fbootstrap%2Fdownload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload.rs?ref=71f04bdb5aeaa3d4a013337afd95bb50db4ddd46", "patch": "@@ -2,7 +2,7 @@ use std::{\n     env,\n     ffi::{OsStr, OsString},\n     fs::{self, File},\n-    io::{BufRead, BufReader, ErrorKind},\n+    io::{BufRead, BufReader, BufWriter, ErrorKind, Write},\n     path::{Path, PathBuf},\n     process::{Command, Stdio},\n };\n@@ -262,10 +262,20 @@ impl Config {\n         let directory_prefix = Path::new(Path::new(uncompressed_filename).file_stem().unwrap());\n \n         // decompress the file\n-        let data = t!(File::open(tarball));\n+        let data = t!(File::open(tarball), format!(\"file {} not found\", tarball.display()));\n         let decompressor = XzDecoder::new(BufReader::new(data));\n \n         let mut tar = tar::Archive::new(decompressor);\n+\n+        // `compile::Sysroot` needs to know the contents of the `rustc-dev` tarball to avoid adding\n+        // it to the sysroot unless it was explicitly requested. But parsing the 100 MB tarball is slow.\n+        // Cache the entries when we extract it so we only have to read it once.\n+        let mut recorded_entries = if dst.ends_with(\"ci-rustc\") && pattern == \"rustc-dev\" {\n+            Some(BufWriter::new(t!(File::create(dst.join(\".rustc-dev-contents\")))))\n+        } else {\n+            None\n+        };\n+\n         for member in t!(tar.entries()) {\n             let mut member = t!(member);\n             let original_path = t!(member.path()).into_owned();\n@@ -283,13 +293,19 @@ impl Config {\n             if !t!(member.unpack_in(dst)) {\n                 panic!(\"path traversal attack ??\");\n             }\n+            if let Some(record) = &mut recorded_entries {\n+                t!(writeln!(record, \"{}\", short_path.to_str().unwrap()));\n+            }\n             let src_path = dst.join(original_path);\n             if src_path.is_dir() && dst_path.exists() {\n                 continue;\n             }\n             t!(fs::rename(src_path, dst_path));\n         }\n-        t!(fs::remove_dir_all(dst.join(directory_prefix)));\n+        let dst_dir = dst.join(directory_prefix);\n+        if dst_dir.exists() {\n+            t!(fs::remove_dir_all(&dst_dir), format!(\"failed to remove {}\", dst_dir.display()));\n+        }\n     }\n \n     /// Returns whether the SHA256 checksum of `path` matches `expected`.\n@@ -365,6 +381,13 @@ impl Config {\n         Some(rustfmt_path)\n     }\n \n+    pub(crate) fn rustc_dev_contents(&self) -> Vec<String> {\n+        assert!(self.download_rustc());\n+        let ci_rustc_dir = self.out.join(&*self.build.triple).join(\"ci-rustc\");\n+        let rustc_dev_contents_file = t!(File::open(ci_rustc_dir.join(\".rustc-dev-contents\")));\n+        t!(BufReader::new(rustc_dev_contents_file).lines().collect())\n+    }\n+\n     pub(crate) fn download_ci_rustc(&self, commit: &str) {\n         self.verbose(&format!(\"using downloaded stage2 artifacts from CI (commit {commit})\"));\n "}, {"sha": "763ea740a2740a983020f730751ab8640d77c413", "filename": "tests/ui/meta/no_std-extern-libc.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/71f04bdb5aeaa3d4a013337afd95bb50db4ddd46/tests%2Fui%2Fmeta%2Fno_std-extern-libc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f04bdb5aeaa3d4a013337afd95bb50db4ddd46/tests%2Fui%2Fmeta%2Fno_std-extern-libc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmeta%2Fno_std-extern-libc.rs?ref=71f04bdb5aeaa3d4a013337afd95bb50db4ddd46", "patch": "@@ -0,0 +1,7 @@\n+// Test that `download-rustc` doesn't put duplicate copies of libc in the sysroot.\n+// check-pass\n+#![crate_type = \"lib\"]\n+#![no_std]\n+#![feature(rustc_private)]\n+\n+extern crate libc;"}]}