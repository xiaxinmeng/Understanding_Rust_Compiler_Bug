{"sha": "d63ab5f8c313a5868d245f9cf1969fc991a301f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2M2FiNWY4YzMxM2E1ODY4ZDI0NWY5Y2YxOTY5ZmM5OTFhMzAxZjY=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-12-17T09:47:24Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-12-17T09:47:24Z"}, "message": "Refactor PrimVal::relocation out of existence.", "tree": {"sha": "d1079d37e5e0578cb6e09efc8b8a2db239ca0d7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1079d37e5e0578cb6e09efc8b8a2db239ca0d7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d63ab5f8c313a5868d245f9cf1969fc991a301f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d63ab5f8c313a5868d245f9cf1969fc991a301f6", "html_url": "https://github.com/rust-lang/rust/commit/d63ab5f8c313a5868d245f9cf1969fc991a301f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d63ab5f8c313a5868d245f9cf1969fc991a301f6/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29e690fe14bf6354c07c793c3af53d5242ec202d", "url": "https://api.github.com/repos/rust-lang/rust/commits/29e690fe14bf6354c07c793c3af53d5242ec202d", "html_url": "https://github.com/rust-lang/rust/commit/29e690fe14bf6354c07c793c3af53d5242ec202d"}], "stats": {"total": 32, "additions": 11, "deletions": 21}, "files": [{"sha": "c1774099b8c5145a4ffe28334f2523137d109919", "filename": "src/eval_context.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d63ab5f8c313a5868d245f9cf1969fc991a301f6/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d63ab5f8c313a5868d245f9cf1969fc991a301f6/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=d63ab5f8c313a5868d245f9cf1969fc991a301f6", "patch": "@@ -315,15 +315,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                        .expect(\"global should have been cached (freeze)\");\n                 match global_value.data.expect(\"global should have been initialized\") {\n                     Value::ByRef(ptr) => self.memory.freeze(ptr.alloc_id)?,\n-                    Value::ByVal(val) => if let Some(alloc_id) = val.relocation() {\n-                        self.memory.freeze(alloc_id)?;\n+                    Value::ByVal(val) => if let PrimVal::Ptr(ptr) = val {\n+                        self.memory.freeze(ptr.alloc_id)?;\n                     },\n-                    Value::ByValPair(a, b) => {\n-                        if let Some(alloc_id) = a.relocation() {\n-                            self.memory.freeze(alloc_id)?;\n+                    Value::ByValPair(val1, val2) => {\n+                        if let PrimVal::Ptr(ptr) = val1 {\n+                            self.memory.freeze(ptr.alloc_id)?;\n                         }\n-                        if let Some(alloc_id) = b.relocation() {\n-                            self.memory.freeze(alloc_id)?;\n+                        if let PrimVal::Ptr(ptr) = val2 {\n+                            self.memory.freeze(ptr.alloc_id)?;\n                         }\n                     },\n                 }\n@@ -1301,12 +1301,12 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     }\n                     Value::ByVal(val) => {\n                         trace!(\"frame[{}] {:?}: {:?}\", frame, local, val);\n-                        if let Some(alloc_id) = val.relocation() { allocs.push(alloc_id); }\n+                        if let PrimVal::Ptr(ptr) = val { allocs.push(ptr.alloc_id); }\n                     }\n                     Value::ByValPair(val1, val2) => {\n                         trace!(\"frame[{}] {:?}: ({:?}, {:?})\", frame, local, val1, val2);\n-                        if let Some(alloc_id) = val1.relocation() { allocs.push(alloc_id); }\n-                        if let Some(alloc_id) = val2.relocation() { allocs.push(alloc_id); }\n+                        if let PrimVal::Ptr(ptr) = val1 { allocs.push(ptr.alloc_id); }\n+                        if let PrimVal::Ptr(ptr) = val2 { allocs.push(ptr.alloc_id); }\n                     }\n                 }\n             }"}, {"sha": "a4b4f18ee2faa02c8b743ddd05a2fc825f0b6f23", "filename": "src/value.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d63ab5f8c313a5868d245f9cf1969fc991a301f6/src%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d63ab5f8c313a5868d245f9cf1969fc991a301f6/src%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue.rs?ref=d63ab5f8c313a5868d245f9cf1969fc991a301f6", "patch": "@@ -4,7 +4,7 @@\n use std::mem::transmute;\n \n use error::{EvalError, EvalResult};\n-use memory::{AllocId, Memory, Pointer};\n+use memory::{Memory, Pointer};\n \n pub(super) fn bits_to_f32(bits: u64) -> f32 {\n     unsafe { transmute::<u32, f32>(bits as u32) }\n@@ -127,16 +127,6 @@ impl<'tcx> PrimVal {\n         }\n     }\n \n-    // FIXME(solson): Remove this. It's a temporary function to aid refactoring, but it shouldn't\n-    // stick around with this name.\n-    pub fn relocation(self) -> Option<AllocId> {\n-        if let PrimVal::Ptr(ref p) = self {\n-            Some(p.alloc_id)\n-        } else {\n-            None\n-        }\n-    }\n-\n     pub fn from_u64(n: u64) -> Self {\n         PrimVal::Bytes(n)\n     }"}]}