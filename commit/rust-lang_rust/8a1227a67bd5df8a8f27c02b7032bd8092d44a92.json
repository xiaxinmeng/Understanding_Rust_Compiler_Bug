{"sha": "8a1227a67bd5df8a8f27c02b7032bd8092d44a92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMTIyN2E2N2JkNWRmOGE4ZjI3YzAyYjcwMzJiZDgwOTJkNDRhOTI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-01-25T01:27:51Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-02T12:20:57Z"}, "message": "Infer type of `yield` to be resume type", "tree": {"sha": "7c2338dcb35c09cc254a9ba6e12326de4a27a35d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c2338dcb35c09cc254a9ba6e12326de4a27a35d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a1227a67bd5df8a8f27c02b7032bd8092d44a92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a1227a67bd5df8a8f27c02b7032bd8092d44a92", "html_url": "https://github.com/rust-lang/rust/commit/8a1227a67bd5df8a8f27c02b7032bd8092d44a92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a1227a67bd5df8a8f27c02b7032bd8092d44a92/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25af2f66cec1366f845e1de1bfec8b64d4f5cfff", "url": "https://api.github.com/repos/rust-lang/rust/commits/25af2f66cec1366f845e1de1bfec8b64d4f5cfff", "html_url": "https://github.com/rust-lang/rust/commit/25af2f66cec1366f845e1de1bfec8b64d4f5cfff"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "fd6be8520510bc85111e171d92532cd6cb1729e3", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a1227a67bd5df8a8f27c02b7032bd8092d44a92/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1227a67bd5df8a8f27c02b7032bd8092d44a92/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=8a1227a67bd5df8a8f27c02b7032bd8092d44a92", "patch": "@@ -92,11 +92,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .into(),\n             GenericParamDefKind::Const => span_bug!(expr.span, \"closure has const param\"),\n         });\n-        if let Some(GeneratorTypes { yield_ty, interior, movability }) = generator_types {\n+        if let Some(GeneratorTypes { resume_ty, yield_ty, interior, movability }) = generator_types\n+        {\n             let generator_substs = substs.as_generator();\n             self.demand_eqtype(\n                 expr.span,\n-                self.tcx.mk_unit(),  // WIP\n+                resume_ty,\n                 generator_substs.resume_ty(expr_def_id, self.tcx),\n             );\n             self.demand_eqtype("}, {"sha": "9ce89bd636304ea6a5d404318b882f84582a8416", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a1227a67bd5df8a8f27c02b7032bd8092d44a92/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1227a67bd5df8a8f27c02b7032bd8092d44a92/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=8a1227a67bd5df8a8f27c02b7032bd8092d44a92", "patch": "@@ -1796,16 +1796,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &'tcx hir::Expr<'tcx>,\n         src: &'tcx hir::YieldSource,\n     ) -> Ty<'tcx> {\n-        match self.yield_ty {\n-            Some(ty) => {\n-                self.check_expr_coercable_to_type(&value, ty);\n+        match self.resume_yield_tys {\n+            Some((resume_ty, yield_ty)) => {\n+                self.check_expr_coercable_to_type(&value, yield_ty);\n+\n+                resume_ty\n             }\n             // Given that this `yield` expression was generated as a result of lowering a `.await`,\n             // we know that the yield type must be `()`; however, the context won't contain this\n             // information. Hence, we check the source of the yield expression here and check its\n             // value's type against `()` (this check should always hold).\n             None if src == &hir::YieldSource::Await => {\n                 self.check_expr_coercable_to_type(&value, self.tcx.mk_unit());\n+                self.tcx.mk_unit()\n             }\n             _ => {\n                 struct_span_err!(\n@@ -1815,9 +1818,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     \"yield expression outside of generator literal\"\n                 )\n                 .emit();\n+                self.tcx.mk_unit()\n             }\n         }\n-        self.tcx.mk_unit()\n     }\n }\n "}, {"sha": "9612500e3b019a80e3076480049cc406fbf2332d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a1227a67bd5df8a8f27c02b7032bd8092d44a92/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1227a67bd5df8a8f27c02b7032bd8092d44a92/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8a1227a67bd5df8a8f27c02b7032bd8092d44a92", "patch": "@@ -573,7 +573,7 @@ pub struct FnCtxt<'a, 'tcx> {\n     /// First span of a return site that we find. Used in error messages.\n     ret_coercion_span: RefCell<Option<Span>>,\n \n-    yield_ty: Option<Ty<'tcx>>,\n+    resume_yield_tys: Option<(Ty<'tcx>, Ty<'tcx>)>,\n \n     ps: RefCell<UnsafetyState>,\n \n@@ -1248,6 +1248,9 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n /// includes yield), it returns back some information about the yield\n /// points.\n struct GeneratorTypes<'tcx> {\n+    /// Type of generator argument / values returned by `yield`.\n+    resume_ty: Ty<'tcx>,\n+\n     /// Type of value that is yielded.\n     yield_ty: Ty<'tcx>,\n \n@@ -1308,7 +1311,11 @@ fn check_fn<'a, 'tcx>(\n         let yield_ty = fcx\n             .next_ty_var(TypeVariableOrigin { kind: TypeVariableOriginKind::TypeInference, span });\n         fcx.require_type_is_sized(yield_ty, span, traits::SizedYieldType);\n-        fcx.yield_ty = Some(yield_ty);\n+\n+        // Resume type defaults to `()` if the generator has no argument.\n+        let resume_ty = fn_sig.inputs().get(0).map(|ty| *ty).unwrap_or_else(|| tcx.mk_unit());\n+\n+        fcx.resume_yield_tys = Some((resume_ty, yield_ty));\n     }\n \n     let outer_def_id = tcx.closure_base_def_id(hir.local_def_id(fn_id));\n@@ -1361,8 +1368,11 @@ fn check_fn<'a, 'tcx>(\n         let interior = fcx\n             .next_ty_var(TypeVariableOrigin { kind: TypeVariableOriginKind::MiscVariable, span });\n         fcx.deferred_generator_interiors.borrow_mut().push((body.id(), interior, gen_kind));\n+\n+        let (resume_ty, yield_ty) = fcx.resume_yield_tys.unwrap();\n         Some(GeneratorTypes {\n-            yield_ty: fcx.yield_ty.unwrap(),\n+            resume_ty,\n+            yield_ty,\n             interior,\n             movability: can_be_generator.unwrap(),\n         })\n@@ -2764,7 +2774,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             err_count_on_creation: inh.tcx.sess.err_count(),\n             ret_coercion: None,\n             ret_coercion_span: RefCell::new(None),\n-            yield_ty: None,\n+            resume_yield_tys: None,\n             ps: RefCell::new(UnsafetyState::function(hir::Unsafety::Normal, hir::CRATE_HIR_ID)),\n             diverges: Cell::new(Diverges::Maybe),\n             has_errors: Cell::new(false),"}]}