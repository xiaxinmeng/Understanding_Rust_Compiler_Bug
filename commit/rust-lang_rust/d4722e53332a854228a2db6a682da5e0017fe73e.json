{"sha": "d4722e53332a854228a2db6a682da5e0017fe73e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NzIyZTUzMzMyYTg1NDIyOGEyZGI2YTY4MmRhNWUwMDE3ZmU3M2U=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-06-21T21:58:21Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-06-29T08:39:37Z"}, "message": "Trade stack closure copyability for type soundness.", "tree": {"sha": "8eb3badf05ee4a3b6a55e5cf3d9e2c461b03047e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8eb3badf05ee4a3b6a55e5cf3d9e2c461b03047e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4722e53332a854228a2db6a682da5e0017fe73e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4722e53332a854228a2db6a682da5e0017fe73e", "html_url": "https://github.com/rust-lang/rust/commit/d4722e53332a854228a2db6a682da5e0017fe73e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4722e53332a854228a2db6a682da5e0017fe73e/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98c169e4e594fda871628edc4b9c82a56072c0df", "url": "https://api.github.com/repos/rust-lang/rust/commits/98c169e4e594fda871628edc4b9c82a56072c0df", "html_url": "https://github.com/rust-lang/rust/commit/98c169e4e594fda871628edc4b9c82a56072c0df"}], "stats": {"total": 52, "additions": 37, "deletions": 15}, "files": [{"sha": "d4b91ed589d0febf42554b218fb83344373a8ec4", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d4722e53332a854228a2db6a682da5e0017fe73e/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4722e53332a854228a2db6a682da5e0017fe73e/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=d4722e53332a854228a2db6a682da5e0017fe73e", "patch": "@@ -171,7 +171,7 @@ fn with_appropriate_checker(cx: Context, id: node_id,\n         // check that only immutable variables are implicitly copied in\n         check_imm_free_var(cx, fv.def, fv.span);\n \n-        check_freevar_bounds(cx, fv.span, var_t, bounds);\n+        check_freevar_bounds(cx, fv.span, var_t, bounds, None);\n     }\n \n     fn check_for_box(cx: Context, fv: &freevar_entry, bounds: ty::BuiltinBounds) {\n@@ -182,13 +182,18 @@ fn with_appropriate_checker(cx: Context, id: node_id,\n         // check that only immutable variables are implicitly copied in\n         check_imm_free_var(cx, fv.def, fv.span);\n \n-        check_freevar_bounds(cx, fv.span, var_t, bounds);\n+        check_freevar_bounds(cx, fv.span, var_t, bounds, None);\n     }\n \n-    fn check_for_block(cx: Context, fv: &freevar_entry, bounds: ty::BuiltinBounds) {\n+    fn check_for_block(cx: Context, fv: &freevar_entry,\n+                       bounds: ty::BuiltinBounds, region: ty::Region) {\n         let id = ast_util::def_id_of_def(fv.def).node;\n         let var_t = ty::node_id_to_type(cx.tcx, id);\n-        check_freevar_bounds(cx, fv.span, var_t, bounds);\n+        // FIXME(#3569): Figure out whether the implicit borrow is actually\n+        // mutable. Currently we assume all upvars are referenced mutably.\n+        let implicit_borrowed_type = ty::mk_mut_rptr(cx.tcx, region, var_t);\n+        check_freevar_bounds(cx, fv.span, implicit_borrowed_type,\n+                             bounds, Some(var_t));\n     }\n \n     fn check_for_bare(cx: Context, fv: @freevar_entry) {\n@@ -205,8 +210,9 @@ fn with_appropriate_checker(cx: Context, id: node_id,\n         ty::ty_closure(ty::ClosureTy {sigil: ManagedSigil, bounds: bounds, _}) => {\n             b(|cx, fv| check_for_box(cx, fv, bounds))\n         }\n-        ty::ty_closure(ty::ClosureTy {sigil: BorrowedSigil, bounds: bounds, _}) => {\n-            b(|cx, fv| check_for_block(cx, fv, bounds))\n+        ty::ty_closure(ty::ClosureTy {sigil: BorrowedSigil, bounds: bounds,\n+                                      region: region, _}) => {\n+            b(|cx, fv| check_for_block(cx, fv, bounds, region))\n         }\n         ty::ty_bare_fn(_) => {\n             b(check_for_bare)\n@@ -366,14 +372,21 @@ pub fn check_typaram_bounds(cx: Context,\n }\n \n pub fn check_freevar_bounds(cx: Context, sp: span, ty: ty::t,\n-                            bounds: ty::BuiltinBounds)\n+                            bounds: ty::BuiltinBounds, referenced_ty: Option<ty::t>)\n {\n     do check_builtin_bounds(cx, ty, bounds) |missing| {\n-        cx.tcx.sess.span_err(\n-            sp,\n-            fmt!(\"cannot capture variable of type `%s`, which does not fulfill \\\n-                  `%s`, in a bounded closure\",\n-                 ty_to_str(cx.tcx, ty), missing.user_string(cx.tcx)));\n+        // Will be Some if the freevar is implicitly borrowed (stack closure).\n+        // Emit a less mysterious error message in this case.\n+        match referenced_ty {\n+            Some(rty) => cx.tcx.sess.span_err(sp,\n+                fmt!(\"cannot implicitly borrow variable of type `%s` in a bounded \\\n+                      stack closure (implicit reference does not fulfill `%s`)\",\n+                     ty_to_str(cx.tcx, rty), missing.user_string(cx.tcx))),\n+            None => cx.tcx.sess.span_err(sp,\n+                fmt!(\"cannot capture variable of type `%s`, which does \\\n+                      not fulfill `%s`, in a bounded closure\",\n+                     ty_to_str(cx.tcx, ty), missing.user_string(cx.tcx))),\n+        }\n         cx.tcx.sess.span_note(\n             sp,\n             fmt!(\"this closure's environment must satisfy `%s`\","}, {"sha": "b8ee1eee26e1c69162dff91b50da41f803875c2a", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d4722e53332a854228a2db6a682da5e0017fe73e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4722e53332a854228a2db6a682da5e0017fe73e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=d4722e53332a854228a2db6a682da5e0017fe73e", "patch": "@@ -1828,7 +1828,9 @@ impl TypeContents {\n             // Currently all noncopyable existentials are 2nd-class types\n             // behind owned pointers. With dynamically-sized types, remove\n             // this assertion.\n-            assert!(self.intersects(TC_OWNED_POINTER));\n+            assert!(self.intersects(TC_OWNED_POINTER) ||\n+                    // (...or stack closures without a copy bound.)\n+                    self.intersects(TC_BORROWED_POINTER));\n         }\n         let tc = TC_MANAGED + TC_DTOR + TypeContents::sendable(cx);\n         self.intersects(tc)\n@@ -2194,7 +2196,14 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n             ast::Once => TC_ONCE_CLOSURE,\n             ast::Many => TC_NONE\n         };\n-        st + rt + ot\n+        // Prevent noncopyable types captured in the environment from being copied.\n+        let ct = if cty.bounds.contains_elem(BoundCopy) ||\n+                    cty.sigil == ast::ManagedSigil {\n+            TC_NONE\n+        } else {\n+            TC_NONCOPY_TRAIT\n+        };\n+        st + rt + ot + ct\n     }\n \n     fn trait_contents(store: TraitStore, mutbl: ast::mutability,"}, {"sha": "848fd95a5607a0ddd734896fb7325633bffb88ab", "filename": "src/test/compile-fail/kindck-owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4722e53332a854228a2db6a682da5e0017fe73e/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4722e53332a854228a2db6a682da5e0017fe73e/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs?ref=d4722e53332a854228a2db6a682da5e0017fe73e", "patch": "@@ -29,6 +29,6 @@ fn main() {\n     copy2(boxed);\n     let owned: ~fn() = || {};\n     copy2(owned);    //~ ERROR does not fulfill `Copy`\n-    let borrowed: &fn() = || {};\n+    let borrowed: &fn:Copy() = || {};\n     copy2(borrowed); //~ ERROR does not fulfill `'static`\n }"}]}