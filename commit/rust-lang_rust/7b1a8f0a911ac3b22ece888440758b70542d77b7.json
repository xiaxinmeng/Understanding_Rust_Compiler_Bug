{"sha": "7b1a8f0a911ac3b22ece888440758b70542d77b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMWE4ZjBhOTExYWMzYjIyZWNlODg4NDQwNzU4YjcwNTQyZDc3Yjc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-01-20T03:29:21Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-01-20T03:29:21Z"}, "message": "Additional ; to , changes, disable \"tag\" and \";\" in parser. Close #1430. Close #1428.", "tree": {"sha": "c99302652b4bcc41ac9f097ba6eee5fea30756de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c99302652b4bcc41ac9f097ba6eee5fea30756de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b1a8f0a911ac3b22ece888440758b70542d77b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b1a8f0a911ac3b22ece888440758b70542d77b7", "html_url": "https://github.com/rust-lang/rust/commit/7b1a8f0a911ac3b22ece888440758b70542d77b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b1a8f0a911ac3b22ece888440758b70542d77b7/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a23f188bdbff224337ca6bdcd164bb924d273eb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a23f188bdbff224337ca6bdcd164bb924d273eb5", "html_url": "https://github.com/rust-lang/rust/commit/a23f188bdbff224337ca6bdcd164bb924d273eb5"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "efdcd613fedb0339552b73f934cc7654c370832c", "filename": "src/comp/middle/trans_alt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs?ref=7b1a8f0a911ac3b22ece888440758b70542d77b7", "patch": "@@ -20,8 +20,8 @@ import trans_common::*;\n // range)\n enum opt {\n     lit(@ast::expr),\n-    var(/* disr val */int, /* variant dids */{tg: def_id, var: def_id});\n-    range(@ast::expr, @ast::expr);\n+    var(/* disr val */int, /* variant dids */{tg: def_id, var: def_id}),\n+    range(@ast::expr, @ast::expr)\n }\n fn opt_eq(a: opt, b: opt) -> bool {\n     alt (a, b) {"}, {"sha": "3e83f3da2f3d6c15bfe734f20ffdaca4208e1de9", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=7b1a8f0a911ac3b22ece888440758b70542d77b7", "patch": "@@ -338,21 +338,21 @@ enum block_kind {\n     // in the source language.  Since these blocks create variable scope, any\n     // variables created in them that are still live at the end of the block\n     // must be dropped and cleaned up when the block ends.\n-    SCOPE_BLOCK;\n+    SCOPE_BLOCK,\n \n \n     // A basic block created from the body of a loop.  Contains pointers to\n     // which block to jump to in the case of \"continue\" or \"break\", with the\n     // \"continue\" block optional, because \"while\" and \"do while\" don't support\n     // \"continue\" (TODO: is this intentional?)\n-    LOOP_SCOPE_BLOCK(option::t<@block_ctxt>, @block_ctxt);\n+    LOOP_SCOPE_BLOCK(option::t<@block_ctxt>, @block_ctxt),\n \n \n     // A non-scope block is a basic block created as a translation artifact\n     // from translating code that expresses conditional logic rather than by\n     // explicit { ... } block structure in the source language.  It's called a\n     // non-scope block because it doesn't introduce a new variable scope.\n-    NON_SCOPE_BLOCK;\n+    NON_SCOPE_BLOCK\n }\n \n "}, {"sha": "46b6c474363c1ed28d5e36478db198ada8a41e3c", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=7b1a8f0a911ac3b22ece888440758b70542d77b7", "patch": "@@ -2074,7 +2074,7 @@ fn parse_item_tag(p: parser, attrs: [ast::attribute]) -> @ast::item {\n             }\n \n             alt p.token {\n-              token::SEMI | token::COMMA {\n+              token::COMMA {\n                 p.bump();\n                 if p.token == token::RBRACE { done = true; }\n               }"}, {"sha": "b37ccd62aebbea229b41828074bcb7cc52651625", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=7b1a8f0a911ac3b22ece888440758b70542d77b7", "patch": "@@ -65,7 +65,7 @@ type port_id = int;\n           over other channels.\"\n )]\n enum chan<T: send> {\n-    chan_t(task::task, port_id);\n+    chan_t(task::task, port_id)\n }\n \n resource port_ptr<T: send>(po: *rustrt::rust_port) {\n@@ -89,7 +89,7 @@ resource port_ptr<T: send>(po: *rustrt::rust_port) {\n           copied, both copies refer to the same port. \\\n           Ports may be associated with multiple <chan>s.\"\n )]\n-enum port<T: send> { port_t(@port_ptr<T>); }\n+enum port<T: send> { port_t(@port_ptr<T>) }\n \n #[doc(\n   brief = \"Sends data over a channel. The sent data is moved \\"}, {"sha": "d605b575901ea57c543a2f83c6d56efcd3d472ae", "filename": "src/libcore/either.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Flibcore%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Flibcore%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Feither.rs?ref=7b1a8f0a911ac3b22ece888440758b70542d77b7", "patch": "@@ -14,7 +14,7 @@ enum t<T, U> {\n     /* Variant: left */\n     left(T),\n     /* Variant: right */\n-    right(U),\n+    right(U)\n }\n \n /* Section: Operations */"}, {"sha": "0b229110ec3b030588ba61fa37782c04b4dda821", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=7b1a8f0a911ac3b22ece888440758b70542d77b7", "patch": "@@ -23,7 +23,7 @@ enum t<T, U> {\n \n     Contains the error value\n     */\n-    err(U),\n+    err(U)\n }\n \n /* Section: Operations */"}, {"sha": "b2154bc61b4b4fa36b369e9f826aff2b6a4f2fd0", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=7b1a8f0a911ac3b22ece888440758b70542d77b7", "patch": "@@ -43,7 +43,7 @@ export ptr;\n  */\n \n enum t<T> {\n-    t({ base: *mutable T, len: uint, rsrc: @dtor_res});\n+    t({ base: *mutable T, len: uint, rsrc: @dtor_res})\n }\n \n resource dtor_res(dtor: option::t<fn@()>) {"}, {"sha": "f5135ac8298e855cfab7b416f7b8488105b614af", "filename": "src/libstd/extfmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Flibstd%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Flibstd%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fextfmt.rs?ref=7b1a8f0a911ac3b22ece888440758b70542d77b7", "patch": "@@ -39,8 +39,8 @@ import option::{some, none};\n \n // Functions used by the fmt extension at compile time\n mod ct {\n-    enum signedness { signed, unsigned, }\n-    enum caseness { case_upper, case_lower, }\n+    enum signedness { signed, unsigned }\n+    enum caseness { case_upper, case_lower }\n     enum ty {\n         ty_bool,\n         ty_str,"}, {"sha": "8e9839a8901c3f3d5f9ca3d56e6716a7077a3ac1", "filename": "src/libstd/fun_treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Flibstd%2Ffun_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Flibstd%2Ffun_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffun_treemap.rs?ref=7b1a8f0a911ac3b22ece888440758b70542d77b7", "patch": "@@ -33,7 +33,7 @@ Tag: tree_node\n */\n enum tree_node<K, V> {\n     empty,\n-    node(@K, @V, @tree_node<K, V>, @tree_node<K, V>),\n+    node(@K, @V, @tree_node<K, V>, @tree_node<K, V>)\n }\n \n /* Section: Operations */"}, {"sha": "bbf3f888cf65b00812f4cf7a5791a03e88c81c95", "filename": "src/libstd/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=7b1a8f0a911ac3b22ece888440758b70542d77b7", "patch": "@@ -114,7 +114,7 @@ mod chained {\n \n     enum chain<K, V> {\n         present(@entry<K, V>),\n-        absent,\n+        absent\n     }\n \n     type t<K, V> = {\n@@ -127,7 +127,7 @@ mod chained {\n     enum search_result<K, V> {\n         not_found,\n         found_first(uint, @entry<K,V>),\n-        found_after(@entry<K,V>, @entry<K,V>),\n+        found_after(@entry<K,V>, @entry<K,V>)\n     }\n \n     fn search_rem<K: copy, V: copy>("}, {"sha": "7e181a80457055fc67107d137718f2579397229a", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=7b1a8f0a911ac3b22ece888440758b70542d77b7", "patch": "@@ -28,7 +28,7 @@ type treemap<K, V> = @mutable tree_node<K, V>;\n /*\n Tag: tree_node\n */\n-enum tree_node<K, V> { empty, node(@K, @V, treemap<K, V>, treemap<K, V>), }\n+enum tree_node<K, V> { empty, node(@K, @V, treemap<K, V>, treemap<K, V>) }\n \n /* Section: Operations */\n "}, {"sha": "20c6e224daab357803b06255c8908b2d41408971", "filename": "src/rustdoc/gen.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Frustdoc%2Fgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Frustdoc%2Fgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fgen.rs?ref=7b1a8f0a911ac3b22ece888440758b70542d77b7", "patch": "@@ -33,9 +33,9 @@ fn write_markdown(\n }\n \n enum hlvl {\n-    h1 = 1;\n-    h2 = 2;\n-    h3 = 3;\n+    h1 = 1,\n+    h2 = 2,\n+    h3 = 3\n }\n \n fn write_header(ctxt: ctxt, lvl: hlvl, title: str) {"}, {"sha": "b0291ea4e83bf57713c768b86953f5ff5191bdcd", "filename": "src/test/compile-fail/unsafe-alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Ftest%2Fcompile-fail%2Funsafe-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Ftest%2Fcompile-fail%2Funsafe-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-alt.rs?ref=7b1a8f0a911ac3b22ece888440758b70542d77b7", "patch": "@@ -1,6 +1,6 @@\n // error-pattern:invalidate reference i\n \n-enum foo { left({mutable x: int}); right(bool); }\n+enum foo { left({mutable x: int}), right(bool) }\n \n fn main() {\n     let x = left({mutable x: 10});"}, {"sha": "17fa82980a99f6e3cee8f403a779c4c962d116ac", "filename": "src/test/run-pass/issue-970.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Ftest%2Frun-pass%2Fissue-970.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b1a8f0a911ac3b22ece888440758b70542d77b7/src%2Ftest%2Frun-pass%2Fissue-970.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-970.rs?ref=7b1a8f0a911ac3b22ece888440758b70542d77b7", "patch": "@@ -1,6 +1,6 @@\n enum maybe_ordered_pair {\n-    yes({low: int, high: int} : less_than(*.low, *.high));\n-    no;\n+    yes({low: int, high: int} : less_than(*.low, *.high)),\n+    no\n }\n pure fn less_than(x: int, y: int) -> bool { ret x < y; }\n fn main() { }"}]}