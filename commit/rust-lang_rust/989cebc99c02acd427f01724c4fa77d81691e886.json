{"sha": "989cebc99c02acd427f01724c4fa77d81691e886", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4OWNlYmM5OWMwMmFjZDQyN2YwMTcyNGM0ZmE3N2Q4MTY5MWU4ODY=", "commit": {"author": {"name": "Geoffry Song", "email": "goffrie@gmail.com", "date": "2019-11-15T08:08:43Z"}, "committer": {"name": "Geoffry Song", "email": "goffrie@gmail.com", "date": "2019-11-15T08:18:28Z"}, "message": "Fix parsing of \"postfix\" range expressions.\n\nRight now they are handled in `postfix_dot_expr`, but that doesn't allow it to\ncorrectly handle precedence. Integrate it more tightly with the Pratt parser\ninstead.\n\nAlso includes a drive-by fix for parsing `match .. {}`.\n\nFixes #2242.", "tree": {"sha": "89c2ed0185257de734b60eb3db01be2f5270b7c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89c2ed0185257de734b60eb3db01be2f5270b7c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/989cebc99c02acd427f01724c4fa77d81691e886", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/989cebc99c02acd427f01724c4fa77d81691e886", "html_url": "https://github.com/rust-lang/rust/commit/989cebc99c02acd427f01724c4fa77d81691e886", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/989cebc99c02acd427f01724c4fa77d81691e886/comments", "author": {"login": "goffrie", "id": 1240398, "node_id": "MDQ6VXNlcjEyNDAzOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1240398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goffrie", "html_url": "https://github.com/goffrie", "followers_url": "https://api.github.com/users/goffrie/followers", "following_url": "https://api.github.com/users/goffrie/following{/other_user}", "gists_url": "https://api.github.com/users/goffrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/goffrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goffrie/subscriptions", "organizations_url": "https://api.github.com/users/goffrie/orgs", "repos_url": "https://api.github.com/users/goffrie/repos", "events_url": "https://api.github.com/users/goffrie/events{/privacy}", "received_events_url": "https://api.github.com/users/goffrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "goffrie", "id": 1240398, "node_id": "MDQ6VXNlcjEyNDAzOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1240398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goffrie", "html_url": "https://github.com/goffrie", "followers_url": "https://api.github.com/users/goffrie/followers", "following_url": "https://api.github.com/users/goffrie/following{/other_user}", "gists_url": "https://api.github.com/users/goffrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/goffrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goffrie/subscriptions", "organizations_url": "https://api.github.com/users/goffrie/orgs", "repos_url": "https://api.github.com/users/goffrie/repos", "events_url": "https://api.github.com/users/goffrie/events{/privacy}", "received_events_url": "https://api.github.com/users/goffrie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ad11973ac7596323f085a9fcb9530e47f021c41", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ad11973ac7596323f085a9fcb9530e47f021c41", "html_url": "https://github.com/rust-lang/rust/commit/3ad11973ac7596323f085a9fcb9530e47f021c41"}], "stats": {"total": 172, "additions": 142, "deletions": 30}, "files": [{"sha": "cf69da25adac43c8ab8700d74fcda5eb519c5b70", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 24, "deletions": 30, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/989cebc99c02acd427f01724c4fa77d81691e886/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989cebc99c02acd427f01724c4fa77d81691e886/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=989cebc99c02acd427f01724c4fa77d81691e886", "patch": "@@ -290,6 +290,25 @@ fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) -> (Option<CompletedMarker>,\n         let m = lhs.precede(p);\n         p.bump(op);\n \n+        if is_range {\n+            // test postfix_range\n+            // fn foo() {\n+            //     let x = 1..;\n+            //     match 1.. { _ => () };\n+            //     match a.b()..S { _ => () };\n+            // }\n+            let has_trailing_expression =\n+                p.at_ts(EXPR_FIRST) && !(r.forbid_structs && p.at(T!['{']));\n+            if !has_trailing_expression {\n+                if op == T![..=] {\n+                    p.error(\"expected expression to end inclusive range\");\n+                }\n+                // no RHS\n+                lhs = m.complete(p, RANGE_EXPR);\n+                break;\n+            }\n+        }\n+\n         expr_bp(p, r, op_bp + 1);\n         lhs = m.complete(p, if is_range { RANGE_EXPR } else { BIN_EXPR });\n     }\n@@ -330,7 +349,7 @@ fn lhs(p: &mut Parser, r: Restrictions) -> Option<(CompletedMarker, BlockLike)>\n                 if p.at(op) {\n                     m = p.start();\n                     p.bump(op);\n-                    if p.at_ts(EXPR_FIRST) {\n+                    if p.at_ts(EXPR_FIRST) && !(r.forbid_structs && p.at(T!['{'])) {\n                         expr_bp(p, r, 2);\n                     }\n                     return Some((m.complete(p, RANGE_EXPR), BlockLike::NotBlock));\n@@ -344,13 +363,7 @@ fn lhs(p: &mut Parser, r: Restrictions) -> Option<(CompletedMarker, BlockLike)>\n             // }\n             //\n             let (lhs, blocklike) = atom::atom_expr(p, r)?;\n-            return Some(postfix_expr(\n-                p,\n-                lhs,\n-                blocklike,\n-                !(r.prefer_stmt && blocklike.is_block()),\n-                r.forbid_structs,\n-            ));\n+            return Some(postfix_expr(p, lhs, blocklike, !(r.prefer_stmt && blocklike.is_block())));\n         }\n     };\n     // parse the interior of the unary expression\n@@ -366,7 +379,6 @@ fn postfix_expr(\n     // `while true {break}; ();`\n     mut block_like: BlockLike,\n     mut allow_calls: bool,\n-    forbid_structs: bool,\n ) -> (CompletedMarker, BlockLike) {\n     loop {\n         lhs = match p.current() {\n@@ -380,7 +392,7 @@ fn postfix_expr(\n             // }\n             T!['('] if allow_calls => call_expr(p, lhs),\n             T!['['] if allow_calls => index_expr(p, lhs),\n-            T![.] => match postfix_dot_expr(p, lhs, forbid_structs) {\n+            T![.] => match postfix_dot_expr(p, lhs) {\n                 Ok(it) => it,\n                 Err(it) => {\n                     lhs = it;\n@@ -398,7 +410,6 @@ fn postfix_expr(\n     fn postfix_dot_expr(\n         p: &mut Parser,\n         lhs: CompletedMarker,\n-        forbid_structs: bool,\n     ) -> Result<CompletedMarker, CompletedMarker> {\n         assert!(p.at(T![.]));\n         if p.nth(1) == IDENT && (p.nth(2) == T!['('] || p.nth_at(2, T![::])) {\n@@ -418,25 +429,8 @@ fn postfix_expr(\n             return Ok(m.complete(p, AWAIT_EXPR));\n         }\n \n-        // test postfix_range\n-        // fn foo() {\n-        //     let x = 1..;\n-        //     match 1.. { _ => () };\n-        //     match a.b()..S { _ => () };\n-        // }\n-        for &(op, la) in &[(T![..=], 3), (T![..], 2)] {\n-            if p.at(op) {\n-                let next_token = p.nth(la);\n-                let has_trailing_expression =\n-                    !(forbid_structs && next_token == T!['{']) && EXPR_FIRST.contains(next_token);\n-                return if has_trailing_expression {\n-                    Err(lhs)\n-                } else {\n-                    let m = lhs.precede(p);\n-                    p.bump(op);\n-                    Ok(m.complete(p, RANGE_EXPR))\n-                };\n-            }\n+        if p.at(T![..=]) || p.at(T![..]) {\n+            return Err(lhs);\n         }\n \n         Ok(field_expr(p, lhs))"}, {"sha": "ecd25afafecf804171740f4968e20cd89c0ffa49", "filename": "crates/ra_syntax/test_data/parser/err/0038_endless_inclusive_range.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/989cebc99c02acd427f01724c4fa77d81691e886/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989cebc99c02acd427f01724c4fa77d81691e886/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.rs?ref=989cebc99c02acd427f01724c4fa77d81691e886", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    0..=;\n+}"}, {"sha": "3efe9816493b5ba4f9c276378e06031077809ff6", "filename": "crates/ra_syntax/test_data/parser/err/0038_endless_inclusive_range.txt", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/989cebc99c02acd427f01724c4fa77d81691e886/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.txt", "raw_url": "https://github.com/rust-lang/rust/raw/989cebc99c02acd427f01724c4fa77d81691e886/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.txt?ref=989cebc99c02acd427f01724c4fa77d81691e886", "patch": "@@ -0,0 +1,24 @@\n+SOURCE_FILE@[0; 24)\n+  FN_DEF@[0; 23)\n+    FN_KW@[0; 2) \"fn\"\n+    WHITESPACE@[2; 3) \" \"\n+    NAME@[3; 7)\n+      IDENT@[3; 7) \"main\"\n+    PARAM_LIST@[7; 9)\n+      L_PAREN@[7; 8) \"(\"\n+      R_PAREN@[8; 9) \")\"\n+    WHITESPACE@[9; 10) \" \"\n+    BLOCK_EXPR@[10; 23)\n+      BLOCK@[10; 23)\n+        L_CURLY@[10; 11) \"{\"\n+        WHITESPACE@[11; 16) \"\\n    \"\n+        EXPR_STMT@[16; 21)\n+          RANGE_EXPR@[16; 20)\n+            LITERAL@[16; 17)\n+              INT_NUMBER@[16; 17) \"0\"\n+            DOTDOTEQ@[17; 20) \"..=\"\n+          SEMI@[20; 21) \";\"\n+        WHITESPACE@[21; 22) \"\\n\"\n+        R_CURLY@[22; 23) \"}\"\n+  WHITESPACE@[23; 24) \"\\n\"\n+error 20: expected expression to end inclusive range"}, {"sha": "f063ffadb3db6a934fcebb7ad69bc2365928d57b", "filename": "crates/ra_syntax/test_data/parser/ok/0060_as_range.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989cebc99c02acd427f01724c4fa77d81691e886/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0060_as_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989cebc99c02acd427f01724c4fa77d81691e886/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0060_as_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0060_as_range.rs?ref=989cebc99c02acd427f01724c4fa77d81691e886", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    0 as usize ..;\n+    1 + 2 as usize ..;\n+}"}, {"sha": "ad0c4a3fef0cd1a19b1d510e3558ec0eccb52779", "filename": "crates/ra_syntax/test_data/parser/ok/0060_as_range.txt", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/989cebc99c02acd427f01724c4fa77d81691e886/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0060_as_range.txt", "raw_url": "https://github.com/rust-lang/rust/raw/989cebc99c02acd427f01724c4fa77d81691e886/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0060_as_range.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0060_as_range.txt?ref=989cebc99c02acd427f01724c4fa77d81691e886", "patch": "@@ -0,0 +1,56 @@\n+SOURCE_FILE@[0; 56)\n+  FN_DEF@[0; 55)\n+    FN_KW@[0; 2) \"fn\"\n+    WHITESPACE@[2; 3) \" \"\n+    NAME@[3; 7)\n+      IDENT@[3; 7) \"main\"\n+    PARAM_LIST@[7; 9)\n+      L_PAREN@[7; 8) \"(\"\n+      R_PAREN@[8; 9) \")\"\n+    WHITESPACE@[9; 10) \" \"\n+    BLOCK_EXPR@[10; 55)\n+      BLOCK@[10; 55)\n+        L_CURLY@[10; 11) \"{\"\n+        WHITESPACE@[11; 16) \"\\n    \"\n+        EXPR_STMT@[16; 30)\n+          RANGE_EXPR@[16; 29)\n+            CAST_EXPR@[16; 26)\n+              LITERAL@[16; 17)\n+                INT_NUMBER@[16; 17) \"0\"\n+              WHITESPACE@[17; 18) \" \"\n+              AS_KW@[18; 20) \"as\"\n+              WHITESPACE@[20; 21) \" \"\n+              PATH_TYPE@[21; 26)\n+                PATH@[21; 26)\n+                  PATH_SEGMENT@[21; 26)\n+                    NAME_REF@[21; 26)\n+                      IDENT@[21; 26) \"usize\"\n+            WHITESPACE@[26; 27) \" \"\n+            DOTDOT@[27; 29) \"..\"\n+          SEMI@[29; 30) \";\"\n+        WHITESPACE@[30; 35) \"\\n    \"\n+        EXPR_STMT@[35; 53)\n+          RANGE_EXPR@[35; 52)\n+            BIN_EXPR@[35; 49)\n+              LITERAL@[35; 36)\n+                INT_NUMBER@[35; 36) \"1\"\n+              WHITESPACE@[36; 37) \" \"\n+              PLUS@[37; 38) \"+\"\n+              WHITESPACE@[38; 39) \" \"\n+              CAST_EXPR@[39; 49)\n+                LITERAL@[39; 40)\n+                  INT_NUMBER@[39; 40) \"2\"\n+                WHITESPACE@[40; 41) \" \"\n+                AS_KW@[41; 43) \"as\"\n+                WHITESPACE@[43; 44) \" \"\n+                PATH_TYPE@[44; 49)\n+                  PATH@[44; 49)\n+                    PATH_SEGMENT@[44; 49)\n+                      NAME_REF@[44; 49)\n+                        IDENT@[44; 49) \"usize\"\n+            WHITESPACE@[49; 50) \" \"\n+            DOTDOT@[50; 52) \"..\"\n+          SEMI@[52; 53) \";\"\n+        WHITESPACE@[53; 54) \"\\n\"\n+        R_CURLY@[54; 55) \"}\"\n+  WHITESPACE@[55; 56) \"\\n\""}, {"sha": "2c4ed11e1e5dd438e51e62988ce6356b7bbf10b6", "filename": "crates/ra_syntax/test_data/parser/ok/0061_match_full_range.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989cebc99c02acd427f01724c4fa77d81691e886/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0061_match_full_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989cebc99c02acd427f01724c4fa77d81691e886/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0061_match_full_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0061_match_full_range.rs?ref=989cebc99c02acd427f01724c4fa77d81691e886", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    match .. {\n+    }\n+}"}, {"sha": "bdfac9b76434f9f9dd906b70ce814d23800ee338", "filename": "crates/ra_syntax/test_data/parser/ok/0061_match_full_range.txt", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/989cebc99c02acd427f01724c4fa77d81691e886/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0061_match_full_range.txt", "raw_url": "https://github.com/rust-lang/rust/raw/989cebc99c02acd427f01724c4fa77d81691e886/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0061_match_full_range.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0061_match_full_range.txt?ref=989cebc99c02acd427f01724c4fa77d81691e886", "patch": "@@ -0,0 +1,27 @@\n+SOURCE_FILE@[0; 35)\n+  FN_DEF@[0; 34)\n+    FN_KW@[0; 2) \"fn\"\n+    WHITESPACE@[2; 3) \" \"\n+    NAME@[3; 7)\n+      IDENT@[3; 7) \"main\"\n+    PARAM_LIST@[7; 9)\n+      L_PAREN@[7; 8) \"(\"\n+      R_PAREN@[8; 9) \")\"\n+    WHITESPACE@[9; 10) \" \"\n+    BLOCK_EXPR@[10; 34)\n+      BLOCK@[10; 34)\n+        L_CURLY@[10; 11) \"{\"\n+        WHITESPACE@[11; 16) \"\\n    \"\n+        MATCH_EXPR@[16; 32)\n+          MATCH_KW@[16; 21) \"match\"\n+          WHITESPACE@[21; 22) \" \"\n+          RANGE_EXPR@[22; 24)\n+            DOTDOT@[22; 24) \"..\"\n+          WHITESPACE@[24; 25) \" \"\n+          MATCH_ARM_LIST@[25; 32)\n+            L_CURLY@[25; 26) \"{\"\n+            WHITESPACE@[26; 31) \"\\n    \"\n+            R_CURLY@[31; 32) \"}\"\n+        WHITESPACE@[32; 33) \"\\n\"\n+        R_CURLY@[33; 34) \"}\"\n+  WHITESPACE@[34; 35) \"\\n\""}]}