{"sha": "f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNWU2YmY3MDg5ZmEzZDVmM2I0OTBlYjhkOWZjODliYzA0NDYwNGQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-02-15T16:55:47Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-02-16T06:11:28Z"}, "message": "Rollup merge of #58074 - scottmcm:stabilize-sort_by_cached_key, r=SimonSapin\n\nStabilize slice_sort_by_cached_key\n\nI was going to ask on the tracking issue (https://github.com/rust-lang/rust/issues/34447), but decided to just send this and hope for an FCP here.  The method was added last March by https://github.com/rust-lang/rust/pull/48639.\n\nSignature: https://doc.rust-lang.org/std/primitive.slice.html#method.sort_by_cached_key\n```rust\nimpl [T] {\n    pub fn sort_by_cached_key<K, F>(&mut self, f: F)\n        where F: FnMut(&T) -> K, K: Ord;\n}\n```\n\nThat's an identical signature to the existing `sort_by_key`, so I think the questions are just naming, implementation, and the usual \"do we want this?\".\n\nThe implementation seems to have proven its use in rustc at least, which many uses: https://github.com/rust-lang/rust/search?l=Rust&q=sort_by_cached_key\n\n(I'm asking because it's exactly what I just needed the other day:\n```rust\n    all_positions.sort_by_cached_key(|&n|\n        data::CITIES.iter()\n            .map(|x| *metric_closure.get_edge(n, x.pos).unwrap())\n            .sum::<usize>()\n    );\n```\nsince caching that key is a pretty obviously good idea.)\n\nCloses #34447", "tree": {"sha": "256a9a879d98e6aaffb4497c290c8795322c1c2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/256a9a879d98e6aaffb4497c290c8795322c1c2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlxnqZAACgkQ/vbIBR0O\nATycFBAAvDPrFRnIQnwod9WsfXtR62pW06T4GPSv+fg0W5wLPJS1YCwUNoTbqMdx\nRGHiS3qeKMvA2nezsrfQPSZgwkAG1Knf8l6PD7juEaM90KUW3mfcQFAgugj4tuLs\nfxtUcNIh7Sm2HAIgfjw+7Yg8DRI2vWzxLnhp5c6m6f9wtMYzINt73yGyFjAPfWGn\nOLe9dDBErywJKoa3cF1egH8dJGm7Ykar+c+Zv6lYK7h8w5w1dQvJ1UvsD0fUDdh6\n2/zExche0QYLU+p/MjvpiIqCVeCcOtllIbEvXhPlUqu5t/mtptTGqmgXOuhxiTpq\nEgjdvvvMg0HMYw8XaZBBGge0sY+xb6TsmM20wvtyVjseWJb2DI2Rs81IHRF3qJah\nxd7BkFO6vPRCqGanpA9v3bZ6sOLIq0XqCH+K8SiyEctAQmdi+X42L6ELVHVO52Z8\nZcNf1WbcoKecV3LoXwUtFl01GO4MTCJc2mzb2LZZUYMxjZJqyTCY8q+C42V/0QT5\nEQcIQ80MyIdmTZvawbANIWwPmBn2kWVse5pAh7wyaQNpbbTBYeGZnr/2thPC1SnK\nhNKpWa1cMzWT0uRmXWgbwqyzuuPd5CEETRkr04Ntrx6/2dwHWLoVBhKbyk8gCqnS\nCRL8iFiFkcHHFaMFOYnvzfNyLc7Ek9lvfKCPxI8F9EpQyEmc2wc=\n=j5q9\n-----END PGP SIGNATURE-----", "payload": "tree 256a9a879d98e6aaffb4497c290c8795322c1c2c\nparent 84e88da4311e4c2dac3789de708ec5232a3deeff\nparent 317f15304e6091a1f3cc58c52d36df037ef50db0\nauthor kennytm <kennytm@gmail.com> 1550249747 +0800\ncommitter kennytm <kennytm@gmail.com> 1550297488 +0800\n\nRollup merge of #58074 - scottmcm:stabilize-sort_by_cached_key, r=SimonSapin\n\nStabilize slice_sort_by_cached_key\n\nI was going to ask on the tracking issue (https://github.com/rust-lang/rust/issues/34447), but decided to just send this and hope for an FCP here.  The method was added last March by https://github.com/rust-lang/rust/pull/48639.\n\nSignature: https://doc.rust-lang.org/std/primitive.slice.html#method.sort_by_cached_key\n```rust\nimpl [T] {\n    pub fn sort_by_cached_key<K, F>(&mut self, f: F)\n        where F: FnMut(&T) -> K, K: Ord;\n}\n```\n\nThat's an identical signature to the existing `sort_by_key`, so I think the questions are just naming, implementation, and the usual \"do we want this?\".\n\nThe implementation seems to have proven its use in rustc at least, which many uses: https://github.com/rust-lang/rust/search?l=Rust&q=sort_by_cached_key\n\n(I'm asking because it's exactly what I just needed the other day:\n```rust\n    all_positions.sort_by_cached_key(|&n|\n        data::CITIES.iter()\n            .map(|x| *metric_closure.get_edge(n, x.pos).unwrap())\n            .sum::<usize>()\n    );\n```\nsince caching that key is a pretty obviously good idea.)\n\nCloses #34447\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d", "html_url": "https://github.com/rust-lang/rust/commit/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84e88da4311e4c2dac3789de708ec5232a3deeff", "url": "https://api.github.com/repos/rust-lang/rust/commits/84e88da4311e4c2dac3789de708ec5232a3deeff", "html_url": "https://github.com/rust-lang/rust/commit/84e88da4311e4c2dac3789de708ec5232a3deeff"}, {"sha": "317f15304e6091a1f3cc58c52d36df037ef50db0", "url": "https://api.github.com/repos/rust-lang/rust/commits/317f15304e6091a1f3cc58c52d36df037ef50db0", "html_url": "https://github.com/rust-lang/rust/commit/317f15304e6091a1f3cc58c52d36df037ef50db0"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "a1884b7d548523a59423c7bbfffe285ffcf37529", "filename": "src/liballoc/benches/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Fliballoc%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Fliballoc%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Flib.rs?ref=f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d", "patch": "@@ -1,5 +1,4 @@\n #![feature(repr_simd)]\n-#![feature(slice_sort_by_cached_key)]\n #![feature(test)]\n \n extern crate rand;"}, {"sha": "f4b2d463778a99dede8d43748159c11d12df656a", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d", "patch": "@@ -257,6 +257,10 @@ impl<T> [T] {\n     /// This sort is stable (i.e., does not reorder equal elements) and `O(m n log(m n))`\n     /// worst-case, where the key function is `O(m)`.\n     ///\n+    /// For expensive key functions (e.g. functions that are not simple property accesses or\n+    /// basic operations), [`sort_by_cached_key`](#method.sort_by_cached_key) is likely to be\n+    /// significantly faster, as it does not recompute element keys.\n+    ///\n     /// When applicable, unstable sorting is preferred because it is generally faster than stable\n     /// sorting and it doesn't allocate auxiliary memory.\n     /// See [`sort_unstable_by_key`](#method.sort_unstable_by_key).\n@@ -312,15 +316,14 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(slice_sort_by_cached_key)]\n     /// let mut v = [-5i32, 4, 32, -3, 2];\n     ///\n     /// v.sort_by_cached_key(|k| k.to_string());\n     /// assert!(v == [-3, -5, 2, 32, 4]);\n     /// ```\n     ///\n     /// [pdqsort]: https://github.com/orlp/pdqsort\n-    #[unstable(feature = \"slice_sort_by_cached_key\", issue = \"34447\")]\n+    #[stable(feature = \"slice_sort_by_cached_key\", since = \"1.34.0\")]\n     #[inline]\n     pub fn sort_by_cached_key<K, F>(&mut self, f: F)\n         where F: FnMut(&T) -> K, K: Ord"}, {"sha": "2361a7db1f7a79e10066a096edf841b961f41278", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d", "patch": "@@ -4,7 +4,6 @@\n #![feature(exact_size_is_empty)]\n #![feature(pattern)]\n #![feature(repeat_generic_slice)]\n-#![feature(slice_sort_by_cached_key)]\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]\n #![feature(vecdeque_rotate)]"}, {"sha": "a628fd0cfa4b2a1831e261776cc073b36a8692c5", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d", "patch": "@@ -1563,6 +1563,10 @@ impl<T> [T] {\n     /// randomization to avoid degenerate cases, but with a fixed seed to always provide\n     /// deterministic behavior.\n     ///\n+    /// Due to its key calling strategy, [`sort_unstable_by_key`](#method.sort_unstable_by_key)\n+    /// is likely to be slower than [`sort_by_cached_key`](#method.sort_by_cached_key) in\n+    /// cases where the key function is expensive.\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "3d79b6777fa8b3c0bdd70cfe427419992e5070b0", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d", "patch": "@@ -47,7 +47,6 @@\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_attrs)]\n #![feature(slice_patterns)]\n-#![feature(slice_sort_by_cached_key)]\n #![feature(specialization)]\n #![feature(unboxed_closures)]\n #![feature(thread_local)]"}, {"sha": "e344f8732f820b2c1beb6c7fdce1efd2542b99da", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d", "patch": "@@ -17,7 +17,6 @@\n #![feature(nll)]\n #![feature(range_contains)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(slice_sort_by_cached_key)]\n #![feature(optin_builtin_traits)]\n #![feature(concat_idents)]\n #![feature(link_args)]"}, {"sha": "9e1744451465d310872a4b50030e31c6b3063c71", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d", "patch": "@@ -6,7 +6,6 @@\n #![feature(libc)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(in_band_lifetimes)]\n-#![feature(slice_sort_by_cached_key)]\n #![feature(nll)]\n #![allow(unused_attributes)]\n #![allow(dead_code)]"}, {"sha": "e022d3a3818a5caae987c3a606bc20c672cfd349", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d", "patch": "@@ -10,7 +10,6 @@\n #![cfg_attr(unix, feature(libc))]\n #![feature(nll)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(slice_sort_by_cached_key)]\n #![feature(set_stdio)]\n #![feature(no_debug)]\n #![feature(integer_atomics)]"}, {"sha": "b4f68399d9febc59aaca4163b6dd1b186e515234", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d", "patch": "@@ -6,7 +6,6 @@\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(slice_sort_by_cached_key)]\n #![feature(crate_visibility_modifier)]\n #![feature(specialization)]\n #![feature(rustc_private)]"}, {"sha": "e0fee10cd008c90be3828ef42baa4c783984a9cb", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d", "patch": "@@ -7,7 +7,6 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(nll)]\n #![feature(in_band_lifetimes)]\n #![feature(slice_patterns)]\n-#![feature(slice_sort_by_cached_key)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "1a7744786d80eefcd6cccc9462200d2b500ed9b3", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d", "patch": "@@ -4,7 +4,6 @@\n #![feature(label_break_value)]\n #![feature(nll)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(slice_sort_by_cached_key)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "2dcb48692f6bdb5060f8512184d0f38b26af6aab", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d", "patch": "@@ -67,7 +67,6 @@ This API is completely unstable and subject to change.\n #![feature(refcell_replace_swap)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_patterns)]\n-#![feature(slice_sort_by_cached_key)]\n #![feature(never_type)]\n \n #![recursion_limit=\"256\"]"}, {"sha": "0b34a27794f0f095a7e54285a745fe01b56a938e", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d", "patch": "@@ -7,7 +7,6 @@\n #![feature(box_syntax)]\n #![feature(nll)]\n #![feature(set_stdio)]\n-#![feature(slice_sort_by_cached_key)]\n #![feature(test)]\n #![feature(vec_remove_item)]\n #![feature(ptr_offset_from)]"}, {"sha": "a6145d5dcb38c6234146c2657111c267dff28918", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=f05e6bf7089fa3d5f3b490eb8d9fc89bc044604d", "patch": "@@ -14,7 +14,6 @@\n #![feature(nll)]\n #![feature(rustc_attrs)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(slice_sort_by_cached_key)]\n #![feature(step_trait)]\n #![feature(try_trait)]\n #![feature(unicode_internals)]"}]}