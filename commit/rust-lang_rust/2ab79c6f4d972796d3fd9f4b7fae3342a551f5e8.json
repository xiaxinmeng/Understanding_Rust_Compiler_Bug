{"sha": "2ab79c6f4d972796d3fd9f4b7fae3342a551f5e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhYjc5YzZmNGQ5NzI3OTZkM2ZkOWY0YjdmYWUzMzQyYTU1MWY1ZTg=", "commit": {"author": {"name": "Jess Balint", "email": "jbalint@gmail.com", "date": "2020-05-20T23:37:09Z"}, "committer": {"name": "Jess Balint", "email": "jbalint@gmail.com", "date": "2020-05-22T02:04:02Z"}, "message": "Assist: replace anonymous lifetime with a named one\n\n(fixes #4523)", "tree": {"sha": "d9b43b01ff1f42e47e9cee9952f01cc14ed0b4f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9b43b01ff1f42e47e9cee9952f01cc14ed0b4f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ab79c6f4d972796d3fd9f4b7fae3342a551f5e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ab79c6f4d972796d3fd9f4b7fae3342a551f5e8", "html_url": "https://github.com/rust-lang/rust/commit/2ab79c6f4d972796d3fd9f4b7fae3342a551f5e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ab79c6f4d972796d3fd9f4b7fae3342a551f5e8/comments", "author": {"login": "jbalint", "id": 99260, "node_id": "MDQ6VXNlcjk5MjYw", "avatar_url": "https://avatars.githubusercontent.com/u/99260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbalint", "html_url": "https://github.com/jbalint", "followers_url": "https://api.github.com/users/jbalint/followers", "following_url": "https://api.github.com/users/jbalint/following{/other_user}", "gists_url": "https://api.github.com/users/jbalint/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbalint/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbalint/subscriptions", "organizations_url": "https://api.github.com/users/jbalint/orgs", "repos_url": "https://api.github.com/users/jbalint/repos", "events_url": "https://api.github.com/users/jbalint/events{/privacy}", "received_events_url": "https://api.github.com/users/jbalint/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbalint", "id": 99260, "node_id": "MDQ6VXNlcjk5MjYw", "avatar_url": "https://avatars.githubusercontent.com/u/99260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbalint", "html_url": "https://github.com/jbalint", "followers_url": "https://api.github.com/users/jbalint/followers", "following_url": "https://api.github.com/users/jbalint/following{/other_user}", "gists_url": "https://api.github.com/users/jbalint/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbalint/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbalint/subscriptions", "organizations_url": "https://api.github.com/users/jbalint/orgs", "repos_url": "https://api.github.com/users/jbalint/repos", "events_url": "https://api.github.com/users/jbalint/events{/privacy}", "received_events_url": "https://api.github.com/users/jbalint/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90332ca21901e1101154462053b50e5d2743a21c", "url": "https://api.github.com/repos/rust-lang/rust/commits/90332ca21901e1101154462053b50e5d2743a21c", "html_url": "https://github.com/rust-lang/rust/commit/90332ca21901e1101154462053b50e5d2743a21c"}], "stats": {"total": 149, "additions": 149, "deletions": 0}, "files": [{"sha": "63f0a7dabfeb3154dd8586534a04913c63eabb9e", "filename": "crates/ra_assists/src/handlers/change_lifetime_anon_to_named.rs", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/2ab79c6f4d972796d3fd9f4b7fae3342a551f5e8/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_lifetime_anon_to_named.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ab79c6f4d972796d3fd9f4b7fae3342a551f5e8/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_lifetime_anon_to_named.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_lifetime_anon_to_named.rs?ref=2ab79c6f4d972796d3fd9f4b7fae3342a551f5e8", "patch": "@@ -0,0 +1,123 @@\n+use crate::{AssistContext, AssistId, Assists};\n+use ra_syntax::{ast, ast::{TypeParamsOwner}, AstNode, SyntaxKind};\n+\n+/// Assist: change_lifetime_anon_to_named\n+///\n+/// Change an anonymous lifetime to a named lifetime.\n+///\n+/// ```\n+/// impl Cursor<'_<|>> {\n+///     fn node(self) -> &SyntaxNode {\n+///         match self {\n+///             Cursor::Replace(node) | Cursor::Before(node) => node,\n+///         }\n+///     }\n+/// }\n+/// ```\n+/// ->\n+/// ```\n+/// impl<'a> Cursor<'a> {\n+///     fn node(self) -> &SyntaxNode {\n+///         match self {\n+///             Cursor::Replace(node) | Cursor::Before(node) => node,\n+///         }\n+///     }\n+/// }\n+/// ```\n+// TODO : How can we handle renaming any one of multiple anonymous lifetimes?\n+pub(crate) fn change_lifetime_anon_to_named(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let lifetime_token = ctx.find_token_at_offset(SyntaxKind::LIFETIME)?;\n+    let lifetime_arg = ast::LifetimeArg::cast(lifetime_token.parent())?;\n+    if lifetime_arg.syntax().text() != \"'_\" {\n+        return None;\n+    }\n+    let next_token = lifetime_token.next_token()?;\n+    if next_token.kind() != SyntaxKind::R_ANGLE {\n+        // only allow naming the last anonymous lifetime\n+        return None;\n+    }\n+    match lifetime_arg.syntax().ancestors().find_map(ast::ImplDef::cast) {\n+        Some(impl_def) => {\n+            // get the `impl` keyword so we know where to add the lifetime argument\n+            let impl_kw = impl_def.syntax().first_child_or_token()?.into_token()?;\n+            if impl_kw.kind() != SyntaxKind::IMPL_KW {\n+                return None;\n+            }\n+            acc.add(\n+                AssistId(\"change_lifetime_anon_to_named\"),\n+                \"Give anonymous lifetime a name\",\n+                lifetime_arg.syntax().text_range(),\n+                |builder| {\n+                    match impl_def.type_param_list() {\n+                        Some(type_params) => {\n+                            builder.insert(\n+                                (u32::from(type_params.syntax().text_range().end()) - 1).into(),\n+                                \", 'a\",\n+                            );\n+                        },\n+                        None => {\n+                            builder.insert(\n+                                impl_kw.text_range().end(),\n+                                \"<'a>\",\n+                            );\n+                        },\n+                    }\n+                    builder.replace(lifetime_arg.syntax().text_range(), \"'a\");\n+                },\n+            )\n+        }\n+        _ => None,\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    #[test]\n+    fn test_example_case() {\n+        check_assist(\n+            change_lifetime_anon_to_named,\n+            r#\"impl Cursor<'_<|>> {\n+                fn node(self) -> &SyntaxNode {\n+                    match self {\n+                        Cursor::Replace(node) | Cursor::Before(node) => node,\n+                    }\n+                }\n+            }\"#,\n+            r#\"impl<'a> Cursor<'a> {\n+                fn node(self) -> &SyntaxNode {\n+                    match self {\n+                        Cursor::Replace(node) | Cursor::Before(node) => node,\n+                    }\n+                }\n+            }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_example_case_simplified() {\n+        check_assist(\n+            change_lifetime_anon_to_named,\n+            r#\"impl Cursor<'_<|>> {\"#,\n+            r#\"impl<'a> Cursor<'a> {\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_not_applicable() {\n+        check_assist_not_applicable(change_lifetime_anon_to_named, r#\"impl Cursor<'_><|> {\"#);\n+        check_assist_not_applicable(change_lifetime_anon_to_named, r#\"impl Cursor<|><'_> {\"#);\n+        check_assist_not_applicable(change_lifetime_anon_to_named, r#\"impl Cursor<'a<|>> {\"#);\n+    }\n+\n+    #[test]\n+    fn test_with_type_parameter() {\n+        check_assist(\n+            change_lifetime_anon_to_named,\n+            r#\"impl<T> Cursor<T, '_<|>>\"#,\n+            r#\"impl<T, 'a> Cursor<T, 'a>\"#,\n+        );\n+    }\n+}"}, {"sha": "3f8f7ffbfc528710004cf96cb3760d71ec6a6990", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ab79c6f4d972796d3fd9f4b7fae3342a551f5e8/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ab79c6f4d972796d3fd9f4b7fae3342a551f5e8/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=2ab79c6f4d972796d3fd9f4b7fae3342a551f5e8", "patch": "@@ -112,6 +112,7 @@ mod handlers {\n     mod add_turbo_fish;\n     mod apply_demorgan;\n     mod auto_import;\n+    mod change_lifetime_anon_to_named;\n     mod change_return_type_to_result;\n     mod change_visibility;\n     mod early_return;\n@@ -151,6 +152,7 @@ mod handlers {\n             add_turbo_fish::add_turbo_fish,\n             apply_demorgan::apply_demorgan,\n             auto_import::auto_import,\n+            change_lifetime_anon_to_named::change_lifetime_anon_to_named,\n             change_return_type_to_result::change_return_type_to_result,\n             change_visibility::change_visibility,\n             early_return::convert_to_guarded_return,"}, {"sha": "29b64330e90664d58c371fc2f35da16d0fa991bb", "filename": "docs/user/assists.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2ab79c6f4d972796d3fd9f4b7fae3342a551f5e8/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/2ab79c6f4d972796d3fd9f4b7fae3342a551f5e8/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=2ab79c6f4d972796d3fd9f4b7fae3342a551f5e8", "patch": "@@ -259,6 +259,30 @@ fn main() {\n }\n ```\n \n+## `change_lifetime_anon_to_named`\n+\n+Change an anonymous lifetime to a named lifetime.\n+\n+```rust\n+// BEFORE\n+impl Cursor<'_<|>> {\n+    fn node(self) -> &SyntaxNode {\n+        match self {\n+            Cursor::Replace(node) | Cursor::Before(node) => node,\n+        }\n+    }\n+}\n+\n+// AFTER\n+impl<'a> Cursor<'a> {\n+    fn node(self) -> &SyntaxNode {\n+        match self {\n+            Cursor::Replace(node) | Cursor::Before(node) => node,\n+        }\n+    }\n+}\n+```\n+\n ## `change_return_type_to_result`\n \n Change the function's return type to Result."}]}