{"sha": "303b444dbb66019fc916dd350e54f7675aa3007f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwM2I0NDRkYmI2NjAxOWZjOTE2ZGQzNTBlNTRmNzY3NWFhMzAwN2Y=", "commit": {"author": {"name": "Craig Disselkoen", "email": "craigdissel@gmail.com", "date": "2020-05-05T21:07:10Z"}, "committer": {"name": "Craig Disselkoen", "email": "craigdissel@gmail.com", "date": "2020-05-05T23:12:56Z"}, "message": "pull function out into new crate ra_env; use in ra_flycheck as well", "tree": {"sha": "163086a232e07ed91452122da5346383adaca58f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/163086a232e07ed91452122da5346383adaca58f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/303b444dbb66019fc916dd350e54f7675aa3007f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/303b444dbb66019fc916dd350e54f7675aa3007f", "html_url": "https://github.com/rust-lang/rust/commit/303b444dbb66019fc916dd350e54f7675aa3007f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/303b444dbb66019fc916dd350e54f7675aa3007f/comments", "author": {"login": "cdisselkoen", "id": 4458638, "node_id": "MDQ6VXNlcjQ0NTg2Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/4458638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cdisselkoen", "html_url": "https://github.com/cdisselkoen", "followers_url": "https://api.github.com/users/cdisselkoen/followers", "following_url": "https://api.github.com/users/cdisselkoen/following{/other_user}", "gists_url": "https://api.github.com/users/cdisselkoen/gists{/gist_id}", "starred_url": "https://api.github.com/users/cdisselkoen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cdisselkoen/subscriptions", "organizations_url": "https://api.github.com/users/cdisselkoen/orgs", "repos_url": "https://api.github.com/users/cdisselkoen/repos", "events_url": "https://api.github.com/users/cdisselkoen/events{/privacy}", "received_events_url": "https://api.github.com/users/cdisselkoen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cdisselkoen", "id": 4458638, "node_id": "MDQ6VXNlcjQ0NTg2Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/4458638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cdisselkoen", "html_url": "https://github.com/cdisselkoen", "followers_url": "https://api.github.com/users/cdisselkoen/followers", "following_url": "https://api.github.com/users/cdisselkoen/following{/other_user}", "gists_url": "https://api.github.com/users/cdisselkoen/gists{/gist_id}", "starred_url": "https://api.github.com/users/cdisselkoen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cdisselkoen/subscriptions", "organizations_url": "https://api.github.com/users/cdisselkoen/orgs", "repos_url": "https://api.github.com/users/cdisselkoen/repos", "events_url": "https://api.github.com/users/cdisselkoen/events{/privacy}", "received_events_url": "https://api.github.com/users/cdisselkoen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aa1bba107ef434e61c3136120b9478a307d67a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aa1bba107ef434e61c3136120b9478a307d67a9", "html_url": "https://github.com/rust-lang/rust/commit/5aa1bba107ef434e61c3136120b9478a307d67a9"}], "stats": {"total": 47, "additions": 31, "deletions": 16}, "files": [{"sha": "28424b7d4da631260ac10eeab8d447d3f064f6df", "filename": "Cargo.lock", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/303b444dbb66019fc916dd350e54f7675aa3007f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/303b444dbb66019fc916dd350e54f7675aa3007f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=303b444dbb66019fc916dd350e54f7675aa3007f", "patch": "@@ -999,6 +999,14 @@ dependencies = [\n  \"test_utils\",\n ]\n \n+[[package]]\n+name = \"ra_env\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"anyhow\",\n+ \"dirs\",\n+]\n+\n [[package]]\n name = \"ra_flycheck\"\n version = \"0.1.0\"\n@@ -1009,6 +1017,7 @@ dependencies = [\n  \"jod-thread\",\n  \"log\",\n  \"lsp-types\",\n+ \"ra_env\",\n  \"serde_json\",\n ]\n \n@@ -1209,11 +1218,11 @@ version = \"0.1.0\"\n dependencies = [\n  \"anyhow\",\n  \"cargo_metadata\",\n- \"dirs\",\n  \"log\",\n  \"ra_arena\",\n  \"ra_cfg\",\n  \"ra_db\",\n+ \"ra_env\",\n  \"ra_proc_macro\",\n  \"rustc-hash\",\n  \"serde\","}, {"sha": "7fed446a701408dbae2e40c7cf46a9bca35b8a7a", "filename": "crates/ra_env/Cargo.toml", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/303b444dbb66019fc916dd350e54f7675aa3007f/crates%2Fra_env%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/303b444dbb66019fc916dd350e54f7675aa3007f/crates%2Fra_env%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_env%2FCargo.toml?ref=303b444dbb66019fc916dd350e54f7675aa3007f", "patch": "@@ -0,0 +1,9 @@\n+[package]\n+edition = \"2018\"\n+name = \"ra_env\"\n+version = \"0.1.0\"\n+authors = [\"rust-analyzer developers\"]\n+\n+[dependencies]\n+anyhow = \"1.0.26\"\n+dirs = \"2.0\""}, {"sha": "cb9fbf80c98b521aa74db369ac661a24ea53bfc8", "filename": "crates/ra_env/src/lib.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/303b444dbb66019fc916dd350e54f7675aa3007f/crates%2Fra_env%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303b444dbb66019fc916dd350e54f7675aa3007f/crates%2Fra_env%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_env%2Fsrc%2Flib.rs?ref=303b444dbb66019fc916dd350e54f7675aa3007f", "patch": "@@ -13,7 +13,7 @@ pub fn get_path_for_executable(executable_name: impl AsRef<str>) -> Result<Strin\n     // 1) Appropriate environment variable (erroring if this is set but not a usable executable)\n     //      example: for cargo, this checks $CARGO environment variable; for rustc, $RUSTC; etc\n     // 2) `<executable_name>`\n-    //      example: for cargo, this tries just `cargo`, which will succeed if `cargo` in on the $PATH\n+    //      example: for cargo, this tries just `cargo`, which will succeed if `cargo` is on the $PATH\n     // 3) `~/.cargo/bin/<executable_name>`\n     //      example: for cargo, this tries ~/.cargo/bin/cargo\n     //      It seems that this is a reasonable place to try for cargo, rustc, and rustup", "previous_filename": "crates/ra_project_model/src/find_executables.rs"}, {"sha": "d0f7fb2dcf2b74c743776236cca1372bc150f015", "filename": "crates/ra_flycheck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/303b444dbb66019fc916dd350e54f7675aa3007f/crates%2Fra_flycheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/303b444dbb66019fc916dd350e54f7675aa3007f/crates%2Fra_flycheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_flycheck%2FCargo.toml?ref=303b444dbb66019fc916dd350e54f7675aa3007f", "patch": "@@ -14,6 +14,7 @@ log = \"0.4.8\"\n cargo_metadata = \"0.9.1\"\n serde_json = \"1.0.48\"\n jod-thread = \"0.1.1\"\n+ra_env = { path = \"../ra_env\" }\n \n [dev-dependencies]\n insta = \"0.16.0\""}, {"sha": "d8b727b0eadc4a02c80cfd54a67c2abc776a375a", "filename": "crates/ra_flycheck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/303b444dbb66019fc916dd350e54f7675aa3007f/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303b444dbb66019fc916dd350e54f7675aa3007f/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_flycheck%2Fsrc%2Flib.rs?ref=303b444dbb66019fc916dd350e54f7675aa3007f", "patch": "@@ -4,7 +4,6 @@\n mod conv;\n \n use std::{\n-    env,\n     io::{self, BufRead, BufReader},\n     path::PathBuf,\n     process::{Command, Stdio},\n@@ -17,6 +16,7 @@ use lsp_types::{\n     CodeAction, CodeActionOrCommand, Diagnostic, Url, WorkDoneProgress, WorkDoneProgressBegin,\n     WorkDoneProgressEnd, WorkDoneProgressReport,\n };\n+use ra_env::get_path_for_executable;\n \n use crate::conv::{map_rust_diagnostic_to_lsp, MappedRustDiagnostic};\n \n@@ -216,7 +216,7 @@ impl FlycheckThread {\n \n         let mut cmd = match &self.config {\n             FlycheckConfig::CargoCommand { command, all_targets, all_features, extra_args } => {\n-                let mut cmd = Command::new(cargo_binary());\n+                let mut cmd = Command::new(get_path_for_executable(\"cargo\").unwrap());\n                 cmd.arg(command);\n                 cmd.args(&[\"--workspace\", \"--message-format=json\", \"--manifest-path\"]);\n                 cmd.arg(self.workspace_root.join(\"Cargo.toml\"));\n@@ -337,7 +337,3 @@ fn run_cargo(\n \n     Ok(())\n }\n-\n-fn cargo_binary() -> String {\n-    env::var(\"CARGO\").unwrap_or_else(|_| \"cargo\".to_string())\n-}"}, {"sha": "62647846898cc0eae909356ce9ea49231bc85f24", "filename": "crates/ra_project_model/Cargo.toml", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/303b444dbb66019fc916dd350e54f7675aa3007f/crates%2Fra_project_model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/303b444dbb66019fc916dd350e54f7675aa3007f/crates%2Fra_project_model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2FCargo.toml?ref=303b444dbb66019fc916dd350e54f7675aa3007f", "patch": "@@ -14,13 +14,12 @@ rustc-hash = \"1.1.0\"\n cargo_metadata = \"0.9.1\"\n \n ra_arena = { path = \"../ra_arena\" }\n-ra_db = { path = \"../ra_db\" }\n ra_cfg = { path = \"../ra_cfg\" }\n+ra_db = { path = \"../ra_db\" }\n+ra_env = { path = \"../ra_env\" }\n ra_proc_macro =  { path = \"../ra_proc_macro\" }\n \n serde = { version = \"1.0.106\", features = [\"derive\"] }\n serde_json = \"1.0.48\"\n \n anyhow = \"1.0.26\"\n-\n-dirs = \"2.0\""}, {"sha": "4027f020f3b8c682c6f75493f3c8b3fe154107be", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/303b444dbb66019fc916dd350e54f7675aa3007f/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303b444dbb66019fc916dd350e54f7675aa3007f/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=303b444dbb66019fc916dd350e54f7675aa3007f", "patch": "@@ -7,11 +7,11 @@ use std::{\n     process::Command,\n };\n \n-use super::find_executables::get_path_for_executable;\n use anyhow::{Context, Result};\n use cargo_metadata::{BuildScript, CargoOpt, Message, MetadataCommand, PackageId};\n use ra_arena::{Arena, Idx};\n use ra_db::Edition;\n+use ra_env::get_path_for_executable;\n use rustc_hash::FxHashMap;\n \n /// `CargoWorkspace` represents the logical structure of, well, a Cargo"}, {"sha": "e4b86f1e20f327fe75c625ade9c85c0bb1a2e390", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/303b444dbb66019fc916dd350e54f7675aa3007f/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303b444dbb66019fc916dd350e54f7675aa3007f/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=303b444dbb66019fc916dd350e54f7675aa3007f", "patch": "@@ -1,7 +1,6 @@\n //! FIXME: write short doc here\n \n mod cargo_workspace;\n-mod find_executables;\n mod json_project;\n mod sysroot;\n \n@@ -15,6 +14,7 @@ use std::{\n use anyhow::{bail, Context, Result};\n use ra_cfg::CfgOptions;\n use ra_db::{CrateGraph, CrateName, Edition, Env, ExternSource, ExternSourceId, FileId};\n+use ra_env::get_path_for_executable;\n use rustc_hash::FxHashMap;\n use serde_json::from_reader;\n \n@@ -559,7 +559,7 @@ pub fn get_rustc_cfg_options(target: Option<&String>) -> CfgOptions {\n \n     match (|| -> Result<String> {\n         // `cfg(test)` and `cfg(debug_assertion)` are handled outside, so we suppress them here.\n-        let mut cmd = Command::new(\"rustc\");\n+        let mut cmd = Command::new(get_path_for_executable(\"rustc\")?);\n         cmd.args(&[\"--print\", \"cfg\", \"-O\"]);\n         if let Some(target) = target {\n             cmd.args(&[\"--target\", target.as_str()]);"}, {"sha": "516e0472dab8bd499c0691631b9aca6b41f11ae6", "filename": "crates/ra_project_model/src/sysroot.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/303b444dbb66019fc916dd350e54f7675aa3007f/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303b444dbb66019fc916dd350e54f7675aa3007f/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs?ref=303b444dbb66019fc916dd350e54f7675aa3007f", "patch": "@@ -1,6 +1,5 @@\n //! FIXME: write short doc here\n \n-use super::find_executables::get_path_for_executable;\n use anyhow::{bail, Context, Result};\n use std::{\n     env, ops,\n@@ -9,6 +8,7 @@ use std::{\n };\n \n use ra_arena::{Arena, Idx};\n+use ra_env::get_path_for_executable;\n \n #[derive(Default, Debug, Clone)]\n pub struct Sysroot {\n@@ -122,7 +122,8 @@ fn get_or_install_rust_src(cargo_toml: &Path) -> Result<PathBuf> {\n     let src_path = sysroot_path.join(\"lib/rustlib/src/rust/src\");\n \n     if !src_path.exists() {\n-        run_command_in_cargo_dir(cargo_toml, \"rustup\", &[\"component\", \"add\", \"rust-src\"])?;\n+        let rustup = get_path_for_executable(\"rustup\")?;\n+        run_command_in_cargo_dir(cargo_toml, &rustup, &[\"component\", \"add\", \"rust-src\"])?;\n     }\n     if !src_path.exists() {\n         bail!("}]}