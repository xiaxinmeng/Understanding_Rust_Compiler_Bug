{"sha": "f75f07019bd754e4fcc40c6144cc83911bbf21c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NWYwNzAxOWJkNzU0ZTRmY2M0MGM2MTQ0Y2M4MzkxMWJiZjIxYzg=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-27T10:22:10Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-27T16:30:10Z"}, "message": "Group import data in a struct", "tree": {"sha": "be61aa6b64ebd854037d551c9aaddcddfd0d7041", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be61aa6b64ebd854037d551c9aaddcddfd0d7041"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f75f07019bd754e4fcc40c6144cc83911bbf21c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f75f07019bd754e4fcc40c6144cc83911bbf21c8", "html_url": "https://github.com/rust-lang/rust/commit/f75f07019bd754e4fcc40c6144cc83911bbf21c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f75f07019bd754e4fcc40c6144cc83911bbf21c8/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4ae3650d855554575f866264a3c8197dfd12835", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4ae3650d855554575f866264a3c8197dfd12835", "html_url": "https://github.com/rust-lang/rust/commit/f4ae3650d855554575f866264a3c8197dfd12835"}], "stats": {"total": 101, "additions": 49, "deletions": 52}, "files": [{"sha": "3bfee1b3f9625eee88d0ffc7a5c6d05a1afb6828", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f75f07019bd754e4fcc40c6144cc83911bbf21c8/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f75f07019bd754e4fcc40c6144cc83911bbf21c8/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=f75f07019bd754e4fcc40c6144cc83911bbf21c8", "patch": "@@ -204,7 +204,7 @@ impl CompletionItem {\n             trigger_call_info: None,\n             score: None,\n             ref_match: None,\n-            import_data: None,\n+            import_to_add: None,\n         }\n     }\n \n@@ -258,13 +258,21 @@ impl CompletionItem {\n     }\n }\n \n+/// An extra import to add after the completion is applied.\n+#[derive(Clone)]\n+pub(crate) struct ImportToAdd {\n+    pub(crate) import_path: ModPath,\n+    pub(crate) import_scope: ImportScope,\n+    pub(crate) merge_behaviour: Option<MergeBehaviour>,\n+}\n+\n /// A helper to make `CompletionItem`s.\n #[must_use]\n #[derive(Clone)]\n pub(crate) struct Builder {\n     source_range: TextRange,\n     completion_kind: CompletionKind,\n-    import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n+    import_to_add: Option<ImportToAdd>,\n     label: String,\n     insert_text: Option<String>,\n     insert_text_format: InsertTextFormat,\n@@ -288,9 +296,9 @@ impl Builder {\n         let mut insert_text = self.insert_text;\n         let mut text_edits = TextEdit::builder();\n \n-        if let Some((import_path, import_scope, merge_behaviour)) = self.import_data {\n-            let import = mod_path_to_ast(&import_path);\n-            let mut import_path_without_last_segment = import_path;\n+        if let Some(import_data) = self.import_to_add {\n+            let import = mod_path_to_ast(&import_data.import_path);\n+            let mut import_path_without_last_segment = import_data.import_path;\n             let _ = import_path_without_last_segment.segments.pop();\n \n             if !import_path_without_last_segment.segments.is_empty() {\n@@ -303,7 +311,11 @@ impl Builder {\n                 label = format!(\"{}::{}\", import_path_without_last_segment, label);\n             }\n \n-            let rewriter = insert_use::insert_use(&import_scope, import, merge_behaviour);\n+            let rewriter = insert_use::insert_use(\n+                &import_data.import_scope,\n+                import,\n+                import_data.merge_behaviour,\n+            );\n             if let Some(old_ast) = rewriter.rewrite_root() {\n                 algo::diff(&old_ast, &rewriter.rewrite(&old_ast)).into_text_edit(&mut text_edits);\n             }\n@@ -395,11 +407,8 @@ impl Builder {\n         self.trigger_call_info = Some(true);\n         self\n     }\n-    pub(crate) fn import_data(\n-        mut self,\n-        import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n-    ) -> Builder {\n-        self.import_data = import_data;\n+    pub(crate) fn add_import(mut self, import_to_add: Option<ImportToAdd>) -> Builder {\n+        self.import_to_add = import_to_add;\n         self\n     }\n     pub(crate) fn set_ref_match("}, {"sha": "e84aef0e4a9a46ccaf3925dafd12d4ef8f271785", "filename": "crates/completion/src/render.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f75f07019bd754e4fcc40c6144cc83911bbf21c8/crates%2Fcompletion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f75f07019bd754e4fcc40c6144cc83911bbf21c8/crates%2Fcompletion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender.rs?ref=f75f07019bd754e4fcc40c6144cc83911bbf21c8", "patch": "@@ -16,8 +16,8 @@ use syntax::TextRange;\n use test_utils::mark;\n \n use crate::{\n-    config::SnippetCap, CompletionContext, CompletionItem, CompletionItemKind, CompletionKind,\n-    CompletionScore,\n+    config::SnippetCap, item::ImportToAdd, CompletionContext, CompletionItem, CompletionItemKind,\n+    CompletionKind, CompletionScore,\n };\n \n use crate::render::{enum_variant::render_enum_variant, function::render_fn, macro_::render_macro};\n@@ -48,15 +48,15 @@ pub(crate) fn render_resolution<'a>(\n \n pub(crate) fn render_resolution_with_import<'a>(\n     ctx: RenderContext<'a>,\n-    import: ModPath,\n+    import_path: ModPath,\n     import_scope: ImportScope,\n     merge_behaviour: Option<MergeBehaviour>,\n     resolution: &ScopeDef,\n ) -> Option<CompletionItem> {\n-    let local_name = import.segments.last()?.to_string();\n+    let local_name = import_path.segments.last()?.to_string();\n     Render::new(ctx).render_resolution(\n         local_name,\n-        Some((import, import_scope, merge_behaviour)),\n+        Some(ImportToAdd { import_path, import_scope, merge_behaviour }),\n         resolution,\n     )\n }\n@@ -147,7 +147,7 @@ impl<'a> Render<'a> {\n     fn render_resolution(\n         self,\n         local_name: String,\n-        import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n+        import_to_add: Option<ImportToAdd>,\n         resolution: &ScopeDef,\n     ) -> Option<CompletionItem> {\n         let _p = profile::span(\"render_resolution\");\n@@ -160,15 +160,16 @@ impl<'a> Render<'a> {\n \n         let kind = match resolution {\n             ScopeDef::ModuleDef(Function(func)) => {\n-                let item = render_fn(self.ctx, import_data, Some(local_name), *func);\n+                let item = render_fn(self.ctx, import_to_add, Some(local_name), *func);\n                 return Some(item);\n             }\n             ScopeDef::ModuleDef(EnumVariant(var)) => {\n-                let item = render_enum_variant(self.ctx, import_data, Some(local_name), *var, None);\n+                let item =\n+                    render_enum_variant(self.ctx, import_to_add, Some(local_name), *var, None);\n                 return Some(item);\n             }\n             ScopeDef::MacroDef(mac) => {\n-                let item = render_macro(self.ctx, import_data, local_name, *mac);\n+                let item = render_macro(self.ctx, import_to_add, local_name, *mac);\n                 return item;\n             }\n \n@@ -193,7 +194,7 @@ impl<'a> Render<'a> {\n                     local_name,\n                 )\n                 .kind(CompletionItemKind::UnresolvedReference)\n-                .import_data(import_data)\n+                .add_import(import_to_add)\n                 .build();\n                 return Some(item);\n             }\n@@ -248,7 +249,7 @@ impl<'a> Render<'a> {\n \n         let item = item\n             .kind(kind)\n-            .import_data(import_data)\n+            .add_import(import_to_add)\n             .set_documentation(docs)\n             .set_ref_match(ref_match)\n             .build();"}, {"sha": "f4bd02f258155c7359ab492121bd7e8f6f126b46", "filename": "crates/completion/src/render/enum_variant.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f75f07019bd754e4fcc40c6144cc83911bbf21c8/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f75f07019bd754e4fcc40c6144cc83911bbf21c8/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs?ref=f75f07019bd754e4fcc40c6144cc83911bbf21c8", "patch": "@@ -1,24 +1,23 @@\n //! Renderer for `enum` variants.\n \n use hir::{HasAttrs, HirDisplay, ModPath, StructKind};\n-use ide_helpers::insert_use::{ImportScope, MergeBehaviour};\n use itertools::Itertools;\n use test_utils::mark;\n \n use crate::{\n-    item::{CompletionItem, CompletionItemKind, CompletionKind},\n+    item::{CompletionItem, CompletionItemKind, CompletionKind, ImportToAdd},\n     render::{builder_ext::Params, RenderContext},\n };\n \n pub(crate) fn render_enum_variant<'a>(\n     ctx: RenderContext<'a>,\n-    import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n+    import_to_add: Option<ImportToAdd>,\n     local_name: Option<String>,\n     variant: hir::EnumVariant,\n     path: Option<ModPath>,\n ) -> CompletionItem {\n     let _p = profile::span(\"render_enum_variant\");\n-    EnumVariantRender::new(ctx, local_name, variant, path).render(import_data)\n+    EnumVariantRender::new(ctx, local_name, variant, path).render(import_to_add)\n }\n \n #[derive(Debug)]\n@@ -63,10 +62,7 @@ impl<'a> EnumVariantRender<'a> {\n         }\n     }\n \n-    fn render(\n-        self,\n-        import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n-    ) -> CompletionItem {\n+    fn render(self, import_to_add: Option<ImportToAdd>) -> CompletionItem {\n         let mut builder = CompletionItem::new(\n             CompletionKind::Reference,\n             self.ctx.source_range(),\n@@ -75,7 +71,7 @@ impl<'a> EnumVariantRender<'a> {\n         .kind(CompletionItemKind::EnumVariant)\n         .set_documentation(self.variant.docs(self.ctx.db()))\n         .set_deprecated(self.ctx.is_deprecated(self.variant))\n-        .import_data(import_data)\n+        .add_import(import_to_add)\n         .detail(self.detail());\n \n         if self.variant_kind == StructKind::Tuple {"}, {"sha": "542383d7e77097eaee53ec3b052c57fde4bc675e", "filename": "crates/completion/src/render/function.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f75f07019bd754e4fcc40c6144cc83911bbf21c8/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f75f07019bd754e4fcc40c6144cc83911bbf21c8/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs?ref=f75f07019bd754e4fcc40c6144cc83911bbf21c8", "patch": "@@ -1,22 +1,21 @@\n //! Renderer for function calls.\n \n-use hir::{HasSource, ModPath, Type};\n-use ide_helpers::insert_use::{ImportScope, MergeBehaviour};\n+use hir::{HasSource, Type};\n use syntax::{ast::Fn, display::function_declaration};\n \n use crate::{\n-    item::{CompletionItem, CompletionItemKind, CompletionKind},\n+    item::{CompletionItem, CompletionItemKind, CompletionKind, ImportToAdd},\n     render::{builder_ext::Params, RenderContext},\n };\n \n pub(crate) fn render_fn<'a>(\n     ctx: RenderContext<'a>,\n-    import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n+    import_to_add: Option<ImportToAdd>,\n     local_name: Option<String>,\n     fn_: hir::Function,\n ) -> CompletionItem {\n     let _p = profile::span(\"render_fn\");\n-    FunctionRender::new(ctx, local_name, fn_).render(import_data)\n+    FunctionRender::new(ctx, local_name, fn_).render(import_to_add)\n }\n \n #[derive(Debug)]\n@@ -39,18 +38,15 @@ impl<'a> FunctionRender<'a> {\n         FunctionRender { ctx, name, fn_, ast_node }\n     }\n \n-    fn render(\n-        self,\n-        import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n-    ) -> CompletionItem {\n+    fn render(self, import_to_add: Option<ImportToAdd>) -> CompletionItem {\n         let params = self.params();\n         CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), self.name.clone())\n             .kind(self.kind())\n             .set_documentation(self.ctx.docs(self.fn_))\n             .set_deprecated(self.ctx.is_deprecated(self.fn_))\n             .detail(self.detail())\n             .add_call_parens(self.ctx.completion, self.name, params)\n-            .import_data(import_data)\n+            .add_import(import_to_add)\n             .build()\n     }\n "}, {"sha": "b4ab32c6e43ce35d8516874f1c2c9945c8173866", "filename": "crates/completion/src/render/macro_.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f75f07019bd754e4fcc40c6144cc83911bbf21c8/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f75f07019bd754e4fcc40c6144cc83911bbf21c8/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs?ref=f75f07019bd754e4fcc40c6144cc83911bbf21c8", "patch": "@@ -1,24 +1,22 @@\n //! Renderer for macro invocations.\n \n-use hir::{Documentation, HasSource, ModPath};\n-use ide_helpers::insert_use::{ImportScope, MergeBehaviour};\n+use hir::{Documentation, HasSource};\n use syntax::display::macro_label;\n use test_utils::mark;\n \n use crate::{\n-    item::{CompletionItem, CompletionItemKind, CompletionKind},\n+    item::{CompletionItem, CompletionItemKind, CompletionKind, ImportToAdd},\n     render::RenderContext,\n };\n \n pub(crate) fn render_macro<'a>(\n     ctx: RenderContext<'a>,\n-    // TODO kb add some object instead of a tuple?\n-    import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n+    import_to_add: Option<ImportToAdd>,\n     name: String,\n     macro_: hir::MacroDef,\n ) -> Option<CompletionItem> {\n     let _p = profile::span(\"render_macro\");\n-    MacroRender::new(ctx, name, macro_).render(import_data)\n+    MacroRender::new(ctx, name, macro_).render(import_to_add)\n }\n \n #[derive(Debug)]\n@@ -40,10 +38,7 @@ impl<'a> MacroRender<'a> {\n         MacroRender { ctx, name, macro_, docs, bra, ket }\n     }\n \n-    fn render(\n-        &self,\n-        import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n-    ) -> Option<CompletionItem> {\n+    fn render(&self, import_to_add: Option<ImportToAdd>) -> Option<CompletionItem> {\n         // FIXME: Currently proc-macro do not have ast-node,\n         // such that it does not have source\n         if self.macro_.is_proc_macro() {\n@@ -55,7 +50,7 @@ impl<'a> MacroRender<'a> {\n                 .kind(CompletionItemKind::Macro)\n                 .set_documentation(self.docs.clone())\n                 .set_deprecated(self.ctx.is_deprecated(self.macro_))\n-                .import_data(import_data)\n+                .add_import(import_to_add)\n                 .detail(self.detail());\n \n         let needs_bang = self.needs_bang();"}]}