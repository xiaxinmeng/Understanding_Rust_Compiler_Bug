{"sha": "9d7014e55c06a184b02ccf724497c4c72d4d2041", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNzAxNGU1NWMwNmExODRiMDJjY2Y3MjQ0OTdjNGM3MmQ0ZDIwNDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-10T02:37:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-10T02:37:02Z"}, "message": "auto merge of #4861 : sethpink/rust/incoming, r=catamorphism\n\nFix for issue #4830.", "tree": {"sha": "d66677fc4a326dad876afd5ef2941c1bc8ac9df7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d66677fc4a326dad876afd5ef2941c1bc8ac9df7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d7014e55c06a184b02ccf724497c4c72d4d2041", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d7014e55c06a184b02ccf724497c4c72d4d2041", "html_url": "https://github.com/rust-lang/rust/commit/9d7014e55c06a184b02ccf724497c4c72d4d2041", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d7014e55c06a184b02ccf724497c4c72d4d2041/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fc1f41d0d235d3387ebd0a1fc5a6838b29918c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fc1f41d0d235d3387ebd0a1fc5a6838b29918c8", "html_url": "https://github.com/rust-lang/rust/commit/2fc1f41d0d235d3387ebd0a1fc5a6838b29918c8"}, {"sha": "8ebdb3d0abefc5359e4fb986a0ecb17733f0f74a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ebdb3d0abefc5359e4fb986a0ecb17733f0f74a", "html_url": "https://github.com/rust-lang/rust/commit/8ebdb3d0abefc5359e4fb986a0ecb17733f0f74a"}], "stats": {"total": 100, "additions": 40, "deletions": 60}, "files": [{"sha": "1b4493b7ec9af46e1dbe8bb7bb4313f8c3d2f29c", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d7014e55c06a184b02ccf724497c4c72d4d2041/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7014e55c06a184b02ccf724497c4c72d4d2041/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=9d7014e55c06a184b02ccf724497c4c72d4d2041", "patch": "@@ -39,7 +39,6 @@ pub enum ObsoleteSyntax {\n     ObsoleteFieldTerminator,\n     ObsoleteStructCtor,\n     ObsoleteWith,\n-    ObsoleteClassMethod,\n     ObsoleteClassTraits,\n     ObsoletePrivSection,\n     ObsoleteModeInFnType,\n@@ -85,10 +84,6 @@ pub impl Parser {\n                 \"record update is done with `..`, e.g. \\\n                  `MyStruct { foo: bar, .. baz }`\"\n             ),\n-            ObsoleteClassMethod => (\n-                \"class method\",\n-                \"methods should be defined inside impls\"\n-            ),\n             ObsoleteClassTraits => (\n                 \"class traits\",\n                 \"implemented traits are specified on the impl, as in \\"}, {"sha": "6382413b08169107921f028cfe946262523ea5e9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 24, "deletions": 47, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/9d7014e55c06a184b02ccf724497c4c72d4d2041/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7014e55c06a184b02ccf724497c4c72d4d2041/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9d7014e55c06a184b02ccf724497c4c72d4d2041", "patch": "@@ -72,7 +72,7 @@ use parse::lexer::TokenAndSpan;\n use parse::obsolete::{ObsoleteClassTraits, ObsoleteModeInFnType};\n use parse::obsolete::{ObsoleteLet, ObsoleteFieldTerminator};\n use parse::obsolete::{ObsoleteMoveInit, ObsoleteBinaryMove};\n-use parse::obsolete::{ObsoleteStructCtor, ObsoleteWith, ObsoleteClassMethod};\n+use parse::obsolete::{ObsoleteStructCtor, ObsoleteWith};\n use parse::obsolete::{ObsoleteSyntax, ObsoleteLowerCaseKindBounds};\n use parse::obsolete::{ObsoleteUnsafeBlock};\n use parse::prec::{as_prec, token_to_binop};\n@@ -3002,52 +3002,29 @@ pub impl Parser {\n     }\n \n     fn parse_single_class_item(vis: visibility) -> @struct_field {\n-        let obsolete_let = self.eat_obsolete_ident(\"let\");\n-        if obsolete_let { self.obsolete(copy self.last_span, ObsoleteLet) }\n-\n-        let parse_obsolete_method =\n-            !((obsolete_let || self.is_keyword(~\"mut\") ||\n-               !self.is_any_keyword(copy self.token))\n-              && !self.token_is_pound_or_doc_comment(copy self.token));\n+        if self.eat_obsolete_ident(\"let\") {\n+            self.obsolete(copy self.last_span, ObsoleteLet);\n+        }\n \n-        if !parse_obsolete_method {\n-            let a_var = self.parse_instance_var(vis);\n-            match self.token {\n-              token::SEMI => {\n-                self.obsolete(copy self.span, ObsoleteFieldTerminator);\n-                self.bump();\n-              }\n-              token::COMMA => {\n-                self.bump();\n-              }\n-              token::RBRACE => {}\n-              _ => {\n-                self.span_fatal(copy self.span,\n-                                fmt!(\"expected `;`, `,`, or '}' but \\\n-                                      found `%s`\",\n-                                     token_to_str(self.reader,\n-                                                  self.token)));\n-              }\n-            }\n-            a_var\n-        } else {\n-            self.obsolete(copy self.span, ObsoleteClassMethod);\n-            self.parse_method();\n-            // bogus value\n-            @spanned(\n-                self.span.lo,\n-                self.span.hi,\n-                ast::struct_field_ {\n-                    kind: unnamed_field,\n-                    id: self.get_id(),\n-                    ty: @ast::Ty {\n-                        id: self.get_id(),\n-                        node: ty_nil,\n-                        span: copy self.span,\n-                    }\n-                }\n-            )\n+        let a_var = self.parse_instance_var(vis);\n+        match self.token {\n+          token::SEMI => {\n+            self.obsolete(copy self.span, ObsoleteFieldTerminator);\n+            self.bump();\n+          }\n+          token::COMMA => {\n+            self.bump();\n+          }\n+          token::RBRACE => {}\n+          _ => {\n+            self.span_fatal(copy self.span,\n+                            fmt!(\"expected `;`, `,`, or '}' but \\\n+                                  found `%s`\",\n+                                 token_to_str(self.reader,\n+                                              self.token)));\n+          }\n         }\n+        a_var\n     }\n \n     fn parse_dtor(attrs: ~[attribute]) -> class_contents {\n@@ -3062,6 +3039,8 @@ pub impl Parser {\n             return members(~[]);\n         }\n \n+        let attrs = self.parse_outer_attributes();\n+\n         if self.eat_keyword(~\"priv\") {\n             return members(~[self.parse_single_class_item(private)])\n         }\n@@ -3070,8 +3049,6 @@ pub impl Parser {\n            return members(~[self.parse_single_class_item(public)]);\n         }\n \n-        let attrs = self.parse_outer_attributes();\n-\n         if self.try_parse_obsolete_struct_ctor() {\n             return members(~[]);\n         }"}, {"sha": "d92b545d1701f1ae5c92a03316bfb63ae4576a7a", "filename": "src/test/compile-fail/obsolete-syntax.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d7014e55c06a184b02ccf724497c4c72d4d2041/src%2Ftest%2Fcompile-fail%2Fobsolete-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7014e55c06a184b02ccf724497c4c72d4d2041/src%2Ftest%2Fcompile-fail%2Fobsolete-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobsolete-syntax.rs?ref=9d7014e55c06a184b02ccf724497c4c72d4d2041", "patch": "@@ -29,14 +29,6 @@ struct s {\n     //~^ ERROR obsolete syntax: struct constructor\n }\n \n-struct ss {\n-    fn foo() { }\n-    //~^ ERROR obsolete syntax: class method\n-    #[whatever]\n-    fn foo() { }\n-    //~^ ERROR obsolete syntax: class method\n-}\n-\n struct q : r {\n     //~^ ERROR obsolete syntax: class traits\n }"}, {"sha": "e8147a2ce823799c884bd729a9f69f1371bb32f5", "filename": "src/test/run-pass/issue-4830.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9d7014e55c06a184b02ccf724497c4c72d4d2041/src%2Ftest%2Frun-pass%2Fissue-4830.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7014e55c06a184b02ccf724497c4c72d4d2041/src%2Ftest%2Frun-pass%2Fissue-4830.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4830.rs?ref=9d7014e55c06a184b02ccf724497c4c72d4d2041", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct Scheduler {\n+    /// The event loop used to drive the scheduler and perform I/O\n+    priv event_loop: ~int\n+}\n+\n+pub fn main() { }"}]}