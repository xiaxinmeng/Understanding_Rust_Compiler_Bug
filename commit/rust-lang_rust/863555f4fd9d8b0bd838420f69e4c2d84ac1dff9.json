{"sha": "863555f4fd9d8b0bd838420f69e4c2d84ac1dff9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MzU1NWY0ZmQ5ZDhiMGJkODM4NDIwZjY5ZTRjMmQ4NGFjMWRmZjk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-30T20:28:30Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-01T03:31:19Z"}, "message": "rustdoc: Update the man page\n\nCloses #9622", "tree": {"sha": "6c6b15d41d5e1ee708abdfae8485bf680280a348", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c6b15d41d5e1ee708abdfae8485bf680280a348"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/863555f4fd9d8b0bd838420f69e4c2d84ac1dff9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/863555f4fd9d8b0bd838420f69e4c2d84ac1dff9", "html_url": "https://github.com/rust-lang/rust/commit/863555f4fd9d8b0bd838420f69e4c2d84ac1dff9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/863555f4fd9d8b0bd838420f69e4c2d84ac1dff9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e523f99fb9e63d3079404abc3df9d4a208b17a8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e523f99fb9e63d3079404abc3df9d4a208b17a8a", "html_url": "https://github.com/rust-lang/rust/commit/e523f99fb9e63d3079404abc3df9d4a208b17a8a"}], "stats": {"total": 84, "additions": 60, "deletions": 24}, "files": [{"sha": "c7cdb8328879ced7de87e6a024c250d39d6bdc2b", "filename": "man/rustdoc.1", "status": "modified", "additions": 56, "deletions": 21, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/863555f4fd9d8b0bd838420f69e4c2d84ac1dff9/man%2Frustdoc.1", "raw_url": "https://github.com/rust-lang/rust/raw/863555f4fd9d8b0bd838420f69e4c2d84ac1dff9/man%2Frustdoc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustdoc.1?ref=863555f4fd9d8b0bd838420f69e4c2d84ac1dff9", "patch": "@@ -3,49 +3,84 @@\n rustdoc \\- generate documentation from Rust source code\n .SH SYNOPSIS\n .B rustdoc\n-[\\fIOPTIONS\\fR] \\fICRATEFILE\\fR\n+[\\fIOPTIONS\\fR] \\fIINPUT\\fR\n \n .SH DESCRIPTION\n This tool generates API reference documentation by extracting comments from\n-source code written in the Rust language, available at <\\fBhttps://www.rust-\n-lang.org\\fR>. It provides several output formats for the generated\n-documentation.\n+source code written in the Rust language, available at\n+<\\fBhttps://www.rust-lang.org\\fR>. It accepts several input formats and provides\n+several output formats for the generated documentation.\n \n-.SH COMMANDS\n+.SH OPTIONS\n \n .TP\n---output-dir <val>\n-Put documents here (default: .)\n+-r --input-format <val>\n+html or json (default: inferred)\n .TP\n---output-format <val>\n-markdown or html (default: html)\n+-w --output-format <val>\n+html or json (default: html)\n .TP\n---output-style <val>\n-doc-per-crate or doc-per-mod (default: doc-per-mod)\n+-o --output <val>\n+where to place the output (default: doc/ for html, doc.json for json)\n .TP\n---pandoc-cmd <val>\n-Command for running pandoc\n+--passes <val>\n+space-separated list of passes to run (default: '')\n+.TP\n+--no-defaults\n+don't run the default passes\n+.TP\n+--plugins <val>\n+space-separated list of plugins to run (default: '')\n+.TP\n+--plugin-path <val>\n+directory to load plugins from (default: /tmp/rustdoc_ng/plugins)\n+.TP\n+-L --library-path <val>\n+directory to add to crate search path\n .TP\n -h, --help\n Print help\n \n .SH \"OUTPUT FORMATS\"\n \n-The rustdoc tool can generate documentation in either the Markdown\n-or HTML formats. It requires the pandoc tool\n-<\\fBhttp://johnmacfarlane.net/pandoc/\\fR> for conversion features.\n+The rustdoc tool can generate output in either an HTML or JSON format.\n+\n+If using an HTML format, then the specified output destination will be the root\n+directory of an HTML structure for all the documentation. Pages will be placed\n+into this directory, and source files will also possibly be rendered into it as\n+well.\n+\n+If using a JSON format, then the specified output destination will have the\n+rustdoc output serialized as JSON into it. This output format exists to\n+pre-compile documentation for crates, and for usage in non-rustdoc tools. The\n+JSON output is the following hash:\n+\n+    {\n+        \"schema\": VERSION,\n+        \"crate\": ...,\n+        \"plugins\": ...,\n+    }\n+\n+The schema version indicates what the structure of crate/plugins will look\n+like. Within a schema version the structure will remain the same. The `crate`\n+field will contain all relevant documentation for the source being documented,\n+and the `plugins` field will contain the output of the plugins run over the\n+crate.\n \n .SH \"EXAMPLES\"\n \n To generate documentation for the source in the current directory:\n     $ rustdoc hello.rs\n \n-To build documentation into a subdirectory named 'doc' in the Markdown\n-format:\n-    $ rustdoc --output-dir doc --output-format markdown hello.rs\n+List all available passes that rustdoc has, along with default passes:\n+    $ rustdoc --passes list\n+\n+To precompile the documentation for a crate, and then use it to render html at\n+a later date:\n+    $ rustdoc -w json hello.rs\n+    $ rustdoc doc.json\n \n-The generated HTML can be viewed with any standard web browser, while\n-the Markdown version is well-suited for conversion into other formats.\n+The generated HTML can be viewed with any standard web browser.\n \n .SH \"SEE ALSO\"\n "}, {"sha": "4c7c99d639469dd1f11261615d82d6efd523a946", "filename": "src/librustdoc/rustdoc.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/863555f4fd9d8b0bd838420f69e4c2d84ac1dff9/src%2Flibrustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/863555f4fd9d8b0bd838420f69e4c2d84ac1dff9/src%2Flibrustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rs?ref=863555f4fd9d8b0bd838420f69e4c2d84ac1dff9", "patch": "@@ -95,7 +95,7 @@ pub fn opts() -> ~[groups::OptGroup] {\n                  \"PASSES\"),\n         optmulti(\"\", \"plugins\", \"space separated list of plugins to also load\",\n                  \"PLUGINS\"),\n-        optflag(\"\", \"nodefaults\", \"don't run the default passes\"),\n+        optflag(\"\", \"no-defaults\", \"don't run the default passes\"),\n     ]\n }\n \n@@ -181,7 +181,7 @@ fn acquire_input(matches: &getopts::Matches) -> Result<Output, ~str> {\n ///\n /// This form of input will run all of the plug/cleaning passes\n fn rust_input(cratefile: &str, matches: &getopts::Matches) -> Output {\n-    let mut default_passes = !matches.opt_present(\"nodefaults\");\n+    let mut default_passes = !matches.opt_present(\"no-defaults\");\n     let mut passes = matches.opt_strs(\"passes\");\n     let mut plugins = matches.opt_strs(\"plugins\");\n \n@@ -227,7 +227,8 @@ fn rust_input(cratefile: &str, matches: &getopts::Matches) -> Output {\n     }\n \n     // Load all plugins/passes into a PluginManager\n-    let mut pm = plugins::PluginManager::new(Path(\"/tmp/rustdoc_ng/plugins\"));\n+    let path = matches.opt_str(\"plugin-path\").unwrap_or(~\"/tmp/rustdoc_ng/plugins\");\n+    let mut pm = plugins::PluginManager::new(Path(path));\n     for pass in passes.iter() {\n         let plugin = match PASSES.iter().position(|&(p, _, _)| p == *pass) {\n             Some(i) => PASSES[i].n1(),"}]}