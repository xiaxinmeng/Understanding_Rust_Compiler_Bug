{"sha": "28af53367aa98ff65a452197e1e426e864827408", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4YWY1MzM2N2FhOThmZjY1YTQ1MjE5N2UxZTQyNmU4NjQ4Mjc0MDg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T18:21:15Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T18:24:43Z"}, "message": "lowering: move scope & capture_clause stuff  -> expr.rs", "tree": {"sha": "67721086b3cf6f3fee7ad41db6e55fcdc596d2ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67721086b3cf6f3fee7ad41db6e55fcdc596d2ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28af53367aa98ff65a452197e1e426e864827408", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28af53367aa98ff65a452197e1e426e864827408", "html_url": "https://github.com/rust-lang/rust/commit/28af53367aa98ff65a452197e1e426e864827408", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28af53367aa98ff65a452197e1e426e864827408/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ab73450f820f258205aff069be465a2f72c3c55", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ab73450f820f258205aff069be465a2f72c3c55", "html_url": "https://github.com/rust-lang/rust/commit/5ab73450f820f258205aff069be465a2f72c3c55"}], "stats": {"total": 132, "additions": 66, "deletions": 66}, "files": [{"sha": "78941a6545f27a010491b780bfbc0bd08b0742f2", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/28af53367aa98ff65a452197e1e426e864827408/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28af53367aa98ff65a452197e1e426e864827408/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=28af53367aa98ff65a452197e1e426e864827408", "patch": "@@ -971,64 +971,6 @@ impl<'a> LoweringContext<'a> {\n         (lowered_generics, res)\n     }\n \n-    fn with_catch_scope<T, F>(&mut self, catch_id: NodeId, f: F) -> T\n-    where\n-        F: FnOnce(&mut LoweringContext<'_>) -> T,\n-    {\n-        let len = self.catch_scopes.len();\n-        self.catch_scopes.push(catch_id);\n-\n-        let result = f(self);\n-        assert_eq!(\n-            len + 1,\n-            self.catch_scopes.len(),\n-            \"catch scopes should be added and removed in stack order\"\n-        );\n-\n-        self.catch_scopes.pop().unwrap();\n-\n-        result\n-    }\n-\n-    fn with_loop_scope<T, F>(&mut self, loop_id: NodeId, f: F) -> T\n-    where\n-        F: FnOnce(&mut LoweringContext<'_>) -> T,\n-    {\n-        // We're no longer in the base loop's condition; we're in another loop.\n-        let was_in_loop_condition = self.is_in_loop_condition;\n-        self.is_in_loop_condition = false;\n-\n-        let len = self.loop_scopes.len();\n-        self.loop_scopes.push(loop_id);\n-\n-        let result = f(self);\n-        assert_eq!(\n-            len + 1,\n-            self.loop_scopes.len(),\n-            \"loop scopes should be added and removed in stack order\"\n-        );\n-\n-        self.loop_scopes.pop().unwrap();\n-\n-        self.is_in_loop_condition = was_in_loop_condition;\n-\n-        result\n-    }\n-\n-    fn with_loop_condition_scope<T, F>(&mut self, f: F) -> T\n-    where\n-        F: FnOnce(&mut LoweringContext<'_>) -> T,\n-    {\n-        let was_in_loop_condition = self.is_in_loop_condition;\n-        self.is_in_loop_condition = true;\n-\n-        let result = f(self);\n-\n-        self.is_in_loop_condition = was_in_loop_condition;\n-\n-        result\n-    }\n-\n     fn with_dyn_type_scope<T, F>(&mut self, in_scope: bool, f: F) -> T\n     where\n         F: FnOnce(&mut LoweringContext<'_>) -> T,\n@@ -3005,13 +2947,6 @@ impl<'a> LoweringContext<'a> {\n         }]\n     }\n \n-    fn lower_capture_clause(&mut self, c: CaptureBy) -> hir::CaptureClause {\n-        match c {\n-            CaptureBy::Value => hir::CaptureByValue,\n-            CaptureBy::Ref => hir::CaptureByRef,\n-        }\n-    }\n-\n     fn lower_block_check_mode(&mut self, b: &BlockCheckMode) -> hir::BlockCheckMode {\n         match *b {\n             BlockCheckMode::Default => hir::DefaultBlock,"}, {"sha": "d273006fbe07eddb21cfea12a94e7e80bd365995", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/28af53367aa98ff65a452197e1e426e864827408/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28af53367aa98ff65a452197e1e426e864827408/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=28af53367aa98ff65a452197e1e426e864827408", "patch": "@@ -700,9 +700,16 @@ impl LoweringContext<'_> {\n         })\n     }\n \n+    fn lower_capture_clause(&mut self, c: CaptureBy) -> hir::CaptureClause {\n+        match c {\n+            CaptureBy::Value => hir::CaptureByValue,\n+            CaptureBy::Ref => hir::CaptureByRef,\n+        }\n+    }\n+\n     fn generator_movability_for_fn(\n         &mut self,\n-        decl: &ast::FnDecl,\n+        decl: &FnDecl,\n         fn_decl_span: Span,\n         generator_kind: Option<hir::GeneratorKind>,\n         movability: Movability,\n@@ -898,6 +905,64 @@ impl LoweringContext<'_> {\n         }\n     }\n \n+    fn with_catch_scope<T, F>(&mut self, catch_id: NodeId, f: F) -> T\n+    where\n+        F: FnOnce(&mut LoweringContext<'_>) -> T,\n+    {\n+        let len = self.catch_scopes.len();\n+        self.catch_scopes.push(catch_id);\n+\n+        let result = f(self);\n+        assert_eq!(\n+            len + 1,\n+            self.catch_scopes.len(),\n+            \"catch scopes should be added and removed in stack order\"\n+        );\n+\n+        self.catch_scopes.pop().unwrap();\n+\n+        result\n+    }\n+\n+    fn with_loop_scope<T, F>(&mut self, loop_id: NodeId, f: F) -> T\n+    where\n+        F: FnOnce(&mut LoweringContext<'_>) -> T,\n+    {\n+        // We're no longer in the base loop's condition; we're in another loop.\n+        let was_in_loop_condition = self.is_in_loop_condition;\n+        self.is_in_loop_condition = false;\n+\n+        let len = self.loop_scopes.len();\n+        self.loop_scopes.push(loop_id);\n+\n+        let result = f(self);\n+        assert_eq!(\n+            len + 1,\n+            self.loop_scopes.len(),\n+            \"loop scopes should be added and removed in stack order\"\n+        );\n+\n+        self.loop_scopes.pop().unwrap();\n+\n+        self.is_in_loop_condition = was_in_loop_condition;\n+\n+        result\n+    }\n+\n+    fn with_loop_condition_scope<T, F>(&mut self, f: F) -> T\n+    where\n+        F: FnOnce(&mut LoweringContext<'_>) -> T,\n+    {\n+        let was_in_loop_condition = self.is_in_loop_condition;\n+        self.is_in_loop_condition = true;\n+\n+        let result = f(self);\n+\n+        self.is_in_loop_condition = was_in_loop_condition;\n+\n+        result\n+    }\n+\n     fn lower_expr_asm(&mut self, asm: &InlineAsm) -> hir::ExprKind {\n         let hir_asm = hir::InlineAsm {\n             inputs: asm.inputs.iter().map(|&(ref c, _)| c.clone()).collect(),"}]}