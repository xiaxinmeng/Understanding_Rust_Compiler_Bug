{"sha": "7768358e72bfbd5d01cfc687899ee18513b5d753", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NjgzNThlNzJiZmJkNWQwMWNmYzY4Nzg5OWVlMTg1MTNiNWQ3NTM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-25T15:59:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-25T15:59:29Z"}, "message": "Rollup merge of #57886 - davidtwco:issue-57385, r=estebank\n\nAdd suggestion for moving type declaration before associated type bindings in generic arguments.\n\nFixes #57385.\n\nr? @estebank", "tree": {"sha": "de7bc1f897e8d1b1a75feca59991471b5a8e2cea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de7bc1f897e8d1b1a75feca59991471b5a8e2cea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7768358e72bfbd5d01cfc687899ee18513b5d753", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcSzJhCRBK7hj4Ov3rIwAAdHIIACUp4Cb4IwYpgZThj5FM+XFV\ncZbdrpv815vd9Aqsgb7YvLSlT6PLkYZBS/XQe2bIJiYcbHTCI7PEOAxTCcKGZ/dC\n+7UlL7lSh9oL+8k9kg5qFewExlxtXJh+uONMPbvHDgg6KXIcZ6V0wGYjJWhWumR+\naZc6atvWZ0qxYvkykhP5WvGO4Gj5r74KgfjhtQnKB+p7rXAQgKYkTa5gyR4XPxKn\ncJfwodT2d+163XU6kyjObwamDsqT0pKkE/Sp7AsqbOBVdUTFdZhdnpKB6l04ouVV\nPLOqI5rK/GCbS0DeXwBnfpvlVC69MhuW0hCw5K4g4boxj2vh17zUh4LRzYgXlHA=\n=F4mQ\n-----END PGP SIGNATURE-----\n", "payload": "tree de7bc1f897e8d1b1a75feca59991471b5a8e2cea\nparent 141fa859b87534846b7793d026342ffaf5ad4639\nparent 7a0abbff8be746e46841ac7eef5a17364d6b8b51\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1548431969 +0100\ncommitter GitHub <noreply@github.com> 1548431969 +0100\n\nRollup merge of #57886 - davidtwco:issue-57385, r=estebank\n\nAdd suggestion for moving type declaration before associated type bindings in generic arguments.\n\nFixes #57385.\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7768358e72bfbd5d01cfc687899ee18513b5d753", "html_url": "https://github.com/rust-lang/rust/commit/7768358e72bfbd5d01cfc687899ee18513b5d753", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7768358e72bfbd5d01cfc687899ee18513b5d753/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "141fa859b87534846b7793d026342ffaf5ad4639", "url": "https://api.github.com/repos/rust-lang/rust/commits/141fa859b87534846b7793d026342ffaf5ad4639", "html_url": "https://github.com/rust-lang/rust/commit/141fa859b87534846b7793d026342ffaf5ad4639"}, {"sha": "7a0abbff8be746e46841ac7eef5a17364d6b8b51", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a0abbff8be746e46841ac7eef5a17364d6b8b51", "html_url": "https://github.com/rust-lang/rust/commit/7a0abbff8be746e46841ac7eef5a17364d6b8b51"}], "stats": {"total": 330, "additions": 303, "deletions": 27}, "files": [{"sha": "57dcc42d9e6f8f9efd069796fabedf153b3edfad", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 107, "deletions": 27, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/7768358e72bfbd5d01cfc687899ee18513b5d753/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7768358e72bfbd5d01cfc687899ee18513b5d753/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7768358e72bfbd5d01cfc687899ee18513b5d753", "patch": "@@ -5543,22 +5543,31 @@ impl<'a> Parser<'a> {\n     fn parse_generic_args(&mut self) -> PResult<'a, (Vec<GenericArg>, Vec<TypeBinding>)> {\n         let mut args = Vec::new();\n         let mut bindings = Vec::new();\n+\n         let mut seen_type = false;\n         let mut seen_binding = false;\n+\n+        let mut last_comma_span = None;\n         let mut first_type_or_binding_span: Option<Span> = None;\n+        let mut first_binding_span: Option<Span> = None;\n+\n         let mut bad_lifetime_pos = vec![];\n-        let mut last_comma_span = None;\n-        let mut suggestions = vec![];\n+        let mut bad_type_pos = vec![];\n+\n+        let mut lifetime_suggestions = vec![];\n+        let mut type_suggestions = vec![];\n         loop {\n             if self.check_lifetime() && self.look_ahead(1, |t| !t.is_like_plus()) {\n                 // Parse lifetime argument.\n                 args.push(GenericArg::Lifetime(self.expect_lifetime()));\n+\n                 if seen_type || seen_binding {\n                     let remove_sp = last_comma_span.unwrap_or(self.prev_span).to(self.prev_span);\n                     bad_lifetime_pos.push(self.prev_span);\n+\n                     if let Ok(snippet) = self.sess.source_map().span_to_snippet(self.prev_span) {\n-                        suggestions.push((remove_sp, String::new()));\n-                        suggestions.push((\n+                        lifetime_suggestions.push((remove_sp, String::new()));\n+                        lifetime_suggestions.push((\n                             first_type_or_binding_span.unwrap().shrink_to_lo(),\n                             format!(\"{}, \", snippet)));\n                     }\n@@ -5576,24 +5585,29 @@ impl<'a> Parser<'a> {\n                     ty,\n                     span,\n                 });\n+\n                 seen_binding = true;\n                 if first_type_or_binding_span.is_none() {\n                     first_type_or_binding_span = Some(span);\n                 }\n+                if first_binding_span.is_none() {\n+                    first_binding_span = Some(span);\n+                }\n             } else if self.check_type() {\n                 // Parse type argument.\n                 let ty_param = self.parse_ty()?;\n                 if seen_binding {\n-                    self.struct_span_err(\n-                        ty_param.span,\n-                        \"type parameters must be declared prior to associated type bindings\"\n-                    )\n-                        .span_label(\n-                            ty_param.span,\n-                            \"must be declared prior to associated type bindings\",\n-                        )\n-                        .emit();\n+                    let remove_sp = last_comma_span.unwrap_or(self.prev_span).to(self.prev_span);\n+                    bad_type_pos.push(self.prev_span);\n+\n+                    if let Ok(snippet) = self.sess.source_map().span_to_snippet(self.prev_span) {\n+                        type_suggestions.push((remove_sp, String::new()));\n+                        type_suggestions.push((\n+                            first_binding_span.unwrap().shrink_to_lo(),\n+                            format!(\"{}, \", snippet)));\n+                    }\n                 }\n+\n                 if first_type_or_binding_span.is_none() {\n                     first_type_or_binding_span = Some(ty_param.span);\n                 }\n@@ -5609,27 +5623,93 @@ impl<'a> Parser<'a> {\n                 last_comma_span = Some(self.prev_span);\n             }\n         }\n-        if !bad_lifetime_pos.is_empty() {\n-            let mut err = self.struct_span_err(\n+\n+        self.maybe_report_incorrect_generic_argument_order(\n+            bad_lifetime_pos, bad_type_pos, lifetime_suggestions, type_suggestions\n+        );\n+\n+        Ok((args, bindings))\n+    }\n+\n+    /// Maybe report an error about incorrect generic argument order - \"lifetime parameters\n+    /// must be declared before type parameters\", \"type parameters must be declared before\n+    /// associated type bindings\" or both.\n+    fn maybe_report_incorrect_generic_argument_order(\n+        &self,\n+        bad_lifetime_pos: Vec<Span>,\n+        bad_type_pos: Vec<Span>,\n+        lifetime_suggestions: Vec<(Span, String)>,\n+        type_suggestions: Vec<(Span, String)>,\n+    ) {\n+        let mut err = if !bad_lifetime_pos.is_empty() && !bad_type_pos.is_empty() {\n+            let mut positions = bad_lifetime_pos.clone();\n+            positions.extend_from_slice(&bad_type_pos);\n+\n+            self.struct_span_err(\n+                positions,\n+                \"generic arguments must declare lifetimes, types and associated type bindings in \\\n+                 that order\",\n+            )\n+        } else if !bad_lifetime_pos.is_empty() {\n+            self.struct_span_err(\n                 bad_lifetime_pos.clone(),\n                 \"lifetime parameters must be declared prior to type parameters\"\n-            );\n+            )\n+        } else if !bad_type_pos.is_empty() {\n+            self.struct_span_err(\n+                bad_type_pos.clone(),\n+                \"type parameters must be declared prior to associated type bindings\"\n+            )\n+        } else {\n+            return;\n+        };\n+\n+        if !bad_lifetime_pos.is_empty() {\n             for sp in &bad_lifetime_pos {\n                 err.span_label(*sp, \"must be declared prior to type parameters\");\n             }\n-            if !suggestions.is_empty() {\n-                err.multipart_suggestion_with_applicability(\n-                    &format!(\n-                        \"move the lifetime parameter{} prior to the first type parameter\",\n-                        if bad_lifetime_pos.len() > 1 { \"s\" } else { \"\" },\n-                    ),\n-                    suggestions,\n-                    Applicability::MachineApplicable,\n-                );\n+        }\n+\n+        if !bad_type_pos.is_empty() {\n+            for sp in &bad_type_pos {\n+                err.span_label(*sp, \"must be declared prior to associated type bindings\");\n             }\n-            err.emit();\n         }\n-        Ok((args, bindings))\n+\n+        if !lifetime_suggestions.is_empty() && !type_suggestions.is_empty() {\n+            let mut suggestions = lifetime_suggestions;\n+            suggestions.extend_from_slice(&type_suggestions);\n+\n+            let plural = bad_lifetime_pos.len() + bad_type_pos.len() > 1;\n+            err.multipart_suggestion_with_applicability(\n+                &format!(\n+                    \"move the parameter{}\",\n+                    if plural { \"s\" } else { \"\" },\n+                ),\n+                suggestions,\n+                Applicability::MachineApplicable,\n+            );\n+        } else if !lifetime_suggestions.is_empty() {\n+            err.multipart_suggestion_with_applicability(\n+                &format!(\n+                    \"move the lifetime parameter{} prior to the first type parameter\",\n+                    if bad_lifetime_pos.len() > 1 { \"s\" } else { \"\" },\n+                ),\n+                lifetime_suggestions,\n+                Applicability::MachineApplicable,\n+            );\n+        } else if !type_suggestions.is_empty() {\n+            err.multipart_suggestion_with_applicability(\n+                &format!(\n+                    \"move the type parameter{} prior to the first associated type binding\",\n+                    if bad_type_pos.len() > 1 { \"s\" } else { \"\" },\n+                ),\n+                type_suggestions,\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+\n+        err.emit();\n     }\n \n     /// Parses an optional `where` clause and places it in `generics`."}, {"sha": "660e517c85a13d32aaf54fecb7a60b1e768a4764", "filename": "src/test/ui/parser/issue-32214.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7768358e72bfbd5d01cfc687899ee18513b5d753/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7768358e72bfbd5d01cfc687899ee18513b5d753/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr?ref=7768358e72bfbd5d01cfc687899ee18513b5d753", "patch": "@@ -3,6 +3,10 @@ error: type parameters must be declared prior to associated type bindings\n    |\n LL | pub fn test<W, I: Trait<Item=(), W> >() {}\n    |                                  ^ must be declared prior to associated type bindings\n+help: move the type parameter prior to the first associated type binding\n+   |\n+LL | pub fn test<W, I: Trait<W, Item=()> >() {}\n+   |                         ^^       --\n \n error: aborting due to previous error\n "}, {"sha": "fd10ba4350c4a4bb654c0bb1ef4752313df96b58", "filename": "src/test/ui/suggestions/suggest-move-types.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/7768358e72bfbd5d01cfc687899ee18513b5d753/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7768358e72bfbd5d01cfc687899ee18513b5d753/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.rs?ref=7768358e72bfbd5d01cfc687899ee18513b5d753", "patch": "@@ -0,0 +1,85 @@\n+// ignore-tidy-linelength\n+\n+#![allow(warnings)]\n+\n+// This test verifies that the suggestion to move types before associated type bindings\n+// is correct.\n+\n+trait One<T> {\n+  type A;\n+}\n+\n+trait OneWithLifetime<'a, T> {\n+  type A;\n+}\n+\n+trait Three<T, U, V> {\n+  type A;\n+  type B;\n+  type C;\n+}\n+\n+trait ThreeWithLifetime<'a, 'b, 'c, T, U, V> {\n+  type A;\n+  type B;\n+  type C;\n+}\n+\n+struct A<T, M: One<A=(), T>> { //~ ERROR type parameters must be declared\n+    m: M,\n+    t: T,\n+}\n+\n+\n+struct Al<'a, T, M: OneWithLifetime<A=(), T, 'a>> {\n+//~^ ERROR generic arguments must declare lifetimes, types and associated type bindings in that order\n+    m: M,\n+    t: &'a T,\n+}\n+\n+struct B<T, U, V, M: Three<A=(), B=(), C=(), T, U, V>> { //~ ERROR type parameters must be declared\n+    m: M,\n+    t: T,\n+    u: U,\n+    v: V,\n+}\n+\n+struct Bl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<A=(), B=(), C=(), T, U, V, 'a, 'b, 'c>> {\n+//~^ ERROR generic arguments must declare lifetimes, types and associated type bindings in that order\n+    m: M,\n+    t: &'a T,\n+    u: &'b U,\n+    v: &'c V,\n+}\n+\n+struct C<T, U, V, M: Three<T, A=(), B=(), C=(), U, V>> { //~ ERROR type parameters must be declared\n+    m: M,\n+    t: T,\n+    u: U,\n+    v: V,\n+}\n+\n+struct Cl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), C=(), U, 'b, V, 'c>> {\n+//~^ ERROR generic arguments must declare lifetimes, types and associated type bindings in that order\n+    m: M,\n+    t: &'a T,\n+    u: &'b U,\n+    v: &'c V,\n+}\n+\n+struct D<T, U, V, M: Three<T, A=(), B=(), U, C=(), V>> { //~ ERROR type parameters must be declared\n+    m: M,\n+    t: T,\n+    u: U,\n+    v: V,\n+}\n+\n+struct Dl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), U, 'b, C=(), V, 'c>> {\n+//~^ ERROR generic arguments must declare lifetimes, types and associated type bindings in that order\n+    m: M,\n+    t: &'a T,\n+    u: &'b U,\n+    v: &'c V,\n+}\n+\n+fn main() {}"}, {"sha": "3643d9a912455ea6a4ffeb1e9883fcb41e492839", "filename": "src/test/ui/suggestions/suggest-move-types.stderr", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/7768358e72bfbd5d01cfc687899ee18513b5d753/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7768358e72bfbd5d01cfc687899ee18513b5d753/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr?ref=7768358e72bfbd5d01cfc687899ee18513b5d753", "patch": "@@ -0,0 +1,107 @@\n+error: type parameters must be declared prior to associated type bindings\n+  --> $DIR/suggest-move-types.rs:28:26\n+   |\n+LL | struct A<T, M: One<A=(), T>> { //~ ERROR type parameters must be declared\n+   |                          ^ must be declared prior to associated type bindings\n+help: move the type parameter prior to the first associated type binding\n+   |\n+LL | struct A<T, M: One<T, A=()>> { //~ ERROR type parameters must be declared\n+   |                    ^^    --\n+\n+error: generic arguments must declare lifetimes, types and associated type bindings in that order\n+  --> $DIR/suggest-move-types.rs:34:46\n+   |\n+LL | struct Al<'a, T, M: OneWithLifetime<A=(), T, 'a>> {\n+   |                                           ^  ^^ must be declared prior to type parameters\n+   |                                           |\n+   |                                           must be declared prior to associated type bindings\n+help: move the parameters\n+   |\n+LL | struct Al<'a, T, M: OneWithLifetime<'a, T, A=()>> {\n+   |                                     ^^^ ^^    --\n+\n+error: type parameters must be declared prior to associated type bindings\n+  --> $DIR/suggest-move-types.rs:40:46\n+   |\n+LL | struct B<T, U, V, M: Three<A=(), B=(), C=(), T, U, V>> { //~ ERROR type parameters must be declared\n+   |                                              ^  ^  ^ must be declared prior to associated type bindings\n+   |                                              |  |\n+   |                                              |  must be declared prior to associated type bindings\n+   |                                              must be declared prior to associated type bindings\n+help: move the type parameters prior to the first associated type binding\n+   |\n+LL | struct B<T, U, V, M: Three<T, U, V, A=(), B=(), C=()>> { //~ ERROR type parameters must be declared\n+   |                            ^^ ^^ ^^                --\n+\n+error: generic arguments must declare lifetimes, types and associated type bindings in that order\n+  --> $DIR/suggest-move-types.rs:47:80\n+   |\n+LL | struct Bl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<A=(), B=(), C=(), T, U, V, 'a, 'b, 'c>> {\n+   |                                                                       ^  ^  ^  ^^  ^^  ^^ must be declared prior to type parameters\n+   |                                                                       |  |  |  |   |\n+   |                                                                       |  |  |  |   must be declared prior to type parameters\n+   |                                                                       |  |  |  must be declared prior to type parameters\n+   |                                                                       |  |  must be declared prior to associated type bindings\n+   |                                                                       |  must be declared prior to associated type bindings\n+   |                                                                       must be declared prior to associated type bindings\n+help: move the parameters\n+   |\n+LL | struct Bl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<'a, 'b, 'c, T, U, V, A=(), B=(), C=()>> {\n+   |                                                     ^^^ ^^^ ^^^ ^^ ^^ ^^                --\n+\n+error: type parameters must be declared prior to associated type bindings\n+  --> $DIR/suggest-move-types.rs:55:49\n+   |\n+LL | struct C<T, U, V, M: Three<T, A=(), B=(), C=(), U, V>> { //~ ERROR type parameters must be declared\n+   |                                                 ^  ^ must be declared prior to associated type bindings\n+   |                                                 |\n+   |                                                 must be declared prior to associated type bindings\n+help: move the type parameters prior to the first associated type binding\n+   |\n+LL | struct C<T, U, V, M: Three<T, U, V, A=(), B=(), C=()>> { //~ ERROR type parameters must be declared\n+   |                               ^^ ^^                --\n+\n+error: generic arguments must declare lifetimes, types and associated type bindings in that order\n+  --> $DIR/suggest-move-types.rs:62:56\n+   |\n+LL | struct Cl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), C=(), U, 'b, V, 'c>> {\n+   |                                                        ^^                    ^  ^^  ^  ^^ must be declared prior to type parameters\n+   |                                                        |                     |  |   |\n+   |                                                        |                     |  |   must be declared prior to associated type bindings\n+   |                                                        |                     |  must be declared prior to type parameters\n+   |                                                        |                     must be declared prior to associated type bindings\n+   |                                                        must be declared prior to type parameters\n+help: move the parameters\n+   |\n+LL | struct Cl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<'a, 'b, 'c, T, U, V, A=(), B=(), C=()>> {\n+   |                                                     ^^^ ^^^ ^^^ -- ^^ ^^                --\n+\n+error: type parameters must be declared prior to associated type bindings\n+  --> $DIR/suggest-move-types.rs:70:43\n+   |\n+LL | struct D<T, U, V, M: Three<T, A=(), B=(), U, C=(), V>> { //~ ERROR type parameters must be declared\n+   |                                           ^        ^ must be declared prior to associated type bindings\n+   |                                           |\n+   |                                           must be declared prior to associated type bindings\n+help: move the type parameters prior to the first associated type binding\n+   |\n+LL | struct D<T, U, V, M: Three<T, U, V, A=(), B=(), C=()>> { //~ ERROR type parameters must be declared\n+   |                               ^^ ^^          --    --\n+\n+error: generic arguments must declare lifetimes, types and associated type bindings in that order\n+  --> $DIR/suggest-move-types.rs:77:56\n+   |\n+LL | struct Dl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), U, 'b, C=(), V, 'c>> {\n+   |                                                        ^^              ^  ^^        ^  ^^ must be declared prior to type parameters\n+   |                                                        |               |  |         |\n+   |                                                        |               |  |         must be declared prior to associated type bindings\n+   |                                                        |               |  must be declared prior to type parameters\n+   |                                                        |               must be declared prior to associated type bindings\n+   |                                                        must be declared prior to type parameters\n+help: move the parameters\n+   |\n+LL | struct Dl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<'a, 'b, 'c, T, U, V, A=(), B=(), C=()>> {\n+   |                                                     ^^^ ^^^ ^^^ -- ^^ ^^          --    --\n+\n+error: aborting due to 8 previous errors\n+"}]}