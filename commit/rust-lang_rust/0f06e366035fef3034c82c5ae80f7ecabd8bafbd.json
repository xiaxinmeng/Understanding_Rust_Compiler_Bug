{"sha": "0f06e366035fef3034c82c5ae80f7ecabd8bafbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMDZlMzY2MDM1ZmVmMzAzNGM4MmM1YWU4MGY3ZWNhYmQ4YmFmYmQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-09-17T05:09:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-17T05:09:45Z"}, "message": "Rollup merge of #88339 - piegamesde:master, r=joshtriplett\n\nAdd TcpListener::into_incoming and IntoIncoming\n\nThe `incoming` method is really useful, however for some use cases the borrow\nthis introduces is needlessly restricting. Thus, an owned variant is added.\n\nr? ``@joshtriplett``", "tree": {"sha": "7648de9271b1616db3cf077f08aa5c98f3df00f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7648de9271b1616db3cf077f08aa5c98f3df00f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f06e366035fef3034c82c5ae80f7ecabd8bafbd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhRCMZCRBK7hj4Ov3rIwAAdEEIAEYefZH1NObYgFw8yGP4ncaS\n3Co78xf1S5Mgm7JRIJ971UZVBqbd/er9nD2AL+qwbjd9wdu0N3rl1eguCNE2QZWB\nozKLzwWWp53DvQdDbHO+Uyj5yMNv/YK/zQS9xLdy9G+PfJDmS1TReTTsTW3rOkn/\nbKV8MAz5t/CzEjMI7ckZTIts8XZyiIVQ24oU552Z/AE6AELlgBH8PPYhu/1r0aFX\nMNSamaPtJ9kyAjtYJcDo15pFRWwyR/yfhMPrz3SpL4VZybIi8OYINLPXRlikejxO\nBOPrqf4FUeA0N0OAlMJqcI3hvu5kdgzwvo8qhg5VNgr8LM6r1P6Q09LTMcI9vv0=\n=GkH6\n-----END PGP SIGNATURE-----\n", "payload": "tree 7648de9271b1616db3cf077f08aa5c98f3df00f8\nparent 81dc21699e7376afcf7469104ad8acb7c5f09269\nparent ced597edb7e154092efde9df975ee76f9642a200\nauthor Yuki Okushi <jtitor@2k36.org> 1631855385 +0900\ncommitter GitHub <noreply@github.com> 1631855385 +0900\n\nRollup merge of #88339 - piegamesde:master, r=joshtriplett\n\nAdd TcpListener::into_incoming and IntoIncoming\n\nThe `incoming` method is really useful, however for some use cases the borrow\nthis introduces is needlessly restricting. Thus, an owned variant is added.\n\nr? ``@joshtriplett``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f06e366035fef3034c82c5ae80f7ecabd8bafbd", "html_url": "https://github.com/rust-lang/rust/commit/0f06e366035fef3034c82c5ae80f7ecabd8bafbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f06e366035fef3034c82c5ae80f7ecabd8bafbd/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81dc21699e7376afcf7469104ad8acb7c5f09269", "url": "https://api.github.com/repos/rust-lang/rust/commits/81dc21699e7376afcf7469104ad8acb7c5f09269", "html_url": "https://github.com/rust-lang/rust/commit/81dc21699e7376afcf7469104ad8acb7c5f09269"}, {"sha": "ced597edb7e154092efde9df975ee76f9642a200", "url": "https://api.github.com/repos/rust-lang/rust/commits/ced597edb7e154092efde9df975ee76f9642a200", "html_url": "https://github.com/rust-lang/rust/commit/ced597edb7e154092efde9df975ee76f9642a200"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "223726d45d72a4ffe7ee2ad5897c7e97575cbbda", "filename": "library/std/src/net/tcp.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/0f06e366035fef3034c82c5ae80f7ecabd8bafbd/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f06e366035fef3034c82c5ae80f7ecabd8bafbd/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs?ref=0f06e366035fef3034c82c5ae80f7ecabd8bafbd", "patch": "@@ -96,6 +96,18 @@ pub struct Incoming<'a> {\n     listener: &'a TcpListener,\n }\n \n+/// An iterator that infinitely [`accept`]s connections on a [`TcpListener`].\n+///\n+/// This `struct` is created by the [`TcpListener::into_incoming`] method.\n+/// See its documentation for more.\n+///\n+/// [`accept`]: TcpListener::accept\n+#[derive(Debug)]\n+#[unstable(feature = \"tcplistener_into_incoming\", issue = \"88339\")]\n+pub struct IntoIncoming {\n+    listener: TcpListener,\n+}\n+\n impl TcpStream {\n     /// Opens a TCP connection to a remote host.\n     ///\n@@ -845,6 +857,37 @@ impl TcpListener {\n         Incoming { listener: self }\n     }\n \n+    /// Turn this into an iterator over the connections being received on this\n+    /// listener.\n+    ///\n+    /// The returned iterator will never return [`None`] and will also not yield\n+    /// the peer's [`SocketAddr`] structure. Iterating over it is equivalent to\n+    /// calling [`TcpListener::accept`] in a loop.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(tcplistener_into_incoming)]\n+    /// use std::net::{TcpListener, TcpStream};\n+    ///\n+    /// fn listen_on(port: u16) -> impl Iterator<Item = TcpStream> {\n+    ///     let listener = TcpListener::bind(\"127.0.0.1:80\").unwrap();\n+    ///     listener.into_incoming()\n+    ///         .filter_map(Result::ok) /* Ignore failed connections */\n+    /// }\n+    ///\n+    /// fn main() -> std::io::Result<()> {\n+    ///     for stream in listen_on(80) {\n+    ///         /* handle the connection here */\n+    ///     }\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"tcplistener_into_incoming\", issue = \"88339\")]\n+    pub fn into_incoming(self) -> IntoIncoming {\n+        IntoIncoming { listener: self }\n+    }\n+\n     /// Sets the value for the `IP_TTL` option on this socket.\n     ///\n     /// This value sets the time-to-live field that is used in every packet sent\n@@ -982,6 +1025,14 @@ impl<'a> Iterator for Incoming<'a> {\n     }\n }\n \n+#[unstable(feature = \"tcplistener_into_incoming\", issue = \"88339\")]\n+impl Iterator for IntoIncoming {\n+    type Item = io::Result<TcpStream>;\n+    fn next(&mut self) -> Option<io::Result<TcpStream>> {\n+        Some(self.listener.accept().map(|p| p.0))\n+    }\n+}\n+\n impl AsInner<net_imp::TcpListener> for TcpListener {\n     fn as_inner(&self) -> &net_imp::TcpListener {\n         &self.0"}]}