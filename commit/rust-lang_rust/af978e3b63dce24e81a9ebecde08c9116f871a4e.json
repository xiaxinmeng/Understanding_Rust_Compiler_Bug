{"sha": "af978e3b63dce24e81a9ebecde08c9116f871a4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmOTc4ZTNiNjNkY2UyNGU4MWE5ZWJlY2RlMDhjOTExNmY4NzFhNGU=", "commit": {"author": {"name": "mendess", "email": "pedro.mendes.26@gmail.com", "date": "2020-11-24T10:28:18Z"}, "committer": {"name": "mendess", "email": "pedro.mendes.26@gmail.com", "date": "2020-11-24T10:28:18Z"}, "message": "Requested changes", "tree": {"sha": "6e6f447b498ec54a7607cdab0837fff3dfe924ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e6f447b498ec54a7607cdab0837fff3dfe924ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af978e3b63dce24e81a9ebecde08c9116f871a4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af978e3b63dce24e81a9ebecde08c9116f871a4e", "html_url": "https://github.com/rust-lang/rust/commit/af978e3b63dce24e81a9ebecde08c9116f871a4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af978e3b63dce24e81a9ebecde08c9116f871a4e/comments", "author": {"login": "mendess", "id": 19352680, "node_id": "MDQ6VXNlcjE5MzUyNjgw", "avatar_url": "https://avatars.githubusercontent.com/u/19352680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mendess", "html_url": "https://github.com/mendess", "followers_url": "https://api.github.com/users/mendess/followers", "following_url": "https://api.github.com/users/mendess/following{/other_user}", "gists_url": "https://api.github.com/users/mendess/gists{/gist_id}", "starred_url": "https://api.github.com/users/mendess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mendess/subscriptions", "organizations_url": "https://api.github.com/users/mendess/orgs", "repos_url": "https://api.github.com/users/mendess/repos", "events_url": "https://api.github.com/users/mendess/events{/privacy}", "received_events_url": "https://api.github.com/users/mendess/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mendess", "id": 19352680, "node_id": "MDQ6VXNlcjE5MzUyNjgw", "avatar_url": "https://avatars.githubusercontent.com/u/19352680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mendess", "html_url": "https://github.com/mendess", "followers_url": "https://api.github.com/users/mendess/followers", "following_url": "https://api.github.com/users/mendess/following{/other_user}", "gists_url": "https://api.github.com/users/mendess/gists{/gist_id}", "starred_url": "https://api.github.com/users/mendess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mendess/subscriptions", "organizations_url": "https://api.github.com/users/mendess/orgs", "repos_url": "https://api.github.com/users/mendess/repos", "events_url": "https://api.github.com/users/mendess/events{/privacy}", "received_events_url": "https://api.github.com/users/mendess/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7593e5070e71af5d43b29c84611a836b8d0fdcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7593e5070e71af5d43b29c84611a836b8d0fdcc", "html_url": "https://github.com/rust-lang/rust/commit/b7593e5070e71af5d43b29c84611a836b8d0fdcc"}], "stats": {"total": 100, "additions": 59, "deletions": 41}, "files": [{"sha": "9f3e8be0f7a35e25dce17aa448d0cfbaa1c35952", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -480,8 +480,8 @@ impl<'a> Resolver<'a> {\n                         \"const parameters may only be used as standalone arguments, i.e. `{}`\",\n                         name\n                     ));\n-                    err.note(\"use feature(const_generics) and feature(const_evaluatable_checked) to enable this\");\n                 }\n+                err.note(\"use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\");\n \n                 err\n             }"}, {"sha": "59f458b35aac7a39a4b336ca501501ac79b346b1", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,7 +5,7 @@ LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n    |                                                ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/array-size-in-generic-struct-param.rs:20:15\n@@ -14,7 +14,7 @@ LL |     arr: [u8; CFG.arr_size],\n    |               ^^^ cannot perform const operation using `CFG`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `CFG`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: `Config` is forbidden as the type of a const generic parameter\n   --> $DIR/array-size-in-generic-struct-param.rs:18:21"}, {"sha": "136a4ddf73599a9aa7aa5d13af9cb210a57aba19", "filename": "src/test/ui/const-generics/const-arg-in-const-arg.min.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,6 +5,7 @@ LL |     let _: [u8; foo::<T>()];\n    |                       ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:15:23\n@@ -13,7 +14,7 @@ LL |     let _: [u8; bar::<N>()];\n    |                       ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:25:23\n@@ -22,7 +23,7 @@ LL |     let _ = [0; bar::<N>()];\n    |                       ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:30:24\n@@ -31,6 +32,7 @@ LL |     let _: Foo<{ foo::<T>() }>;\n    |                        ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:31:24\n@@ -39,7 +41,7 @@ LL |     let _: Foo<{ bar::<N>() }>;\n    |                        ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:36:27\n@@ -48,6 +50,7 @@ LL |     let _ = Foo::<{ foo::<T>() }>;\n    |                           ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:37:27\n@@ -56,7 +59,7 @@ LL |     let _ = Foo::<{ bar::<N>() }>;\n    |                           ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n   --> $DIR/const-arg-in-const-arg.rs:16:23"}, {"sha": "d85586ea0b79a60a675c7eac81f92e852ed640f8", "filename": "src/test/ui/const-generics/const-argument-if-length.min.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,6 +5,7 @@ LL |     pad: [u8; is_zst::<T>()],\n    |                        ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/const-argument-if-length.rs:17:12"}, {"sha": "70b71c041f137e9fee40d781ed22127dcd673682", "filename": "src/test/ui/const-generics/const_evaluatable_checked/feature-gate-const_evaluatable_checked.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,7 +5,7 @@ LL | type Arr<const N: usize> = [u8; N - 1];\n    |                                 ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "efee04598aba314447160900f938f607147d12c8", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,7 +5,7 @@ LL | fn test<const N: usize>() -> [u8; N - 1] where [u8; N - 1]: Default {\n    |                                                     ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/simple.rs:8:35\n@@ -14,7 +14,7 @@ LL | fn test<const N: usize>() -> [u8; N - 1] where [u8; N - 1]: Default {\n    |                                   ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: aborting due to 2 previous errors\n "}, {"sha": "99e45fdece2bba02c5212879dd4d67d39bb2b7e3", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,7 +5,7 @@ LL | type Arr<const N: usize> = [u8; N - 1];\n    |                                 ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "a42375289bcd9b7b392b553858b047a029e3785d", "filename": "src/test/ui/const-generics/generic-function-call-in-array-length.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,7 +5,7 @@ LL | fn bar<const N: usize>() -> [u32; foo(N)] {\n    |                                       ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/generic-function-call-in-array-length.rs:12:13\n@@ -14,7 +14,7 @@ LL |     [0; foo(N)]\n    |             ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5b393351d5e84178b2e484c52e3c5afc2b109553", "filename": "src/test/ui/const-generics/generic-sum-in-array-length.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,7 +5,7 @@ LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n    |                                                     ^ cannot perform const operation using `A`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `A`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/generic-sum-in-array-length.rs:7:57\n@@ -14,7 +14,7 @@ LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n    |                                                         ^ cannot perform const operation using `B`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `B`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8f38a55b19b75111e52a773bd9853bf3ec8ab167", "filename": "src/test/ui/const-generics/intrinsics-type_name-as-const-argument.min.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,6 +5,7 @@ LL |     T: Trait<{std::intrinsics::type_name::<T>()}>\n    |                                            ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: `&'static str` is forbidden as the type of a const generic parameter\n   --> $DIR/intrinsics-type_name-as-const-argument.rs:10:22"}, {"sha": "94968a4913847e6fb7ac391b779c0d665e0f8b3e", "filename": "src/test/ui/const-generics/issue-61522-array-len-succ.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,7 +5,7 @@ LL | pub struct MyArray<const COUNT: usize>([u8; COUNT + 1]);\n    |                                             ^^^^^ cannot perform const operation using `COUNT`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `COUNT`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-61522-array-len-succ.rs:12:30\n@@ -14,7 +14,7 @@ LL |     fn inner(&self) -> &[u8; COUNT + 1] {\n    |                              ^^^^^ cannot perform const operation using `COUNT`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `COUNT`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f71618933b634dbe715934f6f6437e8219c46802", "filename": "src/test/ui/const-generics/issue-67375.min.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,6 +5,7 @@ LL |     inner: [(); { [|_: &T| {}; 0].len() }],\n    |                         ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error[E0392]: parameter `T` is never used\n   --> $DIR/issue-67375.rs:7:12"}, {"sha": "946f8ca1abcd940c5828bc068355d2ab610e0b98", "filename": "src/test/ui/const-generics/issue-67945-1.min.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,6 +5,7 @@ LL |         let x: S = MaybeUninit::uninit();\n    |                ^ cannot perform const operation using `S`\n    |\n    = note: type parameters may not be used in const expressions\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-67945-1.rs:17:45\n@@ -13,6 +14,7 @@ LL |         let b = &*(&x as *const _ as *const S);\n    |                                             ^ cannot perform const operation using `S`\n    |\n    = note: type parameters may not be used in const expressions\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error[E0392]: parameter `S` is never used\n   --> $DIR/issue-67945-1.rs:11:12"}, {"sha": "8e189f0c196bf7b2448d7315fe62f73d0946867a", "filename": "src/test/ui/const-generics/issue-67945-2.min.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,6 +5,7 @@ LL |         let x: S = MaybeUninit::uninit();\n    |                ^ cannot perform const operation using `S`\n    |\n    = note: type parameters may not be used in const expressions\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-67945-2.rs:15:45\n@@ -13,6 +14,7 @@ LL |         let b = &*(&x as *const _ as *const S);\n    |                                             ^ cannot perform const operation using `S`\n    |\n    = note: type parameters may not be used in const expressions\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error[E0392]: parameter `S` is never used\n   --> $DIR/issue-67945-2.rs:9:12"}, {"sha": "cb14813d8cac992cf337976bbcb42ae0e16955c2", "filename": "src/test/ui/const-generics/issues/issue-61747.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,7 +5,7 @@ LL |     fn successor() -> Const<{C + 1}> {\n    |                              ^ cannot perform const operation using `C`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `C`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "91055949d8c0f64000f1b407aea1e7c01fd1f8e7", "filename": "src/test/ui/const-generics/issues/issue-61935.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,7 +5,7 @@ LL |         Self:FooImpl<{N==0}>\n    |                       ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "6d49a4dc6edba5797f8b9e774cbc815e9016379b", "filename": "src/test/ui/const-generics/issues/issue-62220.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,7 +5,7 @@ LL | pub type TruncatedVector<T, const N: usize> = Vector<T, { N - 1 }>;\n    |                                                           ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "a26f2a6bf0279bcf3b08087a617d77e808ee1526", "filename": "src/test/ui/const-generics/issues/issue-62456.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,7 +5,7 @@ LL |     let _ = [0u64; N + 1];\n    |                    ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "ded781cab45ada64d380d1187bd1b332033af3b7", "filename": "src/test/ui/const-generics/issues/issue-64494.min.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,6 +5,7 @@ LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n    |                                      ^^^^^^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-64494.rs:19:38\n@@ -13,6 +14,7 @@ LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}\n    |                                      ^^^^^^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error[E0119]: conflicting implementations of trait `MyTrait`:\n   --> $DIR/issue-64494.rs:19:1"}, {"sha": "e3a6b7a5ab2e578d82692302db03294c605aee7b", "filename": "src/test/ui/const-generics/issues/issue-66205.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,7 +5,7 @@ LL |     fact::<{ N - 1 }>();\n    |              ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "85ceace45d6eb109caa8e88cbdff599bbe151362", "filename": "src/test/ui/const-generics/issues/issue-68366.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,7 +5,7 @@ LL | impl <const N: usize> Collatz<{Some(N)}> {}\n    |                                     ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n   --> $DIR/issue-68366.rs:12:13"}, {"sha": "133f68d16fdc407bd46ab7f5e51d36995f71857c", "filename": "src/test/ui/const-generics/issues/issue-68977.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,7 +5,7 @@ LL |     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n    |                 ^^^^^^^^ cannot perform const operation using `INT_BITS`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `INT_BITS`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-68977.rs:29:28\n@@ -14,7 +14,7 @@ LL |     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n    |                            ^^^^^^^^^ cannot perform const operation using `FRAC_BITS`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `FRAC_BITS`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2feeafc778a0712aabbc8a93e8d05191fd6b3398", "filename": "src/test/ui/const-generics/issues/issue-72787.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,7 +5,7 @@ LL |     Condition<{ LHS <= RHS }>: True\n    |                 ^^^ cannot perform const operation using `LHS`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `LHS`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-72787.rs:11:24\n@@ -14,7 +14,7 @@ LL |     Condition<{ LHS <= RHS }>: True\n    |                        ^^^ cannot perform const operation using `RHS`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `RHS`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-72787.rs:26:25\n@@ -23,7 +23,7 @@ LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                         ^ cannot perform const operation using `I`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `I`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-72787.rs:26:36\n@@ -32,7 +32,7 @@ LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                                    ^ cannot perform const operation using `J`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `J`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72787.rs:22:26"}, {"sha": "ada74ecd6f2305a8f2f32818c4c483854cc37300", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,7 +5,7 @@ LL | where Assert::<{N < usize::max_value() / 2}>: IsTrue,\n    |                 ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "5fb2768e8f0e9b853f4df2a7f45a841afd9d66c0", "filename": "src/test/ui/const-generics/issues/issue-76701-ty-param-in-const.min.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,6 +5,7 @@ LL | fn ty_param<T>() -> [u8; std::mem::size_of::<T>()] {\n    |                                              ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-76701-ty-param-in-const.rs:12:42\n@@ -13,7 +14,7 @@ LL | fn const_param<const N: usize>() -> [u8; N + 1] {\n    |                                          ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c7f3ddcfe9e3c3367606c2de4d71975f812db30d", "filename": "src/test/ui/const-generics/macro_rules-braces.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -27,7 +27,7 @@ LL |     let _: foo!({{ N }});\n    |                    ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/macro_rules-braces.rs:41:19\n@@ -36,7 +36,7 @@ LL |     let _: bar!({ N });\n    |                   ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/macro_rules-braces.rs:46:20\n@@ -45,7 +45,7 @@ LL |     let _: baz!({{ N }});\n    |                    ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/macro_rules-braces.rs:51:19\n@@ -54,7 +54,7 @@ LL |     let _: biz!({ N });\n    |                   ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: aborting due to 6 previous errors\n "}, {"sha": "54448c68529e65d283d97f8a854801029a95b084", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,7 +5,7 @@ LL | struct Break0<const N: usize>([u8; { N + 1 }]);\n    |                                      ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/complex-expression.rs:14:40\n@@ -14,7 +14,7 @@ LL | struct Break1<const N: usize>([u8; { { N } }]);\n    |                                        ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/complex-expression.rs:18:17\n@@ -23,7 +23,7 @@ LL |     let _: [u8; N + 1];\n    |                 ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/complex-expression.rs:23:17\n@@ -32,7 +32,7 @@ LL |     let _ = [0; N + 1];\n    |                 ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/complex-expression.rs:27:45\n@@ -41,6 +41,7 @@ LL | struct BreakTy0<T>(T, [u8; { size_of::<*mut T>() }]);\n    |                                             ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/complex-expression.rs:30:47\n@@ -49,6 +50,7 @@ LL | struct BreakTy1<T>(T, [u8; { { size_of::<*mut T>() } }]);\n    |                                               ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/complex-expression.rs:34:32\n@@ -57,6 +59,7 @@ LL |     let _: [u8; size_of::<*mut T>() + 1];\n    |                                ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n warning: cannot use constants which depend on generic parameters in types\n   --> $DIR/complex-expression.rs:39:17"}, {"sha": "c52d9552b900123560486633e2790d9d994b1eab", "filename": "src/test/ui/const-generics/min_const_generics/self-ty-in-const-1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,6 +5,7 @@ LL |     fn t1() -> [u8; std::mem::size_of::<Self>()];\n    |                                         ^^^^ cannot perform const operation using `Self`\n    |\n    = note: type parameters may not be used in const expressions\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic `Self` types are currently not permitted in anonymous constants\n   --> $DIR/self-ty-in-const-1.rs:14:41"}, {"sha": "bfe748855d701ef0f152348891b6e13a97c04ba8", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.min.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -13,6 +13,7 @@ LL | struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n    |                                            ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: constant values inside of type parameter defaults must not depend on generic parameters\n   --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:12:21"}, {"sha": "8b1cf944856d67742e79256a375662619da4a350", "filename": "src/test/ui/const-generics/wf-misc.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af978e3b63dce24e81a9ebecde08c9116f871a4e/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr?ref=af978e3b63dce24e81a9ebecde08c9116f871a4e", "patch": "@@ -5,7 +5,7 @@ LL |     let _: [u8; N + 1];\n    |                 ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/wf-misc.rs:17:21\n@@ -14,7 +14,7 @@ LL |     let _: Const::<{N + 1}>;\n    |                     ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use feature(const_generics) and feature(const_evaluatable_checked) to enable this\n+   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n \n error: aborting due to 2 previous errors\n "}]}