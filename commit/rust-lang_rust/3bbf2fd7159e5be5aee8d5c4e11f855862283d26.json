{"sha": "3bbf2fd7159e5be5aee8d5c4e11f855862283d26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYmYyZmQ3MTU5ZTViZTVhZWU4ZDVjNGUxMWY4NTU4NjIyODNkMjY=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-20T22:46:06Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-24T18:48:54Z"}, "message": "Remove Pointer::zero in favor of Pointer::from", "tree": {"sha": "a30e0236fc591f22df27ffac2b54afe3ae9e563b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a30e0236fc591f22df27ffac2b54afe3ae9e563b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bbf2fd7159e5be5aee8d5c4e11f855862283d26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bbf2fd7159e5be5aee8d5c4e11f855862283d26", "html_url": "https://github.com/rust-lang/rust/commit/3bbf2fd7159e5be5aee8d5c4e11f855862283d26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bbf2fd7159e5be5aee8d5c4e11f855862283d26/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7324631aed90a5a4182c1eac8f2670f586fb3b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7324631aed90a5a4182c1eac8f2670f586fb3b3", "html_url": "https://github.com/rust-lang/rust/commit/d7324631aed90a5a4182c1eac8f2670f586fb3b3"}], "stats": {"total": 37, "additions": 16, "deletions": 21}, "files": [{"sha": "a44729f2c59156d90970b171de72b0bf596123a1", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3bbf2fd7159e5be5aee8d5c4e11f855862283d26/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bbf2fd7159e5be5aee8d5c4e11f855862283d26/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=3bbf2fd7159e5be5aee8d5c4e11f855862283d26", "patch": "@@ -115,15 +115,18 @@ pub struct Pointer {\n     pub offset: Size,\n }\n \n+/// Produces a `Pointer` which points to the beginning of the Allocation\n+impl From<AllocId> for Pointer {\n+    fn from(alloc_id: AllocId) -> Self {\n+        Pointer::new(alloc_id, Size::ZERO)\n+    }\n+}\n+\n impl<'tcx> Pointer {\n     pub fn new(alloc_id: AllocId, offset: Size) -> Self {\n         Pointer { alloc_id, offset }\n     }\n \n-    pub fn zero(alloc_id: AllocId) -> Self {\n-        Pointer::new(alloc_id, Size::ZERO)\n-    }\n-\n     pub(crate) fn wrapping_signed_offset<C: HasDataLayout>(self, i: i64, cx: C) -> Self {\n         Pointer::new(\n             self.alloc_id,"}, {"sha": "562e4cec6b8db838cf5dfd3f10af582ec6fb6d11", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bbf2fd7159e5be5aee8d5c4e11f855862283d26/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bbf2fd7159e5be5aee8d5c4e11f855862283d26/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=3bbf2fd7159e5be5aee8d5c4e11f855862283d26", "patch": "@@ -182,16 +182,14 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n             LitKind::Str(ref s, _) => {\n                 let s = s.as_str();\n                 let id = self.tcx.allocate_bytes(s.as_bytes());\n-                let ptr = Pointer::zero(id);\n                 ConstValue::ScalarPair(\n-                    Scalar::Ptr(ptr),\n+                    Scalar::Ptr(id.into()),\n                     Scalar::from_u128(s.len() as u128),\n                 )\n             },\n             LitKind::ByteStr(ref data) => {\n                 let id = self.tcx.allocate_bytes(data);\n-                let ptr = Pointer::zero(id);\n-                ConstValue::Scalar(ptr.into())\n+                ConstValue::Scalar(Scalar::Ptr(id.into()))\n             },\n             LitKind::Byte(n) => ConstValue::Scalar(Scalar::Bytes(n as u128)),\n             LitKind::Int(n, _) if neg => {"}, {"sha": "e387a4fa61be27edc08e7cef592c67aad6e6b616", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bbf2fd7159e5be5aee8d5c4e11f855862283d26/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bbf2fd7159e5be5aee8d5c4e11f855862283d26/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=3bbf2fd7159e5be5aee8d5c4e11f855862283d26", "patch": "@@ -1128,16 +1128,14 @@ fn lit_to_const<'a, 'tcx>(lit: &'tcx ast::LitKind,\n         LitKind::Str(ref s, _) => {\n             let s = s.as_str();\n             let id = tcx.allocate_bytes(s.as_bytes());\n-            let ptr = Pointer::zero(id);\n             ConstValue::ScalarPair(\n-                Scalar::Ptr(ptr),\n+                Scalar::Ptr(id.into()),\n                 Scalar::from_u128(s.len() as u128),\n             )\n         },\n         LitKind::ByteStr(ref data) => {\n             let id = tcx.allocate_bytes(data);\n-            let ptr = Pointer::zero(id);\n-            ConstValue::Scalar(ptr.into())\n+            ConstValue::Scalar(Scalar::Ptr(id.into()))\n         },\n         LitKind::Byte(n) => ConstValue::Scalar(Scalar::Bytes(n as u128)),\n         LitKind::Int(n, _) => {"}, {"sha": "40d997126c8d8dcd99b8f0d78cc94f5853f754e9", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3bbf2fd7159e5be5aee8d5c4e11f855862283d26/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bbf2fd7159e5be5aee8d5c4e11f855862283d26/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=3bbf2fd7159e5be5aee8d5c4e11f855862283d26", "patch": "@@ -1019,8 +1019,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                 .lock()\n                 .intern_static(gid.instance.def_id());\n             let layout = self.layout_of(ty)?;\n-            let ptr = Pointer::zero(alloc_id);\n-            return Ok(Value::ByRef(ptr.into(), layout.align))\n+            return Ok(Value::ByRef(Scalar::Ptr(alloc_id.into()), layout.align))\n         }\n         let cv = self.const_eval(gid)?;\n         self.const_to_value(&cv.val, ty)"}, {"sha": "a929459f9bd24a09a38765724d54280f67ef0056", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3bbf2fd7159e5be5aee8d5c4e11f855862283d26/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bbf2fd7159e5be5aee8d5c4e11f855862283d26/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=3bbf2fd7159e5be5aee8d5c4e11f855862283d26", "patch": "@@ -72,13 +72,11 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n     }\n \n     pub fn create_fn_alloc(&mut self, instance: Instance<'tcx>) -> Pointer {\n-        let id = self.tcx.alloc_map.lock().create_fn_alloc(instance);\n-        Pointer::zero(id)\n+        self.tcx.alloc_map.lock().create_fn_alloc(instance).into()\n     }\n \n     pub fn allocate_bytes(&mut self, bytes: &[u8]) -> Pointer {\n-        let id = self.tcx.allocate_bytes(bytes);\n-        Pointer::zero(id)\n+        self.tcx.allocate_bytes(bytes).into()\n     }\n \n     /// kind is `None` for statics\n@@ -109,8 +107,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         align: Align,\n         kind: Option<MemoryKind<M::MemoryKinds>>,\n     ) -> EvalResult<'tcx, Pointer> {\n-        let id = self.allocate_value(Allocation::undef(size, align), kind)?;\n-        Ok(Pointer::zero(id))\n+        self.allocate_value(Allocation::undef(size, align), kind).map(Pointer::from)\n     }\n \n     pub fn reallocate("}, {"sha": "9d51fcce7c7834224e31b0c352bc5ec101fe6617", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bbf2fd7159e5be5aee8d5c4e11f855862283d26/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bbf2fd7159e5be5aee8d5c4e11f855862283d26/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=3bbf2fd7159e5be5aee8d5c4e11f855862283d26", "patch": "@@ -210,7 +210,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 };\n                 let alloc = Machine::init_static(self, cid)?;\n                 Place::Ptr {\n-                    ptr: Pointer::zero(alloc).into(),\n+                    ptr: Scalar::Ptr(alloc.into()),\n                     align: layout.align,\n                     extra: PlaceExtra::None,\n                 }"}]}