{"sha": "981ac6d332ff19812532a4f64b6dc3f49114f75a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MWFjNmQzMzJmZjE5ODEyNTMyYTRmNjRiNmRjM2Y0OTExNGY3NWE=", "commit": {"author": {"name": "Luke Jones", "email": "luke.nukem.jones@gmail.com", "date": "2015-12-20T20:53:07Z"}, "committer": {"name": "Luke Jones", "email": "luke.nukem.jones@gmail.com", "date": "2015-12-20T20:53:07Z"}, "message": "Rewrite paragraph in 'match' to be more concise and readable. Start\ncorrecting use of ':' in sentences.\nThe colon `:` should be used only when the sentence preceeding it is a\ncomplete sentence. If this is not the case, then a `;` should be used;\nthis denotes that the following fragment is a part of the previous\nfragment.", "tree": {"sha": "dffccc309aac6f7ddd0d96c2b903fb4921872c00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dffccc309aac6f7ddd0d96c2b903fb4921872c00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/981ac6d332ff19812532a4f64b6dc3f49114f75a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/981ac6d332ff19812532a4f64b6dc3f49114f75a", "html_url": "https://github.com/rust-lang/rust/commit/981ac6d332ff19812532a4f64b6dc3f49114f75a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/981ac6d332ff19812532a4f64b6dc3f49114f75a/comments", "author": null, "committer": null, "parents": [{"sha": "33914f2713a34ca9337fb469786fb77db3f7ee91", "url": "https://api.github.com/repos/rust-lang/rust/commits/33914f2713a34ca9337fb469786fb77db3f7ee91", "html_url": "https://github.com/rust-lang/rust/commit/33914f2713a34ca9337fb469786fb77db3f7ee91"}], "stats": {"total": 28, "additions": 10, "deletions": 18}, "files": [{"sha": "fab8f22c6d0b3d6d6cdc3740499e5c6284e99a7a", "filename": "src/doc/book/documentation.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/981ac6d332ff19812532a4f64b6dc3f49114f75a/src%2Fdoc%2Fbook%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/981ac6d332ff19812532a4f64b6dc3f49114f75a/src%2Fdoc%2Fbook%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fdocumentation.md?ref=981ac6d332ff19812532a4f64b6dc3f49114f75a", "patch": "@@ -9,7 +9,7 @@ document your project.\n The Rust distribution includes a tool, `rustdoc`, that generates documentation.\n `rustdoc` is also used by Cargo through `cargo doc`.\n \n-Documentation can be generated in two ways: from source code, and from\n+Documentation can be generated in two ways; from source code, and from\n standalone Markdown files.\n \n ## Documenting source code\n@@ -73,7 +73,7 @@ hello.rs:4 }\n ```\n \n This [unfortunate error](https://github.com/rust-lang/rust/issues/22547) is\n-correct: documentation comments apply to the thing after them, and there's\n+correct; documentation comments apply to the thing after them, and there's\n nothing after that last comment.\n \n [rc-new]: https://doc.rust-lang.org/nightly/std/rc/struct.Rc.html#method.new\n@@ -385,7 +385,7 @@ error handling. Lets say you want the following,\n \n ```rust,ignore\n /// use std::io;\n-/// let mut input = String::new(); \n+/// let mut input = String::new();\n /// try!(io::stdin().read_line(&mut input));\n ```\n \n@@ -398,7 +398,7 @@ don't return anything so this will give a mismatched types error.\n /// ```\n /// use std::io;\n /// # fn foo() -> io::Result<()> {\n-/// let mut input = String::new(); \n+/// let mut input = String::new();\n /// try!(io::stdin().read_line(&mut input));\n /// # Ok(())\n /// # }"}, {"sha": "ce176e40b90228af8d725c2a79b8765aeb432de8", "filename": "src/doc/book/match.md", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/981ac6d332ff19812532a4f64b6dc3f49114f75a/src%2Fdoc%2Fbook%2Fmatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/981ac6d332ff19812532a4f64b6dc3f49114f75a/src%2Fdoc%2Fbook%2Fmatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fmatch.md?ref=981ac6d332ff19812532a4f64b6dc3f49114f75a", "patch": "@@ -23,26 +23,18 @@ match x {\n `match` takes an expression and then branches based on its value. Each \u2018arm\u2019 of\n the branch is of the form `val => expression`. When the value matches, that arm\u2019s\n expression will be evaluated. It\u2019s called `match` because of the term \u2018pattern\n-matching\u2019, which `match` is an implementation of. There\u2019s an [entire section on\n+matching\u2019, which `match` is an implementation of. There\u2019s a [separate section on\n patterns][patterns] that covers all the patterns that are possible here.\n \n [patterns]: patterns.html\n \n-So what\u2019s the big advantage? Well, there are a few. First of all, `match`\n-enforces \u2018exhaustiveness checking\u2019. Do you see that last arm, the one with the\n-underscore (`_`)? If we remove that arm, Rust will give us an error:\n+One of the many advantages of `match` is it enforces \u2018exhaustiveness checking\u2019. For example if we remove the last arm with the underscore `_`, the compiler will give us an error:\n \n ```text\n error: non-exhaustive patterns: `_` not covered\n ```\n \n-In other words, Rust is trying to tell us we forgot a value. Because `x` is an\n-integer, Rust knows that it can have a number of different values \u2013 for\n-example, `6`. Without the `_`, however, there is no arm that could match, and\n-so Rust refuses to compile the code. `_` acts like a \u2018catch-all arm\u2019. If none\n-of the other arms match, the arm with `_` will, and since we have this\n-catch-all arm, we now have an arm for every possible value of `x`, and so our\n-program will compile successfully.\n+Rust is telling us that we forgot a value. The compiler infers from `x` that it can have any positive 32bit value; for example 1 to 2,147,483,647. The `_` acts as a 'catch-all', and will catch all possible values that *aren't* specified in an arm of `match`. As you can see with the previous example, we provide `match` arms for integers 1-5, if `x` is 6 or any other value, then it is caught by `_`.\n \n `match` is also an expression, which means we can use it on the right-hand\n side of a `let` binding or directly where an expression is used:\n@@ -60,7 +52,7 @@ let number = match x {\n };\n ```\n \n-Sometimes it\u2019s a nice way of converting something from one type to another.\n+Sometimes it\u2019s a nice way of converting something from one type to another; in this example the integers are converted to `String`.\n \n # Matching on enums\n \n@@ -91,7 +83,7 @@ fn process_message(msg: Message) {\n \n Again, the Rust compiler checks exhaustiveness, so it demands that you\n have a match arm for every variant of the enum. If you leave one off, it\n-will give you a compile-time error unless you use `_`.\n+will give you a compile-time error unless you use `_` or provide all possible arms.\n \n Unlike the previous uses of `match`, you can\u2019t use the normal `if`\n statement to do this. You can use the [`if let`][if-let] statement,"}, {"sha": "6d6044c53005fbfa619fae34cc1fc949a72fab61", "filename": "src/doc/book/patterns.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/981ac6d332ff19812532a4f64b6dc3f49114f75a/src%2Fdoc%2Fbook%2Fpatterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/981ac6d332ff19812532a4f64b6dc3f49114f75a/src%2Fdoc%2Fbook%2Fpatterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fpatterns.md?ref=981ac6d332ff19812532a4f64b6dc3f49114f75a", "patch": "@@ -7,7 +7,7 @@ on a whirlwind tour of all of the things patterns can do!\n [bindings]: variable-bindings.html\n [match]: match.html\n \n-A quick refresher: you can match against literals directly, and `_` acts as an\n+A quick refresher; you can match against literals directly, and `_` acts as an\n \u2018any\u2019 case:\n \n ```rust"}]}