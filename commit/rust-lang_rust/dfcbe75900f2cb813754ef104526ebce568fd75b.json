{"sha": "dfcbe75900f2cb813754ef104526ebce568fd75b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmY2JlNzU5MDBmMmNiODEzNzU0ZWYxMDQ1MjZlYmNlNTY4ZmQ3NWI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-10T22:08:30Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-15T17:38:12Z"}, "message": "syntax_pos: Introduce a helper for checking whether a span comes from expansion", "tree": {"sha": "d091ddba9e494c82e0a208b048478ecfa3b8d8e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d091ddba9e494c82e0a208b048478ecfa3b8d8e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfcbe75900f2cb813754ef104526ebce568fd75b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfcbe75900f2cb813754ef104526ebce568fd75b", "html_url": "https://github.com/rust-lang/rust/commit/dfcbe75900f2cb813754ef104526ebce568fd75b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfcbe75900f2cb813754ef104526ebce568fd75b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7af19c279b8b7ea3d2c21fcbd67164af8d5d968", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7af19c279b8b7ea3d2c21fcbd67164af8d5d968", "html_url": "https://github.com/rust-lang/rust/commit/f7af19c279b8b7ea3d2c21fcbd67164af8d5d968"}], "stats": {"total": 45, "additions": 25, "deletions": 20}, "files": [{"sha": "d9ad34a5297f79f29472d73add46dc8d159f0b54", "filename": "src/librustc/lint/internal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfcbe75900f2cb813754ef104526ebce568fd75b/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfcbe75900f2cb813754ef104526ebce568fd75b/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=dfcbe75900f2cb813754ef104526ebce568fd75b", "patch": "@@ -108,7 +108,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TyTyKind {\n                             .help(\"try using `Ty` instead\")\n                             .emit();\n                         } else {\n-                            if ty.span.ctxt().outer_expn_info().is_some() {\n+                            if ty.span.from_expansion() {\n                                 return;\n                             }\n                             if let Some(t) = is_ty_or_ty_ctxt(cx, ty) {"}, {"sha": "32bcdebc1c46787f963ac9bd67d3c38a9b912275", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfcbe75900f2cb813754ef104526ebce568fd75b/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfcbe75900f2cb813754ef104526ebce568fd75b/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=dfcbe75900f2cb813754ef104526ebce568fd75b", "patch": "@@ -8,7 +8,7 @@ use crate::base;\n use crate::debuginfo::{self, VariableAccess, VariableKind, FunctionDebugContext};\n use crate::traits::*;\n \n-use syntax_pos::{DUMMY_SP, NO_EXPANSION, BytePos, Span};\n+use syntax_pos::{DUMMY_SP, BytePos, Span};\n use syntax::symbol::kw;\n \n use std::iter;\n@@ -120,7 +120,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         // In order to have a good line stepping behavior in debugger, we overwrite debug\n         // locations of macro expansions with that of the outermost expansion site\n         // (unless the crate is being compiled with `-Z debug-macros`).\n-        if source_info.span.ctxt() == NO_EXPANSION ||\n+        if !source_info.span.from_expansion() ||\n            self.cx.sess().opts.debugging_opts.debug_macros {\n             let scope = self.scope_metadata_for_loc(source_info.scope, source_info.span.lo());\n             (scope, source_info.span)"}, {"sha": "82160080a44d4c09bb6ff4f7959a005c169365b5", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfcbe75900f2cb813754ef104526ebce568fd75b/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfcbe75900f2cb813754ef104526ebce568fd75b/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=dfcbe75900f2cb813754ef104526ebce568fd75b", "patch": "@@ -42,7 +42,7 @@ use syntax::source_map::Spanned;\n use syntax::edition::Edition;\n use syntax::feature_gate::{self, AttributeGate, AttributeType};\n use syntax::feature_gate::{Stability, deprecated_attributes};\n-use syntax_pos::{BytePos, Span, SyntaxContext};\n+use syntax_pos::{BytePos, Span};\n use syntax::symbol::{Symbol, kw, sym};\n use syntax::errors::{Applicability, DiagnosticBuilder};\n use syntax::print::pprust::expr_to_string;\n@@ -78,7 +78,7 @@ impl EarlyLintPass for WhileTrue {\n         if let ast::ExprKind::While(cond, ..) = &e.node {\n             if let ast::ExprKind::Lit(ref lit) = pierce_parens(cond).node {\n                 if let ast::LitKind::Bool(true) = lit.node {\n-                    if lit.span.ctxt() == SyntaxContext::empty() {\n+                    if !lit.span.from_expansion() {\n                         let msg = \"denote infinite loops with `loop { ... }`\";\n                         let condition_span = cx.sess.source_map().def_span(e.span);\n                         cx.struct_span_lint(WHILE_TRUE, condition_span, msg)\n@@ -167,7 +167,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonShorthandFieldPatterns {\n                 if fieldpat.is_shorthand {\n                     continue;\n                 }\n-                if fieldpat.span.ctxt().outer_expn_info().is_some() {\n+                if fieldpat.span.from_expansion() {\n                     // Don't lint if this is a macro expansion: macro authors\n                     // shouldn't have to worry about this kind of style issue\n                     // (Issue #49588)\n@@ -1012,7 +1012,7 @@ impl UnreachablePub {\n         let mut applicability = Applicability::MachineApplicable;\n         match vis.node {\n             hir::VisibilityKind::Public if !cx.access_levels.is_reachable(id) => {\n-                if span.ctxt().outer_expn_info().is_some() {\n+                if span.from_expansion() {\n                     applicability = Applicability::MaybeIncorrect;\n                 }\n                 let def_span = cx.tcx.sess.source_map().def_span(span);"}, {"sha": "9cad8f58d41da52b6f821a44a956d16b963f107c", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfcbe75900f2cb813754ef104526ebce568fd75b/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfcbe75900f2cb813754ef104526ebce568fd75b/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=dfcbe75900f2cb813754ef104526ebce568fd75b", "patch": "@@ -518,7 +518,7 @@ impl EarlyLintPass for UnusedParens {\n                 // when a parenthesized token tree matched in one macro expansion is matched as\n                 // an expression in another and used as a fn/method argument (Issue #47775)\n                 if e.span.ctxt().outer_expn_info()\n-                    .map_or(false, |info| info.call_site.ctxt().outer_expn_info().is_some()) {\n+                    .map_or(false, |info| info.call_site.from_expansion()) {\n                         return;\n                 }\n                 let msg = format!(\"{} argument\", call_kind);"}, {"sha": "f0916c2ff3e2663f4ae8da105d94a78db8abd79a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfcbe75900f2cb813754ef104526ebce568fd75b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfcbe75900f2cb813754ef104526ebce568fd75b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=dfcbe75900f2cb813754ef104526ebce568fd75b", "patch": "@@ -274,7 +274,7 @@ impl<'tcx> Visitor<'tcx> for UsePlacementFinder {\n                 ItemKind::Use(..) => {\n                     // don't suggest placing a use before the prelude\n                     // import or other generated ones\n-                    if item.span.ctxt().outer_expn_info().is_none() {\n+                    if !item.span.from_expansion() {\n                         self.span = Some(item.span.shrink_to_lo());\n                         self.found_use = true;\n                         return;\n@@ -284,7 +284,7 @@ impl<'tcx> Visitor<'tcx> for UsePlacementFinder {\n                 ItemKind::ExternCrate(_) => {}\n                 // but place them before the first other item\n                 _ => if self.span.map_or(true, |span| item.span < span ) {\n-                    if item.span.ctxt().outer_expn_info().is_none() {\n+                    if !item.span.from_expansion() {\n                         // don't insert between attributes and an item\n                         if item.attrs.is_empty() {\n                             self.span = Some(item.span.shrink_to_lo());"}, {"sha": "0bbbbb8249c207c7b284e7d53dc4d4b41a340a40", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfcbe75900f2cb813754ef104526ebce568fd75b/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfcbe75900f2cb813754ef104526ebce568fd75b/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=dfcbe75900f2cb813754ef104526ebce568fd75b", "patch": "@@ -1156,7 +1156,7 @@ fn escape(s: String) -> String {\n // Helper function to determine if a span came from a\n // macro expansion or syntax extension.\n fn generated_code(span: Span) -> bool {\n-    span.ctxt() != NO_EXPANSION || span.is_dummy()\n+    span.from_expansion() || span.is_dummy()\n }\n \n // DefId::index is a newtype and so the JSON serialisation is ugly. Therefore"}, {"sha": "c72966edc5ae8847fb7199143f47c9b9658cf46f", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfcbe75900f2cb813754ef104526ebce568fd75b/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfcbe75900f2cb813754ef104526ebce568fd75b/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=dfcbe75900f2cb813754ef104526ebce568fd75b", "patch": "@@ -347,9 +347,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             sp,\n         );\n \n-        // Check the `expn_info()` to see if this is a macro; if so, it's hard to\n-        // extract the text and make a good suggestion, so don't bother.\n-        let is_macro = sp.ctxt().outer_expn_info().is_some();\n+        // If the span is from a macro, then it's hard to extract the text\n+        // and make a good suggestion, so don't bother.\n+        let is_macro = sp.from_expansion();\n \n         match (&expr.node, &expected.sty, &checked_ty.sty) {\n             (_, &ty::Ref(_, exp, _), &ty::Ref(_, check, _)) => match (&exp.sty, &check.sty) {"}, {"sha": "53024d97c3b134eb04581257bb55cddab50950b9", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfcbe75900f2cb813754ef104526ebce568fd75b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfcbe75900f2cb813754ef104526ebce568fd75b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=dfcbe75900f2cb813754ef104526ebce568fd75b", "patch": "@@ -985,7 +985,7 @@ impl hir::intravisit::Visitor<'tcx> for UsePlacementFinder<'tcx> {\n                 hir::ItemKind::Use(..) => {\n                     // Don't suggest placing a `use` before the prelude\n                     // import or other generated ones.\n-                    if item.span.ctxt().outer_expn_info().is_none() {\n+                    if !item.span.from_expansion() {\n                         self.span = Some(item.span.shrink_to_lo());\n                         self.found_use = true;\n                         return;\n@@ -995,7 +995,7 @@ impl hir::intravisit::Visitor<'tcx> for UsePlacementFinder<'tcx> {\n                 hir::ItemKind::ExternCrate(_) => {}\n                 // ...but do place them before the first other item.\n                 _ => if self.span.map_or(true, |span| item.span < span ) {\n-                    if item.span.ctxt().outer_expn_info().is_none() {\n+                    if !item.span.from_expansion() {\n                         // Don't insert between attributes and an item.\n                         if item.attrs.is_empty() {\n                             self.span = Some(item.span.shrink_to_lo());"}, {"sha": "3b0af88f6510e9998f310af33bbc4764c8545801", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfcbe75900f2cb813754ef104526ebce568fd75b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfcbe75900f2cb813754ef104526ebce568fd75b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=dfcbe75900f2cb813754ef104526ebce568fd75b", "patch": "@@ -1101,7 +1101,7 @@ impl<'a> Parser<'a> {\n \n     crate fn process_potential_macro_variable(&mut self) {\n         self.token = match self.token.kind {\n-            token::Dollar if self.token.span.ctxt() != SyntaxContext::empty() &&\n+            token::Dollar if self.token.span.from_expansion() &&\n                              self.look_ahead(1, |t| t.is_ident()) => {\n                 self.bump();\n                 let name = match self.token.kind {"}, {"sha": "4132b99cf41603913474cd82d40166413b6eea8d", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfcbe75900f2cb813754ef104526ebce568fd75b/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfcbe75900f2cb813754ef104526ebce568fd75b/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=dfcbe75900f2cb813754ef104526ebce568fd75b", "patch": "@@ -255,7 +255,7 @@ impl HygieneData {\n     }\n \n     fn walk_chain(&self, mut span: Span, to: SyntaxContext) -> Span {\n-        while span.ctxt() != crate::NO_EXPANSION && span.ctxt() != to {\n+        while span.from_expansion() && span.ctxt() != to {\n             if let Some(info) = self.expn_info(self.outer_expn(span.ctxt())) {\n                 span = info.call_site;\n             } else {"}, {"sha": "793710b453f24ba4699a3c2bfcf88bb6b7b1fd6f", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfcbe75900f2cb813754ef104526ebce568fd75b/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfcbe75900f2cb813754ef104526ebce568fd75b/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=dfcbe75900f2cb813754ef104526ebce568fd75b", "patch": "@@ -288,6 +288,12 @@ impl Span {\n         span.lo.0 == 0 && span.hi.0 == 0\n     }\n \n+    /// Returns `true` if this span comes from a macro or desugaring.\n+    #[inline]\n+    pub fn from_expansion(self) -> bool {\n+        self.ctxt() != SyntaxContext::empty()\n+    }\n+\n     /// Returns a new span representing an empty span at the beginning of this span\n     #[inline]\n     pub fn shrink_to_lo(self) -> Span {"}, {"sha": "6f5a458a874e1b4a6d73b5e3236d15fe63d8f660", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfcbe75900f2cb813754ef104526ebce568fd75b/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfcbe75900f2cb813754ef104526ebce568fd75b/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=dfcbe75900f2cb813754ef104526ebce568fd75b", "patch": "@@ -14,7 +14,6 @@ use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::str;\n \n-use crate::hygiene::SyntaxContext;\n use crate::{Span, DUMMY_SP, GLOBALS};\n \n #[cfg(test)]\n@@ -851,7 +850,7 @@ impl fmt::Display for Ident {\n \n impl Encodable for Ident {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        if self.span.ctxt().modern() == SyntaxContext::empty() {\n+        if !self.span.modern().from_expansion() {\n             s.emit_str(&self.as_str())\n         } else { // FIXME(jseyfried): intercrate hygiene\n             let mut string = \"#\".to_owned();"}]}