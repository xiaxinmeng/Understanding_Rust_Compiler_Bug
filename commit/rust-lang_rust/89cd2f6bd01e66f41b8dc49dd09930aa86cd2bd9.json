{"sha": "89cd2f6bd01e66f41b8dc49dd09930aa86cd2bd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5Y2QyZjZiZDAxZTY2ZjQxYjhkYzQ5ZGQwOTkzMGFhODZjZDJiZDk=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-05-14T02:59:43Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-05-14T21:26:10Z"}, "message": "Enforce that self doesn't escape from a class\n\nCloses #2294", "tree": {"sha": "122d27dbed85bdb6e6931a2227abcbabb05a14e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/122d27dbed85bdb6e6931a2227abcbabb05a14e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89cd2f6bd01e66f41b8dc49dd09930aa86cd2bd9", "comment_count": 6, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89cd2f6bd01e66f41b8dc49dd09930aa86cd2bd9", "html_url": "https://github.com/rust-lang/rust/commit/89cd2f6bd01e66f41b8dc49dd09930aa86cd2bd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89cd2f6bd01e66f41b8dc49dd09930aa86cd2bd9/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11e9947ff55b4c8a4f9c8ce875bfff6f2016e8b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/11e9947ff55b4c8a4f9c8ce875bfff6f2016e8b4", "html_url": "https://github.com/rust-lang/rust/commit/11e9947ff55b4c8a4f9c8ce875bfff6f2016e8b4"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "efa32a5884da6b7c55482f4c54cd308625f42b59", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89cd2f6bd01e66f41b8dc49dd09930aa86cd2bd9/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89cd2f6bd01e66f41b8dc49dd09930aa86cd2bd9/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=89cd2f6bd01e66f41b8dc49dd09930aa86cd2bd9", "patch": "@@ -186,6 +186,8 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n          bind middle::check_loop::check_crate(ty_cx, crate));\n     time(time_passes, \"alt checking\",\n          bind middle::check_alt::check_crate(ty_cx, crate));\n+    time(time_passes, \"self checking\",\n+         bind middle::check_self::check_crate(ty_cx, crate));\n     time(time_passes, \"typestate checking\",\n          bind middle::tstate::ck::check_crate(ty_cx, crate));\n     let (_root_map, mutbl_map) = time("}, {"sha": "b1d2c4b8215d0928fd392b150adb85aaee97860e", "filename": "src/rustc/middle/check_self.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/89cd2f6bd01e66f41b8dc49dd09930aa86cd2bd9/src%2Frustc%2Fmiddle%2Fcheck_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89cd2f6bd01e66f41b8dc49dd09930aa86cd2bd9/src%2Frustc%2Fmiddle%2Fcheck_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_self.rs?ref=89cd2f6bd01e66f41b8dc49dd09930aa86cd2bd9", "patch": "@@ -0,0 +1,60 @@\n+/*\n+  This module checks that within a class, \"self\" doesn't escape.\n+  That is, it rejects any class in which \"self\" occurs other than\n+  as the left-hand side of a field reference.\n+ */\n+import syntax::ast::*;\n+import syntax::visit::*;\n+import driver::session::session;\n+import std::map::hashmap;\n+import resolve::def_map;\n+\n+fn check_crate(cx: ty::ctxt, crate: @crate) {\n+    visit_crate(*crate, cx, mk_vt(@{\n+        visit_item: bind check_item(_, _, _)\n+        with *default_visitor()\n+    }));\n+    cx.sess.abort_if_errors();\n+}\n+\n+fn check_item(it: @item, &&cx: ty::ctxt, &&_v: vt<ty::ctxt>) {\n+    alt it.node {\n+      item_class(*) {\n+          visit_item(it, cx, check_self_visitor());\n+      }\n+      _ {}\n+    }\n+}\n+\n+fn check_self_visitor() -> vt<ty::ctxt> {\n+    mk_vt(@{\n+        visit_expr: bind check_self_expr(_, _, _)\n+                with *default_visitor()\n+    })\n+}\n+\n+fn check_self_expr(e: @expr, &&cx: ty::ctxt, &&v: vt<ty::ctxt>) {\n+   alt e.node {\n+     expr_field(@{node: expr_path(p),_},_,_) {\n+       // self is ok here; don't descend\n+     }\n+     expr_path(_) {\n+       alt cx.def_map.find(e.id) {\n+          some(def_self(_)) {\n+            cx.sess.span_err(e.span, \"can't return self or store \\\n+              it in a data structure\");\n+          }\n+          _ {}\n+       }\n+     }\n+     _ { visit_expr(e, cx, v); }\n+  }\n+}\n+\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// End:"}, {"sha": "41635f8fec77f77728d536d07f0404acc0bc6e2d", "filename": "src/rustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89cd2f6bd01e66f41b8dc49dd09930aa86cd2bd9/src%2Frustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/89cd2f6bd01e66f41b8dc49dd09930aa86cd2bd9/src%2Frustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Frustc.rc?ref=89cd2f6bd01e66f41b8dc49dd09930aa86cd2bd9", "patch": "@@ -55,6 +55,7 @@ mod middle {\n     mod check_loop;\n     mod check_alt;\n     mod check_const;\n+    mod check_self;\n     mod lint;\n     mod borrowck;\n     mod alias;"}, {"sha": "292a4aa3947ea57159d3cceaca89a275f5a719ec", "filename": "src/test/compile-fail/issue-2294.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89cd2f6bd01e66f41b8dc49dd09930aa86cd2bd9/src%2Ftest%2Fcompile-fail%2Fissue-2294.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89cd2f6bd01e66f41b8dc49dd09930aa86cd2bd9/src%2Ftest%2Fcompile-fail%2Fissue-2294.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2294.rs?ref=89cd2f6bd01e66f41b8dc49dd09930aa86cd2bd9", "patch": "@@ -0,0 +1,6 @@\n+class cat {\n+  fn kitty() -> cat { self } //! ERROR: can't return self or store it in a data structure\n+  new() { }\n+}\n+\n+fn main() {}"}]}