{"sha": "454b9d2d1f742d25f95b956649a9a6d92b522da4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NGI5ZDJkMWY3NDJkMjVmOTViOTU2NjQ5YTlhNmQ5MmI1MjJkYTQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-07-01T21:30:33Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-07-01T21:32:57Z"}, "message": "librustc: Fix `expr_use_visitor` (and, transitively, the borrow check)\nwith overloaded calls.\n\nThis enforces the mutability and borrow restrictions around overloaded\ncalls.\n\nCloses #14774.\n\n[breaking-change]", "tree": {"sha": "b8afca91bc021fe0f3871bf19a08f570a1cf2847", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8afca91bc021fe0f3871bf19a08f570a1cf2847"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/454b9d2d1f742d25f95b956649a9a6d92b522da4", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/454b9d2d1f742d25f95b956649a9a6d92b522da4", "html_url": "https://github.com/rust-lang/rust/commit/454b9d2d1f742d25f95b956649a9a6d92b522da4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/454b9d2d1f742d25f95b956649a9a6d92b522da4/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14c0b3ab42a8f963b5e766605f31028e30cd9c0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/14c0b3ab42a8f963b5e766605f31028e30cd9c0a", "html_url": "https://github.com/rust-lang/rust/commit/14c0b3ab42a8f963b5e766605f31028e30cd9c0a"}], "stats": {"total": 181, "additions": 171, "deletions": 10}, "files": [{"sha": "1e06b3b1fd46393a0434ddd09230667307c76c01", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 97, "deletions": 10, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/454b9d2d1f742d25f95b956649a9a6d92b522da4/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454b9d2d1f742d25f95b956649a9a6d92b522da4/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=454b9d2d1f742d25f95b956649a9a6d92b522da4", "patch": "@@ -19,13 +19,14 @@ use middle::def;\n use middle::freevars;\n use middle::pat_util;\n use middle::ty;\n-use middle::typeck::MethodCall;\n+use middle::typeck::{MethodCall, MethodObject, MethodOrigin, MethodParam};\n+use middle::typeck::{MethodStatic};\n use middle::typeck;\n-use syntax::ast;\n-use syntax::codemap::{Span};\n use util::ppaux::Repr;\n \n use std::gc::Gc;\n+use syntax::ast;\n+use syntax::codemap::Span;\n \n ///////////////////////////////////////////////////////////////////////////\n // The Delegate trait\n@@ -101,6 +102,74 @@ pub enum MutateMode {\n     WriteAndRead, // x += y\n }\n \n+enum OverloadedCallType {\n+    FnOverloadedCall,\n+    FnMutOverloadedCall,\n+    FnOnceOverloadedCall,\n+}\n+\n+impl OverloadedCallType {\n+    fn from_trait_id(tcx: &ty::ctxt, trait_id: ast::DefId)\n+                     -> OverloadedCallType {\n+        for &(maybe_function_trait, overloaded_call_type) in [\n+            (tcx.lang_items.fn_once_trait(), FnOnceOverloadedCall),\n+            (tcx.lang_items.fn_mut_trait(), FnMutOverloadedCall),\n+            (tcx.lang_items.fn_trait(), FnOverloadedCall)\n+        ].iter() {\n+            match maybe_function_trait {\n+                Some(function_trait) if function_trait == trait_id => {\n+                    return overloaded_call_type\n+                }\n+                _ => continue,\n+            }\n+        }\n+\n+        tcx.sess.bug(\"overloaded call didn't map to known function trait\")\n+    }\n+\n+    fn from_method_id(tcx: &ty::ctxt, method_id: ast::DefId)\n+                      -> OverloadedCallType {\n+        let method_descriptor =\n+            match tcx.methods.borrow_mut().find(&method_id) {\n+                None => {\n+                    tcx.sess.bug(\"overloaded call method wasn't in method \\\n+                                  map\")\n+                }\n+                Some(ref method_descriptor) => (*method_descriptor).clone(),\n+            };\n+        let impl_id = match method_descriptor.container {\n+            ty::TraitContainer(_) => {\n+                tcx.sess.bug(\"statically resolved overloaded call method \\\n+                              belonged to a trait?!\")\n+            }\n+            ty::ImplContainer(impl_id) => impl_id,\n+        };\n+        let trait_ref = match ty::impl_trait_ref(tcx, impl_id) {\n+            None => {\n+                tcx.sess.bug(\"statically resolved overloaded call impl \\\n+                              didn't implement a trait?!\")\n+            }\n+            Some(ref trait_ref) => (*trait_ref).clone(),\n+        };\n+        OverloadedCallType::from_trait_id(tcx, trait_ref.def_id)\n+    }\n+\n+    fn from_method_origin(tcx: &ty::ctxt, origin: &MethodOrigin)\n+                          -> OverloadedCallType {\n+        match *origin {\n+            MethodStatic(def_id) => {\n+                OverloadedCallType::from_method_id(tcx, def_id)\n+            }\n+            MethodParam(ref method_param) => {\n+                OverloadedCallType::from_trait_id(tcx, method_param.trait_id)\n+            }\n+            MethodObject(ref method_object) => {\n+                OverloadedCallType::from_trait_id(tcx, method_object.trait_id)\n+            }\n+        }\n+    }\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // The ExprUseVisitor type\n //\n@@ -413,19 +482,37 @@ impl<'d,'t,TYPER:mc::Typer> ExprUseVisitor<'d,'t,TYPER> {\n                 }\n             }\n             _ => {\n-                match self.tcx()\n-                          .method_map\n-                          .borrow()\n-                          .find(&MethodCall::expr(call.id)) {\n-                    Some(_) => {\n-                        // FIXME(#14774, pcwalton): Implement this.\n+                let overloaded_call_type =\n+                    match self.tcx()\n+                              .method_map\n+                              .borrow()\n+                              .find(&MethodCall::expr(call.id)) {\n+                    Some(ref method_callee) => {\n+                        OverloadedCallType::from_method_origin(\n+                            self.tcx(),\n+                            &method_callee.origin)\n                     }\n                     None => {\n                         self.tcx().sess.span_bug(\n                             callee.span,\n                             format!(\"unexpected callee type {}\",\n-                                    callee_ty.repr(self.tcx())).as_slice());\n+                                    callee_ty.repr(self.tcx())).as_slice())\n+                    }\n+                };\n+                match overloaded_call_type {\n+                    FnMutOverloadedCall => {\n+                        self.borrow_expr(callee,\n+                                         ty::ReScope(call.id),\n+                                         ty::MutBorrow,\n+                                         ClosureInvocation);\n+                    }\n+                    FnOverloadedCall => {\n+                        self.borrow_expr(callee,\n+                                         ty::ReScope(call.id),\n+                                         ty::ImmBorrow,\n+                                         ClosureInvocation);\n                     }\n+                    FnOnceOverloadedCall => self.consume_expr(callee),\n                 }\n             }\n         }"}, {"sha": "349a20313fa8c7b6a8edec1a574a3d74cc65cff1", "filename": "src/test/compile-fail/borrowck-overloaded-call.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/454b9d2d1f742d25f95b956649a9a6d92b522da4/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454b9d2d1f742d25f95b956649a9a6d92b522da4/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-call.rs?ref=454b9d2d1f742d25f95b956649a9a6d92b522da4", "patch": "@@ -0,0 +1,74 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(overloaded_calls)]\n+\n+use std::ops::{Fn, FnMut, FnOnce};\n+\n+struct SFn {\n+    x: int,\n+    y: int,\n+}\n+\n+impl Fn<(int,),int> for SFn {\n+    fn call(&self, (z,): (int,)) -> int {\n+        self.x * self.y * z\n+    }\n+}\n+\n+struct SFnMut {\n+    x: int,\n+    y: int,\n+}\n+\n+impl FnMut<(int,),int> for SFnMut {\n+    fn call_mut(&mut self, (z,): (int,)) -> int {\n+        self.x * self.y * z\n+    }\n+}\n+\n+struct SFnOnce {\n+    x: String,\n+}\n+\n+impl FnOnce<(String,),uint> for SFnOnce {\n+    fn call_once(self, (z,): (String,)) -> uint {\n+        self.x.len() + z.len()\n+    }\n+}\n+\n+fn f() {\n+    let mut s = SFn {\n+        x: 1,\n+        y: 2,\n+    };\n+    let sp = &mut s;\n+    s(3);   //~ ERROR cannot borrow `s` as immutable because it is also borrowed as mutable\n+    //~^ ERROR cannot borrow `s` as immutable because it is also borrowed as mutable\n+}\n+\n+fn g() {\n+    let s = SFnMut {\n+        x: 1,\n+        y: 2,\n+    };\n+    s(3);   //~ ERROR cannot borrow immutable local variable `s` as mutable\n+}\n+\n+fn h() {\n+    let s = SFnOnce {\n+        x: \"hello\".to_string(),\n+    };\n+    s(\" world\".to_string());\n+    s(\" world\".to_string());    //~ ERROR use of moved value: `s`\n+}\n+\n+fn main() {}\n+"}]}