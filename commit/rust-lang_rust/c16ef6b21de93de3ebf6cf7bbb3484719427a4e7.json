{"sha": "c16ef6b21de93de3ebf6cf7bbb3484719427a4e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNmVmNmIyMWRlOTNkZTNlYmY2Y2Y3YmJiMzQ4NDcxOTQyN2E0ZTc=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-09-24T13:09:15Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-12-02T13:30:29Z"}, "message": "Remove interior mutability in mir predecessors cache", "tree": {"sha": "3af6e19b85de35dd54cf160cf3070131571684d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3af6e19b85de35dd54cf160cf3070131571684d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c16ef6b21de93de3ebf6cf7bbb3484719427a4e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c16ef6b21de93de3ebf6cf7bbb3484719427a4e7", "html_url": "https://github.com/rust-lang/rust/commit/c16ef6b21de93de3ebf6cf7bbb3484719427a4e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c16ef6b21de93de3ebf6cf7bbb3484719427a4e7/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4af3ee8ee2a2bc1286b021db7600ba990359cf3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4af3ee8ee2a2bc1286b021db7600ba990359cf3f", "html_url": "https://github.com/rust-lang/rust/commit/4af3ee8ee2a2bc1286b021db7600ba990359cf3f"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "52848cc435a62fa505d46ef0d93407eca507c58b", "filename": "src/librustc/mir/cache.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c16ef6b21de93de3ebf6cf7bbb3484719427a4e7/src%2Flibrustc%2Fmir%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c16ef6b21de93de3ebf6cf7bbb3484719427a4e7/src%2Flibrustc%2Fmir%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fcache.rs?ref=c16ef6b21de93de3ebf6cf7bbb3484719427a4e7", "patch": "@@ -1,13 +1,12 @@\n use rustc_index::vec::IndexVec;\n-use rustc_data_structures::sync::{RwLock, MappedReadGuard, ReadGuard};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_serialize::{Encodable, Encoder, Decodable, Decoder};\n use crate::ich::StableHashingContext;\n use crate::mir::{Body, BasicBlock};\n \n #[derive(Clone, Debug)]\n pub struct Cache {\n-    predecessors: RwLock<Option<IndexVec<BasicBlock, Vec<BasicBlock>>>>\n+    predecessors: Option<IndexVec<BasicBlock, Vec<BasicBlock>>>\n }\n \n \n@@ -32,24 +31,29 @@ impl<'a> HashStable<StableHashingContext<'a>> for Cache {\n impl Cache {\n     pub fn new() -> Self {\n         Cache {\n-            predecessors: RwLock::new(None)\n+            predecessors: None\n         }\n     }\n \n-    pub fn invalidate(&self) {\n+    pub fn invalidate(&mut self) {\n         // FIXME: consider being more fine-grained\n-        *self.predecessors.borrow_mut() = None;\n+        self.predecessors = None;\n     }\n \n-    pub fn predecessors(\n-        &self,\n+    pub fn predecessors_ref(&self) -> &IndexVec<BasicBlock, Vec<BasicBlock>> {\n+        assert!(self.predecessors.is_some());\n+        self.predecessors.as_ref().unwrap()\n+    }\n+\n+    pub fn predecessors_mut(\n+        &mut self,\n         body: &Body<'_>\n-    ) -> MappedReadGuard<'_, IndexVec<BasicBlock, Vec<BasicBlock>>> {\n-        if self.predecessors.borrow().is_none() {\n-            *self.predecessors.borrow_mut() = Some(calculate_predecessors(body));\n+    ) -> &mut IndexVec<BasicBlock, Vec<BasicBlock>> {\n+        if self.predecessors.is_none() {\n+            self.predecessors = Some(calculate_predecessors(body));\n         }\n \n-        ReadGuard::map(self.predecessors.borrow(), |p| p.as_ref().unwrap())\n+        self.predecessors.as_mut().unwrap()\n     }\n }\n "}, {"sha": "396953aa41208bd9ea64a26c9888351638ede151", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c16ef6b21de93de3ebf6cf7bbb3484719427a4e7/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c16ef6b21de93de3ebf6cf7bbb3484719427a4e7/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=c16ef6b21de93de3ebf6cf7bbb3484719427a4e7", "patch": "@@ -25,7 +25,6 @@ use rustc_data_structures::graph::dominators::{dominators, Dominators};\n use rustc_data_structures::graph::{self, GraphPredecessors, GraphSuccessors};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_data_structures::sync::Lrc;\n-use rustc_data_structures::sync::MappedReadGuard;\n use rustc_macros::HashStable;\n use rustc_serialize::{Encodable, Decodable};\n use smallvec::SmallVec;\n@@ -218,13 +217,19 @@ impl<'tcx> Body<'tcx> {\n     }\n \n     #[inline]\n-    pub fn predecessors(&self) -> MappedReadGuard<'_, IndexVec<BasicBlock, Vec<BasicBlock>>> {\n-        self.cache.predecessors(self)\n+    pub fn predecessors_ref(&self) -> &IndexVec<BasicBlock, Vec<BasicBlock>> {\n+        self.cache.predecessors_ref()\n     }\n \n     #[inline]\n-    pub fn predecessors_for(&self, bb: BasicBlock) -> MappedReadGuard<'_, Vec<BasicBlock>> {\n-        MappedReadGuard::map(self.predecessors(), |p| &p[bb])\n+    pub fn predecessors_mut(&mut self) -> &mut IndexVec<BasicBlock, Vec<BasicBlock>> {\n+        // TODO(nashenas88) figure out a way to get rid of this clone\n+        self.cache.predecessors_mut(&self.clone())\n+    }\n+\n+    #[inline]\n+    pub fn predecessors_for(&self, bb: BasicBlock) -> &Vec<BasicBlock> {\n+        &self.predecessors_ref()[bb]\n     }\n \n     #[inline]"}, {"sha": "bc54f48e578e417fa72f557c6bbb4093f8c2a894", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c16ef6b21de93de3ebf6cf7bbb3484719427a4e7/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c16ef6b21de93de3ebf6cf7bbb3484719427a4e7/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=c16ef6b21de93de3ebf6cf7bbb3484719427a4e7", "patch": "@@ -39,7 +39,7 @@ impl<'tcx> MirPass<'tcx> for AddCallGuards {\n impl AddCallGuards {\n     pub fn add_call_guards(&self, body: &mut Body<'_>) {\n         let pred_count: IndexVec<_, _> =\n-            body.predecessors().iter().map(|ps| ps.len()).collect();\n+            body.predecessors_mut().iter().map(|ps| ps.len()).collect();\n \n         // We need a place to store the new blocks generated\n         let mut new_blocks = Vec::new();"}, {"sha": "4b67abca0f06dddf4854f6e6c98466fa86cc04c2", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c16ef6b21de93de3ebf6cf7bbb3484719427a4e7/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c16ef6b21de93de3ebf6cf7bbb3484719427a4e7/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=c16ef6b21de93de3ebf6cf7bbb3484719427a4e7", "patch": "@@ -94,7 +94,7 @@ pub fn liveness_of_locals(\n         dirty_queue.insert(bb);\n     }\n \n-    let predecessors = body.predecessors();\n+    let predecessors = body.predecessors_ref();\n \n     while let Some(bb) = dirty_queue.pop() {\n         // bits = use \u222a (bits - def)"}]}