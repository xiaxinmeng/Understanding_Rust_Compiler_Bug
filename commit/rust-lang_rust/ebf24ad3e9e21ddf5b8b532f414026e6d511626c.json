{"sha": "ebf24ad3e9e21ddf5b8b532f414026e6d511626c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZjI0YWQzZTllMjFkZGY1YjhiNTMyZjQxNDAyNmU2ZDUxMTYyNmM=", "commit": {"author": {"name": "Milton Mazzarri", "email": "milmazz@gmail.com", "date": "2017-07-01T04:24:35Z"}, "committer": {"name": "Milton Mazzarri", "email": "milmazz@gmail.com", "date": "2017-07-01T04:24:35Z"}, "message": "bootstrap: Fix some PEP8 issues\n\nThis commit also adds a few missing docstrings", "tree": {"sha": "75ebdc8bd390e6de43ebf6117f04b23314590a52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75ebdc8bd390e6de43ebf6117f04b23314590a52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebf24ad3e9e21ddf5b8b532f414026e6d511626c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1cAKthe3gOGICgTvn0GT8rWlWP4FAllXJFwACgkQn0GT8rWl\nWP5XGg/+M1bT3mK0CU618vizPLyoXV9YmL0BSHR1nJNpSPKjsm762rPKA77UhRuY\nLPx4bz0/58pc4BjvFOmYtzFJVi9IYB0OG60aCt5Ut+rdu70bHbfsvh/S+I2g/Mun\n4wuKK0m1GQuOon38TppL6lqr4uH0iCoV4Z2gApGVbHkE1tImjHm3j8/45kc1BYwz\nawz27WKMg8VPNWGpfZCGgO3bhvgveZLlw1P+PinXr0AruZojZKAg9iZbYyWpC/A4\n/G2lZXtY//reLpvWYg/gTvSqBB8VR6sZYECQ2lCDdWidfYhXh/QkNhU1ZJ12R28D\nDZPX+GTWQGSarogHLs55yhaZ+MG/3QfaewTdQfL1sYcCAlGRCUTWf+OtIp/UmIL4\nntWs2XAHeUiNVIKtavnzXzwksD8jt4T7veEDTNN0NJYdEGAFlEYp1CGxGCQCIZFb\nWDWGIBrTqiskjx/IPDLmNET9VFgryqvvJIWtogf1UYR4bFVAAJhWqBNFU5SJi7N+\n3/Mrwt7iijd1z5RnS6TjYMC1b1lLW/x7FtbKGB7mUDR/Rr2qHlwMzq2ab5l/6zaM\n/CKp+PHwAtqBDA3I7zGradr0G53gMZqJbUimG4k+V8PIFonqWyOzQ+4OSNgVSjDJ\nuhK8QIAv6AoiH6zEetTr2gOy3PoUKKPCKAR3667EBnWoieEeqPI=\n=NC9/\n-----END PGP SIGNATURE-----", "payload": "tree 75ebdc8bd390e6de43ebf6117f04b23314590a52\nparent 7d89b20669be33c2388ad97a3ee90fca4e5684ec\nauthor Milton Mazzarri <milmazz@gmail.com> 1498883075 -0500\ncommitter Milton Mazzarri <milmazz@gmail.com> 1498883075 -0500\n\nbootstrap: Fix some PEP8 issues\n\nThis commit also adds a few missing docstrings\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebf24ad3e9e21ddf5b8b532f414026e6d511626c", "html_url": "https://github.com/rust-lang/rust/commit/ebf24ad3e9e21ddf5b8b532f414026e6d511626c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebf24ad3e9e21ddf5b8b532f414026e6d511626c/comments", "author": {"login": "milmazz", "id": 34700, "node_id": "MDQ6VXNlcjM0NzAw", "avatar_url": "https://avatars.githubusercontent.com/u/34700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/milmazz", "html_url": "https://github.com/milmazz", "followers_url": "https://api.github.com/users/milmazz/followers", "following_url": "https://api.github.com/users/milmazz/following{/other_user}", "gists_url": "https://api.github.com/users/milmazz/gists{/gist_id}", "starred_url": "https://api.github.com/users/milmazz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/milmazz/subscriptions", "organizations_url": "https://api.github.com/users/milmazz/orgs", "repos_url": "https://api.github.com/users/milmazz/repos", "events_url": "https://api.github.com/users/milmazz/events{/privacy}", "received_events_url": "https://api.github.com/users/milmazz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "milmazz", "id": 34700, "node_id": "MDQ6VXNlcjM0NzAw", "avatar_url": "https://avatars.githubusercontent.com/u/34700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/milmazz", "html_url": "https://github.com/milmazz", "followers_url": "https://api.github.com/users/milmazz/followers", "following_url": "https://api.github.com/users/milmazz/following{/other_user}", "gists_url": "https://api.github.com/users/milmazz/gists{/gist_id}", "starred_url": "https://api.github.com/users/milmazz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/milmazz/subscriptions", "organizations_url": "https://api.github.com/users/milmazz/orgs", "repos_url": "https://api.github.com/users/milmazz/repos", "events_url": "https://api.github.com/users/milmazz/events{/privacy}", "received_events_url": "https://api.github.com/users/milmazz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d89b20669be33c2388ad97a3ee90fca4e5684ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d89b20669be33c2388ad97a3ee90fca4e5684ec", "html_url": "https://github.com/rust-lang/rust/commit/7d89b20669be33c2388ad97a3ee90fca4e5684ec"}], "stats": {"total": 53, "additions": 34, "deletions": 19}, "files": [{"sha": "49e073dcc13908cde3ead066ac4132b3164b0b84", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 34, "deletions": 19, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ebf24ad3e9e21ddf5b8b532f414026e6d511626c/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/ebf24ad3e9e21ddf5b8b532f414026e6d511626c/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=ebf24ad3e9e21ddf5b8b532f414026e6d511626c", "patch": "@@ -25,10 +25,11 @@\n \n \n def get(url, path, verbose=False):\n-    sha_url = url + \".sha256\"\n+    suffix = '.sha256'\n+    sha_url = url + suffix\n     with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n         temp_path = temp_file.name\n-    with tempfile.NamedTemporaryFile(suffix=\".sha256\", delete=False) as sha_file:\n+    with tempfile.NamedTemporaryFile(suffix=suffix, delete=False) as sha_file:\n         sha_path = sha_file.name\n \n     try:\n@@ -55,6 +56,7 @@ def get(url, path, verbose=False):\n \n \n def delete_if_present(path, verbose):\n+    \"\"\"Remove the given file if present\"\"\"\n     if os.path.isfile(path):\n         if verbose:\n             print(\"removing \" + path)\n@@ -92,12 +94,13 @@ def _download(path, url, probably_big, verbose, exception):\n \n \n def verify(path, sha_path, verbose):\n+    \"\"\"Check if the sha256 sum of the given path is valid\"\"\"\n     if verbose:\n         print(\"verifying \" + path)\n-    with open(path, \"rb\") as f:\n-        found = hashlib.sha256(f.read()).hexdigest()\n-    with open(sha_path, \"r\") as f:\n-        expected = f.readline().split()[0]\n+    with open(path, \"rb\") as source:\n+        found = hashlib.sha256(source.read()).hexdigest()\n+    with open(sha_path, \"r\") as sha256sum:\n+        expected = sha256sum.readline().split()[0]\n     verified = found == expected\n     if not verified:\n         print(\"invalid checksum:\\n\"\n@@ -107,6 +110,7 @@ def verify(path, sha_path, verbose):\n \n \n def unpack(tarball, dst, verbose=False, match=None):\n+    \"\"\"Unpack the given tarball file\"\"\"\n     print(\"extracting \" + tarball)\n     fname = os.path.basename(tarball).replace(\".tar.gz\", \"\")\n     with contextlib.closing(tarfile.open(tarball)) as tar:\n@@ -128,6 +132,7 @@ def unpack(tarball, dst, verbose=False, match=None):\n             shutil.move(tp, fp)\n     shutil.rmtree(os.path.join(dst, fname))\n \n+\n def run(args, verbose=False, exception=False, **kwargs):\n     if verbose:\n         print(\"running: \" + ' '.join(args))\n@@ -245,7 +250,8 @@ def fix_executable(self, fname):\n             return\n \n         # At this point we're pretty sure the user is running NixOS\n-        print(\"info: you seem to be running NixOS. Attempting to patch \" + fname)\n+        nix_os_msg = \"info: you seem to be running NixOS. Attempting to patch\"\n+        print(\" \".join([nix_os_msg, fname]))\n \n         try:\n             interpreter = subprocess.check_output(\n@@ -293,18 +299,22 @@ def stage0_cargo_channel(self):\n         return self._cargo_channel\n \n     def rustc_stamp(self):\n+        \"\"\"Return the path for .rustc-stamp\"\"\"\n         return os.path.join(self.bin_root(), '.rustc-stamp')\n \n     def cargo_stamp(self):\n+        \"\"\"Return the path for .cargo-stamp\"\"\"\n         return os.path.join(self.bin_root(), '.cargo-stamp')\n \n     def rustc_out_of_date(self):\n+        \"\"\"Check if rustc is out of date\"\"\"\n         if not os.path.exists(self.rustc_stamp()) or self.clean:\n             return True\n         with open(self.rustc_stamp(), 'r') as f:\n             return self.stage0_date() != f.read()\n \n     def cargo_out_of_date(self):\n+        \"\"\"Check if cargo is out of date\"\"\"\n         if not os.path.exists(self.cargo_stamp()) or self.clean:\n             return True\n         with open(self.cargo_stamp(), 'r') as f:\n@@ -357,16 +367,15 @@ def get_string(self, line):\n     def exe_suffix(self):\n         if sys.platform == 'win32':\n             return '.exe'\n-        else:\n-            return ''\n+        return ''\n \n     def print_what_it_means_to_bootstrap(self):\n         if hasattr(self, 'printed'):\n             return\n         self.printed = True\n         if os.path.exists(self.bootstrap_binary()):\n             return\n-        if not '--help' in sys.argv or len(sys.argv) == 1:\n+        if '--help' not in sys.argv or len(sys.argv) == 1:\n             return\n \n         print('info: the build system for Rust is written in Rust, so this')\n@@ -461,8 +470,8 @@ def build_triple(self):\n             # always emit 'i386' on x86/amd64 systems).  As such, isainfo -k\n             # must be used instead.\n             try:\n-                cputype = subprocess.check_output(['isainfo',\n-                                                   '-k']).strip().decode(default_encoding)\n+                cputype = subprocess.check_output(\n+                    ['isainfo', '-k']).strip().decode(default_encoding)\n             except (subprocess.CalledProcessError, OSError):\n                 err = \"isainfo not found\"\n                 if self.verbose:\n@@ -562,21 +571,26 @@ def update_submodules(self):\n         default_encoding = sys.getdefaultencoding()\n         run([\"git\", \"submodule\", \"-q\", \"sync\"], cwd=self.rust_root)\n         submodules = [s.split(' ', 1)[1] for s in subprocess.check_output(\n-            [\"git\", \"config\", \"--file\", os.path.join(self.rust_root, \".gitmodules\"),\n+            [\"git\", \"config\", \"--file\",\n+             os.path.join(self.rust_root, \".gitmodules\"),\n              \"--get-regexp\", \"path\"]\n         ).decode(default_encoding).splitlines()]\n         submodules = [module for module in submodules\n                       if not ((module.endswith(\"llvm\") and\n-                               (self.get_toml('llvm-config') or self.get_mk('CFG_LLVM_ROOT'))) or\n+                               (self.get_toml('llvm-config') or\n+                                self.get_mk('CFG_LLVM_ROOT'))) or\n                               (module.endswith(\"jemalloc\") and\n-                               (self.get_toml('jemalloc') or self.get_mk('CFG_JEMALLOC_ROOT'))))\n-                     ]\n+                               (self.get_toml('jemalloc') or\n+                                self.get_mk('CFG_JEMALLOC_ROOT'))))]\n         run([\"git\", \"submodule\", \"update\",\n-                  \"--init\"] + submodules, cwd=self.rust_root, verbose=self.verbose)\n+             \"--init\"] + submodules,\n+            cwd=self.rust_root, verbose=self.verbose)\n         run([\"git\", \"submodule\", \"-q\", \"foreach\", \"git\",\n-                  \"reset\", \"-q\", \"--hard\"], cwd=self.rust_root, verbose=self.verbose)\n+             \"reset\", \"-q\", \"--hard\"],\n+            cwd=self.rust_root, verbose=self.verbose)\n         run([\"git\", \"submodule\", \"-q\", \"foreach\", \"git\",\n-                  \"clean\", \"-qdfx\"], cwd=self.rust_root, verbose=self.verbose)\n+             \"clean\", \"-qdfx\"],\n+            cwd=self.rust_root, verbose=self.verbose)\n \n \n def bootstrap():\n@@ -692,5 +706,6 @@ def main():\n                   format_build_time(time() - start_time))\n         sys.exit(exit_code)\n \n+\n if __name__ == '__main__':\n     main()"}]}