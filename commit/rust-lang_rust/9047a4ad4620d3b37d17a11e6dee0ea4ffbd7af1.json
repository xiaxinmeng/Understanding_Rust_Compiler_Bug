{"sha": "9047a4ad4620d3b37d17a11e6dee0ea4ffbd7af1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNDdhNGFkNDYyMGQzYjM3ZDE3YTExZTZkZWUwZWE0ZmZiZDdhZjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-25T13:16:41Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-25T13:16:41Z"}, "message": "Use more IDs", "tree": {"sha": "8980df5edec22b1b6dae7bfca05001d34a9f6b9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8980df5edec22b1b6dae7bfca05001d34a9f6b9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9047a4ad4620d3b37d17a11e6dee0ea4ffbd7af1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9047a4ad4620d3b37d17a11e6dee0ea4ffbd7af1", "html_url": "https://github.com/rust-lang/rust/commit/9047a4ad4620d3b37d17a11e6dee0ea4ffbd7af1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9047a4ad4620d3b37d17a11e6dee0ea4ffbd7af1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a9717b07241eb8f7610f1ff600b55cf5eaaf75f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a9717b07241eb8f7610f1ff600b55cf5eaaf75f", "html_url": "https://github.com/rust-lang/rust/commit/1a9717b07241eb8f7610f1ff600b55cf5eaaf75f"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "348c5f67d3e48395759033de673b9fee3c3539b0", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9047a4ad4620d3b37d17a11e6dee0ea4ffbd7af1/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9047a4ad4620d3b37d17a11e6dee0ea4ffbd7af1/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=9047a4ad4620d3b37d17a11e6dee0ea4ffbd7af1", "patch": "@@ -14,7 +14,7 @@ use hir_def::{\n     path::{GenericArg, PathSegment},\n     resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{TypeBound, TypeRef},\n-    AdtId, EnumVariantId, GenericDefId, LocalStructFieldId, VariantId,\n+    AdtId, EnumVariantId, FunctionId, GenericDefId, LocalStructFieldId, StructId, VariantId,\n };\n use ra_arena::map::ArenaMap;\n \n@@ -546,9 +546,9 @@ pub(crate) fn type_for_def(db: &impl HirDatabase, def: TypableDef, ns: Namespace\n /// Build the signature of a callable item (function, struct or enum variant).\n pub(crate) fn callable_item_sig(db: &impl HirDatabase, def: CallableDef) -> FnSig {\n     match def {\n-        CallableDef::Function(f) => fn_sig_for_fn(db, f),\n-        CallableDef::Struct(s) => fn_sig_for_struct_constructor(db, s),\n-        CallableDef::EnumVariant(e) => fn_sig_for_enum_variant_constructor(db, e),\n+        CallableDef::Function(f) => fn_sig_for_fn(db, f.id),\n+        CallableDef::Struct(s) => fn_sig_for_struct_constructor(db, s.id),\n+        CallableDef::EnumVariant(e) => fn_sig_for_enum_variant_constructor(db, e.into()),\n     }\n }\n \n@@ -630,9 +630,9 @@ pub(crate) fn generic_defaults_query(db: &impl HirDatabase, def: GenericDefId) -\n     Substs(defaults)\n }\n \n-fn fn_sig_for_fn(db: &impl HirDatabase, def: Function) -> FnSig {\n-    let data = db.function_data(def.id);\n-    let resolver = def.id.resolver(db);\n+fn fn_sig_for_fn(db: &impl HirDatabase, def: FunctionId) -> FnSig {\n+    let data = db.function_data(def);\n+    let resolver = def.resolver(db);\n     let params = data.params.iter().map(|tr| Ty::from_hir(db, &resolver, tr)).collect::<Vec<_>>();\n     let ret = Ty::from_hir(db, &resolver, &data.ret_type);\n     FnSig::from_params_and_return(params, ret)\n@@ -703,15 +703,15 @@ impl From<Option<BuiltinFloat>> for Uncertain<FloatTy> {\n     }\n }\n \n-fn fn_sig_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> FnSig {\n-    let struct_data = db.struct_data(def.id.into());\n+fn fn_sig_for_struct_constructor(db: &impl HirDatabase, def: StructId) -> FnSig {\n+    let struct_data = db.struct_data(def.into());\n     let fields = struct_data.variant_data.fields();\n-    let resolver = def.id.resolver(db);\n+    let resolver = def.resolver(db);\n     let params = fields\n         .iter()\n         .map(|(_, field)| Ty::from_hir(db, &resolver, &field.type_ref))\n         .collect::<Vec<_>>();\n-    let ret = type_for_adt(db, def);\n+    let ret = type_for_adt(db, Struct::from(def));\n     FnSig::from_params_and_return(params, ret)\n }\n \n@@ -726,17 +726,18 @@ fn type_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> Ty {\n     Ty::apply(TypeCtor::FnDef(def.into()), substs)\n }\n \n-fn fn_sig_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariant) -> FnSig {\n-    let var_data = def.variant_data(db);\n-    let fields = var_data.fields();\n-    let resolver = def.parent.id.resolver(db);\n+fn fn_sig_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariantId) -> FnSig {\n+    let enum_data = db.enum_data(def.parent);\n+    let var_data = &enum_data.variants[def.local_id];\n+    let fields = var_data.variant_data.fields();\n+    let resolver = def.parent.resolver(db);\n     let params = fields\n         .iter()\n         .map(|(_, field)| Ty::from_hir(db, &resolver, &field.type_ref))\n         .collect::<Vec<_>>();\n-    let generics = db.generic_params(def.parent_enum(db).id.into());\n+    let generics = db.generic_params(def.parent.into());\n     let substs = Substs::identity(&generics);\n-    let ret = type_for_adt(db, def.parent_enum(db)).subst(&substs);\n+    let ret = type_for_adt(db, Enum::from(def.parent)).subst(&substs);\n     FnSig::from_params_and_return(params, ret)\n }\n "}]}