{"sha": "f25784899209f5c97bc32cbb4abf9ba57f1b12b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNTc4NDg5OTIwOWY1Yzk3YmMzMmNiYjRhYmY5YmE1N2YxYjEyYjg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T01:17:31Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T01:17:31Z"}, "message": "rollup merge of #20696: reem/unsized-typeid\n\nThis removes the needlessly constricting bound on `intrinsics::type_Id` and `TypeId::of`. Also fixes an ICE where using bounds on type parameters in extern blocks fails to resolve the used traits.", "tree": {"sha": "6227f3c8b7b9bd8ccba849c555b561ea97ef81cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6227f3c8b7b9bd8ccba849c555b561ea97ef81cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f25784899209f5c97bc32cbb4abf9ba57f1b12b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f25784899209f5c97bc32cbb4abf9ba57f1b12b8", "html_url": "https://github.com/rust-lang/rust/commit/f25784899209f5c97bc32cbb4abf9ba57f1b12b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f25784899209f5c97bc32cbb4abf9ba57f1b12b8/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cedaf4696ffe76afdebbd5183269d91176c97a94", "url": "https://api.github.com/repos/rust-lang/rust/commits/cedaf4696ffe76afdebbd5183269d91176c97a94", "html_url": "https://github.com/rust-lang/rust/commit/cedaf4696ffe76afdebbd5183269d91176c97a94"}, {"sha": "2606f99871511acaabd8aaec87913a5203beb39f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2606f99871511acaabd8aaec87913a5203beb39f", "html_url": "https://github.com/rust-lang/rust/commit/2606f99871511acaabd8aaec87913a5203beb39f"}], "stats": {"total": 84, "additions": 82, "deletions": 2}, "files": [{"sha": "bb2bfa953722e34a5895185f834e8771f645e74d", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f25784899209f5c97bc32cbb4abf9ba57f1b12b8/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f25784899209f5c97bc32cbb4abf9ba57f1b12b8/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=f25784899209f5c97bc32cbb4abf9ba57f1b12b8", "patch": "@@ -42,6 +42,8 @@\n #![experimental]\n #![allow(missing_docs)]\n \n+use marker::Sized;\n+\n pub type GlueFn = extern \"Rust\" fn(*const i8);\n \n #[lang=\"ty_desc\"]\n@@ -200,6 +202,10 @@ extern \"rust-intrinsic\" {\n     /// Gets an identifier which is globally unique to the specified type. This\n     /// function will return the same value for a type regardless of whichever\n     /// crate it is invoked in.\n+    #[cfg(not(stage0))]\n+    pub fn type_id<T: ?Sized + 'static>() -> TypeId;\n+\n+    #[cfg(stage0)]\n     pub fn type_id<T: 'static>() -> TypeId;\n \n     /// Create a value initialized to zero.\n@@ -551,8 +557,15 @@ pub struct TypeId {\n \n impl TypeId {\n     /// Returns the `TypeId` of the type this generic function has been instantiated with\n+    #[cfg(not(stage0))]\n+    pub fn of<T: ?Sized + 'static>() -> TypeId {\n+        unsafe { type_id::<T>() }\n+    }\n+\n+    #[cfg(stage0)]\n     pub fn of<T: 'static>() -> TypeId {\n         unsafe { type_id::<T>() }\n     }\n+\n     pub fn hash(&self) -> u64 { self.t }\n }"}, {"sha": "bcf8a6a433b94dd699807427720c0ef2b42b956a", "filename": "src/libcoretest/intrinsics.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f25784899209f5c97bc32cbb4abf9ba57f1b12b8/src%2Flibcoretest%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f25784899209f5c97bc32cbb4abf9ba57f1b12b8/src%2Flibcoretest%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fintrinsics.rs?ref=f25784899209f5c97bc32cbb4abf9ba57f1b12b8", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use core::intrinsics::TypeId;\n+\n+#[test]\n+fn test_typeid_sized_types() {\n+    struct X; struct Y(uint);\n+\n+    assert_eq!(TypeId::of::<X>(), TypeId::of::<X>());\n+    assert_eq!(TypeId::of::<Y>(), TypeId::of::<Y>());\n+    assert!(TypeId::of::<X>() != TypeId::of::<Y>());\n+}\n+\n+#[test]\n+fn test_typeid_unsized_types() {\n+    trait Z {}\n+    struct X(str); struct Y(Z + 'static);\n+\n+    assert_eq!(TypeId::of::<X>(), TypeId::of::<X>());\n+    assert_eq!(TypeId::of::<Y>(), TypeId::of::<Y>());\n+    assert!(TypeId::of::<X>() != TypeId::of::<Y>());\n+}\n+"}, {"sha": "f21297c60d66339ffc95112feb011331acb7abcf", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f25784899209f5c97bc32cbb4abf9ba57f1b12b8/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f25784899209f5c97bc32cbb4abf9ba57f1b12b8/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f25784899209f5c97bc32cbb4abf9ba57f1b12b8", "patch": "@@ -2944,8 +2944,11 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                     HasTypeParameters(\n                                         generics, FnSpace, foreign_item.id,\n                                         ItemRibKind),\n-                                    |this| visit::walk_foreign_item(this,\n-                                                                    &**foreign_item));\n+                                    |this| {\n+                                        this.resolve_type_parameters(&generics.ty_params);\n+                                        this.resolve_where_clause(&generics.where_clause);\n+                                        visit::walk_foreign_item(this, &**foreign_item)\n+                                    });\n                             }\n                             ForeignItemStatic(..) => {\n                                 visit::walk_foreign_item(this,"}, {"sha": "8c7d00a9a11d4fc2b9a1c89c4fb348013a620d8f", "filename": "src/test/compile-fail/extern-with-type-bounds.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f25784899209f5c97bc32cbb4abf9ba57f1b12b8/src%2Ftest%2Fcompile-fail%2Fextern-with-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f25784899209f5c97bc32cbb4abf9ba57f1b12b8/src%2Ftest%2Fcompile-fail%2Fextern-with-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-with-type-bounds.rs?ref=f25784899209f5c97bc32cbb4abf9ba57f1b12b8", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(intrinsics)]\n+\n+use std::intrinsics::TypeId;\n+\n+extern \"rust-intrinsic\" {\n+    // Real example from libcore\n+    fn type_id<T: ?Sized + 'static>() -> TypeId;\n+\n+    // Silent bounds made explicit to make sure they are actually\n+    // resolved.\n+    fn transmute<T: Sized, U: Sized>(val: T) -> U;\n+\n+    // Bounds aren't checked right now, so this should work\n+    // even though it's incorrect.\n+    fn size_of<T: Clone>() -> uint;\n+\n+    // Unresolved bounds should still error.\n+    fn align_of<T: NoSuchTrait>() -> uint;\n+    //~^ ERROR attempt to bound type parameter with a nonexistent trait `NoSuchTrait`\n+}\n+\n+fn main() {}\n+"}]}