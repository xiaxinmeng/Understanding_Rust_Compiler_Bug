{"sha": "7d1609dce356b9b603702f1ba0011f2fee949787", "node_id": "C_kwDOAAsO6NoAKDdkMTYwOWRjZTM1NmI5YjYwMzcwMmYxYmEwMDExZjJmZWU5NDk3ODc", "commit": {"author": {"name": "Tyler Weaver", "email": "maybe@tylerjw.dev", "date": "2023-01-13T22:32:04Z"}, "committer": {"name": "Tyler Weaver", "email": "maybe@tylerjw.dev", "date": "2023-01-13T23:26:46Z"}, "message": "Document configurations in table and paragraphs\n\nSigned-off-by: Tyler Weaver <maybe@tylerjw.dev>", "tree": {"sha": "9affbdfb4b02cea54847edd383a202b1796fcd24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9affbdfb4b02cea54847edd383a202b1796fcd24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d1609dce356b9b603702f1ba0011f2fee949787", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg7SOvb1XvVqyndOg/aB6xzqcLku\ncJTkLKCfEUxpSDkY0AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQNwqkLY3jvxVm+1uAE16DqKXPA31JEz9p4arCHOy29UCdz5l87BSkicgtIL63hQltV\nHhqxUDyR/rnOHUBCQRxws=\n-----END SSH SIGNATURE-----", "payload": "tree 9affbdfb4b02cea54847edd383a202b1796fcd24\nparent 2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1\nauthor Tyler Weaver <maybe@tylerjw.dev> 1673649124 -0700\ncommitter Tyler Weaver <maybe@tylerjw.dev> 1673652406 -0700\n\nDocument configurations in table and paragraphs\n\nSigned-off-by: Tyler Weaver <maybe@tylerjw.dev>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d1609dce356b9b603702f1ba0011f2fee949787", "html_url": "https://github.com/rust-lang/rust/commit/7d1609dce356b9b603702f1ba0011f2fee949787", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d1609dce356b9b603702f1ba0011f2fee949787/comments", "author": {"login": "tylerjw", "id": 2490389, "node_id": "MDQ6VXNlcjI0OTAzODk=", "avatar_url": "https://avatars.githubusercontent.com/u/2490389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tylerjw", "html_url": "https://github.com/tylerjw", "followers_url": "https://api.github.com/users/tylerjw/followers", "following_url": "https://api.github.com/users/tylerjw/following{/other_user}", "gists_url": "https://api.github.com/users/tylerjw/gists{/gist_id}", "starred_url": "https://api.github.com/users/tylerjw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tylerjw/subscriptions", "organizations_url": "https://api.github.com/users/tylerjw/orgs", "repos_url": "https://api.github.com/users/tylerjw/repos", "events_url": "https://api.github.com/users/tylerjw/events{/privacy}", "received_events_url": "https://api.github.com/users/tylerjw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tylerjw", "id": 2490389, "node_id": "MDQ6VXNlcjI0OTAzODk=", "avatar_url": "https://avatars.githubusercontent.com/u/2490389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tylerjw", "html_url": "https://github.com/tylerjw", "followers_url": "https://api.github.com/users/tylerjw/followers", "following_url": "https://api.github.com/users/tylerjw/following{/other_user}", "gists_url": "https://api.github.com/users/tylerjw/gists{/gist_id}", "starred_url": "https://api.github.com/users/tylerjw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tylerjw/subscriptions", "organizations_url": "https://api.github.com/users/tylerjw/orgs", "repos_url": "https://api.github.com/users/tylerjw/repos", "events_url": "https://api.github.com/users/tylerjw/events{/privacy}", "received_events_url": "https://api.github.com/users/tylerjw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1", "html_url": "https://github.com/rust-lang/rust/commit/2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1"}], "stats": {"total": 632, "additions": 552, "deletions": 80}, "files": [{"sha": "ab44db694835faac056a6a3e47060a0e0518821d", "filename": "README.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7d1609dce356b9b603702f1ba0011f2fee949787/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/7d1609dce356b9b603702f1ba0011f2fee949787/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=7d1609dce356b9b603702f1ba0011f2fee949787", "patch": "@@ -196,11 +196,10 @@ avoid-breaking-exported-api = false\n disallowed-names = [\"toto\", \"tata\", \"titi\"]\n ```\n \n-See the [list of configurable lints](https://rust-lang.github.io/rust-clippy/master/index.html#Configuration),\n-the lint descriptions contain the names and meanings of these configuration variables.\n-\n-See [table of lint configurations](https://doc.rust-lang.org/nightly/clippy/lint_configuration.html)\n-to see what configuration options you can set and the lints they configure.\n+The [table of configurations](https://doc.rust-lang.org/nightly/clippy/lint_configuration.html)\n+contains all config values, their default, and a list of lints they affect.\n+Each [configurable lint](https://rust-lang.github.io/rust-clippy/master/index.html#Configuration)\n+, also contains information about these values.\n \n For configurations that are a list type with default values such as\n [disallowed-names](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_names),"}, {"sha": "87f4a697af9fd1bf1a6e4ef1f49b89adda4ae3ff", "filename": "book/src/configuration.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7d1609dce356b9b603702f1ba0011f2fee949787/book%2Fsrc%2Fconfiguration.md", "raw_url": "https://github.com/rust-lang/rust/raw/7d1609dce356b9b603702f1ba0011f2fee949787/book%2Fsrc%2Fconfiguration.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fconfiguration.md?ref=7d1609dce356b9b603702f1ba0011f2fee949787", "patch": "@@ -10,11 +10,10 @@ avoid-breaking-exported-api = false\n disallowed-names = [\"toto\", \"tata\", \"titi\"]\n ```\n \n-See the [list of configurable lints](https://rust-lang.github.io/rust-clippy/master/index.html#Configuration),\n-the lint descriptions contain the names and meanings of these configuration variables.\n-\n-See [table of lint configurations](./lint_configuration.md)\n-to see what configuration options you can set and the lints they configure.\n+The [table of configurations](./lint_configuration.md)\n+contains all config values, their default, and a list of lints they affect.\n+Each [configurable lint](https://rust-lang.github.io/rust-clippy/master/index.html#Configuration)\n+, also contains information about these values.\n \n For configurations that are a list type with default values such as\n [disallowed-names](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_names),"}, {"sha": "cfaaefe3ea18ed48fdbab0fc362de80c8ca758ae", "filename": "book/src/lint_configuration.md", "status": "modified", "additions": 517, "deletions": 51, "changes": 568, "blob_url": "https://github.com/rust-lang/rust/blob/7d1609dce356b9b603702f1ba0011f2fee949787/book%2Fsrc%2Flint_configuration.md", "raw_url": "https://github.com/rust-lang/rust/raw/7d1609dce356b9b603702f1ba0011f2fee949787/book%2Fsrc%2Flint_configuration.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Flint_configuration.md?ref=7d1609dce356b9b603702f1ba0011f2fee949787", "patch": "@@ -1,52 +1,518 @@\n-## Configuration Options\n-\n-| Option | Default | Description | Lints |\n-|--|--|--|--|\n-| arithmetic-side-effects-allowed | `{}` | Suppress checking of the passed type names in all types of operations | [arithmetic_side_effects](https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects) |\n-| arithmetic-side-effects-allowed-binary | `[]` | Suppress checking of the passed type pair names in binary operations like addition or multiplication | [arithmetic_side_effects](https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects) |\n-| arithmetic-side-effects-allowed-unary | `{}` | Suppress checking of the passed type names in unary operations like \"negation\" (`-`) | [arithmetic_side_effects](https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects) |\n-| avoid-breaking-exported-api | `true` | Suppress lints whenever the suggested change would cause breakage for other crates | [enum_variant_names](https://rust-lang.github.io/rust-clippy/master/index.html#enum_variant_names) [large_types_passed_by_value](https://rust-lang.github.io/rust-clippy/master/index.html#large_types_passed_by_value) [trivially_copy_pass_by_ref](https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref) [unnecessary_wraps](https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps) [unused_self](https://rust-lang.github.io/rust-clippy/master/index.html#unused_self) [upper_case_acronyms](https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms) [wrong_self_convention](https://rust-lang.github.io/rust-clippy/master/index.html#wrong_self_convention) [box_collection](https://rust-lang.github.io/rust-clippy/master/index.html#box_collection) [redundant_allocation](https://rust-lang.github.io/rust-clippy/master/index.html#redundant_allocation) [rc_buffer](https://rust-lang.github.io/rust-clippy/master/index.html#rc_buffer) [vec_box](https://rust-lang.github.io/rust-clippy/master/index.html#vec_box) [option_option](https://rust-lang.github.io/rust-clippy/master/index.html#option_option) [linkedlist](https://rust-lang.github.io/rust-clippy/master/index.html#linkedlist) [rc_mutex](https://rust-lang.github.io/rust-clippy/master/index.html#rc_mutex) |\n-| msrv | `None` | The minimum rust version that the project supports | [manual_split_once](https://rust-lang.github.io/rust-clippy/master/index.html#manual_split_once) [manual_str_repeat](https://rust-lang.github.io/rust-clippy/master/index.html#manual_str_repeat) [cloned_instead_of_copied](https://rust-lang.github.io/rust-clippy/master/index.html#cloned_instead_of_copied) [redundant_field_names](https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names) [redundant_static_lifetimes](https://rust-lang.github.io/rust-clippy/master/index.html#redundant_static_lifetimes) [filter_map_next](https://rust-lang.github.io/rust-clippy/master/index.html#filter_map_next) [checked_conversions](https://rust-lang.github.io/rust-clippy/master/index.html#checked_conversions) [manual_range_contains](https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains) [use_self](https://rust-lang.github.io/rust-clippy/master/index.html#use_self) [mem_replace_with_default](https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default) [manual_non_exhaustive](https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive) [option_as_ref_deref](https://rust-lang.github.io/rust-clippy/master/index.html#option_as_ref_deref) [map_unwrap_or](https://rust-lang.github.io/rust-clippy/master/index.html#map_unwrap_or) [match_like_matches_macro](https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro) [manual_strip](https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip) [missing_const_for_fn](https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn) [unnested_or_patterns](https://rust-lang.github.io/rust-clippy/master/index.html#unnested_or_patterns) [from_over_into](https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into) [ptr_as_ptr](https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr) [if_then_some_else_none](https://rust-lang.github.io/rust-clippy/master/index.html#if_then_some_else_none) [approx_constant](https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant) [deprecated_cfg_attr](https://rust-lang.github.io/rust-clippy/master/index.html#deprecated_cfg_attr) [index_refutable_slice](https://rust-lang.github.io/rust-clippy/master/index.html#index_refutable_slice) [map_clone](https://rust-lang.github.io/rust-clippy/master/index.html#map_clone) [borrow_as_ptr](https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr) [manual_bits](https://rust-lang.github.io/rust-clippy/master/index.html#manual_bits) [err_expect](https://rust-lang.github.io/rust-clippy/master/index.html#err_expect) [cast_abs_to_unsigned](https://rust-lang.github.io/rust-clippy/master/index.html#cast_abs_to_unsigned) [uninlined_format_args](https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args) [manual_clamp](https://rust-lang.github.io/rust-clippy/master/index.html#manual_clamp) [manual_let_else](https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else) [unchecked_duration_subtraction](https://rust-lang.github.io/rust-clippy/master/index.html#unchecked_duration_subtraction) |\n-| cognitive-complexity-threshold | `25` | The maximum cognitive complexity a function can have | [cognitive_complexity](https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity) |\n-| disallowed-names | `[\"foo\", \"baz\", \"quux\"]` | The list of disallowed names to lint about | [disallowed_names](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_names) |\n-| doc-valid-idents | `[\"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"DirectX\", \"ECMAScript\", \"GPLv2\", \"GPLv3\", \"GitHub\", \"GitLab\", \"IPv4\", \"IPv6\", \"ClojureScript\", \"CoffeeScript\", \"JavaScript\", \"PureScript\", \"TypeScript\", \"NaN\", \"NaNs\", \"OAuth\", \"GraphQL\", \"OCaml\", \"OpenGL\", \"OpenMP\", \"OpenSSH\", \"OpenSSL\", \"OpenStreetMap\", \"OpenDNS\", \"WebGL\", \"TensorFlow\", \"TrueType\", \"iOS\", \"macOS\", \"FreeBSD\", \"TeX\", \"LaTeX\", \"BibTeX\", \"BibLaTeX\", \"MinGW\", \"CamelCase\"]` | The list of words this lint should not consider as identifiers needing ticks | [doc_markdown](https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown) |\n-| too-many-arguments-threshold | `7` | The maximum number of argument a function or method can have | [too_many_arguments](https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments) |\n-| type-complexity-threshold | `250` | The maximum complexity a type can have | [type_complexity](https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity) |\n-| single-char-binding-names-threshold | `4` | The maximum number of single char bindings a scope may have | [many_single_char_names](https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names) |\n-| too-large-for-stack | `200` | The maximum size of objects (in bytes) that will be linted | [boxed_local](https://rust-lang.github.io/rust-clippy/master/index.html#boxed_local) [useless_vec](https://rust-lang.github.io/rust-clippy/master/index.html#useless_vec) |\n-| enum-variant-name-threshold | `3` | The minimum number of enum variants for the lints about variant names to trigger | [enum_variant_names](https://rust-lang.github.io/rust-clippy/master/index.html#enum_variant_names) |\n-| enum-variant-size-threshold | `200` | The maximum size of an enum's variant to avoid box suggestion | [large_enum_variant](https://rust-lang.github.io/rust-clippy/master/index.html#large_enum_variant) |\n-| verbose-bit-mask-threshold | `1` | The maximum allowed size of a bit mask before suggesting to use 'trailing_zeros' | [verbose_bit_mask](https://rust-lang.github.io/rust-clippy/master/index.html#verbose_bit_mask) |\n-| literal-representation-threshold | `16384` | The lower bound for linting decimal literals | [decimal_literal_representation](https://rust-lang.github.io/rust-clippy/master/index.html#decimal_literal_representation) |\n-| trivial-copy-size-limit | `None` | The maximum size (in bytes) to consider a `Copy` type for passing by value instead of by reference | [trivially_copy_pass_by_ref](https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref) |\n-| pass-by-value-size-limit | `256` | The minimum size (in bytes) to consider a type for passing by reference instead of by value | [large_type_pass_by_move](https://rust-lang.github.io/rust-clippy/master/index.html#large_type_pass_by_move) |\n-| too-many-lines-threshold | `100` | The maximum number of lines a function or method can have | [too_many_lines](https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines) |\n-| array-size-threshold | `512000` | The maximum allowed size for arrays on the stack | [large_stack_arrays](https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays) [large_const_arrays](https://rust-lang.github.io/rust-clippy/master/index.html#large_const_arrays) |\n-| vec-box-size-threshold | `4096` | The size of the boxed type in bytes, where boxing in a `Vec` is allowed | [vec_box](https://rust-lang.github.io/rust-clippy/master/index.html#vec_box) |\n-| max-trait-bounds | `3` | The maximum number of bounds a trait can have to be linted | [type_repetition_in_bounds](https://rust-lang.github.io/rust-clippy/master/index.html#type_repetition_in_bounds) |\n-| max-struct-bools | `3` | The maximum number of bool fields a struct can have | [struct_excessive_bools](https://rust-lang.github.io/rust-clippy/master/index.html#struct_excessive_bools) |\n-| max-fn-params-bools | `3` | The maximum number of bool parameters a function can have | [fn_params_excessive_bools](https://rust-lang.github.io/rust-clippy/master/index.html#fn_params_excessive_bools) |\n-| warn-on-all-wildcard-imports | `false` | Whether to allow certain wildcard imports (prelude, super in tests) | [wildcard_imports](https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_imports) |\n-| disallowed-macros | `[]` | The list of disallowed macros, written as fully qualified paths | [disallowed_macros](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_macros) |\n-| disallowed-methods | `[]` | The list of disallowed methods, written as fully qualified paths | [disallowed_methods](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_methods) |\n-| disallowed-types | `[]` | The list of disallowed types, written as fully qualified paths | [disallowed_types](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_types) |\n-| unreadable-literal-lint-fractions | `true` | Should the fraction of a decimal be linted to include separators | [unreadable_literal](https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal) |\n-| upper-case-acronyms-aggressive | `false` | Enables verbose mode | [upper_case_acronyms](https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms) |\n-| matches-for-let-else | `WellKnownTypes` | Whether the matches should be considered by the lint, and whether there should be filtering for common types | [manual_let_else](https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else) |\n-| cargo-ignore-publish | `false` | For internal testing only, ignores the current `publish` settings in the Cargo manifest | [_cargo_common_metadata](https://rust-lang.github.io/rust-clippy/master/index.html#_cargo_common_metadata) |\n-| standard-macro-braces | `[]` | Enforce the named macros always use the braces specified | [nonstandard_macro_braces](https://rust-lang.github.io/rust-clippy/master/index.html#nonstandard_macro_braces) |\n-| enforced-import-renames | `[]` | The list of imports to always rename, a fully qualified path followed by the rename | [missing_enforced_import_renames](https://rust-lang.github.io/rust-clippy/master/index.html#missing_enforced_import_renames) |\n-| allowed-scripts | `[\"Latin\"]` | The list of unicode scripts allowed to be used in the scope | [disallowed_script_idents](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_script_idents) |\n-| enable-raw-pointer-heuristic-for-send | `true` | Whether to apply the raw pointer heuristic to determine if a type is `Send` | [non_send_fields_in_send_ty](https://rust-lang.github.io/rust-clippy/master/index.html#non_send_fields_in_send_ty) |\n-| max-suggested-slice-pattern-length | `3` | When Clippy suggests using a slice pattern, this is the maximum number of elements allowed in the slice pattern that is suggested | [index_refutable_slice](https://rust-lang.github.io/rust-clippy/master/index.html#index_refutable_slice) |\n-| await-holding-invalid-types | `[]` | [ERROR] MALFORMED DOC COMMENT |  |\n-| max-include-file-size | `1000000` | The maximum size of a file included via `include_bytes!()` or `include_str!()`, in bytes | [large_include_file](https://rust-lang.github.io/rust-clippy/master/index.html#large_include_file) |\n-| allow-expect-in-tests | `false` | Whether `expect` should be allowed within `#[cfg(test)]` | [expect_used](https://rust-lang.github.io/rust-clippy/master/index.html#expect_used) |\n-| allow-unwrap-in-tests | `false` | Whether `unwrap` should be allowed in test cfg | [unwrap_used](https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used) |\n-| allow-dbg-in-tests | `false` | Whether `dbg!` should be allowed in test functions | [dbg_macro](https://rust-lang.github.io/rust-clippy/master/index.html#dbg_macro) |\n-| allow-print-in-tests | `false` | Whether print macros (ex | [print_stdout](https://rust-lang.github.io/rust-clippy/master/index.html#print_stdout) [print_stderr](https://rust-lang.github.io/rust-clippy/master/index.html#print_stderr) |\n-| large-error-threshold | `128` | The maximum size of the `Err`-variant in a `Result` returned from a function | [result_large_err](https://rust-lang.github.io/rust-clippy/master/index.html#result_large_err) |\n-| ignore-interior-mutability | `[\"bytes::Bytes\"]` | A list of paths to types that should be treated like `Arc`, i | [mutable_key](https://rust-lang.github.io/rust-clippy/master/index.html#mutable_key) |\n-| allow-mixed-uninlined-format-args | `true` | Whether to allow mixed uninlined format args, e | [uninlined_format_args](https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args) |\n-| suppress-restriction-lint-in-const | `false` | In same cases the restructured operation might not be unavoidable, as the suggested counterparts are unavailable in constant code | [indexing_slicing](https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing) |\n+## Lint Configuration Options\n+| <div style=\"width:290px\">Option</div> | Default Value |\n+|--|--|\n+| [arithmetic-side-effects-allowed](#arithmetic-side-effects-allowed) | `{}` |\n+| [arithmetic-side-effects-allowed-binary](#arithmetic-side-effects-allowed-binary) | `[]` |\n+| [arithmetic-side-effects-allowed-unary](#arithmetic-side-effects-allowed-unary) | `{}` |\n+| [avoid-breaking-exported-api](#avoid-breaking-exported-api) | `true` |\n+| [msrv](#msrv) | `None` |\n+| [cognitive-complexity-threshold](#cognitive-complexity-threshold) | `25` |\n+| [disallowed-names](#disallowed-names) | `[\"foo\", \"baz\", \"quux\"]` |\n+| [doc-valid-idents](#doc-valid-idents) | `[\"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"DirectX\", \"ECMAScript\", \"GPLv2\", \"GPLv3\", \"GitHub\", \"GitLab\", \"IPv4\", \"IPv6\", \"ClojureScript\", \"CoffeeScript\", \"JavaScript\", \"PureScript\", \"TypeScript\", \"NaN\", \"NaNs\", \"OAuth\", \"GraphQL\", \"OCaml\", \"OpenGL\", \"OpenMP\", \"OpenSSH\", \"OpenSSL\", \"OpenStreetMap\", \"OpenDNS\", \"WebGL\", \"TensorFlow\", \"TrueType\", \"iOS\", \"macOS\", \"FreeBSD\", \"TeX\", \"LaTeX\", \"BibTeX\", \"BibLaTeX\", \"MinGW\", \"CamelCase\"]` |\n+| [too-many-arguments-threshold](#too-many-arguments-threshold) | `7` |\n+| [type-complexity-threshold](#type-complexity-threshold) | `250` |\n+| [single-char-binding-names-threshold](#single-char-binding-names-threshold) | `4` |\n+| [too-large-for-stack](#too-large-for-stack) | `200` |\n+| [enum-variant-name-threshold](#enum-variant-name-threshold) | `3` |\n+| [enum-variant-size-threshold](#enum-variant-size-threshold) | `200` |\n+| [verbose-bit-mask-threshold](#verbose-bit-mask-threshold) | `1` |\n+| [literal-representation-threshold](#literal-representation-threshold) | `16384` |\n+| [trivial-copy-size-limit](#trivial-copy-size-limit) | `None` |\n+| [pass-by-value-size-limit](#pass-by-value-size-limit) | `256` |\n+| [too-many-lines-threshold](#too-many-lines-threshold) | `100` |\n+| [array-size-threshold](#array-size-threshold) | `512000` |\n+| [vec-box-size-threshold](#vec-box-size-threshold) | `4096` |\n+| [max-trait-bounds](#max-trait-bounds) | `3` |\n+| [max-struct-bools](#max-struct-bools) | `3` |\n+| [max-fn-params-bools](#max-fn-params-bools) | `3` |\n+| [warn-on-all-wildcard-imports](#warn-on-all-wildcard-imports) | `false` |\n+| [disallowed-macros](#disallowed-macros) | `[]` |\n+| [disallowed-methods](#disallowed-methods) | `[]` |\n+| [disallowed-types](#disallowed-types) | `[]` |\n+| [unreadable-literal-lint-fractions](#unreadable-literal-lint-fractions) | `true` |\n+| [upper-case-acronyms-aggressive](#upper-case-acronyms-aggressive) | `false` |\n+| [matches-for-let-else](#matches-for-let-else) | `WellKnownTypes` |\n+| [cargo-ignore-publish](#cargo-ignore-publish) | `false` |\n+| [standard-macro-braces](#standard-macro-braces) | `[]` |\n+| [enforced-import-renames](#enforced-import-renames) | `[]` |\n+| [allowed-scripts](#allowed-scripts) | `[\"Latin\"]` |\n+| [enable-raw-pointer-heuristic-for-send](#enable-raw-pointer-heuristic-for-send) | `true` |\n+| [max-suggested-slice-pattern-length](#max-suggested-slice-pattern-length) | `3` |\n+| [max-include-file-size](#max-include-file-size) | `1000000` |\n+| [allow-expect-in-tests](#allow-expect-in-tests) | `false` |\n+| [allow-unwrap-in-tests](#allow-unwrap-in-tests) | `false` |\n+| [allow-dbg-in-tests](#allow-dbg-in-tests) | `false` |\n+| [allow-print-in-tests](#allow-print-in-tests) | `false` |\n+| [large-error-threshold](#large-error-threshold) | `128` |\n+| [ignore-interior-mutability](#ignore-interior-mutability) | `[\"bytes::Bytes\"]` |\n+| [allow-mixed-uninlined-format-args](#allow-mixed-uninlined-format-args) | `true` |\n+| [suppress-restriction-lint-in-const](#suppress-restriction-lint-in-const) | `false` |\n+\n+### arithmetic-side-effects-allowed\n+Suppress checking of the passed type names in all types of operations.\n+\n+If a specific operation is desired, consider using `arithmetic_side_effects_allowed_binary` or `arithmetic_side_effects_allowed_unary` instead.\n+\n+#### Example\n+\n+```toml\n+arithmetic-side-effects-allowed = [\"SomeType\", \"AnotherType\"]\n+```\n+\n+#### Noteworthy\n+\n+A type, say `SomeType`, listed in this configuration has the same behavior of\n+`[\"SomeType\" , \"*\"], [\"*\", \"SomeType\"]` in `arithmetic_side_effects_allowed_binary`.\n+\n+**Default Value:** `{}` (`rustc_data_structures::fx::FxHashSet<String>`)\n+\n+* [arithmetic_side_effects](https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects)\n+\n+\n+### arithmetic-side-effects-allowed-binary\n+Suppress checking of the passed type pair names in binary operations like addition or\n+multiplication.\n+\n+Supports the \"*\" wildcard to indicate that a certain type won't trigger the lint regardless\n+of the involved counterpart. For example, `[\"SomeType\", \"*\"]` or `[\"*\", \"AnotherType\"]`.\n+\n+Pairs are asymmetric, which means that `[\"SomeType\", \"AnotherType\"]` is not the same as\n+`[\"AnotherType\", \"SomeType\"]`.\n+\n+#### Example\n+\n+```toml\n+arithmetic-side-effects-allowed-binary = [[\"SomeType\" , \"f32\"], [\"AnotherType\", \"*\"]]\n+```\n+\n+**Default Value:** `[]` (`Vec<[String; 2]>`)\n+\n+* [arithmetic_side_effects](https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects)\n+\n+\n+### arithmetic-side-effects-allowed-unary\n+Suppress checking of the passed type names in unary operations like \"negation\" (`-`).\n+\n+#### Example\n+\n+```toml\n+arithmetic-side-effects-allowed-unary = [\"SomeType\", \"AnotherType\"]\n+```\n+\n+**Default Value:** `{}` (`rustc_data_structures::fx::FxHashSet<String>`)\n+\n+* [arithmetic_side_effects](https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects)\n+\n+\n+### avoid-breaking-exported-api\n+Suppress lints whenever the suggested change would cause breakage for other crates.\n+\n+**Default Value:** `true` (`bool`)\n+\n+* [enum_variant_names](https://rust-lang.github.io/rust-clippy/master/index.html#enum_variant_names)\n+* [large_types_passed_by_value](https://rust-lang.github.io/rust-clippy/master/index.html#large_types_passed_by_value)\n+* [trivially_copy_pass_by_ref](https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref)\n+* [unnecessary_wraps](https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps)\n+* [unused_self](https://rust-lang.github.io/rust-clippy/master/index.html#unused_self)\n+* [upper_case_acronyms](https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms)\n+* [wrong_self_convention](https://rust-lang.github.io/rust-clippy/master/index.html#wrong_self_convention)\n+* [box_collection](https://rust-lang.github.io/rust-clippy/master/index.html#box_collection)\n+* [redundant_allocation](https://rust-lang.github.io/rust-clippy/master/index.html#redundant_allocation)\n+* [rc_buffer](https://rust-lang.github.io/rust-clippy/master/index.html#rc_buffer)\n+* [vec_box](https://rust-lang.github.io/rust-clippy/master/index.html#vec_box)\n+* [option_option](https://rust-lang.github.io/rust-clippy/master/index.html#option_option)\n+* [linkedlist](https://rust-lang.github.io/rust-clippy/master/index.html#linkedlist)\n+* [rc_mutex](https://rust-lang.github.io/rust-clippy/master/index.html#rc_mutex)\n+\n+\n+### msrv\n+The minimum rust version that the project supports\n+\n+**Default Value:** `None` (`Option<String>`)\n+\n+* [manual_split_once](https://rust-lang.github.io/rust-clippy/master/index.html#manual_split_once)\n+* [manual_str_repeat](https://rust-lang.github.io/rust-clippy/master/index.html#manual_str_repeat)\n+* [cloned_instead_of_copied](https://rust-lang.github.io/rust-clippy/master/index.html#cloned_instead_of_copied)\n+* [redundant_field_names](https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names)\n+* [redundant_static_lifetimes](https://rust-lang.github.io/rust-clippy/master/index.html#redundant_static_lifetimes)\n+* [filter_map_next](https://rust-lang.github.io/rust-clippy/master/index.html#filter_map_next)\n+* [checked_conversions](https://rust-lang.github.io/rust-clippy/master/index.html#checked_conversions)\n+* [manual_range_contains](https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains)\n+* [use_self](https://rust-lang.github.io/rust-clippy/master/index.html#use_self)\n+* [mem_replace_with_default](https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default)\n+* [manual_non_exhaustive](https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive)\n+* [option_as_ref_deref](https://rust-lang.github.io/rust-clippy/master/index.html#option_as_ref_deref)\n+* [map_unwrap_or](https://rust-lang.github.io/rust-clippy/master/index.html#map_unwrap_or)\n+* [match_like_matches_macro](https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro)\n+* [manual_strip](https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip)\n+* [missing_const_for_fn](https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn)\n+* [unnested_or_patterns](https://rust-lang.github.io/rust-clippy/master/index.html#unnested_or_patterns)\n+* [from_over_into](https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into)\n+* [ptr_as_ptr](https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr)\n+* [if_then_some_else_none](https://rust-lang.github.io/rust-clippy/master/index.html#if_then_some_else_none)\n+* [approx_constant](https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant)\n+* [deprecated_cfg_attr](https://rust-lang.github.io/rust-clippy/master/index.html#deprecated_cfg_attr)\n+* [index_refutable_slice](https://rust-lang.github.io/rust-clippy/master/index.html#index_refutable_slice)\n+* [map_clone](https://rust-lang.github.io/rust-clippy/master/index.html#map_clone)\n+* [borrow_as_ptr](https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr)\n+* [manual_bits](https://rust-lang.github.io/rust-clippy/master/index.html#manual_bits)\n+* [err_expect](https://rust-lang.github.io/rust-clippy/master/index.html#err_expect)\n+* [cast_abs_to_unsigned](https://rust-lang.github.io/rust-clippy/master/index.html#cast_abs_to_unsigned)\n+* [uninlined_format_args](https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args)\n+* [manual_clamp](https://rust-lang.github.io/rust-clippy/master/index.html#manual_clamp)\n+* [manual_let_else](https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else)\n+* [unchecked_duration_subtraction](https://rust-lang.github.io/rust-clippy/master/index.html#unchecked_duration_subtraction)\n+\n+\n+### cognitive-complexity-threshold\n+The maximum cognitive complexity a function can have\n+\n+**Default Value:** `25` (`u64`)\n+\n+* [cognitive_complexity](https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity)\n+\n+\n+### disallowed-names\n+The list of disallowed names to lint about. NB: `bar` is not here since it has legitimate uses. The value\n+`\"..\"` can be used as part of the list to indicate, that the configured values should be appended to the\n+default configuration of Clippy. By default any configuration will replace the default value.\n+\n+**Default Value:** `[\"foo\", \"baz\", \"quux\"]` (`Vec<String>`)\n+\n+* [disallowed_names](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_names)\n+\n+\n+### doc-valid-idents\n+The list of words this lint should not consider as identifiers needing ticks. The value\n+`\"..\"` can be used as part of the list to indicate, that the configured values should be appended to the\n+default configuration of Clippy. By default any configuraction will replace the default value. For example:\n+* `doc-valid-idents = [\"ClipPy\"]` would replace the default list with `[\"ClipPy\"]`.\n+* `doc-valid-idents = [\"ClipPy\", \"..\"]` would append `ClipPy` to the default list.\n+\n+Default list:\n+\n+**Default Value:** `[\"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"DirectX\", \"ECMAScript\", \"GPLv2\", \"GPLv3\", \"GitHub\", \"GitLab\", \"IPv4\", \"IPv6\", \"ClojureScript\", \"CoffeeScript\", \"JavaScript\", \"PureScript\", \"TypeScript\", \"NaN\", \"NaNs\", \"OAuth\", \"GraphQL\", \"OCaml\", \"OpenGL\", \"OpenMP\", \"OpenSSH\", \"OpenSSL\", \"OpenStreetMap\", \"OpenDNS\", \"WebGL\", \"TensorFlow\", \"TrueType\", \"iOS\", \"macOS\", \"FreeBSD\", \"TeX\", \"LaTeX\", \"BibTeX\", \"BibLaTeX\", \"MinGW\", \"CamelCase\"]` (`Vec<String>`)\n+\n+* [doc_markdown](https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown)\n+\n+\n+### too-many-arguments-threshold\n+The maximum number of argument a function or method can have\n+\n+**Default Value:** `7` (`u64`)\n+\n+* [too_many_arguments](https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments)\n+\n+\n+### type-complexity-threshold\n+The maximum complexity a type can have\n+\n+**Default Value:** `250` (`u64`)\n+\n+* [type_complexity](https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity)\n+\n+\n+### single-char-binding-names-threshold\n+The maximum number of single char bindings a scope may have\n+\n+**Default Value:** `4` (`u64`)\n+\n+* [many_single_char_names](https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names)\n+\n+\n+### too-large-for-stack\n+The maximum size of objects (in bytes) that will be linted. Larger objects are ok on the heap\n+\n+**Default Value:** `200` (`u64`)\n+\n+* [boxed_local](https://rust-lang.github.io/rust-clippy/master/index.html#boxed_local)\n+* [useless_vec](https://rust-lang.github.io/rust-clippy/master/index.html#useless_vec)\n+\n+\n+### enum-variant-name-threshold\n+The minimum number of enum variants for the lints about variant names to trigger\n+\n+**Default Value:** `3` (`u64`)\n+\n+* [enum_variant_names](https://rust-lang.github.io/rust-clippy/master/index.html#enum_variant_names)\n+\n+\n+### enum-variant-size-threshold\n+The maximum size of an enum's variant to avoid box suggestion\n+\n+**Default Value:** `200` (`u64`)\n+\n+* [large_enum_variant](https://rust-lang.github.io/rust-clippy/master/index.html#large_enum_variant)\n+\n+\n+### verbose-bit-mask-threshold\n+The maximum allowed size of a bit mask before suggesting to use 'trailing_zeros'\n+\n+**Default Value:** `1` (`u64`)\n+\n+* [verbose_bit_mask](https://rust-lang.github.io/rust-clippy/master/index.html#verbose_bit_mask)\n+\n+\n+### literal-representation-threshold\n+The lower bound for linting decimal literals\n+\n+**Default Value:** `16384` (`u64`)\n+\n+* [decimal_literal_representation](https://rust-lang.github.io/rust-clippy/master/index.html#decimal_literal_representation)\n+\n+\n+### trivial-copy-size-limit\n+The maximum size (in bytes) to consider a `Copy` type for passing by value instead of by reference.\n+\n+**Default Value:** `None` (`Option<u64>`)\n+\n+* [trivially_copy_pass_by_ref](https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref)\n+\n+\n+### pass-by-value-size-limit\n+The minimum size (in bytes) to consider a type for passing by reference instead of by value.\n+\n+**Default Value:** `256` (`u64`)\n+\n+* [large_type_pass_by_move](https://rust-lang.github.io/rust-clippy/master/index.html#large_type_pass_by_move)\n+\n+\n+### too-many-lines-threshold\n+The maximum number of lines a function or method can have\n+\n+**Default Value:** `100` (`u64`)\n+\n+* [too_many_lines](https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines)\n+\n+\n+### array-size-threshold\n+The maximum allowed size for arrays on the stack\n+\n+**Default Value:** `512000` (`u128`)\n+\n+* [large_stack_arrays](https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays)\n+* [large_const_arrays](https://rust-lang.github.io/rust-clippy/master/index.html#large_const_arrays)\n+\n+\n+### vec-box-size-threshold\n+The size of the boxed type in bytes, where boxing in a `Vec` is allowed\n+\n+**Default Value:** `4096` (`u64`)\n+\n+* [vec_box](https://rust-lang.github.io/rust-clippy/master/index.html#vec_box)\n+\n+\n+### max-trait-bounds\n+The maximum number of bounds a trait can have to be linted\n+\n+**Default Value:** `3` (`u64`)\n+\n+* [type_repetition_in_bounds](https://rust-lang.github.io/rust-clippy/master/index.html#type_repetition_in_bounds)\n+\n+\n+### max-struct-bools\n+The maximum number of bool fields a struct can have\n+\n+**Default Value:** `3` (`u64`)\n+\n+* [struct_excessive_bools](https://rust-lang.github.io/rust-clippy/master/index.html#struct_excessive_bools)\n+\n+\n+### max-fn-params-bools\n+The maximum number of bool parameters a function can have\n+\n+**Default Value:** `3` (`u64`)\n+\n+* [fn_params_excessive_bools](https://rust-lang.github.io/rust-clippy/master/index.html#fn_params_excessive_bools)\n+\n+\n+### warn-on-all-wildcard-imports\n+Whether to allow certain wildcard imports (prelude, super in tests).\n+\n+**Default Value:** `false` (`bool`)\n+\n+* [wildcard_imports](https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_imports)\n+\n+\n+### disallowed-macros\n+The list of disallowed macros, written as fully qualified paths.\n+\n+**Default Value:** `[]` (`Vec<crate::utils::conf::DisallowedPath>`)\n+\n+* [disallowed_macros](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_macros)\n+\n+\n+### disallowed-methods\n+The list of disallowed methods, written as fully qualified paths.\n+\n+**Default Value:** `[]` (`Vec<crate::utils::conf::DisallowedPath>`)\n+\n+* [disallowed_methods](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_methods)\n+\n+\n+### disallowed-types\n+The list of disallowed types, written as fully qualified paths.\n+\n+**Default Value:** `[]` (`Vec<crate::utils::conf::DisallowedPath>`)\n+\n+* [disallowed_types](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_types)\n+\n+\n+### unreadable-literal-lint-fractions\n+Should the fraction of a decimal be linted to include separators.\n+\n+**Default Value:** `true` (`bool`)\n+\n+* [unreadable_literal](https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal)\n+\n+\n+### upper-case-acronyms-aggressive\n+Enables verbose mode. Triggers if there is more than one uppercase char next to each other\n+\n+**Default Value:** `false` (`bool`)\n+\n+* [upper_case_acronyms](https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms)\n+\n+\n+### matches-for-let-else\n+Whether the matches should be considered by the lint, and whether there should\n+be filtering for common types.\n+\n+**Default Value:** `WellKnownTypes` (`crate::manual_let_else::MatchLintBehaviour`)\n+\n+* [manual_let_else](https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else)\n+\n+\n+### cargo-ignore-publish\n+For internal testing only, ignores the current `publish` settings in the Cargo manifest.\n+\n+**Default Value:** `false` (`bool`)\n+\n+* [_cargo_common_metadata](https://rust-lang.github.io/rust-clippy/master/index.html#_cargo_common_metadata)\n+\n+\n+### standard-macro-braces\n+Enforce the named macros always use the braces specified.\n+\n+A `MacroMatcher` can be added like so `{ name = \"macro_name\", brace = \"(\" }`. If the macro\n+is could be used with a full path two `MacroMatcher`s have to be added one with the full path\n+`crate_name::macro_name` and one with just the macro name.\n+\n+**Default Value:** `[]` (`Vec<crate::nonstandard_macro_braces::MacroMatcher>`)\n+\n+* [nonstandard_macro_braces](https://rust-lang.github.io/rust-clippy/master/index.html#nonstandard_macro_braces)\n+\n+\n+### enforced-import-renames\n+The list of imports to always rename, a fully qualified path followed by the rename.\n+\n+**Default Value:** `[]` (`Vec<crate::utils::conf::Rename>`)\n+\n+* [missing_enforced_import_renames](https://rust-lang.github.io/rust-clippy/master/index.html#missing_enforced_import_renames)\n+\n+\n+### allowed-scripts\n+The list of unicode scripts allowed to be used in the scope.\n+\n+**Default Value:** `[\"Latin\"]` (`Vec<String>`)\n+\n+* [disallowed_script_idents](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_script_idents)\n+\n+\n+### enable-raw-pointer-heuristic-for-send\n+Whether to apply the raw pointer heuristic to determine if a type is `Send`.\n+\n+**Default Value:** `true` (`bool`)\n+\n+* [non_send_fields_in_send_ty](https://rust-lang.github.io/rust-clippy/master/index.html#non_send_fields_in_send_ty)\n+\n+\n+### max-suggested-slice-pattern-length\n+When Clippy suggests using a slice pattern, this is the maximum number of elements allowed in\n+the slice pattern that is suggested. If more elements would be necessary, the lint is suppressed.\n+For example, `[_, _, _, e, ..]` is a slice pattern with 4 elements.\n+\n+**Default Value:** `3` (`u64`)\n+\n+* [index_refutable_slice](https://rust-lang.github.io/rust-clippy/master/index.html#index_refutable_slice)\n+\n+\n+### max-include-file-size\n+The maximum size of a file included via `include_bytes!()` or `include_str!()`, in bytes\n+\n+**Default Value:** `1000000` (`u64`)\n+\n+* [large_include_file](https://rust-lang.github.io/rust-clippy/master/index.html#large_include_file)\n+\n+\n+### allow-expect-in-tests\n+Whether `expect` should be allowed within `#[cfg(test)]`\n+\n+**Default Value:** `false` (`bool`)\n+\n+* [expect_used](https://rust-lang.github.io/rust-clippy/master/index.html#expect_used)\n+\n+\n+### allow-unwrap-in-tests\n+Whether `unwrap` should be allowed in test cfg\n+\n+**Default Value:** `false` (`bool`)\n+\n+* [unwrap_used](https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used)\n+\n+\n+### allow-dbg-in-tests\n+Whether `dbg!` should be allowed in test functions\n+\n+**Default Value:** `false` (`bool`)\n+\n+* [dbg_macro](https://rust-lang.github.io/rust-clippy/master/index.html#dbg_macro)\n+\n+\n+### allow-print-in-tests\n+Whether print macros (ex. `println!`) should be allowed in test functions\n+\n+**Default Value:** `false` (`bool`)\n+\n+* [print_stdout](https://rust-lang.github.io/rust-clippy/master/index.html#print_stdout)\n+* [print_stderr](https://rust-lang.github.io/rust-clippy/master/index.html#print_stderr)\n+\n+\n+### large-error-threshold\n+The maximum size of the `Err`-variant in a `Result` returned from a function\n+\n+**Default Value:** `128` (`u64`)\n+\n+* [result_large_err](https://rust-lang.github.io/rust-clippy/master/index.html#result_large_err)\n+\n+\n+### ignore-interior-mutability\n+A list of paths to types that should be treated like `Arc`, i.e. ignored but\n+for the generic parameters for determining interior mutability\n+\n+**Default Value:** `[\"bytes::Bytes\"]` (`Vec<String>`)\n+\n+* [mutable_key](https://rust-lang.github.io/rust-clippy/master/index.html#mutable_key)\n+\n+\n+### allow-mixed-uninlined-format-args\n+Whether to allow mixed uninlined format args, e.g. `format!(\"{} {}\", a, foo.bar)`\n+\n+**Default Value:** `true` (`bool`)\n+\n+* [uninlined_format_args](https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args)\n+\n+\n+### suppress-restriction-lint-in-const\n+In same\n+cases the restructured operation might not be unavoidable, as the\n+suggested counterparts are unavailable in constant code. This\n+configuration will cause restriction lints to trigger even\n+if no suggestion can be made.\n+\n+**Default Value:** `false` (`bool`)\n+\n+* [indexing_slicing](https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing)\n+\n+\n "}, {"sha": "f48be27592b7e74a1bc3e30a775d70ca142258fa", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d1609dce356b9b603702f1ba0011f2fee949787/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d1609dce356b9b603702f1ba0011f2fee949787/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=7d1609dce356b9b603702f1ba0011f2fee949787", "patch": "@@ -219,7 +219,8 @@ define_Conf! {\n     ///\n     /// #### Noteworthy\n     ///\n-    /// A type, say `SomeType`, listed in this configuration has the same behavior of `[\"SomeType\" , \"*\"], [\"*\", \"SomeType\"]` in `arithmetic_side_effects_allowed_binary`.\n+    /// A type, say `SomeType`, listed in this configuration has the same behavior of\n+    /// `[\"SomeType\" , \"*\"], [\"*\", \"SomeType\"]` in `arithmetic_side_effects_allowed_binary`.\n     (arithmetic_side_effects_allowed: rustc_data_structures::fx::FxHashSet<String> = <_>::default()),\n     /// Lint: ARITHMETIC_SIDE_EFFECTS.\n     ///"}, {"sha": "47604f6933b4299386509286692b0e72306c50f2", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7d1609dce356b9b603702f1ba0011f2fee949787/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d1609dce356b9b603702f1ba0011f2fee949787/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=7d1609dce356b9b603702f1ba0011f2fee949787", "patch": "@@ -180,13 +180,22 @@ This lint has the following configuration variables:\n             })\n     }\n \n-    fn get_markdown_table(&self) -> String {\n+    fn configs_to_markdown(&self, map_fn: fn(&ClippyConfiguration) -> String) -> String {\n         self.config\n             .iter()\n             .filter(|config| config.deprecation_reason.is_none())\n-            .map(ClippyConfiguration::to_markdown_table_entry)\n+            .filter(|config| !config.lints.is_empty())\n+            .map(map_fn)\n             .join(\"\\n\")\n     }\n+\n+    fn get_markdown_docs(&self) -> String {\n+        format!(\n+            \"## Lint Configuration Options\\n| <div style=\\\"width:290px\\\">Option</div> | Default Value |\\n|--|--|\\n{}\\n\\n{}\\n\",\n+            self.configs_to_markdown(ClippyConfiguration::to_markdown_table_entry),\n+            self.configs_to_markdown(ClippyConfiguration::to_markdown_paragraph),\n+        )\n+    }\n }\n \n impl Drop for MetadataCollector {\n@@ -230,12 +239,7 @@ impl Drop for MetadataCollector {\n             .create(true)\n             .open(MARKDOWN_OUTPUT_FILE)\n             .unwrap();\n-        writeln!(\n-            file,\n-            \"## Lint Configuration\\n\\n| Option | Default | Description | Lints |\\n|--|--|--|--|\\n{}\\n\",\n-            self.get_markdown_table()\n-        )\n-        .unwrap();\n+        writeln!(file, \"{}\", self.get_markdown_docs(),).unwrap();\n     }\n }\n \n@@ -537,24 +541,27 @@ impl ClippyConfiguration {\n         }\n     }\n \n-    fn to_markdown_table_entry(&self) -> String {\n+    fn to_markdown_paragraph(&self) -> String {\n         format!(\n-            \"| {} | `{}` | {} | {} |\",\n+            \"### {}\\n{}\\n\\n**Default Value:** `{}` (`{}`)\\n\\n{}\\n\\n\",\n             self.name,\n-            self.default,\n             self.doc\n-                .split('.')\n-                .next()\n-                .unwrap_or(\"\")\n-                .replace('|', \"\\\\|\")\n-                .replace(\"\\n    \", \" \"),\n+                .lines()\n+                .map(|line| line.strip_prefix(\"    \").unwrap_or(line))\n+                .join(\"\\n\"),\n+            self.default,\n+            self.config_type,\n             self.lints\n                 .iter()\n                 .map(|name| name.to_string().split_whitespace().next().unwrap().to_string())\n-                .map(|name| format!(\"[{name}](https://rust-lang.github.io/rust-clippy/master/index.html#{name})\"))\n-                .join(\" \")\n+                .map(|name| format!(\"* [{name}](https://rust-lang.github.io/rust-clippy/master/index.html#{name})\"))\n+                .join(\"\\n\"),\n         )\n     }\n+\n+    fn to_markdown_table_entry(&self) -> String {\n+        format!(\"| [{}](#{}) | `{}` |\", self.name, self.name, self.default)\n+    }\n }\n \n fn collect_configs() -> Vec<ClippyConfiguration> {"}]}