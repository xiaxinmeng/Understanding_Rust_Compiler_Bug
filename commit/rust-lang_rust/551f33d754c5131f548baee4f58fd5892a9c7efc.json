{"sha": "551f33d754c5131f548baee4f58fd5892a9c7efc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MWYzM2Q3NTRjNTEzMWY1NDhiYWVlNGY1OGZkNTg5MmE5YzdlZmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-06T11:08:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-06T11:08:08Z"}, "message": "Move ide-db", "tree": {"sha": "bd26e07914d02f528a5d06975487f4441fab033c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd26e07914d02f528a5d06975487f4441fab033c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/551f33d754c5131f548baee4f58fd5892a9c7efc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/551f33d754c5131f548baee4f58fd5892a9c7efc", "html_url": "https://github.com/rust-lang/rust/commit/551f33d754c5131f548baee4f58fd5892a9c7efc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/551f33d754c5131f548baee4f58fd5892a9c7efc/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "896906fea8c6ba7f9672ced51658b1e742868f1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/896906fea8c6ba7f9672ced51658b1e742868f1a", "html_url": "https://github.com/rust-lang/rust/commit/896906fea8c6ba7f9672ced51658b1e742868f1a"}], "stats": {"total": 264, "additions": 132, "deletions": 132}, "files": [{"sha": "2849cdb029072a2a44be14c424f5c80e940da82e", "filename": "crates/ra_ide/src/db.rs", "status": "modified", "additions": 1, "deletions": 132, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/551f33d754c5131f548baee4f58fd5892a9c7efc/crates%2Fra_ide%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551f33d754c5131f548baee4f58fd5892a9c7efc/crates%2Fra_ide%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdb.rs?ref=551f33d754c5131f548baee4f58fd5892a9c7efc", "patch": "@@ -1,132 +1 @@\n-//! FIXME: write short doc here\n-\n-use std::sync::Arc;\n-\n-use ra_db::{\n-    salsa::{self, Database, Durability},\n-    Canceled, CheckCanceled, CrateId, FileId, FileLoader, FileLoaderDelegate, RelativePath,\n-    SourceDatabase, SourceRootId,\n-};\n-use rustc_hash::FxHashMap;\n-\n-use crate::{\n-    symbol_index::{self, SymbolsDatabase},\n-    FeatureFlags, LineIndex,\n-};\n-\n-#[salsa::database(\n-    ra_db::SourceDatabaseStorage,\n-    ra_db::SourceDatabaseExtStorage,\n-    LineIndexDatabaseStorage,\n-    symbol_index::SymbolsDatabaseStorage,\n-    hir::db::InternDatabaseStorage,\n-    hir::db::AstDatabaseStorage,\n-    hir::db::DefDatabaseStorage,\n-    hir::db::HirDatabaseStorage\n-)]\n-#[derive(Debug)]\n-pub(crate) struct RootDatabase {\n-    runtime: salsa::Runtime<RootDatabase>,\n-    pub(crate) feature_flags: Arc<FeatureFlags>,\n-    pub(crate) debug_data: Arc<DebugData>,\n-    pub(crate) last_gc: crate::wasm_shims::Instant,\n-    pub(crate) last_gc_check: crate::wasm_shims::Instant,\n-}\n-\n-impl FileLoader for RootDatabase {\n-    fn file_text(&self, file_id: FileId) -> Arc<String> {\n-        FileLoaderDelegate(self).file_text(file_id)\n-    }\n-    fn resolve_relative_path(\n-        &self,\n-        anchor: FileId,\n-        relative_path: &RelativePath,\n-    ) -> Option<FileId> {\n-        FileLoaderDelegate(self).resolve_relative_path(anchor, relative_path)\n-    }\n-    fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {\n-        FileLoaderDelegate(self).relevant_crates(file_id)\n-    }\n-}\n-\n-impl salsa::Database for RootDatabase {\n-    fn salsa_runtime(&self) -> &salsa::Runtime<RootDatabase> {\n-        &self.runtime\n-    }\n-    fn salsa_runtime_mut(&mut self) -> &mut salsa::Runtime<Self> {\n-        &mut self.runtime\n-    }\n-    fn on_propagated_panic(&self) -> ! {\n-        Canceled::throw()\n-    }\n-    fn salsa_event(&self, event: impl Fn() -> salsa::Event<RootDatabase>) {\n-        match event().kind {\n-            salsa::EventKind::DidValidateMemoizedValue { .. }\n-            | salsa::EventKind::WillExecute { .. } => {\n-                self.check_canceled();\n-            }\n-            _ => (),\n-        }\n-    }\n-}\n-\n-impl Default for RootDatabase {\n-    fn default() -> RootDatabase {\n-        RootDatabase::new(None, FeatureFlags::default())\n-    }\n-}\n-\n-impl RootDatabase {\n-    pub fn new(lru_capacity: Option<usize>, feature_flags: FeatureFlags) -> RootDatabase {\n-        let mut db = RootDatabase {\n-            runtime: salsa::Runtime::default(),\n-            last_gc: crate::wasm_shims::Instant::now(),\n-            last_gc_check: crate::wasm_shims::Instant::now(),\n-            feature_flags: Arc::new(feature_flags),\n-            debug_data: Default::default(),\n-        };\n-        db.set_crate_graph_with_durability(Default::default(), Durability::HIGH);\n-        db.set_local_roots_with_durability(Default::default(), Durability::HIGH);\n-        db.set_library_roots_with_durability(Default::default(), Durability::HIGH);\n-        let lru_capacity = lru_capacity.unwrap_or(ra_db::DEFAULT_LRU_CAP);\n-        db.query_mut(ra_db::ParseQuery).set_lru_capacity(lru_capacity);\n-        db.query_mut(hir::db::ParseMacroQuery).set_lru_capacity(lru_capacity);\n-        db.query_mut(hir::db::MacroExpandQuery).set_lru_capacity(lru_capacity);\n-        db\n-    }\n-}\n-\n-impl salsa::ParallelDatabase for RootDatabase {\n-    fn snapshot(&self) -> salsa::Snapshot<RootDatabase> {\n-        salsa::Snapshot::new(RootDatabase {\n-            runtime: self.runtime.snapshot(self),\n-            last_gc: self.last_gc,\n-            last_gc_check: self.last_gc_check,\n-            feature_flags: Arc::clone(&self.feature_flags),\n-            debug_data: Arc::clone(&self.debug_data),\n-        })\n-    }\n-}\n-\n-#[salsa::query_group(LineIndexDatabaseStorage)]\n-pub(crate) trait LineIndexDatabase: ra_db::SourceDatabase + CheckCanceled {\n-    fn line_index(&self, file_id: FileId) -> Arc<LineIndex>;\n-}\n-\n-fn line_index(db: &impl LineIndexDatabase, file_id: FileId) -> Arc<LineIndex> {\n-    let text = db.file_text(file_id);\n-    Arc::new(LineIndex::new(&*text))\n-}\n-\n-#[derive(Debug, Default, Clone)]\n-pub(crate) struct DebugData {\n-    pub(crate) root_paths: FxHashMap<SourceRootId, String>,\n-    pub(crate) crate_names: FxHashMap<CrateId, String>,\n-}\n-\n-impl DebugData {\n-    pub(crate) fn merge(&mut self, other: DebugData) {\n-        self.root_paths.extend(other.root_paths.into_iter());\n-        self.crate_names.extend(other.crate_names.into_iter());\n-    }\n-}\n+pub(crate) use crate::ide_db::*;"}, {"sha": "47d0aed6fb59426733e58241b698769efaa0c518", "filename": "crates/ra_ide/src/ide_db/mod.rs", "status": "modified", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/551f33d754c5131f548baee4f58fd5892a9c7efc/crates%2Fra_ide%2Fsrc%2Fide_db%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551f33d754c5131f548baee4f58fd5892a9c7efc/crates%2Fra_ide%2Fsrc%2Fide_db%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fide_db%2Fmod.rs?ref=551f33d754c5131f548baee4f58fd5892a9c7efc", "patch": "@@ -1 +1,132 @@\n+//! FIXME: write short doc here\n \n+use std::sync::Arc;\n+\n+use ra_db::{\n+    salsa::{self, Database, Durability},\n+    Canceled, CheckCanceled, CrateId, FileId, FileLoader, FileLoaderDelegate, RelativePath,\n+    SourceDatabase, SourceRootId,\n+};\n+use rustc_hash::FxHashMap;\n+\n+use crate::{\n+    symbol_index::{self, SymbolsDatabase},\n+    FeatureFlags, LineIndex,\n+};\n+\n+#[salsa::database(\n+    ra_db::SourceDatabaseStorage,\n+    ra_db::SourceDatabaseExtStorage,\n+    LineIndexDatabaseStorage,\n+    symbol_index::SymbolsDatabaseStorage,\n+    hir::db::InternDatabaseStorage,\n+    hir::db::AstDatabaseStorage,\n+    hir::db::DefDatabaseStorage,\n+    hir::db::HirDatabaseStorage\n+)]\n+#[derive(Debug)]\n+pub(crate) struct RootDatabase {\n+    runtime: salsa::Runtime<RootDatabase>,\n+    pub(crate) feature_flags: Arc<FeatureFlags>,\n+    pub(crate) debug_data: Arc<DebugData>,\n+    pub(crate) last_gc: crate::wasm_shims::Instant,\n+    pub(crate) last_gc_check: crate::wasm_shims::Instant,\n+}\n+\n+impl FileLoader for RootDatabase {\n+    fn file_text(&self, file_id: FileId) -> Arc<String> {\n+        FileLoaderDelegate(self).file_text(file_id)\n+    }\n+    fn resolve_relative_path(\n+        &self,\n+        anchor: FileId,\n+        relative_path: &RelativePath,\n+    ) -> Option<FileId> {\n+        FileLoaderDelegate(self).resolve_relative_path(anchor, relative_path)\n+    }\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {\n+        FileLoaderDelegate(self).relevant_crates(file_id)\n+    }\n+}\n+\n+impl salsa::Database for RootDatabase {\n+    fn salsa_runtime(&self) -> &salsa::Runtime<RootDatabase> {\n+        &self.runtime\n+    }\n+    fn salsa_runtime_mut(&mut self) -> &mut salsa::Runtime<Self> {\n+        &mut self.runtime\n+    }\n+    fn on_propagated_panic(&self) -> ! {\n+        Canceled::throw()\n+    }\n+    fn salsa_event(&self, event: impl Fn() -> salsa::Event<RootDatabase>) {\n+        match event().kind {\n+            salsa::EventKind::DidValidateMemoizedValue { .. }\n+            | salsa::EventKind::WillExecute { .. } => {\n+                self.check_canceled();\n+            }\n+            _ => (),\n+        }\n+    }\n+}\n+\n+impl Default for RootDatabase {\n+    fn default() -> RootDatabase {\n+        RootDatabase::new(None, FeatureFlags::default())\n+    }\n+}\n+\n+impl RootDatabase {\n+    pub fn new(lru_capacity: Option<usize>, feature_flags: FeatureFlags) -> RootDatabase {\n+        let mut db = RootDatabase {\n+            runtime: salsa::Runtime::default(),\n+            last_gc: crate::wasm_shims::Instant::now(),\n+            last_gc_check: crate::wasm_shims::Instant::now(),\n+            feature_flags: Arc::new(feature_flags),\n+            debug_data: Default::default(),\n+        };\n+        db.set_crate_graph_with_durability(Default::default(), Durability::HIGH);\n+        db.set_local_roots_with_durability(Default::default(), Durability::HIGH);\n+        db.set_library_roots_with_durability(Default::default(), Durability::HIGH);\n+        let lru_capacity = lru_capacity.unwrap_or(ra_db::DEFAULT_LRU_CAP);\n+        db.query_mut(ra_db::ParseQuery).set_lru_capacity(lru_capacity);\n+        db.query_mut(hir::db::ParseMacroQuery).set_lru_capacity(lru_capacity);\n+        db.query_mut(hir::db::MacroExpandQuery).set_lru_capacity(lru_capacity);\n+        db\n+    }\n+}\n+\n+impl salsa::ParallelDatabase for RootDatabase {\n+    fn snapshot(&self) -> salsa::Snapshot<RootDatabase> {\n+        salsa::Snapshot::new(RootDatabase {\n+            runtime: self.runtime.snapshot(self),\n+            last_gc: self.last_gc,\n+            last_gc_check: self.last_gc_check,\n+            feature_flags: Arc::clone(&self.feature_flags),\n+            debug_data: Arc::clone(&self.debug_data),\n+        })\n+    }\n+}\n+\n+#[salsa::query_group(LineIndexDatabaseStorage)]\n+pub(crate) trait LineIndexDatabase: ra_db::SourceDatabase + CheckCanceled {\n+    fn line_index(&self, file_id: FileId) -> Arc<LineIndex>;\n+}\n+\n+fn line_index(db: &impl LineIndexDatabase, file_id: FileId) -> Arc<LineIndex> {\n+    let text = db.file_text(file_id);\n+    Arc::new(LineIndex::new(&*text))\n+}\n+\n+#[derive(Debug, Default, Clone)]\n+pub(crate) struct DebugData {\n+    pub(crate) root_paths: FxHashMap<SourceRootId, String>,\n+    pub(crate) crate_names: FxHashMap<CrateId, String>,\n+}\n+\n+impl DebugData {\n+    pub(crate) fn merge(&mut self, other: DebugData) {\n+        self.root_paths.extend(other.root_paths.into_iter());\n+        self.crate_names.extend(other.crate_names.into_iter());\n+    }\n+}"}]}