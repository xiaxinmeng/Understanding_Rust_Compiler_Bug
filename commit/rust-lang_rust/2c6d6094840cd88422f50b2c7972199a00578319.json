{"sha": "2c6d6094840cd88422f50b2c7972199a00578319", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNmQ2MDk0ODQwY2Q4ODQyMmY1MGIyYzc5NzIxOTlhMDA1NzgzMTk=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-11-11T19:57:34Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-11-11T19:59:07Z"}, "message": "Move allocator_kind to CrateStore\n\nSimilarly to the previous commit, there's no need for this to be in\nSession and have a Once around it.", "tree": {"sha": "e791ca35c1fa26ed8933ddd7d301e304a3354ad6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e791ca35c1fa26ed8933ddd7d301e304a3354ad6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c6d6094840cd88422f50b2c7972199a00578319", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c6d6094840cd88422f50b2c7972199a00578319", "html_url": "https://github.com/rust-lang/rust/commit/2c6d6094840cd88422f50b2c7972199a00578319", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c6d6094840cd88422f50b2c7972199a00578319/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1cf38ac18163867078913861c509bd8dfc7e294", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1cf38ac18163867078913861c509bd8dfc7e294", "html_url": "https://github.com/rust-lang/rust/commit/e1cf38ac18163867078913861c509bd8dfc7e294"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "e5c80c3589494440012b3057142565836379efe3", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c6d6094840cd88422f50b2c7972199a00578319/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c6d6094840cd88422f50b2c7972199a00578319/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=2c6d6094840cd88422f50b2c7972199a00578319", "patch": "@@ -15,6 +15,7 @@ use std::path::{Path, PathBuf};\n use syntax::ast;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n+use syntax::expand::allocator::AllocatorKind;\n use rustc_target::spec::Target;\n use rustc_data_structures::sync::{self, MetadataRef};\n use rustc_macros::HashStable;\n@@ -228,6 +229,7 @@ pub trait CrateStore {\n     fn encode_metadata(&self, tcx: TyCtxt<'_>) -> EncodedMetadata;\n     fn metadata_encoding_version(&self) -> &[u8];\n     fn injected_panic_runtime(&self) -> Option<CrateNum>;\n+    fn allocator_kind(&self) -> Option<AllocatorKind>;\n }\n \n pub type CrateStoreDyn = dyn CrateStore + sync::Sync;"}, {"sha": "cae01d23db2c336a92333bca8264bb771e3e1351", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2c6d6094840cd88422f50b2c7972199a00578319/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c6d6094840cd88422f50b2c7972199a00578319/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=2c6d6094840cd88422f50b2c7972199a00578319", "patch": "@@ -21,7 +21,6 @@ use errors::emitter::{Emitter, EmitterWriter};\n use errors::emitter::HumanReadableErrorType;\n use errors::annotate_snippet_emitter_writer::{AnnotateSnippetEmitterWriter};\n use syntax::edition::Edition;\n-use syntax::expand::allocator::AllocatorKind;\n use syntax::feature_gate::{self, AttributeType};\n use syntax::json::JsonEmitter;\n use syntax::source_map;\n@@ -100,11 +99,6 @@ pub struct Session {\n     /// The maximum number of stackframes allowed in const eval.\n     pub const_eval_stack_frame_limit: usize,\n \n-    /// The `metadata::creader` module may inject an allocator/`panic_runtime`\n-    /// dependency if it didn't already find one, and this tracks what was\n-    /// injected.\n-    pub allocator_kind: Once<Option<AllocatorKind>>,\n-\n     /// Map from imported macro spans (which consist of\n     /// the localized span for the macro body) to the\n     /// macro name and definition span in the source crate.\n@@ -1179,7 +1173,6 @@ fn build_session_(\n         recursion_limit: Once::new(),\n         type_length_limit: Once::new(),\n         const_eval_stack_frame_limit: 100,\n-        allocator_kind: Once::new(),\n         imported_macro_spans: OneThread::new(RefCell::new(FxHashMap::default())),\n         incr_comp_session: OneThread::new(RefCell::new(IncrCompSession::NotInitialized)),\n         cgu_reuse_tracker,"}, {"sha": "7ed54ef9467c3222f246f94dbbdc7c0e3e779ff7", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c6d6094840cd88422f50b2c7972199a00578319/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c6d6094840cd88422f50b2c7972199a00578319/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=2c6d6094840cd88422f50b2c7972199a00578319", "patch": "@@ -75,6 +75,7 @@ use syntax::source_map::MultiSpan;\n use syntax::feature_gate;\n use syntax::symbol::{Symbol, kw, sym};\n use syntax_pos::Span;\n+use syntax::expand::allocator::AllocatorKind;\n \n pub struct AllArenas {\n     pub interner: SyncDroplessArena,\n@@ -1342,6 +1343,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.cstore.injected_panic_runtime()\n     }\n \n+    pub fn allocator_kind(self) -> Option<AllocatorKind> {\n+        self.cstore.allocator_kind()\n+    }\n+\n     pub fn features(self) -> &'tcx feature_gate::Features {\n         self.features_query(LOCAL_CRATE)\n     }"}, {"sha": "f8b3e0ffe5cd9774416126d04a0530aa715789e4", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c6d6094840cd88422f50b2c7972199a00578319/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c6d6094840cd88422f50b2c7972199a00578319/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=2c6d6094840cd88422f50b2c7972199a00578319", "patch": "@@ -194,7 +194,7 @@ fn exported_symbols_provider_local(\n         symbols.push((exported_symbol, SymbolExportLevel::C));\n     }\n \n-    if tcx.sess.allocator_kind.get().is_some() {\n+    if tcx.allocator_kind().is_some() {\n         for method in ALLOCATOR_METHODS {\n             let symbol_name = format!(\"__rust_{}\", method.name);\n             let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(&symbol_name));"}, {"sha": "faa7b588e56e30d0b42b04602a3d75d262ecac98", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c6d6094840cd88422f50b2c7972199a00578319/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c6d6094840cd88422f50b2c7972199a00578319/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=2c6d6094840cd88422f50b2c7972199a00578319", "patch": "@@ -549,7 +549,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n         });\n     let allocator_module = if any_dynamic_crate {\n         None\n-    } else if let Some(kind) = *tcx.sess.allocator_kind.get() {\n+    } else if let Some(kind) = tcx.allocator_kind() {\n         let llmod_id = cgu_name_builder.build_cgu_name(LOCAL_CRATE,\n                                                        &[\"crate\"],\n                                                        Some(\"allocator\")).to_string();"}, {"sha": "b4dea19d3dc3ffdc78b7197e640e0d153d0dd663", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c6d6094840cd88422f50b2c7972199a00578319/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c6d6094840cd88422f50b2c7972199a00578319/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=2c6d6094840cd88422f50b2c7972199a00578319", "patch": "@@ -722,7 +722,7 @@ impl<'a> CrateLoader<'a> {\n         }\n     }\n \n-    fn inject_allocator_crate(&self, krate: &ast::Crate) {\n+    fn inject_allocator_crate(&mut self, krate: &ast::Crate) {\n         let has_global_allocator = match &*global_allocator_spans(krate) {\n             [span1, span2, ..] => {\n                 self.sess.struct_span_err(*span2, \"cannot define multiple global allocators\")\n@@ -742,7 +742,7 @@ impl<'a> CrateLoader<'a> {\n             needs_allocator = needs_allocator || data.root.needs_allocator;\n         });\n         if !needs_allocator {\n-            self.sess.allocator_kind.set(None);\n+            self.cstore.allocator_kind = None;\n             return\n         }\n \n@@ -758,7 +758,7 @@ impl<'a> CrateLoader<'a> {\n                 }\n             });\n         if all_rlib {\n-            self.sess.allocator_kind.set(None);\n+            self.cstore.allocator_kind = None;\n             return\n         }\n \n@@ -795,7 +795,7 @@ impl<'a> CrateLoader<'a> {\n             }\n         });\n         if global_allocator.is_some() {\n-            self.sess.allocator_kind.set(Some(AllocatorKind::Global));\n+            self.cstore.allocator_kind = Some(AllocatorKind::Global);\n             return\n         }\n \n@@ -816,7 +816,7 @@ impl<'a> CrateLoader<'a> {\n                            add `#[global_allocator]` to a static item \\\n                            that implements the GlobalAlloc trait.\");\n         }\n-        self.sess.allocator_kind.set(Some(AllocatorKind::DefaultLib));\n+        self.cstore.allocator_kind = Some(AllocatorKind::DefaultLib);\n     }\n \n     fn inject_dependency_if(&self,"}, {"sha": "54857ce1b82816b4e1403587bfcda2193d6eced0", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c6d6094840cd88422f50b2c7972199a00578319/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c6d6094840cd88422f50b2c7972199a00578319/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=2c6d6094840cd88422f50b2c7972199a00578319", "patch": "@@ -14,6 +14,7 @@ use rustc_data_structures::svh::Svh;\n use syntax::ast;\n use syntax::edition::Edition;\n use syntax_expand::base::SyntaxExtension;\n+use syntax::expand::allocator::AllocatorKind;\n use syntax_pos;\n use proc_macro::bridge::client::ProcMacro;\n \n@@ -102,6 +103,7 @@ crate struct CrateMetadata {\n pub struct CStore {\n     metas: IndexVec<CrateNum, Option<Lrc<CrateMetadata>>>,\n     pub(crate) injected_panic_runtime: Option<CrateNum>,\n+    pub(crate) allocator_kind: Option<AllocatorKind>,\n }\n \n pub enum LoadedMacro {\n@@ -118,6 +120,7 @@ impl Default for CStore {\n             // `None`.\n             metas: IndexVec::from_elem_n(None, 1),\n             injected_panic_runtime: None,\n+            allocator_kind: None,\n         }\n     }\n }"}, {"sha": "a6cb3864ca7d4e22cb280dd146530b8f98bc45d4", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c6d6094840cd88422f50b2c7972199a00578319/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c6d6094840cd88422f50b2c7972199a00578319/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=2c6d6094840cd88422f50b2c7972199a00578319", "patch": "@@ -31,6 +31,7 @@ use syntax::attr;\n use syntax::source_map;\n use syntax::source_map::Spanned;\n use syntax::symbol::Symbol;\n+use syntax::expand::allocator::AllocatorKind;\n use syntax_pos::{Span, FileName};\n \n macro_rules! provide {\n@@ -531,4 +532,8 @@ impl CrateStore for cstore::CStore {\n     fn injected_panic_runtime(&self) -> Option<CrateNum> {\n         self.injected_panic_runtime\n     }\n+\n+    fn allocator_kind(&self) -> Option<AllocatorKind> {\n+        self.allocator_kind\n+    }\n }"}]}