{"sha": "526a2c75219563216ebba7eaf89b1c498e1e2b82", "node_id": "C_kwDOAAsO6NoAKDUyNmEyYzc1MjE5NTYzMjE2ZWJiYTdlYWY4OWIxYzQ5OGUxZTJiODI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-10T10:29:41Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-14T19:52:42Z"}, "message": "ICE when checking LocalInfo on runtime MIR.", "tree": {"sha": "9b92e551509372bddb16a16821d33b4158a8ff4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b92e551509372bddb16a16821d33b4158a8ff4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/526a2c75219563216ebba7eaf89b1c498e1e2b82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/526a2c75219563216ebba7eaf89b1c498e1e2b82", "html_url": "https://github.com/rust-lang/rust/commit/526a2c75219563216ebba7eaf89b1c498e1e2b82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/526a2c75219563216ebba7eaf89b1c498e1e2b82/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50d0959a2f7ba5b5622a442d332e26f6f3059744", "url": "https://api.github.com/repos/rust-lang/rust/commits/50d0959a2f7ba5b5622a442d332e26f6f3059744", "html_url": "https://github.com/rust-lang/rust/commit/50d0959a2f7ba5b5622a442d332e26f6f3059744"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "dd39c6468e55d872701b76caf8de3d3ad3fd9f46", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/526a2c75219563216ebba7eaf89b1c498e1e2b82/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526a2c75219563216ebba7eaf89b1c498e1e2b82/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=526a2c75219563216ebba7eaf89b1c498e1e2b82", "patch": "@@ -242,8 +242,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let full_debug_info = bx.sess().opts.debuginfo == DebugInfo::Full;\n \n         // FIXME(eddyb) maybe name the return place as `_0` or `return`?\n-        if local == mir::RETURN_PLACE && !self.mir.local_decls[mir::RETURN_PLACE].is_user_variable()\n-        {\n+        if local == mir::RETURN_PLACE {\n             return;\n         }\n "}, {"sha": "7d515bb0f5a4630adf445622478b1f5181b89b92", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/526a2c75219563216ebba7eaf89b1c498e1e2b82/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526a2c75219563216ebba7eaf89b1c498e1e2b82/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=526a2c75219563216ebba7eaf89b1c498e1e2b82", "patch": "@@ -919,15 +919,15 @@ impl<'tcx> LocalDecl<'tcx> {\n     /// - or `match ... { C(x) => ... }`\n     pub fn can_be_made_mutable(&self) -> bool {\n         matches!(\n-            self.local_info,\n-            ClearCrossCrate::Set(box LocalInfo::User(\n+            self.local_info(),\n+            LocalInfo::User(\n                 BindingForm::Var(VarBindingForm {\n                     binding_mode: ty::BindingMode::BindByValue(_),\n                     opt_ty_info: _,\n                     opt_match_place: _,\n                     pat_span: _,\n                 }) | BindingForm::ImplicitSelf(ImplicitSelfKind::Imm),\n-            ))\n+            )\n         )\n     }\n \n@@ -936,56 +936,51 @@ impl<'tcx> LocalDecl<'tcx> {\n     /// mutable bindings, but the inverse does not necessarily hold).\n     pub fn is_nonref_binding(&self) -> bool {\n         matches!(\n-            self.local_info,\n-            ClearCrossCrate::Set(box LocalInfo::User(\n+            self.local_info(),\n+            LocalInfo::User(\n                 BindingForm::Var(VarBindingForm {\n                     binding_mode: ty::BindingMode::BindByValue(_),\n                     opt_ty_info: _,\n                     opt_match_place: _,\n                     pat_span: _,\n                 }) | BindingForm::ImplicitSelf(_),\n-            ))\n+            )\n         )\n     }\n \n     /// Returns `true` if this variable is a named variable or function\n     /// parameter declared by the user.\n     #[inline]\n     pub fn is_user_variable(&self) -> bool {\n-        matches!(self.local_info, ClearCrossCrate::Set(box LocalInfo::User(_)))\n+        matches!(self.local_info(), LocalInfo::User(_))\n     }\n \n     /// Returns `true` if this is a reference to a variable bound in a `match`\n     /// expression that is used to access said variable for the guard of the\n     /// match arm.\n     pub fn is_ref_for_guard(&self) -> bool {\n-        matches!(\n-            self.local_info,\n-            ClearCrossCrate::Set(box LocalInfo::User(BindingForm::RefForGuard))\n-        )\n+        matches!(self.local_info(), LocalInfo::User(BindingForm::RefForGuard))\n     }\n \n     /// Returns `Some` if this is a reference to a static item that is used to\n     /// access that static.\n     pub fn is_ref_to_static(&self) -> bool {\n-        matches!(self.local_info, ClearCrossCrate::Set(box LocalInfo::StaticRef { .. }))\n+        matches!(self.local_info(), LocalInfo::StaticRef { .. })\n     }\n \n     /// Returns `Some` if this is a reference to a thread-local static item that is used to\n     /// access that static.\n     pub fn is_ref_to_thread_local(&self) -> bool {\n-        match self.local_info {\n-            ClearCrossCrate::Set(box LocalInfo::StaticRef { is_thread_local, .. }) => {\n-                is_thread_local\n-            }\n+        match self.local_info() {\n+            LocalInfo::StaticRef { is_thread_local, .. } => *is_thread_local,\n             _ => false,\n         }\n     }\n \n     /// Returns `true` if this is a DerefTemp\n     pub fn is_deref_temp(&self) -> bool {\n-        match self.local_info {\n-            ClearCrossCrate::Set(box LocalInfo::DerefTemp) => return true,\n+        match self.local_info() {\n+            LocalInfo::DerefTemp => return true,\n             _ => (),\n         }\n         return false;"}, {"sha": "50c3023b02bd79b797a158b05ef295b05989c43f", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/526a2c75219563216ebba7eaf89b1c498e1e2b82/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526a2c75219563216ebba7eaf89b1c498e1e2b82/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=526a2c75219563216ebba7eaf89b1c498e1e2b82", "patch": "@@ -29,9 +29,9 @@ use rustc_hir::intravisit::{self, Visitor};\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::Visitor as _;\n use rustc_middle::mir::{\n-    traversal, AnalysisPhase, Body, ConstQualifs, Constant, LocalDecl, MirPass, MirPhase, Operand,\n-    Place, ProjectionElem, Promoted, RuntimePhase, Rvalue, SourceInfo, Statement, StatementKind,\n-    TerminatorKind,\n+    traversal, AnalysisPhase, Body, ClearCrossCrate, ConstQualifs, Constant, LocalDecl, MirPass,\n+    MirPhase, Operand, Place, ProjectionElem, Promoted, RuntimePhase, Rvalue, SourceInfo,\n+    Statement, StatementKind, TerminatorKind,\n };\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeVisitableExt};\n@@ -532,6 +532,12 @@ fn run_runtime_cleanup_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         &[&lower_intrinsics::LowerIntrinsics, &simplify::SimplifyCfg::new(\"elaborate-drops\")];\n \n     pm::run_passes(tcx, body, passes, Some(MirPhase::Runtime(RuntimePhase::PostCleanup)));\n+\n+    // Clear this by anticipation. Optimizations and runtime MIR have no reason to look\n+    // into this information, which is meant for borrowck diagnostics.\n+    for decl in &mut body.local_decls {\n+        decl.local_info = ClearCrossCrate::Clear;\n+    }\n }\n \n fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {"}, {"sha": "7f383a5c14979099094627b56d0eb84fbf5c1700", "filename": "tests/codegen/fewer-names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/526a2c75219563216ebba7eaf89b1c498e1e2b82/tests%2Fcodegen%2Ffewer-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526a2c75219563216ebba7eaf89b1c498e1e2b82/tests%2Fcodegen%2Ffewer-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Ffewer-names.rs?ref=526a2c75219563216ebba7eaf89b1c498e1e2b82", "patch": "@@ -13,8 +13,8 @@ pub fn sum(x: u32, y: u32) -> u32 {\n \n // NO-LABEL: define{{.*}}i32 @sum(i32 noundef %x, i32 noundef %y)\n // NO-NEXT:  start:\n-// NO-NEXT:    %z = add i32 %y, %x\n-// NO-NEXT:    ret i32 %z\n+// NO-NEXT:    %0 = add i32 %y, %x\n+// NO-NEXT:    ret i32 %0\n     let z = x + y;\n     z\n }"}, {"sha": "53841df32e8d66bf069bbcd80a28d4edcc5b866b", "filename": "tests/codegen/var-names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/526a2c75219563216ebba7eaf89b1c498e1e2b82/tests%2Fcodegen%2Fvar-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526a2c75219563216ebba7eaf89b1c498e1e2b82/tests%2Fcodegen%2Fvar-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fvar-names.rs?ref=526a2c75219563216ebba7eaf89b1c498e1e2b82", "patch": "@@ -9,7 +9,7 @@ pub fn test(a: u32, b: u32) -> u32 {\n     // CHECK: %c = add i32 %a, %b\n     let d = c;\n     let e = d * a;\n-    // CHECK-NEXT: %e = mul i32 %c, %a\n+    // CHECK-NEXT: %0 = mul i32 %c, %a\n     e\n-    // CHECK-NEXT: ret i32 %e\n+    // CHECK-NEXT: ret i32 %0\n }"}]}