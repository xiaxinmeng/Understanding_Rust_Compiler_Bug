{"sha": "ab7ef7402bfab1c767b8be80f7e46947494f6d21", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiN2VmNzQwMmJmYWIxYzc2N2I4YmU4MGY3ZTQ2OTQ3NDk0ZjZkMjE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-03-01T03:09:42Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-03-05T13:18:29Z"}, "message": "Use `#[allow_internal_unstable]` for `thread_local!`\n\nThis destabilises all the implementation details of `thread_local!`,\nsince they do not *need* to be stable with the new attribute.", "tree": {"sha": "5270259da336c989e705f29202197b703d6a5022", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5270259da336c989e705f29202197b703d6a5022"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab7ef7402bfab1c767b8be80f7e46947494f6d21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab7ef7402bfab1c767b8be80f7e46947494f6d21", "html_url": "https://github.com/rust-lang/rust/commit/ab7ef7402bfab1c767b8be80f7e46947494f6d21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab7ef7402bfab1c767b8be80f7e46947494f6d21/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84b060ce29bf7dd65fc23e855ad7c5a8748d806c", "url": "https://api.github.com/repos/rust-lang/rust/commits/84b060ce29bf7dd65fc23e855ad7c5a8748d806c", "html_url": "https://github.com/rust-lang/rust/commit/84b060ce29bf7dd65fc23e855ad7c5a8748d806c"}], "stats": {"total": 54, "additions": 39, "deletions": 15}, "files": [{"sha": "c0db163e0874dce39f28099ac8ddae334d23af5c", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab7ef7402bfab1c767b8be80f7e46947494f6d21/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7ef7402bfab1c767b8be80f7e46947494f6d21/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=ab7ef7402bfab1c767b8be80f7e46947494f6d21", "patch": "@@ -125,6 +125,7 @@\n #![feature(hash)]\n #![feature(int_uint)]\n #![feature(unique)]\n+#![feature(allow_internal_unstable)]\n #![cfg_attr(test, feature(test, rustc_private))]\n \n // Don't link to std. We are std."}, {"sha": "91de2662883f8ce6aa717b326fd6ddccbf954897", "filename": "src/libstd/sys/common/thread_local.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab7ef7402bfab1c767b8be80f7e46947494f6d21/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7ef7402bfab1c767b8be80f7e46947494f6d21/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs?ref=ab7ef7402bfab1c767b8be80f7e46947494f6d21", "patch": "@@ -55,6 +55,7 @@\n //! ```\n \n #![allow(non_camel_case_types)]\n+#![unstable(feature = \"thread_local_internals\")]\n \n use prelude::v1::*;\n \n@@ -84,17 +85,14 @@ use sys::thread_local as imp;\n ///     KEY.set(1 as *mut u8);\n /// }\n /// ```\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StaticKey {\n     /// Inner static TLS key (internals), created with by `INIT_INNER` in this\n     /// module.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub inner: StaticKeyInner,\n     /// Destructor for the TLS value.\n     ///\n     /// See `Key::new` for information about when the destructor runs and how\n     /// it runs.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub dtor: Option<unsafe extern fn(*mut u8)>,\n }\n \n@@ -131,7 +129,6 @@ pub struct Key {\n /// Constant initialization value for static TLS keys.\n ///\n /// This value specifies no destructor by default.\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const INIT: StaticKey = StaticKey {\n     inner: INIT_INNER,\n     dtor: None,\n@@ -140,7 +137,6 @@ pub const INIT: StaticKey = StaticKey {\n /// Constant initialization value for the inner part of static TLS keys.\n ///\n /// This value allows specific configuration of the destructor for a TLS key.\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const INIT_INNER: StaticKeyInner = StaticKeyInner {\n     key: atomic::ATOMIC_USIZE_INIT,\n };"}, {"sha": "6bba73420d8512cd7b7c563230941ec171792d5b", "filename": "src/libstd/thread_local/mod.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ab7ef7402bfab1c767b8be80f7e46947494f6d21/src%2Flibstd%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7ef7402bfab1c767b8be80f7e46947494f6d21/src%2Flibstd%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fmod.rs?ref=ab7ef7402bfab1c767b8be80f7e46947494f6d21", "patch": "@@ -45,7 +45,7 @@ pub mod scoped;\n \n // Sure wish we had macro hygiene, no?\n #[doc(hidden)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[unstable(feature = \"thread_local_internals\")]\n pub mod __impl {\n     pub use super::imp::Key as KeyInner;\n     pub use super::imp::destroy_value;\n@@ -117,6 +117,7 @@ pub struct Key<T> {\n /// Declare a new thread local storage key of type `std::thread_local::Key`.\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow_internal_unstable]\n macro_rules! thread_local {\n     (static $name:ident: $t:ty = $init:expr) => (\n         static $name: ::std::thread_local::Key<$t> = {\n@@ -176,6 +177,7 @@ macro_rules! thread_local {\n \n #[macro_export]\n #[doc(hidden)]\n+#[allow_internal_unstable]\n macro_rules! __thread_local_inner {\n     (static $name:ident: $t:ty = $init:expr) => (\n         #[cfg_attr(all(any(target_os = \"macos\", target_os = \"linux\"),\n@@ -337,22 +339,22 @@ mod imp {\n     use ptr;\n \n     #[doc(hidden)]\n-    #[stable(since = \"1.0.0\", feature = \"rust1\")]\n+    #[unstable(feature = \"thread_local_internals\")]\n     pub struct Key<T> {\n         // Place the inner bits in an `UnsafeCell` to currently get around the\n         // \"only Sync statics\" restriction. This allows any type to be placed in\n         // the cell.\n         //\n         // Note that all access requires `T: 'static` so it can't be a type with\n         // any borrowed pointers still.\n-        #[stable(since = \"1.0.0\", feature = \"rust1\")]\n+        #[unstable(feature = \"thread_local_internals\")]\n         pub inner: UnsafeCell<T>,\n \n         // Metadata to keep track of the state of the destructor. Remember that\n         // these variables are thread-local, not global.\n-        #[stable(since = \"1.0.0\", feature = \"rust1\")]\n+        #[unstable(feature = \"thread_local_internals\")]\n         pub dtor_registered: UnsafeCell<bool>, // should be Cell\n-        #[stable(since = \"1.0.0\", feature = \"rust1\")]\n+        #[unstable(feature = \"thread_local_internals\")]\n         pub dtor_running: UnsafeCell<bool>, // should be Cell\n     }\n \n@@ -455,7 +457,7 @@ mod imp {\n     }\n \n     #[doc(hidden)]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[unstable(feature = \"thread_local_internals\")]\n     pub unsafe extern fn destroy_value<T>(ptr: *mut u8) {\n         let ptr = ptr as *mut Key<T>;\n         // Right before we run the user destructor be sure to flag the\n@@ -477,15 +479,15 @@ mod imp {\n     use sys_common::thread_local::StaticKey as OsStaticKey;\n \n     #[doc(hidden)]\n-    #[stable(since = \"1.0.0\", feature = \"rust1\")]\n+    #[unstable(feature = \"thread_local_internals\")]\n     pub struct Key<T> {\n         // Statically allocated initialization expression, using an `UnsafeCell`\n         // for the same reasons as above.\n-        #[stable(since = \"1.0.0\", feature = \"rust1\")]\n+        #[unstable(feature = \"thread_local_internals\")]\n         pub inner: UnsafeCell<T>,\n \n         // OS-TLS key that we'll use to key off.\n-        #[stable(since = \"1.0.0\", feature = \"rust1\")]\n+        #[unstable(feature = \"thread_local_internals\")]\n         pub os: OsStaticKey,\n     }\n \n@@ -528,7 +530,7 @@ mod imp {\n     }\n \n     #[doc(hidden)]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[unstable(feature = \"thread_local_internals\")]\n     pub unsafe extern fn destroy_value<T: 'static>(ptr: *mut u8) {\n         // The OS TLS ensures that this key contains a NULL value when this\n         // destructor starts to run. We set it back to a sentinel value of 1 to"}, {"sha": "a5339568e9ef69088cce9f97f73686c4ad6a9a0e", "filename": "src/libstd/thread_local/scoped.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab7ef7402bfab1c767b8be80f7e46947494f6d21/src%2Flibstd%2Fthread_local%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7ef7402bfab1c767b8be80f7e46947494f6d21/src%2Flibstd%2Fthread_local%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fscoped.rs?ref=ab7ef7402bfab1c767b8be80f7e46947494f6d21", "patch": "@@ -65,6 +65,7 @@ pub struct Key<T> { #[doc(hidden)] pub inner: __impl::KeyInner<T> }\n /// This macro declares a `static` item on which methods are used to get and\n /// set the value stored within.\n #[macro_export]\n+#[allow_internal_unstable]\n macro_rules! scoped_thread_local {\n     (static $name:ident: $t:ty) => (\n         __scoped_thread_local_inner!(static $name: $t);\n@@ -76,6 +77,7 @@ macro_rules! scoped_thread_local {\n \n #[macro_export]\n #[doc(hidden)]\n+#[allow_internal_unstable]\n macro_rules! __scoped_thread_local_inner {\n     (static $name:ident: $t:ty) => (\n         #[cfg_attr(not(any(windows,"}, {"sha": "ff1584975462f18974441bbc2262dc543e5d520a", "filename": "src/test/compile-fail/internal-unstable-thread-local.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ab7ef7402bfab1c767b8be80f7e46947494f6d21/src%2Ftest%2Fcompile-fail%2Finternal-unstable-thread-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7ef7402bfab1c767b8be80f7e46947494f6d21/src%2Ftest%2Fcompile-fail%2Finternal-unstable-thread-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finternal-unstable-thread-local.rs?ref=ab7ef7402bfab1c767b8be80f7e46947494f6d21", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:internal_unstable.rs\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+extern crate internal_unstable;\n+\n+\n+thread_local!(static FOO: () = ());\n+thread_local!(static BAR: () = internal_unstable::unstable()); //~ WARN use of unstable\n+\n+#[rustc_error]\n+fn main() {} //~ ERROR"}]}