{"sha": "b12ebfc3de853abf6b4260c44a71cd51323803c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMmViZmMzZGU4NTNhYmY2YjQyNjBjNDRhNzFjZDUxMzIzODAzYzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-07T12:42:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-07T12:42:19Z"}, "message": "Auto merge of #895 - RalfJung:uninit, r=oli-obk\n\nRevert \"uninit intrinsic is gone\"\n\nThis reverts commit fa290f1a481b0f98ed1de06206e643af8e04acd5.\nUninit is [being reinstated](https://github.com/rust-lang/rust/pull/63343) because it breaks some broken code.", "tree": {"sha": "d7153a789bb9f0cfb9ceaed3840bdea9d12cca56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7153a789bb9f0cfb9ceaed3840bdea9d12cca56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b12ebfc3de853abf6b4260c44a71cd51323803c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b12ebfc3de853abf6b4260c44a71cd51323803c5", "html_url": "https://github.com/rust-lang/rust/commit/b12ebfc3de853abf6b4260c44a71cd51323803c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b12ebfc3de853abf6b4260c44a71cd51323803c5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9758d8f44abd184114bd2ce65e934060f160d180", "url": "https://api.github.com/repos/rust-lang/rust/commits/9758d8f44abd184114bd2ce65e934060f160d180", "html_url": "https://github.com/rust-lang/rust/commit/9758d8f44abd184114bd2ce65e934060f160d180"}, {"sha": "455531c564b7c849eb505876a9810f98e2f9fca2", "url": "https://api.github.com/repos/rust-lang/rust/commits/455531c564b7c849eb505876a9810f98e2f9fca2", "html_url": "https://github.com/rust-lang/rust/commit/455531c564b7c849eb505876a9810f98e2f9fca2"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "4e957f792b7513721902d334d126f742c76d28d8", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b12ebfc3de853abf6b4260c44a71cd51323803c5/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b12ebfc3de853abf6b4260c44a71cd51323803c5/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=b12ebfc3de853abf6b4260c44a71cd51323803c5", "patch": "@@ -522,6 +522,37 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(res, dest)?;\n             }\n \n+            \"uninit\" => {\n+                // Check fast path: we don't want to force an allocation in case the destination is a simple value,\n+                // but we also do not want to create a new allocation with 0s and then copy that over.\n+                // FIXME: We do not properly validate in case of ZSTs and when doing it in memory!\n+                // However, this only affects direct calls of the intrinsic; calls to the stable\n+                // functions wrapping them do get their validation.\n+                // FIXME: should we check alignment for ZSTs?\n+                use crate::ScalarMaybeUndef;\n+                if !dest.layout.is_zst() {\n+                    match dest.layout.abi {\n+                        layout::Abi::Scalar(..) => {\n+                            let x = ScalarMaybeUndef::Undef;\n+                            this.write_immediate(Immediate::Scalar(x), dest)?;\n+                        }\n+                        layout::Abi::ScalarPair(..) => {\n+                            let x = ScalarMaybeUndef::Undef;\n+                            this.write_immediate(Immediate::ScalarPair(x, x), dest)?;\n+                        }\n+                        _ => {\n+                            // Do it in memory\n+                            let mplace = this.force_allocation(dest)?;\n+                            assert!(mplace.meta.is_none());\n+                            let ptr = mplace.ptr.to_ptr()?;\n+                            this.memory_mut()\n+                                .get_mut(ptr.alloc_id)?\n+                                .mark_definedness(ptr, dest.layout.size, false);\n+                        }\n+                    }\n+                }\n+            }\n+\n             \"write_bytes\" => {\n                 let ty = substs.type_at(0);\n                 let ty_layout = this.layout_of(ty)?;"}]}