{"sha": "05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZDA0M2NjNWNhYzNhMmJjNzZlOWNlOGEyNzA1ZjIzY2M3MDFmMDU=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-07-14T01:06:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-14T01:06:34Z"}, "message": "Merge pull request #1785 from topecongiro/rfc/import\n\nRfc: use block indent for multi-lined imports", "tree": {"sha": "0c4fcb19c238eec4800d25766d6bfd592e6af747", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c4fcb19c238eec4800d25766d6bfd592e6af747"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "html_url": "https://github.com/rust-lang/rust/commit/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef6383011f90d1a58b5425306ce67f8dbe527d6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef6383011f90d1a58b5425306ce67f8dbe527d6e", "html_url": "https://github.com/rust-lang/rust/commit/ef6383011f90d1a58b5425306ce67f8dbe527d6e"}, {"sha": "988e387132cf4137ecbba7f212ec37f52928d42b", "url": "https://api.github.com/repos/rust-lang/rust/commits/988e387132cf4137ecbba7f212ec37f52928d42b", "html_url": "https://github.com/rust-lang/rust/commit/988e387132cf4137ecbba7f212ec37f52928d42b"}], "stats": {"total": 648, "additions": 441, "deletions": 207}, "files": [{"sha": "f97214c13585ad692e078447aafb7cdcd789d39c", "filename": "Configurations.md", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -979,6 +979,87 @@ match lorem {\n \n See also: [`match_block_trailing_comma`](#match_block_trailing_comma), [`wrap_match_arms`](#wrap_match_arms).\n \n+## `imports_indent`\n+\n+Indent style of imports\n+\n+- **Default Value**: `\"Visual\"`\n+- **Possible values**: `\"Block\"`, `\"Visual\"`\n+\n+#### `\"Block\"`\n+\n+```rust\n+use foo::{\n+    xxx,\n+    yyy,\n+    zzz,\n+};\n+```\n+\n+#### `\"Visual\"`\n+\n+```rust\n+use foo::{xxx,\n+          yyy,\n+          zzz};\n+```\n+\n+See also: [`imports_layout`](#imports_layout).\n+\n+## `imports_layout`\n+\n+Item layout inside a imports block\n+\n+- **Default value**: \"Mixed\"\n+- **Possible values**: \"Horizontal\", \"HorizontalVertical\", \"Mixed\", \"Vertical\"\n+\n+#### `\"Mixed\"`\n+\n+```rust\n+use foo::{xxx, yyy, zzz};\n+\n+use foo::{aaa, bbb, ccc,\n+          ddd, eee, fff};\n+```\n+\n+#### `\"Horizontal\"`\n+\n+**Note**: This option forces to put everything on one line and may exceeds `max_width`.\n+\n+```rust\n+use foo::{xxx, yyy, zzz};\n+\n+use foo::{aaa, bbb, ccc, ddd, eee, fff};\n+```\n+\n+#### `\"HorizontalVertical\"`\n+\n+```rust\n+use foo::{xxx, yyy, zzz};\n+\n+use foo::{aaa,\n+          bbb,\n+          ccc,\n+          ddd, \n+          eee, \n+          fff};\n+```\n+\n+#### `\"Vertical\"`\n+\n+```rust\n+use foo::{xxx,\n+          yyy,\n+          zzz};\n+\n+use foo::{aaa,\n+          bbb,\n+          ccc,\n+          ddd,\n+          eee,\n+          fff};\n+```\n+\n ## `item_brace_style`\n \n Brace style for structs and enums"}, {"sha": "b07a40804ddc7cfcbbb667b72f1504677e57ef3e", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -24,10 +24,9 @@ use std::str;\n use std::collections::HashSet;\n use std::iter::FromIterator;\n \n+use getopts::{Matches, Options};\n use json::Value;\n \n-use getopts::{Options, Matches};\n-\n fn main() {\n     let exit_status = execute();\n     std::io::stdout().flush().unwrap();"}, {"sha": "f0846b43ea8c183b183e799f0d60e93c78ca7dc0", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -17,10 +17,6 @@ extern crate toml;\n extern crate env_logger;\n extern crate getopts;\n \n-use rustfmt::{run, Input, Summary};\n-use rustfmt::file_lines::FileLines;\n-use rustfmt::config::{Config, WriteMode, get_toml_path};\n-\n use std::{env, error};\n use std::fs::File;\n use std::io::{self, Read, Write};\n@@ -29,6 +25,10 @@ use std::str::FromStr;\n \n use getopts::{Matches, Options};\n \n+use rustfmt::{run, Input, Summary};\n+use rustfmt::file_lines::FileLines;\n+use rustfmt::config::{get_toml_path, Config, WriteMode};\n+\n type FmtError = Box<error::Error + Send + Sync>;\n type FmtResult<T> = std::result::Result<T, FmtError>;\n "}, {"sha": "fdf0a80709b3f418e69406aab9d88a58f2e2f387", "filename": "src/chains.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -77,11 +77,11 @@\n /// ```\n \n use Shape;\n-use rewrite::{Rewrite, RewriteContext};\n-use utils::{wrap_str, first_line_width, last_line_width, mk_sp, last_line_extendable};\n-use expr::rewrite_call;\n use config::IndentStyle;\n+use expr::rewrite_call;\n use macros::convert_try_mac;\n+use rewrite::{Rewrite, RewriteContext};\n+use utils::{first_line_width, last_line_extendable, last_line_width, mk_sp, wrap_str};\n \n use std::cmp::min;\n use std::iter;"}, {"sha": "0934ed3f71920f91542a0507ecd9bad0d484d61d", "filename": "src/checkstyle.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fcheckstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fcheckstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcheckstyle.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -7,10 +7,11 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-use rustfmt_diff::{Mismatch, DiffLine};\n+\n use std::io::{self, Write};\n-use config::WriteMode;\n \n+use config::WriteMode;\n+use rustfmt_diff::{DiffLine, Mismatch};\n \n pub fn output_header<T>(out: &mut T, mode: WriteMode) -> Result<(), io::Error>\n where"}, {"sha": "b3fd171b86f1f06c01f37dc9917020f8dbb63102", "filename": "src/comment.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -17,7 +17,7 @@ use syntax::codemap::Span;\n use {Indent, Shape};\n use config::Config;\n use rewrite::RewriteContext;\n-use string::{StringFormat, rewrite_string};\n+use string::{rewrite_string, StringFormat};\n use utils::wrap_str;\n \n fn is_custom_comment(comment: &str) -> bool {\n@@ -809,8 +809,8 @@ fn remove_comment_header(comment: &str) -> &str {\n \n #[cfg(test)]\n mod test {\n-    use super::{CharClasses, CodeCharKind, FullCodeCharKind, contains_comment, rewrite_comment,\n-                FindUncommented, CommentCodeSlices};\n+    use super::{contains_comment, rewrite_comment, CharClasses, CodeCharKind, CommentCodeSlices,\n+                FindUncommented, FullCodeCharKind};\n     use {Indent, Shape};\n \n     #[test]"}, {"sha": "173f076bebb31c1bbe48aefcec6ad4510ffe931f", "filename": "src/config.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -10,15 +10,14 @@\n \n extern crate toml;\n \n+use std::{env, fs};\n use std::cell::Cell;\n-use std::fs;\n use std::fs::File;\n-use std::env;\n use std::io::{Error, ErrorKind, Read};\n use std::path::{Path, PathBuf};\n \n use file_lines::FileLines;\n-use lists::{SeparatorTactic, ListTactic};\n+use lists::{ListTactic, SeparatorTactic};\n \n macro_rules! configuration_option_enum{\n     ($e:ident: $( $x:ident ),+ $(,)*) => {\n@@ -557,9 +556,11 @@ create_config! {\n     chain_one_line_max: usize, 60, \"Maximum length of a chain to fit on a single line\";\n     chain_split_single_child: bool, false, \"Split a chain with a single child if its length \\\n                                             exceeds `chain_one_line_max`\";\n+    imports_indent: IndentStyle, IndentStyle::Visual, \"Indent of imports\";\n+    imports_layout: ListTactic, ListTactic::Mixed, \"Item layout inside a import block\";\n     reorder_imports: bool, false, \"Reorder import statements alphabetically\";\n     reorder_imports_in_group: bool, false, \"Reorder import statements in group\";\n-    reorder_imported_names: bool, false,\n+    reorder_imported_names: bool, true,\n         \"Reorder lists of names in import statements alphabetically\";\n     single_line_if_else_max_width: usize, 50, \"Maximum line length for single line if-else \\\n                                                 expressions. A value of zero means always break \\"}, {"sha": "09220e9ac80c587d5e6f8b2a4774f36221da8d1c", "filename": "src/expr.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -8,33 +8,33 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::cmp::{Ordering, min};\n-use std::iter::ExactSizeIterator;\n+use std::cmp::{min, Ordering};\n use std::fmt::Write;\n+use std::iter::ExactSizeIterator;\n+\n+use syntax::{ast, ptr};\n+use syntax::codemap::{BytePos, CodeMap, Span};\n+use syntax::parse::classify;\n \n use {Indent, Shape, Spanned};\n-use codemap::SpanUtils;\n-use rewrite::{Rewrite, RewriteContext};\n-use lists::{write_list, itemize_list, ListFormatting, SeparatorTactic, ListTactic,\n-            DefinitiveListTactic, definitive_tactic, ListItem, struct_lit_shape,\n-            struct_lit_tactic, shape_for_tactic, struct_lit_formatting};\n-use string::{StringFormat, rewrite_string};\n-use utils::{extra_offset, last_line_width, wrap_str, binary_search, first_line_width,\n-            semicolon_for_stmt, trimmed_last_line_width, left_most_sub_expr, stmt_expr,\n-            colon_spaces, contains_skip, mk_sp, last_line_extendable, paren_overhead};\n-use visitor::FmtVisitor;\n-use config::{Config, IndentStyle, MultilineStyle, ControlBraceStyle, Style};\n-use comment::{FindUncommented, rewrite_comment, contains_comment, recover_comment_removed};\n-use types::{rewrite_path, PathContext, can_be_overflowed_type};\n-use items::{span_lo_for_arg, span_hi_for_arg};\n use chains::rewrite_chain;\n+use codemap::SpanUtils;\n+use comment::{contains_comment, recover_comment_removed, rewrite_comment, FindUncommented};\n+use config::{Config, ControlBraceStyle, IndentStyle, MultilineStyle, Style};\n+use items::{span_hi_for_arg, span_lo_for_arg};\n+use lists::{definitive_tactic, itemize_list, shape_for_tactic, struct_lit_formatting,\n+            struct_lit_shape, struct_lit_tactic, write_list, DefinitiveListTactic, ListFormatting,\n+            ListItem, ListTactic, SeparatorTactic};\n use macros::{rewrite_macro, MacroPosition};\n-use patterns::{TuplePatField, can_be_overflowed_pat};\n+use patterns::{can_be_overflowed_pat, TuplePatField};\n+use rewrite::{Rewrite, RewriteContext};\n+use string::{rewrite_string, StringFormat};\n+use types::{can_be_overflowed_type, rewrite_path, PathContext};\n+use utils::{binary_search, colon_spaces, contains_skip, extra_offset, first_line_width,\n+            last_line_extendable, last_line_width, left_most_sub_expr, mk_sp, paren_overhead,\n+            semicolon_for_stmt, stmt_expr, trimmed_last_line_width, wrap_str};\n use vertical::rewrite_with_alignment;\n-\n-use syntax::{ast, ptr};\n-use syntax::codemap::{CodeMap, Span, BytePos};\n-use syntax::parse::classify;\n+use visitor::FmtVisitor;\n \n impl Rewrite for ast::Expr {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n@@ -501,10 +501,12 @@ where\n             DefinitiveListTactic::Mixed\n         },\n     };\n+    let mut ends_with_newline = tactic.ends_with_newline(context.config.array_layout());\n     if context.config.array_horizontal_layout_threshold() > 0 &&\n         items.len() > context.config.array_horizontal_layout_threshold()\n     {\n         tactic = DefinitiveListTactic::Mixed;\n+        ends_with_newline = false;\n         if context.config.array_layout() == IndentStyle::Block {\n             nested_shape = try_opt!(\n                 shape\n@@ -525,7 +527,7 @@ where\n             SeparatorTactic::Vertical\n         },\n         shape: nested_shape,\n-        ends_with_newline: false,\n+        ends_with_newline: ends_with_newline,\n         config: context.config,\n     };\n     let list_str = try_opt!(write_list(&items, &fmt));"}, {"sha": "ee0a21b39b130d981a82409666ccedda06d31bdf", "filename": "src/filemap.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -11,14 +11,14 @@\n \n // TODO: add tests\n \n-use strings::string_buffer::StringBuffer;\n-\n use std::fs::{self, File};\n-use std::io::{self, Write, Read, BufWriter};\n+use std::io::{self, BufWriter, Read, Write};\n+\n+use strings::string_buffer::StringBuffer;\n \n-use config::{NewlineStyle, Config, WriteMode};\n+use checkstyle::{output_checkstyle_file, output_footer, output_header};\n+use config::{Config, NewlineStyle, WriteMode};\n use rustfmt_diff::{make_diff, print_diff, Mismatch};\n-use checkstyle::{output_header, output_footer, output_checkstyle_file};\n \n // A map of the files of a crate, with their new content\n pub type FileMap = Vec<FileRecord>;"}, {"sha": "1ce397f6c5a58099fc005777dfdfd8fc4d23bc44", "filename": "src/imports.rs", "status": "modified", "additions": 135, "deletions": 35, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -8,17 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use Shape;\n-use utils;\n+use std::cmp::{self, Ordering};\n+\n+use syntax::{ast, ptr};\n use syntax::codemap::{BytePos, Span};\n+\n+use Shape;\n use codemap::SpanUtils;\n-use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic, definitive_tactic};\n-use types::{rewrite_path, PathContext};\n+use config::IndentStyle;\n+use lists::{definitive_tactic, itemize_list, write_list, DefinitiveListTactic, ListFormatting,\n+            ListItem, SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n+use types::{rewrite_path, PathContext};\n+use utils;\n use visitor::FmtVisitor;\n-use std::cmp::{self, Ordering};\n-\n-use syntax::{ast, ptr};\n \n fn path_of(a: &ast::ViewPath_) -> &ast::Path {\n     match *a {\n@@ -249,13 +252,12 @@ impl<'a> FmtVisitor<'a> {\n \n     pub fn format_import(&mut self, vis: &ast::Visibility, vp: &ast::ViewPath, span: Span) {\n         let vis = utils::format_visibility(vis);\n-        let mut offset = self.block_indent;\n-        offset.alignment += vis.len() + \"use \".len();\n-        // 1 = \";\"\n-        match vp.rewrite(\n-            &self.get_context(),\n-            Shape::legacy(self.config.max_width() - offset.width() - 1, offset),\n-        ) {\n+        // 4 = `use `, 1 = `;`\n+        let rw = Shape::indented(self.block_indent, self.config)\n+            .offset_left(vis.len() + 4)\n+            .and_then(|shape| shape.sub_width(1))\n+            .and_then(|shape| vp.rewrite(&self.get_context(), shape));\n+        match rw {\n             Some(ref s) if s.is_empty() => {\n                 // Format up to last newline\n                 let prev_span = utils::mk_sp(self.last_pos, source!(self, span).lo);\n@@ -310,9 +312,81 @@ fn append_alias(path_item_str: String, vpi: &ast::PathListItem) -> String {\n     }\n }\n \n+#[derive(Eq, PartialEq)]\n+enum ImportItem<'a> {\n+    // `self` or `self as a`\n+    SelfImport(&'a str),\n+    // name_one, name_two, ...\n+    SnakeCase(&'a str),\n+    // NameOne, NameTwo, ...\n+    CamelCase(&'a str),\n+    // NAME_ONE, NAME_TWO, ...\n+    AllCaps(&'a str),\n+    // Failed to format the import item\n+    Invalid,\n+}\n+\n+impl<'a> ImportItem<'a> {\n+    fn from_str(s: &str) -> ImportItem {\n+        if s == \"self\" || s.starts_with(\"self as\") {\n+            ImportItem::SelfImport(s)\n+        } else if s.chars().all(|c| c.is_lowercase() || c == '_' || c == ' ') {\n+            ImportItem::SnakeCase(s)\n+        } else if s.chars().all(|c| c.is_uppercase() || c == '_' || c == ' ') {\n+            ImportItem::AllCaps(s)\n+        } else {\n+            ImportItem::CamelCase(s)\n+        }\n+    }\n+\n+    fn from_opt_str(s: Option<&String>) -> ImportItem {\n+        s.map_or(ImportItem::Invalid, |s| ImportItem::from_str(s))\n+    }\n+\n+    fn to_str(&self) -> Option<&str> {\n+        match *self {\n+            ImportItem::SelfImport(s) |\n+            ImportItem::SnakeCase(s) |\n+            ImportItem::CamelCase(s) |\n+            ImportItem::AllCaps(s) => Some(s),\n+            ImportItem::Invalid => None,\n+        }\n+    }\n+\n+    fn to_u32(&self) -> u32 {\n+        match *self {\n+            ImportItem::SelfImport(..) => 0,\n+            ImportItem::SnakeCase(..) => 1,\n+            ImportItem::CamelCase(..) => 2,\n+            ImportItem::AllCaps(..) => 3,\n+            ImportItem::Invalid => 4,\n+        }\n+    }\n+}\n+\n+impl<'a> PartialOrd for ImportItem<'a> {\n+    fn partial_cmp(&self, other: &ImportItem<'a>) -> Option<Ordering> {\n+        Some(self.cmp(other))\n+    }\n+}\n+\n+impl<'a> Ord for ImportItem<'a> {\n+    fn cmp(&self, other: &ImportItem<'a>) -> Ordering {\n+        let res = self.to_u32().cmp(&other.to_u32());\n+        if res != Ordering::Equal {\n+            return res;\n+        }\n+        self.to_str().map_or(Ordering::Greater, |self_str| {\n+            other\n+                .to_str()\n+                .map_or(Ordering::Less, |other_str| self_str.cmp(other_str))\n+        })\n+    }\n+}\n+\n // Pretty prints a multi-item import.\n // Assumes that path_list.len() > 0.\n-pub fn rewrite_use_list(\n+fn rewrite_use_list(\n     shape: Shape,\n     path: &ast::Path,\n     path_list: &[ast::PathListItem],\n@@ -334,13 +408,14 @@ pub fn rewrite_use_list(\n         _ => (),\n     }\n \n-    let colons_offset = if path_str.is_empty() { 0 } else { 2 };\n+    let path_str = if path_str.is_empty() {\n+        path_str\n+    } else {\n+        format!(\"{}::\", path_str)\n+    };\n \n     // 2 = \"{}\"\n-    let remaining_width = shape\n-        .width\n-        .checked_sub(path_str.len() + 2 + colons_offset)\n-        .unwrap_or(0);\n+    let remaining_width = shape.width.checked_sub(path_str.len() + 2).unwrap_or(0);\n \n     let mut items = {\n         // Dummy value, see explanation below.\n@@ -366,35 +441,60 @@ pub fn rewrite_use_list(\n     let first_index = if has_self { 0 } else { 1 };\n \n     if context.config.reorder_imported_names() {\n-        items[1..].sort_by(|a, b| a.item.cmp(&b.item));\n+        items[1..].sort_by(|a, b| {\n+            let a = ImportItem::from_opt_str(a.item.as_ref());\n+            let b = ImportItem::from_opt_str(b.item.as_ref());\n+            a.cmp(&b)\n+        });\n     }\n \n-\n     let tactic = definitive_tactic(\n         &items[first_index..],\n-        ::lists::ListTactic::Mixed,\n+        context.config.imports_layout(),\n         remaining_width,\n     );\n \n+    let nested_indent = match context.config.imports_indent() {\n+        IndentStyle::Block => shape.indent.block_indent(context.config),\n+        // 1 = `{`\n+        IndentStyle::Visual => shape.visual_indent(path_str.len() + 1).indent,\n+    };\n+\n+    let nested_shape = match context.config.imports_indent() {\n+        IndentStyle::Block => Shape::indented(nested_indent, context.config),\n+        IndentStyle::Visual => Shape::legacy(remaining_width, nested_indent),\n+    };\n+\n+    let ends_with_newline = context.config.imports_indent() == IndentStyle::Block &&\n+        tactic != DefinitiveListTactic::Horizontal;\n+\n     let fmt = ListFormatting {\n         tactic: tactic,\n         separator: \",\",\n-        trailing_separator: SeparatorTactic::Never,\n-        // Add one to the indent to account for \"{\"\n-        shape: Shape::legacy(\n-            remaining_width,\n-            shape.indent + path_str.len() + colons_offset + 1,\n-        ),\n-        ends_with_newline: false,\n+        trailing_separator: if ends_with_newline {\n+            context.config.trailing_comma()\n+        } else {\n+            SeparatorTactic::Never\n+        },\n+        shape: nested_shape,\n+        ends_with_newline: ends_with_newline,\n         config: context.config,\n     };\n     let list_str = try_opt!(write_list(&items[first_index..], &fmt));\n \n-    Some(if path_str.is_empty() {\n-        format!(\"{{{}}}\", list_str)\n-    } else {\n-        format!(\"{}::{{{}}}\", path_str, list_str)\n-    })\n+    let result =\n+        if list_str.contains('\\n') && context.config.imports_indent() == IndentStyle::Block {\n+            format!(\n+                \"{}{{\\n{}{}\\n{}}}\",\n+                path_str,\n+                nested_shape.indent.to_string(context.config),\n+                list_str,\n+                shape.indent.to_string(context.config)\n+            )\n+        } else {\n+            format!(\"{}{{{}}}\", path_str, list_str)\n+        };\n+    Some(result)\n }\n \n // Returns true when self item was found."}, {"sha": "b81f902d59f3f40ccef41157c0f0da33bf8f32ce", "filename": "src/issues.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -13,6 +13,7 @@\n // associated issue number.\n \n use std::fmt;\n+\n pub use config::ReportTactic;\n \n const TO_DO_CHARS: &'static [char] = &['T', 'O', 'D', 'O'];"}, {"sha": "aa83d9a2b0dcfcd4bc1eda7cd8ba40136e832bce", "filename": "src/items.rs", "status": "modified", "additions": 21, "deletions": 26, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -10,25 +10,25 @@\n \n // Formatting top-level items - functions, structs, enums, traits, impls.\n \n+use syntax::{abi, ast, ptr, symbol};\n+use syntax::ast::ImplItem;\n+use syntax::codemap::{BytePos, Span};\n+\n use {Indent, Shape, Spanned};\n use codemap::SpanUtils;\n-use utils::{format_mutability, format_visibility, contains_skip, end_typaram, wrap_str,\n-            last_line_width, format_unsafety, trim_newlines, stmt_expr, semicolon_for_expr,\n-            trimmed_last_line_width, colon_spaces, mk_sp};\n-use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic,\n-            DefinitiveListTactic, ListTactic, definitive_tactic};\n+use comment::{contains_comment, recover_comment_removed, rewrite_comment, FindUncommented};\n+use config::{BraceStyle, Config, Density, IndentStyle, ReturnIndent, Style};\n use expr::{format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs,\n            rewrite_call_inner, ExprType};\n-use comment::{FindUncommented, contains_comment, rewrite_comment, recover_comment_removed};\n-use visitor::FmtVisitor;\n+use lists::{definitive_tactic, itemize_list, write_list, DefinitiveListTactic, ListFormatting,\n+            ListItem, ListTactic, SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n-use config::{Config, IndentStyle, Density, ReturnIndent, BraceStyle, Style};\n use types::join_bounds;\n+use utils::{colon_spaces, contains_skip, end_typaram, format_mutability, format_unsafety,\n+            format_visibility, last_line_width, mk_sp, semicolon_for_expr, stmt_expr,\n+            trim_newlines, trimmed_last_line_width, wrap_str};\n use vertical::rewrite_with_alignment;\n-\n-use syntax::{ast, abi, ptr, symbol};\n-use syntax::codemap::{Span, BytePos};\n-use syntax::ast::ImplItem;\n+use visitor::FmtVisitor;\n \n fn type_annotation_separator(config: &Config) -> &str {\n     colon_spaces(\n@@ -2204,21 +2204,18 @@ fn rewrite_args(\n         .and_then(|item| item.post_comment.as_ref())\n         .map_or(false, |s| s.trim().starts_with(\"//\"));\n \n-    let (indent, trailing_comma, end_with_newline) = match context.config.fn_args_layout() {\n-        IndentStyle::Block if fits_in_one_line => (\n-            indent.block_indent(context.config),\n-            SeparatorTactic::Never,\n-            true,\n-        ),\n+    let (indent, trailing_comma) = match context.config.fn_args_layout() {\n+        IndentStyle::Block if fits_in_one_line => {\n+            (indent.block_indent(context.config), SeparatorTactic::Never)\n+        }\n         IndentStyle::Block => (\n             indent.block_indent(context.config),\n             context.config.trailing_comma(),\n-            true,\n         ),\n         IndentStyle::Visual if last_line_ends_with_comment => {\n-            (arg_indent, context.config.trailing_comma(), true)\n+            (arg_indent, context.config.trailing_comma())\n         }\n-        IndentStyle::Visual => (arg_indent, SeparatorTactic::Never, false),\n+        IndentStyle::Visual => (arg_indent, SeparatorTactic::Never),\n     };\n \n     let tactic = definitive_tactic(\n@@ -2242,7 +2239,7 @@ fn rewrite_args(\n             trailing_comma\n         },\n         shape: Shape::legacy(budget, indent),\n-        ends_with_newline: end_with_newline,\n+        ends_with_newline: tactic.ends_with_newline(context.config.fn_args_layout()),\n         config: context.config,\n     };\n \n@@ -2406,8 +2403,6 @@ where\n     let item_vec = items.collect::<Vec<_>>();\n \n     let tactic = definitive_tactic(&item_vec, ListTactic::HorizontalVertical, one_line_budget);\n-    let ends_with_newline = context.config.generics_indent() == IndentStyle::Block &&\n-        tactic == DefinitiveListTactic::Vertical;\n     let fmt = ListFormatting {\n         tactic: tactic,\n         separator: \",\",\n@@ -2417,7 +2412,7 @@ where\n             context.config.trailing_comma()\n         },\n         shape: shape,\n-        ends_with_newline: ends_with_newline,\n+        ends_with_newline: tactic.ends_with_newline(context.config.generics_indent()),\n         config: context.config,\n     };\n \n@@ -2631,7 +2626,7 @@ fn rewrite_where_clause(\n         separator: \",\",\n         trailing_separator: comma_tactic,\n         shape: Shape::legacy(budget, offset),\n-        ends_with_newline: true,\n+        ends_with_newline: tactic.ends_with_newline(context.config.where_pred_indent()),\n         config: context.config,\n     };\n     let preds_str = try_opt!(write_list(&item_vec, &fmt));"}, {"sha": "088f0950f104d104b787a0e35f7c08bbae43f3af", "filename": "src/lib.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -28,27 +28,26 @@ extern crate regex;\n extern crate diff;\n extern crate term;\n \n-use errors::{Handler, DiagnosticBuilder};\n-use errors::emitter::{ColorConfig, EmitterWriter};\n-use syntax::ast;\n-use syntax::codemap::{CodeMap, Span, FilePathMapping};\n-use syntax::parse::{self, ParseSess};\n-\n-use strings::string_buffer::StringBuffer;\n-\n+use std::collections::HashMap;\n+use std::fmt;\n use std::io::{self, stdout, Write};\n use std::ops::{Add, Sub};\n use std::path::{Path, PathBuf};\n use std::rc::Rc;\n-use std::collections::HashMap;\n-use std::fmt;\n \n-use issues::{BadIssueSeeker, Issue};\n-use filemap::FileMap;\n-use visitor::FmtVisitor;\n+use errors::{DiagnosticBuilder, Handler};\n+use errors::emitter::{ColorConfig, EmitterWriter};\n+use strings::string_buffer::StringBuffer;\n+use syntax::ast;\n+use syntax::codemap::{CodeMap, FilePathMapping, Span};\n+use syntax::parse::{self, ParseSess};\n+\n+use checkstyle::{output_footer, output_header};\n use config::Config;\n-use checkstyle::{output_header, output_footer};\n+use filemap::FileMap;\n+use issues::{BadIssueSeeker, Issue};\n use utils::mk_sp;\n+use visitor::FmtVisitor;\n \n pub use self::summary::Summary;\n \n@@ -78,10 +77,6 @@ mod patterns;\n mod summary;\n mod vertical;\n \n-const MIN_STRING: usize = 10;\n-// When we get scoped annotations, we should have rustfmt::skip.\n-const SKIP_ANNOTATION: &'static str = \"rustfmt_skip\";\n-\n pub trait Spanned {\n     fn span(&self) -> Span;\n }"}, {"sha": "55db7cd9c0008c2fee11acefe56430812c68e654", "filename": "src/lists.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -11,7 +11,7 @@\n use std::cmp;\n use std::iter::Peekable;\n \n-use syntax::codemap::{CodeMap, BytePos};\n+use syntax::codemap::{BytePos, CodeMap};\n \n use {Indent, Shape};\n use comment::{find_comment_end, rewrite_comment, FindUncommented};\n@@ -124,6 +124,15 @@ pub enum DefinitiveListTactic {\n     Mixed,\n }\n \n+impl DefinitiveListTactic {\n+    pub fn ends_with_newline(&self, indent_style: IndentStyle) -> bool {\n+        match indent_style {\n+            IndentStyle::Block => *self != DefinitiveListTactic::Horizontal,\n+            IndentStyle::Visual => false,\n+        }\n+    }\n+}\n+\n pub fn definitive_tactic<I, T>(items: I, tactic: ListTactic, width: usize) -> DefinitiveListTactic\n where\n     I: IntoIterator<Item = T> + Clone,\n@@ -169,7 +178,7 @@ where\n \n     // Now that we know how we will layout, we can decide for sure if there\n     // will be a trailing separator.\n-    let trailing_separator = needs_trailing_separator(formatting.trailing_separator, tactic);\n+    let mut trailing_separator = needs_trailing_separator(formatting.trailing_separator, tactic);\n     let mut result = String::new();\n     let cloned_items = items.clone();\n     let mut iter = items.into_iter().enumerate().peekable();\n@@ -182,7 +191,7 @@ where\n         let inner_item = try_opt!(item.item.as_ref());\n         let first = i == 0;\n         let last = iter.peek().is_none();\n-        let separate = !last || trailing_separator;\n+        let mut separate = !last || trailing_separator;\n         let item_sep_len = if separate { sep_len } else { 0 };\n \n         // Item string may be multi-line. Its length (used for block comment alignment)\n@@ -213,6 +222,13 @@ where\n                     result.push('\\n');\n                     result.push_str(indent_str);\n                     line_len = 0;\n+                    if tactic == DefinitiveListTactic::Mixed && formatting.ends_with_newline {\n+                        if last {\n+                            separate = true;\n+                        } else {\n+                            trailing_separator = true;\n+                        }\n+                    }\n                 }\n \n                 if line_len > 0 {"}, {"sha": "989aaaaa58c4dc78c14bf0d253da40a0bebd8f76", "filename": "src/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -21,17 +21,17 @@\n \n use syntax::ast;\n use syntax::codemap::BytePos;\n-use syntax::parse::token::Token;\n use syntax::parse::new_parser_from_tts;\n-use syntax::tokenstream::TokenStream;\n+use syntax::parse::token::Token;\n use syntax::symbol;\n+use syntax::tokenstream::TokenStream;\n use syntax::util::ThinVec;\n \n use Shape;\n use codemap::SpanUtils;\n+use comment::{contains_comment, FindUncommented};\n+use expr::{rewrite_array, rewrite_call_inner};\n use rewrite::{Rewrite, RewriteContext};\n-use expr::{rewrite_call_inner, rewrite_array};\n-use comment::{FindUncommented, contains_comment};\n use utils::mk_sp;\n \n const FORCED_BRACKET_MACROS: &'static [&'static str] = &[\"vec!\"];"}, {"sha": "ac3ad906d17ef8a801d8735020439befa71ec05d", "filename": "src/missed_spans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use config::WriteMode;\n-use visitor::FmtVisitor;\n-use syntax::codemap::{BytePos, Span, Pos};\n-use comment::{CodeCharKind, CommentCodeSlices, rewrite_comment};\n use Shape;\n+use comment::{rewrite_comment, CodeCharKind, CommentCodeSlices};\n+use config::WriteMode;\n+use syntax::codemap::{BytePos, Pos, Span};\n use utils::mk_sp;\n+use visitor::FmtVisitor;\n \n impl<'a> FmtVisitor<'a> {\n     fn output_at_start(&self) -> bool {"}, {"sha": "8e728f98cd1ae5559eb96c0daf50a71d687603db", "filename": "src/modules.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use utils;\n-\n-use std::path::{Path, PathBuf};\n use std::collections::BTreeMap;\n+use std::path::{Path, PathBuf};\n \n use syntax::ast;\n use syntax::codemap;\n use syntax::parse::parser;\n \n+use utils::contains_skip;\n+\n \n /// List all the files containing modules of a crate.\n /// If a file is used twice in a crate, it appears only once.\n@@ -46,7 +46,7 @@ fn list_submodules<'a>(\n     debug!(\"list_submodules: search_dir: {:?}\", search_dir);\n     for item in &module.items {\n         if let ast::ItemKind::Mod(ref sub_mod) = item.node {\n-            if !utils::contains_skip(&item.attrs) {\n+            if !contains_skip(&item.attrs) {\n                 let is_internal =\n                     codemap.span_to_filename(item.span) == codemap.span_to_filename(sub_mod.inner);\n                 let dir_path = if is_internal {"}, {"sha": "544285ec213beb87fbc04d9c9418ef7209153d97", "filename": "src/patterns.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -8,21 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use Shape;\n+use syntax::ast::{self, BindingMode, FieldPat, Pat, PatKind, RangeEnd};\n+use syntax::codemap::{self, BytePos, Span};\n+use syntax::ptr;\n+\n+use {Shape, Spanned};\n use codemap::SpanUtils;\n-use rewrite::{Rewrite, RewriteContext};\n-use utils::{wrap_str, format_mutability, mk_sp};\n-use lists::{DefinitiveListTactic, SeparatorTactic, itemize_list, struct_lit_shape,\n-            struct_lit_tactic, shape_for_tactic, struct_lit_formatting, write_list};\n-use expr::{rewrite_call_inner, rewrite_unary_prefix, rewrite_pair, can_be_overflowed_expr,\n+use comment::FindUncommented;\n+use expr::{can_be_overflowed_expr, rewrite_call_inner, rewrite_pair, rewrite_unary_prefix,\n            wrap_struct_field};\n+use lists::{itemize_list, shape_for_tactic, struct_lit_formatting, struct_lit_shape,\n+            struct_lit_tactic, write_list, DefinitiveListTactic, SeparatorTactic};\n+use rewrite::{Rewrite, RewriteContext};\n use types::{rewrite_path, PathContext};\n-use super::Spanned;\n-use comment::FindUncommented;\n-\n-use syntax::ast::{self, BindingMode, Pat, PatKind, FieldPat, RangeEnd};\n-use syntax::ptr;\n-use syntax::codemap::{self, BytePos, Span};\n+use utils::{format_mutability, mk_sp, wrap_str};\n \n impl Rewrite for Pat {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {"}, {"sha": "3e9fd913d7c67d39f1e5cf443bcc7b33ef1f22fc", "filename": "src/rustfmt_diff.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Frustfmt_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Frustfmt_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustfmt_diff.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -1,7 +1,17 @@\n-use std::collections::VecDeque;\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n use diff;\n-use term;\n+use std::collections::VecDeque;\n use std::io;\n+use term;\n \n #[derive(Debug, PartialEq)]\n pub enum DiffLine {"}, {"sha": "00d8c0875e5bd50bc9a17baebbe16654d067dae2", "filename": "src/string.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -10,14 +10,14 @@\n \n // Format string literals.\n \n-use unicode_segmentation::UnicodeSegmentation;\n use regex::Regex;\n+use unicode_segmentation::UnicodeSegmentation;\n \n use Shape;\n use config::Config;\n use utils::wrap_str;\n \n-use MIN_STRING;\n+const MIN_STRING: usize = 10;\n \n pub struct StringFormat<'a> {\n     pub opener: &'a str,\n@@ -127,7 +127,7 @@ pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String>\n \n #[cfg(test)]\n mod test {\n-    use super::{StringFormat, rewrite_string};\n+    use super::{rewrite_string, StringFormat};\n \n     #[test]\n     fn issue343() {"}, {"sha": "c34a3bfaa6a820116fa703b6971ae1c2af5d05fa", "filename": "src/types.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -8,24 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::ops::Deref;\n use std::iter::ExactSizeIterator;\n+use std::ops::Deref;\n \n use syntax::abi;\n-use syntax::ast::{self, Mutability, FunctionRetTy};\n-use syntax::codemap::{self, Span, BytePos};\n+use syntax::ast::{self, FunctionRetTy, Mutability};\n+use syntax::codemap::{self, BytePos, Span};\n use syntax::print::pprust;\n use syntax::symbol::keywords;\n \n use {Shape, Spanned};\n use codemap::SpanUtils;\n+use config::{IndentStyle, Style, TypeDensity};\n+use expr::{rewrite_pair, rewrite_tuple, rewrite_unary_prefix, wrap_args_with_parens};\n use items::{format_generics_item_list, generics_shape_from_config};\n-use lists::{write_list, itemize_list, ListFormatting, SeparatorTactic, ListTactic,\n-            definitive_tactic};\n+use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListTactic,\n+            SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n-use utils::{extra_offset, format_mutability, colon_spaces, wrap_str, mk_sp, last_line_width};\n-use expr::{rewrite_unary_prefix, rewrite_pair, rewrite_tuple, wrap_args_with_parens};\n-use config::{IndentStyle, Style, TypeDensity};\n+use utils::{colon_spaces, extra_offset, format_mutability, last_line_width, mk_sp, wrap_str};\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub enum PathContext {\n@@ -360,7 +360,7 @@ where\n             context.config.trailing_comma()\n         },\n         shape: list_shape,\n-        ends_with_newline: false,\n+        ends_with_newline: tactic.ends_with_newline(context.config.fn_call_style()),\n         config: context.config,\n     };\n "}, {"sha": "dc511fc31017f41d3e7a08c7cd299b30bb2e81a7", "filename": "src/utils.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -11,15 +11,16 @@\n use std::borrow::Cow;\n use std::cmp::Ordering;\n \n-use syntax::ast::{self, Visibility, Attribute, MetaItem, MetaItemKind, NestedMetaItem,\n-                  NestedMetaItemKind, Path};\n-use syntax::codemap::{BytePos, Span, NO_EXPANSION};\n use syntax::abi;\n+use syntax::ast::{self, Attribute, MetaItem, MetaItemKind, NestedMetaItem, NestedMetaItemKind,\n+                  Path, Visibility};\n+use syntax::codemap::{BytePos, Span, NO_EXPANSION};\n \n use Shape;\n use rewrite::{Rewrite, RewriteContext};\n \n-use SKIP_ANNOTATION;\n+// When we get scoped annotations, we should have rustfmt::skip.\n+const SKIP_ANNOTATION: &'static str = \"rustfmt_skip\";\n \n // Computes the length of a string's last line, minus offset.\n pub fn extra_offset(text: &str, shape: Shape) -> usize {"}, {"sha": "04d9ac9d35b9a6d87b6e7a91c7cfd84f7f6b3c14", "filename": "src/vertical.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -12,6 +12,9 @@\n \n use std::cmp;\n \n+use syntax::ast;\n+use syntax::codemap::{BytePos, Span};\n+\n use {Indent, Shape, Spanned};\n use codemap::SpanUtils;\n use comment::contains_comment;\n@@ -21,9 +24,6 @@ use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListTac\n use rewrite::{Rewrite, RewriteContext};\n use utils::{contains_skip, mk_sp};\n \n-use syntax::ast;\n-use syntax::codemap::{Span, BytePos};\n-\n pub trait AlignedItem {\n     fn skip(&self) -> bool;\n     fn get_span(&self) -> Span;"}, {"sha": "97b6ce2926952433119b4c2a9c7829784111c6ad", "filename": "src/visitor.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -10,24 +10,23 @@\n \n use std::cmp;\n \n+use strings::string_buffer::StringBuffer;\n use syntax::{ast, ptr, visit};\n-use syntax::codemap::{CodeMap, Span, BytePos};\n+use syntax::codemap::{BytePos, CodeMap, Span};\n use syntax::parse::ParseSess;\n \n-use strings::string_buffer::StringBuffer;\n-\n use {Indent, Shape};\n-use expr::{format_expr, ExprType};\n-use utils::{self, mk_sp};\n use codemap::{LineRangeUtils, SpanUtils};\n use comment::{contains_comment, FindUncommented};\n-use config::Config;\n-use rewrite::{Rewrite, RewriteContext};\n use comment::rewrite_comment;\n-use macros::{rewrite_macro, MacroPosition};\n-use items::{rewrite_static, rewrite_associated_type, rewrite_associated_impl_type,\n-            rewrite_type_alias, format_impl, format_trait};\n+use config::Config;\n+use expr::{format_expr, ExprType};\n+use items::{format_impl, format_trait, rewrite_associated_impl_type, rewrite_associated_type,\n+            rewrite_static, rewrite_type_alias};\n use lists::{itemize_list, write_list, DefinitiveListTactic, ListFormatting, SeparatorTactic};\n+use macros::{rewrite_macro, MacroPosition};\n+use rewrite::{Rewrite, RewriteContext};\n+use utils::{self, mk_sp};\n \n fn is_use_item(item: &ast::Item) -> bool {\n     match item.node {"}, {"sha": "18e389b0ba713dbd3aec38f91f00627043260f7d", "filename": "tests/system.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -15,7 +15,7 @@ extern crate term;\n \n use std::collections::HashMap;\n use std::fs;\n-use std::io::{self, Read, BufRead, BufReader};\n+use std::io::{self, BufRead, BufReader, Read};\n use std::path::{Path, PathBuf};\n \n use rustfmt::*;"}, {"sha": "99283722beea1e331e37540693024ab8d9ad1c2a", "filename": "tests/target/configs-fn_args_density-compressed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Ftarget%2Fconfigs-fn_args_density-compressed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Ftarget%2Fconfigs-fn_args_density-compressed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_args_density-compressed.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -10,12 +10,12 @@ trait Lorem {\n \n     fn lorem(\n         ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: onsectetur,\n-        adipiscing: Adipiscing, elit: Elit\n+        adipiscing: Adipiscing, elit: Elit,\n     );\n \n     fn lorem(\n         ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: onsectetur,\n-        adipiscing: Adipiscing, elit: Elit\n+        adipiscing: Adipiscing, elit: Elit,\n     ) {\n         // body\n     }"}, {"sha": "84c3b26bd6e1a3b5b9b0041327d4223be8db197e", "filename": "tests/target/configs-imports_indent-block.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Ftarget%2Fconfigs-imports_indent-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Ftarget%2Fconfigs-imports_indent-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-imports_indent-block.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-imports_indent: Block\n+\n+use lists::{\n+    definitive_tactic, itemize_list, shape_for_tactic, struct_lit_formatting, struct_lit_shape,\n+    struct_lit_tactic, write_list, DefinitiveListTactic, ListFormatting, ListItem, ListTactic,\n+    SeparatorTactic,\n+};"}, {"sha": "4a63556d45bca16a536a0d0764391ad17992d00d", "filename": "tests/target/configs-imports_layout-horizontal_vertical.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Ftarget%2Fconfigs-imports_layout-horizontal_vertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Ftarget%2Fconfigs-imports_layout-horizontal_vertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-imports_layout-horizontal_vertical.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -0,0 +1,18 @@\n+// rustfmt-imports_indent: Block\n+// rustfmt-imports_layout: HorizontalVertical\n+\n+use comment::{contains_comment, recover_comment_removed, rewrite_comment, FindUncommented};\n+use lists::{\n+    definitive_tactic,\n+    itemize_list,\n+    shape_for_tactic,\n+    struct_lit_formatting,\n+    struct_lit_shape,\n+    struct_lit_tactic,\n+    write_list,\n+    DefinitiveListTactic,\n+    ListFormatting,\n+    ListItem,\n+    ListTactic,\n+    SeparatorTactic,\n+};"}, {"sha": "5d3349a01bba7ae3518a1d785319f65bfa636b22", "filename": "tests/target/configs-imports_layout-mixed.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Ftarget%2Fconfigs-imports_layout-mixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Ftarget%2Fconfigs-imports_layout-mixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-imports_layout-mixed.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -0,0 +1,9 @@\n+// rustfmt-imports_indent: Block\n+// rustfmt-imports_layout: Mixed\n+\n+use comment::{contains_comment, recover_comment_removed, rewrite_comment, FindUncommented};\n+use lists::{\n+    definitive_tactic, itemize_list, shape_for_tactic, struct_lit_formatting, struct_lit_shape,\n+    struct_lit_tactic, write_list, DefinitiveListTactic, ListFormatting, ListItem, ListTactic,\n+    SeparatorTactic,\n+};"}, {"sha": "bf87553dedcf3902487923b8278976b788b75c78", "filename": "tests/target/fn-custom.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Ftarget%2Ffn-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Ftarget%2Ffn-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -4,15 +4,15 @@\n // Test compressed layout of args.\n fn foo(\n     a: Aaaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbbbb, c: Ccccccccccccccccc, d: Ddddddddddddddddddddddddd,\n-    e: Eeeeeeeeeeeeeeeeeee\n+    e: Eeeeeeeeeeeeeeeeeee,\n ) {\n     foo();\n }\n \n impl Foo {\n     fn foo(\n         self, a: Aaaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbbbb, c: Ccccccccccccccccc,\n-        d: Ddddddddddddddddddddddddd, e: Eeeeeeeeeeeeeeeeeee\n+        d: Ddddddddddddddddddddddddd, e: Eeeeeeeeeeeeeeeeeee,\n     ) {\n         foo();\n     }"}, {"sha": "e381b6e62314d49a46303ce03d683efc801e03ee", "filename": "tests/target/fn-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Ftarget%2Ffn-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Ftarget%2Ffn-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-simple.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -42,7 +42,7 @@ where\n         C,\n         D,\n         // pre comment\n-        E, /* last comment */\n+        E, // last comment\n     ) -> &SomeType,\n {\n     arg(a, b, c, d, e)"}, {"sha": "4ac6df5def85dee9455643d9c575ddc345d0d269", "filename": "tests/target/hard-tabs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Ftarget%2Fhard-tabs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Ftarget%2Fhard-tabs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fhard-tabs.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -67,7 +67,7 @@ fn main() {\n \t\t\tC,\n \t\t\tD,\n \t\t\t// pre comment\n-\t\t\tE, /* last comment */\n+\t\t\tE, // last comment\n \t\t) -> &SomeType,\n \t{\n \t\targ(a, b, c, d, e)"}, {"sha": "3695d6b4913cf41d47618b4b22a4e625d52e00de", "filename": "tests/target/imports-reorder-lines.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Ftarget%2Fimports-reorder-lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Ftarget%2Fimports-reorder-lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimports-reorder-lines.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -1,7 +1,7 @@\n // rustfmt-reorder_imports: true\n \n-use std::cmp::{d, c, b, a};\n-use std::cmp::{b, e, g, f};\n+use std::cmp::{a, b, c, d};\n+use std::cmp::{b, e, f, g};\n // This comment should stay with `use std::ddd;`\n use std::ddd;\n use std::ddd::aaa;"}, {"sha": "fbb56e3aa0c1eed15f36c2d40e19bfc651096afb", "filename": "tests/target/imports-reorder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Ftarget%2Fimports-reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Ftarget%2Fimports-reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimports-reorder.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -3,4 +3,4 @@\n \n use path::{self /* self */, /* A */ A, B /* B */, C};\n \n-use {Z, aa, ab, ac, b};\n+use {aa, ab, ac, b, Z};"}, {"sha": "ed176e4300203994a4fde1dc609fbde85aed29df", "filename": "tests/target/imports.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Ftarget%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Ftarget%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimports.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -4,36 +4,36 @@\n // Imports.\n \n // Long import.\n-use syntax::ast::{ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic, ItemDefaultImpl};\n+use syntax::ast::{ItemDefaultImpl, ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic};\n use exceedingly::looooooooooooooooooooooooooooooooooooooooooooooooooooooooooong::import::path::{ItemA,\n                                                                                                 ItemB};\n use exceedingly::loooooooooooooooooooooooooooooooooooooooooooooooooooooooong::import::path::{ItemA,\n                                                                                              ItemB};\n \n-use list::{// Some item\n-           SomeItem, // Comment\n-           // Another item\n+use list::{// Another item\n            AnotherItem, // Another Comment\n            // Last Item\n-           LastItem};\n+           LastItem,\n+           // Some item\n+           SomeItem /* Comment */};\n \n use test::{/* A */ self /* B */, Other /* C */};\n \n use syntax;\n-use {/* Pre-comment! */ Foo, Bar /* comment */};\n+use {Bar /* comment */, /* Pre-comment! */ Foo};\n use Foo::{Bar, Baz};\n-pub use syntax::ast::{Expr_, Expr, ExprAssign, ExprCall, ExprMethodCall, ExprPath};\n+pub use syntax::ast::{Expr, ExprAssign, ExprCall, ExprMethodCall, ExprPath, Expr_};\n \n use self;\n use std::io;\n use std::io;\n \n mod Foo {\n-    pub use syntax::ast::{ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic, ItemDefaultImpl};\n+    pub use syntax::ast::{ItemDefaultImpl, ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic};\n \n     mod Foo2 {\n-        pub use syntax::ast::{self, ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic,\n-                              ItemDefaultImpl};\n+        pub use syntax::ast::{self, ItemDefaultImpl, ItemForeignMod, ItemImpl, ItemMac, ItemMod,\n+                              ItemStatic};\n     }\n }\n "}, {"sha": "a7d7957b4787c2b734cdcb17a59d2cd46f6175a9", "filename": "tests/target/multiple.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Ftarget%2Fmultiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Ftarget%2Fmultiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmultiple.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -17,9 +17,9 @@ extern crate foo;\n extern crate foo;\n \n use std::cell::*;\n-use std::{self, any, ascii, borrow, boxed, char, borrow, boxed, char, borrow, borrow, boxed, char,\n-          borrow, boxed, char, borrow, boxed, char, borrow, boxed, char, borrow, boxed, char,\n-          borrow, boxed, char, borrow, boxed, char, borrow, boxed, char};\n+use std::{self, any, ascii, borrow, borrow, borrow, borrow, borrow, borrow, borrow, borrow,\n+          borrow, borrow, borrow, boxed, boxed, boxed, boxed, boxed, boxed, boxed, boxed, boxed,\n+          boxed, char, char, char, char, char, char, char, char, char, char};\n \n mod doc;\n mod other;"}, {"sha": "ead395b2384a86cb296ef06deb830007f1b2d36c", "filename": "tests/target/nestedmod/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Ftarget%2Fnestedmod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Ftarget%2Fnestedmod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fnestedmod%2Fmod.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -3,7 +3,7 @@ mod mod2a;\n mod mod2b;\n \n mod mymod1 {\n-    use mod2a::{Foo, Bar};\n+    use mod2a::{Bar, Foo};\n     mod mod3a;\n }\n "}, {"sha": "5a12989c857c668fce6abdb513a9cae15bc03d12", "filename": "tests/target/type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Ftarget%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d043cc5cac3a2bc76e9ce8a2705f23cc701f05/tests%2Ftarget%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftype.rs?ref=05d043cc5cac3a2bc76e9ce8a2705f23cc701f05", "patch": "@@ -25,7 +25,7 @@ struct F {\n         y: String, // comment 3\n         z: Foo,\n         // comment\n-        ... /* comment 2 */\n+        ... // comment 2\n     ),\n }\n "}]}