{"sha": "152217d29cc842d9a7577e9361f5960f87dcdf5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1MjIxN2QyOWNjODQyZDlhNzU3N2U5MzYxZjU5NjBmODdkY2RmNWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-19T02:38:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-19T02:38:19Z"}, "message": "Auto merge of #48978 - SimonSapin:debug-hex, r=KodrAus\n\nAdd hexadecimal formatting of integers with fmt::Debug\n\nThis can be used for integers within a larger types which implements Debug (possibly through derive) but not fmt::UpperHex or fmt::LowerHex.\n\n```rust\nassert!(format!(\"{:02x?}\", b\"Foo\\0\") == \"[46, 6f, 6f, 00]\");\nassert!(format!(\"{:02X?}\", b\"Foo\\0\") == \"[46, 6F, 6F, 00]\");\n```\n\nRFC: https://github.com/rust-lang/rfcs/pull/2226\n\nThe new formatting string syntax (`x?` and `X?`) is insta-stable in this PR because I don\u2019t know how to change a built-in proc macro\u2019s behavior based of a feature gate. I can look into adding that, but I also strongly suspect that keeping this feature unstable for a time period would not be useful as possibly no-one would use it during that time.\n\nThis PR does not add the new (public) `fmt::Formatter` proposed in the API because:\n\n* There was some skepticism on response to this part of the RFC\n* It is not possible to implement as-is without larger changes to `fmt`, because `Formatter` at the moment has no easy way to tell apart for example `Octal` from `Binary`: it only has a function pointer for the relevant `fmt()` method.\n\nIf some integer-like type outside of `std` want to implement this behavior, another RFC will likely need to propose a different public API for `Formatter`.", "tree": {"sha": "f54d4e5fbd697c667903e774bf53bd0916ed908b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f54d4e5fbd697c667903e774bf53bd0916ed908b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/152217d29cc842d9a7577e9361f5960f87dcdf5c", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/152217d29cc842d9a7577e9361f5960f87dcdf5c", "html_url": "https://github.com/rust-lang/rust/commit/152217d29cc842d9a7577e9361f5960f87dcdf5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/152217d29cc842d9a7577e9361f5960f87dcdf5c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2f4744d2db4e162df824d0bd0b093ba4b351545", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2f4744d2db4e162df824d0bd0b093ba4b351545", "html_url": "https://github.com/rust-lang/rust/commit/c2f4744d2db4e162df824d0bd0b093ba4b351545"}, {"sha": "4897935e8645e5f1d9d9ef61c78a1cb019c44f89", "url": "https://api.github.com/repos/rust-lang/rust/commits/4897935e8645e5f1d9d9ef61c78a1cb019c44f89", "html_url": "https://github.com/rust-lang/rust/commit/4897935e8645e5f1d9d9ef61c78a1cb019c44f89"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "2c4cdef03b0f7d3f7ed331a5f2e0ef2c47963970", "filename": "src/liballoc/fmt.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/152217d29cc842d9a7577e9361f5960f87dcdf5c/src%2Fliballoc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152217d29cc842d9a7577e9361f5960f87dcdf5c/src%2Fliballoc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ffmt.rs?ref=152217d29cc842d9a7577e9361f5960f87dcdf5c", "patch": "@@ -113,6 +113,8 @@\n //!\n //! * *nothing* \u21d2 [`Display`]\n //! * `?` \u21d2 [`Debug`]\n+//! * `x?` \u21d2 [`Debug`] with lower-case hexadecimal integers\n+//! * `X?` \u21d2 [`Debug`] with lower-case hexadecimal integers\n //! * `o` \u21d2 [`Octal`](trait.Octal.html)\n //! * `x` \u21d2 [`LowerHex`](trait.LowerHex.html)\n //! * `X` \u21d2 [`UpperHex`](trait.UpperHex.html)"}, {"sha": "3ecd73873c09195a35bff6fadac166a9111b523e", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/152217d29cc842d9a7577e9361f5960f87dcdf5c/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152217d29cc842d9a7577e9361f5960f87dcdf5c/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=152217d29cc842d9a7577e9361f5960f87dcdf5c", "patch": "@@ -333,7 +333,7 @@ impl<'a> ArgumentV1<'a> {\n \n // flags available in the v1 format of format_args\n #[derive(Copy, Clone)]\n-enum FlagV1 { SignPlus, SignMinus, Alternate, SignAwareZeroPad, }\n+enum FlagV1 { SignPlus, SignMinus, Alternate, SignAwareZeroPad, DebugLowerHex, DebugUpperHex }\n \n impl<'a> Arguments<'a> {\n     /// When using the format_args!() macro, this function is used to generate the\n@@ -1537,6 +1537,12 @@ impl<'a> Formatter<'a> {\n         self.flags & (1 << FlagV1::SignAwareZeroPad as u32) != 0\n     }\n \n+    // FIXME: Decide what public API we want for these two flags.\n+    // https://github.com/rust-lang/rust/issues/48584\n+    fn debug_lower_hex(&self) -> bool { self.flags & (1 << FlagV1::DebugLowerHex as u32) != 0 }\n+\n+    fn debug_upper_hex(&self) -> bool { self.flags & (1 << FlagV1::DebugUpperHex as u32) != 0 }\n+\n     /// Creates a [`DebugStruct`] builder designed to assist with creation of\n     /// [`fmt::Debug`] implementations for structs.\n     ///"}, {"sha": "86f1b5a8f287546db828de5f0f7b9bbf7df448e4", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/152217d29cc842d9a7577e9361f5960f87dcdf5c/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152217d29cc842d9a7577e9361f5960f87dcdf5c/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=152217d29cc842d9a7577e9361f5960f87dcdf5c", "patch": "@@ -159,7 +159,13 @@ macro_rules! debug {\n         impl fmt::Debug for $T {\n             #[inline]\n             fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-                fmt::Display::fmt(self, f)\n+                if f.debug_lower_hex() {\n+                    fmt::LowerHex::fmt(self, f)\n+                } else if f.debug_upper_hex() {\n+                    fmt::UpperHex::fmt(self, f)\n+                } else {\n+                    fmt::Display::fmt(self, f)\n+                }\n             }\n         }\n     }"}, {"sha": "bc205ec0582ea8c7ae1405c323494fa62eb67aff", "filename": "src/libcore/tests/fmt/num.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/152217d29cc842d9a7577e9361f5960f87dcdf5c/src%2Flibcore%2Ftests%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152217d29cc842d9a7577e9361f5960f87dcdf5c/src%2Flibcore%2Ftests%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Fnum.rs?ref=152217d29cc842d9a7577e9361f5960f87dcdf5c", "patch": "@@ -150,3 +150,9 @@ fn test_format_int_twos_complement() {\n     assert!(format!(\"{}\", i32::MIN) == \"-2147483648\");\n     assert!(format!(\"{}\", i64::MIN) == \"-9223372036854775808\");\n }\n+\n+#[test]\n+fn test_format_debug_hex() {\n+    assert!(format!(\"{:02x?}\", b\"Foo\\0\") == \"[46, 6f, 6f, 00]\");\n+    assert!(format!(\"{:02X?}\", b\"Foo\\0\") == \"[46, 6F, 6F, 00]\");\n+}"}, {"sha": "0f45f965104cadff7b8cce5e168e73a0036cf36b", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/152217d29cc842d9a7577e9361f5960f87dcdf5c/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152217d29cc842d9a7577e9361f5960f87dcdf5c/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=152217d29cc842d9a7577e9361f5960f87dcdf5c", "patch": "@@ -108,6 +108,10 @@ pub enum Flag {\n     /// For numbers, this means that the number will be padded with zeroes,\n     /// and the sign (`+` or `-`) will precede them.\n     FlagSignAwareZeroPad,\n+    /// For Debug / `?`, format integers in lower-case hexadecimal.\n+    FlagDebugLowerHex,\n+    /// For Debug / `?`, format integers in upper-case hexadecimal.\n+    FlagDebugUpperHex,\n }\n \n /// A count is used for the precision and width parameters of an integer, and\n@@ -377,8 +381,22 @@ impl<'a> Parser<'a> {\n                 spec.precision = self.count();\n             }\n         }\n-        // Finally the actual format specifier\n-        if self.consume('?') {\n+        // Optional radix followed by the actual format specifier\n+        if self.consume('x') {\n+            if self.consume('?') {\n+                spec.flags |= 1 << (FlagDebugLowerHex as u32);\n+                spec.ty = \"?\";\n+            } else {\n+                spec.ty = \"x\";\n+            }\n+        } else if self.consume('X') {\n+            if self.consume('?') {\n+                spec.flags |= 1 << (FlagDebugUpperHex as u32);\n+                spec.ty = \"?\";\n+            } else {\n+                spec.ty = \"X\";\n+            }\n+        } else if self.consume('?') {\n             spec.ty = \"?\";\n         } else {\n             spec.ty = self.word();"}]}