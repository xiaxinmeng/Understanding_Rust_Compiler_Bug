{"sha": "cb6d2dfa8923902b0992a1522dc4a45a9d3ba690", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNmQyZGZhODkyMzkwMmIwOTkyYTE1MjJkYzRhNDVhOWQzYmE2OTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-16T20:28:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-16T20:28:21Z"}, "message": "Auto merge of #53461 - petrochenkov:pmu, r=alexcrichton\n\nresolve: Do not error on access to proc macros imported with `#[macro_use]`\n\nThis error is artificial, but previously, when `#[macro_use] extern crate x;` was stable, but non-derive proc macros were not, it worked like kind of a feature gate. Now both features are stable, so the error is no longer necessary.\n\nThis PR simplifies how `#[macro_use] extern crate x;` works - it takes all items from macro namespace of `x`'s root and puts them into macro prelude from which they all can now be accessed.", "tree": {"sha": "337d98311749fe6d210a91153d4f4407523a4ed8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/337d98311749fe6d210a91153d4f4407523a4ed8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb6d2dfa8923902b0992a1522dc4a45a9d3ba690", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb6d2dfa8923902b0992a1522dc4a45a9d3ba690", "html_url": "https://github.com/rust-lang/rust/commit/cb6d2dfa8923902b0992a1522dc4a45a9d3ba690", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb6d2dfa8923902b0992a1522dc4a45a9d3ba690/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a2dec6e583bc6425a91b277bdc6c602088845f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a2dec6e583bc6425a91b277bdc6c602088845f1", "html_url": "https://github.com/rust-lang/rust/commit/8a2dec6e583bc6425a91b277bdc6c602088845f1"}, {"sha": "e411bb33f828fd8e63ca5e9e6f011e50828e23bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e411bb33f828fd8e63ca5e9e6f011e50828e23bd", "html_url": "https://github.com/rust-lang/rust/commit/e411bb33f828fd8e63ca5e9e6f011e50828e23bd"}], "stats": {"total": 85, "additions": 2, "deletions": 83}, "files": [{"sha": "3f9c15209578c04b227187c00b256d061315ed99", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb6d2dfa8923902b0992a1522dc4a45a9d3ba690/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6d2dfa8923902b0992a1522dc4a45a9d3ba690/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=cb6d2dfa8923902b0992a1522dc4a45a9d3ba690", "patch": "@@ -1429,8 +1429,6 @@ pub struct Resolver<'a, 'b: 'a> {\n     ambiguity_errors: Vec<AmbiguityError<'a>>,\n     /// `use` injections are delayed for better placement and deduplication\n     use_injections: Vec<UseError<'a>>,\n-    /// `use` injections for proc macros wrongly imported with #[macro_use]\n-    proc_mac_errors: Vec<macros::ProcMacError>,\n     /// crate-local macro expanded `macro_export` referred to by a module-relative path\n     macro_expanded_macro_export_errors: BTreeSet<(Span, Span)>,\n \n@@ -1458,9 +1456,6 @@ pub struct Resolver<'a, 'b: 'a> {\n     /// Avoid duplicated errors for \"name already defined\".\n     name_already_seen: FxHashMap<Name, Span>,\n \n-    /// A set of procedural macros imported by `#[macro_use]` that have already been warned about\n-    warned_proc_macros: FxHashSet<Name>,\n-\n     potentially_unused_imports: Vec<&'a ImportDirective<'a>>,\n \n     /// This table maps struct IDs into struct constructor IDs,\n@@ -1744,7 +1739,6 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             privacy_errors: Vec::new(),\n             ambiguity_errors: Vec::new(),\n             use_injections: Vec::new(),\n-            proc_mac_errors: Vec::new(),\n             macro_expanded_macro_export_errors: BTreeSet::new(),\n \n             arenas,\n@@ -1766,7 +1760,6 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             local_macro_def_scopes: FxHashMap(),\n             name_already_seen: FxHashMap(),\n             whitelisted_legacy_custom_derives: Vec::new(),\n-            warned_proc_macros: FxHashSet(),\n             potentially_unused_imports: Vec::new(),\n             struct_constructors: DefIdMap(),\n             found_unresolved_macro: false,\n@@ -4602,7 +4595,6 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n \n     fn report_errors(&mut self, krate: &Crate) {\n         self.report_with_use_injections(krate);\n-        self.report_proc_macro_import(krate);\n         let mut reported_spans = FxHashSet();\n \n         for &(span_use, span_def) in &self.macro_expanded_macro_export_errors {"}, {"sha": "b9be52d8e059f7695af263ecf693b907fbe87178", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/cb6d2dfa8923902b0992a1522dc4a45a9d3ba690/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6d2dfa8923902b0992a1522dc4a45a9d3ba690/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=cb6d2dfa8923902b0992a1522dc4a45a9d3ba690", "patch": "@@ -19,7 +19,6 @@ use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX, DefIndex,\n use rustc::hir::def::{Def, NonMacroAttrKind};\n use rustc::hir::map::{self, DefCollector};\n use rustc::{ty, lint};\n-use rustc::middle::cstore::CrateStore;\n use syntax::ast::{self, Name, Ident};\n use syntax::attr;\n use syntax::errors::DiagnosticBuilder;\n@@ -110,14 +109,6 @@ pub struct ParentScope<'a> {\n     crate derives: Vec<ast::Path>,\n }\n \n-pub struct ProcMacError {\n-    crate_name: Symbol,\n-    name: Symbol,\n-    module: ast::NodeId,\n-    use_span: Span,\n-    warn_msg: &'static str,\n-}\n-\n // Macro namespace is separated into two sub-namespaces, one for bang macros and\n // one for attribute-like macros (attributes, derives).\n // We ignore resolutions from one sub-namespace when searching names in scope for another.\n@@ -980,7 +971,6 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     check_consistency(self, binding.def_ignoring_ambiguity());\n                     if from_prelude {\n                         self.record_use(ident, MacroNS, binding);\n-                        self.err_if_macro_use_proc_macro(ident.name, span, binding);\n                     }\n                 }\n             };\n@@ -1132,69 +1122,6 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         }\n     }\n \n-    /// Error if `ext` is a Macros 1.1 procedural macro being imported by `#[macro_use]`\n-    fn err_if_macro_use_proc_macro(&mut self, name: Name, use_span: Span,\n-                                   binding: &NameBinding<'a>) {\n-        let krate = match binding.def() {\n-            Def::NonMacroAttr(..) | Def::Err => return,\n-            Def::Macro(def_id, _) => def_id.krate,\n-            _ => unreachable!(),\n-        };\n-\n-        // Plugin-based syntax extensions are exempt from this check\n-        if krate == CrateNum::BuiltinMacros { return; }\n-\n-        let ext = binding.get_macro(self);\n-\n-        match *ext {\n-            // If `ext` is a procedural macro, check if we've already warned about it\n-            SyntaxExtension::AttrProcMacro(..) | SyntaxExtension::ProcMacro { .. } =>\n-                if !self.warned_proc_macros.insert(name) { return; },\n-            _ => return,\n-        }\n-\n-        let warn_msg = match *ext {\n-            SyntaxExtension::AttrProcMacro(..) =>\n-                \"attribute procedural macros cannot be imported with `#[macro_use]`\",\n-            SyntaxExtension::ProcMacro { .. } =>\n-                \"procedural macros cannot be imported with `#[macro_use]`\",\n-            _ => return,\n-        };\n-\n-        let def_id = self.current_module.normal_ancestor_id;\n-        let node_id = self.definitions.as_local_node_id(def_id).unwrap();\n-\n-        self.proc_mac_errors.push(ProcMacError {\n-            crate_name: self.cstore.crate_name_untracked(krate),\n-            name,\n-            module: node_id,\n-            use_span,\n-            warn_msg,\n-        });\n-    }\n-\n-    pub fn report_proc_macro_import(&mut self, krate: &ast::Crate) {\n-        for err in self.proc_mac_errors.drain(..) {\n-            let (span, found_use) = ::UsePlacementFinder::check(krate, err.module);\n-\n-            if let Some(span) = span {\n-                let found_use = if found_use { \"\" } else { \"\\n\" };\n-                self.session.struct_span_err(err.use_span, err.warn_msg)\n-                    .span_suggestion_with_applicability(\n-                        span,\n-                        \"instead, import the procedural macro like any other item\",\n-                        format!(\"use {}::{};{}\", err.crate_name, err.name, found_use),\n-                        Applicability::MachineApplicable\n-                    ).emit();\n-            } else {\n-                self.session.struct_span_err(err.use_span, err.warn_msg)\n-                    .help(&format!(\"instead, import the procedural macro like any other item: \\\n-                                    `use {}::{};`\", err.crate_name, err.name))\n-                    .emit();\n-            }\n-        }\n-    }\n-\n     fn gate_legacy_custom_derive(&mut self, name: Symbol, span: Span) {\n         if !self.session.features_untracked().custom_derive {\n             let sess = &self.session.parse_sess;"}, {"sha": "679cb7728680ddbf26eefe2887c77cd9f7191a09", "filename": "src/test/ui-fulldeps/proc-macro/auxiliary/attr_proc_macro.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cb6d2dfa8923902b0992a1522dc4a45a9d3ba690/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6d2dfa8923902b0992a1522dc4a45a9d3ba690/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr_proc_macro.rs?ref=cb6d2dfa8923902b0992a1522dc4a45a9d3ba690", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/attr_proc_macro.rs"}, {"sha": "6484725814a10b75581b8fa23a92e263dc695954", "filename": "src/test/ui-fulldeps/proc-macro/auxiliary/bang_proc_macro.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cb6d2dfa8923902b0992a1522dc4a45a9d3ba690/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fbang_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6d2dfa8923902b0992a1522dc4a45a9d3ba690/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fbang_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fbang_proc_macro.rs?ref=cb6d2dfa8923902b0992a1522dc4a45a9d3ba690", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/bang_proc_macro.rs"}, {"sha": "904562e903d65634e3bcbe5dc41657435749d187", "filename": "src/test/ui-fulldeps/proc-macro/macro-use-attr.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6d2dfa8923902b0992a1522dc4a45a9d3ba690/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-use-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6d2dfa8923902b0992a1522dc4a45a9d3ba690/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-use-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-use-attr.rs?ref=cb6d2dfa8923902b0992a1522dc4a45a9d3ba690", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-pass\n // aux-build:attr_proc_macro.rs\n \n #[macro_use] extern crate attr_proc_macro;\n \n #[attr_proc_macro]\n-//~^ ERROR: attribute procedural macros cannot be imported with `#[macro_use]`\n struct Foo;\n \n fn main() {", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/macro-use-attr.rs"}, {"sha": "9a54696d1f076a80b608f3fc7203a352a36244a1", "filename": "src/test/ui-fulldeps/proc-macro/macro-use-bang.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb6d2dfa8923902b0992a1522dc4a45a9d3ba690/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-use-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6d2dfa8923902b0992a1522dc4a45a9d3ba690/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-use-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-use-bang.rs?ref=cb6d2dfa8923902b0992a1522dc4a45a9d3ba690", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-pass\n // aux-build:bang_proc_macro.rs\n \n #![feature(proc_macro_non_items)]\n@@ -17,5 +18,4 @@ extern crate bang_proc_macro;\n \n fn main() {\n     bang_proc_macro!(println!(\"Hello, world!\"));\n-    //~^ ERROR: procedural macros cannot be imported with `#[macro_use]`\n }", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/macro-use-bang.rs"}]}