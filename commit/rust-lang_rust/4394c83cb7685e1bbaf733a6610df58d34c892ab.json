{"sha": "4394c83cb7685e1bbaf733a6610df58d34c892ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzOTRjODNjYjc2ODVlMWJiYWY3MzNhNjYxMGRmNThkMzRjODkyYWI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-23T14:57:06Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-23T14:57:06Z"}, "message": "type_check/mod.rs: rustfmt", "tree": {"sha": "f31f9fa836b186ebbcc94a1906fbfab8e234d0d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f31f9fa836b186ebbcc94a1906fbfab8e234d0d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4394c83cb7685e1bbaf733a6610df58d34c892ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4394c83cb7685e1bbaf733a6610df58d34c892ab", "html_url": "https://github.com/rust-lang/rust/commit/4394c83cb7685e1bbaf733a6610df58d34c892ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4394c83cb7685e1bbaf733a6610df58d34c892ab/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1371cd27d04a9a850c9141b5657367a4706ce60d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1371cd27d04a9a850c9141b5657367a4706ce60d", "html_url": "https://github.com/rust-lang/rust/commit/1371cd27d04a9a850c9141b5657367a4706ce60d"}], "stats": {"total": 51, "additions": 27, "deletions": 24}, "files": [{"sha": "6db107344747e40733cd00314c6e8af269b5d119", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4394c83cb7685e1bbaf733a6610df58d34c892ab/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4394c83cb7685e1bbaf733a6610df58d34c892ab/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=4394c83cb7685e1bbaf733a6610df58d34c892ab", "patch": "@@ -1034,7 +1034,11 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n \n                     self.eq_types(self_ty, impl_self_ty, locations, category)?;\n \n-                    self.prove_predicate(ty::Predicate::WellFormed(impl_self_ty), locations, category);\n+                    self.prove_predicate(\n+                        ty::Predicate::WellFormed(impl_self_ty),\n+                        locations,\n+                        category,\n+                    );\n                 }\n \n                 // Prove the predicates coming along with `def_id`.\n@@ -1072,11 +1076,9 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     /// particularly necessary -- we'll do it lazilly as we process\n     /// the value anyway -- but in some specific cases it is useful to\n     /// normalize so we can suppress duplicate error messages.\n-    fn fold_to_region_vid<T>(\n-        &self,\n-        value: T\n-    ) -> T\n-    where T: TypeFoldable<'tcx>\n+    fn fold_to_region_vid<T>(&self, value: T) -> T\n+    where\n+        T: TypeFoldable<'tcx>,\n     {\n         if let Some(borrowck_context) = &self.borrowck_context {\n             self.tcx().fold_regions(&value, &mut false, |r, _debruijn| {\n@@ -1212,20 +1214,22 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 // though.\n                 let category = match *place {\n                     Place::Local(RETURN_PLACE) => if let Some(BorrowCheckContext {\n-                        universal_regions: UniversalRegions {\n-                            defining_ty: DefiningTy::Const(def_id, _),\n-                            ..\n-                        },\n+                        universal_regions:\n+                            UniversalRegions {\n+                                defining_ty: DefiningTy::Const(def_id, _),\n+                                ..\n+                            },\n                         ..\n-                    }) = self.borrowck_context {\n+                    }) = self.borrowck_context\n+                    {\n                         if tcx.is_static(*def_id).is_some() {\n                             ConstraintCategory::UseAsStatic\n                         } else {\n                             ConstraintCategory::UseAsConst\n                         }\n                     } else {\n                         ConstraintCategory::Return\n-                    }\n+                    },\n                     Place::Local(l) if !mir.local_decls[l].is_user_variable.is_some() => {\n                         ConstraintCategory::Boring\n                     }\n@@ -1512,12 +1516,14 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 let category = match *dest {\n                     Place::Local(RETURN_PLACE) => {\n                         if let Some(BorrowCheckContext {\n-                            universal_regions: UniversalRegions {\n-                                defining_ty: DefiningTy::Const(def_id, _),\n-                                ..\n-                            },\n+                            universal_regions:\n+                                UniversalRegions {\n+                                    defining_ty: DefiningTy::Const(def_id, _),\n+                                    ..\n+                                },\n                             ..\n-                        }) = self.borrowck_context {\n+                        }) = self.borrowck_context\n+                        {\n                             if tcx.is_static(*def_id).is_some() {\n                                 ConstraintCategory::UseAsStatic\n                             } else {\n@@ -1526,7 +1532,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                         } else {\n                             ConstraintCategory::Return\n                         }\n-                    },\n+                    }\n                     Place::Local(l) if !mir.local_decls[l].is_user_variable.is_some() => {\n                         ConstraintCategory::Boring\n                     }\n@@ -1584,12 +1590,9 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             } else {\n                 ConstraintCategory::Boring\n             };\n-            if let Err(terr) = self.sub_types(\n-                op_arg_ty,\n-                fn_arg,\n-                term_location.to_locations(),\n-                category,\n-            ) {\n+            if let Err(terr) =\n+                self.sub_types(op_arg_ty, fn_arg, term_location.to_locations(), category)\n+            {\n                 span_mirbug!(\n                     self,\n                     term,"}]}