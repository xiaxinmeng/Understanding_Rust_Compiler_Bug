{"sha": "f668999153d78903658b6937a099819e0b634a06", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2Njg5OTkxNTNkNzg5MDM2NThiNjkzN2EwOTk4MTllMGI2MzRhMDY=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-07-03T18:19:51Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-07-06T05:37:10Z"}, "message": "use field init shorthand in src/librustc\n\nThe field init shorthand syntax was stabilized in 1.17.0 (aebd94f); we\nare now free to use it in the compiler.", "tree": {"sha": "c34d0bd459a470d92296a4b30589ed0f008ced27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c34d0bd459a470d92296a4b30589ed0f008ced27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f668999153d78903658b6937a099819e0b634a06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f668999153d78903658b6937a099819e0b634a06", "html_url": "https://github.com/rust-lang/rust/commit/f668999153d78903658b6937a099819e0b634a06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f668999153d78903658b6937a099819e0b634a06/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cab2c73d47a4b0ec7dc1bf40eb59492139fb707", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cab2c73d47a4b0ec7dc1bf40eb59492139fb707", "html_url": "https://github.com/rust-lang/rust/commit/8cab2c73d47a4b0ec7dc1bf40eb59492139fb707"}], "stats": {"total": 748, "additions": 374, "deletions": 374}, "files": [{"sha": "fa6b78045ffad75bfa0169f5b1ebb0987c077e2d", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -58,20 +58,20 @@ pub fn construct<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let tables = tcx.typeck_tables_of(owner_def_id);\n \n     let mut cfg_builder = CFGBuilder {\n-        tcx: tcx,\n+        tcx,\n         owner_def_id,\n-        tables: tables,\n-        graph: graph,\n-        fn_exit: fn_exit,\n+        tables,\n+        graph,\n+        fn_exit,\n         loop_scopes: Vec::new(),\n         breakable_block_scopes: Vec::new(),\n     };\n     body_exit = cfg_builder.expr(&body.value, entry);\n     cfg_builder.add_contained_edge(body_exit, fn_exit);\n     let CFGBuilder { graph, .. } = cfg_builder;\n     CFG {\n-        graph: graph,\n-        entry: entry,\n+        graph,\n+        entry,\n         exit: fn_exit,\n     }\n }"}, {"sha": "ca53fd7a433117e6fe72dc4fa776f4c5e73068c8", "filename": "src/librustc/dep_graph/dep_tracking_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -36,7 +36,7 @@ impl<M: DepTrackingMapConfig> DepTrackingMap<M> {\n     pub fn new(graph: DepGraph) -> DepTrackingMap<M> {\n         DepTrackingMap {\n             phantom: PhantomData,\n-            graph: graph,\n+            graph,\n             map: FxHashMap(),\n         }\n     }"}, {"sha": "283da1050aedc8393c1d6ca7057ba5d39f846d3a", "filename": "src/librustc/dep_graph/query.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fdep_graph%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fdep_graph%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fquery.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -36,8 +36,8 @@ impl DepGraphQuery {\n         }\n \n         DepGraphQuery {\n-            graph: graph,\n-            indices: indices\n+            graph,\n+            indices,\n         }\n     }\n "}, {"sha": "e32acbf4756ca3592dd2fc563ce994f79bbb75b7", "filename": "src/librustc/dep_graph/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fdep_graph%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fdep_graph%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fshadow.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -59,7 +59,7 @@ impl ShadowGraph {\n \n         ShadowGraph {\n             stack: RefCell::new(vec![]),\n-            forbidden_edge: forbidden_edge,\n+            forbidden_edge,\n         }\n     }\n "}, {"sha": "f6635fe16f77d14aca0d978bbc7ccaa0cb42fcbc", "filename": "src/librustc/dep_graph/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fdep_graph%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fdep_graph%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fthread.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -78,7 +78,7 @@ impl DepGraphThreadData {\n         }\n \n         DepGraphThreadData {\n-            enabled: enabled,\n+            enabled,\n             shadow_graph: ShadowGraph::new(),\n             messages: VecCell::with_capacity(INITIAL_CAPACITY),\n             swap_in: rx2,"}, {"sha": "a6a294343005ca0b9c38de8b4b2dba4ef2e805cb", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -126,9 +126,9 @@ pub fn lower_crate(sess: &Session,\n \n     LoweringContext {\n         crate_root: std_inject::injected_crate_name(krate),\n-        sess: sess,\n+        sess,\n         parent_def: None,\n-        resolver: resolver,\n+        resolver,\n         name_map: FxHashMap(),\n         items: BTreeMap::new(),\n         trait_items: BTreeMap::new(),\n@@ -251,15 +251,15 @@ impl<'a> LoweringContext<'a> {\n             .init_node_id_to_hir_id_mapping(self.node_id_to_hir_id);\n \n         hir::Crate {\n-            module: module,\n-            attrs: attrs,\n+            module,\n+            attrs,\n             span: c.span,\n             exported_macros: hir::HirVec::from(self.exported_macros),\n             items: self.items,\n             trait_items: self.trait_items,\n             impl_items: self.impl_items,\n             bodies: self.bodies,\n-            body_ids: body_ids,\n+            body_ids,\n             trait_impls: self.trait_impls,\n             trait_default_impl: self.trait_default_impl,\n         }\n@@ -368,7 +368,7 @@ impl<'a> LoweringContext<'a> {\n             arguments: decl.map_or(hir_vec![], |decl| {\n                 decl.inputs.iter().map(|x| self.lower_arg(x)).collect()\n             }),\n-            value: value\n+            value,\n         };\n         let id = body.id();\n         self.bodies.insert(id, body);\n@@ -809,7 +809,7 @@ impl<'a> LoweringContext<'a> {\n                 self.lower_path_segment(p.span, segment, param_mode, 0)\n             }).chain(name.map(|name| {\n                 hir::PathSegment {\n-                    name: name,\n+                    name,\n                     parameters: hir::PathParameters::none()\n                 }\n             })).collect(),\n@@ -857,7 +857,7 @@ impl<'a> LoweringContext<'a> {\n \n         hir::PathSegment {\n             name: self.lower_ident(segment.identifier),\n-            parameters: parameters,\n+            parameters,\n         }\n     }\n \n@@ -881,7 +881,7 @@ impl<'a> LoweringContext<'a> {\n         hir::ParenthesizedParameterData {\n             inputs: inputs.iter().map(|ty| self.lower_ty(ty)).collect(),\n             output: output.as_ref().map(|ty| self.lower_ty(ty)),\n-            span: span,\n+            span,\n         }\n     }\n \n@@ -970,8 +970,8 @@ impl<'a> LoweringContext<'a> {\n \n         hir::TyParam {\n             id: self.lower_node_id(tp.id),\n-            name: name,\n-            bounds: bounds,\n+            name,\n+            bounds,\n             default: tp.default.as_ref().map(|x| self.lower_ty(x)),\n             span: tp.span,\n             pure_wrt_drop: tp.attrs.iter().any(|attr| attr.check_name(\"may_dangle\")),\n@@ -1081,14 +1081,14 @@ impl<'a> LoweringContext<'a> {\n                         TraitTyParamBound(_, TraitBoundModifier::Maybe) => None,\n                         _ => Some(self.lower_ty_param_bound(bound))\n                     }).collect(),\n-                    span: span,\n+                    span,\n                 })\n             }\n             WherePredicate::RegionPredicate(WhereRegionPredicate{ ref lifetime,\n                                                                   ref bounds,\n                                                                   span}) => {\n                 hir::WherePredicate::RegionPredicate(hir::WhereRegionPredicate {\n-                    span: span,\n+                    span,\n                     lifetime: self.lower_lifetime(lifetime),\n                     bounds: bounds.iter().map(|bound| self.lower_lifetime(bound)).collect(),\n                 })\n@@ -1101,7 +1101,7 @@ impl<'a> LoweringContext<'a> {\n                     id: self.lower_node_id(id),\n                     lhs_ty: self.lower_ty(lhs_ty),\n                     rhs_ty: self.lower_ty(rhs_ty),\n-                    span: span,\n+                    span,\n                 })\n             }\n         }\n@@ -1133,7 +1133,7 @@ impl<'a> LoweringContext<'a> {\n             qpath => bug!(\"lower_trait_ref: unexpected QPath `{:?}`\", qpath)\n         };\n         hir::TraitRef {\n-            path: path,\n+            path,\n             ref_id: self.lower_node_id(p.ref_id),\n         }\n     }\n@@ -1201,10 +1201,10 @@ impl<'a> LoweringContext<'a> {\n         P(hir::Block {\n             id: self.lower_node_id(b.id),\n             stmts: stmts.into(),\n-            expr: expr,\n+            expr,\n             rules: self.lower_block_check_mode(&b.rules),\n             span: b.span,\n-            targeted_by_break: targeted_by_break,\n+            targeted_by_break,\n         })\n     }\n \n@@ -1259,8 +1259,8 @@ impl<'a> LoweringContext<'a> {\n                                     name: import.rename.unwrap_or(ident).name,\n                                     attrs: attrs.clone(),\n                                     node: hir::ItemUse(P(path), hir::UseKind::Single),\n-                                    vis: vis,\n-                                    span: span,\n+                                    vis,\n+                                    span,\n                                 });\n                             });\n                         }\n@@ -1441,7 +1441,7 @@ impl<'a> LoweringContext<'a> {\n             name: self.lower_ident(i.ident),\n             span: i.span,\n             defaultness: self.lower_defaultness(Defaultness::Default, has_default),\n-            kind: kind,\n+            kind,\n         }\n     }\n \n@@ -1523,9 +1523,9 @@ impl<'a> LoweringContext<'a> {\n         if let ItemKind::MacroDef(ref def) = i.node {\n             if !def.legacy || i.attrs.iter().any(|attr| attr.path == \"macro_export\") {\n                 self.exported_macros.push(hir::MacroDef {\n-                    name: name,\n-                    vis: vis,\n-                    attrs: attrs,\n+                    name,\n+                    vis,\n+                    attrs,\n                     id: i.id,\n                     span: i.span,\n                     body: def.stream(),\n@@ -1541,10 +1541,10 @@ impl<'a> LoweringContext<'a> {\n \n         Some(hir::Item {\n             id: self.lower_node_id(i.id),\n-            name: name,\n-            attrs: attrs,\n-            node: node,\n-            vis: vis,\n+            name,\n+            attrs,\n+            node,\n+            vis,\n             span: i.span,\n         })\n     }\n@@ -1650,7 +1650,7 @@ impl<'a> LoweringContext<'a> {\n                             Some(def) => {\n                                 hir::PatKind::Path(hir::QPath::Resolved(None, P(hir::Path {\n                                     span: pth1.span,\n-                                    def: def,\n+                                    def,\n                                     segments: hir_vec![\n                                         hir::PathSegment::from_name(pth1.node.name)\n                                     ],\n@@ -1887,9 +1887,9 @@ impl<'a> LoweringContext<'a> {\n                             let blk = P(hir::Block {\n                                 stmts: hir_vec![],\n                                 expr: Some(els),\n-                                id: id,\n+                                id,\n                                 rules: hir::DefaultBlock,\n-                                span: span,\n+                                span,\n                                 targeted_by_break: false,\n                             });\n                             P(self.expr_block(blk, ThinVec::new()))\n@@ -2108,7 +2108,7 @@ impl<'a> LoweringContext<'a> {\n                     sub_expr,\n                     arms.into(),\n                     hir::MatchSource::IfLetDesugar {\n-                        contains_else_clause: contains_else_clause,\n+                        contains_else_clause,\n                     })\n             }\n \n@@ -2536,7 +2536,7 @@ impl<'a> LoweringContext<'a> {\n     fn arm(&mut self, pats: hir::HirVec<P<hir::Pat>>, expr: P<hir::Expr>) -> hir::Arm {\n         hir::Arm {\n             attrs: hir_vec![],\n-            pats: pats,\n+            pats,\n             guard: None,\n             body: expr,\n         }\n@@ -2546,10 +2546,10 @@ impl<'a> LoweringContext<'a> {\n         hir::Field {\n             name: Spanned {\n                 node: name,\n-                span: span,\n+                span,\n             },\n-            span: span,\n-            expr: expr,\n+            span,\n+            expr,\n             is_shorthand: false,\n         }\n     }\n@@ -2578,8 +2578,8 @@ impl<'a> LoweringContext<'a> {\n         };\n \n         let expr_path = hir::ExprPath(hir::QPath::Resolved(None, P(hir::Path {\n-            span: span,\n-            def: def,\n+            span,\n+            def,\n             segments: hir_vec![hir::PathSegment::from_name(id)],\n         })));\n \n@@ -2619,9 +2619,9 @@ impl<'a> LoweringContext<'a> {\n     fn expr(&mut self, span: Span, node: hir::Expr_, attrs: ThinVec<Attribute>) -> hir::Expr {\n         hir::Expr {\n             id: self.next_id(),\n-            node: node,\n-            span: span,\n-            attrs: attrs,\n+            node,\n+            span,\n+            attrs,\n         }\n     }\n \n@@ -2632,7 +2632,7 @@ impl<'a> LoweringContext<'a> {\n                     source: hir::LocalSource)\n                     -> hir::Stmt {\n         let local = P(hir::Local {\n-            pat: pat,\n+            pat,\n             ty: None,\n             init: ex,\n             id: self.next_id(),\n@@ -2662,11 +2662,11 @@ impl<'a> LoweringContext<'a> {\n     fn block_all(&mut self, span: Span, stmts: hir::HirVec<hir::Stmt>, expr: Option<P<hir::Expr>>)\n                  -> hir::Block {\n         hir::Block {\n-            stmts: stmts,\n-            expr: expr,\n+            stmts,\n+            expr,\n             id: self.next_id(),\n             rules: hir::DefaultBlock,\n-            span: span,\n+            span,\n             targeted_by_break: false,\n         }\n     }\n@@ -2719,15 +2719,15 @@ impl<'a> LoweringContext<'a> {\n         };\n \n         P(hir::Pat {\n-            id: id,\n+            id,\n             node: hir::PatKind::Binding(bm,\n                                         def_id,\n                                         Spanned {\n-                                            span: span,\n+                                            span,\n                                             node: name,\n                                         },\n                                         None),\n-            span: span,\n+            span,\n         })\n     }\n \n@@ -2739,7 +2739,7 @@ impl<'a> LoweringContext<'a> {\n         P(hir::Pat {\n             id: self.next_id(),\n             node: pat,\n-            span: span,\n+            span,\n         })\n     }\n \n@@ -2748,7 +2748,7 @@ impl<'a> LoweringContext<'a> {\n     /// The path is also resolved according to `is_value`.\n     fn std_path(&mut self, span: Span, components: &[&str], is_value: bool) -> hir::Path {\n         let mut path = hir::Path {\n-            span: span,\n+            span,\n             def: Def::Err,\n             segments: iter::once(keywords::CrateRoot.name()).chain({\n                 self.crate_root.into_iter().chain(components.iter().cloned()).map(Symbol::intern)\n@@ -2769,9 +2769,9 @@ impl<'a> LoweringContext<'a> {\n         let id = self.next_id();\n         let block = P(hir::Block {\n             rules: rule,\n-            span: span,\n-            id: id,\n-            stmts: stmts,\n+            span,\n+            id,\n+            stmts,\n             expr: Some(expr),\n             targeted_by_break: false,\n         });\n@@ -2810,7 +2810,7 @@ impl<'a> LoweringContext<'a> {\n     fn elided_lifetime(&mut self, span: Span) -> hir::Lifetime {\n         hir::Lifetime {\n             id: self.next_id(),\n-            span: span,\n+            span,\n             name: keywords::Invalid.name()\n         }\n     }"}, {"sha": "661798a825056aadc18e76ad848210b7346ae9fc", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -130,9 +130,9 @@ impl<'a> ClosureParts<'a> {\n         ClosureParts {\n             decl: d,\n             body: b,\n-            id: id,\n+            id,\n             span: s,\n-            attrs: attrs,\n+            attrs,\n         }\n     }\n }\n@@ -149,7 +149,7 @@ impl<'a> FnLikeNode<'a> {\n         };\n         if fn_like {\n             Some(FnLikeNode {\n-                node: node\n+                node,\n             })\n         } else {\n             None\n@@ -224,12 +224,12 @@ impl<'a> FnLikeNode<'a> {\n                         id: i.id,\n                         name: i.name,\n                         decl: &decl,\n-                        unsafety: unsafety,\n+                        unsafety,\n                         body: block,\n-                        generics: generics,\n-                        abi: abi,\n+                        generics,\n+                        abi,\n                         vis: &i.vis,\n-                        constness: constness,\n+                        constness,\n                         span: i.span,\n                         attrs: &i.attrs,\n                     }),"}, {"sha": "d3ae3e0e8e8ac4a027e11739a9ce51ac4d32268c", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -28,7 +28,7 @@ pub struct NodeCollector<'hir> {\n impl<'hir> NodeCollector<'hir> {\n     pub fn root(krate: &'hir Crate) -> NodeCollector<'hir> {\n         let mut collector = NodeCollector {\n-            krate: krate,\n+            krate,\n             map: vec![],\n             parent_node: CRATE_NODE_ID,\n         };"}, {"sha": "d348a5db0517041e5c588b012cf6bbda89cf0e4f", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -36,8 +36,8 @@ pub struct MacroInvocationData {\n impl<'a> DefCollector<'a> {\n     pub fn new(definitions: &'a mut Definitions, expansion: Mark) -> Self {\n         DefCollector {\n-            definitions: definitions,\n-            expansion: expansion,\n+            definitions,\n+            expansion,\n             parent_def: None,\n             visit_macro_invoc: None,\n         }\n@@ -86,7 +86,7 @@ impl<'a> DefCollector<'a> {\n         if let Some(ref mut visit) = self.visit_macro_invoc {\n             visit(MacroInvocationData {\n                 mark: id.placeholder_to_mark(),\n-                const_expr: const_expr,\n+                const_expr,\n                 def_index: self.parent_def.unwrap(),\n             })\n         }"}, {"sha": "d89e86ee66a66dfa3b656f44a7f5cb3381bbd0a1", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -190,9 +190,9 @@ impl Decodable for DefPathTable {\n         }\n \n         Ok(DefPathTable {\n-            index_to_key: index_to_key,\n-            key_to_index: key_to_index,\n-            def_path_hashes: def_path_hashes,\n+            index_to_key,\n+            key_to_index,\n+            def_path_hashes,\n         })\n     }\n }\n@@ -578,7 +578,7 @@ impl Definitions {\n         let mut key = DefKey {\n             parent: Some(parent),\n             disambiguated_data: DisambiguatedDefPathData {\n-                data: data,\n+                data,\n                 disambiguator: 0\n             }\n         };"}, {"sha": "e6af075a2985f4cf5856d62d3dbaaa3ae7bc8bb3", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -16,7 +16,7 @@ use rustc_data_structures::fx::FxHashMap;\n \n pub fn check_crate<'hir>(hir_map: &hir::map::Map<'hir>) {\n     let mut outer_visitor = OuterVisitor {\n-        hir_map: hir_map,\n+        hir_map,\n         errors: vec![],\n     };\n \n@@ -49,7 +49,7 @@ impl<'a, 'hir: 'a> OuterVisitor<'a, 'hir> {\n                          hir_map: &'a hir::map::Map<'hir>)\n                          -> HirIdValidator<'a, 'hir> {\n         HirIdValidator {\n-            hir_map: hir_map,\n+            hir_map,\n             owner_def_index: None,\n             hir_ids_seen: FxHashMap(),\n             errors: Vec::new(),"}, {"sha": "2044d32ff9b851b07d688fe602d2ed3ceeede416", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -228,7 +228,7 @@ pub struct Forest {\n impl Forest {\n     pub fn new(krate: Crate, dep_graph: &DepGraph) -> Forest {\n         Forest {\n-            krate: krate,\n+            krate,\n             dep_graph: dep_graph.clone(),\n             inlined_bodies: TypedArena::new()\n         }\n@@ -1057,10 +1057,10 @@ pub fn map_crate<'hir>(forest: &'hir mut Forest,\n     }\n \n     let map = Map {\n-        forest: forest,\n+        forest,\n         dep_graph: forest.dep_graph.clone(),\n-        map: map,\n-        definitions: definitions,\n+        map,\n+        definitions,\n         inlined_bodies: RefCell::new(DefIdMap()),\n     };\n "}, {"sha": "3443c6bb2c659c53754e41843946f11bf04ea6d7", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -218,7 +218,7 @@ impl PathSegment {\n     /// Convert an identifier to the corresponding segment.\n     pub fn from_name(name: Name) -> PathSegment {\n         PathSegment {\n-            name: name,\n+            name,\n             parameters: PathParameters::none()\n         }\n     }"}, {"sha": "f32fab7d847d7ff53affbd0da814160a584f33f2", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -176,7 +176,7 @@ impl<'a> State<'a> {\n                 cur_lit: 0,\n             },\n             boxes: Vec::new(),\n-            ann: ann,\n+            ann,\n         }\n     }\n }\n@@ -196,7 +196,7 @@ pub fn to_string<F>(ann: &PpAnn, f: F) -> String\n                 cur_lit: 0,\n             },\n             boxes: Vec::new(),\n-            ann: ann,\n+            ann,\n         };\n         f(&mut printer).unwrap();\n         eof(&mut printer.s).unwrap();"}, {"sha": "49e18f100cf26aef48ad4a8381ebfa2d907a58e6", "filename": "src/librustc/ich/caching_codemap_view.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fich%2Fcaching_codemap_view.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fich%2Fcaching_codemap_view.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fcaching_codemap_view.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -44,7 +44,7 @@ impl<'gcx> CachingCodemapView<'gcx> {\n         };\n \n         CachingCodemapView {\n-            codemap: codemap,\n+            codemap,\n             line_cache: [entry.clone(), entry.clone(), entry.clone()],\n             time_stamp: 0,\n         }"}, {"sha": "8ce1b39d934d15b4f41518b5f2e8bc144a2cd169", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -65,13 +65,13 @@ impl<'a, 'gcx, 'tcx> StableHashingContext<'a, 'gcx, 'tcx> {\n         ignored_attr_names.sort();\n \n         StableHashingContext {\n-            tcx: tcx,\n+            tcx,\n             codemap: CachingCodemapView::new(tcx),\n             hash_spans: hash_spans_initial,\n             hash_bodies: true,\n             overflow_checks_enabled: check_overflow_initial,\n             node_id_hashing_mode: NodeIdHashingMode::HashDefPath,\n-            ignored_attr_names: ignored_attr_names,\n+            ignored_attr_names,\n         }\n     }\n "}, {"sha": "40e933b26a257983002b06b030120a169bd2f132", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -268,7 +268,7 @@ impl<'infcx, 'gcx, 'tcx> CombineFields<'infcx, 'gcx, 'tcx> {\n             infcx: self.infcx,\n             span: self.trace.cause.span,\n             for_vid_sub_root: self.infcx.type_variables.borrow_mut().sub_root_var(for_vid),\n-            ambient_variance: ambient_variance,\n+            ambient_variance,\n             needs_wf: false,\n         };\n "}, {"sha": "41858088f7e704865ca70d10006654482efcb634", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -48,7 +48,7 @@ impl<'a, 'gcx, 'tcx> TypeFreshener<'a, 'gcx, 'tcx> {\n     pub fn new(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>)\n                -> TypeFreshener<'a, 'gcx, 'tcx> {\n         TypeFreshener {\n-            infcx: infcx,\n+            infcx,\n             freshen_count: 0,\n             freshen_map: FxHashMap(),\n         }"}, {"sha": "9cad6ce6f9fad608b7a91a45753b1a90468f35e7", "filename": "src/librustc/infer/fudge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffudge.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -102,7 +102,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             infcx: self,\n             type_variables: &type_variables,\n             region_vars: &region_vars,\n-            origin: origin\n+            origin,\n         };\n \n         Ok(value.fold_with(&mut fudger))"}, {"sha": "541a9978341f6b16ec45409aeab7c99118321b35", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -218,7 +218,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n \n             Ok(HrMatchResult {\n                 value: a_value,\n-                unconstrained_regions: unconstrained_regions,\n+                unconstrained_regions,\n             })\n         });\n     }"}, {"sha": "a70a4248cb75b81ad06963c727a1f7c7b2086991", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -458,9 +458,9 @@ impl<'gcx> TransNormalize<'gcx> for LvalueTy<'gcx> {\n             LvalueTy::Ty { ty } => LvalueTy::Ty { ty: ty.trans_normalize(infcx, param_env) },\n             LvalueTy::Downcast { adt_def, substs, variant_index } => {\n                 LvalueTy::Downcast {\n-                    adt_def: adt_def,\n+                    adt_def,\n                     substs: substs.trans_normalize(infcx, param_env),\n-                    variant_index: variant_index\n+                    variant_index,\n                 }\n             }\n         }\n@@ -674,7 +674,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                       -> CombineFields<'a, 'gcx, 'tcx> {\n         CombineFields {\n             infcx: self,\n-            trace: trace,\n+            trace,\n             cause: None,\n             param_env,\n             obligations: PredicateObligations::new(),\n@@ -1235,7 +1235,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.report_and_explain_type_error(\n             trace,\n             &TypeError::TyParamDefaultMismatch(ExpectedFound {\n-                expected: expected,\n+                expected,\n                 found: actual\n             }))\n             .emit();\n@@ -1279,7 +1279,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         let span = cause.span;\n         let match_trait_ref = match_a.skip_binder().projection_ty.trait_ref;\n         let trace = TypeTrace {\n-            cause: cause,\n+            cause,\n             values: TraitRefs(ExpectedFound::new(true, match_trait_ref, match_b))\n         };\n \n@@ -1443,10 +1443,10 @@ impl<'tcx> SubregionOrigin<'tcx> {\n                                                                        lint_id } =>\n                 SubregionOrigin::CompareImplMethodObligation {\n                     span: cause.span,\n-                    item_name: item_name,\n-                    impl_item_def_id: impl_item_def_id,\n-                    trait_item_def_id: trait_item_def_id,\n-                    lint_id: lint_id,\n+                    item_name,\n+                    impl_item_def_id,\n+                    trait_item_def_id,\n+                    lint_id,\n                 },\n \n             _ => default(),"}, {"sha": "4f8168982496ef7c8f879d45ec1a1791b7ddc8d9", "filename": "src/librustc/infer/region_inference/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -354,7 +354,7 @@ impl<'a, 'gcx, 'tcx> TaintSet<'tcx> {\n impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n     pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> RegionVarBindings<'a, 'gcx, 'tcx> {\n         RegionVarBindings {\n-            tcx: tcx,\n+            tcx,\n             var_origins: RefCell::new(Vec::new()),\n             values: RefCell::new(None),\n             constraints: RefCell::new(FxHashMap()),\n@@ -378,7 +378,7 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n         debug!(\"RegionVarBindings: start_snapshot({})\", length);\n         self.undo_log.borrow_mut().push(OpenSnapshot);\n         RegionSnapshot {\n-            length: length,\n+            length,\n             region_snapshot: self.unification_table.borrow_mut().snapshot(),\n             skolemization_count: self.skolemization_count.get(),\n         }\n@@ -733,10 +733,10 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n                                 sub: Region<'tcx>,\n                                 bound: VerifyBound<'tcx>) {\n         self.add_verify(Verify {\n-            kind: kind,\n-            origin: origin,\n+            kind,\n+            origin,\n             region: sub,\n-            bound: bound\n+            bound,\n         });\n     }\n \n@@ -1459,7 +1459,7 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n                     ConstrainRegSubVar(region, _) |\n                     ConstrainVarSubReg(_, region) => {\n                         state.result.push(RegionAndOrigin {\n-                            region: region,\n+                            region,\n                             origin: this.constraints.borrow().get(&edge.data).unwrap().clone(),\n                         });\n                     }"}, {"sha": "cc91a637b893167d1045786b933a4cc48570aa0d", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -181,8 +181,8 @@ impl<'tcx> TypeVariableTable<'tcx> {\n         self.sub_relations.new_key(());\n         let index = self.values.push(TypeVariableData {\n             value: Bounded { default: default },\n-            origin: origin,\n-            diverging: diverging\n+            origin,\n+            diverging,\n         });\n         let v = ty::TyVid { index: index as u32 };\n         debug!(\"new_var: diverging={:?} index={:?}\", diverging, v);\n@@ -369,7 +369,7 @@ impl<'tcx> sv::SnapshotVecDelegate for Delegate<'tcx> {\n     fn reverse(values: &mut Vec<TypeVariableData<'tcx>>, action: Instantiate<'tcx>) {\n         let Instantiate { vid, default } = action;\n         values[vid.index as usize].value = Bounded {\n-            default: default\n+            default,\n         };\n     }\n }"}, {"sha": "d67bca1df3022bd9535aa4df871afe4cd4756409", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -140,16 +140,16 @@ impl<'a, S: Into<MultiSpan>> IntoEarlyLint for (S, &'a str) {\n         let mut diagnostic = Diagnostic::new(errors::Level::Warning, msg);\n         diagnostic.set_span(span);\n         EarlyLint {\n-            id: id,\n-            diagnostic: diagnostic,\n+            id,\n+            diagnostic,\n         }\n     }\n }\n \n impl IntoEarlyLint for Diagnostic {\n     fn into_early_lint(self, id: LintId) -> EarlyLint {\n         EarlyLint {\n-            id: id,\n+            id,\n             diagnostic: self,\n         }\n     }\n@@ -805,8 +805,8 @@ impl<'a> EarlyContext<'a> {\n     fn new(sess: &'a Session,\n            krate: &'a ast::Crate) -> EarlyContext<'a> {\n         EarlyContext {\n-            sess: sess,\n-            krate: krate,\n+            sess,\n+            krate,\n             lint_sess: LintSession::new(&sess.lint_store),\n         }\n     }\n@@ -1350,10 +1350,10 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let krate = tcx.hir.krate();\n \n     let mut cx = LateContext {\n-        tcx: tcx,\n+        tcx,\n         tables: &ty::TypeckTables::empty(),\n         param_env: ty::ParamEnv::empty(Reveal::UserFacing),\n-        access_levels: access_levels,\n+        access_levels,\n         lint_sess: LintSession::new(&tcx.sess.lint_store),\n     };\n "}, {"sha": "f9222ac9400af307852ee74657b9984e33f25acd", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -294,7 +294,7 @@ impl LintId {\n     /// Get the `LintId` for a `Lint`.\n     pub fn of(lint: &'static Lint) -> LintId {\n         LintId {\n-            lint: lint,\n+            lint,\n         }\n     }\n "}, {"sha": "42f4c5c59d9946d0d595835751c25b250145af20", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -260,16 +260,16 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n         let nodeid_to_index = build_nodeid_to_index(body, cfg);\n \n         DataFlowContext {\n-            tcx: tcx,\n-            analysis_name: analysis_name,\n-            words_per_id: words_per_id,\n-            nodeid_to_index: nodeid_to_index,\n-            bits_per_id: bits_per_id,\n-            oper: oper,\n-            gens: gens,\n+            tcx,\n+            analysis_name,\n+            words_per_id,\n+            nodeid_to_index,\n+            bits_per_id,\n+            oper,\n+            gens,\n             action_kills: kills1,\n             scope_kills: kills2,\n-            on_entry: on_entry\n+            on_entry,\n         }\n     }\n "}, {"sha": "2238e464cbcd587cc26cc7c5947e94680ca6b354", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -383,8 +383,8 @@ fn create_and_seed_worklist<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     // Seed implemented trait items\n     let mut life_seeder = LifeSeeder {\n-        worklist: worklist,\n-        krate: krate,\n+        worklist,\n+        krate,\n     };\n     krate.visit_all_item_likes(&mut life_seeder);\n \n@@ -397,8 +397,8 @@ fn find_live<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                        -> Box<FxHashSet<ast::NodeId>> {\n     let worklist = create_and_seed_worklist(tcx, access_levels, krate);\n     let mut symbol_visitor = MarkSymbolVisitor {\n-        worklist: worklist,\n-        tcx: tcx,\n+        worklist,\n+        tcx,\n         tables: &ty::TypeckTables::empty(),\n         live_symbols: box FxHashSet(),\n         struct_has_extern_repr: false,"}, {"sha": "abd5cbcb89e33a3af6c668724dba005e3d7d7ca2", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -261,7 +261,7 @@ impl<'a, 'tcx> Visitor<'tcx> for EffectCheckVisitor<'a, 'tcx> {\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut visitor = EffectCheckVisitor {\n-        tcx: tcx,\n+        tcx,\n         tables: &ty::TypeckTables::empty(),\n         body_id: hir::BodyId { node_id: ast::CRATE_NODE_ID },\n         unsafe_context: UnsafeContext::new(SafeContext),"}, {"sha": "31e054ec1cb93d1f78dae98c08715bfda02e941a", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -71,7 +71,7 @@ pub fn find_entry_point(session: &Session, hir_map: &hir_map::Map) {\n     }\n \n     let mut ctxt = EntryContext {\n-        session: session,\n+        session,\n         map: hir_map,\n         main_fn: None,\n         attr_main_fn: None,"}, {"sha": "d29622b4a8159a028a351d98e01c31d293a27ccc", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -20,7 +20,7 @@ use hir;\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut visitor = ItemVisitor {\n-        tcx: tcx\n+        tcx,\n     };\n     tcx.hir.krate().visit_all_item_likes(&mut visitor.as_deep_visitor());\n }"}, {"sha": "01ed79096b10196e107efe4f9d8c8fc0b4faf64c", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -156,10 +156,10 @@ impl<'a, 'tcx> LanguageItemCollector<'a, 'tcx> {\n         $( item_refs.insert($name, $variant as usize); )*\n \n         LanguageItemCollector {\n-            session: session,\n-            hir_map: hir_map,\n+            session,\n+            hir_map,\n             items: LanguageItems::new(),\n-            item_refs: item_refs,\n+            item_refs,\n         }\n     }\n "}, {"sha": "551a550442b3df983c06402f4b1f44303a114126", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -269,7 +269,7 @@ struct IrMaps<'a, 'tcx: 'a> {\n impl<'a, 'tcx> IrMaps<'a, 'tcx> {\n     fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> IrMaps<'a, 'tcx> {\n         IrMaps {\n-            tcx: tcx,\n+            tcx,\n             num_live_nodes: 0,\n             num_vars: 0,\n             live_node_map: NodeMap(),\n@@ -385,7 +385,7 @@ fn visit_local<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, local: &'tcx hir::Local) {\n         ir.add_live_node_for_node(p_id, VarDefNode(sp));\n         ir.add_variable(Local(LocalInfo {\n           id: p_id,\n-          name: name\n+          name,\n         }));\n     });\n     intravisit::walk_local(ir, local);\n@@ -400,7 +400,7 @@ fn visit_arm<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, arm: &'tcx hir::Arm) {\n             ir.add_live_node_for_node(p_id, VarDefNode(sp));\n             ir.add_variable(Local(LocalInfo {\n                 id: p_id,\n-                name: name\n+                name,\n             }));\n         })\n     }\n@@ -534,8 +534,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         let num_vars = ir.num_vars;\n \n         Liveness {\n-            ir: ir,\n-            tables: tables,\n+            ir,\n+            tables,\n             s: specials,\n             successors: vec![invalid_node(); num_live_nodes],\n             users: vec![invalid_users(); num_live_nodes * num_vars],"}, {"sha": "557d4b24f3032e1942455a6a675ffe902b278ad1", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -656,8 +656,8 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n           Def::Local(def_id) => {\n             let vid = self.tcx.hir.as_local_node_id(def_id).unwrap();\n             Ok(Rc::new(cmt_ {\n-                id: id,\n-                span: span,\n+                id,\n+                span,\n                 cat: Categorization::Local(vid),\n                 mutbl: MutabilityCategory::from_local(self.tcx, vid),\n                 ty: expr_ty,\n@@ -706,7 +706,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             None => span_bug!(span, \"missing closure kind\")\n         };\n \n-        let upvar_id = ty::UpvarId { var_id: var_id,\n+        let upvar_id = ty::UpvarId { var_id,\n                                      closure_expr_id: fn_node_id };\n         let var_ty = self.node_ty(var_id)?;\n \n@@ -717,8 +717,8 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         // from the environment (perhaps we should eventually desugar\n         // this field further, but it will do for now).\n         let cmt_result = cmt_ {\n-            id: id,\n-            span: span,\n+            id,\n+            span,\n             cat: Categorization::Upvar(Upvar {id: upvar_id, kind: kind}),\n             mutbl: var_mutbl,\n             ty: var_ty,\n@@ -743,7 +743,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         // If this is a by-ref capture, then the upvar we loaded is\n         // actually a reference, so we have to add an implicit deref\n         // for that.\n-        let upvar_id = ty::UpvarId { var_id: var_id,\n+        let upvar_id = ty::UpvarId { var_id,\n                                      closure_expr_id: fn_node_id };\n         let upvar_capture = self.tables.upvar_capture(upvar_id);\n         let cmt_result = match upvar_capture {\n@@ -753,8 +753,8 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             ty::UpvarCapture::ByRef(upvar_borrow) => {\n                 let ptr = BorrowedPtr(upvar_borrow.kind, upvar_borrow.region);\n                 cmt_ {\n-                    id: id,\n-                    span: span,\n+                    id,\n+                    span,\n                     cat: Categorization::Deref(Rc::new(cmt_result), ptr),\n                     mutbl: MutabilityCategory::from_borrow_kind(upvar_borrow.kind),\n                     ty: var_ty,\n@@ -813,8 +813,8 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         }\n \n         let ret = cmt_ {\n-            id: id,\n-            span: span,\n+            id,\n+            span,\n             cat: Categorization::Deref(Rc::new(cmt_result), env_ptr),\n             mutbl: deref_mutbl,\n             ty: var_ty,"}, {"sha": "df828c8d8e71a7adc1de4dfb24e813adf39291b3", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -374,11 +374,11 @@ fn reachable_set<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum) ->\n         *ty == config::CrateTypeProcMacro\n     });\n     let mut reachable_context = ReachableContext {\n-        tcx: tcx,\n+        tcx,\n         tables: &ty::TypeckTables::empty(),\n         reachable_symbols: NodeSet(),\n         worklist: Vec::new(),\n-        any_library: any_library,\n+        any_library,\n     };\n \n     // Step 1: Seed the worklist with all nodes which were found to be public as\n@@ -398,8 +398,8 @@ fn reachable_set<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum) ->\n     }\n     {\n         let mut collect_private_impl_items = CollectPrivateImplItemsVisitor {\n-            tcx: tcx,\n-            access_levels: access_levels,\n+            tcx,\n+            access_levels,\n             worklist: &mut reachable_context.worklist,\n         };\n         tcx.hir.krate().visit_all_item_likes(&mut collect_private_impl_items);"}, {"sha": "c4f785757cee1f23ff7d604887470a04d90a3b42", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -266,8 +266,8 @@ pub fn krate(sess: &Session,\n     };\n     sess.track_errors(|| {\n         let mut visitor = LifetimeContext {\n-            sess: sess,\n-            hir_map: hir_map,\n+            sess,\n+            hir_map,\n             map: &mut map,\n             scope: ROOT_SCOPE,\n             trait_ref_hack: false,\n@@ -341,7 +341,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     Region::early(&mut index, def)\n                 }).collect();\n                 let scope = Scope::Binder {\n-                    lifetimes: lifetimes,\n+                    lifetimes,\n                     s: ROOT_SCOPE\n                 };\n                 self.with(scope, |old_scope, this| {\n@@ -777,13 +777,13 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let xcrate_object_lifetime_defaults =\n             replace(&mut self.xcrate_object_lifetime_defaults, DefIdMap());\n         let mut this = LifetimeContext {\n-            sess: sess,\n-            hir_map: hir_map,\n+            sess,\n+            hir_map,\n             map: *map,\n             scope: &wrap_scope,\n             trait_ref_hack: self.trait_ref_hack,\n-            labels_in_fn: labels_in_fn,\n-            xcrate_object_lifetime_defaults: xcrate_object_lifetime_defaults,\n+            labels_in_fn,\n+            xcrate_object_lifetime_defaults,\n         };\n         debug!(\"entering scope {:?}\", this.scope);\n         f(self.scope, &mut this);\n@@ -849,7 +849,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }).collect();\n \n         let scope = Scope::Binder {\n-            lifetimes: lifetimes,\n+            lifetimes,\n             s: self.scope\n         };\n         self.with(scope, move |old_scope, this| {\n@@ -1206,7 +1206,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         };\n \n         let scope = Scope::Elision {\n-            elide: elide,\n+            elide,\n             s: self.scope\n         };\n         self.with(scope, |_, this| this.visit_ty(output));\n@@ -1620,7 +1620,7 @@ fn insert_late_bound_lifetimes(map: &mut NamedRegionMap,\n             map.issue_32330.insert(\n                 lifetime.lifetime.id,\n                 ty::Issue32330 {\n-                    fn_def_id: fn_def_id,\n+                    fn_def_id,\n                     region_name: name,\n                 });\n             continue;"}, {"sha": "668a8693d3a84ff5a3ebc6e641aede232b8d10f2", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -70,14 +70,14 @@ impl DeprecationEntry {\n     fn local(attr: Deprecation, id: DefId) -> DeprecationEntry {\n         assert!(id.is_local());\n         DeprecationEntry {\n-            attr: attr,\n+            attr,\n             origin: Some(id.index),\n         }\n     }\n \n     fn external(attr: Deprecation) -> DeprecationEntry {\n         DeprecationEntry {\n-            attr: attr,\n+            attr,\n             origin: None,\n         }\n     }\n@@ -384,7 +384,7 @@ impl<'a, 'tcx> Index<'tcx> {\n \n         let krate = tcx.hir.krate();\n         let mut annotator = Annotator {\n-            tcx: tcx,\n+            tcx,\n             index: self,\n             parent_stab: None,\n             parent_depr: None,\n@@ -424,7 +424,7 @@ impl<'a, 'tcx> Index<'tcx> {\n         let mut staged_api = FxHashMap();\n         staged_api.insert(LOCAL_CRATE, is_staged_api);\n         Index {\n-            staged_api: staged_api,\n+            staged_api,\n             stab_map: DefIdMap(),\n             depr_map: DefIdMap(),\n             active_features: FxHashSet(),\n@@ -717,8 +717,8 @@ pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     if tcx.stability.borrow().staged_api[&LOCAL_CRATE] {\n         let krate = tcx.hir.krate();\n         let mut missing = MissingStabilityAnnotations {\n-            tcx: tcx,\n-            access_levels: access_levels,\n+            tcx,\n+            access_levels,\n         };\n         missing.check_missing_stability(ast::CRATE_NODE_ID, krate.span);\n         intravisit::walk_crate(&mut missing, krate);"}, {"sha": "96ccc3ba50078a8174bfb7c323dfb63b151cfdf1", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -136,15 +136,15 @@ impl<'tcx> Mir<'tcx> {\n         assert_eq!(local_decls[RETURN_POINTER].ty, return_ty);\n \n         Mir {\n-            basic_blocks: basic_blocks,\n-            visibility_scopes: visibility_scopes,\n-            promoted: promoted,\n-            return_ty: return_ty,\n-            local_decls: local_decls,\n-            arg_count: arg_count,\n-            upvar_decls: upvar_decls,\n+            basic_blocks,\n+            visibility_scopes,\n+            promoted,\n+            return_ty,\n+            local_decls,\n+            arg_count,\n+            upvar_decls,\n             spread_arg: None,\n-            span: span,\n+            span,\n             cache: cache::Cache::new()\n         }\n     }\n@@ -395,10 +395,10 @@ impl<'tcx> LocalDecl<'tcx> {\n     pub fn new_temp(ty: Ty<'tcx>, span: Span) -> Self {\n         LocalDecl {\n             mutability: Mutability::Mut,\n-            ty: ty,\n+            ty,\n             name: None,\n             source_info: SourceInfo {\n-                span: span,\n+                span,\n                 scope: ARGUMENT_VISIBILITY_SCOPE\n             },\n             is_user_variable: false\n@@ -414,7 +414,7 @@ impl<'tcx> LocalDecl<'tcx> {\n             mutability: Mutability::Mut,\n             ty: return_ty,\n             source_info: SourceInfo {\n-                span: span,\n+                span,\n                 scope: ARGUMENT_VISIBILITY_SCOPE\n             },\n             name: None,     // FIXME maybe we do want some name here?\n@@ -629,7 +629,7 @@ impl<'tcx> BasicBlockData<'tcx> {\n     pub fn new(terminator: Option<Terminator<'tcx>>) -> BasicBlockData<'tcx> {\n         BasicBlockData {\n             statements: vec![],\n-            terminator: terminator,\n+            terminator,\n             is_cleanup: false,\n         }\n     }\n@@ -941,7 +941,7 @@ impl<'tcx> Lvalue<'tcx> {\n     pub fn elem(self, elem: LvalueElem<'tcx>) -> Lvalue<'tcx> {\n         Lvalue::Projection(Box::new(LvalueProjection {\n             base: self,\n-            elem: elem,\n+            elem,\n         }))\n     }\n }\n@@ -1023,7 +1023,7 @@ impl<'tcx> Operand<'tcx> {\n         span: Span,\n     ) -> Self {\n         Operand::Constant(box Constant {\n-            span: span,\n+            span,\n             ty: tcx.type_of(def_id).subst(tcx, substs),\n             literal: Literal::Value { value: ConstVal::Function(def_id, substs) },\n         })\n@@ -1470,7 +1470,7 @@ impl<'tcx> TypeFoldable<'tcx> for Statement<'tcx> {\n             Assign(ref lval, ref rval) => Assign(lval.fold_with(folder), rval.fold_with(folder)),\n             SetDiscriminant { ref lvalue, variant_index } => SetDiscriminant {\n                 lvalue: lvalue.fold_with(folder),\n-                variant_index: variant_index\n+                variant_index,\n             },\n             StorageLive(ref lval) => StorageLive(lval.fold_with(folder)),\n             StorageDead(ref lval) => StorageDead(lval.fold_with(folder)),\n@@ -1490,7 +1490,7 @@ impl<'tcx> TypeFoldable<'tcx> for Statement<'tcx> {\n         };\n         Statement {\n             source_info: self.source_info,\n-            kind: kind\n+            kind,\n         }\n     }\n \n@@ -1530,14 +1530,14 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n             },\n             Drop { ref location, target, unwind } => Drop {\n                 location: location.fold_with(folder),\n-                target: target,\n-                unwind: unwind\n+                target,\n+                unwind,\n             },\n             DropAndReplace { ref location, ref value, target, unwind } => DropAndReplace {\n                 location: location.fold_with(folder),\n                 value: value.fold_with(folder),\n-                target: target,\n-                unwind: unwind\n+                target,\n+                unwind,\n             },\n             Call { ref func, ref args, ref destination, cleanup } => {\n                 let dest = destination.as_ref().map(|&(ref loc, dest)| {\n@@ -1548,7 +1548,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                     func: func.fold_with(folder),\n                     args: args.fold_with(folder),\n                     destination: dest,\n-                    cleanup: cleanup\n+                    cleanup,\n                 }\n             },\n             Assert { ref cond, expected, ref msg, target, cleanup } => {\n@@ -1562,10 +1562,10 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                 };\n                 Assert {\n                     cond: cond.fold_with(folder),\n-                    expected: expected,\n-                    msg: msg,\n-                    target: target,\n-                    cleanup: cleanup\n+                    expected,\n+                    msg,\n+                    target,\n+                    cleanup,\n                 }\n             },\n             Resume => Resume,\n@@ -1574,7 +1574,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n         };\n         Terminator {\n             source_info: self.source_info,\n-            kind: kind\n+            kind,\n         }\n     }\n \n@@ -1716,8 +1716,8 @@ impl<'tcx, B, V> TypeFoldable<'tcx> for Projection<'tcx, B, V>\n         };\n \n         Projection {\n-            base: base,\n-            elem: elem\n+            base,\n+            elem,\n         }\n     }\n \n@@ -1750,7 +1750,7 @@ impl<'tcx> TypeFoldable<'tcx> for Literal<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         match *self {\n             Literal::Item { def_id, substs } => Literal::Item {\n-                def_id: def_id,\n+                def_id,\n                 substs: substs.fold_with(folder)\n             },\n             _ => self.clone()"}, {"sha": "71acb36ecf75df7af0208643eced49d8d494d427", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -58,7 +58,7 @@ impl<'a, 'gcx, 'tcx> LvalueTy<'tcx> {\n                              })\n                              .ty;\n                 LvalueTy::Ty {\n-                    ty: ty,\n+                    ty,\n                 }\n             }\n             ProjectionElem::Index(_) | ProjectionElem::ConstantIndex { .. } =>\n@@ -85,8 +85,8 @@ impl<'a, 'gcx, 'tcx> LvalueTy<'tcx> {\n                         assert!(adt_def.is_enum());\n                         assert!(index < adt_def.variants.len());\n                         assert_eq!(adt_def, adt_def1);\n-                        LvalueTy::Downcast { adt_def: adt_def,\n-                                             substs: substs,\n+                        LvalueTy::Downcast { adt_def,\n+                                             substs,\n                                              variant_index: index }\n                     }\n                     _ => {\n@@ -104,9 +104,9 @@ impl<'tcx> TypeFoldable<'tcx> for LvalueTy<'tcx> {\n             LvalueTy::Ty { ty } => LvalueTy::Ty { ty: ty.fold_with(folder) },\n             LvalueTy::Downcast { adt_def, substs, variant_index } => {\n                 LvalueTy::Downcast {\n-                    adt_def: adt_def,\n+                    adt_def,\n                     substs: substs.fold_with(folder),\n-                    variant_index: variant_index\n+                    variant_index,\n                 }\n             }\n         }"}, {"sha": "5aab46b3cefb4beaa8f39f90d54779017d422d20", "filename": "src/librustc/mir/traversal.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftraversal.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -44,9 +44,9 @@ impl<'a, 'tcx> Preorder<'a, 'tcx> {\n         let worklist = vec![root];\n \n         Preorder {\n-            mir: mir,\n+            mir,\n             visited: BitVector::new(mir.basic_blocks().len()),\n-            worklist: worklist\n+            worklist,\n         }\n     }\n }\n@@ -106,7 +106,7 @@ pub struct Postorder<'a, 'tcx: 'a> {\n impl<'a, 'tcx> Postorder<'a, 'tcx> {\n     pub fn new(mir: &'a Mir<'tcx>, root: BasicBlock) -> Postorder<'a, 'tcx> {\n         let mut po = Postorder {\n-            mir: mir,\n+            mir,\n             visited: BitVector::new(mir.basic_blocks().len()),\n             visit_stack: Vec::new()\n         };\n@@ -251,8 +251,8 @@ impl<'a, 'tcx> ReversePostorder<'a, 'tcx> {\n         let len = blocks.len();\n \n         ReversePostorder {\n-            mir: mir,\n-            blocks: blocks,\n+            mir,\n+            blocks,\n             idx: len\n         }\n     }"}, {"sha": "118b84113a0ffc7d48ec0ddc33dc5b42c38f55c4", "filename": "src/librustc/session/code_stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fsession%2Fcode_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fsession%2Fcode_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fcode_stats.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -82,12 +82,12 @@ impl CodeStats {\n                                          opt_discr_size: Option<Size>,\n                                          variants: Vec<VariantInfo>) {\n         let info = TypeSizeInfo {\n-            kind: kind,\n+            kind,\n             type_description: type_desc.to_string(),\n             align: align.abi(),\n             overall_size: overall_size.bytes(),\n             opt_discr_size: opt_discr_size.map(|s| s.bytes()),\n-            variants: variants,\n+            variants,\n         };\n         self.type_sizes.insert(info);\n     }"}, {"sha": "240f000a424c0f1c525dd4b85d34ae459fe16472", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -1122,9 +1122,9 @@ pub fn build_target_config(opts: &Options, sp: &Handler) -> Config {\n     };\n \n     Config {\n-        target: target,\n-        int_type: int_type,\n-        uint_type: uint_type,\n+        target,\n+        int_type,\n+        uint_type,\n     }\n }\n \n@@ -1150,7 +1150,7 @@ impl RustcOptGroup {\n         where F: Fn(&mut getopts::Options) -> &mut getopts::Options + 'static,\n     {\n         RustcOptGroup {\n-            name: name,\n+            name,\n             apply: Box::new(f),\n             stability: OptionStability::Stable,\n         }\n@@ -1160,7 +1160,7 @@ impl RustcOptGroup {\n         where F: Fn(&mut getopts::Options) -> &mut getopts::Options + 'static,\n     {\n         RustcOptGroup {\n-            name: name,\n+            name,\n             apply: Box::new(f),\n             stability: OptionStability::Unstable,\n         }\n@@ -1627,28 +1627,28 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n     let incremental = debugging_opts.incremental.as_ref().map(|m| PathBuf::from(m));\n \n     (Options {\n-        crate_types: crate_types,\n+        crate_types,\n         optimize: opt_level,\n-        debuginfo: debuginfo,\n-        lint_opts: lint_opts,\n-        lint_cap: lint_cap,\n-        describe_lints: describe_lints,\n+        debuginfo,\n+        lint_opts,\n+        lint_cap,\n+        describe_lints,\n         output_types: OutputTypes(output_types),\n-        search_paths: search_paths,\n+        search_paths,\n         maybe_sysroot: sysroot_opt,\n         target_triple: target,\n-        test: test,\n-        incremental: incremental,\n-        debugging_opts: debugging_opts,\n-        prints: prints,\n-        cg: cg,\n-        error_format: error_format,\n+        test,\n+        incremental,\n+        debugging_opts,\n+        prints,\n+        cg,\n+        error_format,\n         externs: Externs(externs),\n-        crate_name: crate_name,\n+        crate_name,\n         alt_std_name: None,\n-        libs: libs,\n+        libs,\n         unstable_features: UnstableFeatures::from_environment(),\n-        debug_assertions: debug_assertions,\n+        debug_assertions,\n         actually_rustdoc: false,\n     },\n     cfg)"}, {"sha": "1004b2826022aad753f30013ffa1ea63759e5ef0", "filename": "src/librustc/session/filesearch.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Ffilesearch.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -104,10 +104,10 @@ impl<'a> FileSearch<'a> {\n                kind: PathKind) -> FileSearch<'a> {\n         debug!(\"using sysroot = {}, triple = {}\", sysroot.display(), triple);\n         FileSearch {\n-            sysroot: sysroot,\n-            search_paths: search_paths,\n-            triple: triple,\n-            kind: kind,\n+            sysroot,\n+            search_paths,\n+            triple,\n+            kind,\n         }\n     }\n "}, {"sha": "fe6b24f3e1f2a8f6fdd59ac5c382a7d4dcb939bd", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -485,7 +485,7 @@ impl Session {\n \n         *incr_comp_session = IncrCompSession::Active {\n             session_directory: session_dir,\n-            lock_file: lock_file,\n+            lock_file,\n         };\n     }\n \n@@ -515,7 +515,7 @@ impl Session {\n \n         // Note: This will also drop the lock file, thus unlocking the directory\n         *incr_comp_session = IncrCompSession::InvalidBecauseOfErrors {\n-            session_directory: session_directory\n+            session_directory,\n         };\n     }\n \n@@ -695,18 +695,18 @@ pub fn build_session_(sopts: config::Options,\n     let sess = Session {\n         dep_graph: dep_graph.clone(),\n         target: target_cfg,\n-        host: host,\n+        host,\n         opts: sopts,\n-        cstore: cstore,\n+        cstore,\n         parse_sess: p_s,\n         // For a library crate, this is always none\n         entry_fn: RefCell::new(None),\n         entry_type: Cell::new(None),\n         plugin_registrar_fn: Cell::new(None),\n         derive_registrar_fn: Cell::new(None),\n-        default_sysroot: default_sysroot,\n-        local_crate_source_file: local_crate_source_file,\n-        working_dir: working_dir,\n+        default_sysroot,\n+        local_crate_source_file,\n+        working_dir,\n         lint_store: RefCell::new(lint::LintStore::new()),\n         lints: RefCell::new(lint::LintTable::new()),\n         one_time_diagnostics: RefCell::new(FxHashSet()),\n@@ -733,10 +733,10 @@ pub fn build_session_(sopts: config::Options,\n             decode_def_path_tables_time: Cell::new(Duration::from_secs(0)),\n         },\n         code_stats: RefCell::new(CodeStats::new()),\n-        optimization_fuel_crate: optimization_fuel_crate,\n-        optimization_fuel_limit: optimization_fuel_limit,\n-        print_fuel_crate: print_fuel_crate,\n-        print_fuel: print_fuel,\n+        optimization_fuel_crate,\n+        optimization_fuel_limit,\n+        print_fuel_crate,\n+        print_fuel,\n         out_of_fuel: Cell::new(false),\n         // Note that this is unsafe because it may misinterpret file descriptors\n         // on Unix as jobserver file descriptors. We hopefully execute this near"}, {"sha": "34df447a11e154b4b19d5d13673a3ab6f7e1845a", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -47,7 +47,7 @@ fn with_fresh_ty_vars<'cx, 'gcx, 'tcx>(selcx: &mut SelectionContext<'cx, 'gcx, '\n     let impl_substs = selcx.infcx().fresh_substs_for_item(DUMMY_SP, impl_def_id);\n \n     let header = ty::ImplHeader {\n-        impl_def_id: impl_def_id,\n+        impl_def_id,\n         self_ty: tcx.type_of(impl_def_id),\n         trait_ref: tcx.impl_trait_ref(impl_def_id),\n         predicates: tcx.predicates_of(impl_def_id).predicates\n@@ -102,7 +102,7 @@ fn overlap<'cx, 'gcx, 'tcx>(selcx: &mut SelectionContext<'cx, 'gcx, 'tcx>,\n                      .chain(&b_impl_header.predicates)\n                      .map(|p| infcx.resolve_type_vars_if_possible(p))\n                      .map(|p| Obligation { cause: ObligationCause::dummy(),\n-                                           param_env: param_env,\n+                                           param_env,\n                                            recursion_depth: 0,\n                                            predicate: p })\n                      .chain(obligations)"}, {"sha": "d0bb1adbabb2de72f6e62ab18c0d5d88ba733380", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -152,11 +152,11 @@ impl<'a, 'gcx, 'tcx> FulfillmentContext<'tcx> {\n                           cause: ObligationCause<'tcx>)\n     {\n         let trait_ref = ty::TraitRef {\n-            def_id: def_id,\n+            def_id,\n             substs: infcx.tcx.mk_substs_trait(ty, &[]),\n         };\n         self.register_predicate_obligation(infcx, Obligation {\n-            cause: cause,\n+            cause,\n             recursion_depth: 0,\n             param_env,\n             predicate: trait_ref.to_predicate()\n@@ -191,7 +191,7 @@ impl<'a, 'gcx, 'tcx> FulfillmentContext<'tcx> {\n         }\n \n         self.predicates.register_obligation(PendingPredicateObligation {\n-            obligation: obligation,\n+            obligation,\n             stalled_on: vec![]\n         });\n     }\n@@ -259,7 +259,7 @@ impl<'a, 'gcx, 'tcx> FulfillmentContext<'tcx> {\n \n             // Process pending obligations.\n             let outcome = self.predicates.process_obligations(&mut FulfillProcessor {\n-                selcx: selcx,\n+                selcx,\n                 region_obligations: &mut self.region_obligations,\n             });\n             debug!(\"select: outcome={:?}\", outcome);\n@@ -606,7 +606,7 @@ impl<'a, 'gcx, 'tcx> GlobalFulfilledPredicates<'gcx> {\n     pub fn new(dep_graph: DepGraph) -> GlobalFulfilledPredicates<'gcx> {\n         GlobalFulfilledPredicates {\n             set: FxHashSet(),\n-            dep_graph: dep_graph,\n+            dep_graph,\n         }\n     }\n "}, {"sha": "6b243ffa5feb5833fa0e2cb2db3bc9ab42f37db8", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -396,7 +396,7 @@ pub fn type_known_to_meet_bound<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx\n            infcx.tcx.item_path_str(def_id));\n \n     let trait_ref = ty::TraitRef {\n-        def_id: def_id,\n+        def_id,\n         substs: infcx.tcx.mk_substs_trait(ty, &[]),\n     };\n     let obligation = Obligation {"}, {"sha": "14b6d4605e89fd92f5e7a08eeca0a0359c1a8561", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -245,11 +245,11 @@ impl<'a, 'b, 'gcx, 'tcx> AssociatedTypeNormalizer<'a, 'b, 'gcx, 'tcx> {\n            -> AssociatedTypeNormalizer<'a, 'b, 'gcx, 'tcx>\n     {\n         AssociatedTypeNormalizer {\n-            selcx: selcx,\n-            param_env: param_env,\n-            cause: cause,\n+            selcx,\n+            param_env,\n+            cause,\n             obligations: vec![],\n-            depth: depth,\n+            depth,\n         }\n     }\n \n@@ -371,7 +371,7 @@ pub fn normalize_projection_type<'a, 'b, 'gcx, 'tcx>(\n             let ty_var = selcx.infcx().next_ty_var(\n                 TypeVariableOrigin::NormalizeProjectionType(tcx.def_span(def_id)));\n             let projection = ty::Binder(ty::ProjectionPredicate {\n-                projection_ty: projection_ty,\n+                projection_ty,\n                 ty: ty_var\n             });\n             let obligation = Obligation::with_depth(\n@@ -514,12 +514,12 @@ fn opt_normalize_projection_type<'a, 'b, 'gcx, 'tcx>(\n                 obligations.extend(normalizer.obligations);\n                 Normalized {\n                     value: normalized_ty,\n-                    obligations: obligations,\n+                    obligations,\n                 }\n             } else {\n                 Normalized {\n                     value: projected_ty,\n-                    obligations: obligations,\n+                    obligations,\n                 }\n             };\n             infcx.projection_cache.borrow_mut()\n@@ -586,7 +586,7 @@ fn normalize_to_error<'a, 'gcx, 'tcx>(selcx: &mut SelectionContext<'a, 'gcx, 'tc\n                                       -> NormalizedTy<'tcx>\n {\n     let trait_ref = projection_ty.trait_ref.to_poly_trait_ref();\n-    let trait_obligation = Obligation { cause: cause,\n+    let trait_obligation = Obligation { cause,\n                                         recursion_depth: depth,\n                                         param_env,\n                                         predicate: trait_ref.to_predicate() };\n@@ -1232,7 +1232,7 @@ fn confirm_param_env_candidate<'cx, 'gcx, 'tcx>(\n         Ok(InferOk { value: ty_match, obligations }) => {\n             Progress {\n                 ty: ty_match.value,\n-                obligations: obligations,\n+                obligations,\n                 cacheable: ty_match.unconstrained_regions.is_empty(),\n             }\n         }\n@@ -1306,7 +1306,7 @@ fn assoc_ty_def<'cx, 'gcx, 'tcx>(\n         if item.kind == ty::AssociatedKind::Type && item.name == assoc_ty_name {\n             return specialization_graph::NodeItem {\n                 node: specialization_graph::Node::Impl(impl_def_id),\n-                item: item,\n+                item,\n             };\n         }\n     }"}, {"sha": "4d4693f1c646894ecef877c6db8a876def5d5213", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -212,7 +212,7 @@ impl<'a, 'tcx> ty::Lift<'tcx> for SelectionCandidate<'a> {\n         Some(match *self {\n             BuiltinCandidate { has_nested } => {\n                 BuiltinCandidate {\n-                    has_nested: has_nested\n+                    has_nested,\n                 }\n             }\n             ImplCandidate(def_id) => ImplCandidate(def_id),\n@@ -290,7 +290,7 @@ pub struct EvaluationCache<'tcx> {\n impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     pub fn new(infcx: &'cx InferCtxt<'cx, 'gcx, 'tcx>) -> SelectionContext<'cx, 'gcx, 'tcx> {\n         SelectionContext {\n-            infcx: infcx,\n+            infcx,\n             freshener: infcx.freshener(),\n             intercrate: false,\n             inferred_obligations: SnapshotVec::new(),\n@@ -299,7 +299,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n     pub fn intercrate(infcx: &'cx InferCtxt<'cx, 'gcx, 'tcx>) -> SelectionContext<'cx, 'gcx, 'tcx> {\n         SelectionContext {\n-            infcx: infcx,\n+            infcx,\n             freshener: infcx.freshener(),\n             intercrate: true,\n             inferred_obligations: SnapshotVec::new(),\n@@ -2205,7 +2205,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         debug!(\"vtable_default_impl: obligations={:?}\", obligations);\n \n         VtableDefaultImplData {\n-            trait_def_id: trait_def_id,\n+            trait_def_id,\n             nested: obligations\n         }\n     }\n@@ -2273,7 +2273,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         // e.g. `impl<U: Tr, V: Iterator<Item=U>> Foo<<U as Tr>::T> for V`\n         impl_obligations.append(&mut substs.obligations);\n \n-        VtableImplData { impl_def_id: impl_def_id,\n+        VtableImplData { impl_def_id,\n                          substs: substs.value,\n                          nested: impl_obligations }\n     }\n@@ -2336,7 +2336,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n         VtableObjectData {\n             upcast_trait_ref: upcast_trait_ref.unwrap(),\n-            vtable_base: vtable_base,\n+            vtable_base,\n             nested: vec![]\n         }\n     }\n@@ -2405,7 +2405,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             ty::Predicate::ClosureKind(closure_def_id, kind)));\n \n         Ok(VtableClosureData {\n-            closure_def_id: closure_def_id,\n+            closure_def_id,\n             substs: substs.clone(),\n             nested: obligations\n         })\n@@ -2826,8 +2826,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             obligation.predicate.to_poly_trait_ref().fold_with(&mut self.freshener);\n \n         TraitObligationStack {\n-            obligation: obligation,\n-            fresh_trait_ref: fresh_trait_ref,\n+            obligation,\n+            fresh_trait_ref,\n             previous: previous_stack,\n         }\n     }\n@@ -2911,7 +2911,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             predicate.obligations.into_iter().chain(\n                 Some(Obligation {\n                     cause: cause.clone(),\n-                    recursion_depth: recursion_depth,\n+                    recursion_depth,\n                     param_env,\n                     predicate: predicate.value\n                 }))"}, {"sha": "f1c176561ea4875d908cc67689c2fc4166d02308", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -209,15 +209,15 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n                                                  trait_item_def_id,\n                                                  lint_id } => {\n                 Some(super::CompareImplMethodObligation {\n-                    item_name: item_name,\n-                    impl_item_def_id: impl_item_def_id,\n-                    trait_item_def_id: trait_item_def_id,\n-                    lint_id: lint_id,\n+                    item_name,\n+                    impl_item_def_id,\n+                    trait_item_def_id,\n+                    lint_id,\n                 })\n             }\n             super::ExprAssignable => Some(super::ExprAssignable),\n             super::MatchExpressionArm { arm_span, source } => {\n-                Some(super::MatchExpressionArm { arm_span: arm_span,\n+                Some(super::MatchExpressionArm { arm_span,\n                                                  source: source })\n             }\n             super::IfExpression => Some(super::IfExpression),\n@@ -253,7 +253,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCause<'a> {\n             traits::ObligationCause {\n                 span: self.span,\n                 body_id: self.body_id,\n-                code: code,\n+                code,\n             }\n         })\n     }\n@@ -271,9 +271,9 @@ impl<'a, 'tcx> Lift<'tcx> for traits::Vtable<'a, ()> {\n             }) => {\n                 tcx.lift(&substs).map(|substs| {\n                     traits::VtableImpl(traits::VtableImplData {\n-                        impl_def_id: impl_def_id,\n-                        substs: substs,\n-                        nested: nested\n+                        impl_def_id,\n+                        substs,\n+                        nested,\n                     })\n                 })\n             }\n@@ -285,17 +285,17 @@ impl<'a, 'tcx> Lift<'tcx> for traits::Vtable<'a, ()> {\n             }) => {\n                 tcx.lift(&substs).map(|substs| {\n                     traits::VtableClosure(traits::VtableClosureData {\n-                        closure_def_id: closure_def_id,\n-                        substs: substs,\n-                        nested: nested\n+                        closure_def_id,\n+                        substs,\n+                        nested,\n                     })\n                 })\n             }\n             traits::VtableFnPointer(traits::VtableFnPointerData { fn_ty, nested }) => {\n                 tcx.lift(&fn_ty).map(|fn_ty| {\n                     traits::VtableFnPointer(traits::VtableFnPointerData {\n-                        fn_ty: fn_ty,\n-                        nested: nested,\n+                        fn_ty,\n+                        nested,\n                     })\n                 })\n             }\n@@ -309,8 +309,8 @@ impl<'a, 'tcx> Lift<'tcx> for traits::Vtable<'a, ()> {\n                 tcx.lift(&upcast_trait_ref).map(|trait_ref| {\n                     traits::VtableObject(traits::VtableObjectData {\n                         upcast_trait_ref: trait_ref,\n-                        vtable_base: vtable_base,\n-                        nested: nested\n+                        vtable_base,\n+                        nested,\n                     })\n                 })\n             }"}, {"sha": "dae0c896909c85cd69d161af8e562db93168b589", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -288,7 +288,7 @@ pub fn supertrait_def_ids<'cx, 'gcx, 'tcx>(tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n                                            -> SupertraitDefIds<'cx, 'gcx, 'tcx>\n {\n     SupertraitDefIds {\n-        tcx: tcx,\n+        tcx,\n         stack: vec![trait_def_id],\n         visited: Some(trait_def_id).into_iter().collect(),\n     }\n@@ -399,8 +399,8 @@ pub fn predicates_for_generics<'tcx>(cause: ObligationCause<'tcx>,\n \n     generic_bounds.predicates.iter().map(|predicate| {\n         Obligation { cause: cause.clone(),\n-                     recursion_depth: recursion_depth,\n-                     param_env: param_env,\n+                     recursion_depth,\n+                     param_env,\n                      predicate: predicate.clone() }\n     }).collect()\n }\n@@ -413,9 +413,9 @@ pub fn predicate_for_trait_ref<'tcx>(\n     -> PredicateObligation<'tcx>\n {\n     Obligation {\n-        cause: cause,\n-        param_env: param_env,\n-        recursion_depth: recursion_depth,\n+        cause,\n+        param_env,\n+        recursion_depth,\n         predicate: trait_ref.to_predicate(),\n     }\n }"}, {"sha": "316f871a7a46cd7b22ab4be157fd3215ff9781fd", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -107,7 +107,7 @@ pub struct CtxtInterners<'tcx> {\n impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n     fn new(arena: &'tcx DroplessArena) -> CtxtInterners<'tcx> {\n         CtxtInterners {\n-            arena: arena,\n+            arena,\n             type_: RefCell::new(FxHashSet()),\n             type_list: RefCell::new(FxHashSet()),\n             substs: RefCell::new(FxHashSet()),\n@@ -732,28 +732,28 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             global_interners: interners,\n             dep_graph: dep_graph.clone(),\n             types: common_types,\n-            named_region_map: named_region_map,\n+            named_region_map,\n             trait_map: resolutions.trait_map,\n             export_map: resolutions.export_map,\n             fulfilled_predicates: RefCell::new(fulfilled_predicates),\n-            hir: hir,\n-            def_path_hash_to_def_id: def_path_hash_to_def_id,\n+            hir,\n+            def_path_hash_to_def_id,\n             maps: maps::Maps::new(providers),\n             mir_passes,\n             freevars: RefCell::new(resolutions.freevars),\n             maybe_unused_trait_imports: resolutions.maybe_unused_trait_imports,\n             rcache: RefCell::new(FxHashMap()),\n             normalized_cache: RefCell::new(FxHashMap()),\n             inhabitedness_cache: RefCell::new(FxHashMap()),\n-            lang_items: lang_items,\n+            lang_items,\n             used_unsafe: RefCell::new(NodeSet()),\n             used_mut_nodes: RefCell::new(NodeSet()),\n             stability: RefCell::new(stability),\n             selection_cache: traits::SelectionCache::new(),\n             evaluation_cache: traits::EvaluationCache::new(),\n             rvalue_promotable_to_static: RefCell::new(NodeMap()),\n             crate_name: Symbol::intern(crate_name),\n-            data_layout: data_layout,\n+            data_layout,\n             layout_interner: RefCell::new(FxHashSet()),\n             layout_depth: Cell::new(0),\n             derive_macros: RefCell::new(NodeMap()),\n@@ -964,8 +964,8 @@ pub mod tls {\n             let prev = tls.get();\n             tls.set(Some((gcx_ptr, interners_ptr)));\n             let ret = f(TyCtxt {\n-                gcx: gcx,\n-                interners: interners\n+                gcx,\n+                interners,\n             });\n             tls.set(prev);\n             ret\n@@ -980,8 +980,8 @@ pub mod tls {\n             let gcx = unsafe { &*(gcx as *const GlobalCtxt) };\n             let interners = unsafe { &*(interners as *const CtxtInterners) };\n             f(TyCtxt {\n-                gcx: gcx,\n-                interners: interners\n+                gcx,\n+                interners,\n             })\n         })\n     }\n@@ -1408,7 +1408,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                       substs: &'tcx Substs<'tcx>)\n         -> Ty<'tcx> {\n         self.mk_closure_from_closure_substs(closure_id, ClosureSubsts {\n-            substs: substs\n+            substs,\n         })\n     }\n "}, {"sha": "66868040925e12225e8cb020a6026ddbc878a87e", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -238,10 +238,10 @@ impl<'a, 'gcx, 'tcx> RegionFolder<'a, 'gcx, 'tcx> {\n         where F : FnMut(ty::Region<'tcx>, u32) -> ty::Region<'tcx>\n     {\n         RegionFolder {\n-            tcx: tcx,\n-            skipped_regions: skipped_regions,\n+            tcx,\n+            skipped_regions,\n             current_depth: 1,\n-            fld_r: fld_r,\n+            fld_r,\n         }\n     }\n }\n@@ -393,9 +393,9 @@ impl<'a, 'gcx, 'tcx> RegionReplacer<'a, 'gcx, 'tcx> {\n         where F : FnMut(ty::BoundRegion) -> ty::Region<'tcx>\n     {\n         RegionReplacer {\n-            tcx: tcx,\n+            tcx,\n             current_depth: 1,\n-            fld_r: fld_r,\n+            fld_r,\n             map: FxHashMap()\n         }\n     }\n@@ -621,7 +621,7 @@ impl LateBoundRegionsCollector {\n         LateBoundRegionsCollector {\n             current_depth: 1,\n             regions: FxHashSet(),\n-            just_constrained: just_constrained,\n+            just_constrained,\n         }\n     }\n }"}, {"sha": "231600f95ac606a2c88f0aefd722d8daf5a9dcc5", "filename": "src/librustc/ty/inhabitedness/def_id_forest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -52,7 +52,7 @@ impl<'a, 'gcx, 'tcx> DefIdForest {\n         let mut root_ids = SmallVec::new();\n         root_ids.push(id);\n         DefIdForest {\n-            root_ids: root_ids,\n+            root_ids,\n         }\n     }\n "}, {"sha": "73b577e2e876b776b37c1da8f0ccb942c54bd81e", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -397,7 +397,7 @@ struct LocalPathBuffer {\n impl LocalPathBuffer {\n     fn new(root_mode: RootMode) -> LocalPathBuffer {\n         LocalPathBuffer {\n-            root_mode: root_mode,\n+            root_mode,\n             str: String::new(),\n         }\n     }"}, {"sha": "3212c6f07d1d6ca2a588f712837690db8b8d3629", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -609,7 +609,7 @@ impl<'a, 'tcx> Struct {\n         };\n \n         let mut ret = Struct {\n-            align: align,\n+            align,\n             primitive_align: align,\n             packed: repr.packed(),\n             sized: true,\n@@ -910,10 +910,10 @@ impl<'a, 'tcx> Union {\n     fn new(dl: &TargetDataLayout, packed: bool) -> Union {\n         let align = if packed { dl.i8_align } else { dl.aggregate_align };\n         Union {\n-            align: align,\n+            align,\n             primitive_align: align,\n             min_size: Size::from_bytes(0),\n-            packed: packed,\n+            packed,\n         }\n     }\n \n@@ -1169,8 +1169,8 @@ impl<'a, 'tcx> Layout {\n                     sized: true,\n                     align: element.align(dl),\n                     primitive_align: element.primitive_align(dl),\n-                    element_size: element_size,\n-                    count: count\n+                    element_size,\n+                    count,\n                 }\n             }\n             ty::TySlice(element) => {\n@@ -1280,9 +1280,9 @@ impl<'a, 'tcx> Layout {\n                     // grok.\n                     let (discr, signed) = Integer::repr_discr(tcx, ty, &def.repr, min, max);\n                     return success(CEnum {\n-                        discr: discr,\n-                        signed: signed,\n-                        non_zero: non_zero,\n+                        discr,\n+                        signed,\n+                        non_zero,\n                         // FIXME: should be u128?\n                         min: min as u64,\n                         max: max as u64\n@@ -1364,7 +1364,7 @@ impl<'a, 'tcx> Layout {\n                             };\n                             return success(RawNullablePointer {\n                                 nndiscr: discr as u64,\n-                                value: value,\n+                                value,\n                             });\n                         }\n \n@@ -1491,10 +1491,10 @@ impl<'a, 'tcx> Layout {\n \n                 General {\n                     discr: ity,\n-                    variants: variants,\n-                    size: size,\n-                    align: align,\n-                    primitive_align: primitive_align\n+                    variants,\n+                    size,\n+                    align,\n+                    primitive_align,\n                 }\n             }\n \n@@ -1957,7 +1957,7 @@ impl<'a, 'tcx> SizeSkeleton<'tcx> {\n                 ty::TyParam(_) | ty::TyProjection(_) => {\n                     assert!(tail.has_param_types() || tail.has_self_ty());\n                     Ok(SizeSkeleton::Pointer {\n-                        non_zero: non_zero,\n+                        non_zero,\n                         tail: tcx.erase_regions(&tail)\n                     })\n                 }\n@@ -2016,7 +2016,7 @@ impl<'a, 'tcx> SizeSkeleton<'tcx> {\n                         return Ok(SizeSkeleton::Pointer {\n                             non_zero: non_zero ||\n                                 Some(def.did) == tcx.lang_items.non_zero(),\n-                            tail: tail\n+                            tail,\n                         });\n                     } else {\n                         return Err(err);\n@@ -2030,7 +2030,7 @@ impl<'a, 'tcx> SizeSkeleton<'tcx> {\n                     (None, Some(SizeSkeleton::Pointer { non_zero: true, tail })) => {\n                         Ok(SizeSkeleton::Pointer {\n                             non_zero: false,\n-                            tail: tail\n+                            tail,\n                         })\n                     }\n                     _ => Err(err)\n@@ -2115,7 +2115,7 @@ impl<'a, 'tcx> LayoutTyper<'tcx> for LayoutCx<'a, 'tcx> {\n         let ty = self.normalize_projections(ty);\n \n         Ok(TyLayout {\n-            ty: ty,\n+            ty,\n             layout: ty.layout(self.tcx, self.param_env)?,\n             variant_index: None\n         })"}, {"sha": "f4e333228c94d75b54da73e2c555f462b855f9c8", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -246,7 +246,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             if let Some((i, _)) = stack.iter().enumerate().rev()\n                                        .find(|&(_, &(_, ref q))| *q == query) {\n                 return Err(CycleError {\n-                    span: span,\n+                    span,\n                     cycle: RefMut::map(stack, |stack| &mut stack[i..])\n                 });\n             }"}, {"sha": "88aef53ec9de5cb43a623d1fd96e564d7061174a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -964,8 +964,8 @@ impl<'tcx> TraitPredicate<'tcx> {\n                 .next()\n                 .unwrap_or(trait_def_id);\n         DepNode::new(tcx, DepConstructor::TraitSelect {\n-            trait_def_id: trait_def_id,\n-            input_def_id: input_def_id\n+            trait_def_id,\n+            input_def_id,\n         })\n     }\n \n@@ -1244,12 +1244,12 @@ impl<'tcx> ParamEnv<'tcx> {\n         if value.has_param_types() || value.has_self_ty() {\n             ParamEnvAnd {\n                 param_env: self,\n-                value: value,\n+                value,\n             }\n         } else {\n             ParamEnvAnd {\n                 param_env: ParamEnv::empty(self.reveal),\n-                value: value,\n+                value,\n             }\n         }\n     }\n@@ -1487,10 +1487,10 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n             AdtKind::Struct => {}\n         }\n         AdtDef {\n-            did: did,\n-            variants: variants,\n-            flags: flags,\n-            repr: repr,\n+            did,\n+            variants,\n+            flags,\n+            repr,\n         }\n     }\n \n@@ -2113,11 +2113,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         AssociatedItem {\n             name: trait_item_ref.name,\n-            kind: kind,\n+            kind,\n             // Visibility of trait items is inherited from their traits.\n             vis: Visibility::from_hir(parent_vis, trait_item_ref.id.node_id, self),\n             defaultness: trait_item_ref.defaultness,\n-            def_id: def_id,\n+            def_id,\n             container: TraitContainer(parent_def_id),\n             method_has_self_argument: has_self\n         }\n@@ -2138,11 +2138,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         ty::AssociatedItem {\n             name: impl_item_ref.name,\n-            kind: kind,\n+            kind,\n             // Visibility of trait impl items doesn't matter.\n             vis: ty::Visibility::from_hir(&impl_item_ref.vis, impl_item_ref.id.node_id, self),\n             defaultness: impl_item_ref.defaultness,\n-            def_id: def_id,\n+            def_id,\n             container: ImplContainer(parent_def_id),\n             method_has_self_argument: has_self\n         }"}, {"sha": "7710cc965c8f056b48abcadf499d6e1c0c3314bb", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -182,8 +182,8 @@ impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {\n         Ok(ty::FnSig {\n             inputs_and_output: relation.tcx().intern_type_list(&inputs_and_output),\n             variadic: a.variadic,\n-            unsafety: unsafety,\n-            abi: abi\n+            unsafety,\n+            abi,\n         })\n     }\n }\n@@ -250,9 +250,9 @@ impl<'tcx> Relate<'tcx> for ty::ExistentialProjection<'tcx> {\n             let trait_ref = relation.relate(&a.trait_ref, &b.trait_ref)?;\n             let ty = relation.relate(&a.ty, &b.ty)?;\n             Ok(ty::ExistentialProjection {\n-                trait_ref: trait_ref,\n+                trait_ref,\n                 item_name: a.item_name,\n-                ty: ty\n+                ty,\n             })\n         }\n     }"}, {"sha": "478717eaca0974182d7fd5c09a2c3efd7f9a79b0", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -78,7 +78,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::TraitRef<'a> {\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.substs).map(|substs| ty::TraitRef {\n             def_id: self.def_id,\n-            substs: substs\n+            substs,\n         })\n     }\n }\n@@ -88,7 +88,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ExistentialTraitRef<'a> {\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.substs).map(|substs| ty::ExistentialTraitRef {\n             def_id: self.def_id,\n-            substs: substs\n+            substs,\n         })\n     }\n }\n@@ -98,7 +98,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::TraitPredicate<'a> {\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>)\n                              -> Option<ty::TraitPredicate<'tcx>> {\n         tcx.lift(&self.trait_ref).map(|trait_ref| ty::TraitPredicate {\n-            trait_ref: trait_ref\n+            trait_ref,\n         })\n     }\n }\n@@ -117,8 +117,8 @@ impl<'a, 'tcx> Lift<'tcx> for ty::SubtypePredicate<'a> {\n                              -> Option<ty::SubtypePredicate<'tcx>> {\n         tcx.lift(&(self.a, self.b)).map(|(a, b)| ty::SubtypePredicate {\n             a_is_expected: self.a_is_expected,\n-            a: a,\n-            b: b,\n+            a,\n+            b,\n         })\n     }\n }\n@@ -146,8 +146,8 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ProjectionPredicate<'a> {\n                              -> Option<ty::ProjectionPredicate<'tcx>> {\n         tcx.lift(&(self.projection_ty, self.ty)).map(|(projection_ty, ty)| {\n             ty::ProjectionPredicate {\n-                projection_ty: projection_ty,\n-                ty: ty\n+                projection_ty,\n+                ty,\n             }\n         })\n     }\n@@ -158,9 +158,9 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ExistentialProjection<'a> {\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&(self.trait_ref, self.ty)).map(|(trait_ref, ty)| {\n             ty::ExistentialProjection {\n-                trait_ref: trait_ref,\n+                trait_ref,\n                 item_name: self.item_name,\n-                ty: ty\n+                ty,\n             }\n         })\n     }\n@@ -300,8 +300,8 @@ impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for ty::error::ExpectedFound<T> {\n         tcx.lift(&self.expected).and_then(|expected| {\n             tcx.lift(&self.found).map(|found| {\n                 ty::error::ExpectedFound {\n-                    expected: expected,\n-                    found: found\n+                    expected,\n+                    found,\n                 }\n             })\n         })\n@@ -313,7 +313,7 @@ impl<'a, 'tcx> Lift<'tcx> for type_variable::Default<'a> {\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.ty).map(|ty| {\n             type_variable::Default {\n-                ty: ty,\n+                ty,\n                 origin_span: self.origin_span,\n                 def_id: self.def_id\n             }"}, {"sha": "737e69b658348e538640fa17c62dc1a415848714", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -571,8 +571,8 @@ impl<'a, 'tcx> ProjectionTy<'tcx> {\n             |item| item.name == item_name).unwrap().def_id;\n \n         ProjectionTy {\n-            trait_ref: trait_ref,\n-            item_def_id: item_def_id,\n+            trait_ref,\n+            item_def_id,\n         }\n     }\n "}, {"sha": "f6112d4887d7d43e8f9e66a1eda89afe32847b46", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -352,9 +352,9 @@ impl<'tcx, T:TypeFoldable<'tcx>> Subst<'tcx> for T {\n                                span: Option<Span>)\n                                -> T\n     {\n-        let mut folder = SubstFolder { tcx: tcx,\n-                                       substs: substs,\n-                                       span: span,\n+        let mut folder = SubstFolder { tcx,\n+                                       substs,\n+                                       span,\n                                        root_ty: None,\n                                        ty_stack_depth: 0,\n                                        region_binders_passed: 0 };"}, {"sha": "91bc56155969aeca61b4ddbb7ea35fe7b29b0cfd", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f668999153d78903658b6937a099819e0b634a06/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=f668999153d78903658b6937a099819e0b634a06", "patch": "@@ -31,10 +31,10 @@ pub fn obligations<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n                                    span: Span)\n                                    -> Option<Vec<traits::PredicateObligation<'tcx>>>\n {\n-    let mut wf = WfPredicates { infcx: infcx,\n-                                param_env: param_env,\n-                                body_id: body_id,\n-                                span: span,\n+    let mut wf = WfPredicates { infcx,\n+                                param_env,\n+                                body_id,\n+                                span,\n                                 out: vec![] };\n     if wf.compute(ty) {\n         debug!(\"wf::obligations({:?}, body_id={:?}) = {:?}\", ty, body_id, wf.out);"}]}