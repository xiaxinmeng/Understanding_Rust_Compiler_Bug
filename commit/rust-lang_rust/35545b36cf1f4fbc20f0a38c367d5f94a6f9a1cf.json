{"sha": "35545b36cf1f4fbc20f0a38c367d5f94a6f9a1cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NTQ1YjM2Y2YxZjRmYmMyMGYwYTM4YzM2N2Q1Zjk0YTZmOWExY2Y=", "commit": {"author": {"name": "Paul Faria", "email": "Nashenas88@gmail.com", "date": "2017-10-08T19:20:12Z"}, "committer": {"name": "Paul Faria", "email": "Nashenas88@gmail.com", "date": "2017-10-08T19:20:28Z"}, "message": "Improve newtype_index macro to handle description and constants consistently", "tree": {"sha": "489c0379f06e71e3eaaf015d5aca914f4d8f1ab2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/489c0379f06e71e3eaaf015d5aca914f4d8f1ab2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35545b36cf1f4fbc20f0a38c367d5f94a6f9a1cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35545b36cf1f4fbc20f0a38c367d5f94a6f9a1cf", "html_url": "https://github.com/rust-lang/rust/commit/35545b36cf1f4fbc20f0a38c367d5f94a6f9a1cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35545b36cf1f4fbc20f0a38c367d5f94a6f9a1cf/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ade0b01ebf18550e41d24c6e36f91afaccd7f389", "url": "https://api.github.com/repos/rust-lang/rust/commits/ade0b01ebf18550e41d24c6e36f91afaccd7f389", "html_url": "https://github.com/rust-lang/rust/commit/ade0b01ebf18550e41d24c6e36f91afaccd7f389"}], "stats": {"total": 108, "additions": 80, "deletions": 28}, "files": [{"sha": "a68a6acab3f3360180dc55692ba8a7e191f32e63", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/35545b36cf1f4fbc20f0a38c367d5f94a6f9a1cf/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35545b36cf1f4fbc20f0a38c367d5f94a6f9a1cf/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=35545b36cf1f4fbc20f0a38c367d5f94a6f9a1cf", "patch": "@@ -402,9 +402,11 @@ pub enum BorrowKind {\n ///////////////////////////////////////////////////////////////////////////\n // Variables and temps\n \n-newtype_index!(Local, \"_\");\n-\n-pub const RETURN_POINTER: Local = Local(0);\n+newtype_index!(Local,\n+    const {\n+        DESCRIPTION = \"_\",\n+        RETURN_POINTER = 0,\n+    });\n \n /// Classifies locals into categories. See `Mir::local_kind`.\n #[derive(PartialEq, Eq, Debug)]\n@@ -538,7 +540,7 @@ pub struct UpvarDecl {\n ///////////////////////////////////////////////////////////////////////////\n // BasicBlock\n \n-newtype_index!(BasicBlock, \"bb\");\n+newtype_index!(BasicBlock, const { DESCRIPTION = \"bb\" });\n \n ///////////////////////////////////////////////////////////////////////////\n // BasicBlockData and Terminator\n@@ -1118,7 +1120,7 @@ pub type LvalueProjection<'tcx> = Projection<'tcx, Lvalue<'tcx>, Local, Ty<'tcx>\n /// and the index is a local.\n pub type LvalueElem<'tcx> = ProjectionElem<'tcx, Local, Ty<'tcx>>;\n \n-newtype_index!(Field, \"field\");\n+newtype_index!(Field, const { DESCRIPTION = \"field\" });\n \n impl<'tcx> Lvalue<'tcx> {\n     pub fn field(self, f: Field, ty: Ty<'tcx>) -> Lvalue<'tcx> {\n@@ -1183,8 +1185,11 @@ impl<'tcx> Debug for Lvalue<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Scopes\n \n-newtype_index!(VisibilityScope, \"scope\");\n-pub const ARGUMENT_VISIBILITY_SCOPE : VisibilityScope = VisibilityScope(0);\n+newtype_index!(VisibilityScope,\n+    const {\n+        DESCRIPTION = \"scope\",\n+        ARGUMENT_VISIBILITY_SCOPE = 0,\n+    });\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct VisibilityScopeData {\n@@ -1509,7 +1514,7 @@ pub struct Constant<'tcx> {\n     pub literal: Literal<'tcx>,\n }\n \n-newtype_index!(Promoted, \"promoted\");\n+newtype_index!(Promoted, const { DESCRIPTION = \"promoted\" });\n \n #[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub enum Literal<'tcx> {"}, {"sha": "0973bfd2429ba54d04f1b97391808eec0e9b01ea", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 67, "deletions": 20, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/35545b36cf1f4fbc20f0a38c367d5f94a6f9a1cf/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35545b36cf1f4fbc20f0a38c367d5f94a6f9a1cf/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=35545b36cf1f4fbc20f0a38c367d5f94a6f9a1cf", "patch": "@@ -40,39 +40,86 @@ impl Idx for u32 {\n \n #[macro_export]\n macro_rules! newtype_index {\n-    ($name:ident) => (\n-        newtype_index!($name, unsafe { ::std::intrinsics::type_name::<$name>() });\n-    );\n+    // ---- private rules ----\n \n-    ($name:ident, $debug_name:expr) => (\n+    // Base case, user-defined constants (if any) have already been defined\n+    (@type[$type:ident] @max[$max:expr] @descr[$descr:expr]) => (\n         #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord,\n-         RustcEncodable, RustcDecodable)]\n-        pub struct $name(u32);\n-\n-        impl $name {\n-            // HACK use for constants\n-            #[allow(unused)]\n-            const fn const_new(x: u32) -> Self {\n-                $name(x)\n-            }\n-        }\n+            RustcEncodable, RustcDecodable)]\n+        pub struct $type(u32);\n \n-        impl Idx for $name {\n+        impl Idx for $type {\n             fn new(value: usize) -> Self {\n-                assert!(value < (::std::u32::MAX) as usize);\n-                $name(value as u32)\n+                assert!(value < ($max) as usize);\n+                $type(value as u32)\n             }\n             fn index(self) -> usize {\n                 self.0 as usize\n             }\n         }\n \n-        impl ::std::fmt::Debug for $name {\n+        impl ::std::fmt::Debug for $type {\n             fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n-                write!(fmt, \"{}{}\", $debug_name, self.0)\n+                write!(fmt, \"{}{}\", $descr, self.0)\n             }\n         }\n-    )\n+    );\n+\n+    // Replace existing default for max (as final param)\n+    (@type[$type:ident] @max[$_max:expr] @descr[$descr:expr] MAX = $max:expr) => (\n+        newtype_index!(@type[$type] @max[$max] @descr[$descr]);\n+    );\n+\n+    // Replace existing default for max\n+    (@type[$type:ident] @max[$_max:expr] @descr[$descr:expr] MAX = $max:expr, $($idents:ident = $constants:expr),*) => (\n+        newtype_index!(@type[$type] @max[$max] @descr[$descr]);\n+    );\n+\n+    // Replace existing default for description (as final param)\n+    (@type[$type:ident] @max[$max:expr] @descr[$_descr:expr] DESCRIPTION = $descr:expr) => (\n+        newtype_index!(@type[$type] @max[$max] @descr[$descr]);\n+    );\n+\n+    // Replace existing default for description\n+    (@type[$type:ident] @max[$max:expr] @descr[$_descr:expr] DESCRIPTION = $descr:expr, $($idents:ident = $constants:expr),*) => (\n+        newtype_index!(@type[$type] @max[$max] @descr[$descr] $($idents = $constants),*);\n+    );\n+\n+    // Assign a user-defined constant (as final param)\n+    (@type[$type:ident] @max[$max:expr] @descr[$descr:expr] $name:ident = $constant:expr) => (\n+        pub const $name: $type = $type($constant);\n+        newtype_index!(@type[$type] @max[$max] @descr[$descr]);\n+    );\n+\n+    // Assign a user-defined constant\n+    (@type[$type:ident] @max[$max:expr] @descr[$descr:expr] $name:ident = $constant:expr, $($idents:ident = $constants:expr),*) => (\n+        pub const $name: $type = $type($constant);\n+        newtype_index!(@type[$type] @max[$max] @descr[$descr] $($idents = $constants),*);\n+    );\n+\n+    // ---- public rules ----\n+\n+    // Use default constants\n+    ($name:ident) => (\n+        newtype_index!(\n+            @type[$name]\n+            @max[::std::u32::MAX]\n+            @descr[unsafe {::std::intrinsics::type_name::<$name>() }]);\n+    );\n+\n+    // Define any constants\n+    ($name:ident, const { $($idents:ident = $constants:expr,)+ }) => (\n+        newtype_index!(\n+            @type[$name]\n+            @max[::std::u32::MAX]\n+            @descr[unsafe {::std::intrinsics::type_name::<$name>() }]\n+            $($idents = $constants),+);\n+    );\n+\n+    // Rewrite missing trailing comma in const to version with trailing comma\n+    ($name:ident, const { $($idents:ident = $constants:expr),+ }) => (\n+        newtype_index!($name, const { $($idents = $constants,)+ });\n+    );\n }\n \n #[derive(Clone, PartialEq, Eq)]"}]}