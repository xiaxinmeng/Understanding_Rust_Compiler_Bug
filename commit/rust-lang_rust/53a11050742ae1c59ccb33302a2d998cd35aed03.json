{"sha": "53a11050742ae1c59ccb33302a2d998cd35aed03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzYTExMDUwNzQyYWUxYzU5Y2NiMzMzMDJhMmQ5OThjZDM1YWVkMDM=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-31T20:28:32Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-02T23:36:44Z"}, "message": "On stable, suggest removing `#![feature]` for features that have been stabilized\n\nI don't know how to test this. I confirmed locally that this gives the\nappropriate help with `channel = \"beta\"`:\n\n```\nerror[E0554]: `#![feature]` may not be used on the beta release channel\n --> src/lib.rs:2:1\n  |\n2 | #![feature(min_const_generics)]\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove the attribute\n  |\n  = help: the feature `min_const_generics` has been stable since 1.51.0 and no longer requires an attribute to enable\n\nerror[E0554]: `#![feature]` may not be used on the beta release channel\n --> src/lib.rs:3:1\n  |\n3 | #![feature(min_const_generics, min_specialization)]\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = help: the feature `min_const_generics` has been stable since 1.51.0 and no longer requires an attribute to enable\n\nerror[E0554]: `#![feature]` may not be used on the beta release channel\n --> src/lib.rs:4:1\n  |\n4 | #![feature(box_patterns)]\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^\n```", "tree": {"sha": "9ae8afe31ab7a159e03930865d5388be94ac6ea7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ae8afe31ab7a159e03930865d5388be94ac6ea7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53a11050742ae1c59ccb33302a2d998cd35aed03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53a11050742ae1c59ccb33302a2d998cd35aed03", "html_url": "https://github.com/rust-lang/rust/commit/53a11050742ae1c59ccb33302a2d998cd35aed03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53a11050742ae1c59ccb33302a2d998cd35aed03/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bba40880c0750f880119b4517821ffe0a96f74d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bba40880c0750f880119b4517821ffe0a96f74d1", "html_url": "https://github.com/rust-lang/rust/commit/bba40880c0750f880119b4517821ffe0a96f74d1"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "3385b159b5c832e67b69acc8915918ddbb013c25", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/53a11050742ae1c59ccb33302a2d998cd35aed03/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53a11050742ae1c59ccb33302a2d998cd35aed03/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=53a11050742ae1c59ccb33302a2d998cd35aed03", "patch": "@@ -740,16 +740,46 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n }\n \n fn maybe_stage_features(sess: &Session, krate: &ast::Crate) {\n+    use rustc_errors::Applicability;\n+\n     if !sess.opts.unstable_features.is_nightly_build() {\n+        let lang_features = &sess.features_untracked().declared_lang_features;\n         for attr in krate.attrs.iter().filter(|attr| sess.check_name(attr, sym::feature)) {\n-            struct_span_err!(\n+            let mut err = struct_span_err!(\n                 sess.parse_sess.span_diagnostic,\n                 attr.span,\n                 E0554,\n                 \"`#![feature]` may not be used on the {} release channel\",\n                 option_env!(\"CFG_RELEASE_CHANNEL\").unwrap_or(\"(unknown)\")\n-            )\n-            .emit();\n+            );\n+            let mut all_stable = true;\n+            for ident in\n+                attr.meta_item_list().into_iter().flatten().map(|nested| nested.ident()).flatten()\n+            {\n+                let name = ident.name;\n+                let stable_since = lang_features\n+                    .iter()\n+                    .flat_map(|&(feature, _, since)| if feature == name { since } else { None })\n+                    .next();\n+                if let Some(since) = stable_since {\n+                    err.help(&format!(\n+                        \"the feature `{}` has been stable since {} and no longer requires \\\n+                                  an attribute to enable\",\n+                        name, since\n+                    ));\n+                } else {\n+                    all_stable = false;\n+                }\n+            }\n+            if all_stable {\n+                err.span_suggestion(\n+                    attr.span,\n+                    \"remove the attribute\",\n+                    String::new(),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+            err.emit();\n         }\n     }\n }"}]}