{"sha": "5242dce01db3fc42d5ec91eb166cce83194149cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNDJkY2UwMWRiM2ZjNDJkNWVjOTFlYjE2NmNjZTgzMTk0MTQ5Y2I=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-07-23T00:20:33Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-05T14:54:49Z"}, "message": "Add lint for unknown feature attributes", "tree": {"sha": "69d2cc1a4ba38482d38d43dab4a557ed83839697", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69d2cc1a4ba38482d38d43dab4a557ed83839697"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5242dce01db3fc42d5ec91eb166cce83194149cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5242dce01db3fc42d5ec91eb166cce83194149cb", "html_url": "https://github.com/rust-lang/rust/commit/5242dce01db3fc42d5ec91eb166cce83194149cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5242dce01db3fc42d5ec91eb166cce83194149cb/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a00ba4d71ea465c7e8074e1abb50970f0c767b28", "url": "https://api.github.com/repos/rust-lang/rust/commits/a00ba4d71ea465c7e8074e1abb50970f0c767b28", "html_url": "https://github.com/rust-lang/rust/commit/a00ba4d71ea465c7e8074e1abb50970f0c767b28"}], "stats": {"total": 296, "additions": 268, "deletions": 28}, "files": [{"sha": "f099325dfc12008238f92c16a732539f7465be8e", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=5242dce01db3fc42d5ec91eb166cce83194149cb", "patch": "@@ -615,6 +615,8 @@ define_dep_nodes!( <'tcx>\n     [input] CrateName(CrateNum),\n     [] ItemChildren(DefId),\n     [] ExternModStmtCnum(DefId),\n+    [input] GetLibFeatures,\n+    [] DefinedLibFeatures(CrateNum),\n     [input] GetLangItems,\n     [] DefinedLangItems(CrateNum),\n     [] MissingLangItems(CrateNum),"}, {"sha": "3b3be7578822bdd7b2e98141b45138f4c76aaa57", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=5242dce01db3fc42d5ec91eb166cce83194149cb", "patch": "@@ -2138,4 +2138,5 @@ register_diagnostics! {\n     E0708, // `async` non-`move` closures with arguments are not currently supported\n     E0709, // multiple different lifetimes used in arguments of `async fn`\n     E0710, // an unknown tool name found in scoped lint\n+    E0711, // a feature has been declared with conflicting stability attributes\n }"}, {"sha": "fe87053681ae8b6d735eda1243fdab00e9bae532", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=5242dce01db3fc42d5ec91eb166cce83194149cb", "patch": "@@ -1072,6 +1072,11 @@ impl_stable_hash_for!(struct hir::def::Export {\n     span\n });\n \n+impl_stable_hash_for!(struct ::middle::lib_features::LibFeatures {\n+    stable,\n+    unstable\n+});\n+\n impl<'a> HashStable<StableHashingContext<'a>> for ::middle::lang_items::LangItem {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           _: &mut StableHashingContext<'a>,"}, {"sha": "8ff5d33c91de1e1975f0716018cb2336794ee369", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=5242dce01db3fc42d5ec91eb166cce83194149cb", "patch": "@@ -141,6 +141,7 @@ pub mod middle {\n     pub mod exported_symbols;\n     pub mod free_region;\n     pub mod intrinsicck;\n+    pub mod lib_features;\n     pub mod lang_items;\n     pub mod liveness;\n     pub mod mem_categorization;"}, {"sha": "6536ab6ea73b3dbcbd3981b45130209bd5f5a302", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=5242dce01db3fc42d5ec91eb166cce83194149cb", "patch": "@@ -102,7 +102,13 @@ declare_lint! {\n declare_lint! {\n     pub UNUSED_FEATURES,\n     Warn,\n-    \"unused or unknown features found in crate-level #[feature] directives\"\n+    \"unused features found in crate-level #[feature] directives\"\n+}\n+\n+declare_lint! {\n+    pub UNKNOWN_FEATURES,\n+    Deny,\n+    \"unknown features found in crate-level #[feature] directives\"\n }\n \n declare_lint! {\n@@ -362,6 +368,7 @@ impl LintPass for HardwiredLints {\n             UNUSED_MACROS,\n             WARNINGS,\n             UNUSED_FEATURES,\n+            UNKNOWN_FEATURES,\n             STABLE_FEATURES,\n             UNKNOWN_CRATE_TYPES,\n             TRIVIAL_CASTS,"}, {"sha": "27bd69f04fd23e2c42d9b95d7df99cb195fc0256", "filename": "src/librustc/middle/lib_features.rs", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flib_features.rs?ref=5242dce01db3fc42d5ec91eb166cce83194149cb", "patch": "@@ -0,0 +1,153 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Detecting lib features (i.e. features that are not lang features).\n+//\n+// These are declared using stability attributes (e.g. `#[stable(..)]`\n+// and `#[unstable(..)]`), but are not declared in one single location\n+// (unlike lang features), which means we need to collect them instead.\n+\n+use ty::TyCtxt;\n+use syntax::symbol::Symbol;\n+use syntax::ast::{Attribute, MetaItem, MetaItemKind};\n+use syntax_pos::{Span, DUMMY_SP};\n+use hir;\n+use hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n+use errors::DiagnosticId;\n+\n+pub struct LibFeatures {\n+    // A map from feature to stabilisation version.\n+    pub stable: FxHashMap<Symbol, Symbol>,\n+    pub unstable: FxHashSet<Symbol>,\n+}\n+\n+impl LibFeatures {\n+    fn new() -> LibFeatures {\n+        LibFeatures {\n+            stable: FxHashMap(),\n+            unstable: FxHashSet(),\n+        }\n+    }\n+\n+    pub fn iter(&self) -> Vec<(Symbol, Option<Symbol>)> {\n+        self.stable.iter().map(|(f, s)| (*f, Some(*s)))\n+            .chain(self.unstable.iter().map(|f| (*f, None)))\n+            .collect()\n+    }\n+}\n+\n+pub struct LibFeatureCollector<'a, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    lib_features: LibFeatures,\n+}\n+\n+impl<'a, 'tcx> LibFeatureCollector<'a, 'tcx> {\n+    fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> LibFeatureCollector<'a, 'tcx> {\n+        LibFeatureCollector {\n+            tcx,\n+            lib_features: LibFeatures::new(),\n+        }\n+    }\n+\n+    fn extract(&self, attrs: &[Attribute]) -> Vec<(Symbol, Option<Symbol>, Span)> {\n+        let stab_attrs = vec![\"stable\", \"unstable\", \"rustc_const_unstable\"];\n+        let mut features = vec![];\n+\n+        for attr in attrs {\n+            // FIXME(varkor): the stability attribute might be behind a `#[cfg]` attribute.\n+\n+            // Find a stability attribute (i.e. `#[stable(..)]`, `#[unstable(..)]`,\n+            // `#[rustc_const_unstable(..)]`).\n+            if stab_attrs.iter().any(|stab_attr| attr.check_name(stab_attr)) {\n+                let meta_item = attr.meta();\n+                if let Some(MetaItem { node: MetaItemKind::List(ref metas), .. }) = meta_item {\n+                    let mut feature = None;\n+                    let mut since = None;\n+                    for meta in metas {\n+                        if let Some(mi) = meta.meta_item() {\n+                            // Find the `feature = \"..\"` meta-item.\n+                            match (&*mi.name().as_str(), mi.value_str()) {\n+                                (\"feature\", val) => feature = val,\n+                                (\"since\", val) => since = val,\n+                                _ => {}\n+                            }\n+                        }\n+                    }\n+                    if let Some(feature) = feature {\n+                        features.push((feature, since, attr.span));\n+                    }\n+                    // We need to iterate over the other attributes, because\n+                    // `rustc_const_unstable` is not mutually exclusive with\n+                    // the other stability attributes, so we can't just `break`\n+                    // here.\n+                }\n+            }\n+        }\n+\n+        features\n+    }\n+\n+    fn collect_feature(&mut self, feature: Symbol, since: Option<Symbol>, span: Span) {\n+        let already_in_stable = self.lib_features.stable.contains_key(&feature);\n+        let already_in_unstable = self.lib_features.unstable.contains(&feature);\n+\n+        match (since, already_in_stable, already_in_unstable) {\n+            (Some(since), _, false) => {\n+                self.lib_features.stable.insert(feature, since);\n+            }\n+            (None, false, _) => {\n+                self.lib_features.unstable.insert(feature);\n+            }\n+            (Some(_), _, true) | (None, true, _) => {\n+                let msg = format!(\n+                    \"feature `{}` is declared {}, but was previously declared {}\",\n+                    feature,\n+                    if since.is_some() { \"stable\"} else { \"unstable\" },\n+                    if since.is_none() { \"stable\"} else { \"unstable\" },\n+                );\n+                self.tcx.sess.struct_span_err_with_code(span, &msg,\n+                    DiagnosticId::Error(\"E0711\".into())).emit();\n+            }\n+        }\n+    }\n+\n+    fn collect_from_attrs(&mut self, attrs: &[Attribute]) {\n+        for (feature, stable, span) in self.extract(attrs) {\n+            self.collect_feature(feature, stable, span);\n+        }\n+    }\n+}\n+\n+impl<'a, 'v, 'tcx> ItemLikeVisitor<'v> for LibFeatureCollector<'a, 'tcx> {\n+    fn visit_item(&mut self, item: &hir::Item) {\n+        self.collect_from_attrs(&item.attrs);\n+    }\n+\n+    fn visit_trait_item(&mut self, trait_item: &hir::TraitItem) {\n+        self.collect_from_attrs(&trait_item.attrs);\n+    }\n+\n+    fn visit_impl_item(&mut self, impl_item: &hir::ImplItem) {\n+        self.collect_from_attrs(&impl_item.attrs);\n+    }\n+}\n+\n+pub fn collect<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> LibFeatures {\n+    let mut collector = LibFeatureCollector::new(tcx);\n+    for &cnum in tcx.crates().iter() {\n+        for &(feature, since) in tcx.defined_lib_features(cnum).iter() {\n+            collector.collect_feature(feature, since, DUMMY_SP);\n+        }\n+    }\n+    collector.collect_from_attrs(&tcx.hir.krate().attrs);\n+    tcx.hir.krate().visit_all_item_likes(&mut collector);\n+    collector.lib_features\n+}"}, {"sha": "75dbd70a982dcd0c4a59fbdaca656ab8aaf770a0", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 31, "deletions": 26, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=5242dce01db3fc42d5ec91eb166cce83194149cb", "patch": "@@ -813,37 +813,42 @@ pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n         krate.visit_all_item_likes(&mut missing.as_deep_visitor());\n     }\n \n-    let ref declared_lib_features = tcx.features().declared_lib_features;\n-    let mut remaining_lib_features: FxHashMap<Symbol, Span>\n-        = declared_lib_features.clone().into_iter().collect();\n-    remaining_lib_features.remove(&Symbol::intern(\"proc_macro\"));\n-\n     for &(ref stable_lang_feature, span) in &tcx.features().declared_stable_lang_features {\n-        let version = find_lang_feature_accepted_version(&stable_lang_feature.as_str())\n+        let since = find_lang_feature_accepted_version(&stable_lang_feature.as_str())\n             .expect(\"unexpectedly couldn't find version feature was stabilized\");\n         tcx.lint_node(lint::builtin::STABLE_FEATURES,\n                       ast::CRATE_NODE_ID,\n                       span,\n-                      &format_stable_since_msg(version));\n-    }\n-\n-    // FIXME(#44232) the `used_features` table no longer exists, so we don't\n-    //               lint about unknown or unused features. We should reenable\n-    //               this one day!\n-    //\n-    // let index = tcx.stability();\n-    // for (used_lib_feature, level) in &index.used_features {\n-    //     remaining_lib_features.remove(used_lib_feature);\n-    // }\n-    //\n-    // for &span in remaining_lib_features.values() {\n-    //     tcx.lint_node(lint::builtin::UNUSED_FEATURES,\n-    //                   ast::CRATE_NODE_ID,\n-    //                   span,\n-    //                   \"unused or unknown feature\");\n-    // }\n+                      &format_stable_since_msg(*stable_lang_feature, since));\n+    }\n+\n+    let ref declared_lib_features = tcx.features().declared_lib_features;\n+\n+    let mut remaining_lib_features = FxHashMap();\n+    for (feature, span) in declared_lib_features.clone().into_iter() {\n+        remaining_lib_features.insert(feature, span);\n+    }\n+    // FIXME(varkor): we don't properly handle lib features behind `cfg` attributes yet,\n+    // but it happens just to affect `libc`, so we're just going to hard-code it for now.\n+    remaining_lib_features.remove(&Symbol::intern(\"libc\"));\n+\n+    for (feature, stable) in tcx.lib_features().iter() {\n+        remaining_lib_features.remove(&feature);\n+    }\n+\n+    for (feature, span) in remaining_lib_features {\n+        tcx.lint_node(lint::builtin::UNKNOWN_FEATURES,\n+                      ast::CRATE_NODE_ID,\n+                      span,\n+                      &format!(\"unknown feature `{}`\", feature));\n+    }\n+\n+    // FIXME(#44232): the `used_features` table no longer exists, so we\n+    // don't lint about unused features. We should reenable this one day!\n }\n \n-fn format_stable_since_msg(version: &str) -> String {\n-    format!(\"this feature has been stable since {}. Attribute no longer needed\", version)\n+fn format_stable_since_msg(feature: Symbol, since: &str) -> String {\n+    // \"this feature has been stable since {}. Attribute no longer needed\"\n+    format!(\"the feature `{}` has been stable since {} and no longer requires \\\n+             an attribute to enable\", feature, since)\n }"}, {"sha": "21f482ecf39981c02a4360897db9f192fa14238e", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=5242dce01db3fc42d5ec91eb166cce83194149cb", "patch": "@@ -1192,6 +1192,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.sess.consider_optimizing(&cname, msg)\n     }\n \n+    pub fn lib_features(self) -> Lrc<middle::lib_features::LibFeatures> {\n+        self.get_lib_features(LOCAL_CRATE)\n+    }\n+\n     pub fn lang_items(self) -> Lrc<middle::lang_items::LanguageItems> {\n         self.get_lang_items(LOCAL_CRATE)\n     }\n@@ -2840,6 +2844,11 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         assert_eq!(id, LOCAL_CRATE);\n         tcx.crate_name\n     };\n+    providers.get_lib_features = |tcx, id| {\n+        assert_eq!(id, LOCAL_CRATE);\n+        // FIXME(#42293): see comment below.\n+        tcx.dep_graph.with_ignore(|| Lrc::new(middle::lib_features::collect(tcx)))\n+    };\n     providers.get_lang_items = |tcx, id| {\n         assert_eq!(id, LOCAL_CRATE);\n         // FIXME(#42293) Right now we insert a `with_ignore` node in the dep"}, {"sha": "ecf35c1b0da391b7a24558f277f4ea327c1b1d27", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=5242dce01db3fc42d5ec91eb166cce83194149cb", "patch": "@@ -626,6 +626,18 @@ impl<'tcx> QueryDescription<'tcx> for queries::crate_name<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::get_lib_features<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+        format!(\"calculating the lib features map\")\n+    }\n+}\n+\n+impl<'tcx> QueryDescription<'tcx> for queries::defined_lib_features<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+        format!(\"calculating the lib features defined in a crate\")\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::get_lang_items<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         \"calculating the lang items map\".to_string()"}, {"sha": "35080123d3e10ff20cee4331e24229b7e8e38666", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=5242dce01db3fc42d5ec91eb166cce83194149cb", "patch": "@@ -24,6 +24,7 @@ use middle::reachable::ReachableSet;\n use middle::region;\n use middle::resolve_lifetime::{ResolveLifetimes, Region, ObjectLifetimeDefault};\n use middle::stability::{self, DeprecationEntry};\n+use middle::lib_features::LibFeatures;\n use middle::lang_items::{LanguageItems, LangItem};\n use middle::exported_symbols::{SymbolExportLevel, ExportedSymbol};\n use mir::interpret::ConstEvalResult;\n@@ -492,6 +493,9 @@ define_queries! { <'tcx>\n         [] fn item_children: ItemChildren(DefId) -> Lrc<Vec<Export>>,\n         [] fn extern_mod_stmt_cnum: ExternModStmtCnum(DefId) -> Option<CrateNum>,\n \n+        [] fn get_lib_features: get_lib_features_node(CrateNum) -> Lrc<LibFeatures>,\n+        [] fn defined_lib_features: DefinedLibFeatures(CrateNum)\n+            -> Lrc<Vec<(Symbol, Option<Symbol>)>>,\n         [] fn get_lang_items: get_lang_items_node(CrateNum) -> Lrc<LanguageItems>,\n         [] fn defined_lang_items: DefinedLangItems(CrateNum) -> Lrc<Vec<(DefId, usize)>>,\n         [] fn missing_lang_items: MissingLangItems(CrateNum) -> Lrc<Vec<LangItem>>,\n@@ -800,6 +804,10 @@ fn link_args_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::LinkArgs\n }\n \n+fn get_lib_features_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n+    DepConstructor::GetLibFeatures\n+}\n+\n fn get_lang_items_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::GetLangItems\n }"}, {"sha": "f59e48cb35158070ca1dc4720935d12f519683a3", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=5242dce01db3fc42d5ec91eb166cce83194149cb", "patch": "@@ -1218,6 +1218,8 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::CrateName => { force!(crate_name, krate!()); }\n         DepKind::ItemChildren => { force!(item_children, def_id!()); }\n         DepKind::ExternModStmtCnum => { force!(extern_mod_stmt_cnum, def_id!()); }\n+        DepKind::GetLibFeatures => { force!(get_lib_features, LOCAL_CRATE); }\n+        DepKind::DefinedLibFeatures => { force!(defined_lib_features, krate!()); }\n         DepKind::GetLangItems => { force!(get_lang_items, LOCAL_CRATE); }\n         DepKind::DefinedLangItems => { force!(defined_lang_items, krate!()); }\n         DepKind::MissingLangItems => { force!(missing_lang_items, krate!()); }"}, {"sha": "396e5e869f30738c9e1acda49eb08ea215b78b8c", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=5242dce01db3fc42d5ec91eb166cce83194149cb", "patch": "@@ -188,6 +188,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     UNUSED_DOC_COMMENTS,\n                     UNUSED_EXTERN_CRATES,\n                     UNUSED_FEATURES,\n+                    UNKNOWN_FEATURES,\n                     UNUSED_LABELS,\n                     UNUSED_PARENS);\n \n@@ -342,7 +343,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     store.register_renamed(\"bare_trait_object\", \"bare_trait_objects\");\n     store.register_renamed(\"unstable_name_collision\", \"unstable_name_collisions\");\n     store.register_renamed(\"unused_doc_comment\", \"unused_doc_comments\");\n-    store.register_renamed(\"unknown_features\", \"unused_features\");\n     store.register_removed(\"unsigned_negation\", \"replaced by negate_unsigned feature gate\");\n     store.register_removed(\"negate_unsigned\", \"cast a signed value instead\");\n     store.register_removed(\"raw_pointer_derive\", \"using derive with raw pointers is ok\");"}, {"sha": "060dddd5343885d60119a5c7aec7d49720448633", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=5242dce01db3fc42d5ec91eb166cce83194149cb", "patch": "@@ -240,6 +240,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         cdata.each_child_of_item(def_id.index, |child| result.push(child), tcx.sess);\n         Lrc::new(result)\n     }\n+    defined_lib_features => { Lrc::new(cdata.get_lib_features()) }\n     defined_lang_items => { Lrc::new(cdata.get_lang_items()) }\n     missing_lang_items => { Lrc::new(cdata.get_missing_lang_items()) }\n "}, {"sha": "45a61ec33085d2345e1fde4d47ce1fc1b3688a4f", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=5242dce01db3fc42d5ec91eb166cce83194149cb", "patch": "@@ -645,6 +645,14 @@ impl<'a, 'tcx> CrateMetadata {\n         self.get_impl_data(id).trait_ref.map(|tr| tr.decode((self, tcx)))\n     }\n \n+    /// Iterates over all the stability attributes in the given crate.\n+    pub fn get_lib_features(&self) -> Vec<(ast::Name, Option<ast::Name>)> {\n+        self.root\n+            .lib_features\n+            .decode(self)\n+            .collect()\n+    }\n+\n     /// Iterates over the language items in the given crate.\n     pub fn get_lang_items(&self) -> Vec<(DefId, usize)> {\n         self.root"}, {"sha": "9bb5a849bc7c01859e673208ccdb582710223823", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=5242dce01db3fc42d5ec91eb166cce83194149cb", "patch": "@@ -394,6 +394,11 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             ());\n         let dep_bytes = self.position() - i;\n \n+        // Encode the lib features.\n+        i = self.position();\n+        let lib_features = self.tracked(IsolatedEncoder::encode_lib_features, ());\n+        let lib_feature_bytes = self.position() - i;\n+\n         // Encode the language items.\n         i = self.position();\n         let lang_items = self.tracked(IsolatedEncoder::encode_lang_items, ());\n@@ -513,6 +518,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n             crate_deps,\n             dylib_dependency_formats,\n+            lib_features,\n             lang_items,\n             lang_items_missing,\n             native_libraries,\n@@ -537,6 +543,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n             println!(\"metadata stats:\");\n             println!(\"             dep bytes: {}\", dep_bytes);\n+            println!(\"     lib feature bytes: {}\", lib_feature_bytes);\n             println!(\"       lang item bytes: {}\", lang_item_bytes);\n             println!(\"          native bytes: {}\", native_lib_bytes);\n             println!(\"         codemap bytes: {}\", codemap_bytes);\n@@ -1456,6 +1463,12 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         self.lazy_seq_ref(deps.iter().map(|&(_, ref dep)| dep))\n     }\n \n+    fn encode_lib_features(&mut self, _: ()) -> LazySeq<(ast::Name, Option<ast::Name>)> {\n+        let tcx = self.tcx;\n+        let lib_features = tcx.lib_features();\n+        self.lazy_seq(lib_features.iter())\n+    }\n+\n     fn encode_lang_items(&mut self, _: ()) -> LazySeq<(DefIndex, usize)> {\n         let tcx = self.tcx;\n         let lang_items = tcx.lang_items();"}, {"sha": "894c7cbf683dcae2d1ecddf009d09b9ec55ce23c", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=5242dce01db3fc42d5ec91eb166cce83194149cb", "patch": "@@ -198,6 +198,7 @@ pub struct CrateRoot {\n \n     pub crate_deps: LazySeq<CrateDep>,\n     pub dylib_dependency_formats: LazySeq<Option<LinkagePreference>>,\n+    pub lib_features: LazySeq<(Symbol, Option<Symbol>)>,\n     pub lang_items: LazySeq<(DefIndex, usize)>,\n     pub lang_items_missing: LazySeq<lang_items::LangItem>,\n     pub native_libraries: LazySeq<NativeLibrary>,"}, {"sha": "20be7f8361a2d276c88051b17a11573d2c52449e", "filename": "src/libsyntax/diagnostic_list.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibsyntax%2Fdiagnostic_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242dce01db3fc42d5ec91eb166cce83194149cb/src%2Flibsyntax%2Fdiagnostic_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic_list.rs?ref=5242dce01db3fc42d5ec91eb166cce83194149cb", "patch": "@@ -374,6 +374,18 @@ and likely to change in the future.\n \n \"##,\n \n+E0635: r##\"\n+The `#![feature]` attribute specified an unknown feature.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0635\n+#![feature(nonexistent_rust_feature)] // error: unknown feature\n+```\n+\n+\"##,\n+\n+\n }\n \n register_diagnostics! {"}]}