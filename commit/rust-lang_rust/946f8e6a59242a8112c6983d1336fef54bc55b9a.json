{"sha": "946f8e6a59242a8112c6983d1336fef54bc55b9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NmY4ZTZhNTkyNDJhODExMmM2OTgzZDEzMzZmZWY1NGJjNTViOWE=", "commit": {"author": {"name": "Cameron Hart", "email": "cameron.hart@gmail.com", "date": "2017-04-21T23:38:23Z"}, "committer": {"name": "Cameron Hart", "email": "cameron.hart@gmail.com", "date": "2017-04-21T23:38:23Z"}, "message": "Use primitive align for tagged enum fill.\n\nHopefully will fix assert on ARM where vector types are being used as\nthe fill type for enums containing repr aligned types greater than the\nlargest possible native type, thus don't match the Layout's alignment\nand triggers an assert.", "tree": {"sha": "f283763de951fd746c2f093af57c39a47dc7b5d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f283763de951fd746c2f093af57c39a47dc7b5d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/946f8e6a59242a8112c6983d1336fef54bc55b9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/946f8e6a59242a8112c6983d1336fef54bc55b9a", "html_url": "https://github.com/rust-lang/rust/commit/946f8e6a59242a8112c6983d1336fef54bc55b9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/946f8e6a59242a8112c6983d1336fef54bc55b9a/comments", "author": {"login": "bitshifter", "id": 135700, "node_id": "MDQ6VXNlcjEzNTcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/135700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitshifter", "html_url": "https://github.com/bitshifter", "followers_url": "https://api.github.com/users/bitshifter/followers", "following_url": "https://api.github.com/users/bitshifter/following{/other_user}", "gists_url": "https://api.github.com/users/bitshifter/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitshifter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitshifter/subscriptions", "organizations_url": "https://api.github.com/users/bitshifter/orgs", "repos_url": "https://api.github.com/users/bitshifter/repos", "events_url": "https://api.github.com/users/bitshifter/events{/privacy}", "received_events_url": "https://api.github.com/users/bitshifter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bitshifter", "id": 135700, "node_id": "MDQ6VXNlcjEzNTcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/135700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitshifter", "html_url": "https://github.com/bitshifter", "followers_url": "https://api.github.com/users/bitshifter/followers", "following_url": "https://api.github.com/users/bitshifter/following{/other_user}", "gists_url": "https://api.github.com/users/bitshifter/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitshifter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitshifter/subscriptions", "organizations_url": "https://api.github.com/users/bitshifter/orgs", "repos_url": "https://api.github.com/users/bitshifter/repos", "events_url": "https://api.github.com/users/bitshifter/events{/privacy}", "received_events_url": "https://api.github.com/users/bitshifter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c219cdfa11b0bb23f1dabbef9415ffb94f10386a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c219cdfa11b0bb23f1dabbef9415ffb94f10386a", "html_url": "https://github.com/rust-lang/rust/commit/c219cdfa11b0bb23f1dabbef9415ffb94f10386a"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "d1c1dd7436a5ba5fae0ea61492cb6ddf22cc4bb2", "filename": "src/librustc_trans/adt.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/946f8e6a59242a8112c6983d1336fef54bc55b9a/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/946f8e6a59242a8112c6983d1336fef54bc55b9a/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=946f8e6a59242a8112c6983d1336fef54bc55b9a", "patch": "@@ -185,7 +185,7 @@ fn generic_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 }\n             }\n         }\n-        layout::General { discr, size, align, .. } => {\n+        layout::General { discr, size, align, primitive_align, .. } => {\n             // We need a representation that has:\n             // * The alignment of the most-aligned field\n             // * The size of the largest variant (rounded up to that alignment)\n@@ -198,14 +198,15 @@ fn generic_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             // of the size.\n             let size = size.bytes();\n             let align = align.abi();\n+            let primitive_align = primitive_align.abi();\n             assert!(align <= std::u32::MAX as u64);\n             let discr_ty = Type::from_integer(cx, discr);\n             let discr_size = discr.size().bytes();\n             let padded_discr_size = roundup(discr_size, align as u32);\n             let variant_part_size = size-padded_discr_size;\n-            let variant_fill = union_fill(cx, variant_part_size, align);\n+            let variant_fill = union_fill(cx, variant_part_size, primitive_align);\n \n-            assert_eq!(machine::llalign_of_min(cx, variant_fill), align as u32);\n+            assert_eq!(machine::llalign_of_min(cx, variant_fill), primitive_align as u32);\n             assert_eq!(padded_discr_size % discr_size, 0); // Ensure discr_ty can fill pad evenly\n             let fields: Vec<Type> =\n                 [discr_ty,"}]}