{"sha": "2f6c39005c62d2fd35d031328f8a6c71875eb2ad", "node_id": "C_kwDOAAsO6NoAKDJmNmMzOTAwNWM2MmQyZmQzNWQwMzEzMjhmOGE2YzcxODc1ZWIyYWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-21T00:11:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-21T00:11:18Z"}, "message": "Auto merge of #12827 - Veykril:be-lazy, r=Veykril\n\ninternal: Construct fewer `AstIdMap`s in lowering", "tree": {"sha": "3b90ae8bae603399006f58126fd4c57ebe9af8bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b90ae8bae603399006f58126fd4c57ebe9af8bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f6c39005c62d2fd35d031328f8a6c71875eb2ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f6c39005c62d2fd35d031328f8a6c71875eb2ad", "html_url": "https://github.com/rust-lang/rust/commit/2f6c39005c62d2fd35d031328f8a6c71875eb2ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f6c39005c62d2fd35d031328f8a6c71875eb2ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa883cb64715fb89c0ce673ee8bf5a141893d5da", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa883cb64715fb89c0ce673ee8bf5a141893d5da", "html_url": "https://github.com/rust-lang/rust/commit/fa883cb64715fb89c0ce673ee8bf5a141893d5da"}, {"sha": "7bd2e305d667e53314601ef04435d59b25e65235", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd2e305d667e53314601ef04435d59b25e65235", "html_url": "https://github.com/rust-lang/rust/commit/7bd2e305d667e53314601ef04435d59b25e65235"}], "stats": {"total": 86, "additions": 37, "deletions": 49}, "files": [{"sha": "080a307b1f8a4540ef1dd3a6a217a0e0f4c3b017", "filename": "crates/hir-def/src/body.rs", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2f6c39005c62d2fd35d031328f8a6c71875eb2ad/crates%2Fhir-def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6c39005c62d2fd35d031328f8a6c71875eb2ad/crates%2Fhir-def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody.rs?ref=2f6c39005c62d2fd35d031328f8a6c71875eb2ad", "patch": "@@ -5,21 +5,18 @@ mod lower;\n mod tests;\n pub mod scope;\n \n-use std::{mem, ops::Index, sync::Arc};\n+use std::{ops::Index, sync::Arc};\n \n use base_db::CrateId;\n use cfg::{CfgExpr, CfgOptions};\n use drop_bomb::DropBomb;\n use either::Either;\n-use hir_expand::{\n-    ast_id_map::AstIdMap, hygiene::Hygiene, AstId, ExpandError, ExpandResult, HirFileId, InFile,\n-    MacroCallId,\n-};\n+use hir_expand::{hygiene::Hygiene, ExpandError, ExpandResult, HirFileId, InFile, MacroCallId};\n use la_arena::{Arena, ArenaMap};\n use limit::Limit;\n use profile::Count;\n use rustc_hash::FxHashMap;\n-use syntax::{ast, AstNode, AstPtr, SyntaxNodePtr};\n+use syntax::{ast, AstPtr, SyntaxNodePtr};\n \n use crate::{\n     attr::{Attrs, RawAttrs},\n@@ -50,7 +47,6 @@ pub struct Expander {\n     cfg_expander: CfgExpander,\n     def_map: Arc<DefMap>,\n     current_file_id: HirFileId,\n-    ast_id_map: Arc<AstIdMap>,\n     module: LocalModuleId,\n     recursion_limit: usize,\n }\n@@ -80,12 +76,10 @@ impl Expander {\n     pub fn new(db: &dyn DefDatabase, current_file_id: HirFileId, module: ModuleId) -> Expander {\n         let cfg_expander = CfgExpander::new(db, current_file_id, module.krate);\n         let def_map = module.def_map(db);\n-        let ast_id_map = db.ast_id_map(current_file_id);\n         Expander {\n             cfg_expander,\n             def_map,\n             current_file_id,\n-            ast_id_map,\n             module: module.local_id,\n             recursion_limit: 0,\n         }\n@@ -168,22 +162,17 @@ impl Expander {\n         tracing::debug!(\"macro expansion {:#?}\", node.syntax());\n \n         self.recursion_limit += 1;\n-        let mark = Mark {\n-            file_id: self.current_file_id,\n-            ast_id_map: mem::take(&mut self.ast_id_map),\n-            bomb: DropBomb::new(\"expansion mark dropped\"),\n-        };\n+        let mark =\n+            Mark { file_id: self.current_file_id, bomb: DropBomb::new(\"expansion mark dropped\") };\n         self.cfg_expander.hygiene = Hygiene::new(db.upcast(), file_id);\n         self.current_file_id = file_id;\n-        self.ast_id_map = db.ast_id_map(file_id);\n \n         ExpandResult { value: Some((mark, node)), err }\n     }\n \n     pub fn exit(&mut self, db: &dyn DefDatabase, mut mark: Mark) {\n         self.cfg_expander.hygiene = Hygiene::new(db.upcast(), mark.file_id);\n         self.current_file_id = mark.file_id;\n-        self.ast_id_map = mem::take(&mut mark.ast_id_map);\n         self.recursion_limit -= 1;\n         mark.bomb.defuse();\n     }\n@@ -213,11 +202,6 @@ impl Expander {\n         self.def_map.resolve_path(db, self.module, path, BuiltinShadowMode::Other).0.take_macros()\n     }\n \n-    fn ast_id<N: AstNode>(&self, item: &N) -> AstId<N> {\n-        let file_local_id = self.ast_id_map.ast_id(item);\n-        AstId::new(self.current_file_id, file_local_id)\n-    }\n-\n     fn recursion_limit(&self, db: &dyn DefDatabase) -> Limit {\n         let limit = db.crate_limits(self.cfg_expander.krate).recursion_limit as _;\n \n@@ -233,7 +217,6 @@ impl Expander {\n #[derive(Debug)]\n pub struct Mark {\n     file_id: HirFileId,\n-    ast_id_map: Arc<AstIdMap>,\n     bomb: DropBomb,\n }\n "}, {"sha": "c3f261122784e4b6021746469d6f380fb2aed0d9", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2f6c39005c62d2fd35d031328f8a6c71875eb2ad/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6c39005c62d2fd35d031328f8a6c71875eb2ad/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=2f6c39005c62d2fd35d031328f8a6c71875eb2ad", "patch": "@@ -5,12 +5,13 @@ use std::{mem, sync::Arc};\n \n use either::Either;\n use hir_expand::{\n-    ast_id_map::{AstIdMap, FileAstId},\n+    ast_id_map::AstIdMap,\n     hygiene::Hygiene,\n     name::{name, AsName, Name},\n-    ExpandError, HirFileId, InFile,\n+    AstId, ExpandError, HirFileId, InFile,\n };\n use la_arena::Arena;\n+use once_cell::unsync::OnceCell;\n use profile::Count;\n use rustc_hash::FxHashMap;\n use syntax::{\n@@ -41,38 +42,34 @@ use crate::{\n pub struct LowerCtx<'a> {\n     pub db: &'a dyn DefDatabase,\n     hygiene: Hygiene,\n-    file_id: Option<HirFileId>,\n-    source_ast_id_map: Option<Arc<AstIdMap>>,\n+    ast_id_map: Option<(HirFileId, OnceCell<Arc<AstIdMap>>)>,\n }\n \n impl<'a> LowerCtx<'a> {\n     pub fn new(db: &'a dyn DefDatabase, file_id: HirFileId) -> Self {\n         LowerCtx {\n             db,\n             hygiene: Hygiene::new(db.upcast(), file_id),\n-            file_id: Some(file_id),\n-            source_ast_id_map: Some(db.ast_id_map(file_id)),\n+            ast_id_map: Some((file_id, OnceCell::new())),\n         }\n     }\n \n     pub fn with_hygiene(db: &'a dyn DefDatabase, hygiene: &Hygiene) -> Self {\n-        LowerCtx { db, hygiene: hygiene.clone(), file_id: None, source_ast_id_map: None }\n+        LowerCtx { db, hygiene: hygiene.clone(), ast_id_map: None }\n     }\n \n     pub(crate) fn hygiene(&self) -> &Hygiene {\n         &self.hygiene\n     }\n \n-    pub(crate) fn file_id(&self) -> HirFileId {\n-        self.file_id.unwrap()\n-    }\n-\n     pub(crate) fn lower_path(&self, ast: ast::Path) -> Option<Path> {\n         Path::from_src(ast, self)\n     }\n \n-    pub(crate) fn ast_id<N: AstNode>(&self, item: &N) -> Option<FileAstId<N>> {\n-        self.source_ast_id_map.as_ref().map(|ast_id_map| ast_id_map.ast_id(item))\n+    pub(crate) fn ast_id<N: AstNode>(&self, db: &dyn DefDatabase, item: &N) -> Option<AstId<N>> {\n+        let &(file_id, ref ast_id_map) = self.ast_id_map.as_ref()?;\n+        let ast_id_map = ast_id_map.get_or_init(|| db.ast_id_map(file_id));\n+        Some(InFile::new(file_id, ast_id_map.ast_id(item)))\n     }\n }\n \n@@ -85,6 +82,7 @@ pub(super) fn lower(\n     ExprCollector {\n         db,\n         source_map: BodySourceMap::default(),\n+        ast_id_map: db.ast_id_map(expander.current_file_id),\n         body: Body {\n             exprs: Arena::default(),\n             pats: Arena::default(),\n@@ -105,6 +103,7 @@ pub(super) fn lower(\n struct ExprCollector<'a> {\n     db: &'a dyn DefDatabase,\n     expander: Expander,\n+    ast_id_map: Arc<AstIdMap>,\n     body: Body,\n     source_map: BodySourceMap,\n     // a poor-mans union-find?\n@@ -586,8 +585,13 @@ impl ExprCollector<'_> {\n         match res.value {\n             Some((mark, expansion)) => {\n                 self.source_map.expansions.insert(macro_call_ptr, self.expander.current_file_id);\n+                let prev_ast_id_map = mem::replace(\n+                    &mut self.ast_id_map,\n+                    self.db.ast_id_map(self.expander.current_file_id),\n+                );\n \n                 let id = collector(self, Some(expansion));\n+                self.ast_id_map = prev_ast_id_map;\n                 self.expander.exit(self.db, mark);\n                 id\n             }\n@@ -675,7 +679,8 @@ impl ExprCollector<'_> {\n     }\n \n     fn collect_block(&mut self, block: ast::BlockExpr) -> ExprId {\n-        let ast_id = self.expander.ast_id(&block);\n+        let file_local_id = self.ast_id_map.ast_id(&block);\n+        let ast_id = AstId::new(self.expander.current_file_id, file_local_id);\n         let block_loc =\n             BlockLoc { ast_id, module: self.expander.def_map.module_id(self.expander.module) };\n         let block_id = self.db.intern_block(block_loc);"}, {"sha": "ca15e7c4100ad37232373d55464568f722bba341", "filename": "crates/hir-def/src/data.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2f6c39005c62d2fd35d031328f8a6c71875eb2ad/crates%2Fhir-def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6c39005c62d2fd35d031328f8a6c71875eb2ad/crates%2Fhir-def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdata.rs?ref=2f6c39005c62d2fd35d031328f8a6c71875eb2ad", "patch": "@@ -550,14 +550,17 @@ impl<'a> AssocItemCollector<'a> {\n                 AssocItem::MacroCall(call) => {\n                     let call = &item_tree[call];\n                     let ast_id_map = self.db.ast_id_map(self.expander.current_file_id());\n-                    let root = self.db.parse_or_expand(self.expander.current_file_id()).unwrap();\n-                    let call = ast_id_map.get(call.ast_id).to_node(&root);\n-                    let _cx =\n-                        stdx::panic_context::enter(format!(\"collect_items MacroCall: {}\", call));\n-                    let res = self.expander.enter_expand(self.db, call);\n-\n-                    if let Ok(ExpandResult { value: Some((mark, mac)), .. }) = res {\n-                        self.collect_macro_items(mark, mac);\n+                    if let Some(root) = self.db.parse_or_expand(self.expander.current_file_id()) {\n+                        let call = ast_id_map.get(call.ast_id).to_node(&root);\n+                        let _cx = stdx::panic_context::enter(format!(\n+                            \"collect_items MacroCall: {}\",\n+                            call\n+                        ));\n+                        let res = self.expander.enter_expand(self.db, call);\n+\n+                        if let Ok(ExpandResult { value: Some((mark, mac)), .. }) = res {\n+                            self.collect_macro_items(mark, mac);\n+                        }\n                     }\n                 }\n             }"}, {"sha": "9248059627d2af2b098d23b588911d1bf473817d", "filename": "crates/hir-def/src/type_ref.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f6c39005c62d2fd35d031328f8a6c71875eb2ad/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6c39005c62d2fd35d031328f8a6c71875eb2ad/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs?ref=2f6c39005c62d2fd35d031328f8a6c71875eb2ad", "patch": "@@ -5,7 +5,7 @@ use std::fmt::Write;\n \n use hir_expand::{\n     name::{AsName, Name},\n-    AstId, InFile,\n+    AstId,\n };\n use syntax::ast::{self, HasName};\n \n@@ -236,10 +236,7 @@ impl TypeRef {\n                 TypeRef::DynTrait(type_bounds_from_ast(ctx, inner.type_bound_list()))\n             }\n             ast::Type::MacroType(mt) => match mt.macro_call() {\n-                Some(mc) => ctx\n-                    .ast_id(&mc)\n-                    .map(|mc| TypeRef::Macro(InFile::new(ctx.file_id(), mc)))\n-                    .unwrap_or(TypeRef::Error),\n+                Some(mc) => ctx.ast_id(ctx.db, &mc).map(TypeRef::Macro).unwrap_or(TypeRef::Error),\n                 None => TypeRef::Error,\n             },\n         }"}]}