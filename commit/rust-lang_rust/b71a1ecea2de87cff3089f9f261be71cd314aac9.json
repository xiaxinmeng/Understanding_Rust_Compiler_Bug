{"sha": "b71a1ecea2de87cff3089f9f261be71cd314aac9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MWExZWNlYTJkZTg3Y2ZmMzA4OWY5ZjI2MWJlNzFjZDMxNGFhYzk=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-05-03T17:29:08Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-05-20T18:49:21Z"}, "message": "added and rewrote text for 'do' and 'for' loops", "tree": {"sha": "51ba2c1f043882643de9ca2957d9efab24335a91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51ba2c1f043882643de9ca2957d9efab24335a91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b71a1ecea2de87cff3089f9f261be71cd314aac9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b71a1ecea2de87cff3089f9f261be71cd314aac9", "html_url": "https://github.com/rust-lang/rust/commit/b71a1ecea2de87cff3089f9f261be71cd314aac9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b71a1ecea2de87cff3089f9f261be71cd314aac9/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "999f6926459294136b623b101c8a033ec8ec29db", "url": "https://api.github.com/repos/rust-lang/rust/commits/999f6926459294136b623b101c8a033ec8ec29db", "html_url": "https://github.com/rust-lang/rust/commit/999f6926459294136b623b101c8a033ec8ec29db"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "a115f41ae864b4b71fb79e0967cc286789eeab62", "filename": "doc/rust.md", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b71a1ecea2de87cff3089f9f261be71cd314aac9/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/b71a1ecea2de87cff3089f9f261be71cd314aac9/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=b71a1ecea2de87cff3089f9f261be71cd314aac9", "patch": "@@ -2250,6 +2250,14 @@ do_expr : \"do\" expr [ '|' ident_list '|' ] ? '{' block '}' ;\n A _do expression_ provides a more-familiar block-syntax for a [lambda expression](#lambda-expressions),\n including a special translation of [return expressions](#return-expressions) inside the supplied block.\n \n+Any occurrence of a [return expression](#return-expressions)\n+inside this `block` expression is rewritten\n+as a reference to an (anonymous) flag set in the caller's environment,\n+which is checked on return from the `expr` and, if set,\n+causes a corresponding return from the caller.\n+In this way, the meaning of `return` statements in language built-in control blocks is preserved,\n+if they are rewritten using lambda functions and `do` expressions as abstractions.\n+\n The optional `ident_list` and `block` provided in a `do` expression are parsed as though they constitute a lambda expression;\n if the `ident_list` is missing, an empty `ident_list` is implied.\n \n@@ -2296,19 +2304,15 @@ A _for expression_ is similar to a [`do` expression](#do-expressions),\n in that it provides a special block-form of lambda expression,\n suited to passing the `block` function to a higher-order function implementing a loop.\n \n-Like a `do` expression, a `return` expression inside a `for` expresison is rewritten,\n-to access a local flag that causes an early return in the caller.\n-\n-Additionally, any occurrence of a [return expression](#return-expressions)\n-inside the `block` of a `for` expression is rewritten\n-as a reference to an (anonymous) flag set in the caller's environment,\n-which is checked on return from the `expr` and, if set,\n-causes a corresponding return from the caller.\n-In this way, the meaning of `return` statements in language built-in control blocks is preserved,\n-if they are rewritten using lambda functions and `do` expressions as abstractions.\n+In contrast to a `do` expression, a `for` expression is designed to work\n+with methods such as `each` and `times`, that require the body block to\n+return a boolean. The `for` expression accommodates this by implicitly\n+returning `true` at the end of each block, unless a `break` expression\n+is evaluated.\n \n-Like `return` expressions, any [`break`](#break-expressions) and [`loop`](#loop-expressions) expressions\n-are rewritten inside `for` expressions, with a combination of local flag variables,\n+In addition, [`break`](#break-expressions) and [`loop`](#loop-expressions) expressions\n+are rewritten inside `for` expressions in the same way that `return` expressions are,\n+with a combination of local flag variables,\n and early boolean-valued returns from the `block` function,\n such that the meaning of `break` and `loop` is preserved in a primitive loop\n when rewritten as a `for` loop controlled by a higher order function."}]}