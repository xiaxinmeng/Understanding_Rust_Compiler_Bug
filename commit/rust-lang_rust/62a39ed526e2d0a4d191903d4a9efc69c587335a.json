{"sha": "62a39ed526e2d0a4d191903d4a9efc69c587335a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYTM5ZWQ1MjZlMmQwYTRkMTkxOTAzZDRhOWVmYzY5YzU4NzMzNWE=", "commit": {"author": {"name": "William Bain", "email": "bain.william.a@gmail.com", "date": "2020-12-29T22:34:23Z"}, "committer": {"name": "William Bain", "email": "bain.william.a@gmail.com", "date": "2021-01-11T00:48:11Z"}, "message": "Extract parent def handling for infer failure err", "tree": {"sha": "7d840be5a99f50197a12c93351a1a9290b66f579", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d840be5a99f50197a12c93351a1a9290b66f579"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62a39ed526e2d0a4d191903d4a9efc69c587335a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62a39ed526e2d0a4d191903d4a9efc69c587335a", "html_url": "https://github.com/rust-lang/rust/commit/62a39ed526e2d0a4d191903d4a9efc69c587335a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62a39ed526e2d0a4d191903d4a9efc69c587335a/comments", "author": {"login": "wabain", "id": 7651435, "node_id": "MDQ6VXNlcjc2NTE0MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7651435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wabain", "html_url": "https://github.com/wabain", "followers_url": "https://api.github.com/users/wabain/followers", "following_url": "https://api.github.com/users/wabain/following{/other_user}", "gists_url": "https://api.github.com/users/wabain/gists{/gist_id}", "starred_url": "https://api.github.com/users/wabain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wabain/subscriptions", "organizations_url": "https://api.github.com/users/wabain/orgs", "repos_url": "https://api.github.com/users/wabain/repos", "events_url": "https://api.github.com/users/wabain/events{/privacy}", "received_events_url": "https://api.github.com/users/wabain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wabain", "id": 7651435, "node_id": "MDQ6VXNlcjc2NTE0MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7651435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wabain", "html_url": "https://github.com/wabain", "followers_url": "https://api.github.com/users/wabain/followers", "following_url": "https://api.github.com/users/wabain/following{/other_user}", "gists_url": "https://api.github.com/users/wabain/gists{/gist_id}", "starred_url": "https://api.github.com/users/wabain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wabain/subscriptions", "organizations_url": "https://api.github.com/users/wabain/orgs", "repos_url": "https://api.github.com/users/wabain/repos", "events_url": "https://api.github.com/users/wabain/events{/privacy}", "received_events_url": "https://api.github.com/users/wabain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9d9776fea734dfb76a315205ff6d5c6957c5cc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9d9776fea734dfb76a315205ff6d5c6957c5cc2", "html_url": "https://github.com/rust-lang/rust/commit/b9d9776fea734dfb76a315205ff6d5c6957c5cc2"}], "stats": {"total": 55, "additions": 20, "deletions": 35}, "files": [{"sha": "159af485ba4571c8ec5a687cc68af20e3748fdf6", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 20, "deletions": 35, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/62a39ed526e2d0a4d191903d4a9efc69c587335a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a39ed526e2d0a4d191903d4a9efc69c587335a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=62a39ed526e2d0a4d191903d4a9efc69c587335a", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::infer::unify_key::ConstVariableOriginKind;\n use rustc_middle::ty::print::Print;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n-use rustc_middle::ty::{self, DefIdTree, InferConst, Ty};\n+use rustc_middle::ty::{self, DefIdTree, InferConst, Ty, TyCtxt};\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::kw;\n use rustc_span::Span;\n@@ -286,6 +286,7 @@ pub struct InferenceDiagnosticsData {\n     pub parent: Option<InferenceDiagnosticsParentData>,\n }\n \n+/// Data on the parent definition where a generic argument was declared.\n pub struct InferenceDiagnosticsParentData {\n     pub prefix: &'static str,\n     pub name: String,\n@@ -320,6 +321,20 @@ impl InferenceDiagnosticsData {\n     }\n }\n \n+impl InferenceDiagnosticsParentData {\n+    fn for_def_id(tcx: TyCtxt<'_>, def_id: DefId) -> Option<InferenceDiagnosticsParentData> {\n+        let parent_def_id = tcx.parent(def_id)?;\n+\n+        let parent_name =\n+            tcx.def_key(parent_def_id).disambiguated_data.data.get_opt_name()?.to_string();\n+\n+        Some(InferenceDiagnosticsParentData {\n+            prefix: tcx.def_kind(parent_def_id).descr(parent_def_id),\n+            name: parent_name,\n+        })\n+    }\n+}\n+\n impl UnderspecifiedArgKind {\n     fn prefix_string(&self) -> Cow<'static, str> {\n         match self {\n@@ -347,31 +362,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     if let TypeVariableOriginKind::TypeParameterDefinition(name, def_id) =\n                         var_origin.kind\n                     {\n-                        let parent_data = def_id\n-                            .and_then(|def_id| self.tcx.parent(def_id))\n-                            .and_then(|parent_def_id| {\n-                                let parent_name = self\n-                                    .tcx\n-                                    .def_key(parent_def_id)\n-                                    .disambiguated_data\n-                                    .data\n-                                    .get_opt_name()?\n-                                    .to_string();\n-\n-                                Some(InferenceDiagnosticsParentData {\n-                                    prefix: self.tcx.def_kind(parent_def_id).descr(parent_def_id),\n-                                    name: parent_name,\n-                                })\n-                            });\n-\n                         if name != kw::SelfUpper {\n                             return InferenceDiagnosticsData {\n                                 name: name.to_string(),\n                                 span: Some(var_origin.span),\n                                 kind: UnderspecifiedArgKind::Type {\n                                     prefix: \"type parameter\".into(),\n                                 },\n-                                parent: parent_data,\n+                                parent: def_id.and_then(|def_id| {\n+                                    InferenceDiagnosticsParentData::for_def_id(self.tcx, def_id)\n+                                }),\n                             };\n                         }\n                     }\n@@ -397,26 +397,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     if let ConstVariableOriginKind::ConstParameterDefinition(name, def_id) =\n                         origin.kind\n                     {\n-                        let parent_data = self.tcx.parent(def_id).and_then(|parent_def_id| {\n-                            let parent_name = self\n-                                .tcx\n-                                .def_key(parent_def_id)\n-                                .disambiguated_data\n-                                .data\n-                                .get_opt_name()?\n-                                .to_string();\n-\n-                            Some(InferenceDiagnosticsParentData {\n-                                prefix: self.tcx.def_kind(parent_def_id).descr(parent_def_id),\n-                                name: parent_name,\n-                            })\n-                        });\n-\n                         return InferenceDiagnosticsData {\n                             name: name.to_string(),\n                             span: Some(origin.span),\n                             kind: UnderspecifiedArgKind::Const { is_parameter: true },\n-                            parent: parent_data,\n+                            parent: InferenceDiagnosticsParentData::for_def_id(self.tcx, def_id),\n                         };\n                     }\n "}]}