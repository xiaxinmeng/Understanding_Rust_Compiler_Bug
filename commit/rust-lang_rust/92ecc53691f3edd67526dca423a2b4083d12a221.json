{"sha": "92ecc53691f3edd67526dca423a2b4083d12a221", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyZWNjNTM2OTFmM2VkZDY3NTI2ZGNhNDIzYTJiNDA4M2QxMmEyMjE=", "commit": {"author": {"name": "Robert Sedlacek", "email": "rs@474.at", "date": "2020-07-01T13:49:06Z"}, "committer": {"name": "Robert Sedlacek", "email": "rs@474.at", "date": "2020-07-03T16:12:29Z"}, "message": "Catching up with rustc changes", "tree": {"sha": "e53a3576564886d89e4a41bbe045b7e39225768c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e53a3576564886d89e4a41bbe045b7e39225768c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92ecc53691f3edd67526dca423a2b4083d12a221", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92ecc53691f3edd67526dca423a2b4083d12a221", "html_url": "https://github.com/rust-lang/rust/commit/92ecc53691f3edd67526dca423a2b4083d12a221", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92ecc53691f3edd67526dca423a2b4083d12a221/comments", "author": {"login": "phaylon", "id": 41822, "node_id": "MDQ6VXNlcjQxODIy", "avatar_url": "https://avatars.githubusercontent.com/u/41822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phaylon", "html_url": "https://github.com/phaylon", "followers_url": "https://api.github.com/users/phaylon/followers", "following_url": "https://api.github.com/users/phaylon/following{/other_user}", "gists_url": "https://api.github.com/users/phaylon/gists{/gist_id}", "starred_url": "https://api.github.com/users/phaylon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phaylon/subscriptions", "organizations_url": "https://api.github.com/users/phaylon/orgs", "repos_url": "https://api.github.com/users/phaylon/repos", "events_url": "https://api.github.com/users/phaylon/events{/privacy}", "received_events_url": "https://api.github.com/users/phaylon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phaylon", "id": 41822, "node_id": "MDQ6VXNlcjQxODIy", "avatar_url": "https://avatars.githubusercontent.com/u/41822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phaylon", "html_url": "https://github.com/phaylon", "followers_url": "https://api.github.com/users/phaylon/followers", "following_url": "https://api.github.com/users/phaylon/following{/other_user}", "gists_url": "https://api.github.com/users/phaylon/gists{/gist_id}", "starred_url": "https://api.github.com/users/phaylon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phaylon/subscriptions", "organizations_url": "https://api.github.com/users/phaylon/orgs", "repos_url": "https://api.github.com/users/phaylon/repos", "events_url": "https://api.github.com/users/phaylon/events{/privacy}", "received_events_url": "https://api.github.com/users/phaylon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6447507ab150ebd1787ca6af385db49dfdf45978", "url": "https://api.github.com/repos/rust-lang/rust/commits/6447507ab150ebd1787ca6af385db49dfdf45978", "html_url": "https://github.com/rust-lang/rust/commit/6447507ab150ebd1787ca6af385db49dfdf45978"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "fcc9b16068fb91e70f0fef6831200f5c2f4e0ec9", "filename": "clippy_lints/src/pattern_type_mismatch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/92ecc53691f3edd67526dca423a2b4083d12a221/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92ecc53691f3edd67526dca423a2b4083d12a221/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs?ref=92ecc53691f3edd67526dca423a2b4083d12a221", "patch": "@@ -48,7 +48,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PatternTypeMismatch {\n     fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt<'_>) {\n         if let StmtKind::Local(ref local) = stmt.kind {\n             if let Some(init) = &local.init {\n-                if let Some(init_ty) = cx.tables.node_type_opt(init.hir_id) {\n+                if let Some(init_ty) = cx.tables().node_type_opt(init.hir_id) {\n                     let pat = &local.pat;\n                     if in_external_macro(cx.sess(), pat.span) {\n                         return;\n@@ -67,7 +67,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PatternTypeMismatch {\n         if let ExprKind::Match(ref expr, arms, source) = expr.kind {\n             match source {\n                 MatchSource::Normal | MatchSource::IfLetDesugar { .. } | MatchSource::WhileLetDesugar => {\n-                    if let Some(expr_ty) = cx.tables.node_type_opt(expr.hir_id) {\n+                    if let Some(expr_ty) = cx.tables().node_type_opt(expr.hir_id) {\n                         'pattern_checks: for arm in arms {\n                             let pat = &arm.pat;\n                             if in_external_macro(cx.sess(), pat.span) {\n@@ -93,7 +93,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PatternTypeMismatch {\n         _: Span,\n         hir_id: HirId,\n     ) {\n-        if let Some(fn_sig) = cx.tables.liberated_fn_sigs().get(hir_id) {\n+        if let Some(fn_sig) = cx.tables().liberated_fn_sigs().get(hir_id) {\n             for (param, ty) in body.params.iter().zip(fn_sig.inputs().iter()) {\n                 apply_lint(cx, &param.pat, ty, DerefPossible::Impossible);\n             }"}]}