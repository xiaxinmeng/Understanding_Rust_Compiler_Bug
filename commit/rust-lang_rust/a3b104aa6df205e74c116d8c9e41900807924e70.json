{"sha": "a3b104aa6df205e74c116d8c9e41900807924e70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYjEwNGFhNmRmMjA1ZTc0YzExNmQ4YzllNDE5MDA4MDc5MjRlNzA=", "commit": {"author": {"name": "Jonas Platte", "email": "jplatte+git@posteo.de", "date": "2020-02-11T21:33:11Z"}, "committer": {"name": "Jonas Platte", "email": "jplatte+git@posteo.de", "date": "2020-02-11T21:33:11Z"}, "message": "Implement slice pattern AST > HIR lowering", "tree": {"sha": "ac3cb2695fba41813b70cadee3e624f71dfa2fd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac3cb2695fba41813b70cadee3e624f71dfa2fd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3b104aa6df205e74c116d8c9e41900807924e70", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIwEABYIADQWIQSDGkJBzFPeoiYaT9p9Jh13HZFTeAUCXkMdlxYcanBsYXR0ZStn\naXRAcG9zdGVvLmRlAAoJEH0mHXcdkVN4MngBAMHejASrevu2Qq9FWoIsJ2tqk3HZ\nz9vsGXHVxfFcUBazAP4/0hHRx6aoYiqtUupDCdIdCqjlB5PIwWsrrhN8BMT4BQ==\n=lyxq\n-----END PGP SIGNATURE-----", "payload": "tree ac3cb2695fba41813b70cadee3e624f71dfa2fd3\nparent 3e1d97790be166f8735607c552a94a28ab9b09b8\nauthor Jonas Platte <jplatte+git@posteo.de> 1581456791 +0100\ncommitter Jonas Platte <jplatte+git@posteo.de> 1581456791 +0100\n\nImplement slice pattern AST > HIR lowering\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3b104aa6df205e74c116d8c9e41900807924e70", "html_url": "https://github.com/rust-lang/rust/commit/a3b104aa6df205e74c116d8c9e41900807924e70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3b104aa6df205e74c116d8c9e41900807924e70/comments", "author": {"login": "jplatte", "id": 951129, "node_id": "MDQ6VXNlcjk1MTEyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/951129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jplatte", "html_url": "https://github.com/jplatte", "followers_url": "https://api.github.com/users/jplatte/followers", "following_url": "https://api.github.com/users/jplatte/following{/other_user}", "gists_url": "https://api.github.com/users/jplatte/gists{/gist_id}", "starred_url": "https://api.github.com/users/jplatte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jplatte/subscriptions", "organizations_url": "https://api.github.com/users/jplatte/orgs", "repos_url": "https://api.github.com/users/jplatte/repos", "events_url": "https://api.github.com/users/jplatte/events{/privacy}", "received_events_url": "https://api.github.com/users/jplatte/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jplatte", "id": 951129, "node_id": "MDQ6VXNlcjk1MTEyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/951129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jplatte", "html_url": "https://github.com/jplatte", "followers_url": "https://api.github.com/users/jplatte/followers", "following_url": "https://api.github.com/users/jplatte/following{/other_user}", "gists_url": "https://api.github.com/users/jplatte/gists{/gist_id}", "starred_url": "https://api.github.com/users/jplatte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jplatte/subscriptions", "organizations_url": "https://api.github.com/users/jplatte/orgs", "repos_url": "https://api.github.com/users/jplatte/repos", "events_url": "https://api.github.com/users/jplatte/events{/privacy}", "received_events_url": "https://api.github.com/users/jplatte/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e1d97790be166f8735607c552a94a28ab9b09b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e1d97790be166f8735607c552a94a28ab9b09b8", "html_url": "https://github.com/rust-lang/rust/commit/3e1d97790be166f8735607c552a94a28ab9b09b8"}], "stats": {"total": 77, "additions": 64, "deletions": 13}, "files": [{"sha": "478c706bed18455208593f4c770dff343e82480f", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3b104aa6df205e74c116d8c9e41900807924e70/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a3b104aa6df205e74c116d8c9e41900807924e70/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a3b104aa6df205e74c116d8c9e41900807924e70", "patch": "@@ -1070,6 +1070,7 @@ dependencies = [\n  \"drop_bomb\",\n  \"either\",\n  \"insta\",\n+ \"itertools\",\n  \"log\",\n  \"once_cell\",\n  \"ra_arena\","}, {"sha": "6b9be9948c602a24b0903eeffe026735adff8b57", "filename": "crates/ra_hir_def/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3b104aa6df205e74c116d8c9e41900807924e70/crates%2Fra_hir_def%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a3b104aa6df205e74c116d8c9e41900807924e70/crates%2Fra_hir_def%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2FCargo.toml?ref=a3b104aa6df205e74c116d8c9e41900807924e70", "patch": "@@ -14,6 +14,7 @@ rustc-hash = \"1.0\"\n either = \"1.5\"\n anymap = \"0.12\"\n drop_bomb = \"0.1.4\"\n+itertools = \"0.8.2\"\n \n ra_arena = { path = \"../ra_arena\" }\n ra_db = { path = \"../ra_db\" }"}, {"sha": "5c779521b07217b20562d856f6acfe88aa85b855", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a3b104aa6df205e74c116d8c9e41900807924e70/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b104aa6df205e74c116d8c9e41900807924e70/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=a3b104aa6df205e74c116d8c9e41900807924e70", "patch": "@@ -8,7 +8,7 @@ use ra_arena::Arena;\n use ra_syntax::{\n     ast::{\n         self, ArgListOwner, ArrayExprKind, LiteralKind, LoopBodyOwner, ModuleItemOwner, NameOwner,\n-        TypeAscriptionOwner,\n+        SlicePatComponents, TypeAscriptionOwner,\n     },\n     AstNode, AstPtr,\n };\n@@ -591,7 +591,7 @@ where\n                 let args = p.args().map(|p| self.collect_pat(p)).collect();\n                 Pat::Tuple(args)\n             }\n-            ast::Pat::PlaceholderPat(_) => Pat::Wild,\n+            ast::Pat::PlaceholderPat(_) | ast::Pat::DotDotPat(_) => Pat::Wild,\n             ast::Pat::RecordPat(p) => {\n                 let path = p.path().and_then(|path| self.expander.parse_path(path));\n                 let record_field_pat_list =\n@@ -616,12 +616,20 @@ where\n \n                 Pat::Record { path, args: fields }\n             }\n+            ast::Pat::SlicePat(p) => {\n+                let SlicePatComponents { prefix, slice, suffix } = p.components();\n+\n+                Pat::Slice {\n+                    prefix: prefix.into_iter().map(|p| self.collect_pat(p)).collect(),\n+                    slice: slice.map(|p| self.collect_pat(p)),\n+                    suffix: suffix.into_iter().map(|p| self.collect_pat(p)).collect(),\n+                }\n+            }\n \n             // FIXME: implement\n-            ast::Pat::DotDotPat(_) => Pat::Missing,\n             ast::Pat::BoxPat(_) => Pat::Missing,\n             ast::Pat::LiteralPat(_) => Pat::Missing,\n-            ast::Pat::SlicePat(_) | ast::Pat::RangePat(_) => Pat::Missing,\n+            ast::Pat::RangePat(_) => Pat::Missing,\n         };\n         let ptr = AstPtr::new(&pat);\n         self.alloc_pat(pattern, Either::Left(ptr))"}, {"sha": "035824403277165568954b207c816c3b7a062ded", "filename": "crates/ra_hir_def/src/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3b104aa6df205e74c116d8c9e41900807924e70/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b104aa6df205e74c116d8c9e41900807924e70/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs?ref=a3b104aa6df205e74c116d8c9e41900807924e70", "patch": "@@ -393,7 +393,7 @@ pub enum Pat {\n     },\n     Slice {\n         prefix: Vec<PatId>,\n-        rest: Option<PatId>,\n+        slice: Option<PatId>,\n         suffix: Vec<PatId>,\n     },\n     Path(Path),\n@@ -424,8 +424,8 @@ impl Pat {\n                 args.iter().copied().for_each(f);\n             }\n             Pat::Ref { pat, .. } => f(*pat),\n-            Pat::Slice { prefix, rest, suffix } => {\n-                let total_iter = prefix.iter().chain(rest.iter()).chain(suffix.iter());\n+            Pat::Slice { prefix, slice, suffix } => {\n+                let total_iter = prefix.iter().chain(slice.iter()).chain(suffix.iter());\n                 total_iter.copied().for_each(f);\n             }\n             Pat::Record { args, .. } => {"}, {"sha": "d3e8888bd5e2ff32cb0097b2d82477bbe36a376a", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3b104aa6df205e74c116d8c9e41900807924e70/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b104aa6df205e74c116d8c9e41900807924e70/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=a3b104aa6df205e74c116d8c9e41900807924e70", "patch": "@@ -18,7 +18,8 @@ use crate::{\n pub use self::{\n     expr_extensions::{ArrayExprKind, BinOp, ElseBranch, LiteralKind, PrefixOp, RangeOp},\n     extensions::{\n-        FieldKind, PathSegmentKind, SelfParamKind, StructKind, TypeBoundKind, VisibilityKind,\n+        FieldKind, PathSegmentKind, SelfParamKind, SlicePatComponents, StructKind, TypeBoundKind,\n+        VisibilityKind,\n     },\n     generated::*,\n     tokens::*,"}, {"sha": "7dcf084de90a09f2966cbab843234e50684c0244", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a3b104aa6df205e74c116d8c9e41900807924e70/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b104aa6df205e74c116d8c9e41900807924e70/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=a3b104aa6df205e74c116d8c9e41900807924e70", "patch": "@@ -1,6 +1,8 @@\n //! Various extension methods to ast Nodes, which are hard to code-generate.\n //! Extensions for various expressions live in a sibling `expr_extensions` module.\n \n+use itertools::Itertools;\n+\n use crate::{\n     ast::{self, child_opt, children, AstNode, AttrInput, SyntaxNode},\n     SmolStr, SyntaxElement,\n@@ -293,6 +295,40 @@ impl ast::BindPat {\n     }\n }\n \n+pub struct SlicePatComponents {\n+    pub prefix: Vec<ast::Pat>,\n+    pub slice: Option<ast::Pat>,\n+    pub suffix: Vec<ast::Pat>,\n+}\n+\n+impl ast::SlicePat {\n+    pub fn components(&self) -> SlicePatComponents {\n+        let mut args = self.args().peekable();\n+        let prefix = args\n+            .peeking_take_while(|p| match p {\n+                ast::Pat::DotDotPat(_) => false,\n+                ast::Pat::BindPat(bp) => match bp.pat() {\n+                    Some(ast::Pat::DotDotPat(_)) => false,\n+                    _ => true,\n+                },\n+                ast::Pat::RefPat(rp) => match rp.pat() {\n+                    Some(ast::Pat::DotDotPat(_)) => false,\n+                    Some(ast::Pat::BindPat(bp)) => match bp.pat() {\n+                        Some(ast::Pat::DotDotPat(_)) => false,\n+                        _ => true,\n+                    },\n+                    _ => true,\n+                },\n+                _ => true,\n+            })\n+            .collect();\n+        let slice = args.next();\n+        let suffix = args.collect();\n+\n+        SlicePatComponents { prefix, slice, suffix }\n+    }\n+}\n+\n impl ast::PointerType {\n     pub fn is_mut(&self) -> bool {\n         self.syntax().children_with_tokens().any(|n| n.kind() == T![mut])"}, {"sha": "8a3669bd1a8a670c4a0065c67ba64e033e3017c6", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3b104aa6df205e74c116d8c9e41900807924e70/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b104aa6df205e74c116d8c9e41900807924e70/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=a3b104aa6df205e74c116d8c9e41900807924e70", "patch": "@@ -2063,7 +2063,11 @@ impl AstNode for SlicePat {\n         &self.syntax\n     }\n }\n-impl SlicePat {}\n+impl SlicePat {\n+    pub fn args(&self) -> AstChildren<Pat> {\n+        AstChildren::new(&self.syntax)\n+    }\n+}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RangePat {\n     pub(crate) syntax: SyntaxNode,"}, {"sha": "efe1e795ba51a695c56011efedbea2e53c73cc7a", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3b104aa6df205e74c116d8c9e41900807924e70/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b104aa6df205e74c116d8c9e41900807924e70/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=a3b104aa6df205e74c116d8c9e41900807924e70", "patch": "@@ -415,23 +415,23 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             pats: [Pat],\n             guard: MatchGuard,\n             Expr,\n-         }\n+        }\n         struct MatchGuard { Expr }\n \n         struct RecordLit { Path, RecordFieldList }\n         struct RecordFieldList {\n             fields: [RecordField],\n             spread: Expr,\n-         }\n+        }\n         struct RecordField { NameRef, Expr }\n \n         struct RefPat { Pat }\n         struct BoxPat { Pat }\n         struct BindPat: NameOwner { Pat }\n         struct PlaceholderPat { }\n         struct DotDotPat { }\n-        struct PathPat {  Path }\n-        struct SlicePat {}\n+        struct PathPat { Path }\n+        struct SlicePat { args: [Pat] }\n         struct RangePat {}\n         struct LiteralPat { Literal }\n "}]}