{"sha": "991610a9ecb6a9f905238d13ac45613ffe7b7daf", "node_id": "C_kwDOAAsO6NoAKDk5MTYxMGE5ZWNiNmE5ZjkwNTIzOGQxM2FjNDU2MTNmZmU3YjdkYWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-10T09:23:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-10T09:23:09Z"}, "message": "Auto merge of #10473 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "7fdc0b8108091a966caaabfe925c5eae187af1a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fdc0b8108091a966caaabfe925c5eae187af1a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/991610a9ecb6a9f905238d13ac45613ffe7b7daf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/991610a9ecb6a9f905238d13ac45613ffe7b7daf", "html_url": "https://github.com/rust-lang/rust/commit/991610a9ecb6a9f905238d13ac45613ffe7b7daf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/991610a9ecb6a9f905238d13ac45613ffe7b7daf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7fae6e417689722f38af16860609c2dd8e747ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7fae6e417689722f38af16860609c2dd8e747ee", "html_url": "https://github.com/rust-lang/rust/commit/a7fae6e417689722f38af16860609c2dd8e747ee"}, {"sha": "f3074c4b9197f4566a7031d86ac53be845b7fd05", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3074c4b9197f4566a7031d86ac53be845b7fd05", "html_url": "https://github.com/rust-lang/rust/commit/f3074c4b9197f4566a7031d86ac53be845b7fd05"}], "stats": {"total": 114, "additions": 49, "deletions": 65}, "files": [{"sha": "c35dfcbd8c445026a4c144ff7bc8649db9e0085f", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.1.69\"\n+version = \"0.1.70\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "6701bedfe5ed814da60008668e6b2977dd15cd09", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_lints\"\n-version = \"0.1.69\"\n+version = \"0.1.70\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "7f3f26bed7c7d6d3696a95b5ffa6857e8daaa81c", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -1049,7 +1049,7 @@ fn binding_ty_auto_deref_stability<'tcx>(\n                     ))\n                     .is_sized(cx.tcx, cx.param_env.without_caller_bounds()),\n             ),\n-            TyKind::OpaqueDef(..) | TyKind::Infer | TyKind::Typeof(..) | TyKind::TraitObject(..) | TyKind::Err => {\n+            TyKind::OpaqueDef(..) | TyKind::Infer | TyKind::Typeof(..) | TyKind::TraitObject(..) | TyKind::Err(_) => {\n                 Position::ReborrowStable(precedence)\n             },\n         };\n@@ -1065,7 +1065,7 @@ fn ty_contains_infer(ty: &hir::Ty<'_>) -> bool {\n             if self.0\n                 || matches!(\n                     ty.kind,\n-                    TyKind::OpaqueDef(..) | TyKind::Infer | TyKind::Typeof(_) | TyKind::Err\n+                    TyKind::OpaqueDef(..) | TyKind::Infer | TyKind::Typeof(_) | TyKind::Err(_)\n                 )\n             {\n                 self.0 = true;\n@@ -1357,7 +1357,7 @@ fn replace_types<'tcx>(\n                     && let Some(term_ty) = projection_predicate.term.ty()\n                     && let ty::Param(term_param_ty) = term_ty.kind()\n                 {\n-                    let projection = cx.tcx.mk_ty(ty::Alias(\n+                    let projection = cx.tcx.mk_ty_from_kind(ty::Alias(\n                         ty::Projection,\n                         projection_predicate.projection_ty.with_self_ty(cx.tcx, new_ty),\n                     ));"}, {"sha": "8a5a28c6b3d83d0c8d3e7795dd115e2b7b4c2670", "filename": "clippy_lints/src/derivable_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderivable_impls.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::{\n     Body, Expr, ExprKind, GenericArg, Impl, ImplItemKind, Item, ItemKind, Node, PathSegment, QPath, Ty, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{Adt, AdtDef, DefIdTree, SubstsRef};\n+use rustc_middle::ty::{Adt, AdtDef, SubstsRef};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::sym;\n "}, {"sha": "b8428d66a5dc8b207b9de4e72737a72082b2dadc", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -514,7 +514,7 @@ fn param_env_for_derived_eq(tcx: TyCtxt<'_>, did: DefId, eq_trait_id: DefId) ->\n     }\n \n     ParamEnv::new(\n-        tcx.mk_predicates(ty_predicates.iter().map(|&(p, _)| p).chain(\n+        tcx.mk_predicates_from_iter(ty_predicates.iter().map(|&(p, _)| p).chain(\n             params.iter().filter(|&&(_, needs_eq)| needs_eq).map(|&(param, _)| {\n                 tcx.mk_predicate(Binder::dummy(PredicateKind::Clause(Clause::Trait(TraitPredicate {\n                     trait_ref: tcx.mk_trait_ref(eq_trait_id, [tcx.mk_param_from_def(param)]),"}, {"sha": "1e02a30e35fe4a07563a66183b1fa51cc4b3eb2c", "filename": "clippy_lints/src/loops/manual_flatten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Floops%2Fmanual_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Floops%2Fmanual_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_flatten.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -9,7 +9,7 @@ use rustc_errors::Applicability;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{Expr, Pat, PatKind};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::{self, DefIdTree};\n+use rustc_middle::ty;\n use rustc_span::source_map::Span;\n \n /// Check for unnecessary `if let` usage in a for loop where only the `Some` or `Ok` variant of the"}, {"sha": "b1bc10802e1b66f86541f50a2c951bd63d7c8a45", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -232,7 +232,7 @@ fn never_loop_expr(expr: &Expr<'_>, ignore_ids: &mut Vec<HirId>, main_loop_id: H\n         | ExprKind::Path(_)\n         | ExprKind::ConstBlock(_)\n         | ExprKind::Lit(_)\n-        | ExprKind::Err => NeverLoopResult::Otherwise,\n+        | ExprKind::Err(_) => NeverLoopResult::Otherwise,\n     }\n }\n "}, {"sha": "0e22485db2c592b3f9021e352fbcce86a359352d", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -8,7 +8,6 @@ use rustc_errors::Applicability;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::{self as hir, Expr, ExprKind, QPath};\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n-use rustc_middle::ty::DefIdTree;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::def_id::{DefId, LocalDefId};\n use rustc_span::{sym, Span};"}, {"sha": "6447899f2b94cd22e45911674282255c8ef0b27c", "filename": "clippy_lints/src/matches/manual_unwrap_or.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fmatches%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fmatches%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmanual_unwrap_or.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -10,7 +10,6 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::LangItem::{OptionNone, ResultErr};\n use rustc_hir::{Arm, Expr, PatKind};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::DefIdTree;\n use rustc_span::sym;\n \n use super::MANUAL_UNWRAP_OR;"}, {"sha": "df0ea7f5b863bd5e01744fe27fb3eedbe9903dd3", "filename": "clippy_lints/src/matches/redundant_pattern_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -12,7 +12,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::LangItem::{self, OptionNone, OptionSome, PollPending, PollReady, ResultErr, ResultOk};\n use rustc_hir::{Arm, Expr, ExprKind, Node, Pat, PatKind, QPath, UnOp};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::{self, subst::GenericArgKind, DefIdTree, Ty};\n+use rustc_middle::ty::{self, subst::GenericArgKind, Ty};\n use rustc_span::{sym, Symbol};\n \n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {"}, {"sha": "b33a247817292d753689db1fa6a9753582a926c3", "filename": "clippy_lints/src/matches/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -341,7 +341,7 @@ impl<'a, 'tcx> Visitor<'tcx> for SigDropHelper<'a, 'tcx> {\n             ExprKind::ConstBlock(_) |\n             ExprKind::Continue(_) |\n             ExprKind::DropTemps(_) |\n-            ExprKind::Err |\n+            ExprKind::Err(_) |\n             ExprKind::InlineAsm(_) |\n             ExprKind::Let(_) |\n             ExprKind::Lit(_) |"}, {"sha": "8e1130cf8dfa4748024054179bf53ec154d72a38", "filename": "clippy_lints/src/methods/bind_instead_of_map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -8,7 +8,6 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::{LangItem, QPath};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::DefIdTree;\n use rustc_span::Span;\n \n pub(crate) struct OptionAndThenSome;"}, {"sha": "079df2226d1e2bbd0668b4e54d760b4409a8b88d", "filename": "clippy_lints/src/methods/chars_cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -6,7 +6,7 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_lint::Lint;\n-use rustc_middle::ty::{self, DefIdTree};\n+use rustc_middle::ty;\n \n /// Wrapper fn for `CHARS_NEXT_CMP` and `CHARS_LAST_CMP` lints.\n pub(super) fn check("}, {"sha": "0b0c6adc5045afef5935b3a20412616ff6a16ae6", "filename": "clippy_lints/src/methods/needless_collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -173,7 +173,7 @@ fn is_contains_sig(cx: &LateContext<'_>, call_id: HirId, iter_expr: &Expr<'_>) -\n         && let Some(iter_item) = cx.tcx\n             .associated_items(iter_trait)\n             .find_by_name_and_kind(cx.tcx, Ident::with_dummy_span(Symbol::intern(\"Item\")), AssocKind::Type, iter_trait)\n-        && let substs = cx.tcx.intern_substs(&[GenericArg::from(typeck.expr_ty_adjusted(iter_expr))])\n+        && let substs = cx.tcx.mk_substs(&[GenericArg::from(typeck.expr_ty_adjusted(iter_expr))])\n         && let proj_ty = cx.tcx.mk_projection(iter_item.def_id, substs)\n         && let Ok(item_ty) = cx.tcx.try_normalize_erasing_regions(cx.param_env, proj_ty)\n     {"}, {"sha": "41ceef19e3a97e6f1f884a4ca01a41d861a9fe85", "filename": "clippy_lints/src/methods/option_map_or_none.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -6,7 +6,6 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::LangItem::{OptionNone, OptionSome};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::DefIdTree;\n use rustc_span::symbol::sym;\n \n use super::OPTION_MAP_OR_NONE;"}, {"sha": "df26b36b7b32a2ca3461c69f0f507bd2bc444ac4", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -414,7 +414,7 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n                             }\n                         });\n \n-                        let new_subst = cx.tcx.mk_substs(\n+                        let new_subst = cx.tcx.mk_substs_from_iter(\n                             call_substs.iter()\n                                 .enumerate()\n                                 .map(|(i, t)|"}, {"sha": "f2773cad400cc045f8da392001c1531ac16a4460", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -13,7 +13,7 @@ use rustc_ast::ast::{self, MetaItem, MetaItemKind};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::ty::{DefIdTree, Visibility};\n+use rustc_middle::ty::Visibility;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::source_map::Span;"}, {"sha": "e2a7ba02a043c553bde251d0d91dfa82b387509c", "filename": "clippy_lints/src/needless_question_mark.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_question_mark.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -6,7 +6,6 @@ use rustc_errors::Applicability;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{AsyncGeneratorKind, Block, Body, Expr, ExprKind, GeneratorKind, LangItem, MatchSource, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::DefIdTree;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {"}, {"sha": "d3de9699fe9d9c8dc044d835b436071a77858503", "filename": "clippy_lints/src/operators/cmp_owned.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Foperators%2Fcmp_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Foperators%2Fcmp_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fcmp_owned.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -49,10 +49,10 @@ fn check_op(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>, left: bool)\n             (arg, arg.span)\n         },\n         ExprKind::Call(path, [arg])\n-            if path_def_id(cx, path).map_or(false, |id| {\n-                if match_def_path(cx, id, &paths::FROM_STR_METHOD) {\n+            if path_def_id(cx, path).map_or(false, |did| {\n+                if match_def_path(cx, did, &paths::FROM_STR_METHOD) {\n                     true\n-                } else if cx.tcx.lang_items().from_fn() == Some(id) {\n+                } else if cx.tcx.is_diagnostic_item(sym::from_fn, did) {\n                     !is_copy(cx, typeck.expr_ty(expr))\n                 } else {\n                     false"}, {"sha": "2fdd775ad4893bfa472e8ed181665f7156bb1b7d", "filename": "clippy_lints/src/redundant_slicing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_slicing.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -134,7 +134,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantSlicing {\n                 } else if let Some(target_id) = cx.tcx.lang_items().deref_target() {\n                     if let Ok(deref_ty) = cx.tcx.try_normalize_erasing_regions(\n                         cx.param_env,\n-                        cx.tcx.mk_projection(target_id, cx.tcx.intern_substs(&[GenericArg::from(indexed_ty)])),\n+                        cx.tcx.mk_projection(target_id, cx.tcx.mk_substs(&[GenericArg::from(indexed_ty)])),\n                     ) {\n                         if deref_ty == expr_ty {\n                             let snip = snippet_with_context(cx, indexed.span, ctxt, \"..\", &mut app).0;"}, {"sha": "a13bc7a51887163025409e8780d18d2ef748c38f", "filename": "clippy_lints/src/std_instead_of_core.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fstd_instead_of_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fstd_instead_of_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstd_instead_of_core.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -2,7 +2,6 @@ use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{def::Res, HirId, Path, PathSegment};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::DefIdTree;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, symbol::kw, Span};\n "}, {"sha": "6e802794f5aa341c482e1dbe2ca8795d524b1cc8", "filename": "clippy_lints/src/unnecessary_owned_empty_strings.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Funnecessary_owned_empty_strings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Funnecessary_owned_empty_strings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_owned_empty_strings.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -7,6 +7,7 @@ use rustc_hir::{BorrowKind, Expr, ExprKind, LangItem, Mutability};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -54,7 +55,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryOwnedEmptyStrings {\n                         );\n                 } else {\n                     if_chain! {\n-                        if Some(fun_def_id) == cx.tcx.lang_items().from_fn();\n+                        if cx.tcx.is_diagnostic_item(sym::from_fn, fun_def_id);\n                         if let [.., last_arg] = args;\n                         if let ExprKind::Lit(spanned) = &last_arg.kind;\n                         if let LitKind::Str(symbol, _) = spanned.node;"}, {"sha": "fede625f72a89e690d5adbdbbc0b95313bb3a0d8", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -161,7 +161,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                         }\n \n                         if_chain! {\n-                            if Some(def_id) == cx.tcx.lang_items().from_fn();\n+                            if cx.tcx.is_diagnostic_item(sym::from_fn, def_id);\n                             if same_type_and_consts(a, b);\n \n                             then {"}, {"sha": "f31c3fdb0959c399c70434cd0134c3840ed0d221", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -588,7 +588,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                     },\n                 }\n             },\n-            ExprKind::Err => kind!(\"Err\"),\n+            ExprKind::Err(_) => kind!(\"Err(_)\"),\n             ExprKind::DropTemps(expr) => {\n                 bind!(self, expr);\n                 kind!(\"DropTemps({expr})\");"}, {"sha": "f8978e30a8e2b344c14d23440edefdd480c45fb5", "filename": "clippy_lints/src/utils/internal_lints/interning_defined_symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finterning_defined_symbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finterning_defined_symbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finterning_defined_symbol.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -11,7 +11,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::{BinOpKind, Expr, ExprKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::interpret::ConstValue;\n-use rustc_middle::ty::{self};\n+use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::Symbol;\n "}, {"sha": "14ed1368e03ec35182ec5568f58fa0e338b26b2d", "filename": "clippy_lints/src/utils/internal_lints/unnecessary_def_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -11,7 +11,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::{Expr, ExprKind, Local, Mutability, Node};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::interpret::{Allocation, ConstValue, GlobalAlloc};\n-use rustc_middle::ty::{self, DefIdTree, Ty};\n+use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;"}, {"sha": "e105452e1c5f3a3bc0c95f3b05e01a1e07f13dcc", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -155,14 +155,10 @@ impl LateLintPass<'_> for WildcardImports {\n                     )\n                 };\n \n-                let imports_string = if used_imports.len() == 1 {\n-                    used_imports.iter().next().unwrap().to_string()\n+                let mut imports = used_imports.items().map(ToString::to_string).into_sorted_stable_ord(false);\n+                let imports_string = if imports.len() == 1 {\n+                    imports.pop().unwrap()\n                 } else {\n-                    let mut imports = used_imports\n-                        .iter()\n-                        .map(ToString::to_string)\n-                        .collect::<Vec<_>>();\n-                    imports.sort();\n                     if braced_glob {\n                         imports.join(\", \")\n                     } else {"}, {"sha": "124ebd164e6b5e9fbd3d70e96cc042f0c6467ed4", "filename": "clippy_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2FCargo.toml?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_utils\"\n-version = \"0.1.69\"\n+version = \"0.1.70\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "bb8890dcaf988876713c5457019850de2b5c64c7", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -237,7 +237,7 @@ pub fn constant<'tcx>(\n         typeck_results,\n         param_env: lcx.param_env,\n         needed_resolution: false,\n-        substs: lcx.tcx.intern_substs(&[]),\n+        substs: ty::List::empty(),\n     };\n     cx.expr(e).map(|cst| (cst, cx.needed_resolution))\n }\n@@ -306,7 +306,7 @@ pub fn constant_context<'a, 'tcx>(\n         typeck_results,\n         param_env: lcx.param_env,\n         needed_resolution: false,\n-        substs: lcx.tcx.intern_substs(&[]),\n+        substs: ty::List::empty(),\n     }\n }\n "}, {"sha": "ee2f816f181ba9c71fd4eb781c24ef08e0014da8", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -193,7 +193,7 @@ fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessS\n                 | ExprKind::Ret(_)\n                 | ExprKind::InlineAsm(_)\n                 | ExprKind::Yield(..)\n-                | ExprKind::Err => {\n+                | ExprKind::Err(_) => {\n                     self.eagerness = ForceNoChange;\n                     return;\n                 },"}, {"sha": "50bef3709309d66e3fc117850ebe09dc1b223a67", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -287,15 +287,12 @@ impl<'a> VecArgs<'a> {\n                     Some(VecArgs::Repeat(&args[0], &args[1]))\n                 } else if match_def_path(cx, fun_def_id, &paths::SLICE_INTO_VEC) && args.len() == 1 {\n                     // `vec![a, b, c]` case\n-                    if_chain! {\n-                        if let hir::ExprKind::Box(boxed) = args[0].kind;\n-                        if let hir::ExprKind::Array(args) = boxed.kind;\n-                        then {\n-                            return Some(VecArgs::Vec(args));\n-                        }\n+                    if let hir::ExprKind::Call(_, [arg]) = &args[0].kind\n+                        && let hir::ExprKind::Array(args) = arg.kind {\n+                        Some(VecArgs::Vec(args))\n+                    } else {\n+                        None\n                     }\n-\n-                    None\n                 } else if match_def_path(cx, fun_def_id, &paths::VEC_NEW) && args.is_empty() {\n                     Some(VecArgs::Vec(&[]))\n                 } else {"}, {"sha": "0603755f8a94174bce12b9190e04f2e4ef54fa67", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -714,7 +714,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 }\n                 self.hash_pat(pat);\n             },\n-            ExprKind::Err => {},\n+            ExprKind::Err(_) => {},\n             ExprKind::Lit(ref l) => {\n                 l.node.hash(&mut self.s);\n             },\n@@ -986,7 +986,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n             TyKind::Typeof(anon_const) => {\n                 self.hash_body(anon_const.body);\n             },\n-            TyKind::Err | TyKind::Infer | TyKind::Never => {},\n+            TyKind::Err(_) | TyKind::Infer | TyKind::Never => {},\n         }\n     }\n "}, {"sha": "44b6b9f7b0b14af5687dc70933741e9931fae2ec", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -104,7 +104,7 @@ use rustc_middle::ty::fast_reject::SimplifiedType::{\n     PtrSimplifiedType, SliceSimplifiedType, StrSimplifiedType, UintSimplifiedType,\n };\n use rustc_middle::ty::{\n-    layout::IntegerExt, BorrowKind, ClosureKind, DefIdTree, Ty, TyCtxt, TypeAndMut, TypeVisitableExt, UpvarCapture,\n+    layout::IntegerExt, BorrowKind, ClosureKind, Ty, TyCtxt, TypeAndMut, TypeVisitableExt, UpvarCapture,\n };\n use rustc_middle::ty::{FloatTy, IntTy, UintTy};\n use rustc_span::hygiene::{ExpnKind, MacroKind};"}, {"sha": "c00800291dbd3074abc06e5f9e0cb3b761b9dd72", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -299,10 +299,6 @@ fn check_terminator<'tcx>(\n         | TerminatorKind::Unreachable => Ok(()),\n \n         TerminatorKind::Drop { place, .. } => check_place(tcx, *place, span, body),\n-        TerminatorKind::DropAndReplace { place, value, .. } => {\n-            check_place(tcx, *place, span, body)?;\n-            check_operand(tcx, value, span, body)\n-        },\n \n         TerminatorKind::SwitchInt { discr, targets: _ } => check_operand(tcx, discr, span, body),\n "}, {"sha": "07feadca2b0cab335db05521150d606937fa79b9", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -157,7 +157,7 @@ impl<'a> Sugg<'a> {\n             | hir::ExprKind::Ret(..)\n             | hir::ExprKind::Struct(..)\n             | hir::ExprKind::Tup(..)\n-            | hir::ExprKind::Err => Sugg::NonParen(get_snippet(expr.span)),\n+            | hir::ExprKind::Err(_) => Sugg::NonParen(get_snippet(expr.span)),\n             hir::ExprKind::DropTemps(inner) => Self::hir_from_snippet(inner, get_snippet),\n             hir::ExprKind::Assign(lhs, rhs, _) => {\n                 Sugg::BinOp(AssocOp::Assign, get_snippet(lhs.span), get_snippet(rhs.span))"}, {"sha": "e0ea3952785bb04182e81a9bd2c03b48acf02066", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -16,9 +16,9 @@ use rustc_infer::infer::{\n use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::{\n-    self, AdtDef, AliasTy, AssocKind, Binder, BoundRegion, DefIdTree, FnSig, IntTy, List, ParamEnv, Predicate,\n-    PredicateKind, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitableExt,\n-    TypeVisitor, UintTy, VariantDef, VariantDiscr,\n+    self, AdtDef, AliasTy, AssocKind, Binder, BoundRegion, FnSig, IntTy, List, ParamEnv, Predicate, PredicateKind,\n+    Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitableExt, TypeVisitor,\n+    UintTy, VariantDef, VariantDiscr,\n };\n use rustc_middle::ty::{GenericArg, GenericArgKind};\n use rustc_span::symbol::Ident;\n@@ -237,7 +237,7 @@ pub fn implements_trait_with_env<'tcx>(\n         kind: TypeVariableOriginKind::MiscVariable,\n         span: DUMMY_SP,\n     };\n-    let ty_params = tcx.mk_substs(\n+    let ty_params = tcx.mk_substs_from_iter(\n         ty_params\n             .into_iter()\n             .map(|arg| arg.unwrap_or_else(|| infcx.next_ty_var(orig).into())),\n@@ -1078,7 +1078,7 @@ pub fn make_projection<'tcx>(\n         tcx,\n         container_id,\n         assoc_ty,\n-        tcx.mk_substs(substs.into_iter().map(Into::into)),\n+        tcx.mk_substs_from_iter(substs.into_iter().map(Into::into)),\n     )\n }\n "}, {"sha": "d27a20bd4dfa71cc9f80e092b0f6291ac9e2edaf", "filename": "clippy_utils/src/visitors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/clippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fvisitors.rs?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -665,7 +665,7 @@ pub fn for_each_unconsumed_temporary<'tcx, B>(\n             | ExprKind::Path(_)\n             | ExprKind::Continue(_)\n             | ExprKind::InlineAsm(_)\n-            | ExprKind::Err => (),\n+            | ExprKind::Err(_) => (),\n         }\n         ControlFlow::Continue(())\n     }"}, {"sha": "5c9f76dbbc6006b0c3078c68b9e75743f7377c20", "filename": "declare_clippy_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/declare_clippy_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/declare_clippy_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/declare_clippy_lint%2FCargo.toml?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"declare_clippy_lint\"\n-version = \"0.1.69\"\n+version = \"0.1.70\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "d788c6359d7a42f20477fcfd2b7825851b752d22", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/991610a9ecb6a9f905238d13ac45613ffe7b7daf/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/991610a9ecb6a9f905238d13ac45613ffe7b7daf/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=991610a9ecb6a9f905238d13ac45613ffe7b7daf", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2023-02-25\"\n+channel = \"nightly-2023-03-10\"\n components = [\"cargo\", \"llvm-tools\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}]}