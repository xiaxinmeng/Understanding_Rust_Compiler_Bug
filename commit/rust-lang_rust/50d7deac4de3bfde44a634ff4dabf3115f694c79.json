{"sha": "50d7deac4de3bfde44a634ff4dabf3115f694c79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZDdkZWFjNGRlM2JmZGU0NGE2MzRmZjRkYWJmMzExNWY2OTRjNzk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-31T07:54:25Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-22T07:19:08Z"}, "message": "prepare visit_statement for checking more kinds of statements", "tree": {"sha": "07dbfb20b7dac5b59dd20ebcd2624b16883acb58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07dbfb20b7dac5b59dd20ebcd2624b16883acb58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50d7deac4de3bfde44a634ff4dabf3115f694c79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50d7deac4de3bfde44a634ff4dabf3115f694c79", "html_url": "https://github.com/rust-lang/rust/commit/50d7deac4de3bfde44a634ff4dabf3115f694c79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50d7deac4de3bfde44a634ff4dabf3115f694c79/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "810f309ff30fe7a75917f9e5359074dc991b4590", "url": "https://api.github.com/repos/rust-lang/rust/commits/810f309ff30fe7a75917f9e5359074dc991b4590", "html_url": "https://github.com/rust-lang/rust/commit/810f309ff30fe7a75917f9e5359074dc991b4590"}], "stats": {"total": 53, "additions": 28, "deletions": 25}, "files": [{"sha": "051ce9e6b1ef8e439485646273ed36ad3a8dec23", "filename": "src/librustc_mir/transform/validate.rs", "status": "modified", "additions": 28, "deletions": 25, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/50d7deac4de3bfde44a634ff4dabf3115f694c79/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d7deac4de3bfde44a634ff4dabf3115f694c79/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs?ref=50d7deac4de3bfde44a634ff4dabf3115f694c79", "patch": "@@ -133,34 +133,37 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n     }\n \n     fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n-        if let StatementKind::Assign(box (dest, rvalue)) = &statement.kind {\n-            // LHS and RHS of the assignment must have the same type.\n-            let left_ty = dest.ty(&self.body.local_decls, self.tcx).ty;\n-            let right_ty = rvalue.ty(&self.body.local_decls, self.tcx);\n-            if !mir_assign_valid_types(self.tcx, right_ty, left_ty) {\n-                self.fail(\n-                    location,\n-                    format!(\n-                        \"encountered `Assign` statement with incompatible types:\\n\\\n-                        left-hand side has type: {}\\n\\\n-                        right-hand side has type: {}\",\n-                        left_ty, right_ty,\n-                    ),\n-                );\n-            }\n-            // The sides of an assignment must not alias. Currently this just checks whether the places\n-            // are identical.\n-            match rvalue {\n-                Rvalue::Use(Operand::Copy(src) | Operand::Move(src)) => {\n-                    if dest == src {\n-                        self.fail(\n-                            location,\n-                            \"encountered `Assign` statement with overlapping memory\",\n-                        );\n+        match &statement.kind {\n+            StatementKind::Assign(box (dest, rvalue)) => {\n+                // LHS and RHS of the assignment must have the same type.\n+                let left_ty = dest.ty(&self.body.local_decls, self.tcx).ty;\n+                let right_ty = rvalue.ty(&self.body.local_decls, self.tcx);\n+                if !mir_assign_valid_types(self.tcx, right_ty, left_ty) {\n+                    self.fail(\n+                        location,\n+                        format!(\n+                            \"encountered `Assign` statement with incompatible types:\\n\\\n+                            left-hand side has type: {}\\n\\\n+                            right-hand side has type: {}\",\n+                            left_ty, right_ty,\n+                        ),\n+                    );\n+                }\n+                // The sides of an assignment must not alias. Currently this just checks whether the places\n+                // are identical.\n+                match rvalue {\n+                    Rvalue::Use(Operand::Copy(src) | Operand::Move(src)) => {\n+                        if dest == src {\n+                            self.fail(\n+                                location,\n+                                \"encountered `Assign` statement with overlapping memory\",\n+                            );\n+                        }\n                     }\n+                    _ => {}\n                 }\n-                _ => {}\n             }\n+            _ => {}\n         }\n     }\n "}]}