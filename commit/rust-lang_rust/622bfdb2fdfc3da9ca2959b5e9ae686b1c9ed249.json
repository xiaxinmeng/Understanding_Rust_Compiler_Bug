{"sha": "622bfdb2fdfc3da9ca2959b5e9ae686b1c9ed249", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMmJmZGIyZmRmYzNkYTljYTI5NTliNWU5YWU2ODZiMWM5ZWQyNDk=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-12-02T20:24:20Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2021-01-12T19:59:10Z"}, "message": "Deduplicate some tests using revisions", "tree": {"sha": "bb93d8ac099d3c8938a29e695f546c6af5f1aa56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb93d8ac099d3c8938a29e695f546c6af5f1aa56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/622bfdb2fdfc3da9ca2959b5e9ae686b1c9ed249", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/622bfdb2fdfc3da9ca2959b5e9ae686b1c9ed249", "html_url": "https://github.com/rust-lang/rust/commit/622bfdb2fdfc3da9ca2959b5e9ae686b1c9ed249", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/622bfdb2fdfc3da9ca2959b5e9ae686b1c9ed249/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "497c9a256b1c2961e91565ccc6e0dd3a87a031ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/497c9a256b1c2961e91565ccc6e0dd3a87a031ed", "html_url": "https://github.com/rust-lang/rust/commit/497c9a256b1c2961e91565ccc6e0dd3a87a031ed"}], "stats": {"total": 301, "additions": 74, "deletions": 227}, "files": [{"sha": "a5c8af1f814673463a100e2c53f5d038d61d1941", "filename": "src/test/ui/pattern/usefulness/empty-match.exhaustive_patterns.stderr", "status": "renamed", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/622bfdb2fdfc3da9ca2959b5e9ae686b1c9ed249/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/622bfdb2fdfc3da9ca2959b5e9ae686b1c9ed249/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.exhaustive_patterns.stderr?ref=622bfdb2fdfc3da9ca2959b5e9ae686b1c9ed249", "patch": "@@ -1,59 +1,59 @@\n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:52:9\n+  --> $DIR/empty-match.rs:53:9\n    |\n LL |         _ => {},\n    |         ^\n    |\n note: the lint level is defined here\n-  --> $DIR/match-empty-exhaustive_patterns.rs:5:9\n+  --> $DIR/empty-match.rs:6:9\n    |\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:55:9\n+  --> $DIR/empty-match.rs:56:9\n    |\n LL |         _ if false => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:62:9\n+  --> $DIR/empty-match.rs:63:9\n    |\n LL |         _ => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:65:9\n+  --> $DIR/empty-match.rs:66:9\n    |\n LL |         _ if false => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:72:9\n+  --> $DIR/empty-match.rs:73:9\n    |\n LL |         _ => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:75:9\n+  --> $DIR/empty-match.rs:76:9\n    |\n LL |         _ if false => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:82:9\n+  --> $DIR/empty-match.rs:83:9\n    |\n LL |         Some(_) => {}\n    |         ^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:86:9\n+  --> $DIR/empty-match.rs:87:9\n    |\n LL |         Some(_) => {}\n    |         ^^^^^^^\n \n error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n-  --> $DIR/match-empty-exhaustive_patterns.rs:89:18\n+  --> $DIR/empty-match.rs:90:18\n    |\n LL |     match_empty!(0u8);\n    |                  ^^^\n@@ -62,7 +62,7 @@ LL |     match_empty!(0u8);\n    = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct` is non-empty\n-  --> $DIR/match-empty-exhaustive_patterns.rs:91:18\n+  --> $DIR/empty-match.rs:92:18\n    |\n LL | struct NonEmptyStruct(bool);\n    | ---------------------------- `NonEmptyStruct` defined here\n@@ -74,7 +74,7 @@ LL |     match_empty!(NonEmptyStruct(true));\n    = note: the matched value is of type `NonEmptyStruct`\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion1` is non-empty\n-  --> $DIR/match-empty-exhaustive_patterns.rs:93:18\n+  --> $DIR/empty-match.rs:94:18\n    |\n LL | / union NonEmptyUnion1 {\n LL | |     foo: (),\n@@ -88,7 +88,7 @@ LL |       match_empty!((NonEmptyUnion1 { foo: () }));\n    = note: the matched value is of type `NonEmptyUnion1`\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion2` is non-empty\n-  --> $DIR/match-empty-exhaustive_patterns.rs:95:18\n+  --> $DIR/empty-match.rs:96:18\n    |\n LL | / union NonEmptyUnion2 {\n LL | |     foo: (),\n@@ -103,7 +103,7 @@ LL |       match_empty!((NonEmptyUnion2 { foo: () }));\n    = note: the matched value is of type `NonEmptyUnion2`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:97:18\n+  --> $DIR/empty-match.rs:98:18\n    |\n LL | / enum NonEmptyEnum1 {\n LL | |     Foo(bool),\n@@ -120,7 +120,7 @@ LL |       match_empty!(NonEmptyEnum1::Foo(true));\n    = note: the matched value is of type `NonEmptyEnum1`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:99:18\n+  --> $DIR/empty-match.rs:100:18\n    |\n LL | / enum NonEmptyEnum2 {\n LL | |     Foo(bool),\n@@ -141,7 +141,7 @@ LL |       match_empty!(NonEmptyEnum2::Foo(true));\n    = note: the matched value is of type `NonEmptyEnum2`\n \n error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:101:18\n+  --> $DIR/empty-match.rs:102:18\n    |\n LL | / enum NonEmptyEnum5 {\n LL | |     V1, V2, V3, V4, V5,\n@@ -155,7 +155,7 @@ LL |       match_empty!(NonEmptyEnum5::V1);\n    = note: the matched value is of type `NonEmptyEnum5`\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:104:18\n+  --> $DIR/empty-match.rs:105:18\n    |\n LL |     match_false!(0u8);\n    |                  ^^^ pattern `_` not covered\n@@ -164,7 +164,7 @@ LL |     match_false!(0u8);\n    = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct(_)` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:106:18\n+  --> $DIR/empty-match.rs:107:18\n    |\n LL | struct NonEmptyStruct(bool);\n    | ---------------------------- `NonEmptyStruct` defined here\n@@ -176,7 +176,7 @@ LL |     match_false!(NonEmptyStruct(true));\n    = note: the matched value is of type `NonEmptyStruct`\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion1 { .. }` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:108:18\n+  --> $DIR/empty-match.rs:109:18\n    |\n LL | / union NonEmptyUnion1 {\n LL | |     foo: (),\n@@ -190,7 +190,7 @@ LL |       match_false!((NonEmptyUnion1 { foo: () }));\n    = note: the matched value is of type `NonEmptyUnion1`\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion2 { .. }` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:110:18\n+  --> $DIR/empty-match.rs:111:18\n    |\n LL | / union NonEmptyUnion2 {\n LL | |     foo: (),\n@@ -205,7 +205,7 @@ LL |       match_false!((NonEmptyUnion2 { foo: () }));\n    = note: the matched value is of type `NonEmptyUnion2`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:112:18\n+  --> $DIR/empty-match.rs:113:18\n    |\n LL | / enum NonEmptyEnum1 {\n LL | |     Foo(bool),\n@@ -222,7 +222,7 @@ LL |       match_false!(NonEmptyEnum1::Foo(true));\n    = note: the matched value is of type `NonEmptyEnum1`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:114:18\n+  --> $DIR/empty-match.rs:115:18\n    |\n LL | / enum NonEmptyEnum2 {\n LL | |     Foo(bool),\n@@ -243,7 +243,7 @@ LL |       match_false!(NonEmptyEnum2::Foo(true));\n    = note: the matched value is of type `NonEmptyEnum2`\n \n error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:116:18\n+  --> $DIR/empty-match.rs:117:18\n    |\n LL | / enum NonEmptyEnum5 {\n LL | |     V1, V2, V3, V4, V5,", "previous_filename": "src/test/ui/pattern/usefulness/match-empty-exhaustive_patterns.stderr"}, {"sha": "7db11f146b2196ed2b2b9306716e38dbd2b8b0a0", "filename": "src/test/ui/pattern/usefulness/empty-match.normal.stderr", "status": "renamed", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/622bfdb2fdfc3da9ca2959b5e9ae686b1c9ed249/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/622bfdb2fdfc3da9ca2959b5e9ae686b1c9ed249/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.normal.stderr?ref=622bfdb2fdfc3da9ca2959b5e9ae686b1c9ed249", "patch": "@@ -1,47 +1,47 @@\n error: unreachable pattern\n-  --> $DIR/match-empty.rs:51:9\n+  --> $DIR/empty-match.rs:53:9\n    |\n LL |         _ => {},\n    |         ^\n    |\n note: the lint level is defined here\n-  --> $DIR/match-empty.rs:4:9\n+  --> $DIR/empty-match.rs:6:9\n    |\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/match-empty.rs:54:9\n+  --> $DIR/empty-match.rs:56:9\n    |\n LL |         _ if false => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/match-empty.rs:61:9\n+  --> $DIR/empty-match.rs:63:9\n    |\n LL |         _ => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/match-empty.rs:64:9\n+  --> $DIR/empty-match.rs:66:9\n    |\n LL |         _ if false => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/match-empty.rs:71:9\n+  --> $DIR/empty-match.rs:73:9\n    |\n LL |         _ => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/match-empty.rs:74:9\n+  --> $DIR/empty-match.rs:76:9\n    |\n LL |         _ if false => {},\n    |         ^\n \n error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n-  --> $DIR/match-empty.rs:89:18\n+  --> $DIR/empty-match.rs:90:18\n    |\n LL |     match_empty!(0u8);\n    |                  ^^^\n@@ -50,7 +50,7 @@ LL |     match_empty!(0u8);\n    = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct` is non-empty\n-  --> $DIR/match-empty.rs:91:18\n+  --> $DIR/empty-match.rs:92:18\n    |\n LL | struct NonEmptyStruct(bool);\n    | ---------------------------- `NonEmptyStruct` defined here\n@@ -62,7 +62,7 @@ LL |     match_empty!(NonEmptyStruct(true));\n    = note: the matched value is of type `NonEmptyStruct`\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion1` is non-empty\n-  --> $DIR/match-empty.rs:93:18\n+  --> $DIR/empty-match.rs:94:18\n    |\n LL | / union NonEmptyUnion1 {\n LL | |     foo: (),\n@@ -76,7 +76,7 @@ LL |       match_empty!((NonEmptyUnion1 { foo: () }));\n    = note: the matched value is of type `NonEmptyUnion1`\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion2` is non-empty\n-  --> $DIR/match-empty.rs:95:18\n+  --> $DIR/empty-match.rs:96:18\n    |\n LL | / union NonEmptyUnion2 {\n LL | |     foo: (),\n@@ -91,7 +91,7 @@ LL |       match_empty!((NonEmptyUnion2 { foo: () }));\n    = note: the matched value is of type `NonEmptyUnion2`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n-  --> $DIR/match-empty.rs:97:18\n+  --> $DIR/empty-match.rs:98:18\n    |\n LL | / enum NonEmptyEnum1 {\n LL | |     Foo(bool),\n@@ -108,7 +108,7 @@ LL |       match_empty!(NonEmptyEnum1::Foo(true));\n    = note: the matched value is of type `NonEmptyEnum1`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n-  --> $DIR/match-empty.rs:99:18\n+  --> $DIR/empty-match.rs:100:18\n    |\n LL | / enum NonEmptyEnum2 {\n LL | |     Foo(bool),\n@@ -129,7 +129,7 @@ LL |       match_empty!(NonEmptyEnum2::Foo(true));\n    = note: the matched value is of type `NonEmptyEnum2`\n \n error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n-  --> $DIR/match-empty.rs:101:18\n+  --> $DIR/empty-match.rs:102:18\n    |\n LL | / enum NonEmptyEnum5 {\n LL | |     V1, V2, V3, V4, V5,\n@@ -143,7 +143,7 @@ LL |       match_empty!(NonEmptyEnum5::V1);\n    = note: the matched value is of type `NonEmptyEnum5`\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/match-empty.rs:104:18\n+  --> $DIR/empty-match.rs:105:18\n    |\n LL |     match_false!(0u8);\n    |                  ^^^ pattern `_` not covered\n@@ -152,7 +152,7 @@ LL |     match_false!(0u8);\n    = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct(_)` not covered\n-  --> $DIR/match-empty.rs:106:18\n+  --> $DIR/empty-match.rs:107:18\n    |\n LL | struct NonEmptyStruct(bool);\n    | ---------------------------- `NonEmptyStruct` defined here\n@@ -164,7 +164,7 @@ LL |     match_false!(NonEmptyStruct(true));\n    = note: the matched value is of type `NonEmptyStruct`\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion1 { .. }` not covered\n-  --> $DIR/match-empty.rs:108:18\n+  --> $DIR/empty-match.rs:109:18\n    |\n LL | / union NonEmptyUnion1 {\n LL | |     foo: (),\n@@ -178,7 +178,7 @@ LL |       match_false!((NonEmptyUnion1 { foo: () }));\n    = note: the matched value is of type `NonEmptyUnion1`\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion2 { .. }` not covered\n-  --> $DIR/match-empty.rs:110:18\n+  --> $DIR/empty-match.rs:111:18\n    |\n LL | / union NonEmptyUnion2 {\n LL | |     foo: (),\n@@ -193,7 +193,7 @@ LL |       match_false!((NonEmptyUnion2 { foo: () }));\n    = note: the matched value is of type `NonEmptyUnion2`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n-  --> $DIR/match-empty.rs:112:18\n+  --> $DIR/empty-match.rs:113:18\n    |\n LL | / enum NonEmptyEnum1 {\n LL | |     Foo(bool),\n@@ -210,7 +210,7 @@ LL |       match_false!(NonEmptyEnum1::Foo(true));\n    = note: the matched value is of type `NonEmptyEnum1`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n-  --> $DIR/match-empty.rs:114:18\n+  --> $DIR/empty-match.rs:115:18\n    |\n LL | / enum NonEmptyEnum2 {\n LL | |     Foo(bool),\n@@ -231,7 +231,7 @@ LL |       match_false!(NonEmptyEnum2::Foo(true));\n    = note: the matched value is of type `NonEmptyEnum2`\n \n error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n-  --> $DIR/match-empty.rs:116:18\n+  --> $DIR/empty-match.rs:117:18\n    |\n LL | / enum NonEmptyEnum5 {\n LL | |     V1, V2, V3, V4, V5,", "previous_filename": "src/test/ui/pattern/usefulness/match-empty.stderr"}, {"sha": "98d8ac180026dbc828bb85c22ab401262adbc696", "filename": "src/test/ui/pattern/usefulness/empty-match.rs", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/622bfdb2fdfc3da9ca2959b5e9ae686b1c9ed249/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622bfdb2fdfc3da9ca2959b5e9ae686b1c9ed249/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.rs?ref=622bfdb2fdfc3da9ca2959b5e9ae686b1c9ed249", "patch": "@@ -1,7 +1,8 @@\n // aux-build:empty.rs\n+// revisions: normal exhaustive_patterns\n #![feature(never_type)]\n #![feature(never_type_fallback)]\n-#![feature(exhaustive_patterns)]\n+#![cfg_attr(exhaustive_patterns, feature(exhaustive_patterns))]\n #![deny(unreachable_patterns)]\n \n extern crate empty;\n@@ -79,11 +80,11 @@ fn never(x: !) {\n fn main() {\n     match None::<!> {\n         None => {}\n-        Some(_) => {} //~ ERROR unreachable pattern\n+        Some(_) => {} //[exhaustive_patterns]~ ERROR unreachable pattern\n     }\n     match None::<EmptyEnum> {\n         None => {}\n-        Some(_) => {} //~ ERROR unreachable pattern\n+        Some(_) => {} //[exhaustive_patterns]~ ERROR unreachable pattern\n     }\n \n     match_empty!(0u8);", "previous_filename": "src/test/ui/pattern/usefulness/match-empty-exhaustive_patterns.rs"}, {"sha": "9292f22e09e05fe01d01b4b94c67b5eb288d4543", "filename": "src/test/ui/pattern/usefulness/integer-ranges/pointer-sized-int-deny.rs", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/497c9a256b1c2961e91565ccc6e0dd3a87a031ed/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int-deny.rs", "raw_url": "https://github.com/rust-lang/rust/raw/497c9a256b1c2961e91565ccc6e0dd3a87a031ed/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int-deny.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int-deny.rs?ref=497c9a256b1c2961e91565ccc6e0dd3a87a031ed", "patch": "@@ -1,48 +0,0 @@\n-#![feature(exclusive_range_pattern)]\n-\n-macro_rules! m {\n-    ($s:expr, $($t:tt)+) => {\n-        match $s { $($t)+ => {} }\n-    }\n-}\n-\n-fn main() {\n-    match 0usize {\n-        //~^ ERROR non-exhaustive patterns\n-        0 ..= usize::MAX => {}\n-    }\n-\n-    match 0isize {\n-        //~^ ERROR non-exhaustive patterns\n-        isize::MIN ..= isize::MAX => {}\n-    }\n-\n-    m!(0usize, 0..=usize::MAX);\n-    //~^ ERROR non-exhaustive patterns\n-    m!(0usize, 0..5 | 5..=usize::MAX);\n-    //~^ ERROR non-exhaustive patterns\n-    m!(0usize, 0..usize::MAX | usize::MAX);\n-    //~^ ERROR non-exhaustive patterns\n-    m!((0usize, true), (0..5, true) | (5..=usize::MAX, true) | (0..=usize::MAX, false));\n-    //~^ ERROR non-exhaustive patterns\n-\n-    m!(0isize, isize::MIN..=isize::MAX);\n-    //~^ ERROR non-exhaustive patterns\n-    m!(0isize, isize::MIN..5 | 5..=isize::MAX);\n-    //~^ ERROR non-exhaustive patterns\n-    m!(0isize, isize::MIN..isize::MAX | isize::MAX);\n-    //~^ ERROR non-exhaustive patterns\n-    m!((0isize, true), (isize::MIN..5, true)\n-        | (5..=isize::MAX, true) | (isize::MIN..=isize::MAX, false));\n-    //~^^ ERROR non-exhaustive patterns\n-\n-    match 0isize {\n-        //~^ ERROR non-exhaustive patterns\n-        isize::MIN ..= -1 => {}\n-        0 => {}\n-        1 ..= isize::MAX => {}\n-    }\n-\n-    match 7usize {}\n-    //~^ ERROR non-exhaustive patterns\n-}"}, {"sha": "2563293458379588806282642f8ba03488a4b968", "filename": "src/test/ui/pattern/usefulness/integer-ranges/pointer-sized-int.allow.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/622bfdb2fdfc3da9ca2959b5e9ae686b1c9ed249/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/622bfdb2fdfc3da9ca2959b5e9ae686b1c9ed249/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.allow.stderr?ref=622bfdb2fdfc3da9ca2959b5e9ae686b1c9ed249", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: type `usize` is non-empty\n-  --> $DIR/pointer-sized-int-allow.rs:36:11\n+  --> $DIR/pointer-sized-int.rs:48:11\n    |\n LL |     match 7usize {}\n    |           ^^^^^^", "previous_filename": "src/test/ui/pattern/usefulness/integer-ranges/pointer-sized-int-allow.stderr"}, {"sha": "e8ac9f3cfe15633697828c909169053894fd1950", "filename": "src/test/ui/pattern/usefulness/integer-ranges/pointer-sized-int.deny.stderr", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/622bfdb2fdfc3da9ca2959b5e9ae686b1c9ed249/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/622bfdb2fdfc3da9ca2959b5e9ae686b1c9ed249/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.deny.stderr?ref=622bfdb2fdfc3da9ca2959b5e9ae686b1c9ed249", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/pointer-sized-int-deny.rs:10:11\n+  --> $DIR/pointer-sized-int.rs:12:11\n    |\n LL |     match 0usize {\n    |           ^^^^^^ pattern `_` not covered\n@@ -10,7 +10,7 @@ LL |     match 0usize {\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/pointer-sized-int-deny.rs:15:11\n+  --> $DIR/pointer-sized-int.rs:17:11\n    |\n LL |     match 0isize {\n    |           ^^^^^^ pattern `_` not covered\n@@ -21,7 +21,7 @@ LL |     match 0isize {\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/pointer-sized-int-deny.rs:20:8\n+  --> $DIR/pointer-sized-int.rs:22:8\n    |\n LL |     m!(0usize, 0..=usize::MAX);\n    |        ^^^^^^ pattern `_` not covered\n@@ -32,7 +32,7 @@ LL |     m!(0usize, 0..=usize::MAX);\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/pointer-sized-int-deny.rs:22:8\n+  --> $DIR/pointer-sized-int.rs:24:8\n    |\n LL |     m!(0usize, 0..5 | 5..=usize::MAX);\n    |        ^^^^^^ pattern `_` not covered\n@@ -43,7 +43,7 @@ LL |     m!(0usize, 0..5 | 5..=usize::MAX);\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/pointer-sized-int-deny.rs:24:8\n+  --> $DIR/pointer-sized-int.rs:26:8\n    |\n LL |     m!(0usize, 0..usize::MAX | usize::MAX);\n    |        ^^^^^^ pattern `_` not covered\n@@ -54,7 +54,7 @@ LL |     m!(0usize, 0..usize::MAX | usize::MAX);\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n \n error[E0004]: non-exhaustive patterns: `(_, _)` not covered\n-  --> $DIR/pointer-sized-int-deny.rs:26:8\n+  --> $DIR/pointer-sized-int.rs:28:8\n    |\n LL |     m!((0usize, true), (0..5, true) | (5..=usize::MAX, true) | (0..=usize::MAX, false));\n    |        ^^^^^^^^^^^^^^ pattern `(_, _)` not covered\n@@ -63,7 +63,7 @@ LL |     m!((0usize, true), (0..5, true) | (5..=usize::MAX, true) | (0..=usize::\n    = note: the matched value is of type `(usize, bool)`\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/pointer-sized-int-deny.rs:29:8\n+  --> $DIR/pointer-sized-int.rs:31:8\n    |\n LL |     m!(0isize, isize::MIN..=isize::MAX);\n    |        ^^^^^^ pattern `_` not covered\n@@ -74,7 +74,7 @@ LL |     m!(0isize, isize::MIN..=isize::MAX);\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/pointer-sized-int-deny.rs:31:8\n+  --> $DIR/pointer-sized-int.rs:33:8\n    |\n LL |     m!(0isize, isize::MIN..5 | 5..=isize::MAX);\n    |        ^^^^^^ pattern `_` not covered\n@@ -85,7 +85,7 @@ LL |     m!(0isize, isize::MIN..5 | 5..=isize::MAX);\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/pointer-sized-int-deny.rs:33:8\n+  --> $DIR/pointer-sized-int.rs:35:8\n    |\n LL |     m!(0isize, isize::MIN..isize::MAX | isize::MAX);\n    |        ^^^^^^ pattern `_` not covered\n@@ -96,7 +96,7 @@ LL |     m!(0isize, isize::MIN..isize::MAX | isize::MAX);\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n \n error[E0004]: non-exhaustive patterns: `(_, _)` not covered\n-  --> $DIR/pointer-sized-int-deny.rs:35:8\n+  --> $DIR/pointer-sized-int.rs:37:8\n    |\n LL |     m!((0isize, true), (isize::MIN..5, true)\n    |        ^^^^^^^^^^^^^^ pattern `(_, _)` not covered\n@@ -105,7 +105,7 @@ LL |     m!((0isize, true), (isize::MIN..5, true)\n    = note: the matched value is of type `(isize, bool)`\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/pointer-sized-int-deny.rs:39:11\n+  --> $DIR/pointer-sized-int.rs:41:11\n    |\n LL |     match 0isize {\n    |           ^^^^^^ pattern `_` not covered\n@@ -116,7 +116,7 @@ LL |     match 0isize {\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n \n error[E0004]: non-exhaustive patterns: type `usize` is non-empty\n-  --> $DIR/pointer-sized-int-deny.rs:46:11\n+  --> $DIR/pointer-sized-int.rs:48:11\n    |\n LL |     match 7usize {}\n    |           ^^^^^^", "previous_filename": "src/test/ui/pattern/usefulness/integer-ranges/pointer-sized-int-deny.stderr"}, {"sha": "1ed18c26763582709b0bf34f4a75598bdf759b14", "filename": "src/test/ui/pattern/usefulness/integer-ranges/pointer-sized-int.rs", "status": "renamed", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/622bfdb2fdfc3da9ca2959b5e9ae686b1c9ed249/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622bfdb2fdfc3da9ca2959b5e9ae686b1c9ed249/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.rs?ref=622bfdb2fdfc3da9ca2959b5e9ae686b1c9ed249", "patch": "@@ -1,5 +1,6 @@\n-#![feature(precise_pointer_size_matching)]\n+// revisions: allow deny\n #![feature(exclusive_range_pattern)]\n+#![cfg_attr(allow, feature(precise_pointer_size_matching))]\n \n macro_rules! m {\n     ($s:expr, $($t:tt)+) => {\n@@ -9,25 +10,36 @@ macro_rules! m {\n \n fn main() {\n     match 0usize {\n+        //[deny]~^ ERROR non-exhaustive patterns\n         0 ..= usize::MAX => {}\n     }\n \n     match 0isize {\n+        //[deny]~^ ERROR non-exhaustive patterns\n         isize::MIN ..= isize::MAX => {}\n     }\n \n     m!(0usize, 0..=usize::MAX);\n+    //[deny]~^ ERROR non-exhaustive patterns\n     m!(0usize, 0..5 | 5..=usize::MAX);\n+    //[deny]~^ ERROR non-exhaustive patterns\n     m!(0usize, 0..usize::MAX | usize::MAX);\n+    //[deny]~^ ERROR non-exhaustive patterns\n     m!((0usize, true), (0..5, true) | (5..=usize::MAX, true) | (0..=usize::MAX, false));\n+    //[deny]~^ ERROR non-exhaustive patterns\n \n     m!(0isize, isize::MIN..=isize::MAX);\n+    //[deny]~^ ERROR non-exhaustive patterns\n     m!(0isize, isize::MIN..5 | 5..=isize::MAX);\n+    //[deny]~^ ERROR non-exhaustive patterns\n     m!(0isize, isize::MIN..isize::MAX | isize::MAX);\n+    //[deny]~^ ERROR non-exhaustive patterns\n     m!((0isize, true), (isize::MIN..5, true)\n         | (5..=isize::MAX, true) | (isize::MIN..=isize::MAX, false));\n+    //[deny]~^^ ERROR non-exhaustive patterns\n \n     match 0isize {\n+        //[deny]~^ ERROR non-exhaustive patterns\n         isize::MIN ..= -1 => {}\n         0 => {}\n         1 ..= isize::MAX => {}", "previous_filename": "src/test/ui/pattern/usefulness/integer-ranges/pointer-sized-int-allow.rs"}, {"sha": "10ea2a10406e367079f73c60ac4dd2bf17640fb4", "filename": "src/test/ui/pattern/usefulness/match-empty.rs", "status": "removed", "additions": 0, "deletions": 118, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/497c9a256b1c2961e91565ccc6e0dd3a87a031ed/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/497c9a256b1c2961e91565ccc6e0dd3a87a031ed/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs?ref=497c9a256b1c2961e91565ccc6e0dd3a87a031ed", "patch": "@@ -1,118 +0,0 @@\n-// aux-build:empty.rs\n-#![feature(never_type)]\n-#![feature(never_type_fallback)]\n-#![deny(unreachable_patterns)]\n-\n-extern crate empty;\n-\n-enum EmptyEnum {}\n-\n-struct NonEmptyStruct(bool); //~ `NonEmptyStruct` defined here\n-union NonEmptyUnion1 { //~ `NonEmptyUnion1` defined here\n-    foo: (),\n-}\n-union NonEmptyUnion2 { //~ `NonEmptyUnion2` defined here\n-    foo: (),\n-    bar: (),\n-}\n-enum NonEmptyEnum1 { //~ `NonEmptyEnum1` defined here\n-    Foo(bool),\n-    //~^ not covered\n-    //~| not covered\n-}\n-enum NonEmptyEnum2 { //~ `NonEmptyEnum2` defined here\n-    Foo(bool),\n-    //~^ not covered\n-    //~| not covered\n-    Bar,\n-    //~^ not covered\n-    //~| not covered\n-}\n-enum NonEmptyEnum5 { //~ `NonEmptyEnum5` defined here\n-    V1, V2, V3, V4, V5,\n-}\n-\n-macro_rules! match_empty {\n-    ($e:expr) => {\n-        match $e {}\n-    };\n-}\n-macro_rules! match_false {\n-    ($e:expr) => {\n-        match $e {\n-            _ if false => {}\n-        }\n-    };\n-}\n-\n-fn empty_enum(x: EmptyEnum) {\n-    match x {} // ok\n-    match x {\n-        _ => {}, //~ ERROR unreachable pattern\n-    }\n-    match x {\n-        _ if false => {}, //~ ERROR unreachable pattern\n-    }\n-}\n-\n-fn empty_foreign_enum(x: empty::EmptyForeignEnum) {\n-    match x {} // ok\n-    match x {\n-        _ => {}, //~ ERROR unreachable pattern\n-    }\n-    match x {\n-        _ if false => {}, //~ ERROR unreachable pattern\n-    }\n-}\n-\n-fn never(x: !) {\n-    match x {} // ok\n-    match x {\n-        _ => {}, //~ ERROR unreachable pattern\n-    }\n-    match x {\n-        _ if false => {}, //~ ERROR unreachable pattern\n-    }\n-}\n-\n-fn main() {\n-    // `exhaustive_patterns` is not on, so uninhabited branches are not detected as unreachable.\n-    match None::<!> {\n-        None => {}\n-        Some(_) => {}\n-    }\n-    match None::<EmptyEnum> {\n-        None => {}\n-        Some(_) => {}\n-    }\n-\n-    match_empty!(0u8);\n-    //~^ ERROR type `u8` is non-empty\n-    match_empty!(NonEmptyStruct(true));\n-    //~^ ERROR type `NonEmptyStruct` is non-empty\n-    match_empty!((NonEmptyUnion1 { foo: () }));\n-    //~^ ERROR type `NonEmptyUnion1` is non-empty\n-    match_empty!((NonEmptyUnion2 { foo: () }));\n-    //~^ ERROR type `NonEmptyUnion2` is non-empty\n-    match_empty!(NonEmptyEnum1::Foo(true));\n-    //~^ ERROR `Foo(_)` not covered\n-    match_empty!(NonEmptyEnum2::Foo(true));\n-    //~^ ERROR `Foo(_)` and `Bar` not covered\n-    match_empty!(NonEmptyEnum5::V1);\n-    //~^ ERROR `V1`, `V2`, `V3` and 2 more not covered\n-\n-    match_false!(0u8);\n-    //~^ ERROR `_` not covered\n-    match_false!(NonEmptyStruct(true));\n-    //~^ ERROR `NonEmptyStruct(_)` not covered\n-    match_false!((NonEmptyUnion1 { foo: () }));\n-    //~^ ERROR `NonEmptyUnion1 { .. }` not covered\n-    match_false!((NonEmptyUnion2 { foo: () }));\n-    //~^ ERROR `NonEmptyUnion2 { .. }` not covered\n-    match_false!(NonEmptyEnum1::Foo(true));\n-    //~^ ERROR `Foo(_)` not covered\n-    match_false!(NonEmptyEnum2::Foo(true));\n-    //~^ ERROR `Foo(_)` and `Bar` not covered\n-    match_false!(NonEmptyEnum5::V1);\n-    //~^ ERROR `V1`, `V2`, `V3` and 2 more not covered\n-}"}]}