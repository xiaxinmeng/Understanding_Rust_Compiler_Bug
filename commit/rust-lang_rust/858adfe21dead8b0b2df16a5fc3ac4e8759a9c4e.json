{"sha": "858adfe21dead8b0b2df16a5fc3ac4e8759a9c4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1OGFkZmUyMWRlYWQ4YjBiMmRmMTZhNWZjM2FjNGU4NzU5YTljNGU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-26T15:18:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-26T15:18:40Z"}, "message": "Rollup merge of #52721 - cramertj:try-poll, r=aturon\n\nstd::ops::Try impl for std::task::Poll\n\nI originally left out the `Try` impl for `Poll` because I was curious if we needed it, and @MajorBreakfast and I had discussed the potential for it to introduce confusion about exactly what control-flow was happening at different points. However, after porting a pretty significant chunk of Fuchsia over to futures 0.3, I discovered that I was *constantly* having to do repetitive matching on `Poll<Result<...>>` or `Poll<Option<Result<...>>>` in order to propagate errors correctly. `try_poll` (propagate `Poll::Ready(Err(..))`s) helped in some places, but it was far more common to need some form of conversion between `Result`, `Poll<Result<...>>`, and `Poll<Option<Result<...>>>`. The `Try` trait conveniently provides all of these conversions in addition to a more concise syntax (`?`), so I'd like to experiment with using these instead.\n\ncc @seanmonstar\n\nr? @aturon\n\nNote: this change means that far more futures 0.1 code can work without significant changes since it papers over the fact that `Result` is no longer at the top-level when using `Stream` and `Future` (since it's now `Poll<Result<...>>` or `Poll<Option<Result<...>>>` instead of `Result<Poll<..>>` and `Result<Poll<Option<...>>>`).", "tree": {"sha": "93aacde4d81dcd07f0c1644f1bfb435b03f740e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93aacde4d81dcd07f0c1644f1bfb435b03f740e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/858adfe21dead8b0b2df16a5fc3ac4e8759a9c4e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbWeZQCRBK7hj4Ov3rIwAAdHIIAEwq6Aj0mIIcx358nWkPwFOe\nasaXkze1hLvNCp2Owy5p3tgzP5Iub68qO0gRae7+tvyq62luLQzEULDOHMED7oRm\nwIdYruCIMmXzuaPRW2y9tC3pwWRZHpKdnoU5x61FPB7GVjXs5MkGODP6mULH5bFu\nSXkndSJgVTvZ2mmzrwZkqlTQVbOtaypaQwZIlADE38tYIpn/XSge8jikpslNF4Xh\nB8Ivf/UFWTw8K2p2028gOG1/s1VwC3DTSpVvIpxyqLnx7QydcwRTN1xWzFn2NVuY\nNnfJ0L/xWZfJcqi/Q/LYjidQCF6/dzKlYLE7+M5Bk5s0/tdXqfPrGYj2VD32qFQ=\n=/CZT\n-----END PGP SIGNATURE-----\n", "payload": "tree 93aacde4d81dcd07f0c1644f1bfb435b03f740e6\nparent 091a10e0eb5a86ace454b23c7ed2f1aaefb5b969\nparent bce8a91f34e63a4ed87a6d6351bf67a82306afbd\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1532618320 -0600\ncommitter GitHub <noreply@github.com> 1532618320 -0600\n\nRollup merge of #52721 - cramertj:try-poll, r=aturon\n\nstd::ops::Try impl for std::task::Poll\n\nI originally left out the `Try` impl for `Poll` because I was curious if we needed it, and @MajorBreakfast and I had discussed the potential for it to introduce confusion about exactly what control-flow was happening at different points. However, after porting a pretty significant chunk of Fuchsia over to futures 0.3, I discovered that I was *constantly* having to do repetitive matching on `Poll<Result<...>>` or `Poll<Option<Result<...>>>` in order to propagate errors correctly. `try_poll` (propagate `Poll::Ready(Err(..))`s) helped in some places, but it was far more common to need some form of conversion between `Result`, `Poll<Result<...>>`, and `Poll<Option<Result<...>>>`. The `Try` trait conveniently provides all of these conversions in addition to a more concise syntax (`?`), so I'd like to experiment with using these instead.\n\ncc @seanmonstar\n\nr? @aturon\n\nNote: this change means that far more futures 0.1 code can work without significant changes since it papers over the fact that `Result` is no longer at the top-level when using `Stream` and `Future` (since it's now `Poll<Result<...>>` or `Poll<Option<Result<...>>>` instead of `Result<Poll<..>>` and `Result<Poll<Option<...>>>`).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/858adfe21dead8b0b2df16a5fc3ac4e8759a9c4e", "html_url": "https://github.com/rust-lang/rust/commit/858adfe21dead8b0b2df16a5fc3ac4e8759a9c4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/858adfe21dead8b0b2df16a5fc3ac4e8759a9c4e/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "091a10e0eb5a86ace454b23c7ed2f1aaefb5b969", "url": "https://api.github.com/repos/rust-lang/rust/commits/091a10e0eb5a86ace454b23c7ed2f1aaefb5b969", "html_url": "https://github.com/rust-lang/rust/commit/091a10e0eb5a86ace454b23c7ed2f1aaefb5b969"}, {"sha": "bce8a91f34e63a4ed87a6d6351bf67a82306afbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/bce8a91f34e63a4ed87a6d6351bf67a82306afbd", "html_url": "https://github.com/rust-lang/rust/commit/bce8a91f34e63a4ed87a6d6351bf67a82306afbd"}], "stats": {"total": 115, "additions": 115, "deletions": 0}, "files": [{"sha": "fb027efc6dca0c1a269c0bd15f223aa5e3389252", "filename": "src/libcore/task/poll.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/858adfe21dead8b0b2df16a5fc3ac4e8759a9c4e/src%2Flibcore%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/858adfe21dead8b0b2df16a5fc3ac4e8759a9c4e/src%2Flibcore%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fpoll.rs?ref=858adfe21dead8b0b2df16a5fc3ac4e8759a9c4e", "patch": "@@ -12,6 +12,9 @@\n             reason = \"futures in libcore are unstable\",\n             issue = \"50547\")]\n \n+use ops::Try;\n+use result::Result;\n+\n /// Indicates whether a value is available or if the current task has been\n /// scheduled to receive a wakeup instead.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]\n@@ -39,6 +42,7 @@ impl<T> Poll<T> {\n     }\n \n     /// Returns whether this is `Poll::Ready`\n+    #[inline]\n     pub fn is_ready(&self) -> bool {\n         match *self {\n             Poll::Ready(_) => true,\n@@ -47,6 +51,7 @@ impl<T> Poll<T> {\n     }\n \n     /// Returns whether this is `Poll::Pending`\n+    #[inline]\n     pub fn is_pending(&self) -> bool {\n         !self.is_ready()\n     }\n@@ -81,3 +86,52 @@ impl<T> From<T> for Poll<T> {\n         Poll::Ready(t)\n     }\n }\n+\n+impl<T, E> Try for Poll<Result<T, E>> {\n+    type Ok = Poll<T>;\n+    type Error = E;\n+\n+    #[inline]\n+    fn into_result(self) -> Result<Self::Ok, Self::Error> {\n+        match self {\n+            Poll::Ready(Ok(x)) => Ok(Poll::Ready(x)),\n+            Poll::Ready(Err(e)) => Err(e),\n+            Poll::Pending => Ok(Poll::Pending),\n+        }\n+    }\n+\n+    #[inline]\n+    fn from_error(e: Self::Error) -> Self {\n+        Poll::Ready(Err(e))\n+    }\n+\n+    #[inline]\n+    fn from_ok(x: Self::Ok) -> Self {\n+        x.map(Ok)\n+    }\n+}\n+\n+impl<T, E> Try for Poll<Option<Result<T, E>>> {\n+    type Ok = Poll<Option<T>>;\n+    type Error = E;\n+\n+    #[inline]\n+    fn into_result(self) -> Result<Self::Ok, Self::Error> {\n+        match self {\n+            Poll::Ready(Some(Ok(x))) => Ok(Poll::Ready(Some(x))),\n+            Poll::Ready(Some(Err(e))) => Err(e),\n+            Poll::Ready(None) => Ok(Poll::Ready(None)),\n+            Poll::Pending => Ok(Poll::Pending),\n+        }\n+    }\n+\n+    #[inline]\n+    fn from_error(e: Self::Error) -> Self {\n+        Poll::Ready(Some(Err(e)))\n+    }\n+\n+    #[inline]\n+    fn from_ok(x: Self::Ok) -> Self {\n+        x.map(|x| x.map(Ok))\n+    }\n+}"}, {"sha": "0cb058c2b0b6e03f8ca50116dfb08d9a2f341990", "filename": "src/test/ui/try-poll.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/858adfe21dead8b0b2df16a5fc3ac4e8759a9c4e/src%2Ftest%2Fui%2Ftry-poll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/858adfe21dead8b0b2df16a5fc3ac4e8759a9c4e/src%2Ftest%2Fui%2Ftry-poll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-poll.rs?ref=858adfe21dead8b0b2df16a5fc3ac4e8759a9c4e", "patch": "@@ -0,0 +1,61 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+#![allow(dead_code, unused)]\n+#![feature(futures_api)]\n+\n+use std::task::Poll;\n+\n+struct K;\n+struct E;\n+\n+fn as_result() -> Result<(), E> {\n+    // From Result\n+    let K = Ok::<K, E>(K)?;\n+\n+    // From Poll<Result>\n+    let _: Poll<K> = Poll::Ready::<Result<K, E>>(Ok(K))?;\n+\n+    // From Poll<Option<Result>>\n+    let _: Poll<Option<K>> = Poll::Ready::<Option<Result<K, E>>>(None)?;\n+\n+    Ok(())\n+}\n+\n+fn as_poll_result() -> Poll<Result<(), E>> {\n+    // From Result\n+    let K = Ok::<K, E>(K)?;\n+\n+    // From Poll<Result>\n+    let _: Poll<K> = Poll::Ready::<Result<K, E>>(Ok(K))?;\n+\n+    // From Poll<Option<Result>>\n+    let _: Poll<Option<K>> = Poll::Ready::<Option<Result<K, E>>>(None)?;\n+\n+    Poll::Ready(Ok(()))\n+}\n+\n+fn as_poll_option_result() -> Poll<Option<Result<(), E>>> {\n+    // From Result\n+    let K = Ok::<K, E>(K)?;\n+\n+    // From Poll<Result>\n+    let _: Poll<K> = Poll::Ready::<Result<K, E>>(Ok(K))?;\n+\n+    // From Poll<Option<Result>>\n+    let _: Poll<Option<K>> = Poll::Ready::<Option<Result<K, E>>>(None)?;\n+\n+    Poll::Ready(Some(Ok(())))\n+}\n+\n+fn main() {\n+}"}]}