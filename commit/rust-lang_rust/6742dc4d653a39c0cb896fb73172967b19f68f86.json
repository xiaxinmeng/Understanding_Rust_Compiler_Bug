{"sha": "6742dc4d653a39c0cb896fb73172967b19f68f86", "node_id": "C_kwDOAAsO6NoAKDY3NDJkYzRkNjUzYTM5YzBjYjg5NmZiNzMxNzI5NjdiMTlmNjhmODY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-07T18:33:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-07T18:33:28Z"}, "message": "Rollup merge of #98994 - kons-9:dont_use_process_exit, r=jyn514\n\nreplace process exit with more detailed exit in src/bootstrap/*.rs\n\nFixes [#98830](https://github.com/rust-lang/rust/issues/98830)\n\nI implemeted \"detail_exit.rs\" in lib.rs, and replace all of std::process::exit.\nSo, error code should panic in test code.\n```\n// lib.rs\npub fn detail_exit(code: i32) -> ! {\n    // Successful exit\n    if code == 0 {\n        std::process::exit(0);\n    }\n    if cfg!(test) {\n        panic!(\"status code: {}\", code);\n    } else {\n        std::panic::resume_unwind(Box::new(code));\n    }\n}\n```\n\n<details>\n<summary>% rg \"exit\\(\" src/bootstrap/*.rs</summary>\n\n```\nbuilder.rs\n351:            crate::detail_exit(1);\n1000:            crate::detail_exit(1);\n1429:                    crate::detail_exit(1);\n\ncompile.rs\n1331:        crate::detail_exit(1);\n\nconfig.rs\n818:                    crate::detail_exit(2);\n1488:        crate::detail_exit(1);\n\nflags.rs\n263:                crate::detail_exit(exit_code);\n349:            crate::detail_exit(exit_code);\n381:            crate::detail_exit(1);\n602:                        crate::detail_exit(1);\n616:                crate::detail_exit(1);\n807:            crate::detail_exit(1);\n\nformat.rs\n35:            crate::detail_exit(1);\n117:        crate::detail_exit(1);\n\nlib.rs\n714:            detail_exit(1);\n1620:                detail_exit(1);\n1651:pub fn detail_exit(code: i32) -> ! {\n1654:        std::process::exit(0);\n\nsanity.rs\n107:            crate::detail_exit(1);\n\nsetup.rs\n97:        crate::detail_exit(1);\n290:            crate::detail_exit(1);\n\ntest.rs\n676:            crate::detail_exit(1);\n1024:                crate::detail_exit(1);\n1254:            crate::detail_exit(1);\n\ntool.rs\n207:                crate::detail_exit(1);\n\ntoolstate.rs\n96:    crate::detail_exit(3);\n111:            crate::detail_exit(1);\n182:            crate::detail_exit(1);\n228:            crate::detail_exit(1);\n\nutil.rs\n339:        crate::detail_exit(1);\n378:        crate::detail_exit(1);\n468:    crate::detail_exit(1);\n```\n</details>", "tree": {"sha": "e491f3dc7e9e30842faa4ce70d6de0622c581ffe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e491f3dc7e9e30842faa4ce70d6de0622c581ffe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6742dc4d653a39c0cb896fb73172967b19f68f86", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJixyb4CRBK7hj4Ov3rIwAAhXMIAJdF3RuZqh7cFR5fRQ1jlc3a\nhKxDAGVIe+BhVeS7Wer0ylKXti5vkdU4q9nOz9w2GhhBAVDt7XZ2NLJKI54/HCsl\nxoqDhff5wGt+07abcQtQ0YM7oxs+hKxlggbdrm4JE78fflU8IR8uwujR8ttI5qW/\n54EbPt7BAOnolubGvBg/02OiUFmEvWqcZU3XdXuxSIR2OdofRUPIl8KHEZWi7Dkr\n7DCJTx+ARq7MbyT28IQ37/tgmy1/DYJ+IAvZJM9X1xn/2OuifElRB4VkosKAQgWa\njB8HRM+0UcLGXqORSSY1n6z12yhQvGZE1qvgBOObSsoD8TKzvmZ2LCmYxQDdJoo=\n=d8oN\n-----END PGP SIGNATURE-----\n", "payload": "tree e491f3dc7e9e30842faa4ce70d6de0622c581ffe\nparent b4f8537a56993a212721941526ec0c6fd93fb36d\nparent d6de276bd9288cfe7d178ee21dfcbf1229680155\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1657218808 +0200\ncommitter GitHub <noreply@github.com> 1657218808 +0200\n\nRollup merge of #98994 - kons-9:dont_use_process_exit, r=jyn514\n\nreplace process exit with more detailed exit in src/bootstrap/*.rs\n\nFixes [#98830](https://github.com/rust-lang/rust/issues/98830)\n\nI implemeted \"detail_exit.rs\" in lib.rs, and replace all of std::process::exit.\nSo, error code should panic in test code.\n```\n// lib.rs\npub fn detail_exit(code: i32) -> ! {\n    // Successful exit\n    if code == 0 {\n        std::process::exit(0);\n    }\n    if cfg!(test) {\n        panic!(\"status code: {}\", code);\n    } else {\n        std::panic::resume_unwind(Box::new(code));\n    }\n}\n```\n\n<details>\n<summary>% rg \"exit\\(\" src/bootstrap/*.rs</summary>\n\n```\nbuilder.rs\n351:            crate::detail_exit(1);\n1000:            crate::detail_exit(1);\n1429:                    crate::detail_exit(1);\n\ncompile.rs\n1331:        crate::detail_exit(1);\n\nconfig.rs\n818:                    crate::detail_exit(2);\n1488:        crate::detail_exit(1);\n\nflags.rs\n263:                crate::detail_exit(exit_code);\n349:            crate::detail_exit(exit_code);\n381:            crate::detail_exit(1);\n602:                        crate::detail_exit(1);\n616:                crate::detail_exit(1);\n807:            crate::detail_exit(1);\n\nformat.rs\n35:            crate::detail_exit(1);\n117:        crate::detail_exit(1);\n\nlib.rs\n714:            detail_exit(1);\n1620:                detail_exit(1);\n1651:pub fn detail_exit(code: i32) -> ! {\n1654:        std::process::exit(0);\n\nsanity.rs\n107:            crate::detail_exit(1);\n\nsetup.rs\n97:        crate::detail_exit(1);\n290:            crate::detail_exit(1);\n\ntest.rs\n676:            crate::detail_exit(1);\n1024:                crate::detail_exit(1);\n1254:            crate::detail_exit(1);\n\ntool.rs\n207:                crate::detail_exit(1);\n\ntoolstate.rs\n96:    crate::detail_exit(3);\n111:            crate::detail_exit(1);\n182:            crate::detail_exit(1);\n228:            crate::detail_exit(1);\n\nutil.rs\n339:        crate::detail_exit(1);\n378:        crate::detail_exit(1);\n468:    crate::detail_exit(1);\n```\n</details>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6742dc4d653a39c0cb896fb73172967b19f68f86", "html_url": "https://github.com/rust-lang/rust/commit/6742dc4d653a39c0cb896fb73172967b19f68f86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6742dc4d653a39c0cb896fb73172967b19f68f86/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4f8537a56993a212721941526ec0c6fd93fb36d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4f8537a56993a212721941526ec0c6fd93fb36d", "html_url": "https://github.com/rust-lang/rust/commit/b4f8537a56993a212721941526ec0c6fd93fb36d"}, {"sha": "d6de276bd9288cfe7d178ee21dfcbf1229680155", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6de276bd9288cfe7d178ee21dfcbf1229680155", "html_url": "https://github.com/rust-lang/rust/commit/d6de276bd9288cfe7d178ee21dfcbf1229680155"}], "stats": {"total": 89, "additions": 48, "deletions": 41}, "files": [{"sha": "2e89abe202cf6690cd0ee5059dd5ad42f4b896b0", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6742dc4d653a39c0cb896fb73172967b19f68f86/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6742dc4d653a39c0cb896fb73172967b19f68f86/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=6742dc4d653a39c0cb896fb73172967b19f68f86", "patch": "@@ -346,11 +346,7 @@ impl StepDescription {\n             eprintln!(\n                 \"note: if you are adding a new Step to bootstrap itself, make sure you register it with `describe!`\"\n             );\n-            #[cfg(not(test))]\n-            std::process::exit(1);\n-            #[cfg(test)]\n-            // so we can use #[should_panic]\n-            panic!()\n+            crate::detail_exit(1);\n         }\n     }\n }\n@@ -1008,7 +1004,7 @@ impl<'a> Builder<'a> {\n             if !help_on_error.is_empty() {\n                 eprintln!(\"{}\", help_on_error);\n             }\n-            std::process::exit(1);\n+            crate::detail_exit(1);\n         }\n     }\n \n@@ -1437,7 +1433,7 @@ impl<'a> Builder<'a> {\n                         \"error: `x.py clippy` requires a host `rustc` toolchain with the `clippy` component\"\n                     );\n                     eprintln!(\"help: try `rustup component add clippy`\");\n-                    std::process::exit(1);\n+                    crate::detail_exit(1);\n                 });\n                 if !t!(std::str::from_utf8(&output.stdout)).contains(\"nightly\") {\n                     rustflags.arg(\"--cfg=bootstrap\");"}, {"sha": "ed5023ac61b0fdbf57923680cc21fa061ddbdd1e", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6742dc4d653a39c0cb896fb73172967b19f68f86/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6742dc4d653a39c0cb896fb73172967b19f68f86/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=6742dc4d653a39c0cb896fb73172967b19f68f86", "patch": "@@ -13,7 +13,7 @@ use std::fs;\n use std::io::prelude::*;\n use std::io::BufReader;\n use std::path::{Path, PathBuf};\n-use std::process::{exit, Command, Stdio};\n+use std::process::{Command, Stdio};\n use std::str;\n \n use serde::Deserialize;\n@@ -1377,7 +1377,7 @@ pub fn run_cargo(\n     });\n \n     if !ok {\n-        exit(1);\n+        crate::detail_exit(1);\n     }\n \n     // Ok now we need to actually find all the files listed in `toplevel`. We've"}, {"sha": "e71fbff14dd121ed0b7cefe154a93b28abf19cc1", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6742dc4d653a39c0cb896fb73172967b19f68f86/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6742dc4d653a39c0cb896fb73172967b19f68f86/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=6742dc4d653a39c0cb896fb73172967b19f68f86", "patch": "@@ -11,7 +11,7 @@ use std::ffi::OsStr;\n use std::fmt;\n use std::fs;\n use std::path::{Path, PathBuf};\n-use std::process::{exit, Command};\n+use std::process::Command;\n use std::str::FromStr;\n \n use crate::builder::{Builder, TaskPath};\n@@ -805,8 +805,6 @@ impl Config {\n         let get_toml = |_| TomlConfig::default();\n         #[cfg(not(test))]\n         let get_toml = |file: &Path| {\n-            use std::process;\n-\n             let contents =\n                 t!(fs::read_to_string(file), format!(\"config file {} not found\", file.display()));\n             // Deserialize to Value and then TomlConfig to prevent the Deserialize impl of\n@@ -817,7 +815,7 @@ impl Config {\n                 Ok(table) => table,\n                 Err(err) => {\n                     eprintln!(\"failed to parse TOML configuration '{}': {}\", file.display(), err);\n-                    process::exit(2);\n+                    crate::detail_exit(2);\n                 }\n             }\n         };\n@@ -1487,7 +1485,7 @@ fn download_ci_rustc_commit(\n         println!(\"help: maybe your repository history is too shallow?\");\n         println!(\"help: consider disabling `download-rustc`\");\n         println!(\"help: or fetch enough history to include one upstream commit\");\n-        exit(1);\n+        crate::detail_exit(1);\n     }\n \n     // Warn if there were changes to the compiler or standard library since the ancestor commit."}, {"sha": "eec19ab4fc90f3e8eaeef10e371a725921ec61e6", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6742dc4d653a39c0cb896fb73172967b19f68f86/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6742dc4d653a39c0cb896fb73172967b19f68f86/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=6742dc4d653a39c0cb896fb73172967b19f68f86", "patch": "@@ -4,7 +4,6 @@\n //! has various flags to configure how it's run.\n \n use std::path::PathBuf;\n-use std::process;\n \n use getopts::Options;\n \n@@ -261,7 +260,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n                 // subcommand.\n                 println!(\"{}\\n\", subcommand_help);\n                 let exit_code = if args.is_empty() { 0 } else { 1 };\n-                process::exit(exit_code);\n+                crate::detail_exit(exit_code);\n             }\n         };\n \n@@ -347,7 +346,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n             } else if verbose {\n                 panic!(\"No paths available for subcommand `{}`\", subcommand.as_str());\n             }\n-            process::exit(exit_code);\n+            crate::detail_exit(exit_code);\n         };\n \n         // Done specifying what options are possible, so do the getopts parsing\n@@ -379,7 +378,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n                 \"Sorry, I couldn't figure out which subcommand you were trying to specify.\\n\\\n                  You may need to move some options to after the subcommand.\\n\"\n             );\n-            process::exit(1);\n+            crate::detail_exit(1);\n         }\n         // Extra help text for some commands\n         match subcommand {\n@@ -600,7 +599,7 @@ Arguments:\n                         eprintln!(\"error: {}\", err);\n                         eprintln!(\"help: the available profiles are:\");\n                         eprint!(\"{}\", Profile::all_for_help(\"- \"));\n-                        std::process::exit(1);\n+                        crate::detail_exit(1);\n                     })\n                 } else {\n                     t!(crate::setup::interactive_path())\n@@ -614,7 +613,7 @@ Arguments:\n                 || matches.opt_str(\"keep-stage-std\").is_some()\n             {\n                 eprintln!(\"--keep-stage not yet supported for x.py check\");\n-                process::exit(1);\n+                crate::detail_exit(1);\n             }\n         }\n \n@@ -805,7 +804,7 @@ fn parse_deny_warnings(matches: &getopts::Matches) -> Option<bool> {\n         Some(\"warn\") => Some(false),\n         Some(value) => {\n             eprintln!(r#\"invalid value for --warnings: {:?}, expected \"warn\" or \"deny\"\"#, value,);\n-            process::exit(1);\n+            crate::detail_exit(1);\n         }\n         None => None,\n     }"}, {"sha": "f25977c1d4636bfe4d073b858cce5849bd7c39eb", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6742dc4d653a39c0cb896fb73172967b19f68f86/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6742dc4d653a39c0cb896fb73172967b19f68f86/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=6742dc4d653a39c0cb896fb73172967b19f68f86", "patch": "@@ -32,7 +32,7 @@ fn rustfmt(src: &Path, rustfmt: &Path, paths: &[PathBuf], check: bool) -> impl F\n                         code, run `./x.py fmt` instead.\",\n                 cmd_debug,\n             );\n-            std::process::exit(1);\n+            crate::detail_exit(1);\n         }\n     }\n }\n@@ -114,7 +114,7 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n \n     let rustfmt_path = build.initial_rustfmt().unwrap_or_else(|| {\n         eprintln!(\"./x.py fmt is not supported on this channel\");\n-        std::process::exit(1);\n+        crate::detail_exit(1);\n     });\n     assert!(rustfmt_path.exists(), \"{}\", rustfmt_path.display());\n     let src = build.src.clone();"}, {"sha": "82025efcbe0e5f599ff959b8643cd889cc15b19e", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6742dc4d653a39c0cb896fb73172967b19f68f86/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6742dc4d653a39c0cb896fb73172967b19f68f86/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=6742dc4d653a39c0cb896fb73172967b19f68f86", "patch": "@@ -109,7 +109,7 @@ use std::env;\n use std::fs::{self, File};\n use std::io;\n use std::path::{Path, PathBuf};\n-use std::process::{self, Command};\n+use std::process::Command;\n use std::str;\n \n use filetime::FileTime;\n@@ -711,7 +711,7 @@ impl Build {\n             for failure in failures.iter() {\n                 eprintln!(\"  - {}\\n\", failure);\n             }\n-            process::exit(1);\n+            detail_exit(1);\n         }\n \n         #[cfg(feature = \"build-metrics\")]\n@@ -1617,7 +1617,7 @@ Alternatively, set `download-ci-llvm = true` in that `[llvm]` section\n to download LLVM rather than building it.\n \"\n                 );\n-                std::process::exit(1);\n+                detail_exit(1);\n             }\n         }\n \n@@ -1646,6 +1646,20 @@ fn chmod(path: &Path, perms: u32) {\n #[cfg(windows)]\n fn chmod(_path: &Path, _perms: u32) {}\n \n+/// If code is not 0 (successful exit status), exit status is 101 (rust's default error code.)\n+/// If the test is running and code is an error code, it will cause a panic.\n+fn detail_exit(code: i32) -> ! {\n+    // Successful exit\n+    if code == 0 {\n+        std::process::exit(0);\n+    }\n+    if cfg!(test) {\n+        panic!(\"status code: {}\", code);\n+    } else {\n+        std::panic::resume_unwind(Box::new(code));\n+    }\n+}\n+\n impl Compiler {\n     pub fn with_stage(mut self, stage: u32) -> Compiler {\n         self.stage = stage;"}, {"sha": "cae41286f0871168f482844e570fc78e25455e6d", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6742dc4d653a39c0cb896fb73172967b19f68f86/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6742dc4d653a39c0cb896fb73172967b19f68f86/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=6742dc4d653a39c0cb896fb73172967b19f68f86", "patch": "@@ -104,7 +104,7 @@ You should install cmake, or set `download-ci-llvm = true` in the\n than building it.\n \"\n             );\n-            std::process::exit(1);\n+            crate::detail_exit(1);\n         }\n     }\n "}, {"sha": "740c12ed725e1ee8e61d54b766e04da9a7c97fd1", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6742dc4d653a39c0cb896fb73172967b19f68f86/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6742dc4d653a39c0cb896fb73172967b19f68f86/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=6742dc4d653a39c0cb896fb73172967b19f68f86", "patch": "@@ -94,7 +94,7 @@ pub fn setup(config: &Config, profile: Profile) {\n             \"note: this will use the configuration in {}\",\n             profile.include_path(&config.src).display()\n         );\n-        std::process::exit(1);\n+        crate::detail_exit(1);\n     }\n \n     let settings = format!(\n@@ -287,7 +287,7 @@ pub fn interactive_path() -> io::Result<Profile> {\n         io::stdin().read_line(&mut input)?;\n         if input.is_empty() {\n             eprintln!(\"EOF on stdin, when expecting answer to question.  Giving up.\");\n-            std::process::exit(1);\n+            crate::detail_exit(1);\n         }\n         break match parse_with_abbrev(&input) {\n             Ok(profile) => profile,"}, {"sha": "4c6b5ba0afc085c16761a2f56691eaa047a24ed8", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6742dc4d653a39c0cb896fb73172967b19f68f86/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6742dc4d653a39c0cb896fb73172967b19f68f86/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=6742dc4d653a39c0cb896fb73172967b19f68f86", "patch": "@@ -673,7 +673,7 @@ impl Step for Clippy {\n         }\n \n         if !builder.config.cmd.bless() {\n-            std::process::exit(1);\n+            crate::detail_exit(1);\n         }\n \n         let mut cargo = builder.cargo(compiler, Mode::ToolRustc, SourceType::InTree, host, \"run\");\n@@ -1021,7 +1021,7 @@ help: to skip test's attempt to check tidiness, pass `--exclude src/tools/tidy`\n                     PATH = inferred_rustfmt_dir.display(),\n                     CHAN = builder.config.channel,\n                 );\n-                std::process::exit(1);\n+                crate::detail_exit(1);\n             }\n             crate::format::format(&builder, !builder.config.cmd.bless(), &[]);\n         }\n@@ -1251,7 +1251,7 @@ help: to test the compiler, use `--stage 1` instead\n help: to test the standard library, use `--stage 0 library/std` instead\n note: if you're sure you want to do this, please open an issue as to why. In the meantime, you can override this with `COMPILETEST_FORCE_STAGE0=1`.\"\n             );\n-            std::process::exit(1);\n+            crate::detail_exit(1);\n         }\n \n         let compiler = self.compiler;"}, {"sha": "23832b6c43e4216db4f5605080fedbf5515fae8f", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6742dc4d653a39c0cb896fb73172967b19f68f86/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6742dc4d653a39c0cb896fb73172967b19f68f86/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=6742dc4d653a39c0cb896fb73172967b19f68f86", "patch": "@@ -2,7 +2,7 @@ use std::collections::HashSet;\n use std::env;\n use std::fs;\n use std::path::{Path, PathBuf};\n-use std::process::{exit, Command};\n+use std::process::Command;\n \n use crate::builder::{Builder, Cargo as CargoCommand, RunConfig, ShouldRun, Step};\n use crate::channel::GitInfo;\n@@ -204,7 +204,7 @@ impl Step for ToolBuild {\n \n         if !is_expected {\n             if !is_optional_tool {\n-                exit(1);\n+                crate::detail_exit(1);\n             } else {\n                 None\n             }"}, {"sha": "2cfeae7dc785852cf344d7772a6ffdc8be650e59", "filename": "src/bootstrap/toolstate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6742dc4d653a39c0cb896fb73172967b19f68f86/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6742dc4d653a39c0cb896fb73172967b19f68f86/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=6742dc4d653a39c0cb896fb73172967b19f68f86", "patch": "@@ -93,7 +93,7 @@ fn print_error(tool: &str, submodule: &str) {\n     eprintln!(\"If you do NOT intend to update '{}', please ensure you did not accidentally\", tool);\n     eprintln!(\"change the submodule at '{}'. You may ask your reviewer for the\", submodule);\n     eprintln!(\"proper steps.\");\n-    std::process::exit(3);\n+    crate::detail_exit(3);\n }\n \n fn check_changed_files(toolstates: &HashMap<Box<str>, ToolState>) {\n@@ -108,7 +108,7 @@ fn check_changed_files(toolstates: &HashMap<Box<str>, ToolState>) {\n         Ok(o) => o,\n         Err(e) => {\n             eprintln!(\"Failed to get changed files: {:?}\", e);\n-            std::process::exit(1);\n+            crate::detail_exit(1);\n         }\n     };\n \n@@ -179,7 +179,7 @@ impl Step for ToolStateCheck {\n         }\n \n         if did_error {\n-            std::process::exit(1);\n+            crate::detail_exit(1);\n         }\n \n         check_changed_files(&toolstates);\n@@ -225,7 +225,7 @@ impl Step for ToolStateCheck {\n         }\n \n         if did_error {\n-            std::process::exit(1);\n+            crate::detail_exit(1);\n         }\n \n         if builder.config.channel == \"nightly\" && env::var_os(\"TOOLSTATE_PUBLISH\").is_some() {"}, {"sha": "b627e50378994b1dbe64d6fedc4cfe3b076406d1", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6742dc4d653a39c0cb896fb73172967b19f68f86/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6742dc4d653a39c0cb896fb73172967b19f68f86/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=6742dc4d653a39c0cb896fb73172967b19f68f86", "patch": "@@ -336,7 +336,7 @@ pub fn is_valid_test_suite_arg<'a, P: AsRef<Path>>(\n \n pub fn run(cmd: &mut Command, print_cmd_on_fail: bool) {\n     if !try_run(cmd, print_cmd_on_fail) {\n-        std::process::exit(1);\n+        crate::detail_exit(1);\n     }\n }\n \n@@ -375,7 +375,7 @@ pub fn check_run(cmd: &mut Command, print_cmd_on_fail: bool) -> bool {\n \n pub fn run_suppressed(cmd: &mut Command) {\n     if !try_run_suppressed(cmd) {\n-        std::process::exit(1);\n+        crate::detail_exit(1);\n     }\n }\n \n@@ -465,7 +465,7 @@ fn dir_up_to_date(src: &Path, threshold: SystemTime) -> bool {\n \n fn fail(s: &str) -> ! {\n     eprintln!(\"\\n\\n{}\\n\\n\", s);\n-    std::process::exit(1);\n+    crate::detail_exit(1);\n }\n \n /// Copied from `std::path::absolute` until it stabilizes."}]}