{"sha": "4fa202d23b4c8c81b8ac6cf89cf843d35854d437", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYTIwMmQyM2I0YzhjODFiOGFjNmNmODljZjg0M2QzNTg1NGQ0Mzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-30T10:57:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-30T10:57:21Z"}, "message": "Auto merge of #46299 - michaelwoerister:incr-comp-krimskrams, r=nikomatsakis\n\nincr.comp.: Some preparatory work for caching more query results.\n\nThis PR\n* adds and updates some encoding/decoding routines for various query result types so they can be cached later, and\n* adds missing `[input]` annotations for a few `DepNode` variants.\n\nThe situation around having to explicitly mark dep-nodes/queries as inputs is not really satisfactory. I hope we can find a way of making this more fool-proof in the future.\n\nr? @nikomatsakis", "tree": {"sha": "916034378cbd02a45bb0f706b8fca0c8a838a590", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/916034378cbd02a45bb0f706b8fca0c8a838a590"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fa202d23b4c8c81b8ac6cf89cf843d35854d437", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fa202d23b4c8c81b8ac6cf89cf843d35854d437", "html_url": "https://github.com/rust-lang/rust/commit/4fa202d23b4c8c81b8ac6cf89cf843d35854d437", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6b010f98beae1591ea6e8e21008de97d6cf5be4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6b010f98beae1591ea6e8e21008de97d6cf5be4", "html_url": "https://github.com/rust-lang/rust/commit/d6b010f98beae1591ea6e8e21008de97d6cf5be4"}, {"sha": "3bb25d6bfb651570c0dc8254495f30718eb9ac46", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bb25d6bfb651570c0dc8254495f30718eb9ac46", "html_url": "https://github.com/rust-lang/rust/commit/3bb25d6bfb651570c0dc8254495f30718eb9ac46"}], "stats": {"total": 194, "additions": 147, "deletions": 47}, "files": [{"sha": "1fc3b04adb86ddf65dbe66e5c9726a80431b86bb", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=4fa202d23b4c8c81b8ac6cf89cf843d35854d437", "patch": "@@ -562,7 +562,7 @@ define_dep_nodes!( <'tcx>\n     [] IsPanicRuntime(CrateNum),\n     [] IsCompilerBuiltins(CrateNum),\n     [] HasGlobalAllocator(CrateNum),\n-    [] ExternCrate(DefId),\n+    [input] ExternCrate(DefId),\n     [eval_always] LintLevels,\n     [] Specializes { impl1: DefId, impl2: DefId },\n     [input] InScopeTraits(DefIndex),\n@@ -602,8 +602,8 @@ define_dep_nodes!( <'tcx>\n     [] MissingLangItems(CrateNum),\n     [] ExternConstBody(DefId),\n     [] VisibleParentMap,\n-    [] MissingExternCrateItem(CrateNum),\n-    [] UsedCrateSource(CrateNum),\n+    [input] MissingExternCrateItem(CrateNum),\n+    [input] UsedCrateSource(CrateNum),\n     [input] PostorderCnums,\n     [input] HasCloneClosures(CrateNum),\n     [input] HasCopyClosures(CrateNum),\n@@ -619,7 +619,7 @@ define_dep_nodes!( <'tcx>\n     [input] Freevars(DefId),\n     [input] MaybeUnusedTraitImport(DefId),\n     [input] MaybeUnusedExternCrates,\n-    [] StabilityIndex,\n+    [eval_always] StabilityIndex,\n     [input] AllCrateNums,\n     [] ExportedSymbols(CrateNum),\n     [eval_always] CollectAndPartitionTranslationItems,"}, {"sha": "424259de4fd1dfa0be8dad6915fcd6a3fd9ca855", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=4fa202d23b4c8c81b8ac6cf89cf843d35854d437", "patch": "@@ -98,7 +98,7 @@ for mir::Terminator<'gcx> {\n     }\n }\n \n-impl<'gcx, T> HashStable<StableHashingContext<'gcx>> for mir::ClearOnDecode<T>\n+impl<'gcx, T> HashStable<StableHashingContext<'gcx>> for mir::ClearCrossCrate<T>\n     where T: HashStable<StableHashingContext<'gcx>>\n {\n     #[inline]\n@@ -107,8 +107,8 @@ impl<'gcx, T> HashStable<StableHashingContext<'gcx>> for mir::ClearOnDecode<T>\n                                           hasher: &mut StableHasher<W>) {\n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match *self {\n-            mir::ClearOnDecode::Clear => {}\n-            mir::ClearOnDecode::Set(ref value) => {\n+            mir::ClearCrossCrate::Clear => {}\n+            mir::ClearCrossCrate::Set(ref value) => {\n                 value.hash_stable(hcx, hasher);\n             }\n         }"}, {"sha": "380f79361e27f5466e669332f0229044891cbf12", "filename": "src/librustc/middle/borrowck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibrustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibrustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck.rs?ref=4fa202d23b4c8c81b8ac6cf89cf843d35854d437", "patch": "@@ -15,6 +15,7 @@ use util::nodemap::FxHashSet;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHasherResult};\n \n+#[derive(Debug, RustcEncodable, RustcDecodable)]\n pub struct BorrowCheckResult {\n     pub used_mut_nodes: FxHashSet<HirId>,\n }"}, {"sha": "4946ef93c7dde0903d785ed5c021e531e80d3dec", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=4fa202d23b4c8c81b8ac6cf89cf843d35854d437", "patch": "@@ -36,6 +36,7 @@ use std::ops::{Index, IndexMut};\n use std::rc::Rc;\n use std::vec::IntoIter;\n use syntax::ast::{self, Name};\n+use syntax::symbol::InternedString;\n use syntax_pos::Span;\n \n mod cache;\n@@ -75,7 +76,7 @@ pub struct Mir<'tcx> {\n \n     /// Crate-local information for each visibility scope, that can't (and\n     /// needn't) be tracked across crates.\n-    pub visibility_scope_info: ClearOnDecode<IndexVec<VisibilityScope, VisibilityScopeInfo>>,\n+    pub visibility_scope_info: ClearCrossCrate<IndexVec<VisibilityScope, VisibilityScopeInfo>>,\n \n     /// Rvalues promoted from this function, such as borrows of constants.\n     /// Each of them is the Mir of a constant with the fn's type parameters\n@@ -129,8 +130,8 @@ pub const START_BLOCK: BasicBlock = BasicBlock(0);\n impl<'tcx> Mir<'tcx> {\n     pub fn new(basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n                visibility_scopes: IndexVec<VisibilityScope, VisibilityScopeData>,\n-               visibility_scope_info: ClearOnDecode<IndexVec<VisibilityScope,\n-                                                             VisibilityScopeInfo>>,\n+               visibility_scope_info: ClearCrossCrate<IndexVec<VisibilityScope,\n+                                                               VisibilityScopeInfo>>,\n                promoted: IndexVec<Promoted, Mir<'tcx>>,\n                yield_ty: Option<Ty<'tcx>>,\n                local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n@@ -283,15 +284,15 @@ impl<'tcx> Mir<'tcx> {\n     }\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct VisibilityScopeInfo {\n     /// A NodeId with lint levels equivalent to this scope's lint levels.\n     pub lint_root: ast::NodeId,\n     /// The unsafe block that contains this node.\n     pub safety: Safety,\n }\n \n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable)]\n pub enum Safety {\n     Safe,\n     /// Unsafe because of a PushUnsafeBlock\n@@ -335,22 +336,13 @@ impl<'tcx> IndexMut<BasicBlock> for Mir<'tcx> {\n }\n \n #[derive(Clone, Debug)]\n-pub enum ClearOnDecode<T> {\n+pub enum ClearCrossCrate<T> {\n     Clear,\n     Set(T)\n }\n \n-impl<T> serialize::Encodable for ClearOnDecode<T> {\n-    fn encode<S: serialize::Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        serialize::Encodable::encode(&(), s)\n-    }\n-}\n-\n-impl<T> serialize::Decodable for ClearOnDecode<T> {\n-    fn decode<D: serialize::Decoder>(d: &mut D) -> Result<Self, D::Error> {\n-        serialize::Decodable::decode(d).map(|()| ClearOnDecode::Clear)\n-    }\n-}\n+impl<T: serialize::Encodable> serialize::UseSpecializedEncodable for ClearCrossCrate<T> {}\n+impl<T: serialize::Decodable> serialize::UseSpecializedDecodable for ClearCrossCrate<T> {}\n \n /// Grouped information about the source code origin of a MIR entity.\n /// Intended to be inspected by diagnostics and debuginfo.\n@@ -1733,21 +1725,21 @@ impl Location {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub enum UnsafetyViolationKind {\n     General,\n     ExternStatic(ast::NodeId),\n     BorrowPacked(ast::NodeId),\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct UnsafetyViolation {\n     pub source_info: SourceInfo,\n-    pub description: &'static str,\n+    pub description: InternedString,\n     pub kind: UnsafetyViolationKind,\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct UnsafetyCheckResult {\n     /// Violations that are propagated *upwards* from this function\n     pub violations: Rc<[UnsafetyViolation]>,"}, {"sha": "56754bbc13ed4403c8ff5f74b7de72010d648f4b", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=4fa202d23b4c8c81b8ac6cf89cf843d35854d437", "patch": "@@ -1124,11 +1124,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn stability(self) -> Rc<stability::Index<'tcx>> {\n-        // FIXME(#42293) we should actually track this, but fails too many tests\n-        // today.\n-        self.dep_graph.with_ignore(|| {\n-            self.stability_index(LOCAL_CRATE)\n-        })\n+        self.stability_index(LOCAL_CRATE)\n     }\n \n     pub fn crates(self) -> Rc<Vec<CrateNum>> {"}, {"sha": "01f2374033da8927cd59daf24808c03b3ffb91d9", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=4fa202d23b4c8c81b8ac6cf89cf843d35854d437", "patch": "@@ -15,6 +15,7 @@ use hir::def_id::{CrateNum, DefIndex, DefId, LocalDefId,\n                   RESERVED_FOR_INCR_COMP_CACHE, LOCAL_CRATE};\n use hir::map::definitions::DefPathHash;\n use middle::cstore::CrateStore;\n+use mir;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder, opaque,\n@@ -36,6 +37,9 @@ use ty::context::TyCtxt;\n const PREV_DIAGNOSTICS_TAG: u64 = 0x1234_5678_A1A1_A1A1;\n const QUERY_RESULT_INDEX_TAG: u64 = 0x1234_5678_C3C3_C3C3;\n \n+const TAG_CLEAR_CROSS_CRATE_CLEAR: u8 = 0;\n+const TAG_CLEAR_CROSS_CRATE_SET: u8 = 1;\n+\n /// `OnDiskCache` provides an interface to incr. comp. data cached from the\n /// previous compilation session. This data will eventually include the results\n /// of a few selected queries (like `typeck_tables_of` and `mir_optimized`) and\n@@ -518,12 +522,32 @@ impl<'a, 'tcx, 'x> SpecializedDecoder<hir::HirId> for CacheDecoder<'a, 'tcx, 'x>\n // NodeIds are not stable across compilation sessions, so we store them in their\n // HirId representation. This allows use to map them to the current NodeId.\n impl<'a, 'tcx, 'x> SpecializedDecoder<NodeId> for CacheDecoder<'a, 'tcx, 'x> {\n+    #[inline]\n     fn specialized_decode(&mut self) -> Result<NodeId, Self::Error> {\n         let hir_id = hir::HirId::decode(self)?;\n         Ok(self.tcx().hir.hir_to_node_id(hir_id))\n     }\n }\n \n+impl<'a, 'tcx, 'x, T: Decodable> SpecializedDecoder<mir::ClearCrossCrate<T>>\n+for CacheDecoder<'a, 'tcx, 'x> {\n+    #[inline]\n+    fn specialized_decode(&mut self) -> Result<mir::ClearCrossCrate<T>, Self::Error> {\n+        let discr = u8::decode(self)?;\n+\n+        match discr {\n+            TAG_CLEAR_CROSS_CRATE_CLEAR => Ok(mir::ClearCrossCrate::Clear),\n+            TAG_CLEAR_CROSS_CRATE_SET => {\n+                let val = T::decode(self)?;\n+                Ok(mir::ClearCrossCrate::Set(val))\n+            }\n+            _ => {\n+                unreachable!()\n+            }\n+        }\n+    }\n+}\n+\n //- ENCODING -------------------------------------------------------------------\n \n struct CacheEncoder<'enc, 'a, 'tcx, E>\n@@ -658,6 +682,27 @@ impl<'enc, 'a, 'tcx, E> SpecializedEncoder<NodeId> for CacheEncoder<'enc, 'a, 't\n     }\n }\n \n+impl<'enc, 'a, 'tcx, E, T> SpecializedEncoder<mir::ClearCrossCrate<T>>\n+for CacheEncoder<'enc, 'a, 'tcx, E>\n+    where E: 'enc + ty_codec::TyEncoder,\n+          T: Encodable,\n+{\n+    #[inline]\n+    fn specialized_encode(&mut self,\n+                          val: &mir::ClearCrossCrate<T>)\n+                          -> Result<(), Self::Error> {\n+        match *val {\n+            mir::ClearCrossCrate::Clear => {\n+                TAG_CLEAR_CROSS_CRATE_CLEAR.encode(self)\n+            }\n+            mir::ClearCrossCrate::Set(ref val) => {\n+                TAG_CLEAR_CROSS_CRATE_SET.encode(self)?;\n+                val.encode(self)\n+            }\n+        }\n+    }\n+}\n+\n macro_rules! encoder_methods {\n     ($($name:ident($ty:ty);)*) => {\n         $(fn $name(&mut self, value: $ty) -> Result<(), Self::Error> {"}, {"sha": "591d1525c827ab0e91fc0ffd7c7d89257642f15d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4fa202d23b4c8c81b8ac6cf89cf843d35854d437", "patch": "@@ -2702,7 +2702,7 @@ impl<'tcx> DtorckConstraint<'tcx> {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable)]\n pub struct SymbolName {\n     // FIXME: we don't rely on interning or equality here - better have\n     // this be a `&'tcx str`."}, {"sha": "cb80f602a1c7f72dcb02632980896da0a6f62aab", "filename": "src/librustc_data_structures/indexed_set.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibrustc_data_structures%2Findexed_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibrustc_data_structures%2Findexed_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_set.rs?ref=4fa202d23b4c8c81b8ac6cf89cf843d35854d437", "patch": "@@ -17,6 +17,7 @@ use std::slice;\n use bitslice::{BitSlice, Word};\n use bitslice::{bitwise, Union, Subtract, Intersect};\n use indexed_vec::Idx;\n+use rustc_serialize;\n \n /// Represents a set (or packed family of sets), of some element type\n /// E, where each E is identified by some unique index type `T`.\n@@ -35,6 +36,26 @@ impl<T: Idx> Clone for IdxSetBuf<T> {\n     }\n }\n \n+impl<T: Idx> rustc_serialize::Encodable for IdxSetBuf<T> {\n+    fn encode<E: rustc_serialize::Encoder>(&self,\n+                                     encoder: &mut E)\n+                                     -> Result<(), E::Error> {\n+        self.bits.encode(encoder)\n+    }\n+}\n+\n+impl<T: Idx> rustc_serialize::Decodable for IdxSetBuf<T> {\n+    fn decode<D: rustc_serialize::Decoder>(d: &mut D) -> Result<IdxSetBuf<T>, D::Error> {\n+        let words: Vec<Word> = rustc_serialize::Decodable::decode(d)?;\n+\n+        Ok(IdxSetBuf {\n+            _pd: PhantomData,\n+            bits: words,\n+        })\n+    }\n+}\n+\n+\n // pnkfelix wants to have this be `IdxSet<T>([Word]) and then pass\n // around `&mut IdxSet<T>` or `&IdxSet<T>`.\n //"}, {"sha": "eb2bcfc93c5fb15e9869e4fa8540f2d998d73fcd", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=4fa202d23b4c8c81b8ac6cf89cf843d35854d437", "patch": "@@ -21,6 +21,7 @@ use rustc::hir::def::{self, Def, CtorKind};\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::ich::Fingerprint;\n use rustc::middle::lang_items;\n+use rustc::mir;\n use rustc::session::Session;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::codec::TyDecoder;\n@@ -327,6 +328,14 @@ impl<'a, 'tcx> SpecializedDecoder<Span> for DecodeContext<'a, 'tcx> {\n     }\n }\n \n+impl<'a, 'tcx, T: Decodable> SpecializedDecoder<mir::ClearCrossCrate<T>>\n+for DecodeContext<'a, 'tcx> {\n+    #[inline]\n+    fn specialized_decode(&mut self) -> Result<mir::ClearCrossCrate<T>, Self::Error> {\n+        Ok(mir::ClearCrossCrate::Clear)\n+    }\n+}\n+\n implement_ty_decoder!( DecodeContext<'a, 'tcx> );\n \n impl<'a, 'tcx> MetadataBlob {"}, {"sha": "de6bb9ea738bed4ec92fa9092210b2931e187670", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=4fa202d23b4c8c81b8ac6cf89cf843d35854d437", "patch": "@@ -157,6 +157,15 @@ impl<'a, 'tcx> SpecializedEncoder<ty::GenericPredicates<'tcx>> for EncodeContext\n     }\n }\n \n+impl<'a, 'tcx, T: Encodable> SpecializedEncoder<mir::ClearCrossCrate<T>>\n+for EncodeContext<'a, 'tcx> {\n+    fn specialized_encode(&mut self,\n+                          _: &mir::ClearCrossCrate<T>)\n+                          -> Result<(), Self::Error> {\n+        Ok(())\n+    }\n+}\n+\n impl<'a, 'tcx> TyEncoder for EncodeContext<'a, 'tcx> {\n     fn position(&self) -> usize {\n         self.opaque.position()"}, {"sha": "2086e92a9846420507674d83c398526b61c0c317", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=4fa202d23b4c8c81b8ac6cf89cf843d35854d437", "patch": "@@ -543,7 +543,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         Mir::new(self.cfg.basic_blocks,\n                  self.visibility_scopes,\n-                 ClearOnDecode::Set(self.visibility_scope_info),\n+                 ClearCrossCrate::Set(self.visibility_scope_info),\n                  IndexVec::new(),\n                  yield_ty,\n                  self.local_decls,"}, {"sha": "15b06bd38924ad478f734d810750df50ffa464f3", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=4fa202d23b4c8c81b8ac6cf89cf843d35854d437", "patch": "@@ -198,7 +198,7 @@ fn build_drop_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         IndexVec::from_elem_n(\n             VisibilityScopeData { span: span, parent_scope: None }, 1\n         ),\n-        ClearOnDecode::Clear,\n+        ClearCrossCrate::Clear,\n         IndexVec::new(),\n         None,\n         local_decls_for_sig(&sig, span),\n@@ -345,7 +345,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n             IndexVec::from_elem_n(\n                 VisibilityScopeData { span: self.span, parent_scope: None }, 1\n             ),\n-            ClearOnDecode::Clear,\n+            ClearCrossCrate::Clear,\n             IndexVec::new(),\n             None,\n             self.local_decls,\n@@ -807,7 +807,7 @@ fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         IndexVec::from_elem_n(\n             VisibilityScopeData { span: span, parent_scope: None }, 1\n         ),\n-        ClearOnDecode::Clear,\n+        ClearCrossCrate::Clear,\n         IndexVec::new(),\n         None,\n         local_decls,\n@@ -885,7 +885,7 @@ pub fn build_adt_ctor<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a, 'gcx, 'tcx>,\n         IndexVec::from_elem_n(\n             VisibilityScopeData { span: span, parent_scope: None }, 1\n         ),\n-        ClearOnDecode::Clear,\n+        ClearCrossCrate::Clear,\n         IndexVec::new(),\n         None,\n         local_decls,"}, {"sha": "fefb1590bd3f94e0077866f9e42aa4db9546bb81", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=4fa202d23b4c8c81b8ac6cf89cf843d35854d437", "patch": "@@ -20,6 +20,7 @@ use rustc::mir::*;\n use rustc::mir::visit::{LvalueContext, Visitor};\n \n use syntax::ast;\n+use syntax::symbol::Symbol;\n \n use std::rc::Rc;\n use util;\n@@ -145,7 +146,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     self.visibility_scope_info[source_info.scope].lint_root;\n                 self.register_violations(&[UnsafetyViolation {\n                     source_info,\n-                    description: \"borrow of packed field\",\n+                    description: Symbol::intern(\"borrow of packed field\").as_str(),\n                     kind: UnsafetyViolationKind::BorrowPacked(lint_root)\n                 }], &[]);\n             }\n@@ -209,7 +210,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                         self.visibility_scope_info[source_info.scope].lint_root;\n                     self.register_violations(&[UnsafetyViolation {\n                         source_info,\n-                        description: \"use of extern static\",\n+                        description: Symbol::intern(\"use of extern static\").as_str(),\n                         kind: UnsafetyViolationKind::ExternStatic(lint_root)\n                     }], &[]);\n                 }\n@@ -225,7 +226,9 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     {\n         let source_info = self.source_info;\n         self.register_violations(&[UnsafetyViolation {\n-            source_info, description, kind: UnsafetyViolationKind::General\n+            source_info,\n+            description: Symbol::intern(description).as_str(),\n+            kind: UnsafetyViolationKind::General,\n         }], &[]);\n     }\n \n@@ -320,8 +323,8 @@ fn unsafety_check_result<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n     let mir = &tcx.mir_built(def_id).borrow();\n \n     let visibility_scope_info = match mir.visibility_scope_info {\n-        ClearOnDecode::Set(ref data) => data,\n-        ClearOnDecode::Clear => {\n+        ClearCrossCrate::Set(ref data) => data,\n+        ClearCrossCrate::Clear => {\n             debug!(\"unsafety_violations: {:?} - remote, skipping\", def_id);\n             return UnsafetyCheckResult {\n                 violations: Rc::new([]),\n@@ -433,15 +436,15 @@ pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n                 struct_span_err!(\n                     tcx.sess, source_info.span, E0133,\n                     \"{} requires unsafe function or block\", description)\n-                    .span_label(source_info.span, description)\n+                    .span_label(source_info.span, &description[..])\n                     .emit();\n             }\n             UnsafetyViolationKind::ExternStatic(lint_node_id) => {\n                 tcx.lint_node(SAFE_EXTERN_STATICS,\n                               lint_node_id,\n                               source_info.span,\n                               &format!(\"{} requires unsafe function or \\\n-                                        block (error E0133)\", description));\n+                                        block (error E0133)\", &description[..]));\n             }\n             UnsafetyViolationKind::BorrowPacked(lint_node_id) => {\n                 if let Some(impl_def_id) = builtin_derive_def_id(tcx, def_id) {\n@@ -451,7 +454,7 @@ pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n                                   lint_node_id,\n                                   source_info.span,\n                                   &format!(\"{} requires unsafe function or \\\n-                                            block (error E0133)\", description));\n+                                            block (error E0133)\", &description[..]));\n                 }\n             }\n         }"}, {"sha": "d8ae9729224d758820e0c1eb70c56bd79342b03e", "filename": "src/libserialize/collection_impls.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibserialize%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa202d23b4c8c81b8ac6cf89cf843d35854d437/src%2Flibserialize%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fcollection_impls.rs?ref=4fa202d23b4c8c81b8ac6cf89cf843d35854d437", "patch": "@@ -14,6 +14,7 @@ use std::hash::{Hash, BuildHasher};\n \n use {Decodable, Encodable, Decoder, Encoder};\n use std::collections::{LinkedList, VecDeque, BTreeMap, BTreeSet, HashMap, HashSet};\n+use std::rc::Rc;\n \n impl<\n     T: Encodable\n@@ -194,3 +195,26 @@ impl<T, S> Decodable for HashSet<T, S>\n         })\n     }\n }\n+\n+impl<T: Encodable> Encodable for Rc<[T]> {\n+    fn encode<E: Encoder>(&self, s: &mut E) -> Result<(), E::Error> {\n+        s.emit_seq(self.len(), |s| {\n+            for (index, e) in self.iter().enumerate() {\n+                s.emit_seq_elt(index, |s| e.encode(s))?;\n+            }\n+            Ok(())\n+        })\n+    }\n+}\n+\n+impl<T: Decodable> Decodable for Rc<[T]> {\n+    fn decode<D: Decoder>(d: &mut D) -> Result<Rc<[T]>, D::Error> {\n+        d.read_seq(|d, len| {\n+            let mut vec = Vec::with_capacity(len);\n+            for index in 0..len {\n+                vec.push(d.read_seq_elt(index, |d| Decodable::decode(d))?);\n+            }\n+            Ok(vec.into())\n+        })\n+    }\n+}"}]}