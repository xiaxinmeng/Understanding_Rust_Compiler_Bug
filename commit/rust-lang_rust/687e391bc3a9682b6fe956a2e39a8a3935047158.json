{"sha": "687e391bc3a9682b6fe956a2e39a8a3935047158", "node_id": "C_kwDOAAsO6NoAKDY4N2UzOTFiYzNhOTY4MmI2ZmU5NTZhMmUzOWE4YTM5MzUwNDcxNTg", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-29T01:56:28Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-29T02:16:03Z"}, "message": "Avoid constructing an unnecessary `InferCtxt`.\n\nCurrently, `search_for_structural_match_violation` constructs an `infcx`\nfrom a `tcx` and then only uses the `tcx` within the `infcx`. This is\nwasteful because `infcx` is a big type.\n\nThis commit changes it to use the `tcx` directly. When compiling\n`pest-2.1.3`, this changes the memcpy stats reported by DHAT for a `check full`\nbuild from this:\n```\n433,008,916 bytes (100%, 99,787.93/Minstr) in 2,148,668 blocks (100%, 495.17/Minstr), avg size 201.52 bytes\n```\nto this:\n```\n101,422,347 bytes (99.98%, 25,243.59/Minstr) in 1,318,407 blocks (99.96%, 328.15/Minstr), avg size 76.93 bytes\n```\nThis translates to a 4.3% reduction in instruction counts.", "tree": {"sha": "915c26f4375521b29b9c83ae65ae2dd98ae74bf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/915c26f4375521b29b9c83ae65ae2dd98ae74bf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/687e391bc3a9682b6fe956a2e39a8a3935047158", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/687e391bc3a9682b6fe956a2e39a8a3935047158", "html_url": "https://github.com/rust-lang/rust/commit/687e391bc3a9682b6fe956a2e39a8a3935047158", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/687e391bc3a9682b6fe956a2e39a8a3935047158/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e76fcc468f57a1040a85cc195374923be414401", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e76fcc468f57a1040a85cc195374923be414401", "html_url": "https://github.com/rust-lang/rust/commit/9e76fcc468f57a1040a85cc195374923be414401"}], "stats": {"total": 5, "additions": 1, "deletions": 4}, "files": [{"sha": "725df69974c9ca2d3fecd11ffe68a09b39d9c260", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/687e391bc3a9682b6fe956a2e39a8a3935047158/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/687e391bc3a9682b6fe956a2e39a8a3935047158/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=687e391bc3a9682b6fe956a2e39a8a3935047158", "patch": "@@ -58,10 +58,7 @@ pub fn search_for_structural_match_violation<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ty: Ty<'tcx>,\n ) -> Option<NonStructuralMatchTy<'tcx>> {\n-    // FIXME: we should instead pass in an `infcx` from the outside.\n-    tcx.infer_ctxt().enter(|infcx| {\n-        ty.visit_with(&mut Search { tcx: infcx.tcx, span, seen: FxHashSet::default() }).break_value()\n-    })\n+    ty.visit_with(&mut Search { tcx, span, seen: FxHashSet::default() }).break_value()\n }\n \n /// This method returns true if and only if `adt_ty` itself has been marked as"}]}