{"sha": "d5de2a8e641b1526473aaf903a25b16e174bafe8", "node_id": "C_kwDOAAsO6NoAKGQ1ZGUyYThlNjQxYjE1MjY0NzNhYWY5MDNhMjViMTZlMTc0YmFmZTg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-11-28T10:12:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-28T10:12:12Z"}, "message": "Rollup merge of #104927 - compiler-errors:binder-shifting-logic, r=oli-obk\n\nSimplify some binder shifting logic\n\nNot sure if worth, but we'll see", "tree": {"sha": "f30b2d42cbe7181b8344d4bf562a03e0d2790c7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f30b2d42cbe7181b8344d4bf562a03e0d2790c7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5de2a8e641b1526473aaf903a25b16e174bafe8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjhIl8CRBK7hj4Ov3rIwAAqZQIAI9I1oxHjOXtDdzk5NpSEPEa\nvxbcsEObrnERp9L6gsdT+sMtVMjLv0IFEPIP+6kqHpcmyLj1FN5Y+aqZJ8vxrWSc\nNDVJE0DjjLk9QIq5JEufULs29RO1SynjkR6CfzSwY+lap4snWeUubWqBvGBCZB7O\nD2ugB3KD7CEUTi8RfX8PpHTkwBkC1a7m4jHF71HgHMQOGjiVhWrZycDgicisuzZ2\nYXaX1j2o9pbEKyfvPCuvtQEtCoVejHlRigRoisiwAh6aA3ryLl2xx7zq8NnlPR6X\nwQnGWj/yWsEcbTkhcPPJkLrD/xeDOc/g50XODXDO9AkQdMgOnBlC/wP32QT5uwA=\n=adDR\n-----END PGP SIGNATURE-----\n", "payload": "tree f30b2d42cbe7181b8344d4bf562a03e0d2790c7e\nparent 9178bc059f3e932d94a52efba7a9e010f1bc6d37\nparent 61e185b5d08d0db64e0fa331b64ac7283968f8a0\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1669630332 +0530\ncommitter GitHub <noreply@github.com> 1669630332 +0530\n\nRollup merge of #104927 - compiler-errors:binder-shifting-logic, r=oli-obk\n\nSimplify some binder shifting logic\n\nNot sure if worth, but we'll see\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5de2a8e641b1526473aaf903a25b16e174bafe8", "html_url": "https://github.com/rust-lang/rust/commit/d5de2a8e641b1526473aaf903a25b16e174bafe8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5de2a8e641b1526473aaf903a25b16e174bafe8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9178bc059f3e932d94a52efba7a9e010f1bc6d37", "url": "https://api.github.com/repos/rust-lang/rust/commits/9178bc059f3e932d94a52efba7a9e010f1bc6d37", "html_url": "https://github.com/rust-lang/rust/commit/9178bc059f3e932d94a52efba7a9e010f1bc6d37"}, {"sha": "61e185b5d08d0db64e0fa331b64ac7283968f8a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/61e185b5d08d0db64e0fa331b64ac7283968f8a0", "html_url": "https://github.com/rust-lang/rust/commit/61e185b5d08d0db64e0fa331b64ac7283968f8a0"}], "stats": {"total": 47, "additions": 24, "deletions": 23}, "files": [{"sha": "d431d008ddf06ed96489dcea92e5a542aa74e537", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d5de2a8e641b1526473aaf903a25b16e174bafe8/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5de2a8e641b1526473aaf903a25b16e174bafe8/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=d5de2a8e641b1526473aaf903a25b16e174bafe8", "patch": "@@ -407,6 +407,7 @@ where\n         match *t.kind() {\n             ty::Bound(debruijn, bound_ty) if debruijn == self.current_index => {\n                 let ty = self.delegate.replace_ty(bound_ty);\n+                debug_assert!(!ty.has_vars_bound_above(ty::INNERMOST));\n                 ty::fold::shift_vars(self.tcx, ty, self.current_index.as_u32())\n             }\n             _ if t.has_vars_bound_at_or_above(self.current_index) => t.super_fold_with(self),\n@@ -437,6 +438,7 @@ where\n         match ct.kind() {\n             ty::ConstKind::Bound(debruijn, bound_const) if debruijn == self.current_index => {\n                 let ct = self.delegate.replace_const(bound_const, ct.ty());\n+                debug_assert!(!ct.has_vars_bound_above(ty::INNERMOST));\n                 ty::fold::shift_vars(self.tcx, ct, self.current_index.as_u32())\n             }\n             _ => ct.super_fold_with(self),\n@@ -697,46 +699,41 @@ impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         match *r {\n-            ty::ReLateBound(debruijn, br) => {\n-                if self.amount == 0 || debruijn < self.current_index {\n-                    r\n-                } else {\n-                    let debruijn = debruijn.shifted_in(self.amount);\n-                    let shifted = ty::ReLateBound(debruijn, br);\n-                    self.tcx.mk_region(shifted)\n-                }\n+            ty::ReLateBound(debruijn, br) if debruijn >= self.current_index => {\n+                let debruijn = debruijn.shifted_in(self.amount);\n+                let shifted = ty::ReLateBound(debruijn, br);\n+                self.tcx.mk_region(shifted)\n             }\n             _ => r,\n         }\n     }\n \n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         match *ty.kind() {\n-            ty::Bound(debruijn, bound_ty) => {\n-                if self.amount == 0 || debruijn < self.current_index {\n-                    ty\n-                } else {\n-                    let debruijn = debruijn.shifted_in(self.amount);\n-                    self.tcx.mk_ty(ty::Bound(debruijn, bound_ty))\n-                }\n+            ty::Bound(debruijn, bound_ty) if debruijn >= self.current_index => {\n+                let debruijn = debruijn.shifted_in(self.amount);\n+                self.tcx.mk_ty(ty::Bound(debruijn, bound_ty))\n             }\n \n-            _ => ty.super_fold_with(self),\n+            _ if ty.has_vars_bound_at_or_above(self.current_index) => ty.super_fold_with(self),\n+            _ => ty,\n         }\n     }\n \n     fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n-        if let ty::ConstKind::Bound(debruijn, bound_ct) = ct.kind() {\n-            if self.amount == 0 || debruijn < self.current_index {\n-                ct\n-            } else {\n-                let debruijn = debruijn.shifted_in(self.amount);\n-                self.tcx.mk_const(ty::ConstKind::Bound(debruijn, bound_ct), ct.ty())\n-            }\n+        if let ty::ConstKind::Bound(debruijn, bound_ct) = ct.kind()\n+            && debruijn >= self.current_index\n+        {\n+            let debruijn = debruijn.shifted_in(self.amount);\n+            self.tcx.mk_const(ty::ConstKind::Bound(debruijn, bound_ct), ct.ty())\n         } else {\n             ct.super_fold_with(self)\n         }\n     }\n+\n+    fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx> {\n+        if p.has_vars_bound_at_or_above(self.current_index) { p.super_fold_with(self) } else { p }\n+    }\n }\n \n pub fn shift_region<'tcx>(\n@@ -758,5 +755,9 @@ where\n {\n     debug!(\"shift_vars(value={:?}, amount={})\", value, amount);\n \n+    if amount == 0 || !value.has_escaping_bound_vars() {\n+        return value;\n+    }\n+\n     value.fold_with(&mut Shifter::new(tcx, amount))\n }"}]}