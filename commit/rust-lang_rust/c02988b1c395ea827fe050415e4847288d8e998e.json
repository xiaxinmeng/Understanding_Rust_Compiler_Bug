{"sha": "c02988b1c395ea827fe050415e4847288d8e998e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMjk4OGIxYzM5NWVhODI3ZmUwNTA0MTVlNDg0NzI4OGQ4ZTk5OGU=", "commit": {"author": {"name": "Oliver S\u0336c\u0336h\u0336n\u0336e\u0336i\u0336d\u0336e\u0336r Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-24T16:01:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-24T16:01:38Z"}, "message": "Merge pull request #494 from RalfJung/readme\n\nupdate README", "tree": {"sha": "91863239672ffc607e12dfe03c2a113d199e5c4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91863239672ffc607e12dfe03c2a113d199e5c4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c02988b1c395ea827fe050415e4847288d8e998e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb0JdiCRBK7hj4Ov3rIwAAdHIIAATyYNgB7jEl2FJkJ7gUvUvV\nXqiDVfBuyz1QpkM1BMRHBGlVMqrQhEbzbNQSLWNuwajHYzRad4kEhFOOeQyQdrV3\nQUfgOGEZVF1B4VaM19Zs34EqZzeweCoJeehfBxTdgxntiRrhphMgNAYMlOdis31x\nSIYEjTZlg1+hxAyVBT6r21edrouWYht62IifC9gia6fHGDM1mqCXmwaI9wOdjYKX\ndpC/nxu7G6wCBXIfyqMbnoLjkKvf27P9GB75kODq2NRhVwrzBR4/74jF2OIVW2at\nBx3Hb1ongpTJQWmsJzfSGjrSN0zYpaxQ0ifTpiybnk/gensmHpQ7H+rjdgYo7Rw=\n=PrUD\n-----END PGP SIGNATURE-----\n", "payload": "tree 91863239672ffc607e12dfe03c2a113d199e5c4b\nparent 1cbed5ca3501e139babeaedf54cdc609cfbc9e02\nparent 8f9ca242fad4b17a505d26b41e8168cc051d4fe9\nauthor Oliver S\u0336c\u0336h\u0336n\u0336e\u0336i\u0336d\u0336e\u0336r Scherer <github35764891676564198441@oli-obk.de> 1540396898 +0100\ncommitter GitHub <noreply@github.com> 1540396898 +0100\n\nMerge pull request #494 from RalfJung/readme\n\nupdate README"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c02988b1c395ea827fe050415e4847288d8e998e", "html_url": "https://github.com/rust-lang/rust/commit/c02988b1c395ea827fe050415e4847288d8e998e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c02988b1c395ea827fe050415e4847288d8e998e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cbed5ca3501e139babeaedf54cdc609cfbc9e02", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cbed5ca3501e139babeaedf54cdc609cfbc9e02", "html_url": "https://github.com/rust-lang/rust/commit/1cbed5ca3501e139babeaedf54cdc609cfbc9e02"}, {"sha": "8f9ca242fad4b17a505d26b41e8168cc051d4fe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f9ca242fad4b17a505d26b41e8168cc051d4fe9", "html_url": "https://github.com/rust-lang/rust/commit/8f9ca242fad4b17a505d26b41e8168cc051d4fe9"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "0e88c8138a5163ea88dab77bae1b1c0a6f90aec9", "filename": "README.md", "status": "modified", "additions": 36, "deletions": 17, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c02988b1c395ea827fe050415e4847288d8e998e/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/c02988b1c395ea827fe050415e4847288d8e998e/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=c02988b1c395ea827fe050415e4847288d8e998e", "patch": "@@ -7,15 +7,23 @@ undergraduate research course at the [University of Saskatchewan][usask].\n \n ## Building Miri\n \n-I recommend that you install [rustup][rustup] to obtain Rust.  Miri comes with a\n-`rust-version` file describing the latest supported nightly version of the Rust\n-compiler toolchain. Then all you have to do is:\n+I recommend that you install [rustup][rustup] to obtain Rust. Then all you have\n+to do is:\n \n ```sh\n cargo +nightly build\n ```\n \n-with `+nightly` replaced with the appropriate nightly version of Rust.\n+This uses the very latest Rust version.  If you experience any problem, refer to\n+the `rust-version` file which contains a particular Rust nightly version that\n+has been tested against the version of miri you are using.  Make sure to use\n+that particular `nightly-YYYY-MM-DD` whenever the instructions just say\n+`nightly`.\n+\n+To avoid repeating the nightly version all the time, you can use\n+`rustup override set nightly` (or `rustup override set nightly-YYYY-MM-DD`),\n+which means `nightly` Rust will automatically be used whenever you are working\n+in this directory.\n \n ## Running Miri\n \n@@ -41,18 +49,23 @@ Now you can run Miri against the libstd compiled by xargo:\n MIRI_SYSROOT=~/.xargo/HOST cargo +nightly run tests/run-pass-fullmir/hashmap.rs\n ```\n \n-Notice that you will have to re-run the last step of the preparations above when\n-your toolchain changes (e.g., when you update the nightly).\n-\n-You can also set `-Zmiri-start-fn` to make Miri start evaluation with the\n-`start_fn` lang item, instead of starting at the `main` function.\n+Notice that you will have to re-run the last step of the preparations above\n+(`xargo/build.sh`) when your toolchain changes (e.g., when you update the\n+nightly).\n \n ## Running Miri on your own project('s test suite)\n \n-Install Miri as a cargo subcommand with `cargo install +nightly --all-features --path .`.\n+Install Miri as a cargo subcommand with `cargo install +nightly --all-features\n+--path .`.  Be aware that if you used `rustup override set` to fix a particular\n+Rust version for the miri directory, that will *not* apply to your own project\n+directory!  You have to use a consistent Rust version for building miri and your\n+project for this to work, so remember to either always specify the nightly\n+version manually, overriding it in your project directory as well, or use\n+`rustup default nightly` (or `rustup default nightly-YYYY-MM-DD`) to globally\n+make `nightly` the default toolchain.\n \n-Compile your project and its dependencies against a MIR-enabled libstd as described\n-above:\n+We assume that you have prepared a MIR-enabled libstd as described above.  Now\n+compile your project and its dependencies against that libstd:\n \n 1. Run `cargo clean` to eliminate any cached dependencies that were built against\n the non-MIR `libstd`.\n@@ -85,11 +98,17 @@ which should be the toolchain specified in the `rust-version` file.\n \n ## Miri `-Z` flags\n \n-Miri adds some extra `-Z` flags to control its behavior:\n-\n-* `-Zmiri-start-fn`: This makes interpretation start with `lang_start` (defined\n-  in libstd) instead of starting with `main`.  Requires full MIR!\n-* `-Zmiri-disable-validation` disables enforcing the validity invariant.\n+Several `-Z` flags are relevant for miri:\n+\n+* `-Zmir-opt-level` controls how many MIR optimizations are performed.  miri\n+  overrides the default to be `0`; be advised that using any higher level can\n+  make miri miss bugs in your program because they got optimized away.\n+* `-Zalways-encode-mir` makes rustc dump MIR even for completely monomorphic\n+  functions.  This is needed so that miri can execute such functions, so miri\n+  sets this flag per default.\n+* `-Zmiri-disable-validation` is a custom `-Z` flag added by miri.  It disables\n+  enforcing the validity invariant, which is enforced by default.  This is\n+  mostly useful for debugging; it means miri will miss bugs in your program.\n \n ## Development and Debugging\n "}]}