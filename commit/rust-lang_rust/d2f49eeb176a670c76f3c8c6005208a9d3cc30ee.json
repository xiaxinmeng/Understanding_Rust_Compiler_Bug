{"sha": "d2f49eeb176a670c76f3c8c6005208a9d3cc30ee", "node_id": "C_kwDOAAsO6NoAKGQyZjQ5ZWViMTc2YTY3MGM3NmYzYzhjNjAwNTIwOGE5ZDNjYzMwZWU", "commit": {"author": {"name": "Sean Chen", "email": "seanchen11235@gmail.com", "date": "2021-10-27T18:18:22Z"}, "committer": {"name": "Sean Chen", "email": "seanchen11235@gmail.com", "date": "2021-10-27T18:18:22Z"}, "message": "Format doctest", "tree": {"sha": "b4873461c003c9e36b16ee274f2d260385469276", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4873461c003c9e36b16ee274f2d260385469276"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2f49eeb176a670c76f3c8c6005208a9d3cc30ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2f49eeb176a670c76f3c8c6005208a9d3cc30ee", "html_url": "https://github.com/rust-lang/rust/commit/d2f49eeb176a670c76f3c8c6005208a9d3cc30ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2f49eeb176a670c76f3c8c6005208a9d3cc30ee/comments", "author": {"login": "seanchen1991", "id": 4572868, "node_id": "MDQ6VXNlcjQ1NzI4Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/4572868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanchen1991", "html_url": "https://github.com/seanchen1991", "followers_url": "https://api.github.com/users/seanchen1991/followers", "following_url": "https://api.github.com/users/seanchen1991/following{/other_user}", "gists_url": "https://api.github.com/users/seanchen1991/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanchen1991/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanchen1991/subscriptions", "organizations_url": "https://api.github.com/users/seanchen1991/orgs", "repos_url": "https://api.github.com/users/seanchen1991/repos", "events_url": "https://api.github.com/users/seanchen1991/events{/privacy}", "received_events_url": "https://api.github.com/users/seanchen1991/received_events", "type": "User", "site_admin": false}, "committer": {"login": "seanchen1991", "id": 4572868, "node_id": "MDQ6VXNlcjQ1NzI4Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/4572868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanchen1991", "html_url": "https://github.com/seanchen1991", "followers_url": "https://api.github.com/users/seanchen1991/followers", "following_url": "https://api.github.com/users/seanchen1991/following{/other_user}", "gists_url": "https://api.github.com/users/seanchen1991/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanchen1991/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanchen1991/subscriptions", "organizations_url": "https://api.github.com/users/seanchen1991/orgs", "repos_url": "https://api.github.com/users/seanchen1991/repos", "events_url": "https://api.github.com/users/seanchen1991/events{/privacy}", "received_events_url": "https://api.github.com/users/seanchen1991/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa853bd31775db7fcb5074f78d8b989053ae101d", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa853bd31775db7fcb5074f78d8b989053ae101d", "html_url": "https://github.com/rust-lang/rust/commit/aa853bd31775db7fcb5074f78d8b989053ae101d"}], "stats": {"total": 55, "additions": 10, "deletions": 45}, "files": [{"sha": "26fa6c38549d3dee586978c4d27355ad2bfc3395", "filename": "library/std/src/error.rs", "status": "modified", "additions": 10, "deletions": 45, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d2f49eeb176a670c76f3c8c6005208a9d3cc30ee/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2f49eeb176a670c76f3c8c6005208a9d3cc30ee/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=d2f49eeb176a670c76f3c8c6005208a9d3cc30ee", "patch": "@@ -811,6 +811,8 @@ impl dyn Error + Send + Sync {\n /// An error reporter that exposes the entire error chain for printing.\n /// It also exposes options for formatting the error chain, either entirely on a single line,\n /// or in multi-line format with each cause in the error chain on a new line.\n+/// `Report` only requires that the wrapped error implements `Error`. It doesn't require that the\n+/// wrapped error be `Send`, `Sync`, or `'static`.\n ///\n /// # Examples\n ///\n@@ -822,68 +824,31 @@ impl dyn Error + Send + Sync {\n /// use std::fmt;\n ///\n /// #[derive(Debug)]\n-/// struct SuperError {\n-///     side: SuperErrorSideKick,\n-/// }\n-///\n-/// impl fmt::Display for SuperError {\n-///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-///         write!(f, \"SuperError is here!\")\n-///     }\n-/// }\n-///\n-/// impl Error for SuperError {\n-///     fn source(&self) -> Option<&(dyn Error + 'static)> {\n-///         Some(&self.side)\n-///     }\n+/// struct SuperError<'a> {\n+///     side: &'a str,\n /// }\n ///\n-/// #[derive(Debug)]\n-/// struct SuperErrorSideKick;\n-///\n-/// impl fmt::Display for SuperErrorSideKick {\n+/// impl<'a> fmt::Display for SuperError<'a> {\n ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-///         write!(f, \"SuperErrorSideKick is here!\")\n+///         write!(f, \"SuperError is here: {}\", self.side)\n ///     }\n /// }\n ///\n-/// impl Error for SuperErrorSideKick {}\n+/// impl<'a> Error for SuperError<'a> {}\n ///\n /// // Note that the error doesn't need to be `Send` or `Sync`.\n /// impl !Send for SuperError {}\n /// impl !Sync for SuperError {}\n ///\n /// fn main() {\n-///     let error = SuperError { side: SuperErrorSideKick };\n+///     let msg = String::from(\"Huzzah!\");\n+///     let error = SuperError { side: &msg };\n ///     let report = Report::new(&error).pretty(true);\n ///\n ///     println!(\"{}\", report);\n /// }\n /// ```\n-///\n-/// `Report` only requires that the wrapped error implements `Error`. It doesn't require that the\n-/// wrapped error be `Send`, `Sync`, or `'static`.\n-///\n-/// ```rust\n-/// # #![feature(error_reporter)]\n-/// # use std::fmt;\n-/// # use std::error::{Error, Report};\n-/// #[derive(Debug)]\n-/// struct SuperError<'a> {\n-///     side: &'a str,\n-/// }\n-/// impl<'a> fmt::Display for SuperError<'a> {\n-///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-///         write!(f, \"SuperError is here: {}\", self.side)\n-///     }\n-/// }\n-/// impl<'a> Error for SuperError<'a> {}\n-/// fn main() {\n-///     let msg = String::from(\"Huzzah!\");\n-///     let report = Report::new(SuperError { side: &msg });\n-///     println!(\"{}\", report);\n-/// }\n-/// ```\n+\n #[unstable(feature = \"error_reporter\", issue = \"90172\")]\n pub struct Report<E> {\n     /// The error being reported."}]}