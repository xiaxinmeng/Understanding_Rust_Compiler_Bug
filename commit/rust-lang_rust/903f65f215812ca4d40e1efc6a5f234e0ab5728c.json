{"sha": "903f65f215812ca4d40e1efc6a5f234e0ab5728c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwM2Y2NWYyMTU4MTJjYTRkNDBlMWVmYzZhNWYyMzRlMGFiNTcyOGM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-09T17:53:38Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-21T11:22:22Z"}, "message": "Simplify hashing.", "tree": {"sha": "48432029af991c7b46b1a3279c2b290f3ef83175", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48432029af991c7b46b1a3279c2b290f3ef83175"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/903f65f215812ca4d40e1efc6a5f234e0ab5728c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/903f65f215812ca4d40e1efc6a5f234e0ab5728c", "html_url": "https://github.com/rust-lang/rust/commit/903f65f215812ca4d40e1efc6a5f234e0ab5728c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/903f65f215812ca4d40e1efc6a5f234e0ab5728c/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a87de890fd1a797952ab49459aeca4ce598d8f15", "url": "https://api.github.com/repos/rust-lang/rust/commits/a87de890fd1a797952ab49459aeca4ce598d8f15", "html_url": "https://github.com/rust-lang/rust/commit/a87de890fd1a797952ab49459aeca4ce598d8f15"}], "stats": {"total": 61, "additions": 26, "deletions": 35}, "files": [{"sha": "37a176de9419684ec4822ed39bae66a88364dbfd", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/903f65f215812ca4d40e1efc6a5f234e0ab5728c/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903f65f215812ca4d40e1efc6a5f234e0ab5728c/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=903f65f215812ca4d40e1efc6a5f234e0ab5728c", "patch": "@@ -339,12 +339,12 @@ macro_rules! define_queries {\n                 } else {\n                     Some(key.default_span(*tcx))\n                 };\n-                let hash = {\n+                let hash = || {\n                     let mut hcx = tcx.create_stable_hashing_context();\n                     let mut hasher = StableHasher::new();\n                     std::mem::discriminant(&kind).hash_stable(&mut hcx, &mut hasher);\n                     key.hash_stable(&mut hcx, &mut hasher);\n-                    hasher.finish()\n+                    hasher.finish::<u64>()\n                 };\n \n                 QueryStackFrame::new(name, description, span, hash)"}, {"sha": "35a2ac865f2595ab1f2b20eff93a0863ccdf0da9", "filename": "compiler/rustc_query_system/src/query/job.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/903f65f215812ca4d40e1efc6a5f234e0ab5728c/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903f65f215812ca4d40e1efc6a5f234e0ab5728c/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs?ref=903f65f215812ca4d40e1efc6a5f234e0ab5728c", "patch": "@@ -14,9 +14,9 @@ use std::num::NonZeroU32;\n \n #[cfg(parallel_compiler)]\n use {\n+    crate::dep_graph::DepKind,\n     parking_lot::{Condvar, Mutex},\n     rustc_data_structures::fx::FxHashSet,\n-    rustc_data_structures::stable_hasher::{HashStable, StableHasher},\n     rustc_data_structures::sync::Lock,\n     rustc_data_structures::sync::Lrc,\n     rustc_data_structures::{jobserver, OnDrop},\n@@ -417,30 +417,23 @@ where\n \n // Deterministically pick an query from a list\n #[cfg(parallel_compiler)]\n-fn pick_query<'a, CTX, T, F>(\n-    query_map: &QueryMap<CTX::DepKind>,\n-    tcx: CTX,\n-    queries: &'a [T],\n-    f: F,\n-) -> &'a T\n+fn pick_query<'a, D, T, F>(query_map: &QueryMap<D>, queries: &'a [T], f: F) -> &'a T\n where\n-    CTX: QueryContext,\n-    F: Fn(&T) -> (Span, QueryJobId<CTX::DepKind>),\n+    D: Copy + Clone + Eq + Hash,\n+    F: Fn(&T) -> (Span, QueryJobId<D>),\n {\n     // Deterministically pick an entry point\n     // FIXME: Sort this instead\n-    let mut hcx = tcx.dep_context().create_stable_hashing_context();\n     queries\n         .iter()\n         .min_by_key(|v| {\n             let (span, query) = f(v);\n-            let mut stable_hasher = StableHasher::new();\n-            query.query(query_map).hash_stable(&mut hcx, &mut stable_hasher);\n+            let hash = query.query(query_map).hash;\n             // Prefer entry points which have valid spans for nicer error messages\n             // We add an integer to the tuple ensuring that entry points\n             // with valid spans are picked first\n             let span_cmp = if span == DUMMY_SP { 1 } else { 0 };\n-            (span_cmp, stable_hasher.finish::<u64>())\n+            (span_cmp, hash)\n         })\n         .unwrap()\n }\n@@ -451,11 +444,10 @@ where\n /// If a cycle was not found, the starting query is removed from `jobs` and\n /// the function returns false.\n #[cfg(parallel_compiler)]\n-fn remove_cycle<CTX: QueryContext>(\n-    query_map: &QueryMap<CTX::DepKind>,\n-    jobs: &mut Vec<QueryJobId<CTX::DepKind>>,\n-    wakelist: &mut Vec<Lrc<QueryWaiter<CTX::DepKind>>>,\n-    tcx: CTX,\n+fn remove_cycle<D: DepKind>(\n+    query_map: &QueryMap<D>,\n+    jobs: &mut Vec<QueryJobId<D>>,\n+    wakelist: &mut Vec<Lrc<QueryWaiter<D>>>,\n ) -> bool {\n     let mut visited = FxHashSet::default();\n     let mut stack = Vec::new();\n@@ -505,15 +497,15 @@ fn remove_cycle<CTX: QueryContext>(\n                         None\n                     } else {\n                         // Deterministically pick one of the waiters to show to the user\n-                        let waiter = *pick_query(query_map, tcx, &waiters, |s| *s);\n+                        let waiter = *pick_query(query_map, &waiters, |s| *s);\n                         Some((span, query, Some(waiter)))\n                     }\n                 }\n             })\n-            .collect::<Vec<(Span, QueryJobId<CTX::DepKind>, Option<(Span, QueryJobId<CTX::DepKind>)>)>>();\n+            .collect::<Vec<(Span, QueryJobId<D>, Option<(Span, QueryJobId<D>)>)>>();\n \n         // Deterministically pick an entry point\n-        let (_, entry_point, usage) = pick_query(query_map, tcx, &entry_points, |e| (e.0, e.1));\n+        let (_, entry_point, usage) = pick_query(query_map, &entry_points, |e| (e.0, e.1));\n \n         // Shift the stack so that our entry point is first\n         let entry_point_pos = stack.iter().position(|(_, query)| query == entry_point);\n@@ -570,7 +562,7 @@ pub fn deadlock<CTX: QueryContext>(tcx: CTX, registry: &rayon_core::Registry) {\n     let mut found_cycle = false;\n \n     while jobs.len() > 0 {\n-        if remove_cycle(&query_map, &mut jobs, &mut wakelist, tcx) {\n+        if remove_cycle(&query_map, &mut jobs, &mut wakelist) {\n             found_cycle = true;\n         }\n     }"}, {"sha": "aef8a13ccef3297f80006f255eb6fcb353dc637b", "filename": "compiler/rustc_query_system/src/query/mod.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/903f65f215812ca4d40e1efc6a5f234e0ab5728c/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903f65f215812ca4d40e1efc6a5f234e0ab5728c/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs?ref=903f65f215812ca4d40e1efc6a5f234e0ab5728c", "patch": "@@ -16,8 +16,6 @@ pub use self::config::{QueryAccessors, QueryConfig, QueryDescription};\n \n use crate::dep_graph::{DepNode, DepNodeIndex, HasDepContext, SerializedDepNodeIndex};\n \n-use rustc_data_structures::fingerprint::Fingerprint;\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lock;\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_errors::Diagnostic;\n@@ -34,7 +32,8 @@ pub struct QueryStackFrame {\n     span: Option<Span>,\n     /// This hash is used to deterministically pick\n     /// a query to remove cycles in the parallel compiler.\n-    hash: Fingerprint,\n+    #[cfg(parallel_compiler)]\n+    hash: u64,\n }\n \n impl QueryStackFrame {\n@@ -43,9 +42,15 @@ impl QueryStackFrame {\n         name: &'static str,\n         description: String,\n         span: Option<Span>,\n-        hash: Fingerprint,\n+        _hash: impl FnOnce() -> u64,\n     ) -> Self {\n-        Self { name, hash, description, span }\n+        Self {\n+            name,\n+            description,\n+            span,\n+            #[cfg(parallel_compiler)]\n+            hash: _hash(),\n+        }\n     }\n \n     // FIXME(eddyb) Get more valid `Span`s on queries.\n@@ -58,12 +63,6 @@ impl QueryStackFrame {\n     }\n }\n \n-impl<CTX> HashStable<CTX> for QueryStackFrame {\n-    fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n-        self.hash.hash_stable(hcx, hasher)\n-    }\n-}\n-\n pub trait QueryContext: HasDepContext {\n     /// Get string representation from DefPath.\n     fn def_path_str(&self, def_id: DefId) -> String;"}]}