{"sha": "4c2274e1abea48c62a17e95e13fca02310ee1bab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMjI3NGUxYWJlYTQ4YzYyYTE3ZTk1ZTEzZmNhMDIzMTBlZTFiYWI=", "commit": {"author": {"name": "Mike Boutin", "email": "mike.boutin@gmail.com", "date": "2015-04-24T00:26:24Z"}, "committer": {"name": "Mike Boutin", "email": "mike.boutin@gmail.com", "date": "2015-04-24T00:49:27Z"}, "message": "Fix spelling errors.", "tree": {"sha": "bef9fecb532ab5923c6b30e8029ec51c36d7c11d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bef9fecb532ab5923c6b30e8029ec51c36d7c11d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c2274e1abea48c62a17e95e13fca02310ee1bab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c2274e1abea48c62a17e95e13fca02310ee1bab", "html_url": "https://github.com/rust-lang/rust/commit/4c2274e1abea48c62a17e95e13fca02310ee1bab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c2274e1abea48c62a17e95e13fca02310ee1bab/comments", "author": {"login": "iliekturtles", "id": 5081378, "node_id": "MDQ6VXNlcjUwODEzNzg=", "avatar_url": "https://avatars.githubusercontent.com/u/5081378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iliekturtles", "html_url": "https://github.com/iliekturtles", "followers_url": "https://api.github.com/users/iliekturtles/followers", "following_url": "https://api.github.com/users/iliekturtles/following{/other_user}", "gists_url": "https://api.github.com/users/iliekturtles/gists{/gist_id}", "starred_url": "https://api.github.com/users/iliekturtles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iliekturtles/subscriptions", "organizations_url": "https://api.github.com/users/iliekturtles/orgs", "repos_url": "https://api.github.com/users/iliekturtles/repos", "events_url": "https://api.github.com/users/iliekturtles/events{/privacy}", "received_events_url": "https://api.github.com/users/iliekturtles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iliekturtles", "id": 5081378, "node_id": "MDQ6VXNlcjUwODEzNzg=", "avatar_url": "https://avatars.githubusercontent.com/u/5081378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iliekturtles", "html_url": "https://github.com/iliekturtles", "followers_url": "https://api.github.com/users/iliekturtles/followers", "following_url": "https://api.github.com/users/iliekturtles/following{/other_user}", "gists_url": "https://api.github.com/users/iliekturtles/gists{/gist_id}", "starred_url": "https://api.github.com/users/iliekturtles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iliekturtles/subscriptions", "organizations_url": "https://api.github.com/users/iliekturtles/orgs", "repos_url": "https://api.github.com/users/iliekturtles/repos", "events_url": "https://api.github.com/users/iliekturtles/events{/privacy}", "received_events_url": "https://api.github.com/users/iliekturtles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90bed3f9479f9f63746f227d5fc4ddecdd37642a", "url": "https://api.github.com/repos/rust-lang/rust/commits/90bed3f9479f9f63746f227d5fc4ddecdd37642a", "html_url": "https://github.com/rust-lang/rust/commit/90bed3f9479f9f63746f227d5fc4ddecdd37642a"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "bb9eeab24e7bd3048a24ddcbf8d7293bd3a0339a", "filename": "src/doc/reference.md", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4c2274e1abea48c62a17e95e13fca02310ee1bab/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/4c2274e1abea48c62a17e95e13fca02310ee1bab/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=4c2274e1abea48c62a17e95e13fca02310ee1bab", "patch": "@@ -29,7 +29,7 @@ You may also be interested in the [grammar].\n \n # Notation\n \n-Rust's grammar is defined over Unicode codepoints, each conventionally denoted\n+Rust's grammar is defined over Unicode code points, each conventionally denoted\n `U+XXXX`, for 4 or more hexadecimal digits `X`. _Most_ of Rust's grammar is\n confined to the ASCII range of Unicode, and is described in this document by a\n dialect of Extended Backus-Naur Form (EBNF), specifically a dialect of EBNF\n@@ -53,7 +53,7 @@ Where:\n - Square brackets are used to group rules.\n - `LITERAL` is a single printable ASCII character, or an escaped hexadecimal\n   ASCII code of the form `\\xQQ`, in single quotes, denoting the corresponding\n-  Unicode codepoint `U+00QQ`.\n+  Unicode code point `U+00QQ`.\n - `IDENTIFIER` is a nonempty string of ASCII letters and underscores.\n - The `repeat` forms apply to the adjacent `element`, and are as follows:\n   - `?` means zero or one repetition\n@@ -66,9 +66,9 @@ This EBNF dialect should hopefully be familiar to many readers.\n \n ## Unicode productions\n \n-A few productions in Rust's grammar permit Unicode codepoints outside the ASCII\n+A few productions in Rust's grammar permit Unicode code points outside the ASCII\n range. We define these productions in terms of character properties specified\n-in the Unicode standard, rather than in terms of ASCII-range codepoints. The\n+in the Unicode standard, rather than in terms of ASCII-range code points. The\n section [Special Unicode Productions](#special-unicode-productions) lists these\n productions.\n \n@@ -91,10 +91,10 @@ production. See [tokens](#tokens) for more information.\n \n ## Input format\n \n-Rust input is interpreted as a sequence of Unicode codepoints encoded in UTF-8.\n+Rust input is interpreted as a sequence of Unicode code points encoded in UTF-8.\n Most Rust grammar rules are defined in terms of printable ASCII-range\n-codepoints, but a small number are defined in terms of Unicode properties or\n-explicit codepoint lists. [^inputformat]\n+code points, but a small number are defined in terms of Unicode properties or\n+explicit code point lists. [^inputformat]\n \n [^inputformat]: Substitute definitions for the special Unicode productions are\n   provided to the grammar verifier, restricted to ASCII range, when verifying the\n@@ -147,7 +147,7 @@ comments beginning with exactly one repeated asterisk in the block-open\n sequence (`/**`), are interpreted as a special syntax for `doc`\n [attributes](#attributes). That is, they are equivalent to writing\n `#[doc=\"...\"]` around the body of the comment (this includes the comment\n-characters themselves, ie `/// Foo` turns into `#[doc=\"/// Foo\"]`).\n+characters themselves, i.e. `/// Foo` turns into `#[doc=\"/// Foo\"]`).\n \n `//!` comments apply to the parent of the comment, rather than the item that\n follows. `//!` comments are usually used to display information on the crate\n@@ -330,14 +330,14 @@ Some additional _escapes_ are available in either character or non-raw string\n literals. An escape starts with a `U+005C` (`\\`) and continues with one of the\n following forms:\n \n-* An _8-bit codepoint escape_ escape starts with `U+0078` (`x`) and is\n-  followed by exactly two _hex digits_. It denotes the Unicode codepoint\n+* An _8-bit code point escape_ starts with `U+0078` (`x`) and is\n+  followed by exactly two _hex digits_. It denotes the Unicode code point\n   equal to the provided hex value.\n-* A _24-bit codepoint escape_ starts with `U+0075` (`u`) and is followed\n+* A _24-bit code point escape_ starts with `U+0075` (`u`) and is followed\n   by up to six _hex digits_ surrounded by braces `U+007B` (`{`) and `U+007D`\n-  (`}`). It denotes the Unicode codepoint equal to the provided hex value.\n+  (`}`). It denotes the Unicode code point equal to the provided hex value.\n * A _whitespace escape_ is one of the characters `U+006E` (`n`), `U+0072`\n-  (`r`), or `U+0074` (`t`), denoting the unicode values `U+000A` (LF),\n+  (`r`), or `U+0074` (`t`), denoting the Unicode values `U+000A` (LF),\n   `U+000D` (CR) or `U+0009` (HT) respectively.\n * The _backslash escape_ is the character `U+005C` (`\\`) which must be\n   escaped in order to denote *itself*.\n@@ -407,7 +407,7 @@ Some additional _escapes_ are available in either byte or non-raw byte string\n literals. An escape starts with a `U+005C` (`\\`) and continues with one of the\n following forms:\n \n-* An _byte escape_ escape starts with `U+0078` (`x`) and is\n+* A _byte escape_ escape starts with `U+0078` (`x`) and is\n   followed by exactly two _hex digits_. It denotes the byte\n   equal to the provided hex value.\n * A _whitespace escape_ is one of the characters `U+006E` (`n`), `U+0072`\n@@ -697,9 +697,9 @@ in macro rules). In the transcriber, the designator is already known, and so\n only the name of a matched nonterminal comes after the dollar sign.\n \n In both the matcher and transcriber, the Kleene star-like operator indicates\n-repetition. The Kleene star operator consists of `$` and parens, optionally\n+repetition. The Kleene star operator consists of `$` and parenthesis, optionally\n followed by a separator token, followed by `*` or `+`. `*` means zero or more\n-repetitions, `+` means at least one repetition. The parens are not matched or\n+repetitions, `+` means at least one repetition. The parenthesis are not matched or\n transcribed. On the matcher side, a name is bound to _all_ of the names it\n matches, in a structure that mimics the structure of the repetition encountered\n on a successful match. The job of the transcriber is to sort that structure\n@@ -1209,9 +1209,9 @@ the guarantee that these issues are never caused by safe code.\n \n [noalias]: http://llvm.org/docs/LangRef.html#noalias\n \n-##### Behaviour not considered unsafe\n+##### Behavior not considered unsafe\n \n-This is a list of behaviour not considered *unsafe* in Rust terms, but that may\n+This is a list of behavior not considered *unsafe* in Rust terms, but that may\n be undesired.\n \n * Deadlocks\n@@ -1304,7 +1304,7 @@ specific type, but may implement several different traits, or be compatible with\n several different type constraints.\n \n For example, the following defines the type `Point` as a synonym for the type\n-`(u8, u8)`, the type of pairs of unsigned 8 bit integers.:\n+`(u8, u8)`, the type of pairs of unsigned 8 bit integers:\n \n ```\n type Point = (u8, u8);\n@@ -1958,7 +1958,7 @@ type int8_t = i8;\n \n ### Crate-only attributes\n \n-- `crate_name` - specify the this crate's crate name.\n+- `crate_name` - specify the crate's crate name.\n - `crate_type` - see [linkage](#linkage).\n - `feature` - see [compiler features](#compiler-features).\n - `no_builtins` - disable optimizing certain code patterns to invocations of\n@@ -3432,7 +3432,7 @@ is not a surrogate), represented as a 32-bit unsigned word in the 0x0000 to\n UTF-32 string.\n \n A value of type `str` is a Unicode string, represented as an array of 8-bit\n-unsigned bytes holding a sequence of UTF-8 codepoints. Since `str` is of\n+unsigned bytes holding a sequence of UTF-8 code points. Since `str` is of\n unknown size, it is not a _first-class_ type, but can only be instantiated\n through a pointer type, such as `&str` or `String`.\n "}]}