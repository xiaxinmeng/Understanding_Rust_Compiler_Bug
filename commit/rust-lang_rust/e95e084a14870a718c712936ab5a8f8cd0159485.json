{"sha": "e95e084a14870a718c712936ab5a8f8cd0159485", "node_id": "C_kwDOAAsO6NoAKGU5NWUwODRhMTQ4NzBhNzE4YzcxMjkzNmFiNWE4ZjhjZDAxNTk0ODU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-19T17:14:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-19T17:14:12Z"}, "message": "Auto merge of #92106 - matthiaskrgr:rollup-zw6t1mu, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #91791 (Fix an ICE when lowering a float with missing exponent magnitude)\n - #91878 (Remove `in_band_lifetimes` from `rustc_infer`)\n - #91895 (Remove `in_band_lifetimes` for `rustc_monomorphize`)\n - #92029 (Explicitly set no ELF flags for .rustc section)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "6186457f6f9a872bdd22a7e8ec56288a7aef36a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6186457f6f9a872bdd22a7e8ec56288a7aef36a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e95e084a14870a718c712936ab5a8f8cd0159485", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e95e084a14870a718c712936ab5a8f8cd0159485", "html_url": "https://github.com/rust-lang/rust/commit/e95e084a14870a718c712936ab5a8f8cd0159485", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e95e084a14870a718c712936ab5a8f8cd0159485/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41c3017c82bbc16842cc3bc1afa904e6910e293c", "url": "https://api.github.com/repos/rust-lang/rust/commits/41c3017c82bbc16842cc3bc1afa904e6910e293c", "html_url": "https://github.com/rust-lang/rust/commit/41c3017c82bbc16842cc3bc1afa904e6910e293c"}, {"sha": "9415c67ae55d6da8640303776e96b68b79c3a0d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9415c67ae55d6da8640303776e96b68b79c3a0d0", "html_url": "https://github.com/rust-lang/rust/commit/9415c67ae55d6da8640303776e96b68b79c3a0d0"}], "stats": {"total": 170, "additions": 104, "deletions": 66}, "files": [{"sha": "7c97143e80780d97e37fdeef45dce86486f55f66", "filename": "compiler/rustc_codegen_ssa/src/back/metadata.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -259,8 +259,15 @@ pub fn create_compressed_metadata_file(\n     let section = file.add_section(\n         file.segment_name(StandardSegment::Data).to_vec(),\n         b\".rustc\".to_vec(),\n-        SectionKind::Data,\n+        SectionKind::ReadOnlyData,\n     );\n+    match file.format() {\n+        BinaryFormat::Elf => {\n+            // Explicitly set no flags to avoid SHF_ALLOC default for data section.\n+            file.section_mut(section).flags = SectionFlags::Elf { sh_flags: 0 };\n+        }\n+        _ => {}\n+    };\n     let offset = file.append_section_data(section, &compressed, 1);\n \n     // For MachO and probably PE this is necessary to prevent the linker from throwing away the"}, {"sha": "6023973665360e46ec59c41e478feee9deaee030", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -134,7 +134,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n /// response*, then we don't typically replace free regions, as they\n /// must have been introduced from other parts of the system.\n trait CanonicalizeRegionMode {\n-    fn canonicalize_free_region(\n+    fn canonicalize_free_region<'tcx>(\n         &self,\n         canonicalizer: &mut Canonicalizer<'_, 'tcx>,\n         r: ty::Region<'tcx>,\n@@ -146,7 +146,7 @@ trait CanonicalizeRegionMode {\n struct CanonicalizeQueryResponse;\n \n impl CanonicalizeRegionMode for CanonicalizeQueryResponse {\n-    fn canonicalize_free_region(\n+    fn canonicalize_free_region<'tcx>(\n         &self,\n         canonicalizer: &mut Canonicalizer<'_, 'tcx>,\n         r: ty::Region<'tcx>,\n@@ -203,7 +203,7 @@ impl CanonicalizeRegionMode for CanonicalizeQueryResponse {\n struct CanonicalizeUserTypeAnnotation;\n \n impl CanonicalizeRegionMode for CanonicalizeUserTypeAnnotation {\n-    fn canonicalize_free_region(\n+    fn canonicalize_free_region<'tcx>(\n         &self,\n         canonicalizer: &mut Canonicalizer<'_, 'tcx>,\n         r: ty::Region<'tcx>,\n@@ -226,7 +226,7 @@ impl CanonicalizeRegionMode for CanonicalizeUserTypeAnnotation {\n struct CanonicalizeAllFreeRegions;\n \n impl CanonicalizeRegionMode for CanonicalizeAllFreeRegions {\n-    fn canonicalize_free_region(\n+    fn canonicalize_free_region<'tcx>(\n         &self,\n         canonicalizer: &mut Canonicalizer<'_, 'tcx>,\n         r: ty::Region<'tcx>,\n@@ -242,7 +242,7 @@ impl CanonicalizeRegionMode for CanonicalizeAllFreeRegions {\n struct CanonicalizeFreeRegionsOtherThanStatic;\n \n impl CanonicalizeRegionMode for CanonicalizeFreeRegionsOtherThanStatic {\n-    fn canonicalize_free_region(\n+    fn canonicalize_free_region<'tcx>(\n         &self,\n         canonicalizer: &mut Canonicalizer<'_, 'tcx>,\n         r: ty::Region<'tcx>,"}, {"sha": "5e48fbf253db8d3a95959fcfe9c40d0bfdc2b101", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -533,7 +533,7 @@ struct Generalization<'tcx> {\n     needs_wf: bool,\n }\n \n-impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n+impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n@@ -827,7 +827,7 @@ struct ConstInferUnifier<'cx, 'tcx> {\n // We use `TypeRelation` here to propagate `RelateResult` upwards.\n //\n // Both inputs are expected to be the same.\n-impl TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n+impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }"}, {"sha": "90c0ff9226f7783618ff2219672a0965043cfa73", "filename": "compiler/rustc_infer/src/infer/equate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -23,7 +23,7 @@ impl<'combine, 'infcx, 'tcx> Equate<'combine, 'infcx, 'tcx> {\n     }\n }\n \n-impl TypeRelation<'tcx> for Equate<'combine, 'infcx, 'tcx> {\n+impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {\n     fn tag(&self) -> &'static str {\n         \"Equate\"\n     }"}, {"sha": "a292bcd4f208fbaf2887f3f01dbc82268c3c1b25", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -83,7 +83,7 @@ pub use need_type_info::TypeAnnotationNeeded;\n \n pub mod nice_region_error;\n \n-pub(super) fn note_and_explain_region(\n+pub(super) fn note_and_explain_region<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     err: &mut DiagnosticBuilder<'_>,\n     prefix: &str,\n@@ -116,7 +116,7 @@ pub(super) fn note_and_explain_region(\n     emit_msg_span(err, prefix, description, span, suffix);\n }\n \n-fn explain_free_region(\n+fn explain_free_region<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     err: &mut DiagnosticBuilder<'_>,\n     prefix: &str,\n@@ -128,7 +128,7 @@ fn explain_free_region(\n     label_msg_span(err, prefix, description, span, suffix);\n }\n \n-fn msg_span_from_free_region(\n+fn msg_span_from_free_region<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     region: ty::Region<'tcx>,\n     alt_span: Option<Span>,\n@@ -145,7 +145,7 @@ fn msg_span_from_free_region(\n     }\n }\n \n-fn msg_span_from_early_bound_and_free_regions(\n+fn msg_span_from_early_bound_and_free_regions<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     region: ty::Region<'tcx>,\n ) -> (String, Span) {\n@@ -226,7 +226,7 @@ fn label_msg_span(\n     }\n }\n \n-pub fn unexpected_hidden_region_diagnostic(\n+pub fn unexpected_hidden_region_diagnostic<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     span: Span,\n     hidden_ty: Ty<'tcx>,\n@@ -316,7 +316,7 @@ pub fn unexpected_hidden_region_diagnostic(\n /// with the other type. A TyVar inference type is compatible with any type, and an IntVar or\n /// FloatVar inference type are compatible with themselves or their concrete types (Int and\n /// Float types, respectively). When comparing two ADTs, these rules apply recursively.\n-pub fn same_type_modulo_infer(a: Ty<'tcx>, b: Ty<'ctx>) -> bool {\n+pub fn same_type_modulo_infer<'tcx>(a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n     match (&a.kind(), &b.kind()) {\n         (&ty::Adt(did_a, substs_a), &ty::Adt(did_b, substs_b)) => {\n             if did_a != did_b {"}, {"sha": "89023101f3cd2c68f1e23b0cd4e76ee24c6814c6", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -20,7 +20,7 @@ use rustc_middle::ty::{self, Region, TyCtxt};\n /// ```\n /// The function returns the nested type corresponding to the anonymous region\n /// for e.g., `&u8` and `Vec<&u8>`.\n-pub(crate) fn find_anon_type(\n+pub(crate) fn find_anon_type<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     region: Region<'tcx>,\n     br: &ty::BoundRegionKind,\n@@ -50,7 +50,7 @@ pub(crate) fn find_anon_type(\n \n // This method creates a FindNestedTypeVisitor which returns the type corresponding\n // to the anonymous region.\n-fn find_component_for_bound_region(\n+fn find_component_for_bound_region<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     arg: &'tcx hir::Ty<'tcx>,\n     br: &ty::BoundRegionKind,\n@@ -83,7 +83,7 @@ struct FindNestedTypeVisitor<'tcx> {\n     current_index: ty::DebruijnIndex,\n }\n \n-impl Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n+impl<'tcx> Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n@@ -207,7 +207,7 @@ struct TyPathVisitor<'tcx> {\n     current_index: ty::DebruijnIndex,\n }\n \n-impl Visitor<'tcx> for TyPathVisitor<'tcx> {\n+impl<'tcx> Visitor<'tcx> for TyPathVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Map<'tcx>> {"}, {"sha": "24652a3a6bc10c8758a3668f96eda654ac89b1bf", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -13,7 +13,7 @@ use rustc_middle::ty::{self, TyCtxt};\n \n use std::fmt::{self, Write};\n \n-impl NiceRegionError<'me, 'tcx> {\n+impl<'tcx> NiceRegionError<'_, 'tcx> {\n     /// When given a `ConcreteFailure` for a function with arguments containing a named region and\n     /// an anonymous region, emit a descriptive diagnostic error.\n     pub(super) fn try_report_placeholder_conflict(&self) -> Option<DiagnosticBuilder<'tcx>> {"}, {"sha": "51f33a206f48e1e805ded312ffd71de81b5f1b96", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -287,7 +287,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n }\n \n pub fn suggest_new_region_bound(\n-    tcx: TyCtxt<'tcx>,\n+    tcx: TyCtxt<'_>,\n     err: &mut DiagnosticBuilder<'_>,\n     fn_returns: Vec<&rustc_hir::Ty<'_>>,\n     lifetime_name: String,"}, {"sha": "c12367409a2d152f041e00d73c4b7c50684c48b4", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -86,7 +86,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             counter: usize,\n         }\n \n-        impl HighlightBuilder<'tcx> {\n+        impl<'tcx> HighlightBuilder<'tcx> {\n             fn build(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> RegionHighlightMode {\n                 let mut builder =\n                     HighlightBuilder { highlight: RegionHighlightMode::default(), counter: 1, tcx };\n@@ -186,7 +186,7 @@ struct TypeParamSpanVisitor<'tcx> {\n     types: Vec<Span>,\n }\n \n-impl Visitor<'tcx> for TypeParamSpanVisitor<'tcx> {\n+impl<'tcx> Visitor<'tcx> for TypeParamSpanVisitor<'tcx> {\n     type Map = rustc_middle::hir::map::Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<Self::Map> {"}, {"sha": "862f5a5fbb8c1805ca84a47bc2e1ff71f7c9d7d2", "filename": "compiler/rustc_infer/src/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -23,7 +23,7 @@ impl<'combine, 'infcx, 'tcx> Glb<'combine, 'infcx, 'tcx> {\n     }\n }\n \n-impl TypeRelation<'tcx> for Glb<'combine, 'infcx, 'tcx> {\n+impl<'tcx> TypeRelation<'tcx> for Glb<'_, '_, 'tcx> {\n     fn tag(&self) -> &'static str {\n         \"Glb\"\n     }"}, {"sha": "5191d1c1cc1008c8706a9fcc2d866affe976360a", "filename": "compiler/rustc_infer/src/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -23,7 +23,7 @@ impl<'combine, 'infcx, 'tcx> Lub<'combine, 'infcx, 'tcx> {\n     }\n }\n \n-impl TypeRelation<'tcx> for Lub<'combine, 'infcx, 'tcx> {\n+impl<'tcx> TypeRelation<'tcx> for Lub<'_, '_, 'tcx> {\n     fn tag(&self) -> &'static str {\n         \"Lub\"\n     }"}, {"sha": "9db815548d8cc4dcbf73e6fe3f9783e091112884", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -554,7 +554,7 @@ pub trait TyCtxtInferExt<'tcx> {\n     fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;\n }\n \n-impl TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {\n+impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {\n     fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {\n         InferCtxtBuilder {\n             tcx: self,\n@@ -1718,7 +1718,7 @@ pub enum TyOrConstInferVar<'tcx> {\n     Const(ConstVid<'tcx>),\n }\n \n-impl TyOrConstInferVar<'tcx> {\n+impl<'tcx> TyOrConstInferVar<'tcx> {\n     /// Tries to extract an inference variable from a type or a constant, returns `None`\n     /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and\n     /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`)."}, {"sha": "ebc0e80cdf2679562c9c83adc31036d89cc011bf", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -407,7 +407,7 @@ trait VidValuePair<'tcx>: Debug {\n     /// Extract the scopes that apply to whichever side of the tuple\n     /// the vid was found on.  See the comment where this is called\n     /// for more details on why we want them.\n-    fn vid_scopes<D: TypeRelatingDelegate<'tcx>>(\n+    fn vid_scopes<'r, D: TypeRelatingDelegate<'tcx>>(\n         &self,\n         relate: &'r mut TypeRelating<'_, 'tcx, D>,\n     ) -> &'r mut Vec<BoundRegionScope<'tcx>>;\n@@ -424,7 +424,7 @@ trait VidValuePair<'tcx>: Debug {\n         D: TypeRelatingDelegate<'tcx>;\n }\n \n-impl VidValuePair<'tcx> for (ty::TyVid, Ty<'tcx>) {\n+impl<'tcx> VidValuePair<'tcx> for (ty::TyVid, Ty<'tcx>) {\n     fn vid(&self) -> ty::TyVid {\n         self.0\n     }\n@@ -433,7 +433,7 @@ impl VidValuePair<'tcx> for (ty::TyVid, Ty<'tcx>) {\n         self.1\n     }\n \n-    fn vid_scopes<D>(\n+    fn vid_scopes<'r, D>(\n         &self,\n         relate: &'r mut TypeRelating<'_, 'tcx, D>,\n     ) -> &'r mut Vec<BoundRegionScope<'tcx>>\n@@ -456,7 +456,7 @@ impl VidValuePair<'tcx> for (ty::TyVid, Ty<'tcx>) {\n }\n \n // In this case, the \"vid\" is the \"b\" type.\n-impl VidValuePair<'tcx> for (Ty<'tcx>, ty::TyVid) {\n+impl<'tcx> VidValuePair<'tcx> for (Ty<'tcx>, ty::TyVid) {\n     fn vid(&self) -> ty::TyVid {\n         self.1\n     }\n@@ -465,7 +465,7 @@ impl VidValuePair<'tcx> for (Ty<'tcx>, ty::TyVid) {\n         self.0\n     }\n \n-    fn vid_scopes<D>(\n+    fn vid_scopes<'r, D>(\n         &self,\n         relate: &'r mut TypeRelating<'_, 'tcx, D>,\n     ) -> &'r mut Vec<BoundRegionScope<'tcx>>\n@@ -487,7 +487,7 @@ impl VidValuePair<'tcx> for (Ty<'tcx>, ty::TyVid) {\n     }\n }\n \n-impl<D> TypeRelation<'tcx> for TypeRelating<'me, 'tcx, D>\n+impl<'tcx, D> TypeRelation<'tcx> for TypeRelating<'_, 'tcx, D>\n where\n     D: TypeRelatingDelegate<'tcx>,\n {\n@@ -841,7 +841,7 @@ where\n     universe: ty::UniverseIndex,\n }\n \n-impl<D> TypeRelation<'tcx> for TypeGeneralizer<'me, 'tcx, D>\n+impl<'tcx, D> TypeRelation<'tcx> for TypeGeneralizer<'_, 'tcx, D>\n where\n     D: TypeRelatingDelegate<'tcx>,\n {"}, {"sha": "22e18deac25e4e4a973ca11e41b9217c13f0b372", "filename": "compiler/rustc_infer/src/infer/outlives/components.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -49,7 +49,7 @@ pub enum Component<'tcx> {\n \n /// Push onto `out` all the things that must outlive `'a` for the condition\n /// `ty0: 'a` to hold. Note that `ty0` must be a **fully resolved type**.\n-pub fn push_outlives_components(\n+pub fn push_outlives_components<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ty0: Ty<'tcx>,\n     out: &mut SmallVec<[Component<'tcx>; 4]>,\n@@ -59,7 +59,7 @@ pub fn push_outlives_components(\n     debug!(\"components({:?}) = {:?}\", ty0, out);\n }\n \n-fn compute_components(\n+fn compute_components<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ty: Ty<'tcx>,\n     out: &mut SmallVec<[Component<'tcx>; 4]>,\n@@ -190,7 +190,7 @@ fn compute_components(\n         }\n }\n \n-fn compute_components_recursive(\n+fn compute_components_recursive<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     parent: GenericArg<'tcx>,\n     out: &mut SmallVec<[Component<'tcx>; 4]>,"}, {"sha": "29775a96685311bf6cb091fb79ac63d522cc5c3d", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -65,15 +65,15 @@ pub struct RegionConstraintCollector<'a, 'tcx> {\n     undo_log: &'a mut InferCtxtUndoLogs<'tcx>,\n }\n \n-impl std::ops::Deref for RegionConstraintCollector<'_, 'tcx> {\n+impl<'tcx> std::ops::Deref for RegionConstraintCollector<'_, 'tcx> {\n     type Target = RegionConstraintStorage<'tcx>;\n     #[inline]\n     fn deref(&self) -> &RegionConstraintStorage<'tcx> {\n         self.storage\n     }\n }\n \n-impl std::ops::DerefMut for RegionConstraintCollector<'_, 'tcx> {\n+impl<'tcx> std::ops::DerefMut for RegionConstraintCollector<'_, 'tcx> {\n     #[inline]\n     fn deref_mut(&mut self) -> &mut RegionConstraintStorage<'tcx> {\n         self.storage"}, {"sha": "ccac0efd6c9eec22084e869b9073afeb97aae04a", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -31,7 +31,7 @@ impl<'combine, 'infcx, 'tcx> Sub<'combine, 'infcx, 'tcx> {\n     }\n }\n \n-impl TypeRelation<'tcx> for Sub<'combine, 'infcx, 'tcx> {\n+impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n     fn tag(&self) -> &'static str {\n         \"Sub\"\n     }"}, {"sha": "5f228d1e203ea18581fb60a9609324ce2c0762f1", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -19,7 +19,6 @@\n #![feature(extend_one)]\n #![feature(let_else)]\n #![feature(never_type)]\n-#![feature(in_band_lifetimes)]\n #![feature(control_flow_enum)]\n #![feature(min_specialization)]\n #![feature(label_break_value)]"}, {"sha": "736278ba0d3464d0bb8573884ff0451e921ab09f", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -63,7 +63,7 @@ pub trait TraitEngineExt<'tcx> {\n     );\n }\n \n-impl<T: ?Sized + TraitEngine<'tcx>> TraitEngineExt<'tcx> for T {\n+impl<'tcx, T: ?Sized + TraitEngine<'tcx>> TraitEngineExt<'tcx> for T {\n     fn register_predicate_obligations(\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,"}, {"sha": "1a5ffd93701c65bd0f81e90ccfe084679380854d", "filename": "compiler/rustc_infer/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -35,7 +35,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     }\n }\n \n-pub fn report_object_safety_error(\n+pub fn report_object_safety_error<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     span: Span,\n     trait_def_id: DefId,"}, {"sha": "b4fb10370d41ef77a58618f19377b0ac6faf0e82", "filename": "compiler/rustc_infer/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -55,7 +55,7 @@ pub struct Obligation<'tcx, T> {\n pub type PredicateObligation<'tcx> = Obligation<'tcx, ty::Predicate<'tcx>>;\n pub type TraitObligation<'tcx> = Obligation<'tcx, ty::PolyTraitPredicate<'tcx>>;\n \n-impl PredicateObligation<'tcx> {\n+impl<'tcx> PredicateObligation<'tcx> {\n     /// Flips the polarity of the inner predicate.\n     ///\n     /// Given `T: Trait` predicate it returns `T: !Trait` and given `T: !Trait` returns `T: Trait`.\n@@ -69,7 +69,7 @@ impl PredicateObligation<'tcx> {\n     }\n }\n \n-impl TraitObligation<'tcx> {\n+impl TraitObligation<'_> {\n     /// Returns `true` if the trait predicate is considered `const` in its ParamEnv.\n     pub fn is_const(&self) -> bool {\n         match (self.predicate.skip_binder().constness, self.param_env.constness()) {"}, {"sha": "96af16c668781ecb46b20523ff33d330a7e1fd5a", "filename": "compiler/rustc_infer/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -80,7 +80,7 @@ pub struct ProjectionCacheKey<'tcx> {\n     ty: ty::ProjectionTy<'tcx>,\n }\n \n-impl ProjectionCacheKey<'tcx> {\n+impl<'tcx> ProjectionCacheKey<'tcx> {\n     pub fn new(ty: ty::ProjectionTy<'tcx>) -> Self {\n         Self { ty }\n     }"}, {"sha": "8f5d6c85097cb0d053716c3b681cb6d82569d59a", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -20,7 +20,7 @@ pub struct PredicateSet<'tcx> {\n     set: FxHashSet<ty::Predicate<'tcx>>,\n }\n \n-impl PredicateSet<'tcx> {\n+impl<'tcx> PredicateSet<'tcx> {\n     pub fn new(tcx: TyCtxt<'tcx>) -> Self {\n         Self { tcx, set: Default::default() }\n     }\n@@ -40,7 +40,7 @@ impl PredicateSet<'tcx> {\n     }\n }\n \n-impl Extend<ty::Predicate<'tcx>> for PredicateSet<'tcx> {\n+impl<'tcx> Extend<ty::Predicate<'tcx>> for PredicateSet<'tcx> {\n     fn extend<I: IntoIterator<Item = ty::Predicate<'tcx>>>(&mut self, iter: I) {\n         for pred in iter {\n             self.insert(pred);\n@@ -131,7 +131,7 @@ fn predicate_obligation<'tcx>(\n     Obligation { cause, param_env, recursion_depth: 0, predicate }\n }\n \n-impl Elaborator<'tcx> {\n+impl<'tcx> Elaborator<'tcx> {\n     pub fn filter_to_traits(self) -> FilterToTraits<Self> {\n         FilterToTraits::new(self)\n     }\n@@ -267,7 +267,7 @@ impl Elaborator<'tcx> {\n     }\n }\n \n-impl Iterator for Elaborator<'tcx> {\n+impl<'tcx> Iterator for Elaborator<'tcx> {\n     type Item = PredicateObligation<'tcx>;\n \n     fn size_hint(&self) -> (usize, Option<usize>) {"}, {"sha": "9b54db0d7de86534a4fe8c12e3072b97d8c54a90", "filename": "compiler/rustc_mir_build/src/thir/constant.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -46,7 +46,9 @@ crate fn lit_to_const<'tcx>(\n         (ast::LitKind::Int(n, _), ty::Uint(_)) | (ast::LitKind::Int(n, _), ty::Int(_)) => {\n             trunc(if neg { (*n as i128).overflowing_neg().0 as u128 } else { *n })?\n         }\n-        (ast::LitKind::Float(n, _), ty::Float(fty)) => parse_float(*n, *fty, neg),\n+        (ast::LitKind::Float(n, _), ty::Float(fty)) => {\n+            parse_float(*n, *fty, neg).ok_or(LitToConstError::Reported)?\n+        }\n         (ast::LitKind::Bool(b), ty::Bool) => ConstValue::Scalar(Scalar::from_bool(*b)),\n         (ast::LitKind::Char(c), ty::Char) => ConstValue::Scalar(Scalar::from_char(*c)),\n         (ast::LitKind::Err(_), _) => return Err(LitToConstError::Reported),\n@@ -55,14 +57,15 @@ crate fn lit_to_const<'tcx>(\n     Ok(ty::Const::from_value(tcx, lit, ty))\n }\n \n-fn parse_float<'tcx>(num: Symbol, fty: ty::FloatTy, neg: bool) -> ConstValue<'tcx> {\n+fn parse_float<'tcx>(num: Symbol, fty: ty::FloatTy, neg: bool) -> Option<ConstValue<'tcx>> {\n     let num = num.as_str();\n     use rustc_apfloat::ieee::{Double, Single};\n     let scalar = match fty {\n         ty::FloatTy::F32 => {\n-            let rust_f = num\n-                .parse::<f32>()\n-                .unwrap_or_else(|e| panic!(\"f32 failed to parse `{}`: {:?}\", num, e));\n+            let rust_f = match num.parse::<f32>() {\n+                Ok(f) => f,\n+                Err(_) => return None,\n+            };\n             let mut f = num.parse::<Single>().unwrap_or_else(|e| {\n                 panic!(\"apfloat::ieee::Single failed to parse `{}`: {:?}\", num, e)\n             });\n@@ -82,9 +85,10 @@ fn parse_float<'tcx>(num: Symbol, fty: ty::FloatTy, neg: bool) -> ConstValue<'tc\n             Scalar::from_f32(f)\n         }\n         ty::FloatTy::F64 => {\n-            let rust_f = num\n-                .parse::<f64>()\n-                .unwrap_or_else(|e| panic!(\"f64 failed to parse `{}`: {:?}\", num, e));\n+            let rust_f = match num.parse::<f64>() {\n+                Ok(f) => f,\n+                Err(_) => return None,\n+            };\n             let mut f = num.parse::<Double>().unwrap_or_else(|e| {\n                 panic!(\"apfloat::ieee::Double failed to parse `{}`: {:?}\", num, e)\n             });\n@@ -105,5 +109,5 @@ fn parse_float<'tcx>(num: Symbol, fty: ty::FloatTy, neg: bool) -> ConstValue<'tc\n         }\n     };\n \n-    ConstValue::Scalar(scalar)\n+    Some(ConstValue::Scalar(scalar))\n }"}, {"sha": "b1fa9041342a6e3744c3daa4e7c0714f344c7ad0", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -498,7 +498,7 @@ fn record_accesses<'a, 'tcx: 'a>(\n /// the user's terminal with thousands of lines of type-name.\n ///\n /// If the type name is longer than before+after, it will be written to a file.\n-fn shrunk_instance_name(\n+fn shrunk_instance_name<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: &Instance<'tcx>,\n     before: usize,\n@@ -1145,7 +1145,7 @@ struct RootCollector<'a, 'tcx> {\n     entry_fn: Option<(DefId, EntryFnType)>,\n }\n \n-impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n+impl<'v> ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n     fn visit_item(&mut self, item: &'v hir::Item<'v>) {\n         match item.kind {\n             hir::ItemKind::ExternCrate(..)\n@@ -1225,7 +1225,7 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n     fn visit_foreign_item(&mut self, _foreign_item: &'v hir::ForeignItem<'v>) {}\n }\n \n-impl RootCollector<'_, 'v> {\n+impl<'v> RootCollector<'_, 'v> {\n     fn is_root(&self, def_id: LocalDefId) -> bool {\n         !item_requires_monomorphization(self.tcx, def_id)\n             && match self.mode {"}, {"sha": "21ac174ba90b771a4de495d4e2820c18d0c5b671", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -3,7 +3,6 @@\n #![feature(crate_visibility_modifier)]\n #![feature(control_flow_enum)]\n #![feature(let_else)]\n-#![feature(in_band_lifetimes)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "516c9a9259d4fe17624e245b327b71e5b643961b", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -378,7 +378,7 @@ fn fallback_cgu_name(name_builder: &mut CodegenUnitNameBuilder<'_>) -> Symbol {\n     name_builder.build_cgu_name(LOCAL_CRATE, &[\"fallback\"], Some(\"cgu\"))\n }\n \n-fn mono_item_linkage_and_visibility(\n+fn mono_item_linkage_and_visibility<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     mono_item: &MonoItem<'tcx>,\n     can_be_internalized: &mut bool,\n@@ -393,7 +393,7 @@ fn mono_item_linkage_and_visibility(\n \n type CguNameCache = FxHashMap<(DefId, bool), Symbol>;\n \n-fn mono_item_visibility(\n+fn mono_item_visibility<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     mono_item: &MonoItem<'tcx>,\n     can_be_internalized: &mut bool,"}, {"sha": "6084cdda22768f7bf06ed30ba53a3ccbc7905063", "filename": "compiler/rustc_monomorphize/src/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -7,7 +7,7 @@ use std::io::prelude::*;\n ///\n /// During the same compile all closures dump the information in the same file\n /// \"closure_profile_XXXXX.csv\", which is created in the directory where the compiler is invoked.\n-crate fn dump_closure_profile(tcx: TyCtxt<'tcx>, closure_instance: Instance<'tcx>) {\n+crate fn dump_closure_profile<'tcx>(tcx: TyCtxt<'tcx>, closure_instance: Instance<'tcx>) {\n     let mut file = if let Ok(file) = OpenOptions::new()\n         .create(true)\n         .append(true)"}, {"sha": "fc7731291b371a33906f3d56b03adad01a989a24", "filename": "src/test/ui/consts/issue-91434.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/src%2Ftest%2Fui%2Fconsts%2Fissue-91434.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/src%2Ftest%2Fui%2Fconsts%2Fissue-91434.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-91434.rs?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    [9; [[9E; h]]];\n+    //~^ ERROR: expected at least one digit in exponent\n+    //~| ERROR: cannot find value `h` in this scope [E0425]\n+    //~| ERROR: constant expression depends on a generic parameter\n+}"}, {"sha": "9d3fe5f201656be94c13f8fc2f50415d3876b2c8", "filename": "src/test/ui/consts/issue-91434.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e95e084a14870a718c712936ab5a8f8cd0159485/src%2Ftest%2Fui%2Fconsts%2Fissue-91434.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e95e084a14870a718c712936ab5a8f8cd0159485/src%2Ftest%2Fui%2Fconsts%2Fissue-91434.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-91434.stderr?ref=e95e084a14870a718c712936ab5a8f8cd0159485", "patch": "@@ -0,0 +1,23 @@\n+error: expected at least one digit in exponent\n+  --> $DIR/issue-91434.rs:2:11\n+   |\n+LL |     [9; [[9E; h]]];\n+   |           ^^\n+\n+error[E0425]: cannot find value `h` in this scope\n+  --> $DIR/issue-91434.rs:2:15\n+   |\n+LL |     [9; [[9E; h]]];\n+   |               ^ not found in this scope\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-91434.rs:2:9\n+   |\n+LL |     [9; [[9E; h]]];\n+   |         ^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}]}