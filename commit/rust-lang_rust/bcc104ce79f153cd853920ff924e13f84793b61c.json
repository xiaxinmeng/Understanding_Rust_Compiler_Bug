{"sha": "bcc104ce79f153cd853920ff924e13f84793b61c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjYzEwNGNlNzlmMTUzY2Q4NTM5MjBmZjkyNGUxM2Y4NDc5M2I2MWM=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-03-25T01:20:49Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-25T07:15:56Z"}, "message": "A first stab at the 'nbody' demo, with support for calling C sqrt().", "tree": {"sha": "b751831c7db8f242cb1097f5e07c44cbb8556bd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b751831c7db8f242cb1097f5e07c44cbb8556bd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcc104ce79f153cd853920ff924e13f84793b61c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcc104ce79f153cd853920ff924e13f84793b61c", "html_url": "https://github.com/rust-lang/rust/commit/bcc104ce79f153cd853920ff924e13f84793b61c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcc104ce79f153cd853920ff924e13f84793b61c/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b9cf7902cbe11dd19163a88e921b2755f03d71a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b9cf7902cbe11dd19163a88e921b2755f03d71a", "html_url": "https://github.com/rust-lang/rust/commit/0b9cf7902cbe11dd19163a88e921b2755f03d71a"}], "stats": {"total": 220, "additions": 219, "deletions": 1}, "files": [{"sha": "5ddf5b784e79f234f075f7e58cd2f36f3683d770", "filename": "Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bcc104ce79f153cd853920ff924e13f84793b61c/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/bcc104ce79f153cd853920ff924e13f84793b61c/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=bcc104ce79f153cd853920ff924e13f84793b61c", "patch": "@@ -638,7 +638,8 @@ TEST_XFAILS_BOOT := $(TASK_XFAILS) \\\n                       bad-send.rs \\\n                       infinite-vec-type-recursion.rs \\\n                       tail-non-call.rs \\\n-                      writing-through-read-alias.rs)\n+                      writing-through-read-alias.rs) \\\n+                    $(S)src/test/bench/shootout/nbody.rs\n \n TEST_XFAILS_STAGE0 := $(FLOAT_XFAILS) \\\n                       $(addprefix $(S)src/test/run-pass/, \\"}, {"sha": "2de9d7f47acdecdb68cc8c1de34bbb346b540717", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bcc104ce79f153cd853920ff924e13f84793b61c/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/bcc104ce79f153cd853920ff924e13f84793b61c/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=bcc104ce79f153cd853920ff924e13f84793b61c", "patch": "@@ -51,6 +51,11 @@ last_os_error(rust_task *task) {\n     return st;\n }\n \n+extern \"C\" CDECL\n+void squareroot(rust_task *task, double *input, double *output) {\n+    *output = sqrt(*input);\n+}\n+\n extern \"C\" CDECL size_t\n size_of(rust_task *task, type_desc *t) {\n   return t->size;"}, {"sha": "a1cc8e514b066c7355733b8cd9d4aa9b3f44219d", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcc104ce79f153cd853920ff924e13f84793b61c/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/bcc104ce79f153cd853920ff924e13f84793b61c/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=bcc104ce79f153cd853920ff924e13f84793b61c", "patch": "@@ -16,6 +16,7 @@\n #include <stdio.h>\n #include <string.h>\n #include <fcntl.h>\n+#include <math.h>\n \n #include \"rust.h\"\n #include \"rand.h\""}, {"sha": "df9e26aff9e3e0432b6930e4519bd8d20cd8e881", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcc104ce79f153cd853920ff924e13f84793b61c/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/bcc104ce79f153cd853920ff924e13f84793b61c/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=bcc104ce79f153cd853920ff924e13f84793b61c", "patch": "@@ -20,6 +20,7 @@ rust_get_stdout\n rust_run_program\n rust_start\n size_of\n+squareroot\n str_alloc\n str_buf\n str_byte_len\n@@ -39,6 +40,7 @@ upcall_get_type_desc\n upcall_grow_task\n upcall_join\n upcall_kill\n+upcall_log_double\n upcall_log_int\n upcall_log_str\n upcall_malloc"}, {"sha": "b0ac2d446976474e25afb8e41a38460a300ddab0", "filename": "src/test/bench/shootout/nbody.rs", "status": "added", "additions": 209, "deletions": 0, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/bcc104ce79f153cd853920ff924e13f84793b61c/src%2Ftest%2Fbench%2Fshootout%2Fnbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc104ce79f153cd853920ff924e13f84793b61c/src%2Ftest%2Fbench%2Fshootout%2Fnbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout%2Fnbody.rs?ref=bcc104ce79f153cd853920ff924e13f84793b61c", "patch": "@@ -0,0 +1,209 @@\n+// based on:\n+// http://shootout.alioth.debian.org/u32/benchmark.php?test=nbody&lang=java\n+\n+fn main() {\n+\n+    let vec[int] inputs = vec(\n+        50000\n+        //these segfault :(\n+        //500000,\n+        //5000000,\n+        //50000000\n+        );\n+\n+    let vec[Body.props] bodies = NBodySystem.MakeNBodySystem();\n+\n+    for (int n in inputs) {\n+        // TODO: make #fmt handle floats?\n+        log NBodySystem.energy(bodies);\n+\n+        let int i = 0;\n+        while (i < n) {\n+            bodies = NBodySystem.advance(bodies, 0.01);\n+            i = i+1;\n+        }\n+        log NBodySystem.energy(bodies);\n+    }\n+}\n+\n+// making a native call to sqrt\n+native \"rust\" mod rustrt {\n+    fn squareroot(&float input, &mutable float output);\n+}\n+\n+// Body.props is a record of floats, so\n+// vec[Body.props] is a vector of records of floats\n+\n+mod NBodySystem {\n+\n+    fn MakeNBodySystem() -> vec[Body.props] {\n+        // can't iterate over a record?  how about a vector, then?\n+        let vec[Body.props] bodies = vec(\n+            // these each return a Body.props\n+            Body.sun(), \n+            Body.jupiter(), \n+            Body.saturn(), \n+            Body.uranus(), \n+            Body.neptune());\n+\n+        let float px = 0.0;\n+        let float py = 0.0;\n+        let float pz = 0.0;\n+\n+        for (Body.props body in bodies) {\n+            px += body.vx * body.mass;\n+            py += body.vy * body.mass;\n+            pz += body.vz * body.mass;\n+        }\n+        bodies.(0) = Body.offsetMomentum(bodies.(0), px, py, pz);\n+\n+        ret bodies;\n+    }\n+\n+    fn advance(vec[Body.props] bodies, float dt) -> vec[Body.props] {\n+        for (Body.props ibody in bodies) {\n+\n+            let Body.props iBody = ibody;\n+\n+            for (Body.props jbody in bodies) {\n+                let float dx = iBody.x - jbody.x;\n+                let float dy = iBody.y - jbody.y;\n+                let float dz = iBody.z - jbody.z;\n+\n+                let float dSquared = dx * dx + dy * dy + dz * dz;\n+\n+                let float distance;\n+                rustrt.squareroot(dSquared, distance);\n+                let float mag = dt / (dSquared * distance);\n+            }\n+        }        \n+\n+        for (Body.props body in bodies) {\n+            body.x += dt * body.vx;\n+            body.y += dt * body.vy;\n+            body.z += dt * body.vz;\n+        }\n+\n+        ret bodies;\n+    }\n+\n+    fn energy(vec[Body.props] bodies) -> float {\n+        let float dx;\n+        let float dy;\n+        let float dz;\n+        let float distance;\n+        let float e = 0.0;\n+\n+        for (Body.props ibody in bodies) {\n+\n+            // do we need this?\n+            let Body.props iBody = ibody;\n+\n+            e += 0.5 * iBody.mass *\n+                ( iBody.vx * iBody.vx\n+                  + iBody.vy * iBody.vy\n+                  + iBody.vz * iBody.vz );\n+\n+            for (Body.props jbody in bodies) {\n+\n+                // do we need this?\n+                let Body.props jBody = jbody;\n+\n+                dx = iBody.x - jBody.x;\n+                dy = iBody.y - jBody.y;\n+                dz = iBody.z - jBody.z;\n+\n+                rustrt.squareroot(dx*dx + dy*dy + dz*dz, distance);\n+                e -= (iBody.mass * jBody.mass) / distance;\n+            }\n+        }\n+        ret e;\n+    }\n+\n+}\n+\n+mod Body {\n+    \n+    const float PI = 3.141592;\n+    const float SOLAR_MASS = 39.478417; // was 4 * PI * PI originally\n+    const float DAYS_PER_YEAR = 365.24;\n+\n+    type props = rec(float x, \n+                     float y, \n+                     float z, \n+                     float vx, \n+                     float vy,\n+                     float vz, \n+                     float mass);\n+\n+    fn jupiter() -> Body.props {\n+        // current limitation of the float lexer: decimal part has to\n+        // fit into a 32-bit int.\n+        \n+        let Body.props p;\n+        p.x    =  4.841431e+00;\n+        p.y    = -1.160320e+00;\n+        p.z    = -1.036220e-01;\n+        p.vx   =  1.660076e-03 * DAYS_PER_YEAR;\n+        p.vy   =  7.699011e-03 * DAYS_PER_YEAR;\n+        p.vz   = -6.904600e-05 * DAYS_PER_YEAR;\n+        p.mass =  9.547919e-04 * SOLAR_MASS;\n+        ret p;\n+    }\n+\n+    fn saturn() -> Body.props {\n+        let Body.props p;\n+        p.x    =  8.343366e+00;\n+        p.y    =  4.124798e+00;\n+        p.z    = -4.035234e-01;\n+        p.vx   = -2.767425e-03 * DAYS_PER_YEAR;\n+        p.vy   =  4.998528e-03 * DAYS_PER_YEAR;\n+        p.vz   =  2.304172e-05 * DAYS_PER_YEAR;\n+        p.mass =  2.858859e-04 * SOLAR_MASS;\n+        ret p;\n+   }\n+\n+    fn uranus() -> Body.props {\n+        let Body.props p;\n+        p.x    =  1.289436e+01;\n+        p.y    = -1.511115e+01;\n+        p.z    = -2.233075e-01;\n+        p.vx   =  2.964601e-03 * DAYS_PER_YEAR;\n+        p.vy   =  2.378471e-03 * DAYS_PER_YEAR;\n+        p.vz   = -2.965895e-05 * DAYS_PER_YEAR;\n+        p.mass =  4.366244e-05 * SOLAR_MASS;\n+        ret p;\n+    }\n+\n+    fn neptune() -> Body.props {\n+        let Body.props p;\n+        p.x    =  1.537969e+01;\n+        p.y    = -2.591931e+01;\n+        p.z    =  1.792587e-01;\n+        p.vx   =  2.680677e-03 * DAYS_PER_YEAR;\n+        p.vy   =  1.628241e-03 * DAYS_PER_YEAR;\n+        p.vz   = -9.515922e-05 * DAYS_PER_YEAR;\n+        p.mass =  5.151389e-05 * SOLAR_MASS;\n+        ret p;\n+   }\n+\n+   fn sun() -> Body.props {\n+        let Body.props p;\n+        p.mass = SOLAR_MASS;\n+        ret p;\n+   }\n+\n+   fn offsetMomentum(Body.props props,\n+                     float px, \n+                     float py, \n+                     float pz) -> Body.props {\n+\n+       // TODO: should we create a new one or mutate the original?\n+       let Body.props p = props;\n+       p.vx = -px / SOLAR_MASS;\n+       p.vy = -py / SOLAR_MASS;\n+       p.vz = -pz / SOLAR_MASS;\n+       ret p;\n+   }\n+\n+}"}]}