{"sha": "661bea71c1a7fd366f5cc1638116f6c341fe4163", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2MWJlYTcxYzFhN2ZkMzY2ZjVjYzE2MzgxMTZmNmMzNDFmZTQxNjM=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-09-18T11:21:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-18T11:21:21Z"}, "message": "Merge pull request #3013 from YaLTeR/fix-issue-2985\n\nFix wrong shape for last chain items for indent_style = \"Visual\"", "tree": {"sha": "b2bc216364d3d70df47799a45380863c074b290b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2bc216364d3d70df47799a45380863c074b290b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/661bea71c1a7fd366f5cc1638116f6c341fe4163", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJboN+xCRBK7hj4Ov3rIwAAdHIIAKvqzJImT8twGLEnhz1lljum\n8D+A+Do8b5ZBcPgmwiuZSPupyYdnSjnmhFucfDWhC/HBHi25Nw6cOl6VbvpZqY5I\nHd2CBTsPop8BBbb1Rb4cDdPJDGrErFZ6xCNy19TaSwJ1iLQq1VZoOt8onwmpmLmo\nbemmZnC49KIIfBiuOtPRrt1by03zxHZ/kd/CbpPt9ClSOKBNDYFccA/FWGHc7RAy\nUOCfl17WZ68gaq6FLVkvzzy9922ZY1o6powbVg57H+CkOE6ILgcYCmZoZYa8aEnc\nYITC4JjtoqRXbu54MJOmbFO4FrxzHAqA6SyyNSY+TSCwRrP/OQqxlUhu2YrUhb0=\n=HTV9\n-----END PGP SIGNATURE-----\n", "payload": "tree b2bc216364d3d70df47799a45380863c074b290b\nparent d165533813b9b001afd78578c2a648efd393d6fb\nparent 4b4fb557d7fbe4ecf08d23d6421bed604ba9d8f7\nauthor Seiichi Uchida <seuchida@gmail.com> 1537269681 +0900\ncommitter GitHub <noreply@github.com> 1537269681 +0900\n\nMerge pull request #3013 from YaLTeR/fix-issue-2985\n\nFix wrong shape for last chain items for indent_style = \"Visual\""}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/661bea71c1a7fd366f5cc1638116f6c341fe4163", "html_url": "https://github.com/rust-lang/rust/commit/661bea71c1a7fd366f5cc1638116f6c341fe4163", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/661bea71c1a7fd366f5cc1638116f6c341fe4163/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d165533813b9b001afd78578c2a648efd393d6fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d165533813b9b001afd78578c2a648efd393d6fb", "html_url": "https://github.com/rust-lang/rust/commit/d165533813b9b001afd78578c2a648efd393d6fb"}, {"sha": "4b4fb557d7fbe4ecf08d23d6421bed604ba9d8f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b4fb557d7fbe4ecf08d23d6421bed604ba9d8f7", "html_url": "https://github.com/rust-lang/rust/commit/4b4fb557d7fbe4ecf08d23d6421bed604ba9d8f7"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "c57a9b49629fc27b8a381966ad332417173f96ba", "filename": "src/chains.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/661bea71c1a7fd366f5cc1638116f6c341fe4163/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/661bea71c1a7fd366f5cc1638116f6c341fe4163/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=661bea71c1a7fd366f5cc1638116f6c341fe4163", "patch": "@@ -614,6 +614,12 @@ impl<'a> ChainFormatterShared<'a> {\n             }\n         }\n \n+        let last_shape = if context.use_block_indent() {\n+            last_shape\n+        } else {\n+            child_shape.sub_width(shape.rhs_overhead(context.config) + last.tries)?\n+        };\n+\n         last_subexpr_str = last_subexpr_str.or_else(|| last.rewrite(context, last_shape));\n         self.rewrites.push(last_subexpr_str?);\n         Some(())"}, {"sha": "bde4da8314c13f880b91bb92a815cae891c60245", "filename": "tests/source/issue-2985.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/661bea71c1a7fd366f5cc1638116f6c341fe4163/tests%2Fsource%2Fissue-2985.rs", "raw_url": "https://github.com/rust-lang/rust/raw/661bea71c1a7fd366f5cc1638116f6c341fe4163/tests%2Fsource%2Fissue-2985.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-2985.rs?ref=661bea71c1a7fd366f5cc1638116f6c341fe4163", "patch": "@@ -0,0 +1,35 @@\n+// rustfmt-indent_style: Visual\n+fn foo() {\n+    {\n+        {\n+            let extra_encoder_settings = extra_encoder_settings.iter()\n+                                                               .filter_map(|&(name, value)| {\n+                                                         value.split()\n+                                                              .next()\n+                                                              .something()\n+                                                              .something2()\n+                                                              .something3()\n+                                                              .something4()\n+                                                     });\n+            let extra_encoder_settings = extra_encoder_settings.iter()\n+                                                               .filter_map(|&(name, value)| {\n+                                                                               value.split()\n+                                                                                    .next()\n+                                                                                    .something()\n+                                                                                    .something2()\n+                                                                                    .something3()\n+                                                                                    .something4()\n+                                                                           })\n+                                                               .something();\n+            if let Some(subpod) = pod.subpods.iter().find(|s| {\n+                                                              !s.plaintext\n+                                                                .as_ref()\n+                                                                .map(String::as_ref)\n+                                                                .unwrap_or(\"\")\n+                                                                .is_empty()\n+                                                          }) {\n+                do_something();\n+            }\n+        }\n+    }\n+}"}, {"sha": "c82714aba525cf64082a63b19c209f74f60f651c", "filename": "tests/target/issue-2985.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/661bea71c1a7fd366f5cc1638116f6c341fe4163/tests%2Ftarget%2Fissue-2985.rs", "raw_url": "https://github.com/rust-lang/rust/raw/661bea71c1a7fd366f5cc1638116f6c341fe4163/tests%2Ftarget%2Fissue-2985.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2985.rs?ref=661bea71c1a7fd366f5cc1638116f6c341fe4163", "patch": "@@ -0,0 +1,35 @@\n+// rustfmt-indent_style: Visual\n+fn foo() {\n+    {\n+        {\n+            let extra_encoder_settings = extra_encoder_settings.iter()\n+                                                               .filter_map(|&(name, value)| {\n+                                                                               value.split()\n+                                                                                    .next()\n+                                                                                    .something()\n+                                                                                    .something2()\n+                                                                                    .something3()\n+                                                                                    .something4()\n+                                                                           });\n+            let extra_encoder_settings = extra_encoder_settings.iter()\n+                                                               .filter_map(|&(name, value)| {\n+                                                                               value.split()\n+                                                                                    .next()\n+                                                                                    .something()\n+                                                                                    .something2()\n+                                                                                    .something3()\n+                                                                                    .something4()\n+                                                                           })\n+                                                               .something();\n+            if let Some(subpod) = pod.subpods.iter().find(|s| {\n+                                                              !s.plaintext\n+                                                                .as_ref()\n+                                                                .map(String::as_ref)\n+                                                                .unwrap_or(\"\")\n+                                                                .is_empty()\n+                                                          }) {\n+                do_something();\n+            }\n+        }\n+    }\n+}"}]}