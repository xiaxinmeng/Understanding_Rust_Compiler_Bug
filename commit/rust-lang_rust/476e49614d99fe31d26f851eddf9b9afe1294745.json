{"sha": "476e49614d99fe31d26f851eddf9b9afe1294745", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NmU0OTYxNGQ5OWZlMzFkMjZmODUxZWRkZjliOWFmZTEyOTQ3NDU=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-08-11T13:33:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-11T13:33:57Z"}, "message": "Rollup merge of #35279 - cengizIO:master, r=brson\n\nProvide a cleaner documentation for 'write!'\n\nHello!\n\nThis is my attempt to fix #35110\n\nAny feedback is more than welcome!\n\nCheers!", "tree": {"sha": "4b2d323ad461fa7fef555854a5d37c658e6281f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b2d323ad461fa7fef555854a5d37c658e6281f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/476e49614d99fe31d26f851eddf9b9afe1294745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/476e49614d99fe31d26f851eddf9b9afe1294745", "html_url": "https://github.com/rust-lang/rust/commit/476e49614d99fe31d26f851eddf9b9afe1294745", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/476e49614d99fe31d26f851eddf9b9afe1294745/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "695b3d8279e17689b988e000203ba95ffeb4a91c", "url": "https://api.github.com/repos/rust-lang/rust/commits/695b3d8279e17689b988e000203ba95ffeb4a91c", "html_url": "https://github.com/rust-lang/rust/commit/695b3d8279e17689b988e000203ba95ffeb4a91c"}, {"sha": "c630beaed7ed822bd576337d9e4afa20e781b994", "url": "https://api.github.com/repos/rust-lang/rust/commits/c630beaed7ed822bd576337d9e4afa20e781b994", "html_url": "https://github.com/rust-lang/rust/commit/c630beaed7ed822bd576337d9e4afa20e781b994"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "c916ad930ff105988b7be772c07b45a595f3aa25", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/476e49614d99fe31d26f851eddf9b9afe1294745/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476e49614d99fe31d26f851eddf9b9afe1294745/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=476e49614d99fe31d26f851eddf9b9afe1294745", "patch": "@@ -229,14 +229,28 @@ macro_rules! try {\n     })\n }\n \n-/// Use the `format!` syntax to write data into a buffer.\n+/// Write formatted data into a buffer\n ///\n-/// This macro is typically used with a buffer of `&mut `[`Write`][write].\n+/// This macro accepts any value with `write_fmt` method as a writer, a format string, and a list\n+/// of arguments to format.\n+///\n+/// `write_fmt` method usually comes from an implementation of [`std::fmt::Write`][fmt_write] or\n+/// [`std::io::Write`][io_write] traits. These are sometimes called 'writers'.\n+///\n+/// Passed arguments will be formatted according to the specified format string and the resulting\n+/// string will be passed to the writer.\n ///\n /// See [`std::fmt`][fmt] for more information on format syntax.\n ///\n+/// Return value is completely dependent on the 'write_fmt' method.\n+///\n+/// Common return values are: [`Result`][enum_result], [`io::Result`][type_result]\n+///\n /// [fmt]: ../std/fmt/index.html\n-/// [write]: ../std/io/trait.Write.html\n+/// [fmt_write]: ../std/fmt/trait.Write.html\n+/// [io_write]: ../std/io/trait.Write.html\n+/// [enum_result]: ../std/result/enum.Result.html\n+/// [type_result]: ../std/io/type.Result.html\n ///\n /// # Examples\n ///\n@@ -255,16 +269,31 @@ macro_rules! write {\n     ($dst:expr, $($arg:tt)*) => ($dst.write_fmt(format_args!($($arg)*)))\n }\n \n-/// Use the `format!` syntax to write data into a buffer, appending a newline.\n-/// On all platforms, the newline is the LINE FEED character (`\\n`/`U+000A`)\n-/// alone (no additional CARRIAGE RETURN (`\\r`/`U+000D`).\n+/// Write formatted data into a buffer, with appending a newline.\n+///\n+/// On all platforms, the newline is the LINE FEED character (`\\n`/`U+000A`) alone\n+/// (no additional CARRIAGE RETURN (`\\r`/`U+000D`).\n ///\n-/// This macro is typically used with a buffer of `&mut `[`Write`][write].\n+/// This macro accepts any value with `write_fmt` method as a writer, a format string, and a list\n+/// of arguments to format.\n+///\n+/// `write_fmt` method usually comes from an implementation of [`std::fmt::Write`][fmt_write] or\n+/// [`std::io::Write`][io_write] traits. These are sometimes called 'writers'.\n+///\n+/// Passed arguments will be formatted according to the specified format string and the resulting\n+/// string will be passed to the writer.\n ///\n /// See [`std::fmt`][fmt] for more information on format syntax.\n ///\n+/// Return value is completely dependent on the 'write_fmt' method.\n+///\n+/// Common return values are: [`Result`][enum_result], [`io::Result`][type_result]\n+///\n /// [fmt]: ../std/fmt/index.html\n-/// [write]: ../std/io/trait.Write.html\n+/// [fmt_write]: ../std/fmt/trait.Write.html\n+/// [io_write]: ../std/io/trait.Write.html\n+/// [enum_result]: ../std/result/enum.Result.html\n+/// [type_result]: ../std/io/type.Result.html\n ///\n /// # Examples\n ///"}]}