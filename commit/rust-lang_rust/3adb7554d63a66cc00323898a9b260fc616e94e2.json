{"sha": "3adb7554d63a66cc00323898a9b260fc616e94e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhZGI3NTU0ZDYzYTY2Y2MwMDMyMzg5OGE5YjI2MGZjNjE2ZTk0ZTI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-22T03:53:03Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-30T03:12:59Z"}, "message": "Rebasing fixes", "tree": {"sha": "846d5fe124df2a4a531cc0115cc30e7db1115a86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/846d5fe124df2a4a531cc0115cc30e7db1115a86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3adb7554d63a66cc00323898a9b260fc616e94e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3adb7554d63a66cc00323898a9b260fc616e94e2", "html_url": "https://github.com/rust-lang/rust/commit/3adb7554d63a66cc00323898a9b260fc616e94e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3adb7554d63a66cc00323898a9b260fc616e94e2/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dd1bc3d14ed51485197ba5d84d2f7a9d10bac1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dd1bc3d14ed51485197ba5d84d2f7a9d10bac1a", "html_url": "https://github.com/rust-lang/rust/commit/5dd1bc3d14ed51485197ba5d84d2f7a9d10bac1a"}], "stats": {"total": 41, "additions": 24, "deletions": 17}, "files": [{"sha": "cd3cc43b8539d4e17ab2bdbb0bb8fe043fae7ecb", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3adb7554d63a66cc00323898a9b260fc616e94e2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adb7554d63a66cc00323898a9b260fc616e94e2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=3adb7554d63a66cc00323898a9b260fc616e94e2", "patch": "@@ -619,14 +619,11 @@ impl<'a, 'tcx> LookupContext<'a, 'tcx> {\n \n         let tcx = self.tcx();\n \n-        // It is illegal to create a trait object with methods which includes\n-        // the Self type. An error will be reported when we coerce to a trait\n-        // object if the method refers to the `Self` type. Substituting ty_err\n-        // here allows compiler to soldier on.\n-        //\n-        // `confirm_candidate()` also relies upon this substitution\n-        // for Self. (fix)\n-        let rcvr_substs = substs.with_self_ty(ty::mk_err());\n+        // It is illegal to invoke a method on a trait instance that refers to\n+        // the `Self` type.  Here, we use a substitution that replaces `Self`\n+        // with the object type itself. Hence, a `&self` method will wind up\n+        // with an argument type like `&Trait`.\n+        let rcvr_substs = substs.with_self_ty(self_ty);\n \n         let trait_ref = Rc::new(TraitRef {\n             def_id: did,\n@@ -1337,6 +1334,7 @@ impl<'a, 'tcx> LookupContext<'a, 'tcx> {\n                self.ty_to_string(rcvr_ty),\n                candidate.repr(self.tcx()));\n \n+        let rcvr_substs = candidate.rcvr_substs.clone();\n         self.enforce_drop_trait_limitations(candidate);\n \n         // Determine the values for the generic parameters of the method."}, {"sha": "94c4d7c25e0a615fca13381c962a4a72401bef8a", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3adb7554d63a66cc00323898a9b260fc616e94e2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adb7554d63a66cc00323898a9b260fc616e94e2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=3adb7554d63a66cc00323898a9b260fc616e94e2", "patch": "@@ -1687,7 +1687,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.register_unsize_obligations(span, &**u)\n             }\n             ty::UnsizeVtable(ref ty_trait, self_ty) => {\n-                vtable2::check_object_safety(self.tcx(), ty_trait, span);\n+                vtable::check_object_safety(self.tcx(), ty_trait, span);\n                 // If the type is `Foo+'a`, ensures that the type\n                 // being cast to `Foo+'a` implements `Foo`:\n                 vtable::register_object_cast_obligations(self,"}, {"sha": "b7195734e8b39ca9da1d22c340c4461873464c54", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3adb7554d63a66cc00323898a9b260fc616e94e2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adb7554d63a66cc00323898a9b260fc616e94e2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=3adb7554d63a66cc00323898a9b260fc616e94e2", "patch": "@@ -179,7 +179,7 @@ pub fn check_object_safety(tcx: &ty::ctxt, object_trait: &ty::TyTrait, span: Spa\n          */\n         let mut msgs = Vec::new();\n \n-        let method_name = method.ident.repr(tcx);\n+        let method_name = method.name.repr(tcx);\n \n         match method.explicit_self {\n             ty::ByValueExplicitSelfCategory => { // reason (a) above\n@@ -204,12 +204,18 @@ pub fn check_object_safety(tcx: &ty::ctxt, object_trait: &ty::TyTrait, span: Spa\n             }\n         };\n         let ref sig = method.fty.sig;\n-        for &input_ty in sig.inputs.tail().iter().chain([sig.output].iter()) {\n+        for &input_ty in sig.inputs[1..].iter() {\n             match check_for_self_ty(input_ty) {\n                 Some(msg) => msgs.push(msg),\n                 _ => {}\n             }\n         }\n+        if let ty::FnConverging(result_type) = sig.output {\n+            match check_for_self_ty(result_type) {\n+                Some(msg) => msgs.push(msg),\n+                _ => {}\n+            }\n+        }\n \n         if method.generics.has_type_params(FnSpace) {\n             // reason (b) above"}, {"sha": "dfeba04109281fdf594a2db5d22560a55eea08e8", "filename": "src/test/compile-fail/region-object-lifetime-in-coercion.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3adb7554d63a66cc00323898a9b260fc616e94e2/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adb7554d63a66cc00323898a9b260fc616e94e2/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs?ref=3adb7554d63a66cc00323898a9b260fc616e94e2", "patch": "@@ -11,24 +11,27 @@\n // Test that attempts to implicitly coerce a value into an\n // object respect the lifetime bound on the object type.\n \n-fn a(v: &[u8]) -> Box<Clone + 'static> {\n-    let x: Box<Clone + 'static> = box v; //~ ERROR does not outlive\n+trait Foo {}\n+impl<'a> Foo for &'a [u8] {}\n+\n+fn a(v: &[u8]) -> Box<Foo + 'static> {\n+    let x: Box<Foo + 'static> = box v; //~ ERROR does not outlive\n     x\n }\n \n-fn b(v: &[u8]) -> Box<Clone + 'static> {\n+fn b(v: &[u8]) -> Box<Foo + 'static> {\n     box v //~ ERROR does not outlive\n }\n \n-fn c(v: &[u8]) -> Box<Clone> {\n+fn c(v: &[u8]) -> Box<Foo> {\n     box v // OK thanks to lifetime elision\n }\n \n-fn d<'a,'b>(v: &'a [u8]) -> Box<Clone+'b> {\n+fn d<'a,'b>(v: &'a [u8]) -> Box<Foo+'b> {\n     box v //~ ERROR does not outlive\n }\n \n-fn e<'a:'b,'b>(v: &'a [u8]) -> Box<Clone+'b> {\n+fn e<'a:'b,'b>(v: &'a [u8]) -> Box<Foo+'b> {\n     box v // OK, thanks to 'a:'b\n }\n "}]}