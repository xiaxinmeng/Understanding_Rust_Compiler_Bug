{"sha": "4d8d68f80d2fb474188c1c2ee26d6266b4eaa003", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkOGQ2OGY4MGQyZmI0NzQxODhjMWMyZWUyNmQ2MjY2YjRlYWEwMDM=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-05-05T19:09:17Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-05-06T19:12:10Z"}, "message": "Fix #25076", "tree": {"sha": "0617c5d721b021da9474d2ef911ac1aff6020572", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0617c5d721b021da9474d2ef911ac1aff6020572"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d8d68f80d2fb474188c1c2ee26d6266b4eaa003", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d8d68f80d2fb474188c1c2ee26d6266b4eaa003", "html_url": "https://github.com/rust-lang/rust/commit/4d8d68f80d2fb474188c1c2ee26d6266b4eaa003", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d8d68f80d2fb474188c1c2ee26d6266b4eaa003/comments", "author": null, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "url": "https://api.github.com/repos/rust-lang/rust/commits/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "html_url": "https://github.com/rust-lang/rust/commit/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "7d69df73cd2adc0d1b9388d6bfb3c7738dd09ecc", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d8d68f80d2fb474188c1c2ee26d6266b4eaa003/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d8d68f80d2fb474188c1c2ee26d6266b4eaa003/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=4d8d68f80d2fb474188c1c2ee26d6266b4eaa003", "patch": "@@ -56,7 +56,10 @@ pub fn report_projection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n {\n     let predicate =\n         infcx.resolve_type_vars_if_possible(&obligation.predicate);\n-    if !predicate.references_error() {\n+    // The ty_err created by normalize_to_error can end up being unified\n+    // into all obligations - we still have to report an error in that\n+    // case.\n+    if !infcx.tcx.sess.has_errors() || !predicate.references_error() {\n         span_err!(infcx.tcx.sess, obligation.cause.span, E0271,\n                 \"type mismatch resolving `{}`: {}\",\n                 predicate.user_string(infcx.tcx),\n@@ -183,7 +186,8 @@ pub fn report_selection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                             let trait_predicate =\n                                 infcx.resolve_type_vars_if_possible(trait_predicate);\n \n-                            if !trait_predicate.references_error() {\n+                            if !infcx.tcx.sess.has_errors() ||\n+                               !trait_predicate.references_error() {\n                                 let trait_ref = trait_predicate.to_poly_trait_ref();\n                                 span_err!(infcx.tcx.sess, obligation.cause.span, E0277,\n                                         \"the trait `{}` is not implemented for the type `{}`\","}, {"sha": "f6bde80e29875ce2b6df67793adcaaca9ef08a64", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d8d68f80d2fb474188c1c2ee26d6266b4eaa003/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d8d68f80d2fb474188c1c2ee26d6266b4eaa003/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=4d8d68f80d2fb474188c1c2ee26d6266b4eaa003", "patch": "@@ -408,7 +408,10 @@ fn opt_normalize_projection_type<'a,'b,'tcx>(\n }\n \n /// in various error cases, we just set ty_err and return an obligation\n-/// that, when fulfilled, will lead to an error\n+/// that, when fulfilled, will lead to an error.\n+///\n+/// FIXME: the ty_err created here can enter the obligation we create,\n+/// leading to error messages involving ty_err.\n fn normalize_to_error<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,\n                                projection_ty: ty::ProjectionTy<'tcx>,\n                                cause: ObligationCause<'tcx>,"}, {"sha": "40f3b72849612daef711869ec38ed0661fcb07ba", "filename": "src/test/compile-fail/issue-25076.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4d8d68f80d2fb474188c1c2ee26d6266b4eaa003/src%2Ftest%2Fcompile-fail%2Fissue-25076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d8d68f80d2fb474188c1c2ee26d6266b4eaa003/src%2Ftest%2Fcompile-fail%2Fissue-25076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-25076.rs?ref=4d8d68f80d2fb474188c1c2ee26d6266b4eaa003", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S;\n+\n+trait InOut<T> { type Out; }\n+\n+fn do_fold<B, F: InOut<B, Out=B>>(init: B, f: F) {}\n+\n+fn bot<T>() -> T { loop {} }\n+\n+fn main() {\n+    do_fold(bot(), ()); //~ ERROR is not implemented for the type `()`\n+}"}]}