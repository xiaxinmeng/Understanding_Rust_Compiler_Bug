{"sha": "4667346042b526300f4172518d80dfb2da98ee27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NjczNDYwNDJiNTI2MzAwZjQxNzI1MThkODBkZmIyZGE5OGVlMjc=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-29T09:38:05Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:13Z"}, "message": "Remove the fragile const propagator and just do linting", "tree": {"sha": "3e21c29154dbb6a1d121c7539b3dbf9bdfba5fea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e21c29154dbb6a1d121c7539b3dbf9bdfba5fea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4667346042b526300f4172518d80dfb2da98ee27", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53UACgkQpp+NIls6\n19kavxAAtBYA+0MjLWs3ZlrUz+JTFdBtEQ56rmlsurbA15k+coUpchvEYyJpQ2L0\nvof444nWnjWbnk5v+dzJjRqYeCgg0IsT4C3fm1HdAh9BfvFGuNPLcpz/Jpntiqux\ncbrW+YlVLVKTKmFxUduZt+sZ7ZMWLNsPyvk7qoL+H4i9PVZdK8TFCF1gJxvN4Uis\nmVaRAvJqYaSDTvI1zWa1ylNCYskLz9VhBBVQA1MlhZN7Rab2f0z+Aj/5LXzAO5no\nehxIaNYSHdjC+/EvNiUoSgkfjjNrY5t68eDeqaFmQVOTKK/fQyMuctDDgpGSqqsz\nuHPedDKnWOpjQ3nh94aNM34OGICDkpiiffIkeQ515ZiuDoS1RkD9ZoWuC+y1kyOo\nPOZGquKNX//k/NbFGFCebYqBWiuC6MDhZdhGmsAfVVNIpuR9ain4zLU0Nlg+BwNR\ndmq49Hd24N291FNp9lIKw1ouk9zHdNbLxPjPO5i77JbHOWm2EtWLzYY5UjU5Hozo\nPAZJ4OamFxO/DkAhKN1G9AnFzLXCHq5/zGXrKJBCVmbPXZsTisN5CTrvYiZh1kVk\nA2R4r/ousse2Z9ywuVxBf8qYoJJyROBmoz581BZVD+Bq77coHLyx4OotUY0dlcjM\n/AbSEgBbXvi9Q1ylEI5lHck5v0+sXcXLTkBqweZL8uoQ6x7pKIQ=\n=UV/c\n-----END PGP SIGNATURE-----", "payload": "tree 3e21c29154dbb6a1d121c7539b3dbf9bdfba5fea\nparent ec857e1e099c135f48c8706cdea65497309de2b3\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1517218685 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494453 +0100\n\nRemove the fragile const propagator and just do linting\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4667346042b526300f4172518d80dfb2da98ee27", "html_url": "https://github.com/rust-lang/rust/commit/4667346042b526300f4172518d80dfb2da98ee27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4667346042b526300f4172518d80dfb2da98ee27/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec857e1e099c135f48c8706cdea65497309de2b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec857e1e099c135f48c8706cdea65497309de2b3", "html_url": "https://github.com/rust-lang/rust/commit/ec857e1e099c135f48c8706cdea65497309de2b3"}], "stats": {"total": 126, "additions": 3, "deletions": 123}, "files": [{"sha": "3b52152946a97f211b2e8370b7d3d8ae803d7dfd", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 3, "deletions": 123, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/4667346042b526300f4172518d80dfb2da98ee27/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4667346042b526300f4172518d80dfb2da98ee27/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=4667346042b526300f4172518d80dfb2da98ee27", "patch": "@@ -16,7 +16,7 @@\n use rustc::mir::{Constant, Literal, Location, Place, Mir, Operand, Rvalue, Local};\n use rustc::mir::{NullOp, StatementKind, Statement, BasicBlock, LocalKind};\n use rustc::mir::TerminatorKind;\n-use rustc::mir::visit::{MutVisitor, Visitor};\n+use rustc::mir::visit::Visitor;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty::{TyCtxt, self, Instance};\n use rustc::mir::interpret::{Value, PrimVal, GlobalId};\n@@ -38,124 +38,15 @@ impl MirPass for ConstProp {\n         // First, find optimization opportunities. This is done in a pre-pass to keep the MIR\n         // read-only so that we can do global analyses on the MIR in the process (e.g.\n         // `Place::ty()`).\n-        let optimizations = {\n-            let mut optimization_finder = OptimizationFinder::new(mir, tcx, source);\n-            optimization_finder.visit_mir(mir);\n-            optimization_finder.optimizations\n-        };\n+        let mut optimization_finder = OptimizationFinder::new(mir, tcx, source);\n+        optimization_finder.visit_mir(mir);\n \n-        // We only actually run when optimizing MIR (at any level).\n-        if tcx.sess.opts.debugging_opts.mir_opt_level != 0 {\n-            // Then carry out those optimizations.\n-            MutVisitor::visit_mir(&mut ConstPropVisitor { optimizations, tcx }, mir);\n-        }\n         trace!(\"ConstProp done for {:?}\", source.def_id);\n     }\n }\n \n type Const<'tcx> = (Value, ty::Ty<'tcx>, Span);\n \n-pub struct ConstPropVisitor<'a, 'tcx: 'a> {\n-    optimizations: OptimizationList<'tcx>,\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-}\n-\n-impl<'a, 'tcx> MutVisitor<'tcx> for ConstPropVisitor<'a, 'tcx> {\n-    fn visit_rvalue(&mut self, rvalue: &mut Rvalue<'tcx>, location: Location) {\n-        if let Some((value, ty, span)) = self.optimizations.const_prop.remove(&location) {\n-            let value = self.tcx.mk_const(ty::Const {\n-                val: ConstVal::Value(value),\n-                ty,\n-            });\n-            debug!(\"Replacing `{:?}` with {:?}\", rvalue, value);\n-            let constant = Constant {\n-                ty,\n-                literal: Literal::Value { value },\n-                span,\n-            };\n-            *rvalue = Rvalue::Use(Operand::Constant(box constant));\n-        }\n-\n-        self.super_rvalue(rvalue, location)\n-    }\n-\n-    fn visit_constant(\n-        &mut self,\n-        constant: &mut Constant<'tcx>,\n-        location: Location,\n-    ) {\n-        self.super_constant(constant, location);\n-        if let Some(&(val, ty, _)) = self.optimizations.constants.get(constant) {\n-            debug!(\"Replacing `{:?}` with {:?}:{:?}\", constant.literal, val, ty);\n-            constant.literal = Literal::Value {\n-                value: self.tcx.mk_const(ty::Const {\n-                    val: ConstVal::Value(val),\n-                    ty,\n-                }),\n-            };\n-        }\n-    }\n-\n-    fn visit_operand(\n-        &mut self,\n-        operand: &mut Operand<'tcx>,\n-        location: Location,\n-    ) {\n-        self.super_operand(operand, location);\n-        let new = match operand {\n-            Operand::Move(Place::Local(local)) |\n-            Operand::Copy(Place::Local(local)) => {\n-                trace!(\"trying to read {:?}\", local);\n-                self.optimizations.places.get(&local).cloned()\n-            },\n-            _ => return,\n-        };\n-        if let Some((value, ty, span)) = new {\n-            let value = self.tcx.mk_const(ty::Const {\n-                val: ConstVal::Value(value),\n-                ty,\n-            });\n-            debug!(\"Replacing `{:?}` with {:?}\", operand, value);\n-            let constant = Constant {\n-                ty,\n-                literal: Literal::Value { value },\n-                span,\n-            };\n-            *operand = Operand::Constant(box constant);\n-        }\n-    }\n-\n-    fn visit_terminator_kind(\n-        &mut self,\n-        block: BasicBlock,\n-        kind: &mut TerminatorKind<'tcx>,\n-        location: Location,\n-    ) {\n-        match kind {\n-            TerminatorKind::SwitchInt { discr: value, .. } |\n-            TerminatorKind::Yield { value, .. } |\n-            TerminatorKind::Assert { cond: value, .. } => {\n-                if let Some((new, ty, span)) = self.optimizations.terminators.remove(&block) {\n-                    let new = self.tcx.mk_const(ty::Const {\n-                        val: ConstVal::Value(new),\n-                        ty,\n-                    });\n-                    debug!(\"Replacing `{:?}` with {:?}\", value, new);\n-                    let constant = Constant {\n-                        ty,\n-                        literal: Literal::Value { value: new },\n-                        span,\n-                    };\n-                    *value = Operand::Constant(box constant);\n-                }\n-            }\n-            // FIXME: do this optimization for function calls\n-            _ => {},\n-        }\n-        self.super_terminator_kind(block, kind, location)\n-    }\n-}\n-\n /// Finds optimization opportunities on the MIR.\n struct OptimizationFinder<'b, 'a, 'tcx:'a+'b> {\n     mir: &'b Mir<'tcx>,\n@@ -179,9 +70,6 @@ impl<'b, 'a, 'tcx:'b> OptimizationFinder<'b, 'a, 'tcx> {\n     }\n \n     fn eval_constant(&mut self, c: &Constant<'tcx>) -> Option<Const<'tcx>> {\n-        if let Some(&val) = self.optimizations.constants.get(c) {\n-            return Some(val);\n-        }\n         match c.literal {\n             Literal::Value { value } => match value.val {\n                 ConstVal::Value(v) => Some((v, value.ty, c.span)),\n@@ -200,7 +88,6 @@ impl<'b, 'a, 'tcx:'b> OptimizationFinder<'b, 'a, 'tcx> {\n                     let (value, _, ty) = eval_body(self.tcx, cid, param_env)?;\n                     let val = (value, ty, c.span);\n                     trace!(\"evaluated {:?} to {:?}\", c, val);\n-                    self.optimizations.constants.insert(c.clone(), val);\n                     Some(val)\n                 },\n             },\n@@ -221,7 +108,6 @@ impl<'b, 'a, 'tcx:'b> OptimizationFinder<'b, 'a, 'tcx> {\n                 let (value, _, ty) = eval_body_with_mir(self.tcx, cid, self.mir, param_env)?;\n                 let val = (value, ty, c.span);\n                 trace!(\"evaluated {:?} to {:?}\", c, val);\n-                self.optimizations.constants.insert(c.clone(), val);\n                 Some(val)\n             }\n         }\n@@ -463,7 +349,6 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for OptimizationFinder<'b, 'a, 'tcx> {\n                 .to_ty(self.tcx);\n             let span = statement.source_info.span;\n             if let Some(value) = self.const_prop(rval, place_ty, span) {\n-                self.optimizations.const_prop.insert(location, value);\n                 if let Place::Local(local) = *place {\n                     if self.mir.local_kind(local) == LocalKind::Temp\n                         && CanConstProp::check(local, self.mir) {\n@@ -499,7 +384,6 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for OptimizationFinder<'b, 'a, 'tcx> {\n                     _ => {},\n                 }\n                 if let Some(value) = self.eval_operand(value) {\n-                    self.optimizations.terminators.insert(block, value);\n                     if let TerminatorKind::Assert { expected, msg, .. } = kind {\n                         if Value::ByVal(PrimVal::from_bool(*expected)) != value.0 {\n                             let span = self.mir[block]\n@@ -562,9 +446,5 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for OptimizationFinder<'b, 'a, 'tcx> {\n \n #[derive(Default)]\n struct OptimizationList<'tcx> {\n-    const_prop: FxHashMap<Location, Const<'tcx>>,\n-    /// Terminators that get their Operand(s) turned into constants.\n-    terminators: FxHashMap<BasicBlock, Const<'tcx>>,\n     places: FxHashMap<Local, Const<'tcx>>,\n-    constants: FxHashMap<Constant<'tcx>, Const<'tcx>>,\n }"}]}