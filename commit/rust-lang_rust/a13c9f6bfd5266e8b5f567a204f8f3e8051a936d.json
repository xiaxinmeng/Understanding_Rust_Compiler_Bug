{"sha": "a13c9f6bfd5266e8b5f567a204f8f3e8051a936d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExM2M5ZjZiZmQ1MjY2ZThiNWY1NjdhMjA0ZjhmM2U4MDUxYTkzNmQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-24T17:05:10Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-26T13:38:26Z"}, "message": "convert from an `UnlessNll` flag to a `SuppressRegionErrors` flag\n\nHopefully this will help clarify the behavior in the various borrowck\nmodes", "tree": {"sha": "f0ceccf38192166e237c6bff1b75b6b9bf61d0ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0ceccf38192166e237c6bff1b75b6b9bf61d0ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a13c9f6bfd5266e8b5f567a204f8f3e8051a936d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a13c9f6bfd5266e8b5f567a204f8f3e8051a936d", "html_url": "https://github.com/rust-lang/rust/commit/a13c9f6bfd5266e8b5f567a204f8f3e8051a936d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a13c9f6bfd5266e8b5f567a204f8f3e8051a936d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b4791e60bb44ae7dcf3b4bb312cc20b99193c4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b4791e60bb44ae7dcf3b4bb312cc20b99193c4e", "html_url": "https://github.com/rust-lang/rust/commit/0b4791e60bb44ae7dcf3b4bb312cc20b99193c4e"}], "stats": {"total": 95, "additions": 55, "deletions": 40}, "files": [{"sha": "eda4fc041e8922770d35dc82ec8fbb900604c2bf", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a13c9f6bfd5266e8b5f567a204f8f3e8051a936d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13c9f6bfd5266e8b5f567a204f8f3e8051a936d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=a13c9f6bfd5266e8b5f567a204f8f3e8051a936d", "patch": "@@ -55,7 +55,7 @@\n //! ported to this system, and which relies on string concatenation at the\n //! time of error detection.\n \n-use infer::{self, UnlessNll};\n+use infer::{self, SuppressRegionErrors};\n use super::{InferCtxt, RegionVariableOrigin, SubregionOrigin, TypeTrace, ValuePairs};\n use super::region_constraints::GenericKind;\n use super::lexical_region_resolve::RegionResolutionError;\n@@ -68,7 +68,6 @@ use middle::region;\n use traits::{ObligationCause, ObligationCauseCode};\n use ty::{self, subst::Subst, Region, Ty, TyCtxt, TypeFoldable, TyKind};\n use ty::error::TypeError;\n-use session::config::BorrowckMode;\n use syntax::ast::DUMMY_NODE_ID;\n use syntax_pos::{Pos, Span};\n use errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n@@ -298,20 +297,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         &self,\n         region_scope_tree: &region::ScopeTree,\n         errors: &Vec<RegionResolutionError<'tcx>>,\n-        unless_nll: UnlessNll,\n+        suppress: SuppressRegionErrors,\n     ) {\n-        debug!(\"report_region_errors(): {} errors to start\", errors.len());\n-\n-        // If the errors will later be reported by NLL, choose wether to display them or not based\n-        // on the borrowck mode\n-        if unless_nll.0 {\n-            match self.tcx.borrowck_mode() {\n-                // If we're on AST or Migrate mode, report AST region errors\n-                BorrowckMode::Ast | BorrowckMode::Migrate => {},\n-                // If we're on MIR or Compare mode, don't report AST region errors as they should\n-                // be reported by NLL\n-                BorrowckMode::Compare | BorrowckMode::Mir => return,\n-            }\n+        debug!(\"report_region_errors(): {} errors to start, suppress = {:?}\", errors.len(), suppress);\n+\n+        if suppress.suppressed() {\n+            return;\n         }\n \n         // try to pre-process the errors, which will group some of them"}, {"sha": "dc10ec03feef04c1ae2056b3ad28dc2fe637487e", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a13c9f6bfd5266e8b5f567a204f8f3e8051a936d/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13c9f6bfd5266e8b5f567a204f8f3e8051a936d/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=a13c9f6bfd5266e8b5f567a204f8f3e8051a936d", "patch": "@@ -24,6 +24,7 @@ use middle::free_region::RegionRelations;\n use middle::lang_items;\n use middle::region;\n use rustc_data_structures::unify as ut;\n+use session::config::BorrowckMode;\n use std::cell::{Cell, Ref, RefCell, RefMut};\n use std::collections::BTreeMap;\n use std::fmt;\n@@ -80,15 +81,37 @@ pub type Bound<T> = Option<T>;\n pub type UnitResult<'tcx> = RelateResult<'tcx, ()>; // \"unify result\"\n pub type FixupResult<T> = Result<T, FixupError>; // \"fixup result\"\n \n-/// A flag that is given when running region resolution: if true, it\n-/// indicates that we should not report the region errors to the user\n-/// if NLL is enabled, since NLL will also detect them (and do a\n-/// better job of it).\n-///\n-/// Currently, NLL only runs on HIR bodies, so you should use `false`\n-/// unless you are region-checking a `hir::Body` (basically, a fn or\n-/// expression).\n-pub struct UnlessNll(pub bool);\n+/// A flag that is used to suppress region errors. This is normally\n+/// false, but sometimes -- when we are doing region checks that the\n+/// NLL borrow checker will also do -- it might be set to true.\n+#[derive(Copy, Clone, Default, Debug)]\n+pub struct SuppressRegionErrors {\n+    suppressed: bool\n+}\n+\n+impl SuppressRegionErrors {\n+    pub fn suppressed(self) -> bool {\n+        self.suppressed\n+    }\n+\n+    /// Indicates that the MIR borrowck will repeat these region\n+    /// checks, so we should ignore errors if NLL is (unconditionally)\n+    /// enabled.\n+    pub fn when_nll_is_enabled(tcx: TyCtxt<'_, '_, '_>) -> Self {\n+        match tcx.borrowck_mode() {\n+            // If we're on AST or Migrate mode, report AST region errors\n+            BorrowckMode::Ast | BorrowckMode::Migrate => SuppressRegionErrors {\n+                suppressed: false\n+            },\n+\n+            // If we're on MIR or Compare mode, don't report AST region errors as they should\n+            // be reported by NLL\n+            BorrowckMode::Compare | BorrowckMode::Mir => SuppressRegionErrors {\n+                suppressed: true\n+            },\n+        }\n+    }\n+}\n \n pub struct InferCtxt<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     pub tcx: TyCtxt<'a, 'gcx, 'tcx>,\n@@ -1049,7 +1072,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         region_context: DefId,\n         region_map: &region::ScopeTree,\n         outlives_env: &OutlivesEnvironment<'tcx>,\n-        unless_nll: UnlessNll,\n+        suppress: SuppressRegionErrors,\n     ) {\n         assert!(\n             self.is_tainted_by_errors() || self.region_obligations.borrow().is_empty(),\n@@ -1081,7 +1104,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             // this infcx was in use.  This is totally hokey but\n             // otherwise we have a hard time separating legit region\n             // errors from silly ones.\n-            self.report_region_errors(region_map, &errors, unless_nll);\n+            self.report_region_errors(region_map, &errors, suppress);\n         }\n     }\n "}, {"sha": "406d3a55b1f7cb60812d1a327bb714587e6bdcd4", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a13c9f6bfd5266e8b5f567a204f8f3e8051a936d/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13c9f6bfd5266e8b5f567a204f8f3e8051a936d/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=a13c9f6bfd5266e8b5f567a204f8f3e8051a936d", "patch": "@@ -20,7 +20,7 @@ pub use self::ObligationCauseCode::*;\n use chalk_engine;\n use hir;\n use hir::def_id::DefId;\n-use infer::UnlessNll;\n+use infer::SuppressRegionErrors;\n use infer::outlives::env::OutlivesEnvironment;\n use middle::region;\n use mir::interpret::ConstEvalErr;\n@@ -720,7 +720,7 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             region_context,\n             &region_scope_tree,\n             &outlives_env,\n-            UnlessNll(false),\n+            SuppressRegionErrors::default(),\n         );\n \n         let predicates = match infcx.fully_resolve(&predicates) {"}, {"sha": "ccaa2f06f01ded7922b91e1f9a8d935e25ea018f", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a13c9f6bfd5266e8b5f567a204f8f3e8051a936d/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13c9f6bfd5266e8b5f567a204f8f3e8051a936d/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=a13c9f6bfd5266e8b5f567a204f8f3e8051a936d", "patch": "@@ -11,7 +11,7 @@\n use check::regionck::RegionCtxt;\n \n use hir::def_id::DefId;\n-use rustc::infer::{self, InferOk, UnlessNll};\n+use rustc::infer::{self, InferOk, SuppressRegionErrors};\n use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::middle::region;\n use rustc::ty::subst::{Subst, Substs, UnpackedKind};\n@@ -128,7 +128,7 @@ fn ensure_drop_params_and_item_params_correspond<'a, 'tcx>(\n         // conservative. -nmatsakis\n         let outlives_env = OutlivesEnvironment::new(ty::ParamEnv::empty());\n \n-        infcx.resolve_regions_and_report_errors(drop_impl_did, &region_scope_tree, &outlives_env, UnlessNll(false));\n+        infcx.resolve_regions_and_report_errors(drop_impl_did, &region_scope_tree, &outlives_env, SuppressRegionErrors::default());\n         Ok(())\n     })\n }"}, {"sha": "d7d006728536a4d2c5db91ff277b9f466f825af4", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a13c9f6bfd5266e8b5f567a204f8f3e8051a936d/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13c9f6bfd5266e8b5f567a204f8f3e8051a936d/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=a13c9f6bfd5266e8b5f567a204f8f3e8051a936d", "patch": "@@ -88,8 +88,8 @@ use middle::mem_categorization as mc;\n use middle::mem_categorization::Categorization;\n use middle::region;\n use rustc::hir::def_id::DefId;\n-use rustc::infer::{self, RegionObligation, UnlessNll};\n use rustc::infer::outlives::env::OutlivesEnvironment;\n+use rustc::infer::{self, RegionObligation, SuppressRegionErrors};\n use rustc::ty::adjustment;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty};\n@@ -140,7 +140,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             rcx.visit_body(body);\n             rcx.visit_region_obligations(id);\n         }\n-        rcx.resolve_regions_and_report_errors(UnlessNll(true));\n+        rcx.resolve_regions_and_report_errors(SuppressRegionErrors::when_nll_is_enabled(self.tcx));\n \n         assert!(self.tables.borrow().free_region_map.is_empty());\n         self.tables.borrow_mut().free_region_map = rcx.outlives_environment.into_free_region_map();\n@@ -162,7 +162,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             .add_implied_bounds(self, wf_tys, item_id, span);\n         rcx.outlives_environment.save_implied_bounds(item_id);\n         rcx.visit_region_obligations(item_id);\n-        rcx.resolve_regions_and_report_errors(UnlessNll(false));\n+        rcx.resolve_regions_and_report_errors(SuppressRegionErrors::default());\n     }\n \n     /// Region check a function body. Not invoked on closures, but\n@@ -190,7 +190,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             rcx.visit_fn_body(fn_id, body, self.tcx.hir.span(fn_id));\n         }\n \n-        rcx.resolve_regions_and_report_errors(UnlessNll(true));\n+        rcx.resolve_regions_and_report_errors(SuppressRegionErrors::when_nll_is_enabled(self.tcx));\n \n         // In this mode, we also copy the free-region-map into the\n         // tables of the enclosing fcx. In the other regionck modes\n@@ -314,7 +314,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n         id: ast::NodeId, // the id of the fn itself\n         body: &'gcx hir::Body,\n         span: Span,\n-   ) {\n+    ) {\n         // When we enter a function, we can derive\n         debug!(\"visit_fn_body(id={})\", id);\n \n@@ -355,7 +355,8 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n             body_id.node_id,\n             span,\n         );\n-        self.outlives_environment.save_implied_bounds(body_id.node_id);\n+        self.outlives_environment\n+            .save_implied_bounds(body_id.node_id);\n         self.link_fn_args(\n             region::Scope {\n                 id: body.value.hir_id.local_id,\n@@ -392,7 +393,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n         self.select_all_obligations_or_error();\n     }\n \n-    fn resolve_regions_and_report_errors(&self, unless_nll: UnlessNll) {\n+    fn resolve_regions_and_report_errors(&self, suppress: SuppressRegionErrors) {\n         self.infcx.process_registered_region_obligations(\n             self.outlives_environment.region_bound_pairs_map(),\n             self.implicit_region_bound,\n@@ -403,7 +404,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n             self.subject_def_id,\n             &self.region_scope_tree,\n             &self.outlives_environment,\n-            unless_nll,\n+            suppress,\n         );\n     }\n "}, {"sha": "db08bf80953523d79a0504da27649097877c43d0", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a13c9f6bfd5266e8b5f567a204f8f3e8051a936d/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13c9f6bfd5266e8b5f567a204f8f3e8051a936d/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=a13c9f6bfd5266e8b5f567a204f8f3e8051a936d", "patch": "@@ -11,7 +11,7 @@\n //! Check properties that are required by built-in traits and set\n //! up data structures required by type-checking/codegen.\n \n-use rustc::infer::UnlessNll;\n+use rustc::infer::SuppressRegionErrors;\n use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::middle::region;\n use rustc::middle::lang_items::UnsizeTraitLangItem;\n@@ -397,7 +397,7 @@ pub fn coerce_unsized_info<'a, 'gcx>(gcx: TyCtxt<'a, 'gcx, 'gcx>,\n             impl_did,\n             &region_scope_tree,\n             &outlives_env,\n-            UnlessNll(false),\n+            SuppressRegionErrors::default(),\n         );\n \n         CoerceUnsizedInfo {"}]}