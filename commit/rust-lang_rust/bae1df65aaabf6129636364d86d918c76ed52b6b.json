{"sha": "bae1df65aaabf6129636364d86d918c76ed52b6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhZTFkZjY1YWFhYmY2MTI5NjM2MzY0ZDg2ZDkxOGM3NmVkNTJiNmI=", "commit": {"author": {"name": "Paul Faria", "email": "Nashenas88@gmail.com", "date": "2015-06-15T22:20:18Z"}, "committer": {"name": "Paul Faria", "email": "Nashenas88@gmail.com", "date": "2015-06-20T01:09:32Z"}, "message": "fixup! Wrapped inferred context changes in a probe, handle fnOnce trait require error with a fallback, renamed variable to something clearer", "tree": {"sha": "8fae198682a330a44378566063af7281d95cacad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fae198682a330a44378566063af7281d95cacad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bae1df65aaabf6129636364d86d918c76ed52b6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bae1df65aaabf6129636364d86d918c76ed52b6b", "html_url": "https://github.com/rust-lang/rust/commit/bae1df65aaabf6129636364d86d918c76ed52b6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bae1df65aaabf6129636364d86d918c76ed52b6b/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "973da22ea3d8074d8ce1214f7a356e96efe4131a", "url": "https://api.github.com/repos/rust-lang/rust/commits/973da22ea3d8074d8ce1214f7a356e96efe4131a", "html_url": "https://github.com/rust-lang/rust/commit/973da22ea3d8074d8ce1214f7a356e96efe4131a"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "4fbe42455ae8685d1f13b92d2403fc2506747fe7", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bae1df65aaabf6129636364d86d918c76ed52b6b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae1df65aaabf6129636364d86d918c76ed52b6b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=bae1df65aaabf6129636364d86d918c76ed52b6b", "patch": "@@ -73,20 +73,16 @@ pub fn report_error<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                         // snippet\n                     };\n \n-                    macro_rules! span_stored_function {\n-                        () => {\n-                            cx.sess.span_note(span,\n-                                              &format!(\"use `({0}.{1})(...)` if you meant to call \\\n-                                                        the function stored in the `{1}` field\",\n-                                                       expr_string, item_name));\n-                        }\n+                    let span_stored_function = || {\n+                        cx.sess.span_note(span,\n+                                          &format!(\"use `({0}.{1})(...)` if you meant to call \\\n+                                                    the function stored in the `{1}` field\",\n+                                                   expr_string, item_name));\n                     };\n \n-                    macro_rules! span_did_you_mean {\n-                        () => {\n-                            cx.sess.span_note(span, &format!(\"did you mean to write `{0}.{1}`?\",\n-                                                             expr_string, item_name));\n-                        }\n+                    let span_did_you_mean = || {\n+                        cx.sess.span_note(span, &format!(\"did you mean to write `{0}.{1}`?\",\n+                                                         expr_string, item_name));\n                     };\n \n                     // Determine if the field can be used as a function in some way\n@@ -106,16 +102,16 @@ pub fn report_error<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                             let mut selcx = SelectionContext::new(infcx, fcx);\n \n                             if selcx.evaluate_obligation(&obligation) {\n-                                span_stored_function!();\n+                                span_stored_function();\n                             } else {\n-                                span_did_you_mean!();\n+                                span_did_you_mean();\n                             }\n                         });\n                     } else {\n                         match field_ty.sty {\n                             // fallback to matching a closure or function pointer\n-                            ty::TyClosure(_,_) | ty::TyBareFn(None,_) => span_stored_function!(),\n-                            _ => span_did_you_mean!(),\n+                            ty::TyClosure(..) | ty::TyBareFn(..) => span_stored_function(),\n+                            _ => span_did_you_mean(),\n                         }\n                     }\n                 }"}]}