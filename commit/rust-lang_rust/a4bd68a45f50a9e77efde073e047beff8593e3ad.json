{"sha": "a4bd68a45f50a9e77efde073e047beff8593e3ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0YmQ2OGE0NWY1MGE5ZTc3ZWZkZTA3M2UwNDdiZWZmODU5M2UzYWQ=", "commit": {"author": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2019-12-28T01:32:20Z"}, "committer": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2019-12-28T01:32:20Z"}, "message": "Add helper 'alloc_os_str_as_c_str' and use it in env_var emulation", "tree": {"sha": "b48feef2f65a2a772ba9ea3eabe130983c7f52c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b48feef2f65a2a772ba9ea3eabe130983c7f52c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4bd68a45f50a9e77efde073e047beff8593e3ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4bd68a45f50a9e77efde073e047beff8593e3ad", "html_url": "https://github.com/rust-lang/rust/commit/a4bd68a45f50a9e77efde073e047beff8593e3ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4bd68a45f50a9e77efde073e047beff8593e3ad/comments", "author": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34d8ec896db94ac7443541514653166ad5d38d3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/34d8ec896db94ac7443541514653166ad5d38d3c", "html_url": "https://github.com/rust-lang/rust/commit/34d8ec896db94ac7443541514653166ad5d38d3c"}], "stats": {"total": 69, "additions": 47, "deletions": 22}, "files": [{"sha": "18b433a0e4a50a7a1a92c7a58ed368893979700a", "filename": "src/helpers.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a4bd68a45f50a9e77efde073e047beff8593e3ad/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bd68a45f50a9e77efde073e047beff8593e3ad/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=a4bd68a45f50a9e77efde073e047beff8593e3ad", "patch": "@@ -497,6 +497,20 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             .write_bytes(scalar, bytes.iter().copied().chain(iter::once(0u8)))?;\n         Ok(true)\n     }\n+\n+    fn alloc_os_str_as_c_str(\n+        &mut self,\n+        os_str: &OsStr,\n+        memkind: MemoryKind<MiriMemoryKind>\n+    ) -> Pointer<Tag> {\n+        let size = os_str.len() as u64 + 1; // Make space for `0` terminator.\n+        let this = self.eval_context_mut();\n+\n+        let arg_type = this.tcx.mk_array(this.tcx.types.u8, size);\n+        let arg_place = this.allocate(this.layout_of(arg_type).unwrap(), memkind);\n+        self.write_os_str_to_c_str(os_str, arg_place.ptr, size).unwrap();\n+        arg_place.ptr.assert_ptr()\n+    }\n }\n \n pub fn immty_from_int_checked<'tcx>("}, {"sha": "1151561553f922f264174a071aa8ddaf673ee5c2", "filename": "src/shims/env.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a4bd68a45f50a9e77efde073e047beff8593e3ad/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bd68a45f50a9e77efde073e047beff8593e3ad/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=a4bd68a45f50a9e77efde073e047beff8593e3ad", "patch": "@@ -1,18 +1,18 @@\n use std::collections::HashMap;\n-use std::ffi::OsString;\n+use std::ffi::{OsString, OsStr};\n use std::env;\n \n use crate::stacked_borrows::Tag;\n use crate::*;\n \n use rustc::ty::layout::Size;\n-use rustc_mir::interpret::{Memory, Pointer};\n+use rustc_mir::interpret::Pointer;\n \n #[derive(Default)]\n pub struct EnvVars {\n     /// Stores pointers to the environment variables. These variables must be stored as\n     /// null-terminated C strings with the `\"{name}={value}\"` format.\n-    map: HashMap<Vec<u8>, Pointer<Tag>>,\n+    map: HashMap<OsString, Pointer<Tag>>,\n }\n \n impl EnvVars {\n@@ -30,24 +30,23 @@ impl EnvVars {\n             for (name, value) in env::vars() {\n                 if !excluded_env_vars.contains(&name) {\n                     let var_ptr =\n-                        alloc_env_var(name.as_bytes(), value.as_bytes(), &mut ecx.memory);\n-                    ecx.machine.env_vars.map.insert(name.into_bytes(), var_ptr);\n+                        alloc_env_var_as_c_str(name.as_ref(), value.as_ref(), ecx);\n+                    ecx.machine.env_vars.map.insert(OsString::from(name), var_ptr);\n                 }\n             }\n         }\n     }\n }\n \n-fn alloc_env_var<'mir, 'tcx>(\n-    name: &[u8],\n-    value: &[u8],\n-    memory: &mut Memory<'mir, 'tcx, Evaluator<'tcx>>,\n+fn alloc_env_var_as_c_str<'mir, 'tcx>(\n+    name: &OsStr,\n+    value: &OsStr,\n+    ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n ) -> Pointer<Tag> {\n-    let mut bytes = name.to_vec();\n-    bytes.push(b'=');\n-    bytes.extend_from_slice(value);\n-    bytes.push(0);\n-    memory.allocate_static_bytes(bytes.as_slice(), MiriMemoryKind::Env.into())\n+    let mut name_osstring = name.to_os_string();\n+    name_osstring.push(\"=\");\n+    name_osstring.push(value);\n+    ecx.alloc_os_str_as_c_str(name_osstring.as_os_str(), MiriMemoryKind::Env.into())\n }\n \n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n@@ -56,7 +55,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n-        let name = this.memory.read_c_str(name_ptr)?;\n+        let name = this.read_os_str_from_c_str(name_ptr)?;\n         Ok(match this.machine.env_vars.map.get(name) {\n             // The offset is used to strip the \"{name}=\" part of the string.\n             Some(var_ptr) => {\n@@ -71,20 +70,20 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         name_op: OpTy<'tcx, Tag>,\n         value_op: OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, i32> {\n-        let this = self.eval_context_mut();\n+        let mut this = self.eval_context_mut();\n \n         let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n         let value_ptr = this.read_scalar(value_op)?.not_undef()?;\n-        let value = this.memory.read_c_str(value_ptr)?;\n+        let value = this.read_os_str_from_c_str(value_ptr)?;\n         let mut new = None;\n         if !this.is_null(name_ptr)? {\n-            let name = this.memory.read_c_str(name_ptr)?;\n-            if !name.is_empty() && !name.contains(&b'=') {\n+            let name = this.read_os_str_from_c_str(name_ptr)?;\n+            if !name.is_empty() && !name.to_string_lossy().contains('=') {\n                 new = Some((name.to_owned(), value.to_owned()));\n             }\n         }\n         if let Some((name, value)) = new {\n-            let var_ptr = alloc_env_var(&name, &value, &mut this.memory);\n+            let var_ptr = alloc_env_var_as_c_str(&name, &value, &mut this);\n             if let Some(var) = this.machine.env_vars.map.insert(name.to_owned(), var_ptr) {\n                 this.memory\n                     .deallocate(var, None, MiriMemoryKind::Env.into())?;\n@@ -101,8 +100,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n         let mut success = None;\n         if !this.is_null(name_ptr)? {\n-            let name = this.memory.read_c_str(name_ptr)?.to_owned();\n-            if !name.is_empty() && !name.contains(&b'=') {\n+            let name = this.read_os_str_from_c_str(name_ptr)?.to_owned();\n+            if !name.is_empty() && !name.to_string_lossy().contains('=') {\n                 success = Some(this.machine.env_vars.map.remove(&name));\n             }\n         }"}, {"sha": "07e3b7d7582650d37f0cb66b0a069bcb483034e4", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a4bd68a45f50a9e77efde073e047beff8593e3ad/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4bd68a45f50a9e77efde073e047beff8593e3ad/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=a4bd68a45f50a9e77efde073e047beff8593e3ad", "patch": "@@ -956,10 +956,22 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_null(dest)?;\n             }\n             \"GetEnvironmentVariableW\" => {\n+                // args[0] : LPCWSTR lpName (32-bit ptr to a const string of 16-bit Unicode chars)\n+                // args[1] : LPWSTR lpBuffer (32-bit pointer to a string of 16-bit Unicode chars)\n+                // lpBuffer : ptr to buffer that receives contents of the env_var as a null-terminated string.\n+                // Return `# of chars` stored in the buffer pointed to by lpBuffer, excluding null-terminator.\n+                // Return 0 upon failure.\n+                \n                 // This is not the env var you are looking for.\n                 this.set_last_error(Scalar::from_u32(203))?; // ERROR_ENVVAR_NOT_FOUND\n                 this.write_null(dest)?;\n             }\n+            \"SetEnvironmentVariableW\" => {\n+                // args[0] : LPCWSTR lpName (32-bit ptr to a const string of 16-bit Unicode chars)\n+                // args[1] : LPCWSTR lpValue (32-bit ptr to a const string of 16-bit Unicode chars)\n+                // Return nonzero if success, else return 0.\n+                throw_unsup_format!(\"can't set environment variable on Windows\");\n+            }\n             \"GetCommandLineW\" => {\n                 this.write_scalar(\n                     this.machine.cmd_line.expect(\"machine must be initialized\"),"}]}