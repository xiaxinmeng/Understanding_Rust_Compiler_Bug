{"sha": "acee1f47ef5d75bc9f9043f2be59e4e6ced6892b", "node_id": "C_kwDOAAsO6NoAKGFjZWUxZjQ3ZWY1ZDc1YmM5ZjkwNDNmMmJlNTllNGU2Y2VkNjg5MmI", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-04-23T18:22:51Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-04-23T18:31:41Z"}, "message": "Erase type params when suggesting fully qualified path\n\nWhen suggesting the use of a fully qualified path for a method call that\nis ambiguous because it has multiple candidates, erase type params in\nthe resulting code, as they would result in an error when applied. We\nreplace them with `_` in the output to rely on inference. There might be\ncases where this still produces slighlty incomplete suggestions, but it\notherwise produces many more errors in relatively common cases.\n\nFix #96292", "tree": {"sha": "284f45c579cbbdfb9470c775f9cbbc577c119701", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/284f45c579cbbdfb9470c775f9cbbc577c119701"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acee1f47ef5d75bc9f9043f2be59e4e6ced6892b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acee1f47ef5d75bc9f9043f2be59e4e6ced6892b", "html_url": "https://github.com/rust-lang/rust/commit/acee1f47ef5d75bc9f9043f2be59e4e6ced6892b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acee1f47ef5d75bc9f9043f2be59e4e6ced6892b/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e9aa8a96b207668799365bf891a459b62410b60", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e9aa8a96b207668799365bf891a459b62410b60", "html_url": "https://github.com/rust-lang/rust/commit/1e9aa8a96b207668799365bf891a459b62410b60"}], "stats": {"total": 74, "additions": 74, "deletions": 0}, "files": [{"sha": "c851d12b3e624c617c59d75be04b1968156679fa", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/acee1f47ef5d75bc9f9043f2be59e4e6ced6892b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acee1f47ef5d75bc9f9043f2be59e4e6ced6892b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=acee1f47ef5d75bc9f9043f2be59e4e6ced6892b", "patch": "@@ -736,8 +736,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     && let ExprKind::Path(hir::QPath::Resolved(_, path)) = expr.kind\n                     && let [path_segment] = path.segments\n                 {\n+                    let mut eraser = TypeParamEraser(self.tcx);\n                     let candidate_len = impl_candidates.len();\n                     let suggestions = impl_candidates.iter().map(|candidate| {\n+                        let candidate = candidate.super_fold_with(&mut eraser);\n                         format!(\n                             \"{}::{}({})\",\n                             candidate, segment.ident, path_segment.ident\n@@ -1037,3 +1039,18 @@ impl<'tcx> TypeFolder<'tcx> for ErrTypeParamEraser<'tcx> {\n         }\n     }\n }\n+\n+/// Replace type parameters with `ty::Infer(ty::Var)` to display `_`.\n+struct TypeParamEraser<'tcx>(TyCtxt<'tcx>);\n+\n+impl<'tcx> TypeFolder<'tcx> for TypeParamEraser<'tcx> {\n+    fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+        self.0\n+    }\n+    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n+        match t.kind() {\n+            ty::Param(_) | ty::Error(_) => self.tcx().mk_ty_var(ty::TyVid::from_u32(0)),\n+            _ => t.super_fold_with(self),\n+        }\n+    }\n+}"}, {"sha": "f08025d99b5d7c80ce179dabde919145a5aee51c", "filename": "src/test/ui/traits/do-not-mention-type-params-by-name-in-suggestion-issue-96292.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/acee1f47ef5d75bc9f9043f2be59e4e6ced6892b/src%2Ftest%2Fui%2Ftraits%2Fdo-not-mention-type-params-by-name-in-suggestion-issue-96292.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acee1f47ef5d75bc9f9043f2be59e4e6ced6892b/src%2Ftest%2Fui%2Ftraits%2Fdo-not-mention-type-params-by-name-in-suggestion-issue-96292.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdo-not-mention-type-params-by-name-in-suggestion-issue-96292.rs?ref=acee1f47ef5d75bc9f9043f2be59e4e6ced6892b", "patch": "@@ -0,0 +1,20 @@\n+struct Thing<X>(X);\n+\n+trait Method<T> {\n+    fn method(self) -> T;\n+}\n+\n+impl<X> Method<i32> for Thing<X> {\n+    fn method(self) -> i32 { 0 }\n+}\n+\n+impl<X> Method<u32> for Thing<X> {\n+    fn method(self) -> u32 { 0 }\n+}\n+\n+fn main() {\n+    let thing = Thing(true);\n+    thing.method();\n+    //~^ ERROR type annotations needed\n+    //~| ERROR type annotations needed\n+}"}, {"sha": "2e80fa89f6372e8f34ecd9ca7af9af243289e4de", "filename": "src/test/ui/traits/do-not-mention-type-params-by-name-in-suggestion-issue-96292.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/acee1f47ef5d75bc9f9043f2be59e4e6ced6892b/src%2Ftest%2Fui%2Ftraits%2Fdo-not-mention-type-params-by-name-in-suggestion-issue-96292.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acee1f47ef5d75bc9f9043f2be59e4e6ced6892b/src%2Ftest%2Fui%2Ftraits%2Fdo-not-mention-type-params-by-name-in-suggestion-issue-96292.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdo-not-mention-type-params-by-name-in-suggestion-issue-96292.stderr?ref=acee1f47ef5d75bc9f9043f2be59e4e6ced6892b", "patch": "@@ -0,0 +1,37 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/do-not-mention-type-params-by-name-in-suggestion-issue-96292.rs:17:11\n+   |\n+LL |     thing.method();\n+   |     ------^^^^^^--\n+   |     |     |\n+   |     |     cannot infer type for type parameter `T` declared on the trait `Method`\n+   |     this method call resolves to `T`\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/do-not-mention-type-params-by-name-in-suggestion-issue-96292.rs:17:11\n+   |\n+LL |     thing.method();\n+   |     ------^^^^^^--\n+   |     |     |\n+   |     |     cannot infer type for type parameter `T` declared on the trait `Method`\n+   |     this method call resolves to `T`\n+   |\n+note: multiple `impl`s satisfying `Thing<bool>: Method<_>` found\n+  --> $DIR/do-not-mention-type-params-by-name-in-suggestion-issue-96292.rs:7:1\n+   |\n+LL | impl<X> Method<i32> for Thing<X> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | impl<X> Method<u32> for Thing<X> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: use the fully qualified path for the potential candidates\n+   |\n+LL |     <Thing<_> as Method<i32>>::method(thing);\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL |     <Thing<_> as Method<u32>>::method(thing);\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0282, E0283.\n+For more information about an error, try `rustc --explain E0282`."}]}