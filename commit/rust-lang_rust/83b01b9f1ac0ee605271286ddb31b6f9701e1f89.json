{"sha": "83b01b9f1ac0ee605271286ddb31b6f9701e1f89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzYjAxYjlmMWFjMGVlNjA1MjcxMjg2ZGRiMzFiNmY5NzAxZTFmODk=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-08-04T22:24:31Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-08-04T22:24:31Z"}, "message": "use zeroed allocation instead of eagerly initializing the memory", "tree": {"sha": "4a1bbdc82cdc56080f43cfe9d2e8c24ef463675e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a1bbdc82cdc56080f43cfe9d2e8c24ef463675e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83b01b9f1ac0ee605271286ddb31b6f9701e1f89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83b01b9f1ac0ee605271286ddb31b6f9701e1f89", "html_url": "https://github.com/rust-lang/rust/commit/83b01b9f1ac0ee605271286ddb31b6f9701e1f89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83b01b9f1ac0ee605271286ddb31b6f9701e1f89/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de91157389c4cf63ee6805e8490d0872fe2a7b33", "url": "https://api.github.com/repos/rust-lang/rust/commits/de91157389c4cf63ee6805e8490d0872fe2a7b33", "html_url": "https://github.com/rust-lang/rust/commit/de91157389c4cf63ee6805e8490d0872fe2a7b33"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "90bdf630d062de82ddec7a5e35157dd5c2bb779f", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83b01b9f1ac0ee605271286ddb31b6f9701e1f89/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b01b9f1ac0ee605271286ddb31b6f9701e1f89/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=83b01b9f1ac0ee605271286ddb31b6f9701e1f89", "patch": "@@ -23,6 +23,7 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(allocator_api)]\n #![feature(array_windows)]\n #![feature(assert_matches)]\n #![feature(backtrace)]\n@@ -33,6 +34,7 @@\n #![feature(discriminant_kind)]\n #![feature(never_type)]\n #![feature(extern_types)]\n+#![feature(new_uninit)]\n #![feature(nll)]\n #![feature(once_cell)]\n #![feature(min_specialization)]"}, {"sha": "a503c86c59b0e2bf36912e804582c62da7fb7160", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/83b01b9f1ac0ee605271286ddb31b6f9701e1f89/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b01b9f1ac0ee605271286ddb31b6f9701e1f89/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=83b01b9f1ac0ee605271286ddb31b6f9701e1f89", "patch": "@@ -131,8 +131,7 @@ impl<Tag> Allocation<Tag> {\n     /// Try to create an Allocation of `size` bytes, failing if there is not enough memory\n     /// available to the compiler to do so.\n     pub fn uninit(size: Size, align: Align, panic_on_fail: bool) -> InterpResult<'static, Self> {\n-        let mut bytes = Vec::new();\n-        bytes.try_reserve(size.bytes_usize()).map_err(|_| {\n+        let bytes = Box::<[u8]>::try_new_zeroed_slice(size.bytes_usize()).map_err(|_| {\n             // This results in an error that can happen non-deterministically, since the memory\n             // available to the compiler can change between runs. Normally queries are always\n             // deterministic. However, we can be non-determinstic here because all uses of const\n@@ -146,7 +145,9 @@ impl<Tag> Allocation<Tag> {\n             });\n             InterpError::ResourceExhaustion(ResourceExhaustionInfo::MemoryExhausted)\n         })?;\n-        bytes.resize(size.bytes_usize(), 0);\n+        // SAFETY: This turns a Box<[MaybeUninit<u8>]> into a Vec<u8>. This is safe since the box\n+        // was zero-allocated which is a valid value for u8.\n+        let bytes = unsafe { bytes.assume_init().to_vec() };\n         Ok(Allocation {\n             bytes,\n             relocations: Relocations::new(),"}]}