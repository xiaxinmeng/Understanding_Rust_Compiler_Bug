{"sha": "a260e65ead626ae60cfc45cf0be962a904b7fbbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNjBlNjVlYWQ2MjZhZTYwY2ZjNDVjZjBiZTk2MmE5MDRiN2ZiYmY=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2016-11-09T08:49:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-09T08:49:20Z"}, "message": "Merge pull request #1312 from devonhollowood/get-unwrap\n\nImplement `get_unwrap` lint", "tree": {"sha": "de3a06e528156788a87fc4091eab754a5a4de65f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de3a06e528156788a87fc4091eab754a5a4de65f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a260e65ead626ae60cfc45cf0be962a904b7fbbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a260e65ead626ae60cfc45cf0be962a904b7fbbf", "html_url": "https://github.com/rust-lang/rust/commit/a260e65ead626ae60cfc45cf0be962a904b7fbbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a260e65ead626ae60cfc45cf0be962a904b7fbbf/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c56b8dff8aa516a1751663c0d10fd5ef65ba89c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c56b8dff8aa516a1751663c0d10fd5ef65ba89c4", "html_url": "https://github.com/rust-lang/rust/commit/c56b8dff8aa516a1751663c0d10fd5ef65ba89c4"}, {"sha": "e94a4d466688d2baae80bd2c0ec4418598e3d5dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e94a4d466688d2baae80bd2c0ec4418598e3d5dd", "html_url": "https://github.com/rust-lang/rust/commit/e94a4d466688d2baae80bd2c0ec4418598e3d5dd"}], "stats": {"total": 146, "additions": 143, "deletions": 3}, "files": [{"sha": "047a5c4b34b38e9d4e3aae50a08edba3f5d187bf", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a260e65ead626ae60cfc45cf0be962a904b7fbbf/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/a260e65ead626ae60cfc45cf0be962a904b7fbbf/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=a260e65ead626ae60cfc45cf0be962a904b7fbbf", "patch": "@@ -266,6 +266,7 @@ All notable changes to this project will be documented in this file.\n [`for_kv_map`]: https://github.com/Manishearth/rust-clippy/wiki#for_kv_map\n [`for_loop_over_option`]: https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_option\n [`for_loop_over_result`]: https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_result\n+[`get_unwrap`]: https://github.com/Manishearth/rust-clippy/wiki#get_unwrap\n [`identity_op`]: https://github.com/Manishearth/rust-clippy/wiki#identity_op\n [`if_let_redundant_pattern_matching`]: https://github.com/Manishearth/rust-clippy/wiki#if_let_redundant_pattern_matching\n [`if_let_some_result`]: https://github.com/Manishearth/rust-clippy/wiki#if_let_some_result"}, {"sha": "28f3b1054dcff2c4331a67e0583f95b90595436b", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a260e65ead626ae60cfc45cf0be962a904b7fbbf/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/a260e65ead626ae60cfc45cf0be962a904b7fbbf/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=a260e65ead626ae60cfc45cf0be962a904b7fbbf", "patch": "@@ -182,7 +182,7 @@ You can check out this great service at [clippy.bashy.io](https://clippy.bashy.i\n \n ## Lints\n \n-There are 176 lints included in this crate:\n+There are 177 lints included in this crate:\n \n name                                                                                                                   | default | triggers on\n -----------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -238,6 +238,7 @@ name\n [for_kv_map](https://github.com/Manishearth/rust-clippy/wiki#for_kv_map)                                               | warn    | looping on a map using `iter` when `keys` or `values` would do\n [for_loop_over_option](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_option)                           | warn    | for-looping over an `Option`, which is more clearly expressed as an `if let`\n [for_loop_over_result](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_result)                           | warn    | for-looping over a `Result`, which is more clearly expressed as an `if let`\n+[get_unwrap](https://github.com/Manishearth/rust-clippy/wiki#get_unwrap)                                               | warn    | using `.get().unwrap()` or `.get_mut().unwrap()` when using `[]` would work instead\n [identity_op](https://github.com/Manishearth/rust-clippy/wiki#identity_op)                                             | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n [if_let_redundant_pattern_matching](https://github.com/Manishearth/rust-clippy/wiki#if_let_redundant_pattern_matching) | warn    | use the proper utility function avoiding an `if let`\n [if_let_some_result](https://github.com/Manishearth/rust-clippy/wiki#if_let_some_result)                               | warn    | usage of `ok()` in `if let Some(pat)` statements is unnecessary, match on `Ok(pat)` instead"}, {"sha": "8d5edb03682387dbdd9138363a197e62fdd5c3e6", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a260e65ead626ae60cfc45cf0be962a904b7fbbf/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a260e65ead626ae60cfc45cf0be962a904b7fbbf/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a260e65ead626ae60cfc45cf0be962a904b7fbbf", "patch": "@@ -383,6 +383,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         methods::CLONE_ON_COPY,\n         methods::EXTEND_FROM_SLICE,\n         methods::FILTER_NEXT,\n+        methods::GET_UNWRAP,\n         methods::ITER_NTH,\n         methods::ITER_SKIP_NEXT,\n         methods::NEW_RET_NO_SELF,"}, {"sha": "70ae2e6a189f8488fd0f76ea58d56fdf1d1f5fe4", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 74, "deletions": 2, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a260e65ead626ae60cfc45cf0be962a904b7fbbf/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a260e65ead626ae60cfc45cf0be962a904b7fbbf/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=a260e65ead626ae60cfc45cf0be962a904b7fbbf", "patch": "@@ -464,6 +464,32 @@ declare_lint! {\n     \"using `.skip(x).next()` on an iterator\"\n }\n \n+/// **What it does:** Checks for use of `.get().unwrap()` (or\n+/// `.get_mut().unwrap`) on a standard library type which implements `Index`\n+///\n+/// **Why is this bad?** Using the Index trait (`[]`) is more clear and more\n+/// concise.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let some_vec = vec![0, 1, 2, 3];\n+/// let last = some_vec.get(3).unwrap();\n+/// *some_vec.get_mut(0).unwrap() = 1;\n+/// ```\n+/// The correct use would be:\n+/// ```rust\n+/// let some_vec = vec![0, 1, 2, 3];\n+/// let last = some_vec[3];\n+/// some_vec[0] = 1;\n+/// ```\n+declare_lint! {\n+    pub GET_UNWRAP,\n+    Warn,\n+    \"using `.get().unwrap()` or `.get_mut().unwrap()` when using `[]` would work instead\"\n+}\n+\n \n impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n@@ -487,11 +513,15 @@ impl LintPass for Pass {\n                     FILTER_NEXT,\n                     FILTER_MAP,\n                     ITER_NTH,\n-                    ITER_SKIP_NEXT)\n+                    ITER_SKIP_NEXT,\n+                    GET_UNWRAP)\n     }\n }\n \n impl LateLintPass for Pass {\n+    #[allow(unused_attributes)]\n+    // ^ required because `cyclomatic_complexity` attribute shows up as unused\n+    #[cyclomatic_complexity = \"30\"]\n     fn check_expr(&mut self, cx: &LateContext, expr: &hir::Expr) {\n         if in_macro(cx, expr.span) {\n             return;\n@@ -500,7 +530,12 @@ impl LateLintPass for Pass {\n         match expr.node {\n             hir::ExprMethodCall(name, _, ref args) => {\n                 // Chain calls\n-                if let Some(arglists) = method_chain_args(expr, &[\"unwrap\"]) {\n+                // GET_UNWRAP needs to be checked before general `UNWRAP` lints\n+                if let Some(arglists) = method_chain_args(expr, &[\"get\", \"unwrap\"]) {\n+                    lint_get_unwrap(cx, expr, arglists[0], false);\n+                } else if let Some(arglists) = method_chain_args(expr, &[\"get_mut\", \"unwrap\"]) {\n+                    lint_get_unwrap(cx, expr, arglists[0], true);\n+                } else if let Some(arglists) = method_chain_args(expr, &[\"unwrap\"]) {\n                     lint_unwrap(cx, expr, arglists[0]);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"ok\", \"expect\"]) {\n                     lint_ok_expect(cx, expr, arglists[0]);\n@@ -818,6 +853,43 @@ fn lint_iter_nth(cx: &LateContext, expr: &hir::Expr, iter_args: &MethodArgs, is_\n     );\n }\n \n+fn lint_get_unwrap(cx: &LateContext, expr: &hir::Expr, get_args: &MethodArgs, is_mut: bool) {\n+    // Note: we don't want to lint `get_mut().unwrap` for HashMap or BTreeMap,\n+    // because they do not implement `IndexMut`\n+    let expr_ty = cx.tcx.expr_ty(&get_args[0]);\n+    let caller_type = if derefs_to_slice(cx, &get_args[0], expr_ty).is_some() {\n+        \"slice\"\n+    } else if match_type(cx, expr_ty, &paths::VEC) {\n+        \"Vec\"\n+    } else if match_type(cx, expr_ty, &paths::VEC_DEQUE) {\n+        \"VecDeque\"\n+    } else if !is_mut && match_type(cx, expr_ty, &paths::HASHMAP) {\n+        \"HashMap\"\n+    } else if !is_mut && match_type(cx, expr_ty, &paths::BTREEMAP) {\n+        \"BTreeMap\"\n+    } else {\n+        return; // caller is not a type that we want to lint\n+    };\n+\n+    let mut_str = if is_mut { \"_mut\" } else { \"\" };\n+    let borrow_str = if is_mut { \"&mut \" } else { \"&\" };\n+    span_lint_and_then(\n+        cx,\n+        GET_UNWRAP,\n+        expr.span,\n+        &format!(\"called `.get{0}().unwrap()` on a {1}. Using `[]` is more clear and more concise\",\n+                 mut_str, caller_type),\n+        |db| {\n+            db.span_suggestion(\n+                expr.span,\n+                \"try this\",\n+                format!(\"{}{}[{}]\", borrow_str, snippet(cx, get_args[0].span, \"_\"),\n+                        snippet(cx, get_args[1].span, \"_\"))\n+            );\n+        }\n+    );\n+}\n+\n fn lint_iter_skip_next(cx: &LateContext, expr: &hir::Expr){\n     // lint if caller of skip is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {"}, {"sha": "9d430e7ac7ca87a7281a6f89c6cc25ab340bc7a8", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/a260e65ead626ae60cfc45cf0be962a904b7fbbf/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a260e65ead626ae60cfc45cf0be962a904b7fbbf/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=a260e65ead626ae60cfc45cf0be962a904b7fbbf", "patch": "@@ -10,6 +10,7 @@ use std::collections::HashMap;\n use std::collections::HashSet;\n use std::collections::VecDeque;\n use std::ops::Mul;\n+use std::iter::FromIterator;\n \n struct T;\n \n@@ -388,6 +389,70 @@ fn iter_skip_next() {\n     let _ = foo.filter().skip(42).next();\n }\n \n+struct GetFalsePositive {\n+    arr: [u32; 3],\n+}\n+\n+impl GetFalsePositive {\n+    fn get(&self, pos: usize) -> Option<&u32> { self.arr.get(pos) }\n+    fn get_mut(&mut self, pos: usize) -> Option<&mut u32> { self.arr.get_mut(pos) }\n+}\n+\n+/// Checks implementation of `GET_UNWRAP` lint\n+fn get_unwrap() {\n+    let mut some_slice = &mut [0, 1, 2, 3];\n+    let mut some_vec = vec![0, 1, 2, 3];\n+    let mut some_vecdeque: VecDeque<_> = some_vec.iter().cloned().collect();\n+    let mut some_hashmap: HashMap<u8, char> = HashMap::from_iter(vec![(1, 'a'), (2, 'b')]);\n+    let mut some_btreemap: BTreeMap<u8, char> = BTreeMap::from_iter(vec![(1, 'a'), (2, 'b')]);\n+    let mut false_positive = GetFalsePositive { arr: [0, 1, 2] };\n+\n+    { // Test `get().unwrap()`\n+        let _ = some_slice.get(0).unwrap();\n+        //~^ERROR called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION some_slice[0]\n+        let _ = some_vec.get(0).unwrap();\n+        //~^ERROR called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION some_vec[0]\n+        let _ = some_vecdeque.get(0).unwrap();\n+        //~^ERROR called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION some_vecdeque[0]\n+        let _ = some_hashmap.get(&1).unwrap();\n+        //~^ERROR called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION some_hashmap[&1]\n+        let _ = some_btreemap.get(&1).unwrap();\n+        //~^ERROR called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION some_btreemap[&1]\n+\n+        let _ = false_positive.get(0).unwrap();\n+    }\n+\n+    { // Test `get_mut().unwrap()`\n+        *some_slice.get_mut(0).unwrap() = 1;\n+        //~^ERROR called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION &mut some_slice[0]\n+        *some_vec.get_mut(0).unwrap() = 1;\n+        //~^ERROR called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION &mut some_vec[0]\n+        *some_vecdeque.get_mut(0).unwrap() = 1;\n+        //~^ERROR called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION &mut some_vecdeque[0]\n+\n+        // Check false positives\n+        *some_hashmap.get_mut(&1).unwrap() = 'b';\n+        *some_btreemap.get_mut(&1).unwrap() = 'b';\n+        *false_positive.get_mut(0).unwrap() = 1;\n+    }\n+}\n+\n \n #[allow(similar_names)]\n fn main() {"}]}