{"sha": "42fbcb567c30aa79b2f6d5167b8364fa18d4d51d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZmJjYjU2N2MzMGFhNzliMmY2ZDUxNjdiODM2NGZhMThkNGQ1MWQ=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-07T11:43:27Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-07T11:43:27Z"}, "message": "hir: replace NodeId with HirId in Destination", "tree": {"sha": "be074a24952fc0ff8b3aff930a327d50bc853859", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be074a24952fc0ff8b3aff930a327d50bc853859"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42fbcb567c30aa79b2f6d5167b8364fa18d4d51d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42fbcb567c30aa79b2f6d5167b8364fa18d4d51d", "html_url": "https://github.com/rust-lang/rust/commit/42fbcb567c30aa79b2f6d5167b8364fa18d4d51d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42fbcb567c30aa79b2f6d5167b8364fa18d4d51d/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "558a07b89674b9a8962235c9d9a5b16e08c22210", "url": "https://api.github.com/repos/rust-lang/rust/commits/558a07b89674b9a8962235c9d9a5b16e08c22210", "html_url": "https://github.com/rust-lang/rust/commit/558a07b89674b9a8962235c9d9a5b16e08c22210"}], "stats": {"total": 59, "additions": 30, "deletions": 29}, "files": [{"sha": "e96709f6d14e5bd57b373786582ab9b6034715dc", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42fbcb567c30aa79b2f6d5167b8364fa18d4d51d/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fbcb567c30aa79b2f6d5167b8364fa18d4d51d/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=42fbcb567c30aa79b2f6d5167b8364fa18d4d51d", "patch": "@@ -571,9 +571,9 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n         match destination.target_id {\n             Ok(loop_id) => {\n                 for b in &self.breakable_block_scopes {\n-                    if b.block_expr_id == self.tcx.hir().node_to_hir_id(loop_id).local_id {\n+                    if b.block_expr_id == loop_id.local_id {\n                         let scope = region::Scope {\n-                            id: self.tcx.hir().node_to_hir_id(loop_id).local_id,\n+                            id: loop_id.local_id,\n                             data: region::ScopeData::Node\n                         };\n                         return (scope, match scope_cf_kind {\n@@ -583,9 +583,9 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                     }\n                 }\n                 for l in &self.loop_scopes {\n-                    if l.loop_id == self.tcx.hir().node_to_hir_id(loop_id).local_id {\n+                    if l.loop_id == loop_id.local_id {\n                         let scope = region::Scope {\n-                            id: self.tcx.hir().node_to_hir_id(loop_id).local_id,\n+                            id: loop_id.local_id,\n                             data: region::ScopeData::Node\n                         };\n                         return (scope, match scope_cf_kind {"}, {"sha": "bcfd832855cf7c1b11aafe2a673f8edeb6a0cc83", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42fbcb567c30aa79b2f6d5167b8364fa18d4d51d/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fbcb567c30aa79b2f6d5167b8364fa18d4d51d/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=42fbcb567c30aa79b2f6d5167b8364fa18d4d51d", "patch": "@@ -1064,18 +1064,22 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n         ExprKind::Break(ref destination, ref opt_expr) => {\n             if let Some(ref label) = destination.label {\n                 visitor.visit_label(label);\n+                /*\n                 if let Ok(node_id) = destination.target_id {\n                     visitor.visit_def_mention(Def::Label(node_id))\n                 }\n+                */\n             }\n             walk_list!(visitor, visit_expr, opt_expr);\n         }\n         ExprKind::Continue(ref destination) => {\n             if let Some(ref label) = destination.label {\n                 visitor.visit_label(label);\n+                /*\n                 if let Ok(node_id) = destination.target_id {\n                     visitor.visit_def_mention(Def::Label(node_id))\n                 }\n+                */\n             }\n         }\n         ExprKind::Ret(ref optional_expression) => {"}, {"sha": "949fdd2682b96dfcc62d328f26b4af63ddc83560", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/42fbcb567c30aa79b2f6d5167b8364fa18d4d51d/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fbcb567c30aa79b2f6d5167b8364fa18d4d51d/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=42fbcb567c30aa79b2f6d5167b8364fa18d4d51d", "patch": "@@ -1068,7 +1068,7 @@ impl<'a> LoweringContext<'a> {\n         let target_id = match destination {\n             Some((id, _)) => {\n                 if let Def::Label(loop_id) = self.expect_full_def(id) {\n-                    Ok(self.lower_node_id(loop_id).node_id)\n+                    Ok(self.lower_node_id(loop_id).hir_id)\n                 } else {\n                     Err(hir::LoopIdError::UnresolvedLabel)\n                 }\n@@ -1077,7 +1077,7 @@ impl<'a> LoweringContext<'a> {\n                 self.loop_scopes\n                     .last()\n                     .cloned()\n-                    .map(|id| Ok(self.lower_node_id(id).node_id))\n+                    .map(|id| Ok(self.lower_node_id(id).hir_id))\n                     .unwrap_or(Err(hir::LoopIdError::OutsideLoopScope))\n                     .into()\n             }\n@@ -4564,12 +4564,13 @@ impl<'a> LoweringContext<'a> {\n                     let thin_attrs = ThinVec::from(attrs);\n                     let catch_scope = self.catch_scopes.last().map(|x| *x);\n                     let ret_expr = if let Some(catch_node) = catch_scope {\n+                        let target_id = Ok(self.lower_node_id(catch_node).hir_id);\n                         P(self.expr(\n                             e.span,\n                             hir::ExprKind::Break(\n                                 hir::Destination {\n                                     label: None,\n-                                    target_id: Ok(catch_node),\n+                                    target_id,\n                                 },\n                                 Some(from_err_expr),\n                             ),"}, {"sha": "1a8ea1e79941842db44bb9ff26e9ba26bd50c5c7", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42fbcb567c30aa79b2f6d5167b8364fa18d4d51d/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fbcb567c30aa79b2f6d5167b8364fa18d4d51d/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=42fbcb567c30aa79b2f6d5167b8364fa18d4d51d", "patch": "@@ -1618,7 +1618,7 @@ pub struct Destination {\n \n     // These errors are caught and then reported during the diagnostics pass in\n     // librustc_passes/loops.rs\n-    pub target_id: Result<NodeId, LoopIdError>,\n+    pub target_id: Result<HirId, LoopIdError>,\n }\n \n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]"}, {"sha": "2fafc57ce4b2d193c5299d9126ab965ba346a042", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/42fbcb567c30aa79b2f6d5167b8364fa18d4d51d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fbcb567c30aa79b2f6d5167b8364fa18d4d51d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=42fbcb567c30aa79b2f6d5167b8364fa18d4d51d", "patch": "@@ -102,7 +102,7 @@ use crate::hir::Node;\n use crate::ty::{self, TyCtxt};\n use crate::ty::query::Providers;\n use crate::lint;\n-use crate::util::nodemap::{NodeMap, HirIdMap, HirIdSet};\n+use crate::util::nodemap::{HirIdMap, HirIdSet};\n \n use errors::Applicability;\n use std::collections::{BTreeMap, VecDeque};\n@@ -669,8 +669,8 @@ struct Liveness<'a, 'tcx: 'a> {\n     // mappings from loop node ID to LiveNode\n     // (\"break\" label should map to loop node ID,\n     // it probably doesn't now)\n-    break_ln: NodeMap<LiveNode>,\n-    cont_ln: NodeMap<LiveNode>,\n+    break_ln: HirIdMap<LiveNode>,\n+    cont_ln: HirIdMap<LiveNode>,\n }\n \n impl<'a, 'tcx> Liveness<'a, 'tcx> {\n@@ -951,8 +951,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn propagate_through_block(&mut self, blk: &hir::Block, succ: LiveNode)\n                                -> LiveNode {\n         if blk.targeted_by_break {\n-            let node_id = self.ir.tcx.hir().hir_to_node_id(blk.hir_id);\n-            self.break_ln.insert(node_id, succ);\n+            self.break_ln.insert(blk.hir_id, succ);\n         }\n         let succ = self.propagate_through_opt_expr(blk.expr.as_ref().map(|e| &**e), succ);\n         blk.stmts.iter().rev().fold(succ, |succ, stmt| {\n@@ -1111,7 +1110,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             hir::ExprKind::Break(label, ref opt_expr) => {\n                 // Find which label this break jumps to\n                 let target = match label.target_id {\n-                    Ok(node_id) => self.break_ln.get(&node_id),\n+                    Ok(hir_id) => self.break_ln.get(&hir_id),\n                     Err(err) => span_bug!(expr.span, \"loop scope error: {}\", err),\n                 }.cloned();\n \n@@ -1390,15 +1389,14 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         debug!(\"propagate_through_loop: using id for loop body {} {}\",\n                expr.hir_id, self.ir.tcx.hir().hir_to_pretty_string(body.hir_id));\n \n-        let node_id = self.ir.tcx.hir().hir_to_node_id(expr.hir_id);\n-        self.break_ln.insert(node_id, succ);\n+        self.break_ln.insert(expr.hir_id, succ);\n \n         let cond_ln = match kind {\n             LoopLoop => ln,\n             WhileLoop(ref cond) => self.propagate_through_expr(&cond, ln),\n         };\n \n-        self.cont_ln.insert(node_id, cond_ln);\n+        self.cont_ln.insert(expr.hir_id, cond_ln);\n \n         let body_ln = self.propagate_through_block(body, cond_ln);\n "}, {"sha": "6af45957acf0908984dedbe30f6efa6c05655423", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42fbcb567c30aa79b2f6d5167b8364fa18d4d51d/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fbcb567c30aa79b2f6d5167b8364fa18d4d51d/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=42fbcb567c30aa79b2f6d5167b8364fa18d4d51d", "patch": "@@ -591,7 +591,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             match dest.target_id {\n                 Ok(target_id) => ExprKind::Break {\n                     label: region::Scope {\n-                        id: cx.tcx.hir().node_to_hir_id(target_id).local_id,\n+                        id: target_id.local_id,\n                         data: region::ScopeData::Node\n                     },\n                     value: value.to_ref(),\n@@ -603,7 +603,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             match dest.target_id {\n                 Ok(loop_id) => ExprKind::Continue {\n                     label: region::Scope {\n-                        id: cx.tcx.hir().node_to_hir_id(loop_id).local_id,\n+                        id: loop_id.local_id,\n                         data: region::ScopeData::Node\n                     },\n                 },"}, {"sha": "2272ac97cddaa843466039d21228ee52080c2ab7", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/42fbcb567c30aa79b2f6d5167b8364fa18d4d51d/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fbcb567c30aa79b2f6d5167b8364fa18d4d51d/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=42fbcb567c30aa79b2f6d5167b8364fa18d4d51d", "patch": "@@ -8,7 +8,6 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::map::Map;\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::{self, Node, Destination};\n-use syntax::ast;\n use syntax::struct_span_err;\n use syntax_pos::Span;\n use errors::Applicability;\n@@ -105,25 +104,25 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n \n                 let loop_id = match label.target_id.into() {\n                     Ok(loop_id) => loop_id,\n-                    Err(hir::LoopIdError::OutsideLoopScope) => ast::DUMMY_NODE_ID,\n+                    Err(hir::LoopIdError::OutsideLoopScope) => hir::DUMMY_HIR_ID,\n                     Err(hir::LoopIdError::UnlabeledCfInWhileCondition) => {\n                         self.emit_unlabled_cf_in_while_condition(e.span, \"break\");\n-                        ast::DUMMY_NODE_ID\n+                        hir::DUMMY_HIR_ID\n                     },\n-                    Err(hir::LoopIdError::UnresolvedLabel) => ast::DUMMY_NODE_ID,\n+                    Err(hir::LoopIdError::UnresolvedLabel) => hir::DUMMY_HIR_ID,\n                 };\n \n-                if loop_id != ast::DUMMY_NODE_ID {\n-                    if let Node::Block(_) = self.hir_map.find(loop_id).unwrap() {\n+                if loop_id != hir::DUMMY_HIR_ID {\n+                    if let Node::Block(_) = self.hir_map.find_by_hir_id(loop_id).unwrap() {\n                         return\n                     }\n                 }\n \n                 if opt_expr.is_some() {\n-                    let loop_kind = if loop_id == ast::DUMMY_NODE_ID {\n+                    let loop_kind = if loop_id == hir::DUMMY_HIR_ID {\n                         None\n                     } else {\n-                        Some(match self.hir_map.expect_expr(loop_id).node {\n+                        Some(match self.hir_map.expect_expr_by_hir_id(loop_id).node {\n                             hir::ExprKind::While(..) => LoopKind::WhileLoop,\n                             hir::ExprKind::Loop(_, _, source) => LoopKind::Loop(source),\n                             ref r => span_bug!(e.span,\n@@ -162,7 +161,7 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n \n                 match destination.target_id {\n                     Ok(loop_id) => {\n-                        if let Node::Block(block) = self.hir_map.find(loop_id).unwrap() {\n+                        if let Node::Block(block) = self.hir_map.find_by_hir_id(loop_id).unwrap() {\n                             struct_span_err!(self.sess, e.span, E0696,\n                                             \"`continue` pointing to a labeled block\")\n                                 .span_label(e.span,"}, {"sha": "2882ed47f12cc787805472c300528a04555cd48b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42fbcb567c30aa79b2f6d5167b8364fa18d4d51d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fbcb567c30aa79b2f6d5167b8364fa18d4d51d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=42fbcb567c30aa79b2f6d5167b8364fa18d4d51d", "patch": "@@ -4262,7 +4262,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n             ExprKind::Break(destination, ref expr_opt) => {\n                 if let Ok(target_id) = destination.target_id {\n-                    let target_id = tcx.hir().node_to_hir_id(target_id);\n                     let (e_ty, cause);\n                     if let Some(ref e) = *expr_opt {\n                         // If this is a break with a value, we need to type-check"}]}