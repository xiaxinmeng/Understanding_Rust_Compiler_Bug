{"sha": "6fd5cf51c1528c16f8a186ced5d6d21b1d70e319", "node_id": "C_kwDOAAsO6NoAKDZmZDVjZjUxYzE1MjhjMTZmOGExODZjZWQ1ZDZkMjFiMWQ3MGUzMTk", "commit": {"author": {"name": "Kevin Reid", "email": "kpreid@google.com", "date": "2021-10-13T15:46:34Z"}, "committer": {"name": "Kevin Reid", "email": "kpreid@google.com", "date": "2021-12-04T15:46:36Z"}, "message": "Add documentation to more `From::from` implementations.\n\nFor users looking at documentation through IDE popups, this gives them\nrelevant information rather than the generic trait documentation wording\n\u201cPerforms the conversion\u201d. For users reading the documentation for a\nspecific type for any reason, this informs them when the conversion may\nallocate or copy significant memory versus when it is always a move or\ncheap copy.\n\nNotes on specific cases:\n* The new documentation for `From<T> for T` explains that it is not a\n  conversion at all.\n* Also documented `impl<T, U> Into<U> for T where U: From<T>`, the other\n  central blanket implementation of conversion.\n* I did not add documentation to conversions of a specific error type to\n  a more general error type.\n* I did not add documentation to unstable code.\n\nThis change was prepared by searching for the text \"From<... for\" and so\nmay have missed some cases that for whatever reason did not match. I\nalso looked for `Into` impls but did not find any worth documenting by\nthe above criteria.", "tree": {"sha": "7b11d73338ef78e2cbabedf073c3f52b2b033c06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b11d73338ef78e2cbabedf073c3f52b2b033c06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319", "html_url": "https://github.com/rust-lang/rust/commit/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/comments", "author": {"login": "kpreid", "id": 779501, "node_id": "MDQ6VXNlcjc3OTUwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/779501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpreid", "html_url": "https://github.com/kpreid", "followers_url": "https://api.github.com/users/kpreid/followers", "following_url": "https://api.github.com/users/kpreid/following{/other_user}", "gists_url": "https://api.github.com/users/kpreid/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpreid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpreid/subscriptions", "organizations_url": "https://api.github.com/users/kpreid/orgs", "repos_url": "https://api.github.com/users/kpreid/repos", "events_url": "https://api.github.com/users/kpreid/events{/privacy}", "received_events_url": "https://api.github.com/users/kpreid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kpreid", "id": 779501, "node_id": "MDQ6VXNlcjc3OTUwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/779501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpreid", "html_url": "https://github.com/kpreid", "followers_url": "https://api.github.com/users/kpreid/followers", "following_url": "https://api.github.com/users/kpreid/following{/other_user}", "gists_url": "https://api.github.com/users/kpreid/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpreid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpreid/subscriptions", "organizations_url": "https://api.github.com/users/kpreid/orgs", "repos_url": "https://api.github.com/users/kpreid/repos", "events_url": "https://api.github.com/users/kpreid/events{/privacy}", "received_events_url": "https://api.github.com/users/kpreid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "887999d163bace7e79370b952bdd1f930ff4cdd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/887999d163bace7e79370b952bdd1f930ff4cdd5", "html_url": "https://github.com/rust-lang/rust/commit/887999d163bace7e79370b952bdd1f930ff4cdd5"}], "stats": {"total": 75, "additions": 63, "deletions": 12}, "files": [{"sha": "f015e081ea3dedc5588df99d2abd0e2db7025c12", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=6fd5cf51c1528c16f8a186ced5d6d21b1d70e319", "patch": "@@ -2047,6 +2047,8 @@ where\n \n #[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]\n impl<K: Ord, V, const N: usize> From<[(K, V); N]> for BTreeMap<K, V> {\n+    /// Converts a `[(K, V); N]` into a `BTreeMap<(K, V)>`.\n+    ///\n     /// ```\n     /// use std::collections::BTreeMap;\n     ///"}, {"sha": "ec4ed85437287bcabd1b756c7d9d6b8c5629f70f", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=6fd5cf51c1528c16f8a186ced5d6d21b1d70e319", "patch": "@@ -1092,6 +1092,8 @@ impl<T: Ord> FromIterator<T> for BTreeSet<T> {\n \n #[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]\n impl<T: Ord, const N: usize> From<[T; N]> for BTreeSet<T> {\n+    /// Converts a `[T; N]` into a `BTreeSet<T>`.\n+    ///\n     /// ```\n     /// use std::collections::BTreeSet;\n     ///"}, {"sha": "30b07c0aebe0131d8e171af28bab3bb475dbb55f", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=6fd5cf51c1528c16f8a186ced5d6d21b1d70e319", "patch": "@@ -1953,6 +1953,8 @@ impl<T: Hash> Hash for LinkedList<T> {\n \n #[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]\n impl<T, const N: usize> From<[T; N]> for LinkedList<T> {\n+    /// Converts a `[T; N]` into a `LinkedList<T>`.\n+    ///\n     /// ```\n     /// use std::collections::LinkedList;\n     ///"}, {"sha": "061e2758e49855cf5798800440cecca62a6ac925", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=6fd5cf51c1528c16f8a186ced5d6d21b1d70e319", "patch": "@@ -3018,6 +3018,8 @@ impl<T, A: Allocator> From<VecDeque<T, A>> for Vec<T, A> {\n \n #[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]\n impl<T, const N: usize> From<[T; N]> for VecDeque<T> {\n+    /// Converts a `[T; N]` into a `VecDeque<T>`.\n+    ///\n     /// ```\n     /// use std::collections::VecDeque;\n     ///"}, {"sha": "0cc4a55dc99c926a694424e89c70f88453dd991f", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=6fd5cf51c1528c16f8a186ced5d6d21b1d70e319", "patch": "@@ -2908,17 +2908,18 @@ impl<T: Clone> From<&mut [T]> for Vec<T> {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"vec_from_array\", since = \"1.44.0\")]\n impl<T, const N: usize> From<[T; N]> for Vec<T> {\n-    #[cfg(not(test))]\n-    fn from(s: [T; N]) -> Vec<T> {\n-        <[T]>::into_vec(box s)\n-    }\n     /// Allocate a `Vec<T>` and move `s`'s items into it.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// assert_eq!(Vec::from([1, 2, 3]), vec![1, 2, 3]);\n     /// ```\n+    #[cfg(not(test))]\n+    fn from(s: [T; N]) -> Vec<T> {\n+        <[T]>::into_vec(box s)\n+    }\n+\n     #[cfg(test)]\n     fn from(s: [T; N]) -> Vec<T> {\n         crate::slice::into_vec(box s)"}, {"sha": "235e43a3048d8110284744941546dadf8c08cce9", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=6fd5cf51c1528c16f8a186ced5d6d21b1d70e319", "patch": "@@ -315,6 +315,7 @@ impl<T: Ord + Copy> Ord for Cell<T> {\n #[stable(feature = \"cell_from\", since = \"1.12.0\")]\n #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T> const From<T> for Cell<T> {\n+    /// Creates a new `Cell<T>` containing the given value.\n     fn from(t: T) -> Cell<T> {\n         Cell::new(t)\n     }\n@@ -1244,6 +1245,7 @@ impl<T: ?Sized + Ord> Ord for RefCell<T> {\n #[stable(feature = \"cell_from\", since = \"1.12.0\")]\n #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T> const From<T> for RefCell<T> {\n+    /// Creates a new `RefCell<T>` containing the given value.\n     fn from(t: T) -> RefCell<T> {\n         RefCell::new(t)\n     }\n@@ -1986,6 +1988,7 @@ impl<T: Default> Default for UnsafeCell<T> {\n #[stable(feature = \"cell_from\", since = \"1.12.0\")]\n #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T> const From<T> for UnsafeCell<T> {\n+    /// Creates a new `UnsafeCell<T>` containing the given value.\n     fn from(t: T) -> UnsafeCell<T> {\n         UnsafeCell::new(t)\n     }"}, {"sha": "de23dda1d0f4dc0f7dbff4b97c2deec45f17e4f7", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=6fd5cf51c1528c16f8a186ced5d6d21b1d70e319", "patch": "@@ -538,6 +538,10 @@ impl<T, U> Into<U> for T\n where\n     U: From<T>,\n {\n+    /// Calls `U::from(self)`.\n+    ///\n+    /// That is, this conversion is whatever the implementation of\n+    /// <code>[From]&lt;T&gt; for U</code> chooses to do.\n     fn into(self) -> U {\n         U::from(self)\n     }\n@@ -547,6 +551,7 @@ where\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T> const From<T> for T {\n+    /// Returns the argument unchanged.\n     fn from(t: T) -> T {\n         t\n     }"}, {"sha": "6e08a7d24c6b0e2c074b1b2c3dbb887232641553", "filename": "library/core/src/lazy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Fcore%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Fcore%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flazy.rs?ref=6fd5cf51c1528c16f8a186ced5d6d21b1d70e319", "patch": "@@ -75,6 +75,7 @@ impl<T: Eq> Eq for OnceCell<T> {}\n \n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n impl<T> const From<T> for OnceCell<T> {\n+    /// Creates a new `OnceCell<T>` which already contains the given `value`.\n     fn from(value: T) -> Self {\n         OnceCell { inner: UnsafeCell::new(Some(value)) }\n     }"}, {"sha": "84ffd8bc8e2041d0d290501acde13763f11efc0f", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=6fd5cf51c1528c16f8a186ced5d6d21b1d70e319", "patch": "@@ -714,6 +714,9 @@ impl<T: ?Sized> const From<Unique<T>> for NonNull<T> {\n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T: ?Sized> const From<&mut T> for NonNull<T> {\n+    /// Converts a `&mut T` to a `NonNull<T>`.\n+    ///\n+    /// This conversion is safe and infallible since references cannot be null.\n     #[inline]\n     fn from(reference: &mut T) -> Self {\n         // SAFETY: A mutable reference cannot be null.\n@@ -724,6 +727,9 @@ impl<T: ?Sized> const From<&mut T> for NonNull<T> {\n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T: ?Sized> const From<&T> for NonNull<T> {\n+    /// Converts a `&T` to a `NonNull<T>`.\n+    ///\n+    /// This conversion is safe and infallible since references cannot be null.\n     #[inline]\n     fn from(reference: &T) -> Self {\n         // SAFETY: A reference cannot be null, so the conditions for"}, {"sha": "f88d4b72fcf6bfe523ad2bb006a001e368c66bb7", "filename": "library/core/src/ptr/unique.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Funique.rs?ref=6fd5cf51c1528c16f8a186ced5d6d21b1d70e319", "patch": "@@ -178,6 +178,9 @@ impl<T: ?Sized> fmt::Pointer for Unique<T> {\n \n #[unstable(feature = \"ptr_internals\", issue = \"none\")]\n impl<T: ?Sized> const From<&mut T> for Unique<T> {\n+    /// Converts a `&mut T` to a `Unique<T>`.\n+    ///\n+    /// This conversion is infallible since references cannot be null.\n     #[inline]\n     fn from(reference: &mut T) -> Self {\n         // SAFETY: A mutable reference cannot be null"}, {"sha": "93cdab59e44294fad63451fbe650d591df7afabe", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=6fd5cf51c1528c16f8a186ced5d6d21b1d70e319", "patch": "@@ -1294,6 +1294,7 @@ impl const From<bool> for AtomicBool {\n #[stable(feature = \"atomic_from\", since = \"1.23.0\")]\n #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T> const From<*mut T> for AtomicPtr<T> {\n+    /// Converts a `*mut T` into an `AtomicPtr<T>`.\n     #[inline]\n     fn from(p: *mut T) -> Self {\n         Self::new(p)"}, {"sha": "41f0a25dbc3e08daa688c5b6202ba987d468765a", "filename": "library/core/src/task/poll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs?ref=6fd5cf51c1528c16f8a186ced5d6d21b1d70e319", "patch": "@@ -243,7 +243,7 @@ impl<T, E> Poll<Option<Result<T, E>>> {\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T> const From<T> for Poll<T> {\n-    /// Convert to a `Ready` variant.\n+    /// Moves the value into a [`Poll::Ready`] to make a `Poll<T>`.\n     ///\n     /// # Example\n     ///"}, {"sha": "62b6eefbe1866432817b53ee0f0b5f71bbf0ee79", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=6fd5cf51c1528c16f8a186ced5d6d21b1d70e319", "patch": "@@ -848,6 +848,8 @@ impl Borrow<CStr> for CString {\n \n #[stable(feature = \"cstring_from_cow_cstr\", since = \"1.28.0\")]\n impl<'a> From<Cow<'a, CStr>> for CString {\n+    /// Converts a `Cow<'a, CStr>` into a `CString`, by copying the contents if they are\n+    /// borrowed.\n     #[inline]\n     fn from(s: Cow<'a, CStr>) -> Self {\n         s.into_owned()\n@@ -856,6 +858,8 @@ impl<'a> From<Cow<'a, CStr>> for CString {\n \n #[stable(feature = \"box_from_c_str\", since = \"1.17.0\")]\n impl From<&CStr> for Box<CStr> {\n+    /// Converts a `&CStr` into a `Box<CStr>`,\n+    /// by copying the contents into a newly allocated [`Box`].\n     fn from(s: &CStr) -> Box<CStr> {\n         let boxed: Box<[u8]> = Box::from(s.to_bytes_with_nul());\n         unsafe { Box::from_raw(Box::into_raw(boxed) as *mut CStr) }\n@@ -864,6 +868,8 @@ impl From<&CStr> for Box<CStr> {\n \n #[stable(feature = \"box_from_cow\", since = \"1.45.0\")]\n impl From<Cow<'_, CStr>> for Box<CStr> {\n+    /// Converts a `Cow<'a, CStr>` into a `Box<CStr>`,\n+    /// by copying the contents if they are borrowed.\n     #[inline]\n     fn from(cow: Cow<'_, CStr>) -> Box<CStr> {\n         match cow {\n@@ -960,6 +966,8 @@ impl From<CString> for Arc<CStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<&CStr> for Arc<CStr> {\n+    /// Converts a `&CStr` into a `Arc<CStr>`,\n+    /// by copying the contents into a newly allocated [`Arc`].\n     #[inline]\n     fn from(s: &CStr) -> Arc<CStr> {\n         let arc: Arc<[u8]> = Arc::from(s.to_bytes_with_nul());\n@@ -979,6 +987,8 @@ impl From<CString> for Rc<CStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<&CStr> for Rc<CStr> {\n+    /// Converts a `&CStr` into a `Rc<CStr>`,\n+    /// by copying the contents into a newly allocated [`Rc`].\n     #[inline]\n     fn from(s: &CStr) -> Rc<CStr> {\n         let rc: Rc<[u8]> = Rc::from(s.to_bytes_with_nul());\n@@ -1504,6 +1514,7 @@ impl ToOwned for CStr {\n \n #[stable(feature = \"cstring_asref\", since = \"1.7.0\")]\n impl From<&CStr> for CString {\n+    /// Copies the contents of the `&CStr` into a newly allocated `CString`.\n     fn from(s: &CStr) -> CString {\n         s.to_owned()\n     }"}, {"sha": "7bb2ff6770ec5d894e90adedfafa5bf291a60dd2", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=6fd5cf51c1528c16f8a186ced5d6d21b1d70e319", "patch": "@@ -371,6 +371,8 @@ impl From<String> for OsString {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + AsRef<OsStr>> From<&T> for OsString {\n+    /// Copies any value implementing <code>[AsRef]&lt;[OsStr]&gt;</code>\n+    /// into a newly allocated [`OsString`].\n     fn from(s: &T) -> OsString {\n         s.as_ref().to_os_string()\n     }\n@@ -861,6 +863,7 @@ impl OsStr {\n \n #[stable(feature = \"box_from_os_str\", since = \"1.17.0\")]\n impl From<&OsStr> for Box<OsStr> {\n+    /// Copies the string into a newly allocated <code>[Box]&lt;[OsStr]&gt;</code>.\n     #[inline]\n     fn from(s: &OsStr) -> Box<OsStr> {\n         let rw = Box::into_raw(s.inner.into_box()) as *mut OsStr;\n@@ -870,6 +873,8 @@ impl From<&OsStr> for Box<OsStr> {\n \n #[stable(feature = \"box_from_cow\", since = \"1.45.0\")]\n impl From<Cow<'_, OsStr>> for Box<OsStr> {\n+    /// Converts a `Cow<'a, OsStr>` into a <code>[Box]&lt;[OsStr]&gt;</code>,\n+    /// by copying the contents if they are borrowed.\n     #[inline]\n     fn from(cow: Cow<'_, OsStr>) -> Box<OsStr> {\n         match cow {\n@@ -918,6 +923,7 @@ impl From<OsString> for Arc<OsStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<&OsStr> for Arc<OsStr> {\n+    /// Copies the string into a newly allocated <code>[Arc]&lt;[OsStr]&gt;</code>.\n     #[inline]\n     fn from(s: &OsStr) -> Arc<OsStr> {\n         let arc = s.inner.into_arc();\n@@ -937,6 +943,7 @@ impl From<OsString> for Rc<OsStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<&OsStr> for Rc<OsStr> {\n+    /// Copies the string into a newly allocated <code>[Rc]&lt;[OsStr]&gt;</code>.\n     #[inline]\n     fn from(s: &OsStr) -> Rc<OsStr> {\n         let rc = s.inner.into_rc();\n@@ -946,6 +953,7 @@ impl From<&OsStr> for Rc<OsStr> {\n \n #[stable(feature = \"cow_from_osstr\", since = \"1.28.0\")]\n impl<'a> From<OsString> for Cow<'a, OsStr> {\n+    /// Moves the string into a [`Cow::Owned`].\n     #[inline]\n     fn from(s: OsString) -> Cow<'a, OsStr> {\n         Cow::Owned(s)\n@@ -954,6 +962,7 @@ impl<'a> From<OsString> for Cow<'a, OsStr> {\n \n #[stable(feature = \"cow_from_osstr\", since = \"1.28.0\")]\n impl<'a> From<&'a OsStr> for Cow<'a, OsStr> {\n+    /// Converts the string reference into a [`Cow::Borrowed`].\n     #[inline]\n     fn from(s: &'a OsStr) -> Cow<'a, OsStr> {\n         Cow::Borrowed(s)\n@@ -962,6 +971,7 @@ impl<'a> From<&'a OsStr> for Cow<'a, OsStr> {\n \n #[stable(feature = \"cow_from_osstr\", since = \"1.28.0\")]\n impl<'a> From<&'a OsString> for Cow<'a, OsStr> {\n+    /// Converts the string reference into a [`Cow::Borrowed`].\n     #[inline]\n     fn from(s: &'a OsString) -> Cow<'a, OsStr> {\n         Cow::Borrowed(s.as_os_str())\n@@ -970,6 +980,8 @@ impl<'a> From<&'a OsString> for Cow<'a, OsStr> {\n \n #[stable(feature = \"osstring_from_cow_osstr\", since = \"1.28.0\")]\n impl<'a> From<Cow<'a, OsStr>> for OsString {\n+    /// Converts a `Cow<'a, OsStr>` into an [`OsString`],\n+    /// by copying the contents if they are borrowed.\n     #[inline]\n     fn from(s: Cow<'a, OsStr>) -> Self {\n         s.into_owned()"}, {"sha": "a4d0119c2a06351939fca6d039826b32cd07aae7", "filename": "library/std/src/path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=6fd5cf51c1528c16f8a186ced5d6d21b1d70e319", "patch": "@@ -1581,7 +1581,7 @@ impl From<Cow<'_, Path>> for Box<Path> {\n \n #[stable(feature = \"path_buf_from_box\", since = \"1.18.0\")]\n impl From<Box<Path>> for PathBuf {\n-    /// Converts a `Box<Path>` into a `PathBuf`\n+    /// Converts a <code>[Box]&lt;[Path]&gt;</code> into a [`PathBuf`].\n     ///\n     /// This conversion does not allocate or copy memory.\n     #[inline]\n@@ -1592,7 +1592,7 @@ impl From<Box<Path>> for PathBuf {\n \n #[stable(feature = \"box_from_path_buf\", since = \"1.20.0\")]\n impl From<PathBuf> for Box<Path> {\n-    /// Converts a `PathBuf` into a `Box<Path>`\n+    /// Converts a [`PathBuf`] into a <code>[Box]&lt;[Path]&gt;</code>.\n     ///\n     /// This conversion currently should not allocate memory,\n     /// but this behavior is not guaranteed on all platforms or in all future versions.\n@@ -1612,7 +1612,7 @@ impl Clone for Box<Path> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + AsRef<OsStr>> From<&T> for PathBuf {\n-    /// Converts a borrowed `OsStr` to a `PathBuf`.\n+    /// Converts a borrowed [`OsStr`] to a [`PathBuf`].\n     ///\n     /// Allocates a [`PathBuf`] and copies the data into it.\n     #[inline]"}, {"sha": "ae39997de62127e69b7f55692a98f8fa49c5882b", "filename": "library/std/src/process.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=6fd5cf51c1528c16f8a186ced5d6d21b1d70e319", "patch": "@@ -1289,7 +1289,7 @@ impl fmt::Debug for Stdio {\n \n #[stable(feature = \"stdio_from\", since = \"1.20.0\")]\n impl From<ChildStdin> for Stdio {\n-    /// Converts a `ChildStdin` into a `Stdio`\n+    /// Converts a [`ChildStdin`] into a [`Stdio`].\n     ///\n     /// # Examples\n     ///\n@@ -1318,7 +1318,7 @@ impl From<ChildStdin> for Stdio {\n \n #[stable(feature = \"stdio_from\", since = \"1.20.0\")]\n impl From<ChildStdout> for Stdio {\n-    /// Converts a `ChildStdout` into a `Stdio`\n+    /// Converts a [`ChildStdout`] into a [`Stdio`].\n     ///\n     /// # Examples\n     ///\n@@ -1347,7 +1347,7 @@ impl From<ChildStdout> for Stdio {\n \n #[stable(feature = \"stdio_from\", since = \"1.20.0\")]\n impl From<ChildStderr> for Stdio {\n-    /// Converts a `ChildStderr` into a `Stdio`\n+    /// Converts a [`ChildStderr`] into a [`Stdio`].\n     ///\n     /// # Examples\n     ///\n@@ -1378,7 +1378,7 @@ impl From<ChildStderr> for Stdio {\n \n #[stable(feature = \"stdio_from\", since = \"1.20.0\")]\n impl From<fs::File> for Stdio {\n-    /// Converts a `File` into a `Stdio`\n+    /// Converts a [`File`](fs::File) into a [`Stdio`].\n     ///\n     /// # Examples\n     ///"}]}