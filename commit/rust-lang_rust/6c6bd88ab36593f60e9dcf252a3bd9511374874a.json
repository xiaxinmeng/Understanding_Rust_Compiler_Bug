{"sha": "6c6bd88ab36593f60e9dcf252a3bd9511374874a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNmJkODhhYjM2NTkzZjYwZTlkY2YyNTJhM2JkOTUxMTM3NDg3NGE=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-22T23:16:41Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-22T23:16:41Z"}, "message": "Remove `keywords` from ExternCrate", "tree": {"sha": "910be6bf0ea23f4a48a8040ce777ea3b56bc473e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/910be6bf0ea23f4a48a8040ce777ea3b56bc473e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c6bd88ab36593f60e9dcf252a3bd9511374874a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c6bd88ab36593f60e9dcf252a3bd9511374874a", "html_url": "https://github.com/rust-lang/rust/commit/6c6bd88ab36593f60e9dcf252a3bd9511374874a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c6bd88ab36593f60e9dcf252a3bd9511374874a/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1d173967367c4ebc8a824b64a2ba965b89aac47", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1d173967367c4ebc8a824b64a2ba965b89aac47", "html_url": "https://github.com/rust-lang/rust/commit/d1d173967367c4ebc8a824b64a2ba965b89aac47"}], "stats": {"total": 109, "additions": 57, "deletions": 52}, "files": [{"sha": "72046645e3a97a894178e3550c1b8a8963eedca2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 44, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/6c6bd88ab36593f60e9dcf252a3bd9511374874a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6bd88ab36593f60e9dcf252a3bd9511374874a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6c6bd88ab36593f60e9dcf252a3bd9511374874a", "patch": "@@ -84,51 +84,8 @@ impl<T: Clean<U>, U> Clean<Option<U>> for Option<T> {\n \n impl Clean<ExternalCrate> for CrateNum {\n     fn clean(&self, cx: &mut DocContext<'_>) -> ExternalCrate {\n-        let tcx = cx.tcx;\n         let root = DefId { krate: *self, index: CRATE_DEF_INDEX };\n-\n-        let as_keyword = |res: Res| {\n-            if let Res::Def(DefKind::Mod, def_id) = res {\n-                let attrs = tcx.get_attrs(def_id);\n-                let mut keyword = None;\n-                for attr in attrs.lists(sym::doc) {\n-                    if attr.has_name(sym::keyword) {\n-                        if let Some(v) = attr.value_str() {\n-                            keyword = Some(v);\n-                            break;\n-                        }\n-                    }\n-                }\n-                return keyword.map(|p| (def_id, p));\n-            }\n-            None\n-        };\n-        let keywords = if root.is_local() {\n-            tcx.hir()\n-                .krate()\n-                .item\n-                .item_ids\n-                .iter()\n-                .filter_map(|&id| {\n-                    let item = tcx.hir().item(id);\n-                    match item.kind {\n-                        hir::ItemKind::Mod(_) => {\n-                            as_keyword(Res::Def(DefKind::Mod, id.def_id.to_def_id()))\n-                        }\n-                        hir::ItemKind::Use(ref path, hir::UseKind::Single)\n-                            if item.vis.node.is_pub() =>\n-                        {\n-                            as_keyword(path.res).map(|(_, prim)| (id.def_id.to_def_id(), prim))\n-                        }\n-                        _ => None,\n-                    }\n-                })\n-                .collect()\n-        } else {\n-            tcx.item_children(root).iter().map(|item| item.res).filter_map(as_keyword).collect()\n-        };\n-\n-        ExternalCrate { crate_num: *self, attrs: tcx.get_attrs(root).clean(cx), keywords }\n+        ExternalCrate { crate_num: *self, attrs: cx.tcx.get_attrs(root).clean(cx) }\n     }\n }\n "}, {"sha": "9f686d19e3c91692d55d63720071c42ffbc8a12a", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 52, "deletions": 4, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/6c6bd88ab36593f60e9dcf252a3bd9511374874a/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6bd88ab36593f60e9dcf252a3bd9511374874a/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=6c6bd88ab36593f60e9dcf252a3bd9511374874a", "patch": "@@ -74,22 +74,70 @@ crate struct TraitWithExtraInfo {\n crate struct ExternalCrate {\n     crate crate_num: CrateNum,\n     crate attrs: Attributes,\n-    crate keywords: ThinVec<(DefId, Symbol)>,\n }\n \n impl ExternalCrate {\n+    #[inline]\n+    fn def_id(&self) -> DefId {\n+        DefId { krate: self.crate_num, index: CRATE_DEF_INDEX }\n+    }\n+\n     crate fn src(&self, tcx: TyCtxt<'_>) -> FileName {\n-        let root = DefId { krate: self.crate_num, index: rustc_hir::def_id::CRATE_DEF_INDEX };\n-        let krate_span = tcx.def_span(root);\n+        let krate_span = tcx.def_span(self.def_id());\n         tcx.sess.source_map().span_to_filename(krate_span)\n     }\n \n     crate fn name(&self, tcx: TyCtxt<'_>) -> Symbol {\n         tcx.crate_name(self.crate_num)\n     }\n \n+    crate fn keywords(&self, tcx: TyCtxt<'_>) -> ThinVec<(DefId, Symbol)> {\n+        let root = self.def_id();\n+\n+        let as_keyword = |res: Res| {\n+            if let Res::Def(DefKind::Mod, def_id) = res {\n+                let attrs = tcx.get_attrs(def_id);\n+                let mut keyword = None;\n+                for attr in attrs.lists(sym::doc) {\n+                    if attr.has_name(sym::keyword) {\n+                        if let Some(v) = attr.value_str() {\n+                            keyword = Some(v);\n+                            break;\n+                        }\n+                    }\n+                }\n+                return keyword.map(|p| (def_id, p));\n+            }\n+            None\n+        };\n+        if root.is_local() {\n+            tcx.hir()\n+                .krate()\n+                .item\n+                .item_ids\n+                .iter()\n+                .filter_map(|&id| {\n+                    let item = tcx.hir().item(id);\n+                    match item.kind {\n+                        hir::ItemKind::Mod(_) => {\n+                            as_keyword(Res::Def(DefKind::Mod, id.def_id.to_def_id()))\n+                        }\n+                        hir::ItemKind::Use(ref path, hir::UseKind::Single)\n+                            if item.vis.node.is_pub() =>\n+                        {\n+                            as_keyword(path.res).map(|(_, prim)| (id.def_id.to_def_id(), prim))\n+                        }\n+                        _ => None,\n+                    }\n+                })\n+                .collect()\n+        } else {\n+            tcx.item_children(root).iter().map(|item| item.res).filter_map(as_keyword).collect()\n+        }\n+    }\n+\n     crate fn primitives(&self, tcx: TyCtxt<'_>) -> ThinVec<(DefId, PrimitiveType)> {\n-        let root = DefId { krate: self.crate_num, index: CRATE_DEF_INDEX };\n+        let root = self.def_id();\n \n         // Collect all inner modules which are tagged as implementations of\n         // primitives."}, {"sha": "55a0cb42a2081e3c9dd28f424eac4515c2c1ba91", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c6bd88ab36593f60e9dcf252a3bd9511374874a/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c6bd88ab36593f60e9dcf252a3bd9511374874a/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=6c6bd88ab36593f60e9dcf252a3bd9511374874a", "patch": "@@ -1,9 +1,9 @@\n use crate::clean::auto_trait::AutoTraitFinder;\n use crate::clean::blanket_impl::BlanketImplFinder;\n use crate::clean::{\n-    inline, Clean, Crate, ExternalCrate, Generic, GenericArg, GenericArgs, ImportSource, Item,\n-    ItemKind, Lifetime, MacroKind, Path, PathSegment, Primitive, PrimitiveType, ResolvedPath, Type,\n-    TypeBinding, TypeKind,\n+    inline, Clean, Crate, Generic, GenericArg, GenericArgs, ImportSource, Item, ItemKind, Lifetime,\n+    MacroKind, Path, PathSegment, Primitive, PrimitiveType, ResolvedPath, Type, TypeBinding,\n+    TypeKind,\n };\n use crate::core::DocContext;\n \n@@ -58,7 +58,7 @@ crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n     let src = local_crate.src(cx.tcx);\n     let name = local_crate.name(cx.tcx);\n     let primitives = local_crate.primitives(cx.tcx);\n-    let ExternalCrate { keywords, .. } = local_crate;\n+    let keywords = local_crate.keywords(cx.tcx);\n     {\n         let m = match *module.kind {\n             ItemKind::ModuleItem(ref mut m) => m,"}]}