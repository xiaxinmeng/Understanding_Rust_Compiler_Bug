{"sha": "7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMDA4NWE2MTNlNjljYjY5ZmM5ZTRlYjVkNDIyZmE0YTM5ZDVkZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-21T11:40:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-21T11:40:23Z"}, "message": "Auto merge of #63779 - Centril:rollup-sx96dli, r=Centril\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #63721 (Do not emit JSON dumps of diagnostic codes)\n - #63753 (Bump toml dependency.)\n - #63755 (Use dedicated type for spans in pre-expansion gating.)\n - #63759 (Allow 'default async fn' to parse.)\n - #63760 (Update books)\n - #63762 (`async_await` was stabilized in 1.39.0, not 1.38.0.)\n - #63766 (Remove some duplication when resolving constants)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "72512acc5978c56d76351fa7af4f9ff9103db06a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72512acc5978c56d76351fa7af4f9ff9103db06a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "html_url": "https://github.com/rust-lang/rust/commit/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "url": "https://api.github.com/repos/rust-lang/rust/commits/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "html_url": "https://github.com/rust-lang/rust/commit/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008"}, {"sha": "b25ec0438430f32b6278c9fa2ba0cfb697eb70b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b25ec0438430f32b6278c9fa2ba0cfb697eb70b5", "html_url": "https://github.com/rust-lang/rust/commit/b25ec0438430f32b6278c9fa2ba0cfb697eb70b5"}], "stats": {"total": 416, "additions": 177, "deletions": 239}, "files": [{"sha": "06c455b3c910d40fcecd06a0ce2fd8bc4a1f9259", "filename": "Cargo.lock", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "patch": "@@ -185,7 +185,7 @@ dependencies = [\n  \"serde\",\n  \"serde_json\",\n  \"time\",\n- \"toml 0.4.10\",\n+ \"toml\",\n ]\n \n [[package]]\n@@ -202,7 +202,7 @@ name = \"build-manifest\"\n version = \"0.1.0\"\n dependencies = [\n  \"serde\",\n- \"toml 0.4.10\",\n+ \"toml\",\n ]\n \n [[package]]\n@@ -316,7 +316,7 @@ dependencies = [\n  \"tar\",\n  \"tempfile\",\n  \"termcolor\",\n- \"toml 0.5.3\",\n+ \"toml\",\n  \"unicode-width\",\n  \"url 2.1.0\",\n  \"walkdir\",\n@@ -442,7 +442,7 @@ dependencies = [\n  \"semver\",\n  \"serde\",\n  \"smallvec\",\n- \"toml 0.5.3\",\n+ \"toml\",\n  \"unicode-normalization\",\n  \"url 2.1.0\",\n ]\n@@ -946,6 +946,7 @@ name = \"error_index_generator\"\n version = \"0.0.0\"\n dependencies = [\n  \"rustdoc\",\n+ \"walkdir\",\n ]\n \n [[package]]\n@@ -1785,7 +1786,7 @@ dependencies = [\n  \"serde_json\",\n  \"shlex\",\n  \"tempfile\",\n- \"toml 0.5.3\",\n+ \"toml\",\n  \"toml-query\",\n ]\n \n@@ -2760,7 +2761,7 @@ dependencies = [\n  \"tokio\",\n  \"tokio-process\",\n  \"tokio-timer\",\n- \"toml 0.5.3\",\n+ \"toml\",\n  \"url 1.7.2\",\n  \"walkdir\",\n ]\n@@ -3590,7 +3591,7 @@ dependencies = [\n  \"serde_json\",\n  \"structopt\",\n  \"term 0.6.0\",\n- \"toml 0.5.3\",\n+ \"toml\",\n  \"unicode-segmentation\",\n  \"unicode-width\",\n  \"unicode_categories\",\n@@ -4382,15 +4383,6 @@ dependencies = [\n  \"tokio-reactor\",\n ]\n \n-[[package]]\n-name = \"toml\"\n-version = \"0.4.10\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"758664fc71a3a69038656bee8b6be6477d2a6c315a6b81f7081f591bffa4111f\"\n-dependencies = [\n- \"serde\",\n-]\n-\n [[package]]\n name = \"toml\"\n version = \"0.5.3\"\n@@ -4411,7 +4403,7 @@ dependencies = [\n  \"is-match\",\n  \"lazy_static 1.3.0\",\n  \"regex\",\n- \"toml 0.5.3\",\n+ \"toml\",\n  \"toml-query_derive\",\n ]\n "}, {"sha": "c27c318f5ad07201703bd2a424fc5caed3ac80f3", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "patch": "@@ -44,7 +44,7 @@ cc = \"1.0.35\"\n libc = \"0.2\"\n serde = { version = \"1.0.8\", features = [\"derive\"] }\n serde_json = \"1.0.2\"\n-toml = \"0.4\"\n+toml = \"0.5\"\n lazy_static = \"1.3.0\"\n time = \"0.1\"\n petgraph = \"0.4.13\""}, {"sha": "4f96c12fc1dddb3b2bf856bc503412a2fca26c6e", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "patch": "@@ -825,8 +825,7 @@ impl Step for ErrorIndex {\n         index.arg(crate::channel::CFG_RELEASE_NUM);\n \n         // FIXME: shouldn't have to pass this env var\n-        index.env(\"CFG_BUILD\", &builder.config.build)\n-             .env(\"RUSTC_ERROR_METADATA_DST\", builder.extended_error_dir());\n+        index.env(\"CFG_BUILD\", &builder.config.build);\n \n         builder.run(&mut index);\n     }"}, {"sha": "87bd5cbacfffaccaf59c342fae379a2b91a58b55", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "patch": "@@ -1535,8 +1535,7 @@ impl Step for ErrorIndex {\n         );\n         tool.arg(\"markdown\")\n             .arg(&output)\n-            .env(\"CFG_BUILD\", &builder.config.build)\n-            .env(\"RUSTC_ERROR_METADATA_DST\", builder.extended_error_dir());\n+            .env(\"CFG_BUILD\", &builder.config.build);\n \n         builder.info(&format!(\"Testing error-index stage{}\", compiler.stage));\n         let _time = util::timeit(&builder);"}, {"sha": "432ca26686c11d396eed6a59499f93ce1bf2433c", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "patch": "@@ -1 +1 @@\n-Subproject commit c5da1e11915d3f28266168baaf55822f7e3fe999\n+Subproject commit 432ca26686c11d396eed6a59499f93ce1bf2433c"}, {"sha": "38b9a76bc8b59ac862663807fc51c9b757337fd6", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "patch": "@@ -1 +1 @@\n-Subproject commit 8a7d05615e5bc0a7fb961b4919c44f5221ee54da\n+Subproject commit 38b9a76bc8b59ac862663807fc51c9b757337fd6"}, {"sha": "d191a0cdd3b92648e0f1e53b13140a14677cc65b", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "patch": "@@ -1 +1 @@\n-Subproject commit b4b3536839042a6743fc76f0d9ad2a812020aeaa\n+Subproject commit d191a0cdd3b92648e0f1e53b13140a14677cc65b"}, {"sha": "580839d90aacd537f0293697096fa8355bc4e673", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "patch": "@@ -1 +1 @@\n-Subproject commit f2c15ba5ee89ae9469a2cf60494977749901d764\n+Subproject commit 580839d90aacd537f0293697096fa8355bc4e673"}, {"sha": "565447dd7e1afd7fc0fc63aff0b9e401383b70b3", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "patch": "@@ -8,7 +8,7 @@ use crate::hir::def_id::DefId;\n use crate::ty::subst::{Kind, UnpackedKind, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n use crate::ty::error::{ExpectedFound, TypeError};\n-use crate::mir::interpret::{ConstValue, Scalar, GlobalId};\n+use crate::mir::interpret::{ConstValue, Scalar};\n use std::rc::Rc;\n use std::iter;\n use rustc_target::spec::abi;\n@@ -551,26 +551,8 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n     let tcx = relation.tcx();\n \n     let eagerly_eval = |x: &'tcx ty::Const<'tcx>| {\n-        if let ConstValue::Unevaluated(def_id, substs) = x.val {\n-            // FIXME(eddyb) get the right param_env.\n-            let param_env = ty::ParamEnv::empty();\n-            if !substs.has_local_value() {\n-                let instance = ty::Instance::resolve(\n-                    tcx.global_tcx(),\n-                    param_env,\n-                    def_id,\n-                    substs,\n-                );\n-                if let Some(instance) = instance {\n-                    let cid = GlobalId {\n-                        instance,\n-                        promoted: None,\n-                    };\n-                    if let Ok(ct) = tcx.const_eval(param_env.and(cid)) {\n-                        return ct.val;\n-                    }\n-                }\n-            }\n+        if !x.val.has_local_value() {\n+            return x.eval(tcx, relation.param_env()).val;\n         }\n         x.val\n     };"}, {"sha": "da66fdf5b1b1b724f9aba3042eeb37d224648b00", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "patch": "@@ -2299,23 +2299,33 @@ impl<'tcx> Const<'tcx> {\n         assert_eq!(self.ty, ty);\n         // if `ty` does not depend on generic parameters, use an empty param_env\n         let size = tcx.layout_of(param_env.with_reveal_all().and(ty)).ok()?.size;\n+        self.eval(tcx, param_env).val.try_to_bits(size)\n+    }\n+\n+    #[inline]\n+    pub fn eval(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        param_env: ParamEnv<'tcx>,\n+    ) -> &Const<'tcx> {\n+        // FIXME(const_generics): this doesn't work right now,\n+        // because it tries to relate an `Infer` to a `Param`.\n         match self.val {\n-            // FIXME(const_generics): this doesn't work right now,\n-            // because it tries to relate an `Infer` to a `Param`.\n             ConstValue::Unevaluated(did, substs) => {\n                 // if `substs` has no unresolved components, use and empty param_env\n                 let (param_env, substs) = param_env.with_reveal_all().and(substs).into_parts();\n                 // try to resolve e.g. associated constants to their definition on an impl\n-                let instance = ty::Instance::resolve(tcx, param_env, did, substs)?;\n+                let instance = match ty::Instance::resolve(tcx, param_env, did, substs) {\n+                    Some(instance) => instance,\n+                    None => return self,\n+                };\n                 let gid = GlobalId {\n                     instance,\n                     promoted: None,\n                 };\n-                let evaluated = tcx.const_eval(param_env.and(gid)).ok()?;\n-                evaluated.val.try_to_bits(size)\n+                tcx.const_eval(param_env.and(gid)).unwrap_or(self)\n             },\n-            // otherwise just extract a `ConstValue`'s bits if possible\n-            _ => self.val.try_to_bits(size),\n+            _ => self,\n         }\n     }\n "}, {"sha": "53f37bb10bdc0ecfb61bb228826c27c66fea896d", "filename": "src/libsyntax/diagnostics/metadata.rs", "status": "removed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Flibsyntax%2Fdiagnostics%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Flibsyntax%2Fdiagnostics%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fmetadata.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,93 +0,0 @@\n-//! This module contains utilities for outputting metadata for diagnostic errors.\n-//!\n-//! Each set of errors is mapped to a metadata file by a name, which is\n-//! currently always a crate name.\n-\n-use std::collections::BTreeMap;\n-use std::env;\n-use std::fs::{remove_file, create_dir_all, File};\n-use std::io::Write;\n-use std::path::PathBuf;\n-use std::error::Error;\n-use rustc_serialize::json::as_json;\n-\n-use syntax_pos::{Span, FileName};\n-\n-use crate::ext::base::ExtCtxt;\n-use crate::diagnostics::plugin::{ErrorMap, ErrorInfo};\n-\n-/// JSON encodable/decodable version of `ErrorInfo`.\n-#[derive(PartialEq, RustcDecodable, RustcEncodable)]\n-pub struct ErrorMetadata {\n-    pub description: Option<String>,\n-    pub use_site: Option<ErrorLocation>\n-}\n-\n-/// Mapping from error codes to metadata that can be (de)serialized.\n-pub type ErrorMetadataMap = BTreeMap<String, ErrorMetadata>;\n-\n-/// JSON encodable error location type with filename and line number.\n-#[derive(PartialEq, RustcDecodable, RustcEncodable)]\n-pub struct ErrorLocation {\n-    pub filename: FileName,\n-    pub line: usize\n-}\n-\n-impl ErrorLocation {\n-    /// Creates an error location from a span.\n-    pub fn from_span(ecx: &ExtCtxt<'_>, sp: Span) -> ErrorLocation {\n-        let loc = ecx.source_map().lookup_char_pos(sp.lo());\n-        ErrorLocation {\n-            filename: loc.file.name.clone(),\n-            line: loc.line\n-        }\n-    }\n-}\n-\n-/// Gets the directory where metadata for a given `prefix` should be stored.\n-///\n-/// See `output_metadata`.\n-pub fn get_metadata_dir(prefix: &str) -> PathBuf {\n-    env::var_os(\"RUSTC_ERROR_METADATA_DST\")\n-        .map(PathBuf::from)\n-        .expect(\"env var `RUSTC_ERROR_METADATA_DST` isn't set\")\n-        .join(prefix)\n-}\n-\n-/// Map `name` to a path in the given directory: <directory>/<name>.json\n-fn get_metadata_path(directory: PathBuf, name: &str) -> PathBuf {\n-    directory.join(format!(\"{}.json\", name))\n-}\n-\n-/// Write metadata for the errors in `err_map` to disk, to a file corresponding to `prefix/name`.\n-///\n-/// For our current purposes the prefix is the target architecture and the name is a crate name.\n-/// If an error occurs steps will be taken to ensure that no file is created.\n-pub fn output_metadata(ecx: &ExtCtxt<'_>, prefix: &str, name: &str, err_map: &ErrorMap)\n-    -> Result<(), Box<dyn Error>>\n-{\n-    // Create the directory to place the file in.\n-    let metadata_dir = get_metadata_dir(prefix);\n-    create_dir_all(&metadata_dir)?;\n-\n-    // Open the metadata file.\n-    let metadata_path = get_metadata_path(metadata_dir, name);\n-    let mut metadata_file = File::create(&metadata_path)?;\n-\n-    // Construct a serializable map.\n-    let json_map = err_map.iter().map(|(k, &ErrorInfo { description, use_site })| {\n-        let key = k.as_str().to_string();\n-        let value = ErrorMetadata {\n-            description: description.map(|n| n.as_str().to_string()),\n-            use_site: use_site.map(|sp| ErrorLocation::from_span(ecx, sp))\n-        };\n-        (key, value)\n-    }).collect::<ErrorMetadataMap>();\n-\n-    // Write the data to the file, deleting it if the write fails.\n-    let result = write!(&mut metadata_file, \"{}\", as_json(&json_map));\n-    if result.is_err() {\n-        remove_file(&metadata_path)?;\n-    }\n-    Ok(result?)\n-}"}, {"sha": "e9a55af52e8780001625dbd79a97fd9632edbe62", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 4, "deletions": 30, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "patch": "@@ -1,5 +1,4 @@\n use std::collections::BTreeMap;\n-use std::env;\n \n use crate::ast::{self, Ident, Name};\n use crate::source_map;\n@@ -12,8 +11,6 @@ use crate::tokenstream::{TokenTree};\n use smallvec::smallvec;\n use syntax_pos::Span;\n \n-use crate::diagnostics::metadata::output_metadata;\n-\n pub use errors::*;\n \n // Maximum width of any line in an extended error description (inclusive).\n@@ -127,36 +124,13 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n                                           token_tree: &[TokenTree])\n                                           -> Box<dyn MacResult+'cx> {\n     assert_eq!(token_tree.len(), 3);\n-    let (crate_name, ident) = match (&token_tree[0], &token_tree[2]) {\n-        (\n-            // Crate name.\n-            &TokenTree::Token(Token { kind: token::Ident(crate_name, _), .. }),\n-            // DIAGNOSTICS ident.\n-            &TokenTree::Token(Token { kind: token::Ident(name, _), span })\n-        ) => (crate_name, Ident::new(name, span)),\n+    let ident = match &token_tree[2] {\n+        // DIAGNOSTICS ident.\n+        &TokenTree::Token(Token { kind: token::Ident(name, _), span })\n+        => Ident::new(name, span),\n         _ => unreachable!()\n     };\n \n-    // Output error metadata to `tmp/extended-errors/<target arch>/<crate name>.json`\n-    if let Ok(target_triple) = env::var(\"CFG_COMPILER_HOST_TRIPLE\") {\n-        ecx.parse_sess.registered_diagnostics.with_lock(|diagnostics| {\n-            if let Err(e) = output_metadata(ecx,\n-                                            &target_triple,\n-                                            &crate_name.as_str(),\n-                                            diagnostics) {\n-                ecx.span_bug(span, &format!(\n-                    \"error writing metadata for triple `{}` and crate `{}`, error: {}, \\\n-                     cause: {:?}\",\n-                    target_triple, crate_name, e.description(), e.source()\n-                ));\n-            }\n-        });\n-    } else {\n-        ecx.span_err(span, &format!(\n-            \"failed to write metadata for crate `{}` because $CFG_COMPILER_HOST_TRIPLE is not set\",\n-            crate_name));\n-    }\n-\n     // Construct the output expression.\n     let (count, expr) =\n         ecx.parse_sess.registered_diagnostics.with_lock(|diagnostics| {"}, {"sha": "fad4f3da3de70b2d668a132b750149243a7dbca1", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "patch": "@@ -855,7 +855,7 @@ declare_features! (\n     // Allows `const _: TYPE = VALUE`.\n     (accepted, underscore_const_names, \"1.37.0\", Some(54912), None),\n     // Allows free and inherent `async fn`s, `async` blocks, and `<expr>.await` expressions.\n-    (accepted, async_await, \"1.38.0\", Some(50547), None),\n+    (accepted, async_await, \"1.39.0\", Some(50547), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features\n@@ -2423,16 +2423,19 @@ pub fn check_crate(krate: &ast::Crate,\n     };\n \n     macro_rules! gate_all {\n+        ($gate:ident, $msg:literal) => { gate_all!($gate, $gate, $msg); };\n         ($spans:ident, $gate:ident, $msg:literal) => {\n-            for span in &*sess.$spans.borrow() { gate_feature!(&ctx, $gate, *span, $msg); }\n+            for span in &*sess.gated_spans.$spans.borrow() {\n+                gate_feature!(&ctx, $gate, *span, $msg);\n+            }\n         }\n     }\n \n-    gate_all!(param_attr_spans, param_attrs, \"attributes on function parameters are unstable\");\n-    gate_all!(let_chains_spans, let_chains, \"`let` expressions in this position are experimental\");\n-    gate_all!(async_closure_spans, async_closure, \"async closures are unstable\");\n-    gate_all!(yield_spans, generators, \"yield syntax is experimental\");\n-    gate_all!(or_pattern_spans, or_patterns, \"or-patterns syntax is experimental\");\n+    gate_all!(param_attrs, \"attributes on function parameters are unstable\");\n+    gate_all!(let_chains, \"`let` expressions in this position are experimental\");\n+    gate_all!(async_closure, \"async closures are unstable\");\n+    gate_all!(yields, generators, \"yield syntax is experimental\");\n+    gate_all!(or_patterns, \"or-patterns syntax is experimental\");\n \n     let visitor = &mut PostExpansionVisitor {\n         context: &ctx,"}, {"sha": "1741932c1b80e30f86abfe47d345b37678f24068", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "patch": "@@ -124,7 +124,6 @@ pub mod diagnostics {\n     #[macro_use]\n     pub mod macros;\n     pub mod plugin;\n-    pub mod metadata;\n }\n \n // N.B., this module needs to be declared first so diagnostics are"}, {"sha": "c703058e7952de818f5dbb79ad4b45eeaaf1bc26", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "patch": "@@ -21,9 +21,8 @@ const DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG: &str = \"an inner attribute is not \\\n impl<'a> Parser<'a> {\n     crate fn parse_arg_attributes(&mut self) -> PResult<'a, Vec<ast::Attribute>> {\n         let attrs = self.parse_outer_attributes()?;\n-        attrs.iter().for_each(|a|\n-            self.sess.param_attr_spans.borrow_mut().push(a.span)\n-        );\n+        self.sess.gated_spans.param_attrs.borrow_mut()\n+            .extend(attrs.iter().map(|a| a.span));\n         Ok(attrs)\n     }\n "}, {"sha": "b1af4806e2d787dde3b9f17b200550fc42931834", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "patch": "@@ -39,6 +39,22 @@ crate mod unescape_error_reporting;\n \n pub type PResult<'a, T> = Result<T, DiagnosticBuilder<'a>>;\n \n+/// Collected spans during parsing for places where a certain feature was\n+/// used and should be feature gated accordingly in `check_crate`.\n+#[derive(Default)]\n+pub struct GatedSpans {\n+    /// Spans collected for gating `param_attrs`, e.g. `fn foo(#[attr] x: u8) {}`.\n+    pub param_attrs: Lock<Vec<Span>>,\n+    /// Spans collected for gating `let_chains`, e.g. `if a && let b = c {}`.\n+    pub let_chains: Lock<Vec<Span>>,\n+    /// Spans collected for gating `async_closure`, e.g. `async || ..`.\n+    pub async_closure: Lock<Vec<Span>>,\n+    /// Spans collected for gating `yield e?` expressions (`generators` gate).\n+    pub yields: Lock<Vec<Span>>,\n+    /// Spans collected for gating `or_patterns`, e.g. `Some(Foo | Bar)`.\n+    pub or_patterns: Lock<Vec<Span>>,\n+}\n+\n /// Info about a parsing session.\n pub struct ParseSess {\n     pub span_diagnostic: Handler,\n@@ -58,16 +74,8 @@ pub struct ParseSess {\n     /// operation token that followed it, but that the parser cannot identify without further\n     /// analysis.\n     pub ambiguous_block_expr_parse: Lock<FxHashMap<Span, Span>>,\n-    pub param_attr_spans: Lock<Vec<Span>>,\n-    // Places where `let` exprs were used and should be feature gated according to `let_chains`.\n-    pub let_chains_spans: Lock<Vec<Span>>,\n-    // Places where `async || ..` exprs were used and should be feature gated.\n-    pub async_closure_spans: Lock<Vec<Span>>,\n-    // Places where `yield e?` exprs were used and should be feature gated.\n-    pub yield_spans: Lock<Vec<Span>>,\n     pub injected_crate_name: Once<Symbol>,\n-    // Places where or-patterns e.g. `Some(Foo | Bar)` were used and should be feature gated.\n-    pub or_pattern_spans: Lock<Vec<Span>>,\n+    pub gated_spans: GatedSpans,\n }\n \n impl ParseSess {\n@@ -93,12 +101,8 @@ impl ParseSess {\n             buffered_lints: Lock::new(vec![]),\n             edition: ExpnId::root().expn_data().edition,\n             ambiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n-            param_attr_spans: Lock::new(Vec::new()),\n-            let_chains_spans: Lock::new(Vec::new()),\n-            async_closure_spans: Lock::new(Vec::new()),\n-            yield_spans: Lock::new(Vec::new()),\n             injected_crate_name: Once::new(),\n-            or_pattern_spans: Lock::new(Vec::new()),\n+            gated_spans: GatedSpans::default(),\n         }\n     }\n "}, {"sha": "5da9b75d53b045cfb2b8deb6bc1ee6ab56322197", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "patch": "@@ -999,7 +999,7 @@ impl<'a> Parser<'a> {\n                     }\n \n                     let span = lo.to(hi);\n-                    self.sess.yield_spans.borrow_mut().push(span);\n+                    self.sess.gated_spans.yields.borrow_mut().push(span);\n                 } else if self.eat_keyword(kw::Let) {\n                     return self.parse_let_expr(attrs);\n                 } else if is_span_rust_2018 && self.eat_keyword(kw::Await) {\n@@ -1111,7 +1111,7 @@ impl<'a> Parser<'a> {\n         };\n         if asyncness.is_async() {\n             // Feature gate `async ||` closures.\n-            self.sess.async_closure_spans.borrow_mut().push(self.prev_span);\n+            self.sess.gated_spans.async_closure.borrow_mut().push(self.prev_span);\n         }\n \n         let capture_clause = self.parse_capture_clause();\n@@ -1234,7 +1234,7 @@ impl<'a> Parser<'a> {\n \n         if let ExprKind::Let(..) = cond.node {\n             // Remove the last feature gating of a `let` expression since it's stable.\n-            let last = self.sess.let_chains_spans.borrow_mut().pop();\n+            let last = self.sess.gated_spans.let_chains.borrow_mut().pop();\n             debug_assert_eq!(cond.span, last.unwrap());\n         }\n \n@@ -1252,7 +1252,7 @@ impl<'a> Parser<'a> {\n             |this| this.parse_assoc_expr_with(1 + prec_let_scrutinee_needs_par(), None.into())\n         )?;\n         let span = lo.to(expr.span);\n-        self.sess.let_chains_spans.borrow_mut().push(span);\n+        self.sess.gated_spans.let_chains.borrow_mut().push(span);\n         Ok(self.mk_expr(span, ExprKind::Let(pats, expr), attrs))\n     }\n "}, {"sha": "03d7e9221238245ab61014040fb4330bdb5f4643", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "patch": "@@ -825,6 +825,7 @@ impl<'a> Parser<'a> {\n             self.is_keyword_ahead(1, &[\n                 kw::Impl,\n                 kw::Const,\n+                kw::Async,\n                 kw::Fn,\n                 kw::Unsafe,\n                 kw::Extern,"}, {"sha": "8cfa6abbe6270e7181a337791940c90f98e5bfe1", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "patch": "@@ -123,7 +123,7 @@ impl<'a> Parser<'a> {\n \n         let or_pattern_span = lo.to(self.prev_span);\n \n-        self.sess.or_pattern_spans.borrow_mut().push(or_pattern_span);\n+        self.sess.gated_spans.or_patterns.borrow_mut().push(or_pattern_span);\n \n         Ok(self.mk_pat(or_pattern_span, PatKind::Or(pats)))\n     }"}, {"sha": "c3764ffaab83fd1f74867914e25fb7411d013be6", "filename": "src/test/ui/specialization/issue-63716-parse-async.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Ftest%2Fui%2Fspecialization%2Fissue-63716-parse-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Ftest%2Fui%2Fspecialization%2Fissue-63716-parse-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-63716-parse-async.rs?ref=7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "patch": "@@ -0,0 +1,14 @@\n+// Ensure that `default async fn` will parse.\n+// See issue #63716 for details.\n+\n+// check-pass\n+// edition:2018\n+\n+#![feature(specialization)]\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+impl Foo for Bar {\n+    default async fn baz() {}\n+}"}, {"sha": "c364479d8db13251be3caf4bc2a249b8c84df98d", "filename": "src/tools/build-manifest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2FCargo.toml?ref=7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "patch": "@@ -5,5 +5,5 @@ authors = [\"Alex Crichton <alex@alexcrichton.com>\"]\n edition = \"2018\"\n \n [dependencies]\n-toml = \"0.4\"\n+toml = \"0.5\"\n serde = { version = \"1.0\", features = [\"derive\"] }"}, {"sha": "992af261b8352f1495f91e8f3d3d01515df40440", "filename": "src/tools/error_index_generator/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Ftools%2Ferror_index_generator%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Ftools%2Ferror_index_generator%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2FCargo.toml?ref=7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "patch": "@@ -3,10 +3,14 @@ authors = [\"The Rust Project Developers\"]\n name = \"error_index_generator\"\n version = \"0.0.0\"\n edition = \"2018\"\n+build = \"build.rs\"\n \n [dependencies]\n rustdoc = { path = \"../../librustdoc\" }\n \n+[build-dependencies]\n+walkdir = \"2\"\n+\n [[bin]]\n name = \"error_index_generator\"\n path = \"main.rs\""}, {"sha": "2ac7351fce469a0d599aa5ff1b357fe1cdf0a995", "filename": "src/tools/error_index_generator/build.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Ftools%2Ferror_index_generator%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Ftools%2Ferror_index_generator%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fbuild.rs?ref=7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "patch": "@@ -0,0 +1,64 @@\n+use walkdir::WalkDir;\n+use std::path::PathBuf;\n+use std::{env, fs};\n+\n+fn main() {\n+    // The src directory (we are in src/tools/error_index_generator)\n+    // Note that we could skip one of the .. but this ensures we at least loosely find the right\n+    // directory.\n+    let out_dir = PathBuf::from(env::var(\"OUT_DIR\").unwrap());\n+    let dest = out_dir.join(\"error_codes.rs\");\n+    let mut idx = 0;\n+    for entry in WalkDir::new(\"../../../src\") {\n+        let entry = entry.unwrap();\n+        if entry.file_name() == \"error_codes.rs\" {\n+            println!(\"cargo:rerun-if-changed={}\", entry.path().to_str().unwrap());\n+            let file = fs::read_to_string(entry.path()).unwrap()\n+                .replace(\"use syntax::{register_diagnostics, register_long_diagnostics};\", \"\")\n+                .replace(\"use syntax::register_diagnostics;\", \"\")\n+                .replace(\"use syntax::register_long_diagnostics;\", \"\");\n+            let contents = format!(\"(|| {{\\n{}\\n}})();\", file);\n+\n+            fs::write(&out_dir.join(&format!(\"error_{}.rs\", idx)), &contents).unwrap();\n+\n+            idx += 1;\n+        }\n+    }\n+\n+    let mut all = String::new();\n+    all.push_str(\"fn register_all() -> Vec<(&'static str, Option<&'static str>)> {\\n\");\n+    all.push_str(\"let mut long_codes: Vec<(&'static str, Option<&'static str>)> = Vec::new();\\n\");\n+    all.push_str(r#\"\n+macro_rules! register_diagnostics {\n+    ($($code:tt),*) => {{\n+        long_codes.extend([$(\n+            stringify!($code),\n+        )*].iter().cloned().map(|s| (s, None)).collect::<Vec<_>>());\n+    }};\n+    ($($code:tt),*,) => {{\n+        long_codes.extend([$(\n+            stringify!($code),\n+        )*].iter().cloned().map(|s| (s, None)));\n+    }}\n+}\n+\n+macro_rules! register_long_diagnostics {\n+    ($($code:tt: $description:tt),*) => {\n+        {long_codes.extend([$(\n+            (stringify!($code), Some(stringify!($description))),\n+        )*].iter());}\n+    };\n+    ($($code:tt: $description:tt),*,) => {\n+        {long_codes.extend([$(\n+            (stringify!($code), Some(stringify!($description))),\n+        )*].iter());}\n+    }\n+}\"#);\n+    for idx in 0..idx {\n+        all.push_str(&format!(r#\"include!(concat!(env!(\"OUT_DIR\"), \"/error_{}.rs\"));\"#, idx));\n+    }\n+    all.push_str(\"\\nlong_codes\\n\");\n+    all.push_str(\"}\\n\");\n+\n+    fs::write(&dest, all).unwrap();\n+}"}, {"sha": "c4826a0c31d6cb457500c33b9f4f7a9b28df36d4", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 18, "deletions": 31, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "patch": "@@ -2,22 +2,26 @@\n \n extern crate env_logger;\n extern crate syntax;\n-extern crate serialize as rustc_serialize;\n \n use std::collections::BTreeMap;\n use std::env;\n use std::error::Error;\n-use std::fs::{self, read_dir, File};\n+use std::fs::File;\n use std::io::Write;\n use std::path::Path;\n use std::path::PathBuf;\n use std::cell::RefCell;\n \n use syntax::edition::DEFAULT_EDITION;\n-use syntax::diagnostics::metadata::{get_metadata_dir, ErrorMetadataMap, ErrorMetadata};\n \n use rustdoc::html::markdown::{Markdown, IdMap, ErrorCodes, Playground};\n-use rustc_serialize::json;\n+\n+pub struct ErrorMetadata {\n+    pub description: Option<String>,\n+}\n+\n+/// Mapping from error codes to metadata that can be (de)serialized.\n+pub type ErrorMetadataMap = BTreeMap<String, ErrorMetadata>;\n \n enum OutputFormat {\n     HTML(HTMLFormatter),\n@@ -80,11 +84,7 @@ impl Formatter for HTMLFormatter {\n             Some(_) => \"error-described\",\n             None => \"error-undescribed\",\n         };\n-        let use_desc = match info.use_site {\n-            Some(_) => \"error-used\",\n-            None => \"error-unused\",\n-        };\n-        write!(output, \"<div class=\\\"{} {}\\\">\", desc_desc, use_desc)?;\n+        write!(output, \"<div class=\\\"{}\\\">\", desc_desc)?;\n \n         // Error title (with self-link).\n         write!(output,\n@@ -199,25 +199,6 @@ impl Formatter for MarkdownFormatter {\n     }\n }\n \n-/// Loads all the metadata files from `metadata_dir` into an in-memory map.\n-fn load_all_errors(metadata_dir: &Path) -> Result<ErrorMetadataMap, Box<dyn Error>> {\n-    let mut all_errors = BTreeMap::new();\n-\n-    for entry in read_dir(metadata_dir)? {\n-        let path = entry?.path();\n-\n-        let metadata_str = fs::read_to_string(&path)?;\n-\n-        let some_errors: ErrorMetadataMap = json::decode(&metadata_str)?;\n-\n-        for (err_code, info) in some_errors {\n-            all_errors.insert(err_code, info);\n-        }\n-    }\n-\n-    Ok(all_errors)\n-}\n-\n /// Output an HTML page for the errors in `err_map` to `output_path`.\n fn render_error_page<T: Formatter>(err_map: &ErrorMetadataMap, output_path: &Path,\n                                    formatter: T) -> Result<(), Box<dyn Error>> {\n@@ -234,9 +215,13 @@ fn render_error_page<T: Formatter>(err_map: &ErrorMetadataMap, output_path: &Pat\n }\n \n fn main_with_result(format: OutputFormat, dst: &Path) -> Result<(), Box<dyn Error>> {\n-    let build_arch = env::var(\"CFG_BUILD\")?;\n-    let metadata_dir = get_metadata_dir(&build_arch);\n-    let err_map = load_all_errors(&metadata_dir)?;\n+    let long_codes = register_all();\n+    let mut err_map = BTreeMap::new();\n+    for (code, desc) in long_codes {\n+        err_map.insert(code.to_string(), ErrorMetadata {\n+            description: desc.map(String::from),\n+        });\n+    }\n     match format {\n         OutputFormat::Unknown(s)  => panic!(\"Unknown output format: {}\", s),\n         OutputFormat::HTML(h)     => render_error_page(&err_map, dst, h)?,\n@@ -272,3 +257,5 @@ fn main() {\n         panic!(\"{}\", e.description());\n     }\n }\n+\n+include!(concat!(env!(\"OUT_DIR\"), \"/error_codes.rs\"));"}]}