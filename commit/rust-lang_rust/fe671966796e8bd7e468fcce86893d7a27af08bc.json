{"sha": "fe671966796e8bd7e468fcce86893d7a27af08bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNjcxOTY2Nzk2ZThiZDdlNDY4ZmNjZTg2ODkzZDdhMjdhZjA4YmM=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-03T17:10:33Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-02T16:00:12Z"}, "message": "Don't build the same matrix twice\n\nThe exact same logic was used in check_arms and check_match to build the\nmatrix of relevant patterns. It would actually probably have been a bug\nif it was not the case, since exhaustiveness checking should be the same\nas checking reachability of an additional `_ => ...` match branch.", "tree": {"sha": "4a4b5266793fda30418a749fbb906d5850360e49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a4b5266793fda30418a749fbb906d5850360e49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe671966796e8bd7e468fcce86893d7a27af08bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe671966796e8bd7e468fcce86893d7a27af08bc", "html_url": "https://github.com/rust-lang/rust/commit/fe671966796e8bd7e468fcce86893d7a27af08bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe671966796e8bd7e468fcce86893d7a27af08bc/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2da942f32802c8233a09744024dfbc34431adf65", "url": "https://api.github.com/repos/rust-lang/rust/commits/2da942f32802c8233a09744024dfbc34431adf65", "html_url": "https://github.com/rust-lang/rust/commit/2da942f32802c8233a09744024dfbc34431adf65"}], "stats": {"total": 15, "additions": 5, "deletions": 10}, "files": [{"sha": "4463fb43583aa6f895283bb739e98ab5672b8eae", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fe671966796e8bd7e468fcce86893d7a27af08bc/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe671966796e8bd7e468fcce86893d7a27af08bc/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=fe671966796e8bd7e468fcce86893d7a27af08bc", "patch": "@@ -181,7 +181,7 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n             }\n \n             // Fourth, check for unreachable arms.\n-            check_arms(cx, &inlined_arms, source);\n+            let matrix = check_arms(cx, &inlined_arms, source);\n \n             // Then, if the match has no arms, check whether the scrutinee\n             // is uninhabited.\n@@ -248,12 +248,6 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n                 return;\n             }\n \n-            let matrix: Matrix<'_, '_> = inlined_arms\n-                .iter()\n-                .filter(|&&(_, guard)| guard.is_none())\n-                .flat_map(|arm| &arm.0)\n-                .map(|pat| PatStack::from_pattern(pat.0))\n-                .collect();\n             let scrut_ty = self.tables.node_type(scrut.hir_id);\n             check_exhaustive(cx, scrut_ty, scrut.span, &matrix, scrut.hir_id);\n         })\n@@ -403,11 +397,11 @@ fn pat_is_catchall(pat: &Pat) -> bool {\n }\n \n // Check for unreachable patterns\n-fn check_arms<'tcx>(\n+fn check_arms<'p, 'tcx>(\n     cx: &mut MatchCheckCtxt<'_, 'tcx>,\n-    arms: &[(Vec<(&super::Pat<'tcx>, &hir::Pat)>, Option<&hir::Expr>)],\n+    arms: &[(Vec<(&'p super::Pat<'tcx>, &hir::Pat)>, Option<&hir::Expr>)],\n     source: hir::MatchSource,\n-) {\n+) -> Matrix<'p, 'tcx> {\n     let mut seen = Matrix::empty();\n     let mut catchall = None;\n     for (arm_index, &(ref pats, guard)) in arms.iter().enumerate() {\n@@ -485,6 +479,7 @@ fn check_arms<'tcx>(\n             }\n         }\n     }\n+    seen\n }\n \n fn check_not_useful("}]}