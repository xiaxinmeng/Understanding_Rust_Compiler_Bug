{"sha": "90ff6fcd4ec4a91b9d0a4956d3fd8459931f2de4", "node_id": "C_kwDOAAsO6NoAKDkwZmY2ZmNkNGVjNGE5MWI5ZDBhNDk1NmQzZmQ4NDU5OTMxZjJkZTQ", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-05-11T14:17:52Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-05-11T14:26:49Z"}, "message": "Add rustc_nonnull_optimization_guaranteed to Owned/Borrowed Fd/Socket\n\nPR #94586 added support for using\n`rustc_nonnull_optimization_guaranteed` on values where the \"null\" value\nis the all-ones bitpattern.\n\nNow that #94586 has made it to the stage0 compiler, add\n`rustc_nonnull_optimization_guaranteed` to `OwnedFd`, `BorrowedFd`,\n`OwnedSocket`, and `BorrowedSocket`, since these types all exclude\nall-ones bitpatterns.\n\nThis allows `Option<OwnedFd>`, `Option<BorrowedFd>`, `Option<OwnedSocket>`,\nand `Option<BorrowedSocket>` to be used in FFI declarations, as described\nin the [I/O safety RFC].\n\n[I/O safety RFC]: https://github.com/rust-lang/rfcs/blob/master/text/3128-io-safety.md#ownedfd-and-borrowedfdfd-1", "tree": {"sha": "1658c667bcc8a8245c9d24d591cbc4c74e35fb11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1658c667bcc8a8245c9d24d591cbc4c74e35fb11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90ff6fcd4ec4a91b9d0a4956d3fd8459931f2de4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90ff6fcd4ec4a91b9d0a4956d3fd8459931f2de4", "html_url": "https://github.com/rust-lang/rust/commit/90ff6fcd4ec4a91b9d0a4956d3fd8459931f2de4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90ff6fcd4ec4a91b9d0a4956d3fd8459931f2de4/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecd44958e0a21110d09862ee080d95a4ca6c52f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd44958e0a21110d09862ee080d95a4ca6c52f8", "html_url": "https://github.com/rust-lang/rust/commit/ecd44958e0a21110d09862ee080d95a4ca6c52f8"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "53433823fbd3bce4ca837cf328432682e7b2f9d9", "filename": "library/std/src/os/fd/owned.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90ff6fcd4ec4a91b9d0a4956d3fd8459931f2de4/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ff6fcd4ec4a91b9d0a4956d3fd8459931f2de4/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=90ff6fcd4ec4a91b9d0a4956d3fd8459931f2de4", "patch": "@@ -32,6 +32,7 @@ use crate::sys_common::{AsInner, FromInner, IntoInner};\n // 32-bit c_int. Below is -2, in two's complement, but that only works out\n // because c_int is 32 bits.\n #[rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FE)]\n+#[rustc_nonnull_optimization_guaranteed]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n pub struct BorrowedFd<'fd> {\n     fd: RawFd,\n@@ -52,6 +53,7 @@ pub struct BorrowedFd<'fd> {\n // 32-bit c_int. Below is -2, in two's complement, but that only works out\n // because c_int is 32 bits.\n #[rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FE)]\n+#[rustc_nonnull_optimization_guaranteed]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n pub struct OwnedFd {\n     fd: RawFd,"}, {"sha": "b39863644f1161e85ecb91045b8c0a10aee97c1e", "filename": "library/std/src/os/fd/tests.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/90ff6fcd4ec4a91b9d0a4956d3fd8459931f2de4/library%2Fstd%2Fsrc%2Fos%2Ffd%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ff6fcd4ec4a91b9d0a4956d3fd8459931f2de4/library%2Fstd%2Fsrc%2Fos%2Ffd%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Ftests.rs?ref=90ff6fcd4ec4a91b9d0a4956d3fd8459931f2de4", "patch": "@@ -32,3 +32,22 @@ fn test_fd() {\n     assert_eq!(stdin_as_file.as_fd().as_raw_fd(), raw_fd);\n     assert_eq!(Into::<OwnedFd>::into(stdin_as_file).into_raw_fd(), raw_fd);\n }\n+\n+#[cfg(any(unix, target_os = \"wasi\"))]\n+#[test]\n+fn test_niche_optimizations() {\n+    use crate::mem::size_of;\n+    #[cfg(unix)]\n+    use crate::os::unix::io::{BorrowedFd, FromRawFd, IntoRawFd, OwnedFd, RawFd};\n+    #[cfg(target_os = \"wasi\")]\n+    use crate::os::wasi::io::{BorrowedFd, FromRawFd, IntoRawFd, OwnedFd, RawFd};\n+\n+    assert_eq!(size_of::<Option<OwnedFd>>(), size_of::<RawFd>());\n+    assert_eq!(size_of::<Option<BorrowedFd<'static>>>(), size_of::<RawFd>());\n+    unsafe {\n+        assert_eq!(OwnedFd::from_raw_fd(RawFd::MIN).into_raw_fd(), RawFd::MIN);\n+        assert_eq!(OwnedFd::from_raw_fd(RawFd::MAX).into_raw_fd(), RawFd::MAX);\n+        assert_eq!(Some(OwnedFd::from_raw_fd(RawFd::MIN)).unwrap().into_raw_fd(), RawFd::MIN);\n+        assert_eq!(Some(OwnedFd::from_raw_fd(RawFd::MAX)).unwrap().into_raw_fd(), RawFd::MAX);\n+    }\n+}"}, {"sha": "3325688e661ef7e25c12695b327becdddbee3009", "filename": "library/std/src/os/windows/io/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90ff6fcd4ec4a91b9d0a4956d3fd8459931f2de4/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ff6fcd4ec4a91b9d0a4956d3fd8459931f2de4/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fmod.rs?ref=90ff6fcd4ec4a91b9d0a4956d3fd8459931f2de4", "patch": "@@ -54,3 +54,6 @@ pub use handle::*;\n pub use raw::*;\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n pub use socket::*;\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "baae92c19f206956df617ea830f033d79ef3e6a2", "filename": "library/std/src/os/windows/io/socket.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90ff6fcd4ec4a91b9d0a4956d3fd8459931f2de4/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ff6fcd4ec4a91b9d0a4956d3fd8459931f2de4/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs?ref=90ff6fcd4ec4a91b9d0a4956d3fd8459931f2de4", "patch": "@@ -34,6 +34,7 @@ use crate::sys::cvt;\n     target_pointer_width = \"64\",\n     rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FF_FF_FF_FF_FE)\n )]\n+#[rustc_nonnull_optimization_guaranteed]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n pub struct BorrowedSocket<'socket> {\n     socket: RawSocket,\n@@ -56,6 +57,7 @@ pub struct BorrowedSocket<'socket> {\n     target_pointer_width = \"64\",\n     rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FF_FF_FF_FF_FE)\n )]\n+#[rustc_nonnull_optimization_guaranteed]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n pub struct OwnedSocket {\n     socket: RawSocket,"}, {"sha": "541754737070d277da0632ee71b301ab06f6f79a", "filename": "library/std/src/os/windows/io/tests.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/90ff6fcd4ec4a91b9d0a4956d3fd8459931f2de4/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ff6fcd4ec4a91b9d0a4956d3fd8459931f2de4/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Ftests.rs?ref=90ff6fcd4ec4a91b9d0a4956d3fd8459931f2de4", "patch": "@@ -0,0 +1,22 @@\n+#[test]\n+fn test_niche_optimizations_socket() {\n+    use crate::mem::size_of;\n+    use crate::os::windows::io::{\n+        BorrowedSocket, FromRawSocket, IntoRawSocket, OwnedSocket, OwnedSocket, RawSocket,\n+    };\n+\n+    assert_eq!(size_of::<Option<OwnedSocket>>(), size_of::<RawSocket>());\n+    assert_eq!(size_of::<Option<BorrowedSocket<'static>>>(), size_of::<RawSocket>(),);\n+    unsafe {\n+        assert_eq!(OwnedSocket::from_raw_socket(RawSocket::MIN).into_raw_socket(), RawSocket::MIN);\n+        assert_eq!(OwnedSocket::from_raw_socket(RawSocket::MAX).into_raw_socket(), RawSocket::MAX);\n+        assert_eq!(\n+            Some(OwnedSocket::from_raw_socket(RawSocket::MIN)).unwrap().into_raw_socket(),\n+            RawSocket::MIN\n+        );\n+        assert_eq!(\n+            Some(OwnedSocket::from_raw_socket(RawSocket::MAX)).unwrap().into_raw_socket(),\n+            RawSocket::MAX\n+        );\n+    }\n+}"}]}