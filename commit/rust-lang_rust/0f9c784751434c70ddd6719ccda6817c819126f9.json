{"sha": "0f9c784751434c70ddd6719ccda6817c819126f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmOWM3ODQ3NTE0MzRjNzBkZGQ2NzE5Y2NkYTY4MTdjODE5MTI2Zjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-17T18:38:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-17T18:38:34Z"}, "message": "Auto merge of #47522 - kennytm:rollup, r=kennytm\n\nRollup of 21 pull requests\n\n- Successful merges: #47302, #47333, #47387, #47404, #47407, #47426, #47427, #47436, #47444, #47456, #47458, #47467, #47479, #47481, #47483, #47487, #47497, #47498, #47505, #47509, #47514\n- Failed merges:", "tree": {"sha": "7c0645a6d63a20eeb7c2c3f2a0f81405f30b7b92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c0645a6d63a20eeb7c2c3f2a0f81405f30b7b92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f9c784751434c70ddd6719ccda6817c819126f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f9c784751434c70ddd6719ccda6817c819126f9", "html_url": "https://github.com/rust-lang/rust/commit/0f9c784751434c70ddd6719ccda6817c819126f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f9c784751434c70ddd6719ccda6817c819126f9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e49ada7528bf664b2ccc8516a9ef7d21849a70b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e49ada7528bf664b2ccc8516a9ef7d21849a70b", "html_url": "https://github.com/rust-lang/rust/commit/3e49ada7528bf664b2ccc8516a9ef7d21849a70b"}, {"sha": "5fade39c8811c04efd4e4b3783f8587a1cca9700", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fade39c8811c04efd4e4b3783f8587a1cca9700", "html_url": "https://github.com/rust-lang/rust/commit/5fade39c8811c04efd4e4b3783f8587a1cca9700"}], "stats": {"total": 892, "additions": 611, "deletions": 281}, "files": [{"sha": "45c389d72afc7fc873d231d98d747e02aaecb317", "filename": "RELEASES.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -577,7 +577,7 @@ Compatibility Notes\n   a warning.\n - [From the pound escape, lines consisting of multiple `#`s are\n   now visible][41785]\n-- [It is an error to reexport private enum variants][42460]. This is\n+- [It is an error to re-export private enum variants][42460]. This is\n   known to break a number of crates that depend on an older version of\n   mustache.\n - [On Windows, if `VCINSTALLDIR` is set incorrectly, `rustc` will try\n@@ -2251,10 +2251,10 @@ Rustdoc\n -------\n \n * [Fix empty implementation section on some module pages](https://github.com/rust-lang/rust/pull/34536)\n-* [Fix inlined renamed reexports in import lists](https://github.com/rust-lang/rust/pull/34479)\n+* [Fix inlined renamed re-exports in import lists](https://github.com/rust-lang/rust/pull/34479)\n * [Fix search result layout for enum variants and struct fields](https://github.com/rust-lang/rust/pull/34477)\n * [Fix issues with source links to external crates](https://github.com/rust-lang/rust/pull/34387)\n-* [Fix redirect pages for renamed reexports](https://github.com/rust-lang/rust/pull/34245)\n+* [Fix redirect pages for renamed re-exports](https://github.com/rust-lang/rust/pull/34245)\n \n Tooling\n -------\n@@ -4988,7 +4988,7 @@ Version 0.10 (2014-04-03)\n     * std: The `vec` module has been renamed to `slice`.\n     * std: A new vector type, `Vec<T>`, has been added in preparation for DST.\n       This will become the only growable vector in the future.\n-    * std: `std::io` now has more public-reexports. Types such as `BufferedReader`\n+    * std: `std::io` now has more public re-exports. Types such as `BufferedReader`\n       are now found at `std::io::BufferedReader` instead of\n       `std::io::buffered::BufferedReader`.\n     * std: `print` and `println` are no longer in the prelude, the `print!` and\n@@ -5079,8 +5079,8 @@ Version 0.10 (2014-04-03)\n       * render standalone markdown files.\n       * the --test flag tests all code blocks by default.\n       * exported macros are displayed.\n-      * reexported types have their documentation inlined at the location of the\n-        first reexport.\n+      * re-exported types have their documentation inlined at the location of the\n+        first re-export.\n       * search works across crates that have been rendered to the same output\n         directory.\n \n@@ -5467,7 +5467,7 @@ Version 0.7 (2013-07-03)\n         incl. `any`, `all`. removed.\n       * std: The `finalize` method of `Drop` renamed to `drop`.\n       * std: The `drop` method now takes `&mut self` instead of `&self`.\n-      * std: The prelude no longer reexports any modules, only types and traits.\n+      * std: The prelude no longer re-exports any modules, only types and traits.\n       * std: Prelude additions: `print`, `println`, `FromStr`, `ApproxEq`, `Equiv`,\n         `Iterator`, `IteratorUtil`, many numeric traits, many tuple traits.\n       * std: New numeric traits: `Fractional`, `Real`, `RealExt`, `Integer`, `Ratio`,"}, {"sha": "1e37237ac9c7208854f807a6bf3bacde72ea6e9d", "filename": "src/Cargo.lock", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -838,7 +838,7 @@ dependencies = [\n \n [[package]]\n name = \"html-diff\"\n-version = \"0.0.5\"\n+version = \"0.0.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"kuchiki 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -907,10 +907,11 @@ dependencies = [\n  \"flate2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rayon 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tar 0.4.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"walkdir 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"xz2 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"xz2 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2127,7 +2128,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n  \"cc 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"html-diff 0.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"html-diff 0.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -2776,7 +2777,7 @@ dependencies = [\n \n [[package]]\n name = \"xz2\"\n-version = \"0.1.3\"\n+version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"lzma-sys 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2855,7 +2856,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum handlebars 0.29.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fb04af2006ea09d985fef82b81e0eb25337e51b691c76403332378a53d521edc\"\n \"checksum hex 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d6a22814455d41612f41161581c2883c0c6a1c41852729b17d5ed88f01e153aa\"\n \"checksum home 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9f25ae61099d8f3fee8b483df0bd4ecccf4b2731897aad40d50eca1b641fe6db\"\n-\"checksum html-diff 0.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9778743e3b3c3679f471f0ed1833c690f19f4a0919e33b281f12ef5f77ad64c6\"\n+\"checksum html-diff 0.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee4cfdf62a484a3ac0d9b80f562d37f99366db08a63621b917ea3056565345f7\"\n \"checksum html5ever 0.20.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5bfb46978eb757a603b7dfe2dafb1c62cb4dee3428d8ac1de734d83d6b022d06\"\n \"checksum idna 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"014b298351066f1512874135335d62a789ffe78a9974f94b43ed5621951eaf7d\"\n \"checksum if_chain 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"61bb90bdd39e3af69b0172dfc6130f6cd6332bf040fbb9bdd4401d37adbd48b8\"\n@@ -3005,5 +3006,5 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum wincolor 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a39ee4464208f6430992ff20154216ab2357772ac871d994c51628d60e58b8b0\"\n \"checksum ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d59cefebd0c892fa2dd6de581e937301d8552cb44489cdff035c6187cb63fa5e\"\n \"checksum xattr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5f04de8a1346489a2f9e9bd8526b73d135ec554227b17568456e86aa35b6f3fc\"\n-\"checksum xz2 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e9510bdf100731599107c61f77daf46713a69a568f75458999c1f9dbf6ba25b0\"\n+\"checksum xz2 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"98df591c3504d014dd791d998123ed00a476c7e26dc6b2e873cb55c6ac9e59fa\"\n \"checksum yaml-rust 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e66366e18dc58b46801afbf2ca7661a9f59cc8c5962c29892b6039b4f86fa992\""}, {"sha": "d8f09bf47a4919bbcb852380381cb8841d02abb9", "filename": "src/ci/docker/dist-various-2/Dockerfile", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -1,4 +1,4 @@\n-FROM ubuntu:16.04\n+FROM ubuntu:17.10\n \n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n@@ -21,9 +21,12 @@ RUN apt-key adv --batch --yes --keyserver keyserver.ubuntu.com --recv-keys 74DA7\n RUN add-apt-repository -y 'deb http://apt.dilos.org/dilos dilos2-testing main'\n \n WORKDIR /tmp\n-COPY dist-various-2/shared.sh dist-various-2/build-fuchsia-toolchain.sh /tmp/\n-COPY dist-various-2/build-solaris-toolchain.sh /tmp/\n+COPY dist-various-2/shared.sh /tmp/\n+COPY dist-various-2/build-cloudabi-toolchain.sh /tmp/\n+RUN /tmp/build-cloudabi-toolchain.sh x86_64-unknown-cloudabi\n+COPY dist-various-2/build-fuchsia-toolchain.sh /tmp/\n RUN /tmp/build-fuchsia-toolchain.sh\n+COPY dist-various-2/build-solaris-toolchain.sh /tmp/\n RUN /tmp/build-solaris-toolchain.sh x86_64  amd64   solaris-i386\n RUN /tmp/build-solaris-toolchain.sh sparcv9 sparcv9 solaris-sparc\n \n@@ -44,12 +47,20 @@ ENV \\\n     CC_x86_64_sun_solaris=x86_64-sun-solaris2.10-gcc \\\n     CXX_x86_64_sun_solaris=x86_64-sun-solaris2.10-g++\n \n+# FIXME(EdSchouten): Remove this once cc \u22651.0.4 has been merged. It can\n+# automatically pick the right compiler path.\n+ENV \\\n+    AR_x86_64_unknown_cloudabi=x86_64-unknown-cloudabi-ar \\\n+    CC_x86_64_unknown_cloudabi=x86_64-unknown-cloudabi-clang \\\n+    CXX_x86_64_unknown_cloudabi=x86_64-unknown-cloudabi-clang++\n+\n ENV TARGETS=x86_64-unknown-fuchsia\n ENV TARGETS=$TARGETS,aarch64-unknown-fuchsia\n ENV TARGETS=$TARGETS,sparcv9-sun-solaris\n ENV TARGETS=$TARGETS,wasm32-unknown-unknown\n ENV TARGETS=$TARGETS,x86_64-sun-solaris\n ENV TARGETS=$TARGETS,x86_64-unknown-linux-gnux32\n+ENV TARGETS=$TARGETS,x86_64-unknown-cloudabi\n \n ENV RUST_CONFIGURE_ARGS --target=$TARGETS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --target $TARGETS"}, {"sha": "d64da4366399701498446545d683c6030c32c291", "filename": "src/ci/docker/dist-various-2/build-cloudabi-toolchain.sh", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-cloudabi-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-cloudabi-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-cloudabi-toolchain.sh?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -0,0 +1,55 @@\n+#!/bin/bash\n+# Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -eux\n+\n+# Install prerequisites.\n+apt-get update\n+apt-get install -y --no-install-recommends \\\n+  apt-transport-https \\\n+  ca-certificates \\\n+  clang-5.0 \\\n+  cmake \\\n+  curl \\\n+  file \\\n+  g++ \\\n+  gdb \\\n+  git \\\n+  lld-5.0 \\\n+  make \\\n+  python \\\n+  sudo \\\n+  xz-utils\n+\n+# Set up a Clang-based cross compiler toolchain.\n+# Based on the steps described at https://nuxi.nl/cloudabi/debian/\n+target=$1\n+for tool in ar nm objdump ranlib size; do\n+  ln -s ../lib/llvm-5.0/bin/llvm-${tool} /usr/bin/${target}-${tool}\n+done\n+ln -s ../lib/llvm-5.0/bin/clang /usr/bin/${target}-cc\n+ln -s ../lib/llvm-5.0/bin/clang /usr/bin/${target}-c++\n+ln -s ../lib/llvm-5.0/bin/lld /usr/bin/${target}-ld\n+ln -s ../../${target} /usr/lib/llvm-5.0/${target}\n+\n+# FIXME(EdSchouten): Remove this once cc \u22651.0.4 has been merged. It\n+# can make use of ${target}-cc and ${target}-c++, without incorrectly\n+# assuming it's MSVC.\n+ln -s ../lib/llvm-5.0/bin/clang /usr/bin/${target}-clang\n+ln -s ../lib/llvm-5.0/bin/clang /usr/bin/${target}-clang++\n+\n+# Install the C++ runtime libraries from CloudABI Ports.\n+echo deb https://nuxi.nl/distfiles/cloudabi-ports/debian/ cloudabi cloudabi > \\\n+    /etc/apt/sources.list.d/cloudabi.list\n+curl 'https://pgp.mit.edu/pks/lookup?op=get&search=0x0DA51B8531344B15' | \\\n+    apt-key add -\n+apt-get update\n+apt-get install -y $(echo ${target} | sed -e s/_/-/g)-cxx-runtime"}, {"sha": "296422744fa4059a4b7f0f19e202f76d9830d4ce", "filename": "src/doc/rustdoc/src/the-doc-attribute.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -1,7 +1,7 @@\n # The `#[doc]` attribute\n \n The `#[doc]` attribute lets you control various aspects of how `rustdoc` does\n-its job. \n+its job.\n \n The most basic function of `#[doc]` is to handle the actual documentation\n text. That is, `///` is syntax sugar for `#[doc]`. This means that these two\n@@ -143,7 +143,7 @@ pub mod bar {\n }\n ```\n \n-The documentation will generate a \"Reexports\" section, and say `pub use bar::Bar;`, where\n+The documentation will generate a \"Re-exports\" section, and say `pub use bar::Bar;`, where\n `Bar` is a link to its page.\n \n If we change the `use` line like this:\n@@ -184,7 +184,7 @@ mod bar {\n }\n ```\n \n-Now we'll have a `Reexports` line, and `Bar` will not link to anywhere.\n+Now we'll have a `Re-exports` line, and `Bar` will not link to anywhere.\n \n ## `#[doc(hidden)]`\n "}, {"sha": "6ee4f802802abe93ba18795385a2d4ccad943d8a", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -15,7 +15,7 @@\n //!\n //! This library, like libcore, is not intended for general usage, but rather as\n //! a building block of other libraries. The types and interfaces in this\n-//! library are reexported through the [standard library](../std/index.html),\n+//! library are re-exported through the [standard library](../std/index.html),\n //! and should not be used through this library.\n //!\n //! ## Boxed values\n@@ -52,7 +52,7 @@\n //! ## Collections\n //!\n //! Implementations of the most common general purpose data structures are\n-//! defined in this library. They are reexported through the\n+//! defined in this library. They are re-exported through the\n //! [standard collections library](../std/collections/index.html).\n //!\n //! ## Heap interfaces"}, {"sha": "15181dab8531cb9330fff8574e5cc9c112657708", "filename": "src/libcore/option.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -407,9 +407,7 @@ impl<T> Option<T> {\n     }\n \n     /// Applies a function to the contained value (if any),\n-    /// or returns a [`default`][] (if not).\n-    ///\n-    /// [`default`]: ../default/trait.Default.html#tymethod.default\n+    /// or returns the provided default (if not).\n     ///\n     /// # Examples\n     ///\n@@ -430,9 +428,7 @@ impl<T> Option<T> {\n     }\n \n     /// Applies a function to the contained value (if any),\n-    /// or computes a [`default`][] (if not).\n-    ///\n-    /// [`default`]: ../default/trait.Default.html#tymethod.default\n+    /// or computes a default (if not).\n     ///\n     /// # Examples\n     ///\n@@ -850,7 +846,7 @@ impl<T: Default> Option<T> {\n     /// Returns the contained value or a default\n     ///\n     /// Consumes the `self` argument then, if [`Some`], returns the contained\n-    /// value, otherwise if [`None`], returns the default value for that\n+    /// value, otherwise if [`None`], returns the [default value] for that\n     /// type.\n     ///\n     /// # Examples\n@@ -872,6 +868,7 @@ impl<T: Default> Option<T> {\n     ///\n     /// [`Some`]: #variant.Some\n     /// [`None`]: #variant.None\n+    /// [default value]: ../default/trait.Default.html#tymethod.default\n     /// [`parse`]: ../../std/primitive.str.html#method.parse\n     /// [`FromStr`]: ../../std/str/trait.FromStr.html\n     #[inline]"}, {"sha": "d43496c387cb8ab668ab9b2562d21632e494d787", "filename": "src/libcore/prelude/v1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibcore%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibcore%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude%2Fv1.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -16,20 +16,20 @@\n \n #![stable(feature = \"core_prelude\", since = \"1.4.0\")]\n \n-// Reexported core operators\n+// Re-exported core operators\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n pub use marker::{Copy, Send, Sized, Sync};\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n pub use ops::{Drop, Fn, FnMut, FnOnce};\n \n-// Reexported functions\n+// Re-exported functions\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n pub use mem::drop;\n \n-// Reexported types and traits\n+// Re-exported types and traits\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n pub use clone::Clone;\n@@ -55,7 +55,7 @@ pub use option::Option::{self, Some, None};\n #[doc(no_inline)]\n pub use result::Result::{self, Ok, Err};\n \n-// Reexported extension traits for primitive types\n+// Re-exported extension traits for primitive types\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n pub use slice::SliceExt;"}, {"sha": "244bf476cafb074a112f562dbdb13087cf407b42", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -22,7 +22,7 @@\n // a lot of stuff defined here. Let's keep it clean.\n //\n // Since slices don't support inherent methods; all operations\n-// on them are defined on traits, which are then reexported from\n+// on them are defined on traits, which are then re-exported from\n // the prelude for convenience. So there are a lot of traits here.\n //\n // The layout of this file is thus:\n@@ -1237,6 +1237,43 @@ macro_rules! iterator {\n                 }\n                 accum\n             }\n+\n+            #[inline]\n+            #[rustc_inherit_overflow_checks]\n+            fn position<P>(&mut self, mut predicate: P) -> Option<usize> where\n+                Self: Sized,\n+                P: FnMut(Self::Item) -> bool,\n+            {\n+                // The addition might panic on overflow\n+                let n = self.len();\n+                self.try_fold(0, move |i, x| {\n+                    if predicate(x) { Err(i) }\n+                    else { Ok(i + 1) }\n+                }).err()\n+                    .map(|i| {\n+                        unsafe { assume(i < n) };\n+                        i\n+                    })\n+            }\n+\n+            #[inline]\n+            fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where\n+                P: FnMut(Self::Item) -> bool,\n+                Self: Sized + ExactSizeIterator + DoubleEndedIterator\n+            {\n+                // No need for an overflow check here, because `ExactSizeIterator`\n+                // implies that the number of elements fits into a `usize`.\n+                let n = self.len();\n+                self.try_rfold(n, move |i, x| {\n+                    let i = i - 1;\n+                    if predicate(x) { Err(i) }\n+                    else { Ok(i) }\n+                }).err()\n+                    .map(|i| {\n+                        unsafe { assume(i < n) };\n+                        i\n+                    })\n+            }\n         }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "13740b958025171b2875d9b9e9c57947716d8842", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -10,6 +10,25 @@\n \n use core::result::Result::{Ok, Err};\n \n+\n+#[test]\n+fn test_position() {\n+    let b = [1, 2, 3, 5, 5];\n+    assert!(b.iter().position(|&v| v == 9) == None);\n+    assert!(b.iter().position(|&v| v == 5) == Some(3));\n+    assert!(b.iter().position(|&v| v == 3) == Some(2));\n+    assert!(b.iter().position(|&v| v == 0) == None);\n+}\n+\n+#[test]\n+fn test_rposition() {\n+    let b = [1, 2, 3, 5, 5];\n+    assert!(b.iter().rposition(|&v| v == 9) == None);\n+    assert!(b.iter().rposition(|&v| v == 5) == Some(4));\n+    assert!(b.iter().rposition(|&v| v == 3) == Some(2));\n+    assert!(b.iter().rposition(|&v| v == 0) == None);\n+}\n+\n #[test]\n fn test_binary_search() {\n     let b: [i32; 0] = [];"}, {"sha": "238145a061f551a76c82f085553c503a41b1f375", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -2119,7 +2119,7 @@ impl<'a> LoweringContext<'a> {\n \n                 // Privatize the degenerate import base, used only to check\n                 // the stability of `use a::{};`, to avoid it showing up as\n-                // a reexport by accident when `pub`, e.g. in documentation.\n+                // a re-export by accident when `pub`, e.g. in documentation.\n                 let path = P(self.lower_path(id, &prefix, ParamMode::Explicit, true));\n                 *vis = hir::Inherited;\n                 hir::ItemUse(path, hir::UseKind::ListStem)"}, {"sha": "143d2c2ea28bba8361cdf48539715bb418d45d39", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -127,7 +127,7 @@ declare_lint! {\n declare_lint! {\n     pub PUB_USE_OF_PRIVATE_EXTERN_CRATE,\n     Deny,\n-    \"detect public reexports of private extern crates\"\n+    \"detect public re-exports of private extern crates\"\n }\n \n declare_lint! {"}, {"sha": "b2a9859f68a3eb523988460518fc4c9780cca07a", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -97,12 +97,13 @@ macro_rules! declare_lint {\n \n /// Declare a static `LintArray` and return it as an expression.\n #[macro_export]\n-macro_rules! lint_array { ($( $lint:expr ),*) => (\n-    {\n-        static ARRAY: LintArray = &[ $( &$lint ),* ];\n-        ARRAY\n-    }\n-) }\n+macro_rules! lint_array {\n+    ($( $lint:expr ),*,) => { lint_array!( $( $lint ),* ) };\n+    ($( $lint:expr ),*) => {{\n+         static ARRAY: LintArray = &[ $( &$lint ),* ];\n+         ARRAY\n+    }}\n+}\n \n pub type LintArray = &'static [&'static &'static Lint];\n "}, {"sha": "e2de0b6bd013d939c4a002837f1c67bf3771de14", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -26,9 +26,9 @@ pub enum AccessLevel {\n     // public, then type `T` is reachable. Its values can be obtained by other crates\n     // even if the type itself is not nameable.\n     Reachable,\n-    // Public items + items accessible to other crates with help of `pub use` reexports\n+    // Public items + items accessible to other crates with help of `pub use` re-exports\n     Exported,\n-    // Items accessible to other crates directly, without help of reexports\n+    // Items accessible to other crates directly, without help of re-exports\n     Public,\n }\n "}, {"sha": "69b86416afab0651df18b3a9b253966ac8f522da", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -1172,7 +1172,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"emit noalias metadata for mutable references\"),\n     dump_mir: Option<String> = (None, parse_opt_string, [UNTRACKED],\n           \"dump MIR state at various points in translation\"),\n-    dump_mir_dir: Option<String> = (None, parse_opt_string, [UNTRACKED],\n+    dump_mir_dir: String = (String::from(\"mir_dump\"), parse_string, [UNTRACKED],\n           \"the directory the MIR is dumped into\"),\n     dump_mir_graphviz: bool = (false, parse_bool, [UNTRACKED],\n           \"in addition to `.mir` files, create graphviz `.dot` files\"),\n@@ -2796,7 +2796,7 @@ mod tests {\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n         opts.debugging_opts.dump_mir = Some(String::from(\"abc\"));\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-        opts.debugging_opts.dump_mir_dir = Some(String::from(\"abc\"));\n+        opts.debugging_opts.dump_mir_dir = String::from(\"abc\");\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n         opts.debugging_opts.dump_mir_graphviz = true;\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());"}, {"sha": "cc40b8b0529836440b766579f87f76f5e3ee0530", "filename": "src/librustc_back/target/windows_base.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -59,6 +59,15 @@ pub fn opts() -> TargetOptions {\n         \"-lmingw32\".to_string(),\n         \"-lgcc\".to_string(), // alas, mingw* libraries above depend on libgcc\n         \"-lmsvcrt\".to_string(),\n+        // mingw's msvcrt is a weird hybrid import library and static library.\n+        // And it seems that the linker fails to use import symbols from msvcrt\n+        // that are required from functions in msvcrt in certain cases. For example\n+        // `_fmode` that is used by an implementation of `__p__fmode` in x86_64.\n+        // Listing the library twice seems to fix that, and seems to also be done\n+        // by mingw's gcc (Though not sure if it's done on purpose, or by mistake).\n+        //\n+        // See https://github.com/rust-lang/rust/pull/47483\n+        \"-lmsvcrt\".to_string(),\n         \"-luser32\".to_string(),\n         \"-lkernel32\".to_string(),\n     ]);"}, {"sha": "58f851aea3817e44d81b8a1735ea9d5c6fb4c6b9", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -1187,8 +1187,8 @@ impl EmitterWriter {\n                     let sub_len = parts[0].snippet.trim().chars().fold(0, |acc, ch| {\n                         acc + unicode_width::UnicodeWidthChar::width(ch).unwrap_or(0)\n                     });\n-                    let underline_start = span_start_pos.col.0 + start;\n-                    let underline_end = span_start_pos.col.0 + start + sub_len;\n+                    let underline_start = span_start_pos.col_display + start;\n+                    let underline_end = span_start_pos.col_display + start + sub_len;\n                     for p in underline_start..underline_end {\n                         buffer.putc(row_num,\n                                     max_line_num_len + 3 + p,"}, {"sha": "de55710bdf3d0bce54d919117777403d9fe3d6cc", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -1154,9 +1154,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n                         let msg = \"function is marked #[no_mangle], but not exported\";\n                         let mut err = cx.struct_span_lint(PRIVATE_NO_MANGLE_FNS, it.span, msg);\n                         let insertion_span = it.span.with_hi(it.span.lo());\n-                        err.span_suggestion(insertion_span,\n-                                            \"try making it public\",\n-                                            \"pub \".to_owned());\n+                        if it.vis == hir::Visibility::Inherited {\n+                            err.span_suggestion(insertion_span,\n+                                                \"try making it public\",\n+                                                \"pub \".to_owned());\n+                        }\n                         err.emit();\n                     }\n                     if generics.is_type_parameterized() {\n@@ -1177,9 +1179,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n                        let msg = \"static is marked #[no_mangle], but not exported\";\n                        let mut err = cx.struct_span_lint(PRIVATE_NO_MANGLE_STATICS, it.span, msg);\n                        let insertion_span = it.span.with_hi(it.span.lo());\n-                       err.span_suggestion(insertion_span,\n-                                           \"try making it public\",\n-                                           \"pub \".to_owned());\n+                       if it.vis == hir::Visibility::Inherited {\n+                           err.span_suggestion(insertion_span,\n+                                               \"try making it public\",\n+                                               \"pub \".to_owned());\n+                       }\n                        err.emit();\n                 }\n             }"}, {"sha": "06728b2e6257c03b9292a4da3d115b351f10c742", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -702,8 +702,8 @@ impl<'a, 'tcx> CrateMetadata {\n                     let vis = self.get_visibility(child_index);\n                     let is_import = false;\n                     callback(def::Export { def, ident, vis, span, is_import });\n-                    // For non-reexport structs and variants add their constructors to children.\n-                    // Reexport lists automatically contain constructors when necessary.\n+                    // For non-re-export structs and variants add their constructors to children.\n+                    // Re-export lists automatically contain constructors when necessary.\n                     match def {\n                         Def::Struct(..) => {\n                             if let Some(ctor_def_id) = self.get_struct_ctor_def_id(child_index) {"}, {"sha": "c206d0ea9b5fd6e6ee04ad96ddcaa59c4d105e23", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -28,7 +28,7 @@ use std::fmt;\n use std::iter;\n \n use transform::{add_moves_for_packed_drops, add_call_guards};\n-use transform::{no_landing_pads, simplify};\n+use transform::{remove_noop_landing_pads, no_landing_pads, simplify};\n use util::elaborate_drops::{self, DropElaborator, DropStyle, DropFlagMode};\n use util::patch::MirPatch;\n \n@@ -118,6 +118,7 @@ fn make_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     add_moves_for_packed_drops::add_moves_for_packed_drops(\n         tcx, &mut result, instance.def_id());\n     no_landing_pads::no_landing_pads(tcx, &mut result);\n+    remove_noop_landing_pads::remove_noop_landing_pads(tcx, &mut result);\n     simplify::simplify_cfg(&mut result);\n     add_call_guards::CriticalCallEdges.add_call_guards(&mut result);\n     debug!(\"make_shim({:?}) = {:?}\", instance, result);"}, {"sha": "e7cab469bc222e0691e671857f5109cad11c81c5", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -20,17 +20,24 @@ use util::patch::MirPatch;\n /// code for these.\n pub struct RemoveNoopLandingPads;\n \n+pub fn remove_noop_landing_pads<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    mir: &mut Mir<'tcx>)\n+{\n+    if tcx.sess.no_landing_pads() {\n+        return\n+    }\n+    debug!(\"remove_noop_landing_pads({:?})\", mir);\n+\n+    RemoveNoopLandingPads.remove_nop_landing_pads(mir)\n+}\n+\n impl MirPass for RemoveNoopLandingPads {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _src: MirSource,\n                           mir: &mut Mir<'tcx>) {\n-        if tcx.sess.no_landing_pads() {\n-            return\n-        }\n-\n-        debug!(\"remove_noop_landing_pads({:?})\", mir);\n-        self.remove_nop_landing_pads(mir);\n+        remove_noop_landing_pads(tcx, mir);\n     }\n }\n "}, {"sha": "6251b64bb279dcfd52e4e0578249ba6b2153c2cf", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -407,10 +407,7 @@ fn dump_matched_mir_node<'a, 'tcx>(\n     result: &LivenessResult,\n ) {\n     let mut file_path = PathBuf::new();\n-    if let Some(ref file_dir) = tcx.sess.opts.debugging_opts.dump_mir_dir {\n-        let p = Path::new(file_dir);\n-        file_path.push(p);\n-    };\n+    file_path.push(Path::new(&tcx.sess.opts.debugging_opts.dump_mir_dir));\n     let item_id = tcx.hir.as_local_node_id(source.def_id).unwrap();\n     let file_name = format!(\"rustc.node{}{}-liveness.mir\", item_id, pass_name);\n     file_path.push(&file_name);"}, {"sha": "78d55ad34ed45a77fe97d293120c910d543beef6", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -189,11 +189,7 @@ fn dump_path(\n     };\n \n     let mut file_path = PathBuf::new();\n-\n-    if let Some(ref file_dir) = tcx.sess.opts.debugging_opts.dump_mir_dir {\n-        let p = Path::new(file_dir);\n-        file_path.push(p);\n-    };\n+    file_path.push(Path::new(&tcx.sess.opts.debugging_opts.dump_mir_dir));\n \n     let item_name = tcx.hir\n         .def_path(source.def_id)"}, {"sha": "b46882f054df9d0bb139743e3a611849135623d2", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -219,7 +219,7 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             hir::ItemExternCrate(..) => {}\n             // All nested items are checked by visit_item\n             hir::ItemMod(..) => {}\n-            // Reexports are handled in visit_mod\n+            // Re-exports are handled in visit_mod\n             hir::ItemUse(..) => {}\n             // The interface is empty\n             hir::ItemGlobalAsm(..) => {}\n@@ -1049,7 +1049,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         match item.node {\n-            // contents of a private mod can be reexported, so we need\n+            // contents of a private mod can be re-exported, so we need\n             // to check internals.\n             hir::ItemMod(_) => {}\n "}, {"sha": "c55bf395d71b3247b384ca990482f25dc41bdacf", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -683,7 +683,7 @@ impl<'a> Resolver<'a> {\n                 let (def, vis) = (binding.def(), binding.vis);\n                 self.macro_exports.push(Export { ident, def, vis, span, is_import: true });\n             } else {\n-                span_err!(self.session, span, E0470, \"reexported macro not found\");\n+                span_err!(self.session, span, E0470, \"re-exported macro not found\");\n             }\n         }\n         used\n@@ -729,7 +729,7 @@ impl<'a> Resolver<'a> {\n                 }\n             } else if attr.check_name(\"macro_reexport\") {\n                 let bad_macro_reexport = |this: &mut Self, span| {\n-                    span_err!(this.session, span, E0467, \"bad macro reexport\");\n+                    span_err!(this.session, span, E0467, \"bad macro re-export\");\n                 };\n                 if let Some(names) = attr.meta_item_list() {\n                     for attr in names {"}, {"sha": "3f0f1a1a4cb58ef2cd5c3e1fef2966955c3e5874", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -1374,7 +1374,7 @@ arguments.\n \"##,\n \n E0467: r##\"\n-Macro reexport declarations were empty or malformed.\n+Macro re-export declarations were empty or malformed.\n \n Erroneous code examples:\n \n@@ -1389,12 +1389,12 @@ extern crate core as other_macros_for_good;\n This is a syntax error at the level of attribute declarations.\n \n Currently, `macro_reexport` requires at least one macro name to be listed.\n-Unlike `macro_use`, listing no names does not reexport all macros from the\n+Unlike `macro_use`, listing no names does not re-export all macros from the\n given crate.\n \n Decide which macros you would like to export and list them properly.\n \n-These are proper reexport declarations:\n+These are proper re-export declarations:\n \n ```ignore (cannot-doctest-multicrate-project)\n #[macro_reexport(some_macro, another_macro)]\n@@ -1475,7 +1475,7 @@ extern crate some_crate; //ok!\n \"##,\n \n E0470: r##\"\n-A macro listed for reexport was not found.\n+A macro listed for re-export was not found.\n \n Erroneous code example:\n \n@@ -1493,7 +1493,7 @@ exported from the given crate.\n \n This could be caused by a typo. Did you misspell the macro's name?\n \n-Double-check the names of the macros listed for reexport, and that the crate\n+Double-check the names of the macros listed for re-export, and that the crate\n in question exports them.\n \n A working version:"}, {"sha": "5b9b3767cb62fb34907b8a373b3b1c5090b6125b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -2751,7 +2751,7 @@ impl<'a> Resolver<'a> {\n                                 let lint = lint::builtin::LEGACY_CONSTRUCTOR_VISIBILITY;\n                                 self.session.buffer_lint(lint, id, span,\n                                     \"private struct constructors are not usable through \\\n-                                     reexports in outer modules\",\n+                                     re-exports in outer modules\",\n                                 );\n                                 res = Some(PathResolution::new(ctor_def));\n                             }\n@@ -4062,7 +4062,7 @@ fn show_candidates(err: &mut DiagnosticBuilder,\n }\n \n /// A somewhat inefficient routine to obtain the name of a module.\n-fn module_to_string(module: Module) -> String {\n+fn module_to_string(module: Module) -> Option<String> {\n     let mut names = Vec::new();\n \n     fn collect_mod(names: &mut Vec<Ident>, module: Module) {\n@@ -4080,12 +4080,12 @@ fn module_to_string(module: Module) -> String {\n     collect_mod(&mut names, module);\n \n     if names.is_empty() {\n-        return \"???\".to_string();\n+        return None;\n     }\n-    names_to_string(&names.into_iter()\n+    Some(names_to_string(&names.into_iter()\n                         .rev()\n                         .map(|n| dummy_spanned(n))\n-                        .collect::<Vec<_>>())\n+                        .collect::<Vec<_>>()))\n }\n \n fn err_path_resolution() -> PathResolution {"}, {"sha": "ceb39aea108c8ac2602eb33849afe42a8833012d", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -691,8 +691,7 @@ impl<'a> Resolver<'a> {\n         if let Some(suggestion) = suggestion {\n             if suggestion != name {\n                 if let MacroKind::Bang = kind {\n-                    err.span_suggestion(span, \"you could try the macro\",\n-                                        format!(\"{}!\", suggestion));\n+                    err.span_suggestion(span, \"you could try the macro\", suggestion.to_string());\n                 } else {\n                     err.span_suggestion(span, \"try\", suggestion.to_string());\n                 }"}, {"sha": "07b08e2e61ac0155bb1f6a0a2651b70069795da5", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -46,8 +46,8 @@ pub enum ImportDirectiveSubclass<'a> {\n     },\n     GlobImport {\n         is_prelude: bool,\n-        max_vis: Cell<ty::Visibility>, // The visibility of the greatest reexport.\n-        // n.b. `max_vis` is only used in `finalize_import` to check for reexport errors.\n+        max_vis: Cell<ty::Visibility>, // The visibility of the greatest re-export.\n+        // n.b. `max_vis` is only used in `finalize_import` to check for re-export errors.\n     },\n     ExternCrate(Option<Name>),\n     MacroUse,\n@@ -524,7 +524,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n     fn resolve_import(&mut self, directive: &'b ImportDirective<'b>) -> bool {\n         debug!(\"(resolving import for module) resolving import `{}::...` in `{}`\",\n                names_to_string(&directive.module_path[..]),\n-               module_to_string(self.current_module));\n+               module_to_string(self.current_module).unwrap_or(\"???\".to_string()));\n \n         self.current_module = directive.parent;\n \n@@ -773,10 +773,10 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                         None => \"\".to_owned(),\n                     };\n                 let module_str = module_to_string(module);\n-                let msg = if &module_str == \"???\" {\n-                    format!(\"no `{}` in the root{}\", ident, lev_suggestion)\n-                } else {\n+                let msg = if let Some(module_str) = module_str {\n                     format!(\"no `{}` in `{}`{}\", ident, module_str, lev_suggestion)\n+                } else {\n+                    format!(\"no `{}` in the root{}\", ident, lev_suggestion)\n                 };\n                 Some((span, msg))\n             } else {\n@@ -803,21 +803,22 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         if !any_successful_reexport {\n             let (ns, binding) = reexport_error.unwrap();\n             if ns == TypeNS && binding.is_extern_crate() {\n-                let msg = format!(\"extern crate `{}` is private, and cannot be reexported \\\n-                                   (error E0365), consider declaring with `pub`\",\n+                let msg = format!(\"extern crate `{}` is private, and cannot be \\\n+                                   re-exported (error E0365), consider declaring with \\\n+                                   `pub`\",\n                                    ident);\n                 self.session.buffer_lint(PUB_USE_OF_PRIVATE_EXTERN_CRATE,\n                                          directive.id,\n                                          directive.span,\n                                          &msg);\n             } else if ns == TypeNS {\n                 struct_span_err!(self.session, directive.span, E0365,\n-                                 \"`{}` is private, and cannot be reexported\", ident)\n-                    .span_label(directive.span, format!(\"reexport of private `{}`\", ident))\n+                                 \"`{}` is private, and cannot be re-exported\", ident)\n+                    .span_label(directive.span, format!(\"re-export of private `{}`\", ident))\n                     .note(&format!(\"consider declaring type or module `{}` with `pub`\", ident))\n                     .emit();\n             } else {\n-                let msg = format!(\"`{}` is private, and cannot be reexported\", ident);\n+                let msg = format!(\"`{}` is private, and cannot be re-exported\", ident);\n                 let note_msg =\n                     format!(\"consider marking `{}` as `pub` in the imported module\", ident);\n                 struct_span_err!(self.session, directive.span, E0364, \"{}\", &msg)\n@@ -876,7 +877,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         self.record_def(directive.id, PathResolution::new(module.def().unwrap()));\n     }\n \n-    // Miscellaneous post-processing, including recording reexports,\n+    // Miscellaneous post-processing, including recording re-exports,\n     // reporting conflicts, and reporting unresolved imports.\n     fn finalize_resolutions_in(&mut self, module: Module<'b>) {\n         // Since import resolution is finished, globs will not define any more names.\n@@ -932,12 +933,12 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                         !orig_binding.vis.is_at_least(binding.vis, &*self) {\n                             let msg = match directive.subclass {\n                                 ImportDirectiveSubclass::SingleImport { .. } => {\n-                                    format!(\"variant `{}` is private and cannot be reexported\",\n+                                    format!(\"variant `{}` is private and cannot be re-exported\",\n                                             ident)\n                                 },\n                                 ImportDirectiveSubclass::GlobImport { .. } => {\n                                     let msg = \"enum is private and its variants \\\n-                                               cannot be reexported\".to_owned();\n+                                               cannot be re-exported\".to_owned();\n                                     let error_id = (DiagnosticMessageId::ErrorId(0), // no code?!\n                                                     Some(binding.span),\n                                                     msg.clone());"}, {"sha": "f53c5b3f58131399d78887013b99e26512674926", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -69,13 +69,14 @@ pub fn get_linker(sess: &Session) -> (PathBuf, Command, Vec<(OsString, OsString)\n     // was tagged as #42791) and some more info can be found on #44443 for\n     // emscripten itself.\n     let cmd = |linker: &Path| {\n-        if cfg!(windows) && linker.ends_with(\".bat\") {\n-            let mut cmd = Command::new(\"cmd\");\n-            cmd.arg(\"/c\").arg(linker);\n-            cmd\n-        } else {\n-            Command::new(linker)\n+        if let Some(linker) = linker.to_str() {\n+            if cfg!(windows) && linker.ends_with(\".bat\") {\n+                let mut cmd = Command::new(\"cmd\");\n+                cmd.arg(\"/c\").arg(linker);\n+                return cmd\n+            }\n         }\n+        Command::new(linker)\n     };\n \n     if let Some(ref linker) = sess.opts.cg.linker {"}, {"sha": "db0b045ef1e73aebdb1d62ab9ee46c7e4513ffda", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -1360,15 +1360,10 @@ fn start_executing_work(tcx: TyCtxt,\n     let sess = tcx.sess;\n \n     // First up, convert our jobserver into a helper thread so we can use normal\n-    // mpsc channels to manage our messages and such. Once we've got the helper\n-    // thread then request `n-1` tokens because all of our work items are ready\n-    // to go.\n-    //\n-    // Note that the `n-1` is here because we ourselves have a token (our\n-    // process) and we'll use that token to execute at least one unit of work.\n-    //\n-    // After we've requested all these tokens then we'll, when we can, get\n-    // tokens on `rx` above which will get managed in the main loop below.\n+    // mpsc channels to manage our messages and such.\n+    // After we've requested tokens then we'll, when we can,\n+    // get tokens on `coordinator_receive` which will\n+    // get managed in the main loop below.\n     let coordinator_send2 = coordinator_send.clone();\n     let helper = jobserver.into_helper_thread(move |token| {\n         drop(coordinator_send2.send(Box::new(Message::Token(token))));"}, {"sha": "214fdbded4e90bf74a17a290f3ae676f896abdbb", "filename": "src/librustc_trans/llvm_util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_trans%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustc_trans%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fllvm_util.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -85,7 +85,8 @@ const X86_WHITELIST: &'static [&'static str] = &[\"avx\\0\", \"avx2\\0\", \"bmi\\0\", \"bm\n                                                  \"avx512dq\\0\", \"avx512er\\0\",\n                                                  \"avx512f\\0\", \"avx512ifma\\0\",\n                                                  \"avx512pf\\0\", \"avx512vbmi\\0\",\n-                                                 \"avx512vl\\0\", \"avx512vpopcntdq\\0\", \"mmx\\0\"];\n+                                                 \"avx512vl\\0\", \"avx512vpopcntdq\\0\",\n+                                                 \"mmx\\0\", \"fxsr\\0\"];\n \n const HEXAGON_WHITELIST: &'static [&'static str] = &[\"hvx\\0\", \"hvx-double\\0\"];\n "}, {"sha": "608adcb43d6c3ba32b1ef0b0a076c9b4d39a43ea", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -12,7 +12,7 @@ doctest = false\n \n [dependencies]\n pulldown-cmark = { version = \"0.1.0\", default-features = false }\n-html-diff = \"0.0.5\"\n+html-diff = \"0.0.6\"\n tempdir = \"0.3\"\n \n [build-dependencies]"}, {"sha": "d284757df63fa24c99ce1c0813846f19814bea08", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -82,9 +82,9 @@ pub fn try_inline(cx: &DocContext, def: Def, name: ast::Name)\n             ret.extend(build_impls(cx, did));\n             clean::ForeignTypeItem\n         }\n-        // Never inline enum variants but leave them shown as reexports.\n+        // Never inline enum variants but leave them shown as re-exports.\n         Def::Variant(..) => return None,\n-        // Assume that enum variants and struct types are reexported next to\n+        // Assume that enum variants and struct types are re-exported next to\n         // their constructors.\n         Def::VariantCtor(..) |\n         Def::StructCtor(..) => return Some(Vec::new()),\n@@ -365,7 +365,7 @@ fn build_module(cx: &DocContext, did: DefId) -> clean::Module {\n     };\n \n     fn fill_in(cx: &DocContext, did: DefId, items: &mut Vec<clean::Item>) {\n-        // If we're reexporting a reexport it may actually reexport something in\n+        // If we're re-exporting a re-export it may actually re-export something in\n         // two namespaces, so the target may be listed twice. Make sure we only\n         // visit each node at most once.\n         let mut visited = FxHashSet();"}, {"sha": "2293e31b5794d2c27e13570c35c19f4c5db06f30", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -1286,9 +1286,9 @@ impl DocFolder for Cache {\n             clean::ConstantItem(..) | clean::StaticItem(..) |\n             clean::UnionItem(..) | clean::ForeignTypeItem\n             if !self.stripped_mod => {\n-                // Reexported items mean that the same id can show up twice\n+                // Re-exported items mean that the same id can show up twice\n                 // in the rustdoc ast that we're looking at. We know,\n-                // however, that a reexported item doesn't show up in the\n+                // however, that a re-exported item doesn't show up in the\n                 // `public_items` map, so we can skip inserting into the\n                 // paths map if there was already an entry present and we're\n                 // not a public item.\n@@ -1545,7 +1545,7 @@ impl Context {\n     {\n         // Stripped modules survive the rustdoc passes (i.e. `strip-private`)\n         // if they contain impls for public types. These modules can also\n-        // contain items such as publicly reexported structures.\n+        // contain items such as publicly re-exported structures.\n         //\n         // External crates will provide links to these structures, so\n         // these modules are recursed into, but not rendered normally\n@@ -2008,7 +2008,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n     if cx.shared.sort_modules_alphabetically {\n         indices.sort_by(|&i1, &i2| cmp(&items[i1], &items[i2], i1, i2));\n     }\n-    // This call is to remove reexport duplicates in cases such as:\n+    // This call is to remove re-export duplicates in cases such as:\n     //\n     // ```\n     // pub mod foo {\n@@ -2059,7 +2059,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n             curty = myty;\n             let (short, name) = match myty.unwrap() {\n                 ItemType::ExternCrate |\n-                ItemType::Import          => (\"reexports\", \"Reexports\"),\n+                ItemType::Import          => (\"reexports\", \"Re-exports\"),\n                 ItemType::Module          => (\"modules\", \"Modules\"),\n                 ItemType::Struct          => (\"structs\", \"Structs\"),\n                 ItemType::Union           => (\"unions\", \"Unions\"),\n@@ -3959,7 +3959,7 @@ fn sidebar_module(fmt: &mut fmt::Formatter, _it: &clean::Item,\n                              it.type_() == ItemType::Import) {\n         sidebar.push_str(&format!(\"<li><a href=\\\"#{id}\\\">{name}</a></li>\",\n                                   id = \"reexports\",\n-                                  name = \"Reexports\"));\n+                                  name = \"Re-exports\"));\n     }\n \n     // ordering taken from item_module, reorder, where it prioritized elements in a certain order\n@@ -3972,7 +3972,7 @@ fn sidebar_module(fmt: &mut fmt::Formatter, _it: &clean::Item,\n         if items.iter().any(|it| !it.is_stripped() && it.type_() == myty) {\n             let (short, name) = match myty {\n                 ItemType::ExternCrate |\n-                ItemType::Import          => (\"reexports\", \"Reexports\"),\n+                ItemType::Import          => (\"reexports\", \"Re-exports\"),\n                 ItemType::Module          => (\"modules\", \"Modules\"),\n                 ItemType::Struct          => (\"structs\", \"Structs\"),\n                 ItemType::Union           => (\"unions\", \"Unions\"),"}, {"sha": "1cb52d735bb18317d8c81029f2496b507d32de20", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -55,7 +55,7 @@ pub struct RustdocVisitor<'a, 'tcx: 'a> {\n impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     pub fn new(cstore: &'tcx CrateStore,\n                cx: &'a core::DocContext<'a, 'tcx>) -> RustdocVisitor<'a, 'tcx> {\n-        // If the root is reexported, terminate all recursion.\n+        // If the root is re-exported, terminate all recursion.\n         let mut stack = FxHashSet();\n         stack.insert(ast::CRATE_NODE_ID);\n         RustdocVisitor {\n@@ -214,7 +214,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     let imported_from = self.cx.tcx.original_crate_name(def_id.krate);\n                     let def = match self.cstore.load_macro_untracked(def_id, self.cx.sess()) {\n                         LoadedMacro::MacroDef(macro_def) => macro_def,\n-                        // FIXME(jseyfried): document proc macro reexports\n+                        // FIXME(jseyfried): document proc macro re-exports\n                         LoadedMacro::ProcMacro(..) => continue,\n                     };\n "}, {"sha": "bb38fc550917fb8307d97f2171ee17940ea3b298", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -351,9 +351,9 @@ use prelude::v1::*;\n #[cfg(test)] extern crate test;\n #[cfg(test)] extern crate rand;\n \n-// We want to reexport a few macros from core but libcore has already been\n+// We want to re-export a few macros from core but libcore has already been\n // imported by the compiler (via our #[no_std] attribute) In this case we just\n-// add a new crate name so we can attach the reexports to it.\n+// add a new crate name so we can attach the re-exports to it.\n #[macro_reexport(assert, assert_eq, assert_ne, debug_assert, debug_assert_eq,\n                  debug_assert_ne, unreachable, unimplemented, write, writeln, try)]\n extern crate core as __core;\n@@ -390,7 +390,7 @@ mod macros;\n // The Rust prelude\n pub mod prelude;\n \n-// Public module declarations and reexports\n+// Public module declarations and re-exports\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::any;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "919e033f2b4bdba30aeb8d4372af009545823a49", "filename": "src/libstd/prelude/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibstd%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibstd%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fmod.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -52,7 +52,7 @@\n //! # Prelude contents\n //!\n //! The current version of the prelude (version 1) lives in\n-//! [`std::prelude::v1`], and reexports the following.\n+//! [`std::prelude::v1`], and re-exports the following.\n //!\n //! * [`std::marker`]::{[`Copy`], [`Send`], [`Sized`], [`Sync`]}. The marker\n //!   traits indicate fundamental properties of types."}, {"sha": "feedd4e1abe5f852a37738589ab4071e707616f5", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -14,17 +14,17 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-// Reexported core operators\n+// Re-exported core operators\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use marker::{Copy, Send, Sized, Sync};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use ops::{Drop, Fn, FnMut, FnOnce};\n \n-// Reexported functions\n+// Re-exported functions\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use mem::drop;\n \n-// Reexported types and traits\n+// Re-exported types and traits\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use boxed::Box;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "9dbaf784f89e0b7e2f6bb6d88b366f91c925c976", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -23,7 +23,7 @@\n #![doc(hidden)]\n \n \n-// Reexport some of our utilities which are expected by other crates.\n+// Re-export some of our utilities which are expected by other crates.\n pub use panicking::{begin_panic, begin_panic_fmt, update_panic_count};\n \n // To reduce the generated code of the new `lang_start`, this function is doing"}, {"sha": "b4be4a9691183d595e5a7a04534e1cd0365014bf", "filename": "src/libstd_unicode/char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibstd_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibstd_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Fchar.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -33,15 +33,15 @@ use core::iter::FusedIterator;\n use core::fmt::{self, Write};\n use tables::{conversions, derived_property, general_category, property};\n \n-// stable reexports\n+// stable re-exports\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::char::{MAX, from_digit, from_u32, from_u32_unchecked};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::char::{EscapeDebug, EscapeDefault, EscapeUnicode};\n #[stable(feature = \"char_from_str\", since = \"1.20.0\")]\n pub use core::char::ParseCharError;\n \n-// unstable reexports\n+// unstable re-exports\n #[unstable(feature = \"try_from\", issue = \"33417\")]\n pub use core::char::CharTryFromError;\n #[unstable(feature = \"decode_utf8\", issue = \"33906\")]"}, {"sha": "612d8501fb2afcf49f176a357076f6dfa25ea93d", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -13,7 +13,7 @@ pub use self::SyntaxExtension::*;\n use ast::{self, Attribute, Name, PatKind, MetaItem};\n use attr::HasAttrs;\n use codemap::{self, CodeMap, Spanned, respan};\n-use syntax_pos::{Span, DUMMY_SP};\n+use syntax_pos::{Span, MultiSpan, DUMMY_SP};\n use errors::DiagnosticBuilder;\n use ext::expand::{self, Expansion, Invocation};\n use ext::hygiene::{Mark, SyntaxContext};\n@@ -754,22 +754,22 @@ impl<'a> ExtCtxt<'a> {\n         last_macro\n     }\n \n-    pub fn struct_span_warn(&self,\n-                            sp: Span,\n-                            msg: &str)\n-                            -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_warn<S: Into<MultiSpan>>(&self,\n+                                                sp: S,\n+                                                msg: &str)\n+                                                -> DiagnosticBuilder<'a> {\n         self.parse_sess.span_diagnostic.struct_span_warn(sp, msg)\n     }\n-    pub fn struct_span_err(&self,\n-                           sp: Span,\n-                           msg: &str)\n-                           -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_err<S: Into<MultiSpan>>(&self,\n+                                               sp: S,\n+                                               msg: &str)\n+                                               -> DiagnosticBuilder<'a> {\n         self.parse_sess.span_diagnostic.struct_span_err(sp, msg)\n     }\n-    pub fn struct_span_fatal(&self,\n-                             sp: Span,\n-                             msg: &str)\n-                             -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_fatal<S: Into<MultiSpan>>(&self,\n+                                                 sp: S,\n+                                                 msg: &str)\n+                                                 -> DiagnosticBuilder<'a> {\n         self.parse_sess.span_diagnostic.struct_span_fatal(sp, msg)\n     }\n \n@@ -785,7 +785,7 @@ impl<'a> ExtCtxt<'a> {\n     ///   in most cases one can construct a dummy expression/item to\n     ///   substitute; we never hit resolve/type-checking so the dummy\n     ///   value doesn't have to match anything)\n-    pub fn span_fatal(&self, sp: Span, msg: &str) -> ! {\n+    pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! {\n         panic!(self.parse_sess.span_diagnostic.span_fatal(sp, msg));\n     }\n \n@@ -794,20 +794,20 @@ impl<'a> ExtCtxt<'a> {\n     ///\n     /// Compilation will be stopped in the near future (at the end of\n     /// the macro expansion phase).\n-    pub fn span_err(&self, sp: Span, msg: &str) {\n+    pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.parse_sess.span_diagnostic.span_err(sp, msg);\n     }\n-    pub fn mut_span_err(&self, sp: Span, msg: &str)\n+    pub fn mut_span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str)\n                         -> DiagnosticBuilder<'a> {\n         self.parse_sess.span_diagnostic.mut_span_err(sp, msg)\n     }\n-    pub fn span_warn(&self, sp: Span, msg: &str) {\n+    pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.parse_sess.span_diagnostic.span_warn(sp, msg);\n     }\n-    pub fn span_unimpl(&self, sp: Span, msg: &str) -> ! {\n+    pub fn span_unimpl<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! {\n         self.parse_sess.span_diagnostic.span_unimpl(sp, msg);\n     }\n-    pub fn span_bug(&self, sp: Span, msg: &str) -> ! {\n+    pub fn span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! {\n         self.parse_sess.span_diagnostic.span_bug(sp, msg);\n     }\n     pub fn trace_macros_diag(&mut self) {"}, {"sha": "7f7ff56fd7fbe580132e337c266c9d6e2d792b3e", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -17,7 +17,7 @@ use ext::base::ExtCtxt;\n use ptr::P;\n use symbol::{Symbol, keywords};\n \n-// Transitional reexports so qquote can find the paths it is looking for\n+// Transitional re-exports so qquote can find the paths it is looking for\n mod syntax {\n     pub use ext;\n     pub use parse;"}, {"sha": "0c4bcf4f6c7662fe4e7ae9e7a2a38cf47136d11c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -155,7 +155,7 @@ declare_features! (\n     // OIBIT specific features\n     (active, optin_builtin_traits, \"1.0.0\", Some(13231)),\n \n-    // macro reexport needs more discussion and stabilization\n+    // macro re-export needs more discussion and stabilization\n     (active, macro_reexport, \"1.0.0\", Some(29638)),\n \n     // Allows use of #[staged_api]\n@@ -1479,7 +1479,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::ItemKind::ExternCrate(_) => {\n                 if let Some(attr) = attr::find_by_name(&i.attrs[..], \"macro_reexport\") {\n                     gate_feature_post!(&self, macro_reexport, attr.span,\n-                                       \"macros reexports are experimental \\\n+                                       \"macros re-exports are experimental \\\n                                         and possibly buggy\");\n                 }\n             }"}, {"sha": "3d58104260f9a506e75daa8143db921847aa9113", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -42,7 +42,7 @@ use ast::{BinOpKind, UnOp};\n use ast::{RangeEnd, RangeSyntax};\n use {ast, attr};\n use codemap::{self, CodeMap, Spanned, respan};\n-use syntax_pos::{self, Span, BytePos, FileName, DUMMY_SP};\n+use syntax_pos::{self, Span, MultiSpan, BytePos, FileName, DUMMY_SP};\n use errors::{self, DiagnosticBuilder};\n use parse::{self, classify, token};\n use parse::common::SeqSep;\n@@ -447,7 +447,9 @@ pub enum Error {\n }\n \n impl Error {\n-    pub fn span_err(self, sp: Span, handler: &errors::Handler) -> DiagnosticBuilder {\n+    pub fn span_err<S: Into<MultiSpan>>(self,\n+                                        sp: S,\n+                                        handler: &errors::Handler) -> DiagnosticBuilder {\n         match self {\n             Error::FileNotFoundForModule { ref mod_name,\n                                            ref default_path,\n@@ -1266,13 +1268,16 @@ impl<'a> Parser<'a> {\n     pub fn fatal(&self, m: &str) -> DiagnosticBuilder<'a> {\n         self.sess.span_diagnostic.struct_span_fatal(self.span, m)\n     }\n-    pub fn span_fatal(&self, sp: Span, m: &str) -> DiagnosticBuilder<'a> {\n+    pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, m: &str) -> DiagnosticBuilder<'a> {\n         self.sess.span_diagnostic.struct_span_fatal(sp, m)\n     }\n-    pub fn span_fatal_err(&self, sp: Span, err: Error) -> DiagnosticBuilder<'a> {\n+    pub fn span_fatal_err<S: Into<MultiSpan>>(&self, sp: S, err: Error) -> DiagnosticBuilder<'a> {\n         err.span_err(sp, self.diagnostic())\n     }\n-    pub fn span_fatal_help(&self, sp: Span, m: &str, help: &str) -> DiagnosticBuilder<'a> {\n+    pub fn span_fatal_help<S: Into<MultiSpan>>(&self,\n+                                            sp: S,\n+                                            m: &str,\n+                                            help: &str) -> DiagnosticBuilder<'a> {\n         let mut err = self.sess.span_diagnostic.struct_span_fatal(sp, m);\n         err.help(help);\n         err\n@@ -1283,21 +1288,21 @@ impl<'a> Parser<'a> {\n     pub fn warn(&self, m: &str) {\n         self.sess.span_diagnostic.span_warn(self.span, m)\n     }\n-    pub fn span_warn(&self, sp: Span, m: &str) {\n+    pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, m: &str) {\n         self.sess.span_diagnostic.span_warn(sp, m)\n     }\n-    pub fn span_err(&self, sp: Span, m: &str) {\n+    pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, m: &str) {\n         self.sess.span_diagnostic.span_err(sp, m)\n     }\n-    pub fn struct_span_err(&self, sp: Span, m: &str) -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_err<S: Into<MultiSpan>>(&self, sp: S, m: &str) -> DiagnosticBuilder<'a> {\n         self.sess.span_diagnostic.struct_span_err(sp, m)\n     }\n-    pub fn span_err_help(&self, sp: Span, m: &str, h: &str) {\n+    pub fn span_err_help<S: Into<MultiSpan>>(&self, sp: S, m: &str, h: &str) {\n         let mut err = self.sess.span_diagnostic.mut_span_err(sp, m);\n         err.help(h);\n         err.emit();\n     }\n-    pub fn span_bug(&self, sp: Span, m: &str) -> ! {\n+    pub fn span_bug<S: Into<MultiSpan>>(&self, sp: S, m: &str) -> ! {\n         self.sess.span_diagnostic.span_bug(sp, m)\n     }\n     pub fn abort_if_errors(&self) {"}, {"sha": "a7822414c6959472e856064557b3ac65e47d7b07", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -814,15 +814,11 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n                 let (sp, msg) = errs.into_iter().next().unwrap();\n                 cx.ecx.struct_span_err(sp, msg)\n             } else {\n-                let mut diag = cx.ecx.struct_span_err(cx.fmtsp,\n-                    \"multiple unused formatting arguments\");\n-\n-                // Ignoring message, as it gets repetitive\n-                // Then use MultiSpan to not clutter up errors\n-                for (sp, _) in errs {\n-                    diag.span_label(sp, \"unused\");\n-                }\n-\n+                let mut diag = cx.ecx.struct_span_err(\n+                    errs.iter().map(|&(sp, _)| sp).collect::<Vec<Span>>(),\n+                    \"multiple unused formatting arguments\"\n+                );\n+                diag.span_label(cx.fmtsp, \"multiple unused arguments in this statement\");\n                 diag\n             }\n         };"}, {"sha": "d0c9932e4e20f95ccfdd0836a7e0fee2485e3e09", "filename": "src/test/codegen/issue-47442.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcodegen%2Fissue-47442.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcodegen%2Fissue-47442.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-47442.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// check that we don't emit unneeded `resume` cleanup blocks for every\n+// destructor.\n+\n+// CHECK-NOT: Unwind\n+\n+#![feature(test)]\n+#![crate_type=\"rlib\"]\n+\n+extern crate test;\n+\n+struct Foo {}\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+        test::black_box(());\n+    }\n+}\n+\n+#[no_mangle]\n+pub fn foo() {\n+    let _foo = Foo {};\n+}"}, {"sha": "8b448e401bd2536118d3325513326dcbe01d475d", "filename": "src/test/compile-fail-fulldeps/gated-macro-reexports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-macro-reexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-macro-reexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-macro-reexports.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test that macro reexports item are gated by `macro_reexport` feature gate.\n+// Test that macro re-exports item are gated by `macro_reexport` feature gate.\n \n // aux-build:macro_reexport_1.rs\n // gate-test-macro_reexport\n \n #![crate_type = \"dylib\"]\n \n #[macro_reexport(reexported)]\n-//~^ ERROR macros reexports are experimental and possibly buggy\n+//~^ ERROR macros re-exports are experimental and possibly buggy\n #[macro_use] #[no_link]\n extern crate macro_reexport_1;"}, {"sha": "18a72b0ff9a55a70361236962013d25030088914", "filename": "src/test/compile-fail/E0365.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail%2FE0365.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail%2FE0365.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0365.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -13,6 +13,6 @@ mod foo {\n }\n \n pub use foo as foo2;\n-//~^ ERROR `foo` is private, and cannot be reexported [E0365]\n+//~^ ERROR `foo` is private, and cannot be re-exported [E0365]\n \n fn main() {}"}, {"sha": "73597e51f08021b95ef21278c699300486c58f4d", "filename": "src/test/compile-fail/auxiliary/static_priv_by_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fstatic_priv_by_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fstatic_priv_by_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fstatic_priv_by_default.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -32,7 +32,7 @@ mod foo {\n         fn foo() {}\n     }\n \n-    // these are public so the parent can reexport them.\n+    // these are public so the parent can re-export them.\n     pub static reexported_a: isize = 0;\n     pub fn reexported_b() {}\n     pub struct reexported_c;"}, {"sha": "f50b5b0e849992ed3bb0c12e21d24d6325bf3e3d", "filename": "src/test/compile-fail/imports/reexports.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail%2Fimports%2Freexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail%2Fimports%2Freexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimports%2Freexports.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -13,7 +13,7 @@ mod a {\n     mod foo {}\n \n     mod a {\n-        pub use super::foo; //~ ERROR cannot be reexported\n+        pub use super::foo; //~ ERROR cannot be re-exported\n         pub use super::*; //~ ERROR must import something with the glob's visibility\n     }\n }\n@@ -24,17 +24,17 @@ mod b {\n \n     pub mod a {\n         pub use super::foo; // This is OK since the value `foo` is visible enough.\n-        fn f(_: foo::S) {} // `foo` is imported in the type namespace (but not `pub` reexported).\n+        fn f(_: foo::S) {} // `foo` is imported in the type namespace (but not `pub` re-exported).\n     }\n \n     pub mod b {\n         pub use super::*; // This is also OK since the value `foo` is visible enough.\n-        fn f(_: foo::S) {} // Again, the module `foo` is imported (but not `pub` reexported).\n+        fn f(_: foo::S) {} // Again, the module `foo` is imported (but not `pub` re-exported).\n     }\n }\n \n mod c {\n-    // Test that `foo` is not reexported.\n+    // Test that `foo` is not re-exported.\n     use b::a::foo::S; //~ ERROR `foo`\n     use b::b::foo::S as T; //~ ERROR `foo`\n }"}, {"sha": "f5a20dd96dc902d354c33449dfdfad2dec6178df", "filename": "src/test/compile-fail/issue-46209-private-enum-variant-reexport.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail%2Fissue-46209-private-enum-variant-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail%2Fissue-46209-private-enum-variant-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-46209-private-enum-variant-reexport.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -12,14 +12,14 @@\n \n mod rank {\n     pub use self::Professor::*;\n-    //~^ ERROR enum is private and its variants cannot be reexported\n+    //~^ ERROR enum is private and its variants cannot be re-exported\n     pub use self::Lieutenant::{JuniorGrade, Full};\n-    //~^ ERROR variant `JuniorGrade` is private and cannot be reexported\n-    //~| ERROR variant `Full` is private and cannot be reexported\n+    //~^ ERROR variant `JuniorGrade` is private and cannot be re-exported\n+    //~| ERROR variant `Full` is private and cannot be re-exported\n     pub use self::PettyOfficer::*;\n-    //~^ ERROR enum is private and its variants cannot be reexported\n+    //~^ ERROR enum is private and its variants cannot be re-exported\n     pub use self::Crewman::*;\n-    //~^ ERROR enum is private and its variants cannot be reexported\n+    //~^ ERROR enum is private and its variants cannot be re-exported\n \n     enum Professor {\n         Adjunct,"}, {"sha": "8f0b53fd599713c3519654d6ef236a7f27a7aa1d", "filename": "src/test/compile-fail/lint-unused-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -20,7 +20,7 @@\n \n extern crate lint_unused_extern_crate5; //~ ERROR: unused extern crate\n \n-pub extern crate lint_unused_extern_crate4; // no error, it is reexported\n+pub extern crate lint_unused_extern_crate4; // no error, it is re-exported\n \n extern crate lint_unused_extern_crate3; // no error, it is used\n "}, {"sha": "36a6fce00a13a05f9e6b20607ba30e727ee1606e", "filename": "src/test/compile-fail/macro-reexport-malformed-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-1.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -12,5 +12,5 @@\n #![feature(macro_reexport)]\n \n #[allow(unused_extern_crates)]\n-#[macro_reexport]  //~ ERROR bad macro reexport\n+#[macro_reexport]  //~ ERROR bad macro re-export\n extern crate std;"}, {"sha": "5f741d010de806e0d4910ad5b5887988f8e5d007", "filename": "src/test/compile-fail/macro-reexport-malformed-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-2.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -12,5 +12,5 @@\n #![feature(macro_reexport)]\n \n #[allow(unused_extern_crates)]\n-#[macro_reexport=\"foo\"]  //~ ERROR bad macro reexport\n+#[macro_reexport=\"foo\"]  //~ ERROR bad macro re-export\n extern crate std;"}, {"sha": "1a7e3b918cd966d53b8d68230f1f89556ce74a8c", "filename": "src/test/compile-fail/macro-reexport-malformed-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-3.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -12,5 +12,5 @@\n #![feature(macro_reexport)]\n \n #[allow(unused_extern_crates)]\n-#[macro_reexport(foo=\"bar\")]  //~ ERROR bad macro reexport\n+#[macro_reexport(foo=\"bar\")]  //~ ERROR bad macro re-export\n extern crate std;"}, {"sha": "50ac89e49e08ffab0b0f3590eee6f0bcd66e7c9b", "filename": "src/test/compile-fail/macro-reexport-undef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-undef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-undef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-undef.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -13,7 +13,7 @@\n #![feature(macro_reexport)]\n \n #[macro_use(macro_two)]\n-#[macro_reexport(no_way)] //~ ERROR reexported macro not found\n+#[macro_reexport(no_way)] //~ ERROR re-exported macro not found\n extern crate two_macros;\n \n pub fn main() {"}, {"sha": "95144916fd7852046e6132751c8de6dcc58494e7", "filename": "src/test/compile-fail/privacy/legacy-ctor-visibility.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail%2Fprivacy%2Flegacy-ctor-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail%2Fprivacy%2Flegacy-ctor-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Flegacy-ctor-visibility.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-linelength\n+\n #![allow(unused)]\n \n use m::S;\n@@ -19,7 +21,7 @@ mod m {\n         use S;\n         fn f() {\n             S(10);\n-            //~^ ERROR private struct constructors are not usable through reexports in outer modules\n+            //~^ ERROR private struct constructors are not usable through re-exports in outer modules\n             //~| WARN this was previously accepted\n         }\n     }"}, {"sha": "8c1d609e2446725e28259fe87fcd1f6e8b8b65a8", "filename": "src/test/compile-fail/privacy/restricted/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftest.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -28,7 +28,7 @@ mod foo {\n     fn f() {\n         use foo::bar::S;\n         pub(self) use foo::bar::f; // ok\n-        pub(super) use foo::bar::f as g; //~ ERROR cannot be reexported\n+        pub(super) use foo::bar::f as g; //~ ERROR cannot be re-exported\n         S::default().x; // ok\n         S::default().f(); // ok\n         S::g(); // ok"}, {"sha": "5d770f88155ec9f03f8b24d27d1802d2554b0b21", "filename": "src/test/compile-fail/private-variant-reexport.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -9,19 +9,19 @@\n // except according to those terms.\n \n mod m1 {\n-    pub use ::E::V; //~ ERROR variant `V` is private and cannot be reexported\n+    pub use ::E::V; //~ ERROR variant `V` is private and cannot be re-exported\n }\n \n mod m2 {\n-    pub use ::E::{V}; //~ ERROR variant `V` is private and cannot be reexported\n+    pub use ::E::{V}; //~ ERROR variant `V` is private and cannot be re-exported\n }\n \n mod m3 {\n-    pub use ::E::V::{self}; //~ ERROR variant `V` is private and cannot be reexported\n+    pub use ::E::V::{self}; //~ ERROR variant `V` is private and cannot be re-exported\n }\n \n mod m4 {\n-    pub use ::E::*; //~ ERROR enum is private and its variants cannot be reexported\n+    pub use ::E::*; //~ ERROR enum is private and its variants cannot be re-exported\n }\n \n enum E { V }"}, {"sha": "2e71e007e9eed6f011eab933fd34d33ba47c4f93", "filename": "src/test/compile-fail/pub-reexport-priv-extern-crate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail%2Fpub-reexport-priv-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fcompile-fail%2Fpub-reexport-priv-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpub-reexport-priv-extern-crate.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -11,23 +11,23 @@\n #![allow(unused)]\n \n extern crate core;\n-pub use core as reexported_core; //~ ERROR `core` is private, and cannot be reexported\n+pub use core as reexported_core; //~ ERROR `core` is private, and cannot be re-exported\n                                  //~^ WARN this was previously accepted\n \n mod foo1 {\n     extern crate core;\n }\n \n mod foo2 {\n-    use foo1::core; //~ ERROR `core` is private, and cannot be reexported\n+    use foo1::core; //~ ERROR `core` is private, and cannot be re-exported\n                     //~^ WARN this was previously accepted\n     pub mod bar {\n         extern crate core;\n     }\n }\n \n mod baz {\n-    pub use foo2::bar::core; //~ ERROR `core` is private, and cannot be reexported\n+    pub use foo2::bar::core; //~ ERROR `core` is private, and cannot be re-exported\n                              //~^ WARN this was previously accepted\n }\n "}, {"sha": "210bc4c8320c5f164268d40c4c80457453c097b3", "filename": "src/test/run-make/type-mismatch-same-crate-name/crateC.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateC.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateC.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateC.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -18,7 +18,7 @@\n // compile-fail/type-mismatch-same-crate-name.rs\n // but deals with the case where one of the crates\n // is only introduced as an indirect dependency.\n-// and the type is accessed via a reexport.\n+// and the type is accessed via a re-export.\n // This is similar to how the error can be introduced\n // when using cargo's automatic dependency resolution.\n "}, {"sha": "878d64c3473b103cf05119c65c2c8a596f9b821b", "filename": "src/test/run-pass-fulldeps/auxiliary/lint_for_crate.rs", "status": "modified", "additions": 44, "deletions": 13, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Flint_for_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Flint_for_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Flint_for_crate.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -23,26 +23,57 @@ use rustc_plugin::Registry;\n use rustc::hir;\n use syntax::attr;\n \n-declare_lint!(CRATE_NOT_OKAY, Warn, \"crate not marked with #![crate_okay]\");\n+macro_rules! fake_lint_pass {\n+    ($struct:ident, $lints:expr, $($attr:expr),*) => {\n+        struct $struct;\n+\n+        impl LintPass for $struct {\n+            fn get_lints(&self) -> LintArray {\n+                $lints\n+            }\n+        }\n \n-struct Pass;\n+        impl<'a, 'tcx> LateLintPass<'a, 'tcx> for $struct {\n+            fn check_crate(&mut self, cx: &LateContext, krate: &hir::Crate) {\n+                $(\n+                    if !attr::contains_name(&krate.attrs, $attr) {\n+                        cx.span_lint(CRATE_NOT_OKAY, krate.span,\n+                                     &format!(\"crate is not marked with #![{}]\", $attr));\n+                    }\n+                )*\n+            }\n+        }\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(CRATE_NOT_OKAY)\n     }\n }\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n-    fn check_crate(&mut self, cx: &LateContext, krate: &hir::Crate) {\n-        if !attr::contains_name(&krate.attrs, \"crate_okay\") {\n-            cx.span_lint(CRATE_NOT_OKAY, krate.span,\n-                         \"crate is not marked with #![crate_okay]\");\n-        }\n-    }\n+declare_lint!(CRATE_NOT_OKAY, Warn, \"crate not marked with #![crate_okay]\");\n+declare_lint!(CRATE_NOT_RED, Warn, \"crate not marked with #![crate_red]\");\n+declare_lint!(CRATE_NOT_BLUE, Warn, \"crate not marked with #![crate_blue]\");\n+declare_lint!(CRATE_NOT_GREY, Warn, \"crate not marked with #![crate_grey]\");\n+declare_lint!(CRATE_NOT_GREEN, Warn, \"crate not marked with #![crate_green]\");\n+\n+fake_lint_pass! {\n+    PassOkay,\n+    lint_array!(CRATE_NOT_OKAY), // Single lint\n+    \"crate_okay\"\n+}\n+\n+fake_lint_pass! {\n+    PassRedBlue,\n+    lint_array!(CRATE_NOT_RED, CRATE_NOT_BLUE), // Multiple lints\n+    \"crate_red\", \"crate_blue\"\n+}\n+\n+fake_lint_pass! {\n+    PassGreyGreen,\n+    lint_array!(CRATE_NOT_GREY, CRATE_NOT_GREEN, ), // Trailing comma\n+    \"crate_grey\", \"crate_green\"\n }\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_late_lint_pass(box Pass);\n+    reg.register_late_lint_pass(box PassOkay);\n+    reg.register_late_lint_pass(box PassRedBlue);\n+    reg.register_late_lint_pass(box PassGreyGreen);\n }"}, {"sha": "25800d40e71ae772d9e9abea28a186f342590dde", "filename": "src/test/run-pass-fulldeps/issue-15778-pass.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Frun-pass-fulldeps%2Fissue-15778-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Frun-pass-fulldeps%2Fissue-15778-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-15778-pass.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -15,5 +15,9 @@\n #![feature(plugin, custom_attribute)]\n #![plugin(lint_for_crate)]\n #![crate_okay]\n+#![crate_blue]\n+#![crate_red]\n+#![crate_grey]\n+#![crate_green]\n \n pub fn main() { }"}, {"sha": "f82b04f37c502c988588d82f8312bdbcdc9ed0b0", "filename": "src/test/run-pass/unboxed-closures-prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Tests that the reexports of `FnOnce` et al from the prelude work.\n+// Tests that the re-exports of `FnOnce` et al from the prelude work.\n \n // pretty-expanded FIXME #23616\n "}, {"sha": "5fee36959c23d65ed8d9131084cd0b9843154438", "filename": "src/test/rustdoc/inline_cross/auxiliary/rustdoc-nonreachable-impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Frustdoc-nonreachable-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Frustdoc-nonreachable-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Frustdoc-nonreachable-impls.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -36,7 +36,7 @@ pub mod hidden {\n     pub struct Wobble;\n \n \n-    // these should only be shown if they're reexported correctly\n+    // these should only be shown if they're re-exported correctly\n     impl Qux for ::Foo {}\n     impl Qux for Wobble {}\n     impl ::Bark for Wobble {}"}, {"sha": "9121ce1720c98952f6f9d73189949e4317cf42d6", "filename": "src/test/ui-fulldeps/resolve-error.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui-fulldeps%2Fresolve-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui-fulldeps%2Fresolve-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fresolve-error.stderr?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -38,13 +38,13 @@ error: cannot find macro `FooWithLongNama!` in this scope\n   --> $DIR/resolve-error.rs:62:5\n    |\n 62 |     FooWithLongNama!();\n-   |     ^^^^^^^^^^^^^^^ help: you could try the macro: `FooWithLongNam!`\n+   |     ^^^^^^^^^^^^^^^ help: you could try the macro: `FooWithLongNam`\n \n error: cannot find macro `attr_proc_macra!` in this scope\n   --> $DIR/resolve-error.rs:65:5\n    |\n 65 |     attr_proc_macra!();\n-   |     ^^^^^^^^^^^^^^^ help: you could try the macro: `attr_proc_mac!`\n+   |     ^^^^^^^^^^^^^^^ help: you could try the macro: `attr_proc_mac`\n \n error: cannot find macro `Dlona!` in this scope\n   --> $DIR/resolve-error.rs:68:5\n@@ -56,7 +56,7 @@ error: cannot find macro `bang_proc_macrp!` in this scope\n   --> $DIR/resolve-error.rs:71:5\n    |\n 71 |     bang_proc_macrp!();\n-   |     ^^^^^^^^^^^^^^^ help: you could try the macro: `bang_proc_macro!`\n+   |     ^^^^^^^^^^^^^^^ help: you could try the macro: `bang_proc_macro`\n \n error: aborting due to 10 previous errors\n "}, {"sha": "698005b5d3068a10ddae00340a5e79ffd3f1bc8b", "filename": "src/test/ui/issue-46112.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Fissue-46112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Fissue-46112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46112.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Issue 46112: An extern crate pub reexporting libcore was causing\n+// Issue 46112: An extern crate pub re-exporting libcore was causing\n // paths rooted from `std` to be misrendered in the diagnostic output.\n \n // ignore-windows"}, {"sha": "f294008cfd0d5d35941ec6621bca415e4edb5479", "filename": "src/test/ui/issue-47377.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Fissue-47377.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Fissue-47377.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-47377.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+// ignore-tidy-tab\n+fn main() {\n+ \tlet b = \"hello\";\n+ \tlet _a = b + \", World!\";\n+ \t//~^ ERROR E0369\n+}"}, {"sha": "13b3ff58697834dbc9fb63ccabeb8d7ffa52c80d", "filename": "src/test/ui/issue-47377.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Fissue-47377.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Fissue-47377.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-47377.stderr?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -0,0 +1,12 @@\n+error[E0369]: binary operation `+` cannot be applied to type `&str`\n+  --> $DIR/issue-47377.rs:13:12\n+   |\n+13 |      let _a = b + \", World!\";\n+   |               ^^^^^^^^^^^^^^ `+` can't be used to concatenate two `&str` strings\n+help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   |\n+13 |      let _a = b.to_owned() + \", World!\";\n+   |               ^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "e43a967253ca8f61e39392397ee0e1865f5a4f50", "filename": "src/test/ui/issue-47380.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Fissue-47380.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Fissue-47380.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-47380.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+fn main() {\n+    let b = \"hello\";\n+    println!(\"\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\"); let _a = b + \", World!\";\n+    //~^ ERROR E0369\n+}"}, {"sha": "6c9f79b5a94174a12f002a99b1b523663af7d2fe", "filename": "src/test/ui/issue-47380.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Fissue-47380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Fissue-47380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-47380.stderr?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -0,0 +1,12 @@\n+error[E0369]: binary operation `+` cannot be applied to type `&str`\n+  --> $DIR/issue-47380.rs:12:33\n+   |\n+12 |     println!(\"\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\"); let _a = b + \", World!\";\n+   |                                      ^^^^^^^^^^^^^^ `+` can't be used to concatenate two `&str` strings\n+help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   |\n+12 |     println!(\"\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\"); let _a = b.to_owned() + \", World!\";\n+   |                                      ^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "dfcaede1402da372ac99f6bc1bcd12964503189c", "filename": "src/test/ui/lint/suggestions.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -24,6 +24,16 @@ pub fn defiant<T>(_t: T) {}\n fn rio_grande() {} // should suggest `pub`\n //~^ WARN function is marked\n \n+mod badlands {\n+    // The private-no-mangle lints shouldn't suggest inserting `pub` when the\n+    // item is already `pub` (but triggered the lint because, e.g., it's in a\n+    // private module). (Issue #47383)\n+    #[no_mangle] pub static DAUNTLESS: bool = true;\n+    //~^ WARN static is marked\n+    #[no_mangle] pub fn val_jean() {}\n+    //~^ WARN function is marked\n+}\n+\n struct Equinox {\n     warp_factor: f32,\n }"}, {"sha": "8b30f552d377140a0d49f171ab67e46685819a8b", "filename": "src/test/ui/lint/suggestions.stderr", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -1,7 +1,7 @@\n warning: unnecessary parentheses around assigned value\n-  --> $DIR/suggestions.rs:36:21\n+  --> $DIR/suggestions.rs:46:21\n    |\n-36 |         let mut a = (1); // should suggest no `mut`, no parens\n+46 |         let mut a = (1); // should suggest no `mut`, no parens\n    |                     ^^^ help: remove these parentheses\n    |\n note: lint level defined here\n@@ -11,17 +11,17 @@ note: lint level defined here\n    |                     ^^^^^^^^^^^^^\n \n warning: use of deprecated attribute `no_debug`: the `#[no_debug]` attribute was an experimental feature that has been deprecated due to lack of demand. See https://github.com/rust-lang/rust/issues/29721\n-  --> $DIR/suggestions.rs:31:1\n+  --> $DIR/suggestions.rs:41:1\n    |\n-31 | #[no_debug] // should suggest removal of deprecated attribute\n+41 | #[no_debug] // should suggest removal of deprecated attribute\n    | ^^^^^^^^^^^ help: remove this attribute\n    |\n    = note: #[warn(deprecated)] on by default\n \n warning: variable does not need to be mutable\n-  --> $DIR/suggestions.rs:36:13\n+  --> $DIR/suggestions.rs:46:13\n    |\n-36 |         let mut a = (1); // should suggest no `mut`, no parens\n+46 |         let mut a = (1); // should suggest no `mut`, no parens\n    |             ---^^\n    |             |\n    |             help: remove this `mut`\n@@ -72,18 +72,30 @@ warning: function is marked #[no_mangle], but not exported\n    |\n    = note: #[warn(private_no_mangle_fns)] on by default\n \n+warning: static is marked #[no_mangle], but not exported\n+  --> $DIR/suggestions.rs:31:18\n+   |\n+31 |     #[no_mangle] pub static DAUNTLESS: bool = true;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: function is marked #[no_mangle], but not exported\n+  --> $DIR/suggestions.rs:33:18\n+   |\n+33 |     #[no_mangle] pub fn val_jean() {}\n+   |                  ^^^^^^^^^^^^^^^^^^^^\n+\n warning: denote infinite loops with `loop { ... }`\n-  --> $DIR/suggestions.rs:34:5\n+  --> $DIR/suggestions.rs:44:5\n    |\n-34 |     while true { // should suggest `loop`\n+44 |     while true { // should suggest `loop`\n    |     ^^^^^^^^^^ help: use `loop`\n    |\n    = note: #[warn(while_true)] on by default\n \n warning: the `warp_factor:` in this pattern is redundant\n-  --> $DIR/suggestions.rs:41:23\n+  --> $DIR/suggestions.rs:51:23\n    |\n-41 |             Equinox { warp_factor: warp_factor } => {} // should suggest shorthand\n+51 |             Equinox { warp_factor: warp_factor } => {} // should suggest shorthand\n    |                       ------------^^^^^^^^^^^^\n    |                       |\n    |                       help: remove this"}, {"sha": "ec0eaed43aea650c3cde1f89c108152a3ce452ca", "filename": "src/test/ui/macros/format-foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    println!(\"%.*3$s %s!\\n\", \"Hello,\", \"World\", 4);\n+    println!(\"%.*3$s %s!\\n\", \"Hello,\", \"World\", 4); //~ ERROR multiple unused formatting arguments\n     println!(\"%1$*2$.*3$f\", 123.456); //~ ERROR never used\n \n     // This should *not* produce hints, on the basis that there's equally as"}, {"sha": "f9852c5477332f89eb683e93dddf0debcaeea74a", "filename": "src/test/ui/macros/format-foreign.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -1,12 +1,8 @@\n error: multiple unused formatting arguments\n-  --> $DIR/format-foreign.rs:12:5\n+  --> $DIR/format-foreign.rs:12:30\n    |\n-12 |     println!(\"%.*3$s %s!/n\", \"Hello,\", \"World\", 4);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^--------^^-------^^-^^\n-   |                              |         |        |\n-   |                              |         |        unused\n-   |                              |         unused\n-   |                              unused\n+12 |     println!(\"%.*3$s %s!/n\", \"Hello,\", \"World\", 4); //~ ERROR multiple unused formatting arguments\n+   |     -------------------------^^^^^^^^--^^^^^^^--^-- multiple unused arguments in this statement\n    |\n    = help: `%.*3$s` should be written as `{:.2$}`\n    = help: `%s` should be written as `{}`"}, {"sha": "3347a1215cede357b131ecf2d4e5b3a9b2e17388", "filename": "src/test/ui/macros/format-unused-lables.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -10,17 +10,18 @@\n \n fn main() {\n     println!(\"Test\", 123, 456, 789);\n+    //~^ ERROR multiple unused formatting arguments\n \n     println!(\"Test2\",\n-        123,\n+        123,  //~ ERROR multiple unused formatting arguments\n         456,\n         789\n     );\n \n     println!(\"Some stuff\", UNUSED=\"args\"); //~ ERROR named argument never used\n \n     println!(\"Some more $STUFF\",\n-        \"woo!\",\n+        \"woo!\",  //~ ERROR multiple unused formatting arguments\n             STUFF=\n        \"things\"\n              , UNUSED=\"args\");"}, {"sha": "64ea5626c1d62776bbd2146becb7af161228410e", "filename": "src/test/ui/macros/format-unused-lables.stderr", "status": "modified", "additions": 23, "deletions": 29, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -1,49 +1,43 @@\n error: multiple unused formatting arguments\n-  --> $DIR/format-unused-lables.rs:12:5\n+  --> $DIR/format-unused-lables.rs:12:22\n    |\n 12 |     println!(\"Test\", 123, 456, 789);\n-   |     ^^^^^^^^^^^^^^^^^---^^---^^---^^\n-   |                      |    |    |\n-   |                      |    |    unused\n-   |                      |    unused\n-   |                      unused\n+   |     -----------------^^^--^^^--^^^-- multiple unused arguments in this statement\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: multiple unused formatting arguments\n-  --> $DIR/format-unused-lables.rs:14:5\n+  --> $DIR/format-unused-lables.rs:16:9\n    |\n-14 | /     println!(\"Test2\",\n-15 | |         123,\n-   | |         --- unused\n-16 | |         456,\n-   | |         --- unused\n-17 | |         789\n-   | |         --- unused\n-18 | |     );\n-   | |______^\n+15 | /     println!(\"Test2\",\n+16 | |         123,  //~ ERROR multiple unused formatting arguments\n+   | |         ^^^\n+17 | |         456,\n+   | |         ^^^\n+18 | |         789\n+   | |         ^^^\n+19 | |     );\n+   | |______- multiple unused arguments in this statement\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: named argument never used\n-  --> $DIR/format-unused-lables.rs:20:35\n+  --> $DIR/format-unused-lables.rs:21:35\n    |\n-20 |     println!(\"Some stuff\", UNUSED=\"args\"); //~ ERROR named argument never used\n+21 |     println!(\"Some stuff\", UNUSED=\"args\"); //~ ERROR named argument never used\n    |                                   ^^^^^^\n \n error: multiple unused formatting arguments\n-  --> $DIR/format-unused-lables.rs:22:5\n+  --> $DIR/format-unused-lables.rs:24:9\n    |\n-22 | /     println!(\"Some more $STUFF\",\n-23 | |         \"woo!\",\n-   | |         ------ unused\n-24 | |             STUFF=\n-25 | |        \"things\"\n-   | |        -------- unused\n-26 | |              , UNUSED=\"args\");\n-   | |_______________________------_^\n-   |                         |\n-   |                         unused\n+23 | /     println!(\"Some more $STUFF\",\n+24 | |         \"woo!\",  //~ ERROR multiple unused formatting arguments\n+   | |         ^^^^^^\n+25 | |             STUFF=\n+26 | |        \"things\"\n+   | |        ^^^^^^^^\n+27 | |              , UNUSED=\"args\");\n+   | |_______________________^^^^^^_- multiple unused arguments in this statement\n    |\n    = help: `$STUFF` should be written as `{STUFF}`\n    = note: shell formatting not supported; see the documentation for `std::fmt`"}, {"sha": "ebe95356c26ebd0fe0aeb74044eefe215fdd1078", "filename": "src/test/ui/macros/macro-name-typo.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Fmacros%2Fmacro-name-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Fmacros%2Fmacro-name-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-name-typo.stderr?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -2,7 +2,7 @@ error: cannot find macro `printlx!` in this scope\n   --> $DIR/macro-name-typo.rs:12:5\n    |\n 12 |     printlx!(\"oh noes!\"); //~ ERROR cannot find\n-   |     ^^^^^^^ help: you could try the macro: `println!`\n+   |     ^^^^^^^ help: you could try the macro: `println`\n \n error: aborting due to previous error\n "}, {"sha": "8d6da6a4732fc9a71e38181a923f1faeb2ebc196", "filename": "src/test/ui/macros/macro_undefined.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Fmacros%2Fmacro_undefined.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Fmacros%2Fmacro_undefined.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro_undefined.stderr?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -10,7 +10,7 @@ error: cannot find macro `k!` in this scope\n   --> $DIR/macro_undefined.rs:21:5\n    |\n 21 |     k!(); //~ ERROR cannot find\n-   |     ^ help: you could try the macro: `kl!`\n+   |     ^ help: you could try the macro: `kl`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8688bfa86dc6f069af46c5320f0c470c54fa78f3", "filename": "src/test/ui/nll/borrowed-match-issue-45045.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for issue #45045\n+\n+#![feature(nll)]\n+\n+enum Xyz {\n+    A,\n+    B,\n+}\n+\n+fn main() {\n+    let mut e = Xyz::A;\n+    let f = &mut e;\n+    let g = f;\n+    match e {\n+        Xyz::A => println!(\"a\"),\n+        //~^ cannot use `e` because it was mutably borrowed [E0503]\n+        Xyz::B => println!(\"b\"),\n+    };\n+    *g = Xyz::B;\n+}"}, {"sha": "15ca30010a55d55d842d95a8e66ea5827a97522b", "filename": "src/test/ui/nll/borrowed-match-issue-45045.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -0,0 +1,11 @@\n+error[E0503]: cannot use `e` because it was mutably borrowed\n+  --> $DIR/borrowed-match-issue-45045.rs:25:9\n+   |\n+22 |     let f = &mut e;\n+   |             ------ borrow of `e` occurs here\n+...\n+25 |         Xyz::A => println!(\"a\"),\n+   |         ^^^^^^ use of borrowed `e`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ff662736bdd1b7f004a5a178587cf4167243edc4", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -41,9 +41,13 @@ impl EarlyProps {\n         iter_header(testfile,\n                     None,\n                     &mut |ln| {\n+            // we should check if any only-<platform> exists and if it exists\n+            // and does not matches the current platform, skip the test\n             props.ignore =\n                 props.ignore ||\n                 config.parse_cfg_name_directive(ln, \"ignore\") ||\n+                (config.has_cfg_prefix(ln, \"only\") &&\n+                !config.parse_cfg_name_directive(ln, \"only\")) ||\n                 ignore_gdb(config, ln) ||\n                 ignore_lldb(config, ln) ||\n                 ignore_llvm(config, ln);\n@@ -564,6 +568,13 @@ impl Config {\n         }\n     }\n \n+    fn has_cfg_prefix(&self, line: &str, prefix: &str) -> bool {\n+        // returns whether this line contains this prefix or not. For prefix\n+        // \"ignore\", returns true if line says \"ignore-x86_64\", \"ignore-arch\",\n+        // \"ignore-andorid\" etc.\n+        line.starts_with(prefix) && line.as_bytes().get(prefix.len()) == Some(&b'-')\n+    }\n+\n     fn parse_name_directive(&self, line: &str, directive: &str) -> bool {\n         // Ensure the directive is a whole word. Do not match \"ignore-x86\" when\n         // the line says \"ignore-x86_64\"."}, {"sha": "f6eaa09f55d9937a24ac414906e49cfc52fb1d30", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9c784751434c70ddd6719ccda6817c819126f9/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -192,7 +192,17 @@ fn check(cache: &mut Cache,\n             for part in Path::new(base).join(url).components() {\n                 match part {\n                     Component::Prefix(_) |\n-                    Component::RootDir => panic!(),\n+                    Component::RootDir => {\n+                        // Avoid absolute paths as they make the docs not\n+                        // relocatable by making assumptions on where the docs\n+                        // are hosted relative to the site root.\n+                        *errors = true;\n+                        println!(\"{}:{}: absolute path - {}\",\n+                                 pretty_file.display(),\n+                                 i + 1,\n+                                 Path::new(base).join(url).display());\n+                        return;\n+                    }\n                     Component::CurDir => {}\n                     Component::ParentDir => { path.pop(); }\n                     Component::Normal(s) => { path.push(s); }"}, {"sha": "b55e0fc77590cf5d23a01dedeb2104d8cbb48efc", "filename": "src/tools/rust-installer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-installer?ref=0f9c784751434c70ddd6719ccda6817c819126f9", "patch": "@@ -1 +1 @@\n-Subproject commit 745a020e924c0532b01e8f017ed72820913642ee\n+Subproject commit b55e0fc77590cf5d23a01dedeb2104d8cbb48efc"}]}