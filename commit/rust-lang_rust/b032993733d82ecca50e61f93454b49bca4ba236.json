{"sha": "b032993733d82ecca50e61f93454b49bca4ba236", "node_id": "C_kwDOAAsO6NoAKGIwMzI5OTM3MzNkODJlY2NhNTBlNjFmOTM0NTRiNDliY2E0YmEyMzY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-05T22:34:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-05T22:34:59Z"}, "message": "Merge #11629\n\n11629: fix: Fix macro-calls expanding to items in if/while conditions r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/11617\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "b9bb0adeceb41066f2e28af7a5c064793894b5fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9bb0adeceb41066f2e28af7a5c064793894b5fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b032993733d82ecca50e61f93454b49bca4ba236", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiI+WTCRBK7hj4Ov3rIwAAhs0IAGzxDIugJ7zAHD5eqKdiyfFc\nYwn+b6y6DK+y9vEgIHfFtXenKxoHJ+zbvLWHKskFYge8hmvidzthYtwy4uPYLrBq\nt6P9Tr1v5UBCdv9250POPf9l/2Evqjq2gNIoePSIobKc9gQ61WDLXrx96TpVfMnS\nOzHUyFfoCuTnUDXIePvDtin42uR6x3L3NPvu9bTE8GcAiQdW4CAyV7dgcQETpmWl\nUIwEQBoKtkqJ1gPitKhY2szTh/VuAWpxw1sPeZ7IY5UurTsvEYRLNSd9IOchL3QB\nTBraip1Lx4pNZ5OFb1IW0FSWidUOGiu6vItezm3q9pl9AMrHrhqb1hS0QyC3L4E=\n=vPwj\n-----END PGP SIGNATURE-----\n", "payload": "tree b9bb0adeceb41066f2e28af7a5c064793894b5fe\nparent 8f504dc87384b0fa41a55327566f0db9c08eb98c\nparent a148c49f1c5b1e30dfc112edbf79ca4cbabc5946\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1646519699 +0000\ncommitter GitHub <noreply@github.com> 1646519699 +0000\n\nMerge #11629\n\n11629: fix: Fix macro-calls expanding to items in if/while conditions r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/11617\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b032993733d82ecca50e61f93454b49bca4ba236", "html_url": "https://github.com/rust-lang/rust/commit/b032993733d82ecca50e61f93454b49bca4ba236", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b032993733d82ecca50e61f93454b49bca4ba236/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f504dc87384b0fa41a55327566f0db9c08eb98c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f504dc87384b0fa41a55327566f0db9c08eb98c", "html_url": "https://github.com/rust-lang/rust/commit/8f504dc87384b0fa41a55327566f0db9c08eb98c"}, {"sha": "a148c49f1c5b1e30dfc112edbf79ca4cbabc5946", "url": "https://api.github.com/repos/rust-lang/rust/commits/a148c49f1c5b1e30dfc112edbf79ca4cbabc5946", "html_url": "https://github.com/rust-lang/rust/commit/a148c49f1c5b1e30dfc112edbf79ca4cbabc5946"}], "stats": {"total": 52, "additions": 30, "deletions": 22}, "files": [{"sha": "ca337bd00579daffbac408745d0c2e9d9d13f633", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b032993733d82ecca50e61f93454b49bca4ba236/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b032993733d82ecca50e61f93454b49bca4ba236/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=b032993733d82ecca50e61f93454b49bca4ba236", "patch": "@@ -507,14 +507,14 @@ impl ExprCollector<'_> {\n             }\n             ast::Expr::MacroCall(e) => {\n                 let macro_ptr = AstPtr::new(&e);\n-                let mut ids = vec![];\n+                let mut ids = None;\n                 self.collect_macro_call(e, macro_ptr, true, |this, expansion| {\n-                    ids.push(match expansion {\n+                    ids.get_or_insert(match expansion {\n                         Some(it) => this.collect_expr(it),\n                         None => this.alloc_expr(Expr::Missing, syntax_ptr.clone()),\n-                    })\n+                    });\n                 });\n-                ids[0]\n+                ids.unwrap_or_else(|| self.alloc_expr(Expr::Missing, syntax_ptr.clone()))\n             }\n             ast::Expr::MacroStmts(e) => {\n                 e.statements().for_each(|s| self.collect_stmt(s));\n@@ -531,16 +531,16 @@ impl ExprCollector<'_> {\n \n     fn collect_macro_call<F: FnMut(&mut Self, Option<T>), T: ast::AstNode>(\n         &mut self,\n-        e: ast::MacroCall,\n+        mcall: ast::MacroCall,\n         syntax_ptr: AstPtr<ast::MacroCall>,\n         record_diagnostics: bool,\n         mut collector: F,\n     ) {\n         // File containing the macro call. Expansion errors will be attached here.\n         let outer_file = self.expander.current_file_id;\n \n-        let macro_call = self.expander.to_source(AstPtr::new(&e));\n-        let res = self.expander.enter_expand(self.db, e);\n+        let macro_call_ptr = self.expander.to_source(AstPtr::new(&mcall));\n+        let res = self.expander.enter_expand(self.db, mcall);\n \n         let res = match res {\n             Ok(res) => res,\n@@ -575,7 +575,7 @@ impl ExprCollector<'_> {\n \n         match res.value {\n             Some((mark, expansion)) => {\n-                self.source_map.expansions.insert(macro_call, self.expander.current_file_id);\n+                self.source_map.expansions.insert(macro_call_ptr, self.expander.current_file_id);\n \n                 let id = collector(self, Some(expansion));\n                 self.expander.exit(self.db, mark);"}, {"sha": "bdb01ca17017e567df47192dfa5ef6398c9b2f92", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b032993733d82ecca50e61f93454b49bca4ba236/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b032993733d82ecca50e61f93454b49bca4ba236/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=b032993733d82ecca50e61f93454b49bca4ba236", "patch": "@@ -890,19 +890,27 @@ impl ExpandTo {\n             MACRO_PAT => ExpandTo::Pattern,\n             MACRO_TYPE => ExpandTo::Type,\n \n-            ARG_LIST | TRY_EXPR | TUPLE_EXPR | PAREN_EXPR | ARRAY_EXPR | FOR_EXPR | PATH_EXPR\n-            | CLOSURE_EXPR | BREAK_EXPR | RETURN_EXPR | MATCH_EXPR | MATCH_ARM | MATCH_GUARD\n-            | RECORD_EXPR_FIELD | CALL_EXPR | INDEX_EXPR | METHOD_CALL_EXPR | FIELD_EXPR\n-            | AWAIT_EXPR | CAST_EXPR | REF_EXPR | PREFIX_EXPR | RANGE_EXPR | BIN_EXPR\n-            | LET_EXPR => ExpandTo::Expr,\n-            LET_STMT => {\n-                // FIXME: Handle LHS Pattern\n-                ExpandTo::Expr\n-            }\n-\n+            ARG_LIST | ARRAY_EXPR | AWAIT_EXPR | BIN_EXPR | BREAK_EXPR | CALL_EXPR | CAST_EXPR\n+            | CLOSURE_EXPR | FIELD_EXPR | FOR_EXPR | IF_EXPR | INDEX_EXPR | LET_EXPR\n+            | MATCH_ARM | MATCH_EXPR | MATCH_GUARD | METHOD_CALL_EXPR | PAREN_EXPR | PATH_EXPR\n+            | PREFIX_EXPR | RANGE_EXPR | RECORD_EXPR_FIELD | REF_EXPR | RETURN_EXPR | TRY_EXPR\n+            | TUPLE_EXPR | WHILE_EXPR => ExpandTo::Expr,\n             _ => {\n-                // Unknown , Just guess it is `Items`\n-                ExpandTo::Items\n+                match ast::LetStmt::cast(parent) {\n+                    Some(let_stmt) => {\n+                        if let Some(true) = let_stmt.initializer().map(|it| it.syntax() == syn) {\n+                            ExpandTo::Expr\n+                        } else if let Some(true) = let_stmt.ty().map(|it| it.syntax() == syn) {\n+                            ExpandTo::Type\n+                        } else {\n+                            ExpandTo::Pattern\n+                        }\n+                    }\n+                    None => {\n+                        // Unknown , Just guess it is `Items`\n+                        ExpandTo::Items\n+                    }\n+                }\n             }\n         }\n     }"}, {"sha": "a61175f273350b4e291666f9c482768ad5f6062f", "filename": "crates/hir_ty/src/tests/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b032993733d82ecca50e61f93454b49bca4ba236/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b032993733d82ecca50e61f93454b49bca4ba236/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=b032993733d82ecca50e61f93454b49bca4ba236", "patch": "@@ -190,14 +190,14 @@ fn expr_macro_def_expanded_in_various_places() {\n             !0..6 '1isize': isize\n             !0..6 '1isize': isize\n             !0..6 '1isize': isize\n+            !0..6 '1isize': isize\n             39..442 '{     ...!(); }': ()\n             73..94 'spam!(...am!())': {unknown}\n             100..119 'for _ ...!() {}': ()\n             104..105 '_': {unknown}\n             117..119 '{}': ()\n             124..134 '|| spam!()': || -> isize\n             140..156 'while ...!() {}': ()\n-            146..153 'spam!()': bool\n             154..156 '{}': ()\n             161..174 'break spam!()': !\n             180..194 'return spam!()': !\n@@ -271,14 +271,14 @@ fn expr_macro_rules_expanded_in_various_places() {\n             !0..6 '1isize': isize\n             !0..6 '1isize': isize\n             !0..6 '1isize': isize\n+            !0..6 '1isize': isize\n             53..456 '{     ...!(); }': ()\n             87..108 'spam!(...am!())': {unknown}\n             114..133 'for _ ...!() {}': ()\n             118..119 '_': {unknown}\n             131..133 '{}': ()\n             138..148 '|| spam!()': || -> isize\n             154..170 'while ...!() {}': ()\n-            160..167 'spam!()': bool\n             168..170 '{}': ()\n             175..188 'break spam!()': !\n             194..208 'return spam!()': !"}]}