{"sha": "6b6f89b0ecf7dcde1a03cc5f61fe0767befadd5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNmY4OWIwZWNmN2RjZGUxYTAzY2M1ZjYxZmUwNzY3YmVmYWRkNWY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-11-12T14:05:03Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-11-12T14:05:03Z"}, "message": "rt: Delete more C++", "tree": {"sha": "e309f6f0c5219bc19c5ef2d54992d426f3ee2b1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e309f6f0c5219bc19c5ef2d54992d426f3ee2b1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b6f89b0ecf7dcde1a03cc5f61fe0767befadd5f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b6f89b0ecf7dcde1a03cc5f61fe0767befadd5f", "html_url": "https://github.com/rust-lang/rust/commit/6b6f89b0ecf7dcde1a03cc5f61fe0767befadd5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b6f89b0ecf7dcde1a03cc5f61fe0767befadd5f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11b07847e6e75bfd26efe85f8c60f53fcc55a631", "url": "https://api.github.com/repos/rust-lang/rust/commits/11b07847e6e75bfd26efe85f8c60f53fcc55a631", "html_url": "https://github.com/rust-lang/rust/commit/11b07847e6e75bfd26efe85f8c60f53fcc55a631"}], "stats": {"total": 151, "additions": 10, "deletions": 141}, "files": [{"sha": "90042491d1d00ac9d087558a87c3f97157b6622c", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6b6f89b0ecf7dcde1a03cc5f61fe0767befadd5f/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6b6f89b0ecf7dcde1a03cc5f61fe0767befadd5f/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=6b6f89b0ecf7dcde1a03cc5f61fe0767befadd5f", "patch": "@@ -10,7 +10,6 @@\n \n /* Foreign builtins. */\n \n-#include \"rust_util.h\"\n #include \"sync/lock_and_signal.h\"\n #include \"vg/valgrind.h\"\n \n@@ -234,6 +233,16 @@ precise_time_ns(uint64_t *ns) {\n #endif\n }\n \n+struct\n+rust_vec\n+{\n+    size_t fill;    // in bytes; if zero, heapified\n+    size_t alloc;   // in bytes\n+    uint8_t data[0];\n+};\n+\n+typedef rust_vec rust_str;\n+\n struct rust_tm {\n     int32_t tm_sec;\n     int32_t tm_min;"}, {"sha": "631745e656a3c5a5aa421b682fde418080144d54", "filename": "src/rt/rust_test_helpers.cpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b6f89b0ecf7dcde1a03cc5f61fe0767befadd5f/src%2Frt%2Frust_test_helpers.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6b6f89b0ecf7dcde1a03cc5f61fe0767befadd5f/src%2Frt%2Frust_test_helpers.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_test_helpers.cpp?ref=6b6f89b0ecf7dcde1a03cc5f61fe0767befadd5f", "patch": "@@ -10,7 +10,6 @@\n \n // Helper functions used only in tests\n \n-#include \"rust_util.h\"\n #include \"sync/lock_and_signal.h\"\n \n // These functions are used in the unit tests for C ABI calls."}, {"sha": "fe3c946a40b30de69e9a8ebbb973ecf17c0cd4f9", "filename": "src/rt/rust_type.h", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/11b07847e6e75bfd26efe85f8c60f53fcc55a631/src%2Frt%2Frust_type.h", "raw_url": "https://github.com/rust-lang/rust/raw/11b07847e6e75bfd26efe85f8c60f53fcc55a631/src%2Frt%2Frust_type.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_type.h?ref=11b07847e6e75bfd26efe85f8c60f53fcc55a631", "patch": "@@ -1,81 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-#ifndef RUST_TYPE_H\n-#define RUST_TYPE_H\n-\n-#include \"rust_globals.h\"\n-\n-struct rust_opaque_box;\n-\n-// The type of functions that we spawn, which fall into two categories:\n-// - the main function: has a NULL environment, but uses the void* arg\n-// - unique closures of type fn~(): have a non-NULL environment, but\n-//   no arguments (and hence the final void*) is harmless\n-typedef void (*CDECL spawn_fn)(rust_opaque_box*, void *);\n-\n-struct type_desc;\n-\n-typedef void CDECL (glue_fn)(void *,\n-                             void *);\n-\n-typedef unsigned long ref_cnt_t;\n-\n-// Corresponds to the boxed data in the @ region.  The body follows the\n-// header; you can obtain a ptr via box_body() below.\n-struct rust_opaque_box {\n-    ref_cnt_t ref_count;\n-    type_desc *td;\n-    rust_opaque_box *prev;\n-    rust_opaque_box *next;\n-};\n-\n-// corresponds to the layout of a &fn(), @fn(), ~fn() etc\n-struct fn_env_pair {\n-    spawn_fn f;\n-    rust_opaque_box *env;\n-};\n-\n-static inline void *box_body(rust_opaque_box *box) {\n-    // Here we take advantage of the fact that the size of a box in 32\n-    // (resp. 64) bit is 16 (resp. 32) bytes, and thus always 16-byte aligned.\n-    // If this were to change, we would have to update the method\n-    // rustc::middle::trans::base::opaque_box_body() as well.\n-    return (void*)(box + 1);\n-}\n-\n-struct slice {\n-    void *data;\n-    size_t length;\n-};\n-\n-struct type_desc {\n-    size_t size;\n-    size_t align;\n-    glue_fn *take_glue;\n-    glue_fn *drop_glue;\n-    glue_fn *free_glue;\n-    glue_fn *visit_glue;\n-    size_t borrow_offset;\n-    slice name;\n-};\n-\n-#endif\n-\n-//\n-// Local Variables:\n-// mode: C++\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// End:\n-//"}, {"sha": "95f4bec02e95ce97d68b5e7cd60e953a372ba816", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b6f89b0ecf7dcde1a03cc5f61fe0767befadd5f/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6b6f89b0ecf7dcde1a03cc5f61fe0767befadd5f/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=6b6f89b0ecf7dcde1a03cc5f61fe0767befadd5f", "patch": "@@ -17,7 +17,6 @@\n  */\n \n #include \"rust_globals.h\"\n-#include \"rust_util.h\"\n \n //Unwinding ABI declarations.\n typedef int _Unwind_Reason_Code;"}, {"sha": "bd3258c24f99cf4deda606774430f5f2aeb6e5c3", "filename": "src/rt/rust_util.h", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/11b07847e6e75bfd26efe85f8c60f53fcc55a631/src%2Frt%2Frust_util.h", "raw_url": "https://github.com/rust-lang/rust/raw/11b07847e6e75bfd26efe85f8c60f53fcc55a631/src%2Frt%2Frust_util.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_util.h?ref=11b07847e6e75bfd26efe85f8c60f53fcc55a631", "patch": "@@ -1,57 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#ifndef RUST_UTIL_H\n-#define RUST_UTIL_H\n-\n-#include <limits.h>\n-#include \"rust_type.h\"\n-\n-// Inline fn used regularly elsewhere.\n-\n-// Rounds |size| to the nearest |alignment|. Invariant: |alignment| is a power\n-// of two.\n-template<typename T>\n-static inline T\n-align_to(T size, size_t alignment) {\n-    assert(alignment);\n-    T x = (T)(((uintptr_t)size + alignment - 1) & ~(alignment - 1));\n-    return x;\n-}\n-\n-// Interior vectors (rust-user-code level).\n-\n-struct\n-rust_vec\n-{\n-    size_t fill;    // in bytes; if zero, heapified\n-    size_t alloc;   // in bytes\n-    uint8_t data[0];\n-};\n-\n-typedef rust_vec rust_str;\n-\n-inline size_t get_box_size(size_t body_size, size_t body_align) {\n-    size_t header_size = sizeof(rust_opaque_box);\n-    size_t total_size = align_to(header_size, body_align) + body_size;\n-    return total_size;\n-}\n-\n-//\n-// Local Variables:\n-// mode: C++\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// End:\n-//\n-\n-#endif"}]}