{"sha": "6f8f70624b99460481af25764b9e02d2c67b42c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmOGY3MDYyNGI5OTQ2MDQ4MWFmMjU3NjRiOWUwMmQyYzY3YjQyYzU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-15T17:37:01Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-18T19:03:04Z"}, "message": "Surround types with backticks in type errors", "tree": {"sha": "40d1ab1edc1467a88502032f5e8d0b1c870fd252", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40d1ab1edc1467a88502032f5e8d0b1c870fd252"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f8f70624b99460481af25764b9e02d2c67b42c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f8f70624b99460481af25764b9e02d2c67b42c5", "html_url": "https://github.com/rust-lang/rust/commit/6f8f70624b99460481af25764b9e02d2c67b42c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f8f70624b99460481af25764b9e02d2c67b42c5/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94c642546497dd4c04609bd6dbe7631fb56df1fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/94c642546497dd4c04609bd6dbe7631fb56df1fa", "html_url": "https://github.com/rust-lang/rust/commit/94c642546497dd4c04609bd6dbe7631fb56df1fa"}], "stats": {"total": 2172, "additions": 1086, "deletions": 1086}, "files": [{"sha": "8e3ae0864aa0e043cf2a7fee5a17ab6c6941de29", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -222,8 +222,8 @@ impl<'tcx> ty::TyS<'tcx> {\n     pub fn sort_string(&self, tcx: TyCtxt<'_>) -> Cow<'static, str> {\n         match self.kind {\n             ty::Bool | ty::Char | ty::Int(_) |\n-            ty::Uint(_) | ty::Float(_) | ty::Str | ty::Never => format!(\"{}\", self).into(),\n-            ty::Tuple(ref tys) if tys.is_empty() => format!(\"{}\", self).into(),\n+            ty::Uint(_) | ty::Float(_) | ty::Str | ty::Never => format!(\"`{}`\", self).into(),\n+            ty::Tuple(ref tys) if tys.is_empty() => format!(\"`{}`\", self).into(),\n \n             ty::Adt(def, _) => format!(\"{} `{}`\", def.descr(), tcx.def_path_str(def.did)).into(),\n             ty::Foreign(def_id) => format!(\"extern type `{}`\", tcx.def_path_str(def_id)).into(),\n@@ -244,7 +244,7 @@ impl<'tcx> ty::TyS<'tcx> {\n                 if tymut_string != \"_\" && (\n                     ty.is_simple_text() || tymut_string.len() < \"mutable reference\".len()\n                 ) {\n-                    format!(\"&{}\", tymut_string).into()\n+                    format!(\"`&{}`\", tymut_string).into()\n                 } else { // Unknown type name, it's long or has type arguments\n                     match mutbl {\n                         hir::Mutability::Mutable => \"mutable reference\",\n@@ -256,7 +256,7 @@ impl<'tcx> ty::TyS<'tcx> {\n             ty::FnPtr(_) => \"fn pointer\".into(),\n             ty::Dynamic(ref inner, ..) => {\n                 if let Some(principal) = inner.principal() {\n-                    format!(\"trait {}\", tcx.def_path_str(principal.def_id())).into()\n+                    format!(\"trait `{}`\", tcx.def_path_str(principal.def_id())).into()\n                 } else {\n                     \"trait\".into()\n                 }"}, {"sha": "276fc8c1dec0fd4da10e9b60db805bdad0f2b7d3", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -209,7 +209,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     //   LL | impl Bar for Foo {\n                     //      | ---------------- in this `impl` item\n                     //   LL |     type Ok = ();\n-                    //      |     ^^^^^^^^^^^^^ expected u32, found ()\n+                    //      |     ^^^^^^^^^^^^^ expected `u32`, found `()`\n                     //      |\n                     //      = note: expected type `u32`\n                     //                 found type `()`\n@@ -228,7 +228,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     //   LL | impl Bar for Foo {\n                     //      | ---------------- in this `impl` item\n                     //   LL |     type Ok = ();\n-                    //      |     ^^^^^^^^^^^^^ expected u32, found ()\n+                    //      |     ^^^^^^^^^^^^^ expected `u32`, found `()`\n                     //   ...\n                     //   LL | impl Bar2 for Foo2 {\n                     //      | ---------------- in this `impl` item"}, {"sha": "6b34159066a3098b1740c0621fe8cf68bfca436e", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -285,7 +285,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             //    ||         ----- expected because of this\n             // LL ||     } else {\n             // LL ||         10u32\n-            //    ||         ^^^^^ expected i32, found u32\n+            //    ||         ^^^^^ expected `i32`, found `u32`\n             // LL ||     };\n             //    ||_____- if and else have incompatible types\n             // ```\n@@ -294,7 +294,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // The entire expression is in one line, only point at the arms\n             // ```\n             // LL |     let x = if true { 10i32 } else { 10u32 };\n-            //    |                       -----          ^^^^^ expected i32, found u32\n+            //    |                       -----          ^^^^^ expected `i32`, found `u32`\n             //    |                       |\n             //    |                       expected because of this\n             // ```\n@@ -323,7 +323,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 //   | ||     ^\n                 //   | ||_____|\n                 //   | |______if and else have incompatible types\n-                //   |        expected integer, found ()\n+                //   |        expected integer, found `()`\n                 // ```\n                 // by not pointing at the entire expression:\n                 // ```\n@@ -335,7 +335,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 //   |  ____________^\n                 // 5 | |\n                 // 6 | |     };\n-                //   | |_____^ expected integer, found ()\n+                //   | |_____^ expected integer, found `()`\n                 // ```\n                 if outer_sp.is_some() {\n                     outer_sp = Some(self.tcx.sess.source_map().def_span(span));"}, {"sha": "bba30ebbbe7bb41eb0e0c65d39e19f213bdc688d", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -47,7 +47,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// 4 |    let temp: usize = match a + b {\n     ///   |                            ----- this expression has type `usize`\n     /// 5 |         Ok(num) => num,\n-    ///   |         ^^^^^^^ expected usize, found enum `std::result::Result`\n+    ///   |         ^^^^^^^ expected `usize`, found enum `std::result::Result`\n     ///   |\n     ///   = note: expected type `usize`\n     ///              found type `std::result::Result<_, _>`"}, {"sha": "9d486d0a661e975f3f80adcf9fd4b4f826ec1755", "filename": "src/test/rustdoc-ui/failed-doctest-missing-codes.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.stdout?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -9,7 +9,7 @@ error[E0308]: mismatched types\n   --> $DIR/failed-doctest-missing-codes.rs:9:13\n    |\n LL | let x: () = 5i32;\n-   |             ^^^^ expected (), found i32\n+   |             ^^^^ expected `()`, found `i32`\n \n error: aborting due to previous error\n "}, {"sha": "05b21efeecec48b6ad3c9496804153eff903daef", "filename": "src/test/ui/arg-type-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Farg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Farg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farg-type-mismatch.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/arg-type-mismatch.rs:5:30\n    |\n LL | fn main() { let i: (); i = f(()); }\n-   |                              ^^ expected isize, found ()\n+   |                              ^^ expected `isize`, found `()`\n \n error: aborting due to previous error\n "}, {"sha": "69c7599cce199badc798bd3db6d17ed7e6b3dae9", "filename": "src/test/ui/array-break-length.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Farray-break-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Farray-break-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-break-length.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -14,7 +14,7 @@ error[E0308]: mismatched types\n   --> $DIR/array-break-length.rs:3:9\n    |\n LL |         |_: [_; break]| {}\n-   |         ^^^^^^^^^^^^^^^^^^ expected (), found closure\n+   |         ^^^^^^^^^^^^^^^^^^ expected `()`, found closure\n    |\n    = note: expected unit type `()`\n                 found closure `[closure@$DIR/array-break-length.rs:3:9: 3:27]`\n@@ -23,7 +23,7 @@ error[E0308]: mismatched types\n   --> $DIR/array-break-length.rs:8:9\n    |\n LL |         |_: [_; continue]| {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^ expected (), found closure\n+   |         ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found closure\n    |\n    = note: expected unit type `()`\n                 found closure `[closure@$DIR/array-break-length.rs:8:9: 8:30]`"}, {"sha": "5e46f015baf6268e41070a4d214960ee3345118f", "filename": "src/test/ui/array-not-vector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Farray-not-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Farray-not-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-not-vector.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -1,12 +1,12 @@\n fn main() {\n     let _x: i32 = [1, 2, 3];\n     //~^ ERROR mismatched types\n-    //~| expected i32, found array\n+    //~| expected `i32`, found array\n \n     let x: &[i32] = &[1, 2, 3];\n     let _y: &i32 = x;\n     //~^ ERROR mismatched types\n     //~| expected reference `&i32`\n     //~| found reference `&[i32]`\n-    //~| expected i32, found slice\n+    //~| expected `i32`, found slice\n }"}, {"sha": "412a8ae846124879eb9afdf1647e3e7e945876b0", "filename": "src/test/ui/array-not-vector.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Farray-not-vector.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Farray-not-vector.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-not-vector.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,13 +2,13 @@ error[E0308]: mismatched types\n   --> $DIR/array-not-vector.rs:2:19\n    |\n LL |     let _x: i32 = [1, 2, 3];\n-   |                   ^^^^^^^^^ expected i32, found array `[{integer}; 3]`\n+   |                   ^^^^^^^^^ expected `i32`, found array `[{integer}; 3]`\n \n error[E0308]: mismatched types\n   --> $DIR/array-not-vector.rs:7:20\n    |\n LL |     let _y: &i32 = x;\n-   |                    ^ expected i32, found slice `[i32]`\n+   |                    ^ expected `i32`, found slice `[i32]`\n    |\n    = note: expected reference `&i32`\n               found reference `&[i32]`"}, {"sha": "d6cdcd4747ff2fb0b7c604edc0d3e26bf2b11d9a", "filename": "src/test/ui/associated-const/associated-const-generic-obligations.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -5,7 +5,7 @@ LL |     const FROM: Self::Out;\n    |                 --------- type in trait\n ...\n LL |     const FROM: &'static str = \"foo\";\n-   |                 ^^^^^^^^^^^^ expected associated type, found &str\n+   |                 ^^^^^^^^^^^^ expected associated type, found `&str`\n    |\n    = note: expected associated type `<T as Foo>::Out`\n                     found reference `&'static str`"}, {"sha": "acdf33b2b835b9586802103a35acf77afa8f614b", "filename": "src/test/ui/associated-const/associated-const-impl-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-type.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -5,7 +5,7 @@ LL |     const BAR: u32;\n    |                --- type in trait\n ...\n LL |     const BAR: i32 = -1;\n-   |                ^^^ expected u32, found i32\n+   |                ^^^ expected `u32`, found `i32`\n \n error: aborting due to previous error\n "}, {"sha": "3bb03c39e0f60191f5d881a44ebd911556d70116", "filename": "src/test/ui/associated-types/associated-types-eq-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -37,8 +37,8 @@ pub fn main() {\n     let a = 42;\n     foo1(a);\n     //~^ ERROR type mismatch resolving\n-    //~| expected struct `Bar`, found usize\n+    //~| expected struct `Bar`, found `usize`\n     baz(&a);\n     //~^ ERROR type mismatch resolving\n-    //~| expected struct `Bar`, found usize\n+    //~| expected struct `Bar`, found `usize`\n }"}, {"sha": "24c830d8b5bbb2e254bd5abb7b144f3b2e1cbd79", "filename": "src/test/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -16,13 +16,13 @@ LL | fn foo1<I: Foo<A=Bar>>(x: I) {\n    |    ----        ----- required by this bound in `foo1`\n ...\n LL |     foo1(a);\n-   |     ^^^^ expected struct `Bar`, found usize\n+   |     ^^^^ expected struct `Bar`, found `usize`\n \n error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n   --> $DIR/associated-types-eq-3.rs:41:9\n    |\n LL |     baz(&a);\n-   |         ^^ expected struct `Bar`, found usize\n+   |         ^^ expected struct `Bar`, found `usize`\n    |\n    = note: required for the cast to the object type `dyn Foo<A = Bar>`\n "}, {"sha": "fd7d89d1933816ee4c3a4cdac77872f2b502fee4", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -7,7 +7,7 @@ LL |     where T : for<'x> TheTrait<&'x isize, A = &'x isize>\n    |                                           ------------- required by this bound in `foo`\n ...\n LL |     foo::<UintStruct>();\n-   |     ^^^^^^^^^^^^^^^^^ expected isize, found usize\n+   |     ^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n    |\n    = note: expected reference `&isize`\n               found reference `&usize`\n@@ -21,7 +21,7 @@ LL |     where T : for<'x> TheTrait<&'x isize, A = &'x usize>\n    |                                           ------------- required by this bound in `bar`\n ...\n LL |     bar::<IntStruct>();\n-   |     ^^^^^^^^^^^^^^^^ expected usize, found isize\n+   |     ^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n    |\n    = note: expected reference `&usize`\n               found reference `&isize`"}, {"sha": "d56b45dc2512e07154b9038b6787ab6c487241ee", "filename": "src/test/ui/associated-types/associated-types-multiple-types-one-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0271]: type mismatch resolving `<T as Foo>::Y == i32`\n   --> $DIR/associated-types-multiple-types-one-trait.rs:13:5\n    |\n LL |     want_y(t);\n-   |     ^^^^^^ expected i32, found associated type\n+   |     ^^^^^^ expected `i32`, found associated type\n ...\n LL | fn want_y<T:Foo<Y=i32>>(t: &T) { }\n    |    ------       ----- required by this bound in `want_y`\n@@ -16,7 +16,7 @@ error[E0271]: type mismatch resolving `<T as Foo>::X == u32`\n   --> $DIR/associated-types-multiple-types-one-trait.rs:18:5\n    |\n LL |     want_x(t);\n-   |     ^^^^^^ expected u32, found associated type\n+   |     ^^^^^^ expected `u32`, found associated type\n ...\n LL | fn want_x<T:Foo<X=u32>>(t: &T) { }\n    |    ------       ----- required by this bound in `want_x`"}, {"sha": "82c0eba87ef3d48940fd27883f6e5aaf38c59319", "filename": "src/test/ui/associated-types/associated-types-overridden-binding-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0271]: type mismatch resolving `<std::vec::IntoIter<u32> as std::iter::It\n   --> $DIR/associated-types-overridden-binding-2.rs:6:43\n    |\n LL |     let _: &dyn I32Iterator<Item = u32> = &vec![42].into_iter();\n-   |                                           ^^^^^^^^^^^^^^^^^^^^^ expected i32, found u32\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `u32`\n    |\n    = note: required for the cast to the object type `dyn std::iter::Iterator<Item = u32, Item = i32>`\n "}, {"sha": "c993e1d27202d5a53ac33f843623d48b8bd24852", "filename": "src/test/ui/associated-types/associated-types-path-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -18,7 +18,7 @@ pub fn f2<T: Foo>(a: T) -> T::A {\n pub fn f1_int_int() {\n     f1(2i32, 4i32);\n     //~^ ERROR mismatched types\n-    //~| expected u32, found i32\n+    //~| expected `u32`, found `i32`\n }\n \n pub fn f1_int_uint() {\n@@ -40,7 +40,7 @@ pub fn f1_uint_int() {\n pub fn f2_int() {\n     let _: i32 = f2(2i32);\n     //~^ ERROR mismatched types\n-    //~| expected i32, found u32\n+    //~| expected `i32`, found `u32`\n }\n \n pub fn main() { }"}, {"sha": "f1b7798262403736a9c54b94dfc4982d9a3302c8", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/associated-types-path-2.rs:19:14\n    |\n LL |     f1(2i32, 4i32);\n-   |              ^^^^ expected u32, found i32\n+   |              ^^^^ expected `u32`, found `i32`\n    |\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n@@ -43,7 +43,7 @@ error[E0308]: mismatched types\n   --> $DIR/associated-types-path-2.rs:41:18\n    |\n LL |     let _: i32 = f2(2i32);\n-   |                  ^^^^^^^^ expected i32, found u32\n+   |                  ^^^^^^^^ expected `i32`, found `u32`\n    |\n help: you can convert an `u32` to `i32` and panic if the converted value wouldn't fit\n    |"}, {"sha": "8ef71087958ca5b2988b61456354d654d0fd82b2", "filename": "src/test/ui/associated-types/issue-44153.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -5,7 +5,7 @@ LL |     fn visit() {}\n    |     ---------- required by `Visit::visit`\n ...\n LL |     <() as Visit>::visit();\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected (), found &()\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected `()`, found `&()`\n    |\n    = note: required because of the requirements on the impl of `Visit` for `()`\n "}, {"sha": "e86b460f818b800b8fa6dbb7b288636bad9393f9", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -7,7 +7,7 @@ LL |     type Ok;\n LL | impl Bar for Foo {\n    | ---------------- in this `impl` item\n LL |     type Ok = ();\n-   |     ^^^^^^^^^^^^^ expected u32, found ()\n+   |     ^^^^^^^^^^^^^ expected `u32`, found `()`\n \n error: aborting due to previous error\n "}, {"sha": "afb8f146192ccddb69fcef8581251911e757c72a", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -22,15 +22,15 @@ error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:13:43\n    |\n LL | fn return_targets_async_block_not_fn() -> u8 {\n-   |    ---------------------------------      ^^ expected u8, found ()\n+   |    ---------------------------------      ^^ expected `u8`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n \n error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n   --> $DIR/async-block-control-flow-static-semantics.rs:18:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n-   |                                       ^^^^^^ expected (), found u8\n+   |                                       ^^^^^^ expected `()`, found `u8`\n    |\n    = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n \n@@ -45,21 +45,21 @@ LL | |         return 0u8;\n ...  |\n LL | |\n LL | | }\n-   | |_^ expected u8, found ()\n+   | |_^ expected `u8`, found `()`\n \n error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n   --> $DIR/async-block-control-flow-static-semantics.rs:27:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n-   |                                       ^^^^^^ expected (), found u8\n+   |                                       ^^^^^^ expected `()`, found `u8`\n    |\n    = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n \n error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:48:44\n    |\n LL | fn rethrow_targets_async_block_not_fn() -> Result<u8, MyErr> {\n-   |    ----------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n+   |    ----------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n@@ -70,7 +70,7 @@ error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:57:50\n    |\n LL | fn rethrow_targets_async_block_not_async_fn() -> Result<u8, MyErr> {\n-   |    ----------------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n+   |    ----------------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |"}, {"sha": "239f801c39d4e0f6b26726b2d2b9d9f89c39d0ca", "filename": "src/test/ui/async-await/dont-suggest-missing-await.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/dont-suggest-missing-await.rs:14:18\n    |\n LL |         take_u32(x)\n-   |                  ^ expected u32, found opaque type\n+   |                  ^ expected `u32`, found opaque type\n    |\n    = note:     expected type `u32`\n            found opaque type `impl std::future::Future`"}, {"sha": "1efc20082a08aef29ee62786d14ed323c2eb63a3", "filename": "src/test/ui/async-await/suggest-missing-await-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |         take_u32(x)\n    |                  ^\n    |                  |\n-   |                  expected u32, found opaque type\n+   |                  expected `u32`, found opaque type\n    |                  help: consider using `.await` here: `x.await`\n    |\n    = note:     expected type `u32`"}, {"sha": "7a635a37107d2d718ae7febe501b4ce6d62a4a1b", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     take_u32(x)\n    |              ^\n    |              |\n-   |              expected u32, found opaque type\n+   |              expected `u32`, found opaque type\n    |              help: consider using `.await` here: `x.await`\n    |\n    = note:     expected type `u32`"}, {"sha": "3615622ae369fddb6137ac2b9bb362db0721b64e", "filename": "src/test/ui/binop/binop-logic-float.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fbinop%2Fbinop-logic-float.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fbinop%2Fbinop-logic-float.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-logic-float.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,13 +2,13 @@ error[E0308]: mismatched types\n   --> $DIR/binop-logic-float.rs:1:21\n    |\n LL | fn main() { let x = 1.0_f32 || 2.0_f32; }\n-   |                     ^^^^^^^ expected bool, found f32\n+   |                     ^^^^^^^ expected `bool`, found `f32`\n \n error[E0308]: mismatched types\n   --> $DIR/binop-logic-float.rs:1:32\n    |\n LL | fn main() { let x = 1.0_f32 || 2.0_f32; }\n-   |                                ^^^^^^^ expected bool, found f32\n+   |                                ^^^^^^^ expected `bool`, found `f32`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "50d857cd9d7ab42da85bf8509cc9bca9572329f1", "filename": "src/test/ui/binop/binop-logic-int.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fbinop%2Fbinop-logic-int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fbinop%2Fbinop-logic-int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-logic-int.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,13 +2,13 @@ error[E0308]: mismatched types\n   --> $DIR/binop-logic-int.rs:1:21\n    |\n LL | fn main() { let x = 1 && 2; }\n-   |                     ^ expected bool, found integer\n+   |                     ^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/binop-logic-int.rs:1:26\n    |\n LL | fn main() { let x = 1 && 2; }\n-   |                          ^ expected bool, found integer\n+   |                          ^ expected `bool`, found integer\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e39cd04f81b3c7869b4c2b21530c8adf4756f6b2", "filename": "src/test/ui/block-expression-remove-semicolon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -7,7 +7,7 @@ LL | |\n LL | |         foo();\n    | |              - help: consider removing this semicolon\n LL | |     };\n-   | |_____^ expected i32, found ()\n+   | |_____^ expected `i32`, found `()`\n \n error: aborting due to previous error\n "}, {"sha": "914886f81b4aedf4d0d0aa91b38a674cacc705a5", "filename": "src/test/ui/block-result/block-must-not-have-result-do.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-do.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-do.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-do.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/block-must-not-have-result-do.rs:3:9\n    |\n LL |         true\n-   |         ^^^^ expected (), found bool\n+   |         ^^^^ expected `()`, found `bool`\n \n error: aborting due to previous error\n "}, {"sha": "0080d06dd207a5215a40dd6802ec91d34a6d3455", "filename": "src/test/ui/block-result/block-must-not-have-result-res.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     fn drop(&mut self) {\n    |                        - expected `()` because of default return type\n LL |         true\n-   |         ^^^^ expected (), found bool\n+   |         ^^^^ expected `()`, found `bool`\n \n error: aborting due to previous error\n "}, {"sha": "418059bf280ea1ffd02f82100147b0e9870362ba", "filename": "src/test/ui/block-result/block-must-not-have-result-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     while true { //~ WARN denote infinite loops with\n         true //~  ERROR mismatched types\n-             //~| expected (), found bool\n+             //~| expected `()`, found `bool`\n     }\n }"}, {"sha": "638ce03cb36630755c51c53dc0b25887b119fef1", "filename": "src/test/ui/block-result/block-must-not-have-result-while.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -10,7 +10,7 @@ error[E0308]: mismatched types\n   --> $DIR/block-must-not-have-result-while.rs:3:9\n    |\n LL |         true\n-   |         ^^^^ expected (), found bool\n+   |         ^^^^ expected `()`, found `bool`\n \n error: aborting due to previous error\n "}, {"sha": "b45f2a6282136c63c6f1c410da25bb416c5ddd45", "filename": "src/test/ui/block-result/consider-removing-last-semi.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/consider-removing-last-semi.rs:1:11\n    |\n LL | fn f() -> String {\n-   |    -      ^^^^^^ expected struct `std::string::String`, found ()\n+   |    -      ^^^^^^ expected struct `std::string::String`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     0u8;\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/consider-removing-last-semi.rs:6:11\n    |\n LL | fn g() -> String {\n-   |    -      ^^^^^^ expected struct `std::string::String`, found ()\n+   |    -      ^^^^^^ expected struct `std::string::String`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     \"this won't work\".to_string();"}, {"sha": "61991643a4a569e790bc3d1685579ccbf697e3d9", "filename": "src/test/ui/block-result/issue-11714.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-11714.rs:1:14\n    |\n LL | fn blah() -> i32 {\n-   |    ----      ^^^ expected i32, found ()\n+   |    ----      ^^^ expected `i32`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n ..."}, {"sha": "707d24cd6ab239ebf1ebb63101e0686b708c1522", "filename": "src/test/ui/block-result/issue-13428.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-13428.rs:3:13\n    |\n LL | fn foo() -> String {\n-   |    ---      ^^^^^^ expected struct `std::string::String`, found ()\n+   |    ---      ^^^^^^ expected struct `std::string::String`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n ...\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-13428.rs:11:13\n    |\n LL | fn bar() -> String {\n-   |    ---      ^^^^^^ expected struct `std::string::String`, found ()\n+   |    ---      ^^^^^^ expected struct `std::string::String`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     \"foobar\".to_string()"}, {"sha": "bd1d0de320e265185c417dd21a45c744445b66ad", "filename": "src/test/ui/block-result/issue-13624.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -6,7 +6,7 @@ mod a {\n   pub fn get_enum_struct_variant() -> () {\n     Enum::EnumStructVariant { x: 1, y: 2, z: 3 }\n     //~^ ERROR mismatched types\n-    //~| expected (), found enum `a::Enum`\n+    //~| expected `()`, found enum `a::Enum`\n   }\n }\n \n@@ -19,7 +19,7 @@ mod b {\n       match enum_struct_variant {\n         a::Enum::EnumStructVariant { x, y, z } => {\n         //~^ ERROR mismatched types\n-        //~| expected (), found enum `a::Enum`\n+        //~| expected `()`, found enum `a::Enum`\n         }\n       }\n     }"}, {"sha": "90ffb4b2e52bc1e0b5d331b9fc9ad6061062adf5", "filename": "src/test/ui/block-result/issue-13624.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,15 +4,15 @@ error[E0308]: mismatched types\n LL |   pub fn get_enum_struct_variant() -> () {\n    |                                       -- expected `()` because of return type\n LL |     Enum::EnumStructVariant { x: 1, y: 2, z: 3 }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found enum `a::Enum`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found enum `a::Enum`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-13624.rs:20:9\n    |\n LL |       match enum_struct_variant {\n    |             ------------------- this match expression has type `()`\n LL |         a::Enum::EnumStructVariant { x, y, z } => {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found enum `a::Enum`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found enum `a::Enum`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f9c890b0ed82a7891692311213f0767f5b5fba79", "filename": "src/test/ui/block-result/issue-20862.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn foo(x: i32) {\n    |                - possibly return type missing here?\n LL |     |y| x + y\n-   |     ^^^^^^^^^ expected (), found closure\n+   |     ^^^^^^^^^ expected `()`, found closure\n    |\n    = note: expected unit type `()`\n                 found closure `[closure@$DIR/issue-20862.rs:2:5: 2:14 x:_]`"}, {"sha": "79eb1d4b890f087d3de14c304636cb3327406630", "filename": "src/test/ui/block-result/issue-22645.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -15,7 +15,7 @@ LL | fn main() {\n    |           - expected `()` because of default return type\n LL |   let b = Bob + 3.5;\n LL |   b + 3\n-   |   ^^^^^ expected (), found struct `Bob`\n+   |   ^^^^^ expected `()`, found struct `Bob`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "577987a4596cbebed7aae5cbfcea8598a159a90b", "filename": "src/test/ui/block-result/issue-5500.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -3,5 +3,5 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected unit type `()`\n     //~| found reference `&_`\n-    //~| expected (), found reference\n+    //~| expected `()`, found reference\n }"}, {"sha": "9d9f7ac2e4a0bcc119a483118859d7adb200a1a4", "filename": "src/test/ui/block-result/issue-5500.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -6,7 +6,7 @@ LL | fn main() {\n LL |     &panic!()\n    |     ^^^^^^^^^\n    |     |\n-   |     expected (), found reference\n+   |     expected `()`, found reference\n    |     help: consider removing the borrow: `panic!()`\n    |\n    = note: expected unit type `()`"}, {"sha": "3dce459ddbdaea2c7b66ede0982c9c5a8ed4296d", "filename": "src/test/ui/block-result/unexpected-return-on-unit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/unexpected-return-on-unit.rs:9:5\n    |\n LL |     foo()\n-   |     ^^^^^ expected (), found usize\n+   |     ^^^^^ expected `()`, found `usize`\n    |\n help: try adding a semicolon\n    |"}, {"sha": "6960c4fd8673537f30dd5ffe960a25034a5ea4a4", "filename": "src/test/ui/break-while-condition.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fbreak-while-condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fbreak-while-condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbreak-while-condition.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -5,7 +5,7 @@ LL |           let _: ! = {\n    |  ____________________^\n LL | |             'a: while break 'a {};\n LL | |         };\n-   | |_________^ expected !, found ()\n+   | |_________^ expected `!`, found `()`\n    |\n    = note:   expected type `!`\n            found unit type `()`\n@@ -16,7 +16,7 @@ error[E0308]: mismatched types\n LL | /             while false {\n LL | |                 break\n LL | |             }\n-   | |_____________^ expected !, found ()\n+   | |_____________^ expected `!`, found `()`\n    |\n    = note:   expected type `!`\n            found unit type `()`\n@@ -27,7 +27,7 @@ error[E0308]: mismatched types\n LL | /             while false {\n LL | |                 return\n LL | |             }\n-   | |_____________^ expected !, found ()\n+   | |_____________^ expected `!`, found `()`\n    |\n    = note:   expected type `!`\n            found unit type `()`"}, {"sha": "b8152caf3d29f21dd57b210240747dc2f28da230", "filename": "src/test/ui/chalkify/type_inference.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/type_inference.rs:21:14\n    |\n LL |     only_foo(x);\n-   |              ^ expected i32, found floating-point number\n+   |              ^ expected `i32`, found floating-point number\n \n error[E0277]: the trait bound `{float}: Bar` is not satisfied\n   --> $DIR/type_inference.rs:25:5"}, {"sha": "f6991a23f4d4d215662539d49df458011b02d037", "filename": "src/test/ui/closures/closure-array-break-length.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -20,7 +20,7 @@ error[E0308]: mismatched types\n   --> $DIR/closure-array-break-length.rs:4:11\n    |\n LL |     while |_: [_; continue]| {} {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^ expected bool, found closure\n+   |           ^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n            found closure `[closure@$DIR/closure-array-break-length.rs:4:11: 4:32]`\n@@ -29,7 +29,7 @@ error[E0308]: mismatched types\n   --> $DIR/closure-array-break-length.rs:7:11\n    |\n LL |     while |_: [_; break]| {} {}\n-   |           ^^^^^^^^^^^^^^^^^^ expected bool, found closure\n+   |           ^^^^^^^^^^^^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n            found closure `[closure@$DIR/closure-array-break-length.rs:7:11: 7:29]`"}, {"sha": "c3f19d20d3952d768e88cfff25f30a4c689866fe", "filename": "src/test/ui/codemap_tests/tab.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -10,7 +10,7 @@ error[E0308]: mismatched types\n LL | fn foo() {\n    |          - help: try adding a return type: `-> &'static str`\n LL |     \"bar            boo\"\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected (), found &str\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected `()`, found `&str`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "303d83d342625c5379f07a4612f219988e77e7b9", "filename": "src/test/ui/coercion/coerce-expect-unsized-ascribed.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -29,7 +29,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:13:13\n    |\n LL |     let _ = box { |x| (x as u8) }: Box<dyn Fn(i32) -> _>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^ expected trait std::ops::Fn, found closure\n+   |             ^^^^^^^^^^^^^^^^^^^^^ expected trait `std::ops::Fn`, found closure\n    |\n    = note: expected struct `std::boxed::Box<dyn std::ops::Fn(i32) -> u8>`\n               found struct `std::boxed::Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:13:19: 13:32]>`\n@@ -38,7 +38,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:14:13\n    |\n LL |     let _ = box if true { false } else { true }: Box<dyn Debug>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::fmt::Debug, found bool\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait `std::fmt::Debug`, found `bool`\n    |\n    = note: expected struct `std::boxed::Box<dyn std::fmt::Debug>`\n               found struct `std::boxed::Box<bool>`\n@@ -47,7 +47,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:15:13\n    |\n LL |     let _ = box match true { true => 'a', false => 'b' }: Box<dyn Debug>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::fmt::Debug, found char\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait `std::fmt::Debug`, found `char`\n    |\n    = note: expected struct `std::boxed::Box<dyn std::fmt::Debug>`\n               found struct `std::boxed::Box<char>`\n@@ -83,7 +83,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:21:13\n    |\n LL |     let _ = &{ |x| (x as u8) }: &dyn Fn(i32) -> _;\n-   |             ^^^^^^^^^^^^^^^^^^ expected trait std::ops::Fn, found closure\n+   |             ^^^^^^^^^^^^^^^^^^ expected trait `std::ops::Fn`, found closure\n    |\n    = note: expected reference `&dyn std::ops::Fn(i32) -> u8`\n               found reference `&[closure@$DIR/coerce-expect-unsized-ascribed.rs:21:16: 21:29]`\n@@ -92,7 +92,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:22:13\n    |\n LL |     let _ = &if true { false } else { true }: &dyn Debug;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::fmt::Debug, found bool\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait `std::fmt::Debug`, found `bool`\n    |\n    = note: expected reference `&dyn std::fmt::Debug`\n               found reference `&bool`\n@@ -101,7 +101,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:23:13\n    |\n LL |     let _ = &match true { true => 'a', false => 'b' }: &dyn Debug;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::fmt::Debug, found char\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait `std::fmt::Debug`, found `char`\n    |\n    = note: expected reference `&dyn std::fmt::Debug`\n               found reference `&char`\n@@ -119,7 +119,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:26:13\n    |\n LL |     let _ = Box::new(|x| (x as u8)): Box<dyn Fn(i32) -> _>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::ops::Fn, found closure\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ expected trait `std::ops::Fn`, found closure\n    |\n    = note: expected struct `std::boxed::Box<dyn std::ops::Fn(i32) -> _>`\n               found struct `std::boxed::Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:26:22: 26:35]>`"}, {"sha": "0b0c2e9f5a3ba34c5dee7cf4b66a9ca083f2109a", "filename": "src/test/ui/coercion/coerce-to-bang.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:6:17\n    |\n LL |     foo(return, 22, 44);\n-   |                 ^^ expected !, found integer\n+   |                 ^^ expected `!`, found integer\n    |\n    = note: expected type `!`\n               found type `{integer}`\n@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:18:13\n    |\n LL |     foo(22, 44, return);\n-   |             ^^ expected !, found integer\n+   |             ^^ expected `!`, found integer\n    |\n    = note: expected type `!`\n               found type `{integer}`\n@@ -20,7 +20,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:26:12\n    |\n LL |     foo(a, b, c); // ... and hence a reference to `a` is expected to diverge.\n-   |            ^ expected !, found integer\n+   |            ^ expected `!`, found integer\n    |\n    = note: expected type `!`\n               found type `{integer}`\n@@ -29,7 +29,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:36:12\n    |\n LL |     foo(a, b, c);\n-   |            ^ expected !, found integer\n+   |            ^ expected `!`, found integer\n    |\n    = note: expected type `!`\n               found type `{integer}`\n@@ -38,7 +38,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:45:12\n    |\n LL |     foo(a, b, c);\n-   |            ^ expected !, found integer\n+   |            ^ expected `!`, found integer\n    |\n    = note: expected type `!`\n               found type `{integer}`\n@@ -47,7 +47,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:50:21\n    |\n LL |     let x: [!; 2] = [return, 22];\n-   |                     ^^^^^^^^^^^^ expected !, found integer\n+   |                     ^^^^^^^^^^^^ expected `!`, found integer\n    |\n    = note: expected array `[!; 2]`\n               found array `[{integer}; 2]`\n@@ -56,7 +56,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:55:22\n    |\n LL |     let x: [!; 2] = [22, return];\n-   |                      ^^ expected !, found integer\n+   |                      ^^ expected `!`, found integer\n    |\n    = note: expected type `!`\n               found type `{integer}`\n@@ -65,7 +65,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:60:37\n    |\n LL |     let x: (usize, !, usize) = (22, 44, 66);\n-   |                                     ^^ expected !, found integer\n+   |                                     ^^ expected `!`, found integer\n    |\n    = note: expected type `!`\n               found type `{integer}`\n@@ -74,7 +74,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:65:41\n    |\n LL |     let x: (usize, !, usize) = (return, 44, 66);\n-   |                                         ^^ expected !, found integer\n+   |                                         ^^ expected `!`, found integer\n    |\n    = note: expected type `!`\n               found type `{integer}`\n@@ -83,7 +83,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:76:37\n    |\n LL |     let x: (usize, !, usize) = (22, 44, return);\n-   |                                     ^^ expected !, found integer\n+   |                                     ^^ expected `!`, found integer\n    |\n    = note: expected type `!`\n               found type `{integer}`"}, {"sha": "f1911dde981f5859c0163bcf9b161568f50a438c", "filename": "src/test/ui/coercion/coercion-missing-tail-expected-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/coercion-missing-tail-expected-type.rs:3:24\n    |\n LL | fn plus_one(x: i32) -> i32 {\n-   |    --------            ^^^ expected i32, found ()\n+   |    --------            ^^^ expected `i32`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     x + 1;\n@@ -12,7 +12,7 @@ error[E0308]: mismatched types\n   --> $DIR/coercion-missing-tail-expected-type.rs:7:13\n    |\n LL | fn foo() -> Result<u8, u64> {\n-   |    ---      ^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n+   |    ---      ^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     Ok(1);"}, {"sha": "b756c8f8203a086df7e2b8690d5a1c728db3f44a", "filename": "src/test/ui/coercion/coercion-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -3,5 +3,5 @@\n fn main() {\n     let _: &[i32] = [0];\n     //~^ ERROR mismatched types\n-    //~| expected &[i32], found array `[{integer}; 1]`\n+    //~| expected `&[i32]`, found array `[{integer}; 1]`\n }"}, {"sha": "0e7fc06a9b720b7f78790d17fa1bdb53c4805e0c", "filename": "src/test/ui/coercion/coercion-slice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let _: &[i32] = [0];\n    |                     ^^^\n    |                     |\n-   |                     expected &[i32], found array `[{integer}; 1]`\n+   |                     expected `&[i32]`, found array `[{integer}; 1]`\n    |                     help: consider borrowing here: `&[0]`\n \n error: aborting due to previous error"}, {"sha": "7eb3c19a58910a483a7f6d31b4ab26c869509764", "filename": "src/test/ui/const-generics/fn-const-param-infer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -19,7 +19,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-const-param-infer.rs:20:24\n    |\n LL |     let _ = Checked::<{generic_arg::<u32>}>;\n-   |                        ^^^^^^^^^^^^^^^^^^ expected usize, found u32\n+   |                        ^^^^^^^^^^^^^^^^^^ expected `usize`, found `u32`\n    |\n    = note: expected fn pointer `fn(usize) -> bool`\n                  found fn item `fn(u32) -> bool {generic_arg::<u32>}`"}, {"sha": "0ce98f1455c9957f78eb5ec33bbe50762078291d", "filename": "src/test/ui/const-generics/types-mismatch-const-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -19,7 +19,7 @@ error[E0308]: mismatched types\n   --> $DIR/types-mismatch-const-args.rs:15:41\n    |\n LL |     let _: A<'a, u16, {2u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data: PhantomData };\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected u16, found u32\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u16`, found `u32`\n    |\n    = note: expected struct `A<'a, u16, _, _>`\n               found struct `A<'b, u32, _, _>`"}, {"sha": "282f5ccde772fd62c511e001ec7eeaad68fbad3c", "filename": "src/test/ui/consts/const-cast-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconsts%2Fconst-cast-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconsts%2Fconst-cast-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-cast-wrong-type.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/const-cast-wrong-type.rs:2:23\n    |\n LL | static b: *const i8 = &a as *const i8;\n-   |                       ^^^^^^^^^^^^^^^ expected u8, found i8\n+   |                       ^^^^^^^^^^^^^^^ expected `u8`, found `i8`\n \n error: aborting due to previous error\n "}, {"sha": "3da34fe9af7ecbe8ba069bd644be8d4a769630b5", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-3b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/const-eval-overflow-3b.rs:18:22\n    |\n LL |     = [0; (i8::MAX + 1u8) as usize];\n-   |                      ^^^ expected i8, found u8\n+   |                      ^^^ expected `i8`, found `u8`\n \n error[E0277]: cannot add `u8` to `i8`\n   --> $DIR/const-eval-overflow-3b.rs:18:20"}, {"sha": "2a4585faf1493aa176016679646c76d9cc138a21", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -11,7 +11,7 @@ use std::{u8, u16, u32, u64, usize};\n const A_I8_T\n     : [u32; (i8::MAX as i8 + 1u8) as usize]\n     //~^ ERROR mismatched types\n-    //~| expected i8, found u8\n+    //~| expected `i8`, found `u8`\n     //~| ERROR cannot add `u8` to `i8`\n     = [0; (i8::MAX as usize) + 1];\n "}, {"sha": "5b2c4116c4b1dc9aa7c44b24bb6c207b3235e175", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/const-eval-overflow-4b.rs:12:30\n    |\n LL |     : [u32; (i8::MAX as i8 + 1u8) as usize]\n-   |                              ^^^ expected i8, found u8\n+   |                              ^^^ expected `i8`, found `u8`\n \n error[E0277]: cannot add `u8` to `i8`\n   --> $DIR/const-eval-overflow-4b.rs:12:28"}, {"sha": "82f101b47cfebba6cedece8ca3e45d87307ba46c", "filename": "src/test/ui/consts/const-eval/const-eval-span.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -8,7 +8,7 @@ const CONSTANT: S = S(0);\n enum E {\n     V = CONSTANT,\n     //~^ ERROR mismatched types\n-    //~| expected isize, found struct `S`\n+    //~| expected `isize`, found struct `S`\n }\n \n fn main() {}"}, {"sha": "c5b001899ff924a4af4c0bd4ede6562a6f71646e", "filename": "src/test/ui/consts/const-eval/const-eval-span.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/const-eval-span.rs:9:9\n    |\n LL |     V = CONSTANT,\n-   |         ^^^^^^^^ expected isize, found struct `S`\n+   |         ^^^^^^^^ expected `isize`, found struct `S`\n \n error: aborting due to previous error\n "}, {"sha": "6924956bdf706f174ccc7a68c4ed529d30f2ad8c", "filename": "src/test/ui/consts/const-integer-bool-ops.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -1,76 +1,76 @@\n const X: usize = 42 && 39;\n //~^ ERROR mismatched types\n-//~| expected bool, found integer\n+//~| expected `bool`, found integer\n //~| ERROR mismatched types\n-//~| expected bool, found integer\n+//~| expected `bool`, found integer\n //~| ERROR mismatched types\n-//~| expected usize, found bool\n+//~| expected `usize`, found `bool`\n const ARR: [i32; X] = [99; 34];\n //~^ ERROR evaluation of constant value failed\n \n const X1: usize = 42 || 39;\n //~^ ERROR mismatched types\n-//~| expected bool, found integer\n+//~| expected `bool`, found integer\n //~| ERROR mismatched types\n-//~| expected bool, found integer\n+//~| expected `bool`, found integer\n //~| ERROR mismatched types\n-//~| expected usize, found bool\n+//~| expected `usize`, found `bool`\n const ARR1: [i32; X1] = [99; 47];\n //~^ ERROR evaluation of constant value failed\n \n const X2: usize = -42 || -39;\n //~^ ERROR mismatched types\n-//~| expected bool, found integer\n+//~| expected `bool`, found integer\n //~| ERROR mismatched types\n-//~| expected bool, found integer\n+//~| expected `bool`, found integer\n //~| ERROR mismatched types\n-//~| expected usize, found bool\n+//~| expected `usize`, found `bool`\n const ARR2: [i32; X2] = [99; 18446744073709551607];\n //~^ ERROR evaluation of constant value failed\n \n const X3: usize = -42 && -39;\n //~^ ERROR mismatched types\n-//~| expected bool, found integer\n+//~| expected `bool`, found integer\n //~| ERROR mismatched types\n-//~| expected bool, found integer\n+//~| expected `bool`, found integer\n //~| ERROR mismatched types\n-//~| expected usize, found bool\n+//~| expected `usize`, found `bool`\n const ARR3: [i32; X3] = [99; 6];\n //~^ ERROR evaluation of constant value failed\n \n const Y: usize = 42.0 == 42.0;\n //~^ ERROR mismatched types\n-//~| expected usize, found bool\n+//~| expected `usize`, found `bool`\n const ARRR: [i32; Y] = [99; 1];\n //~^ ERROR evaluation of constant value failed\n \n const Y1: usize = 42.0 >= 42.0;\n //~^ ERROR mismatched types\n-//~| expected usize, found bool\n+//~| expected `usize`, found `bool`\n const ARRR1: [i32; Y1] = [99; 1];\n //~^ ERROR evaluation of constant value failed\n \n const Y2: usize = 42.0 <= 42.0;\n //~^ ERROR mismatched types\n-//~| expected usize, found bool\n+//~| expected `usize`, found `bool`\n const ARRR2: [i32; Y2] = [99; 1];\n //~^ ERROR evaluation of constant value failed\n \n const Y3: usize = 42.0 > 42.0;\n //~^ ERROR mismatched types\n-//~| expected usize, found bool\n+//~| expected `usize`, found `bool`\n const ARRR3: [i32; Y3] = [99; 0];\n //~^ ERROR evaluation of constant value failed\n \n const Y4: usize = 42.0 < 42.0;\n //~^ ERROR mismatched types\n-//~| expected usize, found bool\n+//~| expected `usize`, found `bool`\n const ARRR4: [i32; Y4] = [99; 0];\n //~^ ERROR evaluation of constant value failed\n \n const Y5: usize = 42.0 != 42.0;\n //~^ ERROR mismatched types\n-//~| expected usize, found bool\n+//~| expected `usize`, found `bool`\n const ARRR5: [i32; Y5] = [99; 0];\n //~^ ERROR evaluation of constant value failed\n "}, {"sha": "9001fefd1029f314bc95f9bae48efc75a5baf0cd", "filename": "src/test/ui/consts/const-integer-bool-ops.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,19 +2,19 @@ error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:1:18\n    |\n LL | const X: usize = 42 && 39;\n-   |                  ^^ expected bool, found integer\n+   |                  ^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:1:24\n    |\n LL | const X: usize = 42 && 39;\n-   |                        ^^ expected bool, found integer\n+   |                        ^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:1:18\n    |\n LL | const X: usize = 42 && 39;\n-   |                  ^^^^^^^^ expected usize, found bool\n+   |                  ^^^^^^^^ expected `usize`, found `bool`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-integer-bool-ops.rs:8:18\n@@ -26,19 +26,19 @@ error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:11:19\n    |\n LL | const X1: usize = 42 || 39;\n-   |                   ^^ expected bool, found integer\n+   |                   ^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:11:25\n    |\n LL | const X1: usize = 42 || 39;\n-   |                         ^^ expected bool, found integer\n+   |                         ^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:11:19\n    |\n LL | const X1: usize = 42 || 39;\n-   |                   ^^^^^^^^ expected usize, found bool\n+   |                   ^^^^^^^^ expected `usize`, found `bool`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-integer-bool-ops.rs:18:19\n@@ -50,19 +50,19 @@ error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:21:19\n    |\n LL | const X2: usize = -42 || -39;\n-   |                   ^^^ expected bool, found integer\n+   |                   ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:21:26\n    |\n LL | const X2: usize = -42 || -39;\n-   |                          ^^^ expected bool, found integer\n+   |                          ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:21:19\n    |\n LL | const X2: usize = -42 || -39;\n-   |                   ^^^^^^^^^^ expected usize, found bool\n+   |                   ^^^^^^^^^^ expected `usize`, found `bool`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-integer-bool-ops.rs:28:19\n@@ -74,19 +74,19 @@ error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:31:19\n    |\n LL | const X3: usize = -42 && -39;\n-   |                   ^^^ expected bool, found integer\n+   |                   ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:31:26\n    |\n LL | const X3: usize = -42 && -39;\n-   |                          ^^^ expected bool, found integer\n+   |                          ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:31:19\n    |\n LL | const X3: usize = -42 && -39;\n-   |                   ^^^^^^^^^^ expected usize, found bool\n+   |                   ^^^^^^^^^^ expected `usize`, found `bool`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-integer-bool-ops.rs:38:19\n@@ -98,7 +98,7 @@ error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:41:18\n    |\n LL | const Y: usize = 42.0 == 42.0;\n-   |                  ^^^^^^^^^^^^ expected usize, found bool\n+   |                  ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-integer-bool-ops.rs:44:19\n@@ -110,7 +110,7 @@ error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:47:19\n    |\n LL | const Y1: usize = 42.0 >= 42.0;\n-   |                   ^^^^^^^^^^^^ expected usize, found bool\n+   |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-integer-bool-ops.rs:50:20\n@@ -122,7 +122,7 @@ error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:53:19\n    |\n LL | const Y2: usize = 42.0 <= 42.0;\n-   |                   ^^^^^^^^^^^^ expected usize, found bool\n+   |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-integer-bool-ops.rs:56:20\n@@ -134,7 +134,7 @@ error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:59:19\n    |\n LL | const Y3: usize = 42.0 > 42.0;\n-   |                   ^^^^^^^^^^^ expected usize, found bool\n+   |                   ^^^^^^^^^^^ expected `usize`, found `bool`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-integer-bool-ops.rs:62:20\n@@ -146,7 +146,7 @@ error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:65:19\n    |\n LL | const Y4: usize = 42.0 < 42.0;\n-   |                   ^^^^^^^^^^^ expected usize, found bool\n+   |                   ^^^^^^^^^^^ expected `usize`, found `bool`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-integer-bool-ops.rs:68:20\n@@ -158,7 +158,7 @@ error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:71:19\n    |\n LL | const Y5: usize = 42.0 != 42.0;\n-   |                   ^^^^^^^^^^^^ expected usize, found bool\n+   |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-integer-bool-ops.rs:74:20"}, {"sha": "763263c6aeb4f9a86c81c99459d07590c6b06733", "filename": "src/test/ui/consts/const-tup-index-span.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@\n \n const TUP: (usize,) = 5usize << 64;\n //~^ ERROR mismatched types\n-//~| expected tuple, found usize\n+//~| expected tuple, found `usize`\n const ARR: [i32; TUP.0] = [];\n //~^ ERROR evaluation of constant value failed\n "}, {"sha": "8e4a092e40f5e37f4b968bb139138b82615576a5", "filename": "src/test/ui/consts/const-tup-index-span.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/const-tup-index-span.rs:3:23\n    |\n LL | const TUP: (usize,) = 5usize << 64;\n-   |                       ^^^^^^^^^^^^ expected tuple, found usize\n+   |                       ^^^^^^^^^^^^ expected tuple, found `usize`\n    |\n    = note: expected tuple `(usize,)`\n                found type `usize`"}, {"sha": "17bb27d4b72fa21cf5442cad9c8c3021d49e1993", "filename": "src/test/ui/consts/const-type-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconsts%2Fconst-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconsts%2Fconst-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-type-mismatch.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,13 +2,13 @@ error[E0308]: mismatched types\n   --> $DIR/const-type-mismatch.rs:4:21\n    |\n LL | const TWELVE: u16 = TEN + 2;\n-   |                     ^^^^^^^ expected u16, found u8\n+   |                     ^^^^^^^ expected `u16`, found `u8`\n \n error[E0308]: mismatched types\n   --> $DIR/const-type-mismatch.rs:9:27\n    |\n LL |     const ALSO_TEN: u16 = TEN;\n-   |                           ^^^ expected u16, found u8\n+   |                           ^^^ expected `u16`, found `u8`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "848ccf94da2b65164d56039b2097624c9576a026", "filename": "src/test/ui/consts/enum-discr-type-err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/enum-discr-type-err.rs:18:21\n    |\n LL |               $( $v = $s::V, )*\n-   |                       ^^^^^ expected isize, found i32\n+   |                       ^^^^^ expected `isize`, found `i32`\n ...\n LL | / mac! {\n LL | |     A = F,"}, {"sha": "1aca37a6fb82ee6b630d75eace760fd6059ccab8", "filename": "src/test/ui/conversion-methods.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconversion-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fconversion-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconversion-methods.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let _tis_an_instants_play: String = \"'Tis a fond Ambush\u2014\";\n    |                                         ^^^^^^^^^^^^^^^^^^^^^\n    |                                         |\n-   |                                         expected struct `std::string::String`, found &str\n+   |                                         expected struct `std::string::String`, found `&str`\n    |                                         help: try using a conversion method: `\"'Tis a fond Ambush\u2014\".to_string()`\n \n error[E0308]: mismatched types\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n LL |     let _just_to_make_bliss: PathBuf = Path::new(\"/ern/her/own/surprise\");\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                                        |\n-   |                                        expected struct `std::path::PathBuf`, found &std::path::Path\n+   |                                        expected struct `std::path::PathBuf`, found `&std::path::Path`\n    |                                        help: try using a conversion method: `Path::new(\"/ern/her/own/surprise\").to_path_buf()`\n \n error[E0308]: mismatched types\n@@ -31,7 +31,7 @@ error[E0308]: mismatched types\n LL |     let _prove_piercing_earnest: Vec<usize> = &[1, 2, 3];\n    |                                               ^^^^^^^^^^\n    |                                               |\n-   |                                               expected struct `std::vec::Vec`, found &[{integer}; 3]\n+   |                                               expected struct `std::vec::Vec`, found `&[{integer}; 3]`\n    |                                               help: try using a conversion method: `(&[1, 2, 3]).to_vec()`\n    |\n    = note: expected struct `std::vec::Vec<usize>`"}, {"sha": "9bffa6bd111a610ee670a215ccec9ccb567725e8", "filename": "src/test/ui/cross/cross-borrow-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let _y: &dyn Trait = x;\n    |                          ^\n    |                          |\n-   |                          expected &dyn Trait, found struct `std::boxed::Box`\n+   |                          expected `&dyn Trait`, found struct `std::boxed::Box`\n    |                          help: consider borrowing here: `&x`\n    |\n    = note: expected reference `&dyn Trait`"}, {"sha": "226f6fb620fc23ace028d445ecc3d31be8549509", "filename": "src/test/ui/deref-suggestion.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-suggestion.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     foo(s);\n    |         ^\n    |         |\n-   |         expected struct `std::string::String`, found &std::string::String\n+   |         expected struct `std::string::String`, found `&std::string::String`\n    |         help: try using a conversion method: `s.to_string()`\n \n error[E0308]: mismatched types\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n LL |     foo3(u);\n    |          ^\n    |          |\n-   |          expected u32, found &u32\n+   |          expected `u32`, found `&u32`\n    |          help: consider dereferencing the borrow: `*u`\n \n error[E0308]: mismatched types\n@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n LL |     foo(&\"aaa\".to_owned());\n    |         ^^^^^^^^^^^^^^^^^\n    |         |\n-   |         expected struct `std::string::String`, found &std::string::String\n+   |         expected struct `std::string::String`, found `&std::string::String`\n    |         help: consider removing the borrow: `\"aaa\".to_owned()`\n \n error[E0308]: mismatched types\n@@ -31,14 +31,14 @@ error[E0308]: mismatched types\n LL |     foo(&mut \"aaa\".to_owned());\n    |         ^^^^^^^^^^^^^^^^^^^^^\n    |         |\n-   |         expected struct `std::string::String`, found &mut std::string::String\n+   |         expected struct `std::string::String`, found `&mut std::string::String`\n    |         help: consider removing the borrow: `\"aaa\".to_owned()`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:2:20\n    |\n LL |     ($x:expr) => { &$x }\n-   |                    ^^^ expected u32, found &{integer}\n+   |                    ^^^ expected `u32`, found `&{integer}`\n ...\n LL |     foo3(borrow!(0));\n    |          ---------- in this macro invocation\n@@ -47,7 +47,7 @@ error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:36:5\n    |\n LL |     assert_eq!(3i32, &3i32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected i32, found &i32\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `&i32`\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n@@ -57,7 +57,7 @@ error[E0308]: mismatched types\n LL |     let s = S { u };\n    |                 ^\n    |                 |\n-   |                 expected &u32, found integer\n+   |                 expected `&u32`, found integer\n    |                 help: consider borrowing here: `u: &u`\n \n error[E0308]: mismatched types\n@@ -66,7 +66,7 @@ error[E0308]: mismatched types\n LL |     let s = S { u: u };\n    |                    ^\n    |                    |\n-   |                    expected &u32, found integer\n+   |                    expected `&u32`, found integer\n    |                    help: consider borrowing here: `&u`\n \n error[E0308]: mismatched types\n@@ -75,7 +75,7 @@ error[E0308]: mismatched types\n LL |     let r = R { i };\n    |                 ^\n    |                 |\n-   |                 expected u32, found &{integer}\n+   |                 expected `u32`, found `&{integer}`\n    |                 help: consider dereferencing the borrow: `i: *i`\n \n error[E0308]: mismatched types\n@@ -84,7 +84,7 @@ error[E0308]: mismatched types\n LL |     let r = R { i: i };\n    |                    ^\n    |                    |\n-   |                    expected u32, found &{integer}\n+   |                    expected `u32`, found `&{integer}`\n    |                    help: consider dereferencing the borrow: `*i`\n \n error: aborting due to 10 previous errors"}, {"sha": "fb92196b2bd56b57a6628d46a5e9e0a2ee2137f8", "filename": "src/test/ui/destructure-trait-ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fdestructure-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fdestructure-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructure-trait-ref.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -33,12 +33,12 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected trait object `dyn T`\n     //~| found reference `&_`\n-    //~| expected trait T, found reference\n+    //~| expected trait `T`, found reference\n     let &&&x = &(&1isize as &dyn T);\n     //~^ ERROR mismatched types\n     //~| expected trait object `dyn T`\n     //~| found reference `&_`\n-    //~| expected trait T, found reference\n+    //~| expected trait `T`, found reference\n     let box box x = box 1isize as Box<dyn T>;\n     //~^ ERROR mismatched types\n     //~| expected trait object `dyn T`"}, {"sha": "f77291969d2db7610957f27101ee855be277ef52", "filename": "src/test/ui/destructure-trait-ref.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n LL |     let &&x = &1isize as &dyn T;\n    |          ^^\n    |          |\n-   |          expected trait T, found reference\n+   |          expected trait `T`, found reference\n    |          help: you can probably remove the explicit borrow: `x`\n    |\n    = note: expected trait object `dyn T`\n@@ -34,7 +34,7 @@ error[E0308]: mismatched types\n LL |     let &&&x = &(&1isize as &dyn T);\n    |           ^^\n    |           |\n-   |           expected trait T, found reference\n+   |           expected trait `T`, found reference\n    |           help: you can probably remove the explicit borrow: `x`\n    |\n    = note: expected trait object `dyn T`\n@@ -44,7 +44,7 @@ error[E0308]: mismatched types\n   --> $DIR/destructure-trait-ref.rs:42:13\n    |\n LL |     let box box x = box 1isize as Box<dyn T>;\n-   |             ^^^^^ expected trait T, found struct `std::boxed::Box`\n+   |             ^^^^^ expected trait `T`, found struct `std::boxed::Box`\n    |\n    = note: expected trait object `dyn T`\n                     found struct `std::boxed::Box<_>`"}, {"sha": "16b80a6f4123637461b902e8cd4127900c4fbdde", "filename": "src/test/ui/did_you_mean/issue-42764.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-42764.rs:11:43\n    |\n LL |     this_function_expects_a_double_option(n);\n-   |                                           ^ expected enum `DoubleOption`, found usize\n+   |                                           ^ expected enum `DoubleOption`, found `usize`\n    |\n    = note: expected enum `DoubleOption<_>`\n               found type `usize`"}, {"sha": "e2c3c08a8d914ce476c7421b017847e6dc2f9e09", "filename": "src/test/ui/did_you_mean/issue-53280-expected-float-found-integer-literal.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-53280-expected-float-found-integer-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-53280-expected-float-found-integer-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-53280-expected-float-found-integer-literal.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let sixteen: f32 = 16;\n    |                        ^^\n    |                        |\n-   |                        expected f32, found integer\n+   |                        expected `f32`, found integer\n    |                        help: use a float literal: `16.0`\n \n error[E0308]: mismatched types\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n LL |     let a_million_and_seventy: f64 = 1_000_070;\n    |                                      ^^^^^^^^^\n    |                                      |\n-   |                                      expected f64, found integer\n+   |                                      expected `f64`, found integer\n    |                                      help: use a float literal: `1_000_070.0`\n \n error[E0308]: mismatched types\n@@ -22,20 +22,20 @@ error[E0308]: mismatched types\n LL |     let negative_nine: f32 = -9;\n    |                              ^^\n    |                              |\n-   |                              expected f32, found integer\n+   |                              expected `f32`, found integer\n    |                              help: use a float literal: `-9.0`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-53280-expected-float-found-integer-literal.rs:15:30\n    |\n LL |     let sixteen_again: f64 = 0x10;\n-   |                              ^^^^ expected f64, found integer\n+   |                              ^^^^ expected `f64`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/issue-53280-expected-float-found-integer-literal.rs:17:30\n    |\n LL |     let and_once_more: f32 = 0o20;\n-   |                              ^^^^ expected f32, found integer\n+   |                              ^^^^ expected `f32`, found integer\n \n error: aborting due to 5 previous errors\n "}, {"sha": "98c90f0ea6828f63526c8465b7683fa90f3161b3", "filename": "src/test/ui/discrim/discrim-ill-typed.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -16,7 +16,7 @@ fn f_i8() {\n         Ok2,\n         OhNo = 0_u8,\n         //~^ ERROR mismatched types\n-        //~| expected i8, found u8\n+        //~| expected `i8`, found `u8`\n     }\n \n     let x = A::Ok;\n@@ -29,7 +29,7 @@ fn f_u8() {\n         Ok2,\n         OhNo = 0_i8,\n         //~^ ERROR mismatched types\n-        //~| expected u8, found i8\n+        //~| expected `u8`, found `i8`\n     }\n \n     let x = A::Ok;\n@@ -42,7 +42,7 @@ fn f_i16() {\n         Ok2,\n         OhNo = 0_u16,\n         //~^ ERROR mismatched types\n-        //~| expected i16, found u16\n+        //~| expected `i16`, found `u16`\n     }\n \n     let x = A::Ok;\n@@ -55,7 +55,7 @@ fn f_u16() {\n         Ok2,\n         OhNo = 0_i16,\n         //~^ ERROR mismatched types\n-        //~| expected u16, found i16\n+        //~| expected `u16`, found `i16`\n     }\n \n     let x = A::Ok;\n@@ -68,7 +68,7 @@ fn f_i32() {\n         Ok2,\n         OhNo = 0_u32,\n         //~^ ERROR mismatched types\n-        //~| expected i32, found u32\n+        //~| expected `i32`, found `u32`\n     }\n \n     let x = A::Ok;\n@@ -81,7 +81,7 @@ fn f_u32() {\n         Ok2,\n         OhNo = 0_i32,\n         //~^ ERROR mismatched types\n-        //~| expected u32, found i32\n+        //~| expected `u32`, found `i32`\n     }\n \n     let x = A::Ok;\n@@ -94,7 +94,7 @@ fn f_i64() {\n         Ok2,\n         OhNo = 0_u64,\n         //~^ ERROR mismatched types\n-        //~| expected i64, found u64\n+        //~| expected `i64`, found `u64`\n     }\n \n     let x = A::Ok;\n@@ -107,7 +107,7 @@ fn f_u64() {\n         Ok2,\n         OhNo = 0_i64,\n         //~^ ERROR mismatched types\n-        //~| expected u64, found i64\n+        //~| expected `u64`, found `i64`\n     }\n \n     let x = A::Ok;"}, {"sha": "7b9f086151a847ce8aeabf426e1ab13b5d618844", "filename": "src/test/ui/discrim/discrim-ill-typed.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:17:16\n    |\n LL |         OhNo = 0_u8,\n-   |                ^^^^ expected i8, found u8\n+   |                ^^^^ expected `i8`, found `u8`\n    |\n help: change the type of the numeric literal from `u8` to `i8`\n    |\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:30:16\n    |\n LL |         OhNo = 0_i8,\n-   |                ^^^^ expected u8, found i8\n+   |                ^^^^ expected `u8`, found `i8`\n    |\n help: change the type of the numeric literal from `i8` to `u8`\n    |\n@@ -24,7 +24,7 @@ error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:43:16\n    |\n LL |         OhNo = 0_u16,\n-   |                ^^^^^ expected i16, found u16\n+   |                ^^^^^ expected `i16`, found `u16`\n    |\n help: change the type of the numeric literal from `u16` to `i16`\n    |\n@@ -35,7 +35,7 @@ error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:56:16\n    |\n LL |         OhNo = 0_i16,\n-   |                ^^^^^ expected u16, found i16\n+   |                ^^^^^ expected `u16`, found `i16`\n    |\n help: change the type of the numeric literal from `i16` to `u16`\n    |\n@@ -46,7 +46,7 @@ error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:69:16\n    |\n LL |         OhNo = 0_u32,\n-   |                ^^^^^ expected i32, found u32\n+   |                ^^^^^ expected `i32`, found `u32`\n    |\n help: change the type of the numeric literal from `u32` to `i32`\n    |\n@@ -57,7 +57,7 @@ error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:82:16\n    |\n LL |         OhNo = 0_i32,\n-   |                ^^^^^ expected u32, found i32\n+   |                ^^^^^ expected `u32`, found `i32`\n    |\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n@@ -68,7 +68,7 @@ error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:95:16\n    |\n LL |         OhNo = 0_u64,\n-   |                ^^^^^ expected i64, found u64\n+   |                ^^^^^ expected `i64`, found `u64`\n    |\n help: change the type of the numeric literal from `u64` to `i64`\n    |\n@@ -79,7 +79,7 @@ error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:108:16\n    |\n LL |         OhNo = 0_i64,\n-   |                ^^^^^ expected u64, found i64\n+   |                ^^^^^ expected `u64`, found `i64`\n    |\n help: change the type of the numeric literal from `i64` to `u64`\n    |"}, {"sha": "21361489a2c3af70f14e1c2e19936a726725b20e", "filename": "src/test/ui/diverging-fn-tail-35849.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fdiverging-fn-tail-35849.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fdiverging-fn-tail-35849.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiverging-fn-tail-35849.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -5,7 +5,7 @@ LL | fn assert_sizeof() -> ! {\n    |                       - expected `!` because of return type\n LL |     unsafe {\n LL |         ::std::mem::transmute::<f64, [u8; 8]>(panic!())\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected !, found array `[u8; 8]`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `!`, found array `[u8; 8]`\n    |\n    = note: expected type `!`\n              found array `[u8; 8]`"}, {"sha": "ad3e5ab3dc9d8a34c3bd26a8c7299b73815024bb", "filename": "src/test/ui/diverging-tuple-parts-39485.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fdiverging-tuple-parts-39485.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fdiverging-tuple-parts-39485.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiverging-tuple-parts-39485.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/diverging-tuple-parts-39485.rs:8:5\n    |\n LL |     &panic!()\n-   |     ^^^^^^^^^ expected (), found reference\n+   |     ^^^^^^^^^ expected `()`, found reference\n    |\n    = note: expected unit type `()`\n               found reference `&_`\n@@ -21,7 +21,7 @@ error[E0308]: mismatched types\n LL | fn f() -> isize {\n    |           ----- expected `isize` because of return type\n LL |     (return 1, return 2)\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected isize, found tuple\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found tuple\n    |\n    = note: expected type `isize`\n              found tuple `(!, !)`"}, {"sha": "e3b621b909a0c186ca7e6e477f1112a23b008754", "filename": "src/test/ui/dst/dst-bad-assign-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -32,7 +32,7 @@ pub fn main() {\n     let z: Box<dyn ToBar> = Box::new(Bar1 {f: 36});\n     f5.2 = Bar1 {f: 36};\n     //~^ ERROR mismatched types\n-    //~| expected trait ToBar, found struct `Bar1`\n+    //~| expected trait `ToBar`, found struct `Bar1`\n     //~| expected trait object `dyn ToBar`\n     //~| found struct `Bar1`\n     //~| ERROR the size for values of type"}, {"sha": "dc03f38e103874d1964d2b20b2d28e8190ea60e4", "filename": "src/test/ui/dst/dst-bad-assign-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-assign-3.rs:33:12\n    |\n LL |     f5.2 = Bar1 {f: 36};\n-   |            ^^^^^^^^^^^^ expected trait ToBar, found struct `Bar1`\n+   |            ^^^^^^^^^^^^ expected trait `ToBar`, found struct `Bar1`\n    |\n    = note: expected trait object `dyn ToBar`\n                     found struct `Bar1`"}, {"sha": "ed94242f5bfd072ebef41fc7407eaf9b60fa35e4", "filename": "src/test/ui/dst/dst-bad-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -34,7 +34,7 @@ pub fn main() {\n     let z: Box<dyn ToBar> = Box::new(Bar1 {f: 36});\n     f5.ptr = Bar1 {f: 36};\n     //~^ ERROR mismatched types\n-    //~| expected trait ToBar, found struct `Bar1`\n+    //~| expected trait `ToBar`, found struct `Bar1`\n     //~| expected trait object `dyn ToBar`\n     //~| found struct `Bar1`\n     //~| ERROR the size for values of type"}, {"sha": "8031f162482e39b0624f50735ab341b4bd78c38f", "filename": "src/test/ui/dst/dst-bad-assign.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-assign.rs:35:14\n    |\n LL |     f5.ptr = Bar1 {f: 36};\n-   |              ^^^^^^^^^^^^ expected trait ToBar, found struct `Bar1`\n+   |              ^^^^^^^^^^^^ expected trait `ToBar`, found struct `Bar1`\n    |\n    = note: expected trait object `dyn ToBar`\n                     found struct `Bar1`"}, {"sha": "6058594d64dedaf0167239a7ba1aee5113f20c51", "filename": "src/test/ui/dst/dst-bad-coercions.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:14:17\n    |\n LL |     let y: &S = x;\n-   |                 ^ expected &S, found *-ptr\n+   |                 ^ expected `&S`, found *-ptr\n    |\n    = note: expected reference `&S`\n             found raw pointer `*const S`\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n LL |     let y: &dyn T = x;\n    |                     ^\n    |                     |\n-   |                     expected &dyn T, found *-ptr\n+   |                     expected `&dyn T`, found *-ptr\n    |                     help: consider borrowing here: `&x`\n    |\n    = note: expected reference `&dyn T`\n@@ -23,7 +23,7 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:19:17\n    |\n LL |     let y: &S = x;\n-   |                 ^ expected &S, found *-ptr\n+   |                 ^ expected `&S`, found *-ptr\n    |\n    = note: expected reference `&S`\n             found raw pointer `*mut S`\n@@ -34,7 +34,7 @@ error[E0308]: mismatched types\n LL |     let y: &dyn T = x;\n    |                     ^\n    |                     |\n-   |                     expected &dyn T, found *-ptr\n+   |                     expected `&dyn T`, found *-ptr\n    |                     help: consider borrowing here: `&x`\n    |\n    = note: expected reference `&dyn T`"}, {"sha": "845833bc82f70e1eb0ab2f5f5d8476af5005b278", "filename": "src/test/ui/error-codes/E0070.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -14,7 +14,7 @@ error[E0308]: mismatched types\n   --> $DIR/E0070.rs:8:25\n    |\n LL |     some_other_func() = 4;\n-   |                         ^ expected (), found integer\n+   |                         ^ expected `()`, found integer\n \n error[E0070]: invalid left-hand side expression\n   --> $DIR/E0070.rs:8:5"}, {"sha": "b2dcdf8ee2ea2d90773c46dc6484f2a8c8ef4e35", "filename": "src/test/ui/error-codes/E0271.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -5,7 +5,7 @@ LL | fn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n    |    ---                         ------------------ required by this bound in `foo`\n ...\n LL |     foo(3_i8);\n-   |     ^^^ expected u32, found &str\n+   |     ^^^ expected `u32`, found `&str`\n \n error: aborting due to previous error\n "}, {"sha": "127fdaadbc5dd7d6caa4294fe9f271909c97ba99", "filename": "src/test/ui/error-codes/E0308-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match x {\n    |           - this match expression has type `u8`\n LL |         0u8..=3i8 => (),\n-   |         ^^^^^^^^^ expected u8, found i8\n+   |         ^^^^^^^^^ expected `u8`, found `i8`\n \n error: aborting due to previous error\n "}, {"sha": "b71fb95e706aa0af3e8d857af4bc1858494bcd32", "filename": "src/test/ui/error-codes/E0308.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Ferror-codes%2FE0308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Ferror-codes%2FE0308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0308.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: intrinsic has wrong type\n   --> $DIR/E0308.rs:4:5\n    |\n LL |     fn size_of<T>();\n-   |     ^^^^^^^^^^^^^^^^ expected (), found usize\n+   |     ^^^^^^^^^^^^^^^^ expected `()`, found `usize`\n    |\n    = note: expected fn pointer `extern \"rust-intrinsic\" fn()`\n               found fn pointer `extern \"rust-intrinsic\" fn() -> usize`"}, {"sha": "e5dbab6441cb9e5ddc6302d0696a45829a1aa879", "filename": "src/test/ui/estr-subtyping.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Festr-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Festr-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Festr-subtyping.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |    wants_uniq(x);\n    |               ^\n    |               |\n-   |               expected struct `std::string::String`, found &str\n+   |               expected struct `std::string::String`, found `&str`\n    |               help: try using a conversion method: `x.to_string()`\n \n error: aborting due to previous error"}, {"sha": "e6f84f4f354275ccf0a6236d61ee27246f93071d", "filename": "src/test/ui/float-literal-inference-restrictions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Ffloat-literal-inference-restrictions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Ffloat-literal-inference-restrictions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffloat-literal-inference-restrictions.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,14 +4,14 @@ error[E0308]: mismatched types\n LL |     let x: f32 = 1;\n    |                  ^\n    |                  |\n-   |                  expected f32, found integer\n+   |                  expected `f32`, found integer\n    |                  help: use a float literal: `1.0`\n \n error[E0308]: mismatched types\n   --> $DIR/float-literal-inference-restrictions.rs:3:18\n    |\n LL |     let y: f32 = 1f64;\n-   |                  ^^^^ expected f32, found f64\n+   |                  ^^^^ expected `f32`, found `f64`\n    |\n help: change the type of the numeric literal from `f64` to `f32`\n    |"}, {"sha": "13ebfd1e2033a50ddedf4f4128e0cbb95ccc4b8c", "filename": "src/test/ui/fn/fn-bad-block-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Ffn%2Ffn-bad-block-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Ffn%2Ffn-bad-block-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-bad-block-type.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-bad-block-type.rs:3:19\n    |\n LL | fn f() -> isize { true }\n-   |           -----   ^^^^ expected isize, found bool\n+   |           -----   ^^^^ expected `isize`, found `bool`\n    |           |\n    |           expected `isize` because of return type\n "}, {"sha": "18146d52551f9429ba3a686035e7eed36cd5572a", "filename": "src/test/ui/fn/fn-item-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -18,7 +18,7 @@ fn main() {\n \n     eq(foo::<u8>, foo::<i8>);\n     //~^ ERROR mismatched types\n-    //~| expected u8, found i8\n+    //~| expected `u8`, found `i8`\n \n     eq(bar::<String>, bar::<Vec<u8>>);\n     //~^ ERROR mismatched types\n@@ -29,5 +29,5 @@ fn main() {\n     // Make sure we distinguish between trait methods correctly.\n     eq(<u8 as Foo>::foo, <u16 as Foo>::foo);\n     //~^ ERROR mismatched types\n-    //~| expected u8, found u16\n+    //~| expected `u8`, found `u16`\n }"}, {"sha": "e25e9c21c9fbc3dad5549f99b5a429edea7685ae", "filename": "src/test/ui/fn/fn-item-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:19:19\n    |\n LL |     eq(foo::<u8>, foo::<i8>);\n-   |                   ^^^^^^^^^ expected u8, found i8\n+   |                   ^^^^^^^^^ expected `u8`, found `i8`\n    |\n    = note: expected fn item `fn(isize) -> isize {foo::<u8>}`\n               found fn item `fn(isize) -> isize {foo::<i8>}`\n@@ -29,7 +29,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:30:26\n    |\n LL |     eq(<u8 as Foo>::foo, <u16 as Foo>::foo);\n-   |                          ^^^^^^^^^^^^^^^^^ expected u8, found u16\n+   |                          ^^^^^^^^^^^^^^^^^ expected `u8`, found `u16`\n    |\n    = note: expected fn item `fn() {<u8 as Foo>::foo}`\n               found fn item `fn() {<u16 as Foo>::foo}`"}, {"sha": "5e7d6ad9534def74a8264b68f543d5f2a06afade", "filename": "src/test/ui/fn/fn-trait-formatting.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:6:17\n    |\n LL |     let _: () = (box |_: isize| {}) as Box<dyn FnOnce(isize)>;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `std::boxed::Box`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `std::boxed::Box`\n    |\n    = note: expected unit type `()`\n                  found struct `std::boxed::Box<dyn std::ops::FnOnce(isize)>`\n@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:10:17\n    |\n LL |     let _: () = (box |_: isize, isize| {}) as Box<dyn Fn(isize, isize)>;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `std::boxed::Box`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `std::boxed::Box`\n    |\n    = note: expected unit type `()`\n                  found struct `std::boxed::Box<dyn std::ops::Fn(isize, isize)>`\n@@ -20,7 +20,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:14:17\n    |\n LL |     let _: () = (box || -> isize { unimplemented!() }) as Box<dyn FnMut() -> isize>;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `std::boxed::Box`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `std::boxed::Box`\n    |\n    = note: expected unit type `()`\n                  found struct `std::boxed::Box<dyn std::ops::FnMut() -> isize>`"}, {"sha": "30cb3ee48e768dda11044e629f26e3e8e661e5cd", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -7,7 +7,7 @@ fn bar(x: usize) -> Option<usize> {\n     //~^ ERROR mismatched types\n     //~| expected enum `std::option::Option<usize>`\n     //~| found type `usize`\n-    //~| expected enum `std::option::Option`, found usize\n+    //~| expected enum `std::option::Option`, found `usize`\n }\n \n fn main() {"}, {"sha": "b388f38a7fac70b928f7d89c6633acf6de422f60", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn bar(x: usize) -> Option<usize> {\n    |                     ------------- expected `std::option::Option<usize>` because of return type\n LL |     return x;\n-   |            ^ expected enum `std::option::Option`, found usize\n+   |            ^ expected enum `std::option::Option`, found `usize`\n    |\n    = note: expected enum `std::option::Option<usize>`\n               found type `usize`"}, {"sha": "8606ecd33dab4bab4c94890fe649c57b7fa76420", "filename": "src/test/ui/generator/type-mismatch-signature-deduction.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/type-mismatch-signature-deduction.rs:8:20\n    |\n LL |             return Ok(6);\n-   |                    ^^^^^ expected i32, found enum `std::result::Result`\n+   |                    ^^^^^ expected `i32`, found enum `std::result::Result`\n    |\n    = note: expected type `i32`\n               found enum `std::result::Result<{integer}, _>`"}, {"sha": "4b86212e4862be48583f6305fef7d2a7e69152bd", "filename": "src/test/ui/generic/generic-arg-mismatch-recover.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-arg-mismatch-recover.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-arg-mismatch-recover.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-arg-mismatch-recover.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -8,7 +8,7 @@ error[E0308]: mismatched types\n   --> $DIR/generic-arg-mismatch-recover.rs:6:33\n    |\n LL |     Foo::<'static, 'static, ()>(&0);\n-   |                                 ^^ expected (), found integer\n+   |                                 ^^ expected `()`, found integer\n    |\n    = note: expected reference `&'static ()`\n               found reference `&{integer}`"}, {"sha": "45dc85a252f40f76518adc0d9836736615fdce57", "filename": "src/test/ui/generic/generic-type-params-name-repr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -12,40 +12,40 @@ fn main() {\n     // Ensure that the printed type doesn't include the default type params...\n     let _: Foo<isize> = ();\n     //~^ ERROR mismatched types\n-    //~| expected struct `Foo`, found ()\n+    //~| expected struct `Foo`, found `()`\n     //~| expected struct `Foo<isize>`\n     //~| found unit type `()`\n \n     // ...even when they're present, but the same types as the defaults.\n     let _: Foo<isize, B, C> = ();\n     //~^ ERROR mismatched types\n-    //~| expected struct `Foo`, found ()\n+    //~| expected struct `Foo`, found `()`\n     //~| expected struct `Foo<isize>`\n     //~| found unit type `()`\n \n     // Including cases where the default is using previous type params.\n     let _: HashMap<String, isize> = ();\n     //~^ ERROR mismatched types\n-    //~| expected struct `HashMap`, found ()\n+    //~| expected struct `HashMap`, found `()`\n     //~| expected struct `HashMap<std::string::String, isize>`\n     //~| found unit type `()`\n     let _: HashMap<String, isize, Hash<String>> = ();\n     //~^ ERROR mismatched types\n-    //~| expected struct `HashMap`, found ()\n+    //~| expected struct `HashMap`, found `()`\n     //~| expected struct `HashMap<std::string::String, isize>`\n     //~| found unit type `()`\n \n     // But not when there's a different type in between.\n     let _: Foo<A, isize, C> = ();\n     //~^ ERROR mismatched types\n-    //~| expected struct `Foo`, found ()\n+    //~| expected struct `Foo`, found `()`\n     //~| expected struct `Foo<A, isize>`\n     //~| found unit type `()`\n \n     // And don't print <> at all when there's just defaults.\n     let _: Foo<A, B, C> = ();\n     //~^ ERROR mismatched types\n-    //~| expected struct `Foo`, found ()\n+    //~| expected struct `Foo`, found `()`\n     //~| expected struct `Foo`\n     //~| found unit type `()`\n }"}, {"sha": "f20bd1846d758796a1c0773ea86ecc88fb66eb41", "filename": "src/test/ui/generic/generic-type-params-name-repr.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:13:25\n    |\n LL |     let _: Foo<isize> = ();\n-   |                         ^^ expected struct `Foo`, found ()\n+   |                         ^^ expected struct `Foo`, found `()`\n    |\n    = note: expected struct `Foo<isize>`\n            found unit type `()`\n@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:20:31\n    |\n LL |     let _: Foo<isize, B, C> = ();\n-   |                               ^^ expected struct `Foo`, found ()\n+   |                               ^^ expected struct `Foo`, found `()`\n    |\n    = note: expected struct `Foo<isize>`\n            found unit type `()`\n@@ -20,7 +20,7 @@ error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:27:37\n    |\n LL |     let _: HashMap<String, isize> = ();\n-   |                                     ^^ expected struct `HashMap`, found ()\n+   |                                     ^^ expected struct `HashMap`, found `()`\n    |\n    = note: expected struct `HashMap<std::string::String, isize>`\n            found unit type `()`\n@@ -29,7 +29,7 @@ error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:32:51\n    |\n LL |     let _: HashMap<String, isize, Hash<String>> = ();\n-   |                                                   ^^ expected struct `HashMap`, found ()\n+   |                                                   ^^ expected struct `HashMap`, found `()`\n    |\n    = note: expected struct `HashMap<std::string::String, isize>`\n            found unit type `()`\n@@ -38,7 +38,7 @@ error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:39:31\n    |\n LL |     let _: Foo<A, isize, C> = ();\n-   |                               ^^ expected struct `Foo`, found ()\n+   |                               ^^ expected struct `Foo`, found `()`\n    |\n    = note: expected struct `Foo<A, isize>`\n            found unit type `()`\n@@ -47,7 +47,7 @@ error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:46:27\n    |\n LL |     let _: Foo<A, B, C> = ();\n-   |                           ^^ expected struct `Foo`, found ()\n+   |                           ^^ expected struct `Foo`, found `()`\n    |\n    = note: expected struct `Foo`\n            found unit type `()`"}, {"sha": "14e8f87393ba159327e8a03970a30903b10fdb6b", "filename": "src/test/ui/if-else-type-mismatch.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fif-else-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fif-else-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-else-type-mismatch.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -7,15 +7,15 @@ LL | |         1i32\n    | |         ---- expected because of this\n LL | |     } else {\n LL | |         2u32\n-   | |         ^^^^ expected i32, found u32\n+   | |         ^^^^ expected `i32`, found `u32`\n LL | |     };\n    | |_____- if and else have incompatible types\n \n error[E0308]: if and else have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:8:38\n    |\n LL |     let _ = if true { 42i32 } else { 42u32 };\n-   |                       -----          ^^^^^ expected i32, found u32\n+   |                       -----          ^^^^^ expected `i32`, found `u32`\n    |                       |\n    |                       expected because of this\n \n@@ -31,7 +31,7 @@ LL | |         3u32;\n    | |         expected because of this\n LL | |     } else {\n LL | |         4u32\n-   | |         ^^^^ expected (), found u32\n+   | |         ^^^^ expected `()`, found `u32`\n LL | |     };\n    | |_____- if and else have incompatible types\n \n@@ -47,7 +47,7 @@ LL | |         6u32;\n    | |         ^^^^-\n    | |         |   |\n    | |         |   help: consider removing this semicolon\n-   | |         expected u32, found ()\n+   | |         expected `u32`, found `()`\n LL | |     };\n    | |_____- if and else have incompatible types\n \n@@ -60,7 +60,7 @@ LL | |         7i32;\n    | |         ----- expected because of this\n LL | |     } else {\n LL | |         8u32\n-   | |         ^^^^ expected (), found u32\n+   | |         ^^^^ expected `()`, found `u32`\n LL | |     };\n    | |_____- if and else have incompatible types\n \n@@ -73,7 +73,7 @@ LL | |         9i32\n    | |         ---- expected because of this\n LL | |     } else {\n LL | |         10u32;\n-   | |         ^^^^^^ expected i32, found ()\n+   | |         ^^^^^^ expected `i32`, found `()`\n LL | |     };\n    | |_____- if and else have incompatible types\n \n@@ -86,7 +86,7 @@ LL | |\n LL | |     } else {\n    | |_____- expected because of this\n LL |           11u32\n-   |           ^^^^^ expected (), found u32\n+   |           ^^^^^ expected `()`, found `u32`\n \n error[E0308]: if and else have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:42:12\n@@ -99,7 +99,7 @@ LL |       } else {\n    |  ____________^\n LL | |\n LL | |     };\n-   | |_____^ expected i32, found ()\n+   | |_____^ expected `i32`, found `()`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "5c693194a76a136fed8bf108bab50bf3c11cce4e", "filename": "src/test/ui/if/if-branch-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fif%2Fif-branch-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fif%2Fif-branch-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-branch-types.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let x = if true { 10i32 } else { 10u32 };\n     //~^ ERROR if and else have incompatible types\n-    //~| expected i32, found u32\n+    //~| expected `i32`, found `u32`\n }"}, {"sha": "b5eacf5860f8ac378e7f93c3db314388b30949e1", "filename": "src/test/ui/if/if-branch-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fif%2Fif-branch-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fif%2Fif-branch-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-branch-types.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: if and else have incompatible types\n   --> $DIR/if-branch-types.rs:2:38\n    |\n LL |     let x = if true { 10i32 } else { 10u32 };\n-   |                       -----          ^^^^^ expected i32, found u32\n+   |                       -----          ^^^^^ expected `i32`, found `u32`\n    |                       |\n    |                       expected because of this\n "}, {"sha": "cae4f0974c6c4bf5812851764fd1ae6602005860", "filename": "src/test/ui/if/if-let-arm-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -7,5 +7,5 @@ fn main() {\n         1\n     };\n     //~^^ ERROR: if and else have incompatible types\n-    //~| NOTE expected (), found integer\n+    //~| NOTE expected `()`, found integer\n }"}, {"sha": "da93dfc999507bd8beb0322b9fe58c4ff0fca581", "filename": "src/test/ui/if/if-let-arm-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -8,7 +8,7 @@ LL | |         ()\n LL | |\n LL | |     } else {\n LL | |         1\n-   | |         ^ expected (), found integer\n+   | |         ^ expected `()`, found integer\n LL | |     };\n    | |_____- if and else have incompatible types\n "}, {"sha": "3f382e023a776f98594da06025d73f288f4fbb1c", "filename": "src/test/ui/if/if-no-match-bindings.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fif%2Fif-no-match-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fif%2Fif-no-match-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-no-match-bindings.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     if b_ref() {}\n    |        ^^^^^^^\n    |        |\n-   |        expected bool, found &bool\n+   |        expected `bool`, found `&bool`\n    |        help: consider dereferencing the borrow: `*b_ref()`\n \n error[E0308]: mismatched types\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n LL |     if b_mut_ref() {}\n    |        ^^^^^^^^^^^\n    |        |\n-   |        expected bool, found &mut bool\n+   |        expected `bool`, found `&mut bool`\n    |        help: consider dereferencing the borrow: `*b_mut_ref()`\n \n error[E0308]: mismatched types\n@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n LL |     if &true {}\n    |        ^^^^^\n    |        |\n-   |        expected bool, found &bool\n+   |        expected `bool`, found `&bool`\n    |        help: consider removing the borrow: `true`\n \n error[E0308]: mismatched types\n@@ -31,7 +31,7 @@ error[E0308]: mismatched types\n LL |     if &mut true {}\n    |        ^^^^^^^^^\n    |        |\n-   |        expected bool, found &mut bool\n+   |        expected `bool`, found `&mut bool`\n    |        help: consider removing the borrow: `true`\n \n error[E0308]: mismatched types\n@@ -40,7 +40,7 @@ error[E0308]: mismatched types\n LL |     while b_ref() {}\n    |           ^^^^^^^\n    |           |\n-   |           expected bool, found &bool\n+   |           expected `bool`, found `&bool`\n    |           help: consider dereferencing the borrow: `*b_ref()`\n \n error[E0308]: mismatched types\n@@ -49,7 +49,7 @@ error[E0308]: mismatched types\n LL |     while b_mut_ref() {}\n    |           ^^^^^^^^^^^\n    |           |\n-   |           expected bool, found &mut bool\n+   |           expected `bool`, found `&mut bool`\n    |           help: consider dereferencing the borrow: `*b_mut_ref()`\n \n error[E0308]: mismatched types\n@@ -58,7 +58,7 @@ error[E0308]: mismatched types\n LL |     while &true {}\n    |           ^^^^^\n    |           |\n-   |           expected bool, found &bool\n+   |           expected `bool`, found `&bool`\n    |           help: consider removing the borrow: `true`\n \n error[E0308]: mismatched types\n@@ -67,7 +67,7 @@ error[E0308]: mismatched types\n LL |     while &mut true {}\n    |           ^^^^^^^^^\n    |           |\n-   |           expected bool, found &mut bool\n+   |           expected `bool`, found `&mut bool`\n    |           help: consider removing the borrow: `true`\n \n error: aborting due to 8 previous errors"}, {"sha": "74ed0ed0ae6bded4ff517c787ea0f13d3c397db1", "filename": "src/test/ui/if/if-typeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fif%2Fif-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fif%2Fif-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-typeck.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/if-typeck.rs:9:8\n    |\n LL |     if f { }\n-   |        ^ expected bool, found fn item\n+   |        ^ expected `bool`, found fn item\n    |\n    = note: expected type `bool`\n            found fn item `fn() {f}`"}, {"sha": "9c7e7002360db560cf1d8a35f824dbc0188c8b62", "filename": "src/test/ui/if/if-without-else-as-fn-expr.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -6,7 +6,7 @@ LL |   fn foo(bar: usize) -> usize {\n LL | /     if bar % 5 == 0 {\n LL | |         return 3;\n LL | |     }\n-   | |_____^ expected usize, found ()\n+   | |_____^ expected `usize`, found `()`\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n@@ -20,7 +20,7 @@ LL |       let x: usize = if bar % 5 == 0 {\n    | |         expected because of this assignment\n LL | |         return 3;\n LL | |     };\n-   | |_____^ expected usize, found ()\n+   | |_____^ expected `usize`, found `()`\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n@@ -33,7 +33,7 @@ LL |   fn foo3(bar: usize) -> usize {\n LL | /     if bar % 5 == 0 {\n LL | |         3\n LL | |     }\n-   | |_____^ expected usize, found ()\n+   | |_____^ expected `usize`, found `()`\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n@@ -46,7 +46,7 @@ LL |   fn foo_let(bar: usize) -> usize {\n LL | /     if let 0 = 1 {\n LL | |         return 3;\n LL | |     }\n-   | |_____^ expected usize, found ()\n+   | |_____^ expected `usize`, found `()`\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n@@ -60,7 +60,7 @@ LL |       let x: usize = if let 0 = 1 {\n    | |         expected because of this assignment\n LL | |         return 3;\n LL | |     };\n-   | |_____^ expected usize, found ()\n+   | |_____^ expected `usize`, found `()`\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n@@ -73,7 +73,7 @@ LL |   fn foo3_let(bar: usize) -> usize {\n LL | /     if let 0 = 1 {\n LL | |         3\n LL | |     }\n-   | |_____^ expected usize, found ()\n+   | |_____^ expected `usize`, found `()`\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type"}, {"sha": "e5fb7b26321e42d0b49f8ad2d180800d3fab5c58", "filename": "src/test/ui/if/if-without-else-result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let a = if true { true };\n     //~^ ERROR if may be missing an else clause [E0317]\n-    //~| expected (), found bool\n+    //~| expected `()`, found `bool`\n     println!(\"{}\", a);\n }"}, {"sha": "66a8185774e6a41cb88d89bd1f32d9bd0f2b43de", "filename": "src/test/ui/if/if-without-else-result.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -5,7 +5,7 @@ LL |     let a = if true { true };\n    |             ^^^^^^^^^^----^^\n    |             |         |\n    |             |         found here\n-   |             expected (), found bool\n+   |             expected `()`, found `bool`\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type"}, {"sha": "07917c2a540d59594015b524c12a3db542a35dbd", "filename": "src/test/ui/if/ifmt-bad-arg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -300,7 +300,7 @@ error[E0308]: mismatched types\n   --> $DIR/ifmt-bad-arg.rs:78:32\n    |\n LL |     println!(\"{} {:.*} {}\", 1, 3.2, 4);\n-   |                                ^^^ expected usize, found floating-point number\n+   |                                ^^^ expected `usize`, found floating-point number\n    |\n    = note: expected reference `&usize`\n               found reference `&{float}`\n@@ -309,7 +309,7 @@ error[E0308]: mismatched types\n   --> $DIR/ifmt-bad-arg.rs:81:35\n    |\n LL |     println!(\"{} {:07$.*} {}\", 1, 3.2, 4);\n-   |                                   ^^^ expected usize, found floating-point number\n+   |                                   ^^^ expected `usize`, found floating-point number\n    |\n    = note: expected reference `&usize`\n               found reference `&{float}`"}, {"sha": "fc4cddd02168ece1a46de99c268609011d007660", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -10,7 +10,7 @@ error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as imp\n   --> $DIR/bound-normalization-fail.rs:28:32\n    |\n LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found associated type\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:         expected type `()`\n            found associated type `<T as impl_trait::Trait>::Assoc`\n@@ -28,7 +28,7 @@ error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lif\n   --> $DIR/bound-normalization-fail.rs:44:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found associated type\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:         expected type `()`\n            found associated type `<T as lifetimes::Trait<'static>>::Assoc`"}, {"sha": "14b0eeb739ae5b0a4359d8e3f832b077388ae5b4", "filename": "src/test/ui/impl-trait/equality.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -14,7 +14,7 @@ fn two(x: bool) -> impl Foo {\n     }\n     0_u32\n     //~^ ERROR mismatched types\n-    //~| expected i32, found u32\n+    //~| expected `i32`, found `u32`\n }\n \n fn sum_to(n: u32) -> impl Foo {"}, {"sha": "e53524e58d663d8c3a5bd7afd4a39cffeedb9956", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -8,7 +8,7 @@ LL |         return 1_i32;\n    |                ----- ...is found to be `i32` here\n LL |     }\n LL |     0_u32\n-   |     ^^^^^ expected i32, found u32\n+   |     ^^^^^ expected `i32`, found `u32`\n \n error[E0277]: cannot add `impl Foo` to `u32`\n   --> $DIR/equality.rs:24:11"}, {"sha": "abce8c8c204bd2d8d1f06363883a55565fe0bf7f", "filename": "src/test/ui/impl-trait/equality2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -26,19 +26,19 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected type `u32`\n     //~| found opaque type `impl Foo`\n-    //~| expected u32, found opaque type\n+    //~| expected `u32`, found opaque type\n \n     let _: i32 = Leak::leak(hide(0_i32));\n     //~^ ERROR mismatched types\n     //~| expected type `i32`\n     //~| found associated type `<impl Foo as Leak>::T`\n-    //~| expected i32, found associated type\n+    //~| expected `i32`, found associated type\n \n     let mut x = (hide(0_u32), hide(0_i32));\n     x = (x.1,\n     //~^ ERROR mismatched types\n-    //~| expected u32, found i32\n+    //~| expected `u32`, found `i32`\n          x.0);\n     //~^ ERROR mismatched types\n-    //~| expected i32, found u32\n+    //~| expected `i32`, found `u32`\n }"}, {"sha": "7a656fca28b58557a0159fc1bb3f5e59e814c879", "filename": "src/test/ui/impl-trait/equality2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/equality2.rs:25:18\n    |\n LL |     let _: u32 = hide(0_u32);\n-   |                  ^^^^^^^^^^^ expected u32, found opaque type\n+   |                  ^^^^^^^^^^^ expected `u32`, found opaque type\n    |\n    = note:     expected type `u32`\n            found opaque type `impl Foo`\n@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/equality2.rs:31:18\n    |\n LL |     let _: i32 = Leak::leak(hide(0_i32));\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^ expected i32, found associated type\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found associated type\n    |\n    = note:         expected type `i32`\n            found associated type `<impl Foo as Leak>::T`\n@@ -22,19 +22,19 @@ error[E0308]: mismatched types\n   --> $DIR/equality2.rs:38:10\n    |\n LL |     x = (x.1,\n-   |          ^^^ expected u32, found i32\n+   |          ^^^ expected `u32`, found `i32`\n    |\n-   = note: expected opaque type `impl Foo` (u32)\n-              found opaque type `impl Foo` (i32)\n+   = note: expected opaque type `impl Foo` (`u32`)\n+              found opaque type `impl Foo` (`i32`)\n \n error[E0308]: mismatched types\n   --> $DIR/equality2.rs:41:10\n    |\n LL |          x.0);\n-   |          ^^^ expected i32, found u32\n+   |          ^^^ expected `i32`, found `u32`\n    |\n-   = note: expected opaque type `impl Foo` (i32)\n-              found opaque type `impl Foo` (u32)\n+   = note: expected opaque type `impl Foo` (`i32`)\n+              found opaque type `impl Foo` (`u32`)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "33daf372f986b7d2bce2cfae81b2a11ee42e5a5b", "filename": "src/test/ui/include-macros/mismatched-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Finclude-macros%2Fmismatched-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Finclude-macros%2Fmismatched-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finclude-macros%2Fmismatched-types.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/mismatched-types.rs:2:20\n    |\n LL |     let b: &[u8] = include_str!(\"file.txt\");\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[u8]`, found str\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[u8]`, found `str`\n    |\n    = note: expected reference `&[u8]`\n               found reference `&'static str`\n@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/mismatched-types.rs:3:19\n    |\n LL |     let s: &str = include_bytes!(\"file.txt\");\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected str, found array `[u8; 0]`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found array `[u8; 0]`\n    |\n    = note: expected reference `&str`\n               found reference `&'static [u8; 0]`"}, {"sha": "70614cbbf9f634b1cfe8e2e013ba89ad276a76ed", "filename": "src/test/ui/indexing-requires-a-uint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/indexing-requires-a-uint.rs:12:18\n    |\n LL |     bar::<isize>(i);  // i should not be re-coerced back to an isize\n-   |                  ^ expected isize, found usize\n+   |                  ^ expected `isize`, found `usize`\n    |\n help: you can convert an `usize` to `isize` and panic if the converted value wouldn't fit\n    |"}, {"sha": "3f4bedc4c2224386e99dbf21e676f215ffe4e893", "filename": "src/test/ui/integer-literal-suffix-inference.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -31,132 +31,132 @@ fn main() {\n     id_i8(a8); // ok\n     id_i8(a16);\n     //~^ ERROR mismatched types\n-    //~| expected i8, found i16\n+    //~| expected `i8`, found `i16`\n     id_i8(a32);\n     //~^ ERROR mismatched types\n-    //~| expected i8, found i32\n+    //~| expected `i8`, found `i32`\n     id_i8(a64);\n     //~^ ERROR mismatched types\n-    //~| expected i8, found i64\n+    //~| expected `i8`, found `i64`\n \n     id_i16(a8);\n     //~^ ERROR mismatched types\n-    //~| expected i16, found i8\n+    //~| expected `i16`, found `i8`\n     id_i16(a16); // ok\n     id_i16(a32);\n     //~^ ERROR mismatched types\n-    //~| expected i16, found i32\n+    //~| expected `i16`, found `i32`\n     id_i16(a64);\n     //~^ ERROR mismatched types\n-    //~| expected i16, found i64\n+    //~| expected `i16`, found `i64`\n \n     id_i32(a8);\n     //~^ ERROR mismatched types\n-    //~| expected i32, found i8\n+    //~| expected `i32`, found `i8`\n     id_i32(a16);\n     //~^ ERROR mismatched types\n-    //~| expected i32, found i16\n+    //~| expected `i32`, found `i16`\n     id_i32(a32); // ok\n     id_i32(a64);\n     //~^ ERROR mismatched types\n-    //~| expected i32, found i64\n+    //~| expected `i32`, found `i64`\n \n     id_i64(a8);\n     //~^ ERROR mismatched types\n-    //~| expected i64, found i8\n+    //~| expected `i64`, found `i8`\n     id_i64(a16);\n     //~^ ERROR mismatched types\n-    //~| expected i64, found i16\n+    //~| expected `i64`, found `i16`\n     id_i64(a32);\n     //~^ ERROR mismatched types\n-    //~| expected i64, found i32\n+    //~| expected `i64`, found `i32`\n     id_i64(a64); // ok\n \n     id_i8(c8); // ok\n     id_i8(c16);\n     //~^ ERROR mismatched types\n-    //~| expected i8, found i16\n+    //~| expected `i8`, found `i16`\n     id_i8(c32);\n     //~^ ERROR mismatched types\n-    //~| expected i8, found i32\n+    //~| expected `i8`, found `i32`\n     id_i8(c64);\n     //~^ ERROR mismatched types\n-    //~| expected i8, found i64\n+    //~| expected `i8`, found `i64`\n \n     id_i16(c8);\n     //~^ ERROR mismatched types\n-    //~| expected i16, found i8\n+    //~| expected `i16`, found `i8`\n     id_i16(c16); // ok\n     id_i16(c32);\n     //~^ ERROR mismatched types\n-    //~| expected i16, found i32\n+    //~| expected `i16`, found `i32`\n     id_i16(c64);\n     //~^ ERROR mismatched types\n-    //~| expected i16, found i64\n+    //~| expected `i16`, found `i64`\n \n     id_i32(c8);\n     //~^ ERROR mismatched types\n-    //~| expected i32, found i8\n+    //~| expected `i32`, found `i8`\n     id_i32(c16);\n     //~^ ERROR mismatched types\n-    //~| expected i32, found i16\n+    //~| expected `i32`, found `i16`\n     id_i32(c32); // ok\n     id_i32(c64);\n     //~^ ERROR mismatched types\n-    //~| expected i32, found i64\n+    //~| expected `i32`, found `i64`\n \n     id_i64(a8);\n     //~^ ERROR mismatched types\n-    //~| expected i64, found i8\n+    //~| expected `i64`, found `i8`\n     id_i64(a16);\n     //~^ ERROR mismatched types\n-    //~| expected i64, found i16\n+    //~| expected `i64`, found `i16`\n     id_i64(a32);\n     //~^ ERROR mismatched types\n-    //~| expected i64, found i32\n+    //~| expected `i64`, found `i32`\n     id_i64(a64); // ok\n \n     id_u8(b8); // ok\n     id_u8(b16);\n     //~^ ERROR mismatched types\n-    //~| expected u8, found u16\n+    //~| expected `u8`, found `u16`\n     id_u8(b32);\n     //~^ ERROR mismatched types\n-    //~| expected u8, found u32\n+    //~| expected `u8`, found `u32`\n     id_u8(b64);\n     //~^ ERROR mismatched types\n-    //~| expected u8, found u64\n+    //~| expected `u8`, found `u64`\n \n     id_u16(b8);\n     //~^ ERROR mismatched types\n-    //~| expected u16, found u8\n+    //~| expected `u16`, found `u8`\n     id_u16(b16); // ok\n     id_u16(b32);\n     //~^ ERROR mismatched types\n-    //~| expected u16, found u32\n+    //~| expected `u16`, found `u32`\n     id_u16(b64);\n     //~^ ERROR mismatched types\n-    //~| expected u16, found u64\n+    //~| expected `u16`, found `u64`\n \n     id_u32(b8);\n     //~^ ERROR mismatched types\n-    //~| expected u32, found u8\n+    //~| expected `u32`, found `u8`\n     id_u32(b16);\n     //~^ ERROR mismatched types\n-    //~| expected u32, found u16\n+    //~| expected `u32`, found `u16`\n     id_u32(b32); // ok\n     id_u32(b64);\n     //~^ ERROR mismatched types\n-    //~| expected u32, found u64\n+    //~| expected `u32`, found `u64`\n \n     id_u64(b8);\n     //~^ ERROR mismatched types\n-    //~| expected u64, found u8\n+    //~| expected `u64`, found `u8`\n     id_u64(b16);\n     //~^ ERROR mismatched types\n-    //~| expected u64, found u16\n+    //~| expected `u64`, found `u16`\n     id_u64(b32);\n     //~^ ERROR mismatched types\n-    //~| expected u64, found u32\n+    //~| expected `u64`, found `u32`\n     id_u64(b64); // ok\n }"}, {"sha": "a34f0645c6b971b450202b9167fbde3fc3a0c398", "filename": "src/test/ui/integer-literal-suffix-inference.stderr", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:32:11\n    |\n LL |     id_i8(a16);\n-   |           ^^^ expected i8, found i16\n+   |           ^^^ expected `i8`, found `i16`\n    |\n help: you can convert an `i16` to `i8` and panic if the converted value wouldn't fit\n    |\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:35:11\n    |\n LL |     id_i8(a32);\n-   |           ^^^ expected i8, found i32\n+   |           ^^^ expected `i8`, found `i32`\n    |\n help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n    |\n@@ -24,7 +24,7 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:38:11\n    |\n LL |     id_i8(a64);\n-   |           ^^^ expected i8, found i64\n+   |           ^^^ expected `i8`, found `i64`\n    |\n help: you can convert an `i64` to `i8` and panic if the converted value wouldn't fit\n    |\n@@ -37,14 +37,14 @@ error[E0308]: mismatched types\n LL |     id_i16(a8);\n    |            ^^\n    |            |\n-   |            expected i16, found i8\n+   |            expected `i16`, found `i8`\n    |            help: you can convert an `i8` to `i16`: `a8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:46:12\n    |\n LL |     id_i16(a32);\n-   |            ^^^ expected i16, found i32\n+   |            ^^^ expected `i16`, found `i32`\n    |\n help: you can convert an `i32` to `i16` and panic if the converted value wouldn't fit\n    |\n@@ -55,7 +55,7 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:49:12\n    |\n LL |     id_i16(a64);\n-   |            ^^^ expected i16, found i64\n+   |            ^^^ expected `i16`, found `i64`\n    |\n help: you can convert an `i64` to `i16` and panic if the converted value wouldn't fit\n    |\n@@ -68,7 +68,7 @@ error[E0308]: mismatched types\n LL |     id_i32(a8);\n    |            ^^\n    |            |\n-   |            expected i32, found i8\n+   |            expected `i32`, found `i8`\n    |            help: you can convert an `i8` to `i32`: `a8.into()`\n \n error[E0308]: mismatched types\n@@ -77,14 +77,14 @@ error[E0308]: mismatched types\n LL |     id_i32(a16);\n    |            ^^^\n    |            |\n-   |            expected i32, found i16\n+   |            expected `i32`, found `i16`\n    |            help: you can convert an `i16` to `i32`: `a16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:60:12\n    |\n LL |     id_i32(a64);\n-   |            ^^^ expected i32, found i64\n+   |            ^^^ expected `i32`, found `i64`\n    |\n help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n    |\n@@ -97,7 +97,7 @@ error[E0308]: mismatched types\n LL |     id_i64(a8);\n    |            ^^\n    |            |\n-   |            expected i64, found i8\n+   |            expected `i64`, found `i8`\n    |            help: you can convert an `i8` to `i64`: `a8.into()`\n \n error[E0308]: mismatched types\n@@ -106,7 +106,7 @@ error[E0308]: mismatched types\n LL |     id_i64(a16);\n    |            ^^^\n    |            |\n-   |            expected i64, found i16\n+   |            expected `i64`, found `i16`\n    |            help: you can convert an `i16` to `i64`: `a16.into()`\n \n error[E0308]: mismatched types\n@@ -115,14 +115,14 @@ error[E0308]: mismatched types\n LL |     id_i64(a32);\n    |            ^^^\n    |            |\n-   |            expected i64, found i32\n+   |            expected `i64`, found `i32`\n    |            help: you can convert an `i32` to `i64`: `a32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:76:11\n    |\n LL |     id_i8(c16);\n-   |           ^^^ expected i8, found i16\n+   |           ^^^ expected `i8`, found `i16`\n    |\n help: you can convert an `i16` to `i8` and panic if the converted value wouldn't fit\n    |\n@@ -133,7 +133,7 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:79:11\n    |\n LL |     id_i8(c32);\n-   |           ^^^ expected i8, found i32\n+   |           ^^^ expected `i8`, found `i32`\n    |\n help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n    |\n@@ -144,7 +144,7 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:82:11\n    |\n LL |     id_i8(c64);\n-   |           ^^^ expected i8, found i64\n+   |           ^^^ expected `i8`, found `i64`\n    |\n help: you can convert an `i64` to `i8` and panic if the converted value wouldn't fit\n    |\n@@ -157,14 +157,14 @@ error[E0308]: mismatched types\n LL |     id_i16(c8);\n    |            ^^\n    |            |\n-   |            expected i16, found i8\n+   |            expected `i16`, found `i8`\n    |            help: you can convert an `i8` to `i16`: `c8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:90:12\n    |\n LL |     id_i16(c32);\n-   |            ^^^ expected i16, found i32\n+   |            ^^^ expected `i16`, found `i32`\n    |\n help: you can convert an `i32` to `i16` and panic if the converted value wouldn't fit\n    |\n@@ -175,7 +175,7 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:93:12\n    |\n LL |     id_i16(c64);\n-   |            ^^^ expected i16, found i64\n+   |            ^^^ expected `i16`, found `i64`\n    |\n help: you can convert an `i64` to `i16` and panic if the converted value wouldn't fit\n    |\n@@ -188,7 +188,7 @@ error[E0308]: mismatched types\n LL |     id_i32(c8);\n    |            ^^\n    |            |\n-   |            expected i32, found i8\n+   |            expected `i32`, found `i8`\n    |            help: you can convert an `i8` to `i32`: `c8.into()`\n \n error[E0308]: mismatched types\n@@ -197,14 +197,14 @@ error[E0308]: mismatched types\n LL |     id_i32(c16);\n    |            ^^^\n    |            |\n-   |            expected i32, found i16\n+   |            expected `i32`, found `i16`\n    |            help: you can convert an `i16` to `i32`: `c16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:104:12\n    |\n LL |     id_i32(c64);\n-   |            ^^^ expected i32, found i64\n+   |            ^^^ expected `i32`, found `i64`\n    |\n help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n    |\n@@ -217,7 +217,7 @@ error[E0308]: mismatched types\n LL |     id_i64(a8);\n    |            ^^\n    |            |\n-   |            expected i64, found i8\n+   |            expected `i64`, found `i8`\n    |            help: you can convert an `i8` to `i64`: `a8.into()`\n \n error[E0308]: mismatched types\n@@ -226,7 +226,7 @@ error[E0308]: mismatched types\n LL |     id_i64(a16);\n    |            ^^^\n    |            |\n-   |            expected i64, found i16\n+   |            expected `i64`, found `i16`\n    |            help: you can convert an `i16` to `i64`: `a16.into()`\n \n error[E0308]: mismatched types\n@@ -235,14 +235,14 @@ error[E0308]: mismatched types\n LL |     id_i64(a32);\n    |            ^^^\n    |            |\n-   |            expected i64, found i32\n+   |            expected `i64`, found `i32`\n    |            help: you can convert an `i32` to `i64`: `a32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:120:11\n    |\n LL |     id_u8(b16);\n-   |           ^^^ expected u8, found u16\n+   |           ^^^ expected `u8`, found `u16`\n    |\n help: you can convert an `u16` to `u8` and panic if the converted value wouldn't fit\n    |\n@@ -253,7 +253,7 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:123:11\n    |\n LL |     id_u8(b32);\n-   |           ^^^ expected u8, found u32\n+   |           ^^^ expected `u8`, found `u32`\n    |\n help: you can convert an `u32` to `u8` and panic if the converted value wouldn't fit\n    |\n@@ -264,7 +264,7 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:126:11\n    |\n LL |     id_u8(b64);\n-   |           ^^^ expected u8, found u64\n+   |           ^^^ expected `u8`, found `u64`\n    |\n help: you can convert an `u64` to `u8` and panic if the converted value wouldn't fit\n    |\n@@ -277,14 +277,14 @@ error[E0308]: mismatched types\n LL |     id_u16(b8);\n    |            ^^\n    |            |\n-   |            expected u16, found u8\n+   |            expected `u16`, found `u8`\n    |            help: you can convert an `u8` to `u16`: `b8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:134:12\n    |\n LL |     id_u16(b32);\n-   |            ^^^ expected u16, found u32\n+   |            ^^^ expected `u16`, found `u32`\n    |\n help: you can convert an `u32` to `u16` and panic if the converted value wouldn't fit\n    |\n@@ -295,7 +295,7 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:137:12\n    |\n LL |     id_u16(b64);\n-   |            ^^^ expected u16, found u64\n+   |            ^^^ expected `u16`, found `u64`\n    |\n help: you can convert an `u64` to `u16` and panic if the converted value wouldn't fit\n    |\n@@ -308,7 +308,7 @@ error[E0308]: mismatched types\n LL |     id_u32(b8);\n    |            ^^\n    |            |\n-   |            expected u32, found u8\n+   |            expected `u32`, found `u8`\n    |            help: you can convert an `u8` to `u32`: `b8.into()`\n \n error[E0308]: mismatched types\n@@ -317,14 +317,14 @@ error[E0308]: mismatched types\n LL |     id_u32(b16);\n    |            ^^^\n    |            |\n-   |            expected u32, found u16\n+   |            expected `u32`, found `u16`\n    |            help: you can convert an `u16` to `u32`: `b16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:148:12\n    |\n LL |     id_u32(b64);\n-   |            ^^^ expected u32, found u64\n+   |            ^^^ expected `u32`, found `u64`\n    |\n help: you can convert an `u64` to `u32` and panic if the converted value wouldn't fit\n    |\n@@ -337,7 +337,7 @@ error[E0308]: mismatched types\n LL |     id_u64(b8);\n    |            ^^\n    |            |\n-   |            expected u64, found u8\n+   |            expected `u64`, found `u8`\n    |            help: you can convert an `u8` to `u64`: `b8.into()`\n \n error[E0308]: mismatched types\n@@ -346,7 +346,7 @@ error[E0308]: mismatched types\n LL |     id_u64(b16);\n    |            ^^^\n    |            |\n-   |            expected u64, found u16\n+   |            expected `u64`, found `u16`\n    |            help: you can convert an `u16` to `u64`: `b16.into()`\n \n error[E0308]: mismatched types\n@@ -355,7 +355,7 @@ error[E0308]: mismatched types\n LL |     id_u64(b32);\n    |            ^^^\n    |            |\n-   |            expected u64, found u32\n+   |            expected `u64`, found `u32`\n    |            help: you can convert an `u32` to `u64`: `b32.into()`\n \n error: aborting due to 36 previous errors"}, {"sha": "6277aa05eb3655b3e9a21c7b32d6989b2897c720", "filename": "src/test/ui/issues/issue-10176.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-10176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-10176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10176.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -3,7 +3,7 @@ fn f() -> isize {\n //~^ ERROR mismatched types\n //~| expected type `isize`\n //~| found tuple `(!, !)`\n-//~| expected isize, found tuple\n+//~| expected `isize`, found tuple\n }\n \n fn main() {}"}, {"sha": "cd5361ffad3982110013dc95bff236bf3fcbb770", "filename": "src/test/ui/issues/issue-10176.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-10176.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-10176.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10176.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn f() -> isize {\n    |           ----- expected `isize` because of return type\n LL |     (return 1, return 2)\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected isize, found tuple\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found tuple\n    |\n    = note: expected type `isize`\n              found tuple `(!, !)`"}, {"sha": "8c2bafe63bd69841aed4dbf5c6d9068ffb2bb30d", "filename": "src/test/ui/issues/issue-11319.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-11319.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-11319.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11319.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -7,7 +7,7 @@ fn main() {\n         //~^ NOTE this is found to be of type `bool`\n         None    => (),\n         //~^ ERROR match arms have incompatible types\n-        //~| NOTE expected bool, found ()\n+        //~| NOTE expected `bool`, found `()`\n         _       => true\n     }\n }"}, {"sha": "7663a32883cca3a3a30f22d708a68cf874484bc1", "filename": "src/test/ui/issues/issue-11319.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-11319.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-11319.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11319.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -10,7 +10,7 @@ LL | |         Some(2) => true,\n    | |                    ---- this is found to be of type `bool`\n LL | |\n LL | |         None    => (),\n-   | |                    ^^ expected bool, found ()\n+   | |                    ^^ expected `bool`, found `()`\n ...  |\n LL | |         _       => true\n LL | |     }"}, {"sha": "bc7d1247502d3be9b70065d1f9f1baf483c015e6", "filename": "src/test/ui/issues/issue-11374.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-11374.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-11374.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11374.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     c.read_to(v);\n    |               ^\n    |               |\n-   |               expected &mut [u8], found struct `std::vec::Vec`\n+   |               expected `&mut [u8]`, found struct `std::vec::Vec`\n    |               help: consider mutably borrowing here: `&mut v`\n    |\n    = note: expected mutable reference `&mut [u8]`"}, {"sha": "01f8e3488360580c22ed561bd0b69fe44a2d4784", "filename": "src/test/ui/issues/issue-12997-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-12997-2.rs:8:1\n    |\n LL | fn bar(x: isize) { }\n-   | ^^^^^^^^^^^^^^^^^^^^ expected isize, found &mut test::Bencher\n+   | ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&mut test::Bencher`\n \n error: aborting due to previous error\n "}, {"sha": "9129790c501e3d820ab57704af89ad85509c802b", "filename": "src/test/ui/issues/issue-13359.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-13359.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-13359.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13359.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -5,9 +5,9 @@ fn bar(_s: u32) { }\n fn main() {\n     foo(1*(1 as isize));\n     //~^ ERROR mismatched types\n-    //~| expected i16, found isize\n+    //~| expected `i16`, found `isize`\n \n     bar(1*(1 as usize));\n     //~^ ERROR mismatched types\n-    //~| expected u32, found usize\n+    //~| expected `u32`, found `usize`\n }"}, {"sha": "68258a8888a40e42dc072f348baf43a44ea39e7e", "filename": "src/test/ui/issues/issue-13359.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-13359.rs:6:9\n    |\n LL |     foo(1*(1 as isize));\n-   |         ^^^^^^^^^^^^^^ expected i16, found isize\n+   |         ^^^^^^^^^^^^^^ expected `i16`, found `isize`\n    |\n help: you can convert an `isize` to `i16` and panic if the converted value wouldn't fit\n    |\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-13359.rs:10:9\n    |\n LL |     bar(1*(1 as usize));\n-   |         ^^^^^^^^^^^^^^ expected u32, found usize\n+   |         ^^^^^^^^^^^^^^ expected `u32`, found `usize`\n    |\n help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n    |"}, {"sha": "de67a72a639803d8ed080d20afbd2ddcf30c0056", "filename": "src/test/ui/issues/issue-1362.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-1362.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-1362.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1362.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-1362.rs:4:16\n    |\n LL |   let x: u32 = 20i32;\n-   |                ^^^^^ expected u32, found i32\n+   |                ^^^^^ expected `u32`, found `i32`\n    |\n help: change the type of the numeric literal from `i32` to `u32`\n    |"}, {"sha": "7db4734780817e19e428973e95ed322bd7fe3895", "filename": "src/test/ui/issues/issue-14091.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-14091.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-14091.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14091.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-14091.rs:2:5\n    |\n LL |     assert!(1,1);\n-   |     ^^^^^^^^^^^^^ expected bool, found integer\n+   |     ^^^^^^^^^^^^^ expected `bool`, found integer\n \n error: aborting due to previous error\n "}, {"sha": "9cf2f09e17747cf9d05a2533fc5b832197894faa", "filename": "src/test/ui/issues/issue-1448-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-1448-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-1448-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1448-2.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-1448-2.rs:6:24\n    |\n LL |     println!(\"{}\", foo(10i32));\n-   |                        ^^^^^ expected u32, found i32\n+   |                        ^^^^^ expected `u32`, found `i32`\n    |\n help: change the type of the numeric literal from `i32` to `u32`\n    |"}, {"sha": "c35edb0c8c0e332d65d0b5f6819c842a2df29915", "filename": "src/test/ui/issues/issue-16338.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-16338.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-16338.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16338.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-16338.rs:7:9\n    |\n LL |     let Slice { data: data, len: len } = \"foo\";\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected str, found struct `Slice`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found struct `Slice`\n    |\n    = note: expected type `str`\n             found struct `Slice<_>`"}, {"sha": "332352ca727ac2f0ccdd366b6cbfad529dbdd598", "filename": "src/test/ui/issues/issue-16401.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-16401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-16401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16401.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -9,7 +9,7 @@ fn main() {\n         //~^ ERROR mismatched types\n         //~| expected unit type `()`\n         //~| found struct `Slice<_>`\n-        //~| expected (), found struct `Slice`\n+        //~| expected `()`, found struct `Slice`\n         _ => unreachable!()\n     }\n }"}, {"sha": "d3d6108be9d1d91de841585eb1bd74fb5e0f1f78", "filename": "src/test/ui/issues/issue-16401.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-16401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-16401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16401.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match () {\n    |           -- this match expression has type `()`\n LL |         Slice { data: data, len: len } => (),\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `Slice`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `Slice`\n    |\n    = note: expected unit type `()`\n                  found struct `Slice<_>`"}, {"sha": "72a8cd9823a4bdc32b1954e8d17e3c481e719633", "filename": "src/test/ui/issues/issue-17033.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-17033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-17033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17033.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -1,6 +1,6 @@\n fn f<'r>(p: &'r mut fn(p: &mut ())) {\n     (*p)(()) //~  ERROR mismatched types\n-             //~| expected &mut (), found ()\n+             //~| expected `&mut ()`, found `()`\n }\n \n fn main() {}"}, {"sha": "518fc30142c9421be62eaafa861f0b3a3a5cb4bf", "filename": "src/test/ui/issues/issue-17033.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-17033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-17033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17033.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     (*p)(())\n    |          ^^\n    |          |\n-   |          expected &mut (), found ()\n+   |          expected `&mut ()`, found `()`\n    |          help: consider mutably borrowing here: `&mut ()`\n \n error: aborting due to previous error"}, {"sha": "62d5a6de760dfad8c55a20f6069cafc94758065b", "filename": "src/test/ui/issues/issue-19991.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-19991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-19991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19991.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -3,7 +3,7 @@\n \n fn main() {\n     if let Some(homura) = Some(\"madoka\") { //~  ERROR missing an else clause\n-                                           //~| expected (), found integer\n+                                           //~| expected `()`, found integer\n         765\n     };\n }"}, {"sha": "b78f4a6d2934459b322ff0bb08dded9372c024ca", "filename": "src/test/ui/issues/issue-19991.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-19991.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-19991.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19991.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -6,7 +6,7 @@ LL | |\n LL | |         765\n    | |         --- found here\n LL | |     };\n-   | |_____^ expected (), found integer\n+   | |_____^ expected `()`, found integer\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type"}, {"sha": "1c5911e05f7673b11bd56c0d37ffd227afb81cf1", "filename": "src/test/ui/issues/issue-20225.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0053]: method `call` has an incompatible type for trait\n LL | impl<'a, T> Fn<(&'a T,)> for Foo {\n    |          - this type parameter\n LL |   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected &T, found type parameter `T`\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&T`, found type parameter `T`\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(&Foo, (&'a T,))`\n               found fn pointer `extern \"rust-call\" fn(&Foo, (T,))`\n@@ -17,7 +17,7 @@ error[E0053]: method `call_mut` has an incompatible type for trait\n LL | impl<'a, T> FnMut<(&'a T,)> for Foo {\n    |          - this type parameter\n LL |   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected &T, found type parameter `T`\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&T`, found type parameter `T`\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(&mut Foo, (&'a T,))`\n               found fn pointer `extern \"rust-call\" fn(&mut Foo, (T,))`\n@@ -31,7 +31,7 @@ LL | impl<'a, T> FnOnce<(&'a T,)> for Foo {\n    |          - this type parameter\n ...\n LL |   extern \"rust-call\" fn call_once(self, (_,): (T,)) {}\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected &T, found type parameter `T`\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&T`, found type parameter `T`\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(Foo, (&'a T,))`\n               found fn pointer `extern \"rust-call\" fn(Foo, (T,))`"}, {"sha": "46524bc2c18e103d19d13e5265541df6804fa0bb", "filename": "src/test/ui/issues/issue-22684.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-22684.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-22684.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22684.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-22684.rs:17:17\n    |\n LL |     let _: () = foo::Foo.bar();\n-   |                 ^^^^^^^^^^^^^^ expected (), found bool\n+   |                 ^^^^^^^^^^^^^^ expected `()`, found `bool`\n \n error: aborting due to previous error\n "}, {"sha": "d126e1bf0b5348aace18b668f194ffaa4ae8c957", "filename": "src/test/ui/issues/issue-23589.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-23589.rs:2:29\n    |\n LL |     let v: Vec(&str) = vec!['1', '2'];\n-   |                             ^^^ expected &str, found char\n+   |                             ^^^ expected `&str`, found `char`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e04de33f6ef2e22d80f29b5c5f8e7c2bf77ed0f6", "filename": "src/test/ui/issues/issue-27008.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-27008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-27008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27008.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -3,5 +3,5 @@ struct S;\n fn main() {\n     let b = [0; S];\n     //~^ ERROR mismatched types\n-    //~| expected usize, found struct `S`\n+    //~| expected `usize`, found struct `S`\n }"}, {"sha": "5b7e74c1c30125aadfd360efa3a725788ba34c29", "filename": "src/test/ui/issues/issue-27008.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-27008.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-27008.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27008.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-27008.rs:4:17\n    |\n LL |     let b = [0; S];\n-   |                 ^ expected usize, found struct `S`\n+   |                 ^ expected `usize`, found struct `S`\n \n error: aborting due to previous error\n "}, {"sha": "71e4d7850143b7a8755de2a3bfaa1add375ed167", "filename": "src/test/ui/issues/issue-27042.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-27042.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-27042.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27042.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -14,7 +14,7 @@ error[E0308]: mismatched types\n LL |         loop { break };\n    |                ^^^^^\n    |                |\n-   |                expected i32, found ()\n+   |                expected `i32`, found `()`\n    |                help: give it a value of the expected type: `break 42`\n \n error[E0308]: mismatched types\n@@ -23,21 +23,21 @@ error[E0308]: mismatched types\n LL | /         'b:\n LL | |\n LL | |         while true { break }; // but here we cite the whole loop\n-   | |____________________________^ expected i32, found ()\n+   | |____________________________^ expected `i32`, found `()`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-27042.rs:12:9\n    |\n LL | /         'c:\n LL | |         for _ in None { break }; // but here we cite the whole loop\n-   | |_______________________________^ expected i32, found ()\n+   | |_______________________________^ expected `i32`, found `()`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-27042.rs:15:9\n    |\n LL | /         'd:\n LL | |         while let Some(_) = None { break };\n-   | |__________________________________________^ expected i32, found ()\n+   | |__________________________________________^ expected `i32`, found `()`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "d16252686698d29466df439201345d9eec27ab70", "filename": "src/test/ui/issues/issue-29084.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-29084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-29084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29084.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -3,7 +3,7 @@ macro_rules! foo {\n         fn bar(d: u8) { }\n         bar(&mut $d);\n         //~^ ERROR mismatched types\n-        //~| expected u8, found &mut u8\n+        //~| expected `u8`, found `&mut u8`\n     }}\n }\n "}, {"sha": "3e7ea745ce49aed22ad156dbcdec7cda0154fe55", "filename": "src/test/ui/issues/issue-29084.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-29084.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-29084.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29084.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-29084.rs:4:13\n    |\n LL |         bar(&mut $d);\n-   |             ^^^^^^^ expected u8, found &mut u8\n+   |             ^^^^^^^ expected `u8`, found `&mut u8`\n ...\n LL |     foo!(0u8);\n    |     ---------- in this macro invocation"}, {"sha": "38cf3c4f930e8a84a5c1d8c0701aae0623e12dab", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0271]: type mismatch resolving `<std::iter::TakeWhile<&mut std::vec::Into\n   --> $DIR/issue-31173.rs:10:10\n    |\n LL |         .cloned()\n-   |          ^^^^^^ expected u8, found reference\n+   |          ^^^^^^ expected `u8`, found reference\n    |\n    = note:   expected type `u8`\n            found reference `&_`"}, {"sha": "e0655d3f6dbf6d2daa750d2b4aaf8ebc593ed27a", "filename": "src/test/ui/issues/issue-31910.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-31910.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-31910.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31910.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -1,7 +1,7 @@\n enum Enum<T: Trait> {\n     X = Trait::Number,\n     //~^ ERROR mismatched types\n-    //~| expected isize, found i32\n+    //~| expected `isize`, found `i32`\n }\n \n trait Trait {"}, {"sha": "c5c988cdaa75a0a73bed98d681b6446f93f04303", "filename": "src/test/ui/issues/issue-31910.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-31910.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-31910.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31910.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-31910.rs:2:9\n    |\n LL |     X = Trait::Number,\n-   |         ^^^^^^^^^^^^^ expected isize, found i32\n+   |         ^^^^^^^^^^^^^ expected `isize`, found `i32`\n    |\n help: you can convert an `i32` to `isize` and panic if the converted value wouldn't fit\n    |"}, {"sha": "7c0928b19249994902a3d6b2cb6df41c838a8dda", "filename": "src/test/ui/issues/issue-32323.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-32323.rs:5:30\n    |\n LL | pub fn f<'a, T: Tr<'a>>() -> <T as Tr<'a>>::Out {}\n-   |        -                     ^^^^^^^^^^^^^^^^^^ expected associated type, found ()\n+   |        -                     ^^^^^^^^^^^^^^^^^^ expected associated type, found `()`\n    |        |\n    |        implicitly returns `()` as its body has no tail or `return` expression\n    |"}, {"sha": "fc90e0674cf55d2f7f9ed327e7b73d1defc8054d", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -29,7 +29,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-34334.rs:2:31\n    |\n LL |     let sr: Vec<(u32, _, _) = vec![];\n-   |                               ^^^^^^ expected bool, found struct `std::vec::Vec`\n+   |                               ^^^^^^ expected `bool`, found struct `std::vec::Vec`\n    |\n    = note: expected type `bool`\n             found struct `std::vec::Vec<_>`"}, {"sha": "3817d0e6a3ee93c00a83265e256f83ff0434a553", "filename": "src/test/ui/issues/issue-3477.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-3477.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-3477.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3477.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let _p: char = 100;\n     //~^ ERROR mismatched types\n-    //~| expected char, found u8\n+    //~| expected `char`, found `u8`\n }"}, {"sha": "6510c215fcf1fc3e9d88dbdb6133dcbc6f363fa0", "filename": "src/test/ui/issues/issue-3477.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-3477.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-3477.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3477.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-3477.rs:2:20\n    |\n LL |     let _p: char = 100;\n-   |                    ^^^ expected char, found u8\n+   |                    ^^^ expected `char`, found `u8`\n \n error: aborting due to previous error\n "}, {"sha": "be21569315b72a809e19156a25d844a4c90dd7b9", "filename": "src/test/ui/issues/issue-35869.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-35869.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-35869.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35869.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -5,7 +5,7 @@ LL |     fn foo(_: fn(u8) -> ());\n    |               ------------ type in trait\n ...\n LL |     fn foo(_: fn(u16) -> ()) {}\n-   |               ^^^^^^^^^^^^^ expected u8, found u16\n+   |               ^^^^^^^^^^^^^ expected `u8`, found `u16`\n    |\n    = note: expected fn pointer `fn(fn(u8))`\n               found fn pointer `fn(fn(u16))`\n@@ -17,7 +17,7 @@ LL |     fn bar(_: Option<u8>);\n    |               ---------- type in trait\n ...\n LL |     fn bar(_: Option<u16>) {}\n-   |               ^^^^^^^^^^^ expected u8, found u16\n+   |               ^^^^^^^^^^^ expected `u8`, found `u16`\n    |\n    = note: expected fn pointer `fn(std::option::Option<u8>)`\n               found fn pointer `fn(std::option::Option<u16>)`\n@@ -29,7 +29,7 @@ LL |     fn baz(_: (u8, u16));\n    |               --------- type in trait\n ...\n LL |     fn baz(_: (u16, u16)) {}\n-   |               ^^^^^^^^^^ expected u8, found u16\n+   |               ^^^^^^^^^^ expected `u8`, found `u16`\n    |\n    = note: expected fn pointer `fn((u8, u16))`\n               found fn pointer `fn((u16, u16))`\n@@ -41,7 +41,7 @@ LL |     fn qux() -> u8;\n    |                 -- type in trait\n ...\n LL |     fn qux() -> u16 { 5u16 }\n-   |                 ^^^ expected u8, found u16\n+   |                 ^^^ expected `u8`, found `u16`\n    |\n    = note: expected fn pointer `fn() -> u8`\n               found fn pointer `fn() -> u16`"}, {"sha": "00952356b1830705e29b6bfd771df7921049deee", "filename": "src/test/ui/issues/issue-37026.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-37026.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-37026.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37026.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,13 +2,13 @@ error[E0308]: mismatched types\n   --> $DIR/issue-37026.rs:6:9\n    |\n LL |     let empty_struct::XEmpty2 = ();\n-   |         ^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `empty_struct::XEmpty2`\n+   |         ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `empty_struct::XEmpty2`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-37026.rs:7:9\n    |\n LL |     let empty_struct::XEmpty6(..) = ();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `empty_struct::XEmpty6`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `empty_struct::XEmpty6`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8a9529a68b7fa5ec64dc61eabf44f5165a9d018e", "filename": "src/test/ui/issues/issue-37665.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-37665.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-37665.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37665.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-37665.rs:10:17\n    |\n LL |     let x: () = 0;\n-   |                 ^ expected (), found integer\n+   |                 ^ expected `()`, found integer\n \n error: aborting due to previous error\n "}, {"sha": "6f342b459c076a1b04bea14afceb398e3ec24a87", "filename": "src/test/ui/issues/issue-39970.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -5,7 +5,7 @@ LL |     fn visit() {}\n    |     ---------- required by `Visit::visit`\n ...\n LL |     <() as Visit>::visit();\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected &(), found ()\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected `&()`, found `()`\n    |\n    = note: required because of the requirements on the impl of `Visit` for `()`\n "}, {"sha": "503647ef4a82f16fc7a04a7dcb39608c0f410019", "filename": "src/test/ui/issues/issue-39974.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-39974.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-39974.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39974.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -3,7 +3,7 @@ const LENGTH: f64 = 2;\n struct Thing {\n     f: [[f64; 2]; LENGTH],\n     //~^ ERROR mismatched types\n-    //~| expected usize, found f64\n+    //~| expected `usize`, found `f64`\n }\n \n fn main() {"}, {"sha": "56365e51e0a741cccbc150fdaa0900b4c48ba2c3", "filename": "src/test/ui/issues/issue-39974.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-39974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-39974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39974.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-39974.rs:4:19\n    |\n LL |     f: [[f64; 2]; LENGTH],\n-   |                   ^^^^^^ expected usize, found f64\n+   |                   ^^^^^^ expected `usize`, found `f64`\n \n error: aborting due to previous error\n "}, {"sha": "4170a96bddfb3586bec3c1a1ea60890162ad504d", "filename": "src/test/ui/issues/issue-40749.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-40749.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-40749.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40749.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-40749.rs:2:9\n    |\n LL |     [0; ..10];\n-   |         ^^^^ expected usize, found struct `std::ops::RangeTo`\n+   |         ^^^^ expected `usize`, found struct `std::ops::RangeTo`\n    |\n    = note: expected type `usize`\n             found struct `std::ops::RangeTo<{integer}>`"}, {"sha": "62307d387c822603c7bf9fbcf375590693c412d8", "filename": "src/test/ui/issues/issue-41549.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-41549.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-41549.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41549.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0326]: implemented const `CONST` has an incompatible type for trait\n   --> $DIR/issue-41549.rs:9:18\n    |\n LL |     const CONST: () = ();\n-   |                  ^^ expected u32, found ()\n+   |                  ^^ expected `u32`, found `()`\n \n error: aborting due to previous error\n "}, {"sha": "61a0ae5fa91a7f08fecb2fe43865f94995fbcdd5", "filename": "src/test/ui/issues/issue-41742.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-41742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-41742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41742.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-41742.rs:24:7\n    |\n LL |     H[\"?\"].f();\n-   |       ^^^ expected u32, found &str\n+   |       ^^^ expected `u32`, found `&str`\n \n error: aborting due to previous error\n "}, {"sha": "2d655e4b7e743ab9e666d5d7dc6b8c055070369b", "filename": "src/test/ui/issues/issue-4201.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-4201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-4201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4201.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -3,7 +3,7 @@ fn main() {\n         0\n     } else if false {\n //~^ ERROR if may be missing an else clause\n-//~| expected (), found integer\n+//~| expected `()`, found integer\n         1\n     };\n }"}, {"sha": "aacc426783d663ea7b120c7a24380d30693db725", "filename": "src/test/ui/issues/issue-4201.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -8,7 +8,7 @@ LL | |\n LL | |         1\n    | |         - found here\n LL | |     };\n-   | |_____^ expected (), found integer\n+   | |_____^ expected `()`, found integer\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type"}, {"sha": "0ed3d27c65b6e3f64a087568e0901922d9526cfc", "filename": "src/test/ui/issues/issue-43162.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -14,7 +14,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-43162.rs:1:13\n    |\n LL | fn foo() -> bool {\n-   |    ---      ^^^^ expected bool, found ()\n+   |    ---      ^^^^ expected `bool`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |"}, {"sha": "fc54e7c62bb247d63f7e676b06207571d2a10743", "filename": "src/test/ui/issues/issue-44023.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-44023.rs:5:36\n    |\n LL | fn \u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8 ( ) -> isize {\n-   |    ------------------------        ^^^^^ expected isize, found ()\n+   |    ------------------------        ^^^^^ expected `isize`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n "}, {"sha": "caf85d44aac5c424f0153f289b78c4e041c27318", "filename": "src/test/ui/issues/issue-4517.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-4517.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-4517.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4517.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,5 +4,5 @@ fn main() {\n     let foo: [u8; 4] = [1; 4];\n     bar(foo);\n     //~^ ERROR mismatched types\n-    //~| expected usize, found array `[u8; 4]`\n+    //~| expected `usize`, found array `[u8; 4]`\n }"}, {"sha": "1ae97b69c6caca66254d01bc944bf79c267dc92d", "filename": "src/test/ui/issues/issue-4517.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-4517.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-4517.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4517.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-4517.rs:5:9\n    |\n LL |     bar(foo);\n-   |         ^^^ expected usize, found array `[u8; 4]`\n+   |         ^^^ expected `usize`, found array `[u8; 4]`\n \n error: aborting due to previous error\n "}, {"sha": "a861c38b0016ff8be5be439f1590249ead8872da", "filename": "src/test/ui/issues/issue-46112.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-46112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-46112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46112.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn main() { test(Ok(())); }\n    |                     ^^\n    |                     |\n-   |                     expected enum `std::option::Option`, found ()\n+   |                     expected enum `std::option::Option`, found `()`\n    |                     help: try using a variant of the expected enum: `Some(())`\n    |\n    = note:   expected enum `std::option::Option<()>`"}, {"sha": "a6f97c3c9af652bd1a6a20bc6e1ba68be9f557f1", "filename": "src/test/ui/issues/issue-46302.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-46302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-46302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46302.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |   let u: &str = if true { s[..2] } else { s };\n    |                           ^^^^^^\n    |                           |\n-   |                           expected &str, found str\n+   |                           expected `&str`, found `str`\n    |                           help: consider borrowing here: `&s[..2]`\n \n error: aborting due to previous error"}, {"sha": "2d666e2b66c25ca05e546d33b5b6f58f42e1842d", "filename": "src/test/ui/issues/issue-46756-consider-borrowing-cast-or-binexpr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-46756-consider-borrowing-cast-or-binexpr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-46756-consider-borrowing-cast-or-binexpr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46756-consider-borrowing-cast-or-binexpr.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     light_flows_our_war_of_mocking_words(behold as usize);\n    |                                          ^^^^^^^^^^^^^^^\n    |                                          |\n-   |                                          expected &usize, found usize\n+   |                                          expected `&usize`, found `usize`\n    |                                          help: consider borrowing here: `&(behold as usize)`\n \n error[E0308]: mismatched types\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n LL |     light_flows_our_war_of_mocking_words(with_tears + 4);\n    |                                          ^^^^^^^^^^^^^^\n    |                                          |\n-   |                                          expected &usize, found usize\n+   |                                          expected `&usize`, found `usize`\n    |                                          help: consider borrowing here: `&(with_tears + 4)`\n \n error: aborting due to 2 previous errors"}, {"sha": "cf95d309c63442d42fc605af7acb61b50a49f76b", "filename": "src/test/ui/issues/issue-47486.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-47486.rs:2:10\n    |\n LL |     () < std::mem::size_of::<_>();\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found usize\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `usize`\n \n error[E0282]: type annotations needed\n   --> $DIR/issue-47486.rs:3:11"}, {"sha": "e5bb9298cd5846b8a518ab79ab5307953b44eddf", "filename": "src/test/ui/issues/issue-48364.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-48364.rs:2:21\n    |\n LL |     b\"\".starts_with(stringify!(foo))\n-   |                     ^^^^^^^^^^^^^^^ expected slice `[u8]`, found str\n+   |                     ^^^^^^^^^^^^^^^ expected slice `[u8]`, found `str`\n    |\n    = note: expected reference `&[u8]`\n               found reference `&'static str`"}, {"sha": "712a7bc33f840f33cf56ab4fa2310fd29a4f2249", "filename": "src/test/ui/issues/issue-48838.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-48838.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-48838.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48838.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-48838.rs:2:14\n    |\n LL |     Square = |x| x,\n-   |              ^^^^^ expected isize, found closure\n+   |              ^^^^^ expected `isize`, found closure\n    |\n    = note: expected type `isize`\n            found closure `[closure@$DIR/issue-48838.rs:2:14: 2:19]`"}, {"sha": "0a150fbf53a0cbbeb2cffa1a4201da586fad84cd", "filename": "src/test/ui/issues/issue-50577.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -28,7 +28,7 @@ error[E0317]: if may be missing an else clause\n LL |         Drop = assert_eq!(1, 1)\n    |                ^^^^^^^^^^^^^^^^\n    |                |\n-   |                expected (), found isize\n+   |                expected `()`, found `isize`\n    |                found here\n    |\n    = note: `if` expressions without `else` evaluate to `()`"}, {"sha": "c2630b664b55f22b6cd311e6a28b90fdb61155a3", "filename": "src/test/ui/issues/issue-50585.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-50585.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-50585.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50585.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -8,7 +8,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-50585.rs:2:18\n    |\n LL |     |y: Vec<[(); for x in 0..2 {}]>| {};\n-   |                  ^^^^^^^^^^^^^^^^ expected usize, found ()\n+   |                  ^^^^^^^^^^^^^^^^ expected `usize`, found `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "08d9a8399200acb9e4105bd27478eafddb83464b", "filename": "src/test/ui/issues/issue-50600.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-50600.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-50600.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50600.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-50600.rs:2:13\n    |\n LL |     fn([u8; |x: u8| {}]),\n-   |             ^^^^^^^^^^ expected usize, found closure\n+   |             ^^^^^^^^^^ expected `usize`, found closure\n    |\n    = note: expected type `usize`\n            found closure `[closure@$DIR/issue-50600.rs:2:13: 2:23]`"}, {"sha": "1f348c4cf1f66322e480871baec4eba8a3148cc4", "filename": "src/test/ui/issues/issue-50688.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-50688.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-50688.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50688.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-50688.rs:2:9\n    |\n LL |     [1; || {}];\n-   |         ^^^^^ expected usize, found closure\n+   |         ^^^^^ expected `usize`, found closure\n    |\n    = note: expected type `usize`\n            found closure `[closure@$DIR/issue-50688.rs:2:9: 2:14]`"}, {"sha": "71dd237cad5828c997c48b7b349485b09b8d761a", "filename": "src/test/ui/issues/issue-5100.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-5100.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-5100.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5100.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -53,5 +53,5 @@ fn main() {\n \n     // Make sure none of the errors above were fatal\n     let x: char = true; //~  ERROR mismatched types\n-                        //~| expected char, found bool\n+                        //~| expected `char`, found `bool`\n }"}, {"sha": "bcbcefef3b11a6ebdff978549e671cc756224b2b", "filename": "src/test/ui/issues/issue-5100.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-5100.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-5100.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5100.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -57,7 +57,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-5100.rs:55:19\n    |\n LL |     let x: char = true;\n-   |                   ^^^^ expected char, found bool\n+   |                   ^^^^ expected `char`, found `bool`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "aef6dc54747ce8f048f138dc00e9654c73260c1a", "filename": "src/test/ui/issues/issue-51632-try-desugar-incompatible-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -5,7 +5,7 @@ LL |     missing_discourses()?\n    |     ^^^^^^^^^^^^^^^^^^^^-\n    |     |                   |\n    |     |                   help: try removing this `?`\n-   |     expected enum `std::result::Result`, found isize\n+   |     expected enum `std::result::Result`, found `isize`\n    |\n    = note: expected enum `std::result::Result<isize, ()>`\n               found type `isize`"}, {"sha": "bbfdd9c538946cfaccb04400cfa8e68897c7efd0", "filename": "src/test/ui/issues/issue-53348.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-53348.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-53348.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53348.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -9,7 +9,7 @@ fn main() {\n     for i in v {\n         a = *i.to_string();\n         //~^ ERROR mismatched types\n-        //~| NOTE expected struct `std::string::String`, found str\n+        //~| NOTE expected struct `std::string::String`, found `str`\n         v2.push(a);\n     }\n }"}, {"sha": "433fe40ea03ce2044662a437a4efb4c841215939", "filename": "src/test/ui/issues/issue-53348.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-53348.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-53348.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53348.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-53348.rs:10:13\n    |\n LL |         a = *i.to_string();\n-   |             ^^^^^^^^^^^^^^ expected struct `std::string::String`, found str\n+   |             ^^^^^^^^^^^^^^ expected struct `std::string::String`, found `str`\n \n error: aborting due to previous error\n "}, {"sha": "50a202d148948062595a53fa1a78ec1bcb38c5a9", "filename": "src/test/ui/issues/issue-53692.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-53692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-53692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53692.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |         let items_clone: Vec<i32> = ref_items.clone();\n    |                                     ^^^^^^^^^^^^^^^^^\n    |                                     |\n-   |                                     expected struct `std::vec::Vec`, found &[i32]\n+   |                                     expected struct `std::vec::Vec`, found `&[i32]`\n    |                                     help: try using a conversion method: `ref_items.to_vec()`\n    |\n    = note: expected struct `std::vec::Vec<i32>`\n@@ -16,7 +16,7 @@ error[E0308]: mismatched types\n LL |         let string: String = s.clone();\n    |                              ^^^^^^^^^\n    |                              |\n-   |                              expected struct `std::string::String`, found &str\n+   |                              expected struct `std::string::String`, found `&str`\n    |                              help: try using a conversion method: `s.to_string()`\n \n error: aborting due to 2 previous errors"}, {"sha": "163aa816ab789ee641d6c728449cda952b76a460", "filename": "src/test/ui/issues/issue-61106.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-61106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-61106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61106.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     foo(x.clone());\n    |         ^^^^^^^^^\n    |         |\n-   |         expected &str, found struct `std::string::String`\n+   |         expected `&str`, found struct `std::string::String`\n    |         help: consider borrowing here: `&x`\n \n error: aborting due to previous error"}, {"sha": "09ffe8e64b1b16962be4e5872952056db8f6288f", "filename": "src/test/ui/issues/issue-61882.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-61882.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-61882.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61882.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,13 +2,13 @@ error[E0308]: mismatched types\n   --> $DIR/issue-61882.rs:4:27\n    |\n LL |     const B: A<u8> = Self(0);\n-   |                           ^ expected bool, found integer\n+   |                           ^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/issue-61882.rs:4:22\n    |\n LL |     const B: A<u8> = Self(0);\n-   |                      ^^^^^^^ expected u8, found bool\n+   |                      ^^^^^^^ expected `u8`, found `bool`\n    |\n    = note: expected struct `A<u8>`\n               found struct `A<bool>`"}, {"sha": "6537867bbf5a763f7e340cd0833c930e8dae85af", "filename": "src/test/ui/issues/issue-6458-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-6458-4.rs:1:20\n    |\n LL | fn foo(b: bool) -> Result<bool,String> {\n-   |    ---             ^^^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n+   |    ---             ^^^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     Err(\"bar\".to_string());"}, {"sha": "bf1450ca7658cdb2afcae4d016fd2955e637c7ca", "filename": "src/test/ui/issues/issue-7061.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-7061.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-7061.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7061.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-7061.rs:4:46\n    |\n LL |     fn foo(&'a mut self) -> Box<BarStruct> { self }\n-   |                             --------------   ^^^^ expected struct `std::boxed::Box`, found &mut BarStruct\n+   |                             --------------   ^^^^ expected struct `std::boxed::Box`, found `&mut BarStruct`\n    |                             |\n    |                             expected `std::boxed::Box<BarStruct>` because of return type\n    |"}, {"sha": "1453c3d757f7f385342bdf89327e07f8e44abfb9", "filename": "src/test/ui/issues/issue-8761.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-8761.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-8761.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8761.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -1,10 +1,10 @@\n enum Foo {\n     A = 1i64,\n     //~^ ERROR mismatched types\n-    //~| expected isize, found i64\n+    //~| expected `isize`, found `i64`\n     B = 2u8\n     //~^ ERROR mismatched types\n-    //~| expected isize, found u8\n+    //~| expected `isize`, found `u8`\n }\n \n fn main() {}"}, {"sha": "836520a28ef349cbfa04f6721ec522ba38ed5504", "filename": "src/test/ui/issues/issue-8761.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-8761.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fissues%2Fissue-8761.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8761.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-8761.rs:2:9\n    |\n LL |     A = 1i64,\n-   |         ^^^^ expected isize, found i64\n+   |         ^^^^ expected `isize`, found `i64`\n    |\n help: change the type of the numeric literal from `i64` to `isize`\n    |\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-8761.rs:5:9\n    |\n LL |     B = 2u8\n-   |         ^^^ expected isize, found u8\n+   |         ^^^ expected `isize`, found `u8`\n    |\n help: change the type of the numeric literal from `u8` to `isize`\n    |"}, {"sha": "494bbd7f284f193f665124554faae6625e915d66", "filename": "src/test/ui/json-bom-plus-crlf-multifile.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -72,7 +72,7 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `std::string::String`, found ()\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:25:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `std::string::String`, found `()`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:25:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"aborting due to 4 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 4 previous errors\n \"}"}, {"sha": "ea21a6b896141682c7bd01ddf61c7b76d2e96bb5", "filename": "src/test/ui/json-bom-plus-crlf.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -72,7 +72,7 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `std::string::String`, found ()\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:25:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `std::string::String`, found `()`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:25:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"aborting due to 4 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 4 previous errors\n \"}"}, {"sha": "fcc3006401816101163bef97744ac2f894ac55db", "filename": "src/test/ui/keyword/keyword-false-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-false-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-false-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-false-as-identifier.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/keyword-false-as-identifier.rs:2:9\n    |\n LL |     let false = 22;\n-   |         ^^^^^ expected integer, found bool\n+   |         ^^^^^ expected integer, found `bool`\n \n error: aborting due to previous error\n "}, {"sha": "b8cc2ffd2a826fad4e8465b6bc784d95167cd529", "filename": "src/test/ui/keyword/keyword-true-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-true-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-true-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-true-as-identifier.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/keyword-true-as-identifier.rs:2:9\n    |\n LL |     let true = 22;\n-   |         ^^^^ expected integer, found bool\n+   |         ^^^^ expected integer, found `bool`\n \n error: aborting due to previous error\n "}, {"sha": "07b2ef6cd1bc2007ff18d673a564e972a543416e", "filename": "src/test/ui/liveness/liveness-closure-require-ret.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fliveness%2Fliveness-closure-require-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fliveness%2Fliveness-closure-require-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-closure-require-ret.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/liveness-closure-require-ret.rs:2:37\n    |\n LL | fn main() { println!(\"{}\", force(|| {})); }\n-   |                                     ^^ expected isize, found ()\n+   |                                     ^^ expected `isize`, found `()`\n \n error: aborting due to previous error\n "}, {"sha": "95070322bddef1e812b3476debf9589d87cd045f", "filename": "src/test/ui/liveness/liveness-forgot-ret.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/liveness-forgot-ret.rs:3:19\n    |\n LL | fn f(a: isize) -> isize { if god_exists(a) { return 5; }; }\n-   |    -              ^^^^^ expected isize, found ()\n+   |    -              ^^^^^ expected `isize`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n "}, {"sha": "2adc2d43809ba1a476656f3cd2e6960d0f02468c", "filename": "src/test/ui/liveness/liveness-issue-2163.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fliveness%2Fliveness-issue-2163.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fliveness%2Fliveness-issue-2163.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-issue-2163.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -5,7 +5,7 @@ LL |       a.iter().all(|_| -> bool {\n    |  ______________________________^\n LL | |\n LL | |     });\n-   | |_____^ expected bool, found ()\n+   | |_____^ expected `bool`, found `()`\n \n error: aborting due to previous error\n "}, {"sha": "afdb733cd030faa81e369d9cf18f3fe924ccb471", "filename": "src/test/ui/liveness/liveness-missing-ret2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/liveness-missing-ret2.rs:1:11\n    |\n LL | fn f() -> isize {\n-   |    -      ^^^^^ expected isize, found ()\n+   |    -      ^^^^^ expected `isize`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n "}, {"sha": "6b4de6618c51bb251b464ea1477b1f7ae30f86ca", "filename": "src/test/ui/liveness/liveness-return-last-stmt-semi.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | macro_rules! test { () => { fn foo() -> i32 { 1; } } }\n    |                                ---      ^^^    - help: consider removing this semicolon\n    |                                |        |\n-   |                                |        expected i32, found ()\n+   |                                |        expected `i32`, found `()`\n    |                                implicitly returns `()` as its body has no tail or `return` expression\n ...\n LL |     test!();\n@@ -14,15 +14,15 @@ error[E0308]: mismatched types\n   --> $DIR/liveness-return-last-stmt-semi.rs:7:19\n    |\n LL | fn no_return() -> i32 {}\n-   |    ---------      ^^^ expected i32, found ()\n+   |    ---------      ^^^ expected `i32`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n \n error[E0308]: mismatched types\n   --> $DIR/liveness-return-last-stmt-semi.rs:9:19\n    |\n LL | fn bar(x: u32) -> u32 {\n-   |    ---            ^^^ expected u32, found ()\n+   |    ---            ^^^ expected `u32`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     x * 2;\n@@ -32,7 +32,7 @@ error[E0308]: mismatched types\n   --> $DIR/liveness-return-last-stmt-semi.rs:13:19\n    |\n LL | fn baz(x: u64) -> u32 {\n-   |    ---            ^^^ expected u32, found ()\n+   |    ---            ^^^ expected `u32`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n "}, {"sha": "81d25af1996be3ef23d334ebe2ac02d7ff8e3f50", "filename": "src/test/ui/loops/loop-break-value.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -98,7 +98,7 @@ error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:4:31\n    |\n LL |     let val: ! = loop { break break; };\n-   |                               ^^^^^ expected !, found ()\n+   |                               ^^^^^ expected `!`, found `()`\n    |\n    = note:   expected type `!`\n            found unit type `()`\n@@ -107,31 +107,31 @@ error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:11:19\n    |\n LL |             break 123;\n-   |                   ^^^ expected &str, found integer\n+   |                   ^^^ expected `&str`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:16:15\n    |\n LL |         break \"asdf\";\n-   |               ^^^^^^ expected i32, found &str\n+   |               ^^^^^^ expected `i32`, found `&str`\n \n error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:21:31\n    |\n LL |             break 'outer_loop \"nope\";\n-   |                               ^^^^^^ expected i32, found &str\n+   |                               ^^^^^^ expected `i32`, found `&str`\n \n error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:73:26\n    |\n LL |                 break 'c 123;\n-   |                          ^^^ expected (), found integer\n+   |                          ^^^ expected `()`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:80:15\n    |\n LL |         break (break, break);\n-   |               ^^^^^^^^^^^^^^ expected (), found tuple\n+   |               ^^^^^^^^^^^^^^ expected `()`, found tuple\n    |\n    = note: expected unit type `()`\n                   found tuple `(!, !)`\n@@ -140,15 +140,15 @@ error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:85:15\n    |\n LL |         break 2;\n-   |               ^ expected (), found integer\n+   |               ^ expected `()`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:90:9\n    |\n LL |         break;\n    |         ^^^^^\n    |         |\n-   |         expected integer, found ()\n+   |         expected integer, found `()`\n    |         help: give it a value of the expected type: `break value`\n \n error: aborting due to 16 previous errors"}, {"sha": "aa04d330f25d720f589ec20e6bf18d36783d6309", "filename": "src/test/ui/loops/loop-labeled-break-value.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Floops%2Floop-labeled-break-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Floops%2Floop-labeled-break-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-labeled-break-value.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |         let _: i32 = loop { break };\n    |                             ^^^^^\n    |                             |\n-   |                             expected i32, found ()\n+   |                             expected `i32`, found `()`\n    |                             help: give it a value of the expected type: `break 42`\n \n error[E0308]: mismatched types\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n LL |         let _: i32 = 'inner: loop { break 'inner };\n    |                                     ^^^^^^^^^^^^\n    |                                     |\n-   |                                     expected i32, found ()\n+   |                                     expected `i32`, found `()`\n    |                                     help: give it a value of the expected type: `break 'inner 42`\n \n error[E0308]: mismatched types\n@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n LL |         let _: i32 = 'inner2: loop { loop { break 'inner2 } };\n    |                                             ^^^^^^^^^^^^^\n    |                                             |\n-   |                                             expected i32, found ()\n+   |                                             expected `i32`, found `()`\n    |                                             help: give it a value of the expected type: `break 'inner2 42`\n \n error: aborting due to 3 previous errors"}, {"sha": "5030a2935b9d7c3e919a7f5fb6edb699e7aaa55d", "filename": "src/test/ui/loops/loop-properly-diverging-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Floops%2Floop-properly-diverging-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Floops%2Floop-properly-diverging-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-properly-diverging-2.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |   let x: i32 = loop { break };\n    |                       ^^^^^\n    |                       |\n-   |                       expected i32, found ()\n+   |                       expected `i32`, found `()`\n    |                       help: give it a value of the expected type: `break 42`\n \n error: aborting due to previous error"}, {"sha": "4482d5c6a791db90581e3709c79bae57434434a7", "filename": "src/test/ui/match/match-arm-resolving-to-never.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -9,7 +9,7 @@ LL | |         E::D => 4,\n LL | |         E::E => unimplemented!(\"\"),\n    | |                 ------------------ this and all prior arms are found to be of type `{integer}`\n LL | |         E::F => \"\",\n-   | |                 ^^ expected integer, found &str\n+   | |                 ^^ expected integer, found `&str`\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |"}, {"sha": "1cf61ebad4352c4b60e07a4c0fbb40554ccf071a", "filename": "src/test/ui/match/match-ill-type2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmatch%2Fmatch-ill-type2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmatch%2Fmatch-ill-type2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ill-type2.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/match-ill-type2.rs:4:9\n    |\n LL |         2u32 => 1,\n-   |         ^^^^ expected i32, found u32\n+   |         ^^^^ expected `i32`, found `u32`\n \n error: aborting due to previous error\n "}, {"sha": "adaaf29aae4c8d2e102b1cef7acee2be79058f4f", "filename": "src/test/ui/match/match-range-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -28,7 +28,7 @@ error[E0308]: mismatched types\n   --> $DIR/match-range-fail.rs:18:9\n    |\n LL |         'c' ..= 100 => { }\n-   |         ^^^^^^^^^^^ expected integer, found char\n+   |         ^^^^^^^^^^^ expected integer, found `char`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "d73c7e8402ff3afb23357fc291ec10f13022facd", "filename": "src/test/ui/match/match-type-err-first-arm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -7,7 +7,7 @@ fn test_func1(n: i32) -> i32 { //~ NOTE expected `i32` because of return type\n     match n {\n         12 => 'b',\n         //~^ ERROR mismatched types\n-        //~| NOTE expected i32, found char\n+        //~| NOTE expected `i32`, found `char`\n         _ => 42,\n     }\n }\n@@ -17,7 +17,7 @@ fn test_func2(n: i32) -> i32 {\n         12 => 'b', //~ NOTE this is found to be of type `char`\n         _ => 42,\n         //~^ ERROR match arms have incompatible types\n-        //~| NOTE expected char, found integer\n+        //~| NOTE expected `char`, found integer\n     };\n     x\n }\n@@ -33,7 +33,7 @@ fn test_func3(n: i32) -> i32 {\n         //~^ NOTE this and all prior arms are found to be of type `char`\n         _ => 42,\n         //~^ ERROR match arms have incompatible types\n-        //~| NOTE expected char, found integer\n+        //~| NOTE expected `char`, found integer\n     };\n     x\n }\n@@ -45,6 +45,6 @@ fn test_func4() {\n         },\n         None => {}\n         //~^ ERROR match arms have incompatible types\n-        //~| NOTE expected u32, found ()\n+        //~| NOTE expected `u32`, found `()`\n     };\n }"}, {"sha": "1b3d8c61c862b3604fc6a6a53936e7d924f3af60", "filename": "src/test/ui/match/match-type-err-first-arm.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -5,7 +5,7 @@ LL | fn test_func1(n: i32) -> i32 {\n    |                          --- expected `i32` because of return type\n LL |     match n {\n LL |         12 => 'b',\n-   |               ^^^ expected i32, found char\n+   |               ^^^ expected `i32`, found `char`\n \n error[E0308]: match arms have incompatible types\n   --> $DIR/match-type-err-first-arm.rs:18:14\n@@ -15,7 +15,7 @@ LL |       let x = match n {\n LL | |         12 => 'b',\n    | |               --- this is found to be of type `char`\n LL | |         _ => 42,\n-   | |              ^^ expected char, found integer\n+   | |              ^^ expected `char`, found integer\n LL | |\n LL | |\n LL | |     };\n@@ -34,7 +34,7 @@ LL | |         6 => 'b',\n    | |              --- this and all prior arms are found to be of type `char`\n LL | |\n LL | |         _ => 42,\n-   | |              ^^ expected char, found integer\n+   | |              ^^ expected `char`, found integer\n LL | |\n LL | |\n LL | |     };\n@@ -49,7 +49,7 @@ LL | |             x\n    | |             - this is found to be of type `u32`\n LL | |         },\n LL | |         None => {}\n-   | |                 ^^ expected u32, found ()\n+   | |                 ^^ expected `u32`, found `()`\n LL | |\n LL | |\n LL | |     };"}, {"sha": "535dbde612c03c693ff9647a637c6e2a12410e56", "filename": "src/test/ui/meta-expected-error-correct-rev.a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmeta-expected-error-correct-rev.a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmeta-expected-error-correct-rev.a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmeta-expected-error-correct-rev.a.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/meta-expected-error-correct-rev.rs:7:18\n    |\n LL |     let x: u32 = 22_usize;\n-   |                  ^^^^^^^^ expected u32, found usize\n+   |                  ^^^^^^^^ expected `u32`, found `usize`\n    |\n help: change the type of the numeric literal from `usize` to `u32`\n    |"}, {"sha": "87e95c240803793751066f914e228b34f65c5c0f", "filename": "src/test/ui/methods/method-ambig-one-trait-unknown-int-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -10,7 +10,7 @@ error[E0308]: mismatched types\n   --> $DIR/method-ambig-one-trait-unknown-int-type.rs:33:20\n    |\n LL |     let y: usize = x.foo();\n-   |                    ^^^^^^^ expected usize, found isize\n+   |                    ^^^^^^^ expected `usize`, found `isize`\n    |\n help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n    |"}, {"sha": "5ceba64678410406dffe0d2fa9326f808e79a36b", "filename": "src/test/ui/methods/method-deref-to-same-trait-object-with-separate-params.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -83,7 +83,7 @@ fn objectcandidate_impl() {\n \n     // Observe the type of `z` is `u32`\n     let _seetype: () = z; //~ ERROR mismatched types\n-    //~| expected (), found u32\n+    //~| expected `()`, found `u32`\n }\n \n fn traitcandidate_impl() {\n@@ -100,7 +100,7 @@ fn traitcandidate_impl() {\n \n     // Observe the type of `z` is `u64`\n     let _seetype: () = z; //~ ERROR mismatched types\n-    //~| expected (), found u64\n+    //~| expected `()`, found `u64`\n }\n \n fn traitcandidate_impl_with_nuisance() {\n@@ -135,7 +135,7 @@ fn neither_impl() {\n \n     // Observe the type of `z` is `u8`\n     let _seetype: () = z; //~ ERROR mismatched types\n-    //~| expected (), found u8\n+    //~| expected `()`, found `u8`\n }\n \n fn both_impls() {\n@@ -153,7 +153,7 @@ fn both_impls() {\n \n     // Observe the type of `z` is `u32`\n     let _seetype: () = z; //~ ERROR mismatched types\n-    //~| expected (), found u32\n+    //~| expected `()`, found `u32`\n }\n \n \n@@ -170,7 +170,7 @@ fn both_impls_with_nuisance() {\n \n     // Observe the type of `z` is `u32`\n     let _seetype: () = z; //~ ERROR mismatched types\n-    //~| expected (), found u32\n+    //~| expected `()`, found `u32`\n }\n \n fn main() {"}, {"sha": "bfec363eb997ac7e3c33fc86f09b847520f39dab", "filename": "src/test/ui/methods/method-deref-to-same-trait-object-with-separate-params.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,13 +2,13 @@ error[E0308]: mismatched types\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:85:24\n    |\n LL |     let _seetype: () = z;\n-   |                        ^ expected (), found u32\n+   |                        ^ expected `()`, found `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:102:24\n    |\n LL |     let _seetype: () = z;\n-   |                        ^ expected (), found u64\n+   |                        ^ expected `()`, found `u64`\n \n error[E0034]: multiple applicable items in scope\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:120:15\n@@ -39,19 +39,19 @@ error[E0308]: mismatched types\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:137:24\n    |\n LL |     let _seetype: () = z;\n-   |                        ^ expected (), found u8\n+   |                        ^ expected `()`, found `u8`\n \n error[E0308]: mismatched types\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:155:24\n    |\n LL |     let _seetype: () = z;\n-   |                        ^ expected (), found u32\n+   |                        ^ expected `()`, found `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:172:24\n    |\n LL |     let _seetype: () = z;\n-   |                        ^ expected (), found u32\n+   |                        ^ expected `()`, found `u32`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "f589f20d81ddff97967ffe82174910635aaf0fbb", "filename": "src/test/ui/methods/method-self-arg-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-1.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -9,7 +9,7 @@ impl Foo {\n fn main() {\n     let x = Foo;\n     Foo::bar(x); //~  ERROR mismatched types\n-                 //~| expected &Foo, found struct `Foo`\n+                 //~| expected `&Foo`, found struct `Foo`\n     Foo::bar(&42); //~  ERROR mismatched types\n                       //~| expected struct `Foo`, found integer\n                       //~| expected reference `&Foo`"}, {"sha": "17ea61fc4bddb5de20986d94d26c54273c074d4f", "filename": "src/test/ui/methods/method-self-arg-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-1.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     Foo::bar(x);\n    |              ^\n    |              |\n-   |              expected &Foo, found struct `Foo`\n+   |              expected `&Foo`, found struct `Foo`\n    |              help: consider borrowing here: `&x`\n \n error[E0308]: mismatched types"}, {"sha": "5384dedb65a49df2d343cd2b099b935829901916", "filename": "src/test/ui/mir-unpretty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmir-unpretty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmir-unpretty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-unpretty.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/mir-unpretty.rs:4:17\n    |\n LL |     let x: () = 0;\n-   |                 ^ expected (), found integer\n+   |                 ^ expected `()`, found integer\n \n error: aborting due to previous error\n "}, {"sha": "fef83e6bbe2b6acd19408ba1bbe1317cee04ba4d", "filename": "src/test/ui/mismatched_types/E0053.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -5,7 +5,7 @@ LL |     fn foo(x: u16);\n    |               --- type in trait\n ...\n LL |     fn foo(x: i16) { }\n-   |               ^^^ expected u16, found i16\n+   |               ^^^ expected `u16`, found `i16`\n    |\n    = note: expected fn pointer `fn(u16)`\n               found fn pointer `fn(i16)`"}, {"sha": "098fd74a39da6e88a6a46904a15a7536c611fd9a", "filename": "src/test/ui/mismatched_types/E0409.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -10,7 +10,7 @@ error[E0308]: mismatched types\n   --> $DIR/E0409.rs:5:23\n    |\n LL |         (0, ref y) | (y, 0) => {}\n-   |                       ^ expected &{integer}, found integer\n+   |                       ^ expected `&{integer}`, found integer\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f36fe64bffb9df94ea267b293a28e1bc05072a37", "filename": "src/test/ui/mismatched_types/for-loop-has-unit-body.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmismatched_types%2Ffor-loop-has-unit-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmismatched_types%2Ffor-loop-has-unit-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffor-loop-has-unit-body.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/for-loop-has-unit-body.rs:3:9\n    |\n LL |         x\n-   |         ^ expected (), found integer\n+   |         ^ expected `()`, found integer\n \n error: aborting due to previous error\n "}, {"sha": "c25e2687b752a54a22828e06073b841ca401aa6f", "filename": "src/test/ui/mismatched_types/issue-19109.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn function(t: &mut dyn Trait) {\n    |                                - help: try adding a return type: `-> *mut dyn Trait`\n LL |     t as *mut dyn Trait\n-   |     ^^^^^^^^^^^^^^^^^^^ expected (), found *-ptr\n+   |     ^^^^^^^^^^^^^^^^^^^ expected `()`, found *-ptr\n    |\n    = note: expected unit type `()`\n             found raw pointer `*mut dyn Trait`"}, {"sha": "d4dcb9a39a403898a4207b58c7dd35bdd2fcc751", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-26480.rs:16:19\n    |\n LL |                   $arr.len() * size_of($arr[0]));\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected u64, found usize\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found `usize`\n ...\n LL |     write!(hello);\n    |     -------------- in this macro invocation"}, {"sha": "6fb04ef5c998fe2ae51e62eb7d7bbd003c4640cc", "filename": "src/test/ui/mismatched_types/issue-35030.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -5,10 +5,10 @@ LL | impl<bool> Parser<bool> for bool {\n    |      ---- this type parameter\n LL |     fn parse(text: &str) -> Option<bool> {\n LL |         Some(true)\n-   |              ^^^^ expected type parameter `bool`, found bool\n+   |              ^^^^ expected type parameter `bool`, found `bool`\n    |\n    = note: expected type parameter `bool` (type parameter `bool`)\n-                        found type `bool` (bool)\n+                        found type `bool` (`bool`)\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "802a2fef6bd40f24aa504f5fd1ad8714370c2575", "filename": "src/test/ui/mismatched_types/issue-38371.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -16,7 +16,7 @@ error[E0308]: mismatched types\n LL | fn agh(&&bar: &u32) {\n    |         ^^^^\n    |         |\n-   |         expected u32, found reference\n+   |         expected `u32`, found reference\n    |         help: you can probably remove the explicit borrow: `bar`\n    |\n    = note:   expected type `u32`\n@@ -26,7 +26,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-38371.rs:21:8\n    |\n LL | fn bgh(&&bar: u32) {\n-   |        ^^^^^ expected u32, found reference\n+   |        ^^^^^ expected `u32`, found reference\n    |\n    = note:   expected type `u32`\n            found reference `&_`"}, {"sha": "51c8e5f5d4ad131228a4011f8b659fbd7a49e7c2", "filename": "src/test/ui/mismatched_types/main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |       let x: u32 = (\n    |  __________________^\n LL | |     );\n-   | |_____^ expected u32, found ()\n+   | |_____^ expected `u32`, found `()`\n \n error: aborting due to previous error\n "}, {"sha": "22a6df8902596c593583e2b0e76e352a45a30a3c", "filename": "src/test/ui/mismatched_types/numeric-literal-cast.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-literal-cast.rs:6:9\n    |\n LL |     foo(1u8);\n-   |         ^^^ expected u16, found u8\n+   |         ^^^ expected `u16`, found `u8`\n    |\n help: change the type of the numeric literal from `u8` to `u16`\n    |\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-literal-cast.rs:8:10\n    |\n LL |     foo1(2f32);\n-   |          ^^^^ expected f64, found f32\n+   |          ^^^^ expected `f64`, found `f32`\n    |\n help: change the type of the numeric literal from `f32` to `f64`\n    |\n@@ -24,7 +24,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-literal-cast.rs:10:10\n    |\n LL |     foo2(3i16);\n-   |          ^^^^ expected i32, found i16\n+   |          ^^^^ expected `i32`, found `i16`\n    |\n help: change the type of the numeric literal from `i16` to `i32`\n    |"}, {"sha": "5a5dd0562614891bb00fa7264bb3abe0b0c171da", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/overloaded-calls-bad.rs:28:17\n    |\n LL |     let ans = s(\"what\");\n-   |                 ^^^^^^ expected isize, found &str\n+   |                 ^^^^^^ expected `isize`, found `&str`\n \n error[E0057]: this function takes 1 parameter but 0 parameters were supplied\n   --> $DIR/overloaded-calls-bad.rs:29:15"}, {"sha": "b20fddb05acf1f5b81879a178095f60b2a38b4bb", "filename": "src/test/ui/mismatched_types/trait-impl-fn-incompatibility.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -5,7 +5,7 @@ LL |     fn foo(x: u16);\n    |               --- type in trait\n ...\n LL |     fn foo(x: i16) { }\n-   |               ^^^ expected u16, found i16\n+   |               ^^^ expected `u16`, found `i16`\n    |\n    = note: expected fn pointer `fn(u16)`\n               found fn pointer `fn(i16)`"}, {"sha": "ff7f261e03c7b9e0f81f708a51b797875a7bd3b5", "filename": "src/test/ui/missing/missing-return.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/missing-return.rs:3:11\n    |\n LL | fn f() -> isize { }\n-   |    -      ^^^^^ expected isize, found ()\n+   |    -      ^^^^^ expected `isize`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n "}, {"sha": "c262d1336a2be631902f2e43b80a5462f9af6cfc", "filename": "src/test/ui/mut/mut-cross-borrowing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmut%2Fmut-cross-borrowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fmut%2Fmut-cross-borrowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-cross-borrowing.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     f(x)\n    |       ^\n    |       |\n-   |       expected &mut isize, found struct `std::boxed::Box`\n+   |       expected `&mut isize`, found struct `std::boxed::Box`\n    |       help: consider mutably borrowing here: `&mut x`\n    |\n    = note: expected mutable reference `&mut isize`"}, {"sha": "eacef1dc3302d1facfca65bfafd225ba632fa782", "filename": "src/test/ui/never_type/call-fn-never-arg-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/call-fn-never-arg-wrong-type.rs:10:9\n    |\n LL |     foo(\"wow\");\n-   |         ^^^^^ expected !, found &str\n+   |         ^^^^^ expected `!`, found `&str`\n    |\n    = note:   expected type `!`\n            found reference `&'static str`"}, {"sha": "8d8a83567ab4e4fd3235b0a985c99166671b318d", "filename": "src/test/ui/never_type/never-assign-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/never-assign-wrong-type.rs:7:16\n    |\n LL |     let x: ! = \"hello\";\n-   |                ^^^^^^^ expected !, found &str\n+   |                ^^^^^^^ expected `!`, found `&str`\n    |\n    = note:   expected type `!`\n            found reference `&'static str`"}, {"sha": "0a8b40b08fe430dfed1ac1fd0952fb6ec8ff7aa3", "filename": "src/test/ui/noexporttypeexe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fnoexporttypeexe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fnoexporttypeexe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnoexporttypeexe.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -11,5 +11,5 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected type `isize`\n     //~| found enum `std::option::Option<isize>`\n-    //~| expected isize, found enum `std::option::Option`\n+    //~| expected `isize`, found enum `std::option::Option`\n }"}, {"sha": "18fb1755eb11fe19672eccb2b5525ab776af7539", "filename": "src/test/ui/noexporttypeexe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fnoexporttypeexe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fnoexporttypeexe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnoexporttypeexe.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/noexporttypeexe.rs:10:18\n    |\n LL |   let x: isize = noexporttypelib::foo();\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^ expected isize, found enum `std::option::Option`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found enum `std::option::Option`\n    |\n    = note: expected type `isize`\n               found enum `std::option::Option<isize>`"}, {"sha": "c6ddb35ddf5f295060978e3e1de544b333b94beb", "filename": "src/test/ui/numeric/const-scope.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,31 +2,31 @@ error[E0308]: mismatched types\n   --> $DIR/const-scope.rs:1:16\n    |\n LL | const C: i32 = 1i8;\n-   |                ^^^ expected i32, found i8\n+   |                ^^^ expected `i32`, found `i8`\n \n error[E0308]: mismatched types\n   --> $DIR/const-scope.rs:2:15\n    |\n LL | const D: i8 = C;\n-   |               ^ expected i8, found i32\n+   |               ^ expected `i8`, found `i32`\n \n error[E0308]: mismatched types\n   --> $DIR/const-scope.rs:5:18\n    |\n LL |     let c: i32 = 1i8;\n-   |                  ^^^ expected i32, found i8\n+   |                  ^^^ expected `i32`, found `i8`\n \n error[E0308]: mismatched types\n   --> $DIR/const-scope.rs:6:17\n    |\n LL |     let d: i8 = c;\n-   |                 ^ expected i8, found i32\n+   |                 ^ expected `i8`, found `i32`\n \n error[E0308]: mismatched types\n   --> $DIR/const-scope.rs:10:18\n    |\n LL |     let c: i32 = 1i8;\n-   |                  ^^^ expected i32, found i8\n+   |                  ^^^ expected `i32`, found `i8`\n    |\n help: change the type of the numeric literal from `i8` to `i32`\n    |\n@@ -37,7 +37,7 @@ error[E0308]: mismatched types\n   --> $DIR/const-scope.rs:11:17\n    |\n LL |     let d: i8 = c;\n-   |                 ^ expected i8, found i32\n+   |                 ^ expected `i8`, found `i32`\n    |\n help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n    |"}, {"sha": "dba6c723829dc4c9e1545806ac16e72a011b7e64", "filename": "src/test/ui/numeric/len.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/len.rs:3:10\n    |\n LL |     test(array.len());\n-   |          ^^^^^^^^^^^ expected u32, found usize\n+   |          ^^^^^^^^^^^ expected `u32`, found `usize`\n    |\n help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n    |"}, {"sha": "133db19780c34e7c6ce2bf3713faf2f6d8198e05", "filename": "src/test/ui/numeric/numeric-cast-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-2.rs:5:18\n    |\n LL |     let x: u16 = foo();\n-   |                  ^^^^^ expected u16, found i32\n+   |                  ^^^^^ expected `u16`, found `i32`\n    |\n help: you can convert an `i32` to `u16` and panic if the converted value wouldn't fit\n    |\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-2.rs:7:18\n    |\n LL |     let y: i64 = x + x;\n-   |                  ^^^^^ expected i64, found u16\n+   |                  ^^^^^ expected `i64`, found `u16`\n    |\n help: you can convert an `u16` to `i64` and panic if the converted value wouldn't fit\n    |\n@@ -24,7 +24,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-2.rs:9:18\n    |\n LL |     let z: i32 = x + x;\n-   |                  ^^^^^ expected i32, found u16\n+   |                  ^^^^^ expected `i32`, found `u16`\n    |\n help: you can convert an `u16` to `i32` and panic if the converted value wouldn't fit\n    |"}, {"sha": "a96518a34342d43b6c88fde7c9ddc4477c6b4ef9", "filename": "src/test/ui/numeric/numeric-cast-without-suggestion.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-without-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-without-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-without-suggestion.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,127 +2,127 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:17:18\n    |\n LL |     foo::<usize>(x_f64);\n-   |                  ^^^^^ expected usize, found f64\n+   |                  ^^^^^ expected `usize`, found `f64`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:18:18\n    |\n LL |     foo::<usize>(x_f32);\n-   |                  ^^^^^ expected usize, found f32\n+   |                  ^^^^^ expected `usize`, found `f32`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:19:18\n    |\n LL |     foo::<isize>(x_f64);\n-   |                  ^^^^^ expected isize, found f64\n+   |                  ^^^^^ expected `isize`, found `f64`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:20:18\n    |\n LL |     foo::<isize>(x_f32);\n-   |                  ^^^^^ expected isize, found f32\n+   |                  ^^^^^ expected `isize`, found `f32`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:21:16\n    |\n LL |     foo::<u64>(x_f64);\n-   |                ^^^^^ expected u64, found f64\n+   |                ^^^^^ expected `u64`, found `f64`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:22:16\n    |\n LL |     foo::<u64>(x_f32);\n-   |                ^^^^^ expected u64, found f32\n+   |                ^^^^^ expected `u64`, found `f32`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:23:16\n    |\n LL |     foo::<i64>(x_f64);\n-   |                ^^^^^ expected i64, found f64\n+   |                ^^^^^ expected `i64`, found `f64`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:24:16\n    |\n LL |     foo::<i64>(x_f32);\n-   |                ^^^^^ expected i64, found f32\n+   |                ^^^^^ expected `i64`, found `f32`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:25:16\n    |\n LL |     foo::<u32>(x_f64);\n-   |                ^^^^^ expected u32, found f64\n+   |                ^^^^^ expected `u32`, found `f64`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:26:16\n    |\n LL |     foo::<u32>(x_f32);\n-   |                ^^^^^ expected u32, found f32\n+   |                ^^^^^ expected `u32`, found `f32`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:27:16\n    |\n LL |     foo::<i32>(x_f64);\n-   |                ^^^^^ expected i32, found f64\n+   |                ^^^^^ expected `i32`, found `f64`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:28:16\n    |\n LL |     foo::<i32>(x_f32);\n-   |                ^^^^^ expected i32, found f32\n+   |                ^^^^^ expected `i32`, found `f32`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:29:16\n    |\n LL |     foo::<u16>(x_f64);\n-   |                ^^^^^ expected u16, found f64\n+   |                ^^^^^ expected `u16`, found `f64`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:30:16\n    |\n LL |     foo::<u16>(x_f32);\n-   |                ^^^^^ expected u16, found f32\n+   |                ^^^^^ expected `u16`, found `f32`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:31:16\n    |\n LL |     foo::<i16>(x_f64);\n-   |                ^^^^^ expected i16, found f64\n+   |                ^^^^^ expected `i16`, found `f64`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:32:16\n    |\n LL |     foo::<i16>(x_f32);\n-   |                ^^^^^ expected i16, found f32\n+   |                ^^^^^ expected `i16`, found `f32`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:33:15\n    |\n LL |     foo::<u8>(x_f64);\n-   |               ^^^^^ expected u8, found f64\n+   |               ^^^^^ expected `u8`, found `f64`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:34:15\n    |\n LL |     foo::<u8>(x_f32);\n-   |               ^^^^^ expected u8, found f32\n+   |               ^^^^^ expected `u8`, found `f32`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:35:15\n    |\n LL |     foo::<i8>(x_f64);\n-   |               ^^^^^ expected i8, found f64\n+   |               ^^^^^ expected `i8`, found `f64`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:36:15\n    |\n LL |     foo::<i8>(x_f32);\n-   |               ^^^^^ expected i8, found f32\n+   |               ^^^^^ expected `i8`, found `f32`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-without-suggestion.rs:37:16\n    |\n LL |     foo::<f32>(x_f64);\n-   |                ^^^^^ expected f32, found f64\n+   |                ^^^^^ expected `f32`, found `f64`\n \n error: aborting due to 21 previous errors\n "}, {"sha": "eef40cbdbe4e8ef19a0f9b7e63ea84aa87946cd1", "filename": "src/test/ui/numeric/numeric-cast.stderr", "status": "modified", "additions": 113, "deletions": 113, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:23:18\n    |\n LL |     foo::<usize>(x_u64);\n-   |                  ^^^^^ expected usize, found u64\n+   |                  ^^^^^ expected `usize`, found `u64`\n    |\n help: you can convert an `u64` to `usize` and panic if the converted value wouldn't fit\n    |\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:25:18\n    |\n LL |     foo::<usize>(x_u32);\n-   |                  ^^^^^ expected usize, found u32\n+   |                  ^^^^^ expected `usize`, found `u32`\n    |\n help: you can convert an `u32` to `usize` and panic if the converted value wouldn't fit\n    |\n@@ -24,7 +24,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:27:18\n    |\n LL |     foo::<usize>(x_u16);\n-   |                  ^^^^^ expected usize, found u16\n+   |                  ^^^^^ expected `usize`, found `u16`\n    |\n help: you can convert an `u16` to `usize` and panic if the converted value wouldn't fit\n    |\n@@ -35,7 +35,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:29:18\n    |\n LL |     foo::<usize>(x_u8);\n-   |                  ^^^^ expected usize, found u8\n+   |                  ^^^^ expected `usize`, found `u8`\n    |\n help: you can convert an `u8` to `usize` and panic if the converted value wouldn't fit\n    |\n@@ -46,7 +46,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:31:18\n    |\n LL |     foo::<usize>(x_isize);\n-   |                  ^^^^^^^ expected usize, found isize\n+   |                  ^^^^^^^ expected `usize`, found `isize`\n    |\n help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n    |\n@@ -57,7 +57,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:33:18\n    |\n LL |     foo::<usize>(x_i64);\n-   |                  ^^^^^ expected usize, found i64\n+   |                  ^^^^^ expected `usize`, found `i64`\n    |\n help: you can convert an `i64` to `usize` and panic if the converted value wouldn't fit\n    |\n@@ -68,7 +68,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:35:18\n    |\n LL |     foo::<usize>(x_i32);\n-   |                  ^^^^^ expected usize, found i32\n+   |                  ^^^^^ expected `usize`, found `i32`\n    |\n help: you can convert an `i32` to `usize` and panic if the converted value wouldn't fit\n    |\n@@ -79,7 +79,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:37:18\n    |\n LL |     foo::<usize>(x_i16);\n-   |                  ^^^^^ expected usize, found i16\n+   |                  ^^^^^ expected `usize`, found `i16`\n    |\n help: you can convert an `i16` to `usize` and panic if the converted value wouldn't fit\n    |\n@@ -90,7 +90,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:39:18\n    |\n LL |     foo::<usize>(x_i8);\n-   |                  ^^^^ expected usize, found i8\n+   |                  ^^^^ expected `usize`, found `i8`\n    |\n help: you can convert an `i8` to `usize` and panic if the converted value wouldn't fit\n    |\n@@ -101,7 +101,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:44:18\n    |\n LL |     foo::<isize>(x_usize);\n-   |                  ^^^^^^^ expected isize, found usize\n+   |                  ^^^^^^^ expected `isize`, found `usize`\n    |\n help: you can convert an `usize` to `isize` and panic if the converted value wouldn't fit\n    |\n@@ -112,7 +112,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:46:18\n    |\n LL |     foo::<isize>(x_u64);\n-   |                  ^^^^^ expected isize, found u64\n+   |                  ^^^^^ expected `isize`, found `u64`\n    |\n help: you can convert an `u64` to `isize` and panic if the converted value wouldn't fit\n    |\n@@ -123,7 +123,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:48:18\n    |\n LL |     foo::<isize>(x_u32);\n-   |                  ^^^^^ expected isize, found u32\n+   |                  ^^^^^ expected `isize`, found `u32`\n    |\n help: you can convert an `u32` to `isize` and panic if the converted value wouldn't fit\n    |\n@@ -134,7 +134,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:50:18\n    |\n LL |     foo::<isize>(x_u16);\n-   |                  ^^^^^ expected isize, found u16\n+   |                  ^^^^^ expected `isize`, found `u16`\n    |\n help: you can convert an `u16` to `isize` and panic if the converted value wouldn't fit\n    |\n@@ -145,7 +145,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:52:18\n    |\n LL |     foo::<isize>(x_u8);\n-   |                  ^^^^ expected isize, found u8\n+   |                  ^^^^ expected `isize`, found `u8`\n    |\n help: you can convert an `u8` to `isize` and panic if the converted value wouldn't fit\n    |\n@@ -156,7 +156,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:55:18\n    |\n LL |     foo::<isize>(x_i64);\n-   |                  ^^^^^ expected isize, found i64\n+   |                  ^^^^^ expected `isize`, found `i64`\n    |\n help: you can convert an `i64` to `isize` and panic if the converted value wouldn't fit\n    |\n@@ -167,7 +167,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:57:18\n    |\n LL |     foo::<isize>(x_i32);\n-   |                  ^^^^^ expected isize, found i32\n+   |                  ^^^^^ expected `isize`, found `i32`\n    |\n help: you can convert an `i32` to `isize` and panic if the converted value wouldn't fit\n    |\n@@ -178,7 +178,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:59:18\n    |\n LL |     foo::<isize>(x_i16);\n-   |                  ^^^^^ expected isize, found i16\n+   |                  ^^^^^ expected `isize`, found `i16`\n    |\n help: you can convert an `i16` to `isize` and panic if the converted value wouldn't fit\n    |\n@@ -189,7 +189,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:61:18\n    |\n LL |     foo::<isize>(x_i8);\n-   |                  ^^^^ expected isize, found i8\n+   |                  ^^^^ expected `isize`, found `i8`\n    |\n help: you can convert an `i8` to `isize` and panic if the converted value wouldn't fit\n    |\n@@ -200,7 +200,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:66:16\n    |\n LL |     foo::<u64>(x_usize);\n-   |                ^^^^^^^ expected u64, found usize\n+   |                ^^^^^^^ expected `u64`, found `usize`\n    |\n help: you can convert an `usize` to `u64` and panic if the converted value wouldn't fit\n    |\n@@ -213,7 +213,7 @@ error[E0308]: mismatched types\n LL |     foo::<u64>(x_u32);\n    |                ^^^^^\n    |                |\n-   |                expected u64, found u32\n+   |                expected `u64`, found `u32`\n    |                help: you can convert an `u32` to `u64`: `x_u32.into()`\n \n error[E0308]: mismatched types\n@@ -222,7 +222,7 @@ error[E0308]: mismatched types\n LL |     foo::<u64>(x_u16);\n    |                ^^^^^\n    |                |\n-   |                expected u64, found u16\n+   |                expected `u64`, found `u16`\n    |                help: you can convert an `u16` to `u64`: `x_u16.into()`\n \n error[E0308]: mismatched types\n@@ -231,14 +231,14 @@ error[E0308]: mismatched types\n LL |     foo::<u64>(x_u8);\n    |                ^^^^\n    |                |\n-   |                expected u64, found u8\n+   |                expected `u64`, found `u8`\n    |                help: you can convert an `u8` to `u64`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:75:16\n    |\n LL |     foo::<u64>(x_isize);\n-   |                ^^^^^^^ expected u64, found isize\n+   |                ^^^^^^^ expected `u64`, found `isize`\n    |\n help: you can convert an `isize` to `u64` and panic if the converted value wouldn't fit\n    |\n@@ -249,7 +249,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:77:16\n    |\n LL |     foo::<u64>(x_i64);\n-   |                ^^^^^ expected u64, found i64\n+   |                ^^^^^ expected `u64`, found `i64`\n    |\n help: you can convert an `i64` to `u64` and panic if the converted value wouldn't fit\n    |\n@@ -260,7 +260,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:79:16\n    |\n LL |     foo::<u64>(x_i32);\n-   |                ^^^^^ expected u64, found i32\n+   |                ^^^^^ expected `u64`, found `i32`\n    |\n help: you can convert an `i32` to `u64` and panic if the converted value wouldn't fit\n    |\n@@ -271,7 +271,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:81:16\n    |\n LL |     foo::<u64>(x_i16);\n-   |                ^^^^^ expected u64, found i16\n+   |                ^^^^^ expected `u64`, found `i16`\n    |\n help: you can convert an `i16` to `u64` and panic if the converted value wouldn't fit\n    |\n@@ -282,7 +282,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:83:16\n    |\n LL |     foo::<u64>(x_i8);\n-   |                ^^^^ expected u64, found i8\n+   |                ^^^^ expected `u64`, found `i8`\n    |\n help: you can convert an `i8` to `u64` and panic if the converted value wouldn't fit\n    |\n@@ -293,7 +293,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:88:16\n    |\n LL |     foo::<i64>(x_usize);\n-   |                ^^^^^^^ expected i64, found usize\n+   |                ^^^^^^^ expected `i64`, found `usize`\n    |\n help: you can convert an `usize` to `i64` and panic if the converted value wouldn't fit\n    |\n@@ -304,7 +304,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:90:16\n    |\n LL |     foo::<i64>(x_u64);\n-   |                ^^^^^ expected i64, found u64\n+   |                ^^^^^ expected `i64`, found `u64`\n    |\n help: you can convert an `u64` to `i64` and panic if the converted value wouldn't fit\n    |\n@@ -315,7 +315,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:92:16\n    |\n LL |     foo::<i64>(x_u32);\n-   |                ^^^^^ expected i64, found u32\n+   |                ^^^^^ expected `i64`, found `u32`\n    |\n help: you can convert an `u32` to `i64` and panic if the converted value wouldn't fit\n    |\n@@ -326,7 +326,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:94:16\n    |\n LL |     foo::<i64>(x_u16);\n-   |                ^^^^^ expected i64, found u16\n+   |                ^^^^^ expected `i64`, found `u16`\n    |\n help: you can convert an `u16` to `i64` and panic if the converted value wouldn't fit\n    |\n@@ -337,7 +337,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:96:16\n    |\n LL |     foo::<i64>(x_u8);\n-   |                ^^^^ expected i64, found u8\n+   |                ^^^^ expected `i64`, found `u8`\n    |\n help: you can convert an `u8` to `i64` and panic if the converted value wouldn't fit\n    |\n@@ -348,7 +348,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:98:16\n    |\n LL |     foo::<i64>(x_isize);\n-   |                ^^^^^^^ expected i64, found isize\n+   |                ^^^^^^^ expected `i64`, found `isize`\n    |\n help: you can convert an `isize` to `i64` and panic if the converted value wouldn't fit\n    |\n@@ -361,7 +361,7 @@ error[E0308]: mismatched types\n LL |     foo::<i64>(x_i32);\n    |                ^^^^^\n    |                |\n-   |                expected i64, found i32\n+   |                expected `i64`, found `i32`\n    |                help: you can convert an `i32` to `i64`: `x_i32.into()`\n \n error[E0308]: mismatched types\n@@ -370,7 +370,7 @@ error[E0308]: mismatched types\n LL |     foo::<i64>(x_i16);\n    |                ^^^^^\n    |                |\n-   |                expected i64, found i16\n+   |                expected `i64`, found `i16`\n    |                help: you can convert an `i16` to `i64`: `x_i16.into()`\n \n error[E0308]: mismatched types\n@@ -379,14 +379,14 @@ error[E0308]: mismatched types\n LL |     foo::<i64>(x_i8);\n    |                ^^^^\n    |                |\n-   |                expected i64, found i8\n+   |                expected `i64`, found `i8`\n    |                help: you can convert an `i8` to `i64`: `x_i8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:110:16\n    |\n LL |     foo::<u32>(x_usize);\n-   |                ^^^^^^^ expected u32, found usize\n+   |                ^^^^^^^ expected `u32`, found `usize`\n    |\n help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n    |\n@@ -397,7 +397,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:112:16\n    |\n LL |     foo::<u32>(x_u64);\n-   |                ^^^^^ expected u32, found u64\n+   |                ^^^^^ expected `u32`, found `u64`\n    |\n help: you can convert an `u64` to `u32` and panic if the converted value wouldn't fit\n    |\n@@ -410,7 +410,7 @@ error[E0308]: mismatched types\n LL |     foo::<u32>(x_u16);\n    |                ^^^^^\n    |                |\n-   |                expected u32, found u16\n+   |                expected `u32`, found `u16`\n    |                help: you can convert an `u16` to `u32`: `x_u16.into()`\n \n error[E0308]: mismatched types\n@@ -419,14 +419,14 @@ error[E0308]: mismatched types\n LL |     foo::<u32>(x_u8);\n    |                ^^^^\n    |                |\n-   |                expected u32, found u8\n+   |                expected `u32`, found `u8`\n    |                help: you can convert an `u8` to `u32`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:119:16\n    |\n LL |     foo::<u32>(x_isize);\n-   |                ^^^^^^^ expected u32, found isize\n+   |                ^^^^^^^ expected `u32`, found `isize`\n    |\n help: you can convert an `isize` to `u32` and panic if the converted value wouldn't fit\n    |\n@@ -437,7 +437,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:121:16\n    |\n LL |     foo::<u32>(x_i64);\n-   |                ^^^^^ expected u32, found i64\n+   |                ^^^^^ expected `u32`, found `i64`\n    |\n help: you can convert an `i64` to `u32` and panic if the converted value wouldn't fit\n    |\n@@ -448,7 +448,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:123:16\n    |\n LL |     foo::<u32>(x_i32);\n-   |                ^^^^^ expected u32, found i32\n+   |                ^^^^^ expected `u32`, found `i32`\n    |\n help: you can convert an `i32` to `u32` and panic if the converted value wouldn't fit\n    |\n@@ -459,7 +459,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:125:16\n    |\n LL |     foo::<u32>(x_i16);\n-   |                ^^^^^ expected u32, found i16\n+   |                ^^^^^ expected `u32`, found `i16`\n    |\n help: you can convert an `i16` to `u32` and panic if the converted value wouldn't fit\n    |\n@@ -470,7 +470,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:127:16\n    |\n LL |     foo::<u32>(x_i8);\n-   |                ^^^^ expected u32, found i8\n+   |                ^^^^ expected `u32`, found `i8`\n    |\n help: you can convert an `i8` to `u32` and panic if the converted value wouldn't fit\n    |\n@@ -481,7 +481,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:132:16\n    |\n LL |     foo::<i32>(x_usize);\n-   |                ^^^^^^^ expected i32, found usize\n+   |                ^^^^^^^ expected `i32`, found `usize`\n    |\n help: you can convert an `usize` to `i32` and panic if the converted value wouldn't fit\n    |\n@@ -492,7 +492,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:134:16\n    |\n LL |     foo::<i32>(x_u64);\n-   |                ^^^^^ expected i32, found u64\n+   |                ^^^^^ expected `i32`, found `u64`\n    |\n help: you can convert an `u64` to `i32` and panic if the converted value wouldn't fit\n    |\n@@ -503,7 +503,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:136:16\n    |\n LL |     foo::<i32>(x_u32);\n-   |                ^^^^^ expected i32, found u32\n+   |                ^^^^^ expected `i32`, found `u32`\n    |\n help: you can convert an `u32` to `i32` and panic if the converted value wouldn't fit\n    |\n@@ -514,7 +514,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:138:16\n    |\n LL |     foo::<i32>(x_u16);\n-   |                ^^^^^ expected i32, found u16\n+   |                ^^^^^ expected `i32`, found `u16`\n    |\n help: you can convert an `u16` to `i32` and panic if the converted value wouldn't fit\n    |\n@@ -525,7 +525,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:140:16\n    |\n LL |     foo::<i32>(x_u8);\n-   |                ^^^^ expected i32, found u8\n+   |                ^^^^ expected `i32`, found `u8`\n    |\n help: you can convert an `u8` to `i32` and panic if the converted value wouldn't fit\n    |\n@@ -536,7 +536,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:142:16\n    |\n LL |     foo::<i32>(x_isize);\n-   |                ^^^^^^^ expected i32, found isize\n+   |                ^^^^^^^ expected `i32`, found `isize`\n    |\n help: you can convert an `isize` to `i32` and panic if the converted value wouldn't fit\n    |\n@@ -547,7 +547,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:144:16\n    |\n LL |     foo::<i32>(x_i64);\n-   |                ^^^^^ expected i32, found i64\n+   |                ^^^^^ expected `i32`, found `i64`\n    |\n help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n    |\n@@ -560,7 +560,7 @@ error[E0308]: mismatched types\n LL |     foo::<i32>(x_i16);\n    |                ^^^^^\n    |                |\n-   |                expected i32, found i16\n+   |                expected `i32`, found `i16`\n    |                help: you can convert an `i16` to `i32`: `x_i16.into()`\n \n error[E0308]: mismatched types\n@@ -569,14 +569,14 @@ error[E0308]: mismatched types\n LL |     foo::<i32>(x_i8);\n    |                ^^^^\n    |                |\n-   |                expected i32, found i8\n+   |                expected `i32`, found `i8`\n    |                help: you can convert an `i8` to `i32`: `x_i8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:154:16\n    |\n LL |     foo::<u16>(x_usize);\n-   |                ^^^^^^^ expected u16, found usize\n+   |                ^^^^^^^ expected `u16`, found `usize`\n    |\n help: you can convert an `usize` to `u16` and panic if the converted value wouldn't fit\n    |\n@@ -587,7 +587,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:156:16\n    |\n LL |     foo::<u16>(x_u64);\n-   |                ^^^^^ expected u16, found u64\n+   |                ^^^^^ expected `u16`, found `u64`\n    |\n help: you can convert an `u64` to `u16` and panic if the converted value wouldn't fit\n    |\n@@ -598,7 +598,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:158:16\n    |\n LL |     foo::<u16>(x_u32);\n-   |                ^^^^^ expected u16, found u32\n+   |                ^^^^^ expected `u16`, found `u32`\n    |\n help: you can convert an `u32` to `u16` and panic if the converted value wouldn't fit\n    |\n@@ -611,14 +611,14 @@ error[E0308]: mismatched types\n LL |     foo::<u16>(x_u8);\n    |                ^^^^\n    |                |\n-   |                expected u16, found u8\n+   |                expected `u16`, found `u8`\n    |                help: you can convert an `u8` to `u16`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:163:16\n    |\n LL |     foo::<u16>(x_isize);\n-   |                ^^^^^^^ expected u16, found isize\n+   |                ^^^^^^^ expected `u16`, found `isize`\n    |\n help: you can convert an `isize` to `u16` and panic if the converted value wouldn't fit\n    |\n@@ -629,7 +629,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:165:16\n    |\n LL |     foo::<u16>(x_i64);\n-   |                ^^^^^ expected u16, found i64\n+   |                ^^^^^ expected `u16`, found `i64`\n    |\n help: you can convert an `i64` to `u16` and panic if the converted value wouldn't fit\n    |\n@@ -640,7 +640,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:167:16\n    |\n LL |     foo::<u16>(x_i32);\n-   |                ^^^^^ expected u16, found i32\n+   |                ^^^^^ expected `u16`, found `i32`\n    |\n help: you can convert an `i32` to `u16` and panic if the converted value wouldn't fit\n    |\n@@ -651,7 +651,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:169:16\n    |\n LL |     foo::<u16>(x_i16);\n-   |                ^^^^^ expected u16, found i16\n+   |                ^^^^^ expected `u16`, found `i16`\n    |\n help: you can convert an `i16` to `u16` and panic if the converted value wouldn't fit\n    |\n@@ -662,7 +662,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:171:16\n    |\n LL |     foo::<u16>(x_i8);\n-   |                ^^^^ expected u16, found i8\n+   |                ^^^^ expected `u16`, found `i8`\n    |\n help: you can convert an `i8` to `u16` and panic if the converted value wouldn't fit\n    |\n@@ -673,7 +673,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:176:16\n    |\n LL |     foo::<i16>(x_usize);\n-   |                ^^^^^^^ expected i16, found usize\n+   |                ^^^^^^^ expected `i16`, found `usize`\n    |\n help: you can convert an `usize` to `i16` and panic if the converted value wouldn't fit\n    |\n@@ -684,7 +684,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:178:16\n    |\n LL |     foo::<i16>(x_u64);\n-   |                ^^^^^ expected i16, found u64\n+   |                ^^^^^ expected `i16`, found `u64`\n    |\n help: you can convert an `u64` to `i16` and panic if the converted value wouldn't fit\n    |\n@@ -695,7 +695,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:180:16\n    |\n LL |     foo::<i16>(x_u32);\n-   |                ^^^^^ expected i16, found u32\n+   |                ^^^^^ expected `i16`, found `u32`\n    |\n help: you can convert an `u32` to `i16` and panic if the converted value wouldn't fit\n    |\n@@ -706,7 +706,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:182:16\n    |\n LL |     foo::<i16>(x_u16);\n-   |                ^^^^^ expected i16, found u16\n+   |                ^^^^^ expected `i16`, found `u16`\n    |\n help: you can convert an `u16` to `i16` and panic if the converted value wouldn't fit\n    |\n@@ -717,7 +717,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:184:16\n    |\n LL |     foo::<i16>(x_u8);\n-   |                ^^^^ expected i16, found u8\n+   |                ^^^^ expected `i16`, found `u8`\n    |\n help: you can convert an `u8` to `i16` and panic if the converted value wouldn't fit\n    |\n@@ -728,7 +728,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:186:16\n    |\n LL |     foo::<i16>(x_isize);\n-   |                ^^^^^^^ expected i16, found isize\n+   |                ^^^^^^^ expected `i16`, found `isize`\n    |\n help: you can convert an `isize` to `i16` and panic if the converted value wouldn't fit\n    |\n@@ -739,7 +739,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:188:16\n    |\n LL |     foo::<i16>(x_i64);\n-   |                ^^^^^ expected i16, found i64\n+   |                ^^^^^ expected `i16`, found `i64`\n    |\n help: you can convert an `i64` to `i16` and panic if the converted value wouldn't fit\n    |\n@@ -750,7 +750,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:190:16\n    |\n LL |     foo::<i16>(x_i32);\n-   |                ^^^^^ expected i16, found i32\n+   |                ^^^^^ expected `i16`, found `i32`\n    |\n help: you can convert an `i32` to `i16` and panic if the converted value wouldn't fit\n    |\n@@ -763,14 +763,14 @@ error[E0308]: mismatched types\n LL |     foo::<i16>(x_i8);\n    |                ^^^^\n    |                |\n-   |                expected i16, found i8\n+   |                expected `i16`, found `i8`\n    |                help: you can convert an `i8` to `i16`: `x_i8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:198:15\n    |\n LL |     foo::<u8>(x_usize);\n-   |               ^^^^^^^ expected u8, found usize\n+   |               ^^^^^^^ expected `u8`, found `usize`\n    |\n help: you can convert an `usize` to `u8` and panic if the converted value wouldn't fit\n    |\n@@ -781,7 +781,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:200:15\n    |\n LL |     foo::<u8>(x_u64);\n-   |               ^^^^^ expected u8, found u64\n+   |               ^^^^^ expected `u8`, found `u64`\n    |\n help: you can convert an `u64` to `u8` and panic if the converted value wouldn't fit\n    |\n@@ -792,7 +792,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:202:15\n    |\n LL |     foo::<u8>(x_u32);\n-   |               ^^^^^ expected u8, found u32\n+   |               ^^^^^ expected `u8`, found `u32`\n    |\n help: you can convert an `u32` to `u8` and panic if the converted value wouldn't fit\n    |\n@@ -803,7 +803,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:204:15\n    |\n LL |     foo::<u8>(x_u16);\n-   |               ^^^^^ expected u8, found u16\n+   |               ^^^^^ expected `u8`, found `u16`\n    |\n help: you can convert an `u16` to `u8` and panic if the converted value wouldn't fit\n    |\n@@ -814,7 +814,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:207:15\n    |\n LL |     foo::<u8>(x_isize);\n-   |               ^^^^^^^ expected u8, found isize\n+   |               ^^^^^^^ expected `u8`, found `isize`\n    |\n help: you can convert an `isize` to `u8` and panic if the converted value wouldn't fit\n    |\n@@ -825,7 +825,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:209:15\n    |\n LL |     foo::<u8>(x_i64);\n-   |               ^^^^^ expected u8, found i64\n+   |               ^^^^^ expected `u8`, found `i64`\n    |\n help: you can convert an `i64` to `u8` and panic if the converted value wouldn't fit\n    |\n@@ -836,7 +836,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:211:15\n    |\n LL |     foo::<u8>(x_i32);\n-   |               ^^^^^ expected u8, found i32\n+   |               ^^^^^ expected `u8`, found `i32`\n    |\n help: you can convert an `i32` to `u8` and panic if the converted value wouldn't fit\n    |\n@@ -847,7 +847,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:213:15\n    |\n LL |     foo::<u8>(x_i16);\n-   |               ^^^^^ expected u8, found i16\n+   |               ^^^^^ expected `u8`, found `i16`\n    |\n help: you can convert an `i16` to `u8` and panic if the converted value wouldn't fit\n    |\n@@ -858,7 +858,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:215:15\n    |\n LL |     foo::<u8>(x_i8);\n-   |               ^^^^ expected u8, found i8\n+   |               ^^^^ expected `u8`, found `i8`\n    |\n help: you can convert an `i8` to `u8` and panic if the converted value wouldn't fit\n    |\n@@ -869,7 +869,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:220:15\n    |\n LL |     foo::<i8>(x_usize);\n-   |               ^^^^^^^ expected i8, found usize\n+   |               ^^^^^^^ expected `i8`, found `usize`\n    |\n help: you can convert an `usize` to `i8` and panic if the converted value wouldn't fit\n    |\n@@ -880,7 +880,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:222:15\n    |\n LL |     foo::<i8>(x_u64);\n-   |               ^^^^^ expected i8, found u64\n+   |               ^^^^^ expected `i8`, found `u64`\n    |\n help: you can convert an `u64` to `i8` and panic if the converted value wouldn't fit\n    |\n@@ -891,7 +891,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:224:15\n    |\n LL |     foo::<i8>(x_u32);\n-   |               ^^^^^ expected i8, found u32\n+   |               ^^^^^ expected `i8`, found `u32`\n    |\n help: you can convert an `u32` to `i8` and panic if the converted value wouldn't fit\n    |\n@@ -902,7 +902,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:226:15\n    |\n LL |     foo::<i8>(x_u16);\n-   |               ^^^^^ expected i8, found u16\n+   |               ^^^^^ expected `i8`, found `u16`\n    |\n help: you can convert an `u16` to `i8` and panic if the converted value wouldn't fit\n    |\n@@ -913,7 +913,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:228:15\n    |\n LL |     foo::<i8>(x_u8);\n-   |               ^^^^ expected i8, found u8\n+   |               ^^^^ expected `i8`, found `u8`\n    |\n help: you can convert an `u8` to `i8` and panic if the converted value wouldn't fit\n    |\n@@ -924,7 +924,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:230:15\n    |\n LL |     foo::<i8>(x_isize);\n-   |               ^^^^^^^ expected i8, found isize\n+   |               ^^^^^^^ expected `i8`, found `isize`\n    |\n help: you can convert an `isize` to `i8` and panic if the converted value wouldn't fit\n    |\n@@ -935,7 +935,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:232:15\n    |\n LL |     foo::<i8>(x_i64);\n-   |               ^^^^^ expected i8, found i64\n+   |               ^^^^^ expected `i8`, found `i64`\n    |\n help: you can convert an `i64` to `i8` and panic if the converted value wouldn't fit\n    |\n@@ -946,7 +946,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:234:15\n    |\n LL |     foo::<i8>(x_i32);\n-   |               ^^^^^ expected i8, found i32\n+   |               ^^^^^ expected `i8`, found `i32`\n    |\n help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n    |\n@@ -957,7 +957,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:236:15\n    |\n LL |     foo::<i8>(x_i16);\n-   |               ^^^^^ expected i8, found i16\n+   |               ^^^^^ expected `i8`, found `i16`\n    |\n help: you can convert an `i16` to `i8` and panic if the converted value wouldn't fit\n    |\n@@ -968,7 +968,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:242:16\n    |\n LL |     foo::<f64>(x_usize);\n-   |                ^^^^^^^ expected f64, found usize\n+   |                ^^^^^^^ expected `f64`, found `usize`\n    |\n help: you can cast an `usize to `f64`, producing the floating point representation of the integer,\n    |                                              rounded if necessary\n@@ -979,7 +979,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:244:16\n    |\n LL |     foo::<f64>(x_u64);\n-   |                ^^^^^ expected f64, found u64\n+   |                ^^^^^ expected `f64`, found `u64`\n    |\n help: you can cast an `u64 to `f64`, producing the floating point representation of the integer,\n    |                                              rounded if necessary\n@@ -990,7 +990,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:246:16\n    |\n LL |     foo::<f64>(x_u32);\n-   |                ^^^^^ expected f64, found u32\n+   |                ^^^^^ expected `f64`, found `u32`\n    |\n help: you can convert an `u32` to `f64`, producing the floating point representation of the integer\n    |\n@@ -1001,7 +1001,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:248:16\n    |\n LL |     foo::<f64>(x_u16);\n-   |                ^^^^^ expected f64, found u16\n+   |                ^^^^^ expected `f64`, found `u16`\n    |\n help: you can convert an `u16` to `f64`, producing the floating point representation of the integer\n    |\n@@ -1012,7 +1012,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:250:16\n    |\n LL |     foo::<f64>(x_u8);\n-   |                ^^^^ expected f64, found u8\n+   |                ^^^^ expected `f64`, found `u8`\n    |\n help: you can convert an `u8` to `f64`, producing the floating point representation of the integer\n    |\n@@ -1023,7 +1023,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:252:16\n    |\n LL |     foo::<f64>(x_isize);\n-   |                ^^^^^^^ expected f64, found isize\n+   |                ^^^^^^^ expected `f64`, found `isize`\n    |\n help: you can convert an `isize` to `f64`, producing the floating point representation of the integer, rounded if necessary\n    |\n@@ -1034,7 +1034,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:254:16\n    |\n LL |     foo::<f64>(x_i64);\n-   |                ^^^^^ expected f64, found i64\n+   |                ^^^^^ expected `f64`, found `i64`\n    |\n help: you can convert an `i64` to `f64`, producing the floating point representation of the integer, rounded if necessary\n    |\n@@ -1045,7 +1045,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:256:16\n    |\n LL |     foo::<f64>(x_i32);\n-   |                ^^^^^ expected f64, found i32\n+   |                ^^^^^ expected `f64`, found `i32`\n    |\n help: you can convert an `i32` to `f64`, producing the floating point representation of the integer\n    |\n@@ -1056,7 +1056,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:258:16\n    |\n LL |     foo::<f64>(x_i16);\n-   |                ^^^^^ expected f64, found i16\n+   |                ^^^^^ expected `f64`, found `i16`\n    |\n help: you can convert an `i16` to `f64`, producing the floating point representation of the integer\n    |\n@@ -1067,7 +1067,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:260:16\n    |\n LL |     foo::<f64>(x_i8);\n-   |                ^^^^ expected f64, found i8\n+   |                ^^^^ expected `f64`, found `i8`\n    |\n help: you can convert an `i8` to `f64`, producing the floating point representation of the integer\n    |\n@@ -1080,14 +1080,14 @@ error[E0308]: mismatched types\n LL |     foo::<f64>(x_f32);\n    |                ^^^^^\n    |                |\n-   |                expected f64, found f32\n+   |                expected `f64`, found `f32`\n    |                help: you can convert an `f32` to `f64`: `x_f32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:266:16\n    |\n LL |     foo::<f32>(x_usize);\n-   |                ^^^^^^^ expected f32, found usize\n+   |                ^^^^^^^ expected `f32`, found `usize`\n    |\n help: you can cast an `usize to `f32`, producing the floating point representation of the integer,\n    |                                              rounded if necessary\n@@ -1098,7 +1098,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:268:16\n    |\n LL |     foo::<f32>(x_u64);\n-   |                ^^^^^ expected f32, found u64\n+   |                ^^^^^ expected `f32`, found `u64`\n    |\n help: you can cast an `u64 to `f32`, producing the floating point representation of the integer,\n    |                                              rounded if necessary\n@@ -1109,7 +1109,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:270:16\n    |\n LL |     foo::<f32>(x_u32);\n-   |                ^^^^^ expected f32, found u32\n+   |                ^^^^^ expected `f32`, found `u32`\n    |\n help: you can cast an `u32 to `f32`, producing the floating point representation of the integer,\n    |                                              rounded if necessary\n@@ -1120,7 +1120,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:272:16\n    |\n LL |     foo::<f32>(x_u16);\n-   |                ^^^^^ expected f32, found u16\n+   |                ^^^^^ expected `f32`, found `u16`\n    |\n help: you can convert an `u16` to `f32`, producing the floating point representation of the integer\n    |\n@@ -1131,7 +1131,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:274:16\n    |\n LL |     foo::<f32>(x_u8);\n-   |                ^^^^ expected f32, found u8\n+   |                ^^^^ expected `f32`, found `u8`\n    |\n help: you can convert an `u8` to `f32`, producing the floating point representation of the integer\n    |\n@@ -1142,7 +1142,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:276:16\n    |\n LL |     foo::<f32>(x_isize);\n-   |                ^^^^^^^ expected f32, found isize\n+   |                ^^^^^^^ expected `f32`, found `isize`\n    |\n help: you can convert an `isize` to `f32`, producing the floating point representation of the integer, rounded if necessary\n    |\n@@ -1153,7 +1153,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:278:16\n    |\n LL |     foo::<f32>(x_i64);\n-   |                ^^^^^ expected f32, found i64\n+   |                ^^^^^ expected `f32`, found `i64`\n    |\n help: you can convert an `i64` to `f32`, producing the floating point representation of the integer, rounded if necessary\n    |\n@@ -1164,7 +1164,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:280:16\n    |\n LL |     foo::<f32>(x_i32);\n-   |                ^^^^^ expected f32, found i32\n+   |                ^^^^^ expected `f32`, found `i32`\n    |\n help: you can convert an `i32` to `f32`, producing the floating point representation of the integer, rounded if necessary\n    |\n@@ -1175,7 +1175,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:282:16\n    |\n LL |     foo::<f32>(x_i16);\n-   |                ^^^^^ expected f32, found i16\n+   |                ^^^^^ expected `f32`, found `i16`\n    |\n help: you can convert an `i16` to `f32`, producing the floating point representation of the integer\n    |\n@@ -1186,7 +1186,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:284:16\n    |\n LL |     foo::<f32>(x_i8);\n-   |                ^^^^ expected f32, found i8\n+   |                ^^^^ expected `f32`, found `i8`\n    |\n help: you can convert an `i8` to `f32`, producing the floating point representation of the integer\n    |\n@@ -1199,7 +1199,7 @@ error[E0308]: mismatched types\n LL |     foo::<u32>(x_u8 as u16);\n    |                ^^^^^^^^^^^\n    |                |\n-   |                expected u32, found u16\n+   |                expected `u32`, found `u16`\n    |                help: you can convert an `u16` to `u32`: `(x_u8 as u16).into()`\n \n error[E0308]: mismatched types\n@@ -1208,7 +1208,7 @@ error[E0308]: mismatched types\n LL |     foo::<i32>(-x_i8);\n    |                ^^^^^\n    |                |\n-   |                expected i32, found i8\n+   |                expected `i32`, found `i8`\n    |                help: you can convert an `i8` to `i32`: `(-x_i8).into()`\n \n error: aborting due to 113 previous errors"}, {"sha": "00f6e1abe43cb7532740b978e19a8f460569b445", "filename": "src/test/ui/numeric/numeric-suffix.stderr", "status": "modified", "additions": 134, "deletions": 134, "changes": 268, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:7:18\n    |\n LL |     foo::<usize>(42_u64);\n-   |                  ^^^^^^ expected usize, found u64\n+   |                  ^^^^^^ expected `usize`, found `u64`\n    |\n help: change the type of the numeric literal from `u64` to `usize`\n    |\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:9:18\n    |\n LL |     foo::<usize>(42_u32);\n-   |                  ^^^^^^ expected usize, found u32\n+   |                  ^^^^^^ expected `usize`, found `u32`\n    |\n help: change the type of the numeric literal from `u32` to `usize`\n    |\n@@ -24,7 +24,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:11:18\n    |\n LL |     foo::<usize>(42_u16);\n-   |                  ^^^^^^ expected usize, found u16\n+   |                  ^^^^^^ expected `usize`, found `u16`\n    |\n help: change the type of the numeric literal from `u16` to `usize`\n    |\n@@ -35,7 +35,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:13:18\n    |\n LL |     foo::<usize>(42_u8);\n-   |                  ^^^^^ expected usize, found u8\n+   |                  ^^^^^ expected `usize`, found `u8`\n    |\n help: change the type of the numeric literal from `u8` to `usize`\n    |\n@@ -46,7 +46,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:15:18\n    |\n LL |     foo::<usize>(42_isize);\n-   |                  ^^^^^^^^ expected usize, found isize\n+   |                  ^^^^^^^^ expected `usize`, found `isize`\n    |\n help: change the type of the numeric literal from `isize` to `usize`\n    |\n@@ -57,7 +57,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:17:18\n    |\n LL |     foo::<usize>(42_i64);\n-   |                  ^^^^^^ expected usize, found i64\n+   |                  ^^^^^^ expected `usize`, found `i64`\n    |\n help: change the type of the numeric literal from `i64` to `usize`\n    |\n@@ -68,7 +68,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:19:18\n    |\n LL |     foo::<usize>(42_i32);\n-   |                  ^^^^^^ expected usize, found i32\n+   |                  ^^^^^^ expected `usize`, found `i32`\n    |\n help: change the type of the numeric literal from `i32` to `usize`\n    |\n@@ -79,7 +79,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:21:18\n    |\n LL |     foo::<usize>(42_i16);\n-   |                  ^^^^^^ expected usize, found i16\n+   |                  ^^^^^^ expected `usize`, found `i16`\n    |\n help: change the type of the numeric literal from `i16` to `usize`\n    |\n@@ -90,7 +90,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:23:18\n    |\n LL |     foo::<usize>(42_i8);\n-   |                  ^^^^^ expected usize, found i8\n+   |                  ^^^^^ expected `usize`, found `i8`\n    |\n help: change the type of the numeric literal from `i8` to `usize`\n    |\n@@ -101,7 +101,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:25:18\n    |\n LL |     foo::<usize>(42.0_f64);\n-   |                  ^^^^^^^^ expected usize, found f64\n+   |                  ^^^^^^^^ expected `usize`, found `f64`\n    |\n help: change the type of the numeric literal from `f64` to `usize`\n    |\n@@ -112,7 +112,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:27:18\n    |\n LL |     foo::<usize>(42.0_f32);\n-   |                  ^^^^^^^^ expected usize, found f32\n+   |                  ^^^^^^^^ expected `usize`, found `f32`\n    |\n help: change the type of the numeric literal from `f32` to `usize`\n    |\n@@ -123,7 +123,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:30:18\n    |\n LL |     foo::<isize>(42_usize);\n-   |                  ^^^^^^^^ expected isize, found usize\n+   |                  ^^^^^^^^ expected `isize`, found `usize`\n    |\n help: change the type of the numeric literal from `usize` to `isize`\n    |\n@@ -134,7 +134,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:32:18\n    |\n LL |     foo::<isize>(42_u64);\n-   |                  ^^^^^^ expected isize, found u64\n+   |                  ^^^^^^ expected `isize`, found `u64`\n    |\n help: change the type of the numeric literal from `u64` to `isize`\n    |\n@@ -145,7 +145,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:34:18\n    |\n LL |     foo::<isize>(42_u32);\n-   |                  ^^^^^^ expected isize, found u32\n+   |                  ^^^^^^ expected `isize`, found `u32`\n    |\n help: change the type of the numeric literal from `u32` to `isize`\n    |\n@@ -156,7 +156,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:36:18\n    |\n LL |     foo::<isize>(42_u16);\n-   |                  ^^^^^^ expected isize, found u16\n+   |                  ^^^^^^ expected `isize`, found `u16`\n    |\n help: change the type of the numeric literal from `u16` to `isize`\n    |\n@@ -167,7 +167,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:38:18\n    |\n LL |     foo::<isize>(42_u8);\n-   |                  ^^^^^ expected isize, found u8\n+   |                  ^^^^^ expected `isize`, found `u8`\n    |\n help: change the type of the numeric literal from `u8` to `isize`\n    |\n@@ -178,7 +178,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:41:18\n    |\n LL |     foo::<isize>(42_i64);\n-   |                  ^^^^^^ expected isize, found i64\n+   |                  ^^^^^^ expected `isize`, found `i64`\n    |\n help: change the type of the numeric literal from `i64` to `isize`\n    |\n@@ -189,7 +189,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:43:18\n    |\n LL |     foo::<isize>(42_i32);\n-   |                  ^^^^^^ expected isize, found i32\n+   |                  ^^^^^^ expected `isize`, found `i32`\n    |\n help: change the type of the numeric literal from `i32` to `isize`\n    |\n@@ -200,7 +200,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:45:18\n    |\n LL |     foo::<isize>(42_i16);\n-   |                  ^^^^^^ expected isize, found i16\n+   |                  ^^^^^^ expected `isize`, found `i16`\n    |\n help: change the type of the numeric literal from `i16` to `isize`\n    |\n@@ -211,7 +211,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:47:18\n    |\n LL |     foo::<isize>(42_i8);\n-   |                  ^^^^^ expected isize, found i8\n+   |                  ^^^^^ expected `isize`, found `i8`\n    |\n help: change the type of the numeric literal from `i8` to `isize`\n    |\n@@ -222,7 +222,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:49:18\n    |\n LL |     foo::<isize>(42.0_f64);\n-   |                  ^^^^^^^^ expected isize, found f64\n+   |                  ^^^^^^^^ expected `isize`, found `f64`\n    |\n help: change the type of the numeric literal from `f64` to `isize`\n    |\n@@ -233,7 +233,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:51:18\n    |\n LL |     foo::<isize>(42.0_f32);\n-   |                  ^^^^^^^^ expected isize, found f32\n+   |                  ^^^^^^^^ expected `isize`, found `f32`\n    |\n help: change the type of the numeric literal from `f32` to `isize`\n    |\n@@ -244,7 +244,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:54:16\n    |\n LL |     foo::<u64>(42_usize);\n-   |                ^^^^^^^^ expected u64, found usize\n+   |                ^^^^^^^^ expected `u64`, found `usize`\n    |\n help: change the type of the numeric literal from `usize` to `u64`\n    |\n@@ -255,7 +255,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:57:16\n    |\n LL |     foo::<u64>(42_u32);\n-   |                ^^^^^^ expected u64, found u32\n+   |                ^^^^^^ expected `u64`, found `u32`\n    |\n help: change the type of the numeric literal from `u32` to `u64`\n    |\n@@ -266,7 +266,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:59:16\n    |\n LL |     foo::<u64>(42_u16);\n-   |                ^^^^^^ expected u64, found u16\n+   |                ^^^^^^ expected `u64`, found `u16`\n    |\n help: change the type of the numeric literal from `u16` to `u64`\n    |\n@@ -277,7 +277,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:61:16\n    |\n LL |     foo::<u64>(42_u8);\n-   |                ^^^^^ expected u64, found u8\n+   |                ^^^^^ expected `u64`, found `u8`\n    |\n help: change the type of the numeric literal from `u8` to `u64`\n    |\n@@ -288,7 +288,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:63:16\n    |\n LL |     foo::<u64>(42_isize);\n-   |                ^^^^^^^^ expected u64, found isize\n+   |                ^^^^^^^^ expected `u64`, found `isize`\n    |\n help: change the type of the numeric literal from `isize` to `u64`\n    |\n@@ -299,7 +299,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:65:16\n    |\n LL |     foo::<u64>(42_i64);\n-   |                ^^^^^^ expected u64, found i64\n+   |                ^^^^^^ expected `u64`, found `i64`\n    |\n help: change the type of the numeric literal from `i64` to `u64`\n    |\n@@ -310,7 +310,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:67:16\n    |\n LL |     foo::<u64>(42_i32);\n-   |                ^^^^^^ expected u64, found i32\n+   |                ^^^^^^ expected `u64`, found `i32`\n    |\n help: change the type of the numeric literal from `i32` to `u64`\n    |\n@@ -321,7 +321,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:69:16\n    |\n LL |     foo::<u64>(42_i16);\n-   |                ^^^^^^ expected u64, found i16\n+   |                ^^^^^^ expected `u64`, found `i16`\n    |\n help: change the type of the numeric literal from `i16` to `u64`\n    |\n@@ -332,7 +332,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:71:16\n    |\n LL |     foo::<u64>(42_i8);\n-   |                ^^^^^ expected u64, found i8\n+   |                ^^^^^ expected `u64`, found `i8`\n    |\n help: change the type of the numeric literal from `i8` to `u64`\n    |\n@@ -343,7 +343,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:73:16\n    |\n LL |     foo::<u64>(42.0_f64);\n-   |                ^^^^^^^^ expected u64, found f64\n+   |                ^^^^^^^^ expected `u64`, found `f64`\n    |\n help: change the type of the numeric literal from `f64` to `u64`\n    |\n@@ -354,7 +354,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:75:16\n    |\n LL |     foo::<u64>(42.0_f32);\n-   |                ^^^^^^^^ expected u64, found f32\n+   |                ^^^^^^^^ expected `u64`, found `f32`\n    |\n help: change the type of the numeric literal from `f32` to `u64`\n    |\n@@ -365,7 +365,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:78:16\n    |\n LL |     foo::<i64>(42_usize);\n-   |                ^^^^^^^^ expected i64, found usize\n+   |                ^^^^^^^^ expected `i64`, found `usize`\n    |\n help: change the type of the numeric literal from `usize` to `i64`\n    |\n@@ -376,7 +376,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:80:16\n    |\n LL |     foo::<i64>(42_u64);\n-   |                ^^^^^^ expected i64, found u64\n+   |                ^^^^^^ expected `i64`, found `u64`\n    |\n help: change the type of the numeric literal from `u64` to `i64`\n    |\n@@ -387,7 +387,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:82:16\n    |\n LL |     foo::<i64>(42_u32);\n-   |                ^^^^^^ expected i64, found u32\n+   |                ^^^^^^ expected `i64`, found `u32`\n    |\n help: change the type of the numeric literal from `u32` to `i64`\n    |\n@@ -398,7 +398,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:84:16\n    |\n LL |     foo::<i64>(42_u16);\n-   |                ^^^^^^ expected i64, found u16\n+   |                ^^^^^^ expected `i64`, found `u16`\n    |\n help: change the type of the numeric literal from `u16` to `i64`\n    |\n@@ -409,7 +409,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:86:16\n    |\n LL |     foo::<i64>(42_u8);\n-   |                ^^^^^ expected i64, found u8\n+   |                ^^^^^ expected `i64`, found `u8`\n    |\n help: change the type of the numeric literal from `u8` to `i64`\n    |\n@@ -420,7 +420,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:88:16\n    |\n LL |     foo::<i64>(42_isize);\n-   |                ^^^^^^^^ expected i64, found isize\n+   |                ^^^^^^^^ expected `i64`, found `isize`\n    |\n help: change the type of the numeric literal from `isize` to `i64`\n    |\n@@ -431,7 +431,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:91:16\n    |\n LL |     foo::<i64>(42_i32);\n-   |                ^^^^^^ expected i64, found i32\n+   |                ^^^^^^ expected `i64`, found `i32`\n    |\n help: change the type of the numeric literal from `i32` to `i64`\n    |\n@@ -442,7 +442,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:93:16\n    |\n LL |     foo::<i64>(42_i16);\n-   |                ^^^^^^ expected i64, found i16\n+   |                ^^^^^^ expected `i64`, found `i16`\n    |\n help: change the type of the numeric literal from `i16` to `i64`\n    |\n@@ -453,7 +453,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:95:16\n    |\n LL |     foo::<i64>(42_i8);\n-   |                ^^^^^ expected i64, found i8\n+   |                ^^^^^ expected `i64`, found `i8`\n    |\n help: change the type of the numeric literal from `i8` to `i64`\n    |\n@@ -464,7 +464,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:97:16\n    |\n LL |     foo::<i64>(42.0_f64);\n-   |                ^^^^^^^^ expected i64, found f64\n+   |                ^^^^^^^^ expected `i64`, found `f64`\n    |\n help: change the type of the numeric literal from `f64` to `i64`\n    |\n@@ -475,7 +475,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:99:16\n    |\n LL |     foo::<i64>(42.0_f32);\n-   |                ^^^^^^^^ expected i64, found f32\n+   |                ^^^^^^^^ expected `i64`, found `f32`\n    |\n help: change the type of the numeric literal from `f32` to `i64`\n    |\n@@ -486,7 +486,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:102:16\n    |\n LL |     foo::<u32>(42_usize);\n-   |                ^^^^^^^^ expected u32, found usize\n+   |                ^^^^^^^^ expected `u32`, found `usize`\n    |\n help: change the type of the numeric literal from `usize` to `u32`\n    |\n@@ -497,7 +497,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:104:16\n    |\n LL |     foo::<u32>(42_u64);\n-   |                ^^^^^^ expected u32, found u64\n+   |                ^^^^^^ expected `u32`, found `u64`\n    |\n help: change the type of the numeric literal from `u64` to `u32`\n    |\n@@ -508,7 +508,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:107:16\n    |\n LL |     foo::<u32>(42_u16);\n-   |                ^^^^^^ expected u32, found u16\n+   |                ^^^^^^ expected `u32`, found `u16`\n    |\n help: change the type of the numeric literal from `u16` to `u32`\n    |\n@@ -519,7 +519,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:109:16\n    |\n LL |     foo::<u32>(42_u8);\n-   |                ^^^^^ expected u32, found u8\n+   |                ^^^^^ expected `u32`, found `u8`\n    |\n help: change the type of the numeric literal from `u8` to `u32`\n    |\n@@ -530,7 +530,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:111:16\n    |\n LL |     foo::<u32>(42_isize);\n-   |                ^^^^^^^^ expected u32, found isize\n+   |                ^^^^^^^^ expected `u32`, found `isize`\n    |\n help: change the type of the numeric literal from `isize` to `u32`\n    |\n@@ -541,7 +541,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:113:16\n    |\n LL |     foo::<u32>(42_i64);\n-   |                ^^^^^^ expected u32, found i64\n+   |                ^^^^^^ expected `u32`, found `i64`\n    |\n help: change the type of the numeric literal from `i64` to `u32`\n    |\n@@ -552,7 +552,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:115:16\n    |\n LL |     foo::<u32>(42_i32);\n-   |                ^^^^^^ expected u32, found i32\n+   |                ^^^^^^ expected `u32`, found `i32`\n    |\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n@@ -563,7 +563,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:117:16\n    |\n LL |     foo::<u32>(42_i16);\n-   |                ^^^^^^ expected u32, found i16\n+   |                ^^^^^^ expected `u32`, found `i16`\n    |\n help: change the type of the numeric literal from `i16` to `u32`\n    |\n@@ -574,7 +574,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:119:16\n    |\n LL |     foo::<u32>(42_i8);\n-   |                ^^^^^ expected u32, found i8\n+   |                ^^^^^ expected `u32`, found `i8`\n    |\n help: change the type of the numeric literal from `i8` to `u32`\n    |\n@@ -585,7 +585,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:121:16\n    |\n LL |     foo::<u32>(42.0_f64);\n-   |                ^^^^^^^^ expected u32, found f64\n+   |                ^^^^^^^^ expected `u32`, found `f64`\n    |\n help: change the type of the numeric literal from `f64` to `u32`\n    |\n@@ -596,7 +596,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:123:16\n    |\n LL |     foo::<u32>(42.0_f32);\n-   |                ^^^^^^^^ expected u32, found f32\n+   |                ^^^^^^^^ expected `u32`, found `f32`\n    |\n help: change the type of the numeric literal from `f32` to `u32`\n    |\n@@ -607,7 +607,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:126:16\n    |\n LL |     foo::<i32>(42_usize);\n-   |                ^^^^^^^^ expected i32, found usize\n+   |                ^^^^^^^^ expected `i32`, found `usize`\n    |\n help: change the type of the numeric literal from `usize` to `i32`\n    |\n@@ -618,7 +618,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:128:16\n    |\n LL |     foo::<i32>(42_u64);\n-   |                ^^^^^^ expected i32, found u64\n+   |                ^^^^^^ expected `i32`, found `u64`\n    |\n help: change the type of the numeric literal from `u64` to `i32`\n    |\n@@ -629,7 +629,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:130:16\n    |\n LL |     foo::<i32>(42_u32);\n-   |                ^^^^^^ expected i32, found u32\n+   |                ^^^^^^ expected `i32`, found `u32`\n    |\n help: change the type of the numeric literal from `u32` to `i32`\n    |\n@@ -640,7 +640,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:132:16\n    |\n LL |     foo::<i32>(42_u16);\n-   |                ^^^^^^ expected i32, found u16\n+   |                ^^^^^^ expected `i32`, found `u16`\n    |\n help: change the type of the numeric literal from `u16` to `i32`\n    |\n@@ -651,7 +651,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:134:16\n    |\n LL |     foo::<i32>(42_u8);\n-   |                ^^^^^ expected i32, found u8\n+   |                ^^^^^ expected `i32`, found `u8`\n    |\n help: change the type of the numeric literal from `u8` to `i32`\n    |\n@@ -662,7 +662,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:136:16\n    |\n LL |     foo::<i32>(42_isize);\n-   |                ^^^^^^^^ expected i32, found isize\n+   |                ^^^^^^^^ expected `i32`, found `isize`\n    |\n help: change the type of the numeric literal from `isize` to `i32`\n    |\n@@ -673,7 +673,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:138:16\n    |\n LL |     foo::<i32>(42_i64);\n-   |                ^^^^^^ expected i32, found i64\n+   |                ^^^^^^ expected `i32`, found `i64`\n    |\n help: change the type of the numeric literal from `i64` to `i32`\n    |\n@@ -684,7 +684,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:141:16\n    |\n LL |     foo::<i32>(42_i16);\n-   |                ^^^^^^ expected i32, found i16\n+   |                ^^^^^^ expected `i32`, found `i16`\n    |\n help: change the type of the numeric literal from `i16` to `i32`\n    |\n@@ -695,7 +695,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:143:16\n    |\n LL |     foo::<i32>(42_i8);\n-   |                ^^^^^ expected i32, found i8\n+   |                ^^^^^ expected `i32`, found `i8`\n    |\n help: change the type of the numeric literal from `i8` to `i32`\n    |\n@@ -706,7 +706,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:145:16\n    |\n LL |     foo::<i32>(42.0_f64);\n-   |                ^^^^^^^^ expected i32, found f64\n+   |                ^^^^^^^^ expected `i32`, found `f64`\n    |\n help: change the type of the numeric literal from `f64` to `i32`\n    |\n@@ -717,7 +717,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:147:16\n    |\n LL |     foo::<i32>(42.0_f32);\n-   |                ^^^^^^^^ expected i32, found f32\n+   |                ^^^^^^^^ expected `i32`, found `f32`\n    |\n help: change the type of the numeric literal from `f32` to `i32`\n    |\n@@ -728,7 +728,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:150:16\n    |\n LL |     foo::<u16>(42_usize);\n-   |                ^^^^^^^^ expected u16, found usize\n+   |                ^^^^^^^^ expected `u16`, found `usize`\n    |\n help: change the type of the numeric literal from `usize` to `u16`\n    |\n@@ -739,7 +739,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:152:16\n    |\n LL |     foo::<u16>(42_u64);\n-   |                ^^^^^^ expected u16, found u64\n+   |                ^^^^^^ expected `u16`, found `u64`\n    |\n help: change the type of the numeric literal from `u64` to `u16`\n    |\n@@ -750,7 +750,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:154:16\n    |\n LL |     foo::<u16>(42_u32);\n-   |                ^^^^^^ expected u16, found u32\n+   |                ^^^^^^ expected `u16`, found `u32`\n    |\n help: change the type of the numeric literal from `u32` to `u16`\n    |\n@@ -761,7 +761,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:157:16\n    |\n LL |     foo::<u16>(42_u8);\n-   |                ^^^^^ expected u16, found u8\n+   |                ^^^^^ expected `u16`, found `u8`\n    |\n help: change the type of the numeric literal from `u8` to `u16`\n    |\n@@ -772,7 +772,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:159:16\n    |\n LL |     foo::<u16>(42_isize);\n-   |                ^^^^^^^^ expected u16, found isize\n+   |                ^^^^^^^^ expected `u16`, found `isize`\n    |\n help: change the type of the numeric literal from `isize` to `u16`\n    |\n@@ -783,7 +783,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:161:16\n    |\n LL |     foo::<u16>(42_i64);\n-   |                ^^^^^^ expected u16, found i64\n+   |                ^^^^^^ expected `u16`, found `i64`\n    |\n help: change the type of the numeric literal from `i64` to `u16`\n    |\n@@ -794,7 +794,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:163:16\n    |\n LL |     foo::<u16>(42_i32);\n-   |                ^^^^^^ expected u16, found i32\n+   |                ^^^^^^ expected `u16`, found `i32`\n    |\n help: change the type of the numeric literal from `i32` to `u16`\n    |\n@@ -805,7 +805,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:165:16\n    |\n LL |     foo::<u16>(42_i16);\n-   |                ^^^^^^ expected u16, found i16\n+   |                ^^^^^^ expected `u16`, found `i16`\n    |\n help: change the type of the numeric literal from `i16` to `u16`\n    |\n@@ -816,7 +816,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:167:16\n    |\n LL |     foo::<u16>(42_i8);\n-   |                ^^^^^ expected u16, found i8\n+   |                ^^^^^ expected `u16`, found `i8`\n    |\n help: change the type of the numeric literal from `i8` to `u16`\n    |\n@@ -827,7 +827,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:169:16\n    |\n LL |     foo::<u16>(42.0_f64);\n-   |                ^^^^^^^^ expected u16, found f64\n+   |                ^^^^^^^^ expected `u16`, found `f64`\n    |\n help: change the type of the numeric literal from `f64` to `u16`\n    |\n@@ -838,7 +838,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:171:16\n    |\n LL |     foo::<u16>(42.0_f32);\n-   |                ^^^^^^^^ expected u16, found f32\n+   |                ^^^^^^^^ expected `u16`, found `f32`\n    |\n help: change the type of the numeric literal from `f32` to `u16`\n    |\n@@ -849,7 +849,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:174:16\n    |\n LL |     foo::<i16>(42_usize);\n-   |                ^^^^^^^^ expected i16, found usize\n+   |                ^^^^^^^^ expected `i16`, found `usize`\n    |\n help: change the type of the numeric literal from `usize` to `i16`\n    |\n@@ -860,7 +860,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:176:16\n    |\n LL |     foo::<i16>(42_u64);\n-   |                ^^^^^^ expected i16, found u64\n+   |                ^^^^^^ expected `i16`, found `u64`\n    |\n help: change the type of the numeric literal from `u64` to `i16`\n    |\n@@ -871,7 +871,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:178:16\n    |\n LL |     foo::<i16>(42_u32);\n-   |                ^^^^^^ expected i16, found u32\n+   |                ^^^^^^ expected `i16`, found `u32`\n    |\n help: change the type of the numeric literal from `u32` to `i16`\n    |\n@@ -882,7 +882,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:180:16\n    |\n LL |     foo::<i16>(42_u16);\n-   |                ^^^^^^ expected i16, found u16\n+   |                ^^^^^^ expected `i16`, found `u16`\n    |\n help: change the type of the numeric literal from `u16` to `i16`\n    |\n@@ -893,7 +893,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:182:16\n    |\n LL |     foo::<i16>(42_u8);\n-   |                ^^^^^ expected i16, found u8\n+   |                ^^^^^ expected `i16`, found `u8`\n    |\n help: change the type of the numeric literal from `u8` to `i16`\n    |\n@@ -904,7 +904,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:184:16\n    |\n LL |     foo::<i16>(42_isize);\n-   |                ^^^^^^^^ expected i16, found isize\n+   |                ^^^^^^^^ expected `i16`, found `isize`\n    |\n help: change the type of the numeric literal from `isize` to `i16`\n    |\n@@ -915,7 +915,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:186:16\n    |\n LL |     foo::<i16>(42_i64);\n-   |                ^^^^^^ expected i16, found i64\n+   |                ^^^^^^ expected `i16`, found `i64`\n    |\n help: change the type of the numeric literal from `i64` to `i16`\n    |\n@@ -926,7 +926,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:188:16\n    |\n LL |     foo::<i16>(42_i32);\n-   |                ^^^^^^ expected i16, found i32\n+   |                ^^^^^^ expected `i16`, found `i32`\n    |\n help: change the type of the numeric literal from `i32` to `i16`\n    |\n@@ -937,7 +937,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:191:16\n    |\n LL |     foo::<i16>(42_i8);\n-   |                ^^^^^ expected i16, found i8\n+   |                ^^^^^ expected `i16`, found `i8`\n    |\n help: change the type of the numeric literal from `i8` to `i16`\n    |\n@@ -948,7 +948,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:193:16\n    |\n LL |     foo::<i16>(42.0_f64);\n-   |                ^^^^^^^^ expected i16, found f64\n+   |                ^^^^^^^^ expected `i16`, found `f64`\n    |\n help: change the type of the numeric literal from `f64` to `i16`\n    |\n@@ -959,7 +959,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:195:16\n    |\n LL |     foo::<i16>(42.0_f32);\n-   |                ^^^^^^^^ expected i16, found f32\n+   |                ^^^^^^^^ expected `i16`, found `f32`\n    |\n help: change the type of the numeric literal from `f32` to `i16`\n    |\n@@ -970,7 +970,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:198:15\n    |\n LL |     foo::<u8>(42_usize);\n-   |               ^^^^^^^^ expected u8, found usize\n+   |               ^^^^^^^^ expected `u8`, found `usize`\n    |\n help: change the type of the numeric literal from `usize` to `u8`\n    |\n@@ -981,7 +981,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:200:15\n    |\n LL |     foo::<u8>(42_u64);\n-   |               ^^^^^^ expected u8, found u64\n+   |               ^^^^^^ expected `u8`, found `u64`\n    |\n help: change the type of the numeric literal from `u64` to `u8`\n    |\n@@ -992,7 +992,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:202:15\n    |\n LL |     foo::<u8>(42_u32);\n-   |               ^^^^^^ expected u8, found u32\n+   |               ^^^^^^ expected `u8`, found `u32`\n    |\n help: change the type of the numeric literal from `u32` to `u8`\n    |\n@@ -1003,7 +1003,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:204:15\n    |\n LL |     foo::<u8>(42_u16);\n-   |               ^^^^^^ expected u8, found u16\n+   |               ^^^^^^ expected `u8`, found `u16`\n    |\n help: change the type of the numeric literal from `u16` to `u8`\n    |\n@@ -1014,7 +1014,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:207:15\n    |\n LL |     foo::<u8>(42_isize);\n-   |               ^^^^^^^^ expected u8, found isize\n+   |               ^^^^^^^^ expected `u8`, found `isize`\n    |\n help: change the type of the numeric literal from `isize` to `u8`\n    |\n@@ -1025,7 +1025,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:209:15\n    |\n LL |     foo::<u8>(42_i64);\n-   |               ^^^^^^ expected u8, found i64\n+   |               ^^^^^^ expected `u8`, found `i64`\n    |\n help: change the type of the numeric literal from `i64` to `u8`\n    |\n@@ -1036,7 +1036,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:211:15\n    |\n LL |     foo::<u8>(42_i32);\n-   |               ^^^^^^ expected u8, found i32\n+   |               ^^^^^^ expected `u8`, found `i32`\n    |\n help: change the type of the numeric literal from `i32` to `u8`\n    |\n@@ -1047,7 +1047,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:213:15\n    |\n LL |     foo::<u8>(42_i16);\n-   |               ^^^^^^ expected u8, found i16\n+   |               ^^^^^^ expected `u8`, found `i16`\n    |\n help: change the type of the numeric literal from `i16` to `u8`\n    |\n@@ -1058,7 +1058,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:215:15\n    |\n LL |     foo::<u8>(42_i8);\n-   |               ^^^^^ expected u8, found i8\n+   |               ^^^^^ expected `u8`, found `i8`\n    |\n help: change the type of the numeric literal from `i8` to `u8`\n    |\n@@ -1069,7 +1069,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:217:15\n    |\n LL |     foo::<u8>(42.0_f64);\n-   |               ^^^^^^^^ expected u8, found f64\n+   |               ^^^^^^^^ expected `u8`, found `f64`\n    |\n help: change the type of the numeric literal from `f64` to `u8`\n    |\n@@ -1080,7 +1080,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:219:15\n    |\n LL |     foo::<u8>(42.0_f32);\n-   |               ^^^^^^^^ expected u8, found f32\n+   |               ^^^^^^^^ expected `u8`, found `f32`\n    |\n help: change the type of the numeric literal from `f32` to `u8`\n    |\n@@ -1091,7 +1091,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:222:15\n    |\n LL |     foo::<i8>(42_usize);\n-   |               ^^^^^^^^ expected i8, found usize\n+   |               ^^^^^^^^ expected `i8`, found `usize`\n    |\n help: change the type of the numeric literal from `usize` to `i8`\n    |\n@@ -1102,7 +1102,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:224:15\n    |\n LL |     foo::<i8>(42_u64);\n-   |               ^^^^^^ expected i8, found u64\n+   |               ^^^^^^ expected `i8`, found `u64`\n    |\n help: change the type of the numeric literal from `u64` to `i8`\n    |\n@@ -1113,7 +1113,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:226:15\n    |\n LL |     foo::<i8>(42_u32);\n-   |               ^^^^^^ expected i8, found u32\n+   |               ^^^^^^ expected `i8`, found `u32`\n    |\n help: change the type of the numeric literal from `u32` to `i8`\n    |\n@@ -1124,7 +1124,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:228:15\n    |\n LL |     foo::<i8>(42_u16);\n-   |               ^^^^^^ expected i8, found u16\n+   |               ^^^^^^ expected `i8`, found `u16`\n    |\n help: change the type of the numeric literal from `u16` to `i8`\n    |\n@@ -1135,7 +1135,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:230:15\n    |\n LL |     foo::<i8>(42_u8);\n-   |               ^^^^^ expected i8, found u8\n+   |               ^^^^^ expected `i8`, found `u8`\n    |\n help: change the type of the numeric literal from `u8` to `i8`\n    |\n@@ -1146,7 +1146,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:232:15\n    |\n LL |     foo::<i8>(42_isize);\n-   |               ^^^^^^^^ expected i8, found isize\n+   |               ^^^^^^^^ expected `i8`, found `isize`\n    |\n help: change the type of the numeric literal from `isize` to `i8`\n    |\n@@ -1157,7 +1157,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:234:15\n    |\n LL |     foo::<i8>(42_i64);\n-   |               ^^^^^^ expected i8, found i64\n+   |               ^^^^^^ expected `i8`, found `i64`\n    |\n help: change the type of the numeric literal from `i64` to `i8`\n    |\n@@ -1168,7 +1168,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:236:15\n    |\n LL |     foo::<i8>(42_i32);\n-   |               ^^^^^^ expected i8, found i32\n+   |               ^^^^^^ expected `i8`, found `i32`\n    |\n help: change the type of the numeric literal from `i32` to `i8`\n    |\n@@ -1179,7 +1179,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:238:15\n    |\n LL |     foo::<i8>(42_i16);\n-   |               ^^^^^^ expected i8, found i16\n+   |               ^^^^^^ expected `i8`, found `i16`\n    |\n help: change the type of the numeric literal from `i16` to `i8`\n    |\n@@ -1190,7 +1190,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:241:15\n    |\n LL |     foo::<i8>(42.0_f64);\n-   |               ^^^^^^^^ expected i8, found f64\n+   |               ^^^^^^^^ expected `i8`, found `f64`\n    |\n help: change the type of the numeric literal from `f64` to `i8`\n    |\n@@ -1201,7 +1201,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:243:15\n    |\n LL |     foo::<i8>(42.0_f32);\n-   |               ^^^^^^^^ expected i8, found f32\n+   |               ^^^^^^^^ expected `i8`, found `f32`\n    |\n help: change the type of the numeric literal from `f32` to `i8`\n    |\n@@ -1212,7 +1212,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:246:16\n    |\n LL |     foo::<f64>(42_usize);\n-   |                ^^^^^^^^ expected f64, found usize\n+   |                ^^^^^^^^ expected `f64`, found `usize`\n    |\n help: change the type of the numeric literal from `usize` to `f64`\n    |\n@@ -1223,7 +1223,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:248:16\n    |\n LL |     foo::<f64>(42_u64);\n-   |                ^^^^^^ expected f64, found u64\n+   |                ^^^^^^ expected `f64`, found `u64`\n    |\n help: change the type of the numeric literal from `u64` to `f64`\n    |\n@@ -1234,7 +1234,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:250:16\n    |\n LL |     foo::<f64>(42_u32);\n-   |                ^^^^^^ expected f64, found u32\n+   |                ^^^^^^ expected `f64`, found `u32`\n    |\n help: you can convert an `u32` to `f64`, producing the floating point representation of the integer\n    |\n@@ -1245,7 +1245,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:252:16\n    |\n LL |     foo::<f64>(42_u16);\n-   |                ^^^^^^ expected f64, found u16\n+   |                ^^^^^^ expected `f64`, found `u16`\n    |\n help: you can convert an `u16` to `f64`, producing the floating point representation of the integer\n    |\n@@ -1256,7 +1256,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:254:16\n    |\n LL |     foo::<f64>(42_u8);\n-   |                ^^^^^ expected f64, found u8\n+   |                ^^^^^ expected `f64`, found `u8`\n    |\n help: you can convert an `u8` to `f64`, producing the floating point representation of the integer\n    |\n@@ -1267,7 +1267,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:256:16\n    |\n LL |     foo::<f64>(42_isize);\n-   |                ^^^^^^^^ expected f64, found isize\n+   |                ^^^^^^^^ expected `f64`, found `isize`\n    |\n help: change the type of the numeric literal from `isize` to `f64`\n    |\n@@ -1278,7 +1278,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:258:16\n    |\n LL |     foo::<f64>(42_i64);\n-   |                ^^^^^^ expected f64, found i64\n+   |                ^^^^^^ expected `f64`, found `i64`\n    |\n help: change the type of the numeric literal from `i64` to `f64`\n    |\n@@ -1289,7 +1289,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:260:16\n    |\n LL |     foo::<f64>(42_i32);\n-   |                ^^^^^^ expected f64, found i32\n+   |                ^^^^^^ expected `f64`, found `i32`\n    |\n help: you can convert an `i32` to `f64`, producing the floating point representation of the integer\n    |\n@@ -1300,7 +1300,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:262:16\n    |\n LL |     foo::<f64>(42_i16);\n-   |                ^^^^^^ expected f64, found i16\n+   |                ^^^^^^ expected `f64`, found `i16`\n    |\n help: you can convert an `i16` to `f64`, producing the floating point representation of the integer\n    |\n@@ -1311,7 +1311,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:264:16\n    |\n LL |     foo::<f64>(42_i8);\n-   |                ^^^^^ expected f64, found i8\n+   |                ^^^^^ expected `f64`, found `i8`\n    |\n help: you can convert an `i8` to `f64`, producing the floating point representation of the integer\n    |\n@@ -1322,7 +1322,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:267:16\n    |\n LL |     foo::<f64>(42.0_f32);\n-   |                ^^^^^^^^ expected f64, found f32\n+   |                ^^^^^^^^ expected `f64`, found `f32`\n    |\n help: change the type of the numeric literal from `f32` to `f64`\n    |\n@@ -1333,7 +1333,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:270:16\n    |\n LL |     foo::<f32>(42_usize);\n-   |                ^^^^^^^^ expected f32, found usize\n+   |                ^^^^^^^^ expected `f32`, found `usize`\n    |\n help: change the type of the numeric literal from `usize` to `f32`\n    |\n@@ -1344,7 +1344,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:272:16\n    |\n LL |     foo::<f32>(42_u64);\n-   |                ^^^^^^ expected f32, found u64\n+   |                ^^^^^^ expected `f32`, found `u64`\n    |\n help: change the type of the numeric literal from `u64` to `f32`\n    |\n@@ -1355,7 +1355,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:274:16\n    |\n LL |     foo::<f32>(42_u32);\n-   |                ^^^^^^ expected f32, found u32\n+   |                ^^^^^^ expected `f32`, found `u32`\n    |\n help: change the type of the numeric literal from `u32` to `f32`\n    |\n@@ -1366,7 +1366,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:276:16\n    |\n LL |     foo::<f32>(42_u16);\n-   |                ^^^^^^ expected f32, found u16\n+   |                ^^^^^^ expected `f32`, found `u16`\n    |\n help: you can convert an `u16` to `f32`, producing the floating point representation of the integer\n    |\n@@ -1377,7 +1377,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:278:16\n    |\n LL |     foo::<f32>(42_u8);\n-   |                ^^^^^ expected f32, found u8\n+   |                ^^^^^ expected `f32`, found `u8`\n    |\n help: you can convert an `u8` to `f32`, producing the floating point representation of the integer\n    |\n@@ -1388,7 +1388,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:280:16\n    |\n LL |     foo::<f32>(42_isize);\n-   |                ^^^^^^^^ expected f32, found isize\n+   |                ^^^^^^^^ expected `f32`, found `isize`\n    |\n help: change the type of the numeric literal from `isize` to `f32`\n    |\n@@ -1399,7 +1399,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:282:16\n    |\n LL |     foo::<f32>(42_i64);\n-   |                ^^^^^^ expected f32, found i64\n+   |                ^^^^^^ expected `f32`, found `i64`\n    |\n help: change the type of the numeric literal from `i64` to `f32`\n    |\n@@ -1410,7 +1410,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:284:16\n    |\n LL |     foo::<f32>(42_i32);\n-   |                ^^^^^^ expected f32, found i32\n+   |                ^^^^^^ expected `f32`, found `i32`\n    |\n help: change the type of the numeric literal from `i32` to `f32`\n    |\n@@ -1421,7 +1421,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:286:16\n    |\n LL |     foo::<f32>(42_i16);\n-   |                ^^^^^^ expected f32, found i16\n+   |                ^^^^^^ expected `f32`, found `i16`\n    |\n help: you can convert an `i16` to `f32`, producing the floating point representation of the integer\n    |\n@@ -1432,7 +1432,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:288:16\n    |\n LL |     foo::<f32>(42_i8);\n-   |                ^^^^^ expected f32, found i8\n+   |                ^^^^^ expected `f32`, found `i8`\n    |\n help: you can convert an `i8` to `f32`, producing the floating point representation of the integer\n    |\n@@ -1443,7 +1443,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:290:16\n    |\n LL |     foo::<f32>(42.0_f64);\n-   |                ^^^^^^^^ expected f32, found f64\n+   |                ^^^^^^^^ expected `f32`, found `f64`\n    |\n help: change the type of the numeric literal from `f64` to `f32`\n    |\n@@ -1456,7 +1456,7 @@ error[E0308]: mismatched types\n LL |     foo::<u32>(42_u8 as u16);\n    |                ^^^^^^^^^^^^\n    |                |\n-   |                expected u32, found u16\n+   |                expected `u32`, found `u16`\n    |                help: you can convert an `u16` to `u32`: `(42_u8 as u16).into()`\n \n error[E0308]: mismatched types\n@@ -1465,7 +1465,7 @@ error[E0308]: mismatched types\n LL |     foo::<i32>(-42_i8);\n    |                ^^^^^^\n    |                |\n-   |                expected i32, found i8\n+   |                expected `i32`, found `i8`\n    |                help: you can convert an `i8` to `i32`: `(-42_i8).into()`\n \n error: aborting due to 134 previous errors"}, {"sha": "433a02dfb3139a1bbaa7be4f049ac8eb47e757cd", "filename": "src/test/ui/or-patterns/consistent-bindings.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2For-patterns%2Fconsistent-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2For-patterns%2Fconsistent-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fconsistent-bindings.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -10,7 +10,7 @@ error[E0308]: mismatched types\n   --> $DIR/consistent-bindings.rs:44:9\n    |\n LL |     let () = 0;\n-   |         ^^ expected integer, found ()\n+   |         ^^ expected integer, found `()`\n \n error: aborting due to previous error\n "}, {"sha": "94435f2118b8a8e8fc992d25c4ebd5199a32fe47", "filename": "src/test/ui/or-patterns/issue-64879-trailing-before-guard.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2For-patterns%2Fissue-64879-trailing-before-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2For-patterns%2Fissue-64879-trailing-before-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fissue-64879-trailing-before-guard.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -10,7 +10,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-64879-trailing-before-guard.rs:12:42\n    |\n LL |             let recovery_witness: bool = 0;\n-   |                                          ^ expected bool, found integer\n+   |                                          ^ expected `bool`, found integer\n \n error: aborting due to 2 previous errors\n "}, {"sha": "253f3ef772525db32cb7f74a3983aab3310c1957", "filename": "src/test/ui/or-patterns/or-pattern-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2For-patterns%2For-pattern-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2For-patterns%2For-pattern-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-pattern-mismatch.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/or-pattern-mismatch.rs:3:68\n    |\n LL | fn main() { match Blah::A(1, 1, 2) { Blah::A(_, x, y) | Blah::B(x, y) => { } } }\n-   |                                                                    ^ expected usize, found isize\n+   |                                                                    ^ expected `usize`, found `isize`\n \n error: aborting due to previous error\n "}, {"sha": "533bd87c9cccb2b6192787a5f5fbbb104e0d2594", "filename": "src/test/ui/output-type-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Foutput-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Foutput-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foutput-type-mismatch.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/output-type-mismatch.rs:5:31\n    |\n LL | fn main() { let i: isize; i = f(); }\n-   |                               ^^^ expected isize, found ()\n+   |                               ^^^ expected `isize`, found `()`\n \n error: aborting due to previous error\n "}, {"sha": "4d93e130901e7be4cea4b9e36b32850ee2c330cb", "filename": "src/test/ui/parser/expr-as-stmt.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -47,25 +47,25 @@ error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt.rs:7:6\n    |\n LL |     {2} + {2}\n-   |      ^ expected (), found integer\n+   |      ^ expected `()`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt.rs:12:6\n    |\n LL |     {2} + 2\n-   |      ^ expected (), found integer\n+   |      ^ expected `()`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt.rs:18:7\n    |\n LL |     { 42 } + foo;\n-   |       ^^ expected (), found integer\n+   |       ^^ expected `()`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt.rs:24:7\n    |\n LL |     { 3 } * 3\n-   |       ^ expected (), found integer\n+   |       ^ expected `()`, found integer\n \n error[E0614]: type `{integer}` cannot be dereferenced\n   --> $DIR/expr-as-stmt.rs:24:11"}, {"sha": "2d1554183ccccb8b9693cd7b12fcfccb0fa91764", "filename": "src/test/ui/parser/fn-arg-doc-comment.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -17,10 +17,10 @@ fn main() {\n     // verify that the parser recovered and properly typechecked the args\n     f(\"\", \"\");\n     //~^ ERROR mismatched types\n-    //~| NOTE expected u8, found &str\n+    //~| NOTE expected `u8`, found `&str`\n     //~| ERROR mismatched types\n-    //~| NOTE expected u8, found &str\n+    //~| NOTE expected `u8`, found `&str`\n     bar(\"\");\n     //~^ ERROR mismatched types\n-    //~| NOTE expected i32, found &str\n+    //~| NOTE expected `i32`, found `&str`\n }"}, {"sha": "41f2c080b9465532d553f9d2febab3c791f8fb1d", "filename": "src/test/ui/parser/fn-arg-doc-comment.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -20,19 +20,19 @@ error[E0308]: mismatched types\n   --> $DIR/fn-arg-doc-comment.rs:18:7\n    |\n LL |     f(\"\", \"\");\n-   |       ^^ expected u8, found &str\n+   |       ^^ expected `u8`, found `&str`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-arg-doc-comment.rs:18:11\n    |\n LL |     f(\"\", \"\");\n-   |           ^^ expected u8, found &str\n+   |           ^^ expected `u8`, found `&str`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-arg-doc-comment.rs:23:9\n    |\n LL |     bar(\"\");\n-   |         ^^ expected i32, found &str\n+   |         ^^ expected `i32`, found `&str`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "ac320f095a2389444aec93e1103982504279d178", "filename": "src/test/ui/parser/issue-33413.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -8,7 +8,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-33413.rs:4:23\n    |\n LL |     fn f(*, a: u8) -> u8 {}\n-   |        -              ^^ expected u8, found ()\n+   |        -              ^^ expected `u8`, found `()`\n    |        |\n    |        implicitly returns `()` as its body has no tail or `return` expression\n "}, {"sha": "fdf772fcbdb778dc256b2f82cb3b9d78238b1b67", "filename": "src/test/ui/parser/issue-62881.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Fissue-62881.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Fissue-62881.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62881.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -17,7 +17,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-62881.rs:3:29\n    |\n LL | fn f() -> isize { fn f() -> isize {} pub f<\n-   |                      -      ^^^^^ expected isize, found ()\n+   |                      -      ^^^^^ expected `isize`, found `()`\n    |                      |\n    |                      implicitly returns `()` as its body has no tail or `return` expression\n "}, {"sha": "ed4d2340fc5bbf473e4e963cec2ceb33ad095497", "filename": "src/test/ui/parser/issue-62895.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Fissue-62895.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Fissue-62895.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62895.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -37,7 +37,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-62895.rs:3:11\n    |\n LL | fn v() -> isize {\n-   |    -      ^^^^^ expected isize, found ()\n+   |    -      ^^^^^ expected `isize`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n "}, {"sha": "8f304bdf7131ba571203cacc408b25e503191fac", "filename": "src/test/ui/parser/lex-bad-char-literals-6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-6.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -43,7 +43,7 @@ error[E0308]: mismatched types\n   --> $DIR/lex-bad-char-literals-6.rs:15:20\n    |\n LL |     let a: usize = \"\";\n-   |                    ^^ expected usize, found &str\n+   |                    ^^ expected `usize`, found `&str`\n \n error[E0277]: can't compare `&str` with `char`\n   --> $DIR/lex-bad-char-literals-6.rs:12:10"}, {"sha": "58343e86d7b2d60c0bd5f73bf61133534b17d41d", "filename": "src/test/ui/parser/match-vec-invalid.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Fmatch-vec-invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Fmatch-vec-invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-vec-invalid.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -34,7 +34,7 @@ error[E0308]: mismatched types\n   --> $DIR/match-vec-invalid.rs:13:30\n    |\n LL | const RECOVERY_WITNESS: () = 0;\n-   |                              ^ expected (), found integer\n+   |                              ^ expected `()`, found integer\n \n error: aborting due to 5 previous errors\n "}, {"sha": "d9585e7cbf2f45327479e5fb7e113a5b18b70e80", "filename": "src/test/ui/parser/numeric-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Fnumeric-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Fnumeric-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnumeric-lifetime.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -14,7 +14,7 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-lifetime.rs:6:20\n    |\n LL |     let x: usize = \"\";\n-   |                    ^^ expected usize, found &str\n+   |                    ^^ expected `usize`, found `&str`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "cb8bf62a8fe0b4168f8e7b8495064bff7dc991a7", "filename": "src/test/ui/parser/pat-lt-bracket-6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -17,7 +17,7 @@ error[E0308]: mismatched types\n   --> $DIR/pat-lt-bracket-6.rs:10:30\n    |\n LL | const RECOVERY_WITNESS: () = 0;\n-   |                              ^ expected (), found integer\n+   |                              ^ expected `()`, found integer\n \n error: aborting due to 3 previous errors\n "}, {"sha": "aa115659d47a4cc67123a7faff4e81c1768616e5", "filename": "src/test/ui/parser/pat-lt-bracket-7.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -8,7 +8,7 @@ error[E0308]: mismatched types\n   --> $DIR/pat-lt-bracket-7.rs:9:30\n    |\n LL | const RECOVERY_WITNESS: () = 0;\n-   |                              ^ expected (), found integer\n+   |                              ^ expected `()`, found integer\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6c64290e144c20638c38567baa7531a8c72c2643", "filename": "src/test/ui/parser/pat-tuple-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -17,7 +17,7 @@ error[E0308]: mismatched types\n   --> $DIR/pat-tuple-4.rs:11:30\n    |\n LL | const RECOVERY_WITNESS: () = 0;\n-   |                              ^ expected (), found integer\n+   |                              ^ expected `()`, found integer\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3579a2c4e095154c05b0d94787ecbbc2ffb71379", "filename": "src/test/ui/parser/pat-tuple-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -19,7 +19,7 @@ error[E0308]: mismatched types\n LL |     match (0, 1) {\n    |           ------ this match expression has type `({integer}, {integer})`\n LL |         (PAT ..) => {}\n-   |          ^^^^^^ expected tuple, found u8\n+   |          ^^^^^^ expected tuple, found `u8`\n    |\n    = note: expected tuple `({integer}, {integer})`\n                found type `u8`"}, {"sha": "e97cf544ac2683d3df171e902c96ce71f753dfad", "filename": "src/test/ui/parser/recover-for-loop-parens-around-head.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -17,7 +17,7 @@ error[E0308]: mismatched types\n   --> $DIR/recover-for-loop-parens-around-head.rs:13:38\n    |\n LL |         const RECOVERY_WITNESS: () = 0;\n-   |                                      ^ expected (), found integer\n+   |                                      ^ expected `()`, found integer\n \n error: aborting due to 3 previous errors\n "}, {"sha": "51a7c8e08026a75b1e96c1b9db64ae8789e88ceb", "filename": "src/test/ui/parser/recover-from-homoglyph.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Frecover-from-homoglyph.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Frecover-from-homoglyph.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-homoglyph.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/recover-from-homoglyph.rs:3:20\n    |\n LL |     let x: usize = ();\n-   |                    ^^ expected usize, found ()\n+   |                    ^^ expected `usize`, found `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b824f92dfaac90820e244af7255fbcccd69197c1", "filename": "src/test/ui/parser/recover-missing-semi.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -20,13 +20,13 @@ error[E0308]: mismatched types\n   --> $DIR/recover-missing-semi.rs:2:20\n    |\n LL |     let _: usize = ()\n-   |                    ^^ expected usize, found ()\n+   |                    ^^ expected `usize`, found `()`\n \n error[E0308]: mismatched types\n   --> $DIR/recover-missing-semi.rs:9:20\n    |\n LL |     let _: usize = ()\n-   |                    ^^ expected usize, found ()\n+   |                    ^^ expected `usize`, found `()`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "e6e094dc2e3af6bb1d0eb910b2d06ba9cd58b50e", "filename": "src/test/ui/parser/recover-tuple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Frecover-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Frecover-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-tuple.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -8,7 +8,7 @@ error[E0308]: mismatched types\n   --> $DIR/recover-tuple.rs:6:20\n    |\n LL |     let y: usize = \"\";\n-   |                    ^^ expected usize, found &str\n+   |                    ^^ expected `usize`, found `&str`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bece9a388008c072a59927d0701288e316d18e2c", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -45,13 +45,13 @@ error[E0308]: mismatched types\n   --> $DIR/require-parens-for-chained-comparison.rs:8:14\n    |\n LL |     false == 0 < 2;\n-   |              ^ expected bool, found integer\n+   |              ^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/require-parens-for-chained-comparison.rs:8:18\n    |\n LL |     false == 0 < 2;\n-   |                  ^ expected bool, found integer\n+   |                  ^ expected `bool`, found integer\n \n error: aborting due to 7 previous errors\n "}, {"sha": "d12ea0b2fcb9a2a584ddf4a5db101b07f566a61e", "filename": "src/test/ui/parser/struct-literal-restrictions-in-lamda.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -21,7 +21,7 @@ LL |       while || Foo {\n    |  ___________^\n LL | |         x: 3\n LL | |     }.hi() {\n-   | |__________^ expected bool, found closure\n+   | |__________^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n            found closure `[closure@$DIR/struct-literal-restrictions-in-lamda.rs:12:11: 14:11]`"}, {"sha": "426748b5086bb4da64772b420a20a61257b3e990", "filename": "src/test/ui/parser/unclosed-delimiter-in-dep.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/unclosed-delimiter-in-dep.rs:4:20\n    |\n LL |     let _: usize = unclosed_delim_mod::new();\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ expected usize, found enum `std::result::Result`\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found enum `std::result::Result`\n    |\n    = note: expected type `usize`\n               found enum `std::result::Result<unclosed_delim_mod::Value, ()>`"}, {"sha": "95cca38f7de149880e0c381ec5f5285f1c866627", "filename": "src/test/ui/pattern/pat-tuple-bad-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/pat-tuple-bad-type.rs:10:9\n    |\n LL |         (..) => {}\n-   |         ^^^^ expected u8, found ()\n+   |         ^^^^ expected `u8`, found `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8635622ab37cc7b8fb223b015a06077aa8089838", "filename": "src/test/ui/pattern/pattern-error-continue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -21,13 +21,13 @@ fn main() {\n     match 'c' {\n         S { .. } => (),\n         //~^ ERROR mismatched types\n-        //~| expected char, found struct `S`\n+        //~| expected `char`, found struct `S`\n \n         _ => ()\n     }\n     f(true);\n     //~^ ERROR mismatched types\n-    //~| expected char, found bool\n+    //~| expected `char`, found `bool`\n \n     match () {\n         E::V => {} //~ ERROR failed to resolve: use of undeclared type or module `E`"}, {"sha": "2f9fe1981bcbcbd4ed4b5744de27c81c34d9dc48", "filename": "src/test/ui/pattern/pattern-error-continue.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -30,13 +30,13 @@ error[E0308]: mismatched types\n LL |     match 'c' {\n    |           --- this match expression has type `char`\n LL |         S { .. } => (),\n-   |         ^^^^^^^^ expected char, found struct `S`\n+   |         ^^^^^^^^ expected `char`, found struct `S`\n \n error[E0308]: mismatched types\n   --> $DIR/pattern-error-continue.rs:28:7\n    |\n LL |     f(true);\n-   |       ^^^^ expected char, found bool\n+   |       ^^^^ expected `char`, found `bool`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "338eb6ff0c83b3d639cb05cb84a49b39e639ddd8", "filename": "src/test/ui/pattern/pattern-ident-path-generics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fpattern%2Fpattern-ident-path-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fpattern%2Fpattern-ident-path-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-ident-path-generics.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/pattern-ident-path-generics.rs:3:9\n    |\n LL |         None::<isize> => {}\n-   |         ^^^^^^^^^^^^^ expected &str, found isize\n+   |         ^^^^^^^^^^^^^ expected `&str`, found `isize`\n    |\n    = note: expected enum `std::option::Option<&str>`\n               found enum `std::option::Option<isize>`"}, {"sha": "b2afeacdf68c2261189a01d08cb19e95e336de59", "filename": "src/test/ui/pattern/pattern-tyvar.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match t {\n    |           - this match expression has type `std::option::Option<std::vec::Vec<isize>>`\n LL |       Bar::T1(_, Some::<isize>(x)) => {\n-   |                  ^^^^^^^^^^^^^^^^ expected struct `std::vec::Vec`, found isize\n+   |                  ^^^^^^^^^^^^^^^^ expected struct `std::vec::Vec`, found `isize`\n    |\n    = note: expected enum `std::option::Option<std::vec::Vec<isize>>`\n               found enum `std::option::Option<isize>`"}, {"sha": "f5a5f1ab37ae662c401f9f140a86823006520ab6", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return-2.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return-2.rs:9:41\n    |\n LL |             let value: &bool = unsafe { &42 };\n-   |                                         ^^^ expected bool, found integer\n+   |                                         ^^^ expected `bool`, found integer\n    |\n    = note: expected reference `&bool`\n               found reference `&{integer}`"}, {"sha": "d5ea2ba39a90ecb1ab9cdf9f6af511a0f4c6aaac", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -8,7 +8,7 @@ LL |         return 0i32;\n    |                ---- ...is found to be `i32` here\n LL |     }\n LL |     1u32\n-   |     ^^^^ expected i32, found u32\n+   |     ^^^^ expected `i32`, found `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:13:16\n@@ -20,7 +20,7 @@ LL |         return 0i32;\n    |                ---- ...is found to be `i32` here\n LL |     } else {\n LL |         return 1u32;\n-   |                ^^^^ expected i32, found u32\n+   |                ^^^^ expected `i32`, found `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:22:9\n@@ -32,7 +32,7 @@ LL |         return 0i32;\n    |                ---- ...is found to be `i32` here\n LL |     } else {\n LL |         1u32\n-   |         ^^^^ expected i32, found u32\n+   |         ^^^^ expected `i32`, found `u32`\n \n error[E0308]: if and else have incompatible types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:31:9\n@@ -42,7 +42,7 @@ LL | |         0i32\n    | |         ---- expected because of this\n LL | |     } else {\n LL | |         1u32\n-   | |         ^^^^ expected i32, found u32\n+   | |         ^^^^ expected `i32`, found `u32`\n LL | |\n LL | |     }\n    | |_____- if and else have incompatible types\n@@ -56,7 +56,7 @@ LL |     match 13 {\n LL |         0 => return 0i32,\n    |                     ---- ...is found to be `i32` here\n LL |         _ => 1u32,\n-   |              ^^^^ expected i32, found u32\n+   |              ^^^^ expected `i32`, found `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:45:5\n@@ -70,7 +70,7 @@ LL | |         0 => return 0i32,\n LL | |         1 => 1u32,\n LL | |         _ => 2u32,\n LL | |     }\n-   | |_____^ expected i32, found u32\n+   | |_____^ expected `i32`, found `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:59:13\n@@ -82,7 +82,7 @@ LL |             return 0i32;\n    |                    ---- ...is found to be `i32` here\n ...\n LL |             1u32\n-   |             ^^^^ expected i32, found u32\n+   |             ^^^^ expected `i32`, found `u32`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "e28d323f8837135476e0f6ccbf50241183d56c79", "filename": "src/test/ui/pptypedef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fpptypedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fpptypedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpptypedef.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -3,9 +3,9 @@ fn let_in<T, F>(x: T, f: F) where F: FnOnce(T) {}\n fn main() {\n     let_in(3u32, |i| { assert!(i == 3i32); });\n     //~^ ERROR mismatched types\n-    //~| expected u32, found i32\n+    //~| expected `u32`, found `i32`\n \n     let_in(3i32, |i| { assert!(i == 3u32); });\n     //~^ ERROR mismatched types\n-    //~| expected i32, found u32\n+    //~| expected `i32`, found `u32`\n }"}, {"sha": "40155de9c770283159477f36f1efb44500711f9f", "filename": "src/test/ui/pptypedef.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fpptypedef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fpptypedef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpptypedef.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/pptypedef.rs:4:37\n    |\n LL |     let_in(3u32, |i| { assert!(i == 3i32); });\n-   |                                     ^^^^ expected u32, found i32\n+   |                                     ^^^^ expected `u32`, found `i32`\n    |\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/pptypedef.rs:8:37\n    |\n LL |     let_in(3i32, |i| { assert!(i == 3u32); });\n-   |                                     ^^^^ expected i32, found u32\n+   |                                     ^^^^ expected `i32`, found `u32`\n    |\n help: change the type of the numeric literal from `u32` to `i32`\n    |"}, {"sha": "d107697d2bf005748fa1956990f6e2c8e853bb6f", "filename": "src/test/ui/proc-macro/attribute-spans-preserved.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,13 +2,13 @@ error[E0308]: mismatched types\n   --> $DIR/attribute-spans-preserved.rs:7:23\n    |\n LL | #[ foo ( let y: u32 = \"z\"; ) ]\n-   |                       ^^^ expected u32, found &str\n+   |                       ^^^ expected `u32`, found `&str`\n \n error[E0308]: mismatched types\n   --> $DIR/attribute-spans-preserved.rs:8:23\n    |\n LL | #[ bar { let x: u32 = \"y\"; } ]\n-   |                       ^^^ expected u32, found &str\n+   |                       ^^^ expected `u32`, found `&str`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "391a259c3800a9caf13fd7c5e5727683ca675b37", "filename": "src/test/ui/proc-macro/attribute-with-error.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,25 +2,25 @@ error[E0308]: mismatched types\n   --> $DIR/attribute-with-error.rs:10:18\n    |\n LL |     let a: i32 = \"foo\";\n-   |                  ^^^^^ expected i32, found &str\n+   |                  ^^^^^ expected `i32`, found `&str`\n \n error[E0308]: mismatched types\n   --> $DIR/attribute-with-error.rs:12:18\n    |\n LL |     let b: i32 = \"f'oo\";\n-   |                  ^^^^^^ expected i32, found &str\n+   |                  ^^^^^^ expected `i32`, found `&str`\n \n error[E0308]: mismatched types\n   --> $DIR/attribute-with-error.rs:25:22\n    |\n LL |         let a: i32 = \"foo\";\n-   |                      ^^^^^ expected i32, found &str\n+   |                      ^^^^^ expected `i32`, found `&str`\n \n error[E0308]: mismatched types\n   --> $DIR/attribute-with-error.rs:35:22\n    |\n LL |         let a: i32 = \"foo\";\n-   |                      ^^^^^ expected i32, found &str\n+   |                      ^^^^^ expected `i32`, found `&str`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "f2c833e69f98c306a11ae53c47f7ef91391d1d2f", "filename": "src/test/ui/proc-macro/issue-37788.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fproc-macro%2Fissue-37788.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fproc-macro%2Fissue-37788.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-37788.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -7,7 +7,7 @@ LL |     // Test that constructing the `visible_parent_map` (in `cstore_impl.rs`\n LL |     std::cell::Cell::new(0)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^- help: try adding a semicolon: `;`\n    |     |\n-   |     expected (), found struct `std::cell::Cell`\n+   |     expected `()`, found struct `std::cell::Cell`\n    |\n    = note: expected unit type `()`\n                  found struct `std::cell::Cell<{integer}>`"}, {"sha": "9aaf612eb54a13854f3abdb3a6ef0d3d58bef35a", "filename": "src/test/ui/proc-macro/macro-brackets.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-brackets.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-brackets.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-brackets.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/macro-brackets.rs:11:21\n    |\n LL | id![static X: u32 = 'a';];\n-   |                     ^^^ expected u32, found char\n+   |                     ^^^ expected `u32`, found `char`\n \n error: aborting due to previous error\n "}, {"sha": "09e13c7014b074f40639e75183ac2d013efdbcfa", "filename": "src/test/ui/proc-macro/nested-item-spans.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fproc-macro%2Fnested-item-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fproc-macro%2Fnested-item-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-item-spans.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,13 +2,13 @@ error[E0308]: mismatched types\n   --> $DIR/nested-item-spans.rs:9:22\n    |\n LL |         let x: u32 = \"x\";\n-   |                      ^^^ expected u32, found &str\n+   |                      ^^^ expected `u32`, found `&str`\n \n error[E0308]: mismatched types\n   --> $DIR/nested-item-spans.rs:18:22\n    |\n LL |         let x: u32 = \"x\";\n-   |                      ^^^ expected u32, found &str\n+   |                      ^^^ expected `u32`, found `&str`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f669b4e9265d16c724d5dbd5a9cc7c18b3c625d1", "filename": "src/test/ui/proc-macro/span-preservation.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/span-preservation.rs:11:20\n    |\n LL |     let x: usize = \"hello\";\n-   |                    ^^^^^^^ expected usize, found &str\n+   |                    ^^^^^^^ expected `usize`, found `&str`\n \n error[E0308]: mismatched types\n   --> $DIR/span-preservation.rs:17:29\n@@ -11,13 +11,13 @@ LL | fn b(x: Option<isize>) -> usize {\n    |                           ----- expected `usize` because of return type\n LL |     match x {\n LL |         Some(x) => { return x },\n-   |                             ^ expected usize, found isize\n+   |                             ^ expected `usize`, found `isize`\n \n error[E0308]: mismatched types\n   --> $DIR/span-preservation.rs:33:22\n    |\n LL |     let x = Foo { a: 10isize };\n-   |                      ^^^^^^^ expected usize, found isize\n+   |                      ^^^^^^^ expected `usize`, found `isize`\n \n error[E0560]: struct `c::Foo` has no field named `b`\n   --> $DIR/span-preservation.rs:34:26\n@@ -44,7 +44,7 @@ error[E0308]: mismatched types\n LL | extern \"C\" fn baz() {\n    |                     - possibly return type missing here?\n LL |     0\n-   |     ^ expected (), found integer\n+   |     ^ expected `()`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/span-preservation.rs:49:5"}, {"sha": "05009358106fabd70b01c070397dca8c5e3dea16", "filename": "src/test/ui/range/range-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-1.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/range-1.rs:5:19\n    |\n LL |     let _ = 0u32..10i32;\n-   |                   ^^^^^ expected u32, found i32\n+   |                   ^^^^^ expected `u32`, found `i32`\n \n error[E0277]: the trait bound `bool: std::iter::Step` is not satisfied\n   --> $DIR/range-1.rs:9:14"}, {"sha": "aca7af144a9344a8d4a76185e19b4e10b51cf63c", "filename": "src/test/ui/repeat_count.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat_count.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -6,26 +6,26 @@ fn main() {\n     //~^ ERROR attempt to use a non-constant value in a constant [E0435]\n     let b = [0; ()];\n     //~^ ERROR mismatched types\n-    //~| expected usize, found ()\n+    //~| expected `usize`, found `()`\n     let c = [0; true];\n     //~^ ERROR mismatched types\n-    //~| expected usize, found bool\n+    //~| expected `usize`, found `bool`\n     let d = [0; 0.5];\n     //~^ ERROR mismatched types\n-    //~| expected usize, found floating-point number\n+    //~| expected `usize`, found floating-point number\n     let e = [0; \"foo\"];\n     //~^ ERROR mismatched types\n-    //~| expected usize, found &str\n+    //~| expected `usize`, found `&str`\n     let f = [0; -4_isize];\n     //~^ ERROR mismatched types\n-    //~| expected usize, found isize\n+    //~| expected `usize`, found `isize`\n     let f = [0_usize; -1_isize];\n     //~^ ERROR mismatched types\n-    //~| expected usize, found isize\n+    //~| expected `usize`, found `isize`\n     struct G {\n         g: (),\n     }\n     let g = [0; G { g: () }];\n     //~^ ERROR mismatched types\n-    //~| expected usize, found struct `main::G`\n+    //~| expected `usize`, found struct `main::G`\n }"}, {"sha": "efad00b272cdc9201bad26907e4f7815773d2c65", "filename": "src/test/ui/repeat_count.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Frepeat_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Frepeat_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat_count.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -8,31 +8,31 @@ error[E0308]: mismatched types\n   --> $DIR/repeat_count.rs:7:17\n    |\n LL |     let b = [0; ()];\n-   |                 ^^ expected usize, found ()\n+   |                 ^^ expected `usize`, found `()`\n \n error[E0308]: mismatched types\n   --> $DIR/repeat_count.rs:10:17\n    |\n LL |     let c = [0; true];\n-   |                 ^^^^ expected usize, found bool\n+   |                 ^^^^ expected `usize`, found `bool`\n \n error[E0308]: mismatched types\n   --> $DIR/repeat_count.rs:13:17\n    |\n LL |     let d = [0; 0.5];\n-   |                 ^^^ expected usize, found floating-point number\n+   |                 ^^^ expected `usize`, found floating-point number\n \n error[E0308]: mismatched types\n   --> $DIR/repeat_count.rs:16:17\n    |\n LL |     let e = [0; \"foo\"];\n-   |                 ^^^^^ expected usize, found &str\n+   |                 ^^^^^ expected `usize`, found `&str`\n \n error[E0308]: mismatched types\n   --> $DIR/repeat_count.rs:19:17\n    |\n LL |     let f = [0; -4_isize];\n-   |                 ^^^^^^^^ expected usize, found isize\n+   |                 ^^^^^^^^ expected `usize`, found `isize`\n    |\n help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n    |\n@@ -43,7 +43,7 @@ error[E0308]: mismatched types\n   --> $DIR/repeat_count.rs:22:23\n    |\n LL |     let f = [0_usize; -1_isize];\n-   |                       ^^^^^^^^ expected usize, found isize\n+   |                       ^^^^^^^^ expected `usize`, found `isize`\n    |\n help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n    |\n@@ -54,7 +54,7 @@ error[E0308]: mismatched types\n   --> $DIR/repeat_count.rs:28:17\n    |\n LL |     let g = [0; G { g: () }];\n-   |                 ^^^^^^^^^^^ expected usize, found struct `main::G`\n+   |                 ^^^^^^^^^^^ expected `usize`, found struct `main::G`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "aeeb0c4519161c92e0ce26c2ecd7525283434795", "filename": "src/test/ui/resolve/name-clash-nullary.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fresolve%2Fname-clash-nullary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fresolve%2Fname-clash-nullary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fname-clash-nullary.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/name-clash-nullary.rs:2:7\n    |\n LL |   let None: isize = 42;\n-   |       ^^^^ expected isize, found enum `std::option::Option`\n+   |       ^^^^ expected `isize`, found enum `std::option::Option`\n    |\n    = note: expected type `isize`\n               found enum `std::option::Option<_>`"}, {"sha": "58455024d382757e37e2b46f5e23e96a88de6584", "filename": "src/test/ui/resolve/resolve-inconsistent-binding-mode.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -24,13 +24,13 @@ error[E0308]: mismatched types\n   --> $DIR/resolve-inconsistent-binding-mode.rs:7:32\n    |\n LL |       Opts::A(ref i) | Opts::B(i) => {}\n-   |                                ^ expected &isize, found isize\n+   |                                ^ expected `&isize`, found `isize`\n \n error[E0308]: mismatched types\n   --> $DIR/resolve-inconsistent-binding-mode.rs:16:32\n    |\n LL |       Opts::A(ref i) | Opts::B(i) => {}\n-   |                                ^ expected &isize, found isize\n+   |                                ^ expected `&isize`, found `isize`\n \n error[E0308]: mismatched types\n   --> $DIR/resolve-inconsistent-binding-mode.rs:25:36"}, {"sha": "271495012dab5026b80de48a1daa0076b625cfcd", "filename": "src/test/ui/resolve/resolve-inconsistent-names.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -87,7 +87,7 @@ error[E0308]: mismatched types\n   --> $DIR/resolve-inconsistent-names.rs:19:19\n    |\n LL |         (A, B) | (ref B, c) | (c, A) => ()\n-   |                   ^^^^^ expected enum `E`, found &E\n+   |                   ^^^^^ expected enum `E`, found `&E`\n \n error: aborting due to 9 previous errors\n "}, {"sha": "0c1fb4d9c593a41db9133bb70af9f1041da96925", "filename": "src/test/ui/return/return-from-diverging.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Freturn%2Freturn-from-diverging.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Freturn%2Freturn-from-diverging.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-from-diverging.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn fail() -> ! {\n    |              - expected `!` because of return type\n LL |     return \"wow\";\n-   |            ^^^^^ expected !, found &str\n+   |            ^^^^^ expected `!`, found `&str`\n    |\n    = note:   expected type `!`\n            found reference `&'static str`"}, {"sha": "535428f1c91f76bf656fff089dae574b633b1b49", "filename": "src/test/ui/return/return-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Freturn%2Freturn-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Freturn%2Freturn-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-type.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/return-type.rs:10:5\n    |\n LL |     foo(4 as usize)\n-   |     ^^^^^^^^^^^^^^^ expected (), found struct `S`\n+   |     ^^^^^^^^^^^^^^^ expected `()`, found struct `S`\n    |\n    = note: expected unit type `()`\n                  found struct `S<usize>`"}, {"sha": "f25fc300d7f3f280f48fdb5190f2d2944335ae0d", "filename": "src/test/ui/rfc-2005-default-binding-mode/const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fconst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fconst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fconst.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/const.rs:14:9\n    |\n LL |         FOO => {},\n-   |         ^^^ expected &Foo, found struct `Foo`\n+   |         ^^^ expected `&Foo`, found struct `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "b0d60c7a4c83ffb2f14a5d91f198f9a13e537bc5", "filename": "src/test/ui/rfc-2005-default-binding-mode/lit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Flit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Flit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Flit.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/lit.rs:7:13\n    |\n LL |             \"abc\" => true,\n-   |             ^^^^^ expected &str, found str\n+   |             ^^^^^ expected `&str`, found `str`\n    |\n    = note:   expected type `&&str`\n            found reference `&'static str`\n@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/lit.rs:16:9\n    |\n LL |         b\"abc\" => true,\n-   |         ^^^^^^ expected &[u8], found array `[u8; 3]`\n+   |         ^^^^^^ expected `&[u8]`, found array `[u8; 3]`\n    |\n    = note:   expected type `&&[u8]`\n            found reference `&'static [u8; 3]`"}, {"sha": "05e30a8010aa140cfc739d2e78ce4f5d31271df3", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -537,7 +537,7 @@ error[E0308]: mismatched types\n LL |     if &let 0 = 0 {}\n    |        ^^^^^^^^^^\n    |        |\n-   |        expected bool, found &bool\n+   |        expected `bool`, found `&bool`\n    |        help: consider removing the borrow: `let 0 = 0`\n \n error[E0614]: type `bool` cannot be dereferenced\n@@ -578,14 +578,14 @@ error[E0308]: mismatched types\n LL |     if x = let 0 = 0 {}\n    |        ^^^^^^^^^^^^^\n    |        |\n-   |        expected bool, found ()\n+   |        expected `bool`, found `()`\n    |        help: try comparing for equality: `x == let 0 = 0`\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:59:8\n    |\n LL |     if true..(let 0 = 0) {}\n-   |        ^^^^^^^^^^^^^^^^^ expected bool, found struct `std::ops::Range`\n+   |        ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -594,7 +594,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:61:8\n    |\n LL |     if ..(let 0 = 0) {}\n-   |        ^^^^^^^^^^^^^ expected bool, found struct `std::ops::RangeTo`\n+   |        ^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::RangeTo`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::RangeTo<bool>`\n@@ -603,7 +603,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:63:8\n    |\n LL |     if (let 0 = 0).. {}\n-   |        ^^^^^^^^^^^^^ expected bool, found struct `std::ops::RangeFrom`\n+   |        ^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::RangeFrom`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::RangeFrom<bool>`\n@@ -614,7 +614,7 @@ error[E0308]: mismatched types\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this match expression has type `bool`\n    |            |\n-   |            expected bool, found struct `std::ops::Range`\n+   |            expected `bool`, found struct `std::ops::Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`\n@@ -623,7 +623,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:67:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected bool, found struct `std::ops::Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -634,7 +634,7 @@ error[E0308]: mismatched types\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this match expression has type `bool`\n    |            |\n-   |            expected bool, found struct `std::ops::Range`\n+   |            expected `bool`, found struct `std::ops::Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`\n@@ -643,7 +643,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:71:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected bool, found struct `std::ops::Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -661,7 +661,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:78:41\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n-   |                                         ^^^^^^^ expected bool, found closure\n+   |                                         ^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n            found closure `[closure@$DIR/disallowed-positions.rs:78:41: 78:48]`\n@@ -670,7 +670,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:78:8\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected bool, found struct `std::ops::Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -681,7 +681,7 @@ error[E0308]: mismatched types\n LL |     if let Range { start: true, end } = t..&&false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this match expression has type `bool`\n    |            |\n-   |            expected bool, found struct `std::ops::Range`\n+   |            expected `bool`, found struct `std::ops::Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`\n@@ -690,13 +690,13 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:86:44\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n-   |                                            ^^^^^^^ expected bool, found &&bool\n+   |                                            ^^^^^^^ expected `bool`, found `&&bool`\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:86:8\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected bool, found struct `std::ops::Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -716,7 +716,7 @@ error[E0308]: mismatched types\n LL |     while &let 0 = 0 {}\n    |           ^^^^^^^^^^\n    |           |\n-   |           expected bool, found &bool\n+   |           expected `bool`, found `&bool`\n    |           help: consider removing the borrow: `let 0 = 0`\n \n error[E0614]: type `bool` cannot be dereferenced\n@@ -757,14 +757,14 @@ error[E0308]: mismatched types\n LL |     while x = let 0 = 0 {}\n    |           ^^^^^^^^^^^^^\n    |           |\n-   |           expected bool, found ()\n+   |           expected `bool`, found `()`\n    |           help: try comparing for equality: `x == let 0 = 0`\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:123:11\n    |\n LL |     while true..(let 0 = 0) {}\n-   |           ^^^^^^^^^^^^^^^^^ expected bool, found struct `std::ops::Range`\n+   |           ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -773,7 +773,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:125:11\n    |\n LL |     while ..(let 0 = 0) {}\n-   |           ^^^^^^^^^^^^^ expected bool, found struct `std::ops::RangeTo`\n+   |           ^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::RangeTo`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::RangeTo<bool>`\n@@ -782,7 +782,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:127:11\n    |\n LL |     while (let 0 = 0).. {}\n-   |           ^^^^^^^^^^^^^ expected bool, found struct `std::ops::RangeFrom`\n+   |           ^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::RangeFrom`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::RangeFrom<bool>`\n@@ -793,7 +793,7 @@ error[E0308]: mismatched types\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this match expression has type `bool`\n    |               |\n-   |               expected bool, found struct `std::ops::Range`\n+   |               expected `bool`, found struct `std::ops::Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`\n@@ -802,7 +802,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:131:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected bool, found struct `std::ops::Range`\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -813,7 +813,7 @@ error[E0308]: mismatched types\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this match expression has type `bool`\n    |               |\n-   |               expected bool, found struct `std::ops::Range`\n+   |               expected `bool`, found struct `std::ops::Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`\n@@ -822,7 +822,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:135:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected bool, found struct `std::ops::Range`\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -840,7 +840,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:142:44\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n-   |                                            ^^^^^^^ expected bool, found closure\n+   |                                            ^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n            found closure `[closure@$DIR/disallowed-positions.rs:142:44: 142:51]`\n@@ -849,7 +849,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:142:11\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected bool, found struct `std::ops::Range`\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -860,7 +860,7 @@ error[E0308]: mismatched types\n LL |     while let Range { start: true, end } = t..&&false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this match expression has type `bool`\n    |               |\n-   |               expected bool, found struct `std::ops::Range`\n+   |               expected `bool`, found struct `std::ops::Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`\n@@ -869,13 +869,13 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:150:47\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n-   |                                               ^^^^^^^ expected bool, found &&bool\n+   |                                               ^^^^^^^ expected `bool`, found `&&bool`\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:150:11\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected bool, found struct `std::ops::Range`\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -927,7 +927,7 @@ error[E0308]: mismatched types\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this match expression has type `bool`\n    |          |\n-   |          expected bool, found struct `std::ops::Range`\n+   |          expected `bool`, found struct `std::ops::Range`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`\n@@ -939,7 +939,7 @@ LL | fn outside_if_and_while_expr() {\n    |                                - help: try adding a return type: `-> &bool`\n ...\n LL |     &let 0 = 0\n-   |     ^^^^^^^^^^ expected (), found &bool\n+   |     ^^^^^^^^^^ expected `()`, found `&bool`\n \n error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n   --> $DIR/disallowed-positions.rs:179:17"}, {"sha": "31224bbca1efc30bce83859c22e5c7ae3a3f423d", "filename": "src/test/ui/shift-various-bad-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fshift-various-bad-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fshift-various-bad-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshift-various-bad-types.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -24,7 +24,7 @@ fn foo(p: &Panolpy) {\n     // Type of the result follows the LHS, not the RHS:\n     let _: i32 = 22_i64 >> 1_i32;\n     //~^ ERROR mismatched types\n-    //~| expected i32, found i64\n+    //~| expected `i32`, found `i64`\n }\n \n fn main() {"}, {"sha": "3be1217440b7e7e608bf1a76c47af1ca8df6e1cc", "filename": "src/test/ui/shift-various-bad-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -26,7 +26,7 @@ error[E0308]: mismatched types\n   --> $DIR/shift-various-bad-types.rs:25:18\n    |\n LL |     let _: i32 = 22_i64 >> 1_i32;\n-   |                  ^^^^^^^^^^^^^^^ expected i32, found i64\n+   |                  ^^^^^^^^^^^^^^^ expected `i32`, found `i64`\n    |\n help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n    |"}, {"sha": "5918888ff89a3514b0c19796bcc593df32531f8e", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,15 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:7:20\n    |\n LL |     let x: usize = String::new();\n-   |                    ^^^^^^^^^^^^^ expected usize, found struct `std::string::String`\n+   |                    ^^^^^^^^^^^^^ expected `usize`, found struct `std::string::String`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:9:19\n    |\n LL |     let x: &str = String::new();\n    |                   ^^^^^^^^^^^^^\n    |                   |\n-   |                   expected &str, found struct `std::string::String`\n+   |                   expected `&str`, found struct `std::string::String`\n    |                   help: consider borrowing here: `&String::new()`\n \n error[E0308]: mismatched types\n@@ -44,7 +44,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:21:9\n    |\n LL |     s = format!(\"foo\");\n-   |         ^^^^^^^^^^^^^^ expected &mut std::string::String, found struct `std::string::String`\n+   |         ^^^^^^^^^^^^^^ expected `&mut std::string::String`, found struct `std::string::String`\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}, {"sha": "56a2686945ca2d1b78d92caa698412df2714a0c3", "filename": "src/test/ui/span/issue-34264.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -55,7 +55,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-34264.rs:8:13\n    |\n LL |     bar(\"\", \"\");\n-   |             ^^ expected usize, found &str\n+   |             ^^ expected `usize`, found `&str`\n \n error[E0061]: this function takes 2 parameters but 3 parameters were supplied\n   --> $DIR/issue-34264.rs:10:5"}, {"sha": "9637d1d82ec7e91e72c17cf66a021614e0415a18", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -70,7 +70,7 @@ error[E0308]: mismatched types\n LL |     let _ = a + b;\n    |                 ^\n    |                 |\n-   |                 expected &str, found struct `std::string::String`\n+   |                 expected `&str`, found struct `std::string::String`\n    |                 help: consider borrowing here: `&b`\n \n error[E0369]: binary operation `+` cannot be applied to type `&std::string::String`"}, {"sha": "9914d7e8507110fcf5c94f49fb987b8d6393428c", "filename": "src/test/ui/span/move-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fspan%2Fmove-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fspan%2Fmove-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmove-closure.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/move-closure.rs:5:17\n    |\n LL |     let x: () = move || ();\n-   |                 ^^^^^^^^^^ expected (), found closure\n+   |                 ^^^^^^^^^^ expected `()`, found closure\n    |\n    = note: expected unit type `()`\n                 found closure `[closure@$DIR/move-closure.rs:5:17: 5:27]`"}, {"sha": "d03aec7ab30d47c7d46baa77a953fb541baa9a67", "filename": "src/test/ui/specialization/specialization-default-projection.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -5,7 +5,7 @@ LL | fn generic<T>() -> <T as Foo>::Assoc {\n    |                    ----------------- expected `<T as Foo>::Assoc` because of return type\n ...\n LL |     ()\n-   |     ^^ expected associated type, found ()\n+   |     ^^ expected associated type, found `()`\n    |\n    = note: expected associated type `<T as Foo>::Assoc`\n                     found unit type `()`\n@@ -21,7 +21,7 @@ LL | fn monomorphic() -> () {\n LL |     generic::<()>()\n    |     ^^^^^^^^^^^^^^^- help: try adding a semicolon: `;`\n    |     |\n-   |     expected (), found associated type\n+   |     expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n            found associated type `<() as Foo>::Assoc`"}, {"sha": "ddd98ff40798a53f3864ec826aed0f1b82ffb866", "filename": "src/test/ui/static/static-mut-bad-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-bad-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-bad-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-bad-types.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/static-mut-bad-types.rs:5:13\n    |\n LL |         a = true;\n-   |             ^^^^ expected isize, found bool\n+   |             ^^^^ expected `isize`, found `bool`\n \n error: aborting due to previous error\n "}, {"sha": "909ff1e0263b6237d79c8ac118333bba83f8c1f2", "filename": "src/test/ui/str/str-array-assignment.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: if and else have incompatible types\n   --> $DIR/str-array-assignment.rs:3:37\n    |\n LL |   let t = if true { s[..2] } else { s };\n-   |                     ------          ^ expected str, found &str\n+   |                     ------          ^ expected `str`, found `&str`\n    |                     |\n    |                     expected because of this\n \n@@ -12,7 +12,7 @@ error[E0308]: mismatched types\n LL |   let u: &str = if true { s[..2] } else { s };\n    |                           ^^^^^^\n    |                           |\n-   |                           expected &str, found str\n+   |                           expected `&str`, found `str`\n    |                           help: consider borrowing here: `&s[..2]`\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -34,7 +34,7 @@ error[E0308]: mismatched types\n LL |   let w: &str = s[..2];\n    |                 ^^^^^^\n    |                 |\n-   |                 expected &str, found str\n+   |                 expected `&str`, found `str`\n    |                 help: consider borrowing here: `&s[..2]`\n \n error: aborting due to 4 previous errors"}, {"sha": "7174fd972eb7f841673e6e4a564f8a51a65e8474", "filename": "src/test/ui/str/str-lit-type-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fstr%2Fstr-lit-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fstr%2Fstr-lit-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-lit-type-mismatch.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let x: &[u8] = \"foo\";\n    |                    ^^^^^\n    |                    |\n-   |                    expected slice `[u8]`, found str\n+   |                    expected slice `[u8]`, found `str`\n    |                    help: consider adding a leading `b`: `b\"foo\"`\n    |\n    = note: expected reference `&[u8]`\n@@ -16,7 +16,7 @@ error[E0308]: mismatched types\n LL |     let y: &[u8; 4] = \"baaa\";\n    |                       ^^^^^^\n    |                       |\n-   |                       expected array `[u8; 4]`, found str\n+   |                       expected array `[u8; 4]`, found `str`\n    |                       help: consider adding a leading `b`: `b\"baaa\"`\n    |\n    = note: expected reference `&[u8; 4]`\n@@ -28,7 +28,7 @@ error[E0308]: mismatched types\n LL |     let z: &str = b\"foo\";\n    |                   ^^^^^^\n    |                   |\n-   |                   expected str, found array `[u8; 3]`\n+   |                   expected `str`, found array `[u8; 3]`\n    |                   help: consider removing the leading `b`: `\"foo\"`\n    |\n    = note: expected reference `&str`"}, {"sha": "b75a53915b526d869248f1539a1473b5a6f9ba70", "filename": "src/test/ui/struct-literal-variant-in-if.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -56,14 +56,14 @@ error[E0308]: mismatched types\n LL |     if x == E::V { field } {}\n    |     ---------------^^^^^--- help: consider using a semicolon here\n    |     |              |\n-   |     |              expected (), found bool\n+   |     |              expected `()`, found `bool`\n    |     expected this to be `()`\n \n error[E0308]: mismatched types\n   --> $DIR/struct-literal-variant-in-if.rs:21:20\n    |\n LL |     let y: usize = ();\n-   |                    ^^ expected usize, found ()\n+   |                    ^^ expected `usize`, found `()`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "b55a2cbf7527cd036d88717421bf5df326db4d66", "filename": "src/test/ui/structs/struct-path-self-type-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self-type-mismatch.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/struct-path-self-type-mismatch.rs:7:23\n    |\n LL |         Self { inner: 1.5f32 };\n-   |                       ^^^^^^ expected i32, found f32\n+   |                       ^^^^^^ expected `i32`, found `f32`\n \n error[E0308]: mismatched types\n   --> $DIR/struct-path-self-type-mismatch.rs:15:20"}, {"sha": "01cc1764657e61512bedc7f6edb79d25da5798b9", "filename": "src/test/ui/structs/structure-constructor-type-mismatch.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.rs?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -16,32 +16,32 @@ fn main() {\n     let pt = PointF {\n         x: 1,\n         //~^ ERROR mismatched types\n-        //~| expected f32, found integer\n+        //~| expected `f32`, found integer\n         y: 2,\n         //~^ ERROR mismatched types\n-        //~| expected f32, found integer\n+        //~| expected `f32`, found integer\n     };\n \n     let pt2 = Point::<f32> {\n         x: 3,\n         //~^ ERROR mismatched types\n-        //~| expected f32, found integer\n+        //~| expected `f32`, found integer\n         y: 4,\n         //~^ ERROR mismatched types\n-        //~| expected f32, found integer\n+        //~| expected `f32`, found integer\n     };\n \n     let pair = PairF {\n         x: 5,\n         //~^ ERROR mismatched types\n-        //~| expected f32, found integer\n+        //~| expected `f32`, found integer\n         y: 6,\n     };\n \n     let pair2 = PairF::<i32> {\n         x: 7,\n         //~^ ERROR mismatched types\n-        //~| expected f32, found integer\n+        //~| expected `f32`, found integer\n         y: 8,\n     };\n "}, {"sha": "4bd3acac532df696ea78b1479beccf5c9f0692ed", "filename": "src/test/ui/structs/structure-constructor-type-mismatch.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |         x: 1,\n    |            ^\n    |            |\n-   |            expected f32, found integer\n+   |            expected `f32`, found integer\n    |            help: use a float literal: `1.0`\n \n error[E0308]: mismatched types\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n LL |         y: 2,\n    |            ^\n    |            |\n-   |            expected f32, found integer\n+   |            expected `f32`, found integer\n    |            help: use a float literal: `2.0`\n \n error[E0308]: mismatched types\n@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n LL |         x: 3,\n    |            ^\n    |            |\n-   |            expected f32, found integer\n+   |            expected `f32`, found integer\n    |            help: use a float literal: `3.0`\n \n error[E0308]: mismatched types\n@@ -31,7 +31,7 @@ error[E0308]: mismatched types\n LL |         y: 4,\n    |            ^\n    |            |\n-   |            expected f32, found integer\n+   |            expected `f32`, found integer\n    |            help: use a float literal: `4.0`\n \n error[E0308]: mismatched types\n@@ -40,7 +40,7 @@ error[E0308]: mismatched types\n LL |         x: 5,\n    |            ^\n    |            |\n-   |            expected f32, found integer\n+   |            expected `f32`, found integer\n    |            help: use a float literal: `5.0`\n \n error[E0308]: mismatched types\n@@ -49,7 +49,7 @@ error[E0308]: mismatched types\n LL |         x: 7,\n    |            ^\n    |            |\n-   |            expected f32, found integer\n+   |            expected `f32`, found integer\n    |            help: use a float literal: `7.0`\n \n error[E0107]: wrong number of type arguments: expected 0, found 1\n@@ -64,7 +64,7 @@ error[E0308]: mismatched types\n LL |         x: 9,\n    |            ^\n    |            |\n-   |            expected f32, found integer\n+   |            expected `f32`, found integer\n    |            help: use a float literal: `9.0`\n \n error[E0308]: mismatched types\n@@ -73,7 +73,7 @@ error[E0308]: mismatched types\n LL |         y: 10,\n    |            ^^\n    |            |\n-   |            expected f32, found integer\n+   |            expected `f32`, found integer\n    |            help: use a float literal: `10.0`\n \n error[E0107]: wrong number of type arguments: expected 0, found 1\n@@ -88,7 +88,7 @@ error[E0308]: mismatched types\n LL |     match (Point { x: 1, y: 2 }) {\n    |           ---------------------- this match expression has type `Point<{integer}>`\n LL |         PointF::<u32> { .. } => {}\n-   |         ^^^^^^^^^^^^^^^^^^^^ expected integer, found f32\n+   |         ^^^^^^^^^^^^^^^^^^^^ expected integer, found `f32`\n    |\n    = note: expected struct `Point<{integer}>`\n               found struct `Point<f32>`\n@@ -99,7 +99,7 @@ error[E0308]: mismatched types\n LL |     match (Point { x: 1, y: 2 }) {\n    |           ---------------------- this match expression has type `Point<{integer}>`\n LL |         PointF { .. } => {}\n-   |         ^^^^^^^^^^^^^ expected integer, found f32\n+   |         ^^^^^^^^^^^^^ expected integer, found `f32`\n    |\n    = note: expected struct `Point<{integer}>`\n               found struct `Point<f32>`\n@@ -110,7 +110,7 @@ error[E0308]: mismatched types\n LL |     match (Pair { x: 1, y: 2 }) {\n    |           --------------------- this match expression has type `Pair<{integer}, {integer}>`\n LL |         PairF::<u32> { .. } => {}\n-   |         ^^^^^^^^^^^^^^^^^^^ expected integer, found f32\n+   |         ^^^^^^^^^^^^^^^^^^^ expected integer, found `f32`\n    |\n    = note: expected struct `Pair<{integer}, {integer}>`\n               found struct `Pair<f32, u32>`"}, {"sha": "8a233105491e5e2f2972ec719017b3ccb1a0b59f", "filename": "src/test/ui/substs-ppaux.normal.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -7,7 +7,7 @@ LL |     fn bar<'a, T>() where T: 'a {}\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                 |\n-   |                 expected (), found fn item\n+   |                 expected `()`, found fn item\n    |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>()`\n    |\n    = note: expected unit type `()`\n@@ -22,7 +22,7 @@ LL |     fn bar<'a, T>() where T: 'a {}\n LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                 |\n-   |                 expected (), found fn item\n+   |                 expected `()`, found fn item\n    |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>()`\n    |\n    = note: expected unit type `()`\n@@ -37,7 +37,7 @@ LL |     fn baz() {}\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                 |\n-   |                 expected (), found fn item\n+   |                 expected `()`, found fn item\n    |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::baz()`\n    |\n    = note: expected unit type `()`\n@@ -52,7 +52,7 @@ LL | fn foo<'z>() where &'z (): Sized {\n LL |     let x: () = foo::<'static>;\n    |                 ^^^^^^^^^^^^^^\n    |                 |\n-   |                 expected (), found fn item\n+   |                 expected `()`, found fn item\n    |                 help: use parentheses to call this function: `foo::<'static>()`\n    |\n    = note: expected unit type `()`"}, {"sha": "ab70d02e1578a7c157b449aabb19976ee3272fb2", "filename": "src/test/ui/substs-ppaux.verbose.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -7,7 +7,7 @@ LL |     fn bar<'a, T>() where T: 'a {}\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                 |\n-   |                 expected (), found fn item\n+   |                 expected `()`, found fn item\n    |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>()`\n    |\n    = note: expected unit type `()`\n@@ -22,7 +22,7 @@ LL |     fn bar<'a, T>() where T: 'a {}\n LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                 |\n-   |                 expected (), found fn item\n+   |                 expected `()`, found fn item\n    |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>()`\n    |\n    = note: expected unit type `()`\n@@ -37,7 +37,7 @@ LL |     fn baz() {}\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                 |\n-   |                 expected (), found fn item\n+   |                 expected `()`, found fn item\n    |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::baz()`\n    |\n    = note: expected unit type `()`\n@@ -52,7 +52,7 @@ LL | fn foo<'z>() where &'z (): Sized {\n LL |     let x: () = foo::<'static>;\n    |                 ^^^^^^^^^^^^^^\n    |                 |\n-   |                 expected (), found fn item\n+   |                 expected `()`, found fn item\n    |                 help: use parentheses to call this function: `foo::<'static>()`\n    |\n    = note: expected unit type `()`"}, {"sha": "1cc63f5c476db0cc8a89c7344339f84d18195650", "filename": "src/test/ui/suggestions/as-ref.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8f70624b99460481af25764b9e02d2c67b42c5/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr?ref=6f8f70624b99460481af25764b9e02d2c67b42c5", "patch": "@@ -2,31 +2,31 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:6:27\n    |\n LL |   opt.map(|arg| takes_ref(arg));\n-   |       ---                 ^^^ expected &Foo, found struct `Foo`\n+   |       ---                 ^^^ expected `&Foo`, found struct `Foo`\n    |       |\n    |       help: consider using `as_ref` instead: `as_ref().map`\n \n error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:8:37\n    |\n LL |   opt.and_then(|arg| Some(takes_ref(arg)));\n-   |       --------                      ^^^ expected &Foo, found struct `Foo`\n+   |       --------                      ^^^ expected `&Foo`, found struct `Foo`\n    |       |\n    |       help: consider using `as_ref` instead: `as_ref().and_then`\n \n error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:11:27\n    |\n LL |   opt.map(|arg| takes_ref(arg));\n-   |       ---                 ^^^ expected &Foo, found struct `Foo`\n+   |       ---                 ^^^ expected `&Foo`, found struct `Foo`\n    |       |\n    |       help: consider using `as_ref` instead: `as_ref().map`\n \n error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:13:35\n    |\n LL |   opt.and_then(|arg| Ok(takes_ref(arg)));\n-   |       --------                    ^^^ expected &Foo, found struct `Foo`\n+   |       --------                    ^^^ expected `&Foo`, found struct `Foo`\n    |       |\n    |       help: consider using `as_ref` instead: `as_ref().and_then`\n "}]}