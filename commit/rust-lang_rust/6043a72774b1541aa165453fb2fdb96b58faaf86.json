{"sha": "6043a72774b1541aa165453fb2fdb96b58faaf86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNDNhNzI3NzRiMTU0MWFhMTY1NDUzZmIyZmRiOTZiNThmYWFmODY=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2012-12-31T04:23:29Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-01-05T08:24:38Z"}, "message": "Make consts of degenerate nullary enums not ICE.\n\nThis makes the const construction code match the logic in type_of.", "tree": {"sha": "f5c0092afbce7e29da0cae5bb65a470811bcc8f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5c0092afbce7e29da0cae5bb65a470811bcc8f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6043a72774b1541aa165453fb2fdb96b58faaf86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6043a72774b1541aa165453fb2fdb96b58faaf86", "html_url": "https://github.com/rust-lang/rust/commit/6043a72774b1541aa165453fb2fdb96b58faaf86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6043a72774b1541aa165453fb2fdb96b58faaf86/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b245d46ed5fc93d3251e9e07f50e9b09b1f42c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b245d46ed5fc93d3251e9e07f50e9b09b1f42c4", "html_url": "https://github.com/rust-lang/rust/commit/7b245d46ed5fc93d3251e9e07f50e9b09b1f42c4"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "2d0ac47fd777b5363fa86c6afa556cecbd5767dd", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6043a72774b1541aa165453fb2fdb96b58faaf86/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6043a72774b1541aa165453fb2fdb96b58faaf86/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=6043a72774b1541aa165453fb2fdb96b58faaf86", "patch": "@@ -398,7 +398,6 @@ fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n                 // forbids paths that don't map to C-like enum variants.\n                 let ety = ty::expr_ty(cx.tcx, e);\n                 let llty = type_of::type_of(cx, ety);\n-                let llstructtys = lib::llvm::struct_element_types(llty);\n \n                 // Can't use `discrims` from the crate context here because\n                 // those discriminants have an extra level of indirection,\n@@ -422,8 +421,14 @@ fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n                         lldiscrim = found_lldiscrim;\n                     }\n                 }\n+                let fields = if ty::enum_is_univariant(cx.tcx, enum_did) {\n+                    ~[lldiscrim]\n+                } else {\n+                    let llstructtys = lib::llvm::struct_element_types(llty);\n+                    ~[lldiscrim, C_null(llstructtys[1])]\n+                };\n \n-                C_named_struct(llty, ~[ lldiscrim, C_null(llstructtys[1]) ])\n+                C_named_struct(llty, fields)\n             }\n             Some(ast::def_struct(_)) => {\n                 let ety = ty::expr_ty(cx.tcx, e);"}]}