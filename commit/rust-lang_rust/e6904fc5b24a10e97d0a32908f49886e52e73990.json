{"sha": "e6904fc5b24a10e97d0a32908f49886e52e73990", "node_id": "C_kwDOAAsO6NoAKGU2OTA0ZmM1YjI0YTEwZTk3ZDBhMzI5MDhmNDk4ODZlNTJlNzM5OTA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-19T11:30:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-19T11:30:52Z"}, "message": "Rollup merge of #99457 - SparrowLii:para_iter, r=fee1-dead\n\nuse `par_for_each_in` in `par_body_owners` and `collect_crate_mono_items`\n\nUsing `par_iter` in non-parallel mode will cause the entire process to abort when any iteration panics.  So we can use `par_for_each_in` instead to make the error message consistent with parallel mode. This means that the compiler will output more error messages in some cases. This fixes the following ui tests when set `parallel-compiler = true`:\n```\n    [ui] src/test\\ui\\privacy\\privacy2.rs\n    [ui] src/test\\ui\\privacy\\privacy3.rs\n    [ui] src/test\\ui\\type_length_limit.rs\n```\n\nThis refers to #68171\n\nUpdates #75760", "tree": {"sha": "1447d09895921da9f27af3f9bbcfee41a11e4b2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1447d09895921da9f27af3f9bbcfee41a11e4b2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6904fc5b24a10e97d0a32908f49886e52e73990", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi1pXtCRBK7hj4Ov3rIwAA2hsIAKVkYPKQzNzHc8qXHjg9yXOx\ns0M+royeACf5hWMTzZRr4r/nolP2oNm5Qdp6A9lkv/TZglaqhPwszCbZOjR2LkSG\nAyoecQNXo6I6cf/vdwFMOwNOTAyqI9I5THxLg1cBtq/eQjPMh9x+zrQPA7HuoKie\nWKHZmJKyE4shvAy9n+YfTiokGgqKjHYYZCCm9EUV98UGqCHaShVHM2YYCnO2SuE5\nUdobOe4l1lsus1Jolj7ib+6AYkvrnAFgn507Kv1hcsNXLNTXDdoZH5q/VykK4Xce\nNO/5ZXsFzsB4sO+Ic12fhP0I8Bvj/+N5JiI30hPQNbqsAZ3F6eDZLzqdx7Sv0jQ=\n=UfAj\n-----END PGP SIGNATURE-----\n", "payload": "tree 1447d09895921da9f27af3f9bbcfee41a11e4b2a\nparent ae90a8f2e148f1fd1e0e907912d274224215cb12\nparent e2ecb68a0eeee6db4d8f605374e656822186f8b4\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1658230252 +0200\ncommitter GitHub <noreply@github.com> 1658230252 +0200\n\nRollup merge of #99457 - SparrowLii:para_iter, r=fee1-dead\n\nuse `par_for_each_in` in `par_body_owners` and `collect_crate_mono_items`\n\nUsing `par_iter` in non-parallel mode will cause the entire process to abort when any iteration panics.  So we can use `par_for_each_in` instead to make the error message consistent with parallel mode. This means that the compiler will output more error messages in some cases. This fixes the following ui tests when set `parallel-compiler = true`:\n```\n    [ui] src/test\\ui\\privacy\\privacy2.rs\n    [ui] src/test\\ui\\privacy\\privacy3.rs\n    [ui] src/test\\ui\\type_length_limit.rs\n```\n\nThis refers to #68171\n\nUpdates #75760\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6904fc5b24a10e97d0a32908f49886e52e73990", "html_url": "https://github.com/rust-lang/rust/commit/e6904fc5b24a10e97d0a32908f49886e52e73990", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6904fc5b24a10e97d0a32908f49886e52e73990/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae90a8f2e148f1fd1e0e907912d274224215cb12", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae90a8f2e148f1fd1e0e907912d274224215cb12", "html_url": "https://github.com/rust-lang/rust/commit/ae90a8f2e148f1fd1e0e907912d274224215cb12"}, {"sha": "e2ecb68a0eeee6db4d8f605374e656822186f8b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2ecb68a0eeee6db4d8f605374e656822186f8b4", "html_url": "https://github.com/rust-lang/rust/commit/e2ecb68a0eeee6db4d8f605374e656822186f8b4"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "52952a7932dbc08b12616a4941983af29d2f68d5", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6904fc5b24a10e97d0a32908f49886e52e73990/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6904fc5b24a10e97d0a32908f49886e52e73990/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=e6904fc5b24a10e97d0a32908f49886e52e73990", "patch": "@@ -146,7 +146,7 @@ cfg_if! {\n             t.into_iter()\n         }\n \n-        pub fn par_for_each_in<T: IntoIterator>(t: T, for_each: impl Fn(T::Item) + Sync + Send) {\n+        pub fn par_for_each_in<T: IntoIterator>(t: T, mut for_each: impl FnMut(T::Item) + Sync + Send) {\n             // We catch panics here ensuring that all the loop iterations execute.\n             // This makes behavior consistent with the parallel compiler.\n             let mut panic = None;"}, {"sha": "0001e1aa53efcc220b649c79951340cf373cdb56", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6904fc5b24a10e97d0a32908f49886e52e73990/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6904fc5b24a10e97d0a32908f49886e52e73990/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=e6904fc5b24a10e97d0a32908f49886e52e73990", "patch": "@@ -491,9 +491,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {\n-        use rustc_data_structures::sync::{par_iter, ParallelIterator};\n-\n-        par_iter(&self.tcx.hir_crate_items(()).body_owners[..]).for_each(|&def_id| f(def_id));\n+        par_for_each_in(&self.tcx.hir_crate_items(()).body_owners[..], |&def_id| f(def_id));\n     }\n \n     pub fn ty_param_owner(self, def_id: LocalDefId) -> LocalDefId {"}, {"sha": "e3cfb034e40ad3412760b2bff9d33f9ab35bf0ff", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6904fc5b24a10e97d0a32908f49886e52e73990/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6904fc5b24a10e97d0a32908f49886e52e73990/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=e6904fc5b24a10e97d0a32908f49886e52e73990", "patch": "@@ -180,7 +180,7 @@\n //! regardless of whether it is actually needed or not.\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_data_structures::sync::{par_iter, MTLock, MTRef, ParallelIterator};\n+use rustc_data_structures::sync::{par_for_each_in, MTLock, MTRef};\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId};\n@@ -346,7 +346,7 @@ pub fn collect_crate_mono_items(\n         let inlining_map: MTRef<'_, _> = &mut inlining_map;\n \n         tcx.sess.time(\"monomorphization_collector_graph_walk\", || {\n-            par_iter(roots).for_each(|root| {\n+            par_for_each_in(roots, |root| {\n                 let mut recursion_depths = DefIdMap::default();\n                 collect_items_rec(\n                     tcx,"}, {"sha": "882f314655d8377092265a0880836e1b97bc67f3", "filename": "src/test/ui/privacy/privacy2.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e6904fc5b24a10e97d0a32908f49886e52e73990/src%2Ftest%2Fui%2Fprivacy%2Fprivacy2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6904fc5b24a10e97d0a32908f49886e52e73990/src%2Ftest%2Fui%2Fprivacy%2Fprivacy2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy2.stderr?ref=e6904fc5b24a10e97d0a32908f49886e52e73990", "patch": "@@ -23,7 +23,13 @@ LL | pub fn foo() {}\n \n error: requires `sized` lang_item\n \n-error: aborting due to 3 previous errors\n+error: requires `sized` lang_item\n+\n+error: requires `sized` lang_item\n+\n+error: requires `sized` lang_item\n+\n+error: aborting due to 6 previous errors\n \n Some errors have detailed explanations: E0432, E0603.\n For more information about an error, try `rustc --explain E0432`."}, {"sha": "42ce456d962a1562bf81db8b1762099e74059a95", "filename": "src/test/ui/privacy/privacy3.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e6904fc5b24a10e97d0a32908f49886e52e73990/src%2Ftest%2Fui%2Fprivacy%2Fprivacy3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6904fc5b24a10e97d0a32908f49886e52e73990/src%2Ftest%2Fui%2Fprivacy%2Fprivacy3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy3.stderr?ref=e6904fc5b24a10e97d0a32908f49886e52e73990", "patch": "@@ -6,6 +6,12 @@ LL |     use bar::gpriv;\n \n error: requires `sized` lang_item\n \n-error: aborting due to 2 previous errors\n+error: requires `sized` lang_item\n+\n+error: requires `sized` lang_item\n+\n+error: requires `sized` lang_item\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0432`."}, {"sha": "1508b84c1b6e74fe36bd80e8847103bdc4e3325a", "filename": "src/test/ui/type_length_limit.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e6904fc5b24a10e97d0a32908f49886e52e73990/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6904fc5b24a10e97d0a32908f49886e52e73990/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.stderr?ref=e6904fc5b24a10e97d0a32908f49886e52e73990", "patch": "@@ -7,5 +7,14 @@ LL | pub fn drop<T>(_x: T) {}\n    = note: the full type name has been written to '$TEST_BUILD_DIR/type_length_limit/type_length_limit.long-type.txt'\n    = help: consider adding a `#![type_length_limit=\"8\"]` attribute to your crate\n \n-error: aborting due to previous error\n+error: reached the type-length limit while instantiating `<[closure@std::rt::lang_start<()...e<()>>::call_once - shim(vtable)`\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n+   |\n+LL |     extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/type_length_limit/type_length_limit.long-type.txt'\n+   = help: consider adding a `#![type_length_limit=\"8\"]` attribute to your crate\n+\n+error: aborting due to 2 previous errors\n "}]}