{"sha": "0054efc412d8f8a1e08840a5ea2146c799501d91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwNTRlZmM0MTJkOGY4YTFlMDg4NDBhNWVhMjE0NmM3OTk1MDFkOTE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-08T18:56:55Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-08T18:57:40Z"}, "message": "rustc: Store the number of type parameters per item, which will be needed to get unused type params working", "tree": {"sha": "54eb12c03790afa5856c9fa7145239f31900514a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54eb12c03790afa5856c9fa7145239f31900514a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0054efc412d8f8a1e08840a5ea2146c799501d91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0054efc412d8f8a1e08840a5ea2146c799501d91", "html_url": "https://github.com/rust-lang/rust/commit/0054efc412d8f8a1e08840a5ea2146c799501d91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0054efc412d8f8a1e08840a5ea2146c799501d91/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aabe7e84fd329133909ee4ec66c88df74e06f78", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aabe7e84fd329133909ee4ec66c88df74e06f78", "html_url": "https://github.com/rust-lang/rust/commit/5aabe7e84fd329133909ee4ec66c88df74e06f78"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "ec04d684e09dda7a2a652e610351801b09654565", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0054efc412d8f8a1e08840a5ea2146c799501d91/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0054efc412d8f8a1e08840a5ea2146c799501d91/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=0054efc412d8f8a1e08840a5ea2146c799501d91", "patch": "@@ -39,10 +39,12 @@ tag any_item {\n }\n \n type ty_item_table = hashmap[ast.def_id,any_item];\n+type ty_param_count_table = hashmap[ast.def_id,uint];\n \n type crate_ctxt = rec(session.session sess,\n                       @ty_table item_types,\n                       @ty_item_table item_items,\n+                      @ty_param_count_table ty_param_counts,\n                       vec[ast.obj_field] obj_fields,\n                       mutable int next_var_id);\n \n@@ -356,7 +358,7 @@ fn ty_of_native_fn_decl(@ty_item_table id_to_ty_item,\n }\n \n fn collect_item_types(session.session sess, @ast.crate crate)\n-    -> tup(@ast.crate, @ty_table, @ty_item_table) {\n+    -> tup(@ast.crate, @ty_table, @ty_item_table, @ty_param_count_table) {\n \n     fn getter(@ty_item_table id_to_ty_item,\n               @ty_table item_to_ty,\n@@ -600,14 +602,17 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n \n     // Second pass: translate the types of all items.\n     let @ty_table item_to_ty = @common.new_def_hash[@ty.t]();\n+    let @ty_param_count_table ty_param_counts = @common.new_def_hash[uint]();\n \n     type env = rec(session.session sess,\n                    @ty_item_table id_to_ty_item,\n                    @ty_table item_to_ty,\n+                   @ty_param_count_table ty_param_counts,\n                    ast.native_abi abi);\n     let @env e = @rec(sess=sess,\n                       id_to_ty_item=id_to_ty_item,\n                       item_to_ty=item_to_ty,\n+                      ty_param_counts=ty_param_counts,\n                       abi=ast.native_abi_cdecl);\n \n     fn convert(&@env e, @ast.item i) -> @env {\n@@ -647,6 +652,8 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n     fn fold_item_fn(&@env e, &span sp, ast.ident i,\n                     &ast._fn f, vec[ast.ty_param] ty_params,\n                     ast.def_id id, ast.ann a) -> @ast.item {\n+        e.ty_param_counts.insert(id, _vec.len[ast.ty_param](ty_params));\n+\n         check (e.item_to_ty.contains_key(id));\n         auto ty = e.item_to_ty.get(id);\n         auto item = ast.item_fn(i, f, ty_params, id,\n@@ -657,6 +664,8 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n     fn fold_native_item_fn(&@env e, &span sp, ast.ident i,\n                            &ast.fn_decl d, vec[ast.ty_param] ty_params,\n                            ast.def_id id, ast.ann a) -> @ast.native_item {\n+        e.ty_param_counts.insert(id, _vec.len[ast.ty_param](ty_params));\n+\n         check (e.item_to_ty.contains_key(id));\n         auto ty = e.item_to_ty.get(id);\n         auto item = ast.native_item_fn(i, d, ty_params, id,\n@@ -688,6 +697,8 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n     fn fold_item_obj(&@env e, &span sp, ast.ident i,\n                     &ast._obj ob, vec[ast.ty_param] ty_params,\n                     ast.def_id id, ast.ann a) -> @ast.item {\n+        e.ty_param_counts.insert(id, _vec.len[ast.ty_param](ty_params));\n+\n         check (e.item_to_ty.contains_key(id));\n         auto t = e.item_to_ty.get(id);\n         let vec[method] meth_tys = get_ctor_obj_methods(t);\n@@ -726,6 +737,8 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n     fn fold_item_ty(&@env e, &span sp, ast.ident i,\n                     @ast.ty t, vec[ast.ty_param] ty_params,\n                     ast.def_id id, ast.ann a) -> @ast.item {\n+        e.ty_param_counts.insert(id, _vec.len[ast.ty_param](ty_params));\n+\n         check (e.item_to_ty.contains_key(id));\n         auto ty = e.item_to_ty.get(id);\n         auto item = ast.item_ty(i, t, ty_params, id,\n@@ -737,6 +750,8 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n                      vec[ast.variant] variants,\n                      vec[ast.ty_param] ty_params,\n                      ast.def_id id) -> @ast.item {\n+        e.ty_param_counts.insert(id, _vec.len[ast.ty_param](ty_params));\n+\n         auto variants_t = get_tag_variant_types(e.id_to_ty_item,\n                                                 e.item_to_ty,\n                                                 id,\n@@ -758,7 +773,7 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n              fold_item_tag   = bind fold_item_tag(_,_,_,_,_,_)\n              with *fld_2);\n     auto crate_ = fold.fold_crate[@env](e, fld_2, crate);\n-    ret tup(crate_, item_to_ty, id_to_ty_item);\n+    ret tup(crate_, item_to_ty, id_to_ty_item, ty_param_counts);\n }\n \n fn unify(&@fn_ctxt fcx, @ty.t expected, @ty.t actual) -> ty.unify_result {\n@@ -2255,6 +2270,7 @@ fn check_crate(session.session sess, @ast.crate crate) -> @ast.crate {\n     auto ccx = @rec(sess=sess,\n                     item_types=result._1,\n                     item_items=result._2,\n+                    ty_param_counts=result._3,\n                     obj_fields=fields,\n                     mutable next_var_id=0);\n "}]}