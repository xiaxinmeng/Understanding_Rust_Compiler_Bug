{"sha": "0082fc0ad4d9f8c1cbac7326be2db01f866bfef1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwODJmYzBhZDRkOWY4YzFjYmFjNzMyNmJlMmRiMDFmODY2YmZlZjE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-06T09:01:09Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-18T14:11:35Z"}, "message": "change svh to store a u64\n\nWe used to store a u64 converted to a String for some reason. Now we\ndon't.", "tree": {"sha": "4cfe57ee498fb068533b6d6885af1a20f2ad2f72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cfe57ee498fb068533b6d6885af1a20f2ad2f72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0082fc0ad4d9f8c1cbac7326be2db01f866bfef1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0082fc0ad4d9f8c1cbac7326be2db01f866bfef1", "html_url": "https://github.com/rust-lang/rust/commit/0082fc0ad4d9f8c1cbac7326be2db01f866bfef1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0082fc0ad4d9f8c1cbac7326be2db01f866bfef1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08837d2975d5c642a4e625501ef452f43e217dc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/08837d2975d5c642a4e625501ef452f43e217dc6", "html_url": "https://github.com/rust-lang/rust/commit/08837d2975d5c642a4e625501ef452f43e217dc6"}], "stats": {"total": 93, "additions": 38, "deletions": 55}, "files": [{"sha": "f0294ad633ad2060f1698f650cd2dab1a5652878", "filename": "src/librustc/hir/svh.rs", "status": "modified", "additions": 21, "deletions": 45, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/0082fc0ad4d9f8c1cbac7326be2db01f866bfef1/src%2Flibrustc%2Fhir%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0082fc0ad4d9f8c1cbac7326be2db01f866bfef1/src%2Flibrustc%2Fhir%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fsvh.rs?ref=0082fc0ad4d9f8c1cbac7326be2db01f866bfef1", "patch": "@@ -10,60 +10,34 @@\n \n //! Calculation and management of a Strict Version Hash for crates\n //!\n-//! # Today's ABI problem\n-//!\n-//! In today's implementation of rustc, it is incredibly difficult to achieve\n-//! forward binary compatibility without resorting to C-like interfaces. Within\n-//! rust code itself, abi details such as symbol names suffer from a variety of\n-//! unrelated factors to code changing such as the \"def id drift\" problem. This\n-//! ends up yielding confusing error messages about metadata mismatches and\n-//! such.\n-//!\n-//! The core of this problem is when an upstream dependency changes and\n-//! downstream dependents are not recompiled. This causes compile errors because\n-//! the upstream crate's metadata has changed but the downstream crates are\n-//! still referencing the older crate's metadata.\n-//!\n-//! This problem exists for many reasons, the primary of which is that rust does\n-//! not currently support forwards ABI compatibility (in place upgrades of a\n-//! crate).\n-//!\n-//! # SVH and how it alleviates the problem\n-//!\n-//! With all of this knowledge on hand, this module contains the implementation\n-//! of a notion of a \"Strict Version Hash\" for a crate. This is essentially a\n-//! hash of all contents of a crate which can somehow be exposed to downstream\n-//! crates.\n-//!\n-//! This hash is currently calculated by just hashing the AST, but this is\n-//! obviously wrong (doc changes should not result in an incompatible ABI).\n-//! Implementation-wise, this is required at this moment in time.\n-//!\n-//! By encoding this strict version hash into all crate's metadata, stale crates\n-//! can be detected immediately and error'd about by rustc itself.\n-//!\n-//! # Relevant links\n-//!\n-//! Original issue: https://github.com/rust-lang/rust/issues/10207\n+//! The SVH is used for incremental compilation to track when HIR\n+//! nodes have changed between compilations, and also to detect\n+//! mismatches where we have two versions of the same crate that were\n+//! compiled from distinct sources.\n \n use std::fmt;\n+use std::hash::{Hash, Hasher};\n \n-#[derive(Clone, Eq, Hash, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub struct Svh {\n-    hash: String,\n+    hash: u64,\n }\n \n impl Svh {\n     /// Create a new `Svh` given the hash. If you actually want to\n     /// compute the SVH from some HIR, you want the `calculate_svh`\n-    /// function found in `librustc_trans`.\n-    pub fn new(hash: String) -> Svh {\n-        assert!(hash.len() == 16);\n+    /// function found in `librustc_incremental`.\n+    pub fn new(hash: u64) -> Svh {\n         Svh { hash: hash }\n     }\n \n-    pub fn from_hash(hash: u64) -> Svh {\n-        return Svh::new((0..64).step_by(4).map(|i| hex(hash >> i)).collect());\n+    pub fn as_u64(&self) -> u64 {\n+        self.hash\n+    }\n+\n+    pub fn to_string(&self) -> String {\n+        let hash = self.hash;\n+        return (0..64).step_by(4).map(|i| hex(hash >> i)).collect();\n \n         fn hex(b: u64) -> char {\n             let b = (b & 0xf) as u8;\n@@ -74,14 +48,16 @@ impl Svh {\n             b as char\n         }\n     }\n+}\n \n-    pub fn as_str<'a>(&'a self) -> &'a str {\n-        &self.hash\n+impl Hash for Svh {\n+    fn hash<H>(&self, state: &mut H) where H: Hasher {\n+        self.hash.to_le().hash(state);\n     }\n }\n \n impl fmt::Display for Svh {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.pad(self.as_str())\n+        f.pad(&self.to_string())\n     }\n }"}, {"sha": "4f6188ea3c51f5936006f79a9ae689e3f542047d", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0082fc0ad4d9f8c1cbac7326be2db01f866bfef1/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0082fc0ad4d9f8c1cbac7326be2db01f866bfef1/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=0082fc0ad4d9f8c1cbac7326be2db01f866bfef1", "patch": "@@ -368,7 +368,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 } else {\n                     tcx.sess.cstore.crate_hash(did.krate)\n                 };\n-                h.as_str().hash(state);\n+                h.hash(state);\n                 did.index.hash(state);\n             };\n             let mt = |state: &mut SipHasher, mt: TypeAndMut| {"}, {"sha": "24ecce1148745428ce56ba0feb22a4cd91e15ba3", "filename": "src/librustc_incremental/calculate_svh.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0082fc0ad4d9f8c1cbac7326be2db01f866bfef1/src%2Flibrustc_incremental%2Fcalculate_svh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0082fc0ad4d9f8c1cbac7326be2db01f866bfef1/src%2Flibrustc_incremental%2Fcalculate_svh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh.rs?ref=0082fc0ad4d9f8c1cbac7326be2db01f866bfef1", "patch": "@@ -72,12 +72,14 @@ impl<'a, 'tcx> SvhCalculate for TyCtxt<'a, 'tcx, 'tcx> {\n             attr.node.value.hash(&mut state);\n         }\n \n-        Svh::from_hash(state.finish())\n+        Svh::new(state.finish())\n     }\n \n     fn calculate_item_hash(self, def_id: DefId) -> u64 {\n         assert!(def_id.is_local());\n \n+        debug!(\"calculate_item_hash(def_id={:?})\", def_id);\n+\n         let mut state = SipHasher::new();\n \n         {\n@@ -89,11 +91,16 @@ impl<'a, 'tcx> SvhCalculate for TyCtxt<'a, 'tcx, 'tcx> {\n                 intravisit::walk_crate(&mut visit, krate);\n             } else {\n                 let node_id = self.map.as_local_node_id(def_id).unwrap();\n-                visit.visit_item(self.map.expect_item(node_id));\n+                let item = self.map.expect_item(node_id);\n+                visit.visit_item(item);\n             }\n         }\n \n-        state.finish()\n+        let hash = state.finish();\n+\n+        debug!(\"calculate_item_hash: def_id={:?} hash={:?}\", def_id, hash);\n+\n+        hash\n     }\n }\n "}, {"sha": "5e4c9f39e35f7ecccb0b19af96f6038a3d6637a9", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0082fc0ad4d9f8c1cbac7326be2db01f866bfef1/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0082fc0ad4d9f8c1cbac7326be2db01f866bfef1/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=0082fc0ad4d9f8c1cbac7326be2db01f866bfef1", "patch": "@@ -1251,7 +1251,7 @@ pub fn get_crate_deps(data: &[u8]) -> Vec<CrateDep> {\n \n     reader::tagged_docs(depsdoc, tag_crate_dep).enumerate().map(|(crate_num, depdoc)| {\n         let name = docstr(depdoc, tag_crate_dep_crate_name);\n-        let hash = Svh::new(docstr(depdoc, tag_crate_dep_hash));\n+        let hash = Svh::new(reader::doc_as_u64(reader::get_doc(depdoc, tag_crate_dep_hash)));\n         let doc = reader::get_doc(depdoc, tag_crate_dep_explicitly_linked);\n         let explicitly_linked = reader::doc_as_u8(doc) != 0;\n         CrateDep {\n@@ -1275,14 +1275,14 @@ fn list_crate_deps(data: &[u8], out: &mut io::Write) -> io::Result<()> {\n pub fn maybe_get_crate_hash(data: &[u8]) -> Option<Svh> {\n     let cratedoc = rbml::Doc::new(data);\n     reader::maybe_get_doc(cratedoc, tag_crate_hash).map(|doc| {\n-        Svh::new(doc.as_str_slice().to_string())\n+        Svh::new(reader::doc_as_u64(doc))\n     })\n }\n \n pub fn get_crate_hash(data: &[u8]) -> Svh {\n     let cratedoc = rbml::Doc::new(data);\n     let hashdoc = reader::get_doc(cratedoc, tag_crate_hash);\n-    Svh::new(hashdoc.as_str_slice().to_string())\n+    Svh::new(reader::doc_as_u64(hashdoc))\n }\n \n pub fn maybe_get_crate_name(data: &[u8]) -> Option<&str> {"}, {"sha": "928601095b078055ad0c809f3d598c3af4ea6589", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0082fc0ad4d9f8c1cbac7326be2db01f866bfef1/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0082fc0ad4d9f8c1cbac7326be2db01f866bfef1/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=0082fc0ad4d9f8c1cbac7326be2db01f866bfef1", "patch": "@@ -1793,14 +1793,14 @@ fn encode_crate_dep(rbml_w: &mut Encoder,\n     rbml_w.start_tag(tag_crate_dep);\n     rbml_w.wr_tagged_str(tag_crate_dep_crate_name, &dep.name());\n     let hash = decoder::get_crate_hash(dep.data());\n-    rbml_w.wr_tagged_str(tag_crate_dep_hash, hash.as_str());\n+    rbml_w.wr_tagged_u64(tag_crate_dep_hash, hash.as_u64());\n     rbml_w.wr_tagged_u8(tag_crate_dep_explicitly_linked,\n                         dep.explicitly_linked.get() as u8);\n     rbml_w.end_tag();\n }\n \n fn encode_hash(rbml_w: &mut Encoder, hash: &Svh) {\n-    rbml_w.wr_tagged_str(tag_crate_hash, hash.as_str());\n+    rbml_w.wr_tagged_u64(tag_crate_hash, hash.as_u64());\n }\n \n fn encode_rustc_version(rbml_w: &mut Encoder) {"}, {"sha": "a5b1c3d301b1060a84ed3c9936100ebca790432c", "filename": "src/librustc_metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0082fc0ad4d9f8c1cbac7326be2db01f866bfef1/src%2Flibrustc_metadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0082fc0ad4d9f8c1cbac7326be2db01f866bfef1/src%2Flibrustc_metadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Floader.rs?ref=0082fc0ad4d9f8c1cbac7326be2db01f866bfef1", "patch": "@@ -620,7 +620,7 @@ impl<'a> Context<'a> {\n                 info!(\"Rejecting via hash: expected {} got {}\", *myhash, hash);\n                 self.rejected_via_hash.push(CrateMismatch {\n                     path: libpath.to_path_buf(),\n-                    got: myhash.as_str().to_string()\n+                    got: myhash.to_string()\n                 });\n                 return None;\n             }"}]}