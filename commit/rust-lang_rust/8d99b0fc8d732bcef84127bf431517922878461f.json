{"sha": "8d99b0fc8d732bcef84127bf431517922878461f", "node_id": "C_kwDOAAsO6NoAKDhkOTliMGZjOGQ3MzJiY2VmODQxMjdiZjQzMTUxNzkyMjg3ODQ2MWY", "commit": {"author": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2022-12-29T19:37:33Z"}, "committer": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2023-01-23T23:56:22Z"}, "message": "Abstract out has_back_edge fn", "tree": {"sha": "7c0a80227efc3089a7a538c6929d822679496ec1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c0a80227efc3089a7a538c6929d822679496ec1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d99b0fc8d732bcef84127bf431517922878461f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d99b0fc8d732bcef84127bf431517922878461f", "html_url": "https://github.com/rust-lang/rust/commit/8d99b0fc8d732bcef84127bf431517922878461f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d99b0fc8d732bcef84127bf431517922878461f/comments", "author": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "009beb00bcbaf5367937e50196d7d40d5d112068", "url": "https://api.github.com/repos/rust-lang/rust/commits/009beb00bcbaf5367937e50196d7d40d5d112068", "html_url": "https://github.com/rust-lang/rust/commit/009beb00bcbaf5367937e50196d7d40d5d112068"}], "stats": {"total": 51, "additions": 28, "deletions": 23}, "files": [{"sha": "1ff8b792dca36e5d80a3a811c197d02fd93cd708", "filename": "compiler/rustc_mir_transform/src/ctfe_limit.rs", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8d99b0fc8d732bcef84127bf431517922878461f/compiler%2Frustc_mir_transform%2Fsrc%2Fctfe_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d99b0fc8d732bcef84127bf431517922878461f/compiler%2Frustc_mir_transform%2Fsrc%2Fctfe_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fctfe_limit.rs?ref=8d99b0fc8d732bcef84127bf431517922878461f", "patch": "@@ -1,7 +1,7 @@\n use crate::MirPass;\n \n use rustc_middle::mir::{\n-    BasicBlock, BasicBlockData, Body, Statement, StatementKind, TerminatorKind,\n+    BasicBlock, BasicBlockData, BasicBlocks, Body, Statement, StatementKind, TerminatorKind,\n };\n use rustc_middle::ty::TyCtxt;\n \n@@ -10,29 +10,20 @@ pub struct CtfeLimit;\n impl<'tcx> MirPass<'tcx> for CtfeLimit {\n     #[instrument(skip(self, _tcx, body))]\n     fn run_pass(&self, _tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        let doms = body.basic_blocks.dominators();\n-        let indices: Vec<BasicBlock> =\n-            body.basic_blocks\n-                .iter_enumerated()\n-                .filter_map(|(node, node_data)| {\n-                    if matches!(node_data.terminator().kind, TerminatorKind::Call { .. }) ||\n+        let indices: Vec<BasicBlock> = body\n+            .basic_blocks\n+            .iter_enumerated()\n+            .filter_map(|(node, node_data)| {\n+                if matches!(node_data.terminator().kind, TerminatorKind::Call { .. })\n                     // Back edges in a CFG indicate loops\n-                    body.basic_blocks.iter_enumerated().any(|(potential_dom, _)| {\n-                        doms.is_reachable(potential_dom)\n-                            && doms.is_reachable(node)\n-                            && doms.is_dominated_by(node, potential_dom)\n-                            && node_data\n-                                .terminator()\n-                                .successors()\n-                                .into_iter()\n-                                .any(|succ| succ == potential_dom)\n-                    }) {\n-                        Some(node)\n-                    } else {\n-                        None\n-                    }\n-                })\n-                .collect();\n+                    || has_back_edge(&body.basic_blocks, node, &node_data)\n+                {\n+                    Some(node)\n+                } else {\n+                    None\n+                }\n+            })\n+            .collect();\n         for index in indices {\n             insert_counter(\n                 body.basic_blocks_mut()\n@@ -43,6 +34,20 @@ impl<'tcx> MirPass<'tcx> for CtfeLimit {\n     }\n }\n \n+fn has_back_edge(\n+    basic_blocks: &BasicBlocks<'_>,\n+    node: BasicBlock,\n+    node_data: &BasicBlockData<'_>,\n+) -> bool {\n+    let doms = basic_blocks.dominators();\n+    basic_blocks.indices().any(|potential_dom| {\n+        doms.is_reachable(potential_dom)\n+            && doms.is_reachable(node)\n+            && doms.is_dominated_by(node, potential_dom)\n+            && node_data.terminator().successors().into_iter().any(|succ| succ == potential_dom)\n+    })\n+}\n+\n fn insert_counter(basic_block_data: &mut BasicBlockData<'_>) {\n     basic_block_data.statements.push(Statement {\n         source_info: basic_block_data.terminator().source_info,"}]}