{"sha": "437329d3f5b7bb5b703b93c75a97d349eb77d6c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNzMyOWQzZjViN2JiNWI3MDNiOTNjNzVhOTdkMzQ5ZWI3N2Q2Yzc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-04T00:05:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-04T00:05:10Z"}, "message": "Merge #3429\n\n3429: Fix panic on eager expansion r=matklad a=edwin0cheng\n\nWhen lazy expanding inside an eager macro, its *parent* file of that lazy macro call must be already exists such that a panic is occurred because that parent file is the eager macro we are processing.\r\n\r\nThis PR fix this bug by store the argument syntax node as another eager macro id for that purpose.\r\n\r\nPersonally I don't know if it is a good answer for this bug. \r\n\r\n\r\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "a8f700a32ff4bb980c0eab738c04c00ba07ab69c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8f700a32ff4bb980c0eab738c04c00ba07ab69c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/437329d3f5b7bb5b703b93c75a97d349eb77d6c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeXvC2CRBK7hj4Ov3rIwAAdHIIAIdQA2Lyio9QMuUZLdi2EDCq\nXlfq+ZT46HIkMsY3RUya5dCEjzzk72XRanpJ6iSro0Kk4ONpqFyjQSo6FlugZbU9\nku5VAX/IrpSja+Il2ncy/EF6IkFD+zfaiCLHRu96JbjDRtdr5slneAkQDbZJTZzJ\nnCWP5j1dWuC4sL8E0XlIfEZpOVqyDjMI4wqiu/ZB9IIlv2JDSmwomeUzFEwtbKxs\nnE0OOR8bZHbRTXvUFh9Fk4Hyj4g+v00fKz5ds5JOtJ2UjVSLjOIWZMqAcokwNOcg\nJ94t4VMxcL3SZpP5C4Ldbog47TAe1lMrP04wRX39KIDGZqb3W2XWMu4xVBwZ5S4=\n=MaPa\n-----END PGP SIGNATURE-----\n", "payload": "tree a8f700a32ff4bb980c0eab738c04c00ba07ab69c\nparent ce69561be32421868e0f1ddb537f6f0a596d5610\nparent 5ea83fee010a26e86e962cfb8270fd2a565277b3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1583280310 +0000\ncommitter GitHub <noreply@github.com> 1583280310 +0000\n\nMerge #3429\n\n3429: Fix panic on eager expansion r=matklad a=edwin0cheng\n\nWhen lazy expanding inside an eager macro, its *parent* file of that lazy macro call must be already exists such that a panic is occurred because that parent file is the eager macro we are processing.\r\n\r\nThis PR fix this bug by store the argument syntax node as another eager macro id for that purpose.\r\n\r\nPersonally I don't know if it is a good answer for this bug. \r\n\r\n\r\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/437329d3f5b7bb5b703b93c75a97d349eb77d6c7", "html_url": "https://github.com/rust-lang/rust/commit/437329d3f5b7bb5b703b93c75a97d349eb77d6c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/437329d3f5b7bb5b703b93c75a97d349eb77d6c7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce69561be32421868e0f1ddb537f6f0a596d5610", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce69561be32421868e0f1ddb537f6f0a596d5610", "html_url": "https://github.com/rust-lang/rust/commit/ce69561be32421868e0f1ddb537f6f0a596d5610"}, {"sha": "5ea83fee010a26e86e962cfb8270fd2a565277b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ea83fee010a26e86e962cfb8270fd2a565277b3", "html_url": "https://github.com/rust-lang/rust/commit/5ea83fee010a26e86e962cfb8270fd2a565277b3"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "f95f37ede14810e2ae03b070be6588b2ada67491", "filename": "crates/ra_hir_expand/src/eager.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/437329d3f5b7bb5b703b93c75a97d349eb77d6c7/crates%2Fra_hir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437329d3f5b7bb5b703b93c75a97d349eb77d6c7/crates%2Fra_hir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Feager.rs?ref=437329d3f5b7bb5b703b93c75a97d349eb77d6c7", "patch": "@@ -37,9 +37,25 @@ pub fn expand_eager_macro(\n ) -> Option<EagerMacroId> {\n     let args = macro_call.value.token_tree()?;\n     let parsed_args = mbe::ast_to_token_tree(&args)?.0;\n-    let parsed_args = mbe::token_tree_to_syntax_node(&parsed_args, FragmentKind::Expr).ok()?.0;\n-    let result = eager_macro_recur(db, macro_call.with_value(parsed_args.syntax_node()), resolver)?;\n \n+    // Note:\n+    // When `lazy_expand` is called, its *parent* file must be already exists.\n+    // Here we store an eager macro id for the argument expanded subtree here\n+    // for that purpose.\n+    let arg_id: MacroCallId = db\n+        .intern_eager_expansion({\n+            EagerCallLoc {\n+                def,\n+                fragment: FragmentKind::Expr,\n+                subtree: Arc::new(parsed_args.clone()),\n+                file_id: macro_call.file_id,\n+            }\n+        })\n+        .into();\n+\n+    let parsed_args = mbe::token_tree_to_syntax_node(&parsed_args, FragmentKind::Expr).ok()?.0;\n+    let result =\n+        eager_macro_recur(db, InFile::new(arg_id.as_file(), parsed_args.syntax_node()), resolver)?;\n     let subtree = to_subtree(&result)?;\n \n     if let MacroDefKind::BuiltInEager(eager) = def.kind {"}, {"sha": "5d0efa0f40a61d3b7075fd3aff6e9698bdbb90ac", "filename": "crates/ra_hir_ty/src/tests/macros.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/437329d3f5b7bb5b703b93c75a97d349eb77d6c7/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437329d3f5b7bb5b703b93c75a97d349eb77d6c7/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=437329d3f5b7bb5b703b93c75a97d349eb77d6c7", "patch": "@@ -438,6 +438,27 @@ fn main() {\n     );\n }\n \n+#[test]\n+fn infer_builtin_macros_concat_with_lazy() {\n+    assert_snapshot!(\n+        infer(r#\"\n+macro_rules! hello {() => {\"hello\"}}\n+\n+#[rustc_builtin_macro]\n+macro_rules! concat {() => {}}\n+\n+fn main() {\n+    let x = concat!(hello!(), concat!(\"world\", \"!\"));\n+}\n+\"#),\n+        @r###\"\n+    ![0; 13) '\"helloworld!\"': &str\n+    [104; 161) '{     ...\")); }': ()\n+    [114; 115) 'x': &str\n+    \"###\n+    );\n+}\n+\n #[test]\n fn infer_derive_clone_simple() {\n     let (db, pos) = TestDB::with_position("}]}