{"sha": "7cb1dcd48802378929032ad9363c296891443d76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjYjFkY2Q0ODgwMjM3ODkyOTAzMmFkOTM2M2MyOTY4OTE0NDNkNzY=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-04-18T12:31:00Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-04-21T13:25:58Z"}, "message": "loosen ordering restricts for `const_generics_defaults`", "tree": {"sha": "0fb78ed8faec0c2cc2e3d47cb055115ba2cedf76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fb78ed8faec0c2cc2e3d47cb055115ba2cedf76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cb1dcd48802378929032ad9363c296891443d76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cb1dcd48802378929032ad9363c296891443d76", "html_url": "https://github.com/rust-lang/rust/commit/7cb1dcd48802378929032ad9363c296891443d76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cb1dcd48802378929032ad9363c296891443d76/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "259a368e9eae8e9952d18e211d2fe0a7e5fae714", "url": "https://api.github.com/repos/rust-lang/rust/commits/259a368e9eae8e9952d18e211d2fe0a7e5fae714", "html_url": "https://github.com/rust-lang/rust/commit/259a368e9eae8e9952d18e211d2fe0a7e5fae714"}], "stats": {"total": 226, "additions": 145, "deletions": 81}, "files": [{"sha": "e79392adf74b80535d1d0b5dded9b7d77e892d62", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -754,7 +754,7 @@ fn validate_generic_param_order(\n             GenericParamKind::Type { default: _ } => (ParamKindOrd::Type, ident),\n             GenericParamKind::Const { ref ty, kw_span: _, default: _ } => {\n                 let ty = pprust::ty_to_string(ty);\n-                let unordered = sess.features_untracked().const_generics;\n+                let unordered = sess.features_untracked().unordered_const_ty_params();\n                 (ParamKindOrd::Const { unordered }, Some(format!(\"const {}: {}\", param.ident, ty)))\n             }\n         };"}, {"sha": "80f237148c3d2c0f6831ad0135438382a40e4104", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -63,6 +63,10 @@ macro_rules! declare_features {\n                     _ => panic!(\"`{}` was not listed in `declare_features`\", feature),\n                 }\n             }\n+\n+            pub fn unordered_const_ty_params(&self) -> bool {\n+                self.const_generics || self.const_generics_defaults\n+            }\n         }\n     };\n }"}, {"sha": "a70be14546b4127bd46cd3aefb116f9e0b8fcb24", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -296,7 +296,9 @@ impl GenericArg<'_> {\n         match self {\n             GenericArg::Lifetime(_) => ast::ParamKindOrd::Lifetime,\n             GenericArg::Type(_) => ast::ParamKindOrd::Type,\n-            GenericArg::Const(_) => ast::ParamKindOrd::Const { unordered: feats.const_generics },\n+            GenericArg::Const(_) => {\n+                ast::ParamKindOrd::Const { unordered: feats.unordered_const_ty_params() }\n+            }\n         }\n     }\n }"}, {"sha": "c8fdbc30d1591cd2089819c1119da7557937d0e0", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -36,7 +36,7 @@ impl GenericParamDefKind {\n             GenericParamDefKind::Lifetime => ast::ParamKindOrd::Lifetime,\n             GenericParamDefKind::Type { .. } => ast::ParamKindOrd::Type,\n             GenericParamDefKind::Const { .. } => {\n-                ast::ParamKindOrd::Const { unordered: tcx.features().const_generics }\n+                ast::ParamKindOrd::Const { unordered: tcx.features().unordered_const_ty_params() }\n             }\n         }\n     }"}, {"sha": "2bbb38c294d5755587b49f2451aadfa973c481a0", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -286,7 +286,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                                         ParamKindOrd::Const {\n                                                             unordered: tcx\n                                                                 .features()\n-                                                                .const_generics,\n+                                                                .unordered_const_ty_params(),\n                                                         }\n                                                     }\n                                                 },\n@@ -309,7 +309,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                             GenericArg::Lifetime(_) => ParamKindOrd::Lifetime,\n                                             GenericArg::Type(_) => ParamKindOrd::Type,\n                                             GenericArg::Const(_) => ParamKindOrd::Const {\n-                                                unordered: tcx.features().const_generics,\n+                                                unordered: tcx\n+                                                    .features()\n+                                                    .unordered_const_ty_params(),\n                                             },\n                                         }),\n                                         Some(&format!("}, {"sha": "6514409698e3e6fda6c46dfd28083691563207f6", "filename": "src/test/ui/const-generics/defaults/auxiliary/const_defaulty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fauxiliary%2Fconst_defaulty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fauxiliary%2Fconst_defaulty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fauxiliary%2Fconst_defaulty.rs?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics)]\n+#![cfg_attr(full, feature(const_generics))]\n #![feature(const_generics_defaults)]\n #![allow(incomplete_features)]\n "}, {"sha": "c1444abbd3f32934fca12fd4aceab320a9710e3d", "filename": "src/test/ui/const-generics/defaults/complex-generic-default-expr.full.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.full.stderr?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n-  --> $DIR/complex-generic-default-expr.rs:6:62\n+  --> $DIR/complex-generic-default-expr.rs:9:62\n    |\n LL | struct Bar<T, const TYPE_SIZE: usize = { std::mem::size_of::<T>() }>(T);\n    |            -                                                 ^ doesn't have a size known at compile-time", "previous_filename": "src/test/ui/const-generics/defaults/complex-generic-default-expr.stderr"}, {"sha": "d50a0a61d4949c85042e1a08df7c8a6a8776f6fb", "filename": "src/test/ui/const-generics/defaults/complex-generic-default-expr.min.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -0,0 +1,20 @@\n+error: generic parameters may not be used in const operations\n+  --> $DIR/complex-generic-default-expr.rs:6:47\n+   |\n+LL | struct Foo<const N: usize, const M: usize = { N + 1 }>;\n+   |                                               ^ cannot perform const operation using `N`\n+   |\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/complex-generic-default-expr.rs:9:62\n+   |\n+LL | struct Bar<T, const TYPE_SIZE: usize = { std::mem::size_of::<T>() }>(T);\n+   |                                                              ^ cannot perform const operation using `T`\n+   |\n+   = note: type parameters may not be used in const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "1c25fda8d30ca48adbf48d4705f401c6885c256a", "filename": "src/test/ui/const-generics/defaults/complex-generic-default-expr.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -1,9 +1,13 @@\n-#![feature(const_generics, const_generics_defaults)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![feature(const_generics_defaults)]\n #![allow(incomplete_features)]\n \n struct Foo<const N: usize, const M: usize = { N + 1 }>;\n+//[min]~^ ERROR generic parameters may not be used in const operations\n \n struct Bar<T, const TYPE_SIZE: usize = { std::mem::size_of::<T>() }>(T);\n-//~^ ERROR the size for values of type `T` cannot be known at compilation time \n+//[min]~^ ERROR generic parameters may not be used in const operations\n+//[full]~^^ ERROR the size for values of type `T` cannot be known at compilation time \n \n fn main() {}"}, {"sha": "4fa21b8b1fb787b557a7bd52128425a6a8f3a6ba", "filename": "src/test/ui/const-generics/defaults/const-default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n-\n-#![feature(const_generics)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n #![feature(const_generics_defaults)]\n #![allow(incomplete_features)]\n "}, {"sha": "c417a26842ed199cd97d7edc7dc816fa8ae1a846", "filename": "src/test/ui/const-generics/defaults/default-on-impl.full.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.full.stderr?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -1,5 +1,5 @@\n error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/default-on-impl.rs:6:12\n+  --> $DIR/default-on-impl.rs:8:12\n    |\n LL | impl<const N: usize = 1> Foo<N> {}\n    |            ^", "previous_filename": "src/test/ui/const-generics/defaults/default-on-impl.stderr"}, {"sha": "c417a26842ed199cd97d7edc7dc816fa8ae1a846", "filename": "src/test/ui/const-generics/defaults/default-on-impl.min.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.min.stderr?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -0,0 +1,8 @@\n+error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+  --> $DIR/default-on-impl.rs:8:12\n+   |\n+LL | impl<const N: usize = 1> Foo<N> {}\n+   |            ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "735549defeaf07f9e5c35accf60917803098b000", "filename": "src/test/ui/const-generics/defaults/default-on-impl.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.rs?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -1,4 +1,6 @@\n-#![feature(const_generics, const_generics_defaults)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![feature(const_generics_defaults)]\n #![allow(incomplete_features)]\n \n struct Foo<const N: usize>;"}, {"sha": "32acf567cf2b98d19012d742adf726381737629e", "filename": "src/test/ui/const-generics/defaults/external.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fexternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fexternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fexternal.rs?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -1,5 +1,7 @@\n // aux-build:const_defaulty.rs\n // check-pass\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n #![feature(const_generics_defaults)]\n #![allow(incomplete_features)]\n "}, {"sha": "29d835e36c6eb74d9830d0cb2bcc25494235b0a3", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.full.stderr?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -1,5 +1,5 @@\n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/intermixed-lifetime.rs:6:28\n+  --> $DIR/intermixed-lifetime.rs:7:28\n    |\n LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n    |           -----------------^^---------- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T = u32>`"}, {"sha": "985e7b655ece9482038d40a1b564aee406129f59", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.min.stderr", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -1,26 +1,14 @@\n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/intermixed-lifetime.rs:6:28\n+  --> $DIR/intermixed-lifetime.rs:7:28\n    |\n LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n-   |           -----------------^^---------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T = u32, const N: usize>`\n+   |           -----------------^^---------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, const N: usize, T = u32>`\n \n-error: type parameters must be declared prior to const parameters\n-  --> $DIR/intermixed-lifetime.rs:6:32\n-   |\n-LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n-   |           ---------------------^------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T = u32, const N: usize>`\n-\n-error: lifetime parameters must be declared prior to const parameters\n+error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/intermixed-lifetime.rs:10:37\n    |\n LL | struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n-   |           --------------------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T = u32, const N: usize>`\n-\n-error: type parameters must be declared prior to const parameters\n-  --> $DIR/intermixed-lifetime.rs:10:28\n-   |\n-LL | struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n-   |           -----------------^----------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T = u32, const N: usize>`\n+   |           --------------------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, const N: usize, T = u32>`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "307e3aaf1fbf38f532b155af97bdcf47b15c4942", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -1,15 +1,13 @@\n-// revisions: full min\n // Checks that lifetimes cannot be interspersed between consts and types.\n+// revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n \n struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n //~^ Error lifetime parameters must be declared prior to const parameters\n-//[min]~^^ Error type parameters must be declared prior to const parameters\n \n struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n-//[full]~^ Error lifetime parameters must be declared prior to type parameters\n-//[min]~^^ Error type parameters must be declared prior to const parameters\n-//[min]~| Error lifetime parameters must be declared prior to const parameters\n+//~^ Error lifetime parameters must be declared prior to type parameters\n \n fn main() {}"}, {"sha": "be4f364d8ee62dc779480933c2d2842c28f2858d", "filename": "src/test/ui/const-generics/defaults/mismatch.full.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.full.stderr?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:11:28\n+  --> $DIR/mismatch.rs:12:28\n    |\n LL |     let e: Example::<13> = ();\n    |            -------------   ^^ expected struct `Example`, found `()`\n    |            |\n    |            expected due to this\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:13:34\n+  --> $DIR/mismatch.rs:14:34\n    |\n LL |     let e: Example2::<u32, 13> = ();\n    |            -------------------   ^^ expected struct `Example2`, found `()`\n@@ -18,7 +18,7 @@ LL |     let e: Example2::<u32, 13> = ();\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:15:34\n+  --> $DIR/mismatch.rs:16:34\n    |\n LL |     let e: Example3::<13, u32> = ();\n    |            -------------------   ^^ expected struct `Example3`, found `()`\n@@ -29,7 +29,7 @@ LL |     let e: Example3::<13, u32> = ();\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:17:28\n+  --> $DIR/mismatch.rs:18:28\n    |\n LL |     let e: Example3::<7> = ();\n    |            -------------   ^^ expected struct `Example3`, found `()`\n@@ -40,7 +40,7 @@ LL |     let e: Example3::<7> = ();\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:21:28\n+  --> $DIR/mismatch.rs:22:28\n    |\n LL |     let e: Example4::<7> = ();\n    |            -------------   ^^ expected struct `Example4`, found `()`", "previous_filename": "src/test/ui/const-generics/defaults/mismatch.stderr"}, {"sha": "be4f364d8ee62dc779480933c2d2842c28f2858d", "filename": "src/test/ui/const-generics/defaults/mismatch.min.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.min.stderr?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -0,0 +1,52 @@\n+error[E0308]: mismatched types\n+  --> $DIR/mismatch.rs:12:28\n+   |\n+LL |     let e: Example::<13> = ();\n+   |            -------------   ^^ expected struct `Example`, found `()`\n+   |            |\n+   |            expected due to this\n+\n+error[E0308]: mismatched types\n+  --> $DIR/mismatch.rs:14:34\n+   |\n+LL |     let e: Example2::<u32, 13> = ();\n+   |            -------------------   ^^ expected struct `Example2`, found `()`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected struct `Example2`\n+           found unit type `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/mismatch.rs:16:34\n+   |\n+LL |     let e: Example3::<13, u32> = ();\n+   |            -------------------   ^^ expected struct `Example3`, found `()`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected struct `Example3`\n+           found unit type `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/mismatch.rs:18:28\n+   |\n+LL |     let e: Example3::<7> = ();\n+   |            -------------   ^^ expected struct `Example3`, found `()`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected struct `Example3<7_usize>`\n+           found unit type `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/mismatch.rs:22:28\n+   |\n+LL |     let e: Example4::<7> = ();\n+   |            -------------   ^^ expected struct `Example4`, found `()`\n+   |            |\n+   |            expected due to this\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "68a640c0a08b31bb6fd8cdf3c5427cc42b017f26", "filename": "src/test/ui/const-generics/defaults/mismatch.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -1,4 +1,5 @@\n-#![feature(const_generics)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n #![feature(const_generics_defaults)]\n #![allow(incomplete_features)]\n "}, {"sha": "f549993c413d4c080850f4103fe9e69738101396", "filename": "src/test/ui/const-generics/defaults/pretty-printing-ast.stdout", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -18,4 +18,3 @@ fn foo<const SIZE : usize = 5>() { }\n \n struct Range<const FROM : usize = 0, const LEN : usize = 0, const TO : usize =\n              FROM>;\n-"}, {"sha": "c64c2974c8f8f94fb81585ec9fd3f40093ea5db2", "filename": "src/test/ui/const-generics/defaults/repr-c-issue-82792.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frepr-c-issue-82792.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frepr-c-issue-82792.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frepr-c-issue-82792.rs?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -6,7 +6,7 @@\n #![allow(incomplete_features)]\n \n #[repr(C)]\n-pub struct Loaf<T: Sized, const N: usize = 1usize> {\n+pub struct Loaf<T: Sized, const N: usize = 1> {\n     head: [T; N],\n     slice: [T],\n }"}, {"sha": "0746c64ac8cf4d710c4f0856f38fa83856aaad5a", "filename": "src/test/ui/const-generics/defaults/simple-defaults.min.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/259a368e9eae8e9952d18e211d2fe0a7e5fae714/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/259a368e9eae8e9952d18e211d2fe0a7e5fae714/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.min.stderr?ref=259a368e9eae8e9952d18e211d2fe0a7e5fae714", "patch": "@@ -1,8 +0,0 @@\n-error: type parameters must be declared prior to const parameters\n-  --> $DIR/simple-defaults.rs:8:40\n-   |\n-LL | struct FixedOutput<'a, const N: usize, T=u32> {\n-   |                   ---------------------^----- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T = u32, const N: usize>`\n-\n-error: aborting due to previous error\n-"}, {"sha": "c003cb2c5a6ee556d9723169e95bd14acc980453", "filename": "src/test/ui/const-generics/defaults/simple-defaults.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -1,12 +1,12 @@\n-// [full] run-pass\n-// revisions: min full\n-// Checks some basic test cases for defaults.\n+// run-pass\n+// Checks that type param defaults are allowed after const params.\n+// revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n #![allow(dead_code)]\n \n struct FixedOutput<'a, const N: usize, T=u32> {\n-    //[min]~^ ERROR type parameters must be declared prior to const parameters\n     out: &'a [T; N],\n }\n "}, {"sha": "e68075ee3c627e24cdc2db8ebd1be70bb45f39d5", "filename": "src/test/ui/const-generics/defaults/type-default-const-param-name.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftype-default-const-param-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftype-default-const-param-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftype-default-const-param-name.rs?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n-#![feature(const_generics, const_generics_defaults)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![feature(const_generics_defaults)]\n #![allow(incomplete_features)]\n \n struct N;"}, {"sha": "eb0bcb282155691fd7081e15c62ee227e40caf23", "filename": "src/test/ui/const-generics/defaults/wrong-order.full.stderr", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.full.stderr?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -1,19 +1,8 @@\n error: generic parameters with a default must be trailing\n-  --> $DIR/wrong-order.rs:4:10\n+  --> $DIR/wrong-order.rs:6:10\n    |\n LL | struct A<T = u32, const N: usize> {\n    |          ^\n-   |\n-   = note: using type defaults and const parameters in the same parameter list is currently not permitted\n-\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/wrong-order.rs:2:27\n-   |\n-LL | #![cfg_attr(full, feature(const_generics))]\n-   |                           ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "eb0bcb282155691fd7081e15c62ee227e40caf23", "filename": "src/test/ui/const-generics/defaults/wrong-order.min.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.min.stderr?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -1,10 +1,8 @@\n error: generic parameters with a default must be trailing\n-  --> $DIR/wrong-order.rs:4:10\n+  --> $DIR/wrong-order.rs:6:10\n    |\n LL | struct A<T = u32, const N: usize> {\n    |          ^\n-   |\n-   = note: using type defaults and const parameters in the same parameter list is currently not permitted\n \n error: aborting due to previous error\n "}, {"sha": "88e9e96ba43f961ef071a49a0f5ff147d62bd1ae", "filename": "src/test/ui/const-generics/defaults/wrong-order.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -1,5 +1,7 @@\n // revisions: full min\n-#![cfg_attr(full, feature(const_generics))] //[full]~WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n \n struct A<T = u32, const N: usize> {\n     //~^ ERROR generic parameters with a default must be trailing"}, {"sha": "cf947a565c454bb1ad15dfaa9ba10157a42cc345", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.full.stderr?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -1,13 +1,13 @@\n error: generic parameters with a default must be trailing\n-  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:11:12\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:10:12\n    |\n LL | struct Bar<T = [u8; N], const N: usize>(T);\n    |            ^\n    |\n    = note: using type defaults and const parameters in the same parameter list is currently not permitted\n \n error[E0128]: generic parameters with a default cannot use forward declared identifiers\n-  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:11:21\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:10:21\n    |\n LL | struct Bar<T = [u8; N], const N: usize>(T);\n    |                     ^ defaulted generic parameters cannot be forward declared"}, {"sha": "4c97012f36185027e8f7bc99cc8e7553d040b581", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters with a default must be trailing\n-  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:11:12\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:10:12\n    |\n LL | struct Bar<T = [u8; N], const N: usize>(T);\n    |            ^\n@@ -16,7 +16,7 @@ LL | struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error[E0128]: generic parameters with a default cannot use forward declared identifiers\n-  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:11:21\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:10:21\n    |\n LL | struct Bar<T = [u8; N], const N: usize>(T);\n    |                     ^ defaulted generic parameters cannot be forward declared"}, {"sha": "bf4f9558adc26cfd01a746eacb21744e2dd72f77", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb1dcd48802378929032ad9363c296891443d76/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs?ref=7cb1dcd48802378929032ad9363c296891443d76", "patch": "@@ -7,7 +7,6 @@ struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n //[full]~^ ERROR the size for values of type `T` cannot be known at compilation time\n //[min]~^^ ERROR generic parameters may not be used in const operations\n \n-// FIXME(const_generics_defaults): We still don't know how to deal with type defaults.\n struct Bar<T = [u8; N], const N: usize>(T);\n //~^ ERROR generic parameters with a default cannot use forward declared identifiers\n //~| ERROR generic parameters with a default"}]}