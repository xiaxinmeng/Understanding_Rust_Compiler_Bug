{"sha": "0b58bb32f66f4ec5f00683293093d94d8fb1aada", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNThiYjMyZjY2ZjRlYzVmMDA2ODMyOTMwOTNkOTRkOGZiMWFhZGE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-05T14:59:37Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-19T07:59:15Z"}, "message": "Support `cfg` and `cfg_attr` on generic parameters", "tree": {"sha": "b97b77643947a321bcf5e194a5096c035d8dd94f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b97b77643947a321bcf5e194a5096c035d8dd94f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b58bb32f66f4ec5f00683293093d94d8fb1aada", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b58bb32f66f4ec5f00683293093d94d8fb1aada", "html_url": "https://github.com/rust-lang/rust/commit/0b58bb32f66f4ec5f00683293093d94d8fb1aada", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b58bb32f66f4ec5f00683293093d94d8fb1aada/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "605ea9d05c48957a291eec11eb7339788c3140ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/605ea9d05c48957a291eec11eb7339788c3140ed", "html_url": "https://github.com/rust-lang/rust/commit/605ea9d05c48957a291eec11eb7339788c3140ed"}], "stats": {"total": 217, "additions": 111, "deletions": 106}, "files": [{"sha": "3b42e1de61497244f0fb038431d7ed9e507d8f7f", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0b58bb32f66f4ec5f00683293093d94d8fb1aada/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b58bb32f66f4ec5f00683293093d94d8fb1aada/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=0b58bb32f66f4ec5f00683293093d94d8fb1aada", "patch": "@@ -240,6 +240,10 @@ impl<'a> StripUnconfigured<'a> {\n         items.flat_map_in_place(|item| self.configure(item));\n     }\n \n+    pub fn configure_generic_params(&mut self, params: &mut Vec<ast::GenericParam>) {\n+        params.flat_map_in_place(|param| self.configure(param));\n+    }\n+\n     fn configure_variant_data(&mut self, vdata: &mut ast::VariantData) {\n         match vdata {\n             ast::VariantData::Struct(fields, ..) | ast::VariantData::Tuple(fields, _) =>\n@@ -301,22 +305,6 @@ impl<'a> StripUnconfigured<'a> {\n     pub fn configure_fn_decl(&mut self, fn_decl: &mut ast::FnDecl) {\n         fn_decl.inputs.flat_map_in_place(|arg| self.configure(arg));\n     }\n-\n-    /// Denies `#[cfg]` on generic parameters until we decide what to do with it.\n-    /// See issue #51279.\n-    pub fn disallow_cfg_on_generic_param(&mut self, param: &ast::GenericParam) {\n-        for attr in param.attrs() {\n-            let offending_attr = if attr.check_name(sym::cfg) {\n-                \"cfg\"\n-            } else if attr.check_name(sym::cfg_attr) {\n-                \"cfg_attr\"\n-            } else {\n-                continue;\n-            };\n-            let msg = format!(\"#[{}] cannot be applied on a generic parameter\", offending_attr);\n-            self.sess.span_diagnostic.span_err(attr.span, &msg);\n-        }\n-    }\n }\n \n impl<'a> MutVisitor for StripUnconfigured<'a> {"}, {"sha": "a71d1d503cabc38504d56d70692b4bd23c93175a", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b58bb32f66f4ec5f00683293093d94d8fb1aada/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b58bb32f66f4ec5f00683293093d94d8fb1aada/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=0b58bb32f66f4ec5f00683293093d94d8fb1aada", "patch": "@@ -1439,9 +1439,9 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n     }\n \n-    fn visit_generic_param(&mut self, param: &mut ast::GenericParam) {\n-        self.cfg.disallow_cfg_on_generic_param(&param);\n-        noop_visit_generic_param(param, self)\n+    fn visit_generic_params(&mut self, params: &mut Vec<ast::GenericParam>) {\n+        self.cfg.configure_generic_params(params);\n+        noop_visit_generic_params(params, self);\n     }\n \n     fn visit_attribute(&mut self, at: &mut ast::Attribute) {"}, {"sha": "d80d3ea7b7fe9a1f33560c7c4772822f1417e381", "filename": "src/test/ui/conditional-compilation/cfg-generic-params.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0b58bb32f66f4ec5f00683293093d94d8fb1aada/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-generic-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b58bb32f66f4ec5f00683293093d94d8fb1aada/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-generic-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-generic-params.rs?ref=0b58bb32f66f4ec5f00683293093d94d8fb1aada", "patch": "@@ -0,0 +1,38 @@\n+// compile-flags:--cfg yes\n+\n+fn f_lt<#[cfg(yes)] 'a: 'a, #[cfg(no)] T>() {}\n+fn f_ty<#[cfg(no)] 'a: 'a, #[cfg(yes)] T>() {}\n+\n+type FnGood = for<#[cfg(yes)] 'a, #[cfg(no)] T> fn(); // OK\n+type FnBad = for<#[cfg(no)] 'a, #[cfg(yes)] T> fn();\n+//~^ ERROR only lifetime parameters can be used in this context\n+\n+type PolyGood = dyn for<#[cfg(yes)] 'a, #[cfg(no)] T> Copy; // OK\n+type PolyBad = dyn for<#[cfg(no)] 'a, #[cfg(yes)] T> Copy;\n+//~^ ERROR only lifetime parameters can be used in this context\n+\n+struct WhereGood where for<#[cfg(yes)] 'a, #[cfg(no)] T> u8: Copy; // OK\n+struct WhereBad where for<#[cfg(no)] 'a, #[cfg(yes)] T> u8: Copy;\n+//~^ ERROR only lifetime parameters can be used in this context\n+\n+fn f_lt_no<#[cfg_attr(no, unknown)] 'a>() {} // OK\n+fn f_lt_yes<#[cfg_attr(yes, unknown)] 'a>() {} //~ ERROR attribute `unknown` is currently unknown\n+fn f_ty_no<#[cfg_attr(no, unknown)] T>() {} // OK\n+fn f_ty_yes<#[cfg_attr(yes, unknown)] T>() {} //~ ERROR attribute `unknown` is currently unknown\n+\n+type FnNo = for<#[cfg_attr(no, unknown)] 'a> fn(); // OK\n+type FnYes = for<#[cfg_attr(yes, unknown)] 'a> fn();\n+//~^ ERROR attribute `unknown` is currently unknown\n+\n+type PolyNo = dyn for<#[cfg_attr(no, unknown)] 'a> Copy; // OK\n+type PolyYes = dyn for<#[cfg_attr(yes, unknown)] 'a> Copy;\n+//~^ ERROR attribute `unknown` is currently unknown\n+\n+struct WhereNo where for<#[cfg_attr(no, unknown)] 'a> u8: Copy; // OK\n+struct WhereYes where for<#[cfg_attr(yes, unknown)] 'a> u8: Copy;\n+//~^ ERROR attribute `unknown` is currently unknown\n+\n+fn main() {\n+    f_lt::<'static>();\n+    f_ty::<u8>();\n+}"}, {"sha": "40ca44d9db59c7f1b26728a3aef09831b737abf8", "filename": "src/test/ui/conditional-compilation/cfg-generic-params.stderr", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/0b58bb32f66f4ec5f00683293093d94d8fb1aada/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-generic-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b58bb32f66f4ec5f00683293093d94d8fb1aada/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-generic-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-generic-params.stderr?ref=0b58bb32f66f4ec5f00683293093d94d8fb1aada", "patch": "@@ -0,0 +1,66 @@\n+error: only lifetime parameters can be used in this context\n+  --> $DIR/cfg-generic-params.rs:7:45\n+   |\n+LL | type FnBad = for<#[cfg(no)] 'a, #[cfg(yes)] T> fn();\n+   |                                             ^\n+\n+error: only lifetime parameters can be used in this context\n+  --> $DIR/cfg-generic-params.rs:11:51\n+   |\n+LL | type PolyBad = dyn for<#[cfg(no)] 'a, #[cfg(yes)] T> Copy;\n+   |                                                   ^\n+\n+error: only lifetime parameters can be used in this context\n+  --> $DIR/cfg-generic-params.rs:15:54\n+   |\n+LL | struct WhereBad where for<#[cfg(no)] 'a, #[cfg(yes)] T> u8: Copy;\n+   |                                                      ^\n+\n+error[E0658]: The attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/cfg-generic-params.rs:19:29\n+   |\n+LL | fn f_lt_yes<#[cfg_attr(yes, unknown)] 'a>() {}\n+   |                             ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error[E0658]: The attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/cfg-generic-params.rs:21:29\n+   |\n+LL | fn f_ty_yes<#[cfg_attr(yes, unknown)] T>() {}\n+   |                             ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error[E0658]: The attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/cfg-generic-params.rs:24:34\n+   |\n+LL | type FnYes = for<#[cfg_attr(yes, unknown)] 'a> fn();\n+   |                                  ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error[E0658]: The attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/cfg-generic-params.rs:28:40\n+   |\n+LL | type PolyYes = dyn for<#[cfg_attr(yes, unknown)] 'a> Copy;\n+   |                                        ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error[E0658]: The attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/cfg-generic-params.rs:32:43\n+   |\n+LL | struct WhereYes where for<#[cfg_attr(yes, unknown)] 'a> u8: Copy;\n+   |                                           ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "f8f3626caabe7bd3f97d5190d8199c15ae310254", "filename": "src/test/ui/issues/issue-51279.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/605ea9d05c48957a291eec11eb7339788c3140ed/src%2Ftest%2Fui%2Fissues%2Fissue-51279.rs", "raw_url": "https://github.com/rust-lang/rust/raw/605ea9d05c48957a291eec11eb7339788c3140ed/src%2Ftest%2Fui%2Fissues%2Fissue-51279.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51279.rs?ref=605ea9d05c48957a291eec11eb7339788c3140ed", "patch": "@@ -1,27 +0,0 @@\n-pub struct X<#[cfg(none)] 'a, #[cfg(none)] T>(&'a T);\n-//~^ ERROR #[cfg] cannot be applied on a generic parameter\n-//~^^ ERROR #[cfg] cannot be applied on a generic parameter\n-\n-impl<#[cfg(none)] 'a, #[cfg(none)] T> X<'a, T> {}\n-//~^ ERROR #[cfg] cannot be applied on a generic parameter\n-//~^^ ERROR #[cfg] cannot be applied on a generic parameter\n-\n-pub fn f<#[cfg(none)] 'a, #[cfg(none)] T>(_: &'a T) {}\n-//~^ ERROR #[cfg] cannot be applied on a generic parameter\n-//~^^ ERROR #[cfg] cannot be applied on a generic parameter\n-\n-#[cfg(none)]\n-pub struct Y<#[cfg(none)] T>(T); // shouldn't care when the entire item is stripped out\n-\n-struct M<T>(*const T);\n-\n-impl<#[cfg_attr(none, may_dangle)] T> Drop for M<T> {\n-    //~^ ERROR #[cfg_attr] cannot be applied on a generic parameter\n-    fn drop(&mut self) {}\n-}\n-\n-type Z<#[ignored] 'a, #[cfg(none)] T> = X<'a, T>;\n-//~^ ERROR #[cfg] cannot be applied on a generic parameter\n-//~| ERROR attribute `ignored` is currently unknown to the compiler\n-\n-fn main() {}"}, {"sha": "9dd4a9f23814cb9b10fac4c4a2e527d136524caf", "filename": "src/test/ui/issues/issue-51279.stderr", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/605ea9d05c48957a291eec11eb7339788c3140ed/src%2Ftest%2Fui%2Fissues%2Fissue-51279.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/605ea9d05c48957a291eec11eb7339788c3140ed/src%2Ftest%2Fui%2Fissues%2Fissue-51279.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51279.stderr?ref=605ea9d05c48957a291eec11eb7339788c3140ed", "patch": "@@ -1,60 +0,0 @@\n-error: #[cfg] cannot be applied on a generic parameter\n-  --> $DIR/issue-51279.rs:1:14\n-   |\n-LL | pub struct X<#[cfg(none)] 'a, #[cfg(none)] T>(&'a T);\n-   |              ^^^^^^^^^^^^\n-\n-error: #[cfg] cannot be applied on a generic parameter\n-  --> $DIR/issue-51279.rs:1:31\n-   |\n-LL | pub struct X<#[cfg(none)] 'a, #[cfg(none)] T>(&'a T);\n-   |                               ^^^^^^^^^^^^\n-\n-error: #[cfg] cannot be applied on a generic parameter\n-  --> $DIR/issue-51279.rs:5:6\n-   |\n-LL | impl<#[cfg(none)] 'a, #[cfg(none)] T> X<'a, T> {}\n-   |      ^^^^^^^^^^^^\n-\n-error: #[cfg] cannot be applied on a generic parameter\n-  --> $DIR/issue-51279.rs:5:23\n-   |\n-LL | impl<#[cfg(none)] 'a, #[cfg(none)] T> X<'a, T> {}\n-   |                       ^^^^^^^^^^^^\n-\n-error: #[cfg] cannot be applied on a generic parameter\n-  --> $DIR/issue-51279.rs:9:10\n-   |\n-LL | pub fn f<#[cfg(none)] 'a, #[cfg(none)] T>(_: &'a T) {}\n-   |          ^^^^^^^^^^^^\n-\n-error: #[cfg] cannot be applied on a generic parameter\n-  --> $DIR/issue-51279.rs:9:27\n-   |\n-LL | pub fn f<#[cfg(none)] 'a, #[cfg(none)] T>(_: &'a T) {}\n-   |                           ^^^^^^^^^^^^\n-\n-error: #[cfg_attr] cannot be applied on a generic parameter\n-  --> $DIR/issue-51279.rs:18:6\n-   |\n-LL | impl<#[cfg_attr(none, may_dangle)] T> Drop for M<T> {\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: #[cfg] cannot be applied on a generic parameter\n-  --> $DIR/issue-51279.rs:23:23\n-   |\n-LL | type Z<#[ignored] 'a, #[cfg(none)] T> = X<'a, T>;\n-   |                       ^^^^^^^^^^^^\n-\n-error[E0658]: The attribute `ignored` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/issue-51279.rs:23:8\n-   |\n-LL | type Z<#[ignored] 'a, #[cfg(none)] T> = X<'a, T>;\n-   |        ^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n-\n-error: aborting due to 9 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}]}