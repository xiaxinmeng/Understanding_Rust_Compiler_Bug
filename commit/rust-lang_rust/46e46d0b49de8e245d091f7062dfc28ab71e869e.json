{"sha": "46e46d0b49de8e245d091f7062dfc28ab71e869e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZTQ2ZDBiNDlkZThlMjQ1ZDA5MWY3MDYyZGZjMjhhYjcxZTg2OWU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-23T22:46:31Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-23T22:46:31Z"}, "message": "Translate a bunch of the material (lltrans, llasm, abi) from rustboot to rustc, and move files around.", "tree": {"sha": "5ca0d7ab10eb2a89b9c2a299ff3490eac912bf5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ca0d7ab10eb2a89b9c2a299ff3490eac912bf5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46e46d0b49de8e245d091f7062dfc28ab71e869e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46e46d0b49de8e245d091f7062dfc28ab71e869e", "html_url": "https://github.com/rust-lang/rust/commit/46e46d0b49de8e245d091f7062dfc28ab71e869e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46e46d0b49de8e245d091f7062dfc28ab71e869e/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c514f33f2ebba03ca06368b3405ce0d7cc93c54", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c514f33f2ebba03ca06368b3405ce0d7cc93c54", "html_url": "https://github.com/rust-lang/rust/commit/2c514f33f2ebba03ca06368b3405ce0d7cc93c54"}], "stats": {"total": 244, "additions": 232, "deletions": 12}, "files": [{"sha": "157bf87665fd441f1ebdcd393960b441759a3986", "filename": "src/comp/back/abi.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/46e46d0b49de8e245d091f7062dfc28ab71e869e/src%2Fcomp%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46e46d0b49de8e245d091f7062dfc28ab71e869e/src%2Fcomp%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fabi.rs?ref=46e46d0b49de8e245d091f7062dfc28ab71e869e", "patch": "@@ -0,0 +1,46 @@\n+\n+const int rc_base_field_refcnt = 0;\n+\n+const int task_field_refcnt = 0;\n+const int task_field_stk = 2;\n+const int task_field_runtime_sp = 3;\n+const int task_field_rust_sp = 4;\n+const int task_field_gc_alloc_chain = 5;\n+const int task_field_dom = 6;\n+const int n_visible_task_fields = 7;\n+\n+const int dom_field_interrupt_flag = 1;\n+\n+const int frame_glue_fns_field_mark = 0;\n+const int frame_glue_fns_field_drop = 1;\n+const int frame_glue_fns_field_reloc = 2;\n+\n+const int box_rc_field_refcnt = 0;\n+const int box_rc_field_body = 1;\n+\n+const int general_code_alignment = 16;\n+\n+const int vec_elt_rc = 0;\n+const int vec_elt_alloc = 1;\n+const int vec_elt_fill = 2;\n+const int vec_elt_data = 3;\n+\n+const int calltup_elt_out_ptr = 0;\n+const int calltup_elt_task_ptr = 1;\n+const int calltup_elt_indirect_args = 2;\n+const int calltup_elt_ty_params = 3;\n+const int calltup_elt_args = 4;\n+const int calltup_elt_iterator_args = 5;\n+\n+const int worst_case_glue_call_args = 7;\n+\n+//\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C ../.. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:\n+//"}, {"sha": "fcf65cc038ef951a06d4f3127bab60d821017c8a", "filename": "src/comp/back/x86.rs", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/46e46d0b49de8e245d091f7062dfc28ab71e869e/src%2Fcomp%2Fback%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46e46d0b49de8e245d091f7062dfc28ab71e869e/src%2Fcomp%2Fback%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fx86.rs?ref=46e46d0b49de8e245d091f7062dfc28ab71e869e", "patch": "@@ -0,0 +1,159 @@\n+import lib.llvm.llvm;\n+import lib.llvm.llvm.ModuleRef;\n+import std._str;\n+import std._int;\n+import std._vec;\n+\n+const int wordsz = 4;\n+\n+fn istr(int i) -> str {\n+    ret _int.to_str(i, 10u);\n+}\n+\n+fn wstr(int i) -> str {\n+    ret istr(i * wordsz);\n+}\n+\n+fn save_callee_saves() -> vec[str] {\n+    ret vec(\"pushl %ebp\",\n+            \"pushl %edi\",\n+            \"pushl %esi\",\n+            \"pushl %ebx\");\n+}\n+\n+fn restore_callee_saves() -> vec[str] {\n+    ret vec(\"popl  %ebx\",\n+            \"popl  %esi\",\n+            \"popl  %edi\",\n+            \"popl  %ebp\");\n+}\n+\n+fn load_esp_from_rust_sp() -> vec[str] {\n+    ret vec(\"movl  \" + wstr(abi.task_field_rust_sp) + \"(%edx), %esp\");\n+}\n+\n+fn load_esp_from_runtime_sp() -> vec[str] {\n+    ret vec(\"movl  \" + wstr(abi.task_field_runtime_sp) + \"(%edx), %esp\");\n+}\n+\n+fn store_esp_to_rust_sp() -> vec[str] {\n+    ret vec(\"movl  %esp, \" + wstr(abi.task_field_rust_sp) + \"(%edx)\");\n+}\n+\n+fn store_esp_to_runtime_sp() -> vec[str] {\n+    ret vec(\"movl  %esp, \" + wstr(abi.task_field_runtime_sp) + \"(%edx)\");\n+}\n+\n+fn rust_activate_glue() -> vec[str] {\n+    ret vec(\"movl  4(%esp), %edx    # edx = rust_task\")\n+        + save_callee_saves()\n+        + store_esp_to_runtime_sp()\n+        + load_esp_from_rust_sp()\n+\n+        // This 'add' instruction is a bit surprising.\n+        // See lengthy comment in boot/be/x86.ml activate_glue.\n+        + vec(\"addl  $20, \" + wstr(abi.task_field_rust_sp) + \"(%edx)\")\n+\n+        + restore_callee_saves()\n+        + vec(\"ret\");\n+}\n+\n+fn rust_yield_glue() -> vec[str] {\n+    ret vec(\"movl  0(%esp), %edx    # edx = rust_task\")\n+        + load_esp_from_rust_sp()\n+        + save_callee_saves()\n+        + store_esp_to_rust_sp()\n+        + load_esp_from_runtime_sp()\n+        + restore_callee_saves()\n+        + vec(\"ret\");\n+}\n+\n+fn upcall_glue(int n_args) -> vec[str] {\n+\n+    /*\n+     * 0, 4, 8, 12 are callee-saves\n+     * 16 is retpc\n+     * 20 is taskptr\n+     * 24 is callee\n+     * 28 .. (7+i) * 4 are args\n+     */\n+\n+    fn copy_arg(uint i) -> str {\n+        auto off = wstr(7 + (i as int));\n+        auto m = vec(\"movl  \" + off + \"(%ebp),%edx\",\n+                     \"movl  %edx,\" + off + \"(%esp)\");\n+        ret _str.connect(m, \"\\n\\t\");\n+    }\n+\n+    auto carg = copy_arg;\n+\n+    ret\n+        save_callee_saves()\n+\n+        + vec(\"movl  %esp, %ebp     # ebp = rust_sp\",\n+              \"movl  20(%esp), %edx # edx = rust_task\")\n+\n+        + store_esp_to_rust_sp()\n+        + load_esp_from_runtime_sp()\n+\n+        + vec(\"subl  $\" + wstr(n_args + 1) + \", %esp   # esp -= args\",\n+              \"andl  $~0xf, %esp    # align esp down\",\n+              \"movl  %edx, (%esp)   # arg[0] = rust_task \")\n+\n+        + _vec.init_fn[str](carg, n_args as uint)\n+\n+        +  vec(\"movl  24(%ebp), %edx # edx = callee\",\n+               \"call  *%edx          # call *%edx\",\n+               \"movl  20(%ebp), %edx # edx = rust_task\")\n+\n+        + load_esp_from_rust_sp()\n+        + restore_callee_saves()\n+        + vec(\"ret\");\n+\n+}\n+\n+\n+fn decl_glue(int align, str prefix, str name, vec[str] insns) -> str {\n+    auto sym = prefix + name;\n+    ret \"\\t.globl \" + sym + \"\\n\" +\n+        \"\\t.balign \" + istr(align) + \"\\n\" +\n+        sym + \":\\n\" +\n+        \"\\t\" + _str.connect(insns, \"\\n\\t\");\n+}\n+\n+\n+fn get_module_asm() -> str {\n+    auto align = 4;\n+    auto prefix = \"\";\n+\n+    auto glues =\n+        vec(decl_glue(align, prefix,\n+                      \"rust_activate_glue\",\n+                      rust_activate_glue()),\n+\n+            decl_glue(align, prefix,\n+                      \"rust_yield_glue\",\n+                      rust_yield_glue()));\n+\n+    let int i = 0;\n+    let int n_upcall_glues = 7;\n+    while (i < n_upcall_glues) {\n+        glues += decl_glue(align, prefix,\n+                           \"rust_upcall_\" + istr(i),\n+                           upcall_glue(i));\n+        i += 1;\n+    }\n+\n+    ret _str.connect(glues, \"\\n\\n\");\n+}\n+\n+//\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C ../.. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:\n+//"}, {"sha": "e3eb10cf60acd341db6f574fc1695454083fec6a", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/46e46d0b49de8e245d091f7062dfc28ab71e869e/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46e46d0b49de8e245d091f7062dfc28ab71e869e/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=46e46d0b49de8e245d091f7062dfc28ab71e869e", "patch": "@@ -1,8 +1,8 @@\n // -*- rust -*-\n \n-import fe.parser;\n-import fe.token;\n-import me.trans;\n+import front.parser;\n+import front.token;\n+import middle.trans;\n \n fn main(vec[str] args) {\n \n@@ -16,7 +16,6 @@ fn main(vec[str] args) {\n   for (str filename in args) {\n       if (i > 0) {\n           auto p = parser.new_parser(sess, filename);\n-          log \"opened file: \" + filename;\n           auto crate = parser.parse_crate(p);\n           trans.trans_crate(sess, crate);\n       }"}, {"sha": "327570d696a430d20d7a1a1be7d705268a54b584", "filename": "src/comp/front/ast.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/46e46d0b49de8e245d091f7062dfc28ab71e869e/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46e46d0b49de8e245d091f7062dfc28ab71e869e/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=46e46d0b49de8e245d091f7062dfc28ab71e869e", "previous_filename": "src/comp/fe/ast.rs"}, {"sha": "d058db4a82def9d179d339b3295d0740be27958c", "filename": "src/comp/front/lexer.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/46e46d0b49de8e245d091f7062dfc28ab71e869e/src%2Fcomp%2Ffront%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46e46d0b49de8e245d091f7062dfc28ab71e869e/src%2Fcomp%2Ffront%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Flexer.rs?ref=46e46d0b49de8e245d091f7062dfc28ab71e869e", "previous_filename": "src/comp/fe/lexer.rs"}, {"sha": "ab2e15e3b628d3ef4f0ffbb2954a76cb80fe74aa", "filename": "src/comp/front/parser.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/46e46d0b49de8e245d091f7062dfc28ab71e869e/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46e46d0b49de8e245d091f7062dfc28ab71e869e/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=46e46d0b49de8e245d091f7062dfc28ab71e869e", "previous_filename": "src/comp/fe/parser.rs"}, {"sha": "b9b2fa07fa44c905d29311542ca027f2933d6e9f", "filename": "src/comp/front/token.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/46e46d0b49de8e245d091f7062dfc28ab71e869e/src%2Fcomp%2Ffront%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46e46d0b49de8e245d091f7062dfc28ab71e869e/src%2Fcomp%2Ffront%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftoken.rs?ref=46e46d0b49de8e245d091f7062dfc28ab71e869e", "previous_filename": "src/comp/fe/token.rs"}, {"sha": "1b1c5b2d56b02ee887166a49fd345431c48a4c1a", "filename": "src/comp/middle/trans.rs", "status": "renamed", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/46e46d0b49de8e245d091f7062dfc28ab71e869e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46e46d0b49de8e245d091f7062dfc28ab71e869e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=46e46d0b49de8e245d091f7062dfc28ab71e869e", "patch": "@@ -3,8 +3,9 @@ import std._vec;\n import std._str.rustrt.sbuf;\n import std._vec.rustrt.vbuf;\n \n-import fe.ast;\n+import front.ast;\n import driver.session;\n+import back.x86;\n \n import lib.llvm.llvm;\n import lib.llvm.builder;\n@@ -36,10 +37,12 @@ fn T_fn(vec[TypeRef] inputs, TypeRef output) -> TypeRef {\n                               False());\n }\n \n+type terminator = fn(&trans_ctxt cx, builder b);\n+\n fn trans_log(&trans_ctxt cx, builder b, &ast.atom a) {\n }\n \n-fn trans_stmt(&trans_ctxt cx, builder b, &ast.stmt s) {\n+fn trans_stmt(&trans_ctxt cx, builder b, &ast.stmt s, terminator t) {\n     alt (s) {\n         case (ast.stmt_log(?a)) {\n             trans_log(cx, b, *a);\n@@ -50,23 +53,29 @@ fn trans_stmt(&trans_ctxt cx, builder b, &ast.stmt s) {\n     }\n }\n \n-fn trans_block(&trans_ctxt cx, ValueRef llfn, &ast.block b) {\n+fn default_terminate(&trans_ctxt cx, builder b) {\n+    b.RetVoid();\n+}\n+\n+fn trans_block(&trans_ctxt cx, ValueRef llfn, &ast.block b, terminator t) {\n     let BasicBlockRef llbb =\n         llvm.LLVMAppendBasicBlock(llfn, _str.buf(\"\"));\n     let BuilderRef llbuild = llvm.LLVMCreateBuilder();\n     llvm.LLVMPositionBuilderAtEnd(llbuild, llbb);\n     auto bld = builder(llbuild);\n     for (@ast.stmt s in b) {\n-        trans_stmt(cx, bld, *s);\n+        trans_stmt(cx, bld, *s, t);\n     }\n+    t(cx, bld);\n }\n \n fn trans_fn(&trans_ctxt cx, &ast._fn f) {\n     let vec[TypeRef] args = vec();\n     let TypeRef llty = T_fn(args, T_nil());\n     let ValueRef llfn =\n         llvm.LLVMAddFunction(cx.llmod, _str.buf(cx.path), llty);\n-    trans_block(cx, llfn, f.body);\n+    auto term = default_terminate;\n+    trans_block(cx, llfn, f.body, term);\n }\n \n fn trans_item(&trans_ctxt cx, &str name, &ast.item item) {\n@@ -92,6 +101,8 @@ fn trans_crate(session.session sess, ast.crate crate) {\n         llvm.LLVMModuleCreateWithNameInContext(_str.buf(\"rust_out\"),\n                                                llvm.LLVMGetGlobalContext());\n \n+    llvm.LLVMSetModuleInlineAsm(llmod, _str.buf(x86.get_module_asm()));\n+\n     auto cx = rec(sess=sess, llmod=llmod, path=\"\");\n     trans_mod(cx, crate.module);\n ", "previous_filename": "src/comp/me/trans.rs"}, {"sha": "cf2c25ae8c2bc174e6c3fa82da9a39e1d1ad2544", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/46e46d0b49de8e245d091f7062dfc28ab71e869e/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/46e46d0b49de8e245d091f7062dfc28ab71e869e/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=46e46d0b49de8e245d091f7062dfc28ab71e869e", "patch": "@@ -3,17 +3,22 @@\n \n use std;\n \n-mod fe {\n+mod front {\n     mod ast;\n     mod lexer;\n     mod parser;\n     mod token;\n }\n \n-mod me {\n+mod middle {\n     mod trans;\n }\n \n+mod back {\n+    mod abi;\n+    mod x86;\n+}\n+\n mod driver {\n     mod rustc;\n     mod session;\n@@ -24,7 +29,7 @@ mod util {\n }\n \n auth driver.rustc.main = state;\n-auth me.trans = unsafe;\n+auth middle.trans = unsafe;\n \n \n mod lib {"}]}