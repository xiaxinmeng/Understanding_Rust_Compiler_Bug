{"sha": "94f2dfa8f632542bfb7260ca4b0aadce24061592", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZjJkZmE4ZjYzMjU0MmJmYjcyNjBjYTRiMGFhZGNlMjQwNjE1OTI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-30T22:28:36Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-03T17:32:35Z"}, "message": "rustuv: Require all results are used and fix fallout", "tree": {"sha": "209a36ace5391cb488b0d8fbe997aa0cdffe878b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/209a36ace5391cb488b0d8fbe997aa0cdffe878b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94f2dfa8f632542bfb7260ca4b0aadce24061592", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94f2dfa8f632542bfb7260ca4b0aadce24061592", "html_url": "https://github.com/rust-lang/rust/commit/94f2dfa8f632542bfb7260ca4b0aadce24061592", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94f2dfa8f632542bfb7260ca4b0aadce24061592/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae581a010363b26ef6bae60145ebd17343a343b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae581a010363b26ef6bae60145ebd17343a343b0", "html_url": "https://github.com/rust-lang/rust/commit/ae581a010363b26ef6bae60145ebd17343a343b0"}], "stats": {"total": 66, "additions": 34, "deletions": 32}, "files": [{"sha": "2cef2664c2fc41caf59cb6a69ce6d7b624117e88", "filename": "src/librustuv/file.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/94f2dfa8f632542bfb7260ca4b0aadce24061592/src%2Flibrustuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f2dfa8f632542bfb7260ca4b0aadce24061592/src%2Flibrustuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ffile.rs?ref=94f2dfa8f632542bfb7260ca4b0aadce24061592", "patch": "@@ -140,9 +140,9 @@ impl FsRequest {\n             let mut paths = ~[];\n             let path = CString::new(path.with_ref(|p| p), false);\n             let parent = Path::new(path);\n-            c_str::from_c_multistring(req.get_ptr() as *libc::c_char,\n-                                      Some(req.get_result() as uint),\n-                                      |rel| {\n+            let _ = c_str::from_c_multistring(req.get_ptr() as *libc::c_char,\n+                                              Some(req.get_result() as uint),\n+                                              |rel| {\n                 let p = rel.as_bytes();\n                 paths.push(parent.join(p.slice_to(rel.len())));\n             });\n@@ -378,7 +378,8 @@ impl Drop for FileWatcher {\n             rtio::CloseAsynchronously => {\n                 unsafe {\n                     let req = uvll::malloc_req(uvll::UV_FS);\n-                    uvll::uv_fs_close(self.loop_.handle, req, self.fd, close_cb);\n+                    assert_eq!(uvll::uv_fs_close(self.loop_.handle, req,\n+                                                 self.fd, close_cb), 0);\n                 }\n \n                 extern fn close_cb(req: *uvll::uv_fs_t) {"}, {"sha": "a2f3457a9430cc2be528b0c3904e41853763225c", "filename": "src/librustuv/homing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94f2dfa8f632542bfb7260ca4b0aadce24061592/src%2Flibrustuv%2Fhoming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f2dfa8f632542bfb7260ca4b0aadce24061592/src%2Flibrustuv%2Fhoming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fhoming.rs?ref=94f2dfa8f632542bfb7260ca4b0aadce24061592", "patch": "@@ -176,7 +176,7 @@ mod test {\n         });\n \n         let task = pool.task(TaskOpts::new(), proc() {\n-            port.recv();\n+            drop(port.recv());\n         });\n         pool.spawn_sched().send(sched::TaskFromFriend(task));\n \n@@ -197,7 +197,7 @@ mod test {\n             let listener = UdpWatcher::bind(local_loop(), addr2);\n             chan.send((listener.unwrap(), addr1));\n             let mut listener = UdpWatcher::bind(local_loop(), addr1).unwrap();\n-            listener.sendto([1, 2, 3, 4], addr2);\n+            listener.sendto([1, 2, 3, 4], addr2).unwrap();\n         });\n \n         let task = pool.task(TaskOpts::new(), proc() {"}, {"sha": "dafd3dbe1bc9694367ca43ede8104d022365c27a", "filename": "src/librustuv/idle.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94f2dfa8f632542bfb7260ca4b0aadce24061592/src%2Flibrustuv%2Fidle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f2dfa8f632542bfb7260ca4b0aadce24061592/src%2Flibrustuv%2Fidle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fidle.rs?ref=94f2dfa8f632542bfb7260ca4b0aadce24061592", "patch": "@@ -52,7 +52,7 @@ impl IdleWatcher {\n                 let data = uvll::get_data_for_uv_handle(handle);\n                 let f: ~proc() = cast::transmute(data);\n                 (*f)();\n-                uvll::uv_idle_stop(handle);\n+                assert_eq!(uvll::uv_idle_stop(handle), 0);\n                 uvll::uv_close(handle, close_cb);\n             }\n         }\n@@ -122,7 +122,7 @@ mod test {\n                     }\n                 }\n             };\n-            task.wake().map(|t| t.reawaken(true));\n+            let _ = task.wake().map(|t| t.reawaken(true));\n         }\n     }\n "}, {"sha": "f945c0972ca39b738e3a68c5ce075d640cc09d41", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94f2dfa8f632542bfb7260ca4b0aadce24061592/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f2dfa8f632542bfb7260ca4b0aadce24061592/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=94f2dfa8f632542bfb7260ca4b0aadce24061592", "patch": "@@ -40,6 +40,7 @@ via `close` and `delete` methods.\n #[crate_type = \"dylib\"];\n \n #[feature(macro_rules)];\n+#[deny(unused_result, unused_must_use)];\n \n #[cfg(test)] extern mod green;\n \n@@ -207,7 +208,7 @@ fn wait_until_woken_after(slot: *mut Option<BlockedTask>, f: ||) {\n \n fn wakeup(slot: &mut Option<BlockedTask>) {\n     assert!(slot.is_some());\n-    slot.take_unwrap().wake().map(|t| t.reawaken(true));\n+    let _ = slot.take_unwrap().wake().map(|t| t.reawaken(true));\n }\n \n pub struct Request {\n@@ -276,7 +277,7 @@ impl Loop {\n     pub fn wrap(handle: *uvll::uv_loop_t) -> Loop { Loop { handle: handle } }\n \n     pub fn run(&mut self) {\n-        unsafe { uvll::uv_run(self.handle, uvll::RUN_DEFAULT) };\n+        assert_eq!(unsafe { uvll::uv_run(self.handle, uvll::RUN_DEFAULT) }, 0);\n     }\n \n     pub fn close(&mut self) {"}, {"sha": "75b68e3a52885ac55c85814c282f8e104a2e7679", "filename": "src/librustuv/macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94f2dfa8f632542bfb7260ca4b0aadce24061592/src%2Flibrustuv%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f2dfa8f632542bfb7260ca4b0aadce24061592/src%2Flibrustuv%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fmacros.rs?ref=94f2dfa8f632542bfb7260ca4b0aadce24061592", "patch": "@@ -34,11 +34,11 @@ pub fn dumb_println(args: &fmt::Arguments) {\n     struct Stderr;\n     impl io::Writer for Stderr {\n         fn write(&mut self, data: &[u8]) -> io::IoResult<()> {\n-            unsafe {\n+            let _ = unsafe {\n                 libc::write(libc::STDERR_FILENO,\n                             data.as_ptr() as *libc::c_void,\n-                            data.len() as libc::size_t);\n-            }\n+                            data.len() as libc::size_t)\n+            };\n             Ok(()) // just ignore the errors\n         }\n     }"}, {"sha": "5461fc6272d3514c9c754ab4e0a01ce12c37cf20", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94f2dfa8f632542bfb7260ca4b0aadce24061592/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f2dfa8f632542bfb7260ca4b0aadce24061592/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=94f2dfa8f632542bfb7260ca4b0aadce24061592", "patch": "@@ -953,11 +953,11 @@ mod test {\n         spawn(proc() {\n             let port2 = port.recv();\n             let mut stream = TcpWatcher::connect(local_loop(), addr).unwrap();\n-            stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n-            stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n+            stream.write([0, 1, 2, 3, 4, 5, 6, 7]).unwrap();\n+            stream.write([0, 1, 2, 3, 4, 5, 6, 7]).unwrap();\n             port2.recv();\n-            stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n-            stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n+            stream.write([0, 1, 2, 3, 4, 5, 6, 7]).unwrap();\n+            stream.write([0, 1, 2, 3, 4, 5, 6, 7]).unwrap();\n             port2.recv();\n         });\n \n@@ -1008,7 +1008,7 @@ mod test {\n         while stream.is_err() {\n             stream = TcpWatcher::connect(local_loop(), addr);\n         }\n-        stream.unwrap().write([0, 1, 2, 3, 4, 5, 6, 7]);\n+        stream.unwrap().write([0, 1, 2, 3, 4, 5, 6, 7]).unwrap();\n     }\n \n     #[should_fail] #[test]\n@@ -1028,7 +1028,7 @@ mod test {\n             let w = TcpListener::bind(local_loop(), addr).unwrap();\n             let mut w = w.listen().unwrap();\n             chan.send(());\n-            w.accept();\n+            drop(w.accept().unwrap());\n         });\n         port.recv();\n         let _w = TcpWatcher::connect(local_loop(), addr).unwrap();"}, {"sha": "a021a13e2d98d67aa31cf6c42bfc362fe60455f4", "filename": "src/librustuv/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94f2dfa8f632542bfb7260ca4b0aadce24061592/src%2Flibrustuv%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f2dfa8f632542bfb7260ca4b0aadce24061592/src%2Flibrustuv%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fpipe.rs?ref=94f2dfa8f632542bfb7260ca4b0aadce24061592", "patch": "@@ -306,7 +306,7 @@ mod tests {\n             let p = PipeListener::bind(local_loop(), &path2.to_c_str()).unwrap();\n             let mut p = p.listen().unwrap();\n             chan.send(());\n-            p.accept();\n+            drop(p.accept().unwrap());\n         });\n         port.recv();\n         let _c = PipeWatcher::connect(local_loop(), &path.to_c_str()).unwrap();"}, {"sha": "0e1c4225caa930e6f5074e92db9b904833d76c5c", "filename": "src/librustuv/queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94f2dfa8f632542bfb7260ca4b0aadce24061592/src%2Flibrustuv%2Fqueue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f2dfa8f632542bfb7260ca4b0aadce24061592/src%2Flibrustuv%2Fqueue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fqueue.rs?ref=94f2dfa8f632542bfb7260ca4b0aadce24061592", "patch": "@@ -67,7 +67,7 @@ extern fn async_cb(handle: *uvll::uv_async_t, status: c_int) {\n     loop {\n         match state.consumer.pop() {\n             mpsc::Data(Task(task)) => {\n-                task.wake().map(|t| t.reawaken(true));\n+                let _ = task.wake().map(|t| t.reawaken(true));\n             }\n             mpsc::Data(Increment) => unsafe {\n                 if state.refcnt == 0 {"}, {"sha": "2fcc61be79bdfd636b7535a6fae243202b800f51", "filename": "src/librustuv/signal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94f2dfa8f632542bfb7260ca4b0aadce24061592/src%2Flibrustuv%2Fsignal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f2dfa8f632542bfb7260ca4b0aadce24061592/src%2Flibrustuv%2Fsignal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fsignal.rs?ref=94f2dfa8f632542bfb7260ca4b0aadce24061592", "patch": "@@ -86,7 +86,7 @@ mod test {\n                                          chan);\n \n         spawn(proc() {\n-            port.try_recv();\n+            let _ = port.recv_opt();\n         });\n \n         // when we drop the SignalWatcher we're going to destroy the channel,"}, {"sha": "792414238fdaad4d8f594ec8ea034f069c20bf6a", "filename": "src/librustuv/timer.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/94f2dfa8f632542bfb7260ca4b0aadce24061592/src%2Flibrustuv%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f2dfa8f632542bfb7260ca4b0aadce24061592/src%2Flibrustuv%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ftimer.rs?ref=94f2dfa8f632542bfb7260ca4b0aadce24061592", "patch": "@@ -138,11 +138,11 @@ extern fn timer_cb(handle: *uvll::uv_timer_t, status: c_int) {\n \n     match timer.action.take_unwrap() {\n         WakeTask(task) => {\n-            task.wake().map(|t| t.reawaken(true));\n+            let _ = task.wake().map(|t| t.reawaken(true));\n         }\n-        SendOnce(chan) => { chan.try_send(()); }\n+        SendOnce(chan) => { let _ = chan.try_send(()); }\n         SendMany(chan, id) => {\n-            chan.try_send(());\n+            let _ = chan.try_send(());\n \n             // Note that the above operation could have performed some form of\n             // scheduling. This means that the timer may have decided to insert\n@@ -246,7 +246,7 @@ mod test {\n         let timer_port = timer.period(1000);\n \n         spawn(proc() {\n-            timer_port.recv_opt();\n+            let _ = timer_port.recv_opt();\n         });\n \n         // when we drop the TimerWatcher we're going to destroy the channel,\n@@ -260,10 +260,10 @@ mod test {\n         let timer_port = timer.period(1000);\n \n         spawn(proc() {\n-            timer_port.recv_opt();\n+            let _ = timer_port.recv_opt();\n         });\n \n-        timer.oneshot(1);\n+        drop(timer.oneshot(1));\n     }\n     #[test]\n     fn reset_doesnt_switch_tasks2() {\n@@ -272,7 +272,7 @@ mod test {\n         let timer_port = timer.period(1000);\n \n         spawn(proc() {\n-            timer_port.recv_opt();\n+            let _ = timer_port.recv_opt();\n         });\n \n         timer.sleep(1);\n@@ -299,7 +299,7 @@ mod test {\n     #[test]\n     fn receiver_goes_away_oneshot() {\n         let mut timer1 = TimerWatcher::new(local_loop());\n-        timer1.oneshot(1);\n+        drop(timer1.oneshot(1));\n         let mut timer2 = TimerWatcher::new(local_loop());\n         // while sleeping, the prevous timer should fire and not have its\n         // callback do something terrible.\n@@ -309,7 +309,7 @@ mod test {\n     #[test]\n     fn receiver_goes_away_period() {\n         let mut timer1 = TimerWatcher::new(local_loop());\n-        timer1.period(1);\n+        drop(timer1.period(1));\n         let mut timer2 = TimerWatcher::new(local_loop());\n         // while sleeping, the prevous timer should fire and not have its\n         // callback do something terrible."}, {"sha": "8a8ef4a41ec4e758b2a66f535aeb9b220ebaaece", "filename": "src/librustuv/uvio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94f2dfa8f632542bfb7260ca4b0aadce24061592/src%2Flibrustuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f2dfa8f632542bfb7260ca4b0aadce24061592/src%2Flibrustuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvio.rs?ref=94f2dfa8f632542bfb7260ca4b0aadce24061592", "patch": "@@ -71,7 +71,7 @@ impl Drop for UvEventLoop {\n         // after the loop has been closed because during the closing of the loop\n         // the handle is required to be used apparently.\n         let handle = self.uvio.handle_pool.get_ref().handle();\n-        self.uvio.handle_pool.take();\n+        drop(self.uvio.handle_pool.take());\n         self.uvio.loop_.close();\n         unsafe { uvll::free_handle(handle) }\n     }"}]}