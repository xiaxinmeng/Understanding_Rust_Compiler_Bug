{"sha": "adbd47973e7b5c1973d512c67ab8f373556202dc", "node_id": "C_kwDOAAsO6NoAKGFkYmQ0Nzk3M2U3YjVjMTk3M2Q1MTJjNjdhYjhmMzczNTU2MjAyZGM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-06T00:07:41Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-09T12:54:49Z"}, "message": "reduce number of tests being run under Miri", "tree": {"sha": "822500d101324dbdc8751db57b1e5736ec98eb97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/822500d101324dbdc8751db57b1e5736ec98eb97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adbd47973e7b5c1973d512c67ab8f373556202dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adbd47973e7b5c1973d512c67ab8f373556202dc", "html_url": "https://github.com/rust-lang/rust/commit/adbd47973e7b5c1973d512c67ab8f373556202dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adbd47973e7b5c1973d512c67ab8f373556202dc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d13059ae9162997c5b88997bda44443615f12ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d13059ae9162997c5b88997bda44443615f12ab", "html_url": "https://github.com/rust-lang/rust/commit/2d13059ae9162997c5b88997bda44443615f12ab"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "8bf7f5ed3d2a483ec3618f15060ffbc5c49cf04f", "filename": "crates/test_helpers/src/lib.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/adbd47973e7b5c1973d512c67ab8f373556202dc/crates%2Ftest_helpers%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adbd47973e7b5c1973d512c67ab8f373556202dc/crates%2Ftest_helpers%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_helpers%2Fsrc%2Flib.rs?ref=adbd47973e7b5c1973d512c67ab8f373556202dc", "patch": "@@ -77,19 +77,29 @@ impl<T: core::fmt::Debug + DefaultStrategy, const LANES: usize> DefaultStrategy\n     }\n }\n \n+#[cfg(not(miri))]\n+fn make_runner() -> proptest::test_runner::TestRunner {\n+    Default::default()\n+}\n+#[cfg(miri)]\n+fn make_runner() -> proptest::test_runner::TestRunner {\n+    // Only run a few tests on Miri\n+    proptest::test_runner::TestRunner::new(proptest::test_runner::Config::with_cases(4))\n+}\n+\n /// Test a function that takes a single value.\n pub fn test_1<A: core::fmt::Debug + DefaultStrategy>(\n     f: &dyn Fn(A) -> proptest::test_runner::TestCaseResult,\n ) {\n-    let mut runner = proptest::test_runner::TestRunner::default();\n+    let mut runner = make_runner();\n     runner.run(&A::default_strategy(), f).unwrap();\n }\n \n /// Test a function that takes two values.\n pub fn test_2<A: core::fmt::Debug + DefaultStrategy, B: core::fmt::Debug + DefaultStrategy>(\n     f: &dyn Fn(A, B) -> proptest::test_runner::TestCaseResult,\n ) {\n-    let mut runner = proptest::test_runner::TestRunner::default();\n+    let mut runner = make_runner();\n     runner\n         .run(&(A::default_strategy(), B::default_strategy()), |(a, b)| {\n             f(a, b)\n@@ -105,7 +115,7 @@ pub fn test_3<\n >(\n     f: &dyn Fn(A, B, C) -> proptest::test_runner::TestCaseResult,\n ) {\n-    let mut runner = proptest::test_runner::TestRunner::default();\n+    let mut runner = make_runner();\n     runner\n         .run(\n             &(\n@@ -361,24 +371,28 @@ macro_rules! test_lanes {\n \n                 #[test]\n                 #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test::wasm_bindgen_test)]\n+                #[cfg(not(miri))] // Miri intrinsic implementations are uniform and larger tests are sloooow\n                 fn lanes_8() {\n                     implementation::<8>();\n                 }\n \n                 #[test]\n                 #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test::wasm_bindgen_test)]\n+                #[cfg(not(miri))] // Miri intrinsic implementations are uniform and larger tests are sloooow\n                 fn lanes_16() {\n                     implementation::<16>();\n                 }\n \n                 #[test]\n                 #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test::wasm_bindgen_test)]\n+                #[cfg(not(miri))] // Miri intrinsic implementations are uniform and larger tests are sloooow\n                 fn lanes_32() {\n                     implementation::<32>();\n                 }\n \n                 #[test]\n                 #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test::wasm_bindgen_test)]\n+                #[cfg(not(miri))] // Miri intrinsic implementations are uniform and larger tests are sloooow\n                 fn lanes_64() {\n                     implementation::<64>();\n                 }"}]}