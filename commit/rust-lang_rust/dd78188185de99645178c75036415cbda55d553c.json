{"sha": "dd78188185de99645178c75036415cbda55d553c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNzgxODgxODVkZTk5NjQ1MTc4Yzc1MDM2NDE1Y2JkYTU1ZDU1M2M=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-11-10T08:48:04Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-11-10T09:02:33Z"}, "message": "add macro_rules test regarding braces", "tree": {"sha": "9dd12504d23d96ff9776b3bdcd88410abdb0f3b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dd12504d23d96ff9776b3bdcd88410abdb0f3b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd78188185de99645178c75036415cbda55d553c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd78188185de99645178c75036415cbda55d553c", "html_url": "https://github.com/rust-lang/rust/commit/dd78188185de99645178c75036415cbda55d553c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd78188185de99645178c75036415cbda55d553c/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "359031e1d38a5705fa85b866130379da98d54329", "url": "https://api.github.com/repos/rust-lang/rust/commits/359031e1d38a5705fa85b866130379da98d54329", "html_url": "https://github.com/rust-lang/rust/commit/359031e1d38a5705fa85b866130379da98d54329"}], "stats": {"total": 149, "additions": 149, "deletions": 0}, "files": [{"sha": "f6e9aabd907744151518f582e14cea8647072a41", "filename": "src/test/ui/const-generics/macro_rules-braces.full.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/dd78188185de99645178c75036415cbda55d553c/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd78188185de99645178c75036415cbda55d553c/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.full.stderr?ref=dd78188185de99645178c75036415cbda55d553c", "patch": "@@ -0,0 +1,61 @@\n+error: expressions must be enclosed in braces to be used as const generic arguments\n+  --> $DIR/macro_rules-braces.rs:34:17\n+   |\n+LL |     let _: baz!(N);\n+   |                 ^\n+   |\n+help: enclose the `const` expression in braces\n+   |\n+LL |     let _: baz!({ N });\n+   |                 ^   ^\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/macro_rules-braces.rs:10:13\n+   |\n+LL |             [u8; $x]\n+   |             ^^^^^^^^\n+...\n+LL |     let _: foo!({{ N }});\n+   |            ------------- in this macro invocation\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/macro_rules-braces.rs:15:13\n+   |\n+LL |             [u8; { $x }]\n+   |             ^^^^^^^^^^^^\n+...\n+LL |     let _: bar!({ N });\n+   |            ----------- in this macro invocation\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/macro_rules-braces.rs:20:13\n+   |\n+LL |             Foo<$x>\n+   |             ^^^^^^^\n+...\n+LL |     let _: baz!({{ N }});\n+   |            ------------- in this macro invocation\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/macro_rules-braces.rs:25:13\n+   |\n+LL |             Foo<{ $x }>\n+   |             ^^^^^^^^^^^\n+...\n+LL |     let _: biz!({ N });\n+   |            ----------- in this macro invocation\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "1fe18e3fc0231c03616aa291851476da25862647", "filename": "src/test/ui/const-generics/macro_rules-braces.min.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/dd78188185de99645178c75036415cbda55d553c/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd78188185de99645178c75036415cbda55d553c/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr?ref=dd78188185de99645178c75036415cbda55d553c", "patch": "@@ -0,0 +1,45 @@\n+error: expressions must be enclosed in braces to be used as const generic arguments\n+  --> $DIR/macro_rules-braces.rs:34:17\n+   |\n+LL |     let _: baz!(N);\n+   |                 ^\n+   |\n+help: enclose the `const` expression in braces\n+   |\n+LL |     let _: baz!({ N });\n+   |                 ^   ^\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/macro_rules-braces.rs:31:20\n+   |\n+LL |     let _: foo!({{ N }});\n+   |                    ^ cannot perform const operation using `N`\n+   |\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/macro_rules-braces.rs:33:19\n+   |\n+LL |     let _: bar!({ N });\n+   |                   ^ cannot perform const operation using `N`\n+   |\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/macro_rules-braces.rs:36:20\n+   |\n+LL |     let _: baz!({{ N }});\n+   |                    ^ cannot perform const operation using `N`\n+   |\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/macro_rules-braces.rs:38:19\n+   |\n+LL |     let _: biz!({ N });\n+   |                   ^ cannot perform const operation using `N`\n+   |\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "c3e2c8ba20359ff020cc1f28059f583b5747b7ca", "filename": "src/test/ui/const-generics/macro_rules-braces.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/dd78188185de99645178c75036415cbda55d553c/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd78188185de99645178c75036415cbda55d553c/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.rs?ref=dd78188185de99645178c75036415cbda55d553c", "patch": "@@ -0,0 +1,43 @@\n+// revisions: full min\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+fn test<const N: usize>() {\n+    struct Foo<const M: usize>;\n+    macro_rules! foo {\n+        ($x:expr) => {\n+            [u8; $x] //[full]~ ERROR constant expression depends\n+        }\n+    }\n+    macro_rules! bar {\n+        ($x:expr) => {\n+            [u8; { $x }] //[full]~ ERROR constant expression depends\n+        }\n+    }\n+    macro_rules! baz {\n+        ( $x:expr) => {\n+            Foo<$x> //[full]~ ERROR constant expression depends\n+        }\n+    }\n+    macro_rules! biz {\n+        ($x:expr) => {\n+            Foo<{ $x }> //[full]~ ERROR constant expression depends\n+        };\n+    }\n+\n+    let _: foo!(N);\n+    let _: foo!({ N });\n+    let _: foo!({{ N }}); //[min]~ ERROR generic parameters may not\n+    let _: bar!(N);\n+    let _: bar!({ N }); //[min]~ ERROR generic parameters may not\n+    let _: baz!(N); //~ ERROR expressions must be enclosed in braces\n+    let _: baz!({ N });\n+    let _: baz!({{ N }}); //[min]~ ERROR generic parameters may not\n+    let _: biz!(N);\n+    let _: biz!({ N }); //[min]~ ERROR generic parameters may not\n+}\n+\n+fn main() {\n+    test::<3>();\n+}"}]}