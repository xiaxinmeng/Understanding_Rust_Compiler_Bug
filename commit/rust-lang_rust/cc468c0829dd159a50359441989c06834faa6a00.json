{"sha": "cc468c0829dd159a50359441989c06834faa6a00", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNDY4YzA4MjlkZDE1OWE1MDM1OTQ0MTk4OWMwNjgzNGZhYTZhMDA=", "commit": {"author": {"name": "Olivia Crain", "email": "olivia@olivia.dev", "date": "2020-10-25T00:22:53Z"}, "committer": {"name": "Olivia Crain", "email": "olivia@olivia.dev", "date": "2020-10-25T00:22:53Z"}, "message": "Use check-pass in single-use-lifetime ui test suite", "tree": {"sha": "8f02fa99b43b79a8520ea63e5c97731539b0a8aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f02fa99b43b79a8520ea63e5c97731539b0a8aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc468c0829dd159a50359441989c06834faa6a00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc468c0829dd159a50359441989c06834faa6a00", "html_url": "https://github.com/rust-lang/rust/commit/cc468c0829dd159a50359441989c06834faa6a00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc468c0829dd159a50359441989c06834faa6a00/comments", "author": {"login": "oliviacrain", "id": 47097842, "node_id": "MDQ6VXNlcjQ3MDk3ODQy", "avatar_url": "https://avatars.githubusercontent.com/u/47097842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oliviacrain", "html_url": "https://github.com/oliviacrain", "followers_url": "https://api.github.com/users/oliviacrain/followers", "following_url": "https://api.github.com/users/oliviacrain/following{/other_user}", "gists_url": "https://api.github.com/users/oliviacrain/gists{/gist_id}", "starred_url": "https://api.github.com/users/oliviacrain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oliviacrain/subscriptions", "organizations_url": "https://api.github.com/users/oliviacrain/orgs", "repos_url": "https://api.github.com/users/oliviacrain/repos", "events_url": "https://api.github.com/users/oliviacrain/events{/privacy}", "received_events_url": "https://api.github.com/users/oliviacrain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oliviacrain", "id": 47097842, "node_id": "MDQ6VXNlcjQ3MDk3ODQy", "avatar_url": "https://avatars.githubusercontent.com/u/47097842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oliviacrain", "html_url": "https://github.com/oliviacrain", "followers_url": "https://api.github.com/users/oliviacrain/followers", "following_url": "https://api.github.com/users/oliviacrain/following{/other_user}", "gists_url": "https://api.github.com/users/oliviacrain/gists{/gist_id}", "starred_url": "https://api.github.com/users/oliviacrain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oliviacrain/subscriptions", "organizations_url": "https://api.github.com/users/oliviacrain/orgs", "repos_url": "https://api.github.com/users/oliviacrain/repos", "events_url": "https://api.github.com/users/oliviacrain/events{/privacy}", "received_events_url": "https://api.github.com/users/oliviacrain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffa2e7ae8fbf9badc035740db949b9dae271c29f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffa2e7ae8fbf9badc035740db949b9dae271c29f", "html_url": "https://github.com/rust-lang/rust/commit/ffa2e7ae8fbf9badc035740db949b9dae271c29f"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "7b7ff08da7cac4b587d22700dce1ba8a3cac1729", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-return.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc468c0829dd159a50359441989c06834faa6a00/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc468c0829dd159a50359441989c06834faa6a00/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-return.rs?ref=cc468c0829dd159a50359441989c06834faa6a00", "patch": "@@ -5,11 +5,12 @@\n // (Normally, using `'static` would be preferred, but there are\n // times when that is not what you want.)\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![deny(single_use_lifetimes)]\n \n-fn b<'a>() -> &'a u32 { // OK: used only in return type\n+// OK: used only in return type\n+fn b<'a>() -> &'a u32 {\n     &22\n }\n "}, {"sha": "9082aa68ed22bede7e699d917134c664546c659d", "filename": "src/test/ui/single-use-lifetime/one-use-in-struct.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cc468c0829dd159a50359441989c06834faa6a00/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc468c0829dd159a50359441989c06834faa6a00/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-struct.rs?ref=cc468c0829dd159a50359441989c06834faa6a00", "patch": "@@ -2,27 +2,26 @@\n // even when they are only used once (since to not use a named\n // lifetime is illegal!)\n //\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n struct Foo<'f> {\n-    data: &'f u32\n+    data: &'f u32,\n }\n \n enum Bar<'f> {\n-    Data(&'f u32)\n+    Data(&'f u32),\n }\n \n-trait Baz<'f> { }\n+trait Baz<'f> {}\n \n // `Derive`d impls shouldn't trigger a warning, either (Issue #53738).\n-\n #[derive(Debug)]\n struct Quux<'a> {\n     priors: &'a u32,\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "f80f3f63c66d920bd6fb747a2559ef178b39f6d9", "filename": "src/test/ui/single-use-lifetime/two-uses-in-fn-argument-and-return.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cc468c0829dd159a50359441989c06834faa6a00/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-argument-and-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc468c0829dd159a50359441989c06834faa6a00/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-argument-and-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-argument-and-return.rs?ref=cc468c0829dd159a50359441989c06834faa6a00", "patch": "@@ -1,14 +1,15 @@\n // Test that we DO NOT warn when lifetime name is used in\n // both the argument and return.\n //\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n-fn c<'a>(x: &'a u32) -> &'a u32 { // OK: used twice\n+// OK: used twice\n+fn c<'a>(x: &'a u32) -> &'a u32 {\n     &22\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "51724ebf898884f65600d83d5574a04767848383", "filename": "src/test/ui/single-use-lifetime/two-uses-in-fn-arguments.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc468c0829dd159a50359441989c06834faa6a00/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc468c0829dd159a50359441989c06834faa6a00/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-arguments.rs?ref=cc468c0829dd159a50359441989c06834faa6a00", "patch": "@@ -1,16 +1,16 @@\n // Test that we DO NOT warn when lifetime name is used multiple\n // arguments, or more than once in a single argument.\n //\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n-fn c<'a>(x: &'a u32, y: &'a u32) { // OK: used twice\n-}\n+// OK: used twice\n+fn c<'a>(x: &'a u32, y: &'a u32) {}\n \n-fn d<'a>(x: (&'a u32, &'a u32)) { // OK: used twice\n-}\n+// OK: used twice\n+fn d<'a>(x: (&'a u32, &'a u32)) {}\n \n-fn main() { }\n+fn main() {}"}, {"sha": "125a395db3be31076460a8e06ba401785545f7c7", "filename": "src/test/ui/single-use-lifetime/two-uses-in-inherent-impl-header.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cc468c0829dd159a50359441989c06834faa6a00/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-impl-header.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc468c0829dd159a50359441989c06834faa6a00/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-impl-header.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-impl-header.rs?ref=cc468c0829dd159a50359441989c06834faa6a00", "patch": "@@ -1,18 +1,17 @@\n // Test that we DO NOT warn for a lifetime used twice in an impl.\n //\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n struct Foo<'f> {\n-    data: &'f u32\n+    data: &'f u32,\n }\n \n impl<'f> Foo<'f> {\n-    fn inherent_a(&self, data: &'f u32) {\n-    }\n+    fn inherent_a(&self, data: &'f u32) {}\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "16431a39fd0e558b0f703d28a93d97f1894f4b85", "filename": "src/test/ui/single-use-lifetime/two-uses-in-trait-impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc468c0829dd159a50359441989c06834faa6a00/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc468c0829dd159a50359441989c06834faa6a00/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-trait-impl.rs?ref=cc468c0829dd159a50359441989c06834faa6a00", "patch": "@@ -1,14 +1,14 @@\n // Test that we DO NOT warn for a lifetime on an impl used in both\n // header and in an associated type.\n //\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n struct Foo<'f> {\n-    data: &'f u32\n+    data: &'f u32,\n }\n \n impl<'f> Iterator for Foo<'f> {\n@@ -19,4 +19,4 @@ impl<'f> Iterator for Foo<'f> {\n     }\n }\n \n-fn main() { }\n+fn main() {}"}]}