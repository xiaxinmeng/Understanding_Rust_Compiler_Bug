{"sha": "629c68e80d3d9473226c8f3713e95a2011999f2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyOWM2OGU4MGQzZDk0NzMyMjZjOGYzNzEzZTk1YTIwMTE5OTlmMmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-11T11:16:15Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-11T11:16:15Z"}, "message": "internal: document that ascription is preferred to a turbo fish", "tree": {"sha": "6bfb3733a706a15646dd1bed14edd018db6fcd5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bfb3733a706a15646dd1bed14edd018db6fcd5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/629c68e80d3d9473226c8f3713e95a2011999f2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/629c68e80d3d9473226c8f3713e95a2011999f2c", "html_url": "https://github.com/rust-lang/rust/commit/629c68e80d3d9473226c8f3713e95a2011999f2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/629c68e80d3d9473226c8f3713e95a2011999f2c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "145b51f9daf5371f1754c09eb2e3a77e0a24a0dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/145b51f9daf5371f1754c09eb2e3a77e0a24a0dc", "html_url": "https://github.com/rust-lang/rust/commit/145b51f9daf5371f1754c09eb2e3a77e0a24a0dc"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "775bd367dee76ab77b0907c3ca4d1ac199416d9a", "filename": "crates/ide_assists/src/handlers/sort_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/629c68e80d3d9473226c8f3713e95a2011999f2c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629c68e80d3d9473226c8f3713e95a2011999f2c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs?ref=629c68e80d3d9473226c8f3713e95a2011999f2c", "patch": "@@ -131,7 +131,7 @@ impl AddRewrite for Assists {\n         target: TextRange,\n     ) -> Option<()> {\n         self.add(AssistId(\"sort_items\", AssistKind::RefactorRewrite), label, target, |builder| {\n-            let mutable: Vec<_> = old.into_iter().map(|it| builder.make_mut(it)).collect();\n+            let mutable: Vec<T> = old.into_iter().map(|it| builder.make_mut(it)).collect();\n             mutable\n                 .into_iter()\n                 .zip(new)"}, {"sha": "e2d74782ae526ed8364996d904ad8c55e2bdc774", "filename": "crates/vfs/src/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/629c68e80d3d9473226c8f3713e95a2011999f2c/crates%2Fvfs%2Fsrc%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629c68e80d3d9473226c8f3713e95a2011999f2c/crates%2Fvfs%2Fsrc%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Floader.rs?ref=629c68e80d3d9473226c8f3713e95a2011999f2c", "patch": "@@ -161,7 +161,7 @@ impl Directories {\n     ///   - This path is longer than any element in `self.exclude` that is a prefix\n     ///     of `path`. In case of equality, exclusion wins.\n     fn includes_path(&self, path: &AbsPath) -> bool {\n-        let mut include = None::<&AbsPathBuf>;\n+        let mut include: Option<&AbsPathBuf> = None;\n         for incl in &self.include {\n             if path.starts_with(incl) {\n                 include = Some(match include {"}, {"sha": "ac9ad8fc282e5df433471a94e5fcd0a17afd423a", "filename": "docs/dev/style.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/629c68e80d3d9473226c8f3713e95a2011999f2c/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/629c68e80d3d9473226c8f3713e95a2011999f2c/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=629c68e80d3d9473226c8f3713e95a2011999f2c", "patch": "@@ -950,6 +950,26 @@ At the same time, it is more crowded -- it takes more time to visually scan it.\n **Rationale:** consistency, playing to language's strengths.\n Rust has first-class support for imperative control flow constructs like `for` and `if`, while functions are less first-class due to lack of universal function type, currying, and non-first-class effects (`?`, `.await`).\n \n+## Turbofish\n+\n+Prefer type ascription over the turbofish.\n+When ascribing types, avoid `_`\n+\n+```rust\n+// GOOD\n+let mutable: Vec<T> = old.into_iter().map(|it| builder.make_mut(it)).collect();\n+\n+// BAD\n+let mutable: Vec<_> = old.into_iter().map(|it| builder.make_mut(it)).collect();\n+\n+// BAD\n+let mutable = old.into_iter().map(|it| builder.make_mut(it)).collect::<Vec<_>>();\n+```\n+\n+**Rationale:** consistency, readability.\n+If compiler struggles to infer the type, the human would as well.\n+Having the result type specified up-front helps with understanding what the chain of iterator methods is doing.\n+\n ## Helper Functions\n \n Avoid creating singe-use helper functions:"}]}