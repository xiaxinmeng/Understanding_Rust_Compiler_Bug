{"sha": "c09f5b6a6b82f785165c68546d323011fad052c0", "node_id": "C_kwDOAAsO6NoAKGMwOWY1YjZhNmI4MmY3ODUxNjVjNjg1NDZkMzIzMDExZmFkMDUyYzA", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-19T23:46:37Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-23T20:33:02Z"}, "message": "Add `mk_canonical_var_infos_from_iter`.\n\nIt's missing, and is useful in two places.", "tree": {"sha": "193050d25af31054ad021fc22633ec753cc2b44e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/193050d25af31054ad021fc22633ec753cc2b44e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c09f5b6a6b82f785165c68546d323011fad052c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c09f5b6a6b82f785165c68546d323011fad052c0", "html_url": "https://github.com/rust-lang/rust/commit/c09f5b6a6b82f785165c68546d323011fad052c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c09f5b6a6b82f785165c68546d323011fad052c0/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11c2c596e4263787f63bcb7ecd317359f2d704c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/11c2c596e4263787f63bcb7ecd317359f2d704c1", "html_url": "https://github.com/rust-lang/rust/commit/11c2c596e4263787f63bcb7ecd317359f2d704c1"}], "stats": {"total": 51, "additions": 28, "deletions": 23}, "files": [{"sha": "3ce80e06ad9ef518689e14704f03592703130bd0", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c09f5b6a6b82f785165c68546d323011fad052c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09f5b6a6b82f785165c68546d323011fad052c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=c09f5b6a6b82f785165c68546d323011fad052c0", "patch": "@@ -270,9 +270,9 @@ impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> Decodable<D> for ty::Region<'tcx> {\n impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> Decodable<D> for CanonicalVarInfos<'tcx> {\n     fn decode(decoder: &mut D) -> Self {\n         let len = decoder.read_usize();\n-        let interned: Vec<CanonicalVarInfo<'tcx>> =\n-            (0..len).map(|_| Decodable::decode(decoder)).collect();\n-        decoder.interner().mk_canonical_var_infos(&interned)\n+        decoder.interner().mk_canonical_var_infos_from_iter(\n+            (0..len).map::<CanonicalVarInfo<'tcx>, _>(|_| Decodable::decode(decoder)),\n+        )\n     }\n }\n "}, {"sha": "212dec94130389357766657e250fac09a73ab72c", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c09f5b6a6b82f785165c68546d323011fad052c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09f5b6a6b82f785165c68546d323011fad052c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=c09f5b6a6b82f785165c68546d323011fad052c0", "patch": "@@ -2253,6 +2253,14 @@ impl<'tcx> TyCtxt<'tcx> {\n         T::collect_and_apply(iter, |xs| self.mk_substs(xs))\n     }\n \n+    pub fn mk_canonical_var_infos_from_iter<I, T>(self, iter: I) -> T::Output\n+    where\n+        I: Iterator<Item = T>,\n+        T: CollectAndApply<CanonicalVarInfo<'tcx>, &'tcx List<CanonicalVarInfo<'tcx>>>,\n+    {\n+        T::collect_and_apply(iter, |xs| self.mk_canonical_var_infos(xs))\n+    }\n+\n     pub fn mk_place_elems_from_iter<I, T>(self, iter: I) -> T::Output\n     where\n         I: Iterator<Item = T>,"}, {"sha": "a5ebc26a8bc96da18cad6f560366c35210d1f53c", "filename": "compiler/rustc_traits/src/chalk/mod.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c09f5b6a6b82f785165c68546d323011fad052c0/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09f5b6a6b82f785165c68546d323011fad052c0/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs?ref=c09f5b6a6b82f785165c68546d323011fad052c0", "patch": "@@ -102,31 +102,28 @@ pub(crate) fn evaluate_goal<'tcx>(\n                 .iter()\n                 .map(|p| p.lower_into(interner).fold_with(&mut reverse_param_substitutor)),\n         );\n-        let variables: Vec<_> = binders\n-            .iter(interner)\n-            .map(|var| {\n-                let kind = match var.kind {\n-                    chalk_ir::VariableKind::Ty(ty_kind) => CanonicalVarKind::Ty(match ty_kind {\n-                        chalk_ir::TyVariableKind::General => CanonicalTyVarKind::General(\n-                            ty::UniverseIndex::from_usize(var.skip_kind().counter),\n-                        ),\n-                        chalk_ir::TyVariableKind::Integer => CanonicalTyVarKind::Int,\n-                        chalk_ir::TyVariableKind::Float => CanonicalTyVarKind::Float,\n-                    }),\n-                    chalk_ir::VariableKind::Lifetime => CanonicalVarKind::Region(\n+        let variables = binders.iter(interner).map(|var| {\n+            let kind = match var.kind {\n+                chalk_ir::VariableKind::Ty(ty_kind) => CanonicalVarKind::Ty(match ty_kind {\n+                    chalk_ir::TyVariableKind::General => CanonicalTyVarKind::General(\n                         ty::UniverseIndex::from_usize(var.skip_kind().counter),\n                     ),\n-                    // FIXME(compiler-errors): We don't currently have a way of turning\n-                    // a Chalk ty back into a rustc ty, right?\n-                    chalk_ir::VariableKind::Const(_) => todo!(),\n-                };\n-                CanonicalVarInfo { kind }\n-            })\n-            .collect();\n+                    chalk_ir::TyVariableKind::Integer => CanonicalTyVarKind::Int,\n+                    chalk_ir::TyVariableKind::Float => CanonicalTyVarKind::Float,\n+                }),\n+                chalk_ir::VariableKind::Lifetime => {\n+                    CanonicalVarKind::Region(ty::UniverseIndex::from_usize(var.skip_kind().counter))\n+                }\n+                // FIXME(compiler-errors): We don't currently have a way of turning\n+                // a Chalk ty back into a rustc ty, right?\n+                chalk_ir::VariableKind::Const(_) => todo!(),\n+            };\n+            CanonicalVarInfo { kind }\n+        });\n         let max_universe = binders.iter(interner).map(|v| v.skip_kind().counter).max().unwrap_or(0);\n         let sol = Canonical {\n             max_universe: ty::UniverseIndex::from_usize(max_universe),\n-            variables: tcx.mk_canonical_var_infos(&variables),\n+            variables: tcx.mk_canonical_var_infos_from_iter(variables),\n             value: QueryResponse {\n                 var_values: CanonicalVarValues { var_values },\n                 region_constraints: QueryRegionConstraints::default(),"}]}