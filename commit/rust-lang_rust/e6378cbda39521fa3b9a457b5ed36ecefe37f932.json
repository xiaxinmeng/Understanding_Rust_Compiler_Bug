{"sha": "e6378cbda39521fa3b9a457b5ed36ecefe37f932", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2Mzc4Y2JkYTM5NTIxZmEzYjlhNDU3YjVlZDM2ZWNlZmUzN2Y5MzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-06T18:07:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-06T18:07:41Z"}, "message": "Auto merge of #25153 - jgallagher:rwlock-try-write, r=alexcrichton\n\nPreviously, `try_write` actually only obtained shared read access (but would return a `RwLockWriteGuard` if that access was successful).\r\n\r\nAlso updates the docs for `try_read` and `try_write`, which were leftover from when those methods returned `Option` instead of `Result`.", "tree": {"sha": "0793ba4708b6c1582bac1fa955e11961c1fd4269", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0793ba4708b6c1582bac1fa955e11961c1fd4269"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6378cbda39521fa3b9a457b5ed36ecefe37f932", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6378cbda39521fa3b9a457b5ed36ecefe37f932", "html_url": "https://github.com/rust-lang/rust/commit/e6378cbda39521fa3b9a457b5ed36ecefe37f932", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6378cbda39521fa3b9a457b5ed36ecefe37f932/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0848d1c6a5908a9c3e6545e8a527027b164c7d05", "url": "https://api.github.com/repos/rust-lang/rust/commits/0848d1c6a5908a9c3e6545e8a527027b164c7d05", "html_url": "https://github.com/rust-lang/rust/commit/0848d1c6a5908a9c3e6545e8a527027b164c7d05"}, {"sha": "833fc273a7e63edea4f44e18112facdafe9185f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/833fc273a7e63edea4f44e18112facdafe9185f6", "html_url": "https://github.com/rust-lang/rust/commit/833fc273a7e63edea4f44e18112facdafe9185f6"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "d70c0a4b43836c0552cc613026239126e18843bb", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e6378cbda39521fa3b9a457b5ed36ecefe37f932/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6378cbda39521fa3b9a457b5ed36ecefe37f932/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=e6378cbda39521fa3b9a457b5ed36ecefe37f932", "patch": "@@ -171,14 +171,16 @@ impl<T: ?Sized> RwLock<T> {\n         RwLockReadGuard::new(&*self.inner, &self.data)\n     }\n \n-    /// Attempts to acquire this lock with shared read access.\n+    /// Attempts to acquire this rwlock with shared read access.\n+    ///\n+    /// If the access could not be granted at this time, then `Err` is returned.\n+    /// Otherwise, an RAII guard is returned which will release the shared access\n+    /// when it is dropped.\n     ///\n-    /// This function will never block and will return immediately if `read`\n-    /// would otherwise succeed. Returns `Some` of an RAII guard which will\n-    /// release the shared access of this thread when dropped, or `None` if the\n-    /// access could not be granted. This method does not provide any\n-    /// guarantees with respect to the ordering of whether contentious readers\n-    /// or writers will acquire the lock first.\n+    /// This function does not block.\n+    ///\n+    /// This function does not provide any guarantees with respect to the ordering\n+    /// of whether contentious readers or writers will acquire the lock first.\n     ///\n     /// # Failure\n     ///\n@@ -219,9 +221,14 @@ impl<T: ?Sized> RwLock<T> {\n \n     /// Attempts to lock this rwlock with exclusive write access.\n     ///\n-    /// This function does not ever block, and it will return `None` if a call\n-    /// to `write` would otherwise block. If successful, an RAII guard is\n-    /// returned.\n+    /// If the lock could not be acquired at this time, then `Err` is returned.\n+    /// Otherwise, an RAII guard is returned which will release the lock when\n+    /// it is dropped.\n+    ///\n+    /// This function does not block.\n+    ///\n+    /// This function does not provide any guarantees with respect to the ordering\n+    /// of whether contentious readers or writers will acquire the lock first.\n     ///\n     /// # Failure\n     ///\n@@ -232,7 +239,7 @@ impl<T: ?Sized> RwLock<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn try_write(&self) -> TryLockResult<RwLockWriteGuard<T>> {\n-        if unsafe { self.inner.lock.try_read() } {\n+        if unsafe { self.inner.lock.try_write() } {\n             Ok(try!(RwLockWriteGuard::new(&*self.inner, &self.data)))\n         } else {\n             Err(TryLockError::WouldBlock)\n@@ -413,7 +420,7 @@ mod tests {\n     use rand::{self, Rng};\n     use sync::mpsc::channel;\n     use thread;\n-    use sync::{Arc, RwLock, StaticRwLock, RW_LOCK_INIT};\n+    use sync::{Arc, RwLock, StaticRwLock, TryLockError, RW_LOCK_INIT};\n \n     #[test]\n     fn smoke() {\n@@ -577,4 +584,21 @@ mod tests {\n         let comp: &[i32] = &[4, 2, 5];\n         assert_eq!(&*rw.read().unwrap(), comp);\n     }\n+\n+    #[test]\n+    fn test_rwlock_try_write() {\n+        use mem::drop;\n+\n+        let lock = RwLock::new(0isize);\n+        let read_guard = lock.read().unwrap();\n+\n+        let write_result = lock.try_write();\n+        match write_result {\n+            Err(TryLockError::WouldBlock) => (),\n+            Ok(_) => assert!(false, \"try_write should not succeed while read_guard is in scope\"),\n+            Err(_) => assert!(false, \"unexpected error\"),\n+        }\n+\n+        drop(read_guard);\n+    }\n }"}]}