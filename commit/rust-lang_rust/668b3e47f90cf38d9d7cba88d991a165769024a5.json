{"sha": "668b3e47f90cf38d9d7cba88d991a165769024a5", "node_id": "C_kwDOAAsO6NoAKDY2OGIzZTQ3ZjkwY2YzOGQ5ZDdjYmE4OGQ5OTFhMTY1NzY5MDI0YTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-17T16:08:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-17T16:08:45Z"}, "message": "Auto merge of #8218 - Jarcho:redundant_slicing_deref, r=camsteffen\n\nImprove `redundant_slicing` lint\n\nfixes #7972\nfixes #7257\n\nThis can supersede #7976\n\nchangelog: Fix suggestion for `redundant_slicing` when re-borrowing for a method call\nchangelog: New lint `deref_as_slicing`", "tree": {"sha": "50407cd4c66284060cd81d0a4bc5a3e8d3a04821", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50407cd4c66284060cd81d0a4bc5a3e8d3a04821"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/668b3e47f90cf38d9d7cba88d991a165769024a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/668b3e47f90cf38d9d7cba88d991a165769024a5", "html_url": "https://github.com/rust-lang/rust/commit/668b3e47f90cf38d9d7cba88d991a165769024a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/668b3e47f90cf38d9d7cba88d991a165769024a5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ee2081fb65691da4b7a9008dc253e048c5e809f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ee2081fb65691da4b7a9008dc253e048c5e809f", "html_url": "https://github.com/rust-lang/rust/commit/7ee2081fb65691da4b7a9008dc253e048c5e809f"}, {"sha": "7724d6773d3fe4ac1e57e4e13d67fedbf7cae0ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/7724d6773d3fe4ac1e57e4e13d67fedbf7cae0ba", "html_url": "https://github.com/rust-lang/rust/commit/7724d6773d3fe4ac1e57e4e13d67fedbf7cae0ba"}], "stats": {"total": 343, "additions": 295, "deletions": 48}, "files": [{"sha": "f41dcce0e000fcad526dae531ec5f351cfc1bc39", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/668b3e47f90cf38d9d7cba88d991a165769024a5/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/668b3e47f90cf38d9d7cba88d991a165769024a5/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=668b3e47f90cf38d9d7cba88d991a165769024a5", "patch": "@@ -3105,6 +3105,7 @@ Released 2018-09-13\n [`deprecated_cfg_attr`]: https://rust-lang.github.io/rust-clippy/master/index.html#deprecated_cfg_attr\n [`deprecated_semver`]: https://rust-lang.github.io/rust-clippy/master/index.html#deprecated_semver\n [`deref_addrof`]: https://rust-lang.github.io/rust-clippy/master/index.html#deref_addrof\n+[`deref_by_slicing`]: https://rust-lang.github.io/rust-clippy/master/index.html#deref_by_slicing\n [`derivable_impls`]: https://rust-lang.github.io/rust-clippy/master/index.html#derivable_impls\n [`derive_hash_xor_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_hash_xor_eq\n [`derive_ord_xor_partial_ord`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_ord_xor_partial_ord"}, {"sha": "df40ca4631413f137bceb2ccd9114ed1343e0239", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/668b3e47f90cf38d9d7cba88d991a165769024a5/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668b3e47f90cf38d9d7cba88d991a165769024a5/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=668b3e47f90cf38d9d7cba88d991a165769024a5", "patch": "@@ -422,6 +422,7 @@ store.register_lints(&[\n     redundant_else::REDUNDANT_ELSE,\n     redundant_field_names::REDUNDANT_FIELD_NAMES,\n     redundant_pub_crate::REDUNDANT_PUB_CRATE,\n+    redundant_slicing::DEREF_BY_SLICING,\n     redundant_slicing::REDUNDANT_SLICING,\n     redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES,\n     ref_option_ref::REF_OPTION_REF,"}, {"sha": "f89f35b885c15a377c772e103254c0b0884aeebf", "filename": "clippy_lints/src/lib.register_restriction.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/668b3e47f90cf38d9d7cba88d991a165769024a5/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668b3e47f90cf38d9d7cba88d991a165769024a5/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_restriction.rs?ref=668b3e47f90cf38d9d7cba88d991a165769024a5", "patch": "@@ -51,6 +51,7 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(panic_unimplemented::UNIMPLEMENTED),\n     LintId::of(panic_unimplemented::UNREACHABLE),\n     LintId::of(pattern_type_mismatch::PATTERN_TYPE_MISMATCH),\n+    LintId::of(redundant_slicing::DEREF_BY_SLICING),\n     LintId::of(same_name_method::SAME_NAME_METHOD),\n     LintId::of(shadow::SHADOW_REUSE),\n     LintId::of(shadow::SHADOW_SAME),"}, {"sha": "25a9072ef6e0cf0a2ccd2eb395ec90d49c6cf3c0", "filename": "clippy_lints/src/redundant_slicing.rs", "status": "modified", "additions": 102, "deletions": 22, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/668b3e47f90cf38d9d7cba88d991a165769024a5/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668b3e47f90cf38d9d7cba88d991a165769024a5/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_slicing.rs?ref=668b3e47f90cf38d9d7cba88d991a165769024a5", "patch": "@@ -1,11 +1,14 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::get_parent_expr;\n use clippy_utils::source::snippet_with_context;\n-use clippy_utils::ty::is_type_lang_item;\n+use clippy_utils::ty::{is_type_lang_item, peel_mid_ty_refs};\n use if_chain::if_chain;\n+use rustc_ast::util::parser::PREC_PREFIX;\n use rustc_errors::Applicability;\n use rustc_hir::{BorrowKind, Expr, ExprKind, LangItem, Mutability};\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_lint::{LateContext, LateLintPass, Lint};\n+use rustc_middle::ty::adjustment::{Adjust, AutoBorrow, AutoBorrowMutability};\n+use rustc_middle::ty::subst::GenericArg;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -39,7 +42,34 @@ declare_clippy_lint! {\n     \"redundant slicing of the whole range of a type\"\n }\n \n-declare_lint_pass!(RedundantSlicing => [REDUNDANT_SLICING]);\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for slicing expressions which are equivalent to dereferencing the\n+    /// value.\n+    ///\n+    /// ### Why is this bad?\n+    /// Some people may prefer to dereference rather than slice.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let vec = vec![1, 2, 3];\n+    /// let slice = &vec[..];\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let vec = vec![1, 2, 3];\n+    /// let slice = &*vec;\n+    /// ```\n+    #[clippy::version = \"1.60.0\"]\n+    pub DEREF_BY_SLICING,\n+    restriction,\n+    \"slicing instead of dereferencing\"\n+}\n+\n+declare_lint_pass!(RedundantSlicing => [REDUNDANT_SLICING, DEREF_BY_SLICING]);\n+\n+static REDUNDANT_SLICING_LINT: (&Lint, &str) = (REDUNDANT_SLICING, \"redundant slicing of the whole range\");\n+static DEREF_BY_SLICING_LINT: (&Lint, &str) = (DEREF_BY_SLICING, \"slicing when dereferencing would work\");\n \n impl<'tcx> LateLintPass<'tcx> for RedundantSlicing {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n@@ -53,34 +83,84 @@ impl<'tcx> LateLintPass<'tcx> for RedundantSlicing {\n             if addressee.span.ctxt() == ctxt;\n             if let ExprKind::Index(indexed, range) = addressee.kind;\n             if is_type_lang_item(cx, cx.typeck_results().expr_ty_adjusted(range), LangItem::RangeFull);\n-            if cx.typeck_results().expr_ty(expr) == cx.typeck_results().expr_ty(indexed);\n             then {\n+                let (expr_ty, expr_ref_count) = peel_mid_ty_refs(cx.typeck_results().expr_ty(expr));\n+                let (indexed_ty, indexed_ref_count) = peel_mid_ty_refs(cx.typeck_results().expr_ty(indexed));\n+                let parent_expr = get_parent_expr(cx, expr);\n+                let needs_parens_for_prefix = parent_expr.map_or(false, |parent| {\n+                    parent.precedence().order() > PREC_PREFIX\n+                });\n                 let mut app = Applicability::MachineApplicable;\n-                let snip = snippet_with_context(cx, indexed.span, ctxt, \"..\", &mut app).0;\n \n-                let (reborrow_str, help_str) = if mutability == Mutability::Mut {\n-                    // The slice was used to reborrow the mutable reference.\n-                    (\"&mut *\", \"reborrow the original value instead\")\n-                } else if matches!(\n-                    get_parent_expr(cx, expr),\n-                    Some(Expr {\n-                        kind: ExprKind::AddrOf(BorrowKind::Ref, Mutability::Mut, _),\n-                        ..\n-                    })\n-                ) {\n-                    // The slice was used to make a temporary reference.\n-                    (\"&*\", \"reborrow the original value instead\")\n+                let ((lint, msg), help, sugg) = if expr_ty == indexed_ty {\n+                    if expr_ref_count > indexed_ref_count {\n+                        // Indexing takes self by reference and can't return a reference to that\n+                        // reference as it's a local variable. The only way this could happen is if\n+                        // `self` contains a reference to the `Self` type. If this occurs then the\n+                        // lint no longer applies as it's essentially a field access, which is not\n+                        // redundant.\n+                        return;\n+                    }\n+                    let deref_count = indexed_ref_count - expr_ref_count;\n+\n+                    let (lint, reborrow_str, help_str) = if mutability == Mutability::Mut {\n+                        // The slice was used to reborrow the mutable reference.\n+                        (DEREF_BY_SLICING_LINT, \"&mut *\", \"reborrow the original value instead\")\n+                    } else if matches!(\n+                        parent_expr,\n+                        Some(Expr {\n+                            kind: ExprKind::AddrOf(BorrowKind::Ref, Mutability::Mut, _),\n+                            ..\n+                        })\n+                    ) || cx.typeck_results().expr_adjustments(expr).first().map_or(false, |a| {\n+                        matches!(a.kind, Adjust::Borrow(AutoBorrow::Ref(_, AutoBorrowMutability::Mut { .. })))\n+                    }) {\n+                        // The slice was used to make a temporary reference.\n+                        (DEREF_BY_SLICING_LINT, \"&*\", \"reborrow the original value instead\")\n+                    } else if deref_count != 0 {\n+                        (DEREF_BY_SLICING_LINT, \"\", \"dereference the original value instead\")\n+                    } else {\n+                        (REDUNDANT_SLICING_LINT, \"\", \"use the original value instead\")\n+                    };\n+\n+                    let snip = snippet_with_context(cx, indexed.span, ctxt, \"..\", &mut app).0;\n+                    let sugg = if (deref_count != 0 || !reborrow_str.is_empty()) && needs_parens_for_prefix {\n+                        format!(\"({}{}{})\", reborrow_str, \"*\".repeat(deref_count), snip)\n+                    } else {\n+                        format!(\"{}{}{}\", reborrow_str, \"*\".repeat(deref_count), snip)\n+                    };\n+\n+                    (lint, help_str, sugg)\n+                } else if let Some(target_id) = cx.tcx.lang_items().deref_target() {\n+                    if let Ok(deref_ty) = cx.tcx.try_normalize_erasing_regions(\n+                        cx.param_env,\n+                        cx.tcx.mk_projection(target_id, cx.tcx.mk_substs([GenericArg::from(indexed_ty)].into_iter())),\n+                    ) {\n+                        if deref_ty == expr_ty {\n+                            let snip = snippet_with_context(cx, indexed.span, ctxt, \"..\", &mut app).0;\n+                            let sugg = if needs_parens_for_prefix {\n+                                format!(\"(&{}{}*{})\", mutability.prefix_str(), \"*\".repeat(indexed_ref_count), snip)\n+                            } else {\n+                                format!(\"&{}{}*{}\", mutability.prefix_str(), \"*\".repeat(indexed_ref_count), snip)\n+                            };\n+                            (DEREF_BY_SLICING_LINT, \"dereference the original value instead\", sugg)\n+                        } else {\n+                            return;\n+                        }\n+                    } else {\n+                        return;\n+                    }\n                 } else {\n-                    (\"\", \"use the original value instead\")\n+                    return;\n                 };\n \n                 span_lint_and_sugg(\n                     cx,\n-                    REDUNDANT_SLICING,\n+                    lint,\n                     expr.span,\n-                    \"redundant slicing of the whole range\",\n-                    help_str,\n-                    format!(\"{}{}\", reborrow_str, snip),\n+                    msg,\n+                    help,\n+                    sugg,\n                     app,\n                 );\n             }"}, {"sha": "b26276218b78c7e0c110cb4c1831689a27372afb", "filename": "tests/ui/deref_by_slicing.fixed", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/668b3e47f90cf38d9d7cba88d991a165769024a5/tests%2Fui%2Fderef_by_slicing.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/668b3e47f90cf38d9d7cba88d991a165769024a5/tests%2Fui%2Fderef_by_slicing.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_by_slicing.fixed?ref=668b3e47f90cf38d9d7cba88d991a165769024a5", "patch": "@@ -0,0 +1,29 @@\n+// run-rustfix\n+\n+#![warn(clippy::deref_by_slicing)]\n+\n+use std::io::Read;\n+\n+fn main() {\n+    let mut vec = vec![0];\n+    let _ = &*vec;\n+    let _ = &mut *vec;\n+\n+    let ref_vec = &mut vec;\n+    let _ = &**ref_vec;\n+    let mut_slice = &mut **ref_vec;\n+    let _ = &mut *mut_slice; // Err, re-borrows slice\n+\n+    let s = String::new();\n+    let _ = &*s;\n+\n+    static S: &[u8] = &[0, 1, 2];\n+    let _ = &mut &*S; // Err, re-borrows slice\n+\n+    let slice: &[u32] = &[0u32, 1u32];\n+    let slice_ref = &slice;\n+    let _ = *slice_ref; // Err, derefs slice\n+\n+    let bytes: &[u8] = &[];\n+    let _ = (&*bytes).read_to_end(&mut vec![]).unwrap(); // Err, re-borrows slice\n+}"}, {"sha": "6aa1408ba17698854ad1f9bcf361694b6aa5343e", "filename": "tests/ui/deref_by_slicing.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/668b3e47f90cf38d9d7cba88d991a165769024a5/tests%2Fui%2Fderef_by_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668b3e47f90cf38d9d7cba88d991a165769024a5/tests%2Fui%2Fderef_by_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_by_slicing.rs?ref=668b3e47f90cf38d9d7cba88d991a165769024a5", "patch": "@@ -0,0 +1,29 @@\n+// run-rustfix\n+\n+#![warn(clippy::deref_by_slicing)]\n+\n+use std::io::Read;\n+\n+fn main() {\n+    let mut vec = vec![0];\n+    let _ = &vec[..];\n+    let _ = &mut vec[..];\n+\n+    let ref_vec = &mut vec;\n+    let _ = &ref_vec[..];\n+    let mut_slice = &mut ref_vec[..];\n+    let _ = &mut mut_slice[..]; // Err, re-borrows slice\n+\n+    let s = String::new();\n+    let _ = &s[..];\n+\n+    static S: &[u8] = &[0, 1, 2];\n+    let _ = &mut &S[..]; // Err, re-borrows slice\n+\n+    let slice: &[u32] = &[0u32, 1u32];\n+    let slice_ref = &slice;\n+    let _ = &slice_ref[..]; // Err, derefs slice\n+\n+    let bytes: &[u8] = &[];\n+    let _ = (&bytes[..]).read_to_end(&mut vec![]).unwrap(); // Err, re-borrows slice\n+}"}, {"sha": "ffd76de378df1d314b7d95fa04cf96f6efaac800", "filename": "tests/ui/deref_by_slicing.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/668b3e47f90cf38d9d7cba88d991a165769024a5/tests%2Fui%2Fderef_by_slicing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/668b3e47f90cf38d9d7cba88d991a165769024a5/tests%2Fui%2Fderef_by_slicing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_by_slicing.stderr?ref=668b3e47f90cf38d9d7cba88d991a165769024a5", "patch": "@@ -0,0 +1,58 @@\n+error: slicing when dereferencing would work\n+  --> $DIR/deref_by_slicing.rs:9:13\n+   |\n+LL |     let _ = &vec[..];\n+   |             ^^^^^^^^ help: dereference the original value instead: `&*vec`\n+   |\n+   = note: `-D clippy::deref-by-slicing` implied by `-D warnings`\n+\n+error: slicing when dereferencing would work\n+  --> $DIR/deref_by_slicing.rs:10:13\n+   |\n+LL |     let _ = &mut vec[..];\n+   |             ^^^^^^^^^^^^ help: dereference the original value instead: `&mut *vec`\n+\n+error: slicing when dereferencing would work\n+  --> $DIR/deref_by_slicing.rs:13:13\n+   |\n+LL |     let _ = &ref_vec[..];\n+   |             ^^^^^^^^^^^^ help: dereference the original value instead: `&**ref_vec`\n+\n+error: slicing when dereferencing would work\n+  --> $DIR/deref_by_slicing.rs:14:21\n+   |\n+LL |     let mut_slice = &mut ref_vec[..];\n+   |                     ^^^^^^^^^^^^^^^^ help: dereference the original value instead: `&mut **ref_vec`\n+\n+error: slicing when dereferencing would work\n+  --> $DIR/deref_by_slicing.rs:15:13\n+   |\n+LL |     let _ = &mut mut_slice[..]; // Err, re-borrows slice\n+   |             ^^^^^^^^^^^^^^^^^^ help: reborrow the original value instead: `&mut *mut_slice`\n+\n+error: slicing when dereferencing would work\n+  --> $DIR/deref_by_slicing.rs:18:13\n+   |\n+LL |     let _ = &s[..];\n+   |             ^^^^^^ help: dereference the original value instead: `&*s`\n+\n+error: slicing when dereferencing would work\n+  --> $DIR/deref_by_slicing.rs:21:18\n+   |\n+LL |     let _ = &mut &S[..]; // Err, re-borrows slice\n+   |                  ^^^^^^ help: reborrow the original value instead: `&*S`\n+\n+error: slicing when dereferencing would work\n+  --> $DIR/deref_by_slicing.rs:25:13\n+   |\n+LL |     let _ = &slice_ref[..]; // Err, derefs slice\n+   |             ^^^^^^^^^^^^^^ help: dereference the original value instead: `*slice_ref`\n+\n+error: slicing when dereferencing would work\n+  --> $DIR/deref_by_slicing.rs:28:13\n+   |\n+LL |     let _ = (&bytes[..]).read_to_end(&mut vec![]).unwrap(); // Err, re-borrows slice\n+   |             ^^^^^^^^^^^^ help: reborrow the original value instead: `(&*bytes)`\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "8dd8d3092378e1dd225e7c8171f345e91b354498", "filename": "tests/ui/redundant_slicing.fixed", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/668b3e47f90cf38d9d7cba88d991a165769024a5/tests%2Fui%2Fredundant_slicing.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/668b3e47f90cf38d9d7cba88d991a165769024a5/tests%2Fui%2Fredundant_slicing.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_slicing.fixed?ref=668b3e47f90cf38d9d7cba88d991a165769024a5", "patch": "@@ -0,0 +1,46 @@\n+// run-rustfix\n+\n+#![allow(unused, clippy::deref_by_slicing)]\n+#![warn(clippy::redundant_slicing)]\n+\n+use std::io::Read;\n+\n+fn main() {\n+    let slice: &[u32] = &[0];\n+    let _ = slice; // Redundant slice\n+\n+    let v = vec![0];\n+    let _ = &v[..]; // Ok, results in `&[_]`\n+    let _ = (&*v); // Outer borrow is redundant\n+\n+    static S: &[u8] = &[0, 1, 2];\n+    let _ = &mut &S[..]; // Ok, re-borrows slice\n+\n+    let mut vec = vec![0];\n+    let mut_slice = &mut vec[..]; // Ok, results in `&mut [_]`\n+    let _ = &mut mut_slice[..]; // Ok, re-borrows slice\n+\n+    let ref_vec = &vec;\n+    let _ = &ref_vec[..]; // Ok, results in `&[_]`\n+\n+    macro_rules! m {\n+        ($e:expr) => {\n+            $e\n+        };\n+    }\n+    let _ = slice;\n+\n+    macro_rules! m2 {\n+        ($e:expr) => {\n+            &$e[..]\n+        };\n+    }\n+    let _ = m2!(slice); // Don't lint in a macro\n+\n+    let slice_ref = &slice;\n+    let _ = &slice_ref[..]; // Ok, derefs slice\n+\n+    // Issue #7972\n+    let bytes: &[u8] = &[];\n+    let _ = (&bytes[..]).read_to_end(&mut vec![]).unwrap(); // Ok, re-borrows slice\n+}"}, {"sha": "51c16dd8d65a2b67fb33256d564259193790dafd", "filename": "tests/ui/redundant_slicing.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/668b3e47f90cf38d9d7cba88d991a165769024a5/tests%2Fui%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668b3e47f90cf38d9d7cba88d991a165769024a5/tests%2Fui%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_slicing.rs?ref=668b3e47f90cf38d9d7cba88d991a165769024a5", "patch": "@@ -1,20 +1,27 @@\n-#![allow(unused)]\n+// run-rustfix\n+\n+#![allow(unused, clippy::deref_by_slicing)]\n #![warn(clippy::redundant_slicing)]\n \n+use std::io::Read;\n+\n fn main() {\n     let slice: &[u32] = &[0];\n-    let _ = &slice[..];\n+    let _ = &slice[..]; // Redundant slice\n \n     let v = vec![0];\n-    let _ = &v[..]; // Changes the type\n-    let _ = &(&v[..])[..]; // Outer borrow is redundant\n+    let _ = &v[..]; // Ok, results in `&[_]`\n+    let _ = &(&*v)[..]; // Outer borrow is redundant\n \n     static S: &[u8] = &[0, 1, 2];\n-    let err = &mut &S[..]; // Should reborrow instead of slice\n+    let _ = &mut &S[..]; // Ok, re-borrows slice\n \n     let mut vec = vec![0];\n-    let mut_slice = &mut *vec;\n-    let _ = &mut mut_slice[..]; // Should reborrow instead of slice\n+    let mut_slice = &mut vec[..]; // Ok, results in `&mut [_]`\n+    let _ = &mut mut_slice[..]; // Ok, re-borrows slice\n+\n+    let ref_vec = &vec;\n+    let _ = &ref_vec[..]; // Ok, results in `&[_]`\n \n     macro_rules! m {\n         ($e:expr) => {\n@@ -29,4 +36,11 @@ fn main() {\n         };\n     }\n     let _ = m2!(slice); // Don't lint in a macro\n+\n+    let slice_ref = &slice;\n+    let _ = &slice_ref[..]; // Ok, derefs slice\n+\n+    // Issue #7972\n+    let bytes: &[u8] = &[];\n+    let _ = (&bytes[..]).read_to_end(&mut vec![]).unwrap(); // Ok, re-borrows slice\n }"}, {"sha": "82367143c07fa40f395768d038a734e0bfeaa619", "filename": "tests/ui/redundant_slicing.stderr", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/668b3e47f90cf38d9d7cba88d991a165769024a5/tests%2Fui%2Fredundant_slicing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/668b3e47f90cf38d9d7cba88d991a165769024a5/tests%2Fui%2Fredundant_slicing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_slicing.stderr?ref=668b3e47f90cf38d9d7cba88d991a165769024a5", "patch": "@@ -1,34 +1,22 @@\n error: redundant slicing of the whole range\n-  --> $DIR/redundant_slicing.rs:6:13\n+  --> $DIR/redundant_slicing.rs:10:13\n    |\n-LL |     let _ = &slice[..];\n+LL |     let _ = &slice[..]; // Redundant slice\n    |             ^^^^^^^^^^ help: use the original value instead: `slice`\n    |\n    = note: `-D clippy::redundant-slicing` implied by `-D warnings`\n \n error: redundant slicing of the whole range\n-  --> $DIR/redundant_slicing.rs:10:13\n-   |\n-LL |     let _ = &(&v[..])[..]; // Outer borrow is redundant\n-   |             ^^^^^^^^^^^^^ help: use the original value instead: `(&v[..])`\n-\n-error: redundant slicing of the whole range\n-  --> $DIR/redundant_slicing.rs:13:20\n-   |\n-LL |     let err = &mut &S[..]; // Should reborrow instead of slice\n-   |                    ^^^^^^ help: reborrow the original value instead: `&*S`\n-\n-error: redundant slicing of the whole range\n-  --> $DIR/redundant_slicing.rs:17:13\n+  --> $DIR/redundant_slicing.rs:14:13\n    |\n-LL |     let _ = &mut mut_slice[..]; // Should reborrow instead of slice\n-   |             ^^^^^^^^^^^^^^^^^^ help: reborrow the original value instead: `&mut *mut_slice`\n+LL |     let _ = &(&*v)[..]; // Outer borrow is redundant\n+   |             ^^^^^^^^^^ help: use the original value instead: `(&*v)`\n \n error: redundant slicing of the whole range\n-  --> $DIR/redundant_slicing.rs:24:13\n+  --> $DIR/redundant_slicing.rs:31:13\n    |\n LL |     let _ = &m!(slice)[..];\n    |             ^^^^^^^^^^^^^^ help: use the original value instead: `slice`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n "}]}