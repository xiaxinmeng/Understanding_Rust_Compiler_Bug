{"sha": "a0e3e9ab9d50c74e51a81d566c941dfee6733ce5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZTNlOWFiOWQ1MGM3NGU1MWE4MWQ1NjZjOTQxZGZlZTY3MzNjZTU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-06-06T00:55:34Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-06-07T09:18:19Z"}, "message": "Refactor `ty_infer` and `re_infer`", "tree": {"sha": "a45ecfd74ad320d1df512b8a1400aed7fd0a3a4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a45ecfd74ad320d1df512b8a1400aed7fd0a3a4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0e3e9ab9d50c74e51a81d566c941dfee6733ce5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0e3e9ab9d50c74e51a81d566c941dfee6733ce5", "html_url": "https://github.com/rust-lang/rust/commit/a0e3e9ab9d50c74e51a81d566c941dfee6733ce5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0e3e9ab9d50c74e51a81d566c941dfee6733ce5/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5377dea7fc8dc1f05ddc4c444fddf1994293bfeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5377dea7fc8dc1f05ddc4c444fddf1994293bfeb", "html_url": "https://github.com/rust-lang/rust/commit/5377dea7fc8dc1f05ddc4c444fddf1994293bfeb"}], "stats": {"total": 78, "additions": 40, "deletions": 38}, "files": [{"sha": "63d9f0920cc7b3f7a88afd0fb839b7ed970c0a6f", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a0e3e9ab9d50c74e51a81d566c941dfee6733ce5/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e3e9ab9d50c74e51a81d566c941dfee6733ce5/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a0e3e9ab9d50c74e51a81d566c941dfee6733ce5", "patch": "@@ -49,19 +49,17 @@ pub trait AstConv<'gcx, 'tcx> {\n                                  -> &'tcx ty::GenericPredicates<'tcx>;\n \n     /// Returns the lifetime to use when a lifetime is omitted (and not elided).\n-    fn re_infer(&self, span: Span, _def: Option<&ty::GenericParamDef>)\n+    fn re_infer(\n+        &self,\n+        param: Option<&ty::GenericParamDef>,\n+        span: Span,\n+    )\n                 -> Option<ty::Region<'tcx>>;\n \n     /// Returns the type to use when a type is omitted.\n-    fn ty_infer(&self, span: Span) -> Ty<'tcx>;\n+    fn ty_infer(&self, param: Option<&ty::GenericParamDef>, span: Span) -> Ty<'tcx>;\n \n-    /// Same as `ty_infer`, but with a known type parameter definition.\n-    fn ty_infer_for_def(&self,\n-                        _def: &ty::GenericParamDef,\n-                        span: Span) -> Ty<'tcx> {\n-        self.ty_infer(span)\n-    }\n-    /// What const should we use when a const is omitted?\n+    /// Returns the const to use when a const is omitted.\n     fn ct_infer(\n         &self,\n         ty: Ty<'tcx>,\n@@ -163,7 +161,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             }\n \n             None => {\n-                self.re_infer(lifetime.span, def)\n+                self.re_infer(def, lifetime.span)\n                     .unwrap_or_else(|| {\n                         // This indicates an illegal lifetime\n                         // elision. `resolve_lifetime` should have\n@@ -701,11 +699,12 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                             }\n                         } else if infer_args {\n                             // No type parameters were provided, we can infer all.\n-                            if !default_needs_object_self(param) {\n-                                self.ty_infer_for_def(param, span).into()\n+                            let param = if !default_needs_object_self(param) {\n+                                Some(param)\n                             } else {\n-                                self.ty_infer(span).into()\n-                            }\n+                                None\n+                            };\n+                            self.ty_infer(param, span).into()\n                         } else {\n                             // We've already errored above about the mismatch.\n                             tcx.types.err.into()\n@@ -1440,7 +1439,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                 if tcx.named_region(lifetime.hir_id).is_some() {\n                     self.ast_region_to_region(lifetime, None)\n                 } else {\n-                    self.re_infer(span, None).unwrap_or_else(|| {\n+                    self.re_infer(None, span).unwrap_or_else(|| {\n                         span_err!(tcx.sess, span, E0228,\n                             \"the lifetime bound for this object type cannot be deduced \\\n                              from context; please supply an explicit bound\");\n@@ -2134,7 +2133,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                 // values in a ExprKind::Closure, or as\n                 // the type of local variables. Both of these cases are\n                 // handled specially and will not descend into this routine.\n-                self.ty_infer(ast_ty.span)\n+                self.ty_infer(None, ast_ty.span)\n             }\n             hir::TyKind::CVarArgs(lt) => {\n                 let va_list_did = match tcx.lang_items().va_list() {"}, {"sha": "b894fc8c83c106f2fa2afb323ffaa6f307f29059", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0e3e9ab9d50c74e51a81d566c941dfee6733ce5/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e3e9ab9d50c74e51a81d566c941dfee6733ce5/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=a0e3e9ab9d50c74e51a81d566c941dfee6733ce5", "patch": "@@ -598,7 +598,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let supplied_arguments = decl.inputs.iter().map(|a| astconv.ast_ty_to_ty(a));\n         let supplied_return = match decl.output {\n             hir::Return(ref output) => astconv.ast_ty_to_ty(&output),\n-            hir::DefaultReturn(_) => astconv.ty_infer(decl.output.span()),\n+            hir::DefaultReturn(_) => astconv.ty_infer(None, decl.output.span()),\n         };\n \n         let result = ty::Binder::bind(self.tcx.mk_fn_sig("}, {"sha": "0b558a20ed47e2a088984afbe59891221892acc5", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a0e3e9ab9d50c74e51a81d566c941dfee6733ce5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e3e9ab9d50c74e51a81d566c941dfee6733ce5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a0e3e9ab9d50c74e51a81d566c941dfee6733ce5", "patch": "@@ -1939,27 +1939,32 @@ impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {\n         })\n     }\n \n-    fn re_infer(&self, span: Span, def: Option<&ty::GenericParamDef>)\n-                -> Option<ty::Region<'tcx>> {\n+    fn re_infer(\n+        &self,\n+        def: Option<&ty::GenericParamDef>,\n+        span: Span,\n+    ) -> Option<ty::Region<'tcx>> {\n         let v = match def {\n             Some(def) => infer::EarlyBoundRegion(span, def.name),\n             None => infer::MiscVariable(span)\n         };\n         Some(self.next_region_var(v))\n     }\n \n-    fn ty_infer(&self, span: Span) -> Ty<'tcx> {\n-        self.next_ty_var(TypeVariableOrigin {\n-            kind: TypeVariableOriginKind::TypeInference,\n-            span,\n-        })\n+    fn ty_infer(&self, param: Option<&ty::GenericParamDef>, span: Span) -> Ty<'tcx> {\n+        if let Some(param) = param {\n+            if let UnpackedKind::Type(ty) = self.var_for_def(span, param).unpack() {\n+                return ty;\n+            }\n+            unreachable!()\n+        } else {\n+            self.next_ty_var(TypeVariableOrigin {\n+                kind: TypeVariableOriginKind::TypeInference,\n+                span,\n+            })\n+        }\n     }\n \n-    fn ty_infer_for_def(&self,\n-                        ty_param_def: &ty::GenericParamDef,\n-                        span: Span) -> Ty<'tcx> {\n-        if let UnpackedKind::Type(ty) = self.var_for_def(span, ty_param_def).unpack() {\n-            return ty;\n     fn ct_infer(\n         &self,\n         ty: Ty<'tcx>,\n@@ -1977,7 +1982,6 @@ impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {\n                 span,\n             })\n         }\n-        unreachable!()\n     }\n \n     fn projected_ty_from_poly_trait_ref(&self,\n@@ -5463,7 +5467,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             |substs, param, infer_args| {\n                 match param.kind {\n                     GenericParamDefKind::Lifetime => {\n-                        self.re_infer(span, Some(param)).unwrap().into()\n+                        self.re_infer(Some(param), span).unwrap().into()\n                     }\n                     GenericParamDefKind::Type { has_default, .. } => {\n                         if !infer_args && has_default {"}, {"sha": "8b770096cad098e23365953a021ad85e717ea149", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a0e3e9ab9d50c74e51a81d566c941dfee6733ce5/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e3e9ab9d50c74e51a81d566c941dfee6733ce5/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=a0e3e9ab9d50c74e51a81d566c941dfee6733ce5", "patch": "@@ -186,18 +186,17 @@ impl<'a, 'tcx> AstConv<'tcx, 'tcx> for ItemCtxt<'a, 'tcx> {\n \n     fn re_infer(\n         &self,\n-        _span: Span,\n-        _def: Option<&ty::GenericParamDef>,\n+        _: Option<&ty::GenericParamDef>,\n+        _: Span,\n     ) -> Option<ty::Region<'tcx>> {\n         None\n     }\n \n-    fn ty_infer(&self, span: Span) -> Ty<'tcx> {\n-        struct_span_err!(\n-            self.tcx().sess,\n+    fn ty_infer(&self, _: Option<&ty::GenericParamDef>, span: Span) -> Ty<'tcx> {\n+        self.tcx().sess.struct_span_err_with_code(\n             span,\n-            E0121,\n-            \"the type placeholder `_` is not allowed within types on item signatures\"\n+            \"the type placeholder `_` is not allowed within types on item signatures\",\n+            DiagnosticId::Error(\"E0121\".into()),\n         ).span_label(span, \"not allowed in type signatures\")\n          .emit();\n "}]}