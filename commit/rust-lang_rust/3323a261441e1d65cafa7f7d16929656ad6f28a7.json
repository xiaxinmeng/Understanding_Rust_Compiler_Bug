{"sha": "3323a261441e1d65cafa7f7d16929656ad6f28a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMjNhMjYxNDQxZTFkNjVjYWZhN2Y3ZDE2OTI5NjU2YWQ2ZjI4YTc=", "commit": {"author": {"name": "Amjad Alsharafi", "email": "amjadsharafi10@gmail.com", "date": "2020-09-17T17:17:10Z"}, "committer": {"name": "Amjad Alsharafi", "email": "amjadsharafi10@gmail.com", "date": "2020-09-17T23:49:29Z"}, "message": "Fixed some intra-docs links in library/core", "tree": {"sha": "503f6c28595d8d4b585ad6669d54bfbe74f74ac9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/503f6c28595d8d4b585ad6669d54bfbe74f74ac9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3323a261441e1d65cafa7f7d16929656ad6f28a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3323a261441e1d65cafa7f7d16929656ad6f28a7", "html_url": "https://github.com/rust-lang/rust/commit/3323a261441e1d65cafa7f7d16929656ad6f28a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3323a261441e1d65cafa7f7d16929656ad6f28a7/comments", "author": {"login": "Amjad50", "id": 26300843, "node_id": "MDQ6VXNlcjI2MzAwODQz", "avatar_url": "https://avatars.githubusercontent.com/u/26300843?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amjad50", "html_url": "https://github.com/Amjad50", "followers_url": "https://api.github.com/users/Amjad50/followers", "following_url": "https://api.github.com/users/Amjad50/following{/other_user}", "gists_url": "https://api.github.com/users/Amjad50/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amjad50/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amjad50/subscriptions", "organizations_url": "https://api.github.com/users/Amjad50/orgs", "repos_url": "https://api.github.com/users/Amjad50/repos", "events_url": "https://api.github.com/users/Amjad50/events{/privacy}", "received_events_url": "https://api.github.com/users/Amjad50/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amjad50", "id": 26300843, "node_id": "MDQ6VXNlcjI2MzAwODQz", "avatar_url": "https://avatars.githubusercontent.com/u/26300843?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amjad50", "html_url": "https://github.com/Amjad50", "followers_url": "https://api.github.com/users/Amjad50/followers", "following_url": "https://api.github.com/users/Amjad50/following{/other_user}", "gists_url": "https://api.github.com/users/Amjad50/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amjad50/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amjad50/subscriptions", "organizations_url": "https://api.github.com/users/Amjad50/orgs", "repos_url": "https://api.github.com/users/Amjad50/repos", "events_url": "https://api.github.com/users/Amjad50/events{/privacy}", "received_events_url": "https://api.github.com/users/Amjad50/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bdb5dee7bac15458b10b148e9e24968e633053e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bdb5dee7bac15458b10b148e9e24968e633053e", "html_url": "https://github.com/rust-lang/rust/commit/7bdb5dee7bac15458b10b148e9e24968e633053e"}], "stats": {"total": 29, "additions": 6, "deletions": 23}, "files": [{"sha": "a8a25f927163cd33a63ef4c1ba9194570febc65c", "filename": "library/core/src/ascii.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3323a261441e1d65cafa7f7d16929656ad6f28a7/library%2Fcore%2Fsrc%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3323a261441e1d65cafa7f7d16929656ad6f28a7/library%2Fcore%2Fsrc%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fascii.rs?ref=3323a261441e1d65cafa7f7d16929656ad6f28a7", "patch": "@@ -6,8 +6,6 @@\n //!\n //! The [`escape_default`] function provides an iterator over the bytes of an\n //! escaped version of the character given.\n-//!\n-//! [`escape_default`]: fn.escape_default.html\n \n #![stable(feature = \"core_ascii\", since = \"1.26.0\")]\n \n@@ -20,8 +18,6 @@ use crate::str::from_utf8_unchecked;\n ///\n /// This `struct` is created by the [`escape_default`] function. See its\n /// documentation for more.\n-///\n-/// [`escape_default`]: fn.escape_default.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct EscapeDefault {"}, {"sha": "7e560d63fe23b40245b66e001b6e958825600d0d", "filename": "library/core/src/option.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3323a261441e1d65cafa7f7d16929656ad6f28a7/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3323a261441e1d65cafa7f7d16929656ad6f28a7/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=3323a261441e1d65cafa7f7d16929656ad6f28a7", "patch": "@@ -1502,8 +1502,6 @@ unsafe impl<A> TrustedLen for IterMut<'_, A> {}\n /// The iterator yields one value if the [`Option`] is a [`Some`], otherwise none.\n ///\n /// This `struct` is created by the [`Option::into_iter`] function.\n-///\n-/// [`Option::into_iter`]: enum.Option.html#method.into_iter\n #[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<A> {"}, {"sha": "6dc14f9125fefc11425b27ce09338b4f92579e66", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3323a261441e1d65cafa7f7d16929656ad6f28a7/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3323a261441e1d65cafa7f7d16929656ad6f28a7/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=3323a261441e1d65cafa7f7d16929656ad6f28a7", "patch": "@@ -4,7 +4,7 @@\n //!\n //! For more details, see the [`std::str`] module.\n //!\n-//! [`std::str`]: self\n+//! [`std::str`]: ../../std/str/index.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -84,9 +84,6 @@ pub trait FromStr: Sized {\n     /// when the string is ill-formatted return an error specific to the\n     /// inside [`Err`]. The error type is specific to implementation of the trait.\n     ///\n-    /// [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n-    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage with [`i32`][ithirtytwo], a type that implements `FromStr`:\n@@ -269,11 +266,9 @@ impl Utf8Error {\n ///\n /// If you are sure that the byte slice is valid UTF-8, and you don't want to\n /// incur the overhead of the validity check, there is an unsafe version of\n-/// this function, [`from_utf8_unchecked`][fromutf8u], which has the same\n+/// this function, [`from_utf8_unchecked`], which has the same\n /// behavior but skips the check.\n ///\n-/// [fromutf8u]: fn.from_utf8_unchecked.html\n-///\n /// If you need a `String` instead of a `&str`, consider\n /// [`String::from_utf8`][string].\n ///\n@@ -318,11 +313,9 @@ impl Utf8Error {\n /// assert!(str::from_utf8(&sparkle_heart).is_err());\n /// ```\n ///\n-/// See the docs for [`Utf8Error`][error] for more details on the kinds of\n+/// See the docs for [`Utf8Error`] for more details on the kinds of\n /// errors that can be returned.\n ///\n-/// [error]: struct.Utf8Error.html\n-///\n /// A \"stack allocated string\":\n ///\n /// ```\n@@ -371,10 +364,8 @@ pub fn from_utf8(v: &[u8]) -> Result<&str, Utf8Error> {\n ///\n /// assert!(str::from_utf8_mut(&mut invalid).is_err());\n /// ```\n-/// See the docs for [`Utf8Error`][error] for more details on the kinds of\n+/// See the docs for [`Utf8Error`] for more details on the kinds of\n /// errors that can be returned.\n-///\n-/// [error]: struct.Utf8Error.html\n #[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]\n pub fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n     run_utf8_validation(v)?;\n@@ -385,9 +376,7 @@ pub fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n /// Converts a slice of bytes to a string slice without checking\n /// that the string contains valid UTF-8.\n ///\n-/// See the safe version, [`from_utf8`][fromutf8], for more information.\n-///\n-/// [fromutf8]: fn.from_utf8.html\n+/// See the safe version, [`from_utf8`], for more information.\n ///\n /// # Safety\n ///"}, {"sha": "508c522e71aa25b7f9d60e6c90186dff41b7270c", "filename": "library/core/src/str/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3323a261441e1d65cafa7f7d16929656ad6f28a7/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3323a261441e1d65cafa7f7d16929656ad6f28a7/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs?ref=3323a261441e1d65cafa7f7d16929656ad6f28a7", "patch": "@@ -28,7 +28,7 @@\n //! assert_eq!(s.find(|c: char| c.is_ascii_punctuation()), Some(35));\n //! ```\n //!\n-//! [pattern-impls]: trait.Pattern.html#implementors\n+//! [pattern-impls]: Pattern#implementors\n \n #![unstable(\n     feature = \"pattern\","}]}