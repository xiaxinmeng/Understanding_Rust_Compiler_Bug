{"sha": "befc561fa4f76b058fc4d9d14f7ed508df0cb272", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlZmM1NjFmYTRmNzZiMDU4ZmM0ZDlkMTRmN2VkNTA4ZGYwY2IyNzI=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-17T15:44:59Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-17T15:54:37Z"}, "message": "remove unnecessary transmutes", "tree": {"sha": "a4501190bcf795413fae44891619efd4a34f98b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4501190bcf795413fae44891619efd4a34f98b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/befc561fa4f76b058fc4d9d14f7ed508df0cb272", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/befc561fa4f76b058fc4d9d14f7ed508df0cb272", "html_url": "https://github.com/rust-lang/rust/commit/befc561fa4f76b058fc4d9d14f7ed508df0cb272", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/befc561fa4f76b058fc4d9d14f7ed508df0cb272/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29cdf58861b1054c899c911343ccd8b1af28151a", "url": "https://api.github.com/repos/rust-lang/rust/commits/29cdf58861b1054c899c911343ccd8b1af28151a", "html_url": "https://github.com/rust-lang/rust/commit/29cdf58861b1054c899c911343ccd8b1af28151a"}], "stats": {"total": 36, "additions": 8, "deletions": 28}, "files": [{"sha": "24ab8360e8fab4ff2ddc6c9bb6defabbbd979d4a", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/befc561fa4f76b058fc4d9d14f7ed508df0cb272/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/befc561fa4f76b058fc4d9d14f7ed508df0cb272/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=befc561fa4f76b058fc4d9d14f7ed508df0cb272", "patch": "@@ -198,7 +198,6 @@ impl Database {\n     }\n }\n \n-// FIXME #4330: use &mut self here\n #[unsafe_destructor]\n impl Drop for Database {\n     fn drop(&mut self) {"}, {"sha": "2ba00c3a2fbaced49417a4d7e37a1237d3b658ca", "filename": "src/libstd/rt/rc.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/befc561fa4f76b058fc4d9d14f7ed508df0cb272/src%2Flibstd%2Frt%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/befc561fa4f76b058fc4d9d14f7ed508df0cb272/src%2Flibstd%2Frt%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frc.rs?ref=befc561fa4f76b058fc4d9d14f7ed508df0cb272", "patch": "@@ -78,17 +78,14 @@ impl<T> Drop for RC<T> {\n         assert!(self.refcount() > 0);\n \n         unsafe {\n-            // FIXME(#4330) Need self by value to get mutability.\n-            let this: &mut RC<T> = cast::transmute_mut(self);\n-\n-            match *this.get_mut_state() {\n+            match *self.get_mut_state() {\n                 (ref mut count, _) => {\n                     *count = *count - 1\n                 }\n             }\n \n-            if this.refcount() == 0 {\n-                let _: ~(uint, T) = cast::transmute(this.p);\n+            if self.refcount() == 0 {\n+                let _: ~(uint, T) = cast::transmute(self.p);\n             }\n         }\n     }"}, {"sha": "8c827430f25528526985b1c0c3dc9959d5890f4a", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/befc561fa4f76b058fc4d9d14f7ed508df0cb272/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/befc561fa4f76b058fc4d9d14f7ed508df0cb272/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=befc561fa4f76b058fc4d9d14f7ed508df0cb272", "patch": "@@ -188,11 +188,7 @@ impl UvEventLoop {\n \n impl Drop for UvEventLoop {\n     fn drop(&mut self) {\n-        // XXX: Need mutable finalizer\n-        let this = unsafe {\n-            transmute::<&UvEventLoop, &mut UvEventLoop>(self)\n-        };\n-        this.uvio.uv_loop().close();\n+        self.uvio.uv_loop().close();\n     }\n }\n \n@@ -648,9 +644,7 @@ impl UvTcpListener {\n \n impl Drop for UvTcpListener {\n     fn drop(&mut self) {\n-        // XXX need mutable finalizer\n-        let self_ = unsafe { transmute::<&UvTcpListener, &mut UvTcpListener>(self) };\n-        do self_.home_for_io_with_sched |self_, scheduler| {\n+        do self.home_for_io_with_sched |self_, scheduler| {\n             do scheduler.deschedule_running_task_and_then |_, task| {\n                 let task = Cell::new(task);\n                 do self_.watcher.as_stream().close {\n@@ -763,9 +757,7 @@ impl HomingIO for UvTcpStream {\n \n impl Drop for UvTcpStream {\n     fn drop(&mut self) {\n-        // XXX need mutable finalizer\n-        let this = unsafe { transmute::<&UvTcpStream, &mut UvTcpStream>(self) };\n-        do this.home_for_io_with_sched |self_, scheduler| {\n+        do self.home_for_io_with_sched |self_, scheduler| {\n             do scheduler.deschedule_running_task_and_then |_, task| {\n                 let task_cell = Cell::new(task);\n                 do self_.watcher.as_stream().close {\n@@ -922,9 +914,7 @@ impl HomingIO for UvUdpSocket {\n \n impl Drop for UvUdpSocket {\n     fn drop(&mut self) {\n-        // XXX need mutable finalizer\n-        let this = unsafe { transmute::<&UvUdpSocket, &mut UvUdpSocket>(self) };\n-        do this.home_for_io_with_sched |self_, scheduler| {\n+        do self.home_for_io_with_sched |self_, scheduler| {\n             do scheduler.deschedule_running_task_and_then |_, task| {\n                 let task_cell = Cell::new(task);\n                 do self_.watcher.close {"}, {"sha": "e8835462a80e28afd804c9612c355f9d1ac6fce7", "filename": "src/libstd/unstable/atomics.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/befc561fa4f76b058fc4d9d14f7ed508df0cb272/src%2Flibstd%2Funstable%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/befc561fa4f76b058fc4d9d14f7ed508df0cb272/src%2Flibstd%2Funstable%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fatomics.rs?ref=befc561fa4f76b058fc4d9d14f7ed508df0cb272", "patch": "@@ -339,13 +339,7 @@ impl<T> AtomicOption<T> {\n #[unsafe_destructor]\n impl<T> Drop for AtomicOption<T> {\n     fn drop(&mut self) {\n-        // This will ensure that the contained data is\n-        // destroyed, unless it's null.\n-        unsafe {\n-            // FIXME(#4330) Need self by value to get mutability.\n-            let this : &mut AtomicOption<T> = cast::transmute(self);\n-            let _ = this.take(SeqCst);\n-        }\n+        let _ = self.take(SeqCst);\n     }\n }\n "}]}