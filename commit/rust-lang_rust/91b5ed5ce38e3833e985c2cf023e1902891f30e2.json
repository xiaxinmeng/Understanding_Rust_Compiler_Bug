{"sha": "91b5ed5ce38e3833e985c2cf023e1902891f30e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYjVlZDVjZTM4ZTM4MzNlOTg1YzJjZjAyM2UxOTAyODkxZjMwZTI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-04-25T10:53:01Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-04-25T10:53:01Z"}, "message": "save-analysis-json: introduce a lowering step\n\n...in which we make the spans nice.", "tree": {"sha": "8eb932a5e3512481fd0619e509bfeb4b04f51270", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8eb932a5e3512481fd0619e509bfeb4b04f51270"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91b5ed5ce38e3833e985c2cf023e1902891f30e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91b5ed5ce38e3833e985c2cf023e1902891f30e2", "html_url": "https://github.com/rust-lang/rust/commit/91b5ed5ce38e3833e985c2cf023e1902891f30e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91b5ed5ce38e3833e985c2cf023e1902891f30e2/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d", "html_url": "https://github.com/rust-lang/rust/commit/e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d"}], "stats": {"total": 616, "additions": 607, "deletions": 9}, "files": [{"sha": "b79c459920a3e5f075cbb28a6eff8f53343b4d09", "filename": "src/librustc_save_analysis/data.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/91b5ed5ce38e3833e985c2cf023e1902891f30e2/src%2Flibrustc_save_analysis%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b5ed5ce38e3833e985c2cf023e1902891f30e2/src%2Flibrustc_save_analysis%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdata.rs?ref=91b5ed5ce38e3833e985c2cf023e1902891f30e2", "patch": "@@ -18,7 +18,37 @@ use std::hash::Hasher;\n use rustc::hir::def_id::DefId;\n use rustc::ty;\n use syntax::ast::{CrateNum, NodeId};\n-use syntax::codemap::Span;\n+use syntax::codemap::{Span, CodeMap};\n+\n+#[derive(Debug, Clone, RustcEncodable)]\n+pub struct SpanData {\n+    file_name: String,\n+    byte_start: u32,\n+    byte_end: u32,\n+    /// 1-based.\n+    line_start: usize,\n+    line_end: usize,\n+    /// 1-based, character offset.\n+    column_start: usize,\n+    column_end: usize,\n+}\n+\n+impl SpanData {\n+    pub fn from_span(span: Span, cm: &CodeMap) -> SpanData {\n+        let start = cm.lookup_char_pos(span.lo);\n+        let end = cm.lookup_char_pos(span.hi);\n+\n+        SpanData {\n+            file_name: start.file.name.clone(),\n+            byte_start: span.lo.0,\n+            byte_end: span.hi.0,\n+            line_start: start.line,\n+            line_end: end.line,\n+            column_start: start.col.0 + 1,\n+            column_end: end.col.0 + 1,\n+        }\n+    }\n+}\n \n pub struct CrateData {\n     pub name: String,"}, {"sha": "e040b392ae7218e8d3d8812345ea893982412bbd", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 576, "deletions": 8, "changes": 584, "blob_url": "https://github.com/rust-lang/rust/blob/91b5ed5ce38e3833e985c2cf023e1902891f30e2/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b5ed5ce38e3833e985c2cf023e1902891f30e2/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=91b5ed5ce38e3833e985c2cf023e1902891f30e2", "patch": "@@ -11,31 +11,37 @@\n use std::io::Write;\n \n use rustc_serialize::json::as_json;\n+use syntax::codemap::CodeMap;\n \n-use super::data::*;\n+use rustc::hir::def_id::DefId;\n+use syntax::ast::{CrateNum, NodeId};\n+\n+use super::data::{self, SpanData};\n use super::dump::Dump;\n \n-pub struct JsonDumper<'b, W: 'b> {\n+pub struct JsonDumper<'a, 'b, W: 'b> {\n     output: &'b mut W,\n+    codemap: &'a CodeMap,\n }\n \n-impl<'b, W: Write> JsonDumper<'b, W> {\n-    pub fn new(writer: &'b mut W) -> JsonDumper<'b, W> {\n-        JsonDumper { output: writer }\n+impl<'a, 'b, W: Write> JsonDumper<'a, 'b, W> {\n+    pub fn new(writer: &'b mut W, codemap: &'a CodeMap) -> JsonDumper<'a, 'b, W> {\n+        JsonDumper { output: writer, codemap:codemap }\n     }\n }\n \n macro_rules! impl_fn {\n     ($fn_name: ident, $data_type: ident) => {\n-        fn $fn_name(&mut self, data: $data_type) {\n+        fn $fn_name(&mut self, data: data::$data_type) {\n+            let data = data.lower(self.codemap);\n             if let Err(_) = write!(self.output, \"{}\", as_json(&data)) {\n                 error!(\"Error writing output '{}'\", as_json(&data));\n             }\n-        }        \n+        }\n     }\n }\n \n-impl<'b, W: Write + 'b> Dump for JsonDumper<'b, W> {\n+impl<'a, 'b, W: Write + 'b> Dump for JsonDumper<'a, 'b, W> {\n     impl_fn!(crate_prelude, CratePreludeData);\n     impl_fn!(enum_data, EnumData);\n     impl_fn!(extern_crate, ExternCrateData);\n@@ -61,3 +67,565 @@ impl<'b, W: Write + 'b> Dump for JsonDumper<'b, W> {\n     impl_fn!(variable, VariableData);\n     impl_fn!(variable_ref, VariableRefData);\n }\n+\n+trait Lower {\n+    type Target;\n+    fn lower(self, cm: &CodeMap) -> Self::Target;\n+}\n+\n+#[derive(Debug, RustcEncodable)]\n+pub struct CratePreludeData {\n+    pub crate_name: String,\n+    pub crate_root: String,\n+    pub external_crates: Vec<data::ExternalCrateData>,\n+    pub span: SpanData,\n+}\n+\n+impl Lower for data::CratePreludeData {\n+    type Target = CratePreludeData;\n+\n+    fn lower(self, cm: &CodeMap) -> CratePreludeData {\n+        CratePreludeData {\n+            crate_name: self.crate_name,\n+            crate_root: self.crate_root,\n+            external_crates: self.external_crates,\n+            span: SpanData::from_span(self.span, cm),    \n+        }\n+    }\n+}\n+\n+/// Data for enum declarations.\n+#[derive(Clone, Debug, RustcEncodable)]\n+pub struct EnumData {\n+    pub id: NodeId,\n+    pub value: String,\n+    pub qualname: String,\n+    pub span: SpanData,\n+    pub scope: NodeId,\n+}\n+\n+impl Lower for data::EnumData {\n+    type Target = EnumData;\n+\n+    fn lower(self, cm: &CodeMap) -> EnumData {\n+        EnumData {\n+            id: self.id,\n+            value: self.value,\n+            qualname: self.qualname,\n+            span: SpanData::from_span(self.span, cm),    \n+            scope: self.scope,\n+        }\n+    }\n+}\n+\n+/// Data for extern crates.\n+#[derive(Debug, RustcEncodable)]\n+pub struct ExternCrateData {\n+    pub id: NodeId,\n+    pub name: String,\n+    pub crate_num: CrateNum,\n+    pub location: String,\n+    pub span: SpanData,\n+    pub scope: NodeId,\n+}\n+\n+impl Lower for data::ExternCrateData {\n+    type Target = ExternCrateData;\n+\n+    fn lower(self, cm: &CodeMap) -> ExternCrateData {\n+        ExternCrateData {\n+            id: self.id,\n+            name: self.name,\n+            crate_num: self.crate_num,\n+            location: self.location,\n+            span: SpanData::from_span(self.span, cm),    \n+            scope: self.scope,\n+        }\n+    }\n+}\n+\n+/// Data about a function call.\n+#[derive(Debug, RustcEncodable)]\n+pub struct FunctionCallData {\n+    pub span: SpanData,\n+    pub scope: NodeId,\n+    pub ref_id: DefId,\n+}\n+\n+impl Lower for data::FunctionCallData {\n+    type Target = FunctionCallData;\n+\n+    fn lower(self, cm: &CodeMap) -> FunctionCallData {\n+        FunctionCallData {\n+            span: SpanData::from_span(self.span, cm),    \n+            scope: self.scope,\n+            ref_id: self.ref_id,\n+        }\n+    }\n+}\n+\n+/// Data for all kinds of functions and methods.\n+#[derive(Clone, Debug, RustcEncodable)]\n+pub struct FunctionData {\n+    pub id: NodeId,\n+    pub name: String,\n+    pub qualname: String,\n+    pub declaration: Option<DefId>,\n+    pub span: SpanData,\n+    pub scope: NodeId,\n+}\n+\n+impl Lower for data::FunctionData {\n+    type Target = FunctionData;\n+\n+    fn lower(self, cm: &CodeMap) -> FunctionData {\n+        FunctionData {\n+            id: self.id,\n+            name: self.name,\n+            qualname: self.qualname,\n+            declaration: self.declaration,\n+            span: SpanData::from_span(self.span, cm),    \n+            scope: self.scope,\n+        }\n+    }\n+}\n+\n+/// Data about a function call.\n+#[derive(Debug, RustcEncodable)]\n+pub struct FunctionRefData {\n+    pub span: SpanData,\n+    pub scope: NodeId,\n+    pub ref_id: DefId,\n+}\n+\n+impl Lower for data::FunctionRefData {\n+    type Target = FunctionRefData;\n+\n+    fn lower(self, cm: &CodeMap) -> FunctionRefData {\n+        FunctionRefData {\n+            span: SpanData::from_span(self.span, cm),    \n+            scope: self.scope,\n+            ref_id: self.ref_id,\n+        }\n+    }\n+}\n+#[derive(Debug, RustcEncodable)]\n+pub struct ImplData {\n+    pub id: NodeId,\n+    pub span: SpanData,\n+    pub scope: NodeId,\n+    pub trait_ref: Option<DefId>,\n+    pub self_ref: Option<DefId>,\n+}\n+\n+impl Lower for data::ImplData {\n+    type Target = ImplData;\n+\n+    fn lower(self, cm: &CodeMap) -> ImplData {\n+        ImplData {\n+            id: self.id,\n+            span: SpanData::from_span(self.span, cm),    \n+            scope: self.scope,\n+            trait_ref: self.trait_ref,\n+            self_ref: self.self_ref,\n+        }\n+    }\n+}\n+\n+#[derive(Debug, RustcEncodable)]\n+pub struct InheritanceData {\n+    pub span: SpanData,\n+    pub base_id: DefId,\n+    pub deriv_id: NodeId\n+}\n+\n+impl Lower for data::InheritanceData {\n+    type Target = InheritanceData;\n+\n+    fn lower(self, cm: &CodeMap) -> InheritanceData {\n+        InheritanceData {\n+            span: SpanData::from_span(self.span, cm),    \n+            base_id: self.base_id,\n+            deriv_id: self.deriv_id\n+        }\n+    }\n+}\n+\n+/// Data about a macro declaration.\n+#[derive(Debug, RustcEncodable)]\n+pub struct MacroData {\n+    pub span: SpanData,\n+    pub name: String,\n+    pub qualname: String,\n+}\n+\n+impl Lower for data::MacroData {\n+    type Target = MacroData;\n+\n+    fn lower(self, cm: &CodeMap) -> MacroData {\n+        MacroData {\n+            span: SpanData::from_span(self.span, cm),    \n+            name: self.name,\n+            qualname: self.qualname,\n+        }\n+    }\n+}\n+\n+/// Data about a macro use.\n+#[derive(Debug, RustcEncodable)]\n+pub struct MacroUseData {\n+    pub span: SpanData,\n+    pub name: String,\n+    pub qualname: String,\n+    // Because macro expansion happens before ref-ids are determined,\n+    // we use the callee span to reference the associated macro definition.\n+    pub callee_span: SpanData,\n+    pub scope: NodeId,\n+    pub imported: bool,\n+}\n+\n+impl Lower for data::MacroUseData {\n+    type Target = MacroUseData;\n+\n+    fn lower(self, cm: &CodeMap) -> MacroUseData {\n+        MacroUseData {\n+            span: SpanData::from_span(self.span, cm),    \n+            name: self.name,\n+            qualname: self.qualname,\n+            callee_span: SpanData::from_span(self.callee_span, cm),\n+            scope: self.scope,\n+            imported: self.imported,\n+        }\n+    }\n+}\n+\n+/// Data about a method call.\n+#[derive(Debug, RustcEncodable)]\n+pub struct MethodCallData {\n+    pub span: SpanData,\n+    pub scope: NodeId,\n+    pub ref_id: Option<DefId>,\n+    pub decl_id: Option<DefId>,\n+}\n+\n+impl Lower for data::MethodCallData {\n+    type Target = MethodCallData;\n+\n+    fn lower(self, cm: &CodeMap) -> MethodCallData {\n+        MethodCallData {\n+            span: SpanData::from_span(self.span, cm),    \n+            scope: self.scope,\n+            ref_id: self.ref_id,\n+            decl_id: self.decl_id,\n+        }\n+    }\n+}\n+\n+/// Data for method declarations (methods with a body are treated as functions).\n+#[derive(Clone, Debug, RustcEncodable)]\n+pub struct MethodData {\n+    pub id: NodeId,\n+    pub qualname: String,\n+    pub span: SpanData,\n+    pub scope: NodeId,\n+}\n+\n+impl Lower for data::MethodData {\n+    type Target = MethodData;\n+\n+    fn lower(self, cm: &CodeMap) -> MethodData {\n+        MethodData {\n+            span: SpanData::from_span(self.span, cm),    \n+            scope: self.scope,\n+            id: self.id,\n+            qualname: self.qualname,\n+        }\n+    }\n+}\n+\n+/// Data for modules.\n+#[derive(Debug, RustcEncodable)]\n+pub struct ModData {\n+    pub id: NodeId,\n+    pub name: String,\n+    pub qualname: String,\n+    pub span: SpanData,\n+    pub scope: NodeId,\n+    pub filename: String,\n+}\n+\n+impl Lower for data::ModData {\n+    type Target = ModData;\n+\n+    fn lower(self, cm: &CodeMap) -> ModData {\n+        ModData {\n+            id: self.id,\n+            name: self.name,\n+            qualname: self.qualname,\n+            span: SpanData::from_span(self.span, cm),    \n+            scope: self.scope,\n+            filename: self.filename,\n+        }\n+    }\n+}\n+\n+/// Data for a reference to a module.\n+#[derive(Debug, RustcEncodable)]\n+pub struct ModRefData {\n+    pub span: SpanData,\n+    pub scope: NodeId,\n+    pub ref_id: Option<DefId>,\n+    pub qualname: String\n+}\n+\n+impl Lower for data::ModRefData {\n+    type Target = ModRefData;\n+\n+    fn lower(self, cm: &CodeMap) -> ModRefData {\n+        ModRefData {\n+            span: SpanData::from_span(self.span, cm),    \n+            scope: self.scope,\n+            ref_id: self.ref_id,\n+            qualname: self.qualname,\n+        }\n+    }\n+}\n+\n+#[derive(Debug, RustcEncodable)]\n+pub struct StructData {\n+    pub span: SpanData,\n+    pub id: NodeId,\n+    pub ctor_id: NodeId,\n+    pub qualname: String,\n+    pub scope: NodeId,\n+    pub value: String\n+}\n+\n+impl Lower for data::StructData {\n+    type Target = StructData;\n+\n+    fn lower(self, cm: &CodeMap) -> StructData {\n+        StructData {\n+            span: SpanData::from_span(self.span, cm),    \n+            id: self.id,\n+            ctor_id: self.ctor_id,\n+            qualname: self.qualname,\n+            scope: self.scope,\n+            value: self.value\n+        }\n+    }\n+}\n+\n+#[derive(Debug, RustcEncodable)]\n+pub struct StructVariantData {\n+    pub span: SpanData,\n+    pub id: NodeId,\n+    pub qualname: String,\n+    pub type_value: String,\n+    pub value: String,\n+    pub scope: NodeId\n+}\n+\n+impl Lower for data::StructVariantData {\n+    type Target = StructVariantData;\n+\n+    fn lower(self, cm: &CodeMap) -> StructVariantData {\n+        StructVariantData {\n+            span: SpanData::from_span(self.span, cm),    \n+            id: self.id,\n+            qualname: self.qualname,\n+            type_value: self.type_value,\n+            value: self.value,\n+            scope: self.scope,\n+        }\n+    }\n+}\n+\n+#[derive(Debug, RustcEncodable)]\n+pub struct TraitData {\n+    pub span: SpanData,\n+    pub id: NodeId,\n+    pub qualname: String,\n+    pub scope: NodeId,\n+    pub value: String\n+}\n+\n+impl Lower for data::TraitData {\n+    type Target = TraitData;\n+\n+    fn lower(self, cm: &CodeMap) -> TraitData {\n+        TraitData {\n+            span: SpanData::from_span(self.span, cm),    \n+            id: self.id,\n+            qualname: self.qualname,\n+            scope: self.scope,\n+            value: self.value,\n+        }\n+    }\n+}\n+\n+#[derive(Debug, RustcEncodable)]\n+pub struct TupleVariantData {\n+    pub span: SpanData,\n+    pub id: NodeId,\n+    pub name: String,\n+    pub qualname: String,\n+    pub type_value: String,\n+    pub value: String,\n+    pub scope: NodeId,\n+}\n+\n+impl Lower for data::TupleVariantData {\n+    type Target = TupleVariantData;\n+\n+    fn lower(self, cm: &CodeMap) -> TupleVariantData {\n+        TupleVariantData {\n+            span: SpanData::from_span(self.span, cm),    \n+            id: self.id,\n+            name: self.name,\n+            qualname: self.qualname,\n+            type_value: self.type_value,\n+            value: self.value,\n+            scope: self.scope,\n+        }\n+    }\n+}\n+\n+/// Data for a typedef.\n+#[derive(Debug, RustcEncodable)]\n+pub struct TypedefData {\n+    pub id: NodeId,\n+    pub span: SpanData,\n+    pub qualname: String,\n+    pub value: String,\n+}\n+\n+impl Lower for data::TypedefData {\n+    type Target = TypedefData;\n+\n+    fn lower(self, cm: &CodeMap) -> TypedefData {\n+        TypedefData {\n+            id: self.id,\n+            span: SpanData::from_span(self.span, cm),    \n+            qualname: self.qualname,\n+            value: self.value,\n+        }\n+    }\n+}\n+\n+/// Data for a reference to a type or trait.\n+#[derive(Clone, Debug, RustcEncodable)]\n+pub struct TypeRefData {\n+    pub span: SpanData,\n+    pub scope: NodeId,\n+    pub ref_id: Option<DefId>,\n+    pub qualname: String,\n+}\n+\n+impl Lower for data::TypeRefData {\n+    type Target = TypeRefData;\n+\n+    fn lower(self, cm: &CodeMap) -> TypeRefData {\n+        TypeRefData {\n+            span: SpanData::from_span(self.span, cm),    \n+            scope: self.scope,\n+            ref_id: self.ref_id,\n+            qualname: self.qualname,\n+        }\n+    }\n+}\n+\n+#[derive(Debug, RustcEncodable)]\n+pub struct UseData {\n+    pub id: NodeId,\n+    pub span: SpanData,\n+    pub name: String,\n+    pub mod_id: Option<DefId>,\n+    pub scope: NodeId\n+}\n+\n+impl Lower for data::UseData {\n+    type Target = UseData;\n+\n+    fn lower(self, cm: &CodeMap) -> UseData {\n+        UseData {\n+            id: self.id,\n+            span: SpanData::from_span(self.span, cm),    \n+            name: self.name,\n+            mod_id: self.mod_id,\n+            scope: self.scope,\n+        }\n+    }\n+}\n+\n+#[derive(Debug, RustcEncodable)]\n+pub struct UseGlobData {\n+    pub id: NodeId,\n+    pub span: SpanData,\n+    pub names: Vec<String>,\n+    pub scope: NodeId\n+}\n+\n+impl Lower for data::UseGlobData {\n+    type Target = UseGlobData;\n+\n+    fn lower(self, cm: &CodeMap) -> UseGlobData {\n+        UseGlobData {\n+            id: self.id,\n+            span: SpanData::from_span(self.span, cm),    \n+            names: self.names,\n+            scope: self.scope,\n+        }\n+    }\n+}\n+\n+/// Data for local and global variables (consts and statics).\n+#[derive(Debug, RustcEncodable)]\n+pub struct VariableData {\n+    pub id: NodeId,\n+    pub name: String,\n+    pub qualname: String,\n+    pub span: SpanData,\n+    pub scope: NodeId,\n+    pub value: String,\n+    pub type_value: String,\n+}\n+\n+impl Lower for data::VariableData {\n+    type Target = VariableData;\n+\n+    fn lower(self, cm: &CodeMap) -> VariableData {\n+        VariableData {\n+            id: self.id,\n+            name: self.name,\n+            qualname: self.qualname,\n+            span: SpanData::from_span(self.span, cm),    \n+            scope: self.scope,\n+            value: self.value,\n+            type_value: self.type_value,\n+        }\n+    }\n+}\n+\n+/// Data for the use of some item (e.g., the use of a local variable, which\n+/// will refer to that variables declaration (by ref_id)).\n+#[derive(Debug, RustcEncodable)]\n+pub struct VariableRefData {\n+    pub name: String,\n+    pub span: SpanData,\n+    pub scope: NodeId,\n+    pub ref_id: DefId,\n+}\n+\n+impl Lower for data::VariableRefData {\n+    type Target = VariableRefData;\n+\n+    fn lower(self, cm: &CodeMap) -> VariableRefData {\n+        VariableRefData {\n+            name: self.name,\n+            span: SpanData::from_span(self.span, cm),    \n+            scope: self.scope,\n+            ref_id: self.ref_id,\n+        }\n+    }\n+}"}]}