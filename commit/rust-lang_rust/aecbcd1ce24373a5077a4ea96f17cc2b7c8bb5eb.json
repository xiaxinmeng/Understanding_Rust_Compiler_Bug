{"sha": "aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlY2JjZDFjZTI0MzczYTUwNzdhNGVhOTZmMTdjYzJiN2M4YmI1ZWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-23T11:26:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-23T11:26:48Z"}, "message": "Auto merge of #55808 - estebank:type-arguments, r=petrochenkov\n\nSuggest correct syntax when writing type arg instead of assoc type\n\n- When confusing an associated type with a type argument, suggest the appropriate syntax. Given `Iterator<isize>`, suggest `Iterator<Item = isize>`.\n- When encountering multiple missing associated types, emit only one diagnostic.\n- Point at associated type def span for context.\n- Point at each extra type argument.\n\nFollow up to #48288, fix #20977.", "tree": {"sha": "9d5029637dfe08c6ac6167209619f626af3f6d3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d5029637dfe08c6ac6167209619f626af3f6d3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb", "html_url": "https://github.com/rust-lang/rust/commit/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a2d1b4e15d5de90f8c36181b1d429da658adfd2", "html_url": "https://github.com/rust-lang/rust/commit/6a2d1b4e15d5de90f8c36181b1d429da658adfd2"}, {"sha": "510f836d2378bc9d7ec48e3c39ca83006aadb197", "url": "https://api.github.com/repos/rust-lang/rust/commits/510f836d2378bc9d7ec48e3c39ca83006aadb197", "html_url": "https://github.com/rust-lang/rust/commit/510f836d2378bc9d7ec48e3c39ca83006aadb197"}], "stats": {"total": 316, "additions": 222, "deletions": 94}, "files": [{"sha": "a8164c85e821deb3d8596e8fd0b0d5561dd3cb15", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 121, "deletions": 60, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb", "patch": "@@ -182,7 +182,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         item_segment: &hir::PathSegment)\n         -> &'tcx Substs<'tcx>\n     {\n-        let (substs, assoc_bindings) = item_segment.with_generic_args(|generic_args| {\n+        let (substs, assoc_bindings, _) = item_segment.with_generic_args(|generic_args| {\n             self.create_substs_for_ast_path(\n                 span,\n                 def_id,\n@@ -256,7 +256,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n             },\n             def.parent.is_none() && def.has_self, // `has_self`\n             seg.infer_types || suppress_mismatch, // `infer_types`\n-        )\n+        ).0\n     }\n \n     /// Check that the correct number of generic arguments have been provided.\n@@ -269,7 +269,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         position: GenericArgPosition,\n         has_self: bool,\n         infer_types: bool,\n-    ) -> bool {\n+    ) -> (bool, Option<Vec<Span>>) {\n         // At this stage we are guaranteed that the generic arguments are in the correct order, e.g.\n         // that lifetimes will proceed types. So it suffices to check the number of each generic\n         // arguments in order to validate them with respect to the generic parameters.\n@@ -303,13 +303,13 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                     let mut err = tcx.sess.struct_span_err(span, msg);\n                     err.span_note(span_late, note);\n                     err.emit();\n-                    return true;\n+                    return (true, None);\n                 } else {\n                     let mut multispan = MultiSpan::from_span(span);\n                     multispan.push_span_label(span_late, note.to_string());\n                     tcx.lint_node(lint::builtin::LATE_BOUND_LIFETIME_ARGUMENTS,\n                                   args.args[0].id(), multispan, msg);\n-                    return false;\n+                    return (false, None);\n                 }\n             }\n         }\n@@ -323,7 +323,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n             // For kinds without defaults (i.e. lifetimes), `required == permitted`.\n             // For other kinds (i.e. types), `permitted` may be greater than `required`.\n             if required <= provided && provided <= permitted {\n-                return false;\n+                return (false, None);\n             }\n \n             // Unfortunately lifetime and type parameter mismatches are typically styled\n@@ -338,33 +338,28 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                 (required, \"\")\n             };\n \n-            let mut span = span;\n-            let label = if required == permitted && provided > permitted {\n-                let diff = provided - permitted;\n-                if diff == 1 {\n-                    // In the case when the user has provided too many arguments,\n-                    // we want to point to the first unexpected argument.\n-                    let first_superfluous_arg: &GenericArg = &args.args[offset + permitted];\n-                    span = first_superfluous_arg.span();\n-                }\n-                format!(\n-                    \"{}unexpected {} argument{}\",\n-                    if diff != 1 { format!(\"{} \", diff) } else { String::new() },\n-                    kind,\n-                    if diff != 1 { \"s\" } else { \"\" },\n-                )\n+            let mut potential_assoc_types: Option<Vec<Span>> = None;\n+            let (spans, label) = if required == permitted && provided > permitted {\n+                // In the case when the user has provided too many arguments,\n+                // we want to point to the unexpected arguments.\n+                let spans: Vec<Span> = args.args[offset+permitted .. offset+provided]\n+                        .iter()\n+                        .map(|arg| arg.span())\n+                        .collect();\n+                potential_assoc_types = Some(spans.clone());\n+                (spans, format!( \"unexpected {} argument\", kind))\n             } else {\n-                format!(\n+                (vec![span], format!(\n                     \"expected {}{} {} argument{}\",\n                     quantifier,\n                     bound,\n                     kind,\n                     if bound != 1 { \"s\" } else { \"\" },\n-                )\n+                ))\n             };\n \n-            tcx.sess.struct_span_err_with_code(\n-                span,\n+            let mut err = tcx.sess.struct_span_err_with_code(\n+                spans.clone(),\n                 &format!(\n                     \"wrong number of {} arguments: expected {}{}, found {}\",\n                     kind,\n@@ -373,9 +368,14 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                     provided,\n                 ),\n                 DiagnosticId::Error(\"E0107\".into())\n-            ).span_label(span, label).emit();\n+            );\n+            for span in spans {\n+                err.span_label(span, label.as_str());\n+            }\n+            err.emit();\n \n-            provided > required // `suppress_error`\n+            (provided > required, // `suppress_error`\n+             potential_assoc_types)\n         };\n \n         if !infer_lifetimes || arg_counts.lifetimes > param_counts.lifetimes {\n@@ -397,7 +397,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                 arg_counts.lifetimes,\n             )\n         } else {\n-            false\n+            (false, None)\n         }\n     }\n \n@@ -555,7 +555,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         generic_args: &hir::GenericArgs,\n         infer_types: bool,\n         self_ty: Option<Ty<'tcx>>)\n-        -> (&'tcx Substs<'tcx>, Vec<ConvertedBinding<'tcx>>)\n+        -> (&'tcx Substs<'tcx>, Vec<ConvertedBinding<'tcx>>, Option<Vec<Span>>)\n     {\n         // If the type is parameterized by this region, then replace this\n         // region with the current anon region binding (in other words,\n@@ -571,7 +571,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         assert_eq!(generic_params.has_self, self_ty.is_some());\n \n         let has_self = generic_params.has_self;\n-        Self::check_generic_arg_count(\n+        let (_, potential_assoc_types) = Self::check_generic_arg_count(\n             self.tcx(),\n             span,\n             &generic_params,\n@@ -676,7 +676,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         debug!(\"create_substs_for_ast_path(generic_params={:?}, self_ty={:?}) -> {:?}\",\n                generic_params, self_ty, substs);\n \n-        (substs, assoc_bindings)\n+        (substs, assoc_bindings, potential_assoc_types)\n     }\n \n     /// Instantiates the path for the given trait reference, assuming that it's\n@@ -718,19 +718,20 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         self_ty: Ty<'tcx>,\n         poly_projections: &mut Vec<(ty::PolyProjectionPredicate<'tcx>, Span)>,\n         speculative: bool)\n-        -> ty::PolyTraitRef<'tcx>\n+        -> (ty::PolyTraitRef<'tcx>, Option<Vec<Span>>)\n     {\n         let trait_def_id = self.trait_def_id(trait_ref);\n \n         debug!(\"instantiate_poly_trait_ref({:?}, def_id={:?})\", trait_ref, trait_def_id);\n \n         self.prohibit_generics(trait_ref.path.segments.split_last().unwrap().1);\n \n-        let (substs, assoc_bindings) =\n-            self.create_substs_for_ast_trait_ref(trait_ref.path.span,\n-                                                 trait_def_id,\n-                                                 self_ty,\n-                                                 trait_ref.path.segments.last().unwrap());\n+        let (substs, assoc_bindings, potential_assoc_types) = self.create_substs_for_ast_trait_ref(\n+            trait_ref.path.span,\n+            trait_def_id,\n+            self_ty,\n+            trait_ref.path.segments.last().unwrap(),\n+        );\n         let poly_trait_ref = ty::Binder::bind(ty::TraitRef::new(trait_def_id, substs));\n \n         let mut dup_bindings = FxHashMap::default();\n@@ -745,14 +746,14 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n \n         debug!(\"instantiate_poly_trait_ref({:?}, projections={:?}) -> {:?}\",\n                trait_ref, poly_projections, poly_trait_ref);\n-        poly_trait_ref\n+        (poly_trait_ref, potential_assoc_types)\n     }\n \n     pub fn instantiate_poly_trait_ref(&self,\n         poly_trait_ref: &hir::PolyTraitRef,\n         self_ty: Ty<'tcx>,\n         poly_projections: &mut Vec<(ty::PolyProjectionPredicate<'tcx>, Span)>)\n-        -> ty::PolyTraitRef<'tcx>\n+        -> (ty::PolyTraitRef<'tcx>, Option<Vec<Span>>)\n     {\n         self.instantiate_poly_trait_ref_inner(&poly_trait_ref.trait_ref, self_ty,\n                                               poly_projections, false)\n@@ -765,7 +766,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                                   trait_segment: &hir::PathSegment)\n                                   -> ty::TraitRef<'tcx>\n     {\n-        let (substs, assoc_bindings) =\n+        let (substs, assoc_bindings, _) =\n             self.create_substs_for_ast_trait_ref(span,\n                                                  trait_def_id,\n                                                  self_ty,\n@@ -774,13 +775,13 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         ty::TraitRef::new(trait_def_id, substs)\n     }\n \n-    fn create_substs_for_ast_trait_ref(&self,\n-                                       span: Span,\n-                                       trait_def_id: DefId,\n-                                       self_ty: Ty<'tcx>,\n-                                       trait_segment: &hir::PathSegment)\n-                                       -> (&'tcx Substs<'tcx>, Vec<ConvertedBinding<'tcx>>)\n-    {\n+    fn create_substs_for_ast_trait_ref(\n+        &self,\n+        span: Span,\n+        trait_def_id: DefId,\n+        self_ty: Ty<'tcx>,\n+        trait_segment: &hir::PathSegment,\n+    ) -> (&'tcx Substs<'tcx>, Vec<ConvertedBinding<'tcx>>, Option<Vec<Span>>) {\n         debug!(\"create_substs_for_ast_trait_ref(trait_segment={:?})\",\n                trait_segment);\n \n@@ -970,9 +971,11 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n \n         let mut projection_bounds = Vec::new();\n         let dummy_self = tcx.mk_ty(TRAIT_OBJECT_DUMMY_SELF);\n-        let principal = self.instantiate_poly_trait_ref(&trait_bounds[0],\n-                                                        dummy_self,\n-                                                        &mut projection_bounds);\n+        let (principal, potential_assoc_types) = self.instantiate_poly_trait_ref(\n+            &trait_bounds[0],\n+            dummy_self,\n+            &mut projection_bounds,\n+        );\n         debug!(\"principal: {:?}\", principal);\n \n         for trait_bound in trait_bounds[1..].iter() {\n@@ -1027,16 +1030,74 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n             associated_types.remove(&projection_bound.projection_def_id());\n         }\n \n-        for item_def_id in associated_types {\n-            let assoc_item = tcx.associated_item(item_def_id);\n-            let trait_def_id = assoc_item.container.id();\n-            struct_span_err!(tcx.sess, span, E0191, \"the value of the associated type `{}` \\\n-                                                     (from the trait `{}`) must be specified\",\n-                                                    assoc_item.ident,\n-                                                    tcx.item_path_str(trait_def_id))\n-                .span_label(span, format!(\"missing associated type `{}` value\",\n-                                          assoc_item.ident))\n-                .emit();\n+        if !associated_types.is_empty() {\n+            let names = associated_types.iter().map(|item_def_id| {\n+                let assoc_item = tcx.associated_item(*item_def_id);\n+                let trait_def_id = assoc_item.container.id();\n+                format!(\n+                    \"`{}` (from the trait `{}`)\",\n+                    assoc_item.ident,\n+                    tcx.item_path_str(trait_def_id),\n+                )\n+            }).collect::<Vec<_>>().join(\", \");\n+            let mut err = struct_span_err!(\n+                tcx.sess,\n+                span,\n+                E0191,\n+                \"the value of the associated type{} {} must be specified\",\n+                if associated_types.len() == 1 { \"\" } else { \"s\" },\n+                names,\n+            );\n+            let mut suggest = false;\n+            let mut potential_assoc_types_spans = vec![];\n+            if let Some(potential_assoc_types) = potential_assoc_types {\n+                if potential_assoc_types.len() == associated_types.len() {\n+                    // Only suggest when the amount of missing associated types is equals to the\n+                    // extra type arguments present, as that gives us a relatively high confidence\n+                    // that the user forgot to give the associtated type's name. The canonical\n+                    // example would be trying to use `Iterator<isize>` instead of\n+                    // `Iterator<Item=isize>`.\n+                    suggest = true;\n+                    potential_assoc_types_spans = potential_assoc_types;\n+                }\n+            }\n+            let mut suggestions = vec![];\n+            for (i, item_def_id) in associated_types.iter().enumerate() {\n+                let assoc_item = tcx.associated_item(*item_def_id);\n+                err.span_label(\n+                    span,\n+                    format!(\"associated type `{}` must be specified\", assoc_item.ident),\n+                );\n+                if item_def_id.is_local() {\n+                    err.span_label(\n+                        tcx.def_span(*item_def_id),\n+                        format!(\"`{}` defined here\", assoc_item.ident),\n+                    );\n+                }\n+                if suggest {\n+                    if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(\n+                        potential_assoc_types_spans[i],\n+                    ) {\n+                        suggestions.push((\n+                            potential_assoc_types_spans[i],\n+                            format!(\"{} = {}\", assoc_item.ident, snippet),\n+                        ));\n+                    }\n+                }\n+            }\n+            if !suggestions.is_empty() {\n+                let msg = if suggestions.len() == 1 {\n+                    \"if you meant to specify the associated type, write\"\n+                } else {\n+                    \"if you meant to specify the associated types, write\"\n+                };\n+                err.multipart_suggestion_with_applicability(\n+                    msg,\n+                    suggestions,\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+            err.emit();\n         }\n \n         // Erase the `dummy_self` (`TRAIT_OBJECT_DUMMY_SELF`) used above."}, {"sha": "a1bb0b53f1fce38a0d5f4275c0f067a5dd9631dc", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb", "patch": "@@ -1892,7 +1892,7 @@ fn explicit_predicates_of<'a, 'tcx>(\n                         &hir::GenericBound::Trait(ref poly_trait_ref, _) => {\n                             let mut projections = Vec::new();\n \n-                            let trait_ref = AstConv::instantiate_poly_trait_ref(\n+                            let (trait_ref, _) = AstConv::instantiate_poly_trait_ref(\n                                 &icx,\n                                 poly_trait_ref,\n                                 ty,\n@@ -2016,7 +2016,12 @@ pub fn compute_bounds<'gcx: 'tcx, 'tcx>(\n     let mut projection_bounds = Vec::new();\n \n     let mut trait_bounds: Vec<_> = trait_bounds.iter().map(|&bound| {\n-        (astconv.instantiate_poly_trait_ref(bound, param_ty, &mut projection_bounds), bound.span)\n+        let (poly_trait_ref, _) = astconv.instantiate_poly_trait_ref(\n+            bound,\n+            param_ty,\n+            &mut projection_bounds,\n+        );\n+        (poly_trait_ref, bound.span)\n     }).collect();\n \n     let region_bounds = region_bounds\n@@ -2057,7 +2062,7 @@ fn predicates_from_bound<'tcx>(\n     match *bound {\n         hir::GenericBound::Trait(ref tr, hir::TraitBoundModifier::None) => {\n             let mut projections = Vec::new();\n-            let pred = astconv.instantiate_poly_trait_ref(tr, param_ty, &mut projections);\n+            let (pred, _) = astconv.instantiate_poly_trait_ref(tr, param_ty, &mut projections);\n             iter::once((pred.to_predicate(), tr.span)).chain(\n                 projections\n                     .into_iter()"}, {"sha": "0fba311d7f7d5ea49255865419b25c2fea9f58f5", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb", "patch": "@@ -389,7 +389,7 @@ pub fn hir_trait_to_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, hir_trait:\n     let env_def_id = tcx.hir.local_def_id(env_node_id);\n     let item_cx = self::collect::ItemCtxt::new(tcx, env_def_id);\n     let mut projections = Vec::new();\n-    let principal = astconv::AstConv::instantiate_poly_trait_ref_inner(\n+    let (principal, _) = astconv::AstConv::instantiate_poly_trait_ref_inner(\n         &item_cx, hir_trait, tcx.types.err, &mut projections, true\n     );\n "}, {"sha": "1e615c4c0db80e9eb20a07365066c09d7d47710e", "filename": "src/test/compile-fail/issue-23595-1.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fcompile-fail%2Fissue-23595-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fcompile-fail%2Fissue-23595-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23595-1.rs?ref=aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb", "patch": "@@ -16,9 +16,7 @@ trait Hierarchy {\n     type Value;\n     type ChildKey;\n     type Children = Index<Self::ChildKey, Output=Hierarchy>;\n-    //~^ ERROR: the value of the associated type `ChildKey`\n-    //~^^ ERROR: the value of the associated type `Children`\n-    //~^^^ ERROR: the value of the associated type `Value`\n+    //~^ ERROR: the value of the associated types `Value` (from the trait `Hierarchy`), `ChildKey`\n \n     fn data(&self) -> Option<(Self::Value, Self::Children)>;\n }"}, {"sha": "b4285c0de29d5b09d4bf109ceba08ed7a8c5177a", "filename": "src/test/ui/associated-type/associated-type-projection-from-multiple-supertraits.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr?ref=aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb", "patch": "@@ -25,8 +25,11 @@ LL | fn dent_object<COLOR>(c: BoxCar<Color=COLOR>) {\n error[E0191]: the value of the associated type `Color` (from the trait `Vehicle`) must be specified\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:33:26\n    |\n+LL |     type Color;\n+   |     ----------- `Color` defined here\n+...\n LL | fn dent_object<COLOR>(c: BoxCar<Color=COLOR>) {\n-   |                          ^^^^^^^^^^^^^^^^^^^ missing associated type `Color` value\n+   |                          ^^^^^^^^^^^^^^^^^^^ associated type `Color` must be specified\n \n error[E0221]: ambiguous associated type `Color` in bounds of `C`\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:38:29"}, {"sha": "e575fd695b2db2bcf50b6f703d6df2083f42022a", "filename": "src/test/ui/associated-types/associated-types-incomplete-object.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.rs?ref=aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb", "patch": "@@ -37,6 +37,5 @@ pub fn main() {\n     //~^ ERROR the value of the associated type `A` (from the trait `Foo`) must be specified\n \n     let d = &42isize as &Foo;\n-    //~^ ERROR the value of the associated type `A` (from the trait `Foo`) must be specified\n-    //~| ERROR the value of the associated type `B` (from the trait `Foo`) must be specified\n+    //~^ ERROR the value of the associated types `A` (from the trait `Foo`), `B` (from the trait\n }"}, {"sha": "eb8e6f998a534c84c58834107e54665158b26aea", "filename": "src/test/ui/associated-types/associated-types-incomplete-object.stderr", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.stderr?ref=aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb", "patch": "@@ -1,27 +1,35 @@\n error[E0191]: the value of the associated type `B` (from the trait `Foo`) must be specified\n   --> $DIR/associated-types-incomplete-object.rs:33:26\n    |\n+LL |     type B;\n+   |     ------- `B` defined here\n+...\n LL |     let b = &42isize as &Foo<A=usize>;\n-   |                          ^^^^^^^^^^^^ missing associated type `B` value\n+   |                          ^^^^^^^^^^^^ associated type `B` must be specified\n \n error[E0191]: the value of the associated type `A` (from the trait `Foo`) must be specified\n   --> $DIR/associated-types-incomplete-object.rs:36:26\n    |\n+LL |     type A;\n+   |     ------- `A` defined here\n+...\n LL |     let c = &42isize as &Foo<B=char>;\n-   |                          ^^^^^^^^^^^ missing associated type `A` value\n+   |                          ^^^^^^^^^^^ associated type `A` must be specified\n \n-error[E0191]: the value of the associated type `A` (from the trait `Foo`) must be specified\n-  --> $DIR/associated-types-incomplete-object.rs:39:26\n-   |\n-LL |     let d = &42isize as &Foo;\n-   |                          ^^^ missing associated type `A` value\n-\n-error[E0191]: the value of the associated type `B` (from the trait `Foo`) must be specified\n+error[E0191]: the value of the associated types `A` (from the trait `Foo`), `B` (from the trait `Foo`) must be specified\n   --> $DIR/associated-types-incomplete-object.rs:39:26\n    |\n+LL |     type A;\n+   |     ------- `A` defined here\n+LL |     type B;\n+   |     ------- `B` defined here\n+...\n LL |     let d = &42isize as &Foo;\n-   |                          ^^^ missing associated type `B` value\n+   |                          ^^^\n+   |                          |\n+   |                          associated type `A` must be specified\n+   |                          associated type `B` must be specified\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0191`."}, {"sha": "87ac9e37853c01ce518c65a1f7233bea661afec4", "filename": "src/test/ui/error-codes/E0107.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Ferror-codes%2FE0107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Ferror-codes%2FE0107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0107.rs?ref=aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb", "patch": "@@ -26,7 +26,8 @@ struct Baz<'a, 'b, 'c> {\n     //~| unexpected lifetime argument\n     foo2: Foo<'a, 'b, 'c>,\n     //~^ ERROR E0107\n-    //~| 2 unexpected lifetime arguments\n+    //~| unexpected lifetime argument\n+    //~| unexpected lifetime argument\n }\n \n fn main() {}"}, {"sha": "a07c92cf26afb06c174a6b381d2b9005c889ed25", "filename": "src/test/ui/error-codes/E0107.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr?ref=aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb", "patch": "@@ -11,10 +11,12 @@ LL |     bar: Bar<'a>,\n    |              ^^ unexpected lifetime argument\n \n error[E0107]: wrong number of lifetime arguments: expected 1, found 3\n-  --> $DIR/E0107.rs:27:11\n+  --> $DIR/E0107.rs:27:19\n    |\n LL |     foo2: Foo<'a, 'b, 'c>,\n-   |           ^^^^^^^^^^^^^^^ 2 unexpected lifetime arguments\n+   |                   ^^  ^^ unexpected lifetime argument\n+   |                   |\n+   |                   unexpected lifetime argument\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f07529e7e9e1d82f1ea54acc1752308abf492885", "filename": "src/test/ui/error-codes/E0191.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Ferror-codes%2FE0191.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Ferror-codes%2FE0191.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0191.stderr?ref=aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb", "patch": "@@ -1,8 +1,11 @@\n error[E0191]: the value of the associated type `Bar` (from the trait `Trait`) must be specified\n   --> $DIR/E0191.rs:15:12\n    |\n+LL |     type Bar;\n+   |     --------- `Bar` defined here\n+...\n LL | type Foo = Trait; //~ ERROR E0191\n-   |            ^^^^^ missing associated type `Bar` value\n+   |            ^^^^^ associated type `Bar` must be specified\n \n error: aborting due to previous error\n "}, {"sha": "d26e61fba8c6b6af1edc924196a4f8c3fd1046b5", "filename": "src/test/ui/error-codes/E0220.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Ferror-codes%2FE0220.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Ferror-codes%2FE0220.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0220.stderr?ref=aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb", "patch": "@@ -7,8 +7,11 @@ LL | type Foo = Trait<F=i32>; //~ ERROR E0220\n error[E0191]: the value of the associated type `Bar` (from the trait `Trait`) must be specified\n   --> $DIR/E0220.rs:15:12\n    |\n+LL |     type Bar;\n+   |     --------- `Bar` defined here\n+...\n LL | type Foo = Trait<F=i32>; //~ ERROR E0220\n-   |            ^^^^^^^^^^^^ missing associated type `Bar` value\n+   |            ^^^^^^^^^^^^ associated type `Bar` must be specified\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d125438b8517d45723f0a6275e2301220bb5d1b2", "filename": "src/test/ui/issues/issue-19482.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Fissues%2Fissue-19482.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Fissues%2Fissue-19482.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19482.stderr?ref=aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb", "patch": "@@ -1,8 +1,11 @@\n error[E0191]: the value of the associated type `A` (from the trait `Foo`) must be specified\n   --> $DIR/issue-19482.rs:20:12\n    |\n+LL |     type A;\n+   |     ------- `A` defined here\n+...\n LL | fn bar(x: &Foo) {}\n-   |            ^^^ missing associated type `A` value\n+   |            ^^^ associated type `A` must be specified\n \n error: aborting due to previous error\n "}, {"sha": "33c89dd4994b7d56c560d6bbb3d661a699fb8031", "filename": "src/test/ui/issues/issue-21950.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr?ref=aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb", "patch": "@@ -10,7 +10,7 @@ error[E0191]: the value of the associated type `Output` (from the trait `std::op\n   --> $DIR/issue-21950.rs:17:14\n    |\n LL |             &Add;\n-   |              ^^^ missing associated type `Output` value\n+   |              ^^^ associated type `Output` must be specified\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3ba77346a1f8225da36b855ad668711fb8ea6bbb", "filename": "src/test/ui/issues/issue-22434.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Fissues%2Fissue-22434.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Fissues%2Fissue-22434.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22434.stderr?ref=aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb", "patch": "@@ -1,8 +1,11 @@\n error[E0191]: the value of the associated type `A` (from the trait `Foo`) must be specified\n   --> $DIR/issue-22434.rs:15:19\n    |\n+LL |     type A;\n+   |     ------- `A` defined here\n+...\n LL | type I<'a> = &'a (Foo + 'a);\n-   |                   ^^^^^^^^ missing associated type `A` value\n+   |                   ^^^^^^^^ associated type `A` must be specified\n \n error: aborting due to previous error\n "}, {"sha": "715f84011f64eaa1dde6219ec53a3034fb2f6f78", "filename": "src/test/ui/issues/issue-22560.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr?ref=aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb", "patch": "@@ -28,7 +28,7 @@ LL |   type Test = Add +\n LL | |             //~^ ERROR E0393\n LL | |             //~| ERROR E0191\n LL | |             Sub;\n-   | |_______________^ missing associated type `Output` value\n+   | |_______________^ associated type `Output` must be specified\n \n error: aborting due to 4 previous errors\n "}, {"sha": "adee12a36d31b39eb99771b79cbb7d8d59120741", "filename": "src/test/ui/issues/issue-23024.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr?ref=aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb", "patch": "@@ -16,7 +16,7 @@ error[E0191]: the value of the associated type `Output` (from the trait `std::op\n   --> $DIR/issue-23024.rs:19:35\n    |\n LL |     println!(\"{:?}\",(vfnfer[0] as Fn)(3));\n-   |                                   ^^ missing associated type `Output` value\n+   |                                   ^^ associated type `Output` must be specified\n \n error: aborting due to 3 previous errors\n "}, {"sha": "734c761d0b7bc1d75f3a07ca87b004db54a1e822", "filename": "src/test/ui/issues/issue-28344.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr?ref=aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb", "patch": "@@ -2,7 +2,7 @@ error[E0191]: the value of the associated type `Output` (from the trait `std::op\n   --> $DIR/issue-28344.rs:14:17\n    |\n LL |     let x: u8 = BitXor::bitor(0 as u8, 0 as u8);\n-   |                 ^^^^^^^^^^^^^ missing associated type `Output` value\n+   |                 ^^^^^^^^^^^^^ associated type `Output` must be specified\n \n error[E0599]: no function or associated item named `bitor` found for type `dyn std::ops::BitXor<_>` in the current scope\n   --> $DIR/issue-28344.rs:14:17\n@@ -16,7 +16,7 @@ error[E0191]: the value of the associated type `Output` (from the trait `std::op\n   --> $DIR/issue-28344.rs:18:13\n    |\n LL |     let g = BitXor::bitor;\n-   |             ^^^^^^^^^^^^^ missing associated type `Output` value\n+   |             ^^^^^^^^^^^^^ associated type `Output` must be specified\n \n error[E0599]: no function or associated item named `bitor` found for type `dyn std::ops::BitXor<_>` in the current scope\n   --> $DIR/issue-28344.rs:18:13"}, {"sha": "58e7718ba5bb4fbdcbb088c0f2c191576dde78d2", "filename": "src/test/ui/suggestions/use-type-argument-instead-of-assoc-type.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.rs?ref=aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb", "patch": "@@ -0,0 +1,8 @@\n+pub trait T<X, Y> {\n+    type A;\n+    type B;\n+    type C;\n+}\n+ pub struct Foo { i: Box<T<usize, usize, usize, usize, B=usize>> }\n+\n+ fn main() {}"}, {"sha": "b62b5d3b04ca072fa6b67b708245c9e6ee6b50b1", "filename": "src/test/ui/suggestions/use-type-argument-instead-of-assoc-type.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr?ref=aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb", "patch": "@@ -0,0 +1,31 @@\n+error[E0107]: wrong number of type arguments: expected 2, found 4\n+  --> $DIR/use-type-argument-instead-of-assoc-type.rs:6:42\n+   |\n+LL |  pub struct Foo { i: Box<T<usize, usize, usize, usize, B=usize>> }\n+   |                                          ^^^^^  ^^^^^ unexpected type argument\n+   |                                          |\n+   |                                          unexpected type argument\n+\n+error[E0191]: the value of the associated types `A` (from the trait `T`), `C` (from the trait `T`) must be specified\n+  --> $DIR/use-type-argument-instead-of-assoc-type.rs:6:26\n+   |\n+LL |     type A;\n+   |     ------- `A` defined here\n+LL |     type B;\n+LL |     type C;\n+   |     ------- `C` defined here\n+LL | }\n+LL |  pub struct Foo { i: Box<T<usize, usize, usize, usize, B=usize>> }\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                          |\n+   |                          associated type `A` must be specified\n+   |                          associated type `C` must be specified\n+help: if you meant to specify the associated types, write\n+   |\n+LL |  pub struct Foo { i: Box<T<usize, usize, A = usize, C = usize, B=usize>> }\n+   |                                          ^^^^^^^^^  ^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0107, E0191.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "fdb9427cba734635a0cecd46279f1169562801e0", "filename": "src/test/ui/traits/trait-alias-object.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-object.stderr?ref=aecbcd1ce24373a5077a4ea96f17cc2b7c8bb5eb", "patch": "@@ -10,7 +10,7 @@ error[E0191]: the value of the associated type `Item` (from the trait `std::iter\n   --> $DIR/trait-alias-object.rs:18:13\n    |\n LL |     let _: &dyn IteratorAlias = &vec![123].into_iter();\n-   |             ^^^^^^^^^^^^^^^^^ missing associated type `Item` value\n+   |             ^^^^^^^^^^^^^^^^^ associated type `Item` must be specified\n \n error: aborting due to 2 previous errors\n "}]}