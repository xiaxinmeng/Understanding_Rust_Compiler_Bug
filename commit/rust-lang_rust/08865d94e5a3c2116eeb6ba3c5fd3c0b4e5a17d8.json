{"sha": "08865d94e5a3c2116eeb6ba3c5fd3c0b4e5a17d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ODY1ZDk0ZTVhM2MyMTE2ZWViNmJhM2M1ZmQzYzBiNGU1YTE3ZDg=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-02T20:56:28Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-15T10:58:32Z"}, "message": "begin using `WithOptParam`", "tree": {"sha": "cc6173e59fd1a6dfa5db306420011509171691e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc6173e59fd1a6dfa5db306420011509171691e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08865d94e5a3c2116eeb6ba3c5fd3c0b4e5a17d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08865d94e5a3c2116eeb6ba3c5fd3c0b4e5a17d8", "html_url": "https://github.com/rust-lang/rust/commit/08865d94e5a3c2116eeb6ba3c5fd3c0b4e5a17d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08865d94e5a3c2116eeb6ba3c5fd3c0b4e5a17d8/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37a6103e1ad5916d0c2b40f9bda743061a5c45b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/37a6103e1ad5916d0c2b40f9bda743061a5c45b2", "html_url": "https://github.com/rust-lang/rust/commit/37a6103e1ad5916d0c2b40f9bda743061a5c45b2"}], "stats": {"total": 77, "additions": 67, "deletions": 10}, "files": [{"sha": "f8a205084de884ec0b41d7309283364dc64d9bcf", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/08865d94e5a3c2116eeb6ba3c5fd3c0b4e5a17d8/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08865d94e5a3c2116eeb6ba3c5fd3c0b4e5a17d8/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=08865d94e5a3c2116eeb6ba3c5fd3c0b4e5a17d8", "patch": "@@ -1571,6 +1571,32 @@ pub type PlaceholderType = Placeholder<BoundVar>;\n \n pub type PlaceholderConst = Placeholder<BoundVar>;\n \n+#[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(Hash, HashStable)]\n+pub struct WithOptParam<T> {\n+    pub did: T,\n+    pub param_did: Option<DefId>,\n+}\n+\n+impl<T> WithOptParam<T> {\n+    pub fn dummy(did: T) -> WithOptParam<T> {\n+        WithOptParam { did, param_did: None }\n+    }\n+}\n+\n+impl WithOptParam<LocalDefId> {\n+    pub fn ty_def_id(self) -> DefId {\n+        if let Some(did) = self.param_did { did } else { self.did.to_def_id() }\n+    }\n+}\n+\n+impl WithOptParam<DefId> {\n+    pub fn ty_def_id(self) -> DefId {\n+        self.param_did.unwrap_or(self.did)\n+    }\n+}\n+\n /// When type checking, we use the `ParamEnv` to track\n /// details about the set of where-clauses that are in scope at this\n /// particular point."}, {"sha": "6326068905d3c45dbd330daf0e9e6d1e97e69b55", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/08865d94e5a3c2116eeb6ba3c5fd3c0b4e5a17d8/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08865d94e5a3c2116eeb6ba3c5fd3c0b4e5a17d8/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=08865d94e5a3c2116eeb6ba3c5fd3c0b4e5a17d8", "patch": "@@ -2210,21 +2210,28 @@ impl<'tcx> Const<'tcx> {\n     /// Literals and const generic parameters are eagerly converted to a constant, everything else\n     /// becomes `Unevaluated`.\n     pub fn from_anon_const(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> &'tcx Self {\n-        debug!(\"Const::from_anon_const(id={:?})\", def_id);\n+        Self::const_arg_from_anon_const(tcx, ty::WithOptParam::dummy(def_id))\n+    }\n+\n+    pub fn const_arg_from_anon_const(\n+        tcx: TyCtxt<'tcx>,\n+        def: ty::WithOptParam<LocalDefId>,\n+    ) -> &'tcx Self {\n+        debug!(\"Const::from_anon_const(def={:?})\", def);\n \n-        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n+        let hir_id = tcx.hir().local_def_id_to_hir_id(def.did);\n \n         let body_id = match tcx.hir().get(hir_id) {\n             hir::Node::AnonConst(ac) => ac.body,\n             _ => span_bug!(\n-                tcx.def_span(def_id.to_def_id()),\n+                tcx.def_span(def.did.to_def_id()),\n                 \"from_anon_const can only process anonymous constants\"\n             ),\n         };\n \n         let expr = &tcx.hir().body(body_id).value;\n \n-        let ty = tcx.type_of(def_id.to_def_id());\n+        let ty = tcx.type_of(def.ty_def_id());\n \n         let lit_input = match expr.kind {\n             hir::ExprKind::Lit(ref lit) => Some(LitToConstInput { lit: &lit.node, ty, neg: false }),\n@@ -2271,8 +2278,8 @@ impl<'tcx> Const<'tcx> {\n                 ty::ConstKind::Param(ty::ParamConst::new(index, name))\n             }\n             _ => ty::ConstKind::Unevaluated(\n-                def_id.to_def_id(),\n-                InternalSubsts::identity_for_item(tcx, def_id.to_def_id()),\n+                def.did.to_def_id(),\n+                InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n                 None,\n             ),\n         };"}, {"sha": "eeb14352ca0f34a4b3f6cd3738a3437983d1ecd7", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/08865d94e5a3c2116eeb6ba3c5fd3c0b4e5a17d8/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08865d94e5a3c2116eeb6ba3c5fd3c0b4e5a17d8/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=08865d94e5a3c2116eeb6ba3c5fd3c0b4e5a17d8", "patch": "@@ -886,8 +886,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     }\n                 }\n                 (GenericParamDefKind::Const, GenericArg::Const(ct)) => {\n-                    let ct_def_id = tcx.hir().local_def_id(ct.value.hir_id);\n-                    ty::Const::from_anon_const(tcx, ct_def_id).into()\n+                    ty::Const::const_arg_from_anon_const(\n+                        tcx,\n+                        ty::WithOptParam {\n+                            did: tcx.hir().local_def_id(ct.value.hir_id),\n+                            param_did: Some(param.def_id),\n+                        },\n+                    )\n+                    .into()\n                 }\n                 _ => unreachable!(),\n             },"}, {"sha": "0ca85b5165ea09506d7e130b8c79c61181448288", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08865d94e5a3c2116eeb6ba3c5fd3c0b4e5a17d8/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08865d94e5a3c2116eeb6ba3c5fd3c0b4e5a17d8/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=08865d94e5a3c2116eeb6ba3c5fd3c0b4e5a17d8", "patch": "@@ -325,7 +325,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n                 }\n                 (GenericParamDefKind::Type { .. }, GenericArg::Type(ty)) => self.to_ty(ty).into(),\n                 (GenericParamDefKind::Const, GenericArg::Const(ct)) => {\n-                    self.to_const(&ct.value).into()\n+                    self.const_arg_to_const(&ct.value, param.def_id).into()\n                 }\n                 _ => unreachable!(),\n             },"}, {"sha": "56f751e000ba1811ad05376e697d60625c05c736", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/08865d94e5a3c2116eeb6ba3c5fd3c0b4e5a17d8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08865d94e5a3c2116eeb6ba3c5fd3c0b4e5a17d8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=08865d94e5a3c2116eeb6ba3c5fd3c0b4e5a17d8", "patch": "@@ -3542,6 +3542,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         c\n     }\n \n+    pub fn const_arg_to_const(\n+        &self,\n+        ast_c: &hir::AnonConst,\n+        param_def_id: DefId,\n+    ) -> &'tcx ty::Const<'tcx> {\n+        let const_def = ty::WithOptParam {\n+            did: self.tcx.hir().local_def_id(ast_c.hir_id),\n+            param_did: Some(param_def_id),\n+        };\n+        let c = ty::Const::const_arg_from_anon_const(self.tcx, const_def);\n+        self.register_wf_obligation(\n+            c.into(),\n+            self.tcx.hir().span(ast_c.hir_id),\n+            ObligationCauseCode::MiscObligation,\n+        );\n+        c\n+    }\n+\n     // If the type given by the user has free regions, save it for later, since\n     // NLL would like to enforce those. Also pass in types that involve\n     // projections, since those can resolve to `'static` bounds (modulo #54940,\n@@ -5655,7 +5673,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         self.to_ty(ty).into()\n                     }\n                     (GenericParamDefKind::Const, GenericArg::Const(ct)) => {\n-                        self.to_const(&ct.value).into()\n+                        self.const_arg_to_const(&ct.value, param.def_id).into()\n                     }\n                     _ => unreachable!(),\n                 },"}]}