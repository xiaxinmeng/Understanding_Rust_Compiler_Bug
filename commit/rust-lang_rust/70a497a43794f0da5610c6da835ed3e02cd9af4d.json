{"sha": "70a497a43794f0da5610c6da835ed3e02cd9af4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwYTQ5N2E0Mzc5NGYwZGE1NjEwYzZkYTgzNWVkM2UwMmNkOWFmNGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-28T21:46:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-28T21:46:30Z"}, "message": "Auto merge of #59487 - Centril:rollup, r=Centril\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #58717 (Add FromStr impl for NonZero types)\n - #59091 (Combine input and eval_always query types)\n - #59216 (Type dependent defs wrappers)\n - #59318 (rustc: Update linker flavor inference from filename)\n - #59320 (rustc: Allow using `clang` for wasm32 targets)\n - #59363 (#59361 Moved rustc edition opt to short list)\n - #59371 (ffi: rename VaList::copy to VaList::with_copy)\n - #59398 (Add a way to track Rustfix UI test coverage)\n - #59408 (compiletest: make path normalization smarter)\n - #59429 (When moving out of a for loop head, suggest borrowing it in nll mode)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "a30edffbd2e98cb10926429a44ec9326db8bad10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a30edffbd2e98cb10926429a44ec9326db8bad10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70a497a43794f0da5610c6da835ed3e02cd9af4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70a497a43794f0da5610c6da835ed3e02cd9af4d", "html_url": "https://github.com/rust-lang/rust/commit/70a497a43794f0da5610c6da835ed3e02cd9af4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70a497a43794f0da5610c6da835ed3e02cd9af4d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "237bf3244fffef501cf37d4bda00e1fce3fcfb46", "url": "https://api.github.com/repos/rust-lang/rust/commits/237bf3244fffef501cf37d4bda00e1fce3fcfb46", "html_url": "https://github.com/rust-lang/rust/commit/237bf3244fffef501cf37d4bda00e1fce3fcfb46"}, {"sha": "0f26958cea7d8756b11b1c7fc4541974a6e6b0e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f26958cea7d8756b11b1c7fc4541974a6e6b0e1", "html_url": "https://github.com/rust-lang/rust/commit/0f26958cea7d8756b11b1c7fc4541974a6e6b0e1"}], "stats": {"total": 1157, "additions": 714, "deletions": 443}, "files": [{"sha": "7851ea3e363a491cc78d0dba11c9a08a1ba71032", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1856,6 +1856,7 @@ mod __test {\n             doc_tests: DocTests::No,\n             bless: false,\n             compare_mode: None,\n+            rustfix_coverage: false,\n         };\n \n         let build = Build::new(config);\n@@ -1897,6 +1898,7 @@ mod __test {\n             doc_tests: DocTests::No,\n             bless: false,\n             compare_mode: None,\n+            rustfix_coverage: false,\n         };\n \n         let build = Build::new(config);"}, {"sha": "a1f89d6c86f1d8a345b405307050cb2e2fcb5573", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -56,6 +56,7 @@ pub enum Subcommand {\n         rustc_args: Vec<String>,\n         fail_fast: bool,\n         doc_tests: DocTests,\n+        rustfix_coverage: bool,\n     },\n     Bench {\n         paths: Vec<PathBuf>,\n@@ -188,6 +189,12 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\"\n                     \"mode describing what file the actual ui output will be compared to\",\n                     \"COMPARE MODE\",\n                 );\n+                opts.optflag(\n+                    \"\",\n+                    \"rustfix-coverage\",\n+                    \"enable this to generate a Rustfix coverage file, which is saved in \\\n+                        `/<build_base>/rustfix_missing_coverage.txt`\",\n+                );\n             }\n             \"bench\" => {\n                 opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\");\n@@ -363,6 +370,7 @@ Arguments:\n                 test_args: matches.opt_strs(\"test-args\"),\n                 rustc_args: matches.opt_strs(\"rustc-args\"),\n                 fail_fast: !matches.opt_present(\"no-fail-fast\"),\n+                rustfix_coverage: matches.opt_present(\"rustfix-coverage\"),\n                 doc_tests: if matches.opt_present(\"doc\") {\n                     DocTests::Only\n                 } else if matches.opt_present(\"no-doc\") {\n@@ -467,6 +475,13 @@ impl Subcommand {\n         }\n     }\n \n+    pub fn rustfix_coverage(&self) -> bool {\n+        match *self {\n+            Subcommand::Test { rustfix_coverage, .. } => rustfix_coverage,\n+            _ => false,\n+        }\n+    }\n+\n     pub fn compare_mode(&self) -> Option<&str> {\n         match *self {\n             Subcommand::Test {"}, {"sha": "41c73f307b6d0586c51add86c2bed48c9eacb585", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1284,6 +1284,10 @@ impl Step for Compiletest {\n             cmd.arg(\"--android-cross-path\").arg(\"\");\n         }\n \n+        if builder.config.cmd.rustfix_coverage() {\n+            cmd.arg(\"--rustfix-coverage\");\n+        }\n+\n         builder.ci_env.force_coloring_in_ci(&mut cmd);\n \n         let _folder = builder.fold_output(|| format!(\"test_{}\", suite));"}, {"sha": "896710609642afa165e44d0ec71a2d9312019244", "filename": "src/libcore/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibcore%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibcore%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fffi.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -190,7 +190,7 @@ impl<'a> VaList<'a> {\n                reason = \"the `c_variadic` feature has not been properly tested on \\\n                          all supported platforms\",\n                issue = \"44930\")]\n-    pub unsafe fn copy<F, R>(&self, f: F) -> R\n+    pub unsafe fn with_copy<F, R>(&self, f: F) -> R\n             where F: for<'copy> FnOnce(VaList<'copy>) -> R {\n         #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n                       not(target_arch = \"x86_64\")),"}, {"sha": "01da5518868a1029c7ed294cf5a9b914051d6d73", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -112,6 +112,24 @@ nonzero_integers! {\n     #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroIsize(isize);\n }\n \n+macro_rules! from_str_radix_nzint_impl {\n+    ($($t:ty)*) => {$(\n+        #[stable(feature = \"nonzero_parse\", since = \"1.35.0\")]\n+        impl FromStr for $t {\n+            type Err = ParseIntError;\n+            fn from_str(src: &str) -> Result<Self, Self::Err> {\n+                Self::new(from_str_radix(src, 10)?)\n+                    .ok_or(ParseIntError {\n+                        kind: IntErrorKind::Zero\n+                    })\n+            }\n+        }\n+    )*}\n+}\n+\n+from_str_radix_nzint_impl! { NonZeroU8 NonZeroU16 NonZeroU32 NonZeroU64 NonZeroU128 NonZeroUsize\n+                             NonZeroI8 NonZeroI16 NonZeroI32 NonZeroI64 NonZeroI128 NonZeroIsize }\n+\n /// Provides intentionally-wrapped arithmetic on `T`.\n ///\n /// Operations like `+` on `u32` values is intended to never overflow,\n@@ -4768,6 +4786,11 @@ pub enum IntErrorKind {\n     Overflow,\n     /// Integer is too small to store in target integer type.\n     Underflow,\n+    /// Value was Zero\n+    ///\n+    /// This variant will be emitted when the parsing string has a value of zero, which\n+    /// would be illegal for non-zero types.\n+    Zero,\n }\n \n impl ParseIntError {\n@@ -4790,6 +4813,7 @@ impl ParseIntError {\n             IntErrorKind::InvalidDigit => \"invalid digit found in string\",\n             IntErrorKind::Overflow => \"number too large to fit in target type\",\n             IntErrorKind::Underflow => \"number too small to fit in target type\",\n+            IntErrorKind::Zero => \"number would be zero for non-zero type\",\n         }\n     }\n }"}, {"sha": "2ed25a341021b48bf923c7068761e8b157ea4929", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -31,6 +31,7 @@\n #![feature(slice_internals)]\n #![feature(slice_partition_dedup)]\n #![feature(copy_within)]\n+#![feature(int_error_matching)]\n \n extern crate core;\n extern crate test;"}, {"sha": "77e484601bc223c4542b24711c4f60acbf69df14", "filename": "src/libcore/tests/nonzero.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnonzero.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1,6 +1,5 @@\n-use core::num::{NonZeroU32, NonZeroI32};\n-use core::option::Option;\n-use core::option::Option::{Some, None};\n+use core::num::{IntErrorKind, NonZeroI32, NonZeroI8, NonZeroU32, NonZeroU8};\n+use core::option::Option::{self, None, Some};\n use std::mem::size_of;\n \n #[test]\n@@ -126,3 +125,24 @@ fn test_from_signed_nonzero() {\n     let num: i32 = nz.into();\n     assert_eq!(num, 1i32);\n }\n+\n+#[test]\n+fn test_from_str() {\n+    assert_eq!(\"123\".parse::<NonZeroU8>(), Ok(NonZeroU8::new(123).unwrap()));\n+    assert_eq!(\n+        \"0\".parse::<NonZeroU8>().err().map(|e| e.kind().clone()),\n+        Some(IntErrorKind::Zero)\n+    );\n+    assert_eq!(\n+        \"-1\".parse::<NonZeroU8>().err().map(|e| e.kind().clone()),\n+        Some(IntErrorKind::InvalidDigit)\n+    );\n+    assert_eq!(\n+        \"-129\".parse::<NonZeroI8>().err().map(|e| e.kind().clone()),\n+        Some(IntErrorKind::Underflow)\n+    );\n+    assert_eq!(\n+        \"257\".parse::<NonZeroU8>().err().map(|e| e.kind().clone()),\n+        Some(IntErrorKind::Overflow)\n+    );\n+}"}, {"sha": "1f4f7d344245dd5cb3710323b63d46897e0a4aaa", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 30, "deletions": 48, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -85,11 +85,6 @@ macro_rules! is_anon_attr {\n     ($attr:ident) => (false);\n }\n \n-macro_rules! is_input_attr {\n-    (input) => (true);\n-    ($attr:ident) => (false);\n-}\n-\n macro_rules! is_eval_always_attr {\n     (eval_always) => (true);\n     ($attr:ident) => (false);\n@@ -99,10 +94,6 @@ macro_rules! contains_anon_attr {\n     ($($attr:ident),*) => ({$(is_anon_attr!($attr) | )* false});\n }\n \n-macro_rules! contains_input_attr {\n-    ($($attr:ident),*) => ({$(is_input_attr!($attr) | )* false});\n-}\n-\n macro_rules! contains_eval_always_attr {\n     ($($attr:ident),*) => ({$(is_eval_always_attr!($attr) | )* false});\n }\n@@ -151,7 +142,7 @@ macro_rules! define_dep_nodes {\n                 }\n             }\n \n-            // FIXME: Make `is_anon`, `is_input`, `is_eval_always` and `has_params` properties\n+            // FIXME: Make `is_anon`, `is_eval_always` and `has_params` properties\n             // of queries\n             #[inline(always)]\n             pub fn is_anon(&self) -> bool {\n@@ -162,15 +153,6 @@ macro_rules! define_dep_nodes {\n                 }\n             }\n \n-            #[inline(always)]\n-            pub fn is_input(&self) -> bool {\n-                match *self {\n-                    $(\n-                        DepKind :: $variant => { contains_input_attr!($($attr),*) }\n-                    )*\n-                }\n-            }\n-\n             #[inline(always)]\n             pub fn is_eval_always(&self) -> bool {\n                 match *self {\n@@ -438,17 +420,17 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     // suitable wrapper, you can use `tcx.dep_graph.ignore()` to gain\n     // access to the krate, but you must remember to add suitable\n     // edges yourself for the individual items that you read.\n-    [input] Krate,\n+    [eval_always] Krate,\n \n     // Represents the body of a function or method. The def-id is that of the\n     // function/method.\n-    [input] HirBody(DefId),\n+    [eval_always] HirBody(DefId),\n \n     // Represents the HIR node with the given node-id\n-    [input] Hir(DefId),\n+    [eval_always] Hir(DefId),\n \n     // Represents metadata from an extern crate.\n-    [input] CrateMetadata(CrateNum),\n+    [eval_always] CrateMetadata(CrateNum),\n \n     // Represents different phases in the compiler.\n     [] RegionScopeTree(DefId),\n@@ -481,7 +463,7 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     [] CollectModItemTypes(DefId),\n \n     [] Reachability,\n-    [eval_always] CrateVariances,\n+    [] CrateVariances,\n \n     // Nodes representing bits of computed IR in the tcx. Each shared\n     // table in the tcx (or elsewhere) maps to one of these\n@@ -534,7 +516,7 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     // The set of impls for a given trait.\n     [] TraitImpls(DefId),\n \n-    [input] AllLocalTraitImpls,\n+    [eval_always] AllLocalTraitImpls,\n \n     [anon] TraitSelect,\n \n@@ -546,7 +528,7 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     // to make type debuginfo to be source location independent. Declaring\n     // DefSpan an input makes sure that changes to these are always detected\n     // regardless of HIR hashing.\n-    [input] DefSpan(DefId),\n+    [eval_always] DefSpan(DefId),\n     [] LookupStability(DefId),\n     [] LookupDeprecationEntry(DefId),\n     [] ConstIsRvaluePromotableToStatic(DefId),\n@@ -564,10 +546,10 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     [] IsCompilerBuiltins(CrateNum),\n     [] HasGlobalAllocator(CrateNum),\n     [] HasPanicHandler(CrateNum),\n-    [input] ExternCrate(DefId),\n+    [eval_always] ExternCrate(DefId),\n     [] Specializes { impl1: DefId, impl2: DefId },\n-    [input] InScopeTraits(DefIndex),\n-    [input] ModuleExports(DefId),\n+    [eval_always] InScopeTraits(DefIndex),\n+    [eval_always] ModuleExports(DefId),\n     [] IsSanitizerRuntime(CrateNum),\n     [] IsProfilerRuntime(CrateNum),\n     [] GetPanicStrategy(CrateNum),\n@@ -580,10 +562,10 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     [] EntryFn(CrateNum),\n     [] PluginRegistrarFn(CrateNum),\n     [] ProcMacroDeclsStatic(CrateNum),\n-    [input] CrateDisambiguator(CrateNum),\n-    [input] CrateHash(CrateNum),\n-    [input] OriginalCrateName(CrateNum),\n-    [input] ExtraFileName(CrateNum),\n+    [eval_always] CrateDisambiguator(CrateNum),\n+    [eval_always] CrateHash(CrateNum),\n+    [eval_always] OriginalCrateName(CrateNum),\n+    [eval_always] ExtraFileName(CrateNum),\n \n     [] ImplementationsOfTrait { krate: CrateNum, trait_id: DefId },\n     [] AllTraitImplementations(CrateNum),\n@@ -592,16 +574,16 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     [] IsDllimportForeignItem(DefId),\n     [] IsStaticallyIncludedForeignItem(DefId),\n     [] NativeLibraryKind(DefId),\n-    [input] LinkArgs,\n+    [eval_always] LinkArgs,\n \n     [] ResolveLifetimes(CrateNum),\n     [] NamedRegion(DefIndex),\n     [] IsLateBound(DefIndex),\n     [] ObjectLifetimeDefaults(DefIndex),\n \n     [] Visibility(DefId),\n-    [input] DepKind(CrateNum),\n-    [input] CrateName(CrateNum),\n+    [eval_always] DepKind(CrateNum),\n+    [eval_always] CrateName(CrateNum),\n     [] ItemChildren(DefId),\n     [] ExternModStmtCnum(DefId),\n     [eval_always] GetLibFeatures,\n@@ -610,24 +592,24 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     [] DefinedLangItems(CrateNum),\n     [] MissingLangItems(CrateNum),\n     [] VisibleParentMap,\n-    [input] MissingExternCrateItem(CrateNum),\n-    [input] UsedCrateSource(CrateNum),\n-    [input] PostorderCnums,\n-\n-    [input] Freevars(DefId),\n-    [input] MaybeUnusedTraitImport(DefId),\n-    [input] MaybeUnusedExternCrates,\n-    [input] NamesImportedByGlobUse(DefId),\n+    [eval_always] MissingExternCrateItem(CrateNum),\n+    [eval_always] UsedCrateSource(CrateNum),\n+    [eval_always] PostorderCnums,\n+\n+    [eval_always] Freevars(DefId),\n+    [eval_always] MaybeUnusedTraitImport(DefId),\n+    [eval_always] MaybeUnusedExternCrates,\n+    [eval_always] NamesImportedByGlobUse(DefId),\n     [eval_always] StabilityIndex,\n     [eval_always] AllTraits,\n-    [input] AllCrateNums,\n+    [eval_always] AllCrateNums,\n     [] ExportedSymbols(CrateNum),\n     [eval_always] CollectAndPartitionMonoItems,\n     [] IsCodegenedItem(DefId),\n     [] CodegenUnit(InternedString),\n     [] BackendOptimizationLevel(CrateNum),\n     [] CompileCodegenUnit(InternedString),\n-    [input] OutputFilenames,\n+    [eval_always] OutputFilenames,\n     [] NormalizeProjectionTy(CanonicalProjectionGoal<'tcx>),\n     [] NormalizeTyAfterErasingRegions(ParamEnvAnd<'tcx, Ty<'tcx>>),\n     [] ImpliedOutlivesBounds(CanonicalTyGoal<'tcx>),\n@@ -646,11 +628,11 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     [] SubstituteNormalizeAndTestPredicates { key: (DefId, SubstsRef<'tcx>) },\n     [] MethodAutoderefSteps(CanonicalTyGoal<'tcx>),\n \n-    [input] TargetFeaturesWhitelist,\n+    [eval_always] TargetFeaturesWhitelist,\n \n     [] InstanceDefSizeEstimate { instance_def: InstanceDef<'tcx> },\n \n-    [input] Features,\n+    [eval_always] Features,\n \n     [] ForeignModules(CrateNum),\n "}, {"sha": "db81a9d826f8cb59ce651495b9ec2ecf8525716a", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 8, "deletions": 33, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -388,10 +388,7 @@ impl DepGraph {\n             |_| None,\n             |data, key, fingerprint, _| {\n                 let mut current = data.borrow_mut();\n-                let krate_idx = current.node_to_node_index[\n-                    &DepNode::new_no_params(DepKind::Krate)\n-                ];\n-                current.alloc_node(key, smallvec![krate_idx], fingerprint)\n+                current.alloc_node(key, smallvec![], fingerprint)\n             },\n             hash_result)\n     }\n@@ -576,7 +573,7 @@ impl DepGraph {\n         tcx: TyCtxt<'_, '_, '_>,\n         dep_node: &DepNode\n     ) -> Option<(SerializedDepNodeIndex, DepNodeIndex)> {\n-        debug_assert!(!dep_node.kind.is_input());\n+        debug_assert!(!dep_node.kind.is_eval_always());\n \n         // Return None if the dep graph is disabled\n         let data = self.data.as_ref()?;\n@@ -620,8 +617,8 @@ impl DepGraph {\n             debug_assert!(data.colors.get(prev_dep_node_index).is_none());\n         }\n \n-        // We never try to mark inputs as green\n-        debug_assert!(!dep_node.kind.is_input());\n+        // We never try to mark eval_always nodes as green\n+        debug_assert!(!dep_node.kind.is_eval_always());\n \n         debug_assert_eq!(data.previous.index_to_node(prev_dep_node_index), *dep_node);\n \n@@ -658,8 +655,8 @@ impl DepGraph {\n                     let dep_dep_node = &data.previous.index_to_node(dep_dep_node_index);\n \n                     // We don't know the state of this dependency. If it isn't\n-                    // an input node, let's try to mark it green recursively.\n-                    if !dep_dep_node.kind.is_input() {\n+                    // an eval_always node, let's try to mark it green recursively.\n+                    if !dep_dep_node.kind.is_eval_always() {\n                          debug!(\"try_mark_previous_green({:?}) --- state of dependency {:?} \\\n                                  is unknown, trying to mark it green\", dep_node,\n                                  dep_dep_node);\n@@ -694,7 +691,7 @@ impl DepGraph {\n                                 }\n                             }\n                             _ => {\n-                                // For other kinds of inputs it's OK to be\n+                                // For other kinds of nodes it's OK to be\n                                 // forced.\n                             }\n                         }\n@@ -1017,33 +1014,11 @@ impl CurrentDepGraph {\n         task_deps: TaskDeps,\n         fingerprint: Fingerprint\n     ) -> DepNodeIndex {\n-        // If this is an input node, we expect that it either has no\n-        // dependencies, or that it just depends on DepKind::CrateMetadata\n-        // or DepKind::Krate. This happens for some \"thin wrapper queries\"\n-        // like `crate_disambiguator` which sometimes have zero deps (for\n-        // when called for LOCAL_CRATE) or they depend on a CrateMetadata\n-        // node.\n-        if cfg!(debug_assertions) {\n-            if node.kind.is_input() && task_deps.reads.len() > 0 &&\n-                // FIXME(mw): Special case for DefSpan until Spans are handled\n-                //            better in general.\n-                node.kind != DepKind::DefSpan &&\n-                task_deps.reads.iter().any(|&i| {\n-                    !(self.data[i].node.kind == DepKind::CrateMetadata ||\n-                        self.data[i].node.kind == DepKind::Krate)\n-                })\n-            {\n-                bug!(\"Input node {:?} with unexpected reads: {:?}\",\n-                    node,\n-                    task_deps.reads.iter().map(|&i| self.data[i].node).collect::<Vec<_>>())\n-            }\n-        }\n-\n         self.alloc_node(node, task_deps.reads, fingerprint)\n     }\n \n     fn complete_anon_task(&mut self, kind: DepKind, task_deps: TaskDeps) -> DepNodeIndex {\n-        debug_assert!(!kind.is_input());\n+        debug_assert!(!kind.is_eval_always());\n \n         let mut fingerprint = self.anon_id_seed;\n         let mut hasher = StableHasher::new();"}, {"sha": "c0579ef0f7a9689ad10116341fd6f39c49c56c7f", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -153,7 +153,7 @@ impl Forest {\n         &self.krate\n     }\n \n-    /// This is internally in the depedency tracking system.\n+    /// This is used internally in the dependency tracking system.\n     /// Use the `krate` method to ensure your dependency on the\n     /// crate is tracked.\n     pub fn untracked_krate<'hir>(&'hir self) -> &'hir Crate {"}, {"sha": "8e8543dd334f67939f7bf86ae74dc14e61a18526", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -98,8 +98,8 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n     }\n \n     fn lookup_and_handle_method(&mut self, id: hir::HirId) {\n-        if let Some(def) = self.tables.type_dependent_defs().get(id) {\n-            self.check_def_id(def.def_id());\n+        if let Some(def_id) = self.tables.type_dependent_def_id(id) {\n+            self.check_def_id(def_id);\n         } else {\n             bug!(\"no type-dependent def for method\");\n         }"}, {"sha": "01e57273e54a1d10c9346be8cf498910e8da04c0", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -559,8 +559,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n             }\n             ty::Error => { }\n             _ => {\n-                if let Some(def) = self.mc.tables.type_dependent_defs().get(call.hir_id) {\n-                    let def_id = def.def_id();\n+                if let Some(def_id) = self.mc.tables.type_dependent_def_id(call.hir_id) {\n                     let call_scope = region::Scope {\n                         id: call.hir_id.local_id,\n                         data: region::ScopeData::Node"}, {"sha": "b55e840596b851b5cc24f7c577972fa64ce815c6", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -97,7 +97,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReachableContext<'a, 'tcx> {\n                 Some(self.tables.qpath_def(qpath, expr.hir_id))\n             }\n             hir::ExprKind::MethodCall(..) => {\n-                self.tables.type_dependent_defs().get(expr.hir_id).cloned()\n+                self.tables.type_dependent_def(expr.hir_id)\n             }\n             _ => None\n         };"}, {"sha": "eb629dc44c156b8cf23deaf2dee5882423d400f1", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1706,6 +1706,12 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n             \"Specify the name of the crate being built\",\n             \"NAME\",\n         ),\n+        opt::opt_s(\n+            \"\",\n+            \"edition\",\n+            \"Specify which edition of the compiler to use when compiling code.\",\n+            EDITION_NAME_LIST,\n+        ),\n         opt::multi_s(\n             \"\",\n             \"emit\",\n@@ -1808,12 +1814,6 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n                   `expanded,identified` (fully parenthesized, AST nodes with IDs).\",\n             \"TYPE\",\n         ),\n-        opt::opt_s(\n-            \"\",\n-            \"edition\",\n-            \"Specify which edition of the compiler to use when compiling code.\",\n-            EDITION_NAME_LIST,\n-        ),\n         opt::multi_s(\n             \"\",\n             \"remap-path-prefix\","}, {"sha": "ea003ba1ac7010662ed7faf59f73216b036b2fee", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -482,6 +482,15 @@ impl<'tcx> TypeckTables<'tcx> {\n         }\n     }\n \n+    pub fn type_dependent_def(&self, id: HirId) -> Option<Def> {\n+        validate_hir_id_for_typeck_tables(self.local_id_root, id, false);\n+        self.type_dependent_defs.get(&id.local_id).cloned()\n+    }\n+\n+    pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {\n+        self.type_dependent_def(id).map(|def| def.def_id())\n+    }\n+\n     pub fn type_dependent_defs_mut(&mut self) -> LocalTableInContextMut<'_, Def> {\n         LocalTableInContextMut {\n             local_id_root: self.local_id_root,"}, {"sha": "c35cea7883f004bc665514b51524d47bb0e00e6f", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -414,7 +414,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             return result;\n         }\n \n-        if !dep_node.kind.is_input() {\n+        if !dep_node.kind.is_eval_always() {\n             // The diagnostics for this query will be\n             // promoted to the current session during\n             // try_mark_green(), so we can ignore them here.\n@@ -601,9 +601,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub(super) fn ensure_query<Q: QueryDescription<'gcx>>(self, key: Q::Key) -> () {\n         let dep_node = Q::to_dep_node(self, &key);\n \n-        // Ensuring an \"input\" or anonymous query makes no sense\n+        if dep_node.kind.is_eval_always() {\n+            let _ = self.get_query::<Q>(DUMMY_SP, key);\n+            return;\n+        }\n+\n+        // Ensuring an anonymous query makes no sense\n         assert!(!dep_node.kind.is_anon());\n-        assert!(!dep_node.kind.is_input());\n         if self.dep_graph.try_mark_green_and_read(self, &dep_node).is_none() {\n             // A None return from `try_mark_green_and_read` means that this is either\n             // a new dep node or that the dep node has already been marked red."}, {"sha": "042a8c60cfaab1a8b6789d28ac134be284d8cb1c", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -22,6 +22,7 @@ use rustc::hir::CodegenFnAttrFlags;\n use rustc::hir::def::CtorKind;\n use rustc::hir::def_id::{DefId, CrateNum, LOCAL_CRATE};\n use rustc::ich::NodeIdHashingMode;\n+use rustc::mir::interpret::truncate;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc::ty::Instance;\n use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n@@ -1368,7 +1369,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                             let value = (i.as_u32() as u128)\n                                 .wrapping_sub(niche_variants.start().as_u32() as u128)\n                                 .wrapping_add(niche_start);\n-                            let value = value & ((1u128 << niche.value.size(cx).bits()) - 1);\n+                            let value = truncate(value, niche.value.size(cx));\n                             Some(value as u64)\n                         };\n "}, {"sha": "a0e2dcd646df88361d4b4da61ee2c6ec00e2eca3", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -152,17 +152,20 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                 LinkerFlavor::PtxLinker => \"rust-ptx-linker\",\n             }), flavor)),\n             (Some(linker), None) => {\n-                let stem = if linker.extension().and_then(|ext| ext.to_str()) == Some(\"exe\") {\n-                    linker.file_stem().and_then(|stem| stem.to_str())\n-                } else {\n-                    linker.to_str()\n-                }.unwrap_or_else(|| {\n-                    sess.fatal(\"couldn't extract file stem from specified linker\");\n-                }).to_owned();\n+                let stem = linker\n+                    .file_stem()\n+                    .and_then(|stem| stem.to_str())\n+                    .unwrap_or_else(|| {\n+                        sess.fatal(\"couldn't extract file stem from specified linker\")\n+                    });\n \n                 let flavor = if stem == \"emcc\" {\n                     LinkerFlavor::Em\n-                } else if stem == \"gcc\" || stem.ends_with(\"-gcc\") {\n+                } else if stem == \"gcc\"\n+                    || stem.ends_with(\"-gcc\")\n+                    || stem == \"clang\"\n+                    || stem.ends_with(\"-clang\")\n+                {\n                     LinkerFlavor::Gcc\n                 } else if stem == \"ld\" || stem == \"ld.lld\" || stem.ends_with(\"-ld\") {\n                     LinkerFlavor::Ld"}, {"sha": "c99fc17dd89a18b80553b27720d8150aa6d776e1", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 21, "deletions": 56, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -160,7 +160,16 @@ impl<'a> GccLinker<'a> {\n     }\n \n     fn takes_hints(&self) -> bool {\n-        !self.sess.target.target.options.is_like_osx\n+        // Really this function only returns true if the underlying linker\n+        // configured for a compiler is binutils `ld.bfd` and `ld.gold`. We\n+        // don't really have a foolproof way to detect that, so rule out some\n+        // platforms where currently this is guaranteed to *not* be the case:\n+        //\n+        // * On OSX they have their own linker, not binutils'\n+        // * For WebAssembly the only functional linker is LLD, which doesn't\n+        //   support hint flags\n+        !self.sess.target.target.options.is_like_osx &&\n+            self.sess.target.target.arch != \"wasm32\"\n     }\n \n     // Some platforms take hints about whether a library is static or dynamic.\n@@ -375,6 +384,13 @@ impl<'a> Linker for GccLinker<'a> {\n             return\n         }\n \n+        // Symbol visibility takes care of this for the WebAssembly.\n+        // Additionally the only known linker, LLD, doesn't support the script\n+        // arguments just yet\n+        if self.sess.target.target.arch == \"wasm32\" {\n+            return;\n+        }\n+\n         let mut arg = OsString::new();\n         let path = tmpdir.join(\"list\");\n \n@@ -441,13 +457,13 @@ impl<'a> Linker for GccLinker<'a> {\n     }\n \n     fn group_start(&mut self) {\n-        if !self.sess.target.target.options.is_like_osx {\n+        if self.takes_hints() {\n             self.linker_arg(\"--start-group\");\n         }\n     }\n \n     fn group_end(&mut self) {\n-        if !self.sess.target.target.options.is_like_osx {\n+        if self.takes_hints() {\n             self.linker_arg(\"--end-group\");\n         }\n     }\n@@ -862,59 +878,7 @@ pub struct WasmLd<'a> {\n }\n \n impl<'a> WasmLd<'a> {\n-    fn new(mut cmd: Command, sess: &'a Session, info: &'a LinkerInfo) -> WasmLd<'a> {\n-        // There have been reports in the wild (rustwasm/wasm-bindgen#119) of\n-        // using threads causing weird hangs and bugs. Disable it entirely as\n-        // this isn't yet the bottleneck of compilation at all anyway.\n-        cmd.arg(\"--no-threads\");\n-\n-        // By default LLD only gives us one page of stack (64k) which is a\n-        // little small. Default to a larger stack closer to other PC platforms\n-        // (1MB) and users can always inject their own link-args to override this.\n-        cmd.arg(\"-z\").arg(\"stack-size=1048576\");\n-\n-        // By default LLD's memory layout is:\n-        //\n-        // 1. First, a blank page\n-        // 2. Next, all static data\n-        // 3. Finally, the main stack (which grows down)\n-        //\n-        // This has the unfortunate consequence that on stack overflows you\n-        // corrupt static data and can cause some exceedingly weird bugs. To\n-        // help detect this a little sooner we instead request that the stack is\n-        // placed before static data.\n-        //\n-        // This means that we'll generate slightly larger binaries as references\n-        // to static data will take more bytes in the ULEB128 encoding, but\n-        // stack overflow will be guaranteed to trap as it underflows instead of\n-        // corrupting static data.\n-        cmd.arg(\"--stack-first\");\n-\n-        // FIXME we probably shouldn't pass this but instead pass an explicit\n-        // whitelist of symbols we'll allow to be undefined. Unfortunately\n-        // though we can't handle symbols like `log10` that LLVM injects at a\n-        // super late date without actually parsing object files. For now let's\n-        // stick to this and hopefully fix it before stabilization happens.\n-        cmd.arg(\"--allow-undefined\");\n-\n-        // For now we just never have an entry symbol\n-        cmd.arg(\"--no-entry\");\n-\n-        // Rust code should never have warnings, and warnings are often\n-        // indicative of bugs, let's prevent them.\n-        cmd.arg(\"--fatal-warnings\");\n-\n-        // The symbol visibility story is a bit in flux right now with LLD.\n-        // It's... not entirely clear to me what's going on, but this looks to\n-        // make everything work when `export_symbols` isn't otherwise called for\n-        // things like executables.\n-        cmd.arg(\"--export-dynamic\");\n-\n-        // LLD only implements C++-like demangling, which doesn't match our own\n-        // mangling scheme. Tell LLD to not demangle anything and leave it up to\n-        // us to demangle these symbols later.\n-        cmd.arg(\"--no-demangle\");\n-\n+    fn new(cmd: Command, sess: &'a Session, info: &'a LinkerInfo) -> WasmLd<'a> {\n         WasmLd { cmd, sess, info }\n     }\n }\n@@ -1010,6 +974,7 @@ impl<'a> Linker for WasmLd<'a> {\n     }\n \n     fn build_dylib(&mut self, _out_filename: &Path) {\n+        self.cmd.arg(\"--no-entry\");\n     }\n \n     fn export_symbols(&mut self, _tmpdir: &Path, crate_type: CrateType) {"}, {"sha": "37c147d93d85c65d4e1c5c7ce9a1bbc4647609e7", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -112,7 +112,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                 }\n             },\n             hir::ExprKind::MethodCall(..) => {\n-                cx.tables.type_dependent_defs().get(expr.hir_id).cloned()\n+                cx.tables.type_dependent_def(expr.hir_id)\n             },\n             _ => None\n         };"}, {"sha": "95701204cab6d6205020b73ca66acced86dbf4c9", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 37, "deletions": 10, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -19,6 +19,7 @@ use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use syntax_pos::Span;\n+use syntax::source_map::CompilerDesugaringKind;\n \n use super::borrow_set::BorrowData;\n use super::{Context, MirBorrowckCtxt};\n@@ -154,6 +155,18 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         span,\n                         format!(\"value moved{} here, in previous iteration of loop\", move_msg),\n                     );\n+                    if Some(CompilerDesugaringKind::ForLoop) == span.compiler_desugaring_kind() {\n+                        if let Ok(snippet) = self.infcx.tcx.sess.source_map()\n+                            .span_to_snippet(span)\n+                        {\n+                            err.span_suggestion(\n+                                move_span,\n+                                \"consider borrowing this to avoid moving it into the for loop\",\n+                                format!(\"&{}\", snippet),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n+                    }\n                     is_loop_move = true;\n                 } else if move_site.traversed_back_edge {\n                     err.span_label(\n@@ -291,8 +304,11 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             format!(\"move occurs due to use{}\", move_spans.describe())\n         );\n \n-        self.explain_why_borrow_contains_point(context, borrow, None)\n-            .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n+        self.explain_why_borrow_contains_point(\n+            context,\n+            borrow,\n+            None,\n+        ).add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\", Some(borrow_span));\n         err.buffer(&mut self.errors_buffer);\n     }\n \n@@ -329,7 +345,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         });\n \n         self.explain_why_borrow_contains_point(context, borrow, None)\n-            .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n+            .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\", None);\n         err.buffer(&mut self.errors_buffer);\n     }\n \n@@ -542,8 +558,13 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             ));\n         }\n \n-        explanation\n-            .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, first_borrow_desc);\n+        explanation.add_explanation_to_diagnostic(\n+            self.infcx.tcx,\n+            self.mir,\n+            &mut err,\n+            first_borrow_desc,\n+            None,\n+        );\n \n         err.buffer(&mut self.errors_buffer);\n     }\n@@ -866,7 +887,13 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n             if let BorrowExplanation::MustBeValidFor { .. } = explanation {\n             } else {\n-                explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n+                explanation.add_explanation_to_diagnostic(\n+                    self.infcx.tcx,\n+                    self.mir,\n+                    &mut err,\n+                    \"\",\n+                    None,\n+                );\n             }\n         } else {\n             err.span_label(borrow_span, \"borrowed value does not live long enough\");\n@@ -886,7 +913,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 format!(\"value captured here{}\", within),\n             );\n \n-            explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n+            explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\", None);\n         }\n \n         err\n@@ -946,7 +973,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             _ => {}\n         }\n \n-        explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n+        explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\", None);\n \n         err.buffer(&mut self.errors_buffer);\n     }\n@@ -1027,7 +1054,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             }\n             _ => {}\n         }\n-        explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n+        explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\", None);\n \n         let within = if borrow_spans.for_generator() {\n             \" by generator\"\n@@ -1367,7 +1394,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         );\n \n         self.explain_why_borrow_contains_point(context, loan, None)\n-            .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n+            .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\", None);\n \n         err.buffer(&mut self.errors_buffer);\n     }"}, {"sha": "67b77605f3c92f4a8b3ea45247a13b8cd8686722", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -56,17 +56,23 @@ impl BorrowExplanation {\n         mir: &Mir<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n         borrow_desc: &str,\n+        borrow_span: Option<Span>,\n     ) {\n         match *self {\n             BorrowExplanation::UsedLater(later_use_kind, var_or_use_span) => {\n                 let message = match later_use_kind {\n-                    LaterUseKind::TraitCapture => \"borrow later captured here by trait object\",\n-                    LaterUseKind::ClosureCapture => \"borrow later captured here by closure\",\n-                    LaterUseKind::Call => \"borrow later used by call\",\n-                    LaterUseKind::FakeLetRead => \"borrow later stored here\",\n-                    LaterUseKind::Other => \"borrow later used here\",\n+                    LaterUseKind::TraitCapture => \"captured here by trait object\",\n+                    LaterUseKind::ClosureCapture => \"captured here by closure\",\n+                    LaterUseKind::Call => \"used by call\",\n+                    LaterUseKind::FakeLetRead => \"stored here\",\n+                    LaterUseKind::Other => \"used here\",\n                 };\n-                err.span_label(var_or_use_span, format!(\"{}{}\", borrow_desc, message));\n+                if !borrow_span.map(|sp| sp.overlaps(var_or_use_span)).unwrap_or(false) {\n+                    err.span_label(\n+                        var_or_use_span,\n+                        format!(\"{}borrow later {}\", borrow_desc, message),\n+                    );\n+                }\n             }\n             BorrowExplanation::UsedLaterInLoop(later_use_kind, var_or_use_span) => {\n                 let message = match later_use_kind {"}, {"sha": "e4f92f81e9ff6c92ae3fae57f92f4950926d8ac9", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -834,13 +834,11 @@ fn method_callee<'a, 'gcx, 'tcx>(\n     let (def_id, substs, user_ty) = match overloaded_callee {\n         Some((def_id, substs)) => (def_id, substs, None),\n         None => {\n-            let type_dependent_defs = cx.tables().type_dependent_defs();\n-            let def = type_dependent_defs\n-                .get(expr.hir_id)\n+            let def = cx.tables().type_dependent_def(expr.hir_id)\n                 .unwrap_or_else(|| {\n                     span_bug!(expr.span, \"no type-dependent def for method callee\")\n                 });\n-            let user_ty = user_substs_applied_to_def(cx, expr.hir_id, def);\n+            let user_ty = user_substs_applied_to_def(cx, expr.hir_id, &def);\n             debug!(\"method_callee: user_ty={:?}\", user_ty);\n             (def.def_id(), cx.tables().node_substs(expr.hir_id), user_ty)\n         }"}, {"sha": "a0a0d7be1b95d4ae34f15d2ca16e5a4bd3bbfd05", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -405,8 +405,7 @@ fn check_expr_kind<'a, 'tcx>(\n             for index in hirvec.iter() {\n                 method_call_result &= v.check_expr(index);\n             }\n-            if let Some(def) = v.tables.type_dependent_defs().get(e.hir_id) {\n-                let def_id = def.def_id();\n+            if let Some(def_id) = v.tables.type_dependent_def_id(e.hir_id) {\n                 match v.tcx.associated_item(def_id).container {\n                     ty::ImplContainer(_) => method_call_result & v.handle_const_fn_call(def_id),\n                     ty::TraitContainer(_) => NotPromotable,"}, {"sha": "adb1a4b13088730bb19065550e27c4005a9d5b04", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1053,8 +1053,8 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n             hir::ExprKind::MethodCall(_, span, _) => {\n                 // Method calls have to be checked specially.\n                 self.span = span;\n-                if let Some(def) = self.tables.type_dependent_defs().get(expr.hir_id) {\n-                    if self.visit(self.tcx.type_of(def.def_id())) {\n+                if let Some(def_id) = self.tables.type_dependent_def_id(expr.hir_id) {\n+                    if self.visit(self.tcx.type_of(def_id)) {\n                         return;\n                     }\n                 } else {\n@@ -1083,7 +1083,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n                 _ => None,\n             }\n             hir::QPath::TypeRelative(..) => {\n-                self.tables.type_dependent_defs().get(id).cloned()\n+                self.tables.type_dependent_def(id)\n             }\n         };\n         if let Some(def) = def {"}, {"sha": "898ea62046d4896b7b2824a2af12b04d175811dd", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -573,8 +573,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             }\n             ast::ExprKind::MethodCall(ref seg, ..) => {\n                 let expr_hir_id = self.tcx.hir().definitions().node_to_hir_id(expr.id);\n-                let method_id = match self.tables.type_dependent_defs().get(expr_hir_id) {\n-                    Some(id) => id.def_id(),\n+                let method_id = match self.tables.type_dependent_def_id(expr_hir_id) {\n+                    Some(id) => id,\n                     None => {\n                         debug!(\"Could not resolve method id for {:?}\", expr);\n                         return None;"}, {"sha": "401b81ee987234625f2968694704e94e34590e82", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -66,6 +66,7 @@ mod l4re_base;\n mod fuchsia_base;\n mod redox_base;\n mod riscv_base;\n+mod wasm32_base;\n \n #[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd, Hash,\n          RustcEncodable, RustcDecodable)]"}, {"sha": "c7e75b4fa090377e058389e3a1aa20c98611b7d0", "filename": "src/librustc_target/spec/wasm32_base.rs", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -0,0 +1,123 @@\n+use std::collections::BTreeMap;\n+use super::{LldFlavor, TargetOptions, PanicStrategy, LinkerFlavor};\n+\n+pub fn options() -> TargetOptions {\n+    let mut lld_args = Vec::new();\n+    let mut clang_args = Vec::new();\n+    let mut arg = |arg: &str| {\n+        lld_args.push(arg.to_string());\n+        clang_args.push(format!(\"-Wl,{}\", arg));\n+    };\n+\n+    // There have been reports in the wild (rustwasm/wasm-bindgen#119) of\n+    // using threads causing weird hangs and bugs. Disable it entirely as\n+    // this isn't yet the bottleneck of compilation at all anyway.\n+    //\n+    // FIXME: we should file an upstream issue with LLD about this\n+    arg(\"--no-threads\");\n+\n+    // By default LLD only gives us one page of stack (64k) which is a\n+    // little small. Default to a larger stack closer to other PC platforms\n+    // (1MB) and users can always inject their own link-args to override this.\n+    arg(\"-z\");\n+    arg(\"stack-size=1048576\");\n+\n+    // By default LLD's memory layout is:\n+    //\n+    // 1. First, a blank page\n+    // 2. Next, all static data\n+    // 3. Finally, the main stack (which grows down)\n+    //\n+    // This has the unfortunate consequence that on stack overflows you\n+    // corrupt static data and can cause some exceedingly weird bugs. To\n+    // help detect this a little sooner we instead request that the stack is\n+    // placed before static data.\n+    //\n+    // This means that we'll generate slightly larger binaries as references\n+    // to static data will take more bytes in the ULEB128 encoding, but\n+    // stack overflow will be guaranteed to trap as it underflows instead of\n+    // corrupting static data.\n+    arg(\"--stack-first\");\n+\n+    // FIXME we probably shouldn't pass this but instead pass an explicit\n+    // whitelist of symbols we'll allow to be undefined. We don't currently have\n+    // a mechanism of knowing, however, which symbols are intended to be\n+    // imported from the environment and which are intended to be imported from\n+    // other objects linked elsewhere. This is a coarse approximation but is\n+    // sure to hide some bugs and frustrate someone at some point, so we should\n+    // ideally work towards a world where we can explicitly list symbols that\n+    // are supposed to be imported and have all other symbols generate errors if\n+    // they remain undefined.\n+    arg(\"--allow-undefined\");\n+\n+    // Rust code should never have warnings, and warnings are often\n+    // indicative of bugs, let's prevent them.\n+    arg(\"--fatal-warnings\");\n+\n+    // LLD only implements C++-like demangling, which doesn't match our own\n+    // mangling scheme. Tell LLD to not demangle anything and leave it up to\n+    // us to demangle these symbols later. Currently rustc does not perform\n+    // further demangling, but tools like twiggy and wasm-bindgen are intended\n+    // to do so.\n+    arg(\"--no-demangle\");\n+\n+    // The symbol visibility story is a bit in flux right now with LLD.\n+    // It's... not entirely clear to me what's going on, but this looks to\n+    // make everything work when `export_symbols` isn't otherwise called for\n+    // things like executables.\n+    //\n+    // This is really only here to get things working. If it can be removed and\n+    // basic tests still work, then sounds like it should be removed!\n+    arg(\"--export-dynamic\");\n+\n+    let mut pre_link_args = BTreeMap::new();\n+    pre_link_args.insert(LinkerFlavor::Lld(LldFlavor::Wasm), lld_args);\n+    pre_link_args.insert(LinkerFlavor::Gcc, clang_args);\n+\n+    TargetOptions {\n+        // we allow dynamic linking, but only cdylibs. Basically we allow a\n+        // final library artifact that exports some symbols (a wasm module) but\n+        // we don't allow intermediate `dylib` crate types\n+        dynamic_linking: true,\n+        only_cdylib: true,\n+\n+        // This means we'll just embed a `start` function in the wasm module\n+        executables: true,\n+\n+        // relatively self-explanatory!\n+        exe_suffix: \".wasm\".to_string(),\n+        dll_prefix: String::new(),\n+        dll_suffix: \".wasm\".to_string(),\n+        linker_is_gnu: false,\n+\n+        max_atomic_width: Some(64),\n+\n+        // Unwinding doesn't work right now, so the whole target unconditionally\n+        // defaults to panic=abort. Note that this is guaranteed to change in\n+        // the future once unwinding is implemented. Don't rely on this as we're\n+        // basically guaranteed to change it once WebAssembly supports\n+        // exceptions.\n+        panic_strategy: PanicStrategy::Abort,\n+\n+        // Wasm doesn't have atomics yet, so tell LLVM that we're in a single\n+        // threaded model which will legalize atomics to normal operations.\n+        singlethread: true,\n+\n+        // no dynamic linking, no need for default visibility!\n+        default_hidden_visibility: true,\n+\n+        // we use the LLD shipped with the Rust toolchain by default\n+        linker: Some(\"rust-lld\".to_owned()),\n+        lld_flavor: LldFlavor::Wasm,\n+\n+        // No need for indirection here, simd types can always be passed by\n+        // value as the whole module either has simd or not, which is different\n+        // from x86 (for example) where programs can have functions that don't\n+        // enable simd features.\n+        simd_types_indirect: false,\n+\n+        pre_link_args,\n+\n+        .. Default::default()\n+    }\n+}"}, {"sha": "909527d2b612064d502c7e0bbf86fad4dd70bfcf", "filename": "src/librustc_target/spec/wasm32_unknown_unknown.rs", "status": "modified", "additions": 29, "deletions": 51, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_unknown.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1,70 +1,48 @@\n-// The wasm32-unknown-unknown target is currently an experimental version of a\n-// wasm-based target which does *not* use the Emscripten toolchain. Instead\n-// this toolchain is based purely on LLVM's own toolchain, using LLVM's native\n-// WebAssembly backend as well as LLD for a native linker.\n-//\n-// There's some trickery below on crate types supported and various defaults\n-// (aka panic=abort by default), but otherwise this is in general a relatively\n-// standard target.\n-\n-use super::{LldFlavor, LinkerFlavor, Target, TargetOptions, PanicStrategy};\n+//! A \"bare wasm\" target representing a WebAssembly output that makes zero\n+//! assumptions about its environment.\n+//!\n+//! The `wasm32-unknown-unknown` target is intended to encapsulate use cases\n+//! that do not rely on any imported functionality. The binaries generated are\n+//! entirely self-contained by default when using the standard library. Although\n+//! the standard library is available, most of it returns an error immediately\n+//! (e.g. trying to create a TCP stream or something like that).\n+//!\n+//! This target is more or less managed by the Rust and WebAssembly Working\n+//! Group nowadays at https://github.com/rustwasm.\n+\n+use super::{LldFlavor, LinkerFlavor, Target};\n+use super::wasm32_base;\n \n pub fn target() -> Result<Target, String> {\n-    let opts = TargetOptions {\n-        // we allow dynamic linking, but only cdylibs. Basically we allow a\n-        // final library artifact that exports some symbols (a wasm module) but\n-        // we don't allow intermediate `dylib` crate types\n-        dynamic_linking: true,\n-        only_cdylib: true,\n-\n-        // This means we'll just embed a `start` function in the wasm module\n-        executables: true,\n-\n-        // relatively self-explanatory!\n-        exe_suffix: \".wasm\".to_string(),\n-        dll_prefix: String::new(),\n-        dll_suffix: \".wasm\".to_string(),\n-        linker_is_gnu: false,\n-\n-        max_atomic_width: Some(64),\n-\n-        // Unwinding doesn't work right now, so the whole target unconditionally\n-        // defaults to panic=abort. Note that this is guaranteed to change in\n-        // the future once unwinding is implemented. Don't rely on this.\n-        panic_strategy: PanicStrategy::Abort,\n-\n-        // Wasm doesn't have atomics yet, so tell LLVM that we're in a single\n-        // threaded model which will legalize atomics to normal operations.\n-        singlethread: true,\n+    let mut options = wasm32_base::options();\n+    let clang_args = options.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap();\n \n-        // no dynamic linking, no need for default visibility!\n-        default_hidden_visibility: true,\n+    // Make sure clang uses LLD as its linker and is configured appropriately\n+    // otherwise\n+    clang_args.push(\"--target=wasm32-unknown-unknown\".to_string());\n \n-        // we use the LLD shipped with the Rust toolchain by default\n-        linker: Some(\"rust-lld\".to_owned()),\n-        lld_flavor: LldFlavor::Wasm,\n+    // Disable attempting to link crt1.o since it typically isn't present and\n+    // isn't needed currently.\n+    clang_args.push(\"-nostdlib\".to_string());\n \n-        // No need for indirection here, simd types can always be passed by\n-        // value as the whole module either has simd or not, which is different\n-        // from x86 (for example) where programs can have functions that don't\n-        // enable simd features.\n-        simd_types_indirect: false,\n+    // For now this target just never has an entry symbol no matter the output\n+    // type, so unconditionally pass this.\n+    clang_args.push(\"-Wl,--no-entry\".to_string());\n+    options.pre_link_args.get_mut(&LinkerFlavor::Lld(LldFlavor::Wasm))\n+        .unwrap()\n+        .push(\"--no-entry\".to_string());\n \n-        .. Default::default()\n-    };\n     Ok(Target {\n         llvm_target: \"wasm32-unknown-unknown\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        // This is basically guaranteed to change in the future, don't rely on\n-        // this. Use `not(target_os = \"emscripten\")` for now.\n         target_os: \"unknown\".to_string(),\n         target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         data_layout: \"e-m:e-p:32:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"wasm32\".to_string(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Wasm),\n-        options: opts,\n+        options,\n     })\n }"}, {"sha": "5c498923379653f23eba2af66c5b163c298c2fa8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -4802,10 +4802,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 (self.to_ty(qself), qself, segment)\n             }\n         };\n-        if let Some(cached_def) = self.tables.borrow().type_dependent_defs().get(hir_id) {\n+        if let Some(cached_def) = self.tables.borrow().type_dependent_def(hir_id) {\n             // Return directly on cache hit. This is useful to avoid doubly reporting\n             // errors with default match binding modes. See #44614.\n-            return (*cached_def, Some(ty), slice::from_ref(&**item_segment))\n+            return (cached_def, Some(ty), slice::from_ref(&**item_segment))\n         }\n         let item_name = item_segment.ident;\n         let def = match self.resolve_ufcs(span, item_name, ty, hir_id) {"}, {"sha": "163d50c4e4b4a1dfa7920bdbf96dff2e564f3ecb", "filename": "src/test/run-make-fulldeps/c-link-to-rust-va-list-fn/checkrust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Fcheckrust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Fcheckrust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Fcheckrust.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -62,7 +62,7 @@ pub unsafe extern \"C\" fn check_list_copy_0(mut ap: VaList) -> usize {\n     continue_if!(ap.arg::<c_int>() == 16);\n     continue_if!(ap.arg::<c_char>() == 'A' as c_char);\n     continue_if!(compare_c_str(ap.arg::<*const c_char>(), \"Skip Me!\"));\n-    ap.copy(|mut ap| {\n+    ap.with_copy(|mut ap| {\n         if compare_c_str(ap.arg::<*const c_char>(), \"Correct\") {\n             0\n         } else {"}, {"sha": "1a120dcb18654c0c321f99dfa5adcd491a2d710a", "filename": "src/test/rustdoc-ui/deny-intra-link-resolution-failure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![deny(intra_doc_link_resolution_failure)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n error: aborting due to previous error\n "}, {"sha": "cebb14cba7c11b96d70648c3e43dff35159ae02b", "filename": "src/test/rustdoc-ui/intra-doc-alias-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![deny(intra_doc_link_resolution_failure)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n error: aborting due to previous error\n "}, {"sha": "7ee9ca47923954780e0e6d0887a6bd915a642acb", "filename": "src/test/rustdoc-ui/intra-link-span-ice-55723.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![deny(intra_doc_link_resolution_failure)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n error: aborting due to previous error\n "}, {"sha": "8ccc04a4c0bcd92a13f6ffaeebbe6f337351f490", "filename": "src/test/rustdoc-ui/intra-links-warning-crlf.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -5,29 +5,29 @@ LL | /// [error]\n    |      ^^^^^ cannot be resolved, ignoring\n    |\n    = note: #[warn(intra_doc_link_resolution_failure)] on by default\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[error1]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning-crlf.rs:12:11\n    |\n LL | /// docs [error1]\n    |           ^^^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[error2]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning-crlf.rs:14:11\n    |\n LL | /// docs [error2]\n    |           ^^^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[error]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning-crlf.rs:21:20\n    |\n LL |  * It also has an [error].\n    |                    ^^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n "}, {"sha": "1eec3c57b68ded3f7de10d5a2bb7f228c00b1829", "filename": "src/test/rustdoc-ui/intra-links-warning.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -5,71 +5,71 @@ LL |        //! Test with [Foo::baz], [Bar::foo], ...\n    |                       ^^^^^^^^ cannot be resolved, ignoring\n    |\n    = note: #[warn(intra_doc_link_resolution_failure)] on by default\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[Bar::foo]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:3:35\n    |\n LL |        //! Test with [Foo::baz], [Bar::foo], ...\n    |                                   ^^^^^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[Uniooon::X]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:4:13\n    |\n LL |      //! , [Uniooon::X] and [Qux::Z].\n    |             ^^^^^^^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[Qux::Z]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:4:30\n    |\n LL |      //! , [Uniooon::X] and [Qux::Z].\n    |                              ^^^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[Uniooon::X]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:6:14\n    |\n LL |       //! , [Uniooon::X] and [Qux::Z].\n    |              ^^^^^^^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[Qux::Z]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:6:31\n    |\n LL |       //! , [Uniooon::X] and [Qux::Z].\n    |                               ^^^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[Qux:Y]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:8:13\n    |\n LL |        /// [Qux:Y]\n    |             ^^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[error]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:51:30\n    |\n LL |  * time to introduce a link [error]*/\n    |                              ^^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[error]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:57:30\n    |\n LL |  * time to introduce a link [error]\n    |                              ^^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[error]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:61:1\n@@ -81,19 +81,19 @@ LL | #[doc = \"single line [error]\"]\n            \n            single line [error]\n                         ^^^^^\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[error]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:64:1\n    |\n-LL | #[doc = \"single line with /\"escaping/\" [error]\"]\n+LL | #[doc = \"single line with \\\"escaping\\\" [error]\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the link appears in this line:\n            \n            single line with \"escaping\" [error]\n                                         ^^^^^\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[error]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:67:1\n@@ -107,72 +107,72 @@ LL | | /// [error]\n            \n            [error]\n             ^^^^^\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[error1]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:73:11\n    |\n LL | /// docs [error1]\n    |           ^^^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[error2]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:75:11\n    |\n LL | /// docs [error2]\n    |           ^^^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[BarA]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:14:10\n    |\n LL | /// bar [BarA] bar\n    |          ^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[BarB]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:20:9\n    |\n LL |  * bar [BarB] bar\n    |         ^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[BarC]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:27:6\n    |\n LL | bar [BarC] bar\n    |      ^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[BarD]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:38:1\n    |\n-LL | #[doc = \"Foo/nbar [BarD] bar/nbaz\"]\n+LL | #[doc = \"Foo\\nbar [BarD] bar\\nbaz\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the link appears in this line:\n            \n            bar [BarD] bar\n                 ^^^^\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[BarF]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:43:9\n    |\n LL |         #[doc = $f]\n    |         ^^^^^^^^^^^\n ...\n-LL | f!(\"Foo/nbar [BarF] bar/nbaz\");\n+LL | f!(\"Foo\\nbar [BarF] bar\\nbaz\");\n    | ------------------------------- in this macro invocation\n    |\n    = note: the link appears in this line:\n            \n            bar [BarF] bar\n                 ^^^^\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n "}, {"sha": "b4ed747b44c817615aac7f67b384f5c8458603be", "filename": "src/test/rustdoc-ui/invalid-syntax.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -3,11 +3,11 @@ warning: could not parse code block as Rust code\n    |\n LL |   /// ```\n    |  _____^\n-LL | | /// /__________pkt->size___________/          /_result->size_/ /__pkt->size__/\n+LL | | /// \\__________pkt->size___________/          \\_result->size_/ \\__pkt->size__/\n LL | | /// ```\n    | |_______^\n    |\n-   = note: error from rustc: unknown start of token: /\n+   = note: error from rustc: unknown start of token: \\\n help: mark blocks that do not contain Rust code as text\n    |\n LL | /// ```text\n@@ -35,11 +35,11 @@ warning: could not parse code block as Rust code\n    |\n LL |   /// ```\n    |  _____^\n-LL | | /// /_\n+LL | | /// \\_\n LL | | /// ```\n    | |_______^\n    |\n-   = note: error from rustc: unknown start of token: /\n+   = note: error from rustc: unknown start of token: \\\n help: mark blocks that do not contain Rust code as text\n    |\n LL | /// ```text\n@@ -50,21 +50,21 @@ warning: could not parse code block as Rust code\n    |\n LL |   /// ```rust\n    |  _____^\n-LL | | /// /_\n+LL | | /// \\_\n LL | | /// ```\n    | |_______^\n    |\n-   = note: error from rustc: unknown start of token: /\n+   = note: error from rustc: unknown start of token: \\\n \n warning: could not parse code block as Rust code\n   --> $DIR/invalid-syntax.rs:41:9\n    |\n LL |   ///     code with bad syntax\n    |  _________^\n-LL | | ///     /_\n+LL | | ///     \\_\n    | |__________^\n    |\n-   = note: error from rustc: unknown start of token: /\n+   = note: error from rustc: unknown start of token: \\\n \n warning: could not parse code block as Rust code\n   --> $DIR/invalid-syntax.rs:55:9\n@@ -79,17 +79,17 @@ warning: could not parse code block as Rust code\n    |\n LL |   /// ```edition2018\n    |  _____^\n-LL | | /// /_\n+LL | | /// \\_\n LL | | /// ```\n    | |_______^\n    |\n-   = note: error from rustc: unknown start of token: /\n+   = note: error from rustc: unknown start of token: \\\n \n warning: doc comment contains an invalid Rust code block\n   --> $DIR/invalid-syntax.rs:63:1\n    |\n LL | / #[doc = \"```\"]\n-LL | | /// /_\n+LL | | /// \\_\n LL | | #[doc = \"```\"]\n    | |______________^\n    |"}, {"sha": "24db3453ec50983f66866b8a5b74a3c0729f0a16", "filename": "src/test/rustdoc-ui/lint-group.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -27,7 +27,7 @@ note: lint level defined here\n LL | #![deny(rustdoc)]\n    |         ^^^^^^^\n    = note: #[deny(intra_doc_link_resolution_failure)] implied by #[deny(rustdoc)]\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n error: Missing code example in this documentation\n   --> $DIR/lint-group.rs:16:1"}, {"sha": "e205e2a87810f7da0a39b88c1bb8d75021a2368b", "filename": "src/test/ui/augmented-assignments.nll.stderr", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1,18 +1,11 @@\n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/augmented-assignments.rs:16:5\n    |\n-LL |       x\n-   |       -\n-   |       |\n-   |  _____borrow of `x` occurs here\n-   | |\n-LL | |\n-LL | |     +=\n-LL | |     x;\n-   | |     ^\n-   | |     |\n-   | |_____move out of `x` occurs here\n-   |       borrow later used here\n+LL |     x\n+   |     - borrow of `x` occurs here\n+...\n+LL |     x;\n+   |     ^ move out of `x` occurs here\n \n error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n   --> $DIR/augmented-assignments.rs:21:5"}, {"sha": "1c77479d02f4055ff120e5be72e1758a0a65e5fc", "filename": "src/test/ui/c-variadic/variadic-ffi-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -13,7 +13,7 @@ pub unsafe extern \"C\" fn no_escape1(_: usize, ap: ...) -> VaList<'static> {\n }\n \n pub unsafe extern \"C\" fn no_escape2(_: usize, ap: ...) {\n-    let _ = ap.copy(|ap| { ap }); //~ ERROR: cannot infer an appropriate lifetime\n+    let _ = ap.with_copy(|ap| { ap }); //~ ERROR: cannot infer an appropriate lifetime\n }\n \n pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaList, mut ap1: ...) {"}, {"sha": "311e2173702c8ae0a0375faeb2ff48fb4f062f7d", "filename": "src/test/ui/c-variadic/variadic-ffi-4.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -15,29 +15,29 @@ LL |     ap\n    |     ^^ lifetime `'static` required\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/variadic-ffi-4.rs:16:28\n+  --> $DIR/variadic-ffi-4.rs:16:33\n    |\n-LL |     let _ = ap.copy(|ap| { ap });\n-   |                            ^^\n+LL |     let _ = ap.with_copy(|ap| { ap });\n+   |                                 ^^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the body at 16:21...\n-  --> $DIR/variadic-ffi-4.rs:16:21\n+note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the body at 16:26...\n+  --> $DIR/variadic-ffi-4.rs:16:26\n    |\n-LL |     let _ = ap.copy(|ap| { ap });\n-   |                     ^^^^^^^^^^^\n+LL |     let _ = ap.with_copy(|ap| { ap });\n+   |                          ^^^^^^^^^^^\n    = note: ...so that the expression is assignable:\n            expected core::ffi::VaList<'_>\n               found core::ffi::VaList<'_>\n note: but, the lifetime must be valid for the method call at 16:13...\n   --> $DIR/variadic-ffi-4.rs:16:13\n    |\n-LL |     let _ = ap.copy(|ap| { ap });\n-   |             ^^^^^^^^^^^^^^^^^^^^\n+LL |     let _ = ap.with_copy(|ap| { ap });\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...so type `core::ffi::VaList<'_>` of expression is valid during the expression\n   --> $DIR/variadic-ffi-4.rs:16:13\n    |\n-LL |     let _ = ap.copy(|ap| { ap });\n-   |             ^^^^^^^^^^^^^^^^^^^^\n+LL |     let _ = ap.with_copy(|ap| { ap });\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/variadic-ffi-4.rs:20:12"}, {"sha": "fcc80d9b0cca0a2d62682fd5ae1490f22c0da6a0", "filename": "src/test/ui/c-variadic/variadic-ffi-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-5.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -16,7 +16,7 @@ pub unsafe extern \"C\" fn no_escape1(_: usize, ap: ...) -> VaList<'static> {\n }\n \n pub unsafe extern \"C\" fn no_escape2(_: usize, ap: ...) {\n-    let _ = ap.copy(|ap| { ap }); //~ ERROR: lifetime may not live long enough\n+    let _ = ap.with_copy(|ap| { ap }); //~ ERROR: lifetime may not live long enough\n }\n \n pub unsafe extern \"C\" fn no_escape3(_: usize, ap0: &mut VaList, mut ap1: ...) {"}, {"sha": "8f1dfe8ba9b6342c387e83e728672c79acc6ec71", "filename": "src/test/ui/c-variadic/variadic-ffi-5.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-5.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -15,13 +15,13 @@ LL |     ap\n    |     ^^ lifetime `'static` required\n \n error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-5.rs:19:28\n+  --> $DIR/variadic-ffi-5.rs:19:33\n    |\n-LL |     let _ = ap.copy(|ap| { ap });\n-   |                      ---   ^^ returning this value requires that `'1` must outlive `'2`\n-   |                      | |\n-   |                      | return type of closure is core::ffi::VaList<'2>\n-   |                      has type `core::ffi::VaList<'1>`\n+LL |     let _ = ap.with_copy(|ap| { ap });\n+   |                           ---   ^^ returning this value requires that `'1` must outlive `'2`\n+   |                           | |\n+   |                           | return type of closure is core::ffi::VaList<'2>\n+   |                           has type `core::ffi::VaList<'1>`\n \n error: lifetime may not live long enough\n   --> $DIR/variadic-ffi-5.rs:23:5"}, {"sha": "f0c9b8988903bcb33caab2111f3e223d2a82baa1", "filename": "src/test/ui/cast_char.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fcast_char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fcast_char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast_char.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -2,7 +2,7 @@ error: only u8 can be cast into char\n   --> $DIR/cast_char.rs:4:23\n    |\n LL |     const XYZ: char = 0x1F888 as char;\n-   |                       ^^^^^^^^^^^^^^^ help: use a char literal instead: `'/u{1F888}'`\n+   |                       ^^^^^^^^^^^^^^^ help: use a char literal instead: `'\\u{1F888}'`\n    |\n note: lint level defined here\n   --> $DIR/cast_char.rs:1:9\n@@ -14,7 +14,7 @@ error: only u8 can be cast into char\n   --> $DIR/cast_char.rs:6:22\n    |\n LL |     const XY: char = 129160 as char;\n-   |                      ^^^^^^^^^^^^^^ help: use a char literal instead: `'/u{1F888}'`\n+   |                      ^^^^^^^^^^^^^^ help: use a char literal instead: `'\\u{1F888}'`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1a65825c7b6c65b6b7cc6f021894c1a44cf7779b", "filename": "src/test/ui/error-codes/E0648.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Ferror-codes%2FE0648.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Ferror-codes%2FE0648.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0648.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1,7 +1,7 @@\n error[E0648]: `export_name` may not contain null characters\n   --> $DIR/E0648.rs:1:1\n    |\n-LL | #[export_name=\"/0foo\"]\n+LL | #[export_name=\"\\0foo\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "66d35a1b854d3cd1399ed43986040a5534a39f44", "filename": "src/test/ui/fmt/format-string-error-2.stderr", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1,10 +1,10 @@\n error: incorrect unicode escape sequence\n   --> $DIR/format-string-error-2.rs:77:20\n    |\n-LL |     println!(\"/x7B}/u8 {\", 1);\n+LL |     println!(\"\\x7B}\\u8 {\", 1);\n    |                    ^^-\n    |                    |\n-   |                    help: format of unicode escape sequences uses braces: `/u{8}`\n+   |                    help: format of unicode escape sequences uses braces: `\\u{8}`\n \n error: invalid format string: expected `'}'`, found `'a'`\n   --> $DIR/format-string-error-2.rs:5:5\n@@ -19,28 +19,28 @@ LL |     a\");\n error: invalid format string: expected `'}'`, found `'b'`\n   --> $DIR/format-string-error-2.rs:9:5\n    |\n-LL |     format!(\"{ /\n+LL |     format!(\"{ \\\n    |              - because of this opening brace\n LL | \n LL |     b\");\n    |     ^ expected `}` in format string\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n-error: invalid format string: expected `'}'`, found `'/'`\n+error: invalid format string: expected `'}'`, found `'\\'`\n   --> $DIR/format-string-error-2.rs:11:18\n    |\n-LL |     format!(r#\"{ /\n+LL |     format!(r#\"{ \\\n    |                - ^ expected `}` in format string\n    |                |\n    |                because of this opening brace\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n-error: invalid format string: expected `'}'`, found `'/'`\n+error: invalid format string: expected `'}'`, found `'\\'`\n   --> $DIR/format-string-error-2.rs:15:18\n    |\n-LL |     format!(r#\"{ /n\n+LL |     format!(r#\"{ \\n\n    |                - ^ expected `}` in format string\n    |                |\n    |                because of this opening brace\n@@ -50,9 +50,9 @@ LL |     format!(r#\"{ /n\n error: invalid format string: expected `'}'`, found `'e'`\n   --> $DIR/format-string-error-2.rs:21:5\n    |\n-LL |     format!(\"{ /n\n+LL |     format!(\"{ \\n\n    |              - because of this opening brace\n-LL | /n\n+LL | \\n\n LL |     e\");\n    |     ^ expected `}` in format string\n    |\n@@ -81,9 +81,9 @@ LL |     a\n error: invalid format string: expected `'}'`, found `'b'`\n   --> $DIR/format-string-error-2.rs:35:5\n    |\n-LL |     { /\n+LL |     { \\\n    |     - because of this opening brace\n-LL |         /\n+LL |         \\\n LL |     b\");\n    |     ^ expected `}` in format string\n    |\n@@ -92,28 +92,28 @@ LL |     b\");\n error: invalid format string: expected `'}'`, found `'b'`\n   --> $DIR/format-string-error-2.rs:40:5\n    |\n-LL |     { /\n+LL |     { \\\n    |     - because of this opening brace\n-LL |         /\n-LL |     b /\n+LL |         \\\n+LL |     b \\\n    |     ^ expected `}` in format string\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n-error: invalid format string: expected `'}'`, found `'/'`\n+error: invalid format string: expected `'}'`, found `'\\'`\n   --> $DIR/format-string-error-2.rs:45:8\n    |\n-LL | raw  { /\n+LL | raw  { \\\n    |      - ^ expected `}` in format string\n    |      |\n    |      because of this opening brace\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n-error: invalid format string: expected `'}'`, found `'/'`\n+error: invalid format string: expected `'}'`, found `'\\'`\n   --> $DIR/format-string-error-2.rs:50:8\n    |\n-LL | raw  { /n\n+LL | raw  { \\n\n    |      - ^ expected `}` in format string\n    |      |\n    |      because of this opening brace\n@@ -123,9 +123,9 @@ LL | raw  { /n\n error: invalid format string: expected `'}'`, found `'e'`\n   --> $DIR/format-string-error-2.rs:57:5\n    |\n-LL |   { /n\n+LL |   { \\n\n    |   - because of this opening brace\n-LL | /n\n+LL | \\n\n LL |     e\");\n    |     ^ expected `}` in format string\n    |\n@@ -144,13 +144,13 @@ LL |     asdf}\n error: 1 positional argument in format string, but no arguments were given\n   --> $DIR/format-string-error-2.rs:70:17\n    |\n-LL |     println!(\"/t{}\");\n+LL |     println!(\"\\t{}\");\n    |                 ^^\n \n error: invalid format string: expected `'}'` but string was terminated\n   --> $DIR/format-string-error-2.rs:74:27\n    |\n-LL |     println!(\"/x7B}/u{8} {\", 1);\n+LL |     println!(\"\\x7B}\\u{8} {\", 1);\n    |                          -^ expected `'}'` in format string\n    |                          |\n    |                          because of this opening brace\n@@ -160,23 +160,23 @@ LL |     println!(\"/x7B}/u{8} {\", 1);\n error: argument never used\n   --> $DIR/format-string-error-2.rs:77:28\n    |\n-LL |     println!(\"/x7B}/u8 {\", 1);\n+LL |     println!(\"\\x7B}\\u8 {\", 1);\n    |              ------------  ^ argument never used\n    |              |\n    |              formatting specifier missing\n \n error: invalid format string: unmatched `}` found\n   --> $DIR/format-string-error-2.rs:82:21\n    |\n-LL |     println!(r#\"/x7B}/u{8} {\"#, 1);\n+LL |     println!(r#\"\\x7B}\\u{8} {\"#, 1);\n    |                     ^ unmatched `}` in format string\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n \n error: invalid format string: unmatched `}` found\n   --> $DIR/format-string-error-2.rs:85:21\n    |\n-LL |     println!(r#\"/x7B}/u8 {\"#, 1);\n+LL |     println!(r#\"\\x7B}\\u8 {\"#, 1);\n    |                     ^ unmatched `}` in format string\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`"}, {"sha": "3dc122a7399dd53006efb1b630a2bb28161271e4", "filename": "src/test/ui/fmt/format-string-error.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -50,10 +50,10 @@ LL |     let _ = format!(\"}\");\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n \n-error: invalid format string: expected `'}'`, found `'/'`\n+error: invalid format string: expected `'}'`, found `'\\'`\n   --> $DIR/format-string-error.rs:17:23\n    |\n-LL |     let _ = format!(\"{/}\");\n+LL |     let _ = format!(\"{\\}\");\n    |                      -^ expected `}` in format string\n    |                      |\n    |                      because of this opening brace\n@@ -63,7 +63,7 @@ LL |     let _ = format!(\"{/}\");\n error: invalid format string: expected `'}'` but string was terminated\n   --> $DIR/format-string-error.rs:19:35\n    |\n-LL |     let _ = format!(\"/n/n/n{/n/n/n\");\n+LL |     let _ = format!(\"\\n\\n\\n{\\n\\n\\n\");\n    |                            -      ^ expected `'}'` in format string\n    |                            |\n    |                            because of this opening brace"}, {"sha": "4d1066516249b8f9b7996675796a017e254458a0", "filename": "src/test/ui/issues/issue-13727.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fissues%2Fissue-13727.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fissues%2Fissue-13727.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13727.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1,7 +1,7 @@\n error: unreachable pattern\n   --> $DIR/issue-13727.rs:7:5\n    |\n-LL |     512 => print!(\"0b1111/n\"),\n+LL |     512 => print!(\"0b1111\\n\"),\n    |     ^^^\n    |\n note: lint level defined here"}, {"sha": "e2f2f14dce3193bd73548b2b678dcee122e0db11", "filename": "src/test/ui/macros/format-foreign.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1,7 +1,7 @@\n error: multiple unused formatting arguments\n   --> $DIR/format-foreign.rs:2:30\n    |\n-LL |     println!(\"%.*3$s %s!/n\", \"Hello,\", \"World\", 4);\n+LL |     println!(\"%.*3$s %s!\\n\", \"Hello,\", \"World\", 4);\n    |              --------------  ^^^^^^^^  ^^^^^^^  ^ argument never used\n    |              |               |         |\n    |              |               |         argument never used\n@@ -11,7 +11,7 @@ LL |     println!(\"%.*3$s %s!/n\", \"Hello,\", \"World\", 4);\n    = note: printf formatting not supported; see the documentation for `std::fmt`\n help: format specifiers use curly braces\n    |\n-LL |     println!(\"{:.2$} {}!/n\", \"Hello,\", \"World\", 4);\n+LL |     println!(\"{:.2$} {}!\\n\", \"Hello,\", \"World\", 4);\n    |               ^^^^^^ ^^\n \n error: argument never used\n@@ -29,7 +29,7 @@ error: multiple unused formatting arguments\n    |\n LL |       println!(r###\"%.*3$s\n    |  ______________-\n-LL | |         %s!/n\n+LL | |         %s!\\n\n LL | | \"###, \"Hello,\", \"World\", 4);\n    | |    -  ^^^^^^^^  ^^^^^^^  ^ argument never used\n    | |    |  |         |\n@@ -41,7 +41,7 @@ LL | | \"###, \"Hello,\", \"World\", 4);\n help: format specifiers use curly braces\n    |\n LL |     println!(r###\"{:.2$}\n-LL |         {}!/n\n+LL |         {}!\\n\n    |\n \n error: argument never used"}, {"sha": "209ff09aea41b30a4b006b7fab28a63166140922", "filename": "src/test/ui/macros/macro-backtrace-println.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1,7 +1,7 @@\n error: 1 positional argument in format string, but no arguments were given\n   --> $DIR/macro-backtrace-println.rs:14:30\n    |\n-LL |     ($fmt:expr) => (myprint!(concat!($fmt, \"/n\")));\n+LL |     ($fmt:expr) => (myprint!(concat!($fmt, \"\\n\")));\n    |                              ^^^^^^^^^^^^^^^^^^^\n ...\n LL |     myprintln!(\"{}\");"}, {"sha": "8a981e8d62e2bdf480f27f79fbd423ef6d13d71c", "filename": "src/test/ui/parser/ascii-only-character-escape.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1,19 +1,19 @@\n-error: this form of character escape may only be used with characters in the range [/x00-/x7f]\n+error: this form of character escape may only be used with characters in the range [\\x00-\\x7f]\n   --> $DIR/ascii-only-character-escape.rs:4:16\n    |\n-LL |     let x = \"/x80\";\n+LL |     let x = \"\\x80\";\n    |                ^^\n \n-error: this form of character escape may only be used with characters in the range [/x00-/x7f]\n+error: this form of character escape may only be used with characters in the range [\\x00-\\x7f]\n   --> $DIR/ascii-only-character-escape.rs:5:16\n    |\n-LL |     let y = \"/xff\";\n+LL |     let y = \"\\xff\";\n    |                ^^\n \n-error: this form of character escape may only be used with characters in the range [/x00-/x7f]\n+error: this form of character escape may only be used with characters in the range [\\x00-\\x7f]\n   --> $DIR/ascii-only-character-escape.rs:6:16\n    |\n-LL |     let z = \"/xe2\";\n+LL |     let z = \"\\xe2\";\n    |                ^^\n \n error: aborting due to 3 previous errors"}, {"sha": "8e96ea22771b830104e4a831cc5fbca4a49f5211", "filename": "src/test/ui/parser/bad-char-literals.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -4,21 +4,21 @@ error: character constant must be escaped: '\n LL |     ''';\n    |      ^\n \n-error: character constant must be escaped: /n\n+error: character constant must be escaped: \\n\n   --> $DIR/bad-char-literals.rs:11:6\n    |\n LL |       '\n    |  ______^\n LL | | ';\n    | |_\n \n-error: character constant must be escaped: /r\n+error: character constant must be escaped: \\r\n   --> $DIR/bad-char-literals.rs:16:6\n    |\n LL |     '\r';\n    |      ^\n \n-error: character constant must be escaped: /t\n+error: character constant must be escaped: \\t\n   --> $DIR/bad-char-literals.rs:19:6\n    |\n LL |     '    ';"}, {"sha": "28385f34f2ab2ed2a2a50935b4f2d0ffa9303c00", "filename": "src/test/ui/parser/byte-literals.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1,22 +1,22 @@\n error: unknown byte escape: f\n   --> $DIR/byte-literals.rs:6:21\n    |\n-LL | static FOO: u8 = b'/f';\n+LL | static FOO: u8 = b'\\f';\n    |                     ^ unknown byte escape\n \n error: unknown byte escape: f\n   --> $DIR/byte-literals.rs:9:8\n    |\n-LL |     b'/f';\n+LL |     b'\\f';\n    |        ^ unknown byte escape\n \n error: invalid character in numeric character escape: Z\n   --> $DIR/byte-literals.rs:10:10\n    |\n-LL |     b'/x0Z';\n+LL |     b'\\x0Z';\n    |          ^\n \n-error: byte constant must be escaped: /t\n+error: byte constant must be escaped: \\t\n   --> $DIR/byte-literals.rs:11:7\n    |\n LL |     b'    ';\n@@ -28,7 +28,7 @@ error: byte constant must be escaped: '\n LL |     b''';\n    |       ^\n \n-error: byte constant must be ASCII. Use a /xHH escape for a non-ASCII byte\n+error: byte constant must be ASCII. Use a \\xHH escape for a non-ASCII byte\n   --> $DIR/byte-literals.rs:13:7\n    |\n LL |     b'\u00e9';"}, {"sha": "6701cfd8e66c2f1dddf9ecb74feb60d2f65d8c63", "filename": "src/test/ui/parser/byte-string-literals.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1,22 +1,22 @@\n error: unknown byte escape: f\n   --> $DIR/byte-string-literals.rs:6:32\n    |\n-LL | static FOO: &'static [u8] = b\"/f\";\n+LL | static FOO: &'static [u8] = b\"\\f\";\n    |                                ^ unknown byte escape\n \n error: unknown byte escape: f\n   --> $DIR/byte-string-literals.rs:9:8\n    |\n-LL |     b\"/f\";\n+LL |     b\"\\f\";\n    |        ^ unknown byte escape\n \n error: invalid character in numeric character escape: Z\n   --> $DIR/byte-string-literals.rs:10:10\n    |\n-LL |     b\"/x0Z\";\n+LL |     b\"\\x0Z\";\n    |          ^\n \n-error: byte constant must be ASCII. Use a /xHH escape for a non-ASCII byte\n+error: byte constant must be ASCII. Use a \\xHH escape for a non-ASCII byte\n   --> $DIR/byte-string-literals.rs:11:7\n    |\n LL |     b\"\u00e9\";"}, {"sha": "295ba3b73e86196f104e24d1add52865ae98ba8c", "filename": "src/test/ui/parser/issue-23620-invalid-escapes.stderr", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1,118 +1,118 @@\n error: unicode escape sequences cannot be used as a byte or in a byte string\n   --> $DIR/issue-23620-invalid-escapes.rs:4:15\n    |\n-LL |     let _ = b\"/u{a66e}\";\n+LL |     let _ = b\"\\u{a66e}\";\n    |               ^^^^^^^^\n \n error: unicode escape sequences cannot be used as a byte or in a byte string\n   --> $DIR/issue-23620-invalid-escapes.rs:7:15\n    |\n-LL |     let _ = b'/u{a66e}';\n+LL |     let _ = b'\\u{a66e}';\n    |               ^^^^^^^^\n \n error: incorrect unicode escape sequence\n   --> $DIR/issue-23620-invalid-escapes.rs:10:15\n    |\n-LL |     let _ = b'/u';\n+LL |     let _ = b'\\u';\n    |               ^^ incorrect unicode escape sequence\n    |\n-   = help: format of unicode escape sequences is `/u{...}`\n+   = help: format of unicode escape sequences is `\\u{...}`\n \n error: unicode escape sequences cannot be used as a byte or in a byte string\n   --> $DIR/issue-23620-invalid-escapes.rs:10:15\n    |\n-LL |     let _ = b'/u';\n+LL |     let _ = b'\\u';\n    |               ^^\n \n error: numeric character escape is too short\n   --> $DIR/issue-23620-invalid-escapes.rs:14:17\n    |\n-LL |     let _ = b'/x5';\n+LL |     let _ = b'\\x5';\n    |                 ^\n \n error: invalid character in numeric character escape: x\n   --> $DIR/issue-23620-invalid-escapes.rs:17:17\n    |\n-LL |     let _ = b'/xxy';\n+LL |     let _ = b'\\xxy';\n    |                 ^\n \n error: invalid character in numeric character escape: y\n   --> $DIR/issue-23620-invalid-escapes.rs:17:18\n    |\n-LL |     let _ = b'/xxy';\n+LL |     let _ = b'\\xxy';\n    |                  ^\n \n error: numeric character escape is too short\n   --> $DIR/issue-23620-invalid-escapes.rs:21:16\n    |\n-LL |     let _ = '/x5';\n+LL |     let _ = '\\x5';\n    |                ^\n \n error: invalid character in numeric character escape: x\n   --> $DIR/issue-23620-invalid-escapes.rs:24:16\n    |\n-LL |     let _ = '/xxy';\n+LL |     let _ = '\\xxy';\n    |                ^\n \n error: invalid character in numeric character escape: y\n   --> $DIR/issue-23620-invalid-escapes.rs:24:17\n    |\n-LL |     let _ = '/xxy';\n+LL |     let _ = '\\xxy';\n    |                 ^\n \n error: unicode escape sequences cannot be used as a byte or in a byte string\n   --> $DIR/issue-23620-invalid-escapes.rs:28:15\n    |\n-LL |     let _ = b\"/u{a4a4} /xf /u\";\n+LL |     let _ = b\"\\u{a4a4} \\xf \\u\";\n    |               ^^^^^^^^\n \n error: invalid character in numeric character escape:  \n   --> $DIR/issue-23620-invalid-escapes.rs:28:27\n    |\n-LL |     let _ = b\"/u{a4a4} /xf /u\";\n+LL |     let _ = b\"\\u{a4a4} \\xf \\u\";\n    |                           ^\n \n error: incorrect unicode escape sequence\n   --> $DIR/issue-23620-invalid-escapes.rs:28:28\n    |\n-LL |     let _ = b\"/u{a4a4} /xf /u\";\n+LL |     let _ = b\"\\u{a4a4} \\xf \\u\";\n    |                            ^^ incorrect unicode escape sequence\n    |\n-   = help: format of unicode escape sequences is `/u{...}`\n+   = help: format of unicode escape sequences is `\\u{...}`\n \n error: unicode escape sequences cannot be used as a byte or in a byte string\n   --> $DIR/issue-23620-invalid-escapes.rs:28:28\n    |\n-LL |     let _ = b\"/u{a4a4} /xf /u\";\n+LL |     let _ = b\"\\u{a4a4} \\xf \\u\";\n    |                            ^^\n \n error: invalid character in numeric character escape:  \n   --> $DIR/issue-23620-invalid-escapes.rs:34:17\n    |\n-LL |     let _ = \"/xf /u\";\n+LL |     let _ = \"\\xf \\u\";\n    |                 ^\n \n-error: this form of character escape may only be used with characters in the range [/x00-/x7f]\n+error: this form of character escape may only be used with characters in the range [\\x00-\\x7f]\n   --> $DIR/issue-23620-invalid-escapes.rs:34:16\n    |\n-LL |     let _ = \"/xf /u\";\n+LL |     let _ = \"\\xf \\u\";\n    |                ^^\n \n error: incorrect unicode escape sequence\n   --> $DIR/issue-23620-invalid-escapes.rs:34:18\n    |\n-LL |     let _ = \"/xf /u\";\n+LL |     let _ = \"\\xf \\u\";\n    |                  ^^ incorrect unicode escape sequence\n    |\n-   = help: format of unicode escape sequences is `/u{...}`\n+   = help: format of unicode escape sequences is `\\u{...}`\n \n error: incorrect unicode escape sequence\n   --> $DIR/issue-23620-invalid-escapes.rs:39:14\n    |\n-LL |     let _ = \"/u8f\";\n+LL |     let _ = \"\\u8f\";\n    |              ^^--\n    |              |\n-   |              help: format of unicode escape sequences uses braces: `/u{8f}`\n+   |              help: format of unicode escape sequences uses braces: `\\u{8f}`\n \n error: aborting due to 18 previous errors\n "}, {"sha": "69a54af3d82edced618941fafbbdc65529db6a01", "filename": "src/test/ui/parser/issue-43692.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Fissue-43692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Fissue-43692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-43692.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1,7 +1,7 @@\n error: invalid start of unicode escape\n   --> $DIR/issue-43692.rs:2:9\n    |\n-LL |     '/u{_10FFFF}';\n+LL |     '\\u{_10FFFF}';\n    |         ^\n \n error: aborting due to previous error"}, {"sha": "414ad81512ae50e0873ef1c3f79c2056d2f401be", "filename": "src/test/ui/parser/lex-bad-char-literals-1.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1,25 +1,25 @@\n error: numeric character escape is too short\n   --> $DIR/lex-bad-char-literals-1.rs:3:8\n    |\n-LL |     '/x1'\n+LL |     '\\x1'\n    |        ^\n \n error: numeric character escape is too short\n   --> $DIR/lex-bad-char-literals-1.rs:7:8\n    |\n-LL |     \"/x1\"\n+LL |     \"\\x1\"\n    |        ^\n \n-error: unknown character escape: /u{25cf}\n+error: unknown character escape: \\u{25cf}\n   --> $DIR/lex-bad-char-literals-1.rs:11:7\n    |\n-LL |     '/\u25cf'\n+LL |     '\\\u25cf'\n    |       ^ unknown character escape\n \n-error: unknown character escape: /u{25cf}\n+error: unknown character escape: \\u{25cf}\n   --> $DIR/lex-bad-char-literals-1.rs:15:7\n    |\n-LL |     \"/\u25cf\"\n+LL |     \"\\\u25cf\"\n    |       ^ unknown character escape\n \n error: aborting due to 4 previous errors"}, {"sha": "97c6338820d739745767c800a15532cd33a54724", "filename": "src/test/ui/parser/lex-bad-char-literals-5.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-5.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1,21 +1,21 @@\n error: character literal may only contain one codepoint\n   --> $DIR/lex-bad-char-literals-5.rs:1:18\n    |\n-LL | static c: char = '/x10/x10';\n+LL | static c: char = '\\x10\\x10';\n    |                  ^^^^^^^^^^\n help: if you meant to write a `str` literal, use double quotes\n    |\n-LL | static c: char = \"/x10/x10\";\n+LL | static c: char = \"\\x10\\x10\";\n    |                  ^^^^^^^^^^\n \n error: character literal may only contain one codepoint\n   --> $DIR/lex-bad-char-literals-5.rs:5:20\n    |\n-LL |     let ch: &str = '/x10/x10';\n+LL |     let ch: &str = '\\x10\\x10';\n    |                    ^^^^^^^^^^\n help: if you meant to write a `str` literal, use double quotes\n    |\n-LL |     let ch: &str = \"/x10/x10\";\n+LL |     let ch: &str = \"\\x10\\x10\";\n    |                    ^^^^^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "43c43721b19f2754993a2e5ae281c854cc77fa7b", "filename": "src/test/ui/parser/lex-bad-token.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Flex-bad-token.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Flex-bad-token.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-token.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1,4 +1,4 @@\n-error: unknown start of token: /u{25cf}\n+error: unknown start of token: \\u{25cf}\n   --> $DIR/lex-bad-token.rs:1:1\n    |\n LL | \u25cf"}, {"sha": "7d944569ca9c49980b2fbd0c0e33fbff9b21ac74", "filename": "src/test/ui/parser/lex-bare-cr-string-literal-doc-comment.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -22,22 +22,22 @@ error: bare CR not allowed in block doc-comment\n LL |     /*! block doc comment with bare CR: '\r' */\n    |                                          ^\n \n-error: bare CR not allowed in string, use /r instead\n+error: bare CR not allowed in string, use \\r instead\n   --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:21:18\n    |\n LL |     let _s = \"foo\rbar\";\n    |                  ^\n \n-error: bare CR not allowed in raw string, use /r instead\n+error: bare CR not allowed in raw string, use \\r instead\n   --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:24:14\n    |\n LL |     let _s = r\"bar\rfoo\";\n    |              ^^^^^\n \n-error: unknown character escape: /r\n+error: unknown character escape: \\r\n   --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:27:19\n    |\n-LL |     let _s = \"foo/\rbar\";\n+LL |     let _s = \"foo\\\rbar\";\n    |                   ^ unknown character escape\n    |\n    = help: this is an isolated carriage return; consider checking your editor and version control settings"}, {"sha": "06dc0f2b537ba2dc6d616043ac7d8468d32fa192", "filename": "src/test/ui/parser/lex-stray-backslash.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Flex-stray-backslash.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Flex-stray-backslash.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-stray-backslash.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1,7 +1,7 @@\n-error: unknown start of token: /\n+error: unknown start of token: \\\n   --> $DIR/lex-stray-backslash.rs:1:1\n    |\n-LL | /\n+LL | \\\n    | ^\n \n error: aborting due to previous error"}, {"sha": "a8da50951ddf302376c10b5f7ef3348c6330543c", "filename": "src/test/ui/parser/new-unicode-escapes-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-1.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1,7 +1,7 @@\n error: unterminated unicode escape (needed a `}`)\n   --> $DIR/new-unicode-escapes-1.rs:2:21\n    |\n-LL |     let s = \"/u{2603\";\n+LL |     let s = \"\\u{2603\";\n    |                     ^\n \n error: aborting due to previous error"}, {"sha": "ede49cdf7e1d11c33fa08f181516abcbcbe4eb3c", "filename": "src/test/ui/parser/new-unicode-escapes-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-2.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1,7 +1,7 @@\n error: overlong unicode escape (must have at most 6 hex digits)\n   --> $DIR/new-unicode-escapes-2.rs:2:17\n    |\n-LL |     let s = \"/u{260311111111}\";\n+LL |     let s = \"\\u{260311111111}\";\n    |                 ^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "59cfb988f2897c31d65d575efc9d2059ba89b996", "filename": "src/test/ui/parser/new-unicode-escapes-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-3.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1,15 +1,15 @@\n error: invalid unicode character escape\n   --> $DIR/new-unicode-escapes-3.rs:2:14\n    |\n-LL |     let s1 = \"/u{d805}\";\n+LL |     let s1 = \"\\u{d805}\";\n    |              ^^^^^^^^^^\n    |\n    = help: unicode escape must not be a surrogate\n \n error: invalid unicode character escape\n   --> $DIR/new-unicode-escapes-3.rs:3:14\n    |\n-LL |     let s2 = \"/u{ffffff}\";\n+LL |     let s2 = \"\\u{ffffff}\";\n    |              ^^^^^^^^^^^^\n    |\n    = help: unicode escape must be at most 10FFFF"}, {"sha": "ca96b00aa7bc55153b5e7137e4e7f016afa79acf", "filename": "src/test/ui/parser/new-unicode-escapes-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1,7 +1,7 @@\n error: invalid character in unicode escape: l\n   --> $DIR/new-unicode-escapes-4.rs:4:17\n    |\n-LL |     let s = \"/u{lol}\";\n+LL |     let s = \"\\u{lol}\";\n    |                 ^\n \n error: aborting due to previous error"}, {"sha": "a7f1af0a3474cf9988fc1e96c3e570cb514b51ab", "filename": "src/test/ui/parser/raw-byte-string-literals.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Fraw-byte-string-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Fraw-byte-string-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw-byte-string-literals.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1,4 +1,4 @@\n-error: raw byte string must be ASCII: /u{e9}\n+error: raw byte string must be ASCII: \\u{e9}\n   --> $DIR/raw-byte-string-literals.rs:5:8\n    |\n LL |     br\"\u00e9\";"}, {"sha": "3687b9dd282d164193b0ffe22ff05e06bea15cfb", "filename": "src/test/ui/parser/trailing-carriage-return-in-string.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Ftrailing-carriage-return-in-string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Ftrailing-carriage-return-in-string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrailing-carriage-return-in-string.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1,7 +1,7 @@\n-error: unknown character escape: /r\n+error: unknown character escape: \\r\n   --> $DIR/trailing-carriage-return-in-string.rs:10:25\n    |\n-LL |     let bad = \"This is /\r a test\";\n+LL |     let bad = \"This is \\\r a test\";\n    |                         ^ unknown character escape\n    |\n    = help: this is an isolated carriage return; consider checking your editor and version control settings"}, {"sha": "76bf6627a4bc40e84bff4c922592d7d3534cae5d", "filename": "src/test/ui/parser/unicode-chars.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Funicode-chars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Funicode-chars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funicode-chars.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1,4 +1,4 @@\n-error: unknown start of token: /u{37e}\n+error: unknown start of token: \\u{37e}\n   --> $DIR/unicode-chars.rs:2:14\n    |\n LL |     let y = 0\u037e"}, {"sha": "4a09ed75605e41463690662e51f50a1a9d4aa5cc", "filename": "src/test/ui/parser/unicode-quote-chars.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Funicode-quote-chars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Funicode-quote-chars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funicode-quote-chars.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1,4 +1,4 @@\n-error: unknown start of token: /u{201c}\n+error: unknown start of token: \\u{201c}\n   --> $DIR/unicode-quote-chars.rs:4:14\n    |\n LL |     println!(\u201chello world\u201d);"}, {"sha": "1406b795ba8c34484953d59c4da74750ec977043", "filename": "src/test/ui/parser/wrong-escape-of-curly-braces.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Fwrong-escape-of-curly-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fparser%2Fwrong-escape-of-curly-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fwrong-escape-of-curly-braces.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -1,15 +1,15 @@\n error: unknown character escape: {\n   --> $DIR/wrong-escape-of-curly-braces.rs:3:17\n    |\n-LL |     let bad = \"/{it is wrong/}\";\n+LL |     let bad = \"\\{it is wrong\\}\";\n    |                 ^ unknown character escape\n    |\n    = help: if used in a formatting string, curly braces are escaped with `{{` and `}}`\n \n error: unknown character escape: }\n   --> $DIR/wrong-escape-of-curly-braces.rs:3:30\n    |\n-LL |     let bad = \"/{it is wrong/}\";\n+LL |     let bad = \"\\{it is wrong\\}\";\n    |                              ^ unknown character escape\n    |\n    = help: if used in a formatting string, curly braces are escaped with `{{` and `}}`"}, {"sha": "d455902ee8c07ca294bf368ead705cbb6a006747", "filename": "src/test/ui/regions/region-bound-on-closure-outlives-call.nll.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fregions%2Fregion-bound-on-closure-outlives-call.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fregions%2Fregion-bound-on-closure-outlives-call.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-bound-on-closure-outlives-call.nll.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -14,11 +14,10 @@ error[E0505]: cannot move out of `f` because it is borrowed\n   --> $DIR/region-bound-on-closure-outlives-call.rs:3:25\n    |\n LL |     (|x| f(x))(call_rec(f))\n-   |     ----------          ^ move out of `f` occurs here\n-   |     ||   |\n-   |     ||   borrow occurs due to use in closure\n-   |     |borrow of `f` occurs here\n-   |     borrow later used by call\n+   |      --- -              ^ move out of `f` occurs here\n+   |      |   |\n+   |      |   borrow occurs due to use in closure\n+   |      borrow of `f` occurs here\n \n error: aborting due to previous error\n "}, {"sha": "1a5ab7a7d56a032e65bb23e38f49ad20131df1fa", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.nll.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -42,7 +42,6 @@ LL |     f(Box::new(|a| {\n    |     -          ^^^ move out of `f` occurs here\n    |     |\n    |     borrow of `f` occurs here\n-   |     borrow later used by call\n LL |         foo(f);\n    |             - move occurs due to use in closure\n "}, {"sha": "96dbdec7074a9977a52e25b36b1425b8e467898f", "filename": "src/test/ui/suggestions/borrow-for-loop-head.nll.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.nll.stderr?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -2,10 +2,7 @@ error[E0505]: cannot move out of `a` because it is borrowed\n   --> $DIR/borrow-for-loop-head.rs:4:18\n    |\n LL |     for i in &a {\n-   |              --\n-   |              |\n-   |              borrow of `a` occurs here\n-   |              borrow later used here\n+   |              -- borrow of `a` occurs here\n LL |         for j in a {\n    |                  ^ move out of `a` occurs here\n \n@@ -17,6 +14,10 @@ LL |     let a = vec![1, 2, 3];\n LL |     for i in &a {\n LL |         for j in a {\n    |                  ^ value moved here, in previous iteration of loop\n+help: consider borrowing this to avoid moving it into the for loop\n+   |\n+LL |         for j in &a {\n+   |                  ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "089cbc7b78a3c59a328c0ed5f04b297d9e466cac", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -246,6 +246,11 @@ pub struct Config {\n     /// mode describing what file the actual ui output will be compared to\n     pub compare_mode: Option<CompareMode>,\n \n+    /// If true, this will generate a coverage file with UI test files that run `MachineApplicable`\n+    /// diagnostics but are missing `run-rustfix` annotations. The generated coverage file is\n+    /// created in `/<build_base>/rustfix_missing_coverage.txt`\n+    pub rustfix_coverage: bool,\n+\n     // Configuration for various run-make tests frobbing things like C compilers\n     // or querying about various LLVM component information.\n     pub cc: String,"}, {"sha": "dfc023da9736bab422f44557759163008291af9d", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -233,6 +233,12 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"mode describing what file the actual ui output will be compared to\",\n             \"COMPARE MODE\",\n         )\n+        .optflag(\n+            \"\",\n+            \"rustfix-coverage\",\n+            \"enable this to generate a Rustfix coverage file, which is saved in \\\n+                `./<build_base>/rustfix_missing_coverage.txt`\",\n+        )\n         .optflag(\"h\", \"help\", \"show this message\");\n \n     let (argv0, args_) = args.split_first().unwrap();\n@@ -336,6 +342,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         color,\n         remote_test_client: matches.opt_str(\"remote-test-client\").map(PathBuf::from),\n         compare_mode: matches.opt_str(\"compare-mode\").map(CompareMode::parse),\n+        rustfix_coverage: matches.opt_present(\"rustfix-coverage\"),\n \n         cc: matches.opt_str(\"cc\").unwrap(),\n         cxx: matches.opt_str(\"cxx\").unwrap(),\n@@ -475,6 +482,19 @@ pub fn run_tests(config: &Config) {\n         let _ = fs::remove_dir_all(\"tmp/partitioning-tests\");\n     }\n \n+    // If we want to collect rustfix coverage information,\n+    // we first make sure that the coverage file does not exist.\n+    // It will be created later on.\n+    if config.rustfix_coverage {\n+        let mut coverage_file_path = config.build_base.clone();\n+        coverage_file_path.push(\"rustfix_missing_coverage.txt\");\n+        if coverage_file_path.exists() {\n+            if let Err(e) = fs::remove_file(&coverage_file_path) {\n+                panic!(\"Could not delete {} due to {}\", coverage_file_path.display(), e)\n+            }\n+        }\n+    }\n+\n     let opts = test_opts(config);\n     let tests = make_tests(config);\n     // sadly osx needs some file descriptor limits raised for running tests in"}, {"sha": "35f8dca79b5dc45c61f989d586cbc52d11334725", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 124, "deletions": 6, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a497a43794f0da5610c6da835ed3e02cd9af4d/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=70a497a43794f0da5610c6da835ed3e02cd9af4d", "patch": "@@ -10,7 +10,7 @@ use crate::errors::{self, Error, ErrorKind};\n use filetime::FileTime;\n use crate::header::TestProps;\n use crate::json;\n-use regex::Regex;\n+use regex::{Captures, Regex};\n use rustfix::{apply_suggestions, get_suggestions_from_json, Filter};\n use crate::util::{logv, PathBufExt};\n \n@@ -19,7 +19,7 @@ use std::collections::{HashMap, HashSet, VecDeque};\n use std::env;\n use std::ffi::{OsStr, OsString};\n use std::fmt;\n-use std::fs::{self, create_dir_all, File};\n+use std::fs::{self, create_dir_all, File, OpenOptions};\n use std::hash::{Hash, Hasher};\n use std::io::prelude::*;\n use std::io::{self, BufReader};\n@@ -2818,6 +2818,31 @@ impl<'test> TestCx<'test> {\n \n         if self.config.compare_mode.is_some() {\n             // don't test rustfix with nll right now\n+        } else if self.config.rustfix_coverage {\n+            // Find out which tests have `MachineApplicable` suggestions but are missing\n+            // `run-rustfix` or `run-rustfix-only-machine-applicable` headers\n+            let suggestions = get_suggestions_from_json(\n+                &proc_res.stderr,\n+                &HashSet::new(),\n+                Filter::MachineApplicableOnly\n+            ).unwrap();\n+            if suggestions.len() > 0\n+                && !self.props.run_rustfix\n+                && !self.props.rustfix_only_machine_applicable {\n+                    let mut coverage_file_path = self.config.build_base.clone();\n+                    coverage_file_path.push(\"rustfix_missing_coverage.txt\");\n+                    debug!(\"coverage_file_path: {}\", coverage_file_path.display());\n+\n+                    let mut file = OpenOptions::new()\n+                        .create(true)\n+                        .append(true)\n+                        .open(coverage_file_path.as_path())\n+                        .expect(\"could not create or open file\");\n+\n+                    if let Err(_) = writeln!(file, \"{}\", self.testpaths.file.display()) {\n+                        panic!(\"couldn't write to {}\", coverage_file_path.display());\n+                    }\n+            }\n         } else if self.props.run_rustfix {\n             // Apply suggestions from rustc to the code itself\n             let unfixed_code = self\n@@ -3147,10 +3172,8 @@ impl<'test> TestCx<'test> {\n         normalized = Regex::new(\"SRC_DIR(.+):\\\\d+:\\\\d+\").unwrap()\n             .replace_all(&normalized, \"SRC_DIR$1:LL:COL\").into_owned();\n \n-        normalized = normalized.replace(\"\\\\\\\\\", \"\\\\\") // denormalize for paths on windows\n-              .replace(\"\\\\\", \"/\") // normalize for paths on windows\n-              .replace(\"\\r\\n\", \"\\n\") // normalize for linebreaks on windows\n-              .replace(\"\\t\", \"\\\\t\"); // makes tabs visible\n+        normalized = Self::normalize_platform_differences(&normalized);\n+        normalized = normalized.replace(\"\\t\", \"\\\\t\"); // makes tabs visible\n \n         // Remove test annotations like `//~ ERROR text` from the output,\n         // since they duplicate actual errors and make the output hard to read.\n@@ -3164,6 +3187,36 @@ impl<'test> TestCx<'test> {\n         normalized\n     }\n \n+    /// Normalize output differences across platforms. Generally changes Windows output to be more\n+    /// Unix-like.\n+    ///\n+    /// Replaces backslashes in paths with forward slashes, and replaces CRLF line endings\n+    /// with LF.\n+    fn normalize_platform_differences(output: &str) -> String {\n+        lazy_static! {\n+            /// Used to find Windows paths.\n+            ///\n+            /// It's not possible to detect paths in the error messages generally, but this is a\n+            /// decent enough heuristic.\n+            static ref PATH_BACKSLASH_RE: Regex = Regex::new(r#\"(?x)\n+                (?:\n+                  # Match paths that don't include spaces.\n+                  (?:\\\\[\\pL\\pN\\.\\-_']+)+\\.\\pL+\n+                |\n+                  # If the path starts with a well-known root, then allow spaces.\n+                  \\$(?:DIR|SRC_DIR|TEST_BUILD_DIR|BUILD_DIR|LIB_DIR)(?:\\\\[\\pL\\pN\\.\\-_' ]+)+\n+                )\"#\n+            ).unwrap();\n+        }\n+\n+        let output = output.replace(r\"\\\\\", r\"\\\");\n+\n+        PATH_BACKSLASH_RE.replace_all(&output, |caps: &Captures<'_>| {\n+            println!(\"{}\", &caps[0]);\n+            caps[0].replace(r\"\\\", \"/\")\n+        }).replace(\"\\r\\n\", \"\\n\")\n+    }\n+\n     fn expected_output_path(&self, kind: &str) -> PathBuf {\n         let mut path = expected_output_path(\n             &self.testpaths,\n@@ -3495,3 +3548,68 @@ fn read2_abbreviated(mut child: Child) -> io::Result<Output> {\n         stderr: stderr.into_bytes(),\n     })\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::TestCx;\n+\n+    #[test]\n+    fn normalize_platform_differences() {\n+        assert_eq!(\n+            TestCx::normalize_platform_differences(r\"$DIR\\foo.rs\"),\n+            \"$DIR/foo.rs\"\n+        );\n+        assert_eq!(\n+            TestCx::normalize_platform_differences(r\"$BUILD_DIR\\..\\parser.rs\"),\n+            \"$BUILD_DIR/../parser.rs\"\n+        );\n+        assert_eq!(\n+            TestCx::normalize_platform_differences(r\"$DIR\\bar.rs hello\\nworld\"),\n+            r\"$DIR/bar.rs hello\\nworld\"\n+        );\n+        assert_eq!(\n+            TestCx::normalize_platform_differences(r\"either bar\\baz.rs or bar\\baz\\mod.rs\"),\n+            r\"either bar/baz.rs or bar/baz/mod.rs\",\n+        );\n+        assert_eq!(\n+            TestCx::normalize_platform_differences(r\"`.\\some\\path.rs`\"),\n+            r\"`./some/path.rs`\",\n+        );\n+        assert_eq!(\n+            TestCx::normalize_platform_differences(r\"`some\\path.rs`\"),\n+            r\"`some/path.rs`\",\n+        );\n+        assert_eq!(\n+            TestCx::normalize_platform_differences(r\"$DIR\\path-with-dashes.rs\"),\n+            r\"$DIR/path-with-dashes.rs\"\n+        );\n+        assert_eq!(\n+            TestCx::normalize_platform_differences(r\"$DIR\\path_with_underscores.rs\"),\n+            r\"$DIR/path_with_underscores.rs\",\n+        );\n+        assert_eq!(\n+            TestCx::normalize_platform_differences(r\"$DIR\\foo.rs:12:11\"), \"$DIR/foo.rs:12:11\",\n+        );\n+        assert_eq!(\n+            TestCx::normalize_platform_differences(r\"$DIR\\path with spaces 'n' quotes\"),\n+            \"$DIR/path with spaces 'n' quotes\",\n+        );\n+        assert_eq!(\n+            TestCx::normalize_platform_differences(r\"$DIR\\file_with\\no_extension\"),\n+            \"$DIR/file_with/no_extension\",\n+        );\n+\n+        assert_eq!(TestCx::normalize_platform_differences(r\"\\n\"), r\"\\n\");\n+        assert_eq!(TestCx::normalize_platform_differences(r\"{ \\n\"), r\"{ \\n\");\n+        assert_eq!(TestCx::normalize_platform_differences(r\"`\\]`\"), r\"`\\]`\");\n+        assert_eq!(TestCx::normalize_platform_differences(r#\"\"\\{\"\"#), r#\"\"\\{\"\"#);\n+        assert_eq!(\n+            TestCx::normalize_platform_differences(r#\"write!(&mut v, \"Hello\\n\")\"#),\n+            r#\"write!(&mut v, \"Hello\\n\")\"#\n+        );\n+        assert_eq!(\n+            TestCx::normalize_platform_differences(r#\"println!(\"test\\ntest\")\"#),\n+            r#\"println!(\"test\\ntest\")\"#,\n+        );\n+    }\n+}"}]}