{"sha": "10359de4051d56feeacd455946b93ec48e6511fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMzU5ZGU0MDUxZDU2ZmVlYWNkNDU1OTQ2YjkzZWM0OGU2NTExZmM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-06T20:48:17Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-08T00:54:33Z"}, "message": "compiletest: Add support for running rustdoc tests\n\nAdd a new test directory called 'rustdoc' where all files inside are documented\nand run against the `htmldocck` script to have assertions about the output.", "tree": {"sha": "00d352271aeb14ac09fd91824a1b827080c7ea1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00d352271aeb14ac09fd91824a1b827080c7ea1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10359de4051d56feeacd455946b93ec48e6511fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10359de4051d56feeacd455946b93ec48e6511fc", "html_url": "https://github.com/rust-lang/rust/commit/10359de4051d56feeacd455946b93ec48e6511fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10359de4051d56feeacd455946b93ec48e6511fc/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9146bf8ba0bdf98a46c4656899e54802e96ac0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9146bf8ba0bdf98a46c4656899e54802e96ac0c", "html_url": "https://github.com/rust-lang/rust/commit/d9146bf8ba0bdf98a46c4656899e54802e96ac0c"}], "stats": {"total": 161, "additions": 115, "deletions": 46}, "files": [{"sha": "1971daa8c032bdb992d156725414cc1d66df90da", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10359de4051d56feeacd455946b93ec48e6511fc/configure", "raw_url": "https://github.com/rust-lang/rust/raw/10359de4051d56feeacd455946b93ec48e6511fc/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=10359de4051d56feeacd455946b93ec48e6511fc", "patch": "@@ -1108,6 +1108,7 @@ do\n     make_dir $h/test/debuginfo-gdb\n     make_dir $h/test/debuginfo-lldb\n     make_dir $h/test/codegen\n+    make_dir $h/test/rustdoc\n done\n \n # Configure submodules"}, {"sha": "29ffe55291f7fda347056495eabab8f038bf8945", "filename": "mk/tests.mk", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/10359de4051d56feeacd455946b93ec48e6511fc/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/10359de4051d56feeacd455946b93ec48e6511fc/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=10359de4051d56feeacd455946b93ec48e6511fc", "patch": "@@ -304,6 +304,7 @@ check-stage$(1)-T-$(2)-H-$(3)-exec: \\\n     check-stage$(1)-T-$(2)-H-$(3)-rpass-full-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-cfail-full-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-rmake-exec \\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-rustdocck-exec \\\n         check-stage$(1)-T-$(2)-H-$(3)-crates-exec \\\n         check-stage$(1)-T-$(2)-H-$(3)-doc-crates-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-bench-exec \\\n@@ -471,6 +472,7 @@ DEBUGINFO_GDB_RS := $(wildcard $(S)src/test/debuginfo/*.rs)\n DEBUGINFO_LLDB_RS := $(wildcard $(S)src/test/debuginfo/*.rs)\n CODEGEN_RS := $(wildcard $(S)src/test/codegen/*.rs)\n CODEGEN_CC := $(wildcard $(S)src/test/codegen/*.cc)\n+RUSTDOCCK_RS := $(wildcard $(S)src/test/rustdocck/*.rs)\n \n # perf tests are the same as bench tests only they run under\n # a performance monitor.\n@@ -489,6 +491,7 @@ PRETTY_TESTS := $(PRETTY_RS)\n DEBUGINFO_GDB_TESTS := $(DEBUGINFO_GDB_RS)\n DEBUGINFO_LLDB_TESTS := $(DEBUGINFO_LLDB_RS)\n CODEGEN_TESTS := $(CODEGEN_RS) $(CODEGEN_CC)\n+RUSTDOCCK_TESTS := $(RUSTDOCCK_RS)\n \n CTEST_SRC_BASE_rpass = run-pass\n CTEST_BUILD_BASE_rpass = run-pass\n@@ -550,6 +553,11 @@ CTEST_BUILD_BASE_codegen = codegen\n CTEST_MODE_codegen = codegen\n CTEST_RUNTOOL_codegen = $(CTEST_RUNTOOL)\n \n+CTEST_SRC_BASE_rustdocck = rustdoc\n+CTEST_BUILD_BASE_rustdocck = rustdoc\n+CTEST_MODE_rustdocck = rustdoc\n+CTEST_RUNTOOL_rustdocck = $(CTEST_RUNTOOL)\n+\n # CTEST_DISABLE_$(TEST_GROUP), if set, will cause the test group to be\n # disabled and the associated message to be printed as a warning\n # during attempts to run those tests.\n@@ -618,12 +626,14 @@ CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) := \\\n \t\t--compile-lib-path $$(HLIB$(1)_H_$(3)) \\\n         --run-lib-path $$(TLIB$(1)_T_$(2)_H_$(3)) \\\n         --rustc-path $$(HBIN$(1)_H_$(3))/rustc$$(X_$(3)) \\\n+        --rustdoc-path $$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) \\\n         --clang-path $(if $(CFG_CLANG),$(CFG_CLANG),clang) \\\n         --llvm-bin-path $(CFG_LLVM_INST_DIR_$(CFG_BUILD))/bin \\\n         --aux-base $$(S)src/test/auxiliary/ \\\n         --stage-id stage$(1)-$(2) \\\n         --target $(2) \\\n         --host $(3) \\\n+\t--python $$(CFG_PYTHON) \\\n         --gdb-version=\"$(CFG_GDB_VERSION)\" \\\n         --lldb-version=\"$(CFG_LLDB_VERSION)\" \\\n         --android-cross-path=$(CFG_ANDROID_CROSS_PATH) \\\n@@ -660,6 +670,9 @@ CTEST_DEPS_debuginfo-lldb_$(1)-T-$(2)-H-$(3) = $$(DEBUGINFO_LLDB_TESTS) \\\n                                                $(S)src/etc/lldb_batchmode.py \\\n                                                $(S)src/etc/lldb_rust_formatters.py\n CTEST_DEPS_codegen_$(1)-T-$(2)-H-$(3) = $$(CODEGEN_TESTS)\n+CTEST_DEPS_rustdocck_$(1)-T-$(2)-H-$(3) = $$(RUSTDOCCK_TESTS) \\\n+        $$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) \\\n+\t$(S)src/etc/htmldocck.py\n \n endef\n \n@@ -722,7 +735,8 @@ endif\n \n endef\n \n-CTEST_NAMES = rpass rpass-valgrind rpass-full cfail-full rfail cfail pfail bench perf debuginfo-gdb debuginfo-lldb codegen\n+CTEST_NAMES = rpass rpass-valgrind rpass-full cfail-full rfail cfail pfail \\\n+\tbench perf debuginfo-gdb debuginfo-lldb codegen rustdocck\n \n $(foreach host,$(CFG_HOST), \\\n  $(eval $(foreach target,$(CFG_TARGET), \\\n@@ -890,6 +904,7 @@ TEST_GROUPS = \\\n \tbench \\\n \tperf \\\n \trmake \\\n+\trustdocck \\\n \tdebuginfo-gdb \\\n \tdebuginfo-lldb \\\n \tcodegen \\"}, {"sha": "dcac32ccb8a40564eb2217cca1c409f0ccdc7f3f", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/10359de4051d56feeacd455946b93ec48e6511fc/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10359de4051d56feeacd455946b93ec48e6511fc/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=10359de4051d56feeacd455946b93ec48e6511fc", "patch": "@@ -23,7 +23,8 @@ pub enum Mode {\n     Pretty,\n     DebugInfoGdb,\n     DebugInfoLldb,\n-    Codegen\n+    Codegen,\n+    Rustdoc,\n }\n \n impl FromStr for Mode {\n@@ -39,6 +40,7 @@ impl FromStr for Mode {\n           \"debuginfo-lldb\" => Ok(DebugInfoLldb),\n           \"debuginfo-gdb\" => Ok(DebugInfoGdb),\n           \"codegen\" => Ok(Codegen),\n+          \"rustdoc\" => Ok(Rustdoc),\n           _ => Err(()),\n         }\n     }\n@@ -56,6 +58,7 @@ impl fmt::Display for Mode {\n             DebugInfoGdb => \"debuginfo-gdb\",\n             DebugInfoLldb => \"debuginfo-lldb\",\n             Codegen => \"codegen\",\n+            Rustdoc => \"rustdoc\",\n         }, f)\n     }\n }\n@@ -71,6 +74,12 @@ pub struct Config {\n     // The rustc executable\n     pub rustc_path: PathBuf,\n \n+    // The rustdoc executable\n+    pub rustdoc_path: PathBuf,\n+\n+    // The python executable\n+    pub python: String,\n+\n     // The clang executable\n     pub clang_path: Option<PathBuf>,\n "}, {"sha": "e680be2a8c526bf0ec7263e6ee9fc9f609f3c1c7", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/10359de4051d56feeacd455946b93ec48e6511fc/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10359de4051d56feeacd455946b93ec48e6511fc/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=10359de4051d56feeacd455946b93ec48e6511fc", "patch": "@@ -60,6 +60,8 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         vec!(reqopt(\"\", \"compile-lib-path\", \"path to host shared libraries\", \"PATH\"),\n           reqopt(\"\", \"run-lib-path\", \"path to target shared libraries\", \"PATH\"),\n           reqopt(\"\", \"rustc-path\", \"path to rustc to use for compiling\", \"PATH\"),\n+          reqopt(\"\", \"rustdoc-path\", \"path to rustdoc to use for compiling\", \"PATH\"),\n+          reqopt(\"\", \"python\", \"path to python to use for doc tests\", \"PATH\"),\n           optopt(\"\", \"clang-path\", \"path to  executable for codegen tests\", \"PATH\"),\n           optopt(\"\", \"valgrind-path\", \"path to Valgrind executable for Valgrind tests\", \"PROGRAM\"),\n           optflag(\"\", \"force-valgrind\", \"fail if Valgrind tests cannot be run under Valgrind\"),\n@@ -128,6 +130,8 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         compile_lib_path: matches.opt_str(\"compile-lib-path\").unwrap(),\n         run_lib_path: matches.opt_str(\"run-lib-path\").unwrap(),\n         rustc_path: opt_path(matches, \"rustc-path\"),\n+        rustdoc_path: opt_path(matches, \"rustdoc-path\"),\n+        python: matches.opt_str(\"python\").unwrap(),\n         clang_path: matches.opt_str(\"clang-path\").map(|s| PathBuf::from(&s)),\n         valgrind_path: matches.opt_str(\"valgrind-path\"),\n         force_valgrind: matches.opt_present(\"force-valgrind\"),\n@@ -168,6 +172,7 @@ pub fn log_config(config: &Config) {\n     logv(c, format!(\"compile_lib_path: {:?}\", config.compile_lib_path));\n     logv(c, format!(\"run_lib_path: {:?}\", config.run_lib_path));\n     logv(c, format!(\"rustc_path: {:?}\", config.rustc_path.display()));\n+    logv(c, format!(\"rustdoc_path: {:?}\", config.rustdoc_path.display()));\n     logv(c, format!(\"src_base: {:?}\", config.src_base.display()));\n     logv(c, format!(\"build_base: {:?}\", config.build_base.display()));\n     logv(c, format!(\"stage_id: {}\", config.stage_id));"}, {"sha": "6c0e667d010f2ee721ad1470b2e11bf8e7636516", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 83, "deletions": 44, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/10359de4051d56feeacd455946b93ec48e6511fc/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10359de4051d56feeacd455946b93ec48e6511fc/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=10359de4051d56feeacd455946b93ec48e6511fc", "patch": "@@ -12,7 +12,7 @@ use self::TargetLocation::*;\n \n use common::Config;\n use common::{CompileFail, ParseFail, Pretty, RunFail, RunPass, RunPassValgrind};\n-use common::{Codegen, DebugInfoLldb, DebugInfoGdb};\n+use common::{Codegen, DebugInfoLldb, DebugInfoGdb, Rustdoc};\n use errors;\n use header::TestProps;\n use header;\n@@ -57,15 +57,16 @@ pub fn run_metrics(config: Config, testfile: &Path, mm: &mut MetricMap) {\n     let props = header::load_props(&testfile);\n     debug!(\"loaded props\");\n     match config.mode {\n-      CompileFail => run_cfail_test(&config, &props, &testfile),\n-      ParseFail => run_cfail_test(&config, &props, &testfile),\n-      RunFail => run_rfail_test(&config, &props, &testfile),\n-      RunPass => run_rpass_test(&config, &props, &testfile),\n-      RunPassValgrind => run_valgrind_test(&config, &props, &testfile),\n-      Pretty => run_pretty_test(&config, &props, &testfile),\n-      DebugInfoGdb => run_debuginfo_gdb_test(&config, &props, &testfile),\n-      DebugInfoLldb => run_debuginfo_lldb_test(&config, &props, &testfile),\n-      Codegen => run_codegen_test(&config, &props, &testfile, mm),\n+        CompileFail => run_cfail_test(&config, &props, &testfile),\n+        ParseFail => run_cfail_test(&config, &props, &testfile),\n+        RunFail => run_rfail_test(&config, &props, &testfile),\n+        RunPass => run_rpass_test(&config, &props, &testfile),\n+        RunPassValgrind => run_valgrind_test(&config, &props, &testfile),\n+        Pretty => run_pretty_test(&config, &props, &testfile),\n+        DebugInfoGdb => run_debuginfo_gdb_test(&config, &props, &testfile),\n+        DebugInfoLldb => run_debuginfo_lldb_test(&config, &props, &testfile),\n+        Codegen => run_codegen_test(&config, &props, &testfile, mm),\n+        Rustdoc => run_rustdoc_test(&config, &props, &testfile),\n     }\n }\n \n@@ -725,32 +726,37 @@ fn run_debuginfo_lldb_test(config: &Config, props: &TestProps, testfile: &Path)\n                 -> ProcRes {\n         // Prepare the lldb_batchmode which executes the debugger script\n         let lldb_script_path = rust_src_root.join(\"src/etc/lldb_batchmode.py\");\n+        cmd2proces(config,\n+                   test_executable,\n+                   Command::new(&config.python)\n+                           .arg(&lldb_script_path)\n+                           .arg(test_executable)\n+                           .arg(debugger_script)\n+                           .env(\"PYTHONPATH\",\n+                                config.lldb_python_dir.as_ref().unwrap()))\n+    }\n+}\n \n-        let mut cmd = Command::new(\"python\");\n-        cmd.arg(&lldb_script_path)\n-           .arg(test_executable)\n-           .arg(debugger_script)\n-           .env(\"PYTHONPATH\", config.lldb_python_dir.as_ref().unwrap());\n-\n-        let (status, out, err) = match cmd.output() {\n-            Ok(Output { status, stdout, stderr }) => {\n-                (status,\n-                 String::from_utf8(stdout).unwrap(),\n-                 String::from_utf8(stderr).unwrap())\n-            },\n-            Err(e) => {\n-                fatal(&format!(\"Failed to setup Python process for \\\n-                                LLDB script: {}\", e))\n-            }\n-        };\n+fn cmd2proces(config: &Config, test_executable: &Path, cmd: &mut Command)\n+              -> ProcRes {\n+    let (status, out, err) = match cmd.output() {\n+        Ok(Output { status, stdout, stderr }) => {\n+            (status,\n+             String::from_utf8(stdout).unwrap(),\n+             String::from_utf8(stderr).unwrap())\n+        },\n+        Err(e) => {\n+            fatal(&format!(\"Failed to setup Python process for \\\n+                            LLDB script: {}\", e))\n+        }\n+    };\n \n-        dump_output(config, test_executable, &out, &err);\n-        return ProcRes {\n-            status: Status::Normal(status),\n-            stdout: out,\n-            stderr: err,\n-            cmdline: format!(\"{:?}\", cmd)\n-        };\n+    dump_output(config, test_executable, &out, &err);\n+    ProcRes {\n+        status: Status::Normal(status),\n+        stdout: out,\n+        stderr: err,\n+        cmdline: format!(\"{:?}\", cmd)\n     }\n }\n \n@@ -1157,6 +1163,24 @@ fn compile_test_(config: &Config, props: &TestProps,\n     compose_and_run_compiler(config, props, testfile, args, None)\n }\n \n+fn document(config: &Config, props: &TestProps,\n+            testfile: &Path, extra_args: &[String]) -> (ProcRes, PathBuf) {\n+    let aux_dir = aux_output_dir_name(config, testfile);\n+    let out_dir = output_base_name(config, testfile);\n+    ensure_dir(&out_dir);\n+    let mut args = vec![\"-L\".to_string(),\n+                        aux_dir.to_str().unwrap().to_string(),\n+                        \"-o\".to_string(),\n+                        out_dir.to_str().unwrap().to_string(),\n+                        testfile.to_str().unwrap().to_string()];\n+    args.extend(extra_args.iter().cloned());\n+    let args = ProcArgs {\n+        prog: config.rustdoc_path.to_str().unwrap().to_string(),\n+        args: args,\n+    };\n+    (compose_and_run_compiler(config, props, testfile, args, None), out_dir)\n+}\n+\n fn exec_compiled_test(config: &Config, props: &TestProps,\n                       testfile: &Path) -> ProcRes {\n \n@@ -1181,20 +1205,17 @@ fn exec_compiled_test(config: &Config, props: &TestProps,\n     }\n }\n \n-fn compose_and_run_compiler(\n-    config: &Config,\n-    props: &TestProps,\n-    testfile: &Path,\n-    args: ProcArgs,\n-    input: Option<String>) -> ProcRes {\n-\n+fn compose_and_run_compiler(config: &Config, props: &TestProps,\n+                            testfile: &Path, args: ProcArgs,\n+                            input: Option<String>) -> ProcRes {\n     if !props.aux_builds.is_empty() {\n         ensure_dir(&aux_output_dir_name(config, testfile));\n     }\n \n     let aux_dir = aux_output_dir_name(config, testfile);\n     // FIXME (#9639): This needs to handle non-utf8 paths\n-    let extra_link_args = vec!(\"-L\".to_string(), aux_dir.to_str().unwrap().to_string());\n+    let extra_link_args = vec![\"-L\".to_string(),\n+                               aux_dir.to_str().unwrap().to_string()];\n \n     for rel_ab in &props.aux_builds {\n         let abs_ab = config.aux_base.join(rel_ab);\n@@ -1330,8 +1351,8 @@ fn make_exe_name(config: &Config, testfile: &Path) -> PathBuf {\n     f\n }\n \n-fn make_run_args(config: &Config, props: &TestProps, testfile: &Path) ->\n-   ProcArgs {\n+fn make_run_args(config: &Config, props: &TestProps, testfile: &Path)\n+                 -> ProcArgs {\n     // If we've got another tool to run under (valgrind),\n     // then split apart its command\n     let mut args = split_maybe_args(&config.runtool);\n@@ -1797,3 +1818,21 @@ fn charset() -> &'static str {\n         \"UTF-8\"\n     }\n }\n+\n+fn run_rustdoc_test(config: &Config, props: &TestProps, testfile: &Path) {\n+    let (proc_res, out_dir) = document(config, props, testfile, &[]);\n+    if !proc_res.status.success() {\n+        fatal_proc_rec(\"rustdoc failed!\", &proc_res);\n+    }\n+    let root = find_rust_src_root(config).unwrap();\n+\n+    let res = cmd2proces(config,\n+                         testfile,\n+                         Command::new(&config.python)\n+                                 .arg(root.join(\"src/etc/htmldocck.py\"))\n+                                 .arg(out_dir)\n+                                 .arg(testfile));\n+    if !res.status.success() {\n+        fatal_proc_rec(\"htmldocck failed!\", &res);\n+    }\n+}"}]}