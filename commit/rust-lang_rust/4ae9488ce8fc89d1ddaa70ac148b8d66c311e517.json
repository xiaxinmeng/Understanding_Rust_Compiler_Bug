{"sha": "4ae9488ce8fc89d1ddaa70ac148b8d66c311e517", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZTk0ODhjZThmYzg5ZDFkZGFhNzBhYzE0OGI4ZDY2YzMxMWU1MTc=", "commit": {"author": {"name": "James Sanderson", "email": "zofrex@gmail.com", "date": "2018-04-15T19:51:10Z"}, "committer": {"name": "James Sanderson", "email": "zofrex@gmail.com", "date": "2018-04-15T19:51:10Z"}, "message": "Provide better names for builtin deriving-generated attributes", "tree": {"sha": "c1ebc68e7f0af0a04471ae36aeca0ec402938e17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1ebc68e7f0af0a04471ae36aeca0ec402938e17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ae9488ce8fc89d1ddaa70ac148b8d66c311e517", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae9488ce8fc89d1ddaa70ac148b8d66c311e517", "html_url": "https://github.com/rust-lang/rust/commit/4ae9488ce8fc89d1ddaa70ac148b8d66c311e517", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ae9488ce8fc89d1ddaa70ac148b8d66c311e517/comments", "author": {"login": "zofrex", "id": 22220, "node_id": "MDQ6VXNlcjIyMjIw", "avatar_url": "https://avatars.githubusercontent.com/u/22220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zofrex", "html_url": "https://github.com/zofrex", "followers_url": "https://api.github.com/users/zofrex/followers", "following_url": "https://api.github.com/users/zofrex/following{/other_user}", "gists_url": "https://api.github.com/users/zofrex/gists{/gist_id}", "starred_url": "https://api.github.com/users/zofrex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zofrex/subscriptions", "organizations_url": "https://api.github.com/users/zofrex/orgs", "repos_url": "https://api.github.com/users/zofrex/repos", "events_url": "https://api.github.com/users/zofrex/events{/privacy}", "received_events_url": "https://api.github.com/users/zofrex/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zofrex", "id": 22220, "node_id": "MDQ6VXNlcjIyMjIw", "avatar_url": "https://avatars.githubusercontent.com/u/22220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zofrex", "html_url": "https://github.com/zofrex", "followers_url": "https://api.github.com/users/zofrex/followers", "following_url": "https://api.github.com/users/zofrex/following{/other_user}", "gists_url": "https://api.github.com/users/zofrex/gists{/gist_id}", "starred_url": "https://api.github.com/users/zofrex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zofrex/subscriptions", "organizations_url": "https://api.github.com/users/zofrex/orgs", "repos_url": "https://api.github.com/users/zofrex/repos", "events_url": "https://api.github.com/users/zofrex/events{/privacy}", "received_events_url": "https://api.github.com/users/zofrex/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21dae950bebab7376d2bcb92299861e6cd05299d", "url": "https://api.github.com/repos/rust-lang/rust/commits/21dae950bebab7376d2bcb92299861e6cd05299d", "html_url": "https://github.com/rust-lang/rust/commit/21dae950bebab7376d2bcb92299861e6cd05299d"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "746cec91a77cef5cecf4cb3962896d9ec8a4efeb", "filename": "src/libsyntax_ext/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae9488ce8fc89d1ddaa70ac148b8d66c311e517/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae9488ce8fc89d1ddaa70ac148b8d66c311e517/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs?ref=4ae9488ce8fc89d1ddaa70ac148b8d66c311e517", "patch": "@@ -38,7 +38,7 @@ pub fn expand_deriving_ord(cx: &mut ExtCtxt,\n                           name: \"cmp\",\n                           generics: LifetimeBounds::empty(),\n                           explicit_self: borrowed_explicit_self(),\n-                          args: vec![borrowed_self()],\n+                          args: vec![(borrowed_self(), \"other\")],\n                           ret_ty: Literal(path_std!(cx, cmp::Ordering)),\n                           attributes: attrs,\n                           is_unsafe: false,"}, {"sha": "353adc9796cc3ba8264af2dc5a27168177f4a386", "filename": "src/libsyntax_ext/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae9488ce8fc89d1ddaa70ac148b8d66c311e517/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae9488ce8fc89d1ddaa70ac148b8d66c311e517/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=4ae9488ce8fc89d1ddaa70ac148b8d66c311e517", "patch": "@@ -71,7 +71,7 @@ pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt,\n                 name: $name,\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n-                args: vec![borrowed_self()],\n+                args: vec![(borrowed_self(), \"_other\")],\n                 ret_ty: Literal(path_local!(bool)),\n                 attributes: attrs,\n                 is_unsafe: false,"}, {"sha": "5ac93a4d7203813010f45f31f1f130f0bf83e323", "filename": "src/libsyntax_ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ae9488ce8fc89d1ddaa70ac148b8d66c311e517/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae9488ce8fc89d1ddaa70ac148b8d66c311e517/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=4ae9488ce8fc89d1ddaa70ac148b8d66c311e517", "patch": "@@ -34,7 +34,7 @@ pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt,\n                 name: $name,\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n-                args: vec![borrowed_self()],\n+                args: vec![(borrowed_self(), \"other\")],\n                 ret_ty: Literal(path_local!(bool)),\n                 attributes: attrs,\n                 is_unsafe: false,\n@@ -59,7 +59,7 @@ pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt,\n         name: \"partial_cmp\",\n         generics: LifetimeBounds::empty(),\n         explicit_self: borrowed_explicit_self(),\n-        args: vec![borrowed_self()],\n+        args: vec![(borrowed_self(), \"other\")],\n         ret_ty,\n         attributes: attrs,\n         is_unsafe: false,"}, {"sha": "b06f30effbbbfa7fb47b2648e44cb1ef7d9cdd7b", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae9488ce8fc89d1ddaa70ac148b8d66c311e517/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae9488ce8fc89d1ddaa70ac148b8d66c311e517/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=4ae9488ce8fc89d1ddaa70ac148b8d66c311e517", "patch": "@@ -40,7 +40,7 @@ pub fn expand_deriving_debug(cx: &mut ExtCtxt,\n                           name: \"fmt\",\n                           generics: LifetimeBounds::empty(),\n                           explicit_self: borrowed_explicit_self(),\n-                          args: vec![fmtr],\n+                          args: vec![(fmtr, \"_f\")],\n                           ret_ty: Literal(path_std!(cx, fmt::Result)),\n                           attributes: Vec::new(),\n                           is_unsafe: false,"}, {"sha": "7618fe63ab3354461b499c423792defbe1f3a93b", "filename": "src/libsyntax_ext/deriving/decodable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ae9488ce8fc89d1ddaa70ac148b8d66c311e517/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae9488ce8fc89d1ddaa70ac148b8d66c311e517/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs?ref=4ae9488ce8fc89d1ddaa70ac148b8d66c311e517", "patch": "@@ -67,8 +67,8 @@ fn expand_deriving_decodable_imp(cx: &mut ExtCtxt,\n                                                             PathKind::Global)])],\n                           },\n                           explicit_self: None,\n-                          args: vec![Ptr(Box::new(Literal(Path::new_local(typaram))),\n-                                         Borrowed(None, Mutability::Mutable))],\n+                          args: vec![(Ptr(Box::new(Literal(Path::new_local(typaram))),\n+                                         Borrowed(None, Mutability::Mutable)), \"d\")],\n                           ret_ty:\n                               Literal(Path::new_(pathvec_std!(cx, result::Result),\n                                                  None,"}, {"sha": "2c6c18cc51cd7daf36067031c163ae580fc4dcc3", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ae9488ce8fc89d1ddaa70ac148b8d66c311e517/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae9488ce8fc89d1ddaa70ac148b8d66c311e517/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=4ae9488ce8fc89d1ddaa70ac148b8d66c311e517", "patch": "@@ -148,8 +148,8 @@ fn expand_deriving_encodable_imp(cx: &mut ExtCtxt,\n                     ],\n                 },\n                 explicit_self: borrowed_explicit_self(),\n-                args: vec![Ptr(Box::new(Literal(Path::new_local(typaram))),\n-                           Borrowed(None, Mutability::Mutable))],\n+                args: vec![(Ptr(Box::new(Literal(Path::new_local(typaram))),\n+                           Borrowed(None, Mutability::Mutable)), \"s\")],\n                 ret_ty: Literal(Path::new_(\n                     pathvec_std!(cx, result::Result),\n                     None,"}, {"sha": "84fcabd0f5a7e4062b6a9e293b897ff042b35bdf", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ae9488ce8fc89d1ddaa70ac148b8d66c311e517/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae9488ce8fc89d1ddaa70ac148b8d66c311e517/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=4ae9488ce8fc89d1ddaa70ac148b8d66c311e517", "patch": "@@ -252,7 +252,7 @@ pub struct MethodDef<'a> {\n     pub explicit_self: Option<Option<PtrTy<'a>>>,\n \n     /// Arguments other than the self argument\n-    pub args: Vec<Ty<'a>>,\n+    pub args: Vec<(Ty<'a>, &'a str)>,\n \n     /// Return type\n     pub ret_ty: Ty<'a>,\n@@ -915,9 +915,9 @@ impl<'a> MethodDef<'a> {\n             explicit_self\n         });\n \n-        for (i, ty) in self.args.iter().enumerate() {\n+        for (ty, name) in self.args.iter() {\n             let ast_ty = ty.to_ty(cx, trait_.span, type_ident, generics);\n-            let ident = cx.ident_of(&format!(\"__arg_{}\", i));\n+            let ident = cx.ident_of(name).gensym();\n             arg_tys.push((ident, ast_ty));\n \n             let arg_expr = cx.expr_ident(trait_.span, ident);"}, {"sha": "1980fa74de0e941b77fb0cbe068969a7cf6789a6", "filename": "src/libsyntax_ext/deriving/hash.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ae9488ce8fc89d1ddaa70ac148b8d66c311e517/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae9488ce8fc89d1ddaa70ac148b8d66c311e517/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs?ref=4ae9488ce8fc89d1ddaa70ac148b8d66c311e517", "patch": "@@ -44,8 +44,8 @@ pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n                               bounds: vec![(typaram, vec![path_std!(cx, hash::Hasher)])],\n                           },\n                           explicit_self: borrowed_explicit_self(),\n-                          args: vec![Ptr(Box::new(Literal(arg)),\n-                                         Borrowed(None, Mutability::Mutable))],\n+                          args: vec![(Ptr(Box::new(Literal(arg)),\n+                                         Borrowed(None, Mutability::Mutable)), \"_state\")],\n                           ret_ty: nil_ty(),\n                           attributes: vec![],\n                           is_unsafe: false,"}, {"sha": "d1a5c792b9e998d16a3accbffe99096a1cd1211a", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ae9488ce8fc89d1ddaa70ac148b8d66c311e517/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae9488ce8fc89d1ddaa70ac148b8d66c311e517/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=4ae9488ce8fc89d1ddaa70ac148b8d66c311e517", "patch": "@@ -53,6 +53,10 @@ impl Ident {\n     pub fn modern(self) -> Ident {\n         Ident::new(self.name, self.span.modern())\n     }\n+\n+    pub fn gensym(self) -> Ident {\n+        Ident::new(self.name.gensymed(), self.span)\n+    }\n }\n \n impl PartialEq for Ident {"}, {"sha": "6d5e82c68cc8ed883c27e7d8bc504e2c681344d8", "filename": "src/test/run-pass-fulldeps/auxiliary/custom_derive_partial_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae9488ce8fc89d1ddaa70ac148b8d66c311e517/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_partial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae9488ce8fc89d1ddaa70ac148b8d66c311e517/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_partial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_partial_eq.rs?ref=4ae9488ce8fc89d1ddaa70ac148b8d66c311e517", "patch": "@@ -58,7 +58,7 @@ fn expand_deriving_partial_eq(cx: &mut ExtCtxt, span: Span, mitem: &MetaItem, it\n         name: \"eq\",\n         generics: LifetimeBounds::empty(),\n         explicit_self: borrowed_explicit_self(),\n-        args: vec![borrowed_self()],\n+        args: vec![(borrowed_self(), \"other\")],\n         ret_ty: Literal(deriving::generic::ty::Path::new_local(\"bool\")),\n         attributes: attrs,\n         is_unsafe: false,"}]}