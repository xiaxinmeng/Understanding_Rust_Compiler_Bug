{"sha": "98b93b6c86d6dc3db7e057866bb8a29a38cc7a3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YjkzYjZjODZkNmRjM2RiN2UwNTc4NjZiYjhhMjlhMzhjYzdhM2E=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-23T00:16:26Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-23T01:07:36Z"}, "message": "rustc: Eliminate some session deps from metadata::loader", "tree": {"sha": "accf38a1ef72b56eba32da41258cc316677fb762", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/accf38a1ef72b56eba32da41258cc316677fb762"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98b93b6c86d6dc3db7e057866bb8a29a38cc7a3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98b93b6c86d6dc3db7e057866bb8a29a38cc7a3a", "html_url": "https://github.com/rust-lang/rust/commit/98b93b6c86d6dc3db7e057866bb8a29a38cc7a3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98b93b6c86d6dc3db7e057866bb8a29a38cc7a3a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c90a04701602353f410aad7073abffe758a01586", "url": "https://api.github.com/repos/rust-lang/rust/commits/c90a04701602353f410aad7073abffe758a01586", "html_url": "https://github.com/rust-lang/rust/commit/c90a04701602353f410aad7073abffe758a01586"}], "stats": {"total": 141, "additions": 85, "deletions": 56}, "files": [{"sha": "a7febe457dd31b0b1adc9d762af462b3462d4581", "filename": "src/rustc/back/x86.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/98b93b6c86d6dc3db7e057866bb8a29a38cc7a3a/src%2Frustc%2Fback%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b93b6c86d6dc3db7e057866bb8a29a38cc7a3a/src%2Frustc%2Fback%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Fx86.rs?ref=98b93b6c86d6dc3db7e057866bb8a29a38cc7a3a", "patch": "@@ -1,15 +1,12 @@\n import driver::session;\n+import session::sess_os_to_meta_os;\n+import metadata::loader::meta_section_name;\n \n fn get_target_strs(target_os: session::os) -> target_strs::t {\n     ret {\n         module_asm: \"\",\n \n-        meta_sect_name: alt target_os {\n-          session::os_macos { \"__DATA,__note.rustc\" }\n-          session::os_win32 { \".note.rustc\" }\n-          session::os_linux { \".note.rustc\" }\n-          session::os_freebsd { \".note.rustc\" }\n-        },\n+        meta_sect_name: meta_section_name(sess_os_to_meta_os(target_os)),\n \n         data_layout: alt target_os {\n           session::os_macos {"}, {"sha": "3210a2333f4094e0c321dad4a0158aad3ac7a83f", "filename": "src/rustc/back/x86_64.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/98b93b6c86d6dc3db7e057866bb8a29a38cc7a3a/src%2Frustc%2Fback%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b93b6c86d6dc3db7e057866bb8a29a38cc7a3a/src%2Frustc%2Fback%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Fx86_64.rs?ref=98b93b6c86d6dc3db7e057866bb8a29a38cc7a3a", "patch": "@@ -1,15 +1,12 @@\n import driver::session;\n+import session::sess_os_to_meta_os;\n+import metadata::loader::meta_section_name;\n \n fn get_target_strs(target_os: session::os) -> target_strs::t {\n     ret {\n         module_asm: \"\",\n \n-        meta_sect_name: alt target_os {\n-          session::os_macos { \"__DATA,__note.rustc\" }\n-          session::os_win32 { \".note.rustc\" }\n-          session::os_linux { \".note.rustc\" }\n-          session::os_freebsd { \".note.rustc\" }\n-        },\n+        meta_sect_name: meta_section_name(sess_os_to_meta_os(target_os)),\n \n         data_layout: alt target_os {\n           session::os_macos {"}, {"sha": "d354292974cc8ee1710928a954ac7cda4d0bd521", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98b93b6c86d6dc3db7e057866bb8a29a38cc7a3a/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b93b6c86d6dc3db7e057866bb8a29a38cc7a3a/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=98b93b6c86d6dc3db7e057866bb8a29a38cc7a3a", "patch": "@@ -676,7 +676,8 @@ fn early_error(emitter: diagnostic::emitter, msg: str) -> ! {\n }\n \n fn list_metadata(sess: session, path: str, out: io::writer) {\n-    metadata::loader::list_file_metadata(sess, path, out);\n+    metadata::loader::list_file_metadata(\n+        session::sess_os_to_meta_os(sess.targ_cfg.os), path, out);\n }\n \n #[cfg(test)]"}, {"sha": "85cbc2d3a1ae5699b2c54fc1c58765ad488efc22", "filename": "src/rustc/driver/session.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98b93b6c86d6dc3db7e057866bb8a29a38cc7a3a/src%2Frustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b93b6c86d6dc3db7e057866bb8a29a38cc7a3a/src%2Frustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fsession.rs?ref=98b93b6c86d6dc3db7e057866bb8a29a38cc7a3a", "patch": "@@ -194,6 +194,17 @@ fn building_library(req_crate_type: crate_type, crate: @ast::crate,\n     }\n }\n \n+fn sess_os_to_meta_os(os: os) -> metadata::loader::os {\n+    import metadata::loader;\n+\n+    alt os {\n+      os_win32 { loader::os_win32 }\n+      os_linux { loader::os_linux }\n+      os_macos { loader::os_macos }\n+      os_freebsd { loader::os_freebsd }\n+    }\n+}\n+\n #[cfg(test)]\n mod test {\n     import syntax::ast_util;"}, {"sha": "662471fd02d7b272655c5b80d742f706d27166bf", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/98b93b6c86d6dc3db7e057866bb8a29a38cc7a3a/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b93b6c86d6dc3db7e057866bb8a29a38cc7a3a/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=98b93b6c86d6dc3db7e057866bb8a29a38cc7a3a", "patch": "@@ -179,8 +179,16 @@ fn resolve_crate(e: env, ident: ast::ident, metas: [@ast::meta_item],\n \n     alt existing_match(e, metas, hash) {\n       none {\n-        let cinfo =\n-            loader::load_library_crate(e.sess, ident, span, metas, hash);\n+        let load_ctxt: loader::ctxt = {\n+            sess: e.sess,\n+            span: span,\n+            ident: ident,\n+            metas: metas,\n+            hash: hash,\n+            os: session::sess_os_to_meta_os(e.sess.targ_cfg.os),\n+            static: e.sess.opts.static\n+        };\n+        let cinfo = loader::load_library_crate(load_ctxt);\n \n         let cfilename = cinfo.ident;\n         let cdata = cinfo.data;"}, {"sha": "85b0db6da896c0ae960f338e4b03d0f611d5b32c", "filename": "src/rustc/metadata/loader.rs", "status": "modified", "additions": 56, "deletions": 41, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/98b93b6c86d6dc3db7e057866bb8a29a38cc7a3a/src%2Frustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b93b6c86d6dc3db7e057866bb8a29a38cc7a3a/src%2Frustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Floader.rs?ref=98b93b6c86d6dc3db7e057866bb8a29a38cc7a3a", "patch": "@@ -13,56 +13,62 @@ import lib::llvm::{False, llvm, mk_object_file, mk_section_iter};\n import util::{filesearch};\n import io::writer_util;\n \n+export os;\n+export ctxt;\n export load_library_crate;\n export list_file_metadata;\n export note_linkage_attrs;\n export crate_name_from_metas;\n export metadata_matches;\n+export meta_section_name;\n \n-fn load_library_crate(sess: session::session, ident: ast::ident, span: span,\n-                      metas: [@ast::meta_item], hash: str)\n-   -> {ident: str, data: @[u8]} {\n-\n+enum os {\n+    os_macos,\n+    os_win32,\n+    os_linux,\n+    os_freebsd\n+}\n \n-    alt find_library_crate(sess, span, metas, hash) {\n+type ctxt = {\n+    sess: session,\n+    span: span,\n+    ident: ast::ident,\n+    metas: [@ast::meta_item],\n+    hash: str,\n+    os: os,\n+    static: bool\n+};\n+\n+fn load_library_crate(cx: ctxt) -> {ident: str, data: @[u8]} {\n+    alt find_library_crate(cx) {\n       some(t) { ret t; }\n       none {\n-        sess.span_fatal(span, #fmt[\"can't find crate for '%s'\", ident]);\n+        cx.sess.span_fatal(\n+            cx.span, #fmt[\"can't find crate for '%s'\", cx.ident]);\n       }\n     }\n }\n \n-fn find_library_crate(sess: session::session, span: span,\n-                      metas: [@ast::meta_item], hash: str)\n-   -> option<{ident: str, data: @[u8]}> {\n-\n-    attr::require_unique_names(sess.diagnostic(), metas);\n-    let metas = metas;\n-\n-    let nn = default_native_lib_naming(sess, sess.opts.static);\n-    find_library_crate_aux(sess, span, nn,\n-                           metas, hash, sess.filesearch)\n+fn find_library_crate(cx: ctxt) -> option<{ident: str, data: @[u8]}> {\n+    attr::require_unique_names(cx.sess.diagnostic(), cx.metas);\n+    find_library_crate_aux(cx, libname(cx), cx.sess.filesearch)\n }\n \n-fn default_native_lib_naming(sess: session::session, static: bool) ->\n-   {prefix: str, suffix: str} {\n-    if static { ret {prefix: \"lib\", suffix: \".rlib\"}; }\n-    alt sess.targ_cfg.os {\n-      session::os_win32 { ret {prefix: \"\", suffix: \".dll\"}; }\n-      session::os_macos { ret {prefix: \"lib\", suffix: \".dylib\"}; }\n-      session::os_linux { ret {prefix: \"lib\", suffix: \".so\"}; }\n-      session::os_freebsd { ret {prefix: \"lib\", suffix: \".so\"}; }\n+fn libname(cx: ctxt) -> {prefix: str, suffix: str} {\n+    if cx.static { ret {prefix: \"lib\", suffix: \".rlib\"}; }\n+    alt cx.os {\n+      os_win32 { ret {prefix: \"\", suffix: \".dll\"}; }\n+      os_macos { ret {prefix: \"lib\", suffix: \".dylib\"}; }\n+      os_linux { ret {prefix: \"lib\", suffix: \".so\"}; }\n+      os_freebsd { ret {prefix: \"lib\", suffix: \".so\"}; }\n     }\n }\n \n-fn find_library_crate_aux(sess: session::session,\n-                          span: span,\n+fn find_library_crate_aux(cx: ctxt,\n                           nn: {prefix: str, suffix: str},\n-                          metas: [@ast::meta_item],\n-                          hash: str,\n                           filesearch: filesearch::filesearch) ->\n    option<{ident: str, data: @[u8]}> {\n-    let crate_name = crate_name_from_metas(metas);\n+    let crate_name = crate_name_from_metas(cx.metas);\n     let prefix: str = nn.prefix + crate_name + \"-\";\n     let suffix: str = nn.suffix;\n \n@@ -76,9 +82,9 @@ fn find_library_crate_aux(sess: session::session,\n             option::none::<()>\n         } else {\n             #debug(\"%s is a candidate\", path);\n-            alt get_metadata_section(sess, path) {\n+            alt get_metadata_section(cx.os, path) {\n               option::some(cvec) {\n-                if !crate_matches(cvec, metas, hash) {\n+                if !crate_matches(cvec, cx.metas, cx.hash) {\n                     #debug(\"skipping %s, metadata doesn't match\", path);\n                     option::none::<()>\n                 } else {\n@@ -100,15 +106,15 @@ fn find_library_crate_aux(sess: session::session,\n     } else if matches.len() == 1u {\n         some(matches[0])\n     } else {\n-        sess.span_err(\n-            span, #fmt(\"multiple matching crates for `%s`\", crate_name));\n-        sess.note(\"candidates:\");\n+        cx.sess.span_err(\n+            cx.span, #fmt(\"multiple matching crates for `%s`\", crate_name));\n+        cx.sess.note(\"candidates:\");\n         for matches.each {|match|\n-            sess.note(#fmt(\"path: %s\", match.ident));\n+            cx.sess.note(#fmt(\"path: %s\", match.ident));\n             let attrs = decoder::get_crate_attributes(match.data);\n-            note_linkage_attrs(sess, attrs);\n+            note_linkage_attrs(cx.sess, attrs);\n         }\n-        sess.abort_if_errors();\n+        cx.sess.abort_if_errors();\n         none\n     }\n }\n@@ -166,7 +172,7 @@ fn metadata_matches(extern_metas: [@ast::meta_item],\n     ret true;\n }\n \n-fn get_metadata_section(sess: session::session,\n+fn get_metadata_section(os: os,\n                         filename: str) -> option<@[u8]> unsafe {\n     let mb = str::as_c_str(filename, {|buf|\n         llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(buf)\n@@ -180,7 +186,7 @@ fn get_metadata_section(sess: session::session,\n     while llvm::LLVMIsSectionIteratorAtEnd(of.llof, si.llsi) == False {\n         let name_buf = llvm::LLVMGetSectionName(si.llsi);\n         let name = unsafe { str::unsafe::from_c_str(name_buf) };\n-        if str::eq(name, sess.targ_cfg.target_strs.meta_sect_name) {\n+        if str::eq(name, meta_section_name(os)) {\n             let cbuf = llvm::LLVMGetSectionContents(si.llsi);\n             let csz = llvm::LLVMGetSectionSize(si.llsi) as uint;\n             unsafe {\n@@ -193,9 +199,18 @@ fn get_metadata_section(sess: session::session,\n     ret option::none::<@[u8]>;\n }\n \n+fn meta_section_name(os: os) -> str {\n+    alt os {\n+      os_macos { \"__DATA,__note.rustc\" }\n+      os_win32 { \".note.rustc\" }\n+      os_linux { \".note.rustc\" }\n+      os_freebsd { \".note.rustc\" }\n+    }\n+}\n+\n // A diagnostic function for dumping crate metadata to an output stream\n-fn list_file_metadata(sess: session::session, path: str, out: io::writer) {\n-    alt get_metadata_section(sess, path) {\n+fn list_file_metadata(os: os, path: str, out: io::writer) {\n+    alt get_metadata_section(os, path) {\n       option::some(bytes) { decoder::list_crate_metadata(bytes, out); }\n       option::none {\n         out.write_str(\"could not find metadata in \" + path + \".\\n\");"}]}