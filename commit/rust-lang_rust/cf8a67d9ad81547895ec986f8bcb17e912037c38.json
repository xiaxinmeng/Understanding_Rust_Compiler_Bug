{"sha": "cf8a67d9ad81547895ec986f8bcb17e912037c38", "node_id": "C_kwDOAAsO6NoAKGNmOGE2N2Q5YWQ4MTU0Nzg5NWVjOTg2ZjhiY2IxN2U5MTIwMzdjMzg", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2023-03-10T09:53:50Z"}, "committer": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2023-03-10T09:53:50Z"}, "message": "Merge commit '3c06e0b1ce003912f8fe0536d3a7fe22558e38cf' into clippyup", "tree": {"sha": "edc3b5da6b9b1cd68b680506a91ee7f59897a66a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edc3b5da6b9b1cd68b680506a91ee7f59897a66a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf8a67d9ad81547895ec986f8bcb17e912037c38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf8a67d9ad81547895ec986f8bcb17e912037c38", "html_url": "https://github.com/rust-lang/rust/commit/cf8a67d9ad81547895ec986f8bcb17e912037c38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf8a67d9ad81547895ec986f8bcb17e912037c38/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eceedd9c8b2d42695cf45d1c94e85819feba64bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/eceedd9c8b2d42695cf45d1c94e85819feba64bc", "html_url": "https://github.com/rust-lang/rust/commit/eceedd9c8b2d42695cf45d1c94e85819feba64bc"}], "stats": {"total": 3283, "additions": 2508, "deletions": 775}, "files": [{"sha": "0abe234fc8f7ed16571f99a72f0fa0b3230b73ed", "filename": "CHANGELOG.md", "status": "modified", "additions": 151, "deletions": 2, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -6,11 +6,156 @@ document.\n \n ## Unreleased / Beta / In Rust Nightly\n \n-[d822110d...master](https://github.com/rust-lang/rust-clippy/compare/d822110d...master)\n+[7f27e2e7...master](https://github.com/rust-lang/rust-clippy/compare/7f27e2e7...master)\n+\n+## Rust 1.68\n+\n+Current stable, released 2023-03-09\n+\n+[d822110d...7f27e2e7](https://github.com/rust-lang/rust-clippy/compare/d822110d...7f27e2e7)\n+\n+### New Lints\n+\n+* [`permissions_set_readonly_false`]\n+  [#10063](https://github.com/rust-lang/rust-clippy/pull/10063)\n+* [`almost_complete_range`]\n+  [#10043](https://github.com/rust-lang/rust-clippy/pull/10043)\n+* [`size_of_ref`]\n+  [#10098](https://github.com/rust-lang/rust-clippy/pull/10098)\n+* [`semicolon_outside_block`]\n+  [#9826](https://github.com/rust-lang/rust-clippy/pull/9826)\n+* [`semicolon_inside_block`]\n+  [#9826](https://github.com/rust-lang/rust-clippy/pull/9826)\n+* [`transmute_null_to_fn`]\n+  [#10099](https://github.com/rust-lang/rust-clippy/pull/10099)\n+* [`fn_null_check`]\n+  [#10099](https://github.com/rust-lang/rust-clippy/pull/10099)\n+\n+### Moves and Deprecations\n+\n+* Moved [`manual_clamp`] to `nursery` (Now allow-by-default)\n+  [#10101](https://github.com/rust-lang/rust-clippy/pull/10101)\n+* Moved [`mutex_atomic`] to `restriction`\n+  [#10115](https://github.com/rust-lang/rust-clippy/pull/10115)\n+* Renamed `derive_hash_xor_eq` to [`derived_hash_with_manual_eq`]\n+  [#10184](https://github.com/rust-lang/rust-clippy/pull/10184)\n+\n+### Enhancements\n+\n+* [`collapsible_str_replace`]: Now takes MSRV into consideration. The minimal version is 1.58\n+  [#10047](https://github.com/rust-lang/rust-clippy/pull/10047)\n+* [`unused_self`]: No longer lints, if the method body contains a `todo!()` call\n+  [#10166](https://github.com/rust-lang/rust-clippy/pull/10166)\n+* [`derivable_impls`]: Now suggests deriving `Default` for enums with default unit variants\n+  [#10161](https://github.com/rust-lang/rust-clippy/pull/10161)\n+* [`arithmetic_side_effects`]: Added two new config values\n+  `arithmetic-side-effects-allowed-binary` and `arithmetic-side-effects-allowed-unary`\n+  to allow operation on user types\n+  [#9840](https://github.com/rust-lang/rust-clippy/pull/9840)\n+* [`large_const_arrays`], [`large_stack_arrays`]: avoid integer overflow when calculating\n+  total array size\n+  [#10103](https://github.com/rust-lang/rust-clippy/pull/10103)\n+* [`indexing_slicing`]: add new config `suppress-restriction-lint-in-const` to enable\n+  restriction lints, even if the suggestion might not be applicable\n+  [#9920](https://github.com/rust-lang/rust-clippy/pull/9920)\n+* [`needless_borrow`], [`redundant_clone`]: Now track references better and detect more cases\n+  [#9701](https://github.com/rust-lang/rust-clippy/pull/9701)\n+* [`derived_hash_with_manual_eq`]: Now allows `#[derive(PartialEq)]` with custom `Hash`\n+  implementations\n+  [#10184](https://github.com/rust-lang/rust-clippy/pull/10184)\n+* [`manual_is_ascii_check`]: Now detects ranges with `.contains()` calls\n+  [#10053](https://github.com/rust-lang/rust-clippy/pull/10053)\n+* [`transmuting_null`]: Now detects `const` pointers to all types\n+  [#10099](https://github.com/rust-lang/rust-clippy/pull/10099)\n+* [`needless_return`]: Now detects more cases for returns of owned values\n+  [#10110](https://github.com/rust-lang/rust-clippy/pull/10110)\n+\n+### False Positive Fixes\n+\n+* [`field_reassign_with_default`]: No longer lints cases, where values are initializes from\n+  closures capturing struct values\n+  [#10143](https://github.com/rust-lang/rust-clippy/pull/10143)\n+* [`seek_to_start_instead_of_rewind`]: No longer lints, if the return of `seek` is used.\n+  [#10096](https://github.com/rust-lang/rust-clippy/pull/10096)\n+* [`manual_filter`]: Now ignores if expressions where the else branch has side effects or\n+  doesn't return `None`\n+  [#10091](https://github.com/rust-lang/rust-clippy/pull/10091)\n+* [`implicit_clone`]: No longer lints if the type doesn't implement clone\n+  [#10022](https://github.com/rust-lang/rust-clippy/pull/10022)\n+* [`match_wildcard_for_single_variants`]: No longer lints on wildcards with a guard\n+  [#10056](https://github.com/rust-lang/rust-clippy/pull/10056)\n+* [`drop_ref`]: No longer lints idiomatic expression in `match` arms\n+  [#10142](https://github.com/rust-lang/rust-clippy/pull/10142)\n+* [`arithmetic_side_effects`]: No longer lints on corner cases with negative number literals\n+  [#9867](https://github.com/rust-lang/rust-clippy/pull/9867)\n+* [`string_lit_as_bytes`]: No longer lints in scrutinies of `match` statements\n+  [#10012](https://github.com/rust-lang/rust-clippy/pull/10012)\n+* [`manual_assert`]: No longer lints in `else if` statements\n+  [#10013](https://github.com/rust-lang/rust-clippy/pull/10013)\n+* [`needless_return`]: don't lint when using `do yeet`\n+  [#10109](https://github.com/rust-lang/rust-clippy/pull/10109)\n+* All lints: No longer lint in enum discriminant values when the suggestion won't work in a\n+  const context\n+  [#10008](https://github.com/rust-lang/rust-clippy/pull/10008)\n+* [`single_element_loop`]: No longer lints, if the loop contains a `break` or `continue`\n+  [#10162](https://github.com/rust-lang/rust-clippy/pull/10162)\n+* [`uninlined_format_args`]: No longer suggests inlining arguments in `assert!` and\n+  `debug_assert!` macros before 2021 edition\n+  [#10055](https://github.com/rust-lang/rust-clippy/pull/10055)\n+* [`explicit_counter_loop`]: No longer ignores counter changes after `continue` expressions\n+  [#10094](https://github.com/rust-lang/rust-clippy/pull/10094)\n+* [`from_over_into`]: No longer lints on opaque types\n+  [#9982](https://github.com/rust-lang/rust-clippy/pull/9982)\n+* [`expl_impl_clone_on_copy`]: No longer lints on `#[repr(packed)]` structs with generic\n+  parameters\n+  [#10189](https://github.com/rust-lang/rust-clippy/pull/10189)\n+\n+### Suggestion Fixes/Improvements\n+\n+* [`zero_ptr`]: Now suggests `core::` paths for `no_std` crates\n+  [#10023](https://github.com/rust-lang/rust-clippy/pull/10023)\n+* [`useless_conversion`]: Now suggests removing calls to `into_iter()` on an expression\n+  implementing `Iterator`\n+  [#10020](https://github.com/rust-lang/rust-clippy/pull/10020)\n+* [`box_default`]: The suggestion now uses short paths\n+  [#10153](https://github.com/rust-lang/rust-clippy/pull/10153)\n+* [`default_trait_access`], [`clone_on_copy`]: The suggestion now uses short paths\n+  [#10160](https://github.com/rust-lang/rust-clippy/pull/10160)\n+* [`comparison_to_empty`]: The suggestion now removes unused deref operations\n+  [#9962](https://github.com/rust-lang/rust-clippy/pull/9962)\n+* [`manual_let_else`]: Suggestions for or-patterns now include required brackets.\n+  [#9966](https://github.com/rust-lang/rust-clippy/pull/9966)\n+* [`match_single_binding`]: suggestion no longer introduces unneeded semicolons\n+  [#10060](https://github.com/rust-lang/rust-clippy/pull/10060)\n+* [`case_sensitive_file_extension_comparisons`]: Now displays a suggestion with `Path`\n+  [#10107](https://github.com/rust-lang/rust-clippy/pull/10107)\n+* [`empty_structs_with_brackets`]: The suggestion is no longer machine applicable, to avoid\n+  errors when accessing struct fields\n+  [#10141](https://github.com/rust-lang/rust-clippy/pull/10141)\n+* [`identity_op`]: Removes borrows in the suggestion when needed\n+  [#10004](https://github.com/rust-lang/rust-clippy/pull/10004)\n+* [`suboptimal_flops`]: The suggestion now includes parentheses when required\n+  [#10113](https://github.com/rust-lang/rust-clippy/pull/10113)\n+* [`iter_kv_map`]: Now handles `mut` and reference annotations in the suggestion\n+  [#10159](https://github.com/rust-lang/rust-clippy/pull/10159)\n+* [`redundant_static_lifetimes`]: The suggestion no longer removes `mut` from references\n+  [#10006](https://github.com/rust-lang/rust-clippy/pull/10006)\n+\n+### ICE Fixes\n+\n+* [`new_ret_no_self`]: Now avoids a stack overflow for `impl Trait` types\n+  [#10086](https://github.com/rust-lang/rust-clippy/pull/10086)\n+* [`unnecessary_to_owned`]: Now handles compiler generated notes better\n+  [#10027](https://github.com/rust-lang/rust-clippy/pull/10027)\n+\n+### Others\n+\n+* `SYSROOT` and `--sysroot` can now be set at the same time\n+  [#10149](https://github.com/rust-lang/rust-clippy/pull/10149)\n \n ## Rust 1.67\n \n-Current stable, released 2023-01-26\n+Released 2023-01-26\n \n [4f142aa1...d822110d](https://github.com/rust-lang/rust-clippy/compare/4f142aa1...d822110d)\n \n@@ -4307,6 +4452,7 @@ Released 2018-09-13\n [`collapsible_if`]: https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\n [`collapsible_match`]: https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_match\n [`collapsible_str_replace`]: https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_str_replace\n+[`collection_is_never_read`]: https://rust-lang.github.io/rust-clippy/master/index.html#collection_is_never_read\n [`comparison_chain`]: https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain\n [`comparison_to_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#comparison_to_empty\n [`const_static_lifetime`]: https://rust-lang.github.io/rust-clippy/master/index.html#const_static_lifetime\n@@ -4497,6 +4643,7 @@ Released 2018-09-13\n [`let_underscore_must_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_must_use\n [`let_underscore_untyped`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_untyped\n [`let_unit_value`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_unit_value\n+[`let_with_type_underscore`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_with_type_underscore\n [`linkedlist`]: https://rust-lang.github.io/rust-clippy/master/index.html#linkedlist\n [`logic_bug`]: https://rust-lang.github.io/rust-clippy/master/index.html#logic_bug\n [`lossy_float_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#lossy_float_literal\n@@ -4560,6 +4707,7 @@ Released 2018-09-13\n [`mismatching_type_param_order`]: https://rust-lang.github.io/rust-clippy/master/index.html#mismatching_type_param_order\n [`misnamed_getters`]: https://rust-lang.github.io/rust-clippy/master/index.html#misnamed_getters\n [`misrefactored_assign_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#misrefactored_assign_op\n+[`missing_assert_message`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_assert_message\n [`missing_const_for_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn\n [`missing_docs_in_private_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\n [`missing_enforced_import_renames`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_enforced_import_renames\n@@ -4689,6 +4837,7 @@ Released 2018-09-13\n [`read_zero_byte_vec`]: https://rust-lang.github.io/rust-clippy/master/index.html#read_zero_byte_vec\n [`recursive_format_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#recursive_format_impl\n [`redundant_allocation`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_allocation\n+[`redundant_async_block`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_async_block\n [`redundant_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone\n [`redundant_closure`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n [`redundant_closure_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_call"}, {"sha": "c35dfcbd8c445026a4c144ff7bc8649db9e0085f", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.1.69\"\n+version = \"0.1.70\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "ea4978011b19c16fb6135e1a3641f9808c2e88f2", "filename": "book/src/development/proposals/syntax-tree-patterns.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/book%2Fsrc%2Fdevelopment%2Fproposals%2Fsyntax-tree-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/book%2Fsrc%2Fdevelopment%2Fproposals%2Fsyntax-tree-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fproposals%2Fsyntax-tree-patterns.md?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -68,13 +68,13 @@ The second part of the motivation is clippy's dependence on unstable\n compiler-internal data structures. Clippy lints are currently written against\n the compiler's AST / HIR which means that even small changes in these data\n structures might break a lot of lints. The second goal of this RFC is to **make\n-lints independant of the compiler's AST / HIR data structures**.\n+lints independent of the compiler's AST / HIR data structures**.\n \n # Approach\n \n A lot of complexity in writing lints currently seems to come from having to\n manually implement the matching logic (see code samples above). It's an\n-imparative style that describes *how* to match a syntax tree node instead of\n+imperative style that describes *how* to match a syntax tree node instead of\n specifying *what* should be matched against declaratively. In other areas, it's\n common to use declarative patterns to describe desired information and let the\n implementation do the actual matching. A well-known example of this approach are\n@@ -270,7 +270,7 @@ pattern!{\n     // matches if expressions that **may or may not** have an else block\n     // Attn: `If(_, _, _)` matches only ifs that **have** an else block\n     //\n-    //              | if with else block | if witout else block\n+    //              | if with else block | if without else block\n     // If(_, _, _)  |       match        |       no match\n     // If(_, _, _?) |       match        |        match\n     // If(_, _, ()) |      no match      |        match\n@@ -568,7 +568,7 @@ another example, `Array( Lit(_)* )` is a valid pattern because the parameter of\n \n ## The IsMatch Trait\n \n-The pattern syntax and the *PatternTree* are independant of specific syntax tree\n+The pattern syntax and the *PatternTree* are independent of specific syntax tree\n implementations (rust ast / hir, syn, ...). When looking at the different\n pattern examples in the previous sections, it can be seen that the patterns\n don't contain any information specific to a certain syntax tree implementation.\n@@ -717,7 +717,7 @@ if false {\n #### Problems\n \n Extending Rust syntax (which is quite complex by itself) with additional syntax\n-needed for specifying patterns (alternations, sequences, repetisions, named\n+needed for specifying patterns (alternations, sequences, repetitions, named\n submatches, ...) might become difficult to read and really hard to parse\n properly.\n \n@@ -858,7 +858,7 @@ would be evaluated as soon as the `Block(_)#then` was matched.\n Another idea in this area would be to introduce a syntax for backreferences.\n They could be used to require that multiple parts of a pattern should match the\n same value. For example, the `assign_op_pattern` lint that searches for `a = a\n-op b` and recommends changing it to `a op= b` requires that both occurrances of\n+op b` and recommends changing it to `a op= b` requires that both occurrences of\n `a` are the same. Using `=#...` as syntax for backreferences, the lint could be\n implemented like this:\n \n@@ -882,7 +882,7 @@ least two return statements\" could be a practical addition.\n For patterns like \"a literal that is not a boolean literal\" one currently needs\n to list all alternatives except the boolean case. Introducing a negation\n operator that allows to write `Lit(!Bool(_))` might be a good idea. This pattern\n-would be eqivalent to `Lit( Char(_) | Int(_) )` (given that currently only three\n+would be equivalent to `Lit( Char(_) | Int(_) )` (given that currently only three\n literal types are implemented).\n \n #### Functional composition"}, {"sha": "0b3846c13163dd5e2dd136db04849c2565badda0", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_lints\"\n-version = \"0.1.69\"\n+version = \"0.1.70\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "32d80f42e7e0705cad8f6762050cda3240586cb1", "filename": "clippy_lints/src/almost_complete_range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Falmost_complete_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Falmost_complete_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Falmost_complete_range.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -24,7 +24,7 @@ declare_clippy_lint! {\n     /// ```rust\n     /// let _ = 'a'..='z';\n     /// ```\n-    #[clippy::version = \"1.63.0\"]\n+    #[clippy::version = \"1.68.0\"]\n     pub ALMOST_COMPLETE_RANGE,\n     suspicious,\n     \"almost complete range\""}, {"sha": "1233c632a7948b6f2487548fbbe6b675c0a48d56", "filename": "clippy_lints/src/casts/cast_slice_from_raw_parts.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_from_raw_parts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_from_raw_parts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_from_raw_parts.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::msrvs::{self, Msrv};\n-use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::source::snippet_with_context;\n use clippy_utils::{match_def_path, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -34,15 +34,17 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n         if let ExprKind::Path(ref qpath) = fun.kind;\n         if let Some(fun_def_id) = cx.qpath_res(qpath, fun.hir_id).opt_def_id();\n         if let Some(rpk) = raw_parts_kind(cx, fun_def_id);\n+        let ctxt = expr.span.ctxt();\n+        if cast_expr.span.ctxt() == ctxt;\n         then {\n             let func = match rpk {\n                 RawPartsKind::Immutable => \"from_raw_parts\",\n                 RawPartsKind::Mutable => \"from_raw_parts_mut\"\n             };\n             let span = expr.span;\n             let mut applicability = Applicability::MachineApplicable;\n-            let ptr = snippet_with_applicability(cx, ptr_arg.span, \"ptr\", &mut applicability);\n-            let len = snippet_with_applicability(cx, len_arg.span, \"len\", &mut applicability);\n+            let ptr = snippet_with_context(cx, ptr_arg.span, ctxt, \"ptr\", &mut applicability).0;\n+            let len = snippet_with_context(cx, len_arg.span, ctxt, \"len\", &mut applicability).0;\n             span_lint_and_sugg(\n                 cx,\n                 CAST_SLICE_FROM_RAW_PARTS,"}, {"sha": "10f2bef268a24b2159f887a794dca9669d06a2d2", "filename": "clippy_lints/src/collection_is_never_read.rs", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fcollection_is_never_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fcollection_is_never_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollection_is_never_read.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -0,0 +1,122 @@\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::visitors::for_each_expr_with_closures;\n+use clippy_utils::{get_enclosing_block, get_parent_node, path_to_local_id};\n+use core::ops::ControlFlow;\n+use rustc_hir::{Block, ExprKind, HirId, Local, Node, PatKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::sym;\n+use rustc_span::Symbol;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for collections that are never queried.\n+    ///\n+    /// ### Why is this bad?\n+    /// Putting effort into constructing a collection but then never querying it might indicate that\n+    /// the author forgot to do whatever they intended to do with the collection. Example: Clone\n+    /// a vector, sort it for iteration, but then mistakenly iterate the original vector\n+    /// instead.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # let samples = vec![3, 1, 2];\n+    /// let mut sorted_samples = samples.clone();\n+    /// sorted_samples.sort();\n+    /// for sample in &samples { // Oops, meant to use `sorted_samples`.\n+    ///     println!(\"{sample}\");\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # let samples = vec![3, 1, 2];\n+    /// let mut sorted_samples = samples.clone();\n+    /// sorted_samples.sort();\n+    /// for sample in &sorted_samples {\n+    ///     println!(\"{sample}\");\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.69.0\"]\n+    pub COLLECTION_IS_NEVER_READ,\n+    nursery,\n+    \"a collection is never queried\"\n+}\n+declare_lint_pass!(CollectionIsNeverRead => [COLLECTION_IS_NEVER_READ]);\n+\n+static COLLECTIONS: [Symbol; 10] = [\n+    sym::BTreeMap,\n+    sym::BTreeSet,\n+    sym::BinaryHeap,\n+    sym::HashMap,\n+    sym::HashSet,\n+    sym::LinkedList,\n+    sym::Option,\n+    sym::String,\n+    sym::Vec,\n+    sym::VecDeque,\n+];\n+\n+impl<'tcx> LateLintPass<'tcx> for CollectionIsNeverRead {\n+    fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'tcx>) {\n+        // Look for local variables whose type is a container. Search surrounding bock for read access.\n+        let ty = cx.typeck_results().pat_ty(local.pat);\n+        if COLLECTIONS.iter().any(|&sym| is_type_diagnostic_item(cx, ty, sym))\n+            && let PatKind::Binding(_, local_id, _, _) = local.pat.kind\n+            && let Some(enclosing_block) = get_enclosing_block(cx, local.hir_id)\n+            && has_no_read_access(cx, local_id, enclosing_block)\n+        {\n+            span_lint(cx, COLLECTION_IS_NEVER_READ, local.span, \"collection is never read\");\n+        }\n+    }\n+}\n+\n+fn has_no_read_access<'tcx>(cx: &LateContext<'tcx>, id: HirId, block: &'tcx Block<'tcx>) -> bool {\n+    let mut has_access = false;\n+    let mut has_read_access = false;\n+\n+    // Inspect all expressions and sub-expressions in the block.\n+    for_each_expr_with_closures(cx, block, |expr| {\n+        // Ignore expressions that are not simply `id`.\n+        if !path_to_local_id(expr, id) {\n+            return ControlFlow::Continue(());\n+        }\n+\n+        // `id` is being accessed. Investigate if it's a read access.\n+        has_access = true;\n+\n+        // `id` appearing in the left-hand side of an assignment is not a read access:\n+        //\n+        // id = ...; // Not reading `id`.\n+        if let Some(Node::Expr(parent)) = get_parent_node(cx.tcx, expr.hir_id)\n+            && let ExprKind::Assign(lhs, ..) = parent.kind\n+            && path_to_local_id(lhs, id)\n+        {\n+            return ControlFlow::Continue(());\n+        }\n+\n+        // Method call on `id` in a statement ignores any return value, so it's not a read access:\n+        //\n+        // id.foo(...); // Not reading `id`.\n+        //\n+        // Only assuming this for \"official\" methods defined on the type. For methods defined in extension\n+        // traits (identified as local, based on the orphan rule), pessimistically assume that they might\n+        // have side effects, so consider them a read.\n+        if let Some(Node::Expr(parent)) = get_parent_node(cx.tcx, expr.hir_id)\n+            && let ExprKind::MethodCall(_, receiver, _, _) = parent.kind\n+            && path_to_local_id(receiver, id)\n+            && let Some(Node::Stmt(..)) = get_parent_node(cx.tcx, parent.hir_id)\n+            && let Some(method_def_id) = cx.typeck_results().type_dependent_def_id(parent.hir_id)\n+            && !method_def_id.is_local()\n+        {\n+            return ControlFlow::Continue(());\n+        }\n+\n+        // Any other access to `id` is a read access. Stop searching.\n+        has_read_access = true;\n+        ControlFlow::Break(())\n+    });\n+\n+    // Ignore collections that have no access at all. Other lints should catch them.\n+    has_access && !has_read_access\n+}"}, {"sha": "cc6024b87cdaea02572bc279dd7b057a98e0e9d3", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -92,6 +92,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::cognitive_complexity::COGNITIVE_COMPLEXITY_INFO,\n     crate::collapsible_if::COLLAPSIBLE_ELSE_IF_INFO,\n     crate::collapsible_if::COLLAPSIBLE_IF_INFO,\n+    crate::collection_is_never_read::COLLECTION_IS_NEVER_READ_INFO,\n     crate::comparison_chain::COMPARISON_CHAIN_INFO,\n     crate::copies::BRANCHES_SHARING_CODE_INFO,\n     crate::copies::IFS_SAME_COND_INFO,\n@@ -226,6 +227,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::let_underscore::LET_UNDERSCORE_LOCK_INFO,\n     crate::let_underscore::LET_UNDERSCORE_MUST_USE_INFO,\n     crate::let_underscore::LET_UNDERSCORE_UNTYPED_INFO,\n+    crate::let_with_type_underscore::LET_WITH_TYPE_UNDERSCORE_INFO,\n     crate::lifetimes::EXTRA_UNUSED_LIFETIMES_INFO,\n     crate::lifetimes::NEEDLESS_LIFETIMES_INFO,\n     crate::literal_representation::DECIMAL_LITERAL_REPRESENTATION_INFO,\n@@ -416,6 +418,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::misc_early::UNSEPARATED_LITERAL_SUFFIX_INFO,\n     crate::misc_early::ZERO_PREFIXED_LITERAL_INFO,\n     crate::mismatching_type_param_order::MISMATCHING_TYPE_PARAM_ORDER_INFO,\n+    crate::missing_assert_message::MISSING_ASSERT_MESSAGE_INFO,\n     crate::missing_const_for_fn::MISSING_CONST_FOR_FN_INFO,\n     crate::missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS_INFO,\n     crate::missing_enforced_import_rename::MISSING_ENFORCED_IMPORT_RENAMES_INFO,\n@@ -517,6 +520,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::ranges::REVERSED_EMPTY_RANGES_INFO,\n     crate::rc_clone_in_vec_init::RC_CLONE_IN_VEC_INIT_INFO,\n     crate::read_zero_byte_vec::READ_ZERO_BYTE_VEC_INFO,\n+    crate::redundant_async_block::REDUNDANT_ASYNC_BLOCK_INFO,\n     crate::redundant_clone::REDUNDANT_CLONE_INFO,\n     crate::redundant_closure_call::REDUNDANT_CLOSURE_CALL_INFO,\n     crate::redundant_else::REDUNDANT_ELSE_INFO,"}, {"sha": "f296b80d283d8025c52cd1ad6b053862a138f34d", "filename": "clippy_lints/src/default_instead_of_iter_empty.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fdefault_instead_of_iter_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fdefault_instead_of_iter_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_instead_of_iter_empty.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,11 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::last_path_segment;\n-use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::source::snippet_with_context;\n use clippy_utils::{match_def_path, paths};\n use rustc_errors::Applicability;\n use rustc_hir::{def, Expr, ExprKind, GenericArg, QPath, TyKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::SyntaxContext;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -38,9 +39,11 @@ impl<'tcx> LateLintPass<'tcx> for DefaultIterEmpty {\n             && let QPath::Resolved(None, path) = ty_path\n             && let def::Res::Def(_, def_id) = &path.res\n             && match_def_path(cx, *def_id, &paths::ITER_EMPTY)\n+            && let ctxt = expr.span.ctxt()\n+            && ty.span.ctxt() == ctxt\n         {\n             let mut applicability = Applicability::MachineApplicable;\n-            let sugg = make_sugg(cx, ty_path, &mut applicability);\n+            let sugg = make_sugg(cx, ty_path, ctxt, &mut applicability);\n             span_lint_and_sugg(\n                 cx,\n                 DEFAULT_INSTEAD_OF_ITER_EMPTY,\n@@ -54,14 +57,19 @@ impl<'tcx> LateLintPass<'tcx> for DefaultIterEmpty {\n     }\n }\n \n-fn make_sugg(cx: &LateContext<'_>, ty_path: &rustc_hir::QPath<'_>, applicability: &mut Applicability) -> String {\n+fn make_sugg(\n+    cx: &LateContext<'_>,\n+    ty_path: &rustc_hir::QPath<'_>,\n+    ctxt: SyntaxContext,\n+    applicability: &mut Applicability,\n+) -> String {\n     if let Some(last) = last_path_segment(ty_path).args\n         && let Some(iter_ty) = last.args.iter().find_map(|arg| match arg {\n             GenericArg::Type(ty) => Some(ty),\n             _ => None,\n         })\n     {\n-        format!(\"std::iter::empty::<{}>()\", snippet_with_applicability(cx, iter_ty.span, \"..\", applicability))\n+        format!(\"std::iter::empty::<{}>()\", snippet_with_context(cx, iter_ty.span, ctxt, \"..\", applicability).0)\n     } else {\n         \"std::iter::empty()\".to_owned()\n     }"}, {"sha": "7f3f26bed7c7d6d3696a95b5ffa6857e8daaa81c", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1357,10 +1357,10 @@ fn replace_types<'tcx>(\n                     && let Some(term_ty) = projection_predicate.term.ty()\n                     && let ty::Param(term_param_ty) = term_ty.kind()\n                 {\n-                    let item_def_id = projection_predicate.projection_ty.def_id;\n-                    let assoc_item = cx.tcx.associated_item(item_def_id);\n-                    let projection = cx.tcx\n-                        .mk_projection(assoc_item.def_id, cx.tcx.mk_substs_trait(new_ty, []));\n+                    let projection = cx.tcx.mk_ty_from_kind(ty::Alias(\n+                        ty::Projection,\n+                        projection_predicate.projection_ty.with_self_ty(cx.tcx, new_ty),\n+                    ));\n \n                     if let Ok(projected_ty) = cx.tcx.try_normalize_erasing_regions(cx.param_env, projection)\n                         && substs[term_param_ty.index as usize] != ty::GenericArg::from(projected_ty)"}, {"sha": "8a5a28c6b3d83d0c8d3e7795dd115e2b7b4c2670", "filename": "clippy_lints/src/derivable_impls.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderivable_impls.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::{\n     Body, Expr, ExprKind, GenericArg, Impl, ImplItemKind, Item, ItemKind, Node, PathSegment, QPath, Ty, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::AdtDef;\n+use rustc_middle::ty::{Adt, AdtDef, SubstsRef};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::sym;\n \n@@ -81,13 +81,18 @@ fn check_struct<'tcx>(\n     self_ty: &Ty<'_>,\n     func_expr: &Expr<'_>,\n     adt_def: AdtDef<'_>,\n+    substs: SubstsRef<'_>,\n ) {\n     if let TyKind::Path(QPath::Resolved(_, p)) = self_ty.kind {\n-        if let Some(PathSegment { args: Some(a), .. }) = p.segments.last() {\n-            for arg in a.args {\n-                if !matches!(arg, GenericArg::Lifetime(_)) {\n-                    return;\n-                }\n+        if let Some(PathSegment { args, .. }) = p.segments.last() {\n+            let args = args.map(|a| a.args).unwrap_or(&[]);\n+\n+            // substs contains the generic parameters of the type declaration, while args contains the arguments\n+            // used at instantiation time. If both len are not equal, it means that some parameters were not\n+            // provided (which means that the default values were used); in this case we will not risk\n+            // suggesting too broad a rewrite. We won't either if any argument is a type or a const.\n+            if substs.len() != args.len() || args.iter().any(|arg| !matches!(arg, GenericArg::Lifetime(_))) {\n+                return;\n             }\n         }\n     }\n@@ -184,15 +189,15 @@ impl<'tcx> LateLintPass<'tcx> for DerivableImpls {\n             if let Some(Node::ImplItem(impl_item)) = cx.tcx.hir().find(impl_item_hir);\n             if let ImplItemKind::Fn(_, b) = &impl_item.kind;\n             if let Body { value: func_expr, .. } = cx.tcx.hir().body(*b);\n-            if let Some(adt_def) = cx.tcx.type_of(item.owner_id).subst_identity().ty_adt_def();\n+            if let &Adt(adt_def, substs) = cx.tcx.type_of(item.owner_id).subst_identity().kind();\n             if let attrs = cx.tcx.hir().attrs(item.hir_id());\n             if !attrs.iter().any(|attr| attr.doc_str().is_some());\n             if let child_attrs = cx.tcx.hir().attrs(impl_item_hir);\n             if !child_attrs.iter().any(|attr| attr.doc_str().is_some());\n \n             then {\n                 if adt_def.is_struct() {\n-                    check_struct(cx, item, self_ty, func_expr, adt_def);\n+                    check_struct(cx, item, self_ty, func_expr, adt_def, substs);\n                 } else if adt_def.is_enum() && self.msrv.meets(msrvs::DEFAULT_ENUM_ATTRIBUTE) {\n                     check_enum(cx, item, func_expr, adt_def);\n                 }"}, {"sha": "8ba6a9e48763fe4fc240fed334ee76c7c203ac39", "filename": "clippy_lints/src/exit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fexit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fexit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexit.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -11,7 +11,7 @@ declare_clippy_lint! {\n     ///\n     /// ### Why is this bad?\n     /// Exit terminates the program at the location it is called. For unrecoverable\n-    /// errors `panics` should be used to provide a stacktrace and potentualy other\n+    /// errors `panics` should be used to provide a stacktrace and potentially other\n     /// information. A normal termination or one with an error code should happen in\n     /// the main function.\n     ///"}, {"sha": "d8f4a5fe221bfd28dfff089d32b999ddee676d75", "filename": "clippy_lints/src/fn_null_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Ffn_null_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Ffn_null_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffn_null_check.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -25,7 +25,7 @@ declare_clippy_lint! {\n     ///\n     /// if fn_ptr.is_none() { ... }\n     /// ```\n-    #[clippy::version = \"1.67.0\"]\n+    #[clippy::version = \"1.68.0\"]\n     pub FN_NULL_CHECK,\n     correctness,\n     \"`fn()` type assumed to be nullable\""}, {"sha": "8040938c6263ed64b7606b1eed9fff682cfdcd73", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::macros::{root_macro_call_first_node, FormatArgsExpn};\n-use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::source::snippet_with_context;\n use clippy_utils::sugg::Sugg;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -84,9 +84,9 @@ impl<'tcx> LateLintPass<'tcx> for UselessFormat {\n                         _ => false,\n                     };\n                     let sugg = if is_new_string {\n-                        snippet_with_applicability(cx, value.span, \"..\", &mut applicability).into_owned()\n+                        snippet_with_context(cx, value.span, call_site.ctxt(), \"..\", &mut applicability).0.into_owned()\n                     } else {\n-                        let sugg = Sugg::hir_with_applicability(cx, value, \"<arg>\", &mut applicability);\n+                        let sugg = Sugg::hir_with_context(cx, value, call_site.ctxt(), \"<arg>\", &mut applicability);\n                         format!(\"{}.to_string()\", sugg.maybe_par())\n                     };\n                     span_useless_format(cx, call_site, sugg, applicability);"}, {"sha": "d3d0d91c1be73062e594e7048f3cca12edb9e3ab", "filename": "clippy_lints/src/functions/impl_trait_in_params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Ffunctions%2Fimpl_trait_in_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Ffunctions%2Fimpl_trait_in_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fimpl_trait_in_params.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -22,7 +22,7 @@ pub(super) fn check_fn<'tcx>(cx: &LateContext<'_>, kind: &'tcx FnKind<'_>, body:\n                             if let Some(gen_span) = generics.span_for_param_suggestion() {\n                                 diag.span_suggestion_with_style(\n                                     gen_span,\n-                                    \"add a type paremeter\",\n+                                    \"add a type parameter\",\n                                     format!(\", {{ /* Generic name */ }}: {}\", &param.name.ident().as_str()[5..]),\n                                     rustc_errors::Applicability::HasPlaceholders,\n                                     rustc_errors::SuggestionStyle::ShowAlways,\n@@ -35,7 +35,7 @@ pub(super) fn check_fn<'tcx>(cx: &LateContext<'_>, kind: &'tcx FnKind<'_>, body:\n                                         ident.span.ctxt(),\n                                         ident.span.parent(),\n                                     ),\n-                                    \"add a type paremeter\",\n+                                    \"add a type parameter\",\n                                     format!(\"<{{ /* Generic name */ }}: {}>\", &param.name.ident().as_str()[5..]),\n                                     rustc_errors::Applicability::HasPlaceholders,\n                                     rustc_errors::SuggestionStyle::ShowAlways,"}, {"sha": "e5945939e60b96e8d3a6e0e241000a5bca8a629e", "filename": "clippy_lints/src/functions/misnamed_getters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -97,7 +97,7 @@ pub fn check_fn(cx: &LateContext<'_>, kind: FnKind<'_>, decl: &FnDecl<'_>, body:\n \n     let Some(correct_field) = correct_field else {\n         // There is no field corresponding to the getter name.\n-        // FIXME: This can be a false positive if the correct field is reachable trought deeper autodereferences than used_field is\n+        // FIXME: This can be a false positive if the correct field is reachable through deeper autodereferences than used_field is\n         return;\n     };\n "}, {"sha": "7c5e44bb7dcade76d9a0ee0441f6a3e158f862ad", "filename": "clippy_lints/src/functions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -185,7 +185,7 @@ declare_clippy_lint! {\n     /// ### Examples\n     /// ```rust\n     /// // this could be annotated with `#[must_use]`.\n-    /// fn id<T>(t: T) -> T { t }\n+    /// pub fn id<T>(t: T) -> T { t }\n     /// ```\n     #[clippy::version = \"1.40.0\"]\n     pub MUST_USE_CANDIDATE,"}, {"sha": "57e6caa8711165e32d5c3c43e0177af54a918678", "filename": "clippy_lints/src/implicit_saturating_add.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fimplicit_saturating_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fimplicit_saturating_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_saturating_add.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::get_parent_expr;\n-use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::source::snippet_with_context;\n use if_chain::if_chain;\n use rustc_ast::ast::{LitIntType, LitKind};\n use rustc_errors::Applicability;\n@@ -55,15 +55,25 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingAdd {\n             if let ExprKind::AssignOp(op1, target, value) = ex.kind;\n             let ty = cx.typeck_results().expr_ty(target);\n             if Some(c) == get_int_max(ty);\n+            let ctxt = expr.span.ctxt();\n+            if ex.span.ctxt() == ctxt;\n+            if expr1.span.ctxt() == ctxt;\n             if clippy_utils::SpanlessEq::new(cx).eq_expr(l, target);\n             if BinOpKind::Add == op1.node;\n             if let ExprKind::Lit(ref lit) = value.kind;\n             if let LitKind::Int(1, LitIntType::Unsuffixed) = lit.node;\n             if block.expr.is_none();\n             then {\n                 let mut app = Applicability::MachineApplicable;\n-                let code = snippet_with_applicability(cx, target.span, \"_\", &mut app);\n-                let sugg = if let Some(parent) = get_parent_expr(cx, expr) && let ExprKind::If(_cond, _then, Some(else_)) = parent.kind && else_.hir_id == expr.hir_id {format!(\"{{{code} = {code}.saturating_add(1); }}\")} else {format!(\"{code} = {code}.saturating_add(1);\")};\n+                let code = snippet_with_context(cx, target.span, ctxt, \"_\", &mut app).0;\n+                let sugg = if let Some(parent) = get_parent_expr(cx, expr)\n+                    && let ExprKind::If(_cond, _then, Some(else_)) = parent.kind\n+                    && else_.hir_id == expr.hir_id\n+                {\n+                    format!(\"{{{code} = {code}.saturating_add(1); }}\")\n+                } else {\n+                    format!(\"{code} = {code}.saturating_add(1);\")\n+                };\n                 span_lint_and_sugg(cx, IMPLICIT_SATURATING_ADD, expr.span, \"manual saturating add detected\", \"use instead\", sugg, app);\n             }\n         }"}, {"sha": "34e9991582c0160b17adb6750e87567cef77320c", "filename": "clippy_lints/src/instant_subtraction.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Finstant_subtraction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Finstant_subtraction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finstant_subtraction.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::{self, span_lint_and_sugg};\n use clippy_utils::msrvs::{self, Msrv};\n-use clippy_utils::source;\n+use clippy_utils::source::snippet_with_context;\n use clippy_utils::sugg::Sugg;\n use clippy_utils::ty;\n use rustc_errors::Applicability;\n@@ -161,14 +161,9 @@ fn print_unchecked_duration_subtraction_sugg(\n ) {\n     let mut applicability = Applicability::MachineApplicable;\n \n-    let left_expr =\n-        source::snippet_with_applicability(cx, left_expr.span, \"std::time::Instant::now()\", &mut applicability);\n-    let right_expr = source::snippet_with_applicability(\n-        cx,\n-        right_expr.span,\n-        \"std::time::Duration::from_secs(1)\",\n-        &mut applicability,\n-    );\n+    let ctxt = expr.span.ctxt();\n+    let left_expr = snippet_with_context(cx, left_expr.span, ctxt, \"<instant>\", &mut applicability).0;\n+    let right_expr = snippet_with_context(cx, right_expr.span, ctxt, \"<duration>\", &mut applicability).0;\n \n     diagnostics::span_lint_and_sugg(\n         cx,"}, {"sha": "0805b4b19796ed50c7cdb1499ed221644c58caef", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 95, "deletions": 30, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,13 +1,14 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then};\n-use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{get_item_name, get_parent_as_impl, is_lint_allowed, peel_ref_operators};\n+use clippy_utils::source::snippet_with_context;\n+use clippy_utils::{get_item_name, get_parent_as_impl, is_lint_allowed, peel_ref_operators, sugg::Sugg};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefIdSet;\n use rustc_hir::{\n-    def_id::DefId, AssocItemKind, BinOpKind, Expr, ExprKind, FnRetTy, ImplItem, ImplItemKind, ImplicitSelfKind, Item,\n-    ItemKind, Mutability, Node, TraitItemRef, TyKind, UnOp,\n+    def::Res, def_id::DefId, lang_items::LangItem, AssocItemKind, BinOpKind, Expr, ExprKind, FnRetTy, GenericArg,\n+    GenericBound, ImplItem, ImplItemKind, ImplicitSelfKind, Item, ItemKind, Mutability, Node, PathSegment, PrimTy,\n+    QPath, TraitItemRef, TyKind, TypeBindingKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, AssocKind, FnSig, Ty};\n@@ -16,7 +17,6 @@ use rustc_span::{\n     source_map::{Span, Spanned, Symbol},\n     symbol::sym,\n };\n-use std::borrow::Cow;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -251,33 +251,98 @@ fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items\n }\n \n #[derive(Debug, Clone, Copy)]\n-enum LenOutput<'tcx> {\n+enum LenOutput {\n     Integral,\n     Option(DefId),\n-    Result(DefId, Ty<'tcx>),\n+    Result(DefId),\n }\n-fn parse_len_output<'tcx>(cx: &LateContext<'_>, sig: FnSig<'tcx>) -> Option<LenOutput<'tcx>> {\n+\n+fn extract_future_output<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<&'tcx PathSegment<'tcx>> {\n+    if let ty::Alias(_, alias_ty) = ty.kind() &&\n+        let Some(Node::Item(item)) = cx.tcx.hir().get_if_local(alias_ty.def_id) &&\n+        let Item { kind: ItemKind::OpaqueTy(opaque), .. } = item &&\n+        opaque.bounds.len() == 1 &&\n+        let GenericBound::LangItemTrait(LangItem::Future, _, _, generic_args) = &opaque.bounds[0] &&\n+        generic_args.bindings.len() == 1 &&\n+        let TypeBindingKind::Equality {\n+            term: rustc_hir::Term::Ty(rustc_hir::Ty {kind: TyKind::Path(QPath::Resolved(_, path)), .. }),\n+        } = &generic_args.bindings[0].kind &&\n+        path.segments.len() == 1 {\n+            return Some(&path.segments[0]);\n+        }\n+\n+    None\n+}\n+\n+fn is_first_generic_integral<'tcx>(segment: &'tcx PathSegment<'tcx>) -> bool {\n+    if let Some(generic_args) = segment.args {\n+        if generic_args.args.is_empty() {\n+            return false;\n+        }\n+        let arg = &generic_args.args[0];\n+        if let GenericArg::Type(rustc_hir::Ty {\n+            kind: TyKind::Path(QPath::Resolved(_, path)),\n+            ..\n+        }) = arg\n+        {\n+            let segments = &path.segments;\n+            let segment = &segments[0];\n+            let res = &segment.res;\n+            if matches!(res, Res::PrimTy(PrimTy::Uint(_))) || matches!(res, Res::PrimTy(PrimTy::Int(_))) {\n+                return true;\n+            }\n+        }\n+    }\n+\n+    false\n+}\n+\n+fn parse_len_output<'tcx>(cx: &LateContext<'tcx>, sig: FnSig<'tcx>) -> Option<LenOutput> {\n+    if let Some(segment) = extract_future_output(cx, sig.output()) {\n+        let res = segment.res;\n+\n+        if matches!(res, Res::PrimTy(PrimTy::Uint(_))) || matches!(res, Res::PrimTy(PrimTy::Int(_))) {\n+            return Some(LenOutput::Integral);\n+        }\n+\n+        if let Res::Def(_, def_id) = res {\n+            if cx.tcx.is_diagnostic_item(sym::Option, def_id) && is_first_generic_integral(segment) {\n+                return Some(LenOutput::Option(def_id));\n+            } else if cx.tcx.is_diagnostic_item(sym::Result, def_id) && is_first_generic_integral(segment) {\n+                return Some(LenOutput::Result(def_id));\n+            }\n+        }\n+\n+        return None;\n+    }\n+\n     match *sig.output().kind() {\n         ty::Int(_) | ty::Uint(_) => Some(LenOutput::Integral),\n         ty::Adt(adt, subs) if cx.tcx.is_diagnostic_item(sym::Option, adt.did()) => {\n             subs.type_at(0).is_integral().then(|| LenOutput::Option(adt.did()))\n         },\n-        ty::Adt(adt, subs) if cx.tcx.is_diagnostic_item(sym::Result, adt.did()) => subs\n-            .type_at(0)\n-            .is_integral()\n-            .then(|| LenOutput::Result(adt.did(), subs.type_at(1))),\n+        ty::Adt(adt, subs) if cx.tcx.is_diagnostic_item(sym::Result, adt.did()) => {\n+            subs.type_at(0).is_integral().then(|| LenOutput::Result(adt.did()))\n+        },\n         _ => None,\n     }\n }\n \n-impl<'tcx> LenOutput<'tcx> {\n-    fn matches_is_empty_output(self, ty: Ty<'tcx>) -> bool {\n+impl LenOutput {\n+    fn matches_is_empty_output<'tcx>(self, cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n+        if let Some(segment) = extract_future_output(cx, ty) {\n+            return match (self, segment.res) {\n+                (_, Res::PrimTy(PrimTy::Bool)) => true,\n+                (Self::Option(_), Res::Def(_, def_id)) if cx.tcx.is_diagnostic_item(sym::Option, def_id) => true,\n+                (Self::Result(_), Res::Def(_, def_id)) if cx.tcx.is_diagnostic_item(sym::Result, def_id) => true,\n+                _ => false,\n+            };\n+        }\n+\n         match (self, ty.kind()) {\n             (_, &ty::Bool) => true,\n             (Self::Option(id), &ty::Adt(adt, subs)) if id == adt.did() => subs.type_at(0).is_bool(),\n-            (Self::Result(id, err_ty), &ty::Adt(adt, subs)) if id == adt.did() => {\n-                subs.type_at(0).is_bool() && subs.type_at(1) == err_ty\n-            },\n+            (Self::Result(id), &ty::Adt(adt, subs)) if id == adt.did() => subs.type_at(0).is_bool(),\n             _ => false,\n         }\n     }\n@@ -301,9 +366,14 @@ impl<'tcx> LenOutput<'tcx> {\n }\n \n /// Checks if the given signature matches the expectations for `is_empty`\n-fn check_is_empty_sig<'tcx>(sig: FnSig<'tcx>, self_kind: ImplicitSelfKind, len_output: LenOutput<'tcx>) -> bool {\n+fn check_is_empty_sig<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    sig: FnSig<'tcx>,\n+    self_kind: ImplicitSelfKind,\n+    len_output: LenOutput,\n+) -> bool {\n     match &**sig.inputs_and_output {\n-        [arg, res] if len_output.matches_is_empty_output(*res) => {\n+        [arg, res] if len_output.matches_is_empty_output(cx, *res) => {\n             matches!(\n                 (arg.kind(), self_kind),\n                 (ty::Ref(_, _, Mutability::Not), ImplicitSelfKind::ImmRef)\n@@ -315,11 +385,11 @@ fn check_is_empty_sig<'tcx>(sig: FnSig<'tcx>, self_kind: ImplicitSelfKind, len_o\n }\n \n /// Checks if the given type has an `is_empty` method with the appropriate signature.\n-fn check_for_is_empty<'tcx>(\n-    cx: &LateContext<'tcx>,\n+fn check_for_is_empty(\n+    cx: &LateContext<'_>,\n     span: Span,\n     self_kind: ImplicitSelfKind,\n-    output: LenOutput<'tcx>,\n+    output: LenOutput,\n     impl_ty: DefId,\n     item_name: Symbol,\n     item_kind: &str,\n@@ -352,6 +422,7 @@ fn check_for_is_empty<'tcx>(\n         Some(is_empty)\n             if !(is_empty.fn_has_self_parameter\n                 && check_is_empty_sig(\n+                    cx,\n                     cx.tcx.fn_sig(is_empty.def_id).subst_identity().skip_binder(),\n                     self_kind,\n                     output,\n@@ -431,7 +502,7 @@ fn check_len(\n                 &format!(\"using `{op}is_empty` is clearer and more explicit\"),\n                 format!(\n                     \"{op}{}.is_empty()\",\n-                    snippet_with_applicability(cx, receiver.span, \"_\", &mut applicability)\n+                    snippet_with_context(cx, receiver.span, span.ctxt(), \"_\", &mut applicability).0,\n                 ),\n                 applicability,\n             );\n@@ -444,13 +515,7 @@ fn check_empty_expr(cx: &LateContext<'_>, span: Span, lit1: &Expr<'_>, lit2: &Ex\n         let mut applicability = Applicability::MachineApplicable;\n \n         let lit1 = peel_ref_operators(cx, lit1);\n-        let mut lit_str = snippet_with_applicability(cx, lit1.span, \"_\", &mut applicability);\n-\n-        // Wrap the expression in parentheses if it's a deref expression. Otherwise operator precedence will\n-        // cause the code to dereference boolean(won't compile).\n-        if let ExprKind::Unary(UnOp::Deref, _) = lit1.kind {\n-            lit_str = Cow::from(format!(\"({lit_str})\"));\n-        }\n+        let lit_str = Sugg::hir_with_context(cx, lit1, span.ctxt(), \"_\", &mut applicability).maybe_par();\n \n         span_lint_and_sugg(\n             cx,"}, {"sha": "51b5de27de89b8407a266558bde07d6efe2c4c37", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -124,7 +124,7 @@ declare_clippy_lint! {\n     /// ```\n     #[clippy::version = \"1.69.0\"]\n     pub LET_UNDERSCORE_UNTYPED,\n-    pedantic,\n+    restriction,\n     \"non-binding `let` without a type annotation\"\n }\n "}, {"sha": "ba51973f2f9c40902a3e4c6a79333a19185df3d8", "filename": "clippy_lints/src/let_with_type_underscore.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Flet_with_type_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Flet_with_type_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_with_type_underscore.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -0,0 +1,45 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use rustc_hir::*;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Detects when a variable is declared with an explicit type of `_`.\n+    /// ### Why is this bad?\n+    /// It adds noise, `: _` provides zero clarity or utility.\n+    /// ### Example\n+    /// ```rust,ignore\n+    /// let my_number: _ = 1;\n+    /// ```\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// let my_number = 1;\n+    /// ```\n+    #[clippy::version = \"1.69.0\"]\n+    pub LET_WITH_TYPE_UNDERSCORE,\n+    complexity,\n+    \"unneeded underscore type (`_`) in a variable declaration\"\n+}\n+declare_lint_pass!(UnderscoreTyped => [LET_WITH_TYPE_UNDERSCORE]);\n+\n+impl LateLintPass<'_> for UnderscoreTyped {\n+    fn check_local<'tcx>(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'tcx>) {\n+        if_chain! {\n+            if !in_external_macro(cx.tcx.sess, local.span);\n+            if let Some(ty) = local.ty; // Ensure that it has a type defined\n+            if let TyKind::Infer = &ty.kind; // that type is '_'\n+            if local.span.ctxt() == ty.span.ctxt();\n+            then {\n+                span_lint_and_help(cx,\n+                    LET_WITH_TYPE_UNDERSCORE,\n+                    local.span,\n+                    \"variable declared with type underscore\",\n+                    Some(ty.span.with_lo(local.pat.span.hi())),\n+                    \"remove the explicit type `_` declaration\"\n+                )\n+            }\n+        };\n+    }\n+}"}, {"sha": "491732be2087f3f677621ed15f7fba08de5233a1", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -87,6 +87,7 @@ mod casts;\n mod checked_conversions;\n mod cognitive_complexity;\n mod collapsible_if;\n+mod collection_is_never_read;\n mod comparison_chain;\n mod copies;\n mod copy_iterator;\n@@ -166,6 +167,7 @@ mod large_stack_arrays;\n mod len_zero;\n mod let_if_seq;\n mod let_underscore;\n+mod let_with_type_underscore;\n mod lifetimes;\n mod literal_representation;\n mod loops;\n@@ -192,6 +194,7 @@ mod minmax;\n mod misc;\n mod misc_early;\n mod mismatching_type_param_order;\n+mod missing_assert_message;\n mod missing_const_for_fn;\n mod missing_doc;\n mod missing_enforced_import_rename;\n@@ -249,6 +252,7 @@ mod question_mark_used;\n mod ranges;\n mod rc_clone_in_vec_init;\n mod read_zero_byte_vec;\n+mod redundant_async_block;\n mod redundant_clone;\n mod redundant_closure_call;\n mod redundant_else;\n@@ -533,6 +537,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n                 .collect(),\n         ))\n     });\n+    store.register_early_pass(|| Box::new(utils::format_args_collector::FormatArgsCollector));\n     store.register_late_pass(|_| Box::new(utils::dump_hir::DumpHir));\n     store.register_late_pass(|_| Box::new(utils::author::Author));\n     let await_holding_invalid_types = conf.await_holding_invalid_types.clone();\n@@ -924,6 +929,10 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         ))\n     });\n     store.register_late_pass(|_| Box::new(no_mangle_with_rust_abi::NoMangleWithRustAbi));\n+    store.register_late_pass(|_| Box::new(collection_is_never_read::CollectionIsNeverRead));\n+    store.register_late_pass(|_| Box::new(missing_assert_message::MissingAssertMessage));\n+    store.register_early_pass(|| Box::new(redundant_async_block::RedundantAsyncBlock));\n+    store.register_late_pass(|_| Box::new(let_with_type_underscore::UnderscoreTyped));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "bc815dc4a260ae8327940778a893235c3eb899e2", "filename": "clippy_lints/src/manual_bits.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fmanual_bits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fmanual_bits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_bits.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,11 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::get_parent_expr;\n use clippy_utils::msrvs::{self, Msrv};\n-use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::source::snippet_with_context;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, GenericArg, QPath};\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::sym;\n@@ -55,13 +56,17 @@ impl<'tcx> LateLintPass<'tcx> for ManualBits {\n         if_chain! {\n             if let ExprKind::Binary(bin_op, left_expr, right_expr) = expr.kind;\n             if let BinOpKind::Mul = &bin_op.node;\n+            if !in_external_macro(cx.sess(), expr.span);\n+            let ctxt = expr.span.ctxt();\n+            if left_expr.span.ctxt() == ctxt;\n+            if right_expr.span.ctxt() == ctxt;\n             if let Some((real_ty, resolved_ty, other_expr)) = get_one_size_of_ty(cx, left_expr, right_expr);\n             if matches!(resolved_ty.kind(), ty::Int(_) | ty::Uint(_));\n             if let ExprKind::Lit(lit) = &other_expr.kind;\n             if let LitKind::Int(8, _) = lit.node;\n             then {\n                 let mut app = Applicability::MachineApplicable;\n-                let ty_snip = snippet_with_applicability(cx, real_ty.span, \"..\", &mut app);\n+                let ty_snip = snippet_with_context(cx, real_ty.span, ctxt, \"..\", &mut app).0;\n                 let sugg = create_sugg(cx, expr, format!(\"{ty_snip}::BITS\"));\n \n                 span_lint_and_sugg("}, {"sha": "31264261f5dbd7032dbceaa502e5bb3737a2d73c", "filename": "clippy_lints/src/manual_is_ascii_check.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::msrvs::{self, Msrv};\n-use clippy_utils::{diagnostics::span_lint_and_sugg, higher, in_constant, macros::root_macro_call, source::snippet};\n+use clippy_utils::{diagnostics::span_lint_and_sugg, higher, in_constant, macros::root_macro_call, sugg::Sugg};\n use rustc_ast::ast::RangeLimits;\n use rustc_ast::LitKind::{Byte, Char};\n use rustc_errors::Applicability;\n@@ -115,15 +115,8 @@ fn check_is_ascii(cx: &LateContext<'_>, span: Span, recv: &Expr<'_>, range: &Cha\n         CharRange::Otherwise => None,\n     } {\n         let default_snip = \"..\";\n-        // `snippet_with_applicability` may set applicability to `MaybeIncorrect` for\n-        // macro span, so we check applicability manually by comparing `recv` is not default.\n-        let recv = snippet(cx, recv.span, default_snip);\n-\n-        let applicability = if recv == default_snip {\n-            Applicability::HasPlaceholders\n-        } else {\n-            Applicability::MachineApplicable\n-        };\n+        let mut app = Applicability::MachineApplicable;\n+        let recv = Sugg::hir_with_context(cx, recv, span.ctxt(), default_snip, &mut app).maybe_par();\n \n         span_lint_and_sugg(\n             cx,\n@@ -132,7 +125,7 @@ fn check_is_ascii(cx: &LateContext<'_>, span: Span, recv: &Expr<'_>, range: &Cha\n             \"manual check for common ascii range\",\n             \"try\",\n             format!(\"{recv}.{sugg}()\"),\n-            applicability,\n+            app,\n         );\n     }\n }"}, {"sha": "aafee92713fe1fd1b9b8e501682f67b487a97e7b", "filename": "clippy_lints/src/manual_rem_euclid.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::consts::{constant_full_int, FullInt};\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::msrvs::{self, Msrv};\n-use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::source::snippet_with_context;\n use clippy_utils::{in_constant, path_to_local};\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, Node, TyKind};\n@@ -60,12 +60,16 @@ impl<'tcx> LateLintPass<'tcx> for ManualRemEuclid {\n             return;\n         }\n \n+        // (x % c + c) % c\n         if let ExprKind::Binary(op1, expr1, right) = expr.kind\n             && op1.node == BinOpKind::Rem\n+            && let ctxt = expr.span.ctxt()\n+            && expr1.span.ctxt() == ctxt\n             && let Some(const1) = check_for_unsigned_int_constant(cx, right)\n             && let ExprKind::Binary(op2, left, right) = expr1.kind\n             && op2.node == BinOpKind::Add\n             && let Some((const2, expr2)) = check_for_either_unsigned_int_constant(cx, left, right)\n+            && expr2.span.ctxt() == ctxt\n             && let ExprKind::Binary(op3, expr3, right) = expr2.kind\n             && op3.node == BinOpKind::Rem\n             && let Some(const3) = check_for_unsigned_int_constant(cx, right)\n@@ -86,7 +90,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualRemEuclid {\n                 };\n \n                 let mut app = Applicability::MachineApplicable;\n-                let rem_of = snippet_with_applicability(cx, expr3.span, \"_\", &mut app);\n+                let rem_of = snippet_with_context(cx, expr3.span, ctxt, \"_\", &mut app).0;\n                 span_lint_and_sugg(\n                     cx,\n                     MANUAL_REM_EUCLID,"}, {"sha": "6ec9784038c378ddd41eb823b51a49d7ad808d74", "filename": "clippy_lints/src/match_result_ok.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fmatch_result_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fmatch_result_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatch_result_ok.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,11 +1,11 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::higher;\n-use clippy_utils::method_chain_args;\n-use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::is_res_lang_ctor;\n+use clippy_utils::source::snippet_with_context;\n use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, PatKind, QPath};\n+use rustc_hir::{Expr, ExprKind, LangItem, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n@@ -58,17 +58,18 @@ impl<'tcx> LateLintPass<'tcx> for MatchResultOk {\n             };\n \n         if_chain! {\n-            if let ExprKind::MethodCall(ok_path, result_types_0, ..) = let_expr.kind; //check is expr.ok() has type Result<T,E>.ok(, _)\n-            if let PatKind::TupleStruct(QPath::Resolved(_, x), y, _)  = let_pat.kind; //get operation\n-            if method_chain_args(let_expr, &[\"ok\"]).is_some(); //test to see if using ok() method use std::marker::Sized;\n-            if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(result_types_0), sym::Result);\n-            if rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_path(x, false)) == \"Some\";\n-\n+            if let ExprKind::MethodCall(ok_path, recv, [], ..) = let_expr.kind; //check is expr.ok() has type Result<T,E>.ok(, _)\n+            if let PatKind::TupleStruct(ref pat_path, [ok_pat], _)  = let_pat.kind; //get operation\n+            if ok_path.ident.as_str() == \"ok\";\n+            if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Result);\n+            if is_res_lang_ctor(cx, cx.qpath_res(pat_path, let_pat.hir_id), LangItem::OptionSome);\n+            let ctxt = expr.span.ctxt();\n+            if let_expr.span.ctxt() == ctxt;\n+            if let_pat.span.ctxt() == ctxt;\n             then {\n-\n                 let mut applicability = Applicability::MachineApplicable;\n-                let some_expr_string = snippet_with_applicability(cx, y[0].span, \"\", &mut applicability);\n-                let trimmed_ok = snippet_with_applicability(cx, let_expr.span.until(ok_path.ident.span), \"\", &mut applicability);\n+                let some_expr_string = snippet_with_context(cx, ok_pat.span, ctxt, \"\", &mut applicability).0;\n+                let trimmed_ok = snippet_with_context(cx, recv.span, ctxt, \"\", &mut applicability).0;\n                 let sugg = format!(\n                     \"{ifwhile} let Ok({some_expr_string}) = {}\",\n                     trimmed_ok.trim().trim_end_matches('.'),"}, {"sha": "97ecca450fac199448a26b9fce612632c1069f88", "filename": "clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -925,7 +925,7 @@ declare_clippy_lint! {\n     #[clippy::version = \"1.66.0\"]\n     pub MANUAL_FILTER,\n     complexity,\n-    \"reimplentation of `filter`\"\n+    \"reimplementation of `filter`\"\n }\n \n #[derive(Default)]"}, {"sha": "56e3988bf097b83bb2280df99db3ef087ce45750", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -340,8 +340,9 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for methods with certain name prefixes and which\n-    /// doesn't match how self is taken. The actual rules are:\n+    /// Checks for methods with certain name prefixes or suffixes, and which\n+    /// do not adhere to standard conventions regarding how `self` is taken.\n+    /// The actual rules are:\n     ///\n     /// |Prefix |Postfix     |`self` taken                   | `self` type  |\n     /// |-------|------------|-------------------------------|--------------|"}, {"sha": "2214a568d9c6d315c8b5b5496b2e0d8b4abb021e", "filename": "clippy_lints/src/missing_assert_message.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fmissing_assert_message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fmissing_assert_message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_assert_message.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -0,0 +1,82 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::macros::{find_assert_args, find_assert_eq_args, root_macro_call_first_node, PanicExpn};\n+use clippy_utils::{is_in_cfg_test, is_in_test_function};\n+use rustc_hir::Expr;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks assertions without a custom panic message.\n+    ///\n+    /// ### Why is this bad?\n+    /// Without a good custom message, it'd be hard to understand what went wrong when the assertion fails.\n+    /// A good custom message should be more about why the failure of the assertion is problematic\n+    /// and not what is failed because the assertion already conveys that.\n+    ///\n+    /// ### Known problems\n+    /// This lint cannot check the quality of the custom panic messages.\n+    /// Hence, you can suppress this lint simply by adding placeholder messages\n+    /// like \"assertion failed\". However, we recommend coming up with good messages\n+    /// that provide useful information instead of placeholder messages that\n+    /// don't provide any extra information.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # struct Service { ready: bool }\n+    /// fn call(service: Service) {\n+    ///     assert!(service.ready);\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # struct Service { ready: bool }\n+    /// fn call(service: Service) {\n+    ///     assert!(service.ready, \"`service.poll_ready()` must be called first to ensure that service is ready to receive requests\");\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.69.0\"]\n+    pub MISSING_ASSERT_MESSAGE,\n+    restriction,\n+    \"checks assertions without a custom panic message\"\n+}\n+\n+declare_lint_pass!(MissingAssertMessage => [MISSING_ASSERT_MESSAGE]);\n+\n+impl<'tcx> LateLintPass<'tcx> for MissingAssertMessage {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        let Some(macro_call) = root_macro_call_first_node(cx, expr) else { return };\n+        let single_argument = match cx.tcx.get_diagnostic_name(macro_call.def_id) {\n+            Some(sym::assert_macro | sym::debug_assert_macro) => true,\n+            Some(\n+                sym::assert_eq_macro | sym::assert_ne_macro | sym::debug_assert_eq_macro | sym::debug_assert_ne_macro,\n+            ) => false,\n+            _ => return,\n+        };\n+\n+        // This lint would be very noisy in tests, so just ignore if we're in test context\n+        if is_in_test_function(cx.tcx, expr.hir_id) || is_in_cfg_test(cx.tcx, expr.hir_id) {\n+            return;\n+        }\n+\n+        let panic_expn = if single_argument {\n+            let Some((_, panic_expn)) = find_assert_args(cx, expr, macro_call.expn) else { return };\n+            panic_expn\n+        } else {\n+            let Some((_, _, panic_expn)) = find_assert_eq_args(cx, expr, macro_call.expn) else { return };\n+            panic_expn\n+        };\n+\n+        if let PanicExpn::Empty = panic_expn {\n+            span_lint_and_help(\n+                cx,\n+                MISSING_ASSERT_MESSAGE,\n+                macro_call.span,\n+                \"assert without any message\",\n+                None,\n+                \"consider describing why the failing assert is problematic\",\n+            );\n+        }\n+    }\n+}"}, {"sha": "f2773cad400cc045f8da392001c1531ac16a4460", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -8,10 +8,10 @@\n use clippy_utils::attrs::is_doc_hidden;\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::is_from_proc_macro;\n-use hir::def_id::LocalDefId;\n use if_chain::if_chain;\n use rustc_ast::ast::{self, MetaItem, MetaItemKind};\n use rustc_hir as hir;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::ty::Visibility;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -21,8 +21,7 @@ use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Warns if there is missing doc for any documentable item\n-    /// (public or private).\n+    /// Warns if there is missing doc for any private documentable item\n     ///\n     /// ### Why is this bad?\n     /// Doc is good. *rustc* has a `MISSING_DOCS`\n@@ -32,7 +31,7 @@ declare_clippy_lint! {\n     #[clippy::version = \"pre 1.29.0\"]\n     pub MISSING_DOCS_IN_PRIVATE_ITEMS,\n     restriction,\n-    \"detects missing documentation for public and private members\"\n+    \"detects missing documentation for private members\"\n }\n \n pub struct MissingDoc {\n@@ -107,11 +106,14 @@ impl MissingDoc {\n             if vis == Visibility::Public || vis != Visibility::Restricted(CRATE_DEF_ID.into()) {\n                 return;\n             }\n+        } else if def_id != CRATE_DEF_ID && cx.effective_visibilities.is_exported(def_id) {\n+            return;\n         }\n \n         let has_doc = attrs\n             .iter()\n             .any(|a| a.doc_str().is_some() || Self::has_include(a.meta()));\n+\n         if !has_doc {\n             span_lint(\n                 cx,"}, {"sha": "5418616ded012e921c5073dd28e0e00463bb82cf", "filename": "clippy_lints/src/multiple_unsafe_ops_per_block.rs", "status": "modified", "additions": 10, "deletions": 27, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fmultiple_unsafe_ops_per_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fmultiple_unsafe_ops_per_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmultiple_unsafe_ops_per_block.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -11,6 +11,7 @@ use rustc_ast::Mutability;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n \n@@ -120,33 +121,15 @@ fn collect_unsafe_exprs<'tcx>(\n                 unsafe_ops.push((\"raw pointer dereference occurs here\", expr.span));\n             },\n \n-            ExprKind::Call(path_expr, _) => match path_expr.kind {\n-                ExprKind::Path(QPath::Resolved(\n-                    _,\n-                    hir::Path {\n-                        res: Res::Def(kind, def_id),\n-                        ..\n-                    },\n-                )) if kind.is_fn_like() => {\n-                    let sig = cx.tcx.fn_sig(*def_id);\n-                    if sig.0.unsafety() == Unsafety::Unsafe {\n-                        unsafe_ops.push((\"unsafe function call occurs here\", expr.span));\n-                    }\n-                },\n-\n-                ExprKind::Path(QPath::TypeRelative(..)) => {\n-                    if let Some(sig) = cx\n-                        .typeck_results()\n-                        .type_dependent_def_id(path_expr.hir_id)\n-                        .map(|def_id| cx.tcx.fn_sig(def_id))\n-                    {\n-                        if sig.0.unsafety() == Unsafety::Unsafe {\n-                            unsafe_ops.push((\"unsafe function call occurs here\", expr.span));\n-                        }\n-                    }\n-                },\n-\n-                _ => {},\n+            ExprKind::Call(path_expr, _) => {\n+                let sig = match *cx.typeck_results().expr_ty(path_expr).kind() {\n+                    ty::FnDef(id, _) => cx.tcx.fn_sig(id).skip_binder(),\n+                    ty::FnPtr(sig) => sig,\n+                    _ => return Continue(Descend::Yes),\n+                };\n+                if sig.unsafety() == Unsafety::Unsafe {\n+                    unsafe_ops.push((\"unsafe function call occurs here\", expr.span));\n+                }\n             },\n \n             ExprKind::MethodCall(..) => {"}, {"sha": "ed3e2c6e7f49248a5fd212f71b64ac2ba9019238", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::consts::{self, Constant};\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::source::snippet_with_context;\n use clippy_utils::sugg::has_enclosing_paren;\n use if_chain::if_chain;\n use rustc_ast::util::parser::PREC_PREFIX;\n@@ -60,8 +60,8 @@ fn check_mul(cx: &LateContext<'_>, span: Span, lit: &Expr<'_>, exp: &Expr<'_>) {\n \n         then {\n             let mut applicability = Applicability::MachineApplicable;\n-            let snip = snippet_with_applicability(cx, exp.span, \"..\", &mut applicability);\n-            let suggestion = if exp.precedence().order() < PREC_PREFIX && !has_enclosing_paren(&snip) {\n+            let (snip, from_macro) = snippet_with_context(cx, exp.span, span.ctxt(), \"..\", &mut applicability);\n+            let suggestion = if !from_macro && exp.precedence().order() < PREC_PREFIX && !has_enclosing_paren(&snip) {\n                 format!(\"-({snip})\")\n             } else {\n                 format!(\"-{snip}\")"}, {"sha": "e1de494eb41c03411d729dbfb3e2743833c91242", "filename": "clippy_lints/src/non_octal_unix_permissions.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fnon_octal_unix_permissions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fnon_octal_unix_permissions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_octal_unix_permissions.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -53,6 +53,7 @@ impl<'tcx> LateLintPass<'tcx> for NonOctalUnixPermissions {\n                             || is_type_diagnostic_item(cx, obj_ty, sym::DirBuilder)))\n                         || (path.ident.name == sym!(set_mode) && match_type(cx, obj_ty, &paths::PERMISSIONS));\n                     if let ExprKind::Lit(_) = param.kind;\n+                    if param.span.ctxt() == expr.span.ctxt();\n \n                     then {\n                         let Some(snip) = snippet_opt(cx, param.span) else {\n@@ -71,6 +72,7 @@ impl<'tcx> LateLintPass<'tcx> for NonOctalUnixPermissions {\n                     if let Some(def_id) = cx.qpath_res(path, func.hir_id).opt_def_id();\n                     if match_def_path(cx, def_id, &paths::PERMISSIONS_FROM_MODE);\n                     if let ExprKind::Lit(_) = param.kind;\n+                    if param.span.ctxt() == expr.span.ctxt();\n                     if let Some(snip) = snippet_opt(cx, param.span);\n                     if !snip.starts_with(\"0o\");\n                     then {"}, {"sha": "25e8de94863708f4e0e2536671e5ee2a271a3eb7", "filename": "clippy_lints/src/operators/arithmetic_side_effects.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -143,6 +143,10 @@ impl ArithmeticSideEffects {\n             return;\n         }\n         let has_valid_op = if Self::is_integral(lhs_ty) && Self::is_integral(rhs_ty) {\n+            if let hir::BinOpKind::Shl | hir::BinOpKind::Shr = op.node {\n+                // At least for integers, shifts are already handled by the CTFE\n+                return;\n+            }\n             let (actual_lhs, lhs_ref_counter) = peel_hir_expr_refs(lhs);\n             let (actual_rhs, rhs_ref_counter) = peel_hir_expr_refs(rhs);\n             match (\n@@ -151,10 +155,13 @@ impl ArithmeticSideEffects {\n             ) {\n                 (None, None) => false,\n                 (None, Some(n)) | (Some(n), None) => match (&op.node, n) {\n-                    (hir::BinOpKind::Div | hir::BinOpKind::Rem, 0) => false,\n+                    // Division and module are always valid if applied to non-zero integers\n+                    (hir::BinOpKind::Div | hir::BinOpKind::Rem, local_n) if local_n != 0 => true,\n+                    // Addition or subtracting zeros is always a no-op\n                     (hir::BinOpKind::Add | hir::BinOpKind::Sub, 0)\n-                    | (hir::BinOpKind::Div | hir::BinOpKind::Rem, _)\n-                    | (hir::BinOpKind::Mul, 0 | 1) => true,\n+                    // Multiplication by 1 or 0 will never overflow\n+                    | (hir::BinOpKind::Mul, 0 | 1)\n+                    => true,\n                     _ => false,\n                 },\n                 (Some(_), Some(_)) => {"}, {"sha": "664d44d6504dc6338f67c8097a3260a558ab713c", "filename": "clippy_lints/src/permissions_set_readonly_false.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fpermissions_set_readonly_false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fpermissions_set_readonly_false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpermissions_set_readonly_false.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -21,7 +21,7 @@ declare_clippy_lint! {\n     /// let mut permissions = metadata.permissions();\n     /// permissions.set_readonly(false);\n     /// ```\n-    #[clippy::version = \"1.66.0\"]\n+    #[clippy::version = \"1.68.0\"]\n     pub PERMISSIONS_SET_READONLY_FALSE,\n     suspicious,\n     \"Checks for calls to `std::fs::Permissions.set_readonly` with argument `false`\""}, {"sha": "27ad43086374357b1676e685261becbd07fb2254", "filename": "clippy_lints/src/redundant_async_block.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fredundant_async_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fredundant_async_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_async_block.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -0,0 +1,84 @@\n+use clippy_utils::{diagnostics::span_lint_and_sugg, source::snippet};\n+use rustc_ast::ast::*;\n+use rustc_ast::visit::Visitor as AstVisitor;\n+use rustc_errors::Applicability;\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `async` block that only returns `await` on a future.\n+    ///\n+    /// ### Why is this bad?\n+    /// It is simpler and more efficient to use the future directly.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// async fn f() -> i32 {\n+    ///     1 + 2\n+    /// }\n+    ///\n+    /// let fut = async {\n+    ///     f().await\n+    /// };\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// async fn f() -> i32 {\n+    ///     1 + 2\n+    /// }\n+    ///\n+    /// let fut = f();\n+    /// ```\n+    #[clippy::version = \"1.69.0\"]\n+    pub REDUNDANT_ASYNC_BLOCK,\n+    complexity,\n+    \"`async { future.await }` can be replaced by `future`\"\n+}\n+declare_lint_pass!(RedundantAsyncBlock => [REDUNDANT_ASYNC_BLOCK]);\n+\n+impl EarlyLintPass for RedundantAsyncBlock {\n+    fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n+        if expr.span.from_expansion() {\n+            return;\n+        }\n+        if let ExprKind::Async(_, _, block) = &expr.kind && block.stmts.len() == 1 &&\n+            let Some(Stmt { kind: StmtKind::Expr(last), .. }) = block.stmts.last() &&\n+            let ExprKind::Await(future) = &last.kind &&\n+            !future.span.from_expansion() &&\n+            !await_in_expr(future)\n+        {\n+            span_lint_and_sugg(\n+                cx,\n+                REDUNDANT_ASYNC_BLOCK,\n+                expr.span,\n+                \"this async expression only awaits a single future\",\n+                \"you can reduce it to\",\n+                snippet(cx, future.span, \"..\").into_owned(),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}\n+\n+/// Check whether an expression contains `.await`\n+fn await_in_expr(expr: &Expr) -> bool {\n+    let mut detector = AwaitDetector::default();\n+    detector.visit_expr(expr);\n+    detector.await_found\n+}\n+\n+#[derive(Default)]\n+struct AwaitDetector {\n+    await_found: bool,\n+}\n+\n+impl<'ast> AstVisitor<'ast> for AwaitDetector {\n+    fn visit_expr(&mut self, ex: &'ast Expr) {\n+        match (&ex.kind, self.await_found) {\n+            (ExprKind::Await(_), _) => self.await_found = true,\n+            (_, false) => rustc_ast::visit::walk_expr(self, ex),\n+            _ => (),\n+        }\n+    }\n+}"}, {"sha": "8abec06c641ccfbe5456d4f2250adae13d5dac55", "filename": "clippy_lints/src/size_of_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fsize_of_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fsize_of_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsize_of_ref.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -45,7 +45,7 @@ declare_clippy_lint! {\n     ///     }\n     /// }\n     /// ```\n-    #[clippy::version = \"1.67.0\"]\n+    #[clippy::version = \"1.68.0\"]\n     pub SIZE_OF_REF,\n     suspicious,\n     \"Argument to `std::mem::size_of_val()` is a double-reference, which is almost certainly unintended\""}, {"sha": "1aeac724ab13885ef09ebcfc46f9f9fb3a62abf3", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 64, "deletions": 47, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n-use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::source::snippet_with_context;\n use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::{can_mut_borrow_both, eq_expr_value, in_constant, std_or_core};\n@@ -10,6 +10,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n+use rustc_span::SyntaxContext;\n use rustc_span::{sym, symbol::Ident, Span};\n \n declare_clippy_lint! {\n@@ -80,43 +81,45 @@ impl<'tcx> LateLintPass<'tcx> for Swap {\n }\n \n fn generate_swap_warning(cx: &LateContext<'_>, e1: &Expr<'_>, e2: &Expr<'_>, span: Span, is_xor_based: bool) {\n+    let ctxt = span.ctxt();\n     let mut applicability = Applicability::MachineApplicable;\n \n     if !can_mut_borrow_both(cx, e1, e2) {\n-        if let ExprKind::Index(lhs1, idx1) = e1.kind {\n-            if let ExprKind::Index(lhs2, idx2) = e2.kind {\n-                if eq_expr_value(cx, lhs1, lhs2) {\n-                    let ty = cx.typeck_results().expr_ty(lhs1).peel_refs();\n+        if let ExprKind::Index(lhs1, idx1) = e1.kind\n+            && let ExprKind::Index(lhs2, idx2) = e2.kind\n+            && eq_expr_value(cx, lhs1, lhs2)\n+            && e1.span.ctxt() == ctxt\n+            && e2.span.ctxt() == ctxt\n+        {\n+            let ty = cx.typeck_results().expr_ty(lhs1).peel_refs();\n \n-                    if matches!(ty.kind(), ty::Slice(_))\n-                        || matches!(ty.kind(), ty::Array(_, _))\n-                        || is_type_diagnostic_item(cx, ty, sym::Vec)\n-                        || is_type_diagnostic_item(cx, ty, sym::VecDeque)\n-                    {\n-                        let slice = Sugg::hir_with_applicability(cx, lhs1, \"<slice>\", &mut applicability);\n-                        span_lint_and_sugg(\n-                            cx,\n-                            MANUAL_SWAP,\n-                            span,\n-                            &format!(\"this looks like you are swapping elements of `{slice}` manually\"),\n-                            \"try\",\n-                            format!(\n-                                \"{}.swap({}, {})\",\n-                                slice.maybe_par(),\n-                                snippet_with_applicability(cx, idx1.span, \"..\", &mut applicability),\n-                                snippet_with_applicability(cx, idx2.span, \"..\", &mut applicability),\n-                            ),\n-                            applicability,\n-                        );\n-                    }\n-                }\n+            if matches!(ty.kind(), ty::Slice(_))\n+                || matches!(ty.kind(), ty::Array(_, _))\n+                || is_type_diagnostic_item(cx, ty, sym::Vec)\n+                || is_type_diagnostic_item(cx, ty, sym::VecDeque)\n+            {\n+                let slice = Sugg::hir_with_applicability(cx, lhs1, \"<slice>\", &mut applicability);\n+                span_lint_and_sugg(\n+                    cx,\n+                    MANUAL_SWAP,\n+                    span,\n+                    &format!(\"this looks like you are swapping elements of `{slice}` manually\"),\n+                    \"try\",\n+                    format!(\n+                        \"{}.swap({}, {});\",\n+                        slice.maybe_par(),\n+                        snippet_with_context(cx, idx1.span, ctxt, \"..\", &mut applicability).0,\n+                        snippet_with_context(cx, idx2.span, ctxt, \"..\", &mut applicability).0,\n+                    ),\n+                    applicability,\n+                );\n             }\n         }\n         return;\n     }\n \n-    let first = Sugg::hir_with_applicability(cx, e1, \"..\", &mut applicability);\n-    let second = Sugg::hir_with_applicability(cx, e2, \"..\", &mut applicability);\n+    let first = Sugg::hir_with_context(cx, e1, ctxt, \"..\", &mut applicability);\n+    let second = Sugg::hir_with_context(cx, e2, ctxt, \"..\", &mut applicability);\n     let Some(sugg) = std_or_core(cx) else { return };\n \n     span_lint_and_then(\n@@ -128,7 +131,7 @@ fn generate_swap_warning(cx: &LateContext<'_>, e1: &Expr<'_>, e2: &Expr<'_>, spa\n             diag.span_suggestion(\n                 span,\n                 \"try\",\n-                format!(\"{sugg}::mem::swap({}, {})\", first.mut_addr(), second.mut_addr()),\n+                format!(\"{sugg}::mem::swap({}, {});\", first.mut_addr(), second.mut_addr()),\n                 applicability,\n             );\n             if !is_xor_based {\n@@ -144,28 +147,35 @@ fn check_manual_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n         return;\n     }\n \n-    for w in block.stmts.windows(3) {\n+    for [s1, s2, s3] in block.stmts.array_windows::<3>() {\n         if_chain! {\n             // let t = foo();\n-            if let StmtKind::Local(tmp) = w[0].kind;\n+            if let StmtKind::Local(tmp) = s1.kind;\n             if let Some(tmp_init) = tmp.init;\n             if let PatKind::Binding(.., ident, None) = tmp.pat.kind;\n \n             // foo() = bar();\n-            if let StmtKind::Semi(first) = w[1].kind;\n+            if let StmtKind::Semi(first) = s2.kind;\n             if let ExprKind::Assign(lhs1, rhs1, _) = first.kind;\n \n             // bar() = t;\n-            if let StmtKind::Semi(second) = w[2].kind;\n+            if let StmtKind::Semi(second) = s3.kind;\n             if let ExprKind::Assign(lhs2, rhs2, _) = second.kind;\n             if let ExprKind::Path(QPath::Resolved(None, rhs2)) = rhs2.kind;\n             if rhs2.segments.len() == 1;\n \n             if ident.name == rhs2.segments[0].ident.name;\n             if eq_expr_value(cx, tmp_init, lhs1);\n             if eq_expr_value(cx, rhs1, lhs2);\n+\n+            let ctxt = s1.span.ctxt();\n+            if s2.span.ctxt() == ctxt;\n+            if s3.span.ctxt() == ctxt;\n+            if first.span.ctxt() == ctxt;\n+            if second.span.ctxt() == ctxt;\n+\n             then {\n-                let span = w[0].span.to(second.span);\n+                let span = s1.span.to(s3.span);\n                 generate_swap_warning(cx, lhs1, lhs2, span, false);\n             }\n         }\n@@ -246,37 +256,44 @@ fn parse<'a, 'hir>(stmt: &'a Stmt<'hir>) -> Option<(ExprOrIdent<'hir>, &'a Expr<\n \n /// Implementation of the xor case for `MANUAL_SWAP` lint.\n fn check_xor_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n-    for window in block.stmts.windows(3) {\n+    for [s1, s2, s3] in block.stmts.array_windows::<3>() {\n         if_chain! {\n-            if let Some((lhs0, rhs0)) = extract_sides_of_xor_assign(&window[0]);\n-            if let Some((lhs1, rhs1)) = extract_sides_of_xor_assign(&window[1]);\n-            if let Some((lhs2, rhs2)) = extract_sides_of_xor_assign(&window[2]);\n+            let ctxt = s1.span.ctxt();\n+            if let Some((lhs0, rhs0)) = extract_sides_of_xor_assign(s1, ctxt);\n+            if let Some((lhs1, rhs1)) = extract_sides_of_xor_assign(s2, ctxt);\n+            if let Some((lhs2, rhs2)) = extract_sides_of_xor_assign(s3, ctxt);\n             if eq_expr_value(cx, lhs0, rhs1);\n             if eq_expr_value(cx, lhs2, rhs1);\n             if eq_expr_value(cx, lhs1, rhs0);\n             if eq_expr_value(cx, lhs1, rhs2);\n+            if s2.span.ctxt() == ctxt;\n+            if s3.span.ctxt() == ctxt;\n             then {\n-                let span = window[0].span.to(window[2].span);\n+                let span = s1.span.to(s3.span);\n                 generate_swap_warning(cx, lhs0, rhs0, span, true);\n             }\n         };\n     }\n }\n \n /// Returns the lhs and rhs of an xor assignment statement.\n-fn extract_sides_of_xor_assign<'a, 'hir>(stmt: &'a Stmt<'hir>) -> Option<(&'a Expr<'hir>, &'a Expr<'hir>)> {\n-    if let StmtKind::Semi(expr) = stmt.kind {\n-        if let ExprKind::AssignOp(\n+fn extract_sides_of_xor_assign<'a, 'hir>(\n+    stmt: &'a Stmt<'hir>,\n+    ctxt: SyntaxContext,\n+) -> Option<(&'a Expr<'hir>, &'a Expr<'hir>)> {\n+    if let StmtKind::Semi(expr) = stmt.kind\n+        && let ExprKind::AssignOp(\n             Spanned {\n                 node: BinOpKind::BitXor,\n                 ..\n             },\n             lhs,\n             rhs,\n         ) = expr.kind\n-        {\n-            return Some((lhs, rhs));\n-        }\n+        && expr.span.ctxt() == ctxt\n+    {\n+        Some((lhs, rhs))\n+    } else {\n+        None\n     }\n-    None\n }"}, {"sha": "0dc30f7a9355408ae3077182356dcfb74c7a371b", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -458,7 +458,7 @@ declare_clippy_lint! {\n     /// ```rust\n     /// let null_fn: Option<fn()> = None;\n     /// ```\n-    #[clippy::version = \"1.67.0\"]\n+    #[clippy::version = \"1.68.0\"]\n     pub TRANSMUTE_NULL_TO_FN,\n     correctness,\n     \"transmute results in a null function pointer, which is undefined behavior\""}, {"sha": "3430b6e373418dedc8bc13d32dc36311bc2461a0", "filename": "clippy_lints/src/unit_types/let_unit_value.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::visitors::{for_each_local_assignment, for_each_value_source};\n use core::ops::ControlFlow;\n use rustc_errors::Applicability;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::{Expr, ExprKind, HirId, HirIdSet, Local, Node, PatKind, QPath, TyKind};\n+use rustc_hir::{Expr, ExprKind, HirId, HirIdSet, Local, MatchSource, Node, PatKind, QPath, TyKind};\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n@@ -41,6 +41,10 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, local: &'tcx Local<'_>) {\n                 );\n             }\n         } else {\n+            if let ExprKind::Match(_, _, MatchSource::AwaitDesugar) = init.kind {\n+                return\n+            }\n+\n             span_lint_and_then(\n                 cx,\n                 LET_UNIT_VALUE,"}, {"sha": "8ea5475fb25271c5d45301c01bdbd3b4ef530368", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -10,8 +10,8 @@ use rustc_hir::{\n     def::{CtorOf, DefKind, Res},\n     def_id::LocalDefId,\n     intravisit::{walk_inf, walk_ty, Visitor},\n-    Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Pat, PatKind, Path, QPath,\n-    TyKind,\n+    Expr, ExprKind, FnRetTy, FnSig, GenericArg, GenericParam, GenericParamKind, HirId, Impl, ImplItemKind, Item,\n+    ItemKind, Pat, PatKind, Path, QPath, Ty, TyKind,\n };\n use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass};\n@@ -96,7 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n         // avoid linting on nested items, we push `StackItem::NoCheck` on the stack to signal, that\n         // we're in an `impl` or nested item, that we don't want to lint\n         let stack_item = if_chain! {\n-            if let ItemKind::Impl(Impl { self_ty, .. }) = item.kind;\n+            if let ItemKind::Impl(Impl { self_ty, generics,.. }) = item.kind;\n             if let TyKind::Path(QPath::Resolved(_, item_path)) = self_ty.kind;\n             let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).args;\n             if parameters.as_ref().map_or(true, |params| {\n@@ -105,10 +105,17 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             if !item.span.from_expansion();\n             if !is_from_proc_macro(cx, item); // expensive, should be last check\n             then {\n+                // Self cannot be used inside const generic parameters\n+                let types_to_skip = generics.params.iter().filter_map(|param| {\n+                    match param {\n+                        GenericParam { kind: GenericParamKind::Const { ty: Ty { hir_id, ..}, ..}, ..} => Some(*hir_id),\n+                        _ => None,\n+                    }\n+                }).chain(std::iter::once(self_ty.hir_id)).collect();\n                 StackItem::Check {\n                     impl_id: item.owner_id.def_id,\n                     in_body: 0,\n-                    types_to_skip: std::iter::once(self_ty.hir_id).collect(),\n+                    types_to_skip,\n                 }\n             } else {\n                 StackItem::NoCheck"}, {"sha": "f31c3fdb0959c399c70434cd0134c3840ed0d221", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -588,7 +588,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                     },\n                 }\n             },\n-            ExprKind::Err(_) => kind!(\"Err\"),\n+            ExprKind::Err(_) => kind!(\"Err(_)\"),\n             ExprKind::DropTemps(expr) => {\n                 bind!(self, expr);\n                 kind!(\"DropTemps({expr})\");"}, {"sha": "be56b842b98c63b75e1de07153e3085dcc457011", "filename": "clippy_lints/src/utils/format_args_collector.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Futils%2Fformat_args_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Futils%2Fformat_args_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fformat_args_collector.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -0,0 +1,23 @@\n+use clippy_utils::macros::collect_ast_format_args;\n+use rustc_ast::{Expr, ExprKind};\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Collects [`rustc_ast::FormatArgs`] so that future late passes can call\n+    /// [`clippy_utils::macros::find_format_args`]\n+    pub FORMAT_ARGS_COLLECTOR,\n+    internal_warn,\n+    \"collects `format_args` AST nodes for use in later lints\"\n+}\n+\n+declare_lint_pass!(FormatArgsCollector => [FORMAT_ARGS_COLLECTOR]);\n+\n+impl EarlyLintPass for FormatArgsCollector {\n+    fn check_expr(&mut self, _: &EarlyContext<'_>, expr: &Expr) {\n+        if let ExprKind::FormatArgs(args) = &expr.kind {\n+            collect_ast_format_args(expr.span, args);\n+        }\n+    }\n+}"}, {"sha": "3d0d4a52511a8365f1ca27781f51153ad499e79e", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -26,7 +26,7 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::Ident;\n use rustc_span::{sym, Loc, Span, Symbol};\n use serde::{ser::SerializeStruct, Serialize, Serializer};\n-use std::collections::BinaryHeap;\n+use std::collections::{BTreeSet, BinaryHeap};\n use std::fmt;\n use std::fmt::Write as _;\n use std::fs::{self, OpenOptions};\n@@ -264,6 +264,9 @@ struct LintMetadata {\n     /// This field is only used in the output and will only be\n     /// mapped shortly before the actual output.\n     applicability: Option<ApplicabilityInfo>,\n+    /// All the past names of lints which have been renamed.\n+    #[serde(skip_serializing_if = \"BTreeSet::is_empty\")]\n+    former_ids: BTreeSet<String>,\n }\n \n impl LintMetadata {\n@@ -283,6 +286,7 @@ impl LintMetadata {\n             version,\n             docs,\n             applicability: None,\n+            former_ids: BTreeSet::new(),\n         }\n     }\n }\n@@ -901,6 +905,7 @@ fn collect_renames(lints: &mut Vec<LintMetadata>) {\n                         if name == lint_name;\n                         if let Some(past_name) = k.strip_prefix(CLIPPY_LINT_GROUP_PREFIX);\n                         then {\n+                            lint.former_ids.insert(past_name.to_owned());\n                             writeln!(collected, \"* `{past_name}`\").unwrap();\n                             names.push(past_name.to_string());\n                         }"}, {"sha": "dc647af264c15893057d44bc26137b46f1151d4c", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,5 +1,6 @@\n pub mod author;\n pub mod conf;\n pub mod dump_hir;\n+pub mod format_args_collector;\n #[cfg(feature = \"internal\")]\n pub mod internal_lints;"}, {"sha": "8114a8463faad28fea39b722805bb60d36da73e6", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 85, "deletions": 63, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,10 +1,11 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n-use clippy_utils::macros::{root_macro_call_first_node, FormatArgsExpn, MacroCall};\n+use clippy_utils::macros::{find_format_args, format_arg_removal_span, root_macro_call_first_node, MacroCall};\n use clippy_utils::source::{expand_past_previous_comma, snippet_opt};\n use clippy_utils::{is_in_cfg_test, is_in_test_function};\n-use rustc_ast::LitKind;\n+use rustc_ast::token::LitKind;\n+use rustc_ast::{FormatArgPosition, FormatArgs, FormatArgsPiece, FormatOptions, FormatPlaceholder, FormatTrait};\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, HirIdMap, Impl, Item, ItemKind};\n+use rustc_hir::{Expr, Impl, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, BytePos};\n@@ -297,34 +298,40 @@ impl<'tcx> LateLintPass<'tcx> for Write {\n             _ => return,\n         }\n \n-        let Some(format_args) = FormatArgsExpn::find_nested(cx, expr, macro_call.expn) else { return };\n-\n-        // ignore `writeln!(w)` and `write!(v, some_macro!())`\n-        if format_args.format_string.span.from_expansion() {\n-            return;\n-        }\n+        find_format_args(cx, expr, macro_call.expn, |format_args| {\n+            // ignore `writeln!(w)` and `write!(v, some_macro!())`\n+            if format_args.span.from_expansion() {\n+                return;\n+            }\n \n-        match diag_name {\n-            sym::print_macro | sym::eprint_macro | sym::write_macro => {\n-                check_newline(cx, &format_args, &macro_call, name);\n-            },\n-            sym::println_macro | sym::eprintln_macro | sym::writeln_macro => {\n-                check_empty_string(cx, &format_args, &macro_call, name);\n-            },\n-            _ => {},\n-        }\n+            match diag_name {\n+                sym::print_macro | sym::eprint_macro | sym::write_macro => {\n+                    check_newline(cx, format_args, &macro_call, name);\n+                },\n+                sym::println_macro | sym::eprintln_macro | sym::writeln_macro => {\n+                    check_empty_string(cx, format_args, &macro_call, name);\n+                },\n+                _ => {},\n+            }\n \n-        check_literal(cx, &format_args, name);\n+            check_literal(cx, format_args, name);\n \n-        if !self.in_debug_impl {\n-            for arg in &format_args.args {\n-                if arg.format.r#trait == sym::Debug {\n-                    span_lint(cx, USE_DEBUG, arg.span, \"use of `Debug`-based formatting\");\n+            if !self.in_debug_impl {\n+                for piece in &format_args.template {\n+                    if let &FormatArgsPiece::Placeholder(FormatPlaceholder {\n+                        span: Some(span),\n+                        format_trait: FormatTrait::Debug,\n+                        ..\n+                    }) = piece\n+                    {\n+                        span_lint(cx, USE_DEBUG, span, \"use of `Debug`-based formatting\");\n+                    }\n                 }\n             }\n-        }\n+        });\n     }\n }\n+\n fn is_debug_impl(cx: &LateContext<'_>, item: &Item<'_>) -> bool {\n     if let ItemKind::Impl(Impl { of_trait: Some(trait_ref), .. }) = &item.kind\n         && let Some(trait_id) = trait_ref.trait_def_id()\n@@ -335,27 +342,28 @@ fn is_debug_impl(cx: &LateContext<'_>, item: &Item<'_>) -> bool {\n     }\n }\n \n-fn check_newline(cx: &LateContext<'_>, format_args: &FormatArgsExpn<'_>, macro_call: &MacroCall, name: &str) {\n-    let format_string_parts = &format_args.format_string.parts;\n-    let mut format_string_span = format_args.format_string.span;\n-\n-    let Some(last) = format_string_parts.last() else { return };\n+fn check_newline(cx: &LateContext<'_>, format_args: &FormatArgs, macro_call: &MacroCall, name: &str) {\n+    let Some(FormatArgsPiece::Literal(last)) = format_args.template.last() else { return };\n \n     let count_vertical_whitespace = || {\n-        format_string_parts\n+        format_args\n+            .template\n             .iter()\n-            .flat_map(|part| part.as_str().chars())\n+            .filter_map(|piece| match piece {\n+                FormatArgsPiece::Literal(literal) => Some(literal),\n+                FormatArgsPiece::Placeholder(_) => None,\n+            })\n+            .flat_map(|literal| literal.as_str().chars())\n             .filter(|ch| matches!(ch, '\\r' | '\\n'))\n             .count()\n     };\n \n     if last.as_str().ends_with('\\n')\n         // ignore format strings with other internal vertical whitespace\n         && count_vertical_whitespace() == 1\n-\n-        // ignore trailing arguments: `print!(\"Issue\\n{}\", 1265);`\n-        && format_string_parts.len() > format_args.args.len()\n     {\n+        let mut format_string_span = format_args.span;\n+\n         let lint = if name == \"write\" {\n             format_string_span = expand_past_previous_comma(cx, format_string_span);\n \n@@ -373,7 +381,7 @@ fn check_newline(cx: &LateContext<'_>, format_args: &FormatArgsExpn<'_>, macro_c\n                 let name_span = cx.sess().source_map().span_until_char(macro_call.span, '!');\n                 let Some(format_snippet) = snippet_opt(cx, format_string_span) else { return };\n \n-                if format_string_parts.len() == 1 && last.as_str() == \"\\n\" {\n+                if format_args.template.len() == 1 && last.as_str() == \"\\n\" {\n                     // print!(\"\\n\"), write!(f, \"\\n\")\n \n                     diag.multipart_suggestion(\n@@ -398,11 +406,12 @@ fn check_newline(cx: &LateContext<'_>, format_args: &FormatArgsExpn<'_>, macro_c\n     }\n }\n \n-fn check_empty_string(cx: &LateContext<'_>, format_args: &FormatArgsExpn<'_>, macro_call: &MacroCall, name: &str) {\n-    if let [part] = &format_args.format_string.parts[..]\n-        && let mut span = format_args.format_string.span\n-        && part.as_str() == \"\\n\"\n+fn check_empty_string(cx: &LateContext<'_>, format_args: &FormatArgs, macro_call: &MacroCall, name: &str) {\n+    if let [FormatArgsPiece::Literal(literal)] = &format_args.template[..]\n+        && literal.as_str() == \"\\n\"\n     {\n+        let mut span = format_args.span;\n+\n         let lint = if name == \"writeln\" {\n             span = expand_past_previous_comma(cx, span);\n \n@@ -428,33 +437,43 @@ fn check_empty_string(cx: &LateContext<'_>, format_args: &FormatArgsExpn<'_>, ma\n     }\n }\n \n-fn check_literal(cx: &LateContext<'_>, format_args: &FormatArgsExpn<'_>, name: &str) {\n-    let mut counts = HirIdMap::<usize>::default();\n-    for param in format_args.params() {\n-        *counts.entry(param.value.hir_id).or_default() += 1;\n+fn check_literal(cx: &LateContext<'_>, format_args: &FormatArgs, name: &str) {\n+    let arg_index = |argument: &FormatArgPosition| argument.index.unwrap_or_else(|pos| pos);\n+\n+    let mut counts = vec![0u32; format_args.arguments.all_args().len()];\n+    for piece in &format_args.template {\n+        if let FormatArgsPiece::Placeholder(placeholder) = piece {\n+            counts[arg_index(&placeholder.argument)] += 1;\n+        }\n     }\n \n-    for arg in &format_args.args {\n-        let value = arg.param.value;\n-\n-        if counts[&value.hir_id] == 1\n-            && arg.format.is_default()\n-            && let ExprKind::Lit(lit) = &value.kind\n-            && !value.span.from_expansion()\n-            && let Some(value_string) = snippet_opt(cx, value.span)\n-        {\n-            let (replacement, replace_raw) = match lit.node {\n-                LitKind::Str(..) => extract_str_literal(&value_string),\n-                LitKind::Char(ch) => (\n-                    match ch {\n-                        '\"' => \"\\\\\\\"\",\n-                        '\\'' => \"'\",\n+    for piece in &format_args.template {\n+        if let FormatArgsPiece::Placeholder(FormatPlaceholder {\n+            argument,\n+            span: Some(placeholder_span),\n+            format_trait: FormatTrait::Display,\n+            format_options,\n+        }) = piece\n+            && *format_options == FormatOptions::default()\n+            && let index = arg_index(argument)\n+            && counts[index] == 1\n+            && let Some(arg) = format_args.arguments.by_index(index)\n+            && let rustc_ast::ExprKind::Lit(lit) = &arg.expr.kind\n+            && !arg.expr.span.from_expansion()\n+            && let Some(value_string) = snippet_opt(cx, arg.expr.span)\n+    {\n+            let (replacement, replace_raw) = match lit.kind {\n+                LitKind::Str | LitKind::StrRaw(_)  => extract_str_literal(&value_string),\n+                LitKind::Char => (\n+                    match lit.symbol.as_str() {\n+                        \"\\\"\" => \"\\\\\\\"\",\n+                        \"\\\\'\" => \"'\",\n                         _ => &value_string[1..value_string.len() - 1],\n                     }\n                     .to_string(),\n                     false,\n                 ),\n-                LitKind::Bool(b) => (b.to_string(), false),\n+                LitKind::Bool => (lit.symbol.to_string(), false),\n                 _ => continue,\n             };\n \n@@ -464,7 +483,9 @@ fn check_literal(cx: &LateContext<'_>, format_args: &FormatArgsExpn<'_>, name: &\n                 PRINT_LITERAL\n             };\n \n-            let format_string_is_raw = format_args.format_string.style.is_some();\n+            let Some(format_string_snippet) = snippet_opt(cx, format_args.span) else { continue };\n+            let format_string_is_raw = format_string_snippet.starts_with('r');\n+\n             let replacement = match (format_string_is_raw, replace_raw) {\n                 (false, false) => Some(replacement),\n                 (false, true) => Some(replacement.replace('\"', \"\\\\\\\"\").replace('\\\\', \"\\\\\\\\\")),\n@@ -485,23 +506,24 @@ fn check_literal(cx: &LateContext<'_>, format_args: &FormatArgsExpn<'_>, name: &\n             span_lint_and_then(\n                 cx,\n                 lint,\n-                value.span,\n+                arg.expr.span,\n                 \"literal with an empty format string\",\n                 |diag| {\n                     if let Some(replacement) = replacement\n                         // `format!(\"{}\", \"a\")`, `format!(\"{named}\", named = \"b\")\n                         //              ~~~~~                      ~~~~~~~~~~~~~\n-                        && let Some(value_span) = format_args.value_with_prev_comma_span(value.hir_id)\n+                        && let Some(removal_span) = format_arg_removal_span(format_args, index)\n                     {\n                         let replacement = replacement.replace('{', \"{{\").replace('}', \"}}\");\n                         diag.multipart_suggestion(\n                             \"try this\",\n-                            vec![(arg.span, replacement), (value_span, String::new())],\n+                            vec![(*placeholder_span, replacement), (removal_span, String::new())],\n                             Applicability::MachineApplicable,\n                         );\n                     }\n                 },\n             );\n+\n         }\n     }\n }"}, {"sha": "124ebd164e6b5e9fbd3d70e96cc042f0c6467ed4", "filename": "clippy_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2FCargo.toml?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_utils\"\n-version = \"0.1.69\"\n+version = \"0.1.70\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "44b6b9f7b0b14af5687dc70933741e9931fae2ec", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -617,7 +617,7 @@ fn item_children_by_name(tcx: TyCtxt<'_>, def_id: DefId, name: Symbol) -> Vec<Re\n /// Can return multiple resolutions when there are multiple versions of the same crate, e.g.\n /// `memchr::memchr` could return the functions from both memchr 1.0 and memchr 2.0.\n ///\n-/// Also returns multiple results when there are mulitple paths under the same name e.g. `std::vec`\n+/// Also returns multiple results when there are multiple paths under the same name e.g. `std::vec`\n /// would have both a [`DefKind::Mod`] and [`DefKind::Macro`].\n ///\n /// This function is expensive and should be used sparingly."}, {"sha": "e135bd9feee543077ceb53ad2de636c23cd01b3b", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 107, "deletions": 10, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -6,6 +6,8 @@ use crate::visitors::{for_each_expr, Descend};\n use arrayvec::ArrayVec;\n use itertools::{izip, Either, Itertools};\n use rustc_ast::ast::LitKind;\n+use rustc_ast::FormatArgs;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{self as hir, Expr, ExprField, ExprKind, HirId, LangItem, Node, QPath, TyKind};\n use rustc_lexer::unescape::unescape_literal;\n@@ -15,8 +17,10 @@ use rustc_parse_format::{self as rpf, Alignment};\n use rustc_span::def_id::DefId;\n use rustc_span::hygiene::{self, MacroKind, SyntaxContext};\n use rustc_span::{sym, BytePos, ExpnData, ExpnId, ExpnKind, Pos, Span, SpanData, Symbol};\n+use std::cell::RefCell;\n use std::iter::{once, zip};\n use std::ops::ControlFlow;\n+use std::sync::atomic::{AtomicBool, Ordering};\n \n const FORMAT_MACRO_DIAG_ITEMS: &[Symbol] = &[\n     sym::assert_eq_macro,\n@@ -213,6 +217,7 @@ pub fn is_assert_macro(cx: &LateContext<'_>, def_id: DefId) -> bool {\n     matches!(name, sym::assert_macro | sym::debug_assert_macro)\n }\n \n+#[derive(Debug)]\n pub enum PanicExpn<'a> {\n     /// No arguments - `panic!()`\n     Empty,\n@@ -226,10 +231,7 @@ pub enum PanicExpn<'a> {\n \n impl<'a> PanicExpn<'a> {\n     pub fn parse(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<Self> {\n-        if !macro_backtrace(expr.span).any(|macro_call| is_panic(cx, macro_call.def_id)) {\n-            return None;\n-        }\n-        let ExprKind::Call(callee, [arg]) = &expr.kind else { return None };\n+        let ExprKind::Call(callee, [arg, rest @ ..]) = &expr.kind else { return None };\n         let ExprKind::Path(QPath::Resolved(_, path)) = &callee.kind else { return None };\n         let result = match path.segments.last().unwrap().ident.as_str() {\n             \"panic\" if arg.span.ctxt() == expr.span.ctxt() => Self::Empty,\n@@ -239,6 +241,21 @@ impl<'a> PanicExpn<'a> {\n                 Self::Display(e)\n             },\n             \"panic_fmt\" => Self::Format(FormatArgsExpn::parse(cx, arg)?),\n+            // Since Rust 1.52, `assert_{eq,ne}` macros expand to use:\n+            // `core::panicking::assert_failed(.., left_val, right_val, None | Some(format_args!(..)));`\n+            \"assert_failed\" => {\n+                // It should have 4 arguments in total (we already matched with the first argument,\n+                // so we're just checking for 3)\n+                if rest.len() != 3 {\n+                    return None;\n+                }\n+                // `msg_arg` is either `None` (no custom message) or `Some(format_args!(..))` (custom message)\n+                let msg_arg = &rest[2];\n+                match msg_arg.kind {\n+                    ExprKind::Call(_, [fmt_arg]) => Self::Format(FormatArgsExpn::parse(cx, fmt_arg)?),\n+                    _ => Self::Empty,\n+                }\n+            },\n             _ => return None,\n         };\n         Some(result)\n@@ -251,7 +268,17 @@ pub fn find_assert_args<'a>(\n     expr: &'a Expr<'a>,\n     expn: ExpnId,\n ) -> Option<(&'a Expr<'a>, PanicExpn<'a>)> {\n-    find_assert_args_inner(cx, expr, expn).map(|([e], p)| (e, p))\n+    find_assert_args_inner(cx, expr, expn).map(|([e], mut p)| {\n+        // `assert!(..)` expands to `core::panicking::panic(\"assertion failed: ...\")` (which we map to\n+        // `PanicExpn::Str(..)`) and `assert!(.., \"..\")` expands to\n+        // `core::panicking::panic_fmt(format_args!(\"..\"))` (which we map to `PanicExpn::Format(..)`).\n+        // So even we got `PanicExpn::Str(..)` that means there is no custom message provided\n+        if let PanicExpn::Str(_) = p {\n+            p = PanicExpn::Empty;\n+        }\n+\n+        (e, p)\n+    })\n }\n \n /// Finds the arguments of an `assert_eq!` or `debug_assert_eq!` macro call within the macro\n@@ -275,13 +302,12 @@ fn find_assert_args_inner<'a, const N: usize>(\n         Some(inner_name) => find_assert_within_debug_assert(cx, expr, expn, Symbol::intern(inner_name))?,\n     };\n     let mut args = ArrayVec::new();\n-    let mut panic_expn = None;\n-    let _: Option<!> = for_each_expr(expr, |e| {\n+    let panic_expn = for_each_expr(expr, |e| {\n         if args.is_full() {\n-            if panic_expn.is_none() && e.span.ctxt() != expr.span.ctxt() {\n-                panic_expn = PanicExpn::parse(cx, e);\n+            match PanicExpn::parse(cx, e) {\n+                Some(expn) => ControlFlow::Break(expn),\n+                None => ControlFlow::Continue(Descend::Yes),\n             }\n-            ControlFlow::Continue(Descend::from(panic_expn.is_none()))\n         } else if is_assert_arg(cx, e, expn) {\n             args.push(e);\n             ControlFlow::Continue(Descend::No)\n@@ -339,6 +365,77 @@ fn is_assert_arg(cx: &LateContext<'_>, expr: &Expr<'_>, assert_expn: ExpnId) ->\n     }\n }\n \n+thread_local! {\n+    /// We preserve the [`FormatArgs`] structs from the early pass for use in the late pass to be\n+    /// able to access the many features of a [`LateContext`].\n+    ///\n+    /// A thread local is used because [`FormatArgs`] is `!Send` and `!Sync`, we are making an\n+    /// assumption that the early pass the populates the map and the later late passes will all be\n+    /// running on the same thread.\n+    static AST_FORMAT_ARGS: RefCell<FxHashMap<Span, FormatArgs>> = {\n+        static CALLED: AtomicBool = AtomicBool::new(false);\n+        debug_assert!(\n+            !CALLED.swap(true, Ordering::SeqCst),\n+            \"incorrect assumption: `AST_FORMAT_ARGS` should only be accessed by a single thread\",\n+        );\n+\n+        RefCell::default()\n+    };\n+}\n+\n+/// Record [`rustc_ast::FormatArgs`] for use in late lint passes, this should only be called by\n+/// `FormatArgsCollector`\n+pub fn collect_ast_format_args(span: Span, format_args: &FormatArgs) {\n+    AST_FORMAT_ARGS.with(|ast_format_args| {\n+        ast_format_args.borrow_mut().insert(span, format_args.clone());\n+    });\n+}\n+\n+/// Calls `callback` with an AST [`FormatArgs`] node if one is found\n+pub fn find_format_args(cx: &LateContext<'_>, start: &Expr<'_>, expn_id: ExpnId, callback: impl FnOnce(&FormatArgs)) {\n+    let format_args_expr = for_each_expr(start, |expr| {\n+        let ctxt = expr.span.ctxt();\n+        if ctxt == start.span.ctxt() {\n+            ControlFlow::Continue(Descend::Yes)\n+        } else if ctxt.outer_expn().is_descendant_of(expn_id)\n+            && macro_backtrace(expr.span)\n+                .map(|macro_call| cx.tcx.item_name(macro_call.def_id))\n+                .any(|name| matches!(name, sym::const_format_args | sym::format_args | sym::format_args_nl))\n+        {\n+            ControlFlow::Break(expr)\n+        } else {\n+            ControlFlow::Continue(Descend::No)\n+        }\n+    });\n+\n+    if let Some(format_args_expr) = format_args_expr {\n+        AST_FORMAT_ARGS.with(|ast_format_args| {\n+            ast_format_args.borrow().get(&format_args_expr.span).map(callback);\n+        });\n+    }\n+}\n+\n+/// Returns the [`Span`] of the value at `index` extended to the previous comma, e.g. for the value\n+/// `10`\n+///\n+/// ```ignore\n+/// format(\"{}.{}\", 10, 11)\n+/// //            ^^^^\n+/// ```\n+pub fn format_arg_removal_span(format_args: &FormatArgs, index: usize) -> Option<Span> {\n+    let ctxt = format_args.span.ctxt();\n+\n+    let current = hygiene::walk_chain(format_args.arguments.by_index(index)?.expr.span, ctxt);\n+\n+    let prev = if index == 0 {\n+        format_args.span\n+    } else {\n+        hygiene::walk_chain(format_args.arguments.by_index(index - 1)?.expr.span, ctxt)\n+    };\n+\n+    Some(current.with_lo(prev.hi()))\n+}\n+\n /// The format string doesn't exist in the HIR, so we reassemble it from source code\n #[derive(Debug)]\n pub struct FormatString {"}, {"sha": "e0ea3952785bb04182e81a9bd2c03b48acf02066", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -16,9 +16,9 @@ use rustc_infer::infer::{\n use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::{\n-    self, AdtDef, AliasTy, AssocKind, Binder, BoundRegion, FnSig, IntTy, List, ParamEnv, Predicate,\n-    PredicateKind, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitableExt,\n-    TypeVisitor, UintTy, VariantDef, VariantDiscr,\n+    self, AdtDef, AliasTy, AssocKind, Binder, BoundRegion, FnSig, IntTy, List, ParamEnv, Predicate, PredicateKind,\n+    Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitableExt, TypeVisitor,\n+    UintTy, VariantDef, VariantDiscr,\n };\n use rustc_middle::ty::{GenericArg, GenericArgKind};\n use rustc_span::symbol::Ident;"}, {"sha": "5c9f76dbbc6006b0c3078c68b9e75743f7377c20", "filename": "declare_clippy_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/declare_clippy_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/declare_clippy_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/declare_clippy_lint%2FCargo.toml?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"declare_clippy_lint\"\n-version = \"0.1.69\"\n+version = \"0.1.70\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "27d32f390035d624fdb9256427a538829cc1b775", "filename": "lintcheck/Cargo.toml", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/lintcheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/lintcheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2FCargo.toml?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -8,12 +8,16 @@ repository = \"https://github.com/rust-lang/rust-clippy\"\n categories = [\"development-tools\"]\n edition = \"2021\"\n publish = false\n+default-run = \"lintcheck\"\n \n [dependencies]\n+anyhow = \"1.0.69\"\n cargo_metadata = \"0.15.3\"\n-clap = \"4.1.4\"\n+clap = { version = \"4.1.8\", features = [\"derive\", \"env\"] }\n+crates_io_api = \"0.8.1\"\n crossbeam-channel = \"0.5.6\"\n flate2 = \"1.0\"\n+indicatif = \"0.17.3\"\n rayon = \"1.5.1\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0.85\"\n@@ -24,3 +28,11 @@ walkdir = \"2.3\"\n \n [features]\n deny-warnings = []\n+\n+[[bin]]\n+name = \"lintcheck\"\n+path = \"src/main.rs\"\n+\n+[[bin]]\n+name = \"popular-crates\"\n+path = \"src/popular-crates.rs\""}, {"sha": "e997eb47e321f86766374e3234cbd640b91ef1c4", "filename": "lintcheck/README.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/lintcheck%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/lintcheck%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2FREADME.md?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -25,6 +25,15 @@ the repo root.\n \n The results will then be saved to `lintcheck-logs/custom_logs.toml`.\n \n+The `custom.toml` file may be built using <https://crates.io> recently most\n+downloaded crates by using the `popular-crates` binary from the `lintcheck`\n+directory. For example, to retrieve the 100 recently most downloaded crates:\n+\n+```\n+cargo run --release --bin popular-crates -- -n 100 custom.toml\n+```\n+\n+\n ### Configuring the Crate Sources\n \n The sources to check are saved in a `toml` file. There are three types of"}, {"sha": "3f01e9bb0a7172285d55956f7887981edcbb75b3", "filename": "lintcheck/src/config.rs", "status": "modified", "additions": 54, "deletions": 106, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/lintcheck%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/lintcheck%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fconfig.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,131 +1,79 @@\n-use clap::{Arg, ArgAction, ArgMatches, Command};\n-use std::env;\n-use std::path::PathBuf;\n+use clap::Parser;\n+use std::{num::NonZeroUsize, path::PathBuf};\n \n-fn get_clap_config() -> ArgMatches {\n-    Command::new(\"lintcheck\")\n-        .about(\"run clippy on a set of crates and check output\")\n-        .args([\n-            Arg::new(\"only\")\n-                .action(ArgAction::Set)\n-                .value_name(\"CRATE\")\n-                .long(\"only\")\n-                .help(\"Only process a single crate of the list\"),\n-            Arg::new(\"crates-toml\")\n-                .action(ArgAction::Set)\n-                .value_name(\"CRATES-SOURCES-TOML-PATH\")\n-                .long(\"crates-toml\")\n-                .help(\"Set the path for a crates.toml where lintcheck should read the sources from\"),\n-            Arg::new(\"threads\")\n-                .action(ArgAction::Set)\n-                .value_name(\"N\")\n-                .value_parser(clap::value_parser!(usize))\n-                .short('j')\n-                .long(\"jobs\")\n-                .help(\"Number of threads to use, 0 automatic choice\"),\n-            Arg::new(\"fix\")\n-                .long(\"fix\")\n-                .help(\"Runs cargo clippy --fix and checks if all suggestions apply\"),\n-            Arg::new(\"filter\")\n-                .long(\"filter\")\n-                .action(ArgAction::Append)\n-                .value_name(\"clippy_lint_name\")\n-                .help(\"Apply a filter to only collect specified lints, this also overrides `allow` attributes\"),\n-            Arg::new(\"markdown\")\n-                .long(\"markdown\")\n-                .help(\"Change the reports table to use markdown links\"),\n-            Arg::new(\"recursive\")\n-                .long(\"recursive\")\n-                .help(\"Run clippy on the dependencies of crates specified in crates-toml\")\n-                .conflicts_with(\"threads\")\n-                .conflicts_with(\"fix\"),\n-        ])\n-        .get_matches()\n-}\n-\n-#[derive(Debug, Clone)]\n+#[derive(Clone, Debug, Parser)]\n pub(crate) struct LintcheckConfig {\n-    /// max number of jobs to spawn (default 1)\n+    /// Number of threads to use (default: all unless --fix or --recursive)\n+    #[clap(\n+        long = \"jobs\",\n+        short = 'j',\n+        value_name = \"N\",\n+        default_value_t = 0,\n+        hide_default_value = true\n+    )]\n     pub max_jobs: usize,\n-    /// we read the sources to check from here\n+    /// Set the path for a crates.toml where lintcheck should read the sources from\n+    #[clap(\n+        long = \"crates-toml\",\n+        value_name = \"CRATES-SOURCES-TOML-PATH\",\n+        default_value = \"lintcheck/lintcheck_crates.toml\",\n+        hide_default_value = true,\n+        env = \"LINTCHECK_TOML\",\n+        hide_env = true\n+    )]\n     pub sources_toml_path: PathBuf,\n-    /// we save the clippy lint results here\n-    pub lintcheck_results_path: PathBuf,\n-    /// Check only a specified package\n+    /// File to save the clippy lint results here\n+    #[clap(skip = \"\")]\n+    pub lintcheck_results_path: PathBuf, // Overridden in new()\n+    /// Only process a single crate on the list\n+    #[clap(long, value_name = \"CRATE\")]\n     pub only: Option<String>,\n-    /// whether to just run --fix and not collect all the warnings\n+    /// Runs cargo clippy --fix and checks if all suggestions apply\n+    #[clap(long, conflicts_with(\"max_jobs\"))]\n     pub fix: bool,\n-    /// A list of lints that this lintcheck run should focus on\n+    /// Apply a filter to only collect specified lints, this also overrides `allow` attributes\n+    #[clap(long = \"filter\", value_name = \"clippy_lint_name\", use_value_delimiter = true)]\n     pub lint_filter: Vec<String>,\n-    /// Indicate if the output should support markdown syntax\n+    /// Change the reports table to use markdown links\n+    #[clap(long)]\n     pub markdown: bool,\n-    /// Run clippy on the dependencies of crates\n+    /// Run clippy on the dependencies of crates specified in crates-toml\n+    #[clap(long, conflicts_with(\"max_jobs\"))]\n     pub recursive: bool,\n }\n \n impl LintcheckConfig {\n     pub fn new() -> Self {\n-        let clap_config = get_clap_config();\n-\n-        // first, check if we got anything passed via the LINTCHECK_TOML env var,\n-        // if not, ask clap if we got any value for --crates-toml  <foo>\n-        // if not, use the default \"lintcheck/lintcheck_crates.toml\"\n-        let sources_toml = env::var(\"LINTCHECK_TOML\").unwrap_or_else(|_| {\n-            clap_config\n-                .get_one::<String>(\"crates-toml\")\n-                .map_or(\"lintcheck/lintcheck_crates.toml\", |s| &**s)\n-                .into()\n-        });\n-\n-        let markdown = clap_config.contains_id(\"markdown\");\n-        let sources_toml_path = PathBuf::from(sources_toml);\n+        let mut config = LintcheckConfig::parse();\n \n         // for the path where we save the lint results, get the filename without extension (so for\n         // wasd.toml, use \"wasd\"...)\n-        let filename: PathBuf = sources_toml_path.file_stem().unwrap().into();\n-        let lintcheck_results_path = PathBuf::from(format!(\n+        let filename: PathBuf = config.sources_toml_path.file_stem().unwrap().into();\n+        config.lintcheck_results_path = PathBuf::from(format!(\n             \"lintcheck-logs/{}_logs.{}\",\n             filename.display(),\n-            if markdown { \"md\" } else { \"txt\" }\n+            if config.markdown { \"md\" } else { \"txt\" }\n         ));\n \n-        // look at the --threads arg, if 0 is passed, ask rayon rayon how many threads it would spawn and\n-        // use half of that for the physical core count\n-        // by default use a single thread\n-        let max_jobs = match clap_config.get_one::<usize>(\"threads\") {\n-            Some(&0) => {\n-                // automatic choice\n-                // Rayon seems to return thread count so half that for core count\n-                rayon::current_num_threads() / 2\n-            },\n-            Some(&threads) => threads,\n-            // no -j passed, use a single thread\n-            None => 1,\n+        // look at the --threads arg, if 0 is passed, use the threads count\n+        if config.max_jobs == 0 {\n+            config.max_jobs = if config.fix || config.recursive {\n+                1\n+            } else {\n+                std::thread::available_parallelism().map_or(1, NonZeroUsize::get)\n+            };\n         };\n \n-        let lint_filter: Vec<String> = clap_config\n-            .get_many::<String>(\"filter\")\n-            .map(|iter| {\n-                iter.map(|lint_name| {\n-                    let mut filter = lint_name.replace('_', \"-\");\n-                    if !filter.starts_with(\"clippy::\") {\n-                        filter.insert_str(0, \"clippy::\");\n-                    }\n-                    filter\n-                })\n-                .collect()\n-            })\n-            .unwrap_or_default();\n-\n-        LintcheckConfig {\n-            max_jobs,\n-            sources_toml_path,\n-            lintcheck_results_path,\n-            only: clap_config.get_one::<String>(\"only\").map(String::from),\n-            fix: clap_config.contains_id(\"fix\"),\n-            lint_filter,\n-            markdown,\n-            recursive: clap_config.contains_id(\"recursive\"),\n+        for lint_name in &mut config.lint_filter {\n+            *lint_name = format!(\n+                \"clippy::{}\",\n+                lint_name\n+                    .strip_prefix(\"clippy::\")\n+                    .unwrap_or(lint_name)\n+                    .replace('_', \"-\")\n+            );\n         }\n+\n+        config\n     }\n }"}, {"sha": "fdab984ad86cb3fe400e33644a8a33233c839d58", "filename": "lintcheck/src/popular-crates.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/lintcheck%2Fsrc%2Fpopular-crates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/lintcheck%2Fsrc%2Fpopular-crates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fpopular-crates.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -0,0 +1,65 @@\n+#![deny(clippy::pedantic)]\n+\n+use clap::Parser;\n+use crates_io_api::{CratesQueryBuilder, Sort, SyncClient};\n+use indicatif::ProgressBar;\n+use std::collections::HashSet;\n+use std::fs::File;\n+use std::io::{BufWriter, Write};\n+use std::path::PathBuf;\n+use std::time::Duration;\n+\n+#[derive(Parser)]\n+struct Opts {\n+    /// Output TOML file name\n+    output: PathBuf,\n+    /// Number of crate names to download\n+    #[clap(short, long, default_value_t = 100)]\n+    number: usize,\n+    /// Do not output progress\n+    #[clap(short, long)]\n+    quiet: bool,\n+}\n+\n+fn main() -> anyhow::Result<()> {\n+    let opts = Opts::parse();\n+    let mut output = BufWriter::new(File::create(opts.output)?);\n+    output.write_all(b\"[crates]\\n\")?;\n+    let client = SyncClient::new(\n+        \"clippy/lintcheck (github.com/rust-lang/rust-clippy/)\",\n+        Duration::from_secs(1),\n+    )?;\n+    let mut seen_crates = HashSet::new();\n+    let pb = if opts.quiet {\n+        None\n+    } else {\n+        Some(ProgressBar::new(opts.number as u64))\n+    };\n+    let mut query = CratesQueryBuilder::new()\n+        .sort(Sort::RecentDownloads)\n+        .page_size(100)\n+        .build();\n+    while seen_crates.len() < opts.number {\n+        let retrieved = client.crates(query.clone())?.crates;\n+        if retrieved.is_empty() {\n+            eprintln!(\"No more than {} crates available from API\", seen_crates.len());\n+            break;\n+        }\n+        for c in retrieved {\n+            if seen_crates.insert(c.name.clone()) {\n+                output.write_all(\n+                    format!(\n+                        \"{} = {{ name = '{}', versions = ['{}'] }}\\n\",\n+                        c.name, c.name, c.max_version\n+                    )\n+                    .as_bytes(),\n+                )?;\n+                if let Some(pb) = &pb {\n+                    pb.inc(1);\n+                }\n+            }\n+        }\n+        query.set_page(query.page() + 1);\n+    }\n+    Ok(())\n+}"}, {"sha": "d788c6359d7a42f20477fcfd2b7825851b752d22", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2023-02-25\"\n+channel = \"nightly-2023-03-10\"\n components = [\"cargo\", \"llvm-tools\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "f08393c303ef88eae8f4e5d456286849cb30fe6e", "filename": "src/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -176,7 +176,7 @@ Common options:\n         --rustc              Pass all args to rustc\n     -V, --version            Print version info and exit\n \n-Other options are the same as `cargo check`.\n+For the other options see `cargo check --help`.\n \n To allow or deny a lint from the command line you can use `cargo clippy --`\n with:"}, {"sha": "c5e9b96cf3fcc3fb5627c386750b94ecf83b1a52", "filename": "src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -18,7 +18,7 @@ Common options:\n     -V, --version            Print version info and exit\n     --explain LINT           Print the documentation for a given lint\n \n-Other options are the same as `cargo check`.\n+For the other options see `cargo check --help`.\n \n To allow or deny a lint from the command line you can use `cargo clippy --`\n with:"}, {"sha": "9643c2c970704a35dd343193a01807755dc9a8ae", "filename": "tests/dogfood.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -7,6 +7,7 @@\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![warn(rust_2018_idioms, unused_lifetimes)]\n \n+use itertools::Itertools;\n use std::path::PathBuf;\n use std::process::Command;\n use test_utils::IS_RUSTC_TEST_SUITE;\n@@ -19,17 +20,27 @@ fn dogfood_clippy() {\n         return;\n     }\n \n+    let mut failed_packages = Vec::new();\n+\n     // \"\" is the root package\n-    for package in &[\n+    for package in [\n         \"\",\n         \"clippy_dev\",\n         \"clippy_lints\",\n         \"clippy_utils\",\n         \"lintcheck\",\n         \"rustc_tools_util\",\n     ] {\n-        run_clippy_for_package(package, &[\"-D\", \"clippy::all\", \"-D\", \"clippy::pedantic\"]);\n+        if !run_clippy_for_package(package, &[\"-D\", \"clippy::all\", \"-D\", \"clippy::pedantic\"]) {\n+            failed_packages.push(if package.is_empty() { \"root\" } else { package });\n+        }\n     }\n+\n+    assert!(\n+        !failed_packages.is_empty(),\n+        \"Dogfood failed for packages `{}`\",\n+        failed_packages.iter().format(\", \"),\n+    )\n }\n \n #[test]\n@@ -71,7 +82,7 @@ fn run_metadata_collection_lint() {\n     run_clippy_for_package(\"clippy_lints\", &[\"-A\", \"unfulfilled_lint_expectations\"]);\n }\n \n-fn run_clippy_for_package(project: &str, args: &[&str]) {\n+fn run_clippy_for_package(project: &str, args: &[&str]) -> bool {\n     let root_dir = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n \n     let mut command = Command::new(&*test_utils::CARGO_CLIPPY_PATH);\n@@ -107,5 +118,5 @@ fn run_clippy_for_package(project: &str, args: &[&str]) {\n     println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n     println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n \n-    assert!(output.status.success());\n+    output.status.success()\n }"}, {"sha": "ee7d2ba444b20441abc353e858007e6222ba8691", "filename": "tests/ui/arithmetic_side_effects.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Farithmetic_side_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Farithmetic_side_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic_side_effects.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -45,24 +45,32 @@ impl_arith!(\n     Div, Custom, Custom, div;\n     Mul, Custom, Custom, mul;\n     Rem, Custom, Custom, rem;\n+    Shl, Custom, Custom, shl;\n+    Shr, Custom, Custom, shr;\n     Sub, Custom, Custom, sub;\n \n     Add, Custom, &Custom, add;\n     Div, Custom, &Custom, div;\n     Mul, Custom, &Custom, mul;\n     Rem, Custom, &Custom, rem;\n+    Shl, Custom, &Custom, shl;\n+    Shr, Custom, &Custom, shr;\n     Sub, Custom, &Custom, sub;\n \n     Add, &Custom, Custom, add;\n     Div, &Custom, Custom, div;\n     Mul, &Custom, Custom, mul;\n     Rem, &Custom, Custom, rem;\n+    Shl, &Custom, Custom, shl;\n+    Shr, &Custom, Custom, shr;\n     Sub, &Custom, Custom, sub;\n \n     Add, &Custom, &Custom, add;\n     Div, &Custom, &Custom, div;\n     Mul, &Custom, &Custom, mul;\n     Rem, &Custom, &Custom, rem;\n+    Shl, &Custom, &Custom, shl;\n+    Shr, &Custom, &Custom, shr;\n     Sub, &Custom, &Custom, sub;\n );\n \n@@ -71,24 +79,32 @@ impl_assign_arith!(\n     DivAssign, Custom, Custom, div_assign;\n     MulAssign, Custom, Custom, mul_assign;\n     RemAssign, Custom, Custom, rem_assign;\n+    ShlAssign, Custom, Custom, shl_assign;\n+    ShrAssign, Custom, Custom, shr_assign;\n     SubAssign, Custom, Custom, sub_assign;\n \n     AddAssign, Custom, &Custom, add_assign;\n     DivAssign, Custom, &Custom, div_assign;\n     MulAssign, Custom, &Custom, mul_assign;\n     RemAssign, Custom, &Custom, rem_assign;\n+    ShlAssign, Custom, &Custom, shl_assign;\n+    ShrAssign, Custom, &Custom, shr_assign;\n     SubAssign, Custom, &Custom, sub_assign;\n \n     AddAssign, &Custom, Custom, add_assign;\n     DivAssign, &Custom, Custom, div_assign;\n     MulAssign, &Custom, Custom, mul_assign;\n     RemAssign, &Custom, Custom, rem_assign;\n+    ShlAssign, &Custom, Custom, shl_assign;\n+    ShrAssign, &Custom, Custom, shr_assign;\n     SubAssign, &Custom, Custom, sub_assign;\n \n     AddAssign, &Custom, &Custom, add_assign;\n     DivAssign, &Custom, &Custom, div_assign;\n     MulAssign, &Custom, &Custom, mul_assign;\n     RemAssign, &Custom, &Custom, rem_assign;\n+    ShlAssign, &Custom, &Custom, shl_assign;\n+    ShrAssign, &Custom, &Custom, shr_assign;\n     SubAssign, &Custom, &Custom, sub_assign;\n );\n \n@@ -297,6 +313,10 @@ pub fn unknown_ops_or_runtime_ops_that_can_overflow() {\n     _custom %= &Custom;\n     _custom *= Custom;\n     _custom *= &Custom;\n+    _custom >>= Custom;\n+    _custom >>= &Custom;\n+    _custom <<= Custom;\n+    _custom <<= &Custom;\n     _custom += -Custom;\n     _custom += &-Custom;\n     _custom -= -Custom;\n@@ -307,6 +327,10 @@ pub fn unknown_ops_or_runtime_ops_that_can_overflow() {\n     _custom %= &-Custom;\n     _custom *= -Custom;\n     _custom *= &-Custom;\n+    _custom >>= -Custom;\n+    _custom >>= &-Custom;\n+    _custom <<= -Custom;\n+    _custom <<= &-Custom;\n \n     // Binary\n     _n = _n + 1;\n@@ -347,6 +371,10 @@ pub fn unknown_ops_or_runtime_ops_that_can_overflow() {\n     _custom = Custom + &Custom;\n     _custom = &Custom + Custom;\n     _custom = &Custom + &Custom;\n+    _custom = _custom >> _custom;\n+    _custom = _custom >> &_custom;\n+    _custom = Custom << _custom;\n+    _custom = &Custom << _custom;\n \n     // Unary\n     _n = -_n;"}, {"sha": "3895f08964ce8b32ea6611a9a2a833398f6525d9", "filename": "tests/ui/arithmetic_side_effects.stderr", "status": "modified", "additions": 168, "deletions": 120, "changes": 288, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Farithmetic_side_effects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Farithmetic_side_effects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic_side_effects.stderr?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,598 +1,646 @@\n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:270:5\n+  --> $DIR/arithmetic_side_effects.rs:286:5\n    |\n LL |     _n += 1;\n    |     ^^^^^^^\n    |\n    = note: `-D clippy::arithmetic-side-effects` implied by `-D warnings`\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:271:5\n+  --> $DIR/arithmetic_side_effects.rs:287:5\n    |\n LL |     _n += &1;\n    |     ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:272:5\n+  --> $DIR/arithmetic_side_effects.rs:288:5\n    |\n LL |     _n -= 1;\n    |     ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:273:5\n+  --> $DIR/arithmetic_side_effects.rs:289:5\n    |\n LL |     _n -= &1;\n    |     ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:274:5\n+  --> $DIR/arithmetic_side_effects.rs:290:5\n    |\n LL |     _n /= 0;\n    |     ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:275:5\n+  --> $DIR/arithmetic_side_effects.rs:291:5\n    |\n LL |     _n /= &0;\n    |     ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:276:5\n+  --> $DIR/arithmetic_side_effects.rs:292:5\n    |\n LL |     _n %= 0;\n    |     ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:277:5\n+  --> $DIR/arithmetic_side_effects.rs:293:5\n    |\n LL |     _n %= &0;\n    |     ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:278:5\n+  --> $DIR/arithmetic_side_effects.rs:294:5\n    |\n LL |     _n *= 2;\n    |     ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:279:5\n+  --> $DIR/arithmetic_side_effects.rs:295:5\n    |\n LL |     _n *= &2;\n    |     ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:280:5\n+  --> $DIR/arithmetic_side_effects.rs:296:5\n    |\n LL |     _n += -1;\n    |     ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:281:5\n+  --> $DIR/arithmetic_side_effects.rs:297:5\n    |\n LL |     _n += &-1;\n    |     ^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:282:5\n+  --> $DIR/arithmetic_side_effects.rs:298:5\n    |\n LL |     _n -= -1;\n    |     ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:283:5\n+  --> $DIR/arithmetic_side_effects.rs:299:5\n    |\n LL |     _n -= &-1;\n    |     ^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:284:5\n+  --> $DIR/arithmetic_side_effects.rs:300:5\n    |\n LL |     _n /= -0;\n    |     ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:285:5\n+  --> $DIR/arithmetic_side_effects.rs:301:5\n    |\n LL |     _n /= &-0;\n    |     ^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:286:5\n+  --> $DIR/arithmetic_side_effects.rs:302:5\n    |\n LL |     _n %= -0;\n    |     ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:287:5\n+  --> $DIR/arithmetic_side_effects.rs:303:5\n    |\n LL |     _n %= &-0;\n    |     ^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:288:5\n+  --> $DIR/arithmetic_side_effects.rs:304:5\n    |\n LL |     _n *= -2;\n    |     ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:289:5\n+  --> $DIR/arithmetic_side_effects.rs:305:5\n    |\n LL |     _n *= &-2;\n    |     ^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:290:5\n+  --> $DIR/arithmetic_side_effects.rs:306:5\n    |\n LL |     _custom += Custom;\n    |     ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:291:5\n+  --> $DIR/arithmetic_side_effects.rs:307:5\n    |\n LL |     _custom += &Custom;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:292:5\n+  --> $DIR/arithmetic_side_effects.rs:308:5\n    |\n LL |     _custom -= Custom;\n    |     ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:293:5\n+  --> $DIR/arithmetic_side_effects.rs:309:5\n    |\n LL |     _custom -= &Custom;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:294:5\n+  --> $DIR/arithmetic_side_effects.rs:310:5\n    |\n LL |     _custom /= Custom;\n    |     ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:295:5\n+  --> $DIR/arithmetic_side_effects.rs:311:5\n    |\n LL |     _custom /= &Custom;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:296:5\n+  --> $DIR/arithmetic_side_effects.rs:312:5\n    |\n LL |     _custom %= Custom;\n    |     ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:297:5\n+  --> $DIR/arithmetic_side_effects.rs:313:5\n    |\n LL |     _custom %= &Custom;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:298:5\n+  --> $DIR/arithmetic_side_effects.rs:314:5\n    |\n LL |     _custom *= Custom;\n    |     ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:299:5\n+  --> $DIR/arithmetic_side_effects.rs:315:5\n    |\n LL |     _custom *= &Custom;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:300:5\n+  --> $DIR/arithmetic_side_effects.rs:316:5\n+   |\n+LL |     _custom >>= Custom;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:317:5\n+   |\n+LL |     _custom >>= &Custom;\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:318:5\n+   |\n+LL |     _custom <<= Custom;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:319:5\n+   |\n+LL |     _custom <<= &Custom;\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:320:5\n    |\n LL |     _custom += -Custom;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:301:5\n+  --> $DIR/arithmetic_side_effects.rs:321:5\n    |\n LL |     _custom += &-Custom;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:302:5\n+  --> $DIR/arithmetic_side_effects.rs:322:5\n    |\n LL |     _custom -= -Custom;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:303:5\n+  --> $DIR/arithmetic_side_effects.rs:323:5\n    |\n LL |     _custom -= &-Custom;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:304:5\n+  --> $DIR/arithmetic_side_effects.rs:324:5\n    |\n LL |     _custom /= -Custom;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:305:5\n+  --> $DIR/arithmetic_side_effects.rs:325:5\n    |\n LL |     _custom /= &-Custom;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:306:5\n+  --> $DIR/arithmetic_side_effects.rs:326:5\n    |\n LL |     _custom %= -Custom;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:307:5\n+  --> $DIR/arithmetic_side_effects.rs:327:5\n    |\n LL |     _custom %= &-Custom;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:308:5\n+  --> $DIR/arithmetic_side_effects.rs:328:5\n    |\n LL |     _custom *= -Custom;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:309:5\n+  --> $DIR/arithmetic_side_effects.rs:329:5\n    |\n LL |     _custom *= &-Custom;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:312:10\n+  --> $DIR/arithmetic_side_effects.rs:330:5\n+   |\n+LL |     _custom >>= -Custom;\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:331:5\n+   |\n+LL |     _custom >>= &-Custom;\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:332:5\n+   |\n+LL |     _custom <<= -Custom;\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:333:5\n+   |\n+LL |     _custom <<= &-Custom;\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:336:10\n    |\n LL |     _n = _n + 1;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:313:10\n+  --> $DIR/arithmetic_side_effects.rs:337:10\n    |\n LL |     _n = _n + &1;\n    |          ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:314:10\n+  --> $DIR/arithmetic_side_effects.rs:338:10\n    |\n LL |     _n = 1 + _n;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:315:10\n+  --> $DIR/arithmetic_side_effects.rs:339:10\n    |\n LL |     _n = &1 + _n;\n    |          ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:316:10\n+  --> $DIR/arithmetic_side_effects.rs:340:10\n    |\n LL |     _n = _n - 1;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:317:10\n+  --> $DIR/arithmetic_side_effects.rs:341:10\n    |\n LL |     _n = _n - &1;\n    |          ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:318:10\n+  --> $DIR/arithmetic_side_effects.rs:342:10\n    |\n LL |     _n = 1 - _n;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:319:10\n+  --> $DIR/arithmetic_side_effects.rs:343:10\n    |\n LL |     _n = &1 - _n;\n    |          ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:320:10\n+  --> $DIR/arithmetic_side_effects.rs:344:10\n    |\n LL |     _n = _n / 0;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:321:10\n+  --> $DIR/arithmetic_side_effects.rs:345:10\n    |\n LL |     _n = _n / &0;\n    |          ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:322:10\n+  --> $DIR/arithmetic_side_effects.rs:346:10\n    |\n LL |     _n = _n % 0;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:323:10\n+  --> $DIR/arithmetic_side_effects.rs:347:10\n    |\n LL |     _n = _n % &0;\n    |          ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:324:10\n+  --> $DIR/arithmetic_side_effects.rs:348:10\n    |\n LL |     _n = _n * 2;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:325:10\n+  --> $DIR/arithmetic_side_effects.rs:349:10\n    |\n LL |     _n = _n * &2;\n    |          ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:326:10\n+  --> $DIR/arithmetic_side_effects.rs:350:10\n    |\n LL |     _n = 2 * _n;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:327:10\n+  --> $DIR/arithmetic_side_effects.rs:351:10\n    |\n LL |     _n = &2 * _n;\n    |          ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:328:10\n+  --> $DIR/arithmetic_side_effects.rs:352:10\n    |\n LL |     _n = 23 + &85;\n    |          ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:329:10\n+  --> $DIR/arithmetic_side_effects.rs:353:10\n    |\n LL |     _n = &23 + 85;\n    |          ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:330:10\n+  --> $DIR/arithmetic_side_effects.rs:354:10\n    |\n LL |     _n = &23 + &85;\n    |          ^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:331:15\n+  --> $DIR/arithmetic_side_effects.rs:355:15\n    |\n LL |     _custom = _custom + _custom;\n    |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:332:15\n+  --> $DIR/arithmetic_side_effects.rs:356:15\n    |\n LL |     _custom = _custom + &_custom;\n    |               ^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:333:15\n+  --> $DIR/arithmetic_side_effects.rs:357:15\n    |\n LL |     _custom = Custom + _custom;\n    |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:334:15\n+  --> $DIR/arithmetic_side_effects.rs:358:15\n    |\n LL |     _custom = &Custom + _custom;\n    |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:335:15\n+  --> $DIR/arithmetic_side_effects.rs:359:15\n    |\n LL |     _custom = _custom - Custom;\n    |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:336:15\n+  --> $DIR/arithmetic_side_effects.rs:360:15\n    |\n LL |     _custom = _custom - &Custom;\n    |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:337:15\n+  --> $DIR/arithmetic_side_effects.rs:361:15\n    |\n LL |     _custom = Custom - _custom;\n    |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:338:15\n+  --> $DIR/arithmetic_side_effects.rs:362:15\n    |\n LL |     _custom = &Custom - _custom;\n    |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:339:15\n+  --> $DIR/arithmetic_side_effects.rs:363:15\n    |\n LL |     _custom = _custom / Custom;\n    |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:340:15\n+  --> $DIR/arithmetic_side_effects.rs:364:15\n    |\n LL |     _custom = _custom / &Custom;\n    |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:341:15\n+  --> $DIR/arithmetic_side_effects.rs:365:15\n    |\n LL |     _custom = _custom % Custom;\n    |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:342:15\n+  --> $DIR/arithmetic_side_effects.rs:366:15\n    |\n LL |     _custom = _custom % &Custom;\n    |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:343:15\n+  --> $DIR/arithmetic_side_effects.rs:367:15\n    |\n LL |     _custom = _custom * Custom;\n    |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:344:15\n+  --> $DIR/arithmetic_side_effects.rs:368:15\n    |\n LL |     _custom = _custom * &Custom;\n    |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:345:15\n+  --> $DIR/arithmetic_side_effects.rs:369:15\n    |\n LL |     _custom = Custom * _custom;\n    |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:346:15\n+  --> $DIR/arithmetic_side_effects.rs:370:15\n    |\n LL |     _custom = &Custom * _custom;\n    |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:347:15\n+  --> $DIR/arithmetic_side_effects.rs:371:15\n    |\n LL |     _custom = Custom + &Custom;\n    |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:348:15\n+  --> $DIR/arithmetic_side_effects.rs:372:15\n    |\n LL |     _custom = &Custom + Custom;\n    |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:349:15\n+  --> $DIR/arithmetic_side_effects.rs:373:15\n    |\n LL |     _custom = &Custom + &Custom;\n    |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:352:10\n+  --> $DIR/arithmetic_side_effects.rs:374:15\n+   |\n+LL |     _custom = _custom >> _custom;\n+   |               ^^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:375:15\n+   |\n+LL |     _custom = _custom >> &_custom;\n+   |               ^^^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:376:15\n+   |\n+LL |     _custom = Custom << _custom;\n+   |               ^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:377:15\n+   |\n+LL |     _custom = &Custom << _custom;\n+   |               ^^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:380:10\n    |\n LL |     _n = -_n;\n    |          ^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:353:10\n+  --> $DIR/arithmetic_side_effects.rs:381:10\n    |\n LL |     _n = -&_n;\n    |          ^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:354:15\n+  --> $DIR/arithmetic_side_effects.rs:382:15\n    |\n LL |     _custom = -_custom;\n    |               ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:355:15\n+  --> $DIR/arithmetic_side_effects.rs:383:15\n    |\n LL |     _custom = -&_custom;\n    |               ^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:364:5\n+  --> $DIR/arithmetic_side_effects.rs:392:5\n    |\n LL |     1 + i;\n    |     ^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:365:5\n+  --> $DIR/arithmetic_side_effects.rs:393:5\n    |\n LL |     i * 2;\n    |     ^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:367:5\n+  --> $DIR/arithmetic_side_effects.rs:395:5\n    |\n LL |     i - 2 + 2 - i;\n    |     ^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:368:5\n+  --> $DIR/arithmetic_side_effects.rs:396:5\n    |\n LL |     -i;\n    |     ^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:369:5\n-   |\n-LL |     i >> 1;\n-   |     ^^^^^^\n-\n-error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:370:5\n-   |\n-LL |     i << 1;\n-   |     ^^^^^^\n-\n-error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:379:5\n+  --> $DIR/arithmetic_side_effects.rs:407:5\n    |\n LL |     i += 1;\n    |     ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:380:5\n+  --> $DIR/arithmetic_side_effects.rs:408:5\n    |\n LL |     i -= 1;\n    |     ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:381:5\n+  --> $DIR/arithmetic_side_effects.rs:409:5\n    |\n LL |     i *= 2;\n    |     ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:383:5\n+  --> $DIR/arithmetic_side_effects.rs:411:5\n    |\n LL |     i /= 0;\n    |     ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:385:5\n+  --> $DIR/arithmetic_side_effects.rs:413:5\n    |\n LL |     i /= var1;\n    |     ^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:386:5\n+  --> $DIR/arithmetic_side_effects.rs:414:5\n    |\n LL |     i /= var2;\n    |     ^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:388:5\n+  --> $DIR/arithmetic_side_effects.rs:416:5\n    |\n LL |     i %= 0;\n    |     ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:390:5\n+  --> $DIR/arithmetic_side_effects.rs:418:5\n    |\n LL |     i %= var1;\n    |     ^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:391:5\n+  --> $DIR/arithmetic_side_effects.rs:419:5\n    |\n LL |     i %= var2;\n    |     ^^^^^^^^^\n \n-error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:392:5\n-   |\n-LL |     i <<= 3;\n-   |     ^^^^^^^\n-\n-error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:393:5\n-   |\n-LL |     i >>= 2;\n-   |     ^^^^^^^\n-\n-error: aborting due to 99 previous errors\n+error: aborting due to 107 previous errors\n "}, {"sha": "579a63ea47722218362879f5dd96ad24dbcd4edc", "filename": "tests/ui/async_yields_async.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fasync_yields_async.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fasync_yields_async.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync_yields_async.fixed?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -2,6 +2,7 @@\n #![feature(lint_reasons)]\n #![feature(async_closure)]\n #![warn(clippy::async_yields_async)]\n+#![allow(clippy::redundant_async_block)]\n \n use core::future::Future;\n use core::pin::Pin;"}, {"sha": "5aec2fb50f6a1d82198ca4f3749c765e4c298213", "filename": "tests/ui/async_yields_async.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fasync_yields_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fasync_yields_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync_yields_async.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -2,6 +2,7 @@\n #![feature(lint_reasons)]\n #![feature(async_closure)]\n #![warn(clippy::async_yields_async)]\n+#![allow(clippy::redundant_async_block)]\n \n use core::future::Future;\n use core::pin::Pin;"}, {"sha": "7f72534832b4ea9e221a3faff428c640d2dc1a54", "filename": "tests/ui/async_yields_async.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fasync_yields_async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fasync_yields_async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync_yields_async.stderr?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,5 +1,5 @@\n error: an async construct yields a type which is itself awaitable\n-  --> $DIR/async_yields_async.rs:39:9\n+  --> $DIR/async_yields_async.rs:40:9\n    |\n LL |        let _h = async {\n    |  _____________________-\n@@ -19,7 +19,7 @@ LL +         }.await\n    |\n \n error: an async construct yields a type which is itself awaitable\n-  --> $DIR/async_yields_async.rs:44:9\n+  --> $DIR/async_yields_async.rs:45:9\n    |\n LL |       let _i = async {\n    |  ____________________-\n@@ -32,7 +32,7 @@ LL | |     };\n    | |_____- outer async construct\n \n error: an async construct yields a type which is itself awaitable\n-  --> $DIR/async_yields_async.rs:50:9\n+  --> $DIR/async_yields_async.rs:51:9\n    |\n LL |        let _j = async || {\n    |  ________________________-\n@@ -51,7 +51,7 @@ LL +         }.await\n    |\n \n error: an async construct yields a type which is itself awaitable\n-  --> $DIR/async_yields_async.rs:55:9\n+  --> $DIR/async_yields_async.rs:56:9\n    |\n LL |       let _k = async || {\n    |  _______________________-\n@@ -64,7 +64,7 @@ LL | |     };\n    | |_____- outer async construct\n \n error: an async construct yields a type which is itself awaitable\n-  --> $DIR/async_yields_async.rs:57:23\n+  --> $DIR/async_yields_async.rs:58:23\n    |\n LL |     let _l = async || CustomFutureType;\n    |                       ^^^^^^^^^^^^^^^^\n@@ -74,7 +74,7 @@ LL |     let _l = async || CustomFutureType;\n    |                       help: consider awaiting this value: `CustomFutureType.await`\n \n error: an async construct yields a type which is itself awaitable\n-  --> $DIR/async_yields_async.rs:63:9\n+  --> $DIR/async_yields_async.rs:64:9\n    |\n LL |       let _m = async || {\n    |  _______________________-"}, {"sha": "068a49486cf8a06b39a8513cdd313bd7e532878d", "filename": "tests/ui/collection_is_never_read.rs", "status": "added", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fcollection_is_never_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fcollection_is_never_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollection_is_never_read.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -0,0 +1,165 @@\n+#![allow(unused)]\n+#![warn(clippy::collection_is_never_read)]\n+\n+use std::collections::{HashMap, HashSet};\n+\n+fn main() {}\n+\n+fn not_a_collection() {\n+    // TODO: Expand `collection_is_never_read` beyond collections?\n+    let mut x = 10; // Ok\n+    x += 1;\n+}\n+\n+fn no_access_at_all() {\n+    // Other lints should catch this.\n+    let x = vec![1, 2, 3]; // Ok\n+}\n+\n+fn write_without_read() {\n+    // The main use case for `collection_is_never_read`.\n+    let mut x = HashMap::new(); // WARNING\n+    x.insert(1, 2);\n+}\n+\n+fn read_without_write() {\n+    let mut x = vec![1, 2, 3]; // Ok\n+    let _ = x.len();\n+}\n+\n+fn write_and_read() {\n+    let mut x = vec![1, 2, 3]; // Ok\n+    x.push(4);\n+    let _ = x.len();\n+}\n+\n+fn write_after_read() {\n+    // TODO: Warn here, but this requires more extensive data flow analysis.\n+    let mut x = vec![1, 2, 3]; // Ok\n+    let _ = x.len();\n+    x.push(4); // Pointless\n+}\n+\n+fn write_before_reassign() {\n+    // TODO: Warn here, but this requires more extensive data flow analysis.\n+    let mut x = HashMap::new(); // Ok\n+    x.insert(1, 2); // Pointless\n+    x = HashMap::new();\n+    let _ = x.len();\n+}\n+\n+fn read_in_closure() {\n+    let mut x = HashMap::new(); // Ok\n+    x.insert(1, 2);\n+    let _ = || {\n+        let _ = x.len();\n+    };\n+}\n+\n+fn write_in_closure() {\n+    let mut x = vec![1, 2, 3]; // WARNING\n+    let _ = || {\n+        x.push(4);\n+    };\n+}\n+\n+fn read_in_format() {\n+    let mut x = HashMap::new(); // Ok\n+    x.insert(1, 2);\n+    format!(\"{x:?}\");\n+}\n+\n+fn shadowing_1() {\n+    let x = HashMap::<usize, usize>::new(); // Ok\n+    let _ = x.len();\n+    let mut x = HashMap::new(); // WARNING\n+    x.insert(1, 2);\n+}\n+\n+fn shadowing_2() {\n+    let mut x = HashMap::new(); // WARNING\n+    x.insert(1, 2);\n+    let x = HashMap::<usize, usize>::new(); // Ok\n+    let _ = x.len();\n+}\n+\n+#[allow(clippy::let_unit_value)]\n+fn fake_read() {\n+    let mut x = vec![1, 2, 3]; // Ok\n+    x.reverse();\n+    // `collection_is_never_read` gets fooled, but other lints should catch this.\n+    let _: () = x.clear();\n+}\n+\n+fn assignment() {\n+    let mut x = vec![1, 2, 3]; // WARNING\n+    let y = vec![4, 5, 6]; // Ok\n+    x = y;\n+}\n+\n+#[allow(clippy::self_assignment)]\n+fn self_assignment() {\n+    let mut x = vec![1, 2, 3]; // WARNING\n+    x = x;\n+}\n+\n+fn method_argument_but_not_target() {\n+    struct MyStruct;\n+    impl MyStruct {\n+        fn my_method(&self, _argument: &[usize]) {}\n+    }\n+    let my_struct = MyStruct;\n+\n+    let mut x = vec![1, 2, 3]; // Ok\n+    x.reverse();\n+    my_struct.my_method(&x);\n+}\n+\n+fn insert_is_not_a_read() {\n+    let mut x = HashSet::new(); // WARNING\n+    x.insert(5);\n+}\n+\n+fn insert_is_a_read() {\n+    let mut x = HashSet::new(); // Ok\n+    if x.insert(5) {\n+        println!(\"5 was inserted\");\n+    }\n+}\n+\n+fn not_read_if_return_value_not_used() {\n+    // `is_empty` does not modify the set, so it's a query. But since the return value is not used, the\n+    // lint does not consider it a read here.\n+    let x = vec![1, 2, 3]; // WARNING\n+    x.is_empty();\n+}\n+\n+fn extension_traits() {\n+    trait VecExt<T> {\n+        fn method_with_side_effect(&self);\n+        fn method_without_side_effect(&self);\n+    }\n+\n+    impl<T> VecExt<T> for Vec<T> {\n+        fn method_with_side_effect(&self) {\n+            println!(\"my length: {}\", self.len());\n+        }\n+        fn method_without_side_effect(&self) {}\n+    }\n+\n+    let x = vec![1, 2, 3]; // Ok\n+    x.method_with_side_effect();\n+\n+    let y = vec![1, 2, 3]; // Ok (false negative)\n+    y.method_without_side_effect();\n+}\n+\n+fn function_argument() {\n+    #[allow(clippy::ptr_arg)]\n+    fn foo<T>(v: &Vec<T>) -> usize {\n+        v.len()\n+    }\n+\n+    let x = vec![1, 2, 3]; // Ok\n+    foo(&x);\n+}"}, {"sha": "7654b74be3d176f4dc4999e4842cad40e11045e7", "filename": "tests/ui/collection_is_never_read.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fcollection_is_never_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fcollection_is_never_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollection_is_never_read.stderr?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -0,0 +1,52 @@\n+error: collection is never read\n+  --> $DIR/collection_is_never_read.rs:21:5\n+   |\n+LL |     let mut x = HashMap::new(); // WARNING\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::collection-is-never-read` implied by `-D warnings`\n+\n+error: collection is never read\n+  --> $DIR/collection_is_never_read.rs:60:5\n+   |\n+LL |     let mut x = vec![1, 2, 3]; // WARNING\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: collection is never read\n+  --> $DIR/collection_is_never_read.rs:75:5\n+   |\n+LL |     let mut x = HashMap::new(); // WARNING\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: collection is never read\n+  --> $DIR/collection_is_never_read.rs:80:5\n+   |\n+LL |     let mut x = HashMap::new(); // WARNING\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: collection is never read\n+  --> $DIR/collection_is_never_read.rs:95:5\n+   |\n+LL |     let mut x = vec![1, 2, 3]; // WARNING\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: collection is never read\n+  --> $DIR/collection_is_never_read.rs:102:5\n+   |\n+LL |     let mut x = vec![1, 2, 3]; // WARNING\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: collection is never read\n+  --> $DIR/collection_is_never_read.rs:119:5\n+   |\n+LL |     let mut x = HashSet::new(); // WARNING\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: collection is never read\n+  --> $DIR/collection_is_never_read.rs:133:5\n+   |\n+LL |     let x = vec![1, 2, 3]; // WARNING\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "af33b10c69388fca78d7f9d3840eaf62193f7b1f", "filename": "tests/ui/crashes/ice-10148.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fcrashes%2Fice-10148.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fcrashes%2Fice-10148.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-10148.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -0,0 +1,9 @@\n+// aux-build:../../auxiliary/proc_macro_with_span.rs\n+\n+extern crate proc_macro_with_span;\n+\n+use proc_macro_with_span::with_span;\n+\n+fn main() {\n+    println!(with_span!(\"\"something \"\"));\n+}"}, {"sha": "f23e4433f95ed1bd48a6999b725d1bcb0431ea38", "filename": "tests/ui/crashes/ice-10148.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fcrashes%2Fice-10148.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fcrashes%2Fice-10148.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-10148.stderr?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -0,0 +1,12 @@\n+error: empty string literal in `println!`\n+  --> $DIR/ice-10148.rs:8:5\n+   |\n+LL |     println!(with_span!(\"\"something \"\"));\n+   |     ^^^^^^^^^^^^^^^^^^^^-----------^^^^^\n+   |                         |\n+   |                         help: remove the empty string\n+   |\n+   = note: `-D clippy::println-empty-string` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ce1895851e2d91d0d28acd024c3bb8e0bb7ca197", "filename": "tests/ui/crashes/ice-6179.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fcrashes%2Fice-6179.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fcrashes%2Fice-6179.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6179.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -2,7 +2,7 @@\n //! The ICE is mainly caused by using `hir_ty_to_ty`. See the discussion in the PR for details.\n \n #![warn(clippy::use_self)]\n-#![allow(dead_code)]\n+#![allow(dead_code, clippy::let_with_type_underscore)]\n \n struct Foo;\n "}, {"sha": "7f5bae60d55d9b4837577bac7c1d630236f0bedb", "filename": "tests/ui/crashes/ice-rust-107877.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fcrashes%2Fice-rust-107877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fcrashes%2Fice-rust-107877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-rust-107877.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -0,0 +1,17 @@\n+#![allow(dead_code)]\n+\n+struct Foo;\n+\n+impl<'a> std::convert::TryFrom<&'a String> for Foo {\n+    type Error = std::convert::Infallible;\n+\n+    fn try_from(_: &'a String) -> Result<Self, Self::Error> {\n+        Ok(Foo)\n+    }\n+}\n+\n+fn find<E>(_: impl std::convert::TryInto<Foo, Error = E>) {}\n+\n+fn main() {\n+    find(&String::new());\n+}"}, {"sha": "a9e5fd159afca95e288e7269ce147da7b2cc7a96", "filename": "tests/ui/default_numeric_fallback_f64.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fdefault_numeric_fallback_f64.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fdefault_numeric_fallback_f64.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_f64.fixed?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -9,7 +9,8 @@\n     clippy::unnecessary_operation,\n     clippy::branches_sharing_code,\n     clippy::match_single_binding,\n-    clippy::let_unit_value\n+    clippy::let_unit_value,\n+    clippy::let_with_type_underscore\n )]\n \n #[macro_use]"}, {"sha": "085f8f452b2e6eed4d52af8f2ab6171af276e9db", "filename": "tests/ui/default_numeric_fallback_f64.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fdefault_numeric_fallback_f64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fdefault_numeric_fallback_f64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_f64.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -9,7 +9,8 @@\n     clippy::unnecessary_operation,\n     clippy::branches_sharing_code,\n     clippy::match_single_binding,\n-    clippy::let_unit_value\n+    clippy::let_unit_value,\n+    clippy::let_with_type_underscore\n )]\n \n #[macro_use]"}, {"sha": "44c6f1a9bea9b9058783276ac8d49b31724fb068", "filename": "tests/ui/default_numeric_fallback_f64.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fdefault_numeric_fallback_f64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fdefault_numeric_fallback_f64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_f64.stderr?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,145 +1,145 @@\n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:21:17\n+  --> $DIR/default_numeric_fallback_f64.rs:22:17\n    |\n LL |         let x = 0.12;\n    |                 ^^^^ help: consider adding suffix: `0.12_f64`\n    |\n    = note: `-D clippy::default-numeric-fallback` implied by `-D warnings`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:22:18\n+  --> $DIR/default_numeric_fallback_f64.rs:23:18\n    |\n LL |         let x = [1., 2., 3.];\n    |                  ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:22:22\n+  --> $DIR/default_numeric_fallback_f64.rs:23:22\n    |\n LL |         let x = [1., 2., 3.];\n    |                      ^^ help: consider adding suffix: `2.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:22:26\n+  --> $DIR/default_numeric_fallback_f64.rs:23:26\n    |\n LL |         let x = [1., 2., 3.];\n    |                          ^^ help: consider adding suffix: `3.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:23:28\n+  --> $DIR/default_numeric_fallback_f64.rs:24:28\n    |\n LL |         let x = if true { (1., 2.) } else { (3., 4.) };\n    |                            ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:23:32\n+  --> $DIR/default_numeric_fallback_f64.rs:24:32\n    |\n LL |         let x = if true { (1., 2.) } else { (3., 4.) };\n    |                                ^^ help: consider adding suffix: `2.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:23:46\n+  --> $DIR/default_numeric_fallback_f64.rs:24:46\n    |\n LL |         let x = if true { (1., 2.) } else { (3., 4.) };\n    |                                              ^^ help: consider adding suffix: `3.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:23:50\n+  --> $DIR/default_numeric_fallback_f64.rs:24:50\n    |\n LL |         let x = if true { (1., 2.) } else { (3., 4.) };\n    |                                                  ^^ help: consider adding suffix: `4.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:24:23\n+  --> $DIR/default_numeric_fallback_f64.rs:25:23\n    |\n LL |         let x = match 1. {\n    |                       ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:25:18\n+  --> $DIR/default_numeric_fallback_f64.rs:26:18\n    |\n LL |             _ => 1.,\n    |                  ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:44:21\n+  --> $DIR/default_numeric_fallback_f64.rs:45:21\n    |\n LL |             let y = 1.;\n    |                     ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:52:21\n+  --> $DIR/default_numeric_fallback_f64.rs:53:21\n    |\n LL |             let y = 1.;\n    |                     ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:58:21\n+  --> $DIR/default_numeric_fallback_f64.rs:59:21\n    |\n LL |             let y = 1.;\n    |                     ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:66:21\n+  --> $DIR/default_numeric_fallback_f64.rs:67:21\n    |\n LL |             let y = 1.;\n    |                     ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:78:9\n+  --> $DIR/default_numeric_fallback_f64.rs:79:9\n    |\n LL |         1.\n    |         ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:84:27\n+  --> $DIR/default_numeric_fallback_f64.rs:85:27\n    |\n LL |         let f = || -> _ { 1. };\n    |                           ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:88:29\n+  --> $DIR/default_numeric_fallback_f64.rs:89:29\n    |\n LL |         let f = || -> f64 { 1. };\n    |                             ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:102:21\n+  --> $DIR/default_numeric_fallback_f64.rs:103:21\n    |\n LL |         generic_arg(1.);\n    |                     ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:105:32\n+  --> $DIR/default_numeric_fallback_f64.rs:106:32\n    |\n LL |         let x: _ = generic_arg(1.);\n    |                                ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:123:28\n+  --> $DIR/default_numeric_fallback_f64.rs:124:28\n    |\n LL |         GenericStruct { x: 1. };\n    |                            ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:126:36\n+  --> $DIR/default_numeric_fallback_f64.rs:127:36\n    |\n LL |         let _ = GenericStruct { x: 1. };\n    |                                    ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:144:24\n+  --> $DIR/default_numeric_fallback_f64.rs:145:24\n    |\n LL |         GenericEnum::X(1.);\n    |                        ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:164:23\n+  --> $DIR/default_numeric_fallback_f64.rs:165:23\n    |\n LL |         s.generic_arg(1.);\n    |                       ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:171:21\n+  --> $DIR/default_numeric_fallback_f64.rs:172:21\n    |\n LL |             let x = 22.;\n    |                     ^^^ help: consider adding suffix: `22.0_f64`"}, {"sha": "63ac4d5aeb6f300072af772a3ed7a58d45dfa81c", "filename": "tests/ui/default_numeric_fallback_i32.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fdefault_numeric_fallback_i32.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fdefault_numeric_fallback_i32.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.fixed?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -9,7 +9,8 @@\n     clippy::no_effect,\n     clippy::unnecessary_operation,\n     clippy::branches_sharing_code,\n-    clippy::let_unit_value\n+    clippy::let_unit_value,\n+    clippy::let_with_type_underscore\n )]\n \n #[macro_use]"}, {"sha": "28e6eceb80e2e0f1904ff9658d995a73b10f9300", "filename": "tests/ui/default_numeric_fallback_i32.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fdefault_numeric_fallback_i32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fdefault_numeric_fallback_i32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -9,7 +9,8 @@\n     clippy::no_effect,\n     clippy::unnecessary_operation,\n     clippy::branches_sharing_code,\n-    clippy::let_unit_value\n+    clippy::let_unit_value,\n+    clippy::let_with_type_underscore\n )]\n \n #[macro_use]"}, {"sha": "dd91574d5b34783d461759121b6cb91fd0aa6f37", "filename": "tests/ui/default_numeric_fallback_i32.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,157 +1,157 @@\n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:21:17\n+  --> $DIR/default_numeric_fallback_i32.rs:22:17\n    |\n LL |         let x = 22;\n    |                 ^^ help: consider adding suffix: `22_i32`\n    |\n    = note: `-D clippy::default-numeric-fallback` implied by `-D warnings`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:22:18\n+  --> $DIR/default_numeric_fallback_i32.rs:23:18\n    |\n LL |         let x = [1, 2, 3];\n    |                  ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:22:21\n+  --> $DIR/default_numeric_fallback_i32.rs:23:21\n    |\n LL |         let x = [1, 2, 3];\n    |                     ^ help: consider adding suffix: `2_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:22:24\n+  --> $DIR/default_numeric_fallback_i32.rs:23:24\n    |\n LL |         let x = [1, 2, 3];\n    |                        ^ help: consider adding suffix: `3_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:23:28\n+  --> $DIR/default_numeric_fallback_i32.rs:24:28\n    |\n LL |         let x = if true { (1, 2) } else { (3, 4) };\n    |                            ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:23:31\n+  --> $DIR/default_numeric_fallback_i32.rs:24:31\n    |\n LL |         let x = if true { (1, 2) } else { (3, 4) };\n    |                               ^ help: consider adding suffix: `2_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:23:44\n+  --> $DIR/default_numeric_fallback_i32.rs:24:44\n    |\n LL |         let x = if true { (1, 2) } else { (3, 4) };\n    |                                            ^ help: consider adding suffix: `3_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:23:47\n+  --> $DIR/default_numeric_fallback_i32.rs:24:47\n    |\n LL |         let x = if true { (1, 2) } else { (3, 4) };\n    |                                               ^ help: consider adding suffix: `4_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:24:23\n+  --> $DIR/default_numeric_fallback_i32.rs:25:23\n    |\n LL |         let x = match 1 {\n    |                       ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:25:13\n+  --> $DIR/default_numeric_fallback_i32.rs:26:13\n    |\n LL |             1 => 1,\n    |             ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:25:18\n+  --> $DIR/default_numeric_fallback_i32.rs:26:18\n    |\n LL |             1 => 1,\n    |                  ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:26:18\n+  --> $DIR/default_numeric_fallback_i32.rs:27:18\n    |\n LL |             _ => 2,\n    |                  ^ help: consider adding suffix: `2_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:45:21\n+  --> $DIR/default_numeric_fallback_i32.rs:46:21\n    |\n LL |             let y = 1;\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:53:21\n+  --> $DIR/default_numeric_fallback_i32.rs:54:21\n    |\n LL |             let y = 1;\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:59:21\n+  --> $DIR/default_numeric_fallback_i32.rs:60:21\n    |\n LL |             let y = 1;\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:67:21\n+  --> $DIR/default_numeric_fallback_i32.rs:68:21\n    |\n LL |             let y = 1;\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:79:9\n+  --> $DIR/default_numeric_fallback_i32.rs:80:9\n    |\n LL |         1\n    |         ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:85:27\n+  --> $DIR/default_numeric_fallback_i32.rs:86:27\n    |\n LL |         let f = || -> _ { 1 };\n    |                           ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:89:29\n+  --> $DIR/default_numeric_fallback_i32.rs:90:29\n    |\n LL |         let f = || -> i32 { 1 };\n    |                             ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:103:21\n+  --> $DIR/default_numeric_fallback_i32.rs:104:21\n    |\n LL |         generic_arg(1);\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:106:32\n+  --> $DIR/default_numeric_fallback_i32.rs:107:32\n    |\n LL |         let x: _ = generic_arg(1);\n    |                                ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:124:28\n+  --> $DIR/default_numeric_fallback_i32.rs:125:28\n    |\n LL |         GenericStruct { x: 1 };\n    |                            ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:127:36\n+  --> $DIR/default_numeric_fallback_i32.rs:128:36\n    |\n LL |         let _ = GenericStruct { x: 1 };\n    |                                    ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:145:24\n+  --> $DIR/default_numeric_fallback_i32.rs:146:24\n    |\n LL |         GenericEnum::X(1);\n    |                        ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:165:23\n+  --> $DIR/default_numeric_fallback_i32.rs:166:23\n    |\n LL |         s.generic_arg(1);\n    |                       ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:172:21\n+  --> $DIR/default_numeric_fallback_i32.rs:173:21\n    |\n LL |             let x = 22;\n    |                     ^^ help: consider adding suffix: `22_i32`"}, {"sha": "89ec33a0d8f7007f35d81b6a6ed0bad166f90a0a", "filename": "tests/ui/derivable_impls.fixed", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fderivable_impls.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fderivable_impls.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderivable_impls.fixed?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -231,4 +231,41 @@ impl Default for NonExhaustiveEnum {\n     }\n }\n \n+// https://github.com/rust-lang/rust-clippy/issues/10396\n+\n+#[derive(Default)]\n+struct DefaultType;\n+\n+struct GenericType<T = DefaultType> {\n+    t: T,\n+}\n+\n+impl Default for GenericType {\n+    fn default() -> Self {\n+        Self { t: Default::default() }\n+    }\n+}\n+\n+struct InnerGenericType<T> {\n+    t: T,\n+}\n+\n+impl Default for InnerGenericType<DefaultType> {\n+    fn default() -> Self {\n+        Self { t: Default::default() }\n+    }\n+}\n+\n+struct OtherGenericType<T = DefaultType> {\n+    inner: InnerGenericType<T>,\n+}\n+\n+impl Default for OtherGenericType {\n+    fn default() -> Self {\n+        Self {\n+            inner: Default::default(),\n+        }\n+    }\n+}\n+\n fn main() {}"}, {"sha": "def6e41162f1b451ccb82b062fa1c53fca754c31", "filename": "tests/ui/derivable_impls.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderivable_impls.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -267,4 +267,41 @@ impl Default for NonExhaustiveEnum {\n     }\n }\n \n+// https://github.com/rust-lang/rust-clippy/issues/10396\n+\n+#[derive(Default)]\n+struct DefaultType;\n+\n+struct GenericType<T = DefaultType> {\n+    t: T,\n+}\n+\n+impl Default for GenericType {\n+    fn default() -> Self {\n+        Self { t: Default::default() }\n+    }\n+}\n+\n+struct InnerGenericType<T> {\n+    t: T,\n+}\n+\n+impl Default for InnerGenericType<DefaultType> {\n+    fn default() -> Self {\n+        Self { t: Default::default() }\n+    }\n+}\n+\n+struct OtherGenericType<T = DefaultType> {\n+    inner: InnerGenericType<T>,\n+}\n+\n+impl Default for OtherGenericType {\n+    fn default() -> Self {\n+        Self {\n+            inner: Default::default(),\n+        }\n+    }\n+}\n+\n fn main() {}"}, {"sha": "beedf2c1db292bf15364c86ca10947781493ba10", "filename": "tests/ui/format.fixed", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fformat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fformat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.fixed?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-// aux-build: proc_macro_with_span.rs\n #![warn(clippy::useless_format)]\n #![allow(\n     unused_tuple_struct_fields,\n@@ -10,8 +9,6 @@\n     clippy::uninlined_format_args\n )]\n \n-extern crate proc_macro_with_span;\n-\n struct Foo(pub String);\n \n macro_rules! foo {\n@@ -90,7 +87,4 @@ fn main() {\n     let _ = abc.to_string();\n     let xx = \"xx\";\n     let _ = xx.to_string();\n-\n-    // Issue #10148\n-    println!(proc_macro_with_span::with_span!(\"\"something \"\"));\n }"}, {"sha": "e805f18188989167cf0b7ed0aab8c7613c8e3fae", "filename": "tests/ui/format.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-// aux-build: proc_macro_with_span.rs\n #![warn(clippy::useless_format)]\n #![allow(\n     unused_tuple_struct_fields,\n@@ -10,8 +9,6 @@\n     clippy::uninlined_format_args\n )]\n \n-extern crate proc_macro_with_span;\n-\n struct Foo(pub String);\n \n macro_rules! foo {\n@@ -92,7 +89,4 @@ fn main() {\n     let _ = format!(\"{abc}\");\n     let xx = \"xx\";\n     let _ = format!(\"{xx}\");\n-\n-    // Issue #10148\n-    println!(proc_macro_with_span::with_span!(\"\"something \"\"));\n }"}, {"sha": "0ef0ac655d3946a1ced143f01dbe9266f5627068", "filename": "tests/ui/format.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.stderr?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,25 +1,25 @@\n error: useless use of `format!`\n-  --> $DIR/format.rs:22:5\n+  --> $DIR/format.rs:19:5\n    |\n LL |     format!(\"foo\");\n    |     ^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n    |\n    = note: `-D clippy::useless-format` implied by `-D warnings`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:23:5\n+  --> $DIR/format.rs:20:5\n    |\n LL |     format!(\"{{}}\");\n    |     ^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"{}\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:24:5\n+  --> $DIR/format.rs:21:5\n    |\n LL |     format!(\"{{}} abc {{}}\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"{} abc {}\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:25:5\n+  --> $DIR/format.rs:22:5\n    |\n LL | /     format!(\n LL | |         r##\"foo {{}}\n@@ -34,67 +34,67 @@ LL ~ \" bar\"##.to_string();\n    |\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:30:13\n+  --> $DIR/format.rs:27:13\n    |\n LL |     let _ = format!(\"\");\n    |             ^^^^^^^^^^^ help: consider using `String::new()`: `String::new()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:32:5\n+  --> $DIR/format.rs:29:5\n    |\n LL |     format!(\"{}\", \"foo\");\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:40:5\n+  --> $DIR/format.rs:37:5\n    |\n LL |     format!(\"{}\", arg);\n    |     ^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:70:5\n+  --> $DIR/format.rs:67:5\n    |\n LL |     format!(\"{}\", 42.to_string());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `42.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:72:5\n+  --> $DIR/format.rs:69:5\n    |\n LL |     format!(\"{}\", x.display().to_string());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.display().to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:76:18\n+  --> $DIR/format.rs:73:18\n    |\n LL |     let _ = Some(format!(\"{}\", a + \"bar\"));\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `a + \"bar\"`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:80:22\n+  --> $DIR/format.rs:77:22\n    |\n LL |     let _s: String = format!(\"{}\", &*v.join(\"/n\"));\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `(&*v.join(\"/n\")).to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:86:13\n+  --> $DIR/format.rs:83:13\n    |\n LL |     let _ = format!(\"{x}\");\n    |             ^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:88:13\n+  --> $DIR/format.rs:85:13\n    |\n LL |     let _ = format!(\"{y}\", y = x);\n    |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:92:13\n+  --> $DIR/format.rs:89:13\n    |\n LL |     let _ = format!(\"{abc}\");\n    |             ^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `abc.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:94:13\n+  --> $DIR/format.rs:91:13\n    |\n LL |     let _ = format!(\"{xx}\");\n    |             ^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `xx.to_string()`"}, {"sha": "80383743525faeb154adffae5469e973ce0069f4", "filename": "tests/ui/impl_trait_in_params.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fimpl_trait_in_params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fimpl_trait_in_params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl_trait_in_params.stderr?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -5,7 +5,7 @@ LL | pub fn a(_: impl Trait) {}\n    |             ^^^^^^^^^^\n    |\n    = note: `-D clippy::impl-trait-in-params` implied by `-D warnings`\n-help: add a type paremeter\n+help: add a type parameter\n    |\n LL | pub fn a<{ /* Generic name */ }: Trait>(_: impl Trait) {}\n    |         +++++++++++++++++++++++++++++++\n@@ -16,7 +16,7 @@ error: '`impl Trait` used as a function parameter'\n LL | pub fn c<C: Trait>(_: C, _: impl Trait) {}\n    |                             ^^^^^^^^^^\n    |\n-help: add a type paremeter\n+help: add a type parameter\n    |\n LL | pub fn c<C: Trait, { /* Generic name */ }: Trait>(_: C, _: impl Trait) {}\n    |                  +++++++++++++++++++++++++++++++"}, {"sha": "8ccc3da7b47c0aa301437e5fb1c8e6280f58bc6b", "filename": "tests/ui/implicit_clone.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fimplicit_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fimplicit_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_clone.fixed?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -87,7 +87,7 @@ fn main() {\n     let kitten = Kitten {};\n     let _ = kitten.clone();\n     let _ = own_same_from_ref(&kitten);\n-    // this shouln't lint\n+    // this shouldn't lint\n     let _ = kitten.to_vec();\n \n     // we expect no lints for this"}, {"sha": "5933331260777992c0a09aa001bbd4479bf1df59", "filename": "tests/ui/implicit_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_clone.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -87,7 +87,7 @@ fn main() {\n     let kitten = Kitten {};\n     let _ = kitten.to_owned();\n     let _ = own_same_from_ref(&kitten);\n-    // this shouln't lint\n+    // this shouldn't lint\n     let _ = kitten.to_vec();\n \n     // we expect no lints for this"}, {"sha": "52aabefaed20a0488a0677e7228f674d285bac12", "filename": "tests/ui/len_without_is_empty.rs", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Flen_without_is_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Flen_without_is_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_without_is_empty.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -282,6 +282,87 @@ impl AsyncLen {\n     }\n }\n \n+// issue #7232\n+pub struct AsyncLenWithoutIsEmpty;\n+impl AsyncLenWithoutIsEmpty {\n+    pub async fn async_task(&self) -> bool {\n+        true\n+    }\n+\n+    pub async fn len(&self) -> usize {\n+        usize::from(!self.async_task().await)\n+    }\n+}\n+\n+// issue #7232\n+pub struct AsyncOptionLenWithoutIsEmpty;\n+impl AsyncOptionLenWithoutIsEmpty {\n+    async fn async_task(&self) -> bool {\n+        true\n+    }\n+\n+    pub async fn len(&self) -> Option<usize> {\n+        None\n+    }\n+}\n+\n+// issue #7232\n+pub struct AsyncOptionLenNonIntegral;\n+impl AsyncOptionLenNonIntegral {\n+    // don't lint\n+    pub async fn len(&self) -> Option<String> {\n+        None\n+    }\n+}\n+\n+// issue #7232\n+pub struct AsyncResultLenWithoutIsEmpty;\n+impl AsyncResultLenWithoutIsEmpty {\n+    async fn async_task(&self) -> bool {\n+        true\n+    }\n+\n+    pub async fn len(&self) -> Result<usize, ()> {\n+        Err(())\n+    }\n+}\n+\n+// issue #7232\n+pub struct AsyncOptionLen;\n+impl AsyncOptionLen {\n+    async fn async_task(&self) -> bool {\n+        true\n+    }\n+\n+    pub async fn len(&self) -> Result<usize, ()> {\n+        Err(())\n+    }\n+\n+    pub async fn is_empty(&self) -> bool {\n+        true\n+    }\n+}\n+\n+pub struct AsyncLenSyncIsEmpty;\n+impl AsyncLenSyncIsEmpty {\n+    pub async fn len(&self) -> u32 {\n+        0\n+    }\n+\n+    pub fn is_empty(&self) -> bool {\n+        true\n+    }\n+}\n+\n+// issue #9520\n+pub struct NonStandardLen;\n+impl NonStandardLen {\n+    // don't lint\n+    pub fn len(&self, something: usize) -> usize {\n+        something\n+    }\n+}\n+\n // issue #9520\n pub struct NonStandardLenAndIsEmptySignature;\n impl NonStandardLenAndIsEmptySignature {\n@@ -328,4 +409,15 @@ impl NonStandardSignatureWithGenerics {\n     }\n }\n \n+pub struct DifferingErrors;\n+impl DifferingErrors {\n+    pub fn len(&self) -> Result<usize, u8> {\n+        Ok(0)\n+    }\n+\n+    pub fn is_empty(&self) -> Result<bool, u16> {\n+        Ok(true)\n+    }\n+}\n+\n fn main() {}"}, {"sha": "1bce1734b81afd69c4768facb76465f453e1ef70", "filename": "tests/ui/len_without_is_empty.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Flen_without_is_empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Flen_without_is_empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_without_is_empty.stderr?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -119,5 +119,23 @@ LL |     pub fn len(&self) -> Result<usize, ()> {\n    |\n    = help: use a custom `Error` type instead\n \n-error: aborting due to 12 previous errors\n+error: struct `AsyncLenWithoutIsEmpty` has a public `len` method, but no `is_empty` method\n+  --> $DIR/len_without_is_empty.rs:292:5\n+   |\n+LL |     pub async fn len(&self) -> usize {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: struct `AsyncOptionLenWithoutIsEmpty` has a public `len` method, but no `is_empty` method\n+  --> $DIR/len_without_is_empty.rs:304:5\n+   |\n+LL |     pub async fn len(&self) -> Option<usize> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: struct `AsyncResultLenWithoutIsEmpty` has a public `len` method, but no `is_empty` method\n+  --> $DIR/len_without_is_empty.rs:325:5\n+   |\n+LL |     pub async fn len(&self) -> Result<usize, ()> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 15 previous errors\n "}, {"sha": "76ff0645f4177d8b33cbf3629e5a00e439c08eec", "filename": "tests/ui/let_unit.fixed", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Flet_unit.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Flet_unit.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.fixed?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -175,3 +175,7 @@ fn attributes() {\n     #[expect(clippy::let_unit_value)]\n     let _ = f();\n }\n+\n+async fn issue10433() {\n+    let _pending: () = std::future::pending().await;\n+}"}, {"sha": "895ccfe366a2d2d3a3e272bfb9aab2bded6b904e", "filename": "tests/ui/let_unit.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Flet_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Flet_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -175,3 +175,7 @@ fn attributes() {\n     #[expect(clippy::let_unit_value)]\n     let _ = f();\n }\n+\n+async fn issue10433() {\n+    let _pending: () = std::future::pending().await;\n+}"}, {"sha": "175718b94c8e6a591f8aa87f571491d367452f5d", "filename": "tests/ui/let_with_type_underscore.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Flet_with_type_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Flet_with_type_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_with_type_underscore.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -0,0 +1,19 @@\n+#![allow(unused)]\n+#![warn(clippy::let_with_type_underscore)]\n+#![allow(clippy::let_unit_value)]\n+\n+fn func() -> &'static str {\n+    \"\"\n+}\n+\n+fn main() {\n+    // Will lint\n+    let x: _ = 1;\n+    let _: _ = 2;\n+    let x: _ = func();\n+\n+    let x = 1; // Will not lint, Rust inferres this to an integer before Clippy\n+    let x = func();\n+    let x: Vec<_> = Vec::<u32>::new();\n+    let x: [_; 1] = [1];\n+}"}, {"sha": "16bf83c708fe8522368186d350f96ee425e8e415", "filename": "tests/ui/let_with_type_underscore.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Flet_with_type_underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Flet_with_type_underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_with_type_underscore.stderr?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -0,0 +1,39 @@\n+error: variable declared with type underscore\n+  --> $DIR/let_with_type_underscore.rs:11:5\n+   |\n+LL |     let x: _ = 1;\n+   |     ^^^^^^^^^^^^^\n+   |\n+help: remove the explicit type `_` declaration\n+  --> $DIR/let_with_type_underscore.rs:11:10\n+   |\n+LL |     let x: _ = 1;\n+   |          ^^^\n+   = note: `-D clippy::let-with-type-underscore` implied by `-D warnings`\n+\n+error: variable declared with type underscore\n+  --> $DIR/let_with_type_underscore.rs:12:5\n+   |\n+LL |     let _: _ = 2;\n+   |     ^^^^^^^^^^^^^\n+   |\n+help: remove the explicit type `_` declaration\n+  --> $DIR/let_with_type_underscore.rs:12:10\n+   |\n+LL |     let _: _ = 2;\n+   |          ^^^\n+\n+error: variable declared with type underscore\n+  --> $DIR/let_with_type_underscore.rs:13:5\n+   |\n+LL |     let x: _ = func();\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+help: remove the explicit type `_` declaration\n+  --> $DIR/let_with_type_underscore.rs:13:10\n+   |\n+LL |     let x: _ = func();\n+   |          ^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "6916a284a20a1b7663e7129f9935229b0a0d7202", "filename": "tests/ui/manual_rem_euclid.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fmanual_rem_euclid.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fmanual_rem_euclid.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.fixed?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -2,6 +2,7 @@\n // aux-build:macro_rules.rs\n \n #![warn(clippy::manual_rem_euclid)]\n+#![allow(clippy::let_with_type_underscore)]\n \n #[macro_use]\n extern crate macro_rules;"}, {"sha": "412dbddb4266b3cd465fdfb999a6bd613079c47e", "filename": "tests/ui/manual_rem_euclid.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fmanual_rem_euclid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fmanual_rem_euclid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -2,6 +2,7 @@\n // aux-build:macro_rules.rs\n \n #![warn(clippy::manual_rem_euclid)]\n+#![allow(clippy::let_with_type_underscore)]\n \n #[macro_use]\n extern crate macro_rules;"}, {"sha": "6d06654638b3c94680ed127a00ba447b47c3921d", "filename": "tests/ui/manual_rem_euclid.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fmanual_rem_euclid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fmanual_rem_euclid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.stderr?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,37 +1,37 @@\n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:19:18\n+  --> $DIR/manual_rem_euclid.rs:20:18\n    |\n LL |     let _: i32 = ((value % 4) + 4) % 4;\n    |                  ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n    |\n    = note: `-D clippy::manual-rem-euclid` implied by `-D warnings`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:20:18\n+  --> $DIR/manual_rem_euclid.rs:21:18\n    |\n LL |     let _: i32 = (4 + (value % 4)) % 4;\n    |                  ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:21:18\n+  --> $DIR/manual_rem_euclid.rs:22:18\n    |\n LL |     let _: i32 = (value % 4 + 4) % 4;\n    |                  ^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:22:18\n+  --> $DIR/manual_rem_euclid.rs:23:18\n    |\n LL |     let _: i32 = (4 + value % 4) % 4;\n    |                  ^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:23:22\n+  --> $DIR/manual_rem_euclid.rs:24:22\n    |\n LL |     let _: i32 = 1 + (4 + value % 4) % 4;\n    |                      ^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:12:22\n+  --> $DIR/manual_rem_euclid.rs:13:22\n    |\n LL |         let _: i32 = ((value % 4) + 4) % 4;\n    |                      ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n@@ -42,25 +42,25 @@ LL |     internal_rem_euclid!();\n    = note: this error originates in the macro `internal_rem_euclid` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:49:5\n+  --> $DIR/manual_rem_euclid.rs:50:5\n    |\n LL |     ((num % 4) + 4) % 4\n    |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `num.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:54:5\n+  --> $DIR/manual_rem_euclid.rs:55:5\n    |\n LL |     ((num % 4) + 4) % 4\n    |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `num.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:66:18\n+  --> $DIR/manual_rem_euclid.rs:67:18\n    |\n LL |     let _: i32 = ((x % 4) + 4) % 4;\n    |                  ^^^^^^^^^^^^^^^^^ help: consider using: `x.rem_euclid(4)`\n \n error: manual `rem_euclid` implementation\n-  --> $DIR/manual_rem_euclid.rs:79:18\n+  --> $DIR/manual_rem_euclid.rs:80:18\n    |\n LL |     let _: i32 = ((x % 4) + 4) % 4;\n    |                  ^^^^^^^^^^^^^^^^^ help: consider using: `x.rem_euclid(4)`"}, {"sha": "10ae1ee5245eb852f6bfe15997718dc4274718f4", "filename": "tests/ui/match_result_ok.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fmatch_result_ok.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fmatch_result_ok.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_result_ok.fixed?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -16,7 +16,7 @@ fn str_to_int_ok(x: &str) -> i32 {\n #[rustfmt::skip]\n fn strange_some_no_else(x: &str) -> i32 {\n     {\n-        if let Ok(y) = x   .   parse()       {\n+        if let Ok(y) = x   .   parse()    {\n             return y;\n         };\n         0"}, {"sha": "cbdc56aa28c445db4767fb258c714a6c3bcca5fb", "filename": "tests/ui/match_result_ok.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fmatch_result_ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fmatch_result_ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_result_ok.stderr?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -18,7 +18,7 @@ LL |         if let Some(y) = x   .   parse()   .   ok   ()    {\n    |\n help: consider matching on `Ok(y)` and removing the call to `ok` instead\n    |\n-LL |         if let Ok(y) = x   .   parse()       {\n+LL |         if let Ok(y) = x   .   parse()    {\n    |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: matching on `Some` with `ok()` is redundant"}, {"sha": "89404ca882718f05f37ac39c103cbbed533821bf", "filename": "tests/ui/missing_assert_message.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fmissing_assert_message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fmissing_assert_message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_assert_message.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -0,0 +1,84 @@\n+#![allow(unused)]\n+#![warn(clippy::missing_assert_message)]\n+\n+macro_rules! bar {\n+    ($( $x:expr ),*) => {\n+        foo()\n+    };\n+}\n+\n+fn main() {}\n+\n+// Should trigger warning\n+fn asserts_without_message() {\n+    assert!(foo());\n+    assert_eq!(foo(), foo());\n+    assert_ne!(foo(), foo());\n+    debug_assert!(foo());\n+    debug_assert_eq!(foo(), foo());\n+    debug_assert_ne!(foo(), foo());\n+}\n+\n+// Should trigger warning\n+fn asserts_without_message_but_with_macro_calls() {\n+    assert!(bar!(true));\n+    assert!(bar!(true, false));\n+    assert_eq!(bar!(true), foo());\n+    assert_ne!(bar!(true, true), bar!(true));\n+}\n+\n+// Should trigger warning\n+fn asserts_with_trailing_commas() {\n+    assert!(foo(),);\n+    assert_eq!(foo(), foo(),);\n+    assert_ne!(foo(), foo(),);\n+    debug_assert!(foo(),);\n+    debug_assert_eq!(foo(), foo(),);\n+    debug_assert_ne!(foo(), foo(),);\n+}\n+\n+// Should not trigger warning\n+fn asserts_with_message_and_with_macro_calls() {\n+    assert!(bar!(true), \"msg\");\n+    assert!(bar!(true, false), \"msg\");\n+    assert_eq!(bar!(true), foo(), \"msg\");\n+    assert_ne!(bar!(true, true), bar!(true), \"msg\");\n+}\n+\n+// Should not trigger warning\n+fn asserts_with_message() {\n+    assert!(foo(), \"msg\");\n+    assert_eq!(foo(), foo(), \"msg\");\n+    assert_ne!(foo(), foo(), \"msg\");\n+    debug_assert!(foo(), \"msg\");\n+    debug_assert_eq!(foo(), foo(), \"msg\");\n+    debug_assert_ne!(foo(), foo(), \"msg\");\n+}\n+\n+// Should not trigger warning\n+#[test]\n+fn asserts_without_message_but_inside_a_test_function() {\n+    assert!(foo());\n+    assert_eq!(foo(), foo());\n+    assert_ne!(foo(), foo());\n+    debug_assert!(foo());\n+    debug_assert_eq!(foo(), foo());\n+    debug_assert_ne!(foo(), foo());\n+}\n+\n+// Should not trigger warning\n+#[cfg(test)]\n+mod tests {\n+    fn asserts_without_message_but_inside_a_test_module() {\n+        assert!(foo());\n+        assert_eq!(foo(), foo());\n+        assert_ne!(foo(), foo());\n+        debug_assert!(foo());\n+        debug_assert_eq!(foo(), foo());\n+        debug_assert_ne!(foo(), foo());\n+    }\n+}\n+\n+fn foo() -> bool {\n+    true\n+}"}, {"sha": "ecd03801277979bccefdc42cb46b5fe49d156f92", "filename": "tests/ui/missing_assert_message.stderr", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fmissing_assert_message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fmissing_assert_message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_assert_message.stderr?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -0,0 +1,131 @@\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:14:5\n+   |\n+LL |     assert!(foo());\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+   = note: `-D clippy::missing-assert-message` implied by `-D warnings`\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:15:5\n+   |\n+LL |     assert_eq!(foo(), foo());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:16:5\n+   |\n+LL |     assert_ne!(foo(), foo());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:17:5\n+   |\n+LL |     debug_assert!(foo());\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:18:5\n+   |\n+LL |     debug_assert_eq!(foo(), foo());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:19:5\n+   |\n+LL |     debug_assert_ne!(foo(), foo());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:24:5\n+   |\n+LL |     assert!(bar!(true));\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:25:5\n+   |\n+LL |     assert!(bar!(true, false));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:26:5\n+   |\n+LL |     assert_eq!(bar!(true), foo());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:27:5\n+   |\n+LL |     assert_ne!(bar!(true, true), bar!(true));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:32:5\n+   |\n+LL |     assert!(foo(),);\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:33:5\n+   |\n+LL |     assert_eq!(foo(), foo(),);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:34:5\n+   |\n+LL |     assert_ne!(foo(), foo(),);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:35:5\n+   |\n+LL |     debug_assert!(foo(),);\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:36:5\n+   |\n+LL |     debug_assert_eq!(foo(), foo(),);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:37:5\n+   |\n+LL |     debug_assert_ne!(foo(), foo(),);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: aborting due to 16 previous errors\n+"}, {"sha": "4e8a49bf1cd7120e8177e1d0d751b0f00299e13f", "filename": "tests/ui/missing_doc.stderr", "status": "modified", "additions": 1, "deletions": 69, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fmissing_doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fmissing_doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_doc.stderr?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -6,30 +6,12 @@ LL | type Typedef = String;\n    |\n    = note: `-D clippy::missing-docs-in-private-items` implied by `-D warnings`\n \n-error: missing documentation for a type alias\n-  --> $DIR/missing_doc.rs:17:1\n-   |\n-LL | pub type PubTypedef = String;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: missing documentation for a module\n   --> $DIR/missing_doc.rs:19:1\n    |\n LL | mod module_no_dox {}\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: missing documentation for a module\n-  --> $DIR/missing_doc.rs:20:1\n-   |\n-LL | pub mod pub_module_no_dox {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: missing documentation for a function\n-  --> $DIR/missing_doc.rs:24:1\n-   |\n-LL | pub fn foo2() {}\n-   | ^^^^^^^^^^^^^^^^\n-\n error: missing documentation for a function\n   --> $DIR/missing_doc.rs:25:1\n    |\n@@ -69,50 +51,18 @@ error: missing documentation for a variant\n LL |     BarB,\n    |     ^^^^\n \n-error: missing documentation for an enum\n-  --> $DIR/missing_doc.rs:44:1\n-   |\n-LL | / pub enum PubBaz {\n-LL | |     PubBazA { a: isize },\n-LL | | }\n-   | |_^\n-\n-error: missing documentation for a variant\n-  --> $DIR/missing_doc.rs:45:5\n-   |\n-LL |     PubBazA { a: isize },\n-   |     ^^^^^^^^^^^^^^^^^^^^\n-\n-error: missing documentation for a struct field\n-  --> $DIR/missing_doc.rs:45:15\n-   |\n-LL |     PubBazA { a: isize },\n-   |               ^^^^^^^^\n-\n error: missing documentation for a constant\n   --> $DIR/missing_doc.rs:65:1\n    |\n LL | const FOO: u32 = 0;\n    | ^^^^^^^^^^^^^^^^^^^\n \n-error: missing documentation for a constant\n-  --> $DIR/missing_doc.rs:72:1\n-   |\n-LL | pub const FOO4: u32 = 0;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: missing documentation for a static\n   --> $DIR/missing_doc.rs:74:1\n    |\n LL | static BAR: u32 = 0;\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: missing documentation for a static\n-  --> $DIR/missing_doc.rs:81:1\n-   |\n-LL | pub static BAR4: u32 = 0;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: missing documentation for a module\n   --> $DIR/missing_doc.rs:83:1\n    |\n@@ -125,35 +75,17 @@ LL | |     }\n LL | | }\n    | |_^\n \n-error: missing documentation for a function\n-  --> $DIR/missing_doc.rs:86:5\n-   |\n-LL |     pub fn undocumented1() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: missing documentation for a function\n-  --> $DIR/missing_doc.rs:87:5\n-   |\n-LL |     pub fn undocumented2() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: missing documentation for a function\n   --> $DIR/missing_doc.rs:88:5\n    |\n LL |     fn undocumented3() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n-error: missing documentation for a function\n-  --> $DIR/missing_doc.rs:93:9\n-   |\n-LL |         pub fn also_undocumented1() {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: missing documentation for a function\n   --> $DIR/missing_doc.rs:94:9\n    |\n LL |         fn also_undocumented2() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 24 previous errors\n+error: aborting due to 13 previous errors\n "}, {"sha": "111d65469660b540bfa9f90d28d88fc94fa04f21", "filename": "tests/ui/missing_doc_impl.stderr", "status": "modified", "additions": 1, "deletions": 55, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fmissing_doc_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fmissing_doc_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_doc_impl.stderr?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -21,60 +21,12 @@ error: missing documentation for a struct field\n LL |     b: isize,\n    |     ^^^^^^^^\n \n-error: missing documentation for a struct\n-  --> $DIR/missing_doc_impl.rs:18:1\n-   |\n-LL | / pub struct PubFoo {\n-LL | |     pub a: isize,\n-LL | |     b: isize,\n-LL | | }\n-   | |_^\n-\n-error: missing documentation for a struct field\n-  --> $DIR/missing_doc_impl.rs:19:5\n-   |\n-LL |     pub a: isize,\n-   |     ^^^^^^^^^^^^\n-\n error: missing documentation for a struct field\n   --> $DIR/missing_doc_impl.rs:20:5\n    |\n LL |     b: isize,\n    |     ^^^^^^^^\n \n-error: missing documentation for a trait\n-  --> $DIR/missing_doc_impl.rs:43:1\n-   |\n-LL | / pub trait C {\n-LL | |     fn foo(&self);\n-LL | |     fn foo_with_impl(&self) {}\n-LL | | }\n-   | |_^\n-\n-error: missing documentation for a method\n-  --> $DIR/missing_doc_impl.rs:44:5\n-   |\n-LL |     fn foo(&self);\n-   |     ^^^^^^^^^^^^^^\n-\n-error: missing documentation for a method\n-  --> $DIR/missing_doc_impl.rs:45:5\n-   |\n-LL |     fn foo_with_impl(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: missing documentation for an associated type\n-  --> $DIR/missing_doc_impl.rs:55:5\n-   |\n-LL |     type AssociatedType;\n-   |     ^^^^^^^^^^^^^^^^^^^^\n-\n-error: missing documentation for an associated type\n-  --> $DIR/missing_doc_impl.rs:56:5\n-   |\n-LL |     type AssociatedTypeDef = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: missing documentation for an associated function\n   --> $DIR/missing_doc_impl.rs:67:5\n    |\n@@ -89,12 +41,6 @@ error: missing documentation for an associated function\n LL |     fn bar() {}\n    |     ^^^^^^^^^^^\n \n-error: missing documentation for an associated function\n-  --> $DIR/missing_doc_impl.rs:74:5\n-   |\n-LL |     pub fn foo() {}\n-   |     ^^^^^^^^^^^^^^^\n-\n error: missing documentation for an associated function\n   --> $DIR/missing_doc_impl.rs:78:5\n    |\n@@ -103,5 +49,5 @@ LL | |         1\n LL | |     }\n    | |_____^\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "5073685c9f067728cada5ccb531e13fc65a98a94", "filename": "tests/ui/multiple_unsafe_ops_per_block.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fmultiple_unsafe_ops_per_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fmultiple_unsafe_ops_per_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmultiple_unsafe_ops_per_block.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -116,4 +116,32 @@ fn issue10259() {\n     unsafe_macro!();\n }\n \n+fn _fn_ptr(x: unsafe fn()) {\n+    unsafe {\n+        x();\n+        x();\n+    }\n+}\n+\n+fn _assoc_const() {\n+    trait X {\n+        const X: unsafe fn();\n+    }\n+    fn _f<T: X>() {\n+        unsafe {\n+            T::X();\n+            T::X();\n+        }\n+    }\n+}\n+\n+fn _field_fn_ptr(x: unsafe fn()) {\n+    struct X(unsafe fn());\n+    let x = X(x);\n+    unsafe {\n+        x.0();\n+        x.0();\n+    }\n+}\n+\n fn main() {}"}, {"sha": "e0c1d3801f7cf2568e0312ae7d44fe7f0f668a67", "filename": "tests/ui/multiple_unsafe_ops_per_block.stderr", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fmultiple_unsafe_ops_per_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fmultiple_unsafe_ops_per_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmultiple_unsafe_ops_per_block.stderr?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -125,5 +125,65 @@ note: raw pointer dereference occurs here\n LL |     unsafe { char::from_u32_unchecked(*ptr.cast::<u32>()) }\n    |                                       ^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: this `unsafe` block contains 2 unsafe operations, expected only one\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:120:5\n+   |\n+LL | /     unsafe {\n+LL | |         x();\n+LL | |         x();\n+LL | |     }\n+   | |_____^\n+   |\n+note: unsafe function call occurs here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:121:9\n+   |\n+LL |         x();\n+   |         ^^^\n+note: unsafe function call occurs here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:122:9\n+   |\n+LL |         x();\n+   |         ^^^\n+\n+error: this `unsafe` block contains 2 unsafe operations, expected only one\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:131:9\n+   |\n+LL | /         unsafe {\n+LL | |             T::X();\n+LL | |             T::X();\n+LL | |         }\n+   | |_________^\n+   |\n+note: unsafe function call occurs here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:132:13\n+   |\n+LL |             T::X();\n+   |             ^^^^^^\n+note: unsafe function call occurs here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:133:13\n+   |\n+LL |             T::X();\n+   |             ^^^^^^\n+\n+error: this `unsafe` block contains 2 unsafe operations, expected only one\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:141:5\n+   |\n+LL | /     unsafe {\n+LL | |         x.0();\n+LL | |         x.0();\n+LL | |     }\n+   | |_____^\n+   |\n+note: unsafe function call occurs here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:142:9\n+   |\n+LL |         x.0();\n+   |         ^^^^^\n+note: unsafe function call occurs here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:143:9\n+   |\n+LL |         x.0();\n+   |         ^^^^^\n+\n+error: aborting due to 8 previous errors\n "}, {"sha": "a2a30c8b931ced0e391ac8d3b25d9929f01d2c9b", "filename": "tests/ui/new_ret_no_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fnew_ret_no_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fnew_ret_no_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -406,7 +406,7 @@ mod issue10041 {\n     struct Bomb;\n \n     impl Bomb {\n-        // Hidden <Rhs = Self> default generic paramter.\n+        // Hidden <Rhs = Self> default generic parameter.\n         pub fn new() -> impl PartialOrd {\n             0i32\n         }"}, {"sha": "5f9931df45e92e1a7228a817b62fd0a8d2580026", "filename": "tests/ui/redundant_async_block.fixed", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fredundant_async_block.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fredundant_async_block.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_async_block.fixed?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -0,0 +1,64 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::redundant_async_block)]\n+\n+async fn func1(n: usize) -> usize {\n+    n + 1\n+}\n+\n+async fn func2() -> String {\n+    let s = String::from(\"some string\");\n+    let f = async { (*s).to_owned() };\n+    let x = f;\n+    x.await\n+}\n+\n+macro_rules! await_in_macro {\n+    ($e:expr) => {\n+        std::convert::identity($e).await\n+    };\n+}\n+\n+async fn func3(n: usize) -> usize {\n+    // Do not lint (suggestion would be `std::convert::identity(func1(n))`\n+    // which copies code from inside the macro)\n+    async move { await_in_macro!(func1(n)) }.await\n+}\n+\n+// This macro should never be linted as `$e` might contain `.await`\n+macro_rules! async_await_parameter_in_macro {\n+    ($e:expr) => {\n+        async { $e.await }\n+    };\n+}\n+\n+// MISSED OPPORTUNITY: this macro could be linted as the `async` block does not\n+// contain code coming from the parameters\n+macro_rules! async_await_in_macro {\n+    ($f:expr) => {\n+        ($f)(async { func2().await })\n+    };\n+}\n+\n+fn main() {\n+    let fut1 = async { 17 };\n+    let fut2 = fut1;\n+\n+    let fut1 = async { 25 };\n+    let fut2 = fut1;\n+\n+    let fut = async { 42 };\n+\n+    // Do not lint: not a single expression\n+    let fut = async {\n+        func1(10).await;\n+        func2().await\n+    };\n+\n+    // Do not lint: expression contains `.await`\n+    let fut = async { func1(func2().await.len()).await };\n+\n+    let fut = async_await_parameter_in_macro!(func2());\n+    let fut = async_await_in_macro!(std::convert::identity);\n+}"}, {"sha": "de3c9970c65f26c99ae00ae1c46634460f8bac33", "filename": "tests/ui/redundant_async_block.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fredundant_async_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fredundant_async_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_async_block.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -0,0 +1,64 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::redundant_async_block)]\n+\n+async fn func1(n: usize) -> usize {\n+    n + 1\n+}\n+\n+async fn func2() -> String {\n+    let s = String::from(\"some string\");\n+    let f = async { (*s).to_owned() };\n+    let x = async { f.await };\n+    x.await\n+}\n+\n+macro_rules! await_in_macro {\n+    ($e:expr) => {\n+        std::convert::identity($e).await\n+    };\n+}\n+\n+async fn func3(n: usize) -> usize {\n+    // Do not lint (suggestion would be `std::convert::identity(func1(n))`\n+    // which copies code from inside the macro)\n+    async move { await_in_macro!(func1(n)) }.await\n+}\n+\n+// This macro should never be linted as `$e` might contain `.await`\n+macro_rules! async_await_parameter_in_macro {\n+    ($e:expr) => {\n+        async { $e.await }\n+    };\n+}\n+\n+// MISSED OPPORTUNITY: this macro could be linted as the `async` block does not\n+// contain code coming from the parameters\n+macro_rules! async_await_in_macro {\n+    ($f:expr) => {\n+        ($f)(async { func2().await })\n+    };\n+}\n+\n+fn main() {\n+    let fut1 = async { 17 };\n+    let fut2 = async { fut1.await };\n+\n+    let fut1 = async { 25 };\n+    let fut2 = async move { fut1.await };\n+\n+    let fut = async { async { 42 }.await };\n+\n+    // Do not lint: not a single expression\n+    let fut = async {\n+        func1(10).await;\n+        func2().await\n+    };\n+\n+    // Do not lint: expression contains `.await`\n+    let fut = async { func1(func2().await.len()).await };\n+\n+    let fut = async_await_parameter_in_macro!(func2());\n+    let fut = async_await_in_macro!(std::convert::identity);\n+}"}, {"sha": "b16d96dce84ebbf2f1e0a8f35ee8749f47127efb", "filename": "tests/ui/redundant_async_block.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fredundant_async_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fredundant_async_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_async_block.stderr?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -0,0 +1,28 @@\n+error: this async expression only awaits a single future\n+  --> $DIR/redundant_async_block.rs:13:13\n+   |\n+LL |     let x = async { f.await };\n+   |             ^^^^^^^^^^^^^^^^^ help: you can reduce it to: `f`\n+   |\n+   = note: `-D clippy::redundant-async-block` implied by `-D warnings`\n+\n+error: this async expression only awaits a single future\n+  --> $DIR/redundant_async_block.rs:46:16\n+   |\n+LL |     let fut2 = async { fut1.await };\n+   |                ^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `fut1`\n+\n+error: this async expression only awaits a single future\n+  --> $DIR/redundant_async_block.rs:49:16\n+   |\n+LL |     let fut2 = async move { fut1.await };\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `fut1`\n+\n+error: this async expression only awaits a single future\n+  --> $DIR/redundant_async_block.rs:51:15\n+   |\n+LL |     let fut = async { async { 42 }.await };\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `async { 42 }`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "b987fd2ce6f08cd795726b7ac141977b2b39ef1d", "filename": "tests/ui/redundant_closure_call_fixable.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fredundant_closure_call_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fredundant_closure_call_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_fixable.fixed?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(async_closure)]\n #![warn(clippy::redundant_closure_call)]\n+#![allow(clippy::redundant_async_block)]\n #![allow(unused)]\n \n async fn something() -> u32 {"}, {"sha": "633a2979d5da3b21dfbe0fee5f70f9f315512d3a", "filename": "tests/ui/redundant_closure_call_fixable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fredundant_closure_call_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fredundant_closure_call_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_fixable.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(async_closure)]\n #![warn(clippy::redundant_closure_call)]\n+#![allow(clippy::redundant_async_block)]\n #![allow(unused)]\n \n async fn something() -> u32 {"}, {"sha": "8a1f0771659b177afeb1b6add4a922ced31376a3", "filename": "tests/ui/redundant_closure_call_fixable.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fredundant_closure_call_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fredundant_closure_call_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_fixable.stderr?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -1,13 +1,13 @@\n error: try not to call a closure in the expression where it is declared\n-  --> $DIR/redundant_closure_call_fixable.rs:16:13\n+  --> $DIR/redundant_closure_call_fixable.rs:17:13\n    |\n LL |     let a = (|| 42)();\n    |             ^^^^^^^^^ help: try doing something like: `42`\n    |\n    = note: `-D clippy::redundant-closure-call` implied by `-D warnings`\n \n error: try not to call a closure in the expression where it is declared\n-  --> $DIR/redundant_closure_call_fixable.rs:17:13\n+  --> $DIR/redundant_closure_call_fixable.rs:18:13\n    |\n LL |       let b = (async || {\n    |  _____________^\n@@ -27,7 +27,7 @@ LL ~     };\n    |\n \n error: try not to call a closure in the expression where it is declared\n-  --> $DIR/redundant_closure_call_fixable.rs:22:13\n+  --> $DIR/redundant_closure_call_fixable.rs:23:13\n    |\n LL |       let c = (|| {\n    |  _____________^\n@@ -47,13 +47,13 @@ LL ~     };\n    |\n \n error: try not to call a closure in the expression where it is declared\n-  --> $DIR/redundant_closure_call_fixable.rs:27:13\n+  --> $DIR/redundant_closure_call_fixable.rs:28:13\n    |\n LL |     let d = (async || something().await)();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try doing something like: `async { something().await }`\n \n error: try not to call a closure in the expression where it is declared\n-  --> $DIR/redundant_closure_call_fixable.rs:36:13\n+  --> $DIR/redundant_closure_call_fixable.rs:37:13\n    |\n LL |             (|| m!())()\n    |             ^^^^^^^^^^^ help: try doing something like: `m!()`\n@@ -64,7 +64,7 @@ LL |     m2!();\n    = note: this error originates in the macro `m2` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: try not to call a closure in the expression where it is declared\n-  --> $DIR/redundant_closure_call_fixable.rs:31:13\n+  --> $DIR/redundant_closure_call_fixable.rs:32:13\n    |\n LL |             (|| 0)()\n    |             ^^^^^^^^ help: try doing something like: `0`"}, {"sha": "04008c0d9b31ca696ff88efe7682bfeb7b43d300", "filename": "tests/ui/swap.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fswap.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fswap.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.fixed?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -65,19 +65,19 @@ fn xor_swap_locals() {\n     // This is an xor-based swap of local variables.\n     let mut a = 0;\n     let mut b = 1;\n-    std::mem::swap(&mut a, &mut b)\n+    std::mem::swap(&mut a, &mut b);\n }\n \n fn xor_field_swap() {\n     // This is an xor-based swap of fields in a struct.\n     let mut bar = Bar { a: 0, b: 1 };\n-    std::mem::swap(&mut bar.a, &mut bar.b)\n+    std::mem::swap(&mut bar.a, &mut bar.b);\n }\n \n fn xor_slice_swap() {\n     // This is an xor-based swap of a slice\n     let foo = &mut [1, 2];\n-    foo.swap(0, 1)\n+    foo.swap(0, 1);\n }\n \n fn xor_no_swap() {"}, {"sha": "825c9261e19837bc270a2d431c183798e913630f", "filename": "tests/ui/swap.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fswap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fswap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.stderr?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -4,7 +4,7 @@ error: this looks like you are swapping `bar.a` and `bar.b` manually\n LL | /     let temp = bar.a;\n LL | |     bar.a = bar.b;\n LL | |     bar.b = temp;\n-   | |________________^ help: try: `std::mem::swap(&mut bar.a, &mut bar.b)`\n+   | |_________________^ help: try: `std::mem::swap(&mut bar.a, &mut bar.b);`\n    |\n    = note: or maybe you should use `std::mem::replace`?\n    = note: `-D clippy::manual-swap` implied by `-D warnings`\n@@ -15,55 +15,55 @@ error: this looks like you are swapping elements of `foo` manually\n LL | /     let temp = foo[0];\n LL | |     foo[0] = foo[1];\n LL | |     foo[1] = temp;\n-   | |_________________^ help: try: `foo.swap(0, 1)`\n+   | |__________________^ help: try: `foo.swap(0, 1);`\n \n error: this looks like you are swapping elements of `foo` manually\n   --> $DIR/swap.rs:46:5\n    |\n LL | /     let temp = foo[0];\n LL | |     foo[0] = foo[1];\n LL | |     foo[1] = temp;\n-   | |_________________^ help: try: `foo.swap(0, 1)`\n+   | |__________________^ help: try: `foo.swap(0, 1);`\n \n error: this looks like you are swapping elements of `foo` manually\n   --> $DIR/swap.rs:65:5\n    |\n LL | /     let temp = foo[0];\n LL | |     foo[0] = foo[1];\n LL | |     foo[1] = temp;\n-   | |_________________^ help: try: `foo.swap(0, 1)`\n+   | |__________________^ help: try: `foo.swap(0, 1);`\n \n error: this looks like you are swapping `a` and `b` manually\n   --> $DIR/swap.rs:76:5\n    |\n LL | /     a ^= b;\n LL | |     b ^= a;\n LL | |     a ^= b;\n-   | |___________^ help: try: `std::mem::swap(&mut a, &mut b)`\n+   | |___________^ help: try: `std::mem::swap(&mut a, &mut b);`\n \n error: this looks like you are swapping `bar.a` and `bar.b` manually\n   --> $DIR/swap.rs:84:5\n    |\n LL | /     bar.a ^= bar.b;\n LL | |     bar.b ^= bar.a;\n LL | |     bar.a ^= bar.b;\n-   | |___________________^ help: try: `std::mem::swap(&mut bar.a, &mut bar.b)`\n+   | |___________________^ help: try: `std::mem::swap(&mut bar.a, &mut bar.b);`\n \n error: this looks like you are swapping elements of `foo` manually\n   --> $DIR/swap.rs:92:5\n    |\n LL | /     foo[0] ^= foo[1];\n LL | |     foo[1] ^= foo[0];\n LL | |     foo[0] ^= foo[1];\n-   | |_____________________^ help: try: `foo.swap(0, 1)`\n+   | |_____________________^ help: try: `foo.swap(0, 1);`\n \n error: this looks like you are swapping `foo[0][1]` and `bar[1][0]` manually\n   --> $DIR/swap.rs:121:5\n    |\n LL | /     let temp = foo[0][1];\n LL | |     foo[0][1] = bar[1][0];\n LL | |     bar[1][0] = temp;\n-   | |____________________^ help: try: `std::mem::swap(&mut foo[0][1], &mut bar[1][0])`\n+   | |_____________________^ help: try: `std::mem::swap(&mut foo[0][1], &mut bar[1][0]);`\n    |\n    = note: or maybe you should use `std::mem::replace`?\n \n@@ -74,7 +74,7 @@ LL |       ; let t = a;\n    |  _______^\n LL | |     a = b;\n LL | |     b = t;\n-   | |_________^ help: try: `std::mem::swap(&mut a, &mut b)`\n+   | |__________^ help: try: `std::mem::swap(&mut a, &mut b);`\n    |\n    = note: or maybe you should use `std::mem::replace`?\n \n@@ -85,7 +85,7 @@ LL |       ; let t = c.0;\n    |  _______^\n LL | |     c.0 = a;\n LL | |     a = t;\n-   | |_________^ help: try: `std::mem::swap(&mut c.0, &mut a)`\n+   | |__________^ help: try: `std::mem::swap(&mut c.0, &mut a);`\n    |\n    = note: or maybe you should use `std::mem::replace`?\n \n@@ -95,7 +95,7 @@ error: this looks like you are swapping `b` and `a` manually\n LL | /     let t = b;\n LL | |     b = a;\n LL | |     a = t;\n-   | |_________^ help: try: `std::mem::swap(&mut b, &mut a)`\n+   | |__________^ help: try: `std::mem::swap(&mut b, &mut a);`\n    |\n    = note: or maybe you should use `std::mem::replace`?\n \n@@ -151,7 +151,7 @@ error: this looks like you are swapping `s.0.x` and `s.0.y` manually\n LL | /     let t = s.0.x;\n LL | |     s.0.x = s.0.y;\n LL | |     s.0.y = t;\n-   | |_____________^ help: try: `std::mem::swap(&mut s.0.x, &mut s.0.y)`\n+   | |______________^ help: try: `std::mem::swap(&mut s.0.x, &mut s.0.y);`\n    |\n    = note: or maybe you should use `std::mem::replace`?\n "}, {"sha": "8e3749eef351f90d0cc554f2369e6a4c11f5b7ff", "filename": "tests/ui/trailing_empty_array.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Ftrailing_empty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Ftrailing_empty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_empty_array.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -155,7 +155,6 @@ struct TupleStructReprC(i32, [usize; 0]);\n \n type NamedTuple = (i32, [usize; 0]);\n \n-#[rustfmt::skip] // [rustfmt#4995](https://github.com/rust-lang/rustfmt/issues/4995)\n struct ConstParamZeroDefault<const N: usize = 0> {\n     field: i32,\n     last: [usize; N],\n@@ -166,7 +165,6 @@ struct ConstParamNoDefault<const N: usize> {\n     last: [usize; N],\n }\n \n-#[rustfmt::skip] \n struct ConstParamNonZeroDefault<const N: usize = 1> {\n     field: i32,\n     last: [usize; N],"}, {"sha": "3ac6217312a8c3be3be598dc4d319f6dffa1ec9a", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -647,3 +647,13 @@ fn msrv_1_37() {\n         }\n     }\n }\n+\n+mod issue_10371 {\n+    struct Val<const V: i32> {}\n+\n+    impl<const V: i32> From<Val<V>> for i32 {\n+        fn from(_: Val<V>) -> Self {\n+            todo!()\n+        }\n+    }\n+}"}, {"sha": "9dc5d1e3f9b23c66d60f519bb8c2d374e1256c70", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a67d9ad81547895ec986f8bcb17e912037c38/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=cf8a67d9ad81547895ec986f8bcb17e912037c38", "patch": "@@ -647,3 +647,13 @@ fn msrv_1_37() {\n         }\n     }\n }\n+\n+mod issue_10371 {\n+    struct Val<const V: i32> {}\n+\n+    impl<const V: i32> From<Val<V>> for i32 {\n+        fn from(_: Val<V>) -> Self {\n+            todo!()\n+        }\n+    }\n+}"}]}