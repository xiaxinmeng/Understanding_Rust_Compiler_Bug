{"sha": "e23ad83fbc3afdde5f931d976a6d8592c3550e46", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyM2FkODNmYmMzYWZkZGU1ZjkzMWQ5NzZhNmQ4NTkyYzM1NTBlNDY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-09T10:18:00Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-24T17:27:38Z"}, "message": "add a `user_ty` annotation to `Constant`", "tree": {"sha": "7628fc6eca60b93d21a7915cc9155ab3b86acd93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7628fc6eca60b93d21a7915cc9155ab3b86acd93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e23ad83fbc3afdde5f931d976a6d8592c3550e46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e23ad83fbc3afdde5f931d976a6d8592c3550e46", "html_url": "https://github.com/rust-lang/rust/commit/e23ad83fbc3afdde5f931d976a6d8592c3550e46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e23ad83fbc3afdde5f931d976a6d8592c3550e46/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7d4d7c8d5620b7b120304cc5eecf25b499e394a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7d4d7c8d5620b7b120304cc5eecf25b499e394a", "html_url": "https://github.com/rust-lang/rust/commit/d7d4d7c8d5620b7b120304cc5eecf25b499e394a"}], "stats": {"total": 74, "additions": 65, "deletions": 9}, "files": [{"sha": "ad20bab2b877efb25fcd8b5dbf71a166e4ab7ca6", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=e23ad83fbc3afdde5f931d976a6d8592c3550e46", "patch": "@@ -528,7 +528,7 @@ impl_stable_hash_for!(enum mir::NullOp {\n     SizeOf\n });\n \n-impl_stable_hash_for!(struct mir::Constant<'tcx> { span, ty, literal });\n+impl_stable_hash_for!(struct mir::Constant<'tcx> { span, ty, user_ty, literal });\n \n impl_stable_hash_for!(struct mir::Location { block, statement_index });\n "}, {"sha": "efe2e3521383e3fdb1319d7cbacbe60f4762418c", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=e23ad83fbc3afdde5f931d976a6d8592c3550e46", "patch": "@@ -1888,12 +1888,15 @@ pub enum Operand<'tcx> {\n     /// This implies that the type of the place must be `Copy`; this is true\n     /// by construction during build, but also checked by the MIR type checker.\n     Copy(Place<'tcx>),\n+\n     /// Move: The value (including old borrows of it) will not be used again.\n     ///\n     /// Safe for values of all types (modulo future developments towards `?Move`).\n     /// Correct usage patterns are enforced by the borrow checker for safe code.\n     /// `Copy` may be converted to `Move` to enable \"last-use\" optimizations.\n     Move(Place<'tcx>),\n+\n+    /// Synthesizes a constant value.\n     Constant(Box<Constant<'tcx>>),\n }\n \n@@ -1909,6 +1912,9 @@ impl<'tcx> Debug for Operand<'tcx> {\n }\n \n impl<'tcx> Operand<'tcx> {\n+    /// Convenience helper to make a constant that refers to the fn\n+    /// with given def-id and substs. Since this is used to synthesize\n+    /// MIR, assumes `user_ty` is None.\n     pub fn function_handle<'a>(\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         def_id: DefId,\n@@ -1919,6 +1925,7 @@ impl<'tcx> Operand<'tcx> {\n         Operand::Constant(box Constant {\n             span,\n             ty,\n+            user_ty: None,\n             literal: ty::Const::zero_sized(tcx, ty),\n         })\n     }\n@@ -2207,6 +2214,14 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n pub struct Constant<'tcx> {\n     pub span: Span,\n     pub ty: Ty<'tcx>,\n+\n+    /// Optional user-given type: for something like\n+    /// `collect::<Vec<_>>`, this would be present and would\n+    /// indicate that `Vec<_>` was explicitly specified.\n+    ///\n+    /// Needed for NLL to impose user-given type constraints.\n+    pub user_ty: Option<CanonicalTy<'tcx>>,\n+\n     pub literal: &'tcx ty::Const<'tcx>,\n }\n \n@@ -2902,6 +2917,7 @@ impl<'tcx> TypeFoldable<'tcx> for Constant<'tcx> {\n         Constant {\n             span: self.span.clone(),\n             ty: self.ty.fold_with(folder),\n+            user_ty: self.user_ty.fold_with(folder),\n             literal: self.literal.fold_with(folder),\n         }\n     }"}, {"sha": "1eaecf7a522d8b32285306ecea8cf7ac11a54665", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=e23ad83fbc3afdde5f931d976a6d8592c3550e46", "patch": "@@ -213,6 +213,10 @@ macro_rules! make_mir_visitor {\n                 self.super_ty(ty);\n             }\n \n+            fn visit_canonical_ty(&mut self, ty: & $($mutability)* CanonicalTy<'tcx>) {\n+                self.super_canonical_ty(ty);\n+            }\n+\n             fn visit_region(&mut self,\n                             region: & $($mutability)* ty::Region<'tcx>,\n                             _: Location) {\n@@ -625,9 +629,10 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn super_user_assert_ty(&mut self,\n-                                    _c_ty: & $($mutability)* CanonicalTy<'tcx>,\n+                                    c_ty: & $($mutability)* CanonicalTy<'tcx>,\n                                     local: & $($mutability)* Local,\n                                     location: Location) {\n+                self.visit_canonical_ty(c_ty);\n                 self.visit_local(local, PlaceContext::Validate, location);\n             }\n \n@@ -740,11 +745,13 @@ macro_rules! make_mir_visitor {\n                 let Constant {\n                     ref $($mutability)* span,\n                     ref $($mutability)* ty,\n+                    ref $($mutability)* user_ty,\n                     ref $($mutability)* literal,\n                 } = *constant;\n \n                 self.visit_span(span);\n                 self.visit_ty(ty, TyContext::Location(location));\n+                drop(user_ty); // no visit method for this\n                 self.visit_const(literal, location);\n             }\n \n@@ -764,6 +771,9 @@ macro_rules! make_mir_visitor {\n                 self.visit_source_scope(scope);\n             }\n \n+            fn super_canonical_ty(&mut self, _ty: & $($mutability)* CanonicalTy<'tcx>) {\n+            }\n+\n             fn super_ty(&mut self, _ty: & $($mutability)* Ty<'tcx>) {\n             }\n "}, {"sha": "1106f750d6d24b4c0722f955defbcdf25a77318e", "filename": "src/librustc_mir/build/expr/as_constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs?ref=e23ad83fbc3afdde5f931d976a6d8592c3550e46", "patch": "@@ -31,8 +31,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         match kind {\n             ExprKind::Scope { region_scope: _, lint_level: _, value } =>\n                 this.as_constant(value),\n-            ExprKind::Literal { literal } =>\n-                Constant { span: span, ty: ty, literal: literal },\n+            ExprKind::Literal { literal, user_ty } =>\n+                Constant { span, ty, user_ty, literal },\n             _ =>\n                 span_bug!(\n                     span,"}, {"sha": "fab4f77a0958f38e28fd49c6ba1eaef468a5a912", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=e23ad83fbc3afdde5f931d976a6d8592c3550e46", "patch": "@@ -239,6 +239,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         operands.push(Operand::Constant(box Constant {\n                             span: expr_span,\n                             ty: this.hir.tcx().types.u32,\n+                            user_ty: None,\n                             literal: ty::Const::from_bits(\n                                 this.hir.tcx(),\n                                 0,"}, {"sha": "3cd1270d7ef11698baa93a71938559d1b549ab05", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=e23ad83fbc3afdde5f931d976a6d8592c3550e46", "patch": "@@ -128,6 +128,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     Constant {\n                         span: expr_span,\n                         ty: this.hir.bool_ty(),\n+                        user_ty: None,\n                         literal: this.hir.true_literal(),\n                     });\n \n@@ -136,6 +137,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     Constant {\n                         span: expr_span,\n                         ty: this.hir.bool_ty(),\n+                        user_ty: None,\n                         literal: this.hir.false_literal(),\n                     });\n "}, {"sha": "2baefc47f8e6ddba011e93f9feee001b87c8ea89", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=e23ad83fbc3afdde5f931d976a6d8592c3550e46", "patch": "@@ -344,7 +344,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         func: Operand::Constant(box Constant {\n                             span: test.span,\n                             ty: mty,\n-                            literal: method\n+                            user_ty: None, // FIXME\n+                            literal: method,\n                         }),\n                         args: vec![val, expect],\n                         destination: Some((eq_result.clone(), eq_block)),"}, {"sha": "9405f43c056b7a6e72352d89e47b192825c4456d", "filename": "src/librustc_mir/build/misc.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs?ref=e23ad83fbc3afdde5f931d976a6d8592c3550e46", "patch": "@@ -32,6 +32,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         place\n     }\n \n+    /// Convenience function for creating a literal operand, one\n+    /// without any user type annotation.\n     pub fn literal_operand(&mut self,\n                            span: Span,\n                            ty: Ty<'tcx>,\n@@ -40,6 +42,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let constant = box Constant {\n             span,\n             ty,\n+            user_ty: None,\n             literal,\n         };\n         Operand::Constant(constant)\n@@ -69,6 +72,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             Constant {\n                 span: source_info.span,\n                 ty: self.hir.usize_ty(),\n+                user_ty: None,\n                 literal: self.hir.usize_literal(value),\n             });\n         temp"}, {"sha": "00b2bcd486bf9a262b0d6087ebf770c6ea2a7d45", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=e23ad83fbc3afdde5f931d976a6d8592c3550e46", "patch": "@@ -317,6 +317,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n         hir::ExprKind::Lit(ref lit) => ExprKind::Literal {\n             literal: cx.const_eval_literal(&lit.node, expr_ty, lit.span, false),\n+            user_ty: None,\n         },\n \n         hir::ExprKind::Binary(op, ref lhs, ref rhs) => {\n@@ -406,6 +407,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 if let hir::ExprKind::Lit(ref lit) = arg.node {\n                     ExprKind::Literal {\n                         literal: cx.const_eval_literal(&lit.node, expr_ty, lit.span, true),\n+                        user_ty: None,\n                     }\n                 } else {\n                     ExprKind::Unary {\n@@ -631,7 +633,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                         temp_lifetime,\n                         ty,\n                         span: expr.span,\n-                        kind: ExprKind::Literal { literal },\n+                        kind: ExprKind::Literal { literal, user_ty: None },\n                     }.to_ref();\n                     let offset = mk_const(ty::Const::from_bits(\n                         cx.tcx,\n@@ -703,6 +705,7 @@ fn method_callee<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         span: expr.span,\n         kind: ExprKind::Literal {\n             literal: ty::Const::zero_sized(cx.tcx(), ty),\n+            user_ty: None, // TODO\n         },\n     }\n }\n@@ -758,6 +761,7 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 cx.tcx,\n                 cx.tables().node_id_to_type(expr.hir_id),\n             ),\n+            user_ty: None, // TODO\n         },\n \n         Def::Const(def_id) |\n@@ -768,6 +772,7 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 substs,\n                 cx.tables().node_id_to_type(expr.hir_id),\n             ),\n+            user_ty: None, // TODO?\n         },\n \n         Def::StructCtor(def_id, CtorKind::Const) |"}, {"sha": "5539db609c4feb0c938e05bd52fa31815e991c2e", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=e23ad83fbc3afdde5f931d976a6d8592c3550e46", "patch": "@@ -18,7 +18,7 @@ use rustc::mir::{BinOp, BorrowKind, Field, UnOp};\n use rustc::hir::def_id::DefId;\n use rustc::middle::region;\n use rustc::ty::subst::Substs;\n-use rustc::ty::{AdtDef, UpvarSubsts, Region, Ty, Const};\n+use rustc::ty::{AdtDef, CanonicalTy, UpvarSubsts, Region, Ty, Const};\n use rustc::hir;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -272,6 +272,13 @@ pub enum ExprKind<'tcx> {\n     },\n     Literal {\n         literal: &'tcx Const<'tcx>,\n+\n+        /// Optional user-given type: for something like\n+        /// `collect::<Vec<_>>`, this would be present and would\n+        /// indicate that `Vec<_>` was explicitly specified.\n+        ///\n+        /// Needed for NLL to impose user-given type constraints.\n+        user_ty: Option<CanonicalTy<'tcx>>,\n     },\n     InlineAsm {\n         asm: &'tcx hir::InlineAsm,"}, {"sha": "e6b480a27d1de0c1535b7f944a37b1896f690fd4", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=e23ad83fbc3afdde5f931d976a6d8592c3550e46", "patch": "@@ -440,6 +440,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         let func = Operand::Constant(box Constant {\n             span: self.span,\n             ty: func_ty,\n+            user_ty: None,\n             literal: ty::Const::zero_sized(self.tcx, func_ty),\n         });\n \n@@ -498,6 +499,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         box Constant {\n             span: self.span,\n             ty: self.tcx.types.usize,\n+            user_ty: None,\n             literal: ty::Const::from_usize(self.tcx, value),\n         }\n     }\n@@ -725,6 +727,7 @@ fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             (Operand::Constant(box Constant {\n                 span,\n                 ty,\n+                user_ty: None,\n                 literal: ty::Const::zero_sized(tcx, ty),\n              }),\n              vec![rcvr])"}, {"sha": "225de03a329651d252e4bc7ee32aeaf2479bbc78", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=e23ad83fbc3afdde5f931d976a6d8592c3550e46", "patch": "@@ -543,6 +543,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         Rvalue::Use(Operand::Constant(Box::new(Constant {\n             span,\n             ty: self.tcx.types.bool,\n+            user_ty: None,\n             literal: ty::Const::from_bool(self.tcx, val),\n         })))\n     }"}, {"sha": "a7d6c08ec1f07e14924b9b045ae684e820187b84", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=e23ad83fbc3afdde5f931d976a6d8592c3550e46", "patch": "@@ -177,6 +177,7 @@ impl<'a, 'tcx> TransformVisitor<'a, 'tcx> {\n         let val = Operand::Constant(box Constant {\n             span: source_info.span,\n             ty: self.tcx.types.u32,\n+            user_ty: None,\n             literal: ty::Const::from_bits(\n                 self.tcx,\n                 state_disc.into(),\n@@ -710,6 +711,7 @@ fn insert_panic_block<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         cond: Operand::Constant(box Constant {\n             span: mir.span,\n             ty: tcx.types.bool,\n+            user_ty: None,\n             literal: ty::Const::from_bool(tcx, false),\n         }),\n         expected: true,"}, {"sha": "12780ef8be945483416abc4cce8611c3df56ec7c", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=e23ad83fbc3afdde5f931d976a6d8592c3550e46", "patch": "@@ -103,7 +103,7 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for OptimizationFinder<'b, 'a, 'tcx> {\n             if let TyKind::Array(_, len) = place_ty.sty {\n                 let span = self.mir.source_info(location).span;\n                 let ty = self.tcx.types.usize;\n-                let constant = Constant { span, ty, literal: len };\n+                let constant = Constant { span, ty, literal: len, user_ty: None };\n                 self.optimizations.arrays_lengths.insert(location, constant);\n             }\n         }"}, {"sha": "1c0c98d621c83325a97b53ded27c6d31d9cb5afa", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=e23ad83fbc3afdde5f931d976a6d8592c3550e46", "patch": "@@ -969,6 +969,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         Operand::Constant(box Constant {\n             span: self.source_info.span,\n             ty: self.tcx().types.usize,\n+            user_ty: None,\n             literal: ty::Const::from_usize(self.tcx(), val.into()),\n         })\n     }"}, {"sha": "51834d4bd846235c7586034d515af1e0346cb3d1", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23ad83fbc3afdde5f931d976a6d8592c3550e46/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=e23ad83fbc3afdde5f931d976a6d8592c3550e46", "patch": "@@ -397,10 +397,13 @@ impl<'cx, 'gcx, 'tcx> ExtraComments<'cx, 'gcx, 'tcx> {\n impl<'cx, 'gcx, 'tcx> Visitor<'tcx> for ExtraComments<'cx, 'gcx, 'tcx> {\n     fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) {\n         self.super_constant(constant, location);\n-        let Constant { span, ty, literal } = constant;\n+        let Constant { span, ty, user_ty, literal } = constant;\n         self.push(\"mir::Constant\");\n         self.push(&format!(\"+ span: {:?}\", span));\n         self.push(&format!(\"+ ty: {:?}\", ty));\n+        if let Some(user_ty) = user_ty {\n+            self.push(&format!(\"+ user_ty: {:?}\", user_ty));\n+        }\n         self.push(&format!(\"+ literal: {:?}\", literal));\n     }\n "}]}