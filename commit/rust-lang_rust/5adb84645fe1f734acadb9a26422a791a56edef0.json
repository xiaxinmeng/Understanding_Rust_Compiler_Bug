{"sha": "5adb84645fe1f734acadb9a26422a791a56edef0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZGI4NDY0NWZlMWY3MzRhY2FkYjlhMjY0MjJhNzkxYTU2ZWRlZjA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-01-24T12:28:36Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-01-28T10:57:52Z"}, "message": "add cargo-miri subcommand to directly interpret the main binary of a crate", "tree": {"sha": "30de1ed8617a23e8919aa18b581276296dd64054", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30de1ed8617a23e8919aa18b581276296dd64054"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5adb84645fe1f734acadb9a26422a791a56edef0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJJBAABCAAzBQJYjHkxLBxnaXQtbm8tcmVwbHktOTg3OTE2NTcxNjQ3OTQxMzEz\nMUBvbGktb2JrLmRlAAoJEB1ctPxZfDAE6x4P+wRykGSbFofw5MGS85T+iFiMcw63\ncVIAlfDsrN8VKG9zZNXVDup/ERFxJ1GUtEhSAumEkrMlRiQVO+5NHBebGVXwApLE\nwJqPVSu8SqbjaC7wEzmpzlRS8M5ieZr///22t8/Lec3WiGcH2CMPsXCJBPUC5Z4V\nkWQIaCnMJGrr2+y+nMcmmN3V4x24g3o3IjcxaAW5h1+306Gxj8hqlyiMswrM35dN\nN00CDQ+5om+2pXVMPBauELV6ksBNt8uSDxcjIoTE8ePQJ9Ylxl1GuYa2E2Y730ku\noTqiGLTT1KbPJrxTTModCZub2Oa0R1n1nuq2cCMn2H6hjZ9EG7/5tK3wCAlvpiEq\nsyETmh4RAW+DE1O9lREJ55qjW8vvAhUPA1tGeL+Iu9DhBAvzs4nsCl3THTcdvhPB\nPXr62RqBF0QN9k0Jrms8vNtcOQBZDbPcs6H1aaxP7KWgupHUcKYPENgBGK3mt+Z5\n0Z52go4WS6ES8UdppaqIKU34IL7fha8hTp567WtgTUk0hlIbc6kcpoSNhHP5EXCy\nUm/WZt+qyhJiQYmWwSF8P349E3ZKDIsxTmkV18Jn7UTv8Z54C/vq8q06IzbkxrAk\n1et0dDeIYm0ENzv0C/gbxlpl6R0qQP5KtTgQBNaWhdaKgDzIIeDasWPWMfiqR6Hm\nRw0pN8hrc3Sk7c/8\n=AzL8\n-----END PGP SIGNATURE-----", "payload": "tree 30de1ed8617a23e8919aa18b581276296dd64054\nparent 684f75713963f0ca67fcce2b13746e982f203cee\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1485260916 +0100\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1485601072 +0100\n\nadd cargo-miri subcommand to directly interpret the main binary of a crate"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5adb84645fe1f734acadb9a26422a791a56edef0", "html_url": "https://github.com/rust-lang/rust/commit/5adb84645fe1f734acadb9a26422a791a56edef0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5adb84645fe1f734acadb9a26422a791a56edef0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "684f75713963f0ca67fcce2b13746e982f203cee", "url": "https://api.github.com/repos/rust-lang/rust/commits/684f75713963f0ca67fcce2b13746e982f203cee", "html_url": "https://github.com/rust-lang/rust/commit/684f75713963f0ca67fcce2b13746e982f203cee"}], "stats": {"total": 328, "additions": 322, "deletions": 6}, "files": [{"sha": "afe24d684725bbff8315a7a7d95956240558f7a0", "filename": "Cargo.lock", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/5adb84645fe1f734acadb9a26422a791a56edef0/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5adb84645fe1f734acadb9a26422a791a56edef0/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5adb84645fe1f734acadb9a26422a791a56edef0", "patch": "@@ -3,6 +3,7 @@ name = \"miri\"\n version = \"0.1.0\"\n dependencies = [\n  \"byteorder 1.0.0 (git+https://github.com/quininer/byteorder.git?branch=i128)\",\n+ \"cargo_metadata 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"compiletest_rs 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -22,6 +23,16 @@ name = \"byteorder\"\n version = \"1.0.0\"\n source = \"git+https://github.com/quininer/byteorder.git?branch=i128#ef51df297aa833d0b6639aae328a95597fc07d75\"\n \n+[[package]]\n+name = \"cargo_metadata\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"serde 0.9.0-rc3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 0.9.0-rc3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 0.9.0-rc2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"compiletest_rs\"\n version = \"0.2.5\"\n@@ -31,6 +42,11 @@ dependencies = [\n  \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"dtoa\"\n+version = \"0.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"env_logger\"\n version = \"0.3.5\"\n@@ -40,6 +56,11 @@ dependencies = [\n  \"regex 0.1.77 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"itoa\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"kernel32-sys\"\n version = \"0.2.2\"\n@@ -80,6 +101,16 @@ dependencies = [\n  \"libc 0.2.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"num-traits\"\n+version = \"0.1.36\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"quote\"\n+version = \"0.3.12\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"regex\"\n version = \"0.1.77\"\n@@ -102,6 +133,57 @@ name = \"rustc-serialize\"\n version = \"0.3.19\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"serde\"\n+version = \"0.9.0-rc3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"serde_codegen\"\n+version = \"0.9.0-rc3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"quote 0.3.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_codegen_internals 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.10.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"serde_codegen_internals\"\n+version = \"0.11.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"syn 0.10.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"serde_derive\"\n+version = \"0.9.0-rc3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"serde_codegen 0.9.0-rc3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"serde_json\"\n+version = \"0.9.0-rc2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"dtoa 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itoa 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 0.9.0-rc3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"syn\"\n+version = \"0.10.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"quote 0.3.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"thread-id\"\n version = \"2.0.0\"\n@@ -119,6 +201,11 @@ dependencies = [\n  \"thread-id 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"unicode-xid\"\n+version = \"0.0.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"utf8-ranges\"\n version = \"0.1.3\"\n@@ -137,19 +224,31 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n [metadata]\n \"checksum aho-corasick 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca972c2ea5f742bfce5687b9aef75506a764f61d37f8f649047846a9686ddb66\"\n \"checksum byteorder 1.0.0 (git+https://github.com/quininer/byteorder.git?branch=i128)\" = \"<none>\"\n+\"checksum cargo_metadata 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb382367db7c8eb427e622e46b99eff500fb63d8cf22dc2df6bcc5587112a993\"\n \"checksum compiletest_rs 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f3f344389765ad7bec166f64c1b39ed6dd2b54d81c4c5dd8af789169351d380c\"\n+\"checksum dtoa 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"80e5dc7a4b2bbf348fb0afe68b3994daf1126223d2d9770221b8213c5e4565af\"\n \"checksum env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15abd780e45b3ea4f76b4e9a26ff4843258dd8a3eed2775a0e7368c2e7936c2f\"\n+\"checksum itoa 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff8f9e7653c775f2ef8016f4181eb3ad62fe8a710e5dd73d4060a5903a58022f\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum lazy_static 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49247ec2a285bb3dcb23cbd9c35193c025e7251bfce77c1d5da97e6362dffe7f\"\n \"checksum libc 0.2.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"408014cace30ee0f767b1c4517980646a573ec61a57957aeeabcac8ac0a02e8d\"\n \"checksum log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab83497bf8bf4ed2a74259c1c802351fcd67a65baa86394b6ba73c36f4838054\"\n \"checksum log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d382732ea0fbc09790c4899db3255bdea0fc78b54bf234bd18a63bb603915b6\"\n \"checksum memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d8b629fb514376c675b98c1421e80b151d3817ac42d7c667717d282761418d20\"\n+\"checksum num-traits 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a16a42856a256b39c6d3484f097f6713e14feacd9bfb02290917904fae46c81c\"\n+\"checksum quote 0.3.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e7b44fd83db28b83c1c58187159934906e5e955c812e211df413b76b03c909a5\"\n \"checksum regex 0.1.77 (registry+https://github.com/rust-lang/crates.io-index)\" = \"64b03446c466d35b42f2a8b203c8e03ed8b91c0f17b56e1f84f7210a257aa665\"\n \"checksum regex-syntax 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"279401017ae31cf4e15344aa3f085d0e2e5c1e70067289ef906906fdbe92c8fd\"\n \"checksum rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6159e4e6e559c81bd706afe9c8fd68f547d3e851ce12e76b1de7914bab61691b\"\n+\"checksum serde 0.9.0-rc3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bfeedfddd5db4465d96959431d7f3d8d618a6052cdaf3fddb2e981e86a7ad04c\"\n+\"checksum serde_codegen 0.9.0-rc3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c89a070576ea7af4c609e72fcdd3d283e9c4c77946bd3fd7a07c43ee15b9c144\"\n+\"checksum serde_codegen_internals 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"afad7924a009f859f380e4a2e3a509a845c2ac66435fcead74a4d983b21ae806\"\n+\"checksum serde_derive 0.9.0-rc3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1651978181e36fc90e1faaf91ae21fe74ffba77bc4ce4baf18b20fbb00e24cd4\"\n+\"checksum serde_json 0.9.0-rc2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6efad3dc934e5032a92ea163adb13c8414359da950a0f304c1897214f28d9444\"\n+\"checksum syn 0.10.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"17134635792e6a2361f53efbee798701796d8b5842c1c21b7cdb875e2950c8fc\"\n \"checksum thread-id 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a9539db560102d1cef46b8b78ce737ff0bb64e7e18d35b2a5688f7d097d0ff03\"\n \"checksum thread_local 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8576dbbfcaef9641452d5cf0df9b0e7eeab7694956dd33bb61515fb8f18cfdd5\"\n+\"checksum unicode-xid 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"36dff09cafb4ec7c8cf0023eb0b686cb6ce65499116a12201c9e11840ca01beb\"\n \"checksum utf8-ranges 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1ca13c08c41c9c3e04224ed9ff80461d97e121589ff27c753a16cb10830ae0f\"\n \"checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n \"checksum winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\""}, {"sha": "ba7e38bed85b4cf4ee56bba47b3dfcaed73abccd", "filename": "Cargo.toml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5adb84645fe1f734acadb9a26422a791a56edef0/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5adb84645fe1f734acadb9a26422a791a56edef0/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=5adb84645fe1f734acadb9a26422a791a56edef0", "patch": "@@ -11,6 +11,11 @@ doc = false\n name = \"miri\"\n test = false\n \n+[[bin]]\n+doc = false\n+name = \"cargo-miri\"\n+test = false\n+\n [lib]\n test = false\n \n@@ -20,6 +25,7 @@ byteorder = { git = \"https://github.com/quininer/byteorder.git\", branch = \"i128\"\n env_logger = \"0.3.3\"\n log = \"0.3.6\"\n log_settings = \"0.1.1\"\n+cargo_metadata = \"0.1\"\n \n [dev-dependencies]\n compiletest_rs = \"0.2.5\""}, {"sha": "71026d828a1ac7a99847753e0694d9c65ce2e55b", "filename": "src/bin/cargo-miri.rs", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/5adb84645fe1f734acadb9a26422a791a56edef0/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5adb84645fe1f734acadb9a26422a791a56edef0/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=5adb84645fe1f734acadb9a26422a791a56edef0", "patch": "@@ -0,0 +1,177 @@\n+#![feature(static_in_const)]\n+\n+extern crate cargo_metadata;\n+\n+use std::path::{PathBuf, Path};\n+use std::io::Write;\n+use std::process::Command;\n+\n+\n+const CARGO_MIRI_HELP: &str = r#\"Interprets bin crates\n+\n+Usage:\n+    cargo miri [options] [--] [<opts>...]\n+\n+Common options:\n+    -h, --help               Print this message\n+    --features               Features to compile for the package\n+    -V, --version            Print version info and exit\n+\n+Other options are the same as `cargo rustc`.\n+\n+The feature `cargo-miri` is automatically defined for convenience. You can use\n+it to configure the resource limits\n+\n+    #![cfg_attr(feature = \"cargo-miri\", memory_size = 42)]\n+\n+available resource limits are `memory_size`, `step_limit`, `stack_limit`\n+\"#;\n+\n+fn show_help() {\n+    println!(\"{}\", CARGO_MIRI_HELP);\n+}\n+\n+fn show_version() {\n+    println!(\"{}\", env!(\"CARGO_PKG_VERSION\"));\n+}\n+\n+fn main() {\n+    // Check for version and help flags even when invoked as 'cargo-miri'\n+    if std::env::args().any(|a| a == \"--help\" || a == \"-h\") {\n+        show_help();\n+        return;\n+    }\n+    if std::env::args().any(|a| a == \"--version\" || a == \"-V\") {\n+        show_version();\n+        return;\n+    }\n+\n+    let dep_path = std::env::current_dir().expect(\"current dir is not readable\").join(\"target\").join(\"debug\").join(\"deps\");\n+\n+    if let Some(\"miri\") = std::env::args().nth(1).as_ref().map(AsRef::as_ref) {\n+        // this arm is when `cargo miri` is called\n+\n+        let manifest_path_arg = std::env::args().skip(2).find(|val| val.starts_with(\"--manifest-path=\"));\n+\n+        let mut metadata = if let Ok(metadata) = cargo_metadata::metadata(manifest_path_arg.as_ref().map(AsRef::as_ref)) {\n+            metadata\n+        } else {\n+            let _ = std::io::stderr().write_fmt(format_args!(\"error: Could not obtain cargo metadata.\"));\n+            std::process::exit(101);\n+        };\n+\n+        let manifest_path = manifest_path_arg.map(|arg| PathBuf::from(Path::new(&arg[\"--manifest-path=\".len()..])));\n+\n+        let current_dir = std::env::current_dir();\n+\n+        let package_index = metadata.packages\n+            .iter()\n+            .position(|package| {\n+                let package_manifest_path = Path::new(&package.manifest_path);\n+                if let Some(ref manifest_path) = manifest_path {\n+                    package_manifest_path == manifest_path\n+                } else {\n+                    let current_dir = current_dir.as_ref().expect(\"could not read current directory\");\n+                    let package_manifest_directory = package_manifest_path.parent()\n+                        .expect(\"could not find parent directory of package manifest\");\n+                    package_manifest_directory == current_dir\n+                }\n+            })\n+            .expect(\"could not find matching package\");\n+        let package = metadata.packages.remove(package_index);\n+        for target in package.targets {\n+            let args = std::env::args().skip(2);\n+            if let Some(\"bin\") = target.kind.get(0).map(AsRef::as_ref) {\n+                if let Err(code) = process(vec![\"--bin\".to_string(), target.name].into_iter().chain(args),\n+                                           &dep_path) {\n+                    std::process::exit(code);\n+                }\n+            } else {\n+                panic!(\"badly formatted cargo metadata: target::kind is an empty array\");\n+            }\n+        }\n+    } else {\n+        // this arm is executed when cargo-miri runs `cargo rustc` with the `RUSTC` env var set to itself\n+\n+        let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n+        let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n+        let sys_root = if let (Some(home), Some(toolchain)) = (home, toolchain) {\n+            format!(\"{}/toolchains/{}\", home, toolchain)\n+        } else {\n+            option_env!(\"SYSROOT\")\n+                .map(|s| s.to_owned())\n+                .or_else(|| {\n+                    Command::new(\"rustc\")\n+                        .arg(\"--print\")\n+                        .arg(\"sysroot\")\n+                        .output()\n+                        .ok()\n+                        .and_then(|out| String::from_utf8(out.stdout).ok())\n+                        .map(|s| s.trim().to_owned())\n+                })\n+                .expect(\"need to specify SYSROOT env var during miri compilation, or use rustup or multirust\")\n+        };\n+\n+        // this conditional check for the --sysroot flag is there so users can call `cargo-clippy` directly\n+        // without having to pass --sysroot or anything\n+        let mut args: Vec<String> = if std::env::args().any(|s| s == \"--sysroot\") {\n+            std::env::args().skip(1).collect()\n+        } else {\n+            std::env::args().skip(1).chain(Some(\"--sysroot\".to_owned())).chain(Some(sys_root)).collect()\n+        };\n+\n+        // this check ensures that dependencies are built but not interpreted and the final crate is\n+        // interpreted but not built\n+        let miri_enabled = std::env::args().any(|s| s == \"-Zno-trans\");\n+\n+        if miri_enabled {\n+            args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-miri\"\"#.to_owned()]);\n+        }\n+\n+        let mut path = std::env::current_exe().expect(\"current executable path invalid\");\n+        path.set_file_name(\"miri\");\n+\n+        match Command::new(path).args(&args).status() {\n+            Ok(exit) => if !exit.success() {\n+                std::process::exit(exit.code().unwrap_or(42));\n+            },\n+            Err(e) => panic!(\"error during miri run: {:?}\", e),\n+        }\n+    }\n+}\n+\n+fn process<P, I>(old_args: I, dep_path: P) -> Result<(), i32>\n+    where P: AsRef<Path>,\n+          I: Iterator<Item = String>\n+{\n+    let mut args = vec![\"rustc\".to_owned()];\n+\n+    let mut found_dashes = false;\n+    for arg in old_args {\n+        found_dashes |= arg == \"--\";\n+        args.push(arg);\n+    }\n+    if !found_dashes {\n+        args.push(\"--\".to_owned());\n+    }\n+    args.push(\"-L\".to_owned());\n+    args.push(dep_path.as_ref().to_string_lossy().into_owned());\n+    args.push(\"-Zno-trans\".to_owned());\n+    args.push(\"--cfg\".to_owned());\n+    args.push(r#\"feature=\"cargo-miri\"\"#.to_owned());\n+\n+    let path = std::env::current_exe().expect(\"current executable path invalid\");\n+    let exit_status = std::process::Command::new(\"cargo\")\n+        .args(&args)\n+        .env(\"RUSTC\", path)\n+        .spawn()\n+        .expect(\"could not run cargo\")\n+        .wait()\n+        .expect(\"failed to wait for cargo?\");\n+\n+    if exit_status.success() {\n+        Ok(())\n+    } else {\n+        Err(exit_status.code().unwrap_or(-1))\n+    }\n+}"}, {"sha": "e36b9baa64bbf76408ee1725637a50285816f070", "filename": "src/bin/miri.rs", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5adb84645fe1f734acadb9a26422a791a56edef0/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5adb84645fe1f734acadb9a26422a791a56edef0/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=5adb84645fe1f734acadb9a26422a791a56edef0", "patch": "@@ -4,21 +4,55 @@ extern crate getopts;\n extern crate miri;\n extern crate rustc;\n extern crate rustc_driver;\n+extern crate rustc_errors;\n extern crate env_logger;\n extern crate log_settings;\n extern crate syntax;\n #[macro_use] extern crate log;\n \n use rustc::session::Session;\n-use rustc_driver::{Compilation, CompilerCalls};\n+use rustc_driver::{Compilation, CompilerCalls, RustcDefaultCalls};\n use rustc_driver::driver::{CompileState, CompileController};\n-use syntax::ast::{MetaItemKind, NestedMetaItemKind};\n+use rustc::session::config::{self, Input, ErrorOutputType};\n+use syntax::ast::{MetaItemKind, NestedMetaItemKind, self};\n+use std::path::PathBuf;\n \n-struct MiriCompilerCalls;\n+struct MiriCompilerCalls(RustcDefaultCalls);\n \n impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n-    fn build_controller(&mut self, _: &Session, _: &getopts::Matches) -> CompileController<'a> {\n-        let mut control = CompileController::basic();\n+    fn early_callback(\n+        &mut self,\n+        matches: &getopts::Matches,\n+        sopts: &config::Options,\n+        cfg: &ast::CrateConfig,\n+        descriptions: &rustc_errors::registry::Registry,\n+        output: ErrorOutputType\n+    ) -> Compilation {\n+        self.0.early_callback(matches, sopts, cfg, descriptions, output)\n+    }\n+    fn no_input(\n+        &mut self,\n+        matches: &getopts::Matches,\n+        sopts: &config::Options,\n+        cfg: &ast::CrateConfig,\n+        odir: &Option<PathBuf>,\n+        ofile: &Option<PathBuf>,\n+        descriptions: &rustc_errors::registry::Registry\n+    ) -> Option<(Input, Option<PathBuf>)> {\n+        self.0.no_input(matches, sopts, cfg, odir, ofile, descriptions)\n+    }\n+    fn late_callback(\n+        &mut self,\n+        matches: &getopts::Matches,\n+        sess: &Session,\n+        input: &Input,\n+        odir: &Option<PathBuf>,\n+        ofile: &Option<PathBuf>\n+    ) -> Compilation {\n+        self.0.late_callback(matches, sess, input, odir, ofile)\n+    }\n+    fn build_controller(&mut self, sess: &Session, matches: &getopts::Matches) -> CompileController<'a> {\n+        let mut control = self.0.build_controller(sess, matches);\n         control.after_hir_lowering.callback = Box::new(after_hir_lowering);\n         control.after_analysis.callback = Box::new(after_analysis);\n         if std::env::var(\"MIRI_HOST_TARGET\") != Ok(\"yes\".to_owned()) {\n@@ -147,5 +181,5 @@ fn main() {\n     // for auxilary builds in unit tests\n     args.push(\"-Zalways-encode-mir\".to_owned());\n \n-    rustc_driver::run_compiler(&args, &mut MiriCompilerCalls, None, None);\n+    rustc_driver::run_compiler(&args, &mut MiriCompilerCalls(RustcDefaultCalls), None, None);\n }"}]}