{"sha": "8f0b1863d0617be844112778e77544a5bcee79cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMGIxODYzZDA2MTdiZTg0NDExMjc3OGU3NzU0NGE1YmNlZTc5Y2Q=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-05-07T14:19:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-07T14:19:20Z"}, "message": "Rollup merge of #84655 - CDirkx:wasm, r=m-ou-se\n\nCleanup of `wasm`\n\nSome more cleanup of `sys`, this time `wasm`\n\n- Reuse `unsupported::args` (functionally equivalent implementation, just an empty iterator).\n- Split out `atomics` implementation of `wasm::thread`, the non-`atomics` implementation is reused from `unsupported`.\n- Move all of the `atomics` code to a separate directory `wasm/atomics`.\n\n````@rustbot```` label: +T-libs-impl\nr? ````@m-ou-se````", "tree": {"sha": "d4ecc9536503dc6a45c709fca9bcc9825fad4aba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4ecc9536503dc6a45c709fca9bcc9825fad4aba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f0b1863d0617be844112778e77544a5bcee79cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJglUxoCRBK7hj4Ov3rIwAAYdwIAJZ3W+nsrWYp3cKiar73zdfR\nLDX71nHPAdrKoUVCX0bBygR/N2aH9tPHzBYlmbUjO2nFF6HafN7CwQVr5OUJc2Rx\nxVwnqXRcCVq42fB+hvQ/w/KwefW5sqqF89Ut+WhGjWo0Zs/RouKgGsbiX9cqYrpJ\nvCRkVB0LMqT4kSUAUxM1mzt50TKo4KJujSo5SmqoWPv4m+FvZqyD2s+Li3IUurs2\nmgPPUgw9SuTde1RNVzJK4ki7MzgEXRaxM+35IfaoH5Xg6bqzW4pYeqHQveQX8AEV\nYQ1jGZWZ6xx81chBN3DizYPPjjb/gt7zyfO6t0x+WqH6SMIcoIOpVFIBfIIynwM=\n=tLmt\n-----END PGP SIGNATURE-----\n", "payload": "tree d4ecc9536503dc6a45c709fca9bcc9825fad4aba\nparent 0c8c21d224ca94f63d2b07000e8223f3a041281b\nparent cf79c06575f1710f05ee5309fb24bcdfff6f0140\nauthor Dylan DPC <dylan.dpc@gmail.com> 1620397160 +0200\ncommitter GitHub <noreply@github.com> 1620397160 +0200\n\nRollup merge of #84655 - CDirkx:wasm, r=m-ou-se\n\nCleanup of `wasm`\n\nSome more cleanup of `sys`, this time `wasm`\n\n- Reuse `unsupported::args` (functionally equivalent implementation, just an empty iterator).\n- Split out `atomics` implementation of `wasm::thread`, the non-`atomics` implementation is reused from `unsupported`.\n- Move all of the `atomics` code to a separate directory `wasm/atomics`.\n\n````@rustbot```` label: +T-libs-impl\nr? ````@m-ou-se````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f0b1863d0617be844112778e77544a5bcee79cd", "html_url": "https://github.com/rust-lang/rust/commit/8f0b1863d0617be844112778e77544a5bcee79cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f0b1863d0617be844112778e77544a5bcee79cd/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c8c21d224ca94f63d2b07000e8223f3a041281b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c8c21d224ca94f63d2b07000e8223f3a041281b", "html_url": "https://github.com/rust-lang/rust/commit/0c8c21d224ca94f63d2b07000e8223f3a041281b"}, {"sha": "cf79c06575f1710f05ee5309fb24bcdfff6f0140", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf79c06575f1710f05ee5309fb24bcdfff6f0140", "html_url": "https://github.com/rust-lang/rust/commit/cf79c06575f1710f05ee5309fb24bcdfff6f0140"}], "stats": {"total": 79, "additions": 14, "deletions": 65}, "files": [{"sha": "a2d75a61976337f691b7bfacf3a33eae425bb29e", "filename": "library/std/src/sys/unsupported/args.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f0b1863d0617be844112778e77544a5bcee79cd/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f0b1863d0617be844112778e77544a5bcee79cd/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fargs.rs?ref=8f0b1863d0617be844112778e77544a5bcee79cd", "patch": "@@ -1,4 +1,5 @@\n use crate::ffi::OsString;\n+use crate::fmt;\n \n pub struct Args {}\n "}, {"sha": "fde1ab79e1f4b97d73bc1ed1e3333755ab2e93f1", "filename": "library/std/src/sys/wasm/args.rs", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0c8c21d224ca94f63d2b07000e8223f3a041281b/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8c21d224ca94f63d2b07000e8223f3a041281b/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fargs.rs?ref=0c8c21d224ca94f63d2b07000e8223f3a041281b", "patch": "@@ -1,42 +0,0 @@\n-use crate::ffi::OsString;\n-use crate::fmt;\n-use crate::vec;\n-\n-pub fn args() -> Args {\n-    Args { iter: Vec::new().into_iter() }\n-}\n-\n-pub struct Args {\n-    iter: vec::IntoIter<OsString>,\n-}\n-\n-impl !Send for Args {}\n-impl !Sync for Args {}\n-\n-impl fmt::Debug for Args {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        self.iter.as_slice().fmt(f)\n-    }\n-}\n-\n-impl Iterator for Args {\n-    type Item = OsString;\n-    fn next(&mut self) -> Option<OsString> {\n-        self.iter.next()\n-    }\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        self.iter.size_hint()\n-    }\n-}\n-\n-impl ExactSizeIterator for Args {\n-    fn len(&self) -> usize {\n-        self.iter.len()\n-    }\n-}\n-\n-impl DoubleEndedIterator for Args {\n-    fn next_back(&mut self) -> Option<OsString> {\n-        self.iter.next_back()\n-    }\n-}"}, {"sha": "0c1c076cc914241baa16f13bce8a9e057500842d", "filename": "library/std/src/sys/wasm/atomics/condvar.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8f0b1863d0617be844112778e77544a5bcee79cd/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f0b1863d0617be844112778e77544a5bcee79cd/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fcondvar.rs?ref=8f0b1863d0617be844112778e77544a5bcee79cd", "previous_filename": "library/std/src/sys/wasm/condvar_atomics.rs"}, {"sha": "3d8bf42f7255eec2b11660c02d5d082eb6a3e422", "filename": "library/std/src/sys/wasm/atomics/futex.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8f0b1863d0617be844112778e77544a5bcee79cd/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f0b1863d0617be844112778e77544a5bcee79cd/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Ffutex.rs?ref=8f0b1863d0617be844112778e77544a5bcee79cd", "previous_filename": "library/std/src/sys/wasm/futex_atomics.rs"}, {"sha": "5ff0ec052b6f4c0cdc95f4f85942f107d5b47b3f", "filename": "library/std/src/sys/wasm/atomics/mutex.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8f0b1863d0617be844112778e77544a5bcee79cd/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f0b1863d0617be844112778e77544a5bcee79cd/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fmutex.rs?ref=8f0b1863d0617be844112778e77544a5bcee79cd", "previous_filename": "library/std/src/sys/wasm/mutex_atomics.rs"}, {"sha": "06442e925f4c8710d33caf6fff3e18a54e495081", "filename": "library/std/src/sys/wasm/atomics/rwlock.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8f0b1863d0617be844112778e77544a5bcee79cd/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f0b1863d0617be844112778e77544a5bcee79cd/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Frwlock.rs?ref=8f0b1863d0617be844112778e77544a5bcee79cd", "previous_filename": "library/std/src/sys/wasm/rwlock_atomics.rs"}, {"sha": "54bc877aa7de720cbaeddd21b977f3bc804db777", "filename": "library/std/src/sys/wasm/atomics/thread.rs", "status": "renamed", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8f0b1863d0617be844112778e77544a5bcee79cd/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f0b1863d0617be844112778e77544a5bcee79cd/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fthread.rs?ref=8f0b1863d0617be844112778e77544a5bcee79cd", "patch": "@@ -13,20 +13,10 @@ impl Thread {\n         unsupported()\n     }\n \n-    pub fn yield_now() {\n-        // do nothing\n-    }\n+    pub fn yield_now() {}\n \n-    pub fn set_name(_name: &CStr) {\n-        // nope\n-    }\n+    pub fn set_name(_name: &CStr) {}\n \n-    #[cfg(not(target_feature = \"atomics\"))]\n-    pub fn sleep(_dur: Duration) {\n-        panic!(\"can't sleep\");\n-    }\n-\n-    #[cfg(target_feature = \"atomics\")]\n     pub fn sleep(dur: Duration) {\n         use crate::arch::wasm32;\n         use crate::cmp;\n@@ -46,9 +36,7 @@ impl Thread {\n         }\n     }\n \n-    pub fn join(self) {\n-        self.0\n-    }\n+    pub fn join(self) {}\n }\n \n pub mod guard {\n@@ -61,11 +49,9 @@ pub mod guard {\n     }\n }\n \n-// This is only used by atomics primitives when the `atomics` feature is\n-// enabled. In that mode we currently just use our own thread-local to store our\n+// We currently just use our own thread-local to store our\n // current thread's ID, and then we lazily initialize it to something allocated\n // from a global counter.\n-#[cfg(target_feature = \"atomics\")]\n pub fn my_id() -> u32 {\n     use crate::sync::atomic::{AtomicU32, Ordering::SeqCst};\n ", "previous_filename": "library/std/src/sys/wasm/thread.rs"}, {"sha": "cd701a333f84cb7a9f0168770f76bc6d35e1760a", "filename": "library/std/src/sys/wasm/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8f0b1863d0617be844112778e77544a5bcee79cd/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f0b1863d0617be844112778e77544a5bcee79cd/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs?ref=8f0b1863d0617be844112778e77544a5bcee79cd", "patch": "@@ -17,6 +17,7 @@\n #![deny(unsafe_op_in_unsafe_fn)]\n \n pub mod alloc;\n+#[path = \"../unsupported/args.rs\"]\n pub mod args;\n #[path = \"../unix/cmath.rs\"]\n pub mod cmath;\n@@ -37,7 +38,6 @@ pub mod pipe;\n pub mod process;\n #[path = \"../unsupported/stdio.rs\"]\n pub mod stdio;\n-pub mod thread;\n #[path = \"../unsupported/thread_local_dtor.rs\"]\n pub mod thread_local_dtor;\n #[path = \"../unsupported/thread_local_key.rs\"]\n@@ -49,21 +49,25 @@ pub use crate::sys_common::os_str_bytes as os_str;\n \n cfg_if::cfg_if! {\n     if #[cfg(target_feature = \"atomics\")] {\n-        #[path = \"condvar_atomics.rs\"]\n+        #[path = \"atomics/condvar.rs\"]\n         pub mod condvar;\n-        #[path = \"mutex_atomics.rs\"]\n+        #[path = \"atomics/mutex.rs\"]\n         pub mod mutex;\n-        #[path = \"rwlock_atomics.rs\"]\n+        #[path = \"atomics/rwlock.rs\"]\n         pub mod rwlock;\n-        #[path = \"futex_atomics.rs\"]\n+        #[path = \"atomics/futex.rs\"]\n         pub mod futex;\n+        #[path = \"atomics/thread.rs\"]\n+        pub mod thread;\n     } else {\n         #[path = \"../unsupported/condvar.rs\"]\n         pub mod condvar;\n         #[path = \"../unsupported/mutex.rs\"]\n         pub mod mutex;\n         #[path = \"../unsupported/rwlock.rs\"]\n         pub mod rwlock;\n+        #[path = \"../unsupported/thread.rs\"]\n+        pub mod thread;\n     }\n }\n "}]}