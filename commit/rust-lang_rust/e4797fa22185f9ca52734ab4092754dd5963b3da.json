{"sha": "e4797fa22185f9ca52734ab4092754dd5963b3da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0Nzk3ZmEyMjE4NWY5Y2E1MjczNGFiNDA5Mjc1NGRkNTk2M2IzZGE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-10-02T07:37:23Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-10-02T07:37:23Z"}, "message": "Rollup merge of #28797 - steveklabnik:rebase_for_gankro, r=alexcrichton\n\nThis is a rebase of https://github.com/rust-lang/rust/pull/27902/, since @Gankro  is busy :heart:", "tree": {"sha": "3140bc1b23c38457540804fb3360aab17db52847", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3140bc1b23c38457540804fb3360aab17db52847"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4797fa22185f9ca52734ab4092754dd5963b3da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4797fa22185f9ca52734ab4092754dd5963b3da", "html_url": "https://github.com/rust-lang/rust/commit/e4797fa22185f9ca52734ab4092754dd5963b3da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4797fa22185f9ca52734ab4092754dd5963b3da/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee0157fd52cc6ff622b383f7dfa6408df441b780", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee0157fd52cc6ff622b383f7dfa6408df441b780", "html_url": "https://github.com/rust-lang/rust/commit/ee0157fd52cc6ff622b383f7dfa6408df441b780"}, {"sha": "c7527a199953d4f902241279fb457c86c80f5927", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7527a199953d4f902241279fb457c86c80f5927", "html_url": "https://github.com/rust-lang/rust/commit/c7527a199953d4f902241279fb457c86c80f5927"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "bcde523307c835d83dee31bcf64608c2a416eac7", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/e4797fa22185f9ca52734ab4092754dd5963b3da/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4797fa22185f9ca52734ab4092754dd5963b3da/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=e4797fa22185f9ca52734ab4092754dd5963b3da", "patch": "@@ -148,6 +148,81 @@ use super::range::RangeArgument;\n /// if the vector's length is increased to 11, it will have to reallocate, which\n /// can be slow. For this reason, it is recommended to use `Vec::with_capacity`\n /// whenever possible to specify how big the vector is expected to get.\n+///\n+/// # Guarantees\n+///\n+/// Due to its incredibly fundamental nature, Vec makes a lot of guarantees\n+/// about its design. This ensures that it's as low-overhead as possible in\n+/// the general case, and can be correctly manipulated in primitive ways\n+/// by unsafe code. Note that these guarantees refer to an unqualified `Vec<T>`.\n+/// If additional type parameters are added (e.g. to support custom allocators),\n+/// overriding their defaults may change the behavior.\n+///\n+/// Most fundamentally, Vec is and always will be a (pointer, capacity, length)\n+/// triplet. No more, no less. The order of these fields is completely\n+/// unspecified, and you should use the appropriate methods to modify these.\n+/// The pointer will never be null, so this type is null-pointer-optimized.\n+///\n+/// However, the pointer may not actually point to allocated memory. In particular,\n+/// if you construct a Vec with capacity 0 via `Vec::new()`, `vec![]`,\n+/// `Vec::with_capacity(0)`, or by calling `shrink_to_fit()` on an empty Vec, it\n+/// will not allocate memory. Similarly, if you store zero-sized types inside\n+/// a Vec, it will not allocate space for them. *Note that in this case the\n+/// Vec may not report a `capacity()` of 0*. Vec will allocate if and only\n+/// if `mem::size_of::<T>() * capacity() > 0`. In general, Vec's allocation\n+/// details are subtle enough that it is strongly recommended that you only\n+/// free memory allocated by a Vec by creating a new Vec and dropping it.\n+///\n+/// If a Vec *has* allocated memory, then the memory it points to is on the heap\n+/// (as defined by the allocator Rust is configured to use by default), and its\n+/// pointer points to `len()` initialized elements in order (what you would see\n+/// if you coerced it to a slice), followed by `capacity() - len()` logically\n+/// uninitialized elements.\n+///\n+/// Vec will never perform a \"small optimization\" where elements are actually\n+/// stored on the stack for two reasons:\n+///\n+/// * It would make it more difficult for unsafe code to correctly manipulate\n+///   a Vec. The contents of a Vec wouldn't have a stable address if it were\n+///   only moved, and it would be more difficult to determine if a Vec had\n+///   actually allocated memory.\n+///\n+/// * It would penalize the general case, incurring an additional branch\n+///   on every access.\n+///\n+/// Vec will never automatically shrink itself, even if completely empty. This\n+/// ensures no unnecessary allocations or deallocations occur. Emptying a Vec\n+/// and then filling it back up to the same `len()` should incur no calls to\n+/// the allocator. If you wish to free up unused memory, use `shrink_to_fit`.\n+///\n+/// `push` and `insert` will never (re)allocate if the reported capacity is\n+/// sufficient. `push` and `insert` *will* (re)allocate if `len() == capacity()`.\n+/// That is, the reported capacity is completely accurate, and can be relied on.\n+/// It can even be used to manually free the memory allocated by a Vec if\n+/// desired. Bulk insertion methods *may* reallocate, even when not necessary.\n+///\n+/// Vec does not guarantee any particular growth strategy when reallocating\n+/// when full, nor when `reserve` is called. The current strategy is basic\n+/// and it may prove desirable to use a non-constant growth factor. Whatever\n+/// strategy is used will of course guarantee `O(1)` amortized `push`.\n+///\n+/// `vec![x; n]`, `vec![a, b, c, d]`, and `Vec::with_capacity(n)`, will all\n+/// produce a Vec with exactly the requested capacity. If `len() == capacity()`,\n+/// (as is the case for the `vec!` macro), then a `Vec<T>` can be converted\n+/// to and from a `Box<[T]>` without reallocating or moving the elements.\n+///\n+/// Vec will not specifically overwrite any data that is removed from it,\n+/// but also won't specifically preserve it. Its uninitialized memory is\n+/// scratch space that it may use however it wants. It will generally just do\n+/// whatever is most efficient or otherwise easy to implement. Do not rely on\n+/// removed data to be erased for security purposes. Even if you drop a Vec, its\n+/// buffer may simply be reused by another Vec. Even if you zero a Vec's memory\n+/// first, that may not actually happen because the optimizer does not consider\n+/// this a side-effect that must be preserved.\n+///\n+/// Vec does not currently guarantee the order in which elements are dropped\n+/// (the order has changed in the past, and may change again).\n+///\n #[unsafe_no_drop_flag]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Vec<T> {"}]}