{"sha": "b42f49bf99cb9d4a50000742df55683f8ad82d74", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MmY0OWJmOTljYjlkNGE1MDAwMDc0MmRmNTU2ODNmOGFkODJkNzQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-31T22:33:49Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-31T22:33:49Z"}, "message": "Parse local item decls.", "tree": {"sha": "7d248b605e5f2dca3fe9ded2443531ed29861381", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d248b605e5f2dca3fe9ded2443531ed29861381"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b42f49bf99cb9d4a50000742df55683f8ad82d74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b42f49bf99cb9d4a50000742df55683f8ad82d74", "html_url": "https://github.com/rust-lang/rust/commit/b42f49bf99cb9d4a50000742df55683f8ad82d74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b42f49bf99cb9d4a50000742df55683f8ad82d74/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53d5b112080f2908acf01bba418fdf3568f490f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/53d5b112080f2908acf01bba418fdf3568f490f7", "html_url": "https://github.com/rust-lang/rust/commit/53d5b112080f2908acf01bba418fdf3568f490f7"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "d799253d982c6ed25c2778fecae84218123f0414", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b42f49bf99cb9d4a50000742df55683f8ad82d74/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b42f49bf99cb9d4a50000742df55683f8ad82d74/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=b42f49bf99cb9d4a50000742df55683f8ad82d74", "patch": "@@ -1067,12 +1067,20 @@ impure fn parse_stmt(parser p) -> @ast.stmt {\n         }\n \n \n-        // Remainder are line-expr stmts.\n-\n         case (_) {\n-            auto e = parse_expr(p);\n-            auto hi = p.get_span();\n-            ret @spanned(lo, hi, ast.stmt_expr(e));\n+            if (peeking_at_item(p)) {\n+                // Might be a local item decl.\n+                auto i = parse_item(p);\n+                auto hi = i.span;\n+                auto decl = @spanned(lo, hi, ast.decl_item(i));\n+                ret @spanned(lo, hi, ast.stmt_decl(decl));\n+\n+            } else {\n+                // Remainder are line-expr stmts.\n+                auto e = parse_expr(p);\n+                auto hi = p.get_span();\n+                ret @spanned(lo, hi, ast.stmt_expr(e));\n+            }\n         }\n     }\n     p.err(\"expected statement\");\n@@ -1147,7 +1155,12 @@ fn stmt_to_expr(@ast.stmt stmt) -> option.t[@ast.expr] {\n \n fn stmt_ends_with_semi(@ast.stmt stmt) -> bool {\n     alt (stmt.node) {\n-        case (ast.stmt_decl(_))                 { ret true; } // FIXME\n+        case (ast.stmt_decl(?d)) {\n+            alt (d.node) {\n+                case (ast.decl_local(_)) { ret true; }\n+                case (ast.decl_item(_)) { ret false; }\n+            }\n+        }\n         case (ast.stmt_ret(_))                  { ret true; }\n         case (ast.stmt_log(_))                  { ret true; }\n         case (ast.stmt_check_expr(_))           { ret true; }\n@@ -1500,6 +1513,23 @@ impure fn parse_effect(parser p) -> ast.effect {\n     fail;\n }\n \n+fn peeking_at_item(parser p) -> bool {\n+    alt (p.peek()) {\n+        case (token.STATE) { ret true; }\n+        case (token.GC) { ret true; }\n+        case (token.IMPURE) { ret true; }\n+        case (token.UNSAFE) { ret true; }\n+        case (token.CONST) { ret true; }\n+        case (token.FN) { ret true; }\n+        case (token.MOD) { ret true; }\n+        case (token.TYPE) { ret true; }\n+        case (token.TAG) { ret true; }\n+        case (token.OBJ) { ret true; }\n+        case (_) { ret false; }\n+    }\n+    ret false;\n+}\n+\n impure fn parse_item(parser p) -> @ast.item {\n     let ast.effect eff = parse_effect(p);\n     let ast.layer lyr = parse_layer(p);"}]}