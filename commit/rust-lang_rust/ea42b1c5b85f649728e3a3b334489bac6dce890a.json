{"sha": "ea42b1c5b85f649728e3a3b334489bac6dce890a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNDJiMWM1Yjg1ZjY0OTcyOGUzYTNiMzM0NDg5YmFjNmRjZTg5MGE=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-01-25T02:24:24Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-01-25T02:38:25Z"}, "message": "[self-profiler] Use `ThreadId::as_u64()` instead of transmute", "tree": {"sha": "0d0538e0108d675d80a7bc4f236c3dddefd4baa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d0538e0108d675d80a7bc4f236c3dddefd4baa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea42b1c5b85f649728e3a3b334489bac6dce890a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea42b1c5b85f649728e3a3b334489bac6dce890a", "html_url": "https://github.com/rust-lang/rust/commit/ea42b1c5b85f649728e3a3b334489bac6dce890a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea42b1c5b85f649728e3a3b334489bac6dce890a/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "html_url": "https://github.com/rust-lang/rust/commit/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb"}], "stats": {"total": 10, "additions": 3, "deletions": 7}, "files": [{"sha": "aaac7fb4460cd51fb717f5267ccbb8158902fdc2", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea42b1c5b85f649728e3a3b334489bac6dce890a/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea42b1c5b85f649728e3a3b334489bac6dce890a/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=ea42b1c5b85f649728e3a3b334489bac6dce890a", "patch": "@@ -23,6 +23,7 @@\n #![feature(integer_atomics)]\n #![feature(test)]\n #![feature(associated_type_bounds)]\n+#![feature(thread_id_value)]\n #![cfg_attr(unix, feature(libc))]\n #![allow(rustc::default_hash_types)]\n "}, {"sha": "35bc6e298ac60e8fa3dce2bc272deacda8ba2f22", "filename": "src/librustc_data_structures/profiling.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ea42b1c5b85f649728e3a3b334489bac6dce890a/src%2Flibrustc_data_structures%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea42b1c5b85f649728e3a3b334489bac6dce890a/src%2Flibrustc_data_structures%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fprofiling.rs?ref=ea42b1c5b85f649728e3a3b334489bac6dce890a", "patch": "@@ -88,7 +88,6 @@ use std::fs;\n use std::path::Path;\n use std::process;\n use std::sync::Arc;\n-use std::thread::ThreadId;\n use std::time::{Duration, Instant};\n use std::u32;\n \n@@ -149,10 +148,6 @@ const EVENT_FILTERS_BY_NAME: &[(&str, EventFilter)] = &[\n     (\"query-keys\", EventFilter::QUERY_KEYS),\n ];\n \n-fn thread_id_to_u32(tid: ThreadId) -> u32 {\n-    unsafe { std::mem::transmute::<ThreadId, u64>(tid) as u32 }\n-}\n-\n /// Something that uniquely identifies a query invocation.\n pub struct QueryInvocationId(pub u32);\n \n@@ -318,7 +313,7 @@ impl SelfProfilerRef {\n     ) {\n         drop(self.exec(event_filter, |profiler| {\n             let event_id = StringId::new_virtual(query_invocation_id.0);\n-            let thread_id = thread_id_to_u32(std::thread::current().id());\n+            let thread_id = std::thread::current().id().as_u64() as u32;\n \n             profiler.profiler.record_instant_event(\n                 event_kind(profiler),\n@@ -477,7 +472,7 @@ impl<'a> TimingGuard<'a> {\n         event_kind: StringId,\n         event_id: EventId,\n     ) -> TimingGuard<'a> {\n-        let thread_id = thread_id_to_u32(std::thread::current().id());\n+        let thread_id = std::thread::current().id().as_u64() as u32;\n         let raw_profiler = &profiler.profiler;\n         let timing_guard =\n             raw_profiler.start_recording_interval_event(event_kind, event_id, thread_id);"}]}