{"sha": "60138110d7b00c8c788526cad525942e732db6ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMTM4MTEwZDdiMDBjOGM3ODg1MjZjYWQ1MjU5NDJlNzMyZGI2Y2E=", "commit": {"author": {"name": "Mara", "email": "m-ou.se@m-ou.se", "date": "2021-03-05T09:57:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-05T09:57:17Z"}, "message": "Rollup merge of #81136 - Xavientois:io_reader_size_hint, r=cramertj\n\nImproved IO Bytes Size Hint\n\nAfter trying to implement better `size_hint()` return values for `File` in [this PR](https://github.com/rust-lang/rust/pull/81044) and changing to implementing it for `BufReader` in [this PR](https://github.com/rust-lang/rust/pull/81052), I have arrived at this implementation that provides tighter bounds for the `Bytes` iterator of various readers including `BufReader`, `Empty`, and `Chain`.\n\nUnfortunately, for `BufReader`, the size_hint only improves after calling `fill_buffer` due to it using the contents of the buffer for the hint. Nevertheless, the the tighter bounds  should result in better pre-allocation of space to handle the contents of the `Bytes` iterator.\n\nCloses #81052", "tree": {"sha": "bf0ee3d1f4fe6994b62a6298b5cbed5f7c04caad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf0ee3d1f4fe6994b62a6298b5cbed5f7c04caad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60138110d7b00c8c788526cad525942e732db6ca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgQgB9CRBK7hj4Ov3rIwAAdHIIAAaokH9GRbn3YMS+rT437oHp\njtSI9qsRWgfvTa6fXGPc9f/7FK84zSOe8va3VxRw4FYABD3/oQSwCT/848gbLpUH\noMCvCfb7m7Ug1j59Jo9LnlKftKZsytOdGg5WUWRn1n17Pr5n54J8xeU8bS63TMpy\ndQlevaf9TgyC6sObdTPC5+W7DdZWH5azWvCA5zXLF5V1pKvJMU5AwHS1JXmLw4Jx\nLlH8C9iWLEvmvChgymUkaov5wOZ8d7Gcdt/lkDwvEhtu6/OEb5w/3T5ZFos3t5IE\nALHIeOXo/chCUVFNsdRIFXUd4F00nXzAjVw2t5w7ANP0TegMwdjSybiIKJXTa4Y=\n=/VkM\n-----END PGP SIGNATURE-----\n", "payload": "tree bf0ee3d1f4fe6994b62a6298b5cbed5f7c04caad\nparent ec2619ca6219a74f3c97ac7c32aeecd79368788f\nparent 7674ae1a4e10ab6bafbda57f9fc2175fdf012f5e\nauthor Mara <m-ou.se@m-ou.se> 1614938237 +0100\ncommitter GitHub <noreply@github.com> 1614938237 +0100\n\nRollup merge of #81136 - Xavientois:io_reader_size_hint, r=cramertj\n\nImproved IO Bytes Size Hint\n\nAfter trying to implement better `size_hint()` return values for `File` in [this PR](https://github.com/rust-lang/rust/pull/81044) and changing to implementing it for `BufReader` in [this PR](https://github.com/rust-lang/rust/pull/81052), I have arrived at this implementation that provides tighter bounds for the `Bytes` iterator of various readers including `BufReader`, `Empty`, and `Chain`.\n\nUnfortunately, for `BufReader`, the size_hint only improves after calling `fill_buffer` due to it using the contents of the buffer for the hint. Nevertheless, the the tighter bounds  should result in better pre-allocation of space to handle the contents of the `Bytes` iterator.\n\nCloses #81052\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60138110d7b00c8c788526cad525942e732db6ca", "html_url": "https://github.com/rust-lang/rust/commit/60138110d7b00c8c788526cad525942e732db6ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60138110d7b00c8c788526cad525942e732db6ca/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec2619ca6219a74f3c97ac7c32aeecd79368788f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec2619ca6219a74f3c97ac7c32aeecd79368788f", "html_url": "https://github.com/rust-lang/rust/commit/ec2619ca6219a74f3c97ac7c32aeecd79368788f"}, {"sha": "7674ae1a4e10ab6bafbda57f9fc2175fdf012f5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7674ae1a4e10ab6bafbda57f9fc2175fdf012f5e", "html_url": "https://github.com/rust-lang/rust/commit/7674ae1a4e10ab6bafbda57f9fc2175fdf012f5e"}], "stats": {"total": 106, "additions": 103, "deletions": 3}, "files": [{"sha": "839c64ee5c4433aeb2b1fa1bf11153a7c6288517", "filename": "library/std/src/io/buffered/bufreader.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/60138110d7b00c8c788526cad525942e732db6ca/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60138110d7b00c8c788526cad525942e732db6ca/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs?ref=60138110d7b00c8c788526cad525942e732db6ca", "patch": "@@ -1,6 +1,8 @@\n use crate::cmp;\n use crate::fmt;\n-use crate::io::{self, BufRead, Initializer, IoSliceMut, Read, Seek, SeekFrom, DEFAULT_BUF_SIZE};\n+use crate::io::{\n+    self, BufRead, Initializer, IoSliceMut, Read, Seek, SeekFrom, SizeHint, DEFAULT_BUF_SIZE,\n+};\n \n /// The `BufReader<R>` struct adds buffering to any reader.\n ///\n@@ -435,3 +437,9 @@ impl<R: Seek> Seek for BufReader<R> {\n         })\n     }\n }\n+\n+impl<T> SizeHint for BufReader<T> {\n+    fn lower_bound(&self) -> usize {\n+        self.buffer().len()\n+    }\n+}"}, {"sha": "17002e3b8602d7eb2c45bbe1d8f7a48bb2941137", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/60138110d7b00c8c788526cad525942e732db6ca/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60138110d7b00c8c788526cad525942e732db6ca/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=60138110d7b00c8c788526cad525942e732db6ca", "patch": "@@ -2238,6 +2238,19 @@ impl<T: BufRead, U: BufRead> BufRead for Chain<T, U> {\n     }\n }\n \n+impl<T, U> SizeHint for Chain<T, U> {\n+    fn lower_bound(&self) -> usize {\n+        SizeHint::lower_bound(&self.first) + SizeHint::lower_bound(&self.second)\n+    }\n+\n+    fn upper_bound(&self) -> Option<usize> {\n+        match (SizeHint::upper_bound(&self.first), SizeHint::upper_bound(&self.second)) {\n+            (Some(first), Some(second)) => Some(first + second),\n+            _ => None,\n+        }\n+    }\n+}\n+\n /// Reader adaptor which limits the bytes read from an underlying reader.\n ///\n /// This struct is generally created by calling [`take`] on a reader.\n@@ -2464,6 +2477,30 @@ impl<R: Read> Iterator for Bytes<R> {\n             };\n         }\n     }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        SizeHint::size_hint(&self.inner)\n+    }\n+}\n+\n+trait SizeHint {\n+    fn lower_bound(&self) -> usize;\n+\n+    fn upper_bound(&self) -> Option<usize>;\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        (self.lower_bound(), self.upper_bound())\n+    }\n+}\n+\n+impl<T> SizeHint for T {\n+    default fn lower_bound(&self) -> usize {\n+        0\n+    }\n+\n+    default fn upper_bound(&self) -> Option<usize> {\n+        None\n+    }\n }\n \n /// An iterator over the contents of an instance of `BufRead` split on a"}, {"sha": "a85dd0d98271565ca6d6fb9cf69e54d3ba22aa7d", "filename": "library/std/src/io/tests.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/60138110d7b00c8c788526cad525942e732db6ca/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60138110d7b00c8c788526cad525942e732db6ca/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ftests.rs?ref=60138110d7b00c8c788526cad525942e732db6ca", "patch": "@@ -1,7 +1,7 @@\n use super::{repeat, Cursor, SeekFrom};\n use crate::cmp::{self, min};\n use crate::io::{self, IoSlice, IoSliceMut};\n-use crate::io::{BufRead, Read, Seek, Write};\n+use crate::io::{BufRead, BufReader, Read, Seek, Write};\n use crate::ops::Deref;\n \n #[test]\n@@ -198,6 +198,53 @@ fn chain_bufread() {\n     cmp_bufread(chain1, chain2, &testdata[..]);\n }\n \n+#[test]\n+fn bufreader_size_hint() {\n+    let testdata = b\"ABCDEFGHIJKL\";\n+    let mut buf_reader = BufReader::new(&testdata[..]);\n+    assert_eq!(buf_reader.buffer().len(), 0);\n+\n+    let buffer_length = testdata.len();\n+    buf_reader.fill_buf().unwrap();\n+\n+    // Check that size hint matches buffer contents\n+    let mut buffered_bytes = buf_reader.bytes();\n+    let (lower_bound, _upper_bound) = buffered_bytes.size_hint();\n+    assert_eq!(lower_bound, buffer_length);\n+\n+    // Check that size hint matches buffer contents after advancing\n+    buffered_bytes.next().unwrap().unwrap();\n+    let (lower_bound, _upper_bound) = buffered_bytes.size_hint();\n+    assert_eq!(lower_bound, buffer_length - 1);\n+}\n+\n+#[test]\n+fn empty_size_hint() {\n+    let size_hint = io::empty().bytes().size_hint();\n+    assert_eq!(size_hint, (0, Some(0)));\n+}\n+\n+#[test]\n+fn chain_empty_size_hint() {\n+    let chain = io::empty().chain(io::empty());\n+    let size_hint = chain.bytes().size_hint();\n+    assert_eq!(size_hint, (0, Some(0)));\n+}\n+\n+#[test]\n+fn chain_size_hint() {\n+    let testdata = b\"ABCDEFGHIJKL\";\n+    let mut buf_reader_1 = BufReader::new(&testdata[..6]);\n+    let mut buf_reader_2 = BufReader::new(&testdata[6..]);\n+\n+    buf_reader_1.fill_buf().unwrap();\n+    buf_reader_2.fill_buf().unwrap();\n+\n+    let chain = buf_reader_1.chain(buf_reader_2);\n+    let size_hint = chain.bytes().size_hint();\n+    assert_eq!(size_hint, (testdata.len(), None));\n+}\n+\n #[test]\n fn chain_zero_length_read_is_not_eof() {\n     let a = b\"A\";"}, {"sha": "f472361f916db3f0615e92b732791f8c75ad53d8", "filename": "library/std/src/io/util.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/60138110d7b00c8c788526cad525942e732db6ca/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60138110d7b00c8c788526cad525942e732db6ca/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Futil.rs?ref=60138110d7b00c8c788526cad525942e732db6ca", "patch": "@@ -4,7 +4,9 @@\n mod tests;\n \n use crate::fmt;\n-use crate::io::{self, BufRead, Initializer, IoSlice, IoSliceMut, Read, Seek, SeekFrom, Write};\n+use crate::io::{\n+    self, BufRead, Initializer, IoSlice, IoSliceMut, Read, Seek, SeekFrom, SizeHint, Write,\n+};\n \n /// A reader which is always at EOF.\n ///\n@@ -80,6 +82,12 @@ impl fmt::Debug for Empty {\n     }\n }\n \n+impl SizeHint for Empty {\n+    fn upper_bound(&self) -> Option<usize> {\n+        Some(0)\n+    }\n+}\n+\n /// A reader which yields one byte over and over and over and over and over and...\n ///\n /// This struct is generally created by calling [`repeat()`]. Please"}]}