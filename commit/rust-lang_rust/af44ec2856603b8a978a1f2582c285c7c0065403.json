{"sha": "af44ec2856603b8a978a1f2582c285c7c0065403", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNDRlYzI4NTY2MDNiOGE5NzhhMWYyNTgyYzI4NWM3YzAwNjU0MDM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-24T20:32:59Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-24T20:32:59Z"}, "message": "Issue 24, drop output slot when not initializing. Un-XFAIL generic-tag.rs. Add test for output slot modes with several broken cases.", "tree": {"sha": "7cc4d0ad4765a2b320580355242a15027eb97062", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cc4d0ad4765a2b320580355242a15027eb97062"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af44ec2856603b8a978a1f2582c285c7c0065403", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af44ec2856603b8a978a1f2582c285c7c0065403", "html_url": "https://github.com/rust-lang/rust/commit/af44ec2856603b8a978a1f2582c285c7c0065403", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af44ec2856603b8a978a1f2582c285c7c0065403/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69a34503f4d51b639855501f1b6d6ce2da4e16c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/69a34503f4d51b639855501f1b6d6ce2da4e16c7", "html_url": "https://github.com/rust-lang/rust/commit/69a34503f4d51b639855501f1b6d6ce2da4e16c7"}], "stats": {"total": 76, "additions": 69, "deletions": 7}, "files": [{"sha": "2244c350273f1dfa4f11a13c1a7ebf97fa9ac299", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af44ec2856603b8a978a1f2582c285c7c0065403/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/af44ec2856603b8a978a1f2582c285c7c0065403/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=af44ec2856603b8a978a1f2582c285c7c0065403", "patch": "@@ -321,7 +321,6 @@ TEST_XFAILS_X86 :=  test/run-pass/mlist-cycle.rs \\\n                     test/run-pass/vec-slice.rs \\\n                     test/run-pass/generic-fn-infer.rs \\\n                     test/run-pass/generic-recursive-tag.rs \\\n-                    test/run-pass/generic-tag.rs \\\n                     test/run-pass/bind-obj-ctor.rs \\\n                     test/run-pass/task-comm.rs \\\n                     test/compile-fail/rec-missing-fields.rs \\\n@@ -391,6 +390,7 @@ TEST_XFAILS_LLVM := $(addprefix test/run-pass/, \\\n                       obj-dtor.rs \\\n                       obj-with-vec.rs \\\n                       opeq.rs \\\n+                      output-slot-variants.rs \\\n                       preempt.rs \\\n                       pred.rs \\\n                       readalias.rs \\"}, {"sha": "cb492561226da382b60cad903dcbc2c9ada3ee2d", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/af44ec2856603b8a978a1f2582c285c7c0065403/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/af44ec2856603b8a978a1f2582c285c7c0065403/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=af44ec2856603b8a978a1f2582c285c7c0065403", "patch": "@@ -3708,7 +3708,7 @@ let trans_visitor\n \n \n   and trans_prepare_call\n-      ((*initializing*)_:bool)\n+      (initializing:bool)\n       (logname:(unit -> string))\n       (call:call)\n       : Il.operand =\n@@ -3718,11 +3718,15 @@ let trans_visitor\n                (Printf.sprintf \"copy args for call to %s\" (logname ())));\n       copy_fn_args false CLONE_none call;\n       iflog (fun _ -> annotate (Printf.sprintf \"call %s\" (logname ())));\n-      (* FIXME (issue #24): we need to actually handle writing to an\n-       * already-initialised slot. Currently we blindly assume we're\n-       * initializing, overwrite the slot; this is ok if we're writing\n-       * to an interior output slot, but we'll leak any exteriors as we\n-       * do that.  *)\n+      if not initializing\n+      then\n+        begin\n+          match call.call_callee_ty with\n+              Ast.TY_fn (tsig, _) ->\n+                drop_slot (get_ty_params_of_current_frame()) call.call_output\n+                  tsig.Ast.sig_output_slot None;\n+            | _ -> bug () \"calling non-fn\"\n+        end;\n       callee_fptr\n \n   and callee_drop_slot"}, {"sha": "65d03fd8b63d942bc4e18ba4c3bb5025cd27eb10", "filename": "src/test/run-pass/output-slot-variants.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/af44ec2856603b8a978a1f2582c285c7c0065403/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af44ec2856603b8a978a1f2582c285c7c0065403/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs?ref=af44ec2856603b8a978a1f2582c285c7c0065403", "patch": "@@ -0,0 +1,58 @@\n+fn ret_int_i() -> int {\n+  ret 10;\n+}\n+\n+fn ret_ext_i() -> @int {\n+  ret 10;\n+}\n+\n+fn ret_int_tup() -> tup(int,int) {\n+  ret tup(10, 10);\n+}\n+\n+fn ret_ext_tup() -> @tup(int,int) {\n+  ret tup(10, 10);\n+}\n+\n+fn ret_ext_mem() -> tup(@int, @int) {\n+  ret tup(@10, @10);\n+}\n+\n+fn ret_ext_ext_mem() -> @tup(@int, @int) {\n+  ret tup(@10, @10);\n+}\n+\n+fn main() {\n+\n+  let int int_i;\n+  let @int ext_i;\n+  let tup(int,int) int_tup;\n+  let @tup(int,int) ext_tup;\n+  let tup(@int,@int) ext_mem;\n+  let @tup(@int,@int) ext_ext_mem;\n+\n+  int_i = ret_int_i(); // initializing\n+  int_i = ret_int_i(); // non-initializing\n+  int_i = ret_int_i(); // non-initializing\n+\n+  //ext_i = ret_ext_i(); // initializing\n+  //ext_i = ret_ext_i(); // non-initializing\n+  //ext_i = ret_ext_i(); // non-initializing\n+\n+  int_tup = ret_int_tup(); // initializing\n+  int_tup = ret_int_tup(); // non-initializing\n+  int_tup = ret_int_tup(); // non-initializing\n+\n+  //ext_tup = ret_ext_tup(); // initializing\n+  //ext_tup = ret_ext_tup(); // non-initializing\n+  //ext_tup = ret_ext_tup(); // non-initializing\n+\n+  ext_mem = ret_ext_mem(); // initializing\n+  ext_mem = ret_ext_mem(); // non-initializing\n+  ext_mem = ret_ext_mem(); // non-initializing\n+\n+  //ext_ext_mem = ret_ext_ext_mem(); // initializing\n+  //ext_ext_mem = ret_ext_ext_mem(); // non-initializing\n+  //ext_ext_mem = ret_ext_ext_mem(); // non-initializing\n+\n+}"}]}