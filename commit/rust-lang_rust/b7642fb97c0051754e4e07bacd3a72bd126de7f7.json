{"sha": "b7642fb97c0051754e4e07bacd3a72bd126de7f7", "node_id": "C_kwDOAAsO6NoAKGI3NjQyZmI5N2MwMDUxNzU0ZTRlMDdiYWNkM2E3MmJkMTI2ZGU3Zjc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-06T05:07:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-06T05:07:37Z"}, "message": "Rollup merge of #102710 - Rageking8:add-test-for-issue-82633, r=estebank\n\nAdd test for issue 82633\n\nFixes #82633\n\nr? `@estebank`\n\nThe current stderr looks slightly different from [source](https://github.com/rust-lang/rust/pull/83915/files#diff-8c64c576ccaceb816e71d2279a6ee4bf79211bc06f55c46dda3f98a18748ad7a), so I used the latest one from nightly. Do let me know if anything is wrong.", "tree": {"sha": "247e7e7d4cc9bfe4147bd6d13ac04bdb1953b5cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/247e7e7d4cc9bfe4147bd6d13ac04bdb1953b5cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7642fb97c0051754e4e07bacd3a72bd126de7f7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjPmKZCRBK7hj4Ov3rIwAAmDoIAKeQS7gNBzg+Z8AQEM6QZtWo\nrpZmA/8XFs8PLVTUH40rSpnN1JYX1tq5YrLVfC9w7neZ2lQWW3OvKG+SmywB1wPy\nGwtGNZr34Ye2iSkSkyY8iMT21tfX+dKOnkZ626agdMM88tmois6DPZLFd2BXJVhZ\nuEZKNr74RMv/61XYh8Drnw+hgnep2VQEiMWNgfoK3dIR+/waRa96ikQLFVZsYWZT\nRk2b/EUxQffHdifh0cv6mO/g85BEJPVzwtR4sIPR3pC/aV+rhlt5QBABedvgter9\nT+pb5/4PkKLmIe8Y3SWusRLO1uMBIG3XbYE5l3vA2uxpzw+giRNG2yErcUeEb28=\n=FWkF\n-----END PGP SIGNATURE-----\n", "payload": "tree 247e7e7d4cc9bfe4147bd6d13ac04bdb1953b5cb\nparent 0512a06186916d097a1a1f8ae1210e1295cc1a1c\nparent 65c0e68bf339bf3fdfb9f6b790f90aa30cd8dd93\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1665032857 +0200\ncommitter GitHub <noreply@github.com> 1665032857 +0200\n\nRollup merge of #102710 - Rageking8:add-test-for-issue-82633, r=estebank\n\nAdd test for issue 82633\n\nFixes #82633\n\nr? `@estebank`\n\nThe current stderr looks slightly different from [source](https://github.com/rust-lang/rust/pull/83915/files#diff-8c64c576ccaceb816e71d2279a6ee4bf79211bc06f55c46dda3f98a18748ad7a), so I used the latest one from nightly. Do let me know if anything is wrong.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7642fb97c0051754e4e07bacd3a72bd126de7f7", "html_url": "https://github.com/rust-lang/rust/commit/b7642fb97c0051754e4e07bacd3a72bd126de7f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7642fb97c0051754e4e07bacd3a72bd126de7f7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0512a06186916d097a1a1f8ae1210e1295cc1a1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0512a06186916d097a1a1f8ae1210e1295cc1a1c", "html_url": "https://github.com/rust-lang/rust/commit/0512a06186916d097a1a1f8ae1210e1295cc1a1c"}, {"sha": "65c0e68bf339bf3fdfb9f6b790f90aa30cd8dd93", "url": "https://api.github.com/repos/rust-lang/rust/commits/65c0e68bf339bf3fdfb9f6b790f90aa30cd8dd93", "html_url": "https://github.com/rust-lang/rust/commit/65c0e68bf339bf3fdfb9f6b790f90aa30cd8dd93"}], "stats": {"total": 173, "additions": 173, "deletions": 0}, "files": [{"sha": "8cfa0291229bd7f4c0d70b2bca4a243be7547ef1", "filename": "src/test/ui/closures/closure-return-type-must-be-sized.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/b7642fb97c0051754e4e07bacd3a72bd126de7f7/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-must-be-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7642fb97c0051754e4e07bacd3a72bd126de7f7/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-must-be-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-must-be-sized.rs?ref=b7642fb97c0051754e4e07bacd3a72bd126de7f7", "patch": "@@ -0,0 +1,74 @@\n+#![feature(unboxed_closures)]\n+\n+trait A {\n+    fn a() where Self: Sized;\n+}\n+\n+mod a {\n+    use crate::A;\n+\n+    pub fn foo<F: FnOnce<()>>() where F::Output: A {\n+        F::Output::a()\n+    }\n+\n+    pub fn bar<F: FnOnce() -> R, R: ?Sized>() {}\n+\n+    pub fn baz<F: FnOnce<()>>() where F::Output: A, F::Output: Sized {\n+        F::Output::a()\n+    }\n+}\n+\n+mod b {\n+    use crate::A;\n+\n+    pub fn foo<F: Fn<()>>() where F::Output: A {\n+        F::Output::a()\n+    }\n+\n+    pub fn bar<F: Fn() -> R, R: ?Sized>() {}\n+\n+    pub fn baz<F: Fn<()>>() where F::Output: A, F::Output: Sized {\n+        F::Output::a()\n+    }\n+}\n+\n+mod c {\n+    use crate::A;\n+\n+    pub fn foo<F: FnMut<()>>() where F::Output: A {\n+        F::Output::a()\n+    }\n+\n+    pub fn bar<F: FnMut() -> R, R: ?Sized>() {}\n+\n+    pub fn baz<F: FnMut<()>>() where F::Output: A, F::Output: Sized {\n+        F::Output::a()\n+    }\n+}\n+\n+impl A for Box<dyn A> {\n+    fn a() {}\n+}\n+\n+fn main() {\n+    a::foo::<fn() -> dyn A>();         //~ ERROR E0277\n+    a::bar::<fn() -> dyn A, _>();      //~ ERROR E0277\n+    a::baz::<fn() -> dyn A>();         //~ ERROR E0277\n+    a::foo::<fn() -> Box<dyn A>>();    //  ok\n+    a::bar::<fn() -> Box<dyn A>, _>(); //  ok\n+    a::baz::<fn() -> Box<dyn A>>();    //  ok\n+\n+    b::foo::<fn() -> dyn A>();         //~ ERROR E0277\n+    b::bar::<fn() -> dyn A, _>();      //~ ERROR E0277\n+    b::baz::<fn() -> dyn A>();         //~ ERROR E0277\n+    b::foo::<fn() -> Box<dyn A>>();    //  ok\n+    b::bar::<fn() -> Box<dyn A>, _>(); //  ok\n+    b::baz::<fn() -> Box<dyn A>>();    //  ok\n+\n+    c::foo::<fn() -> dyn A>();         //~ ERROR E0277\n+    c::bar::<fn() -> dyn A, _>();      //~ ERROR E0277\n+    c::baz::<fn() -> dyn A>();         //~ ERROR E0277\n+    c::foo::<fn() -> Box<dyn A>>();    //  ok\n+    c::bar::<fn() -> Box<dyn A>, _>(); //  ok\n+    c::baz::<fn() -> Box<dyn A>>();    //  ok\n+}"}, {"sha": "b07425bd82501fff334063b0f1d6eb6433ff37ac", "filename": "src/test/ui/closures/closure-return-type-must-be-sized.stderr", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/b7642fb97c0051754e4e07bacd3a72bd126de7f7/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-must-be-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7642fb97c0051754e4e07bacd3a72bd126de7f7/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-must-be-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-must-be-sized.stderr?ref=b7642fb97c0051754e4e07bacd3a72bd126de7f7", "patch": "@@ -0,0 +1,99 @@\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:54:5\n+   |\n+LL |     a::foo::<fn() -> dyn A>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:55:14\n+   |\n+LL |     a::bar::<fn() -> dyn A, _>();\n+   |              ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+note: required by a bound in `a::bar`\n+  --> $DIR/closure-return-type-must-be-sized.rs:14:19\n+   |\n+LL |     pub fn bar<F: FnOnce() -> R, R: ?Sized>() {}\n+   |                   ^^^^^^^^^^^^^ required by this bound in `a::bar`\n+\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:56:5\n+   |\n+LL |     a::baz::<fn() -> dyn A>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:61:5\n+   |\n+LL |     b::foo::<fn() -> dyn A>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:62:14\n+   |\n+LL |     b::bar::<fn() -> dyn A, _>();\n+   |              ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+note: required by a bound in `b::bar`\n+  --> $DIR/closure-return-type-must-be-sized.rs:28:19\n+   |\n+LL |     pub fn bar<F: Fn() -> R, R: ?Sized>() {}\n+   |                   ^^^^^^^^^ required by this bound in `b::bar`\n+\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:63:5\n+   |\n+LL |     b::baz::<fn() -> dyn A>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:68:5\n+   |\n+LL |     c::foo::<fn() -> dyn A>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:69:14\n+   |\n+LL |     c::bar::<fn() -> dyn A, _>();\n+   |              ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+note: required by a bound in `c::bar`\n+  --> $DIR/closure-return-type-must-be-sized.rs:42:19\n+   |\n+LL |     pub fn bar<F: FnMut() -> R, R: ?Sized>() {}\n+   |                   ^^^^^^^^^^^^ required by this bound in `c::bar`\n+\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:70:5\n+   |\n+LL |     c::baz::<fn() -> dyn A>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+\n+error: aborting due to 9 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}