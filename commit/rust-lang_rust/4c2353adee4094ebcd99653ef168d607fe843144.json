{"sha": "4c2353adee4094ebcd99653ef168d607fe843144", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMjM1M2FkZWU0MDk0ZWJjZDk5NjUzZWYxNjhkNjA3ZmU4NDMxNDQ=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-03-02T23:26:39Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-03-02T23:26:39Z"}, "message": "Make visible types public in rustc", "tree": {"sha": "69977673d908019d6025c9ea7a1af535864064c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69977673d908019d6025c9ea7a1af535864064c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c2353adee4094ebcd99653ef168d607fe843144", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c2353adee4094ebcd99653ef168d607fe843144", "html_url": "https://github.com/rust-lang/rust/commit/4c2353adee4094ebcd99653ef168d607fe843144", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c2353adee4094ebcd99653ef168d607fe843144/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51233c52199241f95679f961eda77da03943681b", "url": "https://api.github.com/repos/rust-lang/rust/commits/51233c52199241f95679f961eda77da03943681b", "html_url": "https://github.com/rust-lang/rust/commit/51233c52199241f95679f961eda77da03943681b"}], "stats": {"total": 89, "additions": 43, "deletions": 46}, "files": [{"sha": "4018e70b4f58b1f843b5fb92f9cdbdd69dc484e7", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=4c2353adee4094ebcd99653ef168d607fe843144", "patch": "@@ -30,8 +30,6 @@ This API is completely unstable and subject to change.\n #[feature(macro_rules, globs, struct_variant, managed_boxes)];\n #[feature(quote)];\n \n-#[allow(visible_private_types)];\n-\n extern crate extra;\n extern crate flate;\n extern crate arena;"}, {"sha": "2bf54e0373d2b99a27ea62660082f582f4c67ca2", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=4c2353adee4094ebcd99653ef168d607fe843144", "patch": "@@ -46,7 +46,7 @@ use syntax::ast;\n use syntax::codemap;\n use syntax::crateid::CrateId;\n \n-type Cmd = @crate_metadata;\n+pub type Cmd = @crate_metadata;\n \n // A function that takes a def_id relative to the crate being searched and\n // returns a def_id relative to the compilation environment, i.e. if we hit a"}, {"sha": "80bb5d23aa446bfd644557c239e6aaf01b75520d", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=4c2353adee4094ebcd99653ef168d607fe843144", "patch": "@@ -52,7 +52,7 @@ use syntax;\n use writer = serialize::ebml::writer;\n \n // used by astencode:\n-type abbrev_map = @RefCell<HashMap<ty::t, tyencode::ty_abbrev>>;\n+pub type abbrev_map = @RefCell<HashMap<ty::t, tyencode::ty_abbrev>>;\n \n /// A borrowed version of ast::InlinedItem.\n pub enum InlinedItemRef<'a> {\n@@ -76,7 +76,7 @@ pub struct EncodeParams<'a> {\n     encode_inlined_item: EncodeInlinedItem<'a>,\n }\n \n-struct Stats {\n+pub struct Stats {\n     inline_bytes: Cell<u64>,\n     attr_bytes: Cell<u64>,\n     dep_bytes: Cell<u64>,"}, {"sha": "f566571d0eb3c91c1f5e68fdfe00e0c0c7319c04", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=4c2353adee4094ebcd99653ef168d607fe843144", "patch": "@@ -54,7 +54,7 @@ pub enum DefIdSource {\n     // Identifies a region parameter (`fn foo<'X>() { ... }`).\n     RegionParameter,\n }\n-type conv_did<'a> =\n+pub type conv_did<'a> =\n     'a |source: DefIdSource, ast::DefId| -> ast::DefId;\n \n pub struct PState<'a> {"}, {"sha": "e9a96b0c47e5cbc333202c7094ea8dcbeba4a967", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=4c2353adee4094ebcd99653ef168d607fe843144", "patch": "@@ -907,7 +907,7 @@ impl Repr for LoanPath {\n \n ///////////////////////////////////////////////////////////////////////////\n \n-struct TcxTyper {\n+pub struct TcxTyper {\n     tcx: ty::ctxt,\n     method_map: typeck::MethodMap,\n }"}, {"sha": "3b8e7086762353c8d8d8c99b8ee31482fdc397e0", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=4c2353adee4094ebcd99653ef168d607fe843144", "patch": "@@ -20,7 +20,7 @@ use syntax::{ast_util, ast_map};\n use syntax::visit::Visitor;\n use syntax::visit;\n \n-struct CheckCrateVisitor {\n+pub struct CheckCrateVisitor {\n     sess: Session,\n     def_map: resolve::DefMap,\n     method_map: typeck::MethodMap,"}, {"sha": "cf909bbd1af1bd9d7744b54fa32de480c9926e47", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=4c2353adee4094ebcd99653ef168d607fe843144", "patch": "@@ -126,9 +126,9 @@ use syntax::{visit, ast_util};\n use syntax::visit::{Visitor, FnKind};\n \n #[deriving(Eq)]\n-struct Variable(uint);\n+pub struct Variable(uint);\n #[deriving(Eq)]\n-struct LiveNode(uint);\n+pub struct LiveNode(uint);\n \n impl Variable {\n     fn get(&self) -> uint { let Variable(v) = *self; v }\n@@ -145,7 +145,7 @@ impl Clone for LiveNode {\n }\n \n #[deriving(Eq)]\n-enum LiveNodeKind {\n+pub enum LiveNodeKind {\n     FreeVarNode(Span),\n     ExprNode(Span),\n     VarDefNode(Span),\n@@ -226,32 +226,32 @@ impl LiveNode {\n \n fn invalid_node() -> LiveNode { LiveNode(uint::MAX) }\n \n-struct CaptureInfo {\n+pub struct CaptureInfo {\n     ln: LiveNode,\n     is_move: bool,\n     var_nid: NodeId\n }\n \n-enum LocalKind {\n+pub enum LocalKind {\n     FromMatch(BindingMode),\n     FromLetWithInitializer,\n     FromLetNoInitializer\n }\n \n-struct LocalInfo {\n+pub struct LocalInfo {\n     id: NodeId,\n     ident: Ident,\n     is_mutbl: bool,\n     kind: LocalKind,\n }\n \n-enum VarKind {\n+pub enum VarKind {\n     Arg(NodeId, Ident),\n     Local(LocalInfo),\n     ImplicitRet\n }\n \n-struct IrMaps {\n+pub struct IrMaps {\n     tcx: ty::ctxt,\n     method_map: typeck::MethodMap,\n     capture_map: moves::CaptureMap,\n@@ -560,7 +560,7 @@ fn visit_expr(v: &mut LivenessVisitor, expr: &Expr, this: @IrMaps) {\n // the same basic propagation framework in all cases.\n \n #[deriving(Clone)]\n-struct Users {\n+pub struct Users {\n     reader: LiveNode,\n     writer: LiveNode,\n     used: bool\n@@ -574,7 +574,7 @@ fn invalid_users() -> Users {\n     }\n }\n \n-struct Specials {\n+pub struct Specials {\n     exit_ln: LiveNode,\n     fallthrough_ln: LiveNode,\n     no_ret_var: Variable\n@@ -584,7 +584,7 @@ static ACC_READ: uint = 1u;\n static ACC_WRITE: uint = 2u;\n static ACC_USE: uint = 4u;\n \n-type LiveNodeMap = @RefCell<HashMap<NodeId, LiveNode>>;\n+pub type LiveNodeMap = @RefCell<HashMap<NodeId, LiveNode>>;\n \n pub struct Liveness {\n     tcx: ty::ctxt,\n@@ -1554,7 +1554,7 @@ fn check_fn(_v: &Liveness,\n     // do not check contents of nested fns\n }\n \n-enum ReadKind {\n+pub enum ReadKind {\n     PossiblyUninitializedVariable,\n     PossiblyUninitializedField,\n     MovedValue,"}, {"sha": "a9682eada93f9a7a9aef82dd451ed249a754b515", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=4c2353adee4094ebcd99653ef168d607fe843144", "patch": "@@ -1322,8 +1322,8 @@ fn arg_kind(cx: &FunctionContext, t: ty::t) -> datum::Rvalue {\n }\n \n // work around bizarre resolve errors\n-type RvalueDatum = datum::Datum<datum::Rvalue>;\n-type LvalueDatum = datum::Datum<datum::Lvalue>;\n+pub type RvalueDatum = datum::Datum<datum::Rvalue>;\n+pub type LvalueDatum = datum::Datum<datum::Lvalue>;\n \n // create_datums_for_fn_args: creates rvalue datums for each of the\n // incoming function arguments. These will later be stored into"}, {"sha": "2cf24ff123a3ce8f82e4ea43b23b5b376212750a", "filename": "src/librustc/middle/trans/cleanup.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs?ref=4c2353adee4094ebcd99653ef168d607fe843144", "patch": "@@ -51,20 +51,20 @@ pub static EXIT_BREAK: uint = 0;\n pub static EXIT_LOOP: uint = 1;\n pub static EXIT_MAX: uint = 2;\n \n-enum CleanupScopeKind<'a> {\n+pub enum CleanupScopeKind<'a> {\n     CustomScopeKind,\n     AstScopeKind(ast::NodeId),\n     LoopScopeKind(ast::NodeId, [&'a Block<'a>, ..EXIT_MAX])\n }\n \n #[deriving(Eq)]\n-enum EarlyExitLabel {\n+pub enum EarlyExitLabel {\n     UnwindExit,\n     ReturnExit,\n     LoopExit(ast::NodeId, uint)\n }\n \n-struct CachedEarlyExit {\n+pub struct CachedEarlyExit {\n     label: EarlyExitLabel,\n     cleanup_block: BasicBlockRef,\n }"}, {"sha": "e7e69917ebba0ddf7bd5db33cf50eb2483108aee", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=4c2353adee4094ebcd99653ef168d607fe843144", "patch": "@@ -212,8 +212,8 @@ impl Repr for param_substs {\n }\n \n // work around bizarre resolve errors\n-type RvalueDatum = datum::Datum<datum::Rvalue>;\n-type LvalueDatum = datum::Datum<datum::Lvalue>;\n+pub type RvalueDatum = datum::Datum<datum::Rvalue>;\n+pub type LvalueDatum = datum::Datum<datum::Lvalue>;\n \n // Function context.  Every LLVM function we create will have one of\n // these."}, {"sha": "e043bc8683f4856393fca1b69f7e4f0d60ba6d55", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=4c2353adee4094ebcd99653ef168d607fe843144", "patch": "@@ -158,9 +158,9 @@ pub struct creader_cache_key {\n     len: uint\n }\n \n-type creader_cache = RefCell<HashMap<creader_cache_key, t>>;\n+pub type creader_cache = RefCell<HashMap<creader_cache_key, t>>;\n \n-struct intern_key {\n+pub struct intern_key {\n     sty: *sty,\n }\n \n@@ -1068,7 +1068,7 @@ pub struct ty_param_substs_and_ty {\n     ty: ty::t\n }\n \n-type type_cache = RefCell<HashMap<ast::DefId, ty_param_bounds_and_ty>>;\n+pub type type_cache = RefCell<HashMap<ast::DefId, ty_param_bounds_and_ty>>;\n \n pub type node_type_table = RefCell<HashMap<uint,t>>;\n "}, {"sha": "bef3de532011a9d1a76dbeac08717821688f8576", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=4c2353adee4094ebcd99653ef168d607fe843144", "patch": "@@ -729,4 +729,4 @@ pub fn check_pointer_pat(pcx: &pat_ctxt,\n }\n \n #[deriving(Eq)]\n-enum PointerKind { Send, Borrowed }\n+pub enum PointerKind { Send, Borrowed }"}, {"sha": "d7f85bd01234e550b30967b6a290aa36faaa845f", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=4c2353adee4094ebcd99653ef168d607fe843144", "patch": "@@ -236,7 +236,7 @@ pub struct Candidate {\n /// now we must check that the type `T` is correct).  Unfortunately,\n /// because traits are not types, this is a pain to do.\n #[deriving(Clone)]\n-enum RcvrMatchCondition {\n+pub enum RcvrMatchCondition {\n     RcvrMatchesIfObject(ast::DefId),\n     RcvrMatchesIfSubtype(ty::t)\n }"}, {"sha": "28a3e822a1ae99571e584d4bfdfe9ee1ad2bc3e2", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=4c2353adee4094ebcd99653ef168d607fe843144", "patch": "@@ -500,7 +500,7 @@ fn rollback_to<V:Clone + Vid,T:Clone>(vb: &mut ValsAndBindings<V, T>,\n     }\n }\n \n-struct Snapshot {\n+pub struct Snapshot {\n     ty_var_bindings_len: uint,\n     int_var_bindings_len: uint,\n     float_var_bindings_len: uint,"}, {"sha": "98fe0bedb3be8d8807aaf9f644ece7f9828e8821", "filename": "src/librustc/middle/typeck/infer/region_inference/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs?ref=4c2353adee4094ebcd99653ef168d607fe843144", "patch": "@@ -35,27 +35,27 @@ use syntax::opt_vec::OptVec;\n mod doc;\n \n #[deriving(Eq, Hash)]\n-enum Constraint {\n+pub enum Constraint {\n     ConstrainVarSubVar(RegionVid, RegionVid),\n     ConstrainRegSubVar(Region, RegionVid),\n     ConstrainVarSubReg(RegionVid, Region),\n     ConstrainRegSubReg(Region, Region),\n }\n \n #[deriving(Eq, Hash)]\n-struct TwoRegions {\n+pub struct TwoRegions {\n     a: Region,\n     b: Region,\n }\n \n-enum UndoLogEntry {\n+pub enum UndoLogEntry {\n     Snapshot,\n     AddVar(RegionVid),\n     AddConstraint(Constraint),\n     AddCombination(CombineMapType, TwoRegions)\n }\n \n-enum CombineMapType {\n+pub enum CombineMapType {\n     Lub, Glb\n }\n \n@@ -84,7 +84,7 @@ pub enum RegionResolutionError {\n                    SubregionOrigin, Region),\n }\n \n-type CombineMap = HashMap<TwoRegions, RegionVid>;\n+pub type CombineMap = HashMap<TwoRegions, RegionVid>;\n \n pub struct RegionVarBindings {\n     tcx: ty::ctxt,\n@@ -764,7 +764,7 @@ impl RegionVarBindings {\n #[deriving(Eq, Show)]\n enum Classification { Expanding, Contracting }\n \n-enum VarValue { NoValue, Value(Region), ErrorValue }\n+pub enum VarValue { NoValue, Value(Region), ErrorValue }\n \n struct VarData {\n     classification: Classification,"}, {"sha": "d8b4334c8678aeae20c07f97e7dd4620478e7837", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=4c2353adee4094ebcd99653ef168d607fe843144", "patch": "@@ -660,7 +660,7 @@ fn expand_non_macro_stmt(s: &Stmt, fld: &mut MacroExpander)\n // from a given thingy and puts them in a mutable\n // array (passed in to the traversal)\n #[deriving(Clone)]\n-struct NewNameFinderContext {\n+pub struct NewNameFinderContext {\n     ident_accumulator: Vec<ast::Ident> ,\n }\n \n@@ -748,7 +748,7 @@ pub fn expand_block_elts(b: &Block, fld: &mut MacroExpander) -> P<Block> {\n     })\n }\n \n-struct IdentRenamer<'a> {\n+pub struct IdentRenamer<'a> {\n     renames: &'a mut RenameList,\n }\n "}, {"sha": "42c9ab461aa009be8ee037a1059e9c34165a3e89", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=4c2353adee4094ebcd99653ef168d607fe843144", "patch": "@@ -31,7 +31,6 @@ This API is completely unstable and subject to change.\n #[feature(quote)];\n \n #[deny(non_camel_case_types)];\n-#[allow(visible_private_types)];\n \n extern crate serialize;\n extern crate term;"}, {"sha": "2557af5e436a26dc026fcf700923a93b30745cc7", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4c2353adee4094ebcd99653ef168d607fe843144", "patch": "@@ -87,7 +87,7 @@ use std::vec_ng;\n \n #[allow(non_camel_case_types)]\n #[deriving(Eq)]\n-enum restriction {\n+pub enum restriction {\n     UNRESTRICTED,\n     RESTRICT_STMT_EXPR,\n     RESTRICT_NO_BAR_OP,"}, {"sha": "b3e7ac667d839d1b03de4295f69cdececf7f934d", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=4c2353adee4094ebcd99653ef168d607fe843144", "patch": "@@ -139,12 +139,12 @@ pub fn buf_str(toks: Vec<Token> , szs: Vec<int> , left: uint, right: uint,\n     return s;\n }\n \n-enum PrintStackBreak {\n+pub enum PrintStackBreak {\n     Fits,\n     Broken(Breaks),\n }\n \n-struct PrintStackElem {\n+pub struct PrintStackElem {\n     offset: int,\n     pbreak: PrintStackBreak\n }"}, {"sha": "ec8c474d194028fb267f2d40bc46d830149a16bc", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2353adee4094ebcd99653ef168d607fe843144/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=4c2353adee4094ebcd99653ef168d607fe843144", "patch": "@@ -1027,7 +1027,7 @@ pub fn print_block_with_attrs(s: &mut State,\n                                   true)\n }\n \n-enum EmbedType {\n+pub enum EmbedType {\n     BlockBlockFn,\n     BlockNormal,\n }"}]}