{"sha": "00b74e5eaf4439e859fd057bbf7048f93d8659d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYjc0ZTVlYWY0NDM5ZTg1OWZkMDU3YmJmNzA0OGY5M2Q4NjU5ZDU=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-18T09:59:17Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-24T06:50:44Z"}, "message": "hir: remove NodeId from Lifetime and Ty", "tree": {"sha": "4f6fb4bdaee00444d18521fc374ab5c01a2c5952", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f6fb4bdaee00444d18521fc374ab5c01a2c5952"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00b74e5eaf4439e859fd057bbf7048f93d8659d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00b74e5eaf4439e859fd057bbf7048f93d8659d5", "html_url": "https://github.com/rust-lang/rust/commit/00b74e5eaf4439e859fd057bbf7048f93d8659d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00b74e5eaf4439e859fd057bbf7048f93d8659d5/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "904a91c496b582edbf172ebae5165a58e150b1c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/904a91c496b582edbf172ebae5165a58e150b1c3", "html_url": "https://github.com/rust-lang/rust/commit/904a91c496b582edbf172ebae5165a58e150b1c3"}], "stats": {"total": 153, "additions": 71, "deletions": 82}, "files": [{"sha": "f4452555ba6e39628ff569dafb7b92f1b508cde0", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/00b74e5eaf4439e859fd057bbf7048f93d8659d5/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b74e5eaf4439e859fd057bbf7048f93d8659d5/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=00b74e5eaf4439e859fd057bbf7048f93d8659d5", "patch": "@@ -1350,9 +1350,8 @@ impl<'a> LoweringContext<'a> {\n             TyKind::Mac(_) => panic!(\"TyMac should have been expanded by now.\"),\n         };\n \n-        let LoweredNodeId { node_id, hir_id } = self.lower_node_id(t.id);\n+        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(t.id);\n         hir::Ty {\n-            id: node_id,\n             node: kind,\n             span: t.span,\n             hir_id,\n@@ -1533,9 +1532,8 @@ impl<'a> LoweringContext<'a> {\n                     && !self.already_defined_lifetimes.contains(&name) {\n                     self.already_defined_lifetimes.insert(name);\n \n-                    let LoweredNodeId { node_id, hir_id } = self.context.next_id();\n+                    let LoweredNodeId { node_id: _, hir_id } = self.context.next_id();\n                     self.output_lifetimes.push(hir::GenericArg::Lifetime(hir::Lifetime {\n-                        id: node_id,\n                         hir_id,\n                         span: lifetime.span,\n                         name,\n@@ -1980,8 +1978,8 @@ impl<'a> LoweringContext<'a> {\n                     .map(|ty| this.lower_ty_direct(ty, ImplTraitContext::disallowed()))\n                     .collect();\n                 let mk_tup = |this: &mut Self, tys, span| {\n-                    let LoweredNodeId { node_id, hir_id } = this.next_id();\n-                    hir::Ty { node: hir::TyKind::Tup(tys), id: node_id, hir_id, span }\n+                    let LoweredNodeId { node_id: _, hir_id } = this.next_id();\n+                    hir::Ty { node: hir::TyKind::Tup(tys), hir_id, span }\n                 };\n                 let LoweredNodeId { node_id, hir_id } = this.next_id();\n \n@@ -2318,9 +2316,8 @@ impl<'a> LoweringContext<'a> {\n                     this.lower_ty(ty, ImplTraitContext::Existential(Some(fn_def_id)))\n                 }\n                 FunctionRetTy::Default(span) => {\n-                    let LoweredNodeId { node_id, hir_id } = this.next_id();\n+                    let LoweredNodeId { node_id: _, hir_id } = this.next_id();\n                     P(hir::Ty {\n-                        id: node_id,\n                         hir_id,\n                         node: hir::TyKind::Tup(hir_vec![]),\n                         span: *span,\n@@ -2362,17 +2359,16 @@ impl<'a> LoweringContext<'a> {\n             ];\n \n             if let Some((name, span)) = bound_lifetime {\n-                let LoweredNodeId { node_id, hir_id } = this.next_id();\n+                let LoweredNodeId { node_id: _, hir_id } = this.next_id();\n                 bounds.push(hir::GenericBound::Outlives(\n-                    hir::Lifetime { id: node_id, hir_id, name, span }));\n+                    hir::Lifetime { hir_id, name, span }));\n             }\n \n             hir::HirVec::from(bounds)\n         });\n \n-        let LoweredNodeId { node_id, hir_id } = self.next_id();\n+        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n         let impl_trait_ty = P(hir::Ty {\n-            id: node_id,\n             node: impl_trait_ty,\n             span,\n             hir_id,\n@@ -2431,10 +2427,9 @@ impl<'a> LoweringContext<'a> {\n         span: Span,\n         name: hir::LifetimeName,\n     ) -> hir::Lifetime {\n-        let LoweredNodeId { node_id, hir_id } = self.lower_node_id(id);\n+        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(id);\n \n         hir::Lifetime {\n-            id: node_id,\n             hir_id,\n             span,\n             name: name,\n@@ -5108,7 +5103,6 @@ impl<'a> LoweringContext<'a> {\n             _ => hir::TyKind::Path(qpath),\n         };\n         hir::Ty {\n-            id: id.node_id,\n             hir_id: id.hir_id,\n             node,\n             span,\n@@ -5124,9 +5118,8 @@ impl<'a> LoweringContext<'a> {\n             // `'f`.\n             AnonymousLifetimeMode::CreateParameter => {\n                 let fresh_name = self.collect_fresh_in_band_lifetime(span);\n-                let LoweredNodeId { node_id, hir_id } = self.next_id();\n+                let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n                 hir::Lifetime {\n-                    id: node_id,\n                     hir_id,\n                     span,\n                     name: hir::LifetimeName::Param(fresh_name),\n@@ -5227,10 +5220,9 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn new_implicit_lifetime(&mut self, span: Span) -> hir::Lifetime {\n-        let LoweredNodeId { node_id, hir_id } = self.next_id();\n+        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n \n         hir::Lifetime {\n-            id: node_id,\n             hir_id,\n             span,\n             name: hir::LifetimeName::Implicit,"}, {"sha": "f655b9fe4c893877e1a4b65ffcf2a5e77ce5a34e", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00b74e5eaf4439e859fd057bbf7048f93d8659d5/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b74e5eaf4439e859fd057bbf7048f93d8659d5/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=00b74e5eaf4439e859fd057bbf7048f93d8659d5", "patch": "@@ -151,7 +151,6 @@ pub const DUMMY_ITEM_LOCAL_ID: ItemLocalId = ItemLocalId::MAX;\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Copy)]\n pub struct Lifetime {\n-    pub id: NodeId,\n     pub hir_id: HirId,\n     pub span: Span,\n \n@@ -272,7 +271,7 @@ impl fmt::Debug for Lifetime {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f,\n                \"lifetime({}: {})\",\n-               self.id,\n+               self.hir_id,\n                print::to_string(print::NO_ANN, |s| s.print_lifetime(self)))\n     }\n }\n@@ -417,10 +416,10 @@ impl GenericArg {\n         }\n     }\n \n-    pub fn id(&self) -> NodeId {\n+    pub fn id(&self) -> HirId {\n         match self {\n-            GenericArg::Lifetime(l) => l.id,\n-            GenericArg::Type(t) => t.id,\n+            GenericArg::Lifetime(l) => l.hir_id,\n+            GenericArg::Type(t) => t.hir_id,\n             GenericArg::Const(c) => c.value.id,\n         }\n     }\n@@ -1760,7 +1759,6 @@ pub struct TypeBinding {\n \n #[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Ty {\n-    pub id: NodeId,\n     pub node: TyKind,\n     pub span: Span,\n     pub hir_id: HirId,"}, {"sha": "7c9d64950a6f9060271ed017bbcee74bf62f824c", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00b74e5eaf4439e859fd057bbf7048f93d8659d5/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b74e5eaf4439e859fd057bbf7048f93d8659d5/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=00b74e5eaf4439e859fd057bbf7048f93d8659d5", "patch": "@@ -158,7 +158,6 @@ impl_stable_hash_for!(struct ast::Label {\n });\n \n impl_stable_hash_for!(struct hir::Lifetime {\n-    id,\n     hir_id,\n     span,\n     name\n@@ -318,7 +317,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::Ty {\n                                           hasher: &mut StableHasher<W>) {\n         hcx.while_hashing_hir_bodies(true, |hcx| {\n             let hir::Ty {\n-                id: _,\n                 hir_id: _,\n                 ref node,\n                 ref span,"}, {"sha": "86d7a19bc83090cc1aeb7db4a54294f14b37ec00", "filename": "src/librustc/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00b74e5eaf4439e859fd057bbf7048f93d8659d5/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b74e5eaf4439e859fd057bbf7048f93d8659d5/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=00b74e5eaf4439e859fd057bbf7048f93d8659d5", "patch": "@@ -101,7 +101,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n \n         let (span_1, span_2, main_label, span_label) = match (sup_is_ret_type, sub_is_ret_type) {\n             (None, None) => {\n-                let (main_label_1, span_label_1) = if ty_sup.id == ty_sub.id {\n+                let (main_label_1, span_label_1) = if ty_sup.hir_id == ty_sub.hir_id {\n                     (\n                         \"this type is declared with multiple lifetimes...\".to_owned(),\n                         \"...but data with one lifetime flows into the other here\".to_owned()"}, {"sha": "a8104a47e67bd93ae6cbb3dbfbc14d21008a1d14", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 33, "deletions": 30, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/00b74e5eaf4439e859fd057bbf7048f93d8659d5/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b74e5eaf4439e859fd057bbf7048f93d8659d5/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=00b74e5eaf4439e859fd057bbf7048f93d8659d5", "patch": "@@ -13,7 +13,7 @@ use crate::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n \n use crate::rustc::lint;\n use crate::session::Session;\n-use crate::util::nodemap::{DefIdMap, FxHashMap, FxHashSet, NodeMap, NodeSet};\n+use crate::util::nodemap::{DefIdMap, FxHashMap, FxHashSet, HirIdMap, NodeMap, NodeSet};\n use errors::{Applicability, DiagnosticBuilder};\n use rustc_data_structures::sync::Lrc;\n use std::borrow::Cow;\n@@ -151,7 +151,7 @@ impl Region {\n         if let Region::EarlyBound(index, _, _) = self {\n             params\n                 .nth(index as usize)\n-                .and_then(|lifetime| map.defs.get(&lifetime.id).cloned())\n+                .and_then(|lifetime| map.defs.get(&lifetime.hir_id).cloned())\n         } else {\n             Some(self)\n         }\n@@ -195,7 +195,7 @@ pub type ObjectLifetimeDefault = Set1<Region>;\n struct NamedRegionMap {\n     // maps from every use of a named (not anonymous) lifetime to a\n     // `Region` describing how that region is bound\n-    pub defs: NodeMap<Region>,\n+    pub defs: HirIdMap<Region>,\n \n     // the set of lifetime def ids that are late-bound; a region can\n     // be late-bound if (a) it does NOT appear in a where-clause and\n@@ -385,8 +385,7 @@ fn resolve_lifetimes<'tcx>(\n \n     let mut rl = ResolveLifetimes::default();\n \n-    for (k, v) in named_region_map.defs {\n-        let hir_id = tcx.hir().node_to_hir_id(k);\n+    for (hir_id, v) in named_region_map.defs {\n         let map = rl.defs.entry(hir_id.owner_local_def_id()).or_default();\n         Lrc::get_mut(map).unwrap().insert(hir_id.local_id, v);\n     }\n@@ -570,7 +569,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     }\n \n     fn visit_ty(&mut self, ty: &'tcx hir::Ty) {\n-        debug!(\"visit_ty: id={:?} ty={:?}\", ty.id, ty);\n+        debug!(\"visit_ty: id={:?} ty={:?}\", ty.hir_id, ty);\n         match ty.node {\n             hir::TyKind::BareFn(ref c) => {\n                 let next_early_index = self.next_early_index();\n@@ -629,7 +628,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             hir::TyKind::Rptr(ref lifetime_ref, ref mt) => {\n                 self.visit_lifetime(lifetime_ref);\n                 let scope = Scope::ObjectLifetimeDefault {\n-                    lifetime: self.map.defs.get(&lifetime_ref.id).cloned(),\n+                    lifetime: self.map.defs.get(&lifetime_ref.hir_id).cloned(),\n                     s: self.scope,\n                 };\n                 self.with(scope, |_, this| this.visit_ty(&mt.ty));\n@@ -672,7 +671,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         // and ban them. Type variables instantiated inside binders aren't\n                         // well-supported at the moment, so this doesn't work.\n                         // In the future, this should be fixed and this error should be removed.\n-                        let def = self.map.defs.get(&lifetime.id).cloned();\n+                        let def = self.map.defs.get(&lifetime.hir_id).cloned();\n                         if let Some(Region::LateBound(_, def_id, _)) = def {\n                             if let Some(node_id) = self.tcx.hir().as_local_node_id(def_id) {\n                                 // Ensure that the parent of the def is an item, not HRTB\n@@ -1501,8 +1500,10 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 }\n             }\n         };\n-        if let Node::Lifetime(hir_lifetime) = self.tcx.hir().get(lifetime.id) {\n-            if let Some(parent) = self.tcx.hir().find(self.tcx.hir().get_parent(hir_lifetime.id)) {\n+        if let Node::Lifetime(hir_lifetime) = self.tcx.hir().get_by_hir_id(lifetime.hir_id) {\n+            if let Some(parent) = self.tcx.hir().find_by_hir_id(\n+                self.tcx.hir().get_parent_item(hir_lifetime.hir_id))\n+            {\n                 match parent {\n                     Node::Item(item) => {\n                         if let hir::ItemKind::Fn(decl, _, _, _) = &item.node {\n@@ -1582,22 +1583,22 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     debug!(\"node id first={:?}\", node_id);\n                     if let Some((id, span, name)) = match self.tcx.hir().get(node_id) {\n                         Node::Lifetime(hir_lifetime) => Some((\n-                            hir_lifetime.id,\n+                            hir_lifetime.hir_id,\n                             hir_lifetime.span,\n                             hir_lifetime.name.ident(),\n                         )),\n                         Node::GenericParam(param) => {\n-                            Some((param.id, param.span, param.name.ident()))\n+                            Some((param.hir_id, param.span, param.name.ident()))\n                         }\n                         _ => None,\n                     } {\n-                        debug!(\"id = {:?} span = {:?} name = {:?}\", node_id, span, name);\n+                        debug!(\"id = {:?} span = {:?} name = {:?}\", id, span, name);\n \n                         if name == keywords::UnderscoreLifetime.ident() {\n                             continue;\n                         }\n \n-                        let mut err = self.tcx.struct_span_lint_node(\n+                        let mut err = self.tcx.struct_span_lint_hir(\n                             lint::builtin::SINGLE_USE_LIFETIMES,\n                             id,\n                             span,\n@@ -1622,17 +1623,17 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     let node_id = self.tcx.hir().as_local_node_id(def_id).unwrap();\n                     if let Some((id, span, name)) = match self.tcx.hir().get(node_id) {\n                         Node::Lifetime(hir_lifetime) => Some((\n-                            hir_lifetime.id,\n+                            hir_lifetime.hir_id,\n                             hir_lifetime.span,\n                             hir_lifetime.name.ident(),\n                         )),\n                         Node::GenericParam(param) => {\n-                            Some((param.id, param.span, param.name.ident()))\n+                            Some((param.hir_id, param.span, param.name.ident()))\n                         }\n                         _ => None,\n                     } {\n-                        debug!(\"id ={:?} span = {:?} name = {:?}\", node_id, span, name);\n-                        let mut err = self.tcx.struct_span_lint_node(\n+                        debug!(\"id ={:?} span = {:?} name = {:?}\", id, span, name);\n+                        let mut err = self.tcx.struct_span_lint_hir(\n                             lint::builtin::UNUSED_LIFETIMES,\n                             id,\n                             span,\n@@ -2049,8 +2050,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         // and whether there's a `self` argument (treated specially).\n         let mut assoc_item_kind = None;\n         let mut impl_self = None;\n-        let parent = self.tcx.hir().get_parent_node(output.id);\n-        let body = match self.tcx.hir().get(parent) {\n+        let parent = self.tcx.hir().get_parent_node_by_hir_id(output.hir_id);\n+        let body = match self.tcx.hir().get_by_hir_id(parent) {\n             // `fn` definitions and methods.\n             Node::Item(&hir::Item {\n                 node: hir::ItemKind::Fn(.., body),\n@@ -2063,12 +2064,13 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }) => {\n                 if let hir::ItemKind::Trait(.., ref trait_items) = self.tcx\n                     .hir()\n-                    .expect_item(self.tcx.hir().get_parent(parent))\n+                    .expect_item_by_hir_id(self.tcx.hir().get_parent_item(parent))\n                     .node\n                 {\n+                    let parent_node_id = self.tcx.hir().hir_to_node_id(parent);\n                     assoc_item_kind = trait_items\n                         .iter()\n-                        .find(|ti| ti.id.node_id == parent)\n+                        .find(|ti| ti.id.node_id == parent_node_id)\n                         .map(|ti| ti.kind);\n                 }\n                 match *m {\n@@ -2083,13 +2085,14 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }) => {\n                 if let hir::ItemKind::Impl(.., ref self_ty, ref impl_items) = self.tcx\n                     .hir()\n-                    .expect_item(self.tcx.hir().get_parent(parent))\n+                    .expect_item_by_hir_id(self.tcx.hir().get_parent_item(parent))\n                     .node\n                 {\n                     impl_self = Some(self_ty);\n+                    let parent_node_id = self.tcx.hir().hir_to_node_id(parent);\n                     assoc_item_kind = impl_items\n                         .iter()\n-                        .find(|ii| ii.id.node_id == parent)\n+                        .find(|ii| ii.id.node_id == parent_node_id)\n                         .map(|ii| ii.kind);\n                 }\n                 Some(body)\n@@ -2143,7 +2146,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             if let hir::TyKind::Rptr(lifetime_ref, ref mt) = inputs[0].node {\n                 if let hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) = mt.ty.node {\n                     if is_self_ty(path.def) {\n-                        if let Some(&lifetime) = self.map.defs.get(&lifetime_ref.id) {\n+                        if let Some(&lifetime) = self.map.defs.get(&lifetime_ref.hir_id) {\n                             let scope = Scope::Elision {\n                                 elide: Elide::Exact(lifetime),\n                                 s: self.scope,\n@@ -2262,7 +2265,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n \n             fn visit_lifetime(&mut self, lifetime_ref: &hir::Lifetime) {\n-                if let Some(&lifetime) = self.map.defs.get(&lifetime_ref.id) {\n+                if let Some(&lifetime) = self.map.defs.get(&lifetime_ref.hir_id) {\n                     match lifetime {\n                         Region::LateBound(debruijn, _, _) | Region::LateBoundAnon(debruijn, _)\n                             if debruijn < self.outer_index =>\n@@ -2653,7 +2656,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     }\n \n     fn insert_lifetime(&mut self, lifetime_ref: &'tcx hir::Lifetime, def: Region) {\n-        if lifetime_ref.id == ast::DUMMY_NODE_ID {\n+        if lifetime_ref.hir_id == hir::DUMMY_HIR_ID {\n             span_bug!(\n                 lifetime_ref.span,\n                 \"lifetime reference not renumbered, \\\n@@ -2663,11 +2666,11 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n         debug!(\n             \"insert_lifetime: {} resolved to {:?} span={:?}\",\n-            self.tcx.hir().node_to_string(lifetime_ref.id),\n+            self.tcx.hir().hir_to_string(lifetime_ref.hir_id),\n             def,\n             self.tcx.sess.source_map().span_to_string(lifetime_ref.span)\n         );\n-        self.map.defs.insert(lifetime_ref.id, def);\n+        self.map.defs.insert(lifetime_ref.hir_id, def);\n \n         match def {\n             Region::LateBoundAnon(..) | Region::Static => {\n@@ -2699,7 +2702,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     /// error (esp. around impl trait). In that case, we remove the\n     /// entry into `map.defs` so as not to confuse later code.\n     fn uninsert_lifetime_on_error(&mut self, lifetime_ref: &'tcx hir::Lifetime, bad_def: Region) {\n-        let old_value = self.map.defs.remove(&lifetime_ref.id);\n+        let old_value = self.map.defs.remove(&lifetime_ref.hir_id);\n         assert_eq!(old_value, Some(bad_def));\n     }\n }"}, {"sha": "af3f54187b0c3458933cbd5cb4fd50c10f3309e9", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00b74e5eaf4439e859fd057bbf7048f93d8659d5/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b74e5eaf4439e859fd057bbf7048f93d8659d5/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=00b74e5eaf4439e859fd057bbf7048f93d8659d5", "patch": "@@ -397,7 +397,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     Some(Node::Item(item)) => match item.node {\n                         hir::ItemKind::Impl(.., ref ty, _) => {\n                             let mut qualname = String::from(\"<\");\n-                            qualname.push_str(&self.tcx.hir().node_to_pretty_string(ty.id));\n+                            qualname.push_str(&self.tcx.hir().hir_to_pretty_string(ty.hir_id));\n \n                             let trait_id = self.tcx.trait_id_of_impl(impl_id);\n                             let mut decl_id = None;"}, {"sha": "9dfd19199bac7b0a6b8989c020e03bf31fafe44e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00b74e5eaf4439e859fd057bbf7048f93d8659d5/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b74e5eaf4439e859fd057bbf7048f93d8659d5/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=00b74e5eaf4439e859fd057bbf7048f93d8659d5", "patch": "@@ -304,8 +304,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                 } else {\n                     let mut multispan = MultiSpan::from_span(span);\n                     multispan.push_span_label(span_late, note.to_string());\n-                    tcx.lint_node(lint::builtin::LATE_BOUND_LIFETIME_ARGUMENTS,\n-                                  args.args[0].id(), multispan, msg);\n+                    tcx.lint_hir(lint::builtin::LATE_BOUND_LIFETIME_ARGUMENTS,\n+                                 args.args[0].id(), multispan, msg);\n                     return (false, None);\n                 }\n             }\n@@ -1267,7 +1267,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n     // parameter or `Self`.\n     pub fn associated_path_to_ty(\n         &self,\n-        ref_id: ast::NodeId,\n+        hir_ref_id: hir::HirId,\n         span: Span,\n         qself_ty: Ty<'tcx>,\n         qself_def: Def,\n@@ -1276,6 +1276,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n     ) -> (Ty<'tcx>, Def) {\n         let tcx = self.tcx();\n         let assoc_ident = assoc_segment.ident;\n+        let ref_id = tcx.hir().hir_to_node_id(hir_ref_id);\n \n         debug!(\"associated_path_to_ty: {:?}::{}\", qself_ty, assoc_ident);\n \n@@ -1370,7 +1371,6 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         };\n \n         let trait_did = bound.def_id();\n-        let hir_ref_id = self.tcx().hir().node_to_hir_id(ref_id);\n         let (assoc_ident, def_scope) = tcx.adjust_ident(assoc_ident, trait_did, hir_ref_id);\n         let item = tcx.associated_items(trait_did).find(|i| {\n             Namespace::from(i.kind) == Namespace::Type &&\n@@ -1388,9 +1388,9 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         tcx.check_stability(item.def_id, Some(ref_id), span);\n \n         if let Some(variant_def) = variant_resolution {\n-            let mut err = tcx.struct_span_lint_node(\n+            let mut err = tcx.struct_span_lint_hir(\n                 AMBIGUOUS_ASSOCIATED_ITEMS,\n-                ref_id,\n+                hir_ref_id,\n                 span,\n                 \"ambiguous associated item\",\n             );\n@@ -1742,7 +1742,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n     /// internal notion of a type.\n     pub fn ast_ty_to_ty(&self, ast_ty: &hir::Ty) -> Ty<'tcx> {\n         debug!(\"ast_ty_to_ty(id={:?}, ast_ty={:?} ty_ty={:?})\",\n-               ast_ty.id, ast_ty, ast_ty.node);\n+               ast_ty.hir_id, ast_ty, ast_ty.node);\n \n         let tcx = self.tcx();\n \n@@ -1795,7 +1795,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                 } else {\n                     Def::Err\n                 };\n-                self.associated_path_to_ty(ast_ty.id, ast_ty.span, ty, def, segment, false).0\n+                self.associated_path_to_ty(ast_ty.hir_id, ast_ty.span, ty, def, segment, false).0\n             }\n             hir::TyKind::Array(ref ty, ref length) => {\n                 let length_def_id = tcx.hir().local_def_id(length.id);"}, {"sha": "def0886dcb2004f5b449561e05c61710ed1bc578", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00b74e5eaf4439e859fd057bbf7048f93d8659d5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b74e5eaf4439e859fd057bbf7048f93d8659d5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=00b74e5eaf4439e859fd057bbf7048f93d8659d5", "patch": "@@ -4734,7 +4734,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 } else {\n                     Def::Err\n                 };\n-                let (ty, def) = AstConv::associated_path_to_ty(self, node_id, path_span,\n+                let hir_id = self.tcx.hir().node_to_hir_id(node_id);\n+                let (ty, def) = AstConv::associated_path_to_ty(self, hir_id, path_span,\n                                                                ty, def, segment, true);\n \n                 // Write back the new resolution."}, {"sha": "b0427a5be3ea49d589d079a195711520e3f581b0", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00b74e5eaf4439e859fd057bbf7048f93d8659d5/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b74e5eaf4439e859fd057bbf7048f93d8659d5/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=00b74e5eaf4439e859fd057bbf7048f93d8659d5", "patch": "@@ -2224,7 +2224,7 @@ fn compute_sig_of_foreign_fn_decl<'a, 'tcx>(\n                        &format!(\n                            \"use of SIMD type `{}` in FFI is highly experimental and \\\n                             may result in invalid code\",\n-                           tcx.hir().node_to_pretty_string(ast_ty.id)\n+                           tcx.hir().hir_to_pretty_string(ast_ty.hir_id)\n                        ),\n                    )\n                    .help(\"add #![feature(simd_ffi)] to the crate attributes to enable\")"}, {"sha": "75ab49fa75087eda089dd646f781b1f0c2ba0075", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00b74e5eaf4439e859fd057bbf7048f93d8659d5/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b74e5eaf4439e859fd057bbf7048f93d8659d5/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=00b74e5eaf4439e859fd057bbf7048f93d8659d5", "patch": "@@ -373,8 +373,8 @@ pub fn hir_ty_to_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, hir_ty: &hir::Ty) ->\n     // In case there are any projections etc, find the \"environment\"\n     // def-id that will be used to determine the traits/predicates in\n     // scope.  This is derived from the enclosing item-like thing.\n-    let env_node_id = tcx.hir().get_parent(hir_ty.id);\n-    let env_def_id = tcx.hir().local_def_id(env_node_id);\n+    let env_node_id = tcx.hir().get_parent_item(hir_ty.hir_id);\n+    let env_def_id = tcx.hir().local_def_id_from_hir_id(env_node_id);\n     let item_cx = self::collect::ItemCtxt::new(tcx, env_def_id);\n \n     astconv::AstConv::ast_ty_to_ty(&item_cx, hir_ty)"}, {"sha": "1171b5ac3b658add4bc0be2dd4f29409e7747e5a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00b74e5eaf4439e859fd057bbf7048f93d8659d5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b74e5eaf4439e859fd057bbf7048f93d8659d5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=00b74e5eaf4439e859fd057bbf7048f93d8659d5", "patch": "@@ -1219,7 +1219,7 @@ impl Lifetime {\n \n impl Clean<Lifetime> for hir::Lifetime {\n     fn clean(&self, cx: &DocContext<'_, '_, '_>) -> Lifetime {\n-        if self.id != ast::DUMMY_NODE_ID {\n+        if self.hir_id != hir::DUMMY_HIR_ID {\n             let def = cx.tcx.named_region(self.hir_id);\n             match def {\n                 Some(rl::Region::EarlyBound(_, node_id, _)) |\n@@ -1986,7 +1986,7 @@ impl Clean<bool> for hir::IsAuto {\n \n impl Clean<Type> for hir::TraitRef {\n     fn clean(&self, cx: &DocContext<'_, '_, '_>) -> Type {\n-        resolve_type(cx, self.path.clean(cx), self.ref_id)\n+        resolve_type(cx, self.path.clean(cx), self.hir_ref_id)\n     }\n }\n \n@@ -2654,7 +2654,7 @@ impl Clean<Type> for hir::Ty {\n                     });\n                     return cx.enter_alias(ty_substs, lt_substs, const_substs, || ty.clean(cx));\n                 }\n-                resolve_type(cx, path.clean(cx), self.id)\n+                resolve_type(cx, path.clean(cx), self.hir_id)\n             }\n             TyKind::Path(hir::QPath::Resolved(Some(ref qself), ref p)) => {\n                 let mut segments: Vec<_> = p.segments.clone().into();\n@@ -2667,7 +2667,7 @@ impl Clean<Type> for hir::Ty {\n                 Type::QPath {\n                     name: p.segments.last().expect(\"segments were empty\").ident.name.clean(cx),\n                     self_type: box qself.clean(cx),\n-                    trait_: box resolve_type(cx, trait_path.clean(cx), self.id)\n+                    trait_: box resolve_type(cx, trait_path.clean(cx), self.hir_id)\n                 }\n             }\n             TyKind::Path(hir::QPath::TypeRelative(ref qself, ref segment)) => {\n@@ -2684,7 +2684,7 @@ impl Clean<Type> for hir::Ty {\n                 Type::QPath {\n                     name: segment.ident.name.clean(cx),\n                     self_type: box qself.clean(cx),\n-                    trait_: box resolve_type(cx, trait_path.clean(cx), self.id)\n+                    trait_: box resolve_type(cx, trait_path.clean(cx), self.hir_id)\n                 }\n             }\n             TyKind::TraitObject(ref bounds, ref lifetime) => {\n@@ -3907,8 +3907,8 @@ fn print_const_expr(cx: &DocContext<'_, '_, '_>, body: hir::BodyId) -> String {\n /// Given a type Path, resolve it to a Type using the TyCtxt\n fn resolve_type(cx: &DocContext<'_, '_, '_>,\n                 path: Path,\n-                id: ast::NodeId) -> Type {\n-    if id == ast::DUMMY_NODE_ID {\n+                id: hir::HirId) -> Type {\n+    if id == hir::DUMMY_HIR_ID {\n         debug!(\"resolve_type({:?})\", path);\n     } else {\n         debug!(\"resolve_type({:?},{:?})\", path, id);"}, {"sha": "226924c41c54137745f594fb9a55bcc114aac167", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00b74e5eaf4439e859fd057bbf7048f93d8659d5/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b74e5eaf4439e859fd057bbf7048f93d8659d5/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=00b74e5eaf4439e859fd057bbf7048f93d8659d5", "patch": "@@ -193,7 +193,6 @@ impl<'a, 'tcx, 'rcx> DocContext<'a, 'tcx, 'rcx> {\n         };\n \n         hir::Ty {\n-            id: ast::DUMMY_NODE_ID,\n             node: hir::TyKind::Path(hir::QPath::Resolved(None, P(new_path))),\n             span: DUMMY_SP,\n             hir_id: hir::DUMMY_HIR_ID,\n@@ -213,7 +212,6 @@ impl<'a, 'tcx, 'rcx> DocContext<'a, 'tcx, 'rcx> {\n                     };\n \n                     args.push(hir::GenericArg::Lifetime(hir::Lifetime {\n-                        id: ast::DUMMY_NODE_ID,\n                         hir_id: hir::DUMMY_HIR_ID,\n                         span: DUMMY_SP,\n                         name: hir::LifetimeName::Param(name),\n@@ -235,7 +233,6 @@ impl<'a, 'tcx, 'rcx> DocContext<'a, 'tcx, 'rcx> {\n     pub fn ty_param_to_ty(&self, param: ty::GenericParamDef) -> hir::Ty {\n         debug!(\"ty_param_to_ty({:?}) {:?}\", param, param.def_id);\n         hir::Ty {\n-            id: ast::DUMMY_NODE_ID,\n             node: hir::TyKind::Path(hir::QPath::Resolved(\n                 None,\n                 P(hir::Path {"}, {"sha": "8dad26f9292cd36b610064f4f05aac0591cc4f4f", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00b74e5eaf4439e859fd057bbf7048f93d8659d5/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b74e5eaf4439e859fd057bbf7048f93d8659d5/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=00b74e5eaf4439e859fd057bbf7048f93d8659d5", "patch": "@@ -868,7 +868,7 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirCollector<'a, 'hir> {\n \n     fn visit_item(&mut self, item: &'hir hir::Item) {\n         let name = if let hir::ItemKind::Impl(.., ref ty, _) = item.node {\n-            self.map.node_to_pretty_string(ty.id)\n+            self.map.hir_to_pretty_string(ty.hir_id)\n         } else {\n             item.ident.to_string()\n         };"}]}