{"sha": "0c8944314cb323416c8ad6ad27347ca056c5a91c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjODk0NDMxNGNiMzIzNDE2YzhhZDZhZDI3MzQ3Y2EwNTZjNWE5MWM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-30T15:39:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-30T15:39:56Z"}, "message": "Merge #5601\n\n5601: Finalize union grammar r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "2a31c4bdfb62fe00b5109366155b0b4a40bf471d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a31c4bdfb62fe00b5109366155b0b4a40bf471d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c8944314cb323416c8ad6ad27347ca056c5a91c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfIunMCRBK7hj4Ov3rIwAAdHIIAKoAf/SIbLVNucg1J60kuST1\nYWSuLdEDyX77koCDAgw64qOOoZbMHQ2m/9X+/c861+S0PbBe95IPP2VSvxgBU7Dq\nBwXdpDHWEGuDQWLm0/9r+0FUgzrSqGioEnc//mNuXB3ktiFDZ0188mYsTmZgKiz6\naEj5Ip25M5/iSXZVTgXDfDy6/Pd0yDeKMPo+5fWICXO7wjMQAXkJzDwzAP2Oc5Ap\nMFxgs1hpVlr3VvEbw+96Fr6iXYeskquTLW31wG6q0vPW5a//4cSK2qA0jJImm3h0\nYLoQusD+buOKPD9uDU3NbhGOPRexzDMbov30NtDuB0lrIDqKm8phNjrXdX7K0WE=\n=vOg8\n-----END PGP SIGNATURE-----\n", "payload": "tree 2a31c4bdfb62fe00b5109366155b0b4a40bf471d\nparent 2496628c56415f4456803e4487f90bad96337d57\nparent 1ae4721c9cfea746fce59a816b1c266bf373d6cf\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596123596 +0000\ncommitter GitHub <noreply@github.com> 1596123596 +0000\n\nMerge #5601\n\n5601: Finalize union grammar r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c8944314cb323416c8ad6ad27347ca056c5a91c", "html_url": "https://github.com/rust-lang/rust/commit/0c8944314cb323416c8ad6ad27347ca056c5a91c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c8944314cb323416c8ad6ad27347ca056c5a91c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2496628c56415f4456803e4487f90bad96337d57", "url": "https://api.github.com/repos/rust-lang/rust/commits/2496628c56415f4456803e4487f90bad96337d57", "html_url": "https://github.com/rust-lang/rust/commit/2496628c56415f4456803e4487f90bad96337d57"}, {"sha": "1ae4721c9cfea746fce59a816b1c266bf373d6cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ae4721c9cfea746fce59a816b1c266bf373d6cf", "html_url": "https://github.com/rust-lang/rust/commit/1ae4721c9cfea746fce59a816b1c266bf373d6cf"}], "stats": {"total": 102, "additions": 51, "deletions": 51}, "files": [{"sha": "3a3d821090abd93f59eef9b1ed458cc6428bfdd6", "filename": "crates/ra_hir/src/has_source.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fhas_source.rs?ref=0c8944314cb323416c8ad6ad27347ca056c5a91c", "patch": "@@ -63,8 +63,8 @@ impl HasSource for Struct {\n     }\n }\n impl HasSource for Union {\n-    type Ast = ast::UnionDef;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::UnionDef> {\n+    type Ast = ast::Union;\n+    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Union> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }"}, {"sha": "6c8775402957a9b8980936e4b7c0f6b5a56cbbbe", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=0c8944314cb323416c8ad6ad27347ca056c5a91c", "patch": "@@ -582,7 +582,7 @@ to_def_impls![\n     (crate::Module, ast::Module, module_to_def),\n     (crate::Struct, ast::StructDef, struct_to_def),\n     (crate::Enum, ast::EnumDef, enum_to_def),\n-    (crate::Union, ast::UnionDef, union_to_def),\n+    (crate::Union, ast::Union, union_to_def),\n     (crate::Trait, ast::TraitDef, trait_to_def),\n     (crate::ImplDef, ast::ImplDef, impl_to_def),\n     (crate::TypeAlias, ast::TypeAlias, type_alias_to_def),"}, {"sha": "0093a86719e3d0bd6085186acd37ea97ee3f3eb5", "filename": "crates/ra_hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=0c8944314cb323416c8ad6ad27347ca056c5a91c", "patch": "@@ -80,7 +80,7 @@ impl SourceToDefCtx<'_, '_> {\n     pub(super) fn enum_to_def(&mut self, src: InFile<ast::EnumDef>) -> Option<EnumId> {\n         self.to_def(src, keys::ENUM)\n     }\n-    pub(super) fn union_to_def(&mut self, src: InFile<ast::UnionDef>) -> Option<UnionId> {\n+    pub(super) fn union_to_def(&mut self, src: InFile<ast::Union>) -> Option<UnionId> {\n         self.to_def(src, keys::UNION)\n     }\n     pub(super) fn static_to_def(&mut self, src: InFile<ast::StaticDef>) -> Option<StaticId> {\n@@ -174,7 +174,7 @@ impl SourceToDefCtx<'_, '_> {\n                         let def = self.enum_to_def(container.with_value(it))?;\n                         def.into()\n                     },\n-                    ast::UnionDef(it) => {\n+                    ast::Union(it) => {\n                         let def = self.union_to_def(container.with_value(it))?;\n                         VariantId::from(def).into()\n                     },"}, {"sha": "d8963f63f3d7f4db302e75abdf9e595706a5e411", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=0c8944314cb323416c8ad6ad27347ca056c5a91c", "patch": "@@ -660,7 +660,7 @@ impl ExprCollector<'_> {\n                         let id = self.find_inner_item(&def)?;\n                         (EnumLoc { container, id }.intern(self.db).into(), def.name())\n                     }\n-                    ast::Item::UnionDef(def) => {\n+                    ast::Item::Union(def) => {\n                         let id = self.find_inner_item(&def)?;\n                         (UnionLoc { container, id }.intern(self.db).into(), def.name())\n                     }"}, {"sha": "7bcc13b06fc0b22dd83ffe2cdafe58ef0e45b388", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=0c8944314cb323416c8ad6ad27347ca056c5a91c", "patch": "@@ -415,7 +415,7 @@ mod_items! {\n     ExternCrate in extern_crates -> ast::ExternCrate,\n     Function in functions -> ast::Fn,\n     Struct in structs -> ast::StructDef,\n-    Union in unions -> ast::UnionDef,\n+    Union in unions -> ast::Union,\n     Enum in enums -> ast::EnumDef,\n     Const in consts -> ast::ConstDef,\n     Static in statics -> ast::StaticDef,\n@@ -534,7 +534,7 @@ pub struct Union {\n     pub visibility: RawVisibilityId,\n     pub generic_params: GenericParamsId,\n     pub fields: Fields,\n-    pub ast_id: FileAstId<ast::UnionDef>,\n+    pub ast_id: FileAstId<ast::Union>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]"}, {"sha": "2721a02a5dd538f70166018d5a9bde6fbd654671", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=0c8944314cb323416c8ad6ad27347ca056c5a91c", "patch": "@@ -79,7 +79,7 @@ impl Ctx {\n         // Collect inner items for 1-to-1-lowered items.\n         match item {\n             ast::Item::StructDef(_)\n-            | ast::Item::UnionDef(_)\n+            | ast::Item::Union(_)\n             | ast::Item::EnumDef(_)\n             | ast::Item::Fn(_)\n             | ast::Item::TypeAlias(_)\n@@ -104,7 +104,7 @@ impl Ctx {\n         let attrs = Attrs::new(item, &self.hygiene);\n         let items = match item {\n             ast::Item::StructDef(ast) => self.lower_struct(ast).map(Into::into),\n-            ast::Item::UnionDef(ast) => self.lower_union(ast).map(Into::into),\n+            ast::Item::Union(ast) => self.lower_union(ast).map(Into::into),\n             ast::Item::EnumDef(ast) => self.lower_enum(ast).map(Into::into),\n             ast::Item::Fn(ast) => self.lower_function(ast).map(Into::into),\n             ast::Item::TypeAlias(ast) => self.lower_type_alias(ast).map(Into::into),\n@@ -233,7 +233,7 @@ impl Ctx {\n         res\n     }\n \n-    fn lower_union(&mut self, union: &ast::UnionDef) -> Option<FileItemTreeId<Union>> {\n+    fn lower_union(&mut self, union: &ast::Union) -> Option<FileItemTreeId<Union>> {\n         let visibility = self.lower_visibility(union);\n         let name = union.name()?.as_name();\n         let generic_params = self.lower_generic_params(GenericsOwner::Union, union);"}, {"sha": "0be0219486fa6eb5179a58464afe591c7fb4e5cd", "filename": "crates/ra_hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=0c8944314cb323416c8ad6ad27347ca056c5a91c", "patch": "@@ -252,7 +252,7 @@ fn smoke() {\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"en\"))] }, input: None }]) }]\n             Enum { name: Name(Text(\"En\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), variants: IdRange::<ra_hir_def::item_tree::Variant>(0..1), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::EnumDef>(6) }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"un\"))] }, input: None }]) }]\n-            Union { name: Name(Text(\"Un\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), fields: Record(IdRange::<ra_hir_def::item_tree::Field>(3..4)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::UnionDef>(7) }\n+            Union { name: Name(Text(\"Un\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), fields: Record(IdRange::<ra_hir_def::item_tree::Field>(3..4)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Union>(7) }\n         \"##]],\n     );\n }"}, {"sha": "2282aed14d5c5b74611a84abaa071721995147a9", "filename": "crates/ra_hir_def/src/keys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs?ref=0c8944314cb323416c8ad6ad27347ca056c5a91c", "patch": "@@ -21,7 +21,7 @@ pub const TYPE_ALIAS: Key<ast::TypeAlias, TypeAliasId> = Key::new();\n pub const IMPL: Key<ast::ImplDef, ImplId> = Key::new();\n pub const TRAIT: Key<ast::TraitDef, TraitId> = Key::new();\n pub const STRUCT: Key<ast::StructDef, StructId> = Key::new();\n-pub const UNION: Key<ast::UnionDef, UnionId> = Key::new();\n+pub const UNION: Key<ast::Union, UnionId> = Key::new();\n pub const ENUM: Key<ast::EnumDef, EnumId> = Key::new();\n \n pub const ENUM_VARIANT: Key<ast::EnumVariant, EnumVariantId> = Key::new();"}, {"sha": "ef3508494af336679ee99640f5e5cac6fc787442", "filename": "crates/ra_hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=0c8944314cb323416c8ad6ad27347ca056c5a91c", "patch": "@@ -74,7 +74,7 @@ fn parse_adt(tt: &tt::Subtree) -> Result<BasicAdtInfo, mbe::ExpandError> {\n         match node {\n             ast::StructDef(it) => (it.name(), it.generic_param_list()),\n             ast::EnumDef(it) => (it.name(), it.generic_param_list()),\n-            ast::UnionDef(it) => (it.name(), it.generic_param_list()),\n+            ast::Union(it) => (it.name(), it.generic_param_list()),\n             _ => {\n                 debug!(\"unexpected node is {:?}\", node);\n                 return Err(mbe::ExpandError::ConversionError)"}, {"sha": "730df1414f0e48e0798d8342e144aa603cba0f73", "filename": "crates/ra_ide/src/display/short_label.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs?ref=0c8944314cb323416c8ad6ad27347ca056c5a91c", "patch": "@@ -19,7 +19,7 @@ impl ShortLabel for ast::StructDef {\n     }\n }\n \n-impl ShortLabel for ast::UnionDef {\n+impl ShortLabel for ast::Union {\n     fn short_label(&self) -> Option<String> {\n         short_label_from_node(self, \"union \")\n     }"}, {"sha": "874cf72ef3ba07c4f9c0c492352fcba3f90875cc", "filename": "crates/ra_ide/src/file_structure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs?ref=0c8944314cb323416c8ad6ad27347ca056c5a91c", "patch": "@@ -127,7 +127,7 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n                 decl_with_detail(it, Some(detail))\n             },\n             ast::StructDef(it) => decl(it),\n-            ast::UnionDef(it) => decl(it),\n+            ast::Union(it) => decl(it),\n             ast::EnumDef(it) => decl(it),\n             ast::EnumVariant(it) => decl(it),\n             ast::TraitDef(it) => decl(it),"}, {"sha": "e41a4a12b51f82a32fb0f770790c836516081b59", "filename": "crates/ra_ide/src/goto_implementation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs?ref=0c8944314cb323416c8ad6ad27347ca056c5a91c", "patch": "@@ -46,7 +46,7 @@ fn impls_for_def(\n     let ty = match node {\n         ast::AdtDef::StructDef(def) => sema.to_def(def)?.ty(sema.db),\n         ast::AdtDef::EnumDef(def) => sema.to_def(def)?.ty(sema.db),\n-        ast::AdtDef::UnionDef(def) => sema.to_def(def)?.ty(sema.db),\n+        ast::AdtDef::Union(def) => sema.to_def(def)?.ty(sema.db),\n     };\n \n     let impls = ImplDef::all_in_crate(sema.db, krate);"}, {"sha": "b0ab160ace94c6be0602bca91513d3629de8515c", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=0c8944314cb323416c8ad6ad27347ca056c5a91c", "patch": "@@ -707,7 +707,7 @@ fn highlight_name_by_syntax(name: ast::Name) -> Highlight {\n     let tag = match parent.kind() {\n         STRUCT_DEF => HighlightTag::Struct,\n         ENUM_DEF => HighlightTag::Enum,\n-        UNION_DEF => HighlightTag::Union,\n+        UNION => HighlightTag::Union,\n         TRAIT_DEF => HighlightTag::Trait,\n         TYPE_ALIAS => HighlightTag::TypeAlias,\n         TYPE_PARAM => HighlightTag::TypeParam,"}, {"sha": "11de059583a6085cc0813b3580e2b66f41035a11", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=0c8944314cb323416c8ad6ad27347ca056c5a91c", "patch": "@@ -154,7 +154,7 @@ pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option\n                 let def: hir::Struct = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n-            ast::UnionDef(it) => {\n+            ast::Union(it) => {\n                 let def: hir::Union = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },"}, {"sha": "ec06e2d451f6005f21ee11e60a2ba98d9cbfe1bb", "filename": "crates/ra_parser/src/grammar/items/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs?ref=0c8944314cb323416c8ad6ad27347ca056c5a91c", "patch": "@@ -11,7 +11,7 @@ pub(super) fn struct_def(p: &mut Parser, m: Marker) {\n pub(super) fn union_def(p: &mut Parser, m: Marker) {\n     assert!(p.at_contextual_kw(\"union\"));\n     p.bump_remap(T![union]);\n-    struct_or_union(p, m, T![union], UNION_DEF);\n+    struct_or_union(p, m, T![union], UNION);\n }\n \n fn struct_or_union(p: &mut Parser, m: Marker, kw: SyntaxKind, def: SyntaxKind) {"}, {"sha": "7efdeeac6f87cf9cfa496219f27adc3f645f0d46", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=0c8944314cb323416c8ad6ad27347ca056c5a91c", "patch": "@@ -124,7 +124,7 @@ pub enum SyntaxKind {\n     R_DOLLAR,\n     SOURCE_FILE,\n     STRUCT_DEF,\n-    UNION_DEF,\n+    UNION,\n     ENUM_DEF,\n     FN,\n     RET_TYPE,"}, {"sha": "d153e8528ace496fd970f74f19af33a7d9621e04", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=0c8944314cb323416c8ad6ad27347ca056c5a91c", "patch": "@@ -199,14 +199,14 @@ impl TypeAlias {\n     pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct UnionDef {\n+pub struct Union {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for UnionDef {}\n-impl ast::NameOwner for UnionDef {}\n-impl ast::VisibilityOwner for UnionDef {}\n-impl ast::GenericParamsOwner for UnionDef {}\n-impl UnionDef {\n+impl ast::AttrsOwner for Union {}\n+impl ast::NameOwner for Union {}\n+impl ast::VisibilityOwner for Union {}\n+impl ast::GenericParamsOwner for Union {}\n+impl Union {\n     pub fn union_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![union]) }\n     pub fn record_field_list(&self) -> Option<RecordFieldList> { support::child(&self.syntax) }\n }\n@@ -1284,7 +1284,7 @@ pub enum Item {\n     StructDef(StructDef),\n     TraitDef(TraitDef),\n     TypeAlias(TypeAlias),\n-    UnionDef(UnionDef),\n+    Union(Union),\n     Use(Use),\n }\n impl ast::AttrsOwner for Item {}\n@@ -1393,7 +1393,7 @@ impl ast::VisibilityOwner for ExternItem {}\n pub enum AdtDef {\n     StructDef(StructDef),\n     EnumDef(EnumDef),\n-    UnionDef(UnionDef),\n+    Union(Union),\n }\n impl ast::AttrsOwner for AdtDef {}\n impl ast::GenericParamsOwner for AdtDef {}\n@@ -1553,8 +1553,8 @@ impl AstNode for TypeAlias {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for UnionDef {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == UNION_DEF }\n+impl AstNode for Union {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == UNION }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2810,8 +2810,8 @@ impl From<TraitDef> for Item {\n impl From<TypeAlias> for Item {\n     fn from(node: TypeAlias) -> Item { Item::TypeAlias(node) }\n }\n-impl From<UnionDef> for Item {\n-    fn from(node: UnionDef) -> Item { Item::UnionDef(node) }\n+impl From<Union> for Item {\n+    fn from(node: Union) -> Item { Item::Union(node) }\n }\n impl From<Use> for Item {\n     fn from(node: Use) -> Item { Item::Use(node) }\n@@ -2820,7 +2820,7 @@ impl AstNode for Item {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             CONST_DEF | ENUM_DEF | EXTERN_BLOCK | EXTERN_CRATE | FN | IMPL_DEF | MACRO_CALL\n-            | MODULE | STATIC_DEF | STRUCT_DEF | TRAIT_DEF | TYPE_ALIAS | UNION_DEF | USE => true,\n+            | MODULE | STATIC_DEF | STRUCT_DEF | TRAIT_DEF | TYPE_ALIAS | UNION | USE => true,\n             _ => false,\n         }\n     }\n@@ -2838,7 +2838,7 @@ impl AstNode for Item {\n             STRUCT_DEF => Item::StructDef(StructDef { syntax }),\n             TRAIT_DEF => Item::TraitDef(TraitDef { syntax }),\n             TYPE_ALIAS => Item::TypeAlias(TypeAlias { syntax }),\n-            UNION_DEF => Item::UnionDef(UnionDef { syntax }),\n+            UNION => Item::Union(Union { syntax }),\n             USE => Item::Use(Use { syntax }),\n             _ => return None,\n         };\n@@ -2858,7 +2858,7 @@ impl AstNode for Item {\n             Item::StructDef(it) => &it.syntax,\n             Item::TraitDef(it) => &it.syntax,\n             Item::TypeAlias(it) => &it.syntax,\n-            Item::UnionDef(it) => &it.syntax,\n+            Item::Union(it) => &it.syntax,\n             Item::Use(it) => &it.syntax,\n         }\n     }\n@@ -3378,21 +3378,21 @@ impl From<StructDef> for AdtDef {\n impl From<EnumDef> for AdtDef {\n     fn from(node: EnumDef) -> AdtDef { AdtDef::EnumDef(node) }\n }\n-impl From<UnionDef> for AdtDef {\n-    fn from(node: UnionDef) -> AdtDef { AdtDef::UnionDef(node) }\n+impl From<Union> for AdtDef {\n+    fn from(node: Union) -> AdtDef { AdtDef::Union(node) }\n }\n impl AstNode for AdtDef {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            STRUCT_DEF | ENUM_DEF | UNION_DEF => true,\n+            STRUCT_DEF | ENUM_DEF | UNION => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n             STRUCT_DEF => AdtDef::StructDef(StructDef { syntax }),\n             ENUM_DEF => AdtDef::EnumDef(EnumDef { syntax }),\n-            UNION_DEF => AdtDef::UnionDef(UnionDef { syntax }),\n+            UNION => AdtDef::Union(Union { syntax }),\n             _ => return None,\n         };\n         Some(res)\n@@ -3401,7 +3401,7 @@ impl AstNode for AdtDef {\n         match self {\n             AdtDef::StructDef(it) => &it.syntax,\n             AdtDef::EnumDef(it) => &it.syntax,\n-            AdtDef::UnionDef(it) => &it.syntax,\n+            AdtDef::Union(it) => &it.syntax,\n         }\n     }\n }\n@@ -3525,7 +3525,7 @@ impl std::fmt::Display for TypeAlias {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for UnionDef {\n+impl std::fmt::Display for Union {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }"}, {"sha": "ce11a7513855655412724750c32947b056d30d65", "filename": "crates/ra_syntax/src/ast/node_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=0c8944314cb323416c8ad6ad27347ca056c5a91c", "patch": "@@ -476,7 +476,7 @@ impl ast::TokenTree {\n impl ast::DocCommentsOwner for ast::SourceFile {}\n impl ast::DocCommentsOwner for ast::Fn {}\n impl ast::DocCommentsOwner for ast::StructDef {}\n-impl ast::DocCommentsOwner for ast::UnionDef {}\n+impl ast::DocCommentsOwner for ast::Union {}\n impl ast::DocCommentsOwner for ast::RecordField {}\n impl ast::DocCommentsOwner for ast::TupleField {}\n impl ast::DocCommentsOwner for ast::EnumDef {}"}, {"sha": "6589e479519323b1d20d20d81f778011fe563e40", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0068_union_items.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.rast", "raw_url": "https://github.com/rust-lang/rust/raw/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.rast?ref=0c8944314cb323416c8ad6ad27347ca056c5a91c", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..51\n-  UNION_DEF@0..12\n+  UNION@0..12\n     UNION_KW@0..5 \"union\"\n     WHITESPACE@5..6 \" \"\n     NAME@6..9\n@@ -9,7 +9,7 @@ SOURCE_FILE@0..51\n       L_CURLY@10..11 \"{\"\n       R_CURLY@11..12 \"}\"\n   WHITESPACE@12..13 \"\\n\"\n-  UNION_DEF@13..50\n+  UNION@13..50\n     UNION_KW@13..18 \"union\"\n     WHITESPACE@18..19 \" \"\n     NAME@19..22"}, {"sha": "b04a505ead1e1a63079a0aff2e1f2b3ff8f55f5c", "filename": "crates/ra_syntax/test_data/parser/ok/0035_weird_exprs.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast?ref=0c8944314cb323416c8ad6ad27347ca056c5a91c", "patch": "@@ -1560,7 +1560,7 @@ SOURCE_FILE@0..3813\n     BLOCK_EXPR@2845..2906\n       L_CURLY@2845..2846 \"{\"\n       WHITESPACE@2846..2851 \"\\n    \"\n-      UNION_DEF@2851..2904\n+      UNION@2851..2904\n         UNION_KW@2851..2856 \"union\"\n         WHITESPACE@2856..2857 \" \"\n         NAME@2857..2862"}, {"sha": "6f91861271765d2336cd47714626c582856d3bfc", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8944314cb323416c8ad6ad27347ca056c5a91c/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=0c8944314cb323416c8ad6ad27347ca056c5a91c", "patch": "@@ -927,7 +927,7 @@ pub(crate) fn handle_code_lens(\n                         SyntaxKind::TRAIT_DEF\n                             | SyntaxKind::STRUCT_DEF\n                             | SyntaxKind::ENUM_DEF\n-                            | SyntaxKind::UNION_DEF\n+                            | SyntaxKind::UNION\n                     )\n                 })\n                 .map(|it| {"}, {"sha": "e21618cbd87da0e04b2ede6303f07673fdef2698", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c8944314cb323416c8ad6ad27347ca056c5a91c/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8944314cb323416c8ad6ad27347ca056c5a91c/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=0c8944314cb323416c8ad6ad27347ca056c5a91c", "patch": "@@ -94,7 +94,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n     nodes: &[\n         \"SOURCE_FILE\",\n         \"STRUCT_DEF\",\n-        \"UNION_DEF\",\n+        \"UNION\",\n         \"ENUM_DEF\",\n         \"FN\",\n         \"RET_TYPE\","}, {"sha": "65082f3d910313687237a742d19f1a4a9d376b82", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c8944314cb323416c8ad6ad27347ca056c5a91c/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/0c8944314cb323416c8ad6ad27347ca056c5a91c/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=0c8944314cb323416c8ad6ad27347ca056c5a91c", "patch": "@@ -16,7 +16,7 @@ Item =\n | StructDef\n | TraitDef\n | TypeAlias\n-| UnionDef\n+| Union\n | Use\n \n Module =\n@@ -98,7 +98,7 @@ FieldList =\n   RecordFieldList\n | TupleFieldList\n \n-UnionDef =\n+Union =\n   Attr* Visibility? 'union' Name GenericParamList? WhereClause?\n   RecordFieldList\n \n@@ -455,7 +455,7 @@ MetaItem =\n AdtDef =\n   StructDef\n | EnumDef\n-| UnionDef\n+| Union\n \n TypeRef =\n   ParenType"}]}