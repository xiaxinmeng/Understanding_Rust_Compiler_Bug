{"sha": "e6ee4e056d7855cb0353efbb4207dceb9ab46414", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ZWU0ZTA1NmQ3ODU1Y2IwMzUzZWZiYjQyMDdkY2ViOWFiNDY0MTQ=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-09-22T07:56:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-22T07:56:24Z"}, "message": "Rollup merge of #53652 - oconnor663:copy_in_place, r=alexcrichton\n\ndefine copy_within on slices\n\nThis is a safe wrapper around `ptr::copy`, for regions within a single slice. Previously, safe in-place copying was only available as a side effect of `Vec::drain`.\n\nI've wanted this API a couple times in the past, and I figured I'd just whip up a PR to help discuss it. It's possible something like this exists elsewhere and I just missed it. It might also be a big enough addition to warrant an RFC, I'm not sure.", "tree": {"sha": "03008edb114b5d49c17a0c348c1232c270d85a8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03008edb114b5d49c17a0c348c1232c270d85a8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6ee4e056d7855cb0353efbb4207dceb9ab46414", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbpfWoCRBK7hj4Ov3rIwAAdHIIAJFXj3HFqMiGaJVPoEx6owTZ\ntskE1eVIB64TEhDDqwHBhxqZzETuin+oKhLIusP4exi2TD0HTTW9Pevgs+Nig7dA\nnCpws43JXujEKAvcS1BLer90sI2JTqbXHKN2PiB7sXq/Om7CkN14x2gWAKTyfLnv\nFa937Q8BWOKEC+T6st9O9zEootGwQdFRtTtwnMbzRpUFYJJ7qxBha9GE4O7rjlIc\n2bcP39eJwxuZ/dHqBBNEXRdhaaBGvLvuKE8cKNpBX3IzeGe2UpoPL6AYdwv7KoZ+\nbAhE6KadtNDOcblQlAPsBFU+g07aUsCx92DM/VomiQIq+NgS48dXEdhcVyz4jMs=\n=jOWq\n-----END PGP SIGNATURE-----\n", "payload": "tree 03008edb114b5d49c17a0c348c1232c270d85a8b\nparent c97b60ff3fcf1830e7e19ceeaea4046dc126911d\nparent d0e59f563d11a0d8efbe9a59e7b20526bc42adce\nauthor Pietro Albini <pietro@pietroalbini.org> 1537602984 +0200\ncommitter GitHub <noreply@github.com> 1537602984 +0200\n\nRollup merge of #53652 - oconnor663:copy_in_place, r=alexcrichton\n\ndefine copy_within on slices\n\nThis is a safe wrapper around `ptr::copy`, for regions within a single slice. Previously, safe in-place copying was only available as a side effect of `Vec::drain`.\n\nI've wanted this API a couple times in the past, and I figured I'd just whip up a PR to help discuss it. It's possible something like this exists elsewhere and I just missed it. It might also be a big enough addition to warrant an RFC, I'm not sure.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6ee4e056d7855cb0353efbb4207dceb9ab46414", "html_url": "https://github.com/rust-lang/rust/commit/e6ee4e056d7855cb0353efbb4207dceb9ab46414", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6ee4e056d7855cb0353efbb4207dceb9ab46414/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c97b60ff3fcf1830e7e19ceeaea4046dc126911d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c97b60ff3fcf1830e7e19ceeaea4046dc126911d", "html_url": "https://github.com/rust-lang/rust/commit/c97b60ff3fcf1830e7e19ceeaea4046dc126911d"}, {"sha": "d0e59f563d11a0d8efbe9a59e7b20526bc42adce", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0e59f563d11a0d8efbe9a59e7b20526bc42adce", "html_url": "https://github.com/rust-lang/rust/commit/d0e59f563d11a0d8efbe9a59e7b20526bc42adce"}], "stats": {"total": 104, "additions": 104, "deletions": 0}, "files": [{"sha": "e4ac79a26d860957b48c83aac379bfc0dbbd6723", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e6ee4e056d7855cb0353efbb4207dceb9ab46414/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6ee4e056d7855cb0353efbb4207dceb9ab46414/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=e6ee4e056d7855cb0353efbb4207dceb9ab46414", "patch": "@@ -1618,6 +1618,63 @@ impl<T> [T] {\n         }\n     }\n \n+    /// Copies elements from one part of the slice to another part of itself,\n+    /// using a memmove.\n+    ///\n+    /// `src` is the range within `self` to copy from. `dest` is the starting\n+    /// index of the range within `self` to copy to, which will have the same\n+    /// length as `src`. The two ranges may overlap. The ends of the two ranges\n+    /// must be less than or equal to `self.len()`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// This function will panic if either range exceeds the end of the slice,\n+    /// or if the end of `src` is before the start.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Copying four bytes within a slice:\n+    ///\n+    /// ```\n+    /// # #![feature(copy_within)]\n+    /// let mut bytes = *b\"Hello, World!\";\n+    ///\n+    /// bytes.copy_within(1..5, 8);\n+    ///\n+    /// assert_eq!(&bytes, b\"Hello, Wello!\");\n+    /// ```\n+    #[unstable(feature = \"copy_within\", issue = \"54236\")]\n+    pub fn copy_within<R: ops::RangeBounds<usize>>(&mut self, src: R, dest: usize)\n+    where\n+        T: Copy,\n+    {\n+        let src_start = match src.start_bound() {\n+            ops::Bound::Included(&n) => n,\n+            ops::Bound::Excluded(&n) => n\n+                .checked_add(1)\n+                .unwrap_or_else(|| slice_index_overflow_fail()),\n+            ops::Bound::Unbounded => 0,\n+        };\n+        let src_end = match src.end_bound() {\n+            ops::Bound::Included(&n) => n\n+                .checked_add(1)\n+                .unwrap_or_else(|| slice_index_overflow_fail()),\n+            ops::Bound::Excluded(&n) => n,\n+            ops::Bound::Unbounded => self.len(),\n+        };\n+        assert!(src_start <= src_end, \"src end is before src start\");\n+        assert!(src_end <= self.len(), \"src is out of bounds\");\n+        let count = src_end - src_start;\n+        assert!(dest <= self.len() - count, \"dest is out of bounds\");\n+        unsafe {\n+            ptr::copy(\n+                self.get_unchecked(src_start),\n+                self.get_unchecked_mut(dest),\n+                count,\n+            );\n+        }\n+    }\n+\n     /// Swaps all elements in `self` with those in `other`.\n     ///\n     /// The length of `other` must be the same as `self`."}, {"sha": "8fc32f40b9920275a3f364edd5b0e44d556fe257", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6ee4e056d7855cb0353efbb4207dceb9ab46414/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6ee4e056d7855cb0353efbb4207dceb9ab46414/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=e6ee4e056d7855cb0353efbb4207dceb9ab46414", "patch": "@@ -39,6 +39,7 @@\n #![feature(inner_deref)]\n #![feature(slice_internals)]\n #![feature(option_replace)]\n+#![feature(copy_within)]\n \n extern crate core;\n extern crate test;"}, {"sha": "d46a35ab82cfcae93dbaed7f6f3ceba5853adba7", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e6ee4e056d7855cb0353efbb4207dceb9ab46414/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6ee4e056d7855cb0353efbb4207dceb9ab46414/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=e6ee4e056d7855cb0353efbb4207dceb9ab46414", "patch": "@@ -1000,3 +1000,49 @@ fn test_align_to_empty_mid() {\n         assert_eq!(mid.as_ptr() as usize % mem::align_of::<Chunk>(), 0);\n     }\n }\n+\n+#[test]\n+fn test_copy_within() {\n+    // Start to end, with a RangeTo.\n+    let mut bytes = *b\"Hello, World!\";\n+    bytes.copy_within(..3, 10);\n+    assert_eq!(&bytes, b\"Hello, WorHel\");\n+\n+    // End to start, with a RangeFrom.\n+    let mut bytes = *b\"Hello, World!\";\n+    bytes.copy_within(10.., 0);\n+    assert_eq!(&bytes, b\"ld!lo, World!\");\n+\n+    // Overlapping, with a RangeInclusive.\n+    let mut bytes = *b\"Hello, World!\";\n+    bytes.copy_within(0..=11, 1);\n+    assert_eq!(&bytes, b\"HHello, World\");\n+\n+    // Whole slice, with a RangeFull.\n+    let mut bytes = *b\"Hello, World!\";\n+    bytes.copy_within(.., 0);\n+    assert_eq!(&bytes, b\"Hello, World!\");\n+}\n+\n+#[test]\n+#[should_panic(expected = \"src is out of bounds\")]\n+fn test_copy_within_panics_src_too_long() {\n+    let mut bytes = *b\"Hello, World!\";\n+    // The length is only 13, so 14 is out of bounds.\n+    bytes.copy_within(10..14, 0);\n+}\n+\n+#[test]\n+#[should_panic(expected = \"dest is out of bounds\")]\n+fn test_copy_within_panics_dest_too_long() {\n+    let mut bytes = *b\"Hello, World!\";\n+    // The length is only 13, so a slice of length 4 starting at index 10 is out of bounds.\n+    bytes.copy_within(0..4, 10);\n+}\n+#[test]\n+#[should_panic(expected = \"src end is before src start\")]\n+fn test_copy_within_panics_src_inverted() {\n+    let mut bytes = *b\"Hello, World!\";\n+    // 2 is greater than 1, so this range is invalid.\n+    bytes.copy_within(2..1, 0);\n+}"}]}