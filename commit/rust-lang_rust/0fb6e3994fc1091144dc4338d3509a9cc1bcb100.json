{"sha": "0fb6e3994fc1091144dc4338d3509a9cc1bcb100", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYjZlMzk5NGZjMTA5MTE0NGRjNDMzOGQzNTA5YTljYzFiY2IxMDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-03T04:08:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-03T04:08:02Z"}, "message": "Auto merge of #51564 - SimonSapin:try-int, r=alexcrichton\n\nImplement always-fallible TryFrom for usize/isize conversions that are infallible on some platforms\n\nThis reverts commit 837d6c70233715a0ae8e15c703d40e3046a2f36a \"Remove TryFrom impls that might become conditionally-infallible with a portability lint\".\n\nThis fixes #49415 by adding (restoring) missing `TryFrom` impls for integer conversions to or from `usize` or `isize`, by making them always fallible at the type system level (that is, with `Error=TryFromIntError`) even though they happen to be infallible on some platforms (for some values of `size_of::<usize>()`).\n\nThey had been removed to allow the possibility to conditionally having some of them be infallible `From` impls instead, depending on the platforms, and have the [portability lint](https://github.com/rust-lang/rfcs/pull/1868) warn when they are used in code that is not already opting into non-portability. For example `#[allow(some_lint)] usize::from(x: u64)` would be valid on code that only targets 64-bit platforms.\n\nThis PR gives up on this possiblity for two reasons:\n\n* Based on discussion with @aturon, it seems that the portability lint is not happening any time soon. It\u2019s better to have the conversions be available *at all* than keep blocking them for so long. Portability-lint-gated platform-specific APIs can always be added separately later.\n\n* For code that is fine with fallibility, the alternative would force it to opt into \"non-portability\" even though there would be no real portability issue.", "tree": {"sha": "1a192936e8f76ff1ee2b405adcfe8d7bb81fe7f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a192936e8f76ff1ee2b405adcfe8d7bb81fe7f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fb6e3994fc1091144dc4338d3509a9cc1bcb100", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fb6e3994fc1091144dc4338d3509a9cc1bcb100", "html_url": "https://github.com/rust-lang/rust/commit/0fb6e3994fc1091144dc4338d3509a9cc1bcb100", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fb6e3994fc1091144dc4338d3509a9cc1bcb100/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81d5c3e78374df15c40f463cef27918a80f3b234", "url": "https://api.github.com/repos/rust-lang/rust/commits/81d5c3e78374df15c40f463cef27918a80f3b234", "html_url": "https://github.com/rust-lang/rust/commit/81d5c3e78374df15c40f463cef27918a80f3b234"}, {"sha": "e7c122c5b58d4db2262b1f4325d9fe82d1423ad8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c122c5b58d4db2262b1f4325d9fe82d1423ad8", "html_url": "https://github.com/rust-lang/rust/commit/e7c122c5b58d4db2262b1f4325d9fe82d1423ad8"}], "stats": {"total": 292, "additions": 191, "deletions": 101}, "files": [{"sha": "0b279f66b88d6e31ef5e7aa038bac239eb6369c9", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 2, "deletions": 73, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/0fb6e3994fc1091144dc4338d3509a9cc1bcb100/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb6e3994fc1091144dc4338d3509a9cc1bcb100/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=0fb6e3994fc1091144dc4338d3509a9cc1bcb100", "patch": "@@ -91,7 +91,7 @@ macro_rules! step_impl_unsigned {\n             #[inline]\n             #[allow(unreachable_patterns)]\n             fn add_usize(&self, n: usize) -> Option<Self> {\n-                match <$t>::private_try_from(n) {\n+                match <$t>::try_from(n) {\n                     Ok(n_as_t) => self.checked_add(n_as_t),\n                     Err(_) => None,\n                 }\n@@ -123,7 +123,7 @@ macro_rules! step_impl_signed {\n             #[inline]\n             #[allow(unreachable_patterns)]\n             fn add_usize(&self, n: usize) -> Option<Self> {\n-                match <$unsigned>::private_try_from(n) {\n+                match <$unsigned>::try_from(n) {\n                     Ok(n_as_unsigned) => {\n                         // Wrapping in unsigned space handles cases like\n                         // `-120_i8.add_usize(200) == Some(80_i8)`,\n@@ -461,74 +461,3 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<A: Step> FusedIterator for ops::RangeInclusive<A> {}\n-\n-/// Compensate removal of some impls per\n-/// https://github.com/rust-lang/rust/pull/49305#issuecomment-376293243\n-trait PrivateTryFromUsize: Sized {\n-    fn private_try_from(n: usize) -> Result<Self, ()>;\n-}\n-\n-impl<T> PrivateTryFromUsize for T where T: TryFrom<usize> {\n-    #[inline]\n-    fn private_try_from(n: usize) -> Result<Self, ()> {\n-        T::try_from(n).map_err(|_| ())\n-    }\n-}\n-\n-// no possible bounds violation\n-macro_rules! try_from_unbounded {\n-    ($($target:ty),*) => {$(\n-        impl PrivateTryFromUsize for $target {\n-            #[inline]\n-            fn private_try_from(value: usize) -> Result<Self, ()> {\n-                Ok(value as $target)\n-            }\n-        }\n-    )*}\n-}\n-\n-// unsigned to signed (only positive bound)\n-#[cfg(any(target_pointer_width = \"32\", target_pointer_width = \"64\"))]\n-macro_rules! try_from_upper_bounded {\n-    ($($target:ty),*) => {$(\n-        impl PrivateTryFromUsize for $target {\n-            #[inline]\n-            fn private_try_from(u: usize) -> Result<$target, ()> {\n-                if u > (<$target>::max_value() as usize) {\n-                    Err(())\n-                } else {\n-                    Ok(u as $target)\n-                }\n-            }\n-        }\n-    )*}\n-}\n-\n-\n-#[cfg(target_pointer_width = \"16\")]\n-mod ptr_try_from_impls {\n-    use super::PrivateTryFromUsize;\n-\n-    try_from_unbounded!(u16, u32, u64, u128);\n-    try_from_unbounded!(i32, i64, i128);\n-}\n-\n-#[cfg(target_pointer_width = \"32\")]\n-mod ptr_try_from_impls {\n-    use super::PrivateTryFromUsize;\n-\n-    try_from_upper_bounded!(u16);\n-    try_from_unbounded!(u32, u64, u128);\n-    try_from_upper_bounded!(i32);\n-    try_from_unbounded!(i64, i128);\n-}\n-\n-#[cfg(target_pointer_width = \"64\")]\n-mod ptr_try_from_impls {\n-    use super::PrivateTryFromUsize;\n-\n-    try_from_upper_bounded!(u16, u32);\n-    try_from_unbounded!(u64, u128);\n-    try_from_upper_bounded!(i32, i64);\n-    try_from_unbounded!(i128);\n-}"}, {"sha": "260ebabf1fa4ad1dbab1cbf912bc60a96d6051b4", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 60, "deletions": 10, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/0fb6e3994fc1091144dc4338d3509a9cc1bcb100/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb6e3994fc1091144dc4338d3509a9cc1bcb100/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=0fb6e3994fc1091144dc4338d3509a9cc1bcb100", "patch": "@@ -4213,6 +4213,21 @@ impl From<!> for TryFromIntError {\n     }\n }\n \n+// no possible bounds violation\n+macro_rules! try_from_unbounded {\n+    ($source:ty, $($target:ty),*) => {$(\n+        #[unstable(feature = \"try_from\", issue = \"33417\")]\n+        impl TryFrom<$source> for $target {\n+            type Error = TryFromIntError;\n+\n+            #[inline]\n+            fn try_from(value: $source) -> Result<Self, Self::Error> {\n+                Ok(value as $target)\n+            }\n+        }\n+    )*}\n+}\n+\n // only negative bounds\n macro_rules! try_from_lower_bounded {\n     ($source:ty, $($target:ty),*) => {$(\n@@ -4311,44 +4326,79 @@ try_from_both_bounded!(i128, u64, u32, u16, u8);\n try_from_upper_bounded!(usize, isize);\n try_from_lower_bounded!(isize, usize);\n \n-try_from_upper_bounded!(usize, u8);\n-try_from_upper_bounded!(usize, i8, i16);\n-try_from_both_bounded!(isize, u8);\n-try_from_both_bounded!(isize, i8);\n-\n #[cfg(target_pointer_width = \"16\")]\n mod ptr_try_from_impls {\n     use super::TryFromIntError;\n     use convert::TryFrom;\n \n-    // Fallible across platfoms, only implementation differs\n+    try_from_upper_bounded!(usize, u8);\n+    try_from_unbounded!(usize, u16, u32, u64, u128);\n+    try_from_upper_bounded!(usize, i8, i16);\n+    try_from_unbounded!(usize, i32, i64, i128);\n+\n+    try_from_both_bounded!(isize, u8);\n     try_from_lower_bounded!(isize, u16, u32, u64, u128);\n+    try_from_both_bounded!(isize, i8);\n+    try_from_unbounded!(isize, i16, i32, i64, i128);\n+\n+    rev!(try_from_upper_bounded, usize, u32, u64, u128);\n     rev!(try_from_lower_bounded, usize, i8, i16);\n     rev!(try_from_both_bounded, usize, i32, i64, i128);\n+\n+    rev!(try_from_upper_bounded, isize, u16, u32, u64, u128);\n+    rev!(try_from_both_bounded, isize, i32, i64, i128);\n }\n \n #[cfg(target_pointer_width = \"32\")]\n mod ptr_try_from_impls {\n     use super::TryFromIntError;\n     use convert::TryFrom;\n \n-    // Fallible across platfoms, only implementation differs\n-    try_from_both_bounded!(isize, u16);\n+    try_from_upper_bounded!(usize, u8, u16);\n+    try_from_unbounded!(usize, u32, u64, u128);\n+    try_from_upper_bounded!(usize, i8, i16, i32);\n+    try_from_unbounded!(usize, i64, i128);\n+\n+    try_from_both_bounded!(isize, u8, u16);\n     try_from_lower_bounded!(isize, u32, u64, u128);\n+    try_from_both_bounded!(isize, i8, i16);\n+    try_from_unbounded!(isize, i32, i64, i128);\n+\n+    rev!(try_from_unbounded, usize, u32);\n+    rev!(try_from_upper_bounded, usize, u64, u128);\n     rev!(try_from_lower_bounded, usize, i8, i16, i32);\n     rev!(try_from_both_bounded, usize, i64, i128);\n+\n+    rev!(try_from_unbounded, isize, u16);\n+    rev!(try_from_upper_bounded, isize, u32, u64, u128);\n+    rev!(try_from_unbounded, isize, i32);\n+    rev!(try_from_both_bounded, isize, i64, i128);\n }\n \n #[cfg(target_pointer_width = \"64\")]\n mod ptr_try_from_impls {\n     use super::TryFromIntError;\n     use convert::TryFrom;\n \n-    // Fallible across platfoms, only implementation differs\n-    try_from_both_bounded!(isize, u16, u32);\n+    try_from_upper_bounded!(usize, u8, u16, u32);\n+    try_from_unbounded!(usize, u64, u128);\n+    try_from_upper_bounded!(usize, i8, i16, i32, i64);\n+    try_from_unbounded!(usize, i128);\n+\n+    try_from_both_bounded!(isize, u8, u16, u32);\n     try_from_lower_bounded!(isize, u64, u128);\n+    try_from_both_bounded!(isize, i8, i16, i32);\n+    try_from_unbounded!(isize, i64, i128);\n+\n+    rev!(try_from_unbounded, usize, u32, u64);\n+    rev!(try_from_upper_bounded, usize, u128);\n     rev!(try_from_lower_bounded, usize, i8, i16, i32, i64);\n     rev!(try_from_both_bounded, usize, i128);\n+\n+    rev!(try_from_unbounded, isize, u16, u32);\n+    rev!(try_from_upper_bounded, isize, u64, u128);\n+    rev!(try_from_unbounded, isize, i32, i64);\n+    rev!(try_from_both_bounded, isize, i128);\n }\n \n #[doc(hidden)]"}, {"sha": "ab96d3126bb22f003829dec2ad19d7f1a9a92711", "filename": "src/libcore/tests/num/mod.rs", "status": "modified", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/0fb6e3994fc1091144dc4338d3509a9cc1bcb100/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb6e3994fc1091144dc4338d3509a9cc1bcb100/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs?ref=0fb6e3994fc1091144dc4338d3509a9cc1bcb100", "patch": "@@ -37,6 +37,15 @@ mod flt2dec;\n mod dec2flt;\n mod bignum;\n \n+\n+/// Adds the attribute to all items in the block.\n+macro_rules! cfg_block {\n+    ($(#[$attr:meta]{$($it:item)*})*) => {$($(\n+        #[$attr]\n+        $it\n+    )*)*}\n+}\n+\n /// Groups items that assume the pointer width is either 16/32/64, and has to be altered if\n /// support for larger/smaller pointer widths are added in the future.\n macro_rules! assume_usize_width {\n@@ -330,6 +339,42 @@ assume_usize_width! {\n \n     test_impl_try_from_always_ok! { test_try_u16usize, u16, usize }\n     test_impl_try_from_always_ok! { test_try_i16isize, i16, isize }\n+\n+    test_impl_try_from_always_ok! { test_try_usizeu64, usize, u64 }\n+    test_impl_try_from_always_ok! { test_try_usizeu128, usize, u128 }\n+    test_impl_try_from_always_ok! { test_try_usizei128, usize, i128 }\n+\n+    test_impl_try_from_always_ok! { test_try_isizei64, isize, i64 }\n+    test_impl_try_from_always_ok! { test_try_isizei128, isize, i128 }\n+\n+    cfg_block!(\n+        #[cfg(target_pointer_width = \"16\")] {\n+            test_impl_try_from_always_ok! { test_try_usizeu16, usize, u16 }\n+            test_impl_try_from_always_ok! { test_try_isizei16, isize, i16 }\n+            test_impl_try_from_always_ok! { test_try_usizeu32, usize, u32 }\n+            test_impl_try_from_always_ok! { test_try_usizei32, usize, i32 }\n+            test_impl_try_from_always_ok! { test_try_isizei32, isize, i32 }\n+            test_impl_try_from_always_ok! { test_try_usizei64, usize, i64 }\n+        }\n+\n+        #[cfg(target_pointer_width = \"32\")] {\n+            test_impl_try_from_always_ok! { test_try_u16isize, u16, isize }\n+            test_impl_try_from_always_ok! { test_try_usizeu32, usize, u32 }\n+            test_impl_try_from_always_ok! { test_try_isizei32, isize, i32 }\n+            test_impl_try_from_always_ok! { test_try_u32usize, u32, usize }\n+            test_impl_try_from_always_ok! { test_try_i32isize, i32, isize }\n+            test_impl_try_from_always_ok! { test_try_usizei64, usize, i64 }\n+        }\n+\n+        #[cfg(target_pointer_width = \"64\")] {\n+            test_impl_try_from_always_ok! { test_try_u16isize, u16, isize }\n+            test_impl_try_from_always_ok! { test_try_u32usize, u32, usize }\n+            test_impl_try_from_always_ok! { test_try_u32isize, u32, isize }\n+            test_impl_try_from_always_ok! { test_try_i32isize, i32, isize }\n+            test_impl_try_from_always_ok! { test_try_u64usize, u64, usize }\n+            test_impl_try_from_always_ok! { test_try_i64isize, i64, isize }\n+        }\n+    );\n }\n \n /// Conversions where max of $source can be represented as $target,\n@@ -378,6 +423,24 @@ assume_usize_width! {\n     test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_isizeu64, isize, u64 }\n     test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_isizeu128, isize, u128 }\n     test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_isizeusize, isize, usize }\n+\n+    cfg_block!(\n+        #[cfg(target_pointer_width = \"16\")] {\n+            test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_isizeu16, isize, u16 }\n+            test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_isizeu32, isize, u32 }\n+        }\n+\n+        #[cfg(target_pointer_width = \"32\")] {\n+            test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_isizeu32, isize, u32 }\n+\n+            test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_i32usize, i32, usize }\n+        }\n+\n+        #[cfg(target_pointer_width = \"64\")] {\n+            test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_i32usize, i32, usize }\n+            test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_i64usize, i64, usize }\n+        }\n+    );\n }\n \n /// Conversions where max of $source can not be represented as $target,\n@@ -419,9 +482,29 @@ test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u128i64, u128, i64 }\n test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u128i128, u128, i128 }\n \n assume_usize_width! {\n+    test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u64isize, u64, isize }\n+    test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u128isize, u128, isize }\n+\n     test_impl_try_from_unsigned_to_signed_upper_err! { test_try_usizei8, usize, i8 }\n     test_impl_try_from_unsigned_to_signed_upper_err! { test_try_usizei16, usize, i16 }\n     test_impl_try_from_unsigned_to_signed_upper_err! { test_try_usizeisize, usize, isize }\n+\n+    cfg_block!(\n+        #[cfg(target_pointer_width = \"16\")] {\n+            test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u16isize, u16, isize }\n+            test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u32isize, u32, isize }\n+        }\n+\n+        #[cfg(target_pointer_width = \"32\")] {\n+            test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u32isize, u32, isize }\n+            test_impl_try_from_unsigned_to_signed_upper_err! { test_try_usizei32, usize, i32 }\n+        }\n+\n+        #[cfg(target_pointer_width = \"64\")] {\n+            test_impl_try_from_unsigned_to_signed_upper_err! { test_try_usizei32, usize, i32 }\n+            test_impl_try_from_unsigned_to_signed_upper_err! { test_try_usizei64, usize, i64 }\n+        }\n+    );\n }\n \n /// Conversions where min/max of $source can not be represented as $target.\n@@ -481,6 +564,34 @@ test_impl_try_from_same_sign_err! { test_try_i128i64, i128, i64 }\n \n assume_usize_width! {\n     test_impl_try_from_same_sign_err! { test_try_usizeu8, usize, u8 }\n+    test_impl_try_from_same_sign_err! { test_try_u128usize, u128, usize }\n+    test_impl_try_from_same_sign_err! { test_try_i128isize, i128, isize }\n+\n+    cfg_block!(\n+        #[cfg(target_pointer_width = \"16\")] {\n+            test_impl_try_from_same_sign_err! { test_try_u32usize, u32, usize }\n+            test_impl_try_from_same_sign_err! { test_try_u64usize, u64, usize }\n+\n+            test_impl_try_from_same_sign_err! { test_try_i32isize, i32, isize }\n+            test_impl_try_from_same_sign_err! { test_try_i64isize, i64, isize }\n+        }\n+\n+        #[cfg(target_pointer_width = \"32\")] {\n+            test_impl_try_from_same_sign_err! { test_try_u64usize, u64, usize }\n+            test_impl_try_from_same_sign_err! { test_try_usizeu16, usize, u16 }\n+\n+            test_impl_try_from_same_sign_err! { test_try_i64isize, i64, isize }\n+            test_impl_try_from_same_sign_err! { test_try_isizei16, isize, i16 }\n+        }\n+\n+        #[cfg(target_pointer_width = \"64\")] {\n+            test_impl_try_from_same_sign_err! { test_try_usizeu16, usize, u16 }\n+            test_impl_try_from_same_sign_err! { test_try_usizeu32, usize, u32 }\n+\n+            test_impl_try_from_same_sign_err! { test_try_isizei16, isize, i16 }\n+            test_impl_try_from_same_sign_err! { test_try_isizei32, isize, i32 }\n+        }\n+    );\n }\n \n /// Conversions where neither the min nor the max of $source can be represented by\n@@ -525,6 +636,22 @@ test_impl_try_from_signed_to_unsigned_err! { test_try_i128u64, i128, u64 }\n assume_usize_width! {\n     test_impl_try_from_signed_to_unsigned_err! { test_try_isizeu8, isize, u8 }\n     test_impl_try_from_signed_to_unsigned_err! { test_try_i128usize, i128, usize }\n+\n+    cfg_block! {\n+        #[cfg(target_pointer_width = \"16\")] {\n+            test_impl_try_from_signed_to_unsigned_err! { test_try_i32usize, i32, usize }\n+            test_impl_try_from_signed_to_unsigned_err! { test_try_i64usize, i64, usize }\n+        }\n+        #[cfg(target_pointer_width = \"32\")] {\n+            test_impl_try_from_signed_to_unsigned_err! { test_try_i64usize, i64, usize }\n+\n+            test_impl_try_from_signed_to_unsigned_err! { test_try_isizeu16, isize, u16 }\n+        }\n+        #[cfg(target_pointer_width = \"64\")] {\n+            test_impl_try_from_signed_to_unsigned_err! { test_try_isizeu16, isize, u16 }\n+            test_impl_try_from_signed_to_unsigned_err! { test_try_isizeu32, isize, u32 }\n+        }\n+    }\n }\n \n macro_rules! test_float {"}, {"sha": "aadd33b39542cb3ef908c2066046b01cab06b93e", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0fb6e3994fc1091144dc4338d3509a9cc1bcb100/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb6e3994fc1091144dc4338d3509a9cc1bcb100/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=0fb6e3994fc1091144dc4338d3509a9cc1bcb100", "patch": "@@ -10,6 +10,7 @@\n \n use io::prelude::*;\n \n+use core::convert::TryInto;\n use cmp;\n use io::{self, Initializer, SeekFrom, Error, ErrorKind};\n \n@@ -259,26 +260,9 @@ fn slice_write(pos_mut: &mut u64, slice: &mut [u8], buf: &[u8]) -> io::Result<us\n     Ok(amt)\n }\n \n-/// Compensate removal of some impls per\n-/// https://github.com/rust-lang/rust/pull/49305#issuecomment-376293243\n-#[cfg(any(target_pointer_width = \"16\",\n-          target_pointer_width = \"32\"))]\n-fn try_into(n: u64) -> Result<usize, ()> {\n-    if n <= (<usize>::max_value() as u64) {\n-        Ok(n as usize)\n-    } else {\n-        Err(())\n-    }\n-}\n-\n-#[cfg(any(target_pointer_width = \"64\"))]\n-fn try_into(n: u64) -> Result<usize, ()> {\n-    Ok(n as usize)\n-}\n-\n // Resizing write implementation\n fn vec_write(pos_mut: &mut u64, vec: &mut Vec<u8>, buf: &[u8]) -> io::Result<usize> {\n-    let pos: usize = try_into(*pos_mut).map_err(|_| {\n+    let pos: usize = (*pos_mut).try_into().map_err(|_| {\n         Error::new(ErrorKind::InvalidInput,\n                     \"cursor position exceeds maximum possible vector length\")\n     })?;"}]}