{"sha": "f0de294a9b6d09b9933c1a22419831ac4bc49ca9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZGUyOTRhOWI2ZDA5Yjk5MzNjMWEyMjQxOTgzMWFjNGJjNDljYTk=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-03T13:07:18Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-03T13:07:18Z"}, "message": "A handful of cleanups for rustc/mir", "tree": {"sha": "d1375aed30ab468b9f5299f9b911144362c1de0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1375aed30ab468b9f5299f9b911144362c1de0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0de294a9b6d09b9933c1a22419831ac4bc49ca9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0de294a9b6d09b9933c1a22419831ac4bc49ca9", "html_url": "https://github.com/rust-lang/rust/commit/f0de294a9b6d09b9933c1a22419831ac4bc49ca9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0de294a9b6d09b9933c1a22419831ac4bc49ca9/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cf11765dc98536c6eedf33f2df7f72f6e161263", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cf11765dc98536c6eedf33f2df7f72f6e161263", "html_url": "https://github.com/rust-lang/rust/commit/4cf11765dc98536c6eedf33f2df7f72f6e161263"}], "stats": {"total": 49, "additions": 22, "deletions": 27}, "files": [{"sha": "c81d55e69b61a124b380142c3c7cb7b99ef5f847", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0de294a9b6d09b9933c1a22419831ac4bc49ca9/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0de294a9b6d09b9933c1a22419831ac4bc49ca9/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=f0de294a9b6d09b9933c1a22419831ac4bc49ca9", "patch": "@@ -171,7 +171,7 @@ impl<'tcx> Scalar {\n     pub fn from_uint(i: impl Into<u128>, size: Size) -> Self {\n         let i = i.into();\n         debug_assert_eq!(truncate(i, size), i,\n-                    \"Unsigned value {} does not fit in {} bits\", i, size.bits());\n+                         \"Unsigned value {} does not fit in {} bits\", i, size.bits());\n         Scalar::Bits { bits: i, size: size.bytes() as u8 }\n     }\n \n@@ -181,7 +181,7 @@ impl<'tcx> Scalar {\n         // `into` performed sign extension, we have to truncate\n         let truncated = truncate(i as u128, size);\n         debug_assert_eq!(sign_extend(truncated, size) as i128, i,\n-                    \"Signed value {} does not fit in {} bits\", i, size.bits());\n+                         \"Signed value {} does not fit in {} bits\", i, size.bits());\n         Scalar::Bits { bits: truncated, size: size.bytes() as u8 }\n     }\n "}, {"sha": "fe88897a82cccbfa86f9f4dba68f7b6a77924064", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f0de294a9b6d09b9933c1a22419831ac4bc49ca9/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0de294a9b6d09b9933c1a22419831ac4bc49ca9/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=f0de294a9b6d09b9933c1a22419831ac4bc49ca9", "patch": "@@ -12,7 +12,6 @@\n //!\n //! [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/mir/index.html\n \n-use graphviz::IntoCow;\n use hir::def::CtorKind;\n use hir::def_id::DefId;\n use hir::{self, HirId, InlineAsm};\n@@ -327,22 +326,20 @@ impl<'tcx> Mir<'tcx> {\n         if idx < stmts.len() {\n             &stmts[idx].source_info\n         } else {\n-            assert!(idx == stmts.len());\n+            assert_eq!(idx, stmts.len());\n             &block.terminator().source_info\n         }\n     }\n \n     /// Check if `sub` is a sub scope of `sup`\n     pub fn is_sub_scope(&self, mut sub: SourceScope, sup: SourceScope) -> bool {\n-        loop {\n-            if sub == sup {\n-                return true;\n-            }\n+        while sub != sup {\n             match self.source_scopes[sub].parent_scope {\n                 None => return false,\n                 Some(p) => sub = p,\n             }\n         }\n+        true\n     }\n \n     /// Return the return type, it always return first element from `local_decls` array\n@@ -526,9 +523,7 @@ impl BorrowKind {\n     pub fn allows_two_phase_borrow(&self) -> bool {\n         match *self {\n             BorrowKind::Shared | BorrowKind::Shallow | BorrowKind::Unique => false,\n-            BorrowKind::Mut {\n-                allow_two_phase_borrow,\n-            } => allow_two_phase_borrow,\n+            BorrowKind::Mut { allow_two_phase_borrow } => allow_two_phase_borrow,\n         }\n     }\n }\n@@ -1551,42 +1546,42 @@ impl<'tcx> TerminatorKind<'tcx> {\n                         };\n                         fmt_const_val(&mut s, &c).unwrap();\n                         s.into()\n-                    }).chain(iter::once(String::from(\"otherwise\").into()))\n+                    }).chain(iter::once(\"otherwise\".into()))\n                     .collect()\n             }\n             Call {\n                 destination: Some(_),\n                 cleanup: Some(_),\n                 ..\n-            } => vec![\"return\".into_cow(), \"unwind\".into_cow()],\n+            } => vec![\"return\".into(), \"unwind\".into()],\n             Call {\n                 destination: Some(_),\n                 cleanup: None,\n                 ..\n-            } => vec![\"return\".into_cow()],\n+            } => vec![\"return\".into()],\n             Call {\n                 destination: None,\n                 cleanup: Some(_),\n                 ..\n-            } => vec![\"unwind\".into_cow()],\n+            } => vec![\"unwind\".into()],\n             Call {\n                 destination: None,\n                 cleanup: None,\n                 ..\n             } => vec![],\n-            Yield { drop: Some(_), .. } => vec![\"resume\".into_cow(), \"drop\".into_cow()],\n-            Yield { drop: None, .. } => vec![\"resume\".into_cow()],\n+            Yield { drop: Some(_), .. } => vec![\"resume\".into(), \"drop\".into()],\n+            Yield { drop: None, .. } => vec![\"resume\".into()],\n             DropAndReplace { unwind: None, .. } | Drop { unwind: None, .. } => {\n-                vec![\"return\".into_cow()]\n+                vec![\"return\".into()]\n             }\n             DropAndReplace {\n                 unwind: Some(_), ..\n             }\n             | Drop {\n                 unwind: Some(_), ..\n-            } => vec![\"return\".into_cow(), \"unwind\".into_cow()],\n+            } => vec![\"return\".into(), \"unwind\".into()],\n             Assert { cleanup: None, .. } => vec![\"\".into()],\n-            Assert { .. } => vec![\"success\".into_cow(), \"unwind\".into_cow()],\n+            Assert { .. } => vec![\"success\".into(), \"unwind\".into()],\n             FalseEdges {\n                 ref imaginary_targets,\n                 .."}, {"sha": "7520695a7cd90c8cc1c241ed0018be70809675a0", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0de294a9b6d09b9933c1a22419831ac4bc49ca9/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0de294a9b6d09b9933c1a22419831ac4bc49ca9/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=f0de294a9b6d09b9933c1a22419831ac4bc49ca9", "patch": "@@ -325,7 +325,7 @@ impl<'a, 'gcx: 'tcx, 'tcx: 'a> CodegenUnitNameBuilder<'a, 'gcx, 'tcx> {\n                 String::new()\n             };\n \n-            let crate_disambiguator = format!(\"{}\", tcx.crate_disambiguator(cnum));\n+            let crate_disambiguator = tcx.crate_disambiguator(cnum).to_string();\n             // Using a shortened disambiguator of about 40 bits\n             format!(\"{}.{}{}\",\n                 tcx.crate_name(cnum),"}, {"sha": "fc7b4862b0ae5d0d927962e78c2a332367079e5e", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0de294a9b6d09b9933c1a22419831ac4bc49ca9/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0de294a9b6d09b9933c1a22419831ac4bc49ca9/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=f0de294a9b6d09b9933c1a22419831ac4bc49ca9", "patch": "@@ -87,8 +87,8 @@ impl<'a, 'gcx, 'tcx> PlaceTy<'tcx> {\n                         assert!(index < adt_def.variants.len());\n                         assert_eq!(adt_def, adt_def1);\n                         PlaceTy::Downcast { adt_def,\n-                                             substs,\n-                                             variant_index: index }\n+                                            substs,\n+                                            variant_index: index }\n                     }\n                     _ => {\n                         bug!(\"cannot downcast non-ADT type: `{:?}`\", self)\n@@ -151,7 +151,7 @@ impl<'tcx> Place<'tcx> {\n                     }\n                 },\n                 _ => None,\n-            }\f\n+            }\n             _ => None,\n         }\n     }\n@@ -255,9 +255,9 @@ impl<'tcx> Operand<'tcx> {\n \n impl<'tcx> BinOp {\n       pub fn ty<'a, 'gcx>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                    lhs_ty: Ty<'tcx>,\n-                    rhs_ty: Ty<'tcx>)\n-                    -> Ty<'tcx> {\n+                          lhs_ty: Ty<'tcx>,\n+                          rhs_ty: Ty<'tcx>)\n+                          -> Ty<'tcx> {\n         // FIXME: handle SIMD correctly\n         match self {\n             &BinOp::Add | &BinOp::Sub | &BinOp::Mul | &BinOp::Div | &BinOp::Rem |"}]}