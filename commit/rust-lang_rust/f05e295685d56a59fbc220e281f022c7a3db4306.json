{"sha": "f05e295685d56a59fbc220e281f022c7a3db4306", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNWUyOTU2ODVkNTZhNTlmYmMyMjBlMjgxZjAyMmM3YTNkYjQzMDY=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-07-21T10:52:14Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-07-21T10:52:14Z"}, "message": "Fix breakage due to rust-lang/rust#60913", "tree": {"sha": "d2449b985330c7f20b67d29084d6df1a5cac87f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2449b985330c7f20b67d29084d6df1a5cac87f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f05e295685d56a59fbc220e281f022c7a3db4306", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f05e295685d56a59fbc220e281f022c7a3db4306", "html_url": "https://github.com/rust-lang/rust/commit/f05e295685d56a59fbc220e281f022c7a3db4306", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f05e295685d56a59fbc220e281f022c7a3db4306/comments", "author": null, "committer": null, "parents": [{"sha": "67db88f6450401b3333e9d92a06420a8504a847d", "url": "https://api.github.com/repos/rust-lang/rust/commits/67db88f6450401b3333e9d92a06420a8504a847d", "html_url": "https://github.com/rust-lang/rust/commit/67db88f6450401b3333e9d92a06420a8504a847d"}], "stats": {"total": 46, "additions": 30, "deletions": 16}, "files": [{"sha": "6d90d315f00544b7962ccec7b9eca60697fce20b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f05e295685d56a59fbc220e281f022c7a3db4306/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05e295685d56a59fbc220e281f022c7a3db4306/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f05e295685d56a59fbc220e281f022c7a3db4306", "patch": "@@ -1,6 +1,7 @@\n // error-pattern:cargo-clippy\n \n #![feature(box_syntax)]\n+#![feature(box_patterns)]\n #![feature(never_type)]\n #![feature(rustc_private)]\n #![feature(slice_patterns)]"}, {"sha": "d24a20b079d1d64c683f63f2fc0e23417cae6531", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 29, "deletions": 16, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f05e295685d56a59fbc220e281f022c7a3db4306/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05e295685d56a59fbc220e281f022c7a3db4306/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=f05e295685d56a59fbc220e281f022c7a3db4306", "patch": "@@ -132,7 +132,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                 let pred_arg = if_chain! {\n                     if let Some((pred_fn_def_id, pred_arg, pred_arg_ty, Some(res))) =\n                         is_call_with_ref_arg(cx, mir, &pred_terminator.kind);\n-                    if *res == mir::Place::Base(mir::PlaceBase::Local(cloned));\n+                    if res.base == mir::PlaceBase::Local(cloned);\n                     if match_def_path(cx, pred_fn_def_id, &paths::DEREF_TRAIT_METHOD);\n                     if match_type(cx, pred_arg_ty, &paths::PATH_BUF)\n                         || match_type(cx, pred_arg_ty, &paths::OS_STRING);\n@@ -218,7 +218,7 @@ fn is_call_with_ref_arg<'tcx>(\n     if_chain! {\n         if let TerminatorKind::Call { func, args, destination, .. } = kind;\n         if args.len() == 1;\n-        if let mir::Operand::Move(mir::Place::Base(mir::PlaceBase::Local(local))) = &args[0];\n+        if let mir::Operand::Move(mir::Place { base: mir::PlaceBase::Local(local), .. }) = &args[0];\n         if let ty::FnDef(def_id, _) = func.ty(&*mir, cx.tcx).sty;\n         if let (inner_ty, 1) = walk_ptrs_ty_depth(args[0].ty(&*mir, cx.tcx));\n         if !is_copy(cx, inner_ty);\n@@ -244,7 +244,14 @@ fn find_stmt_assigns_to<'a, 'tcx: 'a>(\n     stmts\n         .rev()\n         .find_map(|stmt| {\n-            if let mir::StatementKind::Assign(mir::Place::Base(mir::PlaceBase::Local(local)), v) = &stmt.kind {\n+            if let mir::StatementKind::Assign(\n+                mir::Place {\n+                    base: mir::PlaceBase::Local(local),\n+                    ..\n+                },\n+                v,\n+            ) = &stmt.kind\n+            {\n                 if *local == to {\n                     return Some(v);\n                 }\n@@ -271,28 +278,34 @@ fn find_stmt_assigns_to<'a, 'tcx: 'a>(\n fn base_local_and_movability<'tcx>(\n     cx: &LateContext<'_, 'tcx>,\n     mir: &mir::Body<'tcx>,\n-    mut place: &mir::Place<'tcx>,\n+    place: &mir::Place<'tcx>,\n ) -> Option<(mir::Local, CannotMoveOut)> {\n-    use rustc::mir::Place::*;\n+    use rustc::mir::Place;\n     use rustc::mir::PlaceBase;\n+    use rustc::mir::PlaceRef;\n+    use rustc::mir::Projection;\n \n     // Dereference. You cannot move things out from a borrowed value.\n     let mut deref = false;\n     // Accessing a field of an ADT that has `Drop`. Moving the field out will cause E0509.\n     let mut field = false;\n \n-    loop {\n-        match place {\n-            Base(PlaceBase::Local(local)) => return Some((*local, deref || field)),\n-            Projection(proj) => {\n-                place = &proj.base;\n-                deref = deref || matches!(proj.elem, mir::ProjectionElem::Deref);\n-                if !field && matches!(proj.elem, mir::ProjectionElem::Field(..)) {\n-                    field = has_drop(cx, place.ty(&mir.local_decls, cx.tcx).ty);\n-                }\n-            },\n-            _ => return None,\n+    let PlaceRef {\n+        base: place_base,\n+        mut projection,\n+    } = place.as_place_ref();\n+    if let PlaceBase::Local(local) = place_base {\n+        while let Some(box Projection { base, elem }) = projection {\n+            projection = base;\n+            deref = matches!(elem, mir::ProjectionElem::Deref);\n+            field = !field\n+                && matches!(elem, mir::ProjectionElem::Field(..))\n+                && has_drop(cx, Place::ty_from(place_base, projection, &mir.local_decls, cx.tcx).ty);\n         }\n+\n+        Some((*local, deref || field))\n+    } else {\n+        None\n     }\n }\n "}]}