{"sha": "e6bb00fff51185f3d417b73bf32541b62e7c54db", "node_id": "C_kwDOAAsO6NoAKGU2YmIwMGZmZjUxMTg1ZjNkNDE3YjczYmYzMjU0MWI2MmU3YzU0ZGI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-01T14:49:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-01T14:49:33Z"}, "message": "Rollup merge of #100003 - nnethercote:improve-size-assertions, r=lqd\n\nImprove size assertions.\n\n- For any file with four or more size assertions, move them into a\n  separate module (as is already done for `hir.rs`).\n- Add some more for AST nodes and THIR nodes.\n- Put the `hir.rs` ones in alphabetical order.\n\nr? `@lqd`", "tree": {"sha": "211b65ea10561ef4270d7bec40716803cd3c226c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/211b65ea10561ef4270d7bec40716803cd3c226c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6bb00fff51185f3d417b73bf32541b62e7c54db", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi5+f+CRBK7hj4Ov3rIwAArOIIAJP75W97zoKshifMN5PmsChx\nvu2AUHvSoiJEnQ2rukDzq96jK5np5EabrDsKTUf4kAfa1DsGnPTIfSsHEhLZgv9J\nPKyuAGgRWO9f5tIL6YQwjevMtn34uIKlrXvkWQsYZDDfWE2abCxiGZnPDlX5nfS7\nijkqf2nPjyMSPS1By40aJtayXzdGgz2HRm9sod1xHFM+bDdpobhFchvEg4IS6bup\nSU8ggWXn7QEQX/1kFVifXuvkgr+ElZS2p667tyCS8yNnsxVYlR7tyYiW3xsEtQbE\n3T104/iQsRRu6S7JjQy9bIMIJ48bQbN4eqST0FucyRSdMJr4ag/PUoWeDMi90XU=\n=Cpp3\n-----END PGP SIGNATURE-----\n", "payload": "tree 211b65ea10561ef4270d7bec40716803cd3c226c\nparent 1fa02dd3e958dad25d667fab2037d7a6d4ab3b37\nparent 9037ebba0c243e5415879a2ef20736b71a453fa6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659365373 +0200\ncommitter GitHub <noreply@github.com> 1659365373 +0200\n\nRollup merge of #100003 - nnethercote:improve-size-assertions, r=lqd\n\nImprove size assertions.\n\n- For any file with four or more size assertions, move them into a\n  separate module (as is already done for `hir.rs`).\n- Add some more for AST nodes and THIR nodes.\n- Put the `hir.rs` ones in alphabetical order.\n\nr? `@lqd`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6bb00fff51185f3d417b73bf32541b62e7c54db", "html_url": "https://github.com/rust-lang/rust/commit/e6bb00fff51185f3d417b73bf32541b62e7c54db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6bb00fff51185f3d417b73bf32541b62e7c54db/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fa02dd3e958dad25d667fab2037d7a6d4ab3b37", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fa02dd3e958dad25d667fab2037d7a6d4ab3b37", "html_url": "https://github.com/rust-lang/rust/commit/1fa02dd3e958dad25d667fab2037d7a6d4ab3b37"}, {"sha": "9037ebba0c243e5415879a2ef20736b71a453fa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9037ebba0c243e5415879a2ef20736b71a453fa6", "html_url": "https://github.com/rust-lang/rust/commit/9037ebba0c243e5415879a2ef20736b71a453fa6"}], "stats": {"total": 213, "additions": 100, "deletions": 113}, "files": [{"sha": "116497109f1ddb0bcd0740db3702f8281fea94ae", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e6bb00fff51185f3d417b73bf32541b62e7c54db/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6bb00fff51185f3d417b73bf32541b62e7c54db/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=e6bb00fff51185f3d417b73bf32541b62e7c54db", "patch": "@@ -1111,10 +1111,6 @@ pub struct Expr {\n     pub tokens: Option<LazyTokenStream>,\n }\n \n-// `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Expr, 104);\n-\n impl Expr {\n     /// Returns `true` if this expression would be valid somewhere that expects a value;\n     /// for example, an `if` condition.\n@@ -2883,9 +2879,6 @@ pub enum ItemKind {\n     MacroDef(MacroDef),\n }\n \n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(ItemKind, 112);\n-\n impl ItemKind {\n     pub fn article(&self) -> &str {\n         use ItemKind::*;\n@@ -2957,9 +2950,6 @@ pub enum AssocItemKind {\n     MacCall(MacCall),\n }\n \n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(AssocItemKind, 72);\n-\n impl AssocItemKind {\n     pub fn defaultness(&self) -> Defaultness {\n         match *self {\n@@ -3009,9 +2999,6 @@ pub enum ForeignItemKind {\n     MacCall(MacCall),\n }\n \n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(ForeignItemKind, 72);\n-\n impl From<ForeignItemKind> for ItemKind {\n     fn from(foreign_item_kind: ForeignItemKind) -> ItemKind {\n         match foreign_item_kind {\n@@ -3038,3 +3025,27 @@ impl TryFrom<ItemKind> for ForeignItemKind {\n }\n \n pub type ForeignItem = Item<ForeignItemKind>;\n+\n+// Some nodes are used a lot. Make sure they don't unintentionally get bigger.\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+mod size_asserts {\n+    use super::*;\n+    // These are in alphabetical order, which is easy to maintain.\n+    rustc_data_structures::static_assert_size!(AssocItemKind, 72);\n+    rustc_data_structures::static_assert_size!(Attribute, 152);\n+    rustc_data_structures::static_assert_size!(Block, 48);\n+    rustc_data_structures::static_assert_size!(Expr, 104);\n+    rustc_data_structures::static_assert_size!(Fn, 192);\n+    rustc_data_structures::static_assert_size!(ForeignItemKind, 72);\n+    rustc_data_structures::static_assert_size!(GenericBound, 88);\n+    rustc_data_structures::static_assert_size!(Generics, 72);\n+    rustc_data_structures::static_assert_size!(Impl, 200);\n+    rustc_data_structures::static_assert_size!(Item, 200);\n+    rustc_data_structures::static_assert_size!(ItemKind, 112);\n+    rustc_data_structures::static_assert_size!(Lit, 48);\n+    rustc_data_structures::static_assert_size!(Pat, 120);\n+    rustc_data_structures::static_assert_size!(Path, 40);\n+    rustc_data_structures::static_assert_size!(PathSegment, 24);\n+    rustc_data_structures::static_assert_size!(Stmt, 32);\n+    rustc_data_structures::static_assert_size!(Ty, 96);\n+}"}, {"sha": "94ba62c160c989e897c2bc534c1948dcca0e5fe6", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e6bb00fff51185f3d417b73bf32541b62e7c54db/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6bb00fff51185f3d417b73bf32541b62e7c54db/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=e6bb00fff51185f3d417b73bf32541b62e7c54db", "patch": "@@ -37,9 +37,6 @@ pub enum Immediate<Prov: Provenance = AllocId> {\n     Uninit,\n }\n \n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Immediate, 56);\n-\n impl<Prov: Provenance> From<ScalarMaybeUninit<Prov>> for Immediate<Prov> {\n     #[inline(always)]\n     fn from(val: ScalarMaybeUninit<Prov>) -> Self {\n@@ -117,9 +114,6 @@ pub struct ImmTy<'tcx, Prov: Provenance = AllocId> {\n     pub layout: TyAndLayout<'tcx>,\n }\n \n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(ImmTy<'_>, 72);\n-\n impl<Prov: Provenance> std::fmt::Display for ImmTy<'_, Prov> {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         /// Helper function for printing a scalar to a FmtPrinter\n@@ -187,9 +181,6 @@ pub enum Operand<Prov: Provenance = AllocId> {\n     Indirect(MemPlace<Prov>),\n }\n \n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Operand, 64);\n-\n #[derive(Clone, Debug)]\n pub struct OpTy<'tcx, Prov: Provenance = AllocId> {\n     op: Operand<Prov>, // Keep this private; it helps enforce invariants.\n@@ -204,9 +195,6 @@ pub struct OpTy<'tcx, Prov: Provenance = AllocId> {\n     pub align: Option<Align>,\n }\n \n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(OpTy<'_>, 88);\n-\n impl<'tcx, Prov: Provenance> std::ops::Deref for OpTy<'tcx, Prov> {\n     type Target = Operand<Prov>;\n     #[inline(always)]\n@@ -830,3 +818,14 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         })\n     }\n }\n+\n+// Some nodes are used a lot. Make sure they don't unintentionally get bigger.\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+mod size_asserts {\n+    use super::*;\n+    // These are in alphabetical order, which is easy to maintain.\n+    rustc_data_structures::static_assert_size!(Immediate, 56);\n+    rustc_data_structures::static_assert_size!(ImmTy<'_>, 72);\n+    rustc_data_structures::static_assert_size!(Operand, 64);\n+    rustc_data_structures::static_assert_size!(OpTy<'_>, 88);\n+}"}, {"sha": "f4571a1ca3d8a0438fc0ee435fc4a55dcd8b0115", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e6bb00fff51185f3d417b73bf32541b62e7c54db/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6bb00fff51185f3d417b73bf32541b62e7c54db/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=e6bb00fff51185f3d417b73bf32541b62e7c54db", "patch": "@@ -25,9 +25,6 @@ pub enum MemPlaceMeta<Prov: Provenance = AllocId> {\n     None,\n }\n \n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(MemPlaceMeta, 24);\n-\n impl<Prov: Provenance> MemPlaceMeta<Prov> {\n     pub fn unwrap_meta(self) -> Scalar<Prov> {\n         match self {\n@@ -56,9 +53,6 @@ pub struct MemPlace<Prov: Provenance = AllocId> {\n     pub meta: MemPlaceMeta<Prov>,\n }\n \n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(MemPlace, 40);\n-\n /// A MemPlace with its layout. Constructing it is only possible in this module.\n #[derive(Copy, Clone, Hash, Eq, PartialEq, Debug)]\n pub struct MPlaceTy<'tcx, Prov: Provenance = AllocId> {\n@@ -71,9 +65,6 @@ pub struct MPlaceTy<'tcx, Prov: Provenance = AllocId> {\n     pub align: Align,\n }\n \n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(MPlaceTy<'_>, 64);\n-\n #[derive(Copy, Clone, Debug)]\n pub enum Place<Prov: Provenance = AllocId> {\n     /// A place referring to a value allocated in the `Memory` system.\n@@ -84,9 +75,6 @@ pub enum Place<Prov: Provenance = AllocId> {\n     Local { frame: usize, local: mir::Local },\n }\n \n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Place, 48);\n-\n #[derive(Clone, Debug)]\n pub struct PlaceTy<'tcx, Prov: Provenance = AllocId> {\n     place: Place<Prov>, // Keep this private; it helps enforce invariants.\n@@ -98,9 +86,6 @@ pub struct PlaceTy<'tcx, Prov: Provenance = AllocId> {\n     pub align: Align,\n }\n \n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(PlaceTy<'_>, 72);\n-\n impl<'tcx, Prov: Provenance> std::ops::Deref for PlaceTy<'tcx, Prov> {\n     type Target = Place<Prov>;\n     #[inline(always)]\n@@ -901,3 +886,15 @@ where\n         Ok(mplace)\n     }\n }\n+\n+// Some nodes are used a lot. Make sure they don't unintentionally get bigger.\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+mod size_asserts {\n+    use super::*;\n+    // These are in alphabetical order, which is easy to maintain.\n+    rustc_data_structures::static_assert_size!(MemPlaceMeta, 24);\n+    rustc_data_structures::static_assert_size!(MemPlace, 40);\n+    rustc_data_structures::static_assert_size!(MPlaceTy<'_>, 64);\n+    rustc_data_structures::static_assert_size!(Place, 48);\n+    rustc_data_structures::static_assert_size!(PlaceTy<'_>, 72);\n+}"}, {"sha": "7230555e961c9e5a3a6a27fd1318522222546bc6", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e6bb00fff51185f3d417b73bf32541b62e7c54db/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6bb00fff51185f3d417b73bf32541b62e7c54db/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=e6bb00fff51185f3d417b73bf32541b62e7c54db", "patch": "@@ -3489,17 +3489,18 @@ impl<'hir> Node<'hir> {\n // Some nodes are used a lot. Make sure they don't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n mod size_asserts {\n-    rustc_data_structures::static_assert_size!(super::Block<'static>, 48);\n-    rustc_data_structures::static_assert_size!(super::Expr<'static>, 56);\n-    rustc_data_structures::static_assert_size!(super::Pat<'static>, 88);\n-    rustc_data_structures::static_assert_size!(super::QPath<'static>, 24);\n-    rustc_data_structures::static_assert_size!(super::Ty<'static>, 72);\n-    rustc_data_structures::static_assert_size!(super::GenericBound<'_>, 48);\n-    rustc_data_structures::static_assert_size!(super::Generics<'static>, 56);\n-    rustc_data_structures::static_assert_size!(super::Impl<'static>, 80);\n-\n-    rustc_data_structures::static_assert_size!(super::Item<'static>, 80);\n-    rustc_data_structures::static_assert_size!(super::TraitItem<'static>, 88);\n-    rustc_data_structures::static_assert_size!(super::ImplItem<'static>, 80);\n-    rustc_data_structures::static_assert_size!(super::ForeignItem<'static>, 72);\n+    use super::*;\n+    // These are in alphabetical order, which is easy to maintain.\n+    rustc_data_structures::static_assert_size!(Block<'static>, 48);\n+    rustc_data_structures::static_assert_size!(Expr<'static>, 56);\n+    rustc_data_structures::static_assert_size!(ForeignItem<'static>, 72);\n+    rustc_data_structures::static_assert_size!(GenericBound<'_>, 48);\n+    rustc_data_structures::static_assert_size!(Generics<'static>, 56);\n+    rustc_data_structures::static_assert_size!(ImplItem<'static>, 80);\n+    rustc_data_structures::static_assert_size!(Impl<'static>, 80);\n+    rustc_data_structures::static_assert_size!(Item<'static>, 80);\n+    rustc_data_structures::static_assert_size!(Pat<'static>, 88);\n+    rustc_data_structures::static_assert_size!(QPath<'static>, 24);\n+    rustc_data_structures::static_assert_size!(TraitItem<'static>, 88);\n+    rustc_data_structures::static_assert_size!(Ty<'static>, 72);\n }"}, {"sha": "eb90169d0e3141acbbab8408bf7482c8d1ac3a04", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e6bb00fff51185f3d417b73bf32541b62e7c54db/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6bb00fff51185f3d417b73bf32541b62e7c54db/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=e6bb00fff51185f3d417b73bf32541b62e7c54db", "patch": "@@ -800,9 +800,6 @@ pub struct Place<'tcx> {\n     pub projection: &'tcx List<PlaceElem<'tcx>>,\n }\n \n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(Place<'_>, 16);\n-\n #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n #[derive(TyEncodable, TyDecodable, HashStable)]\n pub enum ProjectionElem<V, T> {\n@@ -866,11 +863,6 @@ pub enum ProjectionElem<V, T> {\n /// and the index is a local.\n pub type PlaceElem<'tcx> = ProjectionElem<Local, Ty<'tcx>>;\n \n-// This type is fairly frequently used, so we shouldn't unintentionally increase\n-// its size.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(PlaceElem<'_>, 24);\n-\n ///////////////////////////////////////////////////////////////////////////\n // Operands\n \n@@ -913,9 +905,6 @@ pub enum Operand<'tcx> {\n     Constant(Box<Constant<'tcx>>),\n }\n \n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(Operand<'_>, 24);\n-\n ///////////////////////////////////////////////////////////////////////////\n // Rvalues\n \n@@ -1067,9 +1056,6 @@ pub enum Rvalue<'tcx> {\n     CopyForDeref(Place<'tcx>),\n }\n \n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(Rvalue<'_>, 40);\n-\n #[derive(Clone, Copy, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]\n pub enum CastKind {\n     /// An exposing pointer to address cast. A cast between a pointer and an integer type, or\n@@ -1105,9 +1091,6 @@ pub enum AggregateKind<'tcx> {\n     Generator(LocalDefId, SubstsRef<'tcx>, hir::Movability),\n }\n \n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(AggregateKind<'_>, 48);\n-\n #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]\n pub enum NullOp {\n     /// Returns the size of a value of that type\n@@ -1171,3 +1154,15 @@ pub enum BinOp {\n     /// The `ptr.offset` operator\n     Offset,\n }\n+\n+// Some nodes are used a lot. Make sure they don't unintentionally get bigger.\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+mod size_asserts {\n+    use super::*;\n+    // These are in alphabetical order, which is easy to maintain.\n+    static_assert_size!(AggregateKind<'_>, 48);\n+    static_assert_size!(Operand<'_>, 24);\n+    static_assert_size!(Place<'_>, 16);\n+    static_assert_size!(PlaceElem<'_>, 24);\n+    static_assert_size!(Rvalue<'_>, 40);\n+}"}, {"sha": "b856af1d8f835e5cc9e3ecf10eb7fac395c9f950", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e6bb00fff51185f3d417b73bf32541b62e7c54db/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6bb00fff51185f3d417b73bf32541b62e7c54db/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=e6bb00fff51185f3d417b73bf32541b62e7c54db", "patch": "@@ -190,10 +190,6 @@ pub enum StmtKind<'tcx> {\n     },\n }\n \n-// `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Expr<'_>, 104);\n-\n #[derive(Clone, Debug, Copy, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]\n #[derive(TypeFoldable, TypeVisitable)]\n pub struct LocalVarId(pub hir::HirId);\n@@ -812,3 +808,14 @@ impl<'tcx> fmt::Display for Pat<'tcx> {\n         }\n     }\n }\n+\n+// Some nodes are used a lot. Make sure they don't unintentionally get bigger.\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+mod size_asserts {\n+    use super::*;\n+    // These are in alphabetical order, which is easy to maintain.\n+    rustc_data_structures::static_assert_size!(Block, 56);\n+    rustc_data_structures::static_assert_size!(Expr<'_>, 104);\n+    rustc_data_structures::static_assert_size!(Pat<'_>, 24);\n+    rustc_data_structures::static_assert_size!(Stmt<'_>, 120);\n+}"}, {"sha": "1a46d077f1b0562f1847aa4e4e081e51feec6ee3", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 16, "deletions": 39, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e6bb00fff51185f3d417b73bf32541b62e7c54db/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6bb00fff51185f3d417b73bf32541b62e7c54db/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=e6bb00fff51185f3d417b73bf32541b62e7c54db", "patch": "@@ -122,10 +122,6 @@ pub(crate) struct Crate {\n     pub(crate) external_traits: Rc<RefCell<FxHashMap<DefId, TraitWithExtraInfo>>>,\n }\n \n-// `Crate` is frequently moved by-value. Make sure it doesn't unintentionally get bigger.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Crate, 72);\n-\n impl Crate {\n     pub(crate) fn name(&self, tcx: TyCtxt<'_>) -> Symbol {\n         ExternalCrate::LOCAL.name(tcx)\n@@ -389,10 +385,6 @@ impl fmt::Debug for Item {\n     }\n }\n \n-// `Item` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Item, 56);\n-\n pub(crate) fn rustc_span(def_id: DefId, tcx: TyCtxt<'_>) -> Span {\n     Span::new(def_id.as_local().map_or_else(\n         || tcx.def_span(def_id),\n@@ -771,10 +763,6 @@ pub(crate) enum ItemKind {\n     KeywordItem,\n }\n \n-// `ItemKind` is an enum and large variants can bloat up memory usage even for smaller ones\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(ItemKind, 112);\n-\n impl ItemKind {\n     /// Some items contain others such as structs (for their fields) and Enums\n     /// (for their variants). This method returns those contained items.\n@@ -994,10 +982,6 @@ pub(crate) struct DocFragment {\n     pub(crate) indent: usize,\n }\n \n-// `DocFragment` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(DocFragment, 32);\n-\n #[derive(Clone, Copy, PartialEq, Eq, Debug)]\n pub(crate) enum DocFragmentKind {\n     /// A doc fragment created from a `///` or `//!` doc comment.\n@@ -1382,10 +1366,6 @@ pub(crate) struct GenericParamDef {\n     pub(crate) kind: GenericParamDefKind,\n }\n \n-// `GenericParamDef` is used in many places. Make sure it doesn't unintentionally get bigger.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(GenericParamDef, 56);\n-\n impl GenericParamDef {\n     pub(crate) fn is_synthetic_type_param(&self) -> bool {\n         match self.kind {\n@@ -1590,10 +1570,6 @@ pub(crate) enum Type {\n     ImplTrait(Vec<GenericBound>),\n }\n \n-// `Type` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Type, 72);\n-\n impl Type {\n     /// When comparing types for equality, it can help to ignore `&` wrapping.\n     pub(crate) fn without_borrowed_ref(&self) -> &Type {\n@@ -2230,33 +2206,18 @@ pub(crate) enum GenericArg {\n     Infer,\n }\n \n-// `GenericArg` can occur many times in a single `Path`, so make sure it\n-// doesn't increase in size unexpectedly.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(GenericArg, 80);\n-\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub(crate) enum GenericArgs {\n     AngleBracketed { args: Box<[GenericArg]>, bindings: ThinVec<TypeBinding> },\n     Parenthesized { inputs: Box<[Type]>, output: Option<Box<Type>> },\n }\n \n-// `GenericArgs` is in every `PathSegment`, so its size can significantly\n-// affect rustdoc's memory usage.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(GenericArgs, 32);\n-\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub(crate) struct PathSegment {\n     pub(crate) name: Symbol,\n     pub(crate) args: GenericArgs,\n }\n \n-// `PathSegment` usually occurs multiple times in every `Path`, so its size can\n-// significantly affect rustdoc's memory usage.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(PathSegment, 40);\n-\n #[derive(Clone, Debug)]\n pub(crate) struct Typedef {\n     pub(crate) type_: Type,\n@@ -2527,3 +2488,19 @@ impl SubstParam {\n         if let Self::Lifetime(lt) = self { Some(lt) } else { None }\n     }\n }\n+\n+// Some nodes are used a lot. Make sure they don't unintentionally get bigger.\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+mod size_asserts {\n+    use super::*;\n+    // These are in alphabetical order, which is easy to maintain.\n+    rustc_data_structures::static_assert_size!(Crate, 72); // frequently moved by-value\n+    rustc_data_structures::static_assert_size!(DocFragment, 32);\n+    rustc_data_structures::static_assert_size!(GenericArg, 80);\n+    rustc_data_structures::static_assert_size!(GenericArgs, 32);\n+    rustc_data_structures::static_assert_size!(GenericParamDef, 56);\n+    rustc_data_structures::static_assert_size!(Item, 56);\n+    rustc_data_structures::static_assert_size!(ItemKind, 112);\n+    rustc_data_structures::static_assert_size!(PathSegment, 40);\n+    rustc_data_structures::static_assert_size!(Type, 72);\n+}"}]}