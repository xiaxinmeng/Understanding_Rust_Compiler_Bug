{"sha": "d268b34da48373a54a3f4666b3b83277ad8f9db3", "node_id": "C_kwDOAAsO6NoAKGQyNjhiMzRkYTQ4MzczYTU0YTNmNDY2NmIzYjgzMjc3YWQ4ZjlkYjM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-04T01:40:39Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-06T01:46:48Z"}, "message": "Do suggest_await_before_try with infer in self, clean up binders", "tree": {"sha": "3bcea27145f8d7336e77324fcf293a9d3b366951", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bcea27145f8d7336e77324fcf293a9d3b366951"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d268b34da48373a54a3f4666b3b83277ad8f9db3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d268b34da48373a54a3f4666b3b83277ad8f9db3", "html_url": "https://github.com/rust-lang/rust/commit/d268b34da48373a54a3f4666b3b83277ad8f9db3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d268b34da48373a54a3f4666b3b83277ad8f9db3/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e40d5e83dc133d093c22c7ff016b10daa4f40dcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e40d5e83dc133d093c22c7ff016b10daa4f40dcf", "html_url": "https://github.com/rust-lang/rust/commit/e40d5e83dc133d093c22c7ff016b10daa4f40dcf"}], "stats": {"total": 101, "additions": 71, "deletions": 30}, "files": [{"sha": "4dbb479ede5e1ab51a281e4de1804b28f3ba2365", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 18, "deletions": 30, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d268b34da48373a54a3f4666b3b83277ad8f9db3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d268b34da48373a54a3f4666b3b83277ad8f9db3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d268b34da48373a54a3f4666b3b83277ad8f9db3", "patch": "@@ -5,7 +5,7 @@ use super::{\n \n use crate::autoderef::Autoderef;\n use crate::infer::InferCtxt;\n-use crate::traits::normalize_projection_type;\n+use crate::traits::normalize_to;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n@@ -2704,55 +2704,43 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 let future_trait = self.tcx.require_lang_item(LangItem::Future, None);\n \n                 let self_ty = self.resolve_vars_if_possible(trait_pred.self_ty());\n-\n-                // Do not check on infer_types to avoid panic in evaluate_obligation.\n-                if self_ty.has_infer_types() {\n-                    return;\n-                }\n-                let self_ty = self.tcx.erase_regions(self_ty);\n-\n                 let impls_future = self.type_implements_trait(\n                     future_trait,\n-                    self_ty.skip_binder(),\n+                    self.tcx.erase_late_bound_regions(self_ty),\n                     ty::List::empty(),\n                     obligation.param_env,\n                 );\n+                if !impls_future.must_apply_modulo_regions() {\n+                    return;\n+                }\n \n                 let item_def_id = self.tcx.associated_item_def_ids(future_trait)[0];\n                 // `<T as Future>::Output`\n-                let projection_ty = ty::ProjectionTy {\n-                    // `T`\n-                    substs: self.tcx.mk_substs_trait(\n-                        trait_pred.self_ty().skip_binder(),\n-                        &self.fresh_substs_for_item(span, item_def_id)[1..],\n-                    ),\n-                    // `Future::Output`\n-                    item_def_id,\n-                };\n-\n-                let mut selcx = SelectionContext::new(self);\n-\n-                let mut obligations = vec![];\n-                let normalized_ty = normalize_projection_type(\n-                    &mut selcx,\n+                let projection_ty = trait_pred.map_bound(|trait_pred| {\n+                    self.tcx.mk_projection(\n+                        item_def_id,\n+                        // Future::Output has no substs\n+                        self.tcx.mk_substs_trait(trait_pred.self_ty(), &[]),\n+                    )\n+                });\n+                let projection_ty = normalize_to(\n+                    &mut SelectionContext::new(self),\n                     obligation.param_env,\n-                    projection_ty,\n                     obligation.cause.clone(),\n-                    0,\n-                    &mut obligations,\n+                    projection_ty,\n+                    &mut vec![],\n                 );\n \n                 debug!(\n                     \"suggest_await_before_try: normalized_projection_type {:?}\",\n-                    self.resolve_vars_if_possible(normalized_ty)\n+                    self.resolve_vars_if_possible(projection_ty)\n                 );\n                 let try_obligation = self.mk_trait_obligation_with_new_self_ty(\n                     obligation.param_env,\n-                    trait_pred.map_bound(|trait_pred| (trait_pred, normalized_ty.ty().unwrap())),\n+                    trait_pred.map_bound(|trait_pred| (trait_pred, projection_ty.skip_binder())),\n                 );\n                 debug!(\"suggest_await_before_try: try_trait_obligation {:?}\", try_obligation);\n                 if self.predicate_may_hold(&try_obligation)\n-                    && impls_future.must_apply_modulo_regions()\n                     && let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span)\n                     && snippet.ends_with('?')\n                 {"}, {"sha": "c42bdfff5f9e6723a2ba4d3a569bf861fb1cd11b", "filename": "src/test/ui/suggestions/issue-97704.fixed", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d268b34da48373a54a3f4666b3b83277ad8f9db3/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97704.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d268b34da48373a54a3f4666b3b83277ad8f9db3/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97704.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97704.fixed?ref=d268b34da48373a54a3f4666b3b83277ad8f9db3", "patch": "@@ -0,0 +1,19 @@\n+// edition:2021\n+// run-rustfix\n+\n+#![allow(unused)]\n+\n+use std::future::Future;\n+\n+async fn foo() -> Result<(), i32> {\n+    func(async { Ok::<_, i32>(()) }).await?;\n+    //~^ ERROR the `?` operator can only be applied to values that implement `Try`\n+\n+    Ok(())\n+}\n+\n+async fn func<T>(fut: impl Future<Output = T>) -> T {\n+    fut.await\n+}\n+\n+fn main() {}"}, {"sha": "5dfee6cac60973cb5849ea96677c148653aff615", "filename": "src/test/ui/suggestions/issue-97704.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d268b34da48373a54a3f4666b3b83277ad8f9db3/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97704.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d268b34da48373a54a3f4666b3b83277ad8f9db3/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97704.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97704.rs?ref=d268b34da48373a54a3f4666b3b83277ad8f9db3", "patch": "@@ -0,0 +1,19 @@\n+// edition:2021\n+// run-rustfix\n+\n+#![allow(unused)]\n+\n+use std::future::Future;\n+\n+async fn foo() -> Result<(), i32> {\n+    func(async { Ok::<_, i32>(()) })?;\n+    //~^ ERROR the `?` operator can only be applied to values that implement `Try`\n+\n+    Ok(())\n+}\n+\n+async fn func<T>(fut: impl Future<Output = T>) -> T {\n+    fut.await\n+}\n+\n+fn main() {}"}, {"sha": "ca017be45ac47b0345d93d2510198cbb3ca210a0", "filename": "src/test/ui/suggestions/issue-97704.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d268b34da48373a54a3f4666b3b83277ad8f9db3/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97704.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d268b34da48373a54a3f4666b3b83277ad8f9db3/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97704.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97704.stderr?ref=d268b34da48373a54a3f4666b3b83277ad8f9db3", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the `?` operator can only be applied to values that implement `Try`\n+  --> $DIR/issue-97704.rs:9:5\n+   |\n+LL |     func(async { Ok::<_, i32>(()) })?;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `impl Future<Output = Result<(), i32>>`\n+   |\n+   = help: the trait `Try` is not implemented for `impl Future<Output = Result<(), i32>>`\n+help: consider `await`ing on the `Future`\n+   |\n+LL |     func(async { Ok::<_, i32>(()) }).await?;\n+   |                                     ++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}