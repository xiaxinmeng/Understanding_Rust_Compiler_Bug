{"sha": "937d580a2522186a1d5e1b5cd107f9ce8213b7ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzN2Q1ODBhMjUyMjE4NmExZDVlMWI1Y2QxMDdmOWNlODIxM2I3ZWM=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2021-01-18T15:19:29Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2021-02-15T13:27:31Z"}, "message": "Add `ptr::from_raw_parts`, `ptr::from_raw_parts_mut`, and `NonNull::from_raw_parts`\n\nThe use of module-level functions instead of associated functions\non `<*const T>` or `<*mut T>` follows the precedent of\n`ptr::slice_from_raw_parts` and `ptr::slice_from_raw_parts_mut`.", "tree": {"sha": "42585d6982d94e3bdd130861ddf0d0c5ed16d03a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42585d6982d94e3bdd130861ddf0d0c5ed16d03a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/937d580a2522186a1d5e1b5cd107f9ce8213b7ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/937d580a2522186a1d5e1b5cd107f9ce8213b7ec", "html_url": "https://github.com/rust-lang/rust/commit/937d580a2522186a1d5e1b5cd107f9ce8213b7ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/937d580a2522186a1d5e1b5cd107f9ce8213b7ec/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ab83b93383f7b7f87186a2a8a289540c4e27564", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ab83b93383f7b7f87186a2a8a289540c4e27564", "html_url": "https://github.com/rust-lang/rust/commit/9ab83b93383f7b7f87186a2a8a289540c4e27564"}], "stats": {"total": 94, "additions": 86, "deletions": 8}, "files": [{"sha": "0e925893bd5aa58ee2212c98aedabfafc4798e33", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/937d580a2522186a1d5e1b5cd107f9ce8213b7ec/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/937d580a2522186a1d5e1b5cd107f9ce8213b7ec/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=937d580a2522186a1d5e1b5cd107f9ce8213b7ec", "patch": "@@ -123,6 +123,7 @@\n #![feature(auto_traits)]\n #![feature(or_patterns)]\n #![feature(prelude_import)]\n+#![cfg_attr(not(bootstrap), feature(ptr_metadata))]\n #![feature(repr_simd, platform_intrinsics)]\n #![feature(rustc_attrs)]\n #![feature(simd_ffi)]"}, {"sha": "136e986b376db0f34fd45afebd38a2a61cdd6c33", "filename": "library/core/src/ptr/metadata.rs", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/937d580a2522186a1d5e1b5cd107f9ce8213b7ec/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/937d580a2522186a1d5e1b5cd107f9ce8213b7ec/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs?ref=937d580a2522186a1d5e1b5cd107f9ce8213b7ec", "patch": "@@ -36,16 +36,48 @@ pub fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {\n     unsafe { PtrRepr { const_ptr: ptr }.components.metadata }\n }\n \n+/// Forms a raw pointer from a data address and metadata.\n+#[unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n+#[rustc_const_unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n+#[inline]\n+pub const fn from_raw_parts<T: ?Sized>(\n+    data_address: *const (),\n+    metadata: <T as Pointee>::Metadata,\n+) -> *const T {\n+    // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T\n+    // and PtrComponents<T> have the same memory layouts. Only std can make this\n+    // guarantee.\n+    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.const_ptr }\n+}\n+\n+/// Performs the same functionality as [`from_raw_parts`], except that a\n+/// raw `*mut` pointer is returned, as opposed to a raw `*const` pointer.\n+///\n+/// See the documentation of [`from_raw_parts`] for more details.\n+#[unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n+#[rustc_const_unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n+#[inline]\n+pub const fn from_raw_parts_mut<T: ?Sized>(\n+    data_address: *mut (),\n+    metadata: <T as Pointee>::Metadata,\n+) -> *mut T {\n+    // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T\n+    // and PtrComponents<T> have the same memory layouts. Only std can make this\n+    // guarantee.\n+    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.mut_ptr }\n+}\n+\n #[repr(C)]\n-union PtrRepr<T: ?Sized> {\n-    const_ptr: *const T,\n-    components: PtrComponents<T>,\n+pub(crate) union PtrRepr<T: ?Sized> {\n+    pub(crate) const_ptr: *const T,\n+    pub(crate) mut_ptr: *mut T,\n+    pub(crate) components: PtrComponents<T>,\n }\n \n #[repr(C)]\n-struct PtrComponents<T: ?Sized> {\n-    data_address: usize,\n-    metadata: <T as Pointee>::Metadata,\n+pub(crate) struct PtrComponents<T: ?Sized> {\n+    pub(crate) data_address: *const (),\n+    pub(crate) metadata: <T as Pointee>::Metadata,\n }\n \n // Manual impl needed to avoid `T: Copy` bound."}, {"sha": "967495f7f2ddc11d1e23532b52046d1abbdf805d", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/937d580a2522186a1d5e1b5cd107f9ce8213b7ec/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/937d580a2522186a1d5e1b5cd107f9ce8213b7ec/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=937d580a2522186a1d5e1b5cd107f9ce8213b7ec", "patch": "@@ -86,7 +86,7 @@ pub use crate::intrinsics::write_bytes;\n mod metadata;\n #[cfg(not(bootstrap))]\n #[unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n-pub use metadata::{metadata, DynMetadata, Pointee, Thin};\n+pub use metadata::{from_raw_parts, from_raw_parts_mut, metadata, DynMetadata, Pointee, Thin};\n \n mod non_null;\n #[stable(feature = \"nonnull\", since = \"1.25.0\")]"}, {"sha": "ef7a7b974a6142a28d7dbcee65ff71d9a4f5a99d", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/937d580a2522186a1d5e1b5cd107f9ce8213b7ec/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/937d580a2522186a1d5e1b5cd107f9ce8213b7ec/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=937d580a2522186a1d5e1b5cd107f9ce8213b7ec", "patch": "@@ -175,6 +175,24 @@ impl<T: ?Sized> NonNull<T> {\n         }\n     }\n \n+    /// Performs the same functionality as [`std::ptr::from_raw_parts`], except that a\n+    /// `NonNull` pointer is returned, as opposed to a raw `*const` pointer.\n+    ///\n+    /// See the documentation of [`std::ptr::from_raw_parts`] for more details.\n+    #[cfg(not(bootstrap))]\n+    #[unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n+    #[rustc_const_unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n+    #[inline]\n+    pub const fn from_raw_parts(\n+        data_address: NonNull<()>,\n+        metadata: <T as super::Pointee>::Metadata,\n+    ) -> NonNull<T> {\n+        // SAFETY: The result of `ptr::from::raw_parts_mut` is non-null because `data_address` is.\n+        unsafe {\n+            NonNull::new_unchecked(super::from_raw_parts_mut(data_address.as_ptr(), metadata))\n+        }\n+    }\n+\n     /// Acquires the underlying `*mut` pointer.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[rustc_const_stable(feature = \"const_nonnull_as_ptr\", since = \"1.32.0\")]"}, {"sha": "d594af991bf64e09b44133195ae691aa7c49206e", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/937d580a2522186a1d5e1b5cd107f9ce8213b7ec/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/937d580a2522186a1d5e1b5cd107f9ce8213b7ec/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=937d580a2522186a1d5e1b5cd107f9ce8213b7ec", "patch": "@@ -1,5 +1,5 @@\n use core::cell::RefCell;\n-use core::ptr::*;\n+use core::ptr::{self, *};\n use std::fmt::{Debug, Display};\n \n #[test]\n@@ -525,3 +525,30 @@ fn dyn_metadata() {\n \n     assert!(format!(\"{:?}\", meta).starts_with(\"DynMetadata(0x\"));\n }\n+\n+#[test]\n+#[cfg(not(bootstrap))]\n+fn from_raw_parts() {\n+    let mut value = 5_u32;\n+    let address = &mut value as *mut _ as *mut ();\n+    let trait_object: &dyn Display = &mut value;\n+    let vtable = metadata(trait_object);\n+    let trait_object = NonNull::from(trait_object);\n+\n+    assert_eq!(ptr::from_raw_parts(address, vtable), trait_object.as_ptr());\n+    assert_eq!(ptr::from_raw_parts_mut(address, vtable), trait_object.as_ptr());\n+    assert_eq!(NonNull::from_raw_parts(NonNull::new(address).unwrap(), vtable), trait_object);\n+\n+    let mut array = [5_u32, 5, 5, 5, 5];\n+    let address = &mut array as *mut _ as *mut ();\n+    let array_ptr = NonNull::from(&mut array);\n+    let slice_ptr = NonNull::from(&mut array[..]);\n+\n+    assert_eq!(ptr::from_raw_parts(address, ()), array_ptr.as_ptr());\n+    assert_eq!(ptr::from_raw_parts_mut(address, ()), array_ptr.as_ptr());\n+    assert_eq!(NonNull::from_raw_parts(NonNull::new(address).unwrap(), ()), array_ptr);\n+\n+    assert_eq!(ptr::from_raw_parts(address, 5), slice_ptr.as_ptr());\n+    assert_eq!(ptr::from_raw_parts_mut(address, 5), slice_ptr.as_ptr());\n+    assert_eq!(NonNull::from_raw_parts(NonNull::new(address).unwrap(), 5), slice_ptr);\n+}"}]}