{"sha": "8cf39a8c1908709831ab27937a53a2d6d0278ff6", "node_id": "C_kwDOAAsO6NoAKDhjZjM5YThjMTkwODcwOTgzMWFiMjc5MzdhNTNhMmQ2ZDAyNzhmZjY", "commit": {"author": {"name": "Ariel Uy", "email": "ariel.b.uy@gmail.com", "date": "2022-07-10T16:39:36Z"}, "committer": {"name": "Ariel Uy", "email": "ariel.b.uy@gmail.com", "date": "2022-07-17T18:23:09Z"}, "message": "Fix `mismatching_type_param_order` false positive\n\nPreviously was giving false positive when an impl had a nontrivial\ngeneric argument such as a tuple. Don't lint on these cases.", "tree": {"sha": "9825e904535eb86f7f7c159b157e03c2b73bc444", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9825e904535eb86f7f7c159b157e03c2b73bc444"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cf39a8c1908709831ab27937a53a2d6d0278ff6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cf39a8c1908709831ab27937a53a2d6d0278ff6", "html_url": "https://github.com/rust-lang/rust/commit/8cf39a8c1908709831ab27937a53a2d6d0278ff6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cf39a8c1908709831ab27937a53a2d6d0278ff6/comments", "author": {"login": "arieluy", "id": 36049232, "node_id": "MDQ6VXNlcjM2MDQ5MjMy", "avatar_url": "https://avatars.githubusercontent.com/u/36049232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arieluy", "html_url": "https://github.com/arieluy", "followers_url": "https://api.github.com/users/arieluy/followers", "following_url": "https://api.github.com/users/arieluy/following{/other_user}", "gists_url": "https://api.github.com/users/arieluy/gists{/gist_id}", "starred_url": "https://api.github.com/users/arieluy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arieluy/subscriptions", "organizations_url": "https://api.github.com/users/arieluy/orgs", "repos_url": "https://api.github.com/users/arieluy/repos", "events_url": "https://api.github.com/users/arieluy/events{/privacy}", "received_events_url": "https://api.github.com/users/arieluy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arieluy", "id": 36049232, "node_id": "MDQ6VXNlcjM2MDQ5MjMy", "avatar_url": "https://avatars.githubusercontent.com/u/36049232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arieluy", "html_url": "https://github.com/arieluy", "followers_url": "https://api.github.com/users/arieluy/followers", "following_url": "https://api.github.com/users/arieluy/following{/other_user}", "gists_url": "https://api.github.com/users/arieluy/gists{/gist_id}", "starred_url": "https://api.github.com/users/arieluy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arieluy/subscriptions", "organizations_url": "https://api.github.com/users/arieluy/orgs", "repos_url": "https://api.github.com/users/arieluy/repos", "events_url": "https://api.github.com/users/arieluy/events{/privacy}", "received_events_url": "https://api.github.com/users/arieluy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58cd01c2fcda07f97efcd908b50e5256cf084593", "url": "https://api.github.com/repos/rust-lang/rust/commits/58cd01c2fcda07f97efcd908b50e5256cf084593", "html_url": "https://github.com/rust-lang/rust/commit/58cd01c2fcda07f97efcd908b50e5256cf084593"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "8e477cb7179d184a5a97c087c909064b7f827162", "filename": "clippy_lints/src/mismatching_type_param_order.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8cf39a8c1908709831ab27937a53a2d6d0278ff6/clippy_lints%2Fsrc%2Fmismatching_type_param_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf39a8c1908709831ab27937a53a2d6d0278ff6/clippy_lints%2Fsrc%2Fmismatching_type_param_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmismatching_type_param_order.rs?ref=8cf39a8c1908709831ab27937a53a2d6d0278ff6", "patch": "@@ -18,6 +18,11 @@ declare_clippy_lint! {\n     /// Naming type parameters inconsistently may cause you to refer to the\n     /// wrong type parameter.\n     ///\n+    /// ### Limitations\n+    /// This lint only applies to impl blocks with simple generic params, e.g.\n+    /// `A`. If there is anything more complicated, such as a tuple, it will be\n+    /// ignored.\n+    ///\n     /// ### Example\n     /// ```rust\n     /// struct Foo<A, B> {\n@@ -53,14 +58,15 @@ impl<'tcx> LateLintPass<'tcx> for TypeParamMismatch {\n             if !generic_args.args.is_empty();\n             then {\n                 // get the name and span of the generic parameters in the Impl\n-                let impl_params = generic_args.args.iter()\n-                .filter_map(|p|\n+                let mut impl_params = Vec::new();\n+                for p in generic_args.args.iter() {\n                     match p {\n                         GenericArg::Type(Ty {kind: TyKind::Path(QPath::Resolved(_, path)), ..}) =>\n-                            Some((path.segments[0].ident.to_string(), path.span)),\n-                        _ => None,\n-                    }\n-                );\n+                            impl_params.push((path.segments[0].ident.to_string(), path.span)),\n+                        GenericArg::Type(_) => return,\n+                        _ => (),\n+                    };\n+                }\n \n                 // find the type that the Impl is for\n                 // only lint on struct/enum/union for now\n@@ -83,16 +89,16 @@ impl<'tcx> LateLintPass<'tcx> for TypeParamMismatch {\n                     type_param_names.iter().enumerate().map(|(i, param)| (param, i)).collect();\n \n                 let type_name = segment.ident;\n-                for (i, (impl_param_name, impl_param_span)) in impl_params.enumerate() {\n-                    if mismatch_param_name(i, &impl_param_name, &type_param_names_hashmap) {\n+                for (i, (impl_param_name, impl_param_span)) in impl_params.iter().enumerate() {\n+                    if mismatch_param_name(i, impl_param_name, &type_param_names_hashmap) {\n                         let msg = format!(\"`{}` has a similarly named generic type parameter `{}` in its declaration, but in a different order\",\n                                           type_name, impl_param_name);\n                         let help = format!(\"try `{}`, or a name that does not conflict with `{}`'s generic params\",\n                                            type_param_names[i], type_name);\n                         span_lint_and_help(\n                             cx,\n                             MISMATCHING_TYPE_PARAM_ORDER,\n-                            impl_param_span,\n+                            *impl_param_span,\n                             &msg,\n                             None,\n                             &help"}, {"sha": "8c0da84d8e975a5e160608bf74714d79c7daca84", "filename": "tests/ui/mismatching_type_param_order.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cf39a8c1908709831ab27937a53a2d6d0278ff6/tests%2Fui%2Fmismatching_type_param_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf39a8c1908709831ab27937a53a2d6d0278ff6/tests%2Fui%2Fmismatching_type_param_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatching_type_param_order.rs?ref=8cf39a8c1908709831ab27937a53a2d6d0278ff6", "patch": "@@ -57,4 +57,8 @@ fn main() {\n         B: Copy,\n     {\n     }\n+\n+    // if the types are complicated, do not lint\n+    impl<K, V, B> Foo<(K, V), B> {}\n+    impl<K, V, A> Foo<(K, V), A> {}\n }"}]}