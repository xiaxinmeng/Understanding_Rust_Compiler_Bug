{"sha": "dae9d6ac3e9a8fb389cfe471b30f4d72c3122196", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZTlkNmFjM2U5YThmYjM4OWNmZTQ3MWIzMGY0ZDcyYzMxMjIxOTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-09T21:14:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-09T21:14:50Z"}, "message": "Auto merge of #84004 - mattico:print-target-features-improvements, r=petrochenkov\n\nCategorize and explain target features support\n\nThere are 3 different uses of the `-C target-feature` args passed to rustc:\n1. All of the features are passed to LLVM, which uses them to configure code-generation. This is sort-of stabilized since 1.0 though LLVM does change/add/remove target features regularly.\n2. Target features which are in [the compiler's allowlist](https://github.com/rust-lang/rust/blob/69e1d22ddbc67b25141a735a22a8895a678b32ca/compiler/rustc_codegen_ssa/src/target_features.rs#L12-L34) can be used in `cfg!(target_feature)` etc. These may have different names than in LLVM and are renamed before passing them to LLVM.\n3. Target features which are in the allowlist and which are stabilized or feature-gate-enabled can be used in `#[target_feature]`.\n\nIt can be confusing that `rustc --print target-features` just prints out the LLVM features without separating out the rustc features or even mentioning that the dichotomy exists.\n\nThis improves the situation by separating out the rustc and LLVM target features and adding a brief explanation about the difference.\n\nAbbreviated Example Output:\n```\n$ rustc --print target-features\nFeatures supported by rustc for this target:\n    adx                         - Support ADX instructions.\n    aes                         - Enable AES instructions.\n...\n    xsaves                      - Support xsaves instructions.\n    crt-static                  - Enables libraries with C Run-time Libraries(CRT) to be statically linked.\n\nCode-generation features supported by LLVM for this target:\n    16bit-mode                  - 16-bit mode (i8086).\n    32bit-mode                  - 32-bit mode (80386).\n...\n    x87                         - Enable X87 float instructions.\n    xop                         - Enable XOP instructions.\n\nUse +feature to enable a feature, or -feature to disable it.\nFor example, rustc -C target-cpu=mycpu -C target-feature=+feature1,-feature2\n\nCode-generation features cannot be used in cfg or #[target_feature],\nand may be renamed or removed in a future version of LLVM or rustc.\n\n```\n\nMotivated by #83975.\nCC https://github.com/rust-lang/rust/issues/49653", "tree": {"sha": "feaa6a8bf00f396b47fd75bf0a3d9eb5ed6594aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/feaa6a8bf00f396b47fd75bf0a3d9eb5ed6594aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dae9d6ac3e9a8fb389cfe471b30f4d72c3122196", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dae9d6ac3e9a8fb389cfe471b30f4d72c3122196", "html_url": "https://github.com/rust-lang/rust/commit/dae9d6ac3e9a8fb389cfe471b30f4d72c3122196", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dae9d6ac3e9a8fb389cfe471b30f4d72c3122196/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8513e78dbbbdd7cd5eaf2e8eb0bccb8c15a99a25", "url": "https://api.github.com/repos/rust-lang/rust/commits/8513e78dbbbdd7cd5eaf2e8eb0bccb8c15a99a25", "html_url": "https://github.com/rust-lang/rust/commit/8513e78dbbbdd7cd5eaf2e8eb0bccb8c15a99a25"}, {"sha": "e258a5ba6ecb2b64b838f1fa80f5ba134265a35b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e258a5ba6ecb2b64b838f1fa80f5ba134265a35b", "html_url": "https://github.com/rust-lang/rust/commit/e258a5ba6ecb2b64b838f1fa80f5ba134265a35b"}], "stats": {"total": 116, "additions": 91, "deletions": 25}, "files": [{"sha": "54a8249b175b01f6a898b29c746994599bb918c4", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dae9d6ac3e9a8fb389cfe471b30f4d72c3122196/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dae9d6ac3e9a8fb389cfe471b30f4d72c3122196/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=dae9d6ac3e9a8fb389cfe471b30f4d72c3122196", "patch": "@@ -2128,7 +2128,13 @@ extern \"C\" {\n     pub fn LLVMRustHasFeature(T: &TargetMachine, s: *const c_char) -> bool;\n \n     pub fn LLVMRustPrintTargetCPUs(T: &TargetMachine);\n-    pub fn LLVMRustPrintTargetFeatures(T: &TargetMachine);\n+    pub fn LLVMRustGetTargetFeaturesCount(T: &TargetMachine) -> size_t;\n+    pub fn LLVMRustGetTargetFeature(\n+        T: &TargetMachine,\n+        Index: size_t,\n+        Feature: &mut *const c_char,\n+        Desc: &mut *const c_char,\n+    );\n \n     pub fn LLVMRustGetHostCPUName(len: *mut usize) -> *const c_char;\n     pub fn LLVMRustCreateTargetMachine("}, {"sha": "b44553e4f6d3bf84517a27fafc5d4c68fbc15def", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 69, "deletions": 6, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/dae9d6ac3e9a8fb389cfe471b30f4d72c3122196/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dae9d6ac3e9a8fb389cfe471b30f4d72c3122196/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=dae9d6ac3e9a8fb389cfe471b30f4d72c3122196", "patch": "@@ -10,6 +10,7 @@ use rustc_span::symbol::Symbol;\n use rustc_target::spec::{MergeFunctions, PanicStrategy};\n use std::ffi::{CStr, CString};\n \n+use std::ptr;\n use std::slice;\n use std::str;\n use std::sync::atomic::{AtomicBool, Ordering};\n@@ -192,15 +193,77 @@ pub fn print_passes() {\n     }\n }\n \n+fn llvm_target_features(tm: &llvm::TargetMachine) -> Vec<(&str, &str)> {\n+    let len = unsafe { llvm::LLVMRustGetTargetFeaturesCount(tm) };\n+    let mut ret = Vec::with_capacity(len);\n+    for i in 0..len {\n+        unsafe {\n+            let mut feature = ptr::null();\n+            let mut desc = ptr::null();\n+            llvm::LLVMRustGetTargetFeature(tm, i, &mut feature, &mut desc);\n+            if feature.is_null() || desc.is_null() {\n+                bug!(\"LLVM returned a `null` target feature string\");\n+            }\n+            let feature = CStr::from_ptr(feature).to_str().unwrap_or_else(|e| {\n+                bug!(\"LLVM returned a non-utf8 feature string: {}\", e);\n+            });\n+            let desc = CStr::from_ptr(desc).to_str().unwrap_or_else(|e| {\n+                bug!(\"LLVM returned a non-utf8 feature string: {}\", e);\n+            });\n+            ret.push((feature, desc));\n+        }\n+    }\n+    ret\n+}\n+\n+fn print_target_features(sess: &Session, tm: &llvm::TargetMachine) {\n+    let mut target_features = llvm_target_features(tm);\n+    let mut rustc_target_features = supported_target_features(sess)\n+        .iter()\n+        .filter_map(|(feature, _gate)| {\n+            let llvm_feature = to_llvm_feature(sess, *feature);\n+            // LLVM asserts that these are sorted. LLVM and Rust both use byte comparison for these strings.\n+            target_features.binary_search_by_key(&llvm_feature, |(f, _d)| *f).ok().map(|index| {\n+                let (_f, desc) = target_features.remove(index);\n+                (*feature, desc)\n+            })\n+        })\n+        .collect::<Vec<_>>();\n+    rustc_target_features.extend_from_slice(&[(\n+        \"crt-static\",\n+        \"Enables C Run-time Libraries to be statically linked\",\n+    )]);\n+    let max_feature_len = target_features\n+        .iter()\n+        .chain(rustc_target_features.iter())\n+        .map(|(feature, _desc)| feature.len())\n+        .max()\n+        .unwrap_or(0);\n+\n+    println!(\"Features supported by rustc for this target:\");\n+    for (feature, desc) in &rustc_target_features {\n+        println!(\"    {1:0$} - {2}.\", max_feature_len, feature, desc);\n+    }\n+    println!(\"\\nCode-generation features supported by LLVM for this target:\");\n+    for (feature, desc) in &target_features {\n+        println!(\"    {1:0$} - {2}.\", max_feature_len, feature, desc);\n+    }\n+    if target_features.len() == 0 {\n+        println!(\"    Target features listing is not supported by this LLVM version.\");\n+    }\n+    println!(\"\\nUse +feature to enable a feature, or -feature to disable it.\");\n+    println!(\"For example, rustc -C target-cpu=mycpu -C target-feature=+feature1,-feature2\\n\");\n+    println!(\"Code-generation features cannot be used in cfg or #[target_feature],\");\n+    println!(\"and may be renamed or removed in a future version of LLVM or rustc.\\n\");\n+}\n+\n pub(crate) fn print(req: PrintRequest, sess: &Session) {\n     require_inited();\n     let tm = create_informational_target_machine(sess);\n-    unsafe {\n-        match req {\n-            PrintRequest::TargetCPUs => llvm::LLVMRustPrintTargetCPUs(tm),\n-            PrintRequest::TargetFeatures => llvm::LLVMRustPrintTargetFeatures(tm),\n-            _ => bug!(\"rustc_codegen_llvm can't handle print request: {:?}\", req),\n-        }\n+    match req {\n+        PrintRequest::TargetCPUs => unsafe { llvm::LLVMRustPrintTargetCPUs(tm) },\n+        PrintRequest::TargetFeatures => print_target_features(sess, tm),\n+        _ => bug!(\"rustc_codegen_llvm can't handle print request: {:?}\", req),\n     }\n }\n "}, {"sha": "617b2ed970eee6a96b78e01db97d13e549193907", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/dae9d6ac3e9a8fb389cfe471b30f4d72c3122196/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/dae9d6ac3e9a8fb389cfe471b30f4d72c3122196/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=dae9d6ac3e9a8fb389cfe471b30f4d72c3122196", "patch": "@@ -404,26 +404,21 @@ extern \"C\" void LLVMRustPrintTargetCPUs(LLVMTargetMachineRef TM) {\n   printf(\"\\n\");\n }\n \n-extern \"C\" void LLVMRustPrintTargetFeatures(LLVMTargetMachineRef TM) {\n+extern \"C\" size_t LLVMRustGetTargetFeaturesCount(LLVMTargetMachineRef TM) {\n   const TargetMachine *Target = unwrap(TM);\n   const MCSubtargetInfo *MCInfo = Target->getMCSubtargetInfo();\n   const ArrayRef<SubtargetFeatureKV> FeatTable = MCInfo->getFeatureTable();\n-  unsigned MaxFeatLen = getLongestEntryLength(FeatTable);\n-\n-  printf(\"Available features for this target:\\n\");\n-  for (auto &Feature : FeatTable)\n-    printf(\"    %-*s - %s.\\n\", MaxFeatLen, Feature.Key, Feature.Desc);\n-  printf(\"\\nRust-specific features:\\n\");\n-  printf(\"    %-*s - %s.\\n\",\n-    MaxFeatLen,\n-    \"crt-static\",\n-    \"Enables libraries with C Run-time Libraries(CRT) to be statically linked\"\n-  );\n-  printf(\"\\n\");\n+  return FeatTable.size();\n+}\n \n-  printf(\"Use +feature to enable a feature, or -feature to disable it.\\n\"\n-         \"For example, rustc -C -target-cpu=mycpu -C \"\n-         \"target-feature=+feature1,-feature2\\n\\n\");\n+extern \"C\" void LLVMRustGetTargetFeature(LLVMTargetMachineRef TM, size_t Index,\n+                                         const char** Feature, const char** Desc) {\n+  const TargetMachine *Target = unwrap(TM);\n+  const MCSubtargetInfo *MCInfo = Target->getMCSubtargetInfo();\n+  const ArrayRef<SubtargetFeatureKV> FeatTable = MCInfo->getFeatureTable();\n+  const SubtargetFeatureKV Feat = FeatTable[Index];\n+  *Feature = Feat.Key;\n+  *Desc = Feat.Desc;\n }\n \n #else\n@@ -432,9 +427,11 @@ extern \"C\" void LLVMRustPrintTargetCPUs(LLVMTargetMachineRef) {\n   printf(\"Target CPU help is not supported by this LLVM version.\\n\\n\");\n }\n \n-extern \"C\" void LLVMRustPrintTargetFeatures(LLVMTargetMachineRef) {\n-  printf(\"Target features help is not supported by this LLVM version.\\n\\n\");\n+extern \"C\" size_t LLVMRustGetTargetFeaturesCount(LLVMTargetMachineRef) {\n+  return 0;\n }\n+\n+extern \"C\" void LLVMRustGetTargetFeature(LLVMTargetMachineRef, const char**, const char**) {}\n #endif\n \n extern \"C\" const char* LLVMRustGetHostCPUName(size_t *len) {"}]}