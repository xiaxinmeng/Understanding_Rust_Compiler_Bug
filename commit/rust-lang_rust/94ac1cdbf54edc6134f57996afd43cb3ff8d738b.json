{"sha": "94ac1cdbf54edc6134f57996afd43cb3ff8d738b", "node_id": "C_kwDOAAsO6NoAKDk0YWMxY2RiZjU0ZWRjNjEzNGY1Nzk5NmFmZDQzY2IzZmY4ZDczOGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-02T10:34:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-02T10:34:53Z"}, "message": "Auto merge of #14715 - Veykril:symbol-index, r=Veykril\n\nRefactor symbol index\n\nCloses https://github.com/rust-lang/rust-analyzer/issues/14677\n\ninstead of eagerly fetching the source data in symbol index we do it lazily now, this shouldn't make it much more expensive as we had to parse the source most of the time anyways even after fetching.", "tree": {"sha": "d4684580cf3d72572052db8210acdaaf7ff9bffd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4684580cf3d72572052db8210acdaaf7ff9bffd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94ac1cdbf54edc6134f57996afd43cb3ff8d738b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94ac1cdbf54edc6134f57996afd43cb3ff8d738b", "html_url": "https://github.com/rust-lang/rust/commit/94ac1cdbf54edc6134f57996afd43cb3ff8d738b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86b14c2458870ea756168fbe572a09cbe2cbc5eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/86b14c2458870ea756168fbe572a09cbe2cbc5eb", "html_url": "https://github.com/rust-lang/rust/commit/86b14c2458870ea756168fbe572a09cbe2cbc5eb"}, {"sha": "f501c6a5167fff7e0343f8d8ac7bc3a1f505e674", "url": "https://api.github.com/repos/rust-lang/rust/commits/f501c6a5167fff7e0343f8d8ac7bc3a1f505e674", "html_url": "https://github.com/rust-lang/rust/commit/f501c6a5167fff7e0343f8d8ac7bc3a1f505e674"}], "stats": {"total": 1106, "additions": 422, "deletions": 684}, "files": [{"sha": "49417d945ce0e1e27a9d4f5689581b62b223927c", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 91, "deletions": 6, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=94ac1cdbf54edc6134f57996afd43cb3ff8d738b", "patch": "@@ -51,7 +51,7 @@ use hir_def::{\n     per_ns::PerNs,\n     resolver::{HasResolver, Resolver},\n     src::HasSource as _,\n-    AdtId, AssocItemId, AssocItemLoc, AttrDefId, ConstId, ConstParamId, DefWithBodyId, EnumId,\n+    AssocItemId, AssocItemLoc, AttrDefId, ConstId, ConstParamId, DefWithBodyId, EnumId,\n     EnumVariantId, FunctionId, GenericDefId, HasModule, ImplId, ItemContainerId, LifetimeParamId,\n     LocalEnumVariantId, LocalFieldId, Lookup, MacroExpander, MacroId, ModuleId, StaticId, StructId,\n     TraitAliasId, TraitId, TypeAliasId, TypeOrConstParamId, TypeParamId, UnionId,\n@@ -119,11 +119,9 @@ pub use {\n         path::{ModPath, PathKind},\n         type_ref::{Mutability, TypeRef},\n         visibility::Visibility,\n-        // FIXME: This is here since it is input of a method in `HirWrite`\n-        // and things outside of hir need to implement that trait. We probably\n-        // should move whole `hir_ty::display` to this crate so we will become\n-        // able to use `ModuleDef` or `Definition` instead of `ModuleDefId`.\n-        ModuleDefId,\n+        // FIXME: This is here since some queries take it as input that are used\n+        // outside of hir.\n+        {AdtId, ModuleDefId},\n     },\n     hir_expand::{\n         attrs::Attr,\n@@ -4429,3 +4427,90 @@ impl HasCrate for Module {\n         Module::krate(*self)\n     }\n }\n+\n+pub trait HasContainer {\n+    fn container(&self, db: &dyn HirDatabase) -> ItemContainer;\n+}\n+\n+impl HasContainer for Module {\n+    fn container(&self, db: &dyn HirDatabase) -> ItemContainer {\n+        // FIXME: handle block expressions as modules (their parent is in a different DefMap)\n+        let def_map = self.id.def_map(db.upcast());\n+        match def_map[self.id.local_id].parent {\n+            Some(parent_id) => ItemContainer::Module(Module { id: def_map.module_id(parent_id) }),\n+            None => ItemContainer::Crate(def_map.krate()),\n+        }\n+    }\n+}\n+\n+impl HasContainer for Function {\n+    fn container(&self, db: &dyn HirDatabase) -> ItemContainer {\n+        container_id_to_hir(self.id.lookup(db.upcast()).container)\n+    }\n+}\n+\n+impl HasContainer for Struct {\n+    fn container(&self, db: &dyn HirDatabase) -> ItemContainer {\n+        ItemContainer::Module(Module { id: self.id.lookup(db.upcast()).container })\n+    }\n+}\n+\n+impl HasContainer for Union {\n+    fn container(&self, db: &dyn HirDatabase) -> ItemContainer {\n+        ItemContainer::Module(Module { id: self.id.lookup(db.upcast()).container })\n+    }\n+}\n+\n+impl HasContainer for Enum {\n+    fn container(&self, db: &dyn HirDatabase) -> ItemContainer {\n+        ItemContainer::Module(Module { id: self.id.lookup(db.upcast()).container })\n+    }\n+}\n+\n+impl HasContainer for TypeAlias {\n+    fn container(&self, db: &dyn HirDatabase) -> ItemContainer {\n+        container_id_to_hir(self.id.lookup(db.upcast()).container)\n+    }\n+}\n+\n+impl HasContainer for Const {\n+    fn container(&self, db: &dyn HirDatabase) -> ItemContainer {\n+        container_id_to_hir(self.id.lookup(db.upcast()).container)\n+    }\n+}\n+\n+impl HasContainer for Static {\n+    fn container(&self, db: &dyn HirDatabase) -> ItemContainer {\n+        container_id_to_hir(self.id.lookup(db.upcast()).container)\n+    }\n+}\n+\n+impl HasContainer for Trait {\n+    fn container(&self, db: &dyn HirDatabase) -> ItemContainer {\n+        ItemContainer::Module(Module { id: self.id.lookup(db.upcast()).container })\n+    }\n+}\n+\n+impl HasContainer for TraitAlias {\n+    fn container(&self, db: &dyn HirDatabase) -> ItemContainer {\n+        ItemContainer::Module(Module { id: self.id.lookup(db.upcast()).container })\n+    }\n+}\n+\n+fn container_id_to_hir(c: ItemContainerId) -> ItemContainer {\n+    match c {\n+        ItemContainerId::ExternBlockId(_id) => ItemContainer::ExternBlock(),\n+        ItemContainerId::ModuleId(id) => ItemContainer::Module(Module { id }),\n+        ItemContainerId::ImplId(id) => ItemContainer::Impl(Impl { id }),\n+        ItemContainerId::TraitId(id) => ItemContainer::Trait(Trait { id }),\n+    }\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum ItemContainer {\n+    Trait(Trait),\n+    Impl(Impl),\n+    Module(Module),\n+    ExternBlock(),\n+    Crate(CrateId),\n+}"}, {"sha": "386758ccab4c59e79910b1a630bdb55aa1ebb320", "filename": "crates/hir/src/symbols.rs", "status": "modified", "additions": 36, "deletions": 195, "changes": 231, "blob_url": "https://github.com/rust-lang/rust/blob/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/crates%2Fhir%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/crates%2Fhir%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsymbols.rs?ref=94ac1cdbf54edc6134f57996afd43cb3ff8d738b", "patch": "@@ -1,89 +1,20 @@\n //! File symbol extraction.\n \n-use base_db::FileRange;\n use hir_def::{\n-    item_tree::ItemTreeNode, src::HasSource, AdtId, AssocItemId, AssocItemLoc, DefWithBodyId,\n-    HasModule, ImplId, ItemContainerId, Lookup, MacroId, ModuleDefId, ModuleId, TraitId,\n+    AdtId, AssocItemId, DefWithBodyId, HasModule, ImplId, MacroId, ModuleDefId, ModuleId, TraitId,\n };\n-use hir_expand::{HirFileId, InFile};\n use hir_ty::db::HirDatabase;\n-use syntax::{ast::HasName, AstNode, SmolStr, SyntaxNode, SyntaxNodePtr};\n+use syntax::SmolStr;\n \n-use crate::{Module, Semantics};\n+use crate::{Module, ModuleDef};\n \n /// The actual data that is stored in the index. It should be as compact as\n /// possible.\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct FileSymbol {\n+    // even though name can be derived from the def, we store it for efficiency\n     pub name: SmolStr,\n-    pub loc: DeclarationLocation,\n-    pub kind: FileSymbolKind,\n-    pub container_name: Option<SmolStr>,\n-}\n-\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct DeclarationLocation {\n-    /// The file id for both the `ptr` and `name_ptr`.\n-    pub hir_file_id: HirFileId,\n-    /// This points to the whole syntax node of the declaration.\n-    pub ptr: SyntaxNodePtr,\n-    /// This points to the [`syntax::ast::Name`] identifier of the declaration.\n-    pub name_ptr: SyntaxNodePtr,\n-}\n-\n-impl DeclarationLocation {\n-    pub fn syntax<DB: HirDatabase>(&self, sema: &Semantics<'_, DB>) -> SyntaxNode {\n-        let root = sema.parse_or_expand(self.hir_file_id);\n-        self.ptr.to_node(&root)\n-    }\n-\n-    pub fn original_range(&self, db: &dyn HirDatabase) -> FileRange {\n-        let node = resolve_node(db, self.hir_file_id, &self.ptr);\n-        node.as_ref().original_file_range(db.upcast())\n-    }\n-\n-    pub fn original_name_range(&self, db: &dyn HirDatabase) -> Option<FileRange> {\n-        let node = resolve_node(db, self.hir_file_id, &self.name_ptr);\n-        node.as_ref().original_file_range_opt(db.upcast())\n-    }\n-}\n-\n-fn resolve_node(\n-    db: &dyn HirDatabase,\n-    file_id: HirFileId,\n-    ptr: &SyntaxNodePtr,\n-) -> InFile<SyntaxNode> {\n-    let root = db.parse_or_expand(file_id);\n-    let node = ptr.to_node(&root);\n-    InFile::new(file_id, node)\n-}\n-\n-#[derive(PartialEq, Eq, Hash, Clone, Copy, Debug)]\n-pub enum FileSymbolKind {\n-    Const,\n-    Enum,\n-    Function,\n-    Macro,\n-    Module,\n-    Static,\n-    Struct,\n-    Trait,\n-    TraitAlias,\n-    TypeAlias,\n-    Union,\n-}\n-\n-impl FileSymbolKind {\n-    pub fn is_type(self: FileSymbolKind) -> bool {\n-        matches!(\n-            self,\n-            FileSymbolKind::Struct\n-                | FileSymbolKind::Enum\n-                | FileSymbolKind::Trait\n-                | FileSymbolKind::TypeAlias\n-                | FileSymbolKind::Union\n-        )\n-    }\n+    pub def: ModuleDef,\n }\n \n /// Represents an outstanding module that the symbol collector must collect symbols from.\n@@ -146,36 +77,34 @@ impl<'a> SymbolCollector<'a> {\n             match module_def_id {\n                 ModuleDefId::ModuleId(id) => self.push_module(id),\n                 ModuleDefId::FunctionId(id) => {\n-                    self.push_decl_assoc(id, FileSymbolKind::Function);\n+                    self.push_decl(id);\n                     self.collect_from_body(id);\n                 }\n-                ModuleDefId::AdtId(AdtId::StructId(id)) => {\n-                    self.push_decl(id, FileSymbolKind::Struct)\n-                }\n-                ModuleDefId::AdtId(AdtId::EnumId(id)) => self.push_decl(id, FileSymbolKind::Enum),\n-                ModuleDefId::AdtId(AdtId::UnionId(id)) => self.push_decl(id, FileSymbolKind::Union),\n+                ModuleDefId::AdtId(AdtId::StructId(id)) => self.push_decl(id),\n+                ModuleDefId::AdtId(AdtId::EnumId(id)) => self.push_decl(id),\n+                ModuleDefId::AdtId(AdtId::UnionId(id)) => self.push_decl(id),\n                 ModuleDefId::ConstId(id) => {\n-                    self.push_decl_assoc(id, FileSymbolKind::Const);\n+                    self.push_decl(id);\n                     self.collect_from_body(id);\n                 }\n                 ModuleDefId::StaticId(id) => {\n-                    self.push_decl_assoc(id, FileSymbolKind::Static);\n+                    self.push_decl(id);\n                     self.collect_from_body(id);\n                 }\n                 ModuleDefId::TraitId(id) => {\n-                    self.push_decl(id, FileSymbolKind::Trait);\n+                    self.push_decl(id);\n                     self.collect_from_trait(id);\n                 }\n                 ModuleDefId::TraitAliasId(id) => {\n-                    self.push_decl(id, FileSymbolKind::TraitAlias);\n+                    self.push_decl(id);\n                 }\n                 ModuleDefId::TypeAliasId(id) => {\n-                    self.push_decl_assoc(id, FileSymbolKind::TypeAlias);\n+                    self.push_decl(id);\n                 }\n                 ModuleDefId::MacroId(id) => match id {\n-                    MacroId::Macro2Id(id) => self.push_decl(id, FileSymbolKind::Macro),\n-                    MacroId::MacroRulesId(id) => self.push_decl(id, FileSymbolKind::Macro),\n-                    MacroId::ProcMacroId(id) => self.push_decl(id, FileSymbolKind::Macro),\n+                    MacroId::Macro2Id(id) => self.push_decl(id),\n+                    MacroId::MacroRulesId(id) => self.push_decl(id),\n+                    MacroId::ProcMacroId(id) => self.push_decl(id),\n                 },\n                 // Don't index these.\n                 ModuleDefId::BuiltinType(_) => {}\n@@ -195,9 +124,9 @@ impl<'a> SymbolCollector<'a> {\n             for &id in id {\n                 if id.module(self.db.upcast()) == module_id {\n                     match id {\n-                        MacroId::Macro2Id(id) => self.push_decl(id, FileSymbolKind::Macro),\n-                        MacroId::MacroRulesId(id) => self.push_decl(id, FileSymbolKind::Macro),\n-                        MacroId::ProcMacroId(id) => self.push_decl(id, FileSymbolKind::Macro),\n+                        MacroId::Macro2Id(id) => self.push_decl(id),\n+                        MacroId::MacroRulesId(id) => self.push_decl(id),\n+                        MacroId::ProcMacroId(id) => self.push_decl(id),\n                     }\n                 }\n             }\n@@ -245,124 +174,36 @@ impl<'a> SymbolCollector<'a> {\n         }\n     }\n \n-    fn current_container_name(&self) -> Option<SmolStr> {\n-        self.current_container_name.clone()\n-    }\n-\n     fn def_with_body_id_name(&self, body_id: DefWithBodyId) -> Option<SmolStr> {\n         match body_id {\n-            DefWithBodyId::FunctionId(id) => Some(\n-                id.lookup(self.db.upcast()).source(self.db.upcast()).value.name()?.text().into(),\n-            ),\n-            DefWithBodyId::StaticId(id) => Some(\n-                id.lookup(self.db.upcast()).source(self.db.upcast()).value.name()?.text().into(),\n-            ),\n-            DefWithBodyId::ConstId(id) => Some(\n-                id.lookup(self.db.upcast()).source(self.db.upcast()).value.name()?.text().into(),\n-            ),\n-            DefWithBodyId::VariantId(id) => Some({\n-                let db = self.db.upcast();\n-                id.parent.lookup(db).source(db).value.name()?.text().into()\n-            }),\n+            DefWithBodyId::FunctionId(id) => Some(self.db.function_data(id).name.to_smol_str()),\n+            DefWithBodyId::StaticId(id) => Some(self.db.static_data(id).name.to_smol_str()),\n+            DefWithBodyId::ConstId(id) => Some(self.db.const_data(id).name.as_ref()?.to_smol_str()),\n+            DefWithBodyId::VariantId(id) => {\n+                Some(self.db.enum_data(id.parent).variants[id.local_id].name.to_smol_str())\n+            }\n         }\n     }\n \n     fn push_assoc_item(&mut self, assoc_item_id: AssocItemId) {\n         match assoc_item_id {\n-            AssocItemId::FunctionId(id) => self.push_decl_assoc(id, FileSymbolKind::Function),\n-            AssocItemId::ConstId(id) => self.push_decl_assoc(id, FileSymbolKind::Const),\n-            AssocItemId::TypeAliasId(id) => self.push_decl_assoc(id, FileSymbolKind::TypeAlias),\n+            AssocItemId::FunctionId(id) => self.push_decl(id),\n+            AssocItemId::ConstId(id) => self.push_decl(id),\n+            AssocItemId::TypeAliasId(id) => self.push_decl(id),\n         }\n     }\n \n-    fn push_decl_assoc<L, T>(&mut self, id: L, kind: FileSymbolKind)\n-    where\n-        L: Lookup<Data = AssocItemLoc<T>>,\n-        T: ItemTreeNode,\n-        <T as ItemTreeNode>::Source: HasName,\n-    {\n-        fn container_name(db: &dyn HirDatabase, container: ItemContainerId) -> Option<SmolStr> {\n-            match container {\n-                ItemContainerId::ModuleId(module_id) => {\n-                    let module = Module::from(module_id);\n-                    module.name(db).and_then(|name| name.as_text())\n-                }\n-                ItemContainerId::TraitId(trait_id) => {\n-                    let trait_data = db.trait_data(trait_id);\n-                    trait_data.name.as_text()\n-                }\n-                ItemContainerId::ImplId(_) | ItemContainerId::ExternBlockId(_) => None,\n-            }\n+    fn push_decl(&mut self, id: impl Into<ModuleDefId>) {\n+        let def = ModuleDef::from(id.into());\n+        if let Some(name) = def.name(self.db) {\n+            self.symbols.push(FileSymbol { name: name.to_smol_str(), def });\n         }\n-\n-        self.push_file_symbol(|s| {\n-            let loc = id.lookup(s.db.upcast());\n-            let source = loc.source(s.db.upcast());\n-            let name_node = source.value.name()?;\n-            let container_name =\n-                container_name(s.db, loc.container).or_else(|| s.current_container_name());\n-\n-            Some(FileSymbol {\n-                name: name_node.text().into(),\n-                kind,\n-                container_name,\n-                loc: DeclarationLocation {\n-                    hir_file_id: source.file_id,\n-                    ptr: SyntaxNodePtr::new(source.value.syntax()),\n-                    name_ptr: SyntaxNodePtr::new(name_node.syntax()),\n-                },\n-            })\n-        })\n-    }\n-\n-    fn push_decl<L>(&mut self, id: L, kind: FileSymbolKind)\n-    where\n-        L: Lookup,\n-        <L as Lookup>::Data: HasSource,\n-        <<L as Lookup>::Data as HasSource>::Value: HasName,\n-    {\n-        self.push_file_symbol(|s| {\n-            let loc = id.lookup(s.db.upcast());\n-            let source = loc.source(s.db.upcast());\n-            let name_node = source.value.name()?;\n-\n-            Some(FileSymbol {\n-                name: name_node.text().into(),\n-                kind,\n-                container_name: s.current_container_name(),\n-                loc: DeclarationLocation {\n-                    hir_file_id: source.file_id,\n-                    ptr: SyntaxNodePtr::new(source.value.syntax()),\n-                    name_ptr: SyntaxNodePtr::new(name_node.syntax()),\n-                },\n-            })\n-        })\n     }\n \n     fn push_module(&mut self, module_id: ModuleId) {\n-        self.push_file_symbol(|s| {\n-            let def_map = module_id.def_map(s.db.upcast());\n-            let module_data = &def_map[module_id.local_id];\n-            let declaration = module_data.origin.declaration()?;\n-            let module = declaration.to_node(s.db.upcast());\n-            let name_node = module.name()?;\n-\n-            Some(FileSymbol {\n-                name: name_node.text().into(),\n-                kind: FileSymbolKind::Module,\n-                container_name: s.current_container_name(),\n-                loc: DeclarationLocation {\n-                    hir_file_id: declaration.file_id,\n-                    ptr: SyntaxNodePtr::new(module.syntax()),\n-                    name_ptr: SyntaxNodePtr::new(name_node.syntax()),\n-                },\n-            })\n-        })\n-    }\n-\n-    fn push_file_symbol(&mut self, f: impl FnOnce(&Self) -> Option<FileSymbol>) {\n-        if let Some(file_symbol) = f(self) {\n-            self.symbols.push(file_symbol);\n+        let def = Module::from(module_id);\n+        if let Some(name) = def.name(self.db) {\n+            self.symbols.push(FileSymbol { name: name.to_smol_str(), def: ModuleDef::Module(def) });\n         }\n     }\n }"}, {"sha": "760834bfafc7bef603f14c8e27cb8ac9728ee706", "filename": "crates/ide-db/src/defs.rs", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/crates%2Fide-db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/crates%2Fide-db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fdefs.rs?ref=94ac1cdbf54edc6134f57996afd43cb3ff8d738b", "patch": "@@ -8,8 +8,8 @@\n use arrayvec::ArrayVec;\n use hir::{\n     Adt, AsAssocItem, AssocItem, BuiltinAttr, BuiltinType, Const, Crate, DeriveHelper, Field,\n-    Function, GenericParam, HasVisibility, Impl, ItemInNs, Label, Local, Macro, Module, ModuleDef,\n-    Name, PathResolution, Semantics, Static, ToolModule, Trait, TraitAlias, TypeAlias, Variant,\n+    Function, GenericParam, HasVisibility, Impl, Label, Local, Macro, Module, ModuleDef, Name,\n+    PathResolution, Semantics, Static, ToolModule, Trait, TraitAlias, TypeAlias, Variant,\n     Visibility,\n };\n use stdx::impl_from;\n@@ -622,22 +622,3 @@ impl From<ModuleDef> for Definition {\n         }\n     }\n }\n-\n-impl From<Definition> for Option<ItemInNs> {\n-    fn from(def: Definition) -> Self {\n-        let item = match def {\n-            Definition::Module(it) => ModuleDef::Module(it),\n-            Definition::Function(it) => ModuleDef::Function(it),\n-            Definition::Adt(it) => ModuleDef::Adt(it),\n-            Definition::Variant(it) => ModuleDef::Variant(it),\n-            Definition::Const(it) => ModuleDef::Const(it),\n-            Definition::Static(it) => ModuleDef::Static(it),\n-            Definition::Trait(it) => ModuleDef::Trait(it),\n-            Definition::TraitAlias(it) => ModuleDef::TraitAlias(it),\n-            Definition::TypeAlias(it) => ModuleDef::TypeAlias(it),\n-            Definition::BuiltinType(it) => ModuleDef::BuiltinType(it),\n-            _ => return None,\n-        };\n-        Some(ItemInNs::from(item))\n-    }\n-}"}, {"sha": "46f1353e2e1b0967b95c0daab774fb89b01e59ca", "filename": "crates/ide-db/src/items_locator.rs", "status": "modified", "additions": 4, "deletions": 27, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/crates%2Fide-db%2Fsrc%2Fitems_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/crates%2Fide-db%2Fsrc%2Fitems_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fitems_locator.rs?ref=94ac1cdbf54edc6134f57996afd43cb3ff8d738b", "patch": "@@ -5,17 +5,11 @@\n use either::Either;\n use hir::{\n     import_map::{self, ImportKind},\n-    symbols::FileSymbol,\n     AsAssocItem, Crate, ItemInNs, Semantics,\n };\n use limit::Limit;\n-use syntax::{ast, AstNode, SyntaxKind::NAME};\n \n-use crate::{\n-    defs::{Definition, NameClass},\n-    imports::import_assets::NameToImport,\n-    symbol_index, RootDatabase,\n-};\n+use crate::{imports::import_assets::NameToImport, symbol_index, RootDatabase};\n \n /// A value to use, when uncertain which limit to pick.\n pub static DEFAULT_QUERY_SEARCH_LIMIT: Limit = Limit::new(40);\n@@ -118,10 +112,9 @@ fn find_items<'a>(\n     let local_results = local_query\n         .search(&symbol_index::crate_symbols(db, krate))\n         .into_iter()\n-        .filter_map(move |local_candidate| get_name_definition(sema, &local_candidate))\n-        .filter_map(|name_definition_to_import| match name_definition_to_import {\n-            Definition::Macro(macro_def) => Some(ItemInNs::from(macro_def)),\n-            def => <Option<_>>::from(def),\n+        .filter_map(|local_candidate| match local_candidate.def {\n+            hir::ModuleDef::Macro(macro_def) => Some(ItemInNs::Macros(macro_def)),\n+            def => Some(ItemInNs::from(def)),\n         });\n \n     external_importables.chain(local_results).filter(move |&item| match assoc_item_search {\n@@ -131,22 +124,6 @@ fn find_items<'a>(\n     })\n }\n \n-fn get_name_definition(\n-    sema: &Semantics<'_, RootDatabase>,\n-    import_candidate: &FileSymbol,\n-) -> Option<Definition> {\n-    let _p = profile::span(\"get_name_definition\");\n-\n-    let candidate_node = import_candidate.loc.syntax(sema);\n-    let candidate_name_node = if candidate_node.kind() != NAME {\n-        candidate_node.children().find(|it| it.kind() == NAME)?\n-    } else {\n-        candidate_node\n-    };\n-    let name = ast::Name::cast(candidate_name_node)?;\n-    NameClass::classify(sema, &name)?.defined()\n-}\n-\n fn is_assoc_item(item: ItemInNs, db: &RootDatabase) -> bool {\n     item.as_module_def().and_then(|module_def| module_def.as_assoc_item(db)).is_some()\n }"}, {"sha": "0c6b0f20cf5112f44f4348c3ed567092624fcddd", "filename": "crates/ide-db/src/lib.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/crates%2Fide-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/crates%2Fide-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Flib.rs?ref=94ac1cdbf54edc6134f57996afd43cb3ff8d738b", "patch": "@@ -49,10 +49,7 @@ use base_db::{\n     salsa::{self, Durability},\n     AnchoredPath, CrateId, FileId, FileLoader, FileLoaderDelegate, SourceDatabase, Upcast,\n };\n-use hir::{\n-    db::{DefDatabase, ExpandDatabase, HirDatabase},\n-    symbols::FileSymbolKind,\n-};\n+use hir::db::{DefDatabase, ExpandDatabase, HirDatabase};\n \n use crate::{line_index::LineIndex, symbol_index::SymbolsDatabase};\n pub use rustc_hash::{FxHashMap, FxHashSet, FxHasher};\n@@ -378,20 +375,22 @@ impl From<hir::MacroKind> for SymbolKind {\n     }\n }\n \n-impl From<FileSymbolKind> for SymbolKind {\n-    fn from(it: FileSymbolKind) -> Self {\n+impl From<hir::ModuleDefId> for SymbolKind {\n+    fn from(it: hir::ModuleDefId) -> Self {\n         match it {\n-            FileSymbolKind::Const => SymbolKind::Const,\n-            FileSymbolKind::Enum => SymbolKind::Enum,\n-            FileSymbolKind::Function => SymbolKind::Function,\n-            FileSymbolKind::Macro => SymbolKind::Macro,\n-            FileSymbolKind::Module => SymbolKind::Module,\n-            FileSymbolKind::Static => SymbolKind::Static,\n-            FileSymbolKind::Struct => SymbolKind::Struct,\n-            FileSymbolKind::Trait => SymbolKind::Trait,\n-            FileSymbolKind::TraitAlias => SymbolKind::TraitAlias,\n-            FileSymbolKind::TypeAlias => SymbolKind::TypeAlias,\n-            FileSymbolKind::Union => SymbolKind::Union,\n+            hir::ModuleDefId::ConstId(..) => SymbolKind::Const,\n+            hir::ModuleDefId::EnumVariantId(..) => SymbolKind::Variant,\n+            hir::ModuleDefId::FunctionId(..) => SymbolKind::Function,\n+            hir::ModuleDefId::MacroId(..) => SymbolKind::Macro,\n+            hir::ModuleDefId::ModuleId(..) => SymbolKind::Module,\n+            hir::ModuleDefId::StaticId(..) => SymbolKind::Static,\n+            hir::ModuleDefId::AdtId(hir::AdtId::StructId(..)) => SymbolKind::Struct,\n+            hir::ModuleDefId::AdtId(hir::AdtId::EnumId(..)) => SymbolKind::Enum,\n+            hir::ModuleDefId::AdtId(hir::AdtId::UnionId(..)) => SymbolKind::Union,\n+            hir::ModuleDefId::TraitId(..) => SymbolKind::Trait,\n+            hir::ModuleDefId::TraitAliasId(..) => SymbolKind::TraitAlias,\n+            hir::ModuleDefId::TypeAliasId(..) => SymbolKind::TypeAlias,\n+            hir::ModuleDefId::BuiltinType(..) => SymbolKind::TypeAlias,\n         }\n     }\n }"}, {"sha": "a6f86c83df7a3f6e5eeaa17c5ba501ac83fb95f1", "filename": "crates/ide-db/src/symbol_index.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/crates%2Fide-db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/crates%2Fide-db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsymbol_index.rs?ref=94ac1cdbf54edc6134f57996afd43cb3ff8d738b", "patch": "@@ -317,7 +317,14 @@ impl Query {\n                 let (start, end) = SymbolIndex::map_value_to_range(indexed_value.value);\n \n                 for symbol in &symbol_index.symbols[start..end] {\n-                    if self.only_types && !symbol.kind.is_type() {\n+                    if self.only_types\n+                        && !matches!(\n+                            symbol.def,\n+                            hir::ModuleDef::Adt(..)\n+                                | hir::ModuleDef::TypeAlias(..)\n+                                | hir::ModuleDef::BuiltinType(..)\n+                        )\n+                    {\n                         continue;\n                     }\n                     if self.exact {"}, {"sha": "1223e8d6b69ede93627eaf9ab9e17e42d75960ed", "filename": "crates/ide-db/src/test_data/test_symbol_index_collection.txt", "status": "modified", "additions": 157, "deletions": 311, "changes": 468, "blob_url": "https://github.com/rust-lang/rust/blob/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/crates%2Fide-db%2Fsrc%2Ftest_data%2Ftest_symbol_index_collection.txt", "raw_url": "https://github.com/rust-lang/rust/raw/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/crates%2Fide-db%2Fsrc%2Ftest_data%2Ftest_symbol_index_collection.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Ftest_data%2Ftest_symbol_index_collection.txt?ref=94ac1cdbf54edc6134f57996afd43cb3ff8d738b", "patch": "@@ -10,368 +10,226 @@\n         [\n             FileSymbol {\n                 name: \"Alias\",\n-                loc: DeclarationLocation {\n-                    hir_file_id: HirFileId(\n-                        0,\n-                    ),\n-                    ptr: SyntaxNodePtr {\n-                        kind: TYPE_ALIAS,\n-                        range: 397..417,\n-                    },\n-                    name_ptr: SyntaxNodePtr {\n-                        kind: NAME,\n-                        range: 402..407,\n+                def: TypeAlias(\n+                    TypeAlias {\n+                        id: TypeAliasId(\n+                            0,\n+                        ),\n                     },\n-                },\n-                kind: TypeAlias,\n-                container_name: None,\n+                ),\n             },\n             FileSymbol {\n                 name: \"CONST\",\n-                loc: DeclarationLocation {\n-                    hir_file_id: HirFileId(\n-                        0,\n-                    ),\n-                    ptr: SyntaxNodePtr {\n-                        kind: CONST,\n-                        range: 340..361,\n+                def: Const(\n+                    Const {\n+                        id: ConstId(\n+                            0,\n+                        ),\n                     },\n-                    name_ptr: SyntaxNodePtr {\n-                        kind: NAME,\n-                        range: 346..351,\n-                    },\n-                },\n-                kind: Const,\n-                container_name: None,\n+                ),\n             },\n             FileSymbol {\n                 name: \"CONST_WITH_INNER\",\n-                loc: DeclarationLocation {\n-                    hir_file_id: HirFileId(\n-                        0,\n-                    ),\n-                    ptr: SyntaxNodePtr {\n-                        kind: CONST,\n-                        range: 520..592,\n-                    },\n-                    name_ptr: SyntaxNodePtr {\n-                        kind: NAME,\n-                        range: 526..542,\n+                def: Const(\n+                    Const {\n+                        id: ConstId(\n+                            2,\n+                        ),\n                     },\n-                },\n-                kind: Const,\n-                container_name: None,\n+                ),\n             },\n             FileSymbol {\n                 name: \"Enum\",\n-                loc: DeclarationLocation {\n-                    hir_file_id: HirFileId(\n-                        0,\n+                def: Adt(\n+                    Enum(\n+                        Enum {\n+                            id: EnumId(\n+                                0,\n+                            ),\n+                        },\n                     ),\n-                    ptr: SyntaxNodePtr {\n-                        kind: ENUM,\n-                        range: 185..207,\n-                    },\n-                    name_ptr: SyntaxNodePtr {\n-                        kind: NAME,\n-                        range: 190..194,\n-                    },\n-                },\n-                kind: Enum,\n-                container_name: None,\n+                ),\n             },\n             FileSymbol {\n                 name: \"Macro\",\n-                loc: DeclarationLocation {\n-                    hir_file_id: HirFileId(\n-                        0,\n-                    ),\n-                    ptr: SyntaxNodePtr {\n-                        kind: MACRO_DEF,\n-                        range: 153..168,\n-                    },\n-                    name_ptr: SyntaxNodePtr {\n-                        kind: NAME,\n-                        range: 159..164,\n+                def: Macro(\n+                    Macro {\n+                        id: Macro2Id(\n+                            Macro2Id(\n+                                0,\n+                            ),\n+                        ),\n                     },\n-                },\n-                kind: Macro,\n-                container_name: None,\n+                ),\n             },\n             FileSymbol {\n                 name: \"STATIC\",\n-                loc: DeclarationLocation {\n-                    hir_file_id: HirFileId(\n-                        0,\n-                    ),\n-                    ptr: SyntaxNodePtr {\n-                        kind: STATIC,\n-                        range: 362..396,\n+                def: Static(\n+                    Static {\n+                        id: StaticId(\n+                            0,\n+                        ),\n                     },\n-                    name_ptr: SyntaxNodePtr {\n-                        kind: NAME,\n-                        range: 369..375,\n-                    },\n-                },\n-                kind: Static,\n-                container_name: None,\n+                ),\n             },\n             FileSymbol {\n                 name: \"Struct\",\n-                loc: DeclarationLocation {\n-                    hir_file_id: HirFileId(\n-                        0,\n+                def: Adt(\n+                    Struct(\n+                        Struct {\n+                            id: StructId(\n+                                1,\n+                            ),\n+                        },\n                     ),\n-                    ptr: SyntaxNodePtr {\n-                        kind: STRUCT,\n-                        range: 170..184,\n-                    },\n-                    name_ptr: SyntaxNodePtr {\n-                        kind: NAME,\n-                        range: 177..183,\n-                    },\n-                },\n-                kind: Struct,\n-                container_name: None,\n+                ),\n             },\n             FileSymbol {\n                 name: \"StructFromMacro\",\n-                loc: DeclarationLocation {\n-                    hir_file_id: HirFileId(\n-                        2147483648,\n+                def: Adt(\n+                    Struct(\n+                        Struct {\n+                            id: StructId(\n+                                0,\n+                            ),\n+                        },\n                     ),\n-                    ptr: SyntaxNodePtr {\n-                        kind: STRUCT,\n-                        range: 0..22,\n-                    },\n-                    name_ptr: SyntaxNodePtr {\n-                        kind: NAME,\n-                        range: 6..21,\n-                    },\n-                },\n-                kind: Struct,\n-                container_name: None,\n+                ),\n             },\n             FileSymbol {\n                 name: \"StructInFn\",\n-                loc: DeclarationLocation {\n-                    hir_file_id: HirFileId(\n-                        0,\n+                def: Adt(\n+                    Struct(\n+                        Struct {\n+                            id: StructId(\n+                                4,\n+                            ),\n+                        },\n                     ),\n-                    ptr: SyntaxNodePtr {\n-                        kind: STRUCT,\n-                        range: 318..336,\n-                    },\n-                    name_ptr: SyntaxNodePtr {\n-                        kind: NAME,\n-                        range: 325..335,\n-                    },\n-                },\n-                kind: Struct,\n-                container_name: Some(\n-                    \"main\",\n                 ),\n             },\n             FileSymbol {\n                 name: \"StructInNamedConst\",\n-                loc: DeclarationLocation {\n-                    hir_file_id: HirFileId(\n-                        0,\n+                def: Adt(\n+                    Struct(\n+                        Struct {\n+                            id: StructId(\n+                                5,\n+                            ),\n+                        },\n                     ),\n-                    ptr: SyntaxNodePtr {\n-                        kind: STRUCT,\n-                        range: 555..581,\n-                    },\n-                    name_ptr: SyntaxNodePtr {\n-                        kind: NAME,\n-                        range: 562..580,\n-                    },\n-                },\n-                kind: Struct,\n-                container_name: Some(\n-                    \"CONST_WITH_INNER\",\n                 ),\n             },\n             FileSymbol {\n                 name: \"StructInUnnamedConst\",\n-                loc: DeclarationLocation {\n-                    hir_file_id: HirFileId(\n-                        0,\n+                def: Adt(\n+                    Struct(\n+                        Struct {\n+                            id: StructId(\n+                                6,\n+                            ),\n+                        },\n                     ),\n-                    ptr: SyntaxNodePtr {\n-                        kind: STRUCT,\n-                        range: 479..507,\n-                    },\n-                    name_ptr: SyntaxNodePtr {\n-                        kind: NAME,\n-                        range: 486..506,\n-                    },\n-                },\n-                kind: Struct,\n-                container_name: None,\n+                ),\n             },\n             FileSymbol {\n                 name: \"Trait\",\n-                loc: DeclarationLocation {\n-                    hir_file_id: HirFileId(\n-                        0,\n-                    ),\n-                    ptr: SyntaxNodePtr {\n-                        kind: TRAIT,\n-                        range: 261..300,\n+                def: Trait(\n+                    Trait {\n+                        id: TraitId(\n+                            0,\n+                        ),\n                     },\n-                    name_ptr: SyntaxNodePtr {\n-                        kind: NAME,\n-                        range: 267..272,\n-                    },\n-                },\n-                kind: Trait,\n-                container_name: None,\n+                ),\n             },\n             FileSymbol {\n                 name: \"Union\",\n-                loc: DeclarationLocation {\n-                    hir_file_id: HirFileId(\n-                        0,\n+                def: Adt(\n+                    Union(\n+                        Union {\n+                            id: UnionId(\n+                                0,\n+                            ),\n+                        },\n                     ),\n-                    ptr: SyntaxNodePtr {\n-                        kind: UNION,\n-                        range: 208..222,\n-                    },\n-                    name_ptr: SyntaxNodePtr {\n-                        kind: NAME,\n-                        range: 214..219,\n-                    },\n-                },\n-                kind: Union,\n-                container_name: None,\n+                ),\n             },\n             FileSymbol {\n                 name: \"a_mod\",\n-                loc: DeclarationLocation {\n-                    hir_file_id: HirFileId(\n-                        0,\n-                    ),\n-                    ptr: SyntaxNodePtr {\n-                        kind: MODULE,\n-                        range: 419..457,\n+                def: Module(\n+                    Module {\n+                        id: ModuleId {\n+                            krate: Idx::<CrateData>(0),\n+                            block: None,\n+                            local_id: Idx::<ModuleData>(1),\n+                        },\n                     },\n-                    name_ptr: SyntaxNodePtr {\n-                        kind: NAME,\n-                        range: 423..428,\n-                    },\n-                },\n-                kind: Module,\n-                container_name: None,\n+                ),\n             },\n             FileSymbol {\n                 name: \"b_mod\",\n-                loc: DeclarationLocation {\n-                    hir_file_id: HirFileId(\n-                        0,\n-                    ),\n-                    ptr: SyntaxNodePtr {\n-                        kind: MODULE,\n-                        range: 594..604,\n-                    },\n-                    name_ptr: SyntaxNodePtr {\n-                        kind: NAME,\n-                        range: 598..603,\n+                def: Module(\n+                    Module {\n+                        id: ModuleId {\n+                            krate: Idx::<CrateData>(0),\n+                            block: None,\n+                            local_id: Idx::<ModuleData>(2),\n+                        },\n                     },\n-                },\n-                kind: Module,\n-                container_name: None,\n+                ),\n             },\n             FileSymbol {\n                 name: \"define_struct\",\n-                loc: DeclarationLocation {\n-                    hir_file_id: HirFileId(\n-                        0,\n-                    ),\n-                    ptr: SyntaxNodePtr {\n-                        kind: MACRO_RULES,\n-                        range: 51..131,\n+                def: Macro(\n+                    Macro {\n+                        id: MacroRulesId(\n+                            MacroRulesId(\n+                                1,\n+                            ),\n+                        ),\n                     },\n-                    name_ptr: SyntaxNodePtr {\n-                        kind: NAME,\n-                        range: 64..77,\n-                    },\n-                },\n-                kind: Macro,\n-                container_name: None,\n+                ),\n             },\n             FileSymbol {\n                 name: \"impl_fn\",\n-                loc: DeclarationLocation {\n-                    hir_file_id: HirFileId(\n-                        0,\n-                    ),\n-                    ptr: SyntaxNodePtr {\n-                        kind: FN,\n-                        range: 242..257,\n-                    },\n-                    name_ptr: SyntaxNodePtr {\n-                        kind: NAME,\n-                        range: 245..252,\n+                def: Function(\n+                    Function {\n+                        id: FunctionId(\n+                            2,\n+                        ),\n                     },\n-                },\n-                kind: Function,\n-                container_name: None,\n+                ),\n             },\n             FileSymbol {\n                 name: \"macro_rules_macro\",\n-                loc: DeclarationLocation {\n-                    hir_file_id: HirFileId(\n-                        0,\n-                    ),\n-                    ptr: SyntaxNodePtr {\n-                        kind: MACRO_RULES,\n-                        range: 1..48,\n+                def: Macro(\n+                    Macro {\n+                        id: MacroRulesId(\n+                            MacroRulesId(\n+                                0,\n+                            ),\n+                        ),\n                     },\n-                    name_ptr: SyntaxNodePtr {\n-                        kind: NAME,\n-                        range: 14..31,\n-                    },\n-                },\n-                kind: Macro,\n-                container_name: None,\n+                ),\n             },\n             FileSymbol {\n                 name: \"main\",\n-                loc: DeclarationLocation {\n-                    hir_file_id: HirFileId(\n-                        0,\n-                    ),\n-                    ptr: SyntaxNodePtr {\n-                        kind: FN,\n-                        range: 302..338,\n-                    },\n-                    name_ptr: SyntaxNodePtr {\n-                        kind: NAME,\n-                        range: 305..309,\n+                def: Function(\n+                    Function {\n+                        id: FunctionId(\n+                            0,\n+                        ),\n                     },\n-                },\n-                kind: Function,\n-                container_name: None,\n+                ),\n             },\n             FileSymbol {\n                 name: \"trait_fn\",\n-                loc: DeclarationLocation {\n-                    hir_file_id: HirFileId(\n-                        0,\n-                    ),\n-                    ptr: SyntaxNodePtr {\n-                        kind: FN,\n-                        range: 279..298,\n+                def: Function(\n+                    Function {\n+                        id: FunctionId(\n+                            1,\n+                        ),\n                     },\n-                    name_ptr: SyntaxNodePtr {\n-                        kind: NAME,\n-                        range: 282..290,\n-                    },\n-                },\n-                kind: Function,\n-                container_name: Some(\n-                    \"Trait\",\n                 ),\n             },\n         ],\n@@ -387,21 +245,15 @@\n         [\n             FileSymbol {\n                 name: \"StructInModA\",\n-                loc: DeclarationLocation {\n-                    hir_file_id: HirFileId(\n-                        0,\n+                def: Adt(\n+                    Struct(\n+                        Struct {\n+                            id: StructId(\n+                                2,\n+                            ),\n+                        },\n                     ),\n-                    ptr: SyntaxNodePtr {\n-                        kind: STRUCT,\n-                        range: 435..455,\n-                    },\n-                    name_ptr: SyntaxNodePtr {\n-                        kind: NAME,\n-                        range: 442..454,\n-                    },\n-                },\n-                kind: Struct,\n-                container_name: None,\n+                ),\n             },\n         ],\n     ),\n@@ -416,21 +268,15 @@\n         [\n             FileSymbol {\n                 name: \"StructInModB\",\n-                loc: DeclarationLocation {\n-                    hir_file_id: HirFileId(\n-                        1,\n+                def: Adt(\n+                    Struct(\n+                        Struct {\n+                            id: StructId(\n+                                3,\n+                            ),\n+                        },\n                     ),\n-                    ptr: SyntaxNodePtr {\n-                        kind: STRUCT,\n-                        range: 0..20,\n-                    },\n-                    name_ptr: SyntaxNodePtr {\n-                        kind: NAME,\n-                        range: 7..19,\n-                    },\n-                },\n-                kind: Struct,\n-                container_name: None,\n+                ),\n             },\n         ],\n     ),"}, {"sha": "dd1d0d75c63ee3b1f2941f28f232e9ea3ba804d8", "filename": "crates/ide/src/call_hierarchy.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs?ref=94ac1cdbf54edc6134f57996afd43cb3ff8d738b", "patch": "@@ -263,7 +263,7 @@ mod tests {\n             expect![[\"callee Function FileId(0) 0..14 3..9\"]],\n             expect![[r#\"\n                 caller1 Function FileId(0) 15..45 18..25 : [34..40]\n-                test_caller Function FileId(0) 95..149 110..121 : [134..140]\"#]],\n+                test_caller Function FileId(0) 95..149 110..121 tests : [134..140]\"#]],\n             expect![[]],\n         );\n     }\n@@ -283,7 +283,7 @@ fn caller() {\n //- /foo/mod.rs\n pub fn callee() {}\n \"#,\n-            expect![[\"callee Function FileId(1) 0..18 7..13\"]],\n+            expect![\"callee Function FileId(1) 0..18 7..13 foo\"],\n             expect![[\"caller Function FileId(0) 27..56 30..36 : [45..51]\"]],\n             expect![[]],\n         );\n@@ -323,7 +323,7 @@ pub fn callee() {}\n \"#,\n             expect![[\"caller Function FileId(0) 27..56 30..36\"]],\n             expect![[]],\n-            expect![[\"callee Function FileId(1) 0..18 7..13 : [45..51]\"]],\n+            expect![\"callee Function FileId(1) 0..18 7..13 foo : [45..51]\"],\n         );\n     }\n \n@@ -477,7 +477,7 @@ fn caller() {\n     S1::callee();\n }\n \"#,\n-            expect![[\"callee Function FileId(0) 15..27 18..24\"]],\n+            expect![\"callee Function FileId(0) 15..27 18..24 T1\"],\n             expect![[\"caller Function FileId(0) 82..115 85..91 : [104..110]\"]],\n             expect![[]],\n         );"}, {"sha": "0d9b4d8505fdf8e5396af95e1efec4ce184f9828", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 45, "deletions": 43, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=94ac1cdbf54edc6134f57996afd43cb3ff8d738b", "patch": "@@ -2170,52 +2170,53 @@ mod M {\n fn main() { let s$0t = (A(1), B(2), M::C(3) ); }\n \"#,\n         expect![[r#\"\n-                [\n-                    GoToType(\n-                        [\n-                            HoverGotoTypeData {\n-                                mod_path: \"test::A\",\n-                                nav: NavigationTarget {\n-                                    file_id: FileId(\n-                                        0,\n-                                    ),\n-                                    full_range: 0..14,\n-                                    focus_range: 7..8,\n-                                    name: \"A\",\n-                                    kind: Struct,\n-                                    description: \"struct A\",\n-                                },\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"test::A\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                full_range: 0..14,\n+                                focus_range: 7..8,\n+                                name: \"A\",\n+                                kind: Struct,\n+                                description: \"struct A\",\n                             },\n-                            HoverGotoTypeData {\n-                                mod_path: \"test::B\",\n-                                nav: NavigationTarget {\n-                                    file_id: FileId(\n-                                        0,\n-                                    ),\n-                                    full_range: 15..29,\n-                                    focus_range: 22..23,\n-                                    name: \"B\",\n-                                    kind: Struct,\n-                                    description: \"struct B\",\n-                                },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"test::B\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                full_range: 15..29,\n+                                focus_range: 22..23,\n+                                name: \"B\",\n+                                kind: Struct,\n+                                description: \"struct B\",\n                             },\n-                            HoverGotoTypeData {\n-                                mod_path: \"test::M::C\",\n-                                nav: NavigationTarget {\n-                                    file_id: FileId(\n-                                        0,\n-                                    ),\n-                                    full_range: 42..60,\n-                                    focus_range: 53..54,\n-                                    name: \"C\",\n-                                    kind: Struct,\n-                                    description: \"pub struct C\",\n-                                },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"test::M::C\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                full_range: 42..60,\n+                                focus_range: 53..54,\n+                                name: \"C\",\n+                                kind: Struct,\n+                                container_name: \"M\",\n+                                description: \"pub struct C\",\n                             },\n-                        ],\n-                    ),\n-                ]\n-            \"#]],\n+                        },\n+                    ],\n+                ),\n+            ]\n+        \"#]],\n     );\n }\n \n@@ -2544,6 +2545,7 @@ pub mod future {\n                                 focus_range: 60..66,\n                                 name: \"Future\",\n                                 kind: Trait,\n+                                container_name: \"future\",\n                                 description: \"pub trait Future\",\n                             },\n                         },"}, {"sha": "e3900fa0d63bf62d5341a4e3b6ea052b0c4d7f4c", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=94ac1cdbf54edc6134f57996afd43cb3ff8d738b", "patch": "@@ -398,7 +398,7 @@ impl Analysis {\n         self.with_db(|db| {\n             symbol_index::world_symbols(db, query)\n                 .into_iter() // xx: should we make this a par iter?\n-                .filter_map(|s| s.try_to_nav(db))\n+                .filter_map(|s| s.def.try_to_nav(db))\n                 .collect::<Vec<_>>()\n         })\n     }"}, {"sha": "b5e410eaeb9e84bfe738f241f199895716115fdd", "filename": "crates/ide/src/navigation_target.rs", "status": "modified", "additions": 47, "deletions": 49, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fnavigation_target.rs?ref=94ac1cdbf54edc6134f57996afd43cb3ff8d738b", "patch": "@@ -4,8 +4,8 @@ use std::fmt;\n \n use either::Either;\n use hir::{\n-    symbols::FileSymbol, AssocItem, Documentation, FieldSource, HasAttrs, HasSource, HirDisplay,\n-    InFile, LocalSource, ModuleSource, Semantics,\n+    AssocItem, Documentation, FieldSource, HasAttrs, HasContainer, HasSource, HirDisplay, InFile,\n+    LocalSource, ModuleSource,\n };\n use ide_db::{\n     base_db::{FileId, FileRange},\n@@ -15,7 +15,7 @@ use ide_db::{defs::Definition, RootDatabase};\n use stdx::never;\n use syntax::{\n     ast::{self, HasName},\n-    match_ast, AstNode, SmolStr, SyntaxNode, TextRange,\n+    AstNode, SmolStr, SyntaxNode, TextRange,\n };\n \n /// `NavigationTarget` represents an element in the editor's UI which you can\n@@ -158,24 +158,6 @@ impl NavigationTarget {\n     }\n }\n \n-impl TryToNav for FileSymbol {\n-    fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n-        let full_range = self.loc.original_range(db);\n-        let name_range = self.loc.original_name_range(db)?;\n-\n-        Some(NavigationTarget {\n-            file_id: full_range.file_id,\n-            name: self.name.clone(),\n-            kind: Some(self.kind.into()),\n-            full_range: full_range.range,\n-            focus_range: Some(name_range.range),\n-            container_name: self.container_name.clone(),\n-            description: description_from_symbol(db, self),\n-            docs: None,\n-        })\n-    }\n-}\n-\n impl TryToNav for Definition {\n     fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n         match self {\n@@ -221,38 +203,80 @@ impl TryToNav for hir::ModuleDef {\n     }\n }\n \n-pub(crate) trait ToNavFromAst {\n+pub(crate) trait ToNavFromAst: Sized {\n     const KIND: SymbolKind;\n+    fn container_name(self, db: &RootDatabase) -> Option<SmolStr> {\n+        _ = db;\n+        None\n+    }\n }\n+\n+fn container_name(db: &RootDatabase, t: impl HasContainer) -> Option<SmolStr> {\n+    match t.container(db) {\n+        hir::ItemContainer::Trait(it) => Some(it.name(db).to_smol_str()),\n+        // FIXME: Handle owners of blocks correctly here\n+        hir::ItemContainer::Module(it) => it.name(db).map(|name| name.to_smol_str()),\n+        _ => None,\n+    }\n+}\n+\n impl ToNavFromAst for hir::Function {\n     const KIND: SymbolKind = SymbolKind::Function;\n+    fn container_name(self, db: &RootDatabase) -> Option<SmolStr> {\n+        container_name(db, self)\n+    }\n }\n+\n impl ToNavFromAst for hir::Const {\n     const KIND: SymbolKind = SymbolKind::Const;\n+    fn container_name(self, db: &RootDatabase) -> Option<SmolStr> {\n+        container_name(db, self)\n+    }\n }\n impl ToNavFromAst for hir::Static {\n     const KIND: SymbolKind = SymbolKind::Static;\n+    fn container_name(self, db: &RootDatabase) -> Option<SmolStr> {\n+        container_name(db, self)\n+    }\n }\n impl ToNavFromAst for hir::Struct {\n     const KIND: SymbolKind = SymbolKind::Struct;\n+    fn container_name(self, db: &RootDatabase) -> Option<SmolStr> {\n+        container_name(db, self)\n+    }\n }\n impl ToNavFromAst for hir::Enum {\n     const KIND: SymbolKind = SymbolKind::Enum;\n+    fn container_name(self, db: &RootDatabase) -> Option<SmolStr> {\n+        container_name(db, self)\n+    }\n }\n impl ToNavFromAst for hir::Variant {\n     const KIND: SymbolKind = SymbolKind::Variant;\n }\n impl ToNavFromAst for hir::Union {\n     const KIND: SymbolKind = SymbolKind::Union;\n+    fn container_name(self, db: &RootDatabase) -> Option<SmolStr> {\n+        container_name(db, self)\n+    }\n }\n impl ToNavFromAst for hir::TypeAlias {\n     const KIND: SymbolKind = SymbolKind::TypeAlias;\n+    fn container_name(self, db: &RootDatabase) -> Option<SmolStr> {\n+        container_name(db, self)\n+    }\n }\n impl ToNavFromAst for hir::Trait {\n     const KIND: SymbolKind = SymbolKind::Trait;\n+    fn container_name(self, db: &RootDatabase) -> Option<SmolStr> {\n+        container_name(db, self)\n+    }\n }\n impl ToNavFromAst for hir::TraitAlias {\n     const KIND: SymbolKind = SymbolKind::TraitAlias;\n+    fn container_name(self, db: &RootDatabase) -> Option<SmolStr> {\n+        container_name(db, self)\n+    }\n }\n \n impl<D> TryToNav for D\n@@ -269,6 +293,7 @@ where\n         );\n         res.docs = self.docs(db);\n         res.description = Some(self.display(db).to_string());\n+        res.container_name = self.container_name(db);\n         Some(res)\n     }\n }\n@@ -544,32 +569,6 @@ impl TryToNav for hir::ConstParam {\n     }\n }\n \n-/// Get a description of a symbol.\n-///\n-/// e.g. `struct Name`, `enum Name`, `fn Name`\n-pub(crate) fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<String> {\n-    let sema = Semantics::new(db);\n-    let node = symbol.loc.syntax(&sema);\n-\n-    match_ast! {\n-        match node {\n-            ast::Fn(it) => sema.to_def(&it).map(|it| it.display(db).to_string()),\n-            ast::Struct(it) => sema.to_def(&it).map(|it| it.display(db).to_string()),\n-            ast::Enum(it) => sema.to_def(&it).map(|it| it.display(db).to_string()),\n-            ast::Trait(it) => sema.to_def(&it).map(|it| it.display(db).to_string()),\n-            ast::TraitAlias(it) => sema.to_def(&it).map(|it| it.display(db).to_string()),\n-            ast::Module(it) => sema.to_def(&it).map(|it| it.display(db).to_string()),\n-            ast::TypeAlias(it) => sema.to_def(&it).map(|it| it.display(db).to_string()),\n-            ast::Const(it) => sema.to_def(&it).map(|it| it.display(db).to_string()),\n-            ast::Static(it) => sema.to_def(&it).map(|it| it.display(db).to_string()),\n-            ast::RecordField(it) => sema.to_def(&it).map(|it| it.display(db).to_string()),\n-            ast::Variant(it) => sema.to_def(&it).map(|it| it.display(db).to_string()),\n-            ast::Union(it) => sema.to_def(&it).map(|it| it.display(db).to_string()),\n-            _ => None,\n-        }\n-    }\n-}\n-\n fn orig_focus_range(\n     db: &RootDatabase,\n     file_id: hir::HirFileId,\n@@ -614,7 +613,6 @@ fn foo() { enum FooInner { } }\n                     focus_range: 34..42,\n                     name: \"FooInner\",\n                     kind: Enum,\n-                    container_name: \"foo\",\n                     description: \"enum FooInner\",\n                 },\n             ]"}, {"sha": "b8e05d4f6256c38ffac363ac94d7132159ec2224", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=94ac1cdbf54edc6134f57996afd43cb3ff8d738b", "patch": "@@ -715,7 +715,7 @@ fn f() {\n }\n \"#,\n             expect![[r#\"\n-                Foo Struct FileId(1) 17..51 28..31\n+                Foo Struct FileId(1) 17..51 28..31 foo\n \n                 FileId(0) 53..56\n                 FileId(2) 79..82\n@@ -803,7 +803,7 @@ pub(super) struct Foo$0 {\n }\n \"#,\n             expect![[r#\"\n-                Foo Struct FileId(2) 0..41 18..21\n+                Foo Struct FileId(2) 0..41 18..21 some\n \n                 FileId(1) 20..23 Import\n                 FileId(1) 47..50\n@@ -1542,7 +1542,7 @@ fn f() {\n                 FileId(0) 161..165\n \n \n-                func Function FileId(0) 137..146 140..144\n+                func Function FileId(0) 137..146 140..144 module\n \n                 FileId(0) 181..185\n             \"#]],\n@@ -1581,7 +1581,7 @@ trait Trait {\n }\n \"#,\n             expect![[r#\"\n-                func Function FileId(0) 48..87 51..55\n+                func Function FileId(0) 48..87 51..55 Trait\n \n                 FileId(0) 74..78\n             \"#]],\n@@ -1692,7 +1692,7 @@ fn f<T: Trait>() {\n }\n \"#,\n             expect![[r#\"\n-                CONST Const FileId(0) 18..37 24..29\n+                CONST Const FileId(0) 18..37 24..29 Trait\n \n                 FileId(0) 71..76\n                 FileId(0) 125..130\n@@ -1721,7 +1721,7 @@ fn f<T: Trait>() {\n }\n \"#,\n             expect![[r#\"\n-                TypeAlias TypeAlias FileId(0) 18..33 23..32\n+                TypeAlias TypeAlias FileId(0) 18..33 23..32 Trait\n \n                 FileId(0) 66..75\n                 FileId(0) 117..126\n@@ -1750,7 +1750,7 @@ fn f<T: Trait>() {\n }\n \"#,\n             expect![[r#\"\n-                function Function FileId(0) 18..34 21..29\n+                function Function FileId(0) 18..34 21..29 Trait\n \n                 FileId(0) 65..73\n                 FileId(0) 112..120\n@@ -1894,7 +1894,7 @@ fn f<T: Trait>() {\n }\n \"#,\n             expect![[r#\"\n-                TypeAlias TypeAlias FileId(0) 18..33 23..32\n+                TypeAlias TypeAlias FileId(0) 18..33 23..32 Trait\n \n                 FileId(0) 66..75\n                 FileId(0) 117..126\n@@ -1950,7 +1950,7 @@ impl Foo for Bar {\n fn method() {}\n \"#,\n             expect![[r#\"\n-                method Function FileId(0) 16..39 19..25\n+                method Function FileId(0) 16..39 19..25 Foo\n \n                 FileId(0) 101..107\n             \"#]],"}, {"sha": "64150cc2f7fdb68345703ab154fe43f986d7b20c", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ac1cdbf54edc6134f57996afd43cb3ff8d738b/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=94ac1cdbf54edc6134f57996afd43cb3ff8d738b", "patch": "@@ -2579,6 +2579,7 @@ mod r#mod {\n                             ),\n                             full_range: 47..84,\n                             name: \"r#for\",\n+                            container_name: \"r#mod\",\n                         },\n                         kind: DocTest {\n                             test_id: Path(\n@@ -2595,6 +2596,7 @@ mod r#mod {\n                             ),\n                             full_range: 90..146,\n                             name: \"r#struct\",\n+                            container_name: \"r#mod\",\n                         },\n                         kind: DocTest {\n                             test_id: Path("}]}