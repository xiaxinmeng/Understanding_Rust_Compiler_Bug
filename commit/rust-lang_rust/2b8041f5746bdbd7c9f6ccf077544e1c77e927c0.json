{"sha": "2b8041f5746bdbd7c9f6ccf077544e1c77e927c0", "node_id": "C_kwDOAAsO6NoAKDJiODA0MWY1NzQ2YmRiZDdjOWY2Y2NmMDc3NTQ0ZTFjNzdlOTI3YzA", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-05-13T17:46:00Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-05-13T19:08:54Z"}, "message": "Use a pointer in cell::RefMut so it's not noalias", "tree": {"sha": "20a3bf766429af144a18cba16e6eb0fe9b3b993d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20a3bf766429af144a18cba16e6eb0fe9b3b993d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b8041f5746bdbd7c9f6ccf077544e1c77e927c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b8041f5746bdbd7c9f6ccf077544e1c77e927c0", "html_url": "https://github.com/rust-lang/rust/commit/2b8041f5746bdbd7c9f6ccf077544e1c77e927c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b8041f5746bdbd7c9f6ccf077544e1c77e927c0/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d369045aed63ac8b9de1ed71679fac9bb4b0340a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d369045aed63ac8b9de1ed71679fac9bb4b0340a", "html_url": "https://github.com/rust-lang/rust/commit/d369045aed63ac8b9de1ed71679fac9bb4b0340a"}], "stats": {"total": 52, "additions": 30, "deletions": 22}, "files": [{"sha": "fa0206c349af6338d08cafca2e5d371be3a5630c", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2b8041f5746bdbd7c9f6ccf077544e1c77e927c0/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8041f5746bdbd7c9f6ccf077544e1c77e927c0/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=2b8041f5746bdbd7c9f6ccf077544e1c77e927c0", "patch": "@@ -194,7 +194,7 @@\n \n use crate::cmp::Ordering;\n use crate::fmt::{self, Debug, Display};\n-use crate::marker::Unsize;\n+use crate::marker::{PhantomData, Unsize};\n use crate::mem;\n use crate::ops::{CoerceUnsized, Deref, DerefMut};\n use crate::ptr::{self, NonNull};\n@@ -981,8 +981,9 @@ impl<T: ?Sized> RefCell<T> {\n                     self.borrowed_at.set(Some(crate::panic::Location::caller()));\n                 }\n \n-                // SAFETY: `BorrowRef` guarantees unique access.\n-                Ok(RefMut { value: unsafe { &mut *self.value.get() }, borrow: b })\n+                // SAFETY: `BorrowRefMut` guarantees unique access.\n+                let value = unsafe { NonNull::new_unchecked(self.value.get()) };\n+                Ok(RefMut { value, borrow: b, marker: PhantomData })\n             }\n             None => Err(BorrowMutError {\n                 // If a borrow occurred, then we must already have an outstanding borrow,\n@@ -1515,13 +1516,13 @@ impl<'b, T: ?Sized> RefMut<'b, T> {\n     /// ```\n     #[stable(feature = \"cell_map\", since = \"1.8.0\")]\n     #[inline]\n-    pub fn map<U: ?Sized, F>(orig: RefMut<'b, T>, f: F) -> RefMut<'b, U>\n+    pub fn map<U: ?Sized, F>(mut orig: RefMut<'b, T>, f: F) -> RefMut<'b, U>\n     where\n         F: FnOnce(&mut T) -> &mut U,\n     {\n         // FIXME(nll-rfc#40): fix borrow-check\n-        let RefMut { value, borrow } = orig;\n-        RefMut { value: f(value), borrow }\n+        let value = NonNull::from(f(&mut *orig));\n+        RefMut { value, borrow: orig.borrow, marker: PhantomData }\n     }\n \n     /// Makes a new `RefMut` for an optional component of the borrowed data. The\n@@ -1556,23 +1557,20 @@ impl<'b, T: ?Sized> RefMut<'b, T> {\n     /// ```\n     #[unstable(feature = \"cell_filter_map\", reason = \"recently added\", issue = \"81061\")]\n     #[inline]\n-    pub fn filter_map<U: ?Sized, F>(orig: RefMut<'b, T>, f: F) -> Result<RefMut<'b, U>, Self>\n+    pub fn filter_map<U: ?Sized, F>(mut orig: RefMut<'b, T>, f: F) -> Result<RefMut<'b, U>, Self>\n     where\n         F: FnOnce(&mut T) -> Option<&mut U>,\n     {\n         // FIXME(nll-rfc#40): fix borrow-check\n-        let RefMut { value, borrow } = orig;\n-        let value = value as *mut T;\n         // SAFETY: function holds onto an exclusive reference for the duration\n         // of its call through `orig`, and the pointer is only de-referenced\n         // inside of the function call never allowing the exclusive reference to\n         // escape.\n-        match f(unsafe { &mut *value }) {\n-            Some(value) => Ok(RefMut { value, borrow }),\n-            None => {\n-                // SAFETY: same as above.\n-                Err(RefMut { value: unsafe { &mut *value }, borrow })\n+        match f(&mut *orig) {\n+            Some(value) => {\n+                Ok(RefMut { value: NonNull::from(value), borrow: orig.borrow, marker: PhantomData })\n             }\n+            None => Err(orig),\n         }\n     }\n \n@@ -1604,15 +1602,18 @@ impl<'b, T: ?Sized> RefMut<'b, T> {\n     #[stable(feature = \"refcell_map_split\", since = \"1.35.0\")]\n     #[inline]\n     pub fn map_split<U: ?Sized, V: ?Sized, F>(\n-        orig: RefMut<'b, T>,\n+        mut orig: RefMut<'b, T>,\n         f: F,\n     ) -> (RefMut<'b, U>, RefMut<'b, V>)\n     where\n         F: FnOnce(&mut T) -> (&mut U, &mut V),\n     {\n-        let (a, b) = f(orig.value);\n         let borrow = orig.borrow.clone();\n-        (RefMut { value: a, borrow }, RefMut { value: b, borrow: orig.borrow })\n+        let (a, b) = f(&mut *orig);\n+        (\n+            RefMut { value: NonNull::from(a), borrow, marker: PhantomData },\n+            RefMut { value: NonNull::from(b), borrow: orig.borrow, marker: PhantomData },\n+        )\n     }\n \n     /// Convert into a mutable reference to the underlying data.\n@@ -1638,14 +1639,15 @@ impl<'b, T: ?Sized> RefMut<'b, T> {\n     /// assert!(cell.try_borrow_mut().is_err());\n     /// ```\n     #[unstable(feature = \"cell_leak\", issue = \"69099\")]\n-    pub fn leak(orig: RefMut<'b, T>) -> &'b mut T {\n+    pub fn leak(mut orig: RefMut<'b, T>) -> &'b mut T {\n         // By forgetting this BorrowRefMut we ensure that the borrow counter in the RefCell can't\n         // go back to UNUSED within the lifetime `'b`. Resetting the reference tracking state would\n         // require a unique reference to the borrowed RefCell. No further references can be created\n         // from the original cell within that lifetime, making the current borrow the only\n         // reference for the remaining lifetime.\n         mem::forget(orig.borrow);\n-        orig.value\n+        // SAFETY: after forgetting, we can form a reference for the rest of lifetime `'b`.\n+        unsafe { orig.value.as_mut() }\n     }\n }\n \n@@ -1700,8 +1702,12 @@ impl<'b> BorrowRefMut<'b> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[must_not_suspend = \"holding a RefMut across suspend points can cause BorrowErrors\"]\n pub struct RefMut<'b, T: ?Sized + 'b> {\n-    value: &'b mut T,\n+    // NB: we use a pointer instead of `&'b mut T` to avoid `noalias` violations, because a\n+    // `RefMut` argument doesn't hold exclusivity for its whole scope, only until it drops.\n+    value: NonNull<T>,\n     borrow: BorrowRefMut<'b>,\n+    // NonNull is covariant over T, so we need to reintroduce invariance.\n+    marker: PhantomData<&'b mut T>,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1710,15 +1716,17 @@ impl<T: ?Sized> Deref for RefMut<'_, T> {\n \n     #[inline]\n     fn deref(&self) -> &T {\n-        self.value\n+        // SAFETY: the value is accessible as long as we hold our borrow.\n+        unsafe { self.value.as_ref() }\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> DerefMut for RefMut<'_, T> {\n     #[inline]\n     fn deref_mut(&mut self) -> &mut T {\n-        self.value\n+        // SAFETY: the value is accessible as long as we hold our borrow.\n+        unsafe { self.value.as_mut() }\n     }\n }\n "}]}