{"sha": "e1a9ffafa2909931a63f56471412e1730461d866", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYTlmZmFmYTI5MDk5MzFhNjNmNTY0NzE0MTJlMTczMDQ2MWQ4NjY=", "commit": {"author": {"name": "Lokathor", "email": "zefria@gmail.com", "date": "2020-09-27T17:10:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-27T17:10:13Z"}, "message": "Merge pull request #8 from rust-lang/lokathor\n\nAdd a beginner's guide", "tree": {"sha": "a0ffde45c153966af0e6d4f80d95050f2f6973d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0ffde45c153966af0e6d4f80d95050f2f6973d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1a9ffafa2909931a63f56471412e1730461d866", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfcMd1CRBK7hj4Ov3rIwAAdHIIAH+QvLwyX6wy6saawKIeoqny\n7ozOj5jSD+XTdJirLqDdlzu0ixYIf5qr9Wd+Qo/B+TgZtpZSau+rox/XPKztXPEh\nwqMUIposX3ZBUISZAT+CW2ZxFKlkKFMnXxsmofV5Adi3D8ZzxMka4TN6ZjVnTQ2/\n/O+zD24XtSbCY/NJLh3nu3vjnHro8OS0wperxeL2ytQyTkhPaawhPLx65GzoFGR0\n1d6Q+uu9FIOHVb6+i+xxyqj/kxwIRgSPSDuUFrMhJJ2krD1cZcX0W/W3rRfCeAZv\n+kwVOtZkTBROdFCEIUJCOYyGpGzb1bs9Xy/q+UAB/apCV+L6to1jKz8gs/oFxT8=\n=cmqq\n-----END PGP SIGNATURE-----\n", "payload": "tree a0ffde45c153966af0e6d4f80d95050f2f6973d8\nparent 272c9461fc2c5b2a2876324efa83d0106b463f6a\nparent fdfbf7c68b7372474003fe3fe0abff0c22103bd8\nauthor Lokathor <zefria@gmail.com> 1601226613 -0600\ncommitter GitHub <noreply@github.com> 1601226613 -0600\n\nMerge pull request #8 from rust-lang/lokathor\n\nAdd a beginner's guide"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a9ffafa2909931a63f56471412e1730461d866", "html_url": "https://github.com/rust-lang/rust/commit/e1a9ffafa2909931a63f56471412e1730461d866", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1a9ffafa2909931a63f56471412e1730461d866/comments", "author": {"login": "Lokathor", "id": 5456384, "node_id": "MDQ6VXNlcjU0NTYzODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5456384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lokathor", "html_url": "https://github.com/Lokathor", "followers_url": "https://api.github.com/users/Lokathor/followers", "following_url": "https://api.github.com/users/Lokathor/following{/other_user}", "gists_url": "https://api.github.com/users/Lokathor/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lokathor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lokathor/subscriptions", "organizations_url": "https://api.github.com/users/Lokathor/orgs", "repos_url": "https://api.github.com/users/Lokathor/repos", "events_url": "https://api.github.com/users/Lokathor/events{/privacy}", "received_events_url": "https://api.github.com/users/Lokathor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "272c9461fc2c5b2a2876324efa83d0106b463f6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/272c9461fc2c5b2a2876324efa83d0106b463f6a", "html_url": "https://github.com/rust-lang/rust/commit/272c9461fc2c5b2a2876324efa83d0106b463f6a"}, {"sha": "fdfbf7c68b7372474003fe3fe0abff0c22103bd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdfbf7c68b7372474003fe3fe0abff0c22103bd8", "html_url": "https://github.com/rust-lang/rust/commit/fdfbf7c68b7372474003fe3fe0abff0c22103bd8"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "a39243170fc5185dfbb304b51553dfff8e2f92fe", "filename": "beginners-guide.md", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/e1a9ffafa2909931a63f56471412e1730461d866/beginners-guide.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1a9ffafa2909931a63f56471412e1730461d866/beginners-guide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/beginners-guide.md?ref=e1a9ffafa2909931a63f56471412e1730461d866", "patch": "@@ -0,0 +1,67 @@\n+\n+# Beginner's Guide To SIMD\n+\n+Hello and welcome to our SIMD basics guide!\n+\n+Because SIMD is a subject that many programmers haven't worked with before, we thought that it's best to outline some terms and other basics for you to get started with.\n+\n+## Quick Background\n+\n+**SIMD** stands for *Single Instruction, Multiple Data*. In other words, SIMD is when the CPU performs a single action on more than one logical piece of data at the same time. Instead of adding two registers that each contain one `f32` value and getting an `f32` as the result, you might add two registers that each contain `f32x4` (128 bits of data) and then you get an `f32x4` as the output.\n+\n+This might seem a tiny bit weird at first, but there's a good reason for it. Back in the day, as CPUs got faster and faster, eventually they got so fast that the CPU would just melt itself. The heat management (heat sinks, fans, etc) simply couldn't keep up with how much electricity was going through the metal. Two main strategies were developed to help get around the limits of physics.\n+* One of them you're probably familiar with: Multi-core processors. By giving a processor more than one core, each core can do its own work, and because they're physically distant (at least on the CPU's scale) the heat can still be managed. Unfortunately, not all tasks can just be split up across cores in an efficient way.\n+* The second strategy is SIMD. If you can't make the register go any faster, you can still make the register *wider*. This lets you process more data at a time, which is *almost* as good as just having a faster CPU. As with multi-core programming, SIMD doesn't fit every kind of task, so you have to know when it will improve your program.\n+\n+## Terms\n+\n+SIMD has a few special vocabulary terms you should know:\n+\n+* **Vector:** A SIMD value is called a vector. This shouldn't be confused with the `Vec<T>` type. A SIMD vector has a fixed size, known at compile time. All of the elements within the vector are of the same type. This makes vectors *similar to* arrays. One difference is that a vector is generally aligned to its *entire* size (eg: 16 bytes, 32 bytes, etc), not just the size of an individual element. Sometimes vector data is called \"packed\" data.\n+\n+* **Lane:** A single element position within a vector is called a lane. If you have `N` lanes available then they're numbered from `0` to `N-1` when referring to them, again like an array. The biggest difference between an array element and a vector lane is that in general is *relatively costly* to access an individual lane value. On most architectures, the vector has to be pushed out of the SIMD register onto the stack, then an individual lane is accessed while it's on the stack (and possibly the stack value is read back into a register). For this reason, when working with SIMD you should avoid reading or writing the value of an individual lane during hot loops.\n+\n+* **Bit Widths:** When talking about SIMD, the bit widths used are the bit size of the vectors involved, *not* the individual elements. So \"128-bit SIMD\" has 128-bit vectors, and that might be `f32x4`, `i32x4`, `i16x8`, or other variations. While 128-bit SIMD is the most common, there's also 64-bit, 256-bit, and even 512-bit on the newest CPUs.\n+\n+* **Vertical:** When an operation is \"vertical\", each lane processes individually without regard to the other lanes in the same vector. For example, a \"vertical add\" between two vectors would add lane 0 in `a` with lane 0 in `b`, with the total in lane 0 of `out`, and then the same thing for lanes 1, 2, etc. Most SIMD operations are vertical operations, so if your problem is a vertical problem then you can probably solve it with SIMD.\n+\n+* **Horizontal:** When an operation is \"horizontal\", the lanes within a single vector interact in some way. A \"horizontal add\" might add up lane 0 of `a` with lane 1 of `a`, with the total in lane 0 of `out`.\n+\n+* **Target Feature:** Rust calls a CPU architecture extension a `target_feature`. Proper SIMD requires various CPU extensions to be enabled (details below). Don't confuse this with `feature`, which is a Cargo crate concept.\n+\n+## Target Features\n+\n+When using SIMD, you should be familiar with the CPU feature set that you're targeting.\n+\n+On `arm` and `aarch64` it's fairly simple. There's just one CPU feature that controls if SIMD is available: `neon` (or \"NEON\", all caps, as the ARM docs often put it). Neon registers can be used as 64-bit or 128-bit. When doing 128-bit operations it just uses two 64-bit registers as a single 128-bit register.\n+\n+> By default, the `aarch64`, `arm`, and `thumb` Rust targets generally do not enable `neon` unless it's in the target string.\n+\n+On `x86` and `x86_64` it's slightly more complicated. The SIMD support is split into many levels:\n+* 128-bit: `sse`, `sse2`, `sse3`, `ssse3` (not a typo!), `sse4.1`, `sse4.2`, `sse4a` (AMD only)\n+* 256-bit (mostly): `avx`, `avx2`, `fma`\n+* 512-bit (mostly): a *wide* range of `avx512` variations\n+\n+The list notes the bit widths available at each feature level, though the operations of the more advanced features can generally be used with the smaller register sizes as well. For example, new operations introduced in `avx` generally have a 128-bit form as well as a 256-bit form. This means that even if you only do 128-bit work you can still benefit from the later feature levels.\n+\n+> By default, the `i686` and `x86_64` Rust targets enable `sse` and `sse2`.\n+\n+### Selecting Additional Target Features\n+\n+If you want to enable support for a target feature within your build, generally you should use a [target-feature](https://rust-lang.github.io/packed_simd/perf-guide/target-feature/rustflags.html#target-feature) setting within you `RUSTFLAGS` setting.\n+\n+If you know that you're targeting a specific CPU you can instead use the [target-cpu](https://rust-lang.github.io/packed_simd/perf-guide/target-feature/rustflags.html#target-cpu) flag and the compiler will enable the correct set of features for that CPU.\n+\n+The [Steam Hardware Survey](https://store.steampowered.com/hwsurvey/Steam-Hardware-Software-Survey-Welcome-to-Steam) is one of the few places with data on how common various CPU features are. The dataset is limited to \"the kinds of computers owned by people who play computer games\", so the info only covers `x86`/`x86_64`, and it also probably skews to slightly higher quality computers than average. Still, we can see that the `sse` levels have very high support, `avx` and `avx2` are quite common as well, and the `avx-512` family is still so early in adoption you can barely find it in consumer grade stuff.\n+\n+## Running a program compiled for a CPU feature level that the CPU doesn't support is automatic undefined behavior.\n+\n+This means that if you build your program with `avx` support enabled and run it on a CPU without `avx` support, it's **instantly** undefined behavior.\n+\n+Even without an `unsafe` block in sight.\n+\n+This is no bug in Rust, or soundness hole in the type system. You just plain can't make a CPU do what it doesn't know how to do.\n+\n+This is why the various Rust targets *don't* enable many CPU feature flags by default: requiring a more advanced CPU makes the final binary *less* portable.\n+\n+So please select an appropriate CPU feature level when building your programs."}]}