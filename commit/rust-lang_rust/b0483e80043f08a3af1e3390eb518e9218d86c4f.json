{"sha": "b0483e80043f08a3af1e3390eb518e9218d86c4f", "node_id": "C_kwDOAAsO6NoAKGIwNDgzZTgwMDQzZjA4YTNhZjFlMzM5MGViNTE4ZTkyMThkODZjNGY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-04T16:27:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-04T16:27:47Z"}, "message": "Rollup merge of #109938 - oli-obk:try_norm, r=compiler-errors\n\nMove a const-prop-lint specific hack from mir interpret to const-prop-lint and make it fallible\n\nfixes #109743\n\nThis hack didn't need to live in the mir interpreter. For const-prop-lint it is entirely correct to avoid doing any const prop if normalization fails at this stage. Most likely we couldn't const propagate anything anyway, and if revealing was needed (so opaque types were involved), we wouldn't want to be too smart and leak the hidden type anyway.", "tree": {"sha": "2423f64ac6f500d441ae528ad73855e059630a7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2423f64ac6f500d441ae528ad73855e059630a7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0483e80043f08a3af1e3390eb518e9218d86c4f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkLFADCRBK7hj4Ov3rIwAAa9kIAHO7JM+SSZisT/Ns5ZPJLDi/\nJGfvkTVMilPaVD0oFAe1VkKjeknl/N6v9sPMr+fuVjrg9HxILR/4J7c9u1oMvhAQ\nONWUSfTYZRd1H37GzSurx0DHISN6i4psKMTRwc4f+Fp0fQh8rqR97GyM3ojLYUjY\n/Iq7NtP5UtydJ+HNN7hZx2erR0bQ3ys33GJJjRc46VOR/ka9zc1bzRm09EqbxCDD\nBG7upaSSxejMeOzZ9JFhE7vgy2Qz9PC0Ik3mus4ZRtERkFn/iZAdzwX63j+s5kUE\nhiTX6dmC3zgWXD6d6KLiCI9quAp4WPggTi457Z8PKKQUk+oOQ5/UfmzHzi41L8Y=\n=VHvp\n-----END PGP SIGNATURE-----\n", "payload": "tree 2423f64ac6f500d441ae528ad73855e059630a7d\nparent d984671246f13a25c6bf69fed559e819686df85c\nparent b5d96d5ec5388b89c700b4b9e6f7f73afa9cbcb1\nauthor Michael Goulet <michael@errs.io> 1680625667 -0700\ncommitter GitHub <noreply@github.com> 1680625667 -0700\n\nRollup merge of #109938 - oli-obk:try_norm, r=compiler-errors\n\nMove a const-prop-lint specific hack from mir interpret to const-prop-lint and make it fallible\n\nfixes #109743\n\nThis hack didn't need to live in the mir interpreter. For const-prop-lint it is entirely correct to avoid doing any const prop if normalization fails at this stage. Most likely we couldn't const propagate anything anyway, and if revealing was needed (so opaque types were involved), we wouldn't want to be too smart and leak the hidden type anyway.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0483e80043f08a3af1e3390eb518e9218d86c4f", "html_url": "https://github.com/rust-lang/rust/commit/b0483e80043f08a3af1e3390eb518e9218d86c4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0483e80043f08a3af1e3390eb518e9218d86c4f/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d984671246f13a25c6bf69fed559e819686df85c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d984671246f13a25c6bf69fed559e819686df85c", "html_url": "https://github.com/rust-lang/rust/commit/d984671246f13a25c6bf69fed559e819686df85c"}, {"sha": "b5d96d5ec5388b89c700b4b9e6f7f73afa9cbcb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5d96d5ec5388b89c700b4b9e6f7f73afa9cbcb1", "html_url": "https://github.com/rust-lang/rust/commit/b5d96d5ec5388b89c700b4b9e6f7f73afa9cbcb1"}], "stats": {"total": 76, "additions": 64, "deletions": 12}, "files": [{"sha": "5310ef0bb3ed0e076b82331dc33a2be2f5d484c3", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b0483e80043f08a3af1e3390eb518e9218d86c4f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0483e80043f08a3af1e3390eb518e9218d86c4f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=b0483e80043f08a3af1e3390eb518e9218d86c4f", "patch": "@@ -612,14 +612,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         span: Option<Span>,\n         layout: Option<TyAndLayout<'tcx>>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::Provenance>> {\n-        // FIXME(const_prop): normalization needed b/c const prop lint in\n-        // `mir_drops_elaborated_and_const_checked`, which happens before\n-        // optimized MIR. Only after optimizing the MIR can we guarantee\n-        // that the `RevealAll` pass has happened and that the body's consts\n-        // are normalized, so any call to resolve before that needs to be\n-        // manually normalized.\n-        let val = self.tcx.normalize_erasing_regions(self.param_env, *val);\n-        match val {\n+        match *val {\n             mir::ConstantKind::Ty(ct) => {\n                 let ty = ct.ty();\n                 let valtree = self.eval_ty_constant(ct, span)?;"}, {"sha": "7c59879a187feb960570509010630f3387ea61da", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0483e80043f08a3af1e3390eb518e9218d86c4f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0483e80043f08a3af1e3390eb518e9218d86c4f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=b0483e80043f08a3af1e3390eb518e9218d86c4f", "patch": "@@ -193,9 +193,9 @@ impl<'tcx> NormalizeAfterErasingRegionsFolder<'tcx> {\n         let arg = self.param_env.and(arg);\n \n         self.tcx.try_normalize_generic_arg_after_erasing_regions(arg).unwrap_or_else(|_| bug!(\n-                \"Failed to normalize {:?}, maybe try to call `try_normalize_erasing_regions` instead\",\n-                arg.value\n-            ))\n+            \"Failed to normalize {:?}, maybe try to call `try_normalize_erasing_regions` instead\",\n+            arg.value\n+        ))\n     }\n }\n "}, {"sha": "176027b3b93e4fe23608522b748d4a44ef848dff", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b0483e80043f08a3af1e3390eb518e9218d86c4f/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0483e80043f08a3af1e3390eb518e9218d86c4f/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=b0483e80043f08a3af1e3390eb518e9218d86c4f", "patch": "@@ -284,7 +284,15 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             return None;\n         }\n \n-        self.use_ecx(source_info, |this| this.ecx.eval_mir_constant(&c.literal, Some(c.span), None))\n+        // Normalization needed b/c const prop lint runs in\n+        // `mir_drops_elaborated_and_const_checked`, which happens before\n+        // optimized MIR. Only after optimizing the MIR can we guarantee\n+        // that the `RevealAll` pass has happened and that the body's consts\n+        // are normalized, so any call to resolve before that needs to be\n+        // manually normalized.\n+        let val = self.tcx.try_normalize_erasing_regions(self.param_env, c.literal).ok()?;\n+\n+        self.use_ecx(source_info, |this| this.ecx.eval_mir_constant(&val, Some(c.span), None))\n     }\n \n     /// Returns the value, if any, of evaluating `place`."}, {"sha": "73f3405e3ad764c825cd7fe8c811a7166eeea7ec", "filename": "tests/ui/mir/issue-109743.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b0483e80043f08a3af1e3390eb518e9218d86c4f/tests%2Fui%2Fmir%2Fissue-109743.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0483e80043f08a3af1e3390eb518e9218d86c4f/tests%2Fui%2Fmir%2Fissue-109743.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Fissue-109743.rs?ref=b0483e80043f08a3af1e3390eb518e9218d86c4f", "patch": "@@ -0,0 +1,51 @@\n+// build-pass\n+// compile-flags: --crate-type=lib\n+\n+use std::marker::PhantomData;\n+\n+pub trait StreamOnce {\n+    type Token;\n+}\n+\n+impl StreamOnce for &str {\n+    type Token = ();\n+}\n+\n+pub trait Parser<Input: StreamOnce> {\n+    type PartialState: Default;\n+    fn parse_mode(&self, _state: &Self::PartialState) {}\n+    fn parse_mode_impl() {}\n+}\n+\n+pub fn parse_bool<'a>() -> impl Parser<&'a str> {\n+    pub struct TokensCmp<C, Input>\n+    where\n+        Input: StreamOnce,\n+    {\n+        _cmp: C,\n+        _marker: PhantomData<Input>,\n+    }\n+\n+    impl<Input, C> Parser<Input> for TokensCmp<C, Input>\n+    where\n+        C: FnMut(Input::Token),\n+        Input: StreamOnce,\n+    {\n+        type PartialState = ();\n+    }\n+\n+    TokensCmp { _cmp: |_| (), _marker: PhantomData }\n+}\n+\n+pub struct ParseBool;\n+\n+impl<'a> Parser<&'a str> for ParseBool\n+where\n+    &'a str: StreamOnce,\n+{\n+    type PartialState = ();\n+\n+    fn parse_mode_impl() {\n+        parse_bool().parse_mode(&Default::default())\n+    }\n+}"}]}