{"sha": "850912704e7bdf3eb8fc7d9ac9b99f913633bb8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MDkxMjcwNGU3YmRmM2ViOGZjN2Q5YWM5Yjk5ZjkxMzYzM2JiOGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-11T12:49:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-11T12:49:49Z"}, "message": "Auto merge of #59211 - nox:refcell-borrow-state, r=KodrAus\n\nIntroduce RefCell::try_borrow_unguarded\n\n*Come sit next to the fireplace with me, this is going to be a long story.*\n\nSo, you may already be aware that Servo has weird design constraints that forces us developers working on it to do weird things. The thing that interests us today is that we do layout on a separate thread with its own thread pool to do some things in parallel, whereas the data it uses comes from the script thread, which implements the entire DOM and related pieces, with `!Sync` data types such as `RefCell<T>`.\n\nThe invariant we maintain is that script does not do anything ever with the DOM data as long as layout is doing its job. That's all nice and all, but one thing we don't ensure is that we don't actually know if script was currently mutably borrowing some `RefCell<T>` prior to starting layout, which may lead to aliasing mutable memory and obviously undefined behaviour.\n\nThis PR reinstates `RefCell::borrow_state` so that [this method](https://github.com/servo/servo/blob/master/components/script/dom/bindings/cell.rs#L23-L30) can make use of it and return `None` if the cell was mutably borrowed.\n\nCc @SimonSapin", "tree": {"sha": "996cff7fe9a519844599920ce9a48dab8e16cd4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/996cff7fe9a519844599920ce9a48dab8e16cd4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/850912704e7bdf3eb8fc7d9ac9b99f913633bb8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/850912704e7bdf3eb8fc7d9ac9b99f913633bb8d", "html_url": "https://github.com/rust-lang/rust/commit/850912704e7bdf3eb8fc7d9ac9b99f913633bb8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/850912704e7bdf3eb8fc7d9ac9b99f913633bb8d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee1474acc43fbf657b0fc910c139cf63cef34dc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee1474acc43fbf657b0fc910c139cf63cef34dc8", "html_url": "https://github.com/rust-lang/rust/commit/ee1474acc43fbf657b0fc910c139cf63cef34dc8"}, {"sha": "38811a1d31beac00e4b7c331341f557a3de2151a", "url": "https://api.github.com/repos/rust-lang/rust/commits/38811a1d31beac00e4b7c331341f557a3de2151a", "html_url": "https://github.com/rust-lang/rust/commit/38811a1d31beac00e4b7c331341f557a3de2151a"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "304b8dffe98679c9f6fea3e7d2558757c1797563", "filename": "src/doc/unstable-book/src/library-features/borrow-state.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/850912704e7bdf3eb8fc7d9ac9b99f913633bb8d/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fborrow-state.md", "raw_url": "https://github.com/rust-lang/rust/raw/850912704e7bdf3eb8fc7d9ac9b99f913633bb8d/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fborrow-state.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fborrow-state.md?ref=850912704e7bdf3eb8fc7d9ac9b99f913633bb8d", "patch": "@@ -0,0 +1,7 @@\n+# `borrow_state`\n+\n+The tracking issue for this feature is: [#27733]\n+\n+[#27733]: https://github.com/rust-lang/rust/issues/27733\n+\n+------------------------"}, {"sha": "5325b339151dc7adcd4dc8fe1b35957ca23f28c2", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/850912704e7bdf3eb8fc7d9ac9b99f913633bb8d/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/850912704e7bdf3eb8fc7d9ac9b99f913633bb8d/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=850912704e7bdf3eb8fc7d9ac9b99f913633bb8d", "patch": "@@ -955,6 +955,44 @@ impl<T: ?Sized> RefCell<T> {\n             &mut *self.value.get()\n         }\n     }\n+\n+    /// Immutably borrows the wrapped value, returning an error if the value is\n+    /// currently mutably borrowed.\n+    ///\n+    /// # Safety\n+    ///\n+    /// Unlike `RefCell::borrow`, this method is unsafe because it does not\n+    /// return a `Ref`, thus leaving the borrow flag untouched. Mutably\n+    /// borrowing the `RefCell` while the reference returned by this method\n+    /// is alive is undefined behaviour.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(borrow_state)]\n+    /// use std::cell::RefCell;\n+    ///\n+    /// let c = RefCell::new(5);\n+    ///\n+    /// {\n+    ///     let m = c.borrow_mut();\n+    ///     assert!(unsafe { c.try_borrow_unguarded() }.is_err());\n+    /// }\n+    ///\n+    /// {\n+    ///     let m = c.borrow();\n+    ///     assert!(unsafe { c.try_borrow_unguarded() }.is_ok());\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"borrow_state\", issue = \"27733\")]\n+    #[inline]\n+    pub unsafe fn try_borrow_unguarded(&self) -> Result<&T, BorrowError> {\n+        if !is_writing(self.borrow.get()) {\n+            Ok(&*self.value.get())\n+        } else {\n+            Err(BorrowError { _private: () })\n+        }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}