{"sha": "027368b885848377a0025ced2734cabf5ff201e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNzM2OGI4ODU4NDgzNzdhMDAyNWNlZDI3MzRjYWJmNWZmMjAxZTE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-26T01:44:52Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-26T01:45:00Z"}, "message": "Janitorial: move llvmext back to llvm module, as they're the same thing now.", "tree": {"sha": "312d2a76d7a8e02686f5b6a81678ee07b8a869cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/312d2a76d7a8e02686f5b6a81678ee07b8a869cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/027368b885848377a0025ced2734cabf5ff201e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/027368b885848377a0025ced2734cabf5ff201e1", "html_url": "https://github.com/rust-lang/rust/commit/027368b885848377a0025ced2734cabf5ff201e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/027368b885848377a0025ced2734cabf5ff201e1/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb08ef44b4b9bd35f887876bf69e5fe944f7471b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb08ef44b4b9bd35f887876bf69e5fe944f7471b", "html_url": "https://github.com/rust-lang/rust/commit/fb08ef44b4b9bd35f887876bf69e5fe944f7471b"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "b19a2972bcfe4400517f1fdc809d0989f3a2fe96", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/027368b885848377a0025ced2734cabf5ff201e1/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027368b885848377a0025ced2734cabf5ff201e1/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=027368b885848377a0025ced2734cabf5ff201e1", "patch": "@@ -4,7 +4,6 @@ import driver.session;\n import front.ast;\n import lib.llvm.False;\n import lib.llvm.llvm;\n-import lib.llvm.llvmext;\n import lib.llvm.mk_object_file;\n import lib.llvm.mk_section_iter;\n import middle.fold;\n@@ -331,23 +330,23 @@ fn load_crate(session.session sess,\n     for (str library_search_path in library_search_paths) {\n         auto path = fs.connect(library_search_path, filename);\n         auto pbuf = _str.buf(path);\n-        auto mb = llvmext.LLVMRustCreateMemoryBufferWithContentsOfFile(pbuf);\n+        auto mb = llvm.LLVMRustCreateMemoryBufferWithContentsOfFile(pbuf);\n         if (mb as int != 0) {\n             auto of = mk_object_file(mb);\n             auto si = mk_section_iter(of.llof);\n-            while (llvmext.LLVMIsSectionIteratorAtEnd(of.llof, si.llsi) ==\n+            while (llvm.LLVMIsSectionIteratorAtEnd(of.llof, si.llsi) ==\n                     False) {\n-                auto name_buf = llvmext.LLVMGetSectionName(si.llsi);\n+                auto name_buf = llvm.LLVMGetSectionName(si.llsi);\n                 auto name = _str.str_from_cstr(name_buf);\n                 if (_str.eq(name, x86.get_meta_sect_name())) {\n-                    auto cbuf = llvmext.LLVMGetSectionContents(si.llsi);\n-                    auto csz = llvmext.LLVMGetSectionSize(si.llsi);\n+                    auto cbuf = llvm.LLVMGetSectionContents(si.llsi);\n+                    auto csz = llvm.LLVMGetSectionSize(si.llsi);\n                     auto cvbuf = cbuf as _vec.vbuf;\n                     auto cvec = _vec.vec_from_vbuf[u8](cvbuf, csz);\n                     sess.set_external_crate(cnum, cvec);\n                     ret;\n                 }\n-                llvmext.LLVMMoveToNextSection(si.llsi);\n+                llvm.LLVMMoveToNextSection(si.llsi);\n             }\n         }\n     }"}, {"sha": "6c1e5042a6fc7b3d19c49b5f7186c795436ec63c", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/027368b885848377a0025ced2734cabf5ff201e1/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027368b885848377a0025ced2734cabf5ff201e1/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=027368b885848377a0025ced2734cabf5ff201e1", "patch": "@@ -22,8 +22,8 @@ import llvm.CallConv;\n import llvm.IntPredicate;\n import llvm.RealPredicate;\n import llvm.Opcode;\n-import llvmext.ObjectFileRef;\n-import llvmext.SectionIteratorRef;\n+import llvm.ObjectFileRef;\n+import llvm.SectionIteratorRef;\n \n type ULongLong = u64;\n type LongLong = i64;\n@@ -740,9 +740,10 @@ native mod llvm = llvm_lib {\n \n     /** Destroys a memory buffer. */\n     fn LLVMDisposeMemoryBuffer(MemoryBufferRef MemBuf);\n-}\n \n-native mod llvmext = llvm_lib {\n+\n+    /* Stuff that's in rustllvm/ because it's not upstream yet. */\n+\n     type ObjectFileRef;\n     type SectionIteratorRef;\n \n@@ -777,6 +778,11 @@ native mod llvmext = llvm_lib {\n     /** Returns a string describing the last error caused by an LLVMRust*\n         call. */\n     fn LLVMRustGetLastError() -> sbuf;\n+\n+\n+}\n+\n+native mod rustllvm = llvm_lib {\n }\n \n /* Slightly more terse object-interface to LLVM's 'builder' functions. */\n@@ -1384,26 +1390,26 @@ fn mk_pass_manager() -> pass_manager {\n /* Memory-managed interface to object files. */\n \n obj object_file_dtor(ObjectFileRef ObjectFile) {\n-    drop { llvmext.LLVMDisposeObjectFile(ObjectFile); }\n+    drop { llvm.LLVMDisposeObjectFile(ObjectFile); }\n }\n \n type object_file = rec(ObjectFileRef llof, object_file_dtor dtor);\n \n fn mk_object_file(MemoryBufferRef llmb) -> object_file {\n-    auto llof = llvmext.LLVMCreateObjectFile(llmb);\n+    auto llof = llvm.LLVMCreateObjectFile(llmb);\n     ret rec(llof=llof, dtor=object_file_dtor(llof));\n }\n \n /* Memory-managed interface to section iterators. */\n \n obj section_iter_dtor(SectionIteratorRef SI) {\n-    drop { llvmext.LLVMDisposeSectionIterator(SI); }\n+    drop { llvm.LLVMDisposeSectionIterator(SI); }\n }\n \n type section_iter = rec(SectionIteratorRef llsi, section_iter_dtor dtor);\n \n fn mk_section_iter(ObjectFileRef llof) -> section_iter {\n-    auto llsi = llvmext.LLVMGetSections(llof);\n+    auto llsi = llvm.LLVMGetSections(llof);\n     ret rec(llsi=llsi, dtor=section_iter_dtor(llsi));\n }\n "}]}