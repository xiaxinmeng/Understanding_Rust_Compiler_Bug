{"sha": "08a60ac6ed68628c4ccdb3fcbb6d780cadd7565a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4YTYwYWM2ZWQ2ODYyOGM0Y2NkYjNmY2JiNmQ3ODBjYWRkNzU2NWE=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-09-21T15:32:24Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-10-02T19:39:01Z"}, "message": "Calculate liveness for the same locals with and without -Zpolonius\n\nThis fixes some test differences and also avoids overflow in\nissue-38591.rs.", "tree": {"sha": "8c5cd0c6c29d2b48efbc743a3d0ac1be8d8d19a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c5cd0c6c29d2b48efbc743a3d0ac1be8d8d19a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08a60ac6ed68628c4ccdb3fcbb6d780cadd7565a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08a60ac6ed68628c4ccdb3fcbb6d780cadd7565a", "html_url": "https://github.com/rust-lang/rust/commit/08a60ac6ed68628c4ccdb3fcbb6d780cadd7565a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08a60ac6ed68628c4ccdb3fcbb6d780cadd7565a/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "url": "https://api.github.com/repos/rust-lang/rust/commits/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "html_url": "https://github.com/rust-lang/rust/commit/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26"}], "stats": {"total": 585, "additions": 84, "deletions": 501}, "files": [{"sha": "7dee00b3eca674f9b0e3d49f0aed5bbe7d94c257", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08a60ac6ed68628c4ccdb3fcbb6d780cadd7565a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a60ac6ed68628c4ccdb3fcbb6d780cadd7565a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=08a60ac6ed68628c4ccdb3fcbb6d780cadd7565a", "patch": "@@ -70,6 +70,10 @@ impl LocalUseMap {\n             appearances: IndexVec::new(),\n         };\n \n+        if live_locals.is_empty() {\n+            return local_use_map;\n+        }\n+\n         let mut locals_with_use_data: IndexVec<Local, bool> =\n             IndexVec::from_elem_n(false, body.local_decls.len());\n         live_locals.iter().for_each(|&local| locals_with_use_data[local] = true);"}, {"sha": "a01b528833b2d01314564b502172dc2c4a9aff0f", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/mod.rs", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/08a60ac6ed68628c4ccdb3fcbb6d780cadd7565a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a60ac6ed68628c4ccdb3fcbb6d780cadd7565a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs?ref=08a60ac6ed68628c4ccdb3fcbb6d780cadd7565a", "patch": "@@ -36,31 +36,39 @@ pub(super) fn generate<'tcx>(\n ) {\n     debug!(\"liveness::generate\");\n \n-    let live_locals: Vec<Local> = if AllFacts::enabled(typeck.tcx()) {\n-        // If \"dump facts from NLL analysis\" was requested perform\n-        // the liveness analysis for all `Local`s. This case opens\n-        // the possibility of the variables being analyzed in `trace`\n-        // to be *any* `Local`, not just the \"live\" ones, so we can't\n-        // make any assumptions past this point as to the characteristics\n-        // of the `live_locals`.\n-        // FIXME: Review \"live\" terminology past this point, we should\n-        // not be naming the `Local`s as live.\n-        body.local_decls.indices().collect()\n+    let free_regions = regions_that_outlive_free_regions(\n+        typeck.infcx.num_region_vars(),\n+        &typeck.borrowck_context.universal_regions,\n+        &typeck.borrowck_context.constraints.outlives_constraints,\n+    );\n+    let live_locals = compute_live_locals(typeck.tcx(), &free_regions, body);\n+    let facts_enabled = AllFacts::enabled(typeck.tcx());\n+\n+\n+    let polonius_drop_used = if facts_enabled {\n+        let mut drop_used = Vec::new();\n+        polonius::populate_access_facts(\n+            typeck,\n+            body,\n+            location_table,\n+            move_data,\n+            &mut drop_used,\n+        );\n+        Some(drop_used)\n     } else {\n-        let free_regions = {\n-            regions_that_outlive_free_regions(\n-                typeck.infcx.num_region_vars(),\n-                &typeck.borrowck_context.universal_regions,\n-                &typeck.borrowck_context.constraints.outlives_constraints,\n-            )\n-        };\n-        compute_live_locals(typeck.tcx(), &free_regions, body)\n+        None\n     };\n \n-    if !live_locals.is_empty() {\n-        trace::trace(typeck, body, elements, flow_inits, move_data, live_locals);\n-\n-        polonius::populate_access_facts(typeck, body, location_table, move_data);\n+    if !live_locals.is_empty() || facts_enabled {\n+        trace::trace(\n+            typeck,\n+            body,\n+            elements,\n+            flow_inits,\n+            move_data,\n+            live_locals,\n+            polonius_drop_used,\n+        );\n     }\n }\n "}, {"sha": "526ad7fb905bb6b3152d89b6e9ec82200be98ff9", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/polonius.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/08a60ac6ed68628c4ccdb3fcbb6d780cadd7565a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a60ac6ed68628c4ccdb3fcbb6d780cadd7565a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs?ref=08a60ac6ed68628c4ccdb3fcbb6d780cadd7565a", "patch": "@@ -16,7 +16,7 @@ struct UseFactsExtractor<'me> {\n     var_defined: &'me mut VarPointRelations,\n     var_used: &'me mut VarPointRelations,\n     location_table: &'me LocationTable,\n-    var_drop_used: &'me mut VarPointRelations,\n+    var_drop_used: &'me mut Vec<(Local, Location)>,\n     move_data: &'me MoveData<'me>,\n     path_accessed_at: &'me mut MovePathPointRelations,\n }\n@@ -39,7 +39,7 @@ impl UseFactsExtractor<'_> {\n \n     fn insert_drop_use(&mut self, local: Local, location: Location) {\n         debug!(\"LivenessFactsExtractor::insert_drop_use()\");\n-        self.var_drop_used.push((local, self.location_to_index(location)));\n+        self.var_drop_used.push((local, location));\n     }\n \n     fn insert_path_access(&mut self, path: MovePathIndex, location: Location) {\n@@ -100,19 +100,24 @@ pub(super) fn populate_access_facts(\n     body: &Body<'tcx>,\n     location_table: &LocationTable,\n     move_data: &MoveData<'_>,\n+    drop_used: &mut Vec<(Local, Location)>,\n ) {\n     debug!(\"populate_var_liveness_facts()\");\n \n     if let Some(facts) = typeck.borrowck_context.all_facts.as_mut() {\n         UseFactsExtractor {\n             var_defined: &mut facts.var_defined,\n             var_used: &mut facts.var_used,\n-            var_drop_used: &mut facts.var_drop_used,\n+            var_drop_used: drop_used,\n             path_accessed_at: &mut facts.path_accessed_at,\n             location_table,\n             move_data,\n         }\n         .visit_body(body);\n+\n+        facts.var_drop_used.extend(drop_used.iter().map(|&(local, location)| {\n+            (local, location_table.mid_index(location))\n+        }));\n     }\n \n     for (local, local_decl) in body.local_decls.iter_enumerated() {"}, {"sha": "eacc4d084dbb808d58ea8c726f213c2fc3657784", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/08a60ac6ed68628c4ccdb3fcbb6d780cadd7565a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a60ac6ed68628c4ccdb3fcbb6d780cadd7565a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs?ref=08a60ac6ed68628c4ccdb3fcbb6d780cadd7565a", "patch": "@@ -13,7 +13,7 @@ use rustc::traits::query::type_op::outlives::DropckOutlives;\n use rustc::traits::query::type_op::TypeOp;\n use rustc::ty::{Ty, TypeFoldable};\n use rustc_index::bit_set::HybridBitSet;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use std::rc::Rc;\n \n /// This is the heart of the liveness computation. For each variable X\n@@ -37,6 +37,7 @@ pub(super) fn trace(\n     flow_inits: &mut FlowAtLocation<'tcx, MaybeInitializedPlaces<'_, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n     live_locals: Vec<Local>,\n+    polonius_drop_used: Option<Vec<(Local, Location)>>,\n ) {\n     debug!(\"trace()\");\n \n@@ -52,7 +53,13 @@ pub(super) fn trace(\n         drop_data: FxHashMap::default(),\n     };\n \n-    LivenessResults::new(cx).compute_for_all_locals(live_locals);\n+    let mut results = LivenessResults::new(cx);\n+\n+    if let Some(drop_used) = polonius_drop_used {\n+        results.add_extra_drop_facts(drop_used, live_locals.iter().copied().collect())\n+    }\n+\n+    results.compute_for_all_locals(live_locals);\n }\n \n /// Contextual state for the type-liveness generator.\n@@ -145,6 +152,32 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n         }\n     }\n \n+    /// Add extra drop facts needed for Polonius.\n+    ///\n+    /// Add facts for all locals with free regions, since regions may outlive\n+    /// the function body only at certain nodes in the CFG.\n+    fn add_extra_drop_facts(\n+        &mut self,\n+        drop_used: Vec<(Local, Location)>,\n+        live_locals: FxHashSet<Local>,\n+    ) {\n+        let locations = HybridBitSet::new_empty(self.cx.elements.num_points());\n+\n+        for (local, location) in drop_used {\n+            if !live_locals.contains(&local) {\n+                let local_ty = self.cx.body.local_decls[local].ty;\n+                if local_ty.has_free_regions() {\n+                    self.cx.add_drop_live_facts_for(\n+                        local,\n+                        local_ty,\n+                        &[location],\n+                        &locations,\n+                    );\n+                }\n+            }\n+        }\n+    }\n+\n     /// Clear the value of fields that are \"per local variable\".\n     fn reset_local_state(&mut self) {\n         self.defs.clear();"}, {"sha": "5f20367b6aba97e8c68dfcb74974fbe9a9c76cf5", "filename": "src/test/ui/async-await/async-borrowck-escaping-closure-error.polonius.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-closure-error.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-closure-error.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-closure-error.polonius.stderr?ref=22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "patch": "@@ -1,16 +0,0 @@\n-error[E0597]: `x` does not live long enough\n-  --> $DIR/async-borrowck-escaping-closure-error.rs:5:24\n-   |\n-LL |     Box::new((async || x)())\n-   |     -------------------^----\n-   |     |         |        |\n-   |     |         |        borrowed value does not live long enough\n-   |     |         value captured here\n-   |     borrow later used here\n-LL |\n-LL | }\n-   | - `x` dropped here while still borrowed\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0597`."}, {"sha": "89af8764557ff58e29428659c9e67dcc989b80d9", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-2.polonius.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.polonius.stderr?ref=22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "patch": "@@ -1,16 +0,0 @@\n-error[E0597]: `books` does not live long enough\n-  --> $DIR/borrowck-escaping-closure-error-2.rs:11:17\n-   |\n-LL |     Box::new(|| books.push(4))\n-   |     ------------^^^^^---------\n-   |     |        |  |\n-   |     |        |  borrowed value does not live long enough\n-   |     |        value captured here\n-   |     borrow later used here\n-LL |\n-LL | }\n-   | - `books` dropped here while still borrowed\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0597`."}, {"sha": "a5b2e8762746c70deb6b760cf67cd9ce62b558d5", "filename": "src/test/ui/borrowck/promote-ref-mut-in-let-issue-46557.polonius.stderr", "status": "removed", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.polonius.stderr?ref=22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "patch": "@@ -1,59 +0,0 @@\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:5:21\n-   |\n-LL |     let ref mut x = 1234543;\n-   |                     ^^^^^^^ creates a temporary which is freed while still in use\n-LL |     x\n-   |     - borrow later used here\n-LL | }\n-   | - temporary value is freed at the end of this statement\n-   |\n-   = note: consider using a `let` binding to create a longer lived value\n-\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:10:25\n-   |\n-LL |     let (ref mut x, ) = (1234543, );\n-   |                         ^^^^^^^^^^^ creates a temporary which is freed while still in use\n-LL |     x\n-   |     - borrow later used here\n-LL | }\n-   | - temporary value is freed at the end of this statement\n-   |\n-   = note: consider using a `let` binding to create a longer lived value\n-\n-error[E0515]: cannot return value referencing temporary value\n-  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:15:5\n-   |\n-LL |       match 1234543 {\n-   |       ^     ------- temporary value created here\n-   |  _____|\n-   | |\n-LL | |         ref mut x => x\n-LL | |     }\n-   | |_____^ returns a value referencing data owned by the current function\n-\n-error[E0515]: cannot return value referencing temporary value\n-  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:21:5\n-   |\n-LL |       match (123443,) {\n-   |       ^     --------- temporary value created here\n-   |  _____|\n-   | |\n-LL | |         (ref mut x,) => x,\n-LL | |     }\n-   | |_____^ returns a value referencing data owned by the current function\n-\n-error[E0515]: cannot return reference to temporary value\n-  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:27:5\n-   |\n-LL |     &mut 1234543\n-   |     ^^^^^-------\n-   |     |    |\n-   |     |    temporary value created here\n-   |     returns a reference to data owned by the current function\n-\n-error: aborting due to 5 previous errors\n-\n-Some errors have detailed explanations: E0515, E0716.\n-For more information about an error, try `rustc --explain E0515`."}, {"sha": "c818379762c9df661067128c0557dfab0b019a0b", "filename": "src/test/ui/borrowck/return-local-binding-from-desugaring.polonius.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fborrowck%2Freturn-local-binding-from-desugaring.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fborrowck%2Freturn-local-binding-from-desugaring.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freturn-local-binding-from-desugaring.polonius.stderr?ref=22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "patch": "@@ -1,16 +0,0 @@\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/return-local-binding-from-desugaring.rs:26:18\n-   |\n-LL |     for ref x in xs {\n-   |                  ^^ creates a temporary which is freed while still in use\n-...\n-LL |     }\n-   |     - temporary value is freed at the end of this statement\n-LL |     result\n-   |     ------ borrow later used here\n-   |\n-   = note: consider using a `let` binding to create a longer lived value\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0716`."}, {"sha": "7b246426a23334c8e6fbf0b74bf38ed56bc7f0bc", "filename": "src/test/ui/borrowck/two-phase-surprise-no-conflict.polonius.stderr", "status": "removed", "additions": 0, "deletions": 148, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.polonius.stderr?ref=22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "patch": "@@ -1,148 +0,0 @@\n-error[E0503]: cannot use `self.cx` because it was mutably borrowed\n-  --> $DIR/two-phase-surprise-no-conflict.rs:21:23\n-   |\n-LL |         let _mut_borrow = &mut *self;\n-   |                           ---------- borrow of `*self` occurs here\n-LL |         let _access = self.cx;\n-   |                       ^^^^^^^ use of borrowed `*self`\n-LL |\n-LL |         _mut_borrow;\n-   |         ----------- borrow later used here\n-\n-error[E0502]: cannot borrow `*self` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-surprise-no-conflict.rs:57:17\n-   |\n-LL |                 self.hash_expr(&self.cx_mut.body(eid).value);\n-   |                 ^^^^^---------^^-----------^^^^^^^^^^^^^^^^^\n-   |                 |    |          |\n-   |                 |    |          immutable borrow occurs here\n-   |                 |    immutable borrow later used by call\n-   |                 mutable borrow occurs here\n-\n-error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n-  --> $DIR/two-phase-surprise-no-conflict.rs:119:51\n-   |\n-LL |     reg.register_static(Box::new(TrivialPass::new(&mut reg.sess_mut)));\n-   |     --- ---------------                           ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n-   |     |   |\n-   |     |   first borrow later used by call\n-   |     first mutable borrow occurs here\n-\n-error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n-  --> $DIR/two-phase-surprise-no-conflict.rs:122:54\n-   |\n-LL |     reg.register_bound(Box::new(TrivialPass::new_mut(&mut reg.sess_mut)));\n-   |     --- --------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n-   |     |   |\n-   |     |   first borrow later used by call\n-   |     first mutable borrow occurs here\n-\n-error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n-  --> $DIR/two-phase-surprise-no-conflict.rs:125:53\n-   |\n-LL |     reg.register_univ(Box::new(TrivialPass::new_mut(&mut reg.sess_mut)));\n-   |     --- -------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n-   |     |   |\n-   |     |   first borrow later used by call\n-   |     first mutable borrow occurs here\n-\n-error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n-  --> $DIR/two-phase-surprise-no-conflict.rs:128:44\n-   |\n-LL |     reg.register_ref(&TrivialPass::new_mut(&mut reg.sess_mut));\n-   |     --- ------------                       ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n-   |     |   |\n-   |     |   first borrow later used by call\n-   |     first mutable borrow occurs here\n-\n-error[E0502]: cannot borrow `*reg` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-surprise-no-conflict.rs:138:5\n-   |\n-LL |     reg.register_bound(Box::new(CapturePass::new(&reg.sess_mut)));\n-   |     ^^^^--------------^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------^^^\n-   |     |   |                                        |\n-   |     |   |                                        immutable borrow occurs here\n-   |     |   immutable borrow later used by call\n-   |     mutable borrow occurs here\n-\n-error[E0502]: cannot borrow `*reg` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-surprise-no-conflict.rs:141:5\n-   |\n-LL |     reg.register_univ(Box::new(CapturePass::new(&reg.sess_mut)));\n-   |     ^^^^-------------^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------^^^\n-   |     |   |                                       |\n-   |     |   |                                       immutable borrow occurs here\n-   |     |   immutable borrow later used by call\n-   |     mutable borrow occurs here\n-\n-error[E0502]: cannot borrow `*reg` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-surprise-no-conflict.rs:144:5\n-   |\n-LL |     reg.register_ref(&CapturePass::new(&reg.sess_mut));\n-   |     ^^^^------------^^^^^^^^^^^^^^^^^^^-------------^^\n-   |     |   |                              |\n-   |     |   |                              immutable borrow occurs here\n-   |     |   immutable borrow later used by call\n-   |     mutable borrow occurs here\n-\n-error[E0499]: cannot borrow `*reg` as mutable more than once at a time\n-  --> $DIR/two-phase-surprise-no-conflict.rs:154:5\n-   |\n-LL |     reg.register_bound(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n-   |     ^^^^--------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------^^^\n-   |     |   |                                            |\n-   |     |   |                                            first mutable borrow occurs here\n-   |     |   first borrow later used by call\n-   |     second mutable borrow occurs here\n-\n-error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n-  --> $DIR/two-phase-surprise-no-conflict.rs:154:54\n-   |\n-LL |     reg.register_bound(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n-   |     --- --------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n-   |     |   |\n-   |     |   first borrow later used by call\n-   |     first mutable borrow occurs here\n-\n-error[E0499]: cannot borrow `*reg` as mutable more than once at a time\n-  --> $DIR/two-phase-surprise-no-conflict.rs:158:5\n-   |\n-LL |     reg.register_univ(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n-   |     ^^^^-------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------^^^\n-   |     |   |                                           |\n-   |     |   |                                           first mutable borrow occurs here\n-   |     |   first borrow later used by call\n-   |     second mutable borrow occurs here\n-\n-error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n-  --> $DIR/two-phase-surprise-no-conflict.rs:158:53\n-   |\n-LL |     reg.register_univ(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n-   |     --- -------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n-   |     |   |\n-   |     |   first borrow later used by call\n-   |     first mutable borrow occurs here\n-\n-error[E0499]: cannot borrow `*reg` as mutable more than once at a time\n-  --> $DIR/two-phase-surprise-no-conflict.rs:162:5\n-   |\n-LL |     reg.register_ref(&CapturePass::new_mut(&mut reg.sess_mut));\n-   |     ^^^^------------^^^^^^^^^^^^^^^^^^^^^^^-----------------^^\n-   |     |   |                                  |\n-   |     |   |                                  first mutable borrow occurs here\n-   |     |   first borrow later used by call\n-   |     second mutable borrow occurs here\n-\n-error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n-  --> $DIR/two-phase-surprise-no-conflict.rs:162:44\n-   |\n-LL |     reg.register_ref(&CapturePass::new_mut(&mut reg.sess_mut));\n-   |     --- ------------                       ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n-   |     |   |\n-   |     |   first borrow later used by call\n-   |     first mutable borrow occurs here\n-\n-error: aborting due to 15 previous errors\n-\n-Some errors have detailed explanations: E0499, E0502, E0503.\n-For more information about an error, try `rustc --explain E0499`."}, {"sha": "cf41bd7bdb1ebb3b1502fa9a6c9bd3a2f2b609b2", "filename": "src/test/ui/consts/promote_const_let.polonius.stderr", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.polonius.stderr?ref=22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "patch": "@@ -1,29 +0,0 @@\n-error[E0597]: `y` does not live long enough\n-  --> $DIR/promote_const_let.rs:4:9\n-   |\n-LL |     let x: &'static u32 = {\n-   |         - borrow later stored here\n-LL |         let y = 42;\n-LL |         &y\n-   |         ^^ borrowed value does not live long enough\n-LL |     };\n-   |     - `y` dropped here while still borrowed\n-\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote_const_let.rs:6:28\n-   |\n-LL |       let x: &'static u32 = &{\n-   |  ____________------------____^\n-   | |            |\n-   | |            type annotation requires that borrow lasts for `'static`\n-LL | |         let y = 42;\n-LL | |         y\n-LL | |     };\n-   | |_____^ creates a temporary which is freed while still in use\n-LL |   }\n-   |   - temporary value is freed at the end of this statement\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0597, E0716.\n-For more information about an error, try `rustc --explain E0597`."}, {"sha": "5e93a0234259c154435e3cffd30e060a233403ce", "filename": "src/test/ui/dropck/dropck_trait_cycle_checked.polonius.stderr", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.polonius.stderr?ref=22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "patch": "@@ -1,78 +0,0 @@\n-error[E0597]: `o2` does not live long enough\n-  --> $DIR/dropck_trait_cycle_checked.rs:111:13\n-   |\n-LL |     o1.set0(&o2);\n-   |             ^^^ borrowed value does not live long enough\n-...\n-LL | }\n-   | -\n-   | |\n-   | `o2` dropped here while still borrowed\n-   | borrow might be used here, when `o1` is dropped and runs the destructor for type `std::boxed::Box<dyn Obj<'_>>`\n-   |\n-   = note: values in a scope are dropped in the opposite order they are defined\n-\n-error[E0597]: `o3` does not live long enough\n-  --> $DIR/dropck_trait_cycle_checked.rs:112:13\n-   |\n-LL |     o1.set1(&o3);\n-   |             ^^^ borrowed value does not live long enough\n-...\n-LL | }\n-   | -\n-   | |\n-   | `o3` dropped here while still borrowed\n-   | borrow might be used here, when `o1` is dropped and runs the destructor for type `std::boxed::Box<dyn Obj<'_>>`\n-   |\n-   = note: values in a scope are dropped in the opposite order they are defined\n-\n-error[E0597]: `o2` does not live long enough\n-  --> $DIR/dropck_trait_cycle_checked.rs:113:13\n-   |\n-LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                               -------- cast requires that `o2` is borrowed for `'static`\n-...\n-LL |     o2.set0(&o2);\n-   |             ^^^ borrowed value does not live long enough\n-...\n-LL | }\n-   | - `o2` dropped here while still borrowed\n-\n-error[E0597]: `o3` does not live long enough\n-  --> $DIR/dropck_trait_cycle_checked.rs:114:13\n-   |\n-LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                               -------- cast requires that `o3` is borrowed for `'static`\n-...\n-LL |     o2.set1(&o3);\n-   |             ^^^ borrowed value does not live long enough\n-...\n-LL | }\n-   | - `o3` dropped here while still borrowed\n-\n-error[E0597]: `o1` does not live long enough\n-  --> $DIR/dropck_trait_cycle_checked.rs:115:13\n-   |\n-LL |     o3.set0(&o1);\n-   |             ^^^ borrowed value does not live long enough\n-LL |     o3.set1(&o2);\n-LL | }\n-   | -\n-   | |\n-   | `o1` dropped here while still borrowed\n-   | borrow might be used here, when `o1` is dropped and runs the destructor for type `std::boxed::Box<dyn Obj<'_>>`\n-\n-error[E0597]: `o2` does not live long enough\n-  --> $DIR/dropck_trait_cycle_checked.rs:116:13\n-   |\n-LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                                         -------- cast requires that `o2` is borrowed for `'static`\n-...\n-LL |     o3.set1(&o2);\n-   |             ^^^ borrowed value does not live long enough\n-LL | }\n-   | - `o2` dropped here while still borrowed\n-\n-error: aborting due to 6 previous errors\n-\n-For more information about this error, try `rustc --explain E0597`."}, {"sha": "530bf368f676e41476eb9948e91e939a268c5e97", "filename": "src/test/ui/generator/ref-escapes-but-not-over-yield.polonius.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.polonius.stderr?ref=22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "patch": "@@ -1,20 +0,0 @@\n-error[E0597]: `b` does not live long enough\n-  --> $DIR/ref-escapes-but-not-over-yield.rs:11:13\n-   |\n-LL |       let mut b = move || {\n-   |  _________________-\n-LL | |         yield();\n-LL | |         let b = 5;\n-LL | |         a = &b;\n-   | |             ^^ borrowed value does not live long enough\n-LL | |\n-LL | |     };\n-   | |     -\n-   | |     |\n-   | |     `b` dropped here while still borrowed\n-   | |_____... and the borrow might be used here, when that temporary is dropped and runs the destructor for generator\n-   |       a temporary with access to the borrow is created here ...\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0597`."}, {"sha": "476d86cfba9c326082ff0bf7c7da9d9ddba9cba0", "filename": "src/test/ui/nll/get_default.polonius.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/08a60ac6ed68628c4ccdb3fcbb6d780cadd7565a/src%2Ftest%2Fui%2Fnll%2Fget_default.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08a60ac6ed68628c4ccdb3fcbb6d780cadd7565a/src%2Ftest%2Fui%2Fnll%2Fget_default.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fget_default.polonius.stderr?ref=08a60ac6ed68628c4ccdb3fcbb6d780cadd7565a", "patch": "@@ -1,14 +1,17 @@\n error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable\n   --> $DIR/get_default.rs:32:17\n    |\n+LL | fn err(map: &mut Map) -> &String {\n+   |             - let's call the lifetime of this reference `'1`\n+LL |     loop {\n LL |         match map.get() {\n    |               --- immutable borrow occurs here\n LL |             Some(v) => {\n LL |                 map.set(String::new()); // Both AST and MIR error here\n    |                 ^^^ mutable borrow occurs here\n LL |\n LL |                 return v;\n-   |                        - immutable borrow later used here\n+   |                        - returning this value requires that `*map` is borrowed for `'1`\n \n error: aborting due to previous error\n "}, {"sha": "eb8442b31d7c73b323076b65fee62c112f77bfa5", "filename": "src/test/ui/nll/loan_ends_mid_block_pair.polonius.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_pair.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_pair.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_pair.polonius.stderr?ref=22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "patch": "@@ -1,15 +0,0 @@\n-error[E0506]: cannot assign to `data.0` because it is borrowed\n-  --> $DIR/loan_ends_mid_block_pair.rs:12:5\n-   |\n-LL |     let c = &mut data.0;\n-   |             ----------- borrow of `data.0` occurs here\n-LL |     capitalize(c);\n-LL |     data.0 = 'e';\n-   |     ^^^^^^^^^^^^ assignment to borrowed `data.0` occurs here\n-...\n-LL |     capitalize(c);\n-   |                - borrow later used here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0506`."}, {"sha": "1faf8e2212aab753c56bb043d1e5965d58b5d771", "filename": "src/test/ui/nll/polonius/polonius-smoke-test.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08a60ac6ed68628c4ccdb3fcbb6d780cadd7565a/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fpolonius-smoke-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08a60ac6ed68628c4ccdb3fcbb6d780cadd7565a/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fpolonius-smoke-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fpolonius-smoke-test.stderr?ref=08a60ac6ed68628c4ccdb3fcbb6d780cadd7565a", "patch": "@@ -17,12 +17,14 @@ LL |     let w = y;\n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/polonius-smoke-test.rs:19:13\n    |\n+LL | pub fn use_while_mut_fr(x: &mut i32) -> &mut i32 {\n+   |                            - let's call the lifetime of this reference `'1`\n LL |     let y = &mut *x;\n    |             ------- borrow of `*x` occurs here\n LL |     let z = x;\n    |             ^ move out of `x` occurs here\n LL |     y\n-   |     - borrow later used here\n+   |     - returning this value requires that `*x` is borrowed for `'1`\n \n error[E0505]: cannot move out of `s` because it is borrowed\n   --> $DIR/polonius-smoke-test.rs:43:5"}, {"sha": "8e3cf59cffb44392efef77e735cec8d45d4b0892", "filename": "src/test/ui/nll/return-ref-mut-issue-46557.polonius.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.polonius.stderr?ref=22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "patch": "@@ -1,15 +0,0 @@\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/return-ref-mut-issue-46557.rs:4:21\n-   |\n-LL |     let ref mut x = 1234543;\n-   |                     ^^^^^^^ creates a temporary which is freed while still in use\n-LL |     x\n-   |     - borrow later used here\n-LL | }\n-   | - temporary value is freed at the end of this statement\n-   |\n-   = note: consider using a `let` binding to create a longer lived value\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0716`."}, {"sha": "4b906f75149af30ca900d06094f67c4190775ccc", "filename": "src/test/ui/unboxed-closures/unboxed-closures-failed-recursive-fn-1.polonius.stderr", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.polonius.stderr?ref=22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "patch": "@@ -1,60 +0,0 @@\n-error[E0597]: `factorial` does not live long enough\n-  --> $DIR/unboxed-closures-failed-recursive-fn-1.rs:15:17\n-   |\n-LL |     let f = |x: u32| -> u32 {\n-   |             --------------- value captured here\n-LL |         let g = factorial.as_ref().unwrap();\n-   |                 ^^^^^^^^^ borrowed value does not live long enough\n-...\n-LL | }\n-   | -\n-   | |\n-   | `factorial` dropped here while still borrowed\n-   | borrow might be used here, when `factorial` is dropped and runs the destructor for type `std::option::Option<std::boxed::Box<dyn std::ops::Fn(u32) -> u32>>`\n-\n-error[E0506]: cannot assign to `factorial` because it is borrowed\n-  --> $DIR/unboxed-closures-failed-recursive-fn-1.rs:20:5\n-   |\n-LL |     let f = |x: u32| -> u32 {\n-   |             --------------- borrow of `factorial` occurs here\n-LL |         let g = factorial.as_ref().unwrap();\n-   |                 --------- borrow occurs due to use in closure\n-...\n-LL |     factorial = Some(Box::new(f));\n-   |     ^^^^^^^^^\n-   |     |\n-   |     assignment to borrowed `factorial` occurs here\n-   |     borrow later used here\n-\n-error[E0597]: `factorial` does not live long enough\n-  --> $DIR/unboxed-closures-failed-recursive-fn-1.rs:28:17\n-   |\n-LL |     let f = |x: u32| -> u32 {\n-   |             --------------- value captured here\n-LL |         let g = factorial.as_ref().unwrap();\n-   |                 ^^^^^^^^^ borrowed value does not live long enough\n-...\n-LL | }\n-   | -\n-   | |\n-   | `factorial` dropped here while still borrowed\n-   | borrow might be used here, when `factorial` is dropped and runs the destructor for type `std::option::Option<std::boxed::Box<dyn std::ops::Fn(u32) -> u32>>`\n-\n-error[E0506]: cannot assign to `factorial` because it is borrowed\n-  --> $DIR/unboxed-closures-failed-recursive-fn-1.rs:33:5\n-   |\n-LL |     let f = |x: u32| -> u32 {\n-   |             --------------- borrow of `factorial` occurs here\n-LL |         let g = factorial.as_ref().unwrap();\n-   |                 --------- borrow occurs due to use in closure\n-...\n-LL |     factorial = Some(Box::new(f));\n-   |     ^^^^^^^^^\n-   |     |\n-   |     assignment to borrowed `factorial` occurs here\n-   |     borrow later used here\n-\n-error: aborting due to 4 previous errors\n-\n-Some errors have detailed explanations: E0506, E0597.\n-For more information about an error, try `rustc --explain E0506`."}]}