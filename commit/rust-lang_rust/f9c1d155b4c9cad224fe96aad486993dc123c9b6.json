{"sha": "f9c1d155b4c9cad224fe96aad486993dc123c9b6", "node_id": "C_kwDOAAsO6NoAKGY5YzFkMTU1YjRjOWNhZDIyNGZlOTZhYWQ0ODY5OTNkYzEyM2M5YjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-03T21:43:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-03T21:43:02Z"}, "message": "Auto merge of #10716 - Icxolu:unitstruct_default_construction, r=Manishearth\n\nFixes #10609: Adds lint to detect construction of unit struct using `default`\n\nUsing `default` to construct a unit struct increases code complexity and adds a function call. This can be avoided by simply removing the call to `default` and simply construct by name.\n\nchangelog: [`default_constructed_unit_structs`]: detects construction of unit structs using `default`\n\nfixes #10609", "tree": {"sha": "ec469febbbe4261a6bcd69f9f92195cea1cb5113", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec469febbbe4261a6bcd69f9f92195cea1cb5113"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9c1d155b4c9cad224fe96aad486993dc123c9b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9c1d155b4c9cad224fe96aad486993dc123c9b6", "html_url": "https://github.com/rust-lang/rust/commit/f9c1d155b4c9cad224fe96aad486993dc123c9b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9c1d155b4c9cad224fe96aad486993dc123c9b6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2e0d43485eff8a73c61d9118cd8ed5a1a292007", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2e0d43485eff8a73c61d9118cd8ed5a1a292007", "html_url": "https://github.com/rust-lang/rust/commit/c2e0d43485eff8a73c61d9118cd8ed5a1a292007"}, {"sha": "48ae5a071bc32e5fb69669248ab103ecba7509ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/48ae5a071bc32e5fb69669248ab103ecba7509ab", "html_url": "https://github.com/rust-lang/rust/commit/48ae5a071bc32e5fb69669248ab103ecba7509ab"}], "stats": {"total": 398, "additions": 374, "deletions": 24}, "files": [{"sha": "df064871c30292ec70e24e3768d6efaade252a7d", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1d155b4c9cad224fe96aad486993dc123c9b6/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1d155b4c9cad224fe96aad486993dc123c9b6/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=f9c1d155b4c9cad224fe96aad486993dc123c9b6", "patch": "@@ -4582,6 +4582,7 @@ Released 2018-09-13\n [`debug_assert_with_mut_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#debug_assert_with_mut_call\n [`decimal_literal_representation`]: https://rust-lang.github.io/rust-clippy/master/index.html#decimal_literal_representation\n [`declare_interior_mutable_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#declare_interior_mutable_const\n+[`default_constructed_unit_structs`]: https://rust-lang.github.io/rust-clippy/master/index.html#default_constructed_unit_structs\n [`default_instead_of_iter_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#default_instead_of_iter_empty\n [`default_numeric_fallback`]: https://rust-lang.github.io/rust-clippy/master/index.html#default_numeric_fallback\n [`default_trait_access`]: https://rust-lang.github.io/rust-clippy/master/index.html#default_trait_access"}, {"sha": "8174c3b0564de1717df93c74db266662145f57eb", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1d155b4c9cad224fe96aad486993dc123c9b6/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1d155b4c9cad224fe96aad486993dc123c9b6/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=f9c1d155b4c9cad224fe96aad486993dc123c9b6", "patch": "@@ -105,6 +105,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::dbg_macro::DBG_MACRO_INFO,\n     crate::default::DEFAULT_TRAIT_ACCESS_INFO,\n     crate::default::FIELD_REASSIGN_WITH_DEFAULT_INFO,\n+    crate::default_constructed_unit_structs::DEFAULT_CONSTRUCTED_UNIT_STRUCTS_INFO,\n     crate::default_instead_of_iter_empty::DEFAULT_INSTEAD_OF_ITER_EMPTY_INFO,\n     crate::default_numeric_fallback::DEFAULT_NUMERIC_FALLBACK_INFO,\n     crate::default_union_representation::DEFAULT_UNION_REPRESENTATION_INFO,"}, {"sha": "e529d81a7e9f38717e225d547b0b556d30c83667", "filename": "clippy_lints/src/default_constructed_unit_structs.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1d155b4c9cad224fe96aad486993dc123c9b6/clippy_lints%2Fsrc%2Fdefault_constructed_unit_structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1d155b4c9cad224fe96aad486993dc123c9b6/clippy_lints%2Fsrc%2Fdefault_constructed_unit_structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_constructed_unit_structs.rs?ref=f9c1d155b4c9cad224fe96aad486993dc123c9b6", "patch": "@@ -0,0 +1,72 @@\n+use clippy_utils::{diagnostics::span_lint_and_sugg, is_from_proc_macro, match_def_path, paths};\n+use hir::{def::Res, ExprKind};\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Check for construction on unit struct using `default`.\n+    ///\n+    /// ### Why is this bad?\n+    /// This adds code complexity and an unnecessary function call.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # use std::marker::PhantomData;\n+    /// #[derive(Default)]\n+    /// struct S<T> {\n+    ///     _marker: PhantomData<T>\n+    /// }\n+    ///\n+    /// let _: S<i32> = S {\n+    ///     _marker: PhantomData::default()\n+    /// };\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::marker::PhantomData;\n+    /// struct S<T> {\n+    ///     _marker: PhantomData<T>\n+    /// }\n+    ///\n+    /// let _: S<i32> = S {\n+    ///     _marker: PhantomData\n+    /// };\n+    /// ```\n+    #[clippy::version = \"1.71.0\"]\n+    pub DEFAULT_CONSTRUCTED_UNIT_STRUCTS,\n+    complexity,\n+    \"unit structs can be contructed without calling `default`\"\n+}\n+declare_lint_pass!(DefaultConstructedUnitStructs => [DEFAULT_CONSTRUCTED_UNIT_STRUCTS]);\n+\n+impl LateLintPass<'_> for DefaultConstructedUnitStructs {\n+    fn check_expr<'tcx>(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'tcx>) {\n+        if_chain!(\n+            // make sure we have a call to `Default::default`\n+            if let hir::ExprKind::Call(fn_expr, &[]) = expr.kind;\n+            if let ExprKind::Path(ref qpath@ hir::QPath::TypeRelative(_,_)) = fn_expr.kind;\n+            if let Res::Def(_, def_id) = cx.qpath_res(qpath, fn_expr.hir_id);\n+            if match_def_path(cx, def_id, &paths::DEFAULT_TRAIT_METHOD);\n+            // make sure we have a struct with no fields (unit struct)\n+            if let ty::Adt(def, ..) = cx.typeck_results().expr_ty(expr).kind();\n+            if def.is_struct();\n+            if let var @ ty::VariantDef { ctor: Some((hir::def::CtorKind::Const, _)), .. } = def.non_enum_variant();\n+            if !var.is_field_list_non_exhaustive() && !is_from_proc_macro(cx, expr);\n+            then {\n+                span_lint_and_sugg(\n+                    cx,\n+                    DEFAULT_CONSTRUCTED_UNIT_STRUCTS,\n+                    expr.span.with_lo(qpath.qself_span().hi()),\n+                    \"use of `default` to create a unit struct\",\n+                    \"remove this call to `default`\",\n+                    String::new(),\n+                    Applicability::MachineApplicable,\n+                )\n+            }\n+        );\n+    }\n+}"}, {"sha": "657a3d1f4310750c9aebbfe2c8c300086cbc5bb6", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1d155b4c9cad224fe96aad486993dc123c9b6/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1d155b4c9cad224fe96aad486993dc123c9b6/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f9c1d155b4c9cad224fe96aad486993dc123c9b6", "patch": "@@ -94,6 +94,7 @@ mod crate_in_macro_def;\n mod create_dir;\n mod dbg_macro;\n mod default;\n+mod default_constructed_unit_structs;\n mod default_instead_of_iter_empty;\n mod default_numeric_fallback;\n mod default_union_representation;\n@@ -970,6 +971,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(manual_slice_size_calculation::ManualSliceSizeCalculation));\n     store.register_early_pass(|| Box::new(suspicious_doc_comments::SuspiciousDocComments));\n     store.register_late_pass(|_| Box::new(items_after_test_module::ItemsAfterTestModule));\n+    store.register_late_pass(|_| Box::new(default_constructed_unit_structs::DefaultConstructedUnitStructs));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "e6331290420b47bb5604792fc516a6e755c7112f", "filename": "tests/ui/box_default.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1d155b4c9cad224fe96aad486993dc123c9b6/tests%2Fui%2Fbox_default.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1d155b4c9cad224fe96aad486993dc123c9b6/tests%2Fui%2Fbox_default.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.fixed?ref=f9c1d155b4c9cad224fe96aad486993dc123c9b6", "patch": "@@ -1,5 +1,6 @@\n //@run-rustfix\n #![warn(clippy::box_default)]\n+#![allow(clippy::default_constructed_unit_structs)]\n \n #[derive(Default)]\n struct ImplementsDefault;"}, {"sha": "34a05a29c5aa343ff21993aaf256833c2639ef4c", "filename": "tests/ui/box_default.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1d155b4c9cad224fe96aad486993dc123c9b6/tests%2Fui%2Fbox_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1d155b4c9cad224fe96aad486993dc123c9b6/tests%2Fui%2Fbox_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.rs?ref=f9c1d155b4c9cad224fe96aad486993dc123c9b6", "patch": "@@ -1,5 +1,6 @@\n //@run-rustfix\n #![warn(clippy::box_default)]\n+#![allow(clippy::default_constructed_unit_structs)]\n \n #[derive(Default)]\n struct ImplementsDefault;"}, {"sha": "c9834863601446b21d7325d316111a70ad10e79e", "filename": "tests/ui/box_default.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1d155b4c9cad224fe96aad486993dc123c9b6/tests%2Fui%2Fbox_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1d155b4c9cad224fe96aad486993dc123c9b6/tests%2Fui%2Fbox_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.stderr?ref=f9c1d155b4c9cad224fe96aad486993dc123c9b6", "patch": "@@ -1,97 +1,97 @@\n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:22:32\n+  --> $DIR/box_default.rs:23:32\n    |\n LL |     let _string: Box<String> = Box::new(Default::default());\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::default()`\n    |\n    = note: `-D clippy::box-default` implied by `-D warnings`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:23:17\n+  --> $DIR/box_default.rs:24:17\n    |\n LL |     let _byte = Box::new(u8::default());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<u8>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:24:16\n+  --> $DIR/box_default.rs:25:16\n    |\n LL |     let _vec = Box::new(Vec::<u8>::new());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<Vec<u8>>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:25:17\n+  --> $DIR/box_default.rs:26:17\n    |\n LL |     let _impl = Box::new(ImplementsDefault::default());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<ImplementsDefault>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:26:18\n+  --> $DIR/box_default.rs:27:18\n    |\n LL |     let _impl2 = Box::new(<ImplementsDefault as Default>::default());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<ImplementsDefault>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:27:42\n+  --> $DIR/box_default.rs:28:42\n    |\n LL |     let _impl3: Box<ImplementsDefault> = Box::new(Default::default());\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:29:28\n+  --> $DIR/box_default.rs:30:28\n    |\n LL |     let _in_macro = outer!(Box::new(String::new()));\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<String>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:30:34\n+  --> $DIR/box_default.rs:31:34\n    |\n LL |     let _string_default = outer!(Box::new(String::from(\"\")));\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<String>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:31:46\n+  --> $DIR/box_default.rs:32:46\n    |\n LL |     let _vec2: Box<Vec<ImplementsDefault>> = Box::new(vec![]);\n    |                                              ^^^^^^^^^^^^^^^^ help: try: `Box::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:32:33\n+  --> $DIR/box_default.rs:33:33\n    |\n LL |     let _vec3: Box<Vec<bool>> = Box::new(Vec::from([]));\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:33:25\n+  --> $DIR/box_default.rs:34:25\n    |\n LL |     let _vec4: Box<_> = Box::new(Vec::from([false; 0]));\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<Vec<bool>>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:35:16\n+  --> $DIR/box_default.rs:36:16\n    |\n LL |     call_ty_fn(Box::new(u8::default()));\n    |                ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:40:5\n+  --> $DIR/box_default.rs:41:5\n    |\n LL |     Box::new(bool::default())\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<bool>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:57:28\n+  --> $DIR/box_default.rs:58:28\n    |\n LL |     let _: Box<dyn Read> = Box::new(ImplementsDefault::default());\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<ImplementsDefault>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:66:17\n+  --> $DIR/box_default.rs:67:17\n    |\n LL |         let _ = Box::new(WeirdPathed::default());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<WeirdPathed>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:78:18\n+  --> $DIR/box_default.rs:79:18\n    |\n LL |             Some(Box::new(Foo::default()))\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<Foo>::default()`"}, {"sha": "4c2d1ea48e1192284417b679e145ab4c3ba71423", "filename": "tests/ui/default_constructed_unit_structs.fixed", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1d155b4c9cad224fe96aad486993dc123c9b6/tests%2Fui%2Fdefault_constructed_unit_structs.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1d155b4c9cad224fe96aad486993dc123c9b6/tests%2Fui%2Fdefault_constructed_unit_structs.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_constructed_unit_structs.fixed?ref=f9c1d155b4c9cad224fe96aad486993dc123c9b6", "patch": "@@ -0,0 +1,119 @@\n+//@run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::default_constructed_unit_structs)]\n+use std::marker::PhantomData;\n+\n+#[derive(Default)]\n+struct UnitStruct;\n+\n+impl UnitStruct {\n+    fn new() -> Self {\n+        //should lint\n+        Self\n+    }\n+}\n+\n+#[derive(Default)]\n+struct TupleStruct(usize);\n+\n+impl TupleStruct {\n+    fn new() -> Self {\n+        // should not lint\n+        Self(Default::default())\n+    }\n+}\n+\n+// no lint for derived impl\n+#[derive(Default)]\n+struct NormalStruct {\n+    inner: PhantomData<usize>,\n+}\n+\n+struct NonDefaultStruct;\n+\n+impl NonDefaultStruct {\n+    fn default() -> Self {\n+        Self\n+    }\n+}\n+\n+#[derive(Default)]\n+enum SomeEnum {\n+    #[default]\n+    Unit,\n+    Tuple(UnitStruct),\n+    Struct {\n+        inner: usize,\n+    },\n+}\n+\n+impl NormalStruct {\n+    fn new() -> Self {\n+        // should lint\n+        Self {\n+            inner: PhantomData,\n+        }\n+    }\n+\n+    fn new2() -> Self {\n+        // should not lint\n+        Self {\n+            inner: Default::default(),\n+        }\n+    }\n+}\n+\n+#[derive(Default)]\n+struct GenericStruct<T> {\n+    t: T,\n+}\n+\n+impl<T: Default> GenericStruct<T> {\n+    fn new() -> Self {\n+        // should not lint\n+        Self { t: T::default() }\n+    }\n+\n+    fn new2() -> Self {\n+        // should not lint\n+        Self { t: Default::default() }\n+    }\n+}\n+\n+struct FakeDefault;\n+impl FakeDefault {\n+    fn default() -> Self {\n+        Self\n+    }\n+}\n+\n+impl Default for FakeDefault {\n+    fn default() -> Self {\n+        Self\n+    }\n+}\n+\n+#[derive(Default)]\n+struct EmptyStruct {}\n+\n+#[derive(Default)]\n+#[non_exhaustive]\n+struct NonExhaustiveStruct;\n+\n+fn main() {\n+    // should lint\n+    let _ = PhantomData::<usize>;\n+    let _: PhantomData<i32> = PhantomData;\n+    let _ = UnitStruct;\n+\n+    // should not lint\n+    let _ = TupleStruct::default();\n+    let _ = NormalStruct::default();\n+    let _ = NonExhaustiveStruct::default();\n+    let _ = SomeEnum::default();\n+    let _ = NonDefaultStruct::default();\n+    let _ = EmptyStruct::default();\n+    let _ = FakeDefault::default();\n+    let _ = <FakeDefault as Default>::default();\n+}"}, {"sha": "850793dd5de81a32e4494474240adfc02d90ac05", "filename": "tests/ui/default_constructed_unit_structs.rs", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1d155b4c9cad224fe96aad486993dc123c9b6/tests%2Fui%2Fdefault_constructed_unit_structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1d155b4c9cad224fe96aad486993dc123c9b6/tests%2Fui%2Fdefault_constructed_unit_structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_constructed_unit_structs.rs?ref=f9c1d155b4c9cad224fe96aad486993dc123c9b6", "patch": "@@ -0,0 +1,119 @@\n+//@run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::default_constructed_unit_structs)]\n+use std::marker::PhantomData;\n+\n+#[derive(Default)]\n+struct UnitStruct;\n+\n+impl UnitStruct {\n+    fn new() -> Self {\n+        //should lint\n+        Self::default()\n+    }\n+}\n+\n+#[derive(Default)]\n+struct TupleStruct(usize);\n+\n+impl TupleStruct {\n+    fn new() -> Self {\n+        // should not lint\n+        Self(Default::default())\n+    }\n+}\n+\n+// no lint for derived impl\n+#[derive(Default)]\n+struct NormalStruct {\n+    inner: PhantomData<usize>,\n+}\n+\n+struct NonDefaultStruct;\n+\n+impl NonDefaultStruct {\n+    fn default() -> Self {\n+        Self\n+    }\n+}\n+\n+#[derive(Default)]\n+enum SomeEnum {\n+    #[default]\n+    Unit,\n+    Tuple(UnitStruct),\n+    Struct {\n+        inner: usize,\n+    },\n+}\n+\n+impl NormalStruct {\n+    fn new() -> Self {\n+        // should lint\n+        Self {\n+            inner: PhantomData::default(),\n+        }\n+    }\n+\n+    fn new2() -> Self {\n+        // should not lint\n+        Self {\n+            inner: Default::default(),\n+        }\n+    }\n+}\n+\n+#[derive(Default)]\n+struct GenericStruct<T> {\n+    t: T,\n+}\n+\n+impl<T: Default> GenericStruct<T> {\n+    fn new() -> Self {\n+        // should not lint\n+        Self { t: T::default() }\n+    }\n+\n+    fn new2() -> Self {\n+        // should not lint\n+        Self { t: Default::default() }\n+    }\n+}\n+\n+struct FakeDefault;\n+impl FakeDefault {\n+    fn default() -> Self {\n+        Self\n+    }\n+}\n+\n+impl Default for FakeDefault {\n+    fn default() -> Self {\n+        Self\n+    }\n+}\n+\n+#[derive(Default)]\n+struct EmptyStruct {}\n+\n+#[derive(Default)]\n+#[non_exhaustive]\n+struct NonExhaustiveStruct;\n+\n+fn main() {\n+    // should lint\n+    let _ = PhantomData::<usize>::default();\n+    let _: PhantomData<i32> = PhantomData::default();\n+    let _ = UnitStruct::default();\n+\n+    // should not lint\n+    let _ = TupleStruct::default();\n+    let _ = NormalStruct::default();\n+    let _ = NonExhaustiveStruct::default();\n+    let _ = SomeEnum::default();\n+    let _ = NonDefaultStruct::default();\n+    let _ = EmptyStruct::default();\n+    let _ = FakeDefault::default();\n+    let _ = <FakeDefault as Default>::default();\n+}"}, {"sha": "4058943d08727eae7a8aa072c234b39396e1c49a", "filename": "tests/ui/default_constructed_unit_structs.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1d155b4c9cad224fe96aad486993dc123c9b6/tests%2Fui%2Fdefault_constructed_unit_structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1d155b4c9cad224fe96aad486993dc123c9b6/tests%2Fui%2Fdefault_constructed_unit_structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_constructed_unit_structs.stderr?ref=f9c1d155b4c9cad224fe96aad486993dc123c9b6", "patch": "@@ -0,0 +1,34 @@\n+error: use of `default` to create a unit struct\n+  --> $DIR/default_constructed_unit_structs.rs:13:13\n+   |\n+LL |         Self::default()\n+   |             ^^^^^^^^^^^ help: remove this call to `default`\n+   |\n+   = note: `-D clippy::default-constructed-unit-structs` implied by `-D warnings`\n+\n+error: use of `default` to create a unit struct\n+  --> $DIR/default_constructed_unit_structs.rs:55:31\n+   |\n+LL |             inner: PhantomData::default(),\n+   |                               ^^^^^^^^^^^ help: remove this call to `default`\n+\n+error: use of `default` to create a unit struct\n+  --> $DIR/default_constructed_unit_structs.rs:106:33\n+   |\n+LL |     let _ = PhantomData::<usize>::default();\n+   |                                 ^^^^^^^^^^^ help: remove this call to `default`\n+\n+error: use of `default` to create a unit struct\n+  --> $DIR/default_constructed_unit_structs.rs:107:42\n+   |\n+LL |     let _: PhantomData<i32> = PhantomData::default();\n+   |                                          ^^^^^^^^^^^ help: remove this call to `default`\n+\n+error: use of `default` to create a unit struct\n+  --> $DIR/default_constructed_unit_structs.rs:108:23\n+   |\n+LL |     let _ = UnitStruct::default();\n+   |                       ^^^^^^^^^^^ help: remove this call to `default`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "d18f93875658c90105d6cc7572c7facfdf915a46", "filename": "tests/ui/from_over_into.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1d155b4c9cad224fe96aad486993dc123c9b6/tests%2Fui%2Ffrom_over_into.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1d155b4c9cad224fe96aad486993dc123c9b6/tests%2Fui%2Ffrom_over_into.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.fixed?ref=f9c1d155b4c9cad224fe96aad486993dc123c9b6", "patch": "@@ -32,7 +32,7 @@ struct SelfKeywords;\n \n impl From<X> for SelfKeywords {\n     fn from(val: X) -> Self {\n-        let _ = X::default();\n+        let _ = X;\n         let _ = X::FOO;\n         let _: X = val;\n "}, {"sha": "de8ff0b06bdca3a744dc467aeaeda58f969673ce", "filename": "tests/ui/from_over_into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1d155b4c9cad224fe96aad486993dc123c9b6/tests%2Fui%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1d155b4c9cad224fe96aad486993dc123c9b6/tests%2Fui%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.rs?ref=f9c1d155b4c9cad224fe96aad486993dc123c9b6", "patch": "@@ -32,7 +32,7 @@ struct SelfKeywords;\n \n impl Into<SelfKeywords> for X {\n     fn into(self) -> SelfKeywords {\n-        let _ = Self::default();\n+        let _ = Self;\n         let _ = Self::FOO;\n         let _: Self = self;\n "}, {"sha": "6039f86fe6703d05d7f58b3f1d44be113287efec", "filename": "tests/ui/from_over_into.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1d155b4c9cad224fe96aad486993dc123c9b6/tests%2Fui%2Ffrom_over_into.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1d155b4c9cad224fe96aad486993dc123c9b6/tests%2Fui%2Ffrom_over_into.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.stderr?ref=f9c1d155b4c9cad224fe96aad486993dc123c9b6", "patch": "@@ -35,7 +35,7 @@ help: replace the `Into` implementation with `From<X>`\n    |\n LL ~ impl From<X> for SelfKeywords {\n LL ~     fn from(val: X) -> Self {\n-LL ~         let _ = X::default();\n+LL ~         let _ = X;\n LL ~         let _ = X::FOO;\n LL ~         let _: X = val;\n    |"}, {"sha": "20138a29fd1f148072adf6b51445be76e35079b2", "filename": "tests/ui/use_self_trait.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1d155b4c9cad224fe96aad486993dc123c9b6/tests%2Fui%2Fuse_self_trait.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1d155b4c9cad224fe96aad486993dc123c9b6/tests%2Fui%2Fuse_self_trait.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self_trait.fixed?ref=f9c1d155b4c9cad224fe96aad486993dc123c9b6", "patch": "@@ -33,7 +33,7 @@ impl SelfTrait for Bad {\n     fn nested(_p1: Box<Self>, _p2: (&u8, &Self)) {}\n \n     fn vals(_: Self) -> Self {\n-        Self::default()\n+        Self\n     }\n }\n \n@@ -70,7 +70,7 @@ impl SelfTrait for Good {\n     fn nested(_p1: Box<Self>, _p2: (&u8, &Self)) {}\n \n     fn vals(_: Self) -> Self {\n-        Self::default()\n+        Self\n     }\n }\n "}, {"sha": "bf697b01a42f7b6731f68641c756179ed8f29462", "filename": "tests/ui/use_self_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1d155b4c9cad224fe96aad486993dc123c9b6/tests%2Fui%2Fuse_self_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1d155b4c9cad224fe96aad486993dc123c9b6/tests%2Fui%2Fuse_self_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self_trait.rs?ref=f9c1d155b4c9cad224fe96aad486993dc123c9b6", "patch": "@@ -33,7 +33,7 @@ impl SelfTrait for Bad {\n     fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {}\n \n     fn vals(_: Bad) -> Bad {\n-        Bad::default()\n+        Bad\n     }\n }\n \n@@ -70,7 +70,7 @@ impl SelfTrait for Good {\n     fn nested(_p1: Box<Self>, _p2: (&u8, &Self)) {}\n \n     fn vals(_: Self) -> Self {\n-        Self::default()\n+        Self\n     }\n }\n "}, {"sha": "6257f802dd80a0c4eefb06f3ae4f00bd643dfd2a", "filename": "tests/ui/use_self_trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1d155b4c9cad224fe96aad486993dc123c9b6/tests%2Fui%2Fuse_self_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1d155b4c9cad224fe96aad486993dc123c9b6/tests%2Fui%2Fuse_self_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self_trait.stderr?ref=f9c1d155b4c9cad224fe96aad486993dc123c9b6", "patch": "@@ -63,7 +63,7 @@ LL |     fn vals(_: Bad) -> Bad {\n error: unnecessary structure name repetition\n   --> $DIR/use_self_trait.rs:36:9\n    |\n-LL |         Bad::default()\n+LL |         Bad\n    |         ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition"}]}