{"sha": "375c5b884fd41e637bf0eff6d58c16cc18b179a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NWM1Yjg4NGZkNDFlNjM3YmYwZWZmNmQ1OGMxNmNjMThiMTc5YTk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-11T21:52:38Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-17T01:16:45Z"}, "message": "Fix --disable-rpath and tests\n\nThis involved a few changes to the local build system:\n\n* Makefiles now prefer our own LD_LIBRARY_PATH over the user's LD_LIBRARY_PATH\n  in order to support building rust with rust already installed.\n* The compiletest program was taught to correctly pass through the aux dir as a\n  component of LD_LIBRARY_PATH in more situations.\n\nThis change was spliced out of #14832 to consist of just the fixes to running\ntests without an rpath setting embedded in executables.", "tree": {"sha": "135070e07c181dffda471459a94e04710561a235", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/135070e07c181dffda471459a94e04710561a235"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/375c5b884fd41e637bf0eff6d58c16cc18b179a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/375c5b884fd41e637bf0eff6d58c16cc18b179a9", "html_url": "https://github.com/rust-lang/rust/commit/375c5b884fd41e637bf0eff6d58c16cc18b179a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/375c5b884fd41e637bf0eff6d58c16cc18b179a9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56d7bbe2637933455249fc3c73f510ab3ef97a29", "url": "https://api.github.com/repos/rust-lang/rust/commits/56d7bbe2637933455249fc3c73f510ab3ef97a29", "html_url": "https://github.com/rust-lang/rust/commit/56d7bbe2637933455249fc3c73f510ab3ef97a29"}], "stats": {"total": 97, "additions": 59, "deletions": 38}, "files": [{"sha": "b56f4d7a25f203564b532ade32aab3a90217fcc4", "filename": "mk/main.mk", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/375c5b884fd41e637bf0eff6d58c16cc18b179a9/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/375c5b884fd41e637bf0eff6d58c16cc18b179a9/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=375c5b884fd41e637bf0eff6d58c16cc18b179a9", "patch": "@@ -360,10 +360,10 @@ endef\n #   contains spaces which confuse make.\n # * `LD_LIBRARY_PATH_ENV_HOSTDIR`: the entry to add to lookup path for the host\n # * `LD_LIBRARY_PATH_ENV_TARGETDIR`: the entry to add to lookup path for target\n-# \n+#\n # Below that, HOST_RPATH_VAR and TARGET_RPATH_VAR are defined in terms of the\n # above settings.\n-# \n+#\n define SREQ_CMDS\n \n ifeq ($$(OSTYPE_$(3)),apple-darwin)\n@@ -382,9 +382,9 @@ LD_LIBRARY_PATH_ENV_TARGETDIR$(1)_T_$(2)_H_$(3) := \\\n     $$(CURDIR)/$$(TLIB1_T_$(2)_H_$(CFG_BUILD))\n \n HOST_RPATH_VAR$(1)_T_$(2)_H_$(3) := \\\n-  $$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3))=$$$$$$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3)):$$(LD_LIBRARY_PATH_ENV_HOSTDIR$(1)_T_$(2)_H_$(3))\n+  $$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3))=$$(LD_LIBRARY_PATH_ENV_HOSTDIR$(1)_T_$(2)_H_$(3)):$$$$$$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3))\n TARGET_RPATH_VAR$(1)_T_$(2)_H_$(3) := \\\n-  $$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3))=$$$$$$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3)):$$(LD_LIBRARY_PATH_ENV_TARGETDIR$(1)_T_$(2)_H_$(3))\n+  $$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3))=$$(LD_LIBRARY_PATH_ENV_TARGETDIR$(1)_T_$(2)_H_$(3)):$$$$$$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3))\n \n RPATH_VAR$(1)_T_$(2)_H_$(3) := $$(HOST_RPATH_VAR$(1)_T_$(2)_H_$(3))\n "}, {"sha": "6ea2d9cbe8ed86bc18b0fe3ec955572ca520cc28", "filename": "mk/tests.mk", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/375c5b884fd41e637bf0eff6d58c16cc18b179a9/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/375c5b884fd41e637bf0eff6d58c16cc18b179a9/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=375c5b884fd41e637bf0eff6d58c16cc18b179a9", "patch": "@@ -91,7 +91,8 @@ endif\n define DEF_TARGET_COMMANDS\n \n ifdef CFG_UNIXY_$(1)\n-  CFG_RUN_TEST_$(1)=$$(call CFG_RUN_$(1),,$$(CFG_VALGRIND) $$(1))\n+  CFG_RUN_TEST_$(1)=$$(TARGET_RPATH_VAR$$(2)_T_$$(3)_H_$$(4)) \\\n+\t  $$(call CFG_RUN_$(1),,$$(CFG_VALGRIND) $$(1))\n endif\n \n ifdef CFG_WINDOWSY_$(1)\n@@ -105,13 +106,13 @@ ifdef CFG_WINDOWSY_$(1)\n                $$(if $$(findstring stage3,$$(1)), \\\n                     stage3/$$(CFG_LIBDIR_RELATIVE), \\\n                )))))/rustlib/$$(CFG_BUILD)/lib\n-  CFG_RUN_TEST_$(1)=$$(call CFG_RUN_$(1),$$(call CFG_TESTLIB_$(1),$$(1),$$(3)),$$(1))\n+  CFG_RUN_TEST_$(1)=$$(call CFG_RUN_$(1),$$(call CFG_TESTLIB_$(1),$$(1),$$(4)),$$(1))\n endif\n \n # Run the compiletest runner itself under valgrind\n ifdef CTEST_VALGRIND\n CFG_RUN_CTEST_$(1)=$$(RPATH_VAR$$(1)_T_$$(3)_H_$$(3)) \\\n-      $$(call CFG_RUN_TEST_$$(CFG_BUILD),$$(2),$$(3))\n+      $$(call CFG_RUN_TEST_$$(CFG_BUILD),$$(3),$$(4))\n else\n CFG_RUN_CTEST_$(1)=$$(RPATH_VAR$$(1)_T_$$(3)_H_$$(3)) \\\n       $$(call CFG_RUN_$$(CFG_BUILD),$$(TLIB$$(1)_T_$$(3)_H_$$(3)),$$(2))\n@@ -391,7 +392,7 @@ check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4\n $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n \t\t$(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2))\n \t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_TEST_$(2),$$<,$(2),$(3)) $$(TESTARGS) \\\n+\t$$(Q)$$(call CFG_RUN_TEST_$(2),$$<,$(1),$(2),$(3)) $$(TESTARGS) \\\n \t    --logfile $$(call TEST_LOG_FILE,$(1),$(2),$(3),$(4)) \\\n \t    $$(call CRATE_TEST_EXTRA_ARGS,$(1),$(2),$(3),$(4)) \\\n \t    && touch $$@"}, {"sha": "797477d29202d57d00c5eb0033059fbceef68c16", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/375c5b884fd41e637bf0eff6d58c16cc18b179a9/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375c5b884fd41e637bf0eff6d58c16cc18b179a9/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=375c5b884fd41e637bf0eff6d58c16cc18b179a9", "patch": "@@ -13,42 +13,41 @@ use std::str;\n use std::io::process::{ProcessExit, Command, Process, ProcessOutput};\n use std::dynamic_lib::DynamicLibrary;\n \n-fn target_env(lib_path: &str, prog: &str) -> Vec<(String, String)> {\n-    let prog = if cfg!(windows) {prog.slice_to(prog.len() - 4)} else {prog};\n-    let mut aux_path = prog.to_string();\n-    aux_path.push_str(\".libaux\");\n-\n+fn target_env(lib_path: &str, aux_path: Option<&str>) -> Vec<(String, String)> {\n     // Need to be sure to put both the lib_path and the aux path in the dylib\n     // search path for the child.\n     let mut path = DynamicLibrary::search_path();\n-    path.insert(0, Path::new(aux_path));\n+    match aux_path {\n+        Some(p) => path.insert(0, Path::new(p)),\n+        None => {}\n+    }\n     path.insert(0, Path::new(lib_path));\n \n     // Remove the previous dylib search path var\n     let var = DynamicLibrary::envvar();\n-    let mut env: Vec<(String,String)> =\n-        os::env().move_iter().map(|(a,b)|(a.to_string(), b.to_string())).collect();\n+    let mut env: Vec<(String,String)> = os::env();\n     match env.iter().position(|&(ref k, _)| k.as_slice() == var) {\n         Some(i) => { env.remove(i); }\n         None => {}\n     }\n \n     // Add the new dylib search path var\n     let newpath = DynamicLibrary::create_path(path.as_slice());\n-    env.push((var.to_string(),\n-              str::from_utf8(newpath.as_slice()).unwrap().to_string()));\n+    let newpath = str::from_utf8(newpath.as_slice()).unwrap().to_string();\n+    env.push((var.to_string(), newpath));\n     return env;\n }\n \n pub struct Result {pub status: ProcessExit, pub out: String, pub err: String}\n \n pub fn run(lib_path: &str,\n            prog: &str,\n+           aux_path: Option<&str>,\n            args: &[String],\n            env: Vec<(String, String)> ,\n            input: Option<String>) -> Option<Result> {\n \n-    let env = env.clone().append(target_env(lib_path, prog).as_slice());\n+    let env = env.clone().append(target_env(lib_path, aux_path).as_slice());\n     match Command::new(prog).args(args).env(env.as_slice()).spawn() {\n         Ok(mut process) => {\n             for input in input.iter() {\n@@ -69,11 +68,12 @@ pub fn run(lib_path: &str,\n \n pub fn run_background(lib_path: &str,\n            prog: &str,\n+           aux_path: Option<&str>,\n            args: &[String],\n            env: Vec<(String, String)> ,\n            input: Option<String>) -> Option<Process> {\n \n-    let env = env.clone().append(target_env(lib_path, prog).as_slice());\n+    let env = env.clone().append(target_env(lib_path, aux_path).as_slice());\n     match Command::new(prog).args(args).env(env.as_slice()).spawn() {\n         Ok(mut process) => {\n             for input in input.iter() {"}, {"sha": "1e07068dd6f6294fdf14fd246cce9ea7db96f0c5", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/375c5b884fd41e637bf0eff6d58c16cc18b179a9/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375c5b884fd41e637bf0eff6d58c16cc18b179a9/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=375c5b884fd41e637bf0eff6d58c16cc18b179a9", "patch": "@@ -230,6 +230,7 @@ fn run_pretty_test(config: &Config, props: &TestProps, testfile: &Path) {\n                     testfile: &Path,\n                     src: String,\n                     pretty_type: &str) -> ProcRes {\n+        let aux_dir = aux_output_dir_name(config, testfile);\n         compose_and_run(config,\n                         testfile,\n                         make_pp_args(config,\n@@ -238,6 +239,7 @@ fn run_pretty_test(config: &Config, props: &TestProps, testfile: &Path) {\n                                      pretty_type.to_string()),\n                         props.exec_env.clone(),\n                         config.compile_lib_path.as_slice(),\n+                        Some(aux_dir.as_str().unwrap()),\n                         Some(src))\n     }\n \n@@ -354,6 +356,7 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n \n             procsrv::run(\"\",\n                          config.adb_path.as_slice(),\n+                         None,\n                          [\n                             \"push\".to_string(),\n                             exe_file.as_str().unwrap().to_string(),\n@@ -365,6 +368,7 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n \n             procsrv::run(\"\",\n                          config.adb_path.as_slice(),\n+                         None,\n                          [\n                             \"forward\".to_string(),\n                             \"tcp:5039\".to_string(),\n@@ -385,6 +389,7 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n             let mut process = procsrv::run_background(\"\",\n                                                       config.adb_path\n                                                             .as_slice(),\n+                                                      None,\n                                                       [\n                                                         \"shell\".to_string(),\n                                                         adb_arg.clone()\n@@ -425,6 +430,7 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n                 status\n             } = procsrv::run(\"\",\n                              gdb_path.as_slice(),\n+                             None,\n                              debugger_opts.as_slice(),\n                              vec!((\"\".to_string(), \"\".to_string())),\n                              None)\n@@ -486,7 +492,8 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n                                                   testfile,\n                                                   proc_args,\n                                                   Vec::new(),\n-                                                  \"\",\n+                                                  config.run_lib_path.as_slice(),\n+                                                  None,\n                                                   None);\n         }\n     }\n@@ -994,11 +1001,13 @@ fn exec_compiled_test(config: &Config, props: &TestProps,\n         }\n \n         _=> {\n+            let aux_dir = aux_output_dir_name(config, testfile);\n             compose_and_run(config,\n                             testfile,\n                             make_run_args(config, props, testfile),\n                             env,\n                             config.run_lib_path.as_slice(),\n+                            Some(aux_dir.as_str().unwrap()),\n                             None)\n         }\n     }\n@@ -1045,6 +1054,7 @@ fn compose_and_run_compiler(\n                                      aux_args,\n                                      Vec::new(),\n                                      config.compile_lib_path.as_slice(),\n+                                     Some(aux_dir.as_str().unwrap()),\n                                      None);\n         if !auxres.status.success() {\n             fatal_proc_rec(\n@@ -1066,6 +1076,7 @@ fn compose_and_run_compiler(\n                     args,\n                     Vec::new(),\n                     config.compile_lib_path.as_slice(),\n+                    Some(aux_dir.as_str().unwrap()),\n                     input)\n }\n \n@@ -1078,9 +1089,10 @@ fn compose_and_run(config: &Config, testfile: &Path,\n                    ProcArgs{ args, prog }: ProcArgs,\n                    procenv: Vec<(String, String)> ,\n                    lib_path: &str,\n+                   aux_path: Option<&str>,\n                    input: Option<String>) -> ProcRes {\n     return program_output(config, testfile, lib_path,\n-                          prog, args, procenv, input);\n+                          prog, aux_path, args, procenv, input);\n }\n \n enum TargetLocation {\n@@ -1189,7 +1201,8 @@ fn split_maybe_args(argstr: &Option<String>) -> Vec<String> {\n }\n \n fn program_output(config: &Config, testfile: &Path, lib_path: &str, prog: String,\n-                  args: Vec<String> , env: Vec<(String, String)> ,\n+                  aux_path: Option<&str>, args: Vec<String>,\n+                  env: Vec<(String, String)>,\n                   input: Option<String>) -> ProcRes {\n     let cmdline =\n         {\n@@ -1205,6 +1218,7 @@ fn program_output(config: &Config, testfile: &Path, lib_path: &str, prog: String\n         status\n     } = procsrv::run(lib_path,\n                      prog.as_slice(),\n+                     aux_path,\n                      args.as_slice(),\n                      env,\n                      input).expect(format!(\"failed to exec `{}`\", prog).as_slice());\n@@ -1326,6 +1340,7 @@ fn _arm_exec_compiled_test(config: &Config,\n     // copy to target\n     let copy_result = procsrv::run(\"\",\n                                    config.adb_path.as_slice(),\n+                                   None,\n                                    [\n                                     \"push\".to_string(),\n                                     args.prog.clone(),\n@@ -1361,6 +1376,7 @@ fn _arm_exec_compiled_test(config: &Config,\n     }\n     procsrv::run(\"\",\n                  config.adb_path.as_slice(),\n+                 None,\n                  runargs.as_slice(),\n                  vec!((\"\".to_string(), \"\".to_string())), Some(\"\".to_string()))\n         .expect(format!(\"failed to exec `{}`\", config.adb_path).as_slice());\n@@ -1374,6 +1390,7 @@ fn _arm_exec_compiled_test(config: &Config,\n     let procsrv::Result{ out: exitcode_out, err: _, status: _ } =\n         procsrv::run(\"\",\n                      config.adb_path.as_slice(),\n+                     None,\n                      runargs.as_slice(),\n                      vec!((\"\".to_string(), \"\".to_string())),\n                      Some(\"\".to_string()))\n@@ -1397,6 +1414,7 @@ fn _arm_exec_compiled_test(config: &Config,\n     let procsrv::Result{ out: stdout_out, err: _, status: _ } =\n         procsrv::run(\"\",\n                      config.adb_path.as_slice(),\n+                     None,\n                      runargs.as_slice(),\n                      vec!((\"\".to_string(), \"\".to_string())),\n                      Some(\"\".to_string()))\n@@ -1411,6 +1429,7 @@ fn _arm_exec_compiled_test(config: &Config,\n     let procsrv::Result{ out: stderr_out, err: _, status: _ } =\n         procsrv::run(\"\",\n                      config.adb_path.as_slice(),\n+                     None,\n                      runargs.as_slice(),\n                      vec!((\"\".to_string(), \"\".to_string())),\n                      Some(\"\".to_string()))\n@@ -1438,6 +1457,7 @@ fn _arm_push_aux_shared_library(config: &Config, testfile: &Path) {\n             // FIXME (#9639): This needs to handle non-utf8 paths\n             let copy_result = procsrv::run(\"\",\n                                            config.adb_path.as_slice(),\n+                                           None,\n                                            [\n                                             \"push\".to_string(),\n                                             file.as_str()\n@@ -1505,7 +1525,7 @@ fn compile_cc_with_clang_and_save_bitcode(config: &Config, _props: &TestProps,\n                    bitcodefile.as_str().unwrap().to_string(),\n                    testcc.as_str().unwrap().to_string())\n     };\n-    compose_and_run(config, testfile, proc_args, Vec::new(), \"\", None)\n+    compose_and_run(config, testfile, proc_args, Vec::new(), \"\", None, None)\n }\n \n fn extract_function_from_bitcode(config: &Config, _props: &TestProps,\n@@ -1522,7 +1542,7 @@ fn extract_function_from_bitcode(config: &Config, _props: &TestProps,\n                    format!(\"-o={}\", extracted_bc.as_str().unwrap()),\n                    bitcodefile.as_str().unwrap().to_string())\n     };\n-    compose_and_run(config, testfile, proc_args, Vec::new(), \"\", None)\n+    compose_and_run(config, testfile, proc_args, Vec::new(), \"\", None, None)\n }\n \n fn disassemble_extract(config: &Config, _props: &TestProps,\n@@ -1538,7 +1558,7 @@ fn disassemble_extract(config: &Config, _props: &TestProps,\n         args: vec!(format!(\"-o={}\", extracted_ll.as_str().unwrap()),\n                    extracted_bc.as_str().unwrap().to_string())\n     };\n-    compose_and_run(config, testfile, proc_args, Vec::new(), \"\", None)\n+    compose_and_run(config, testfile, proc_args, Vec::new(), \"\", None, None)\n }\n \n "}, {"sha": "b08c6625f1705ec67f048971fbac166052699944", "filename": "src/test/run-make/rustdoc-hidden-line/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/375c5b884fd41e637bf0eff6d58c16cc18b179a9/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/375c5b884fd41e637bf0eff6d58c16cc18b179a9/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2FMakefile?ref=375c5b884fd41e637bf0eff6d58c16cc18b179a9", "patch": "@@ -4,8 +4,8 @@\n ifndef IS_WINDOWS\n \n all:\n-\t$(RUSTDOC) --test foo.rs\n-\t$(RUSTDOC) -w html -o $(TMPDIR)/doc foo.rs\n+\t$(HOST_RPATH_ENV) $(RUSTDOC) --test foo.rs\n+\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc foo.rs\n \tcp verify.sh $(TMPDIR)\n \t$(call RUN,verify.sh) $(TMPDIR)\n "}, {"sha": "e49ab64b6958a8ac62818825daa3bd895be045af", "filename": "src/test/run-make/rustdoc-json/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/375c5b884fd41e637bf0eff6d58c16cc18b179a9/src%2Ftest%2Frun-make%2Frustdoc-json%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/375c5b884fd41e637bf0eff6d58c16cc18b179a9/src%2Ftest%2Frun-make%2Frustdoc-json%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-json%2FMakefile?ref=375c5b884fd41e637bf0eff6d58c16cc18b179a9", "patch": "@@ -1,4 +1,4 @@\n -include ../tools.mk\n all:\n-\t$(RUSTDOC) -w json -o $(TMPDIR)/doc.json foo.rs\n-\t$(RUSTDOC) -o $(TMPDIR)/doc $(TMPDIR)/doc.json\n+\t$(HOST_RPATH_ENV) $(RUSTDOC) -w json -o $(TMPDIR)/doc.json foo.rs\n+\t$(HOST_RPATH_ENV) $(RUSTDOC) -o $(TMPDIR)/doc $(TMPDIR)/doc.json"}, {"sha": "de013ab28a5778cb7e56e9e41a7eed4273035719", "filename": "src/test/run-make/rustdoc-smoke/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/375c5b884fd41e637bf0eff6d58c16cc18b179a9/src%2Ftest%2Frun-make%2Frustdoc-smoke%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/375c5b884fd41e637bf0eff6d58c16cc18b179a9/src%2Ftest%2Frun-make%2Frustdoc-smoke%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-smoke%2FMakefile?ref=375c5b884fd41e637bf0eff6d58c16cc18b179a9", "patch": "@@ -1,5 +1,5 @@\n -include ../tools.mk\n all:\n-\t$(RUSTDOC) -w html -o $(TMPDIR)/doc foo.rs\n+\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc foo.rs\n \tcp verify.sh $(TMPDIR)\n \t$(call RUN,verify.sh) $(TMPDIR)"}, {"sha": "483a5db8778462678f80633706c42883ad1af4c5", "filename": "src/test/run-make/tools.mk", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/375c5b884fd41e637bf0eff6d58c16cc18b179a9/src%2Ftest%2Frun-make%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/375c5b884fd41e637bf0eff6d58c16cc18b179a9/src%2Ftest%2Frun-make%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftools.mk?ref=375c5b884fd41e637bf0eff6d58c16cc18b179a9", "patch": "@@ -1,15 +1,15 @@\n export LD_LIBRARY_PATH:=$(TMPDIR):$(LD_LIBRARY_PATH)\n export DYLD_LIBRARY_PATH:=$(TMPDIR):$(DYLD_LIBRARY_PATH)\n \n-RUSTC := $(RUSTC) --out-dir $(TMPDIR) -L $(TMPDIR)\n-CC := $(CC) -L $(TMPDIR)\n-\n # These deliberately use `=` and not `:=` so that client makefiles can\n # augment HOST_RPATH_DIR / TARGET_RPATH_DIR.\n HOST_RPATH_ENV = \\\n-    $(LD_LIB_PATH_ENVVAR)=$$$(LD_LIB_PATH_ENVVAR):$(HOST_RPATH_DIR)\n+    $(LD_LIB_PATH_ENVVAR)=$(HOST_RPATH_DIR):$$$(LD_LIB_PATH_ENVVAR)\n TARGET_RPATH_ENV = \\\n-    $(LD_LIB_PATH_ENVVAR)=$$$(LD_LIB_PATH_ENVVAR):$(TARGET_RPATH_DIR)\n+    $(LD_LIB_PATH_ENVVAR)=$(TARGET_RPATH_DIR):$$$(LD_LIB_PATH_ENVVAR)\n+\n+RUSTC := $(HOST_RPATH_ENV) $(RUSTC) --out-dir $(TMPDIR) -L $(TMPDIR)\n+CC := $(CC) -L $(TMPDIR)\n \n # This is the name of the binary we will generate and run; use this\n # e.g. for `$(CC) -o $(RUN_BINFILE)`."}, {"sha": "ad7ba02970f0510b1cd4bd58a963640bb2a28880", "filename": "src/test/run-pass/logging-separate-lines.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/375c5b884fd41e637bf0eff6d58c16cc18b179a9/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375c5b884fd41e637bf0eff6d58c16cc18b179a9/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs?ref=375c5b884fd41e637bf0eff6d58c16cc18b179a9", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-android\n // ignore-win32\n+// exec-env:RUST_LOG=debug\n \n #![feature(phase)]\n \n@@ -29,9 +30,8 @@ fn main() {\n         return\n     }\n \n-    let env = [(\"RUST_LOG\".to_string(), \"debug\".to_string())];\n     let p = Command::new(args[0].as_slice())\n-                    .arg(\"child\").env(env.as_slice())\n+                    .arg(\"child\")\n                     .spawn().unwrap().wait_with_output().unwrap();\n     assert!(p.status.success());\n     let mut lines = str::from_utf8(p.error.as_slice()).unwrap().lines();"}]}