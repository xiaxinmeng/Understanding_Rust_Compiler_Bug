{"sha": "2c8e89b6f074d7ce44b6f649dbbd383a49f0f6c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjOGU4OWI2ZjA3NGQ3Y2U0NGI2ZjY0OWRiYmQzODNhNDlmMGY2YzY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-14T19:07:07Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-14T19:07:07Z"}, "message": "Support goto type for field expressions and patterns", "tree": {"sha": "507a63ae6b5f9682fcfc059e8bae95406332a9ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/507a63ae6b5f9682fcfc059e8bae95406332a9ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c8e89b6f074d7ce44b6f649dbbd383a49f0f6c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c8e89b6f074d7ce44b6f649dbbd383a49f0f6c6", "html_url": "https://github.com/rust-lang/rust/commit/2c8e89b6f074d7ce44b6f649dbbd383a49f0f6c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c8e89b6f074d7ce44b6f649dbbd383a49f0f6c6/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "401d79ac0674ec62689949c3a531836420cb9beb", "url": "https://api.github.com/repos/rust-lang/rust/commits/401d79ac0674ec62689949c3a531836420cb9beb", "html_url": "https://github.com/rust-lang/rust/commit/401d79ac0674ec62689949c3a531836420cb9beb"}], "stats": {"total": 62, "additions": 60, "deletions": 2}, "files": [{"sha": "ca3c02bf65b189133a590d52a1e506914521d700", "filename": "crates/ide/src/goto_type_definition.rs", "status": "modified", "additions": 60, "deletions": 2, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/2c8e89b6f074d7ce44b6f649dbbd383a49f0f6c6/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c8e89b6f074d7ce44b6f649dbbd383a49f0f6c6/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs?ref=2c8e89b6f074d7ce44b6f649dbbd383a49f0f6c6", "patch": "@@ -25,21 +25,31 @@ pub(crate) fn goto_type_definition(\n     let token: SyntaxToken = pick_best(file.syntax().token_at_offset(position.offset))?;\n     let token: SyntaxToken = sema.descend_into_macros(token);\n \n-    let (ty, node) = sema.token_ancestors_with_macros(token).find_map(|node| {\n+    let (ty, node) = sema.token_ancestors_with_macros(token.clone()).find_map(|node| {\n         let ty = match_ast! {\n             match node {\n                 ast::Expr(it) => sema.type_of_expr(&it)?,\n                 ast::Pat(it) => sema.type_of_pat(&it)?,\n                 ast::SelfParam(it) => sema.type_of_self(&it)?,\n                 ast::Type(it) => sema.resolve_type(&it)?,\n                 ast::RecordField(it) => sema.to_def(&it).map(|d| d.ty(db.upcast()))?,\n+                ast::RecordField(it) => sema.to_def(&it).map(|d| d.ty(db.upcast()))?,\n+                // can't match on RecordExprField directly as `ast::Expr` will match an iteration too early otherwise\n+                ast::NameRef(it) => {\n+                    if let Some(record_field) = ast::RecordExprField::for_name_ref(&it) {\n+                        let (_, _, ty) = sema.resolve_record_field(&record_field)?;\n+                        ty\n+                    } else {\n+                        let record_field = ast::RecordPatField::for_field_name_ref(&it)?;\n+                        sema.resolve_record_pat_field(&record_field)?.ty(db)\n+                    }\n+                },\n                 _ => return None,\n             }\n         };\n \n         Some((ty, node))\n     })?;\n-\n     let adt_def = ty.autoderef(db).filter_map(|ty| ty.as_adt()).last()?;\n \n     let nav = adt_def.try_to_nav(db)?;\n@@ -87,6 +97,54 @@ fn foo() {\n         );\n     }\n \n+    #[test]\n+    fn goto_type_definition_record_expr_field() {\n+        check(\n+            r#\"\n+struct Bar;\n+    // ^^^\n+struct Foo { foo: Bar }\n+fn foo() {\n+    Foo { foo$0 }\n+}\n+\"#,\n+        );\n+        check(\n+            r#\"\n+struct Bar;\n+    // ^^^\n+struct Foo { foo: Bar }\n+fn foo() {\n+    Foo { foo$0: Bar }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_type_definition_record_pat_field() {\n+        check(\n+            r#\"\n+struct Bar;\n+    // ^^^\n+struct Foo { foo: Bar }\n+fn foo() {\n+    let Foo { foo$0 };\n+}\n+\"#,\n+        );\n+        check(\n+            r#\"\n+struct Bar;\n+    // ^^^\n+struct Foo { foo: Bar }\n+fn foo() {\n+    let Foo { foo$0: bar };\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn goto_type_definition_works_simple_ref() {\n         check("}]}