{"sha": "5528757ffecd11f4f63cf37209382dfdccc522c2", "node_id": "C_kwDOAAsO6NoAKDU1Mjg3NTdmZmVjZDExZjRmNjNjZjM3MjA5MzgyZGZkY2NjNTIyYzI", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-05-30T14:31:40Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-05-30T18:27:53Z"}, "message": "Fix re-export of doc hidden item inside private item not displayed", "tree": {"sha": "4c59c10a0c9837d1700a03fc5419be38b442605f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c59c10a0c9837d1700a03fc5419be38b442605f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5528757ffecd11f4f63cf37209382dfdccc522c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5528757ffecd11f4f63cf37209382dfdccc522c2", "html_url": "https://github.com/rust-lang/rust/commit/5528757ffecd11f4f63cf37209382dfdccc522c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5528757ffecd11f4f63cf37209382dfdccc522c2/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3266c36624e804f9f086ebd40db19039b55a4ec1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3266c36624e804f9f086ebd40db19039b55a4ec1", "html_url": "https://github.com/rust-lang/rust/commit/3266c36624e804f9f086ebd40db19039b55a4ec1"}], "stats": {"total": 57, "additions": 32, "deletions": 25}, "files": [{"sha": "abb9229fbd51a9bc58605caac389a3ea98d38c0b", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 32, "deletions": 25, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/5528757ffecd11f4f63cf37209382dfdccc522c2/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5528757ffecd11f4f63cf37209382dfdccc522c2/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=5528757ffecd11f4f63cf37209382dfdccc522c2", "patch": "@@ -267,6 +267,10 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         let is_no_inline = use_attrs.lists(sym::doc).has_word(sym::no_inline)\n             || use_attrs.lists(sym::doc).has_word(sym::hidden);\n \n+        if is_no_inline {\n+            return false;\n+        }\n+\n         // For cross-crate impl inlining we need to know whether items are\n         // reachable in documentation -- a previously unreachable item can be\n         // made reachable by cross-crate inlining which we're checking here.\n@@ -281,31 +285,38 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         };\n \n         let is_private = !self.cx.cache.effective_visibilities.is_directly_public(tcx, ori_res_did);\n-        let is_hidden = inherits_doc_hidden(tcx, res_did, None);\n+        let is_hidden = tcx.is_doc_hidden(ori_res_did);\n+        let item = tcx.hir().get_by_def_id(res_did);\n \n-        // Only inline if requested or if the item would otherwise be stripped.\n-        if (!please_inline && !is_private && !is_hidden) || is_no_inline {\n-            return false;\n-        }\n-\n-        if !please_inline &&\n-            let Some(item_def_id) = reexport_chain(tcx, def_id, res_did).iter()\n+        if !please_inline {\n+            let inherits_hidden = inherits_doc_hidden(tcx, res_did, None);\n+            // Only inline if requested or if the item would otherwise be stripped.\n+            //\n+            // If it's a doc hidden module, we need to keep it in case some of its inner items\n+            // are re-exported.\n+            if (!is_private && !inherits_hidden) || (\n+                is_hidden &&\n+                !matches!(item, Node::Item(&hir::Item { kind: hir::ItemKind::Mod(_), .. }))\n+            ) {\n+                return false;\n+            } else if let Some(item_def_id) = reexport_chain(tcx, def_id, res_did).iter()\n                 .flat_map(|reexport| reexport.id()).map(|id| id.expect_local())\n                 .chain(iter::once(res_did)).nth(1) &&\n-            item_def_id != def_id &&\n-            self\n-                .cx\n-                .cache\n-                .effective_visibilities\n-                .is_directly_public(tcx, item_def_id.to_def_id()) &&\n-            !inherits_doc_hidden(tcx, item_def_id, None)\n-        {\n-            // The imported item is public and not `doc(hidden)` so no need to inline it.\n-            return false;\n+                item_def_id != def_id &&\n+                self\n+                    .cx\n+                    .cache\n+                    .effective_visibilities\n+                    .is_directly_public(tcx, item_def_id.to_def_id()) &&\n+                !inherits_doc_hidden(tcx, item_def_id, None)\n+            {\n+                // The imported item is public and not `doc(hidden)` so no need to inline it.\n+                return false;\n+            }\n         }\n \n         let is_bang_macro = matches!(\n-            tcx.hir().get_by_def_id(res_did),\n+            item,\n             Node::Item(&hir::Item { kind: hir::ItemKind::Macro(_, MacroKind::Bang), .. })\n         );\n \n@@ -317,12 +328,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             // Bang macros are handled a bit on their because of how they are handled by the\n             // compiler. If they have `#[doc(hidden)]` and the re-export doesn't have\n             // `#[doc(inline)]`, then we don't inline it.\n-            Node::Item(_)\n-                if is_bang_macro\n-                    && !please_inline\n-                    && renamed.is_some()\n-                    && self.cx.tcx.is_doc_hidden(ori_res_did) =>\n-            {\n+            Node::Item(_) if is_bang_macro && !please_inline && renamed.is_some() && is_hidden => {\n                 return false;\n             }\n             Node::Item(&hir::Item { kind: hir::ItemKind::Mod(ref m), .. }) if glob => {\n@@ -455,6 +461,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                             is_glob,\n                             please_inline,\n                         ) {\n+                            debug!(\"Inlining {:?}\", item.owner_id.def_id);\n                             continue;\n                         }\n                     }"}]}