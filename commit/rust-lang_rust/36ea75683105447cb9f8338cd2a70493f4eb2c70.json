{"sha": "36ea75683105447cb9f8338cd2a70493f4eb2c70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZWE3NTY4MzEwNTQ0N2NiOWY4MzM4Y2QyYTcwNDkzZjRlYjJjNzA=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-06-28T09:56:35Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-19T05:53:58Z"}, "message": "debuginfo: Refactored vec slice code to use the new infrastructure. Added test cases for vec slices.", "tree": {"sha": "6f099a2b31c283c32c2863686927c3da158c252c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f099a2b31c283c32c2863686927c3da158c252c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36ea75683105447cb9f8338cd2a70493f4eb2c70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36ea75683105447cb9f8338cd2a70493f4eb2c70", "html_url": "https://github.com/rust-lang/rust/commit/36ea75683105447cb9f8338cd2a70493f4eb2c70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36ea75683105447cb9f8338cd2a70493f4eb2c70/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a31a3e0716f33ceb7c7278cb7da4acbafd97e17", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a31a3e0716f33ceb7c7278cb7da4acbafd97e17", "html_url": "https://github.com/rust-lang/rust/commit/7a31a3e0716f33ceb7c7278cb7da4acbafd97e17"}], "stats": {"total": 206, "additions": 134, "deletions": 72}, "files": [{"sha": "6cb9ed4ec38173aa876453e687412a1a4aa333f7", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 60, "deletions": 58, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/36ea75683105447cb9f8338cd2a70493f4eb2c70/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36ea75683105447cb9f8338cd2a70493f4eb2c70/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=36ea75683105447cb9f8338cd2a70493f4eb2c70", "patch": "@@ -149,7 +149,7 @@ pub fn create_local_var(bcx: block, local: @ast::local) -> DIVariable {\n     let loc = span_start(cx, local.span);\n     let ty = node_id_type(bcx, local.node.id);\n     let tymd = create_ty(cx, ty, local.node.ty.span);\n-    let filemd = create_file(cx, loc.file.name);\n+    let filemd = get_or_create_file(cx, loc.file.name);\n     let context = match bcx.parent {\n         None => create_function(bcx.fcx),\n         Some(_) => create_block(bcx)\n@@ -203,7 +203,7 @@ pub fn create_arg(bcx: block, arg: &ast::arg, span: span) -> Option<DIVariable>\n \n     let ty = node_id_type(bcx, arg.id);\n     let tymd = create_ty(cx, ty, arg.ty.span);\n-    let filemd = create_file(cx, loc.file.name);\n+    let filemd = get_or_create_file(cx, loc.file.name);\n     let context = create_function(fcx);\n \n     match arg.pat.node {\n@@ -297,7 +297,7 @@ pub fn create_function(fcx: fn_ctxt) -> DISubprogram {\n     debug!(\"create_function: %s, %s\", cx.sess.str_of(ident), cx.sess.codemap.span_to_str(span));\n \n     let loc = span_start(cx, span);\n-    let file_md = create_file(cx, loc.file.name);\n+    let file_md = get_or_create_file(cx, loc.file.name);\n \n     let ret_ty_md = if cx.sess.opts.extra_debuginfo {\n         match ret_ty.node {\n@@ -374,13 +374,13 @@ fn create_compile_unit(cx: @mut CrateContext) {\n     }}}}}};\n }\n \n-fn create_file(cx: &mut CrateContext, full_path: &str) -> DIFile {\n+fn get_or_create_file(cx: &mut CrateContext, full_path: &str) -> DIFile {\n     match dbg_cx(cx).created_files.find_equiv(&full_path) {\n         Some(file_md) => return *file_md,\n         None => ()\n     }\n \n-    debug!(\"create_file: %s\", full_path);\n+    debug!(\"get_or_create_file: %s\", full_path);\n \n     let work_dir = cx.sess.working_dir.to_str();\n     let file_name =\n@@ -428,7 +428,7 @@ fn create_block(bcx: block) -> DILexicalBlock {\n     };\n     let cx = bcx.ccx();\n     let loc = span_start(cx, span);\n-    let file_md = create_file(cx, loc.file.name);\n+    let file_md = get_or_create_file(cx, loc.file.name);\n \n     let block_md = unsafe {\n         llvm::LLVMDIBuilderCreateLexicalBlock(\n@@ -639,6 +639,9 @@ fn create_tuple(cx: &mut CrateContext,\n         span);\n }\n \n+/// Creates debug information for a composite type, that is, anything that results in a LLVM struct.\n+///\n+/// Examples of Rust types to use this are: structs, tuples, boxes, and enums.\n fn create_composite_type(cx: &mut CrateContext,\n                          composite_llvm_type: Type,\n                          composite_type_name: &str,\n@@ -649,7 +652,7 @@ fn create_composite_type(cx: &mut CrateContext,\n                       -> DICompositeType {\n \n     let loc = span_start(cx, span);\n-    let file_metadata = create_file(cx, loc.file.name);\n+    let file_metadata = get_or_create_file(cx, loc.file.name);\n \n     let composite_size = machine::llsize_of_alloc(cx, composite_llvm_type);\n     let composite_align = machine::llalign_of_min(cx, composite_llvm_type);\n@@ -763,47 +766,21 @@ fn create_boxed_type(cx: &mut CrateContext,\n         member_types_metadata,\n         span);\n \n+    // Unfortunately, we cannot assert anything but the correct types here---and not whether the\n+    // 'next' and 'prev' pointers are in the order.\n     fn box_layout_is_as_expected(cx: &CrateContext,\n-                                 member_types: &[Type],\n-                                 content_type: Type)\n+                                 member_llvm_types: &[Type],\n+                                 content_llvm_type: Type)\n                               -> bool {\n-        return member_types[0] == cx.int_type\n-            && member_types[1] == cx.tydesc_type.ptr_to()\n-            && member_types[2] == Type::i8().ptr_to()\n-            && member_types[3] == Type::i8().ptr_to()\n-            && member_types[4] == content_type;\n+        member_llvm_types.len() == 5 &&\n+        member_llvm_types[0] == cx.int_type &&\n+        member_llvm_types[1] == cx.tydesc_type.ptr_to() &&\n+        member_llvm_types[2] == Type::i8().ptr_to() &&\n+        member_llvm_types[3] == Type::i8().ptr_to() &&\n+        member_llvm_types[4] == content_llvm_type\n     }\n }\n \n-// fn create_boxed_type(cx: &mut CrateContext,\n-//                      contents: ty::t,\n-//                      span: span,\n-//                      boxed: DIType)\n-//                   -> DICompositeType {\n-\n-//     debug!(\"create_boxed_type: %?\", ty::get(contents));\n-\n-//     let loc = span_start(cx, span);\n-//     let file_md = create_file(cx, loc.file.name);\n-//     let int_t = ty::mk_int();\n-//     let refcount_type = create_basic_type(cx, int_t, span);\n-//     let name = ty_to_str(cx.tcx, contents);\n-\n-//     let mut scx = StructContext::new(cx, fmt!(\"box<%s>\", name), file_md, 0);\n-//     scx.add_member(\"refcnt\", 0, sys::size_of::<uint>(),\n-//                sys::min_align_of::<uint>(), refcount_type);\n-//     // the tydesc and other pointers should be irrelevant to the\n-//     // debugger, so treat them as void* types\n-//     let (vp, vpsize, vpalign) = voidptr(cx);\n-//     scx.add_member(\"tydesc\", 0, vpsize, vpalign, vp);\n-//     scx.add_member(\"prev\", 0, vpsize, vpalign, vp);\n-//     scx.add_member(\"next\", 0, vpsize, vpalign, vp);\n-//     let (size, align) = size_and_align_of(cx, contents);\n-//     scx.add_member(\"val\", 0, size, align, boxed);\n-//     return scx.finalize();\n-// }\n-\n-\n fn create_fixed_vec(cx: &mut CrateContext, _vec_t: ty::t, elem_t: ty::t,\n                     len: uint, span: span) -> DIType {\n     debug!(\"create_fixed_vec: %?\", ty::get(_vec_t));\n@@ -831,7 +808,7 @@ fn create_boxed_vec(cx: &mut CrateContext, vec_t: ty::t, elem_t: ty::t,\n     debug!(\"create_boxed_vec: %?\", ty::get(vec_t));\n \n     let loc = span_start(cx, vec_ty_span);\n-    let file_md = create_file(cx, loc.file.name);\n+    let file_md = get_or_create_file(cx, loc.file.name);\n     let elem_ty_md = create_ty(cx, elem_t, vec_ty_span);\n \n     let mut vec_scx = StructContext::new(cx, ty_to_str(cx.tcx, vec_t), file_md, 0);\n@@ -896,29 +873,54 @@ fn create_boxed_vec(cx: &mut CrateContext, vec_t: ty::t, elem_t: ty::t,\n     return mdval;\n }\n \n-fn create_vec_slice(cx: &mut CrateContext, vec_t: ty::t, elem_t: ty::t, span: span)\n-                    -> DICompositeType {\n-    debug!(\"create_vec_slice: %?\", ty::get(vec_t));\n+fn create_vec_slice(cx: &mut CrateContext,\n+                    vec_type: ty::t,\n+                    element_type: ty::t,\n+                    span: span)\n+                 -> DICompositeType {\n \n-    let loc = span_start(cx, span);\n-    let file_md = create_file(cx, loc.file.name);\n-    let elem_ty_md = create_ty(cx, elem_t, span);\n-    let uint_type = create_basic_type(cx, ty::mk_uint(), span);\n-    let elem_ptr = create_pointer_type(cx, elem_t, span, elem_ty_md);\n+    debug!(\"create_vec_slice: %?\", ty::get(vec_type));\n \n-    let mut scx = StructContext::new(cx, ty_to_str(cx.tcx, vec_t), file_md, 0);\n-    let (_, ptr_size, ptr_align) = voidptr(cx);\n-    scx.add_member(\"vec\", 0, ptr_size, ptr_align, elem_ptr);\n-    scx.add_member(\"length\", 0, sys::size_of::<uint>(), sys::min_align_of::<uint>(), uint_type);\n-    return scx.finalize();\n+    let slice_llvm_type = type_of::type_of(cx, vec_type);\n+    let slice_type_name = ty_to_str(cx.tcx, vec_type);\n+\n+    let member_llvm_types = slice_llvm_type.field_types();\n+    let member_names = &[~\"data_ptr\", ~\"size_in_bytes\"];\n+\n+    assert!(slice_layout_is_as_expected(cx, member_llvm_types, element_type));\n+\n+    let data_ptr_type = ty::mk_ptr(cx.tcx, ty::mt { ty: element_type, mutbl: ast::m_const });\n+\n+    let member_type_metadata = &[\n+        create_ty(cx, data_ptr_type, span),\n+        create_ty(cx, ty::mk_uint(), span)\n+        ];\n+\n+    return create_composite_type(\n+        cx,\n+        slice_llvm_type,\n+        slice_type_name,\n+        member_llvm_types,\n+        member_names,\n+        member_type_metadata,\n+        span);\n+\n+    fn slice_layout_is_as_expected(cx: &mut CrateContext,\n+                                   member_llvm_types: &[Type],\n+                                   element_type: ty::t)\n+                                -> bool {\n+        member_llvm_types.len() == 2 &&\n+        member_llvm_types[0] == type_of::type_of(cx, element_type).ptr_to() &&\n+        member_llvm_types[1] == cx.int_type\n+    }\n }\n \n fn create_fn_ty(cx: &mut CrateContext, _fn_ty: ty::t, inputs: ~[ty::t], output: ty::t,\n                 span: span) -> DICompositeType {\n     debug!(\"create_fn_ty: %?\", ty::get(_fn_ty));\n \n     let loc = span_start(cx, span);\n-    let file_md = create_file(cx, loc.file.name);\n+    let file_md = get_or_create_file(cx, loc.file.name);\n     let (vp, _, _) = voidptr(cx);\n     let output_md = create_ty(cx, output, span);\n     let output_ptr_md = create_pointer_type(cx, output, span, output_md);"}, {"sha": "a7e47f992fc90c89c4ac93a335dae745438b2125", "filename": "src/test/debug-info/vec-slices.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/36ea75683105447cb9f8338cd2a70493f4eb2c70/src%2Ftest%2Fdebug-info%2Fvec-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36ea75683105447cb9f8338cd2a70493f4eb2c70/src%2Ftest%2Fdebug-info%2Fvec-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvec-slices.rs?ref=36ea75683105447cb9f8338cd2a70493f4eb2c70", "patch": "@@ -0,0 +1,70 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:set print pretty off\n+// debugger:break zzz\n+// debugger:run\n+// debugger:finish\n+// debugger:print empty.size_in_bytes\n+// check:$1 = 0\n+\n+// debugger:print singleton.size_in_bytes\n+// check:$2 = 8\n+// debugger:print *((int64_t[1]*)(singleton.data_ptr))\n+// check:$3 = {1}\n+\n+// debugger:print multiple.size_in_bytes\n+// check:$4 = 32\n+// debugger:print *((int64_t[4]*)(multiple.data_ptr))\n+// check:$5 = {2, 3, 4, 5}\n+\n+// debugger:print slice_of_slice.size_in_bytes\n+// check:$6 = 16\n+// debugger:print *((int64_t[2]*)(slice_of_slice.data_ptr))\n+// check:$7 = {3, 4}\n+\n+// debugger:print padded_tuple.size_in_bytes\n+// check:$8 = 16\n+// debugger:print padded_tuple.data_ptr[0]\n+// check:$9 = {6, 7}\n+// debugger:print padded_tuple.data_ptr[1]\n+// check:$10 = {8, 9}\n+\n+// debugger:print padded_struct.size_in_bytes\n+// check:$11 = 24\n+// debugger:print padded_struct.data_ptr[0]\n+// check:$12 = {x = 10, y = 11, z = 12}\n+// debugger:print padded_struct.data_ptr[1]\n+// check:$13 = {x = 13, y = 14, z = 15}\n+\n+struct AStruct {\n+    x: i16,\n+    y: i32,\n+    z: i16\n+}\n+\n+fn main() {\n+    let empty : &[i64] = &[];\n+    let singleton : &[i64] = &[1];\n+    let multiple : &[i64] = &[2, 3, 4, 5];\n+    let slice_of_slice = multiple.slice(1,3);\n+\n+    let padded_tuple : &[(i32, i16)] = &[(6, 7), (8, 9)];\n+\n+    let padded_struct : &[AStruct] = &[\n+        AStruct { x: 10, y: 11, z: 12 },\n+        AStruct { x: 13, y: 14, z: 15 }\n+    ];\n+\n+    zzz();\n+}\n+\n+fn zzz() {()}"}, {"sha": "a9aca58fad7f79886978a1567fbcc3e0bfeafb33", "filename": "src/test/debug-info/vec.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/36ea75683105447cb9f8338cd2a70493f4eb2c70/src%2Ftest%2Fdebug-info%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36ea75683105447cb9f8338cd2a70493f4eb2c70/src%2Ftest%2Fdebug-info%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvec.rs?ref=36ea75683105447cb9f8338cd2a70493f4eb2c70", "patch": "@@ -8,28 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-\n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break _zzz\n+// debugger:break zzz\n // debugger:run\n // debugger:finish\n // debugger:print a\n // check:$1 = {1, 2, 3}\n-// debugger:print b.vec[0]\n-// check:$2 = 4\n-// debugger:print c->boxed.data[1]\n-// check:$3 = 8\n-// debugger:print d->boxed.data[2]\n-// check:$4 = 12\n \n fn main() {\n     let a = [1, 2, 3];\n-    let b = &[4, 5, 6];\n-    let c = @[7, 8, 9];\n-    let d = ~[10, 11, 12];\n-    _zzz();\n+\n+    zzz();\n }\n \n-fn _zzz() {()}\n+fn zzz() {()}"}]}