{"sha": "79ba84fa79959b3e4b1143861c0ae5d256f8a049", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5YmE4NGZhNzk5NTliM2U0YjExNDM4NjFjMGFlNWQyNTZmOGEwNDk=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-10-31T18:03:23Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-13T11:28:43Z"}, "message": "Adjust documentation", "tree": {"sha": "f1c882cb440bdde32c44ea059977b61e28dfe86e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1c882cb440bdde32c44ea059977b61e28dfe86e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79ba84fa79959b3e4b1143861c0ae5d256f8a049", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79ba84fa79959b3e4b1143861c0ae5d256f8a049", "html_url": "https://github.com/rust-lang/rust/commit/79ba84fa79959b3e4b1143861c0ae5d256f8a049", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79ba84fa79959b3e4b1143861c0ae5d256f8a049/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eacebf24b0e42df1cc8161d8a5023c83d24ddced", "url": "https://api.github.com/repos/rust-lang/rust/commits/eacebf24b0e42df1cc8161d8a5023c83d24ddced", "html_url": "https://github.com/rust-lang/rust/commit/eacebf24b0e42df1cc8161d8a5023c83d24ddced"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "b7f1731ba44e5355510d118cacf41667aab139a2", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79ba84fa79959b3e4b1143861c0ae5d256f8a049/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79ba84fa79959b3e4b1143861c0ae5d256f8a049/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=79ba84fa79959b3e4b1143861c0ae5d256f8a049", "patch": "@@ -179,6 +179,10 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n         })\n     }\n \n+    /// Creates a `Substs` that maps each generic parameter to a higher-ranked\n+    /// var bound at index `0`. For types, we use a `BoundVar` index equal to\n+    /// the type parameter index. For regions, we use the `BoundRegion::BrNamed`\n+    /// variant (which has a def-id).\n     pub fn bound_vars_for_item(\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         def_id: DefId"}, {"sha": "27bf0a757b2553c1ecb5a2159c0c0c4b648dffd1", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/79ba84fa79959b3e4b1143861c0ae5d256f8a049/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79ba84fa79959b3e4b1143861c0ae5d256f8a049/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=79ba84fa79959b3e4b1143861c0ae5d256f8a049", "patch": "@@ -246,7 +246,8 @@ fn program_clauses_for_trait<'a, 'tcx>(\n                 // and that named bound regions have a def-id, it is safe\n                 // to just inject `hypotheses` (which contains named vars bound at index `0`)\n                 // into this binding level. This may change if we ever allow where clauses\n-                // to bind types (e.g. for GATs things).\n+                // to bind types (e.g. for GATs things), because bound types only use a `BoundVar`\n+                // index (no def-id).\n                 hypotheses,\n \n                 category: ProgramClauseCategory::ImpliedBound,\n@@ -368,7 +369,7 @@ pub fn program_clauses_for_type_def<'a, 'tcx>(\n     };\n     let well_formed_clause = Clause::ForAll(ty::Binder::bind(well_formed_clause));\n \n-    // Rule FromEnv-Type\n+    // Rule Implied-Bound-From-Type\n     //\n     // For each where clause `WC`:\n     // ```\n@@ -409,7 +410,7 @@ pub fn program_clauses_for_associated_type_def<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     item_id: DefId,\n ) -> Clauses<'tcx> {\n-    // Rule ProjectionEq-Skolemize\n+    // Rule ProjectionEq-Placeholder\n     //\n     // ```\n     // trait Trait<P1..Pn> {"}]}