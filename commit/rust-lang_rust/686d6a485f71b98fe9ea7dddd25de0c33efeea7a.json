{"sha": "686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NmQ2YTQ4NWY3MWI5OGZlOWVhN2RkZGQyNWRlMGMzM2VmZWVhN2E=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-14T04:23:07Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-21T01:23:47Z"}, "message": "Drop the 2 from the spawn*2 functions\n\nIssue #1022", "tree": {"sha": "ff8e3797ed4a3f45c2b7417ba5fbcf9958d132c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff8e3797ed4a3f45c2b7417ba5fbcf9958d132c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "html_url": "https://github.com/rust-lang/rust/commit/686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0bba33caaeeda99753ec0355d570665f9912d03", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0bba33caaeeda99753ec0355d570665f9912d03", "html_url": "https://github.com/rust-lang/rust/commit/e0bba33caaeeda99753ec0355d570665f9912d03"}], "stats": {"total": 214, "additions": 107, "deletions": 107}, "files": [{"sha": "da550f1735bbc287d8be2152ec75fc76b0ec0f99", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -191,7 +191,7 @@ fn closure_to_task(cx: cx, configport: port<[u8]>, testfn: fn()) ->\n     testfn();\n     let testfile = recv(configport);\n \n-    ret task::spawn_joinable2(\n+    ret task::spawn_joinable(\n         (cx.config, cx.procsrv.chan, testfile), run_test_task);\n }\n "}, {"sha": "099968a23eaf77147b2f828545ba08ee96c02042", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -37,7 +37,7 @@ type response = {pid: int, infd: int, outfd: int, errfd: int};\n \n fn mk() -> handle {\n     let setupport = port();\n-    let task = task::spawn_joinable2(\n+    let task = task::spawn_joinable(\n         chan(setupport),\n         fn# (setupchan: chan<chan<request>>) {\n             let reqport = port();"}, {"sha": "c06d1fa3db14252b768e156281d053489a321891", "filename": "src/lib/aio.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Flib%2Faio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Flib%2Faio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Faio.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -107,7 +107,7 @@ fn# server_task(args: (net::ip_addr, int, chan<server_event>,\n         if rustrt::aio_is_null_client(client) {\n             log \"client was actually null, returning\";\n             ret;\n-        } else { task::spawn2((client, events), accept_task); }\n+        } else { task::spawn((client, events), accept_task); }\n     }\n }\n \n@@ -129,10 +129,10 @@ fn# request_task(c: chan<ctx>) {\n             ret;\n           }\n           connect(remote(ip, portnum), client) {\n-            task::spawn2((ip, portnum, client), connect_task);\n+            task::spawn((ip, portnum, client), connect_task);\n           }\n           serve(ip, portnum, events, server) {\n-            task::spawn2((ip, portnum, events, server), server_task);\n+            task::spawn((ip, portnum, events, server), server_task);\n           }\n           write(socket, v, status) unsafe {\n             rustrt::aio_writedata(socket, vec::unsafe::to_ptr::<u8>(v),\n@@ -157,7 +157,7 @@ fn# iotask(c: chan<ctx>) {\n \n     log \"io task init\";\n     // Spawn our request task\n-    let reqtask = task::spawn_joinable2(c, request_task);\n+    let reqtask = task::spawn_joinable(c, request_task);\n \n     log \"uv run task init\";\n     // Enter IO loop. This never returns until aio_stop is called.\n@@ -169,7 +169,7 @@ fn# iotask(c: chan<ctx>) {\n \n fn new() -> ctx {\n     let p: port<ctx> = port();\n-    task::spawn2(chan(p), iotask);\n+    task::spawn(chan(p), iotask);\n     ret recv(p);\n }\n "}, {"sha": "8808f0c8d022e697da2185b335468ff03235de54", "filename": "src/lib/task.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -18,9 +18,9 @@ export task_result;\n export tr_success;\n export tr_failure;\n export get_task_id;\n-export spawn2;\n-export spawn_notify2;\n-export spawn_joinable2;\n+export spawn;\n+export spawn_notify;\n+export spawn_joinable;\n \n native \"rust\" mod rustrt {\n     fn task_sleep(time_in_us: uint);\n@@ -93,18 +93,18 @@ fn unpin() { rustrt::unpin_task(); }\n \n fn set_min_stack(stack_size: uint) { rustrt::set_min_stack(stack_size); }\n \n-fn spawn2<~T>(-data: T, f: fn#(T)) -> task {\n+fn spawn<~T>(-data: T, f: fn#(T)) -> task {\n     spawn_inner2(data, f, none)\n }\n \n-fn spawn_notify2<~T>(-data: T, f: fn#(T),\n+fn spawn_notify<~T>(-data: T, f: fn#(T),\n                          notify: comm::chan<task_notification>) -> task {\n     spawn_inner2(data, f, some(notify))\n }\n \n-fn spawn_joinable2<~T>(-data: T, f: fn#(T)) -> joinable_task {\n+fn spawn_joinable<~T>(-data: T, f: fn#(T)) -> joinable_task {\n     let p = comm::port::<task_notification>();\n-    let id = spawn_notify2(data, f, comm::chan::<task_notification>(p));\n+    let id = spawn_notify(data, f, comm::chan::<task_notification>(p));\n     ret (id, p);\n }\n "}, {"sha": "17d34ed4c1f5f08f36bf8651670ddb8cd30d661f", "filename": "src/lib/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Flib%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Flib%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftest.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -325,7 +325,7 @@ fn default_test_to_task(&&f: default_test_fn) -> joinable {\n         configure_test_task();\n         f();\n     }\n-    ret task::spawn_joinable2(f, run_task);\n+    ret task::spawn_joinable(f, run_task);\n }\n \n // Call from within a test task to make sure it's set up correctly"}, {"sha": "292db247e6f29382a1fdfc6337f0ca358182534e", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -36,15 +36,15 @@ fn fib(n: int) -> int {\n         } else {\n             let p = port();\n \n-            let t1 = task::spawn2((chan(p), n - 1), pfib);\n-            let t2 = task::spawn2((chan(p), n - 2), pfib);\n+            let t1 = task::spawn((chan(p), n - 1), pfib);\n+            let t2 = task::spawn((chan(p), n - 2), pfib);\n \n             send(c, recv(p) + recv(p));\n         }\n     }\n \n     let p = port();\n-    let t = task::spawn2((chan(p), n), pfib);\n+    let t = task::spawn((chan(p), n), pfib);\n     ret recv(p);\n }\n \n@@ -75,7 +75,7 @@ fn# stress_task(&&id: int) {\n fn stress(num_tasks: int) {\n     let tasks = [];\n     for each i: int in range(0, num_tasks) {\n-        tasks += [task::spawn_joinable2(copy i, stress_task)];\n+        tasks += [task::spawn_joinable(copy i, stress_task)];\n     }\n     for t in tasks { task::join(t); }\n }"}, {"sha": "ff8c0cb05f7970a3f0e8a55e05df74256060690b", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -7,7 +7,7 @@ import std::str;\n fn# f(&&n: uint) {\n     let i = 0u;\n     while i < n {\n-        task::join(task::spawn_joinable2((), g));\n+        task::join(task::spawn_joinable((), g));\n         i += 1u;\n     }\n }\n@@ -20,5 +20,5 @@ fn main(args: [str]) {\n             10u\n         } else { uint::parse_buf(str::bytes(args[1]), 10u) };\n     let i = 0u;\n-    while i < n { task::spawn2(copy n, f); i += 1u; }\n+    while i < n { task::spawn(copy n, f); i += 1u; }\n }"}, {"sha": "c8c359b11ccd0c7d98a5924340faacff165ab231", "filename": "src/test/bench/task-perf-vector-party.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -21,5 +21,5 @@ fn main(args: [str]) {\n         if vec::len(args) < 2u {\n             100u\n         } else { uint::parse_buf(str::bytes(args[1]), 10u) };\n-    for each i in uint::range(0u, 100u) { task::spawn2(copy n, f); }\n+    for each i in uint::range(0u, 100u) { task::spawn(copy n, f); }\n }"}, {"sha": "5316941355f4c93e381a6fe900562a9919c8b0aa", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -70,7 +70,7 @@ mod map_reduce {\n        [joinable_task] {\n         let tasks = [];\n         for i: str in inputs {\n-            tasks += [task::spawn_joinable2((ctrl, i), map_task)];\n+            tasks += [task::spawn_joinable((ctrl, i), map_task)];\n         }\n         ret tasks;\n     }\n@@ -171,7 +171,7 @@ mod map_reduce {\n                     // log_err \"creating new reducer for \" + k;\n                     let p = port();\n                     tasks +=\n-                        [task::spawn_joinable2((k, chan(p)), reduce_task)];\n+                        [task::spawn_joinable((k, chan(p)), reduce_task)];\n                     c = recv(p);\n                     reducers.insert(k, c);\n                   }"}, {"sha": "5e467d1e03f79535705b6b58bf2cbe004816f867", "filename": "src/test/compile-fail/spawn-non-nil-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -5,4 +5,4 @@ import std::task;\n \n fn# f(&&x: int) -> int { ret x; }\n \n-fn main() { task::spawn2(10, f); }\n+fn main() { task::spawn(10, f); }"}, {"sha": "0b6bea132d280d5376243f8331c601287e75a6f8", "filename": "src/test/run-fail/linked-failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -10,6 +10,6 @@ fn# child(&&_i: ()) { assert (1 == 2); }\n \n fn main() {\n     let p = port::<int>();\n-    task::spawn2((), child);\n+    task::spawn((), child);\n     let x = recv(p);\n }"}, {"sha": "61d1827f055ec16216fe77136fe5f83928ba36ca", "filename": "src/test/run-fail/linked-failure2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-fail%2Flinked-failure2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-fail%2Flinked-failure2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure2.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -11,6 +11,6 @@ fn# child(&&_i: ()) { fail; }\n \n fn main() {\n     let p = port::<int>();\n-    task::spawn2((), child);\n+    task::spawn((), child);\n     task::yield();\n }"}, {"sha": "057095a3a4b59409c5f79f3befcb6d55eeb39b6e", "filename": "src/test/run-fail/linked-failure3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-fail%2Flinked-failure3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-fail%2Flinked-failure3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure3.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -10,12 +10,12 @@ fn# grandchild(&&_i: ()) { fail; }\n \n fn# child(&&_i: ()) {\n     let p = port::<int>();\n-    task::spawn2((), grandchild);\n+    task::spawn((), grandchild);\n     let x = recv(p);\n }\n \n fn main() {\n     let p = port::<int>();\n-    task::spawn2((), child);\n+    task::spawn((), child);\n     let x = recv(p);\n }"}, {"sha": "98778a9f9d7ee11865baa8c41c03117fb7a8462e", "filename": "src/test/run-fail/task-comm-recv-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -10,7 +10,7 @@ fn# goodfail(&&_i: ()) {\n }\n \n fn main() {\n-    task::spawn2((), goodfail);\n+    task::spawn((), goodfail);\n     let po = comm::port();\n     // We shouldn't be able to get past this recv since there's no\n     // message available"}, {"sha": "dbfd515244ac1dc80f4b4012569bc0f917a80900", "filename": "src/test/run-pass/basic-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fbasic-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fbasic-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic-1.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -11,8 +11,8 @@ fn# a(c: chan<int>) { send(c, 10); }\n \n fn main() {\n     let p = port();\n-    task::spawn2(chan(p), a);\n-    task::spawn2(chan(p), a);\n+    task::spawn(chan(p), a);\n+    task::spawn(chan(p), a);\n     let n: int = 0;\n     n = recv(p);\n     n = recv(p);"}, {"sha": "5a7dc86f64fdcfd3169d4e4776a72098c63ef431", "filename": "src/test/run-pass/basic-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fbasic-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fbasic-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic-2.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -11,8 +11,8 @@ fn# a(c: chan<int>) { log \"task a0\"; log \"task a1\"; send(c, 10); }\n \n fn main() {\n     let p = comm::port();\n-    task::spawn2(chan(p), a);\n-    task::spawn2(chan(p), b);\n+    task::spawn(chan(p), a);\n+    task::spawn(chan(p), b);\n     let n: int = 0;\n     n = recv(p);\n     n = recv(p);"}, {"sha": "381ebba112826dcd2e311ca762147e44afb4164c", "filename": "src/test/run-pass/basic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -26,8 +26,8 @@ fn main() {\n     let n: int = 2 + 3 * 7;\n     let s: str = \"hello there\";\n     let p = comm::port();\n-    task::spawn2(chan(p), a);\n-    task::spawn2(chan(p), b);\n+    task::spawn(chan(p), a);\n+    task::spawn(chan(p), b);\n     let x: int = 10;\n     x = g(n, s);\n     log x;"}, {"sha": "ee3476c9477452650a7d5944ab0249c52d935df9", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -89,8 +89,8 @@ fn test_ptr() {\n fn test_task() {\n     fn# f(&&_i: ()) { }\n     let f1 = f, f2 = f;\n-    let t1 = task::spawn2((), f1);\n-    let t2 = task::spawn2((), f2);\n+    let t1 = task::spawn((), f1);\n+    let t2 = task::spawn((), f2);\n \n     assert (t1 == t1);\n     assert (t1 != t2);"}, {"sha": "5ea0cda7783e3a09e2ae104705924403a70e47b1", "filename": "src/test/run-pass/chan-leak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchan-leak.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -23,7 +23,7 @@ fn# request_task(c: chan<ctx>) {\n \n fn new() -> ctx {\n     let p = port();\n-    let t = task::spawn2(chan(p), request_task);\n+    let t = task::spawn(chan(p), request_task);\n     let cx: ctx;\n     cx = recv(p);\n     ret cx;"}, {"sha": "a2f7a59f9179f2348e28b6f77933042929b96c91", "filename": "src/test/run-pass/child-outlives-parent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -5,4 +5,4 @@ import std::task;\n \n fn# child2(&&s: str) { }\n \n-fn main() { let x = task::spawn2(\"hi\", child2); }\n+fn main() { let x = task::spawn(\"hi\", child2); }"}, {"sha": "c8a911596cfa782927778f1405ccc0d9832b2993", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -9,7 +9,7 @@ import std::task;\n \n fn main() {\n     let p = comm::port();\n-    let t = task::spawn2(chan(p), child);\n+    let t = task::spawn(chan(p), child);\n     let y = recv(p);\n     log_err \"received\";\n     log_err y;"}, {"sha": "ade075d856dcc8fbb29b3e1a3e53559b92bd8979", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -33,7 +33,7 @@ mod map_reduce {\n     tag ctrl_proto { find_reducer([u8], chan<int>); mapper_done; }\n \n     fn start_mappers(ctrl: chan<ctrl_proto>, inputs: [str]) {\n-        for i: str in inputs { task::spawn2((ctrl, i), map_task); }\n+        for i: str in inputs { task::spawn((ctrl, i), map_task); }\n     }\n \n     fn# map_task(&&args: (chan<ctrl_proto>, str)) {"}, {"sha": "be73f314d80e560fdf550d4ecc946af441110a36", "filename": "src/test/run-pass/issue-506.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fissue-506.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fissue-506.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-506.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -11,4 +11,4 @@ native \"rust\" mod rustrt {\n \n fn# yield_wrap(&&_i: ()) unsafe { rustrt::task_yield(); }\n \n-fn main() { task::spawn2((), yield_wrap); }\n+fn main() { task::spawn((), yield_wrap); }"}, {"sha": "89744707fbc9b0503212f91a1aa9b2f6bc6f0290", "filename": "src/test/run-pass/issue-507.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fissue-507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fissue-507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-507.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -18,14 +18,14 @@ import std::comm::recv;\n fn# grandchild(c: chan<int>) { send(c, 42); }\n \n fn# child(c: chan<int>) {\n-    let _grandchild = task::spawn_joinable2(c, grandchild);\n+    let _grandchild = task::spawn_joinable(c, grandchild);\n     join(_grandchild);\n }\n \n fn main() {\n     let p = comm::port();\n \n-    let _child = task::spawn_joinable2(chan(p), child);\n+    let _child = task::spawn_joinable(chan(p), child);\n \n     let x: int = recv(p);\n "}, {"sha": "76989f47c6f68bfe181457297856fdadd2b1d88a", "filename": "src/test/run-pass/issue-687.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fissue-687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fissue-687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-687.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -37,10 +37,10 @@ fn# packager(&&args: (chan<chan<[u8]>>, chan<msg>)) {\n fn main() {\n     let p: port<msg> = port();\n     let recv_reader: port<chan<[u8]>> = port();\n-    let pack = task::spawn2((chan(recv_reader), chan(p)), packager);\n+    let pack = task::spawn((chan(recv_reader), chan(p)), packager);\n \n     let source_chan: chan<[u8]> = recv(recv_reader);\n-    let prod = task::spawn2(source_chan, producer);\n+    let prod = task::spawn(source_chan, producer);\n \n     while true {\n         let msg = recv(p);"}, {"sha": "6b61def87f6c48a8d94dabe6cf48e2f9c678c41d", "filename": "src/test/run-pass/ivec-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-tag.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -15,7 +15,7 @@ fn# producer(c: chan<[u8]>) {\n \n fn main() {\n     let p: port<[u8]> = port();\n-    let prod = task::spawn2(chan(p), producer);\n+    let prod = task::spawn(chan(p), producer);\n \n     let data: [u8] = recv(p);\n }"}, {"sha": "323abbce931cc207a1d7fcf63aafb2964d089aa2", "filename": "src/test/run-pass/join.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fjoin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fjoin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fjoin.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -5,7 +5,7 @@ use std;\n import std::task::*;\n \n fn main() {\n-    let other = spawn_joinable2((), child);\n+    let other = spawn_joinable((), child);\n     log_err \"1\";\n     yield();\n     join(other);"}, {"sha": "93eb368febb0901bc8703f90a52b9f8df4fd5007", "filename": "src/test/run-pass/lazychan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Flazychan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Flazychan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazychan.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -8,13 +8,13 @@ fn main() {\n     let p = port();\n     let y: int;\n \n-    task::spawn2(chan(p), child);\n+    task::spawn(chan(p), child);\n     y = recv(p);\n     log \"received 1\";\n     log y;\n     assert (y == 10);\n \n-    task::spawn2(chan(p), child);\n+    task::spawn(chan(p), child);\n     y = recv(p);\n     log \"received 2\";\n     log y;"}, {"sha": "1bee29271b905693d4c8fdf4555bd2404e369c76", "filename": "src/test/run-pass/linked-failure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Flinked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Flinked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinked-failure.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -12,10 +12,10 @@ fn# parent(&&_i: ()) {\n     // process\n     task::unsupervise();\n     let p = port::<int>();\n-    task::spawn2((), child);\n+    task::spawn((), child);\n     let x = recv(p);\n }\n \n fn main() {\n-    task::spawn2((), parent);\n+    task::spawn((), parent);\n }\n\\ No newline at end of file"}, {"sha": "ded0a0268ad58b22d99bafaa02e0668351ab17fb", "filename": "src/test/run-pass/lots-a-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flots-a-fail.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -10,11 +10,11 @@ fn# die(&&_i: ()) {\n \n fn# iloop(&&_i: ()) {\n     task::unsupervise();\n-    task::spawn2((), die);\n+    task::spawn((), die);\n }\n \n fn main() {\n     for each i in uint::range(0u, 100u) {\n-        task::spawn2((), iloop);\n+        task::spawn((), iloop);\n     }\n }\n\\ No newline at end of file"}, {"sha": "4d4607b0a86fa279a4e9e9afb7140fe0d5854e3b", "filename": "src/test/run-pass/many.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fmany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fmany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmany.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -10,15 +10,15 @@ fn# sub(&&args: (comm::chan<int>, int)) {\n         comm::send(parent, 0);\n     } else {\n         let p = comm::port();\n-        let child = task::spawn2((comm::chan(p), id - 1), sub);\n+        let child = task::spawn((comm::chan(p), id - 1), sub);\n         let y = comm::recv(p);\n         comm::send(parent, y + 1);\n     }\n }\n \n fn main() {\n     let p = comm::port();\n-    let child = task::spawn2((comm::chan(p), 200), sub);\n+    let child = task::spawn((comm::chan(p), 200), sub);\n     let y = comm::recv(p);\n     log \"transmission complete\";\n     log y;"}, {"sha": "71b8f12cdf00226099613076795063220c9ac672", "filename": "src/test/run-pass/send-iloop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-iloop.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -10,7 +10,7 @@ fn# die(&&_i: ()) {\n \n fn# iloop(&&_i: ()) {\n     task::unsupervise();\n-    task::spawn2((), die);\n+    task::spawn((), die);\n     let p = comm::port::<()>();\n     let c = comm::chan(p);\n     while true {\n@@ -20,6 +20,6 @@ fn# iloop(&&_i: ()) {\n \n fn main() {\n     for each i in uint::range(0u, 16u) {\n-        task::spawn2((), iloop);\n+        task::spawn((), iloop);\n     }\n }\n\\ No newline at end of file"}, {"sha": "7cf3e27c5f2d6fae4dbbdd811ecf7a64ae3bf7f3", "filename": "src/test/run-pass/spawn-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-fn.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -10,9 +10,9 @@ fn# x(&&args: (str, int)) {\n }\n \n fn main() {\n-    task::spawn2((\"hello from first spawned fn\", 65), x);\n-    task::spawn2((\"hello from second spawned fn\", 66), x);\n-    task::spawn2((\"hello from third spawned fn\", 67), x);\n+    task::spawn((\"hello from first spawned fn\", 65), x);\n+    task::spawn((\"hello from second spawned fn\", 66), x);\n+    task::spawn((\"hello from third spawned fn\", 67), x);\n     let i: int = 30;\n     while i > 0 { i = i - 1; log \"parent sleeping\"; yield(); }\n }"}, {"sha": "ebac9fccb2bfeadf62311d78195740c84dcabd7c", "filename": "src/test/run-pass/spawn-module-qualified.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fspawn-module-qualified.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fspawn-module-qualified.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-module-qualified.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -1,8 +1,8 @@\n use std;\n import std::task::join;\n-import std::task::spawn_joinable2;\n+import std::task::spawn_joinable;\n \n-fn main() { let x = spawn_joinable2(10, m::child); join(x); }\n+fn main() { let x = spawn_joinable(10, m::child); join(x); }\n \n mod m {\n     fn# child(&&i: int) { log i; }"}, {"sha": "c67ce7475e88443767b461d01345b77b84c45a92", "filename": "src/test/run-pass/spawn-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-types.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -19,5 +19,5 @@ fn# iotask(&&args: (ctx, str)) {\n \n fn main() {\n     let p = comm::port::<int>();\n-    task::spawn2((comm::chan(p), \"localhost\"), iotask);\n+    task::spawn((comm::chan(p), \"localhost\"), iotask);\n }"}, {"sha": "c1752f1d23c9025af17c56b32a41cdaf662c0d0f", "filename": "src/test/run-pass/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -4,7 +4,7 @@ use std;\n \n import std::task;\n \n-fn main() { let t = task::spawn_joinable2(10, child); task::join(t); }\n+fn main() { let t = task::spawn_joinable(10, child); task::join(t); }\n \n fn# child(&&i: int) { log_err i; assert (i == 10); }\n "}, {"sha": "a9acb1514caa5b239bdd56cbe7476cb41c1cff34", "filename": "src/test/run-pass/spawn2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fspawn2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fspawn2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn2.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -1,9 +1,9 @@\n // -*- rust -*-\n \n use std;\n-import std::task::spawn2;\n+import std::task::spawn;\n \n-fn main() { spawn2((10, 20, 30, 40, 50, 60, 70, 80, 90), child); }\n+fn main() { spawn((10, 20, 30, 40, 50, 60, 70, 80, 90), child); }\n \n fn# child(&&args: (int, int, int, int, int, int, int, int, int)) {\n     let (i1, i2, i3, i4, i5, i6, i7, i8, i9) = args;"}, {"sha": "8c6f40bc93b6a89f3124193fc85cc4b779ae3f34", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -20,7 +20,7 @@ fn# test05_start(ch : chan<int>) {\n fn test05() {\n     let po = comm::port();\n     let ch = comm::chan(po);\n-    task::spawn2(ch, test05_start);\n+    task::spawn(ch, test05_start);\n     let value = comm::recv(po);\n     log_err value;\n     value = comm::recv(po);"}, {"sha": "0fcb00c50524e64d4169bb6a8ddde1b6083d405c", "filename": "src/test/run-pass/task-comm-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -1,14 +1,14 @@\n use std;\n \n-import std::task::spawn_joinable2;\n+import std::task::spawn_joinable;\n import std::task::join;\n \n fn main() { test00(); }\n \n fn# start(&&_i: ()) { log \"Started / Finished task.\"; }\n \n fn test00() {\n-    let t = spawn_joinable2((), start);\n+    let t = spawn_joinable((), start);\n     join(t);\n     log \"Completing.\";\n }"}, {"sha": "0938d8602d6cbecbc70a77cf2a80ef89cd86749c", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -18,7 +18,7 @@ fn# start(c: comm::chan<comm::chan<str>>) {\n \n fn main() {\n     let p = comm::port();\n-    let child = task::spawn2(comm::chan(p), start);\n+    let child = task::spawn(comm::chan(p), start);\n \n     let c = comm::recv(p);\n     comm::send(c, \"A\");"}, {"sha": "d427b4c1dd2680589fdad4df716534cb059e300a", "filename": "src/test/run-pass/task-comm-11.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -9,6 +9,6 @@ fn# start(c: comm::chan<comm::chan<int>>) {\n \n fn main() {\n     let p = comm::port();\n-    let child = task::spawn2(comm::chan(p), start);\n+    let child = task::spawn(comm::chan(p), start);\n     let c = comm::recv(p);\n }"}, {"sha": "2d82a1fa1c8d2ba0adc8f29671b88eab75ff8f6d", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -7,7 +7,7 @@ fn# start(&&task_number: int) { log \"Started / Finished task.\"; }\n \n fn test00() {\n     let i: int = 0;\n-    let t = task::spawn_joinable2(i, start);\n+    let t = task::spawn_joinable(i, start);\n \n     // Sleep long enough for the task to finish.\n     task::sleep(10000u);"}, {"sha": "f6a1efc0565b5b75280a42c16cc6bf2cc93903ec", "filename": "src/test/run-pass/task-comm-13.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -12,7 +12,7 @@ fn# start(&&args: (comm::chan<int>, int, int)) {\n fn main() {\n     log \"Check that we don't deadlock.\";\n     let p = comm::port::<int>();\n-    let a = task::spawn_joinable2((comm::chan(p), 0, 10), start);\n+    let a = task::spawn_joinable((comm::chan(p), 0, 10), start);\n     task::join(a);\n     log \"Joined task\";\n }"}, {"sha": "e04e923d22d7def2f766371edaf0eeb21b39b170", "filename": "src/test/run-pass/task-comm-14.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -9,7 +9,7 @@ fn main() {\n     let i = 10;\n     while (i > 0) {\n         log i;\n-        task::spawn2((i, comm::chan(po)), child);\n+        task::spawn((i, comm::chan(po)), child);\n         i = i - 1;\n     }\n "}, {"sha": "52d84d90dfc77352d0bb0b7796489d31fea2dcb5", "filename": "src/test/run-pass/task-comm-17.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-comm-17.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-comm-17.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-17.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -12,5 +12,5 @@ fn f() {\n }\n \n fn main() {\n-    task::spawn2(bind f());\n+    task::spawn(bind f());\n }\n\\ No newline at end of file"}, {"sha": "5a07d1a9aaceae0319b437bf956e8210b0be1181", "filename": "src/test/run-pass/task-comm-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-comm-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-comm-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-2.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -19,7 +19,7 @@ fn test00() {\n     let tasks = [];\n     while i < number_of_tasks {\n         i = i + 1;\n-        tasks += [task::spawn_joinable2(copy i, start)];\n+        tasks += [task::spawn_joinable(copy i, start)];\n     }\n \n     for t in tasks { task::join(t); }"}, {"sha": "9ae26c254b81a18f81f10819a937b25caedfe867", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -33,7 +33,7 @@ fn test00() {\n     // Create and spawn tasks...\n     let tasks = [];\n     while i < number_of_tasks {\n-        tasks += [task::spawn_joinable2(\n+        tasks += [task::spawn_joinable(\n             (ch, i, number_of_messages), test00_start)];\n         i = i + 1;\n     }"}, {"sha": "2aca0058794a982d2551b84212746496a5e6dbad", "filename": "src/test/run-pass/task-comm-7.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -20,19 +20,19 @@ fn test00() {\n     let number_of_messages: int = 10;\n \n     let t0 =\n-        task::spawn_joinable2((chan(p),\n+        task::spawn_joinable((chan(p),\n                                number_of_messages * 0,\n                                number_of_messages), test00_start);\n     let t1 =\n-        task::spawn_joinable2((chan(p),\n+        task::spawn_joinable((chan(p),\n                                number_of_messages * 1,\n                                number_of_messages), test00_start);\n     let t2 =\n-        task::spawn_joinable2((chan(p),\n+        task::spawn_joinable((chan(p),\n                                number_of_messages * 2,\n                                number_of_messages), test00_start);\n     let t3 =\n-        task::spawn_joinable2((chan(p),\n+        task::spawn_joinable((chan(p),\n                                number_of_messages * 3,\n                                number_of_messages), test00_start);\n "}, {"sha": "400336afe7485016ba206a0bed7abfc48fade772", "filename": "src/test/run-pass/task-comm-8.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -17,19 +17,19 @@ fn test00() {\n     let number_of_messages: int = 10;\n \n     let t0 =\n-        task::spawn_joinable2((comm::chan(p),\n+        task::spawn_joinable((comm::chan(p),\n                                number_of_messages * 0,\n                                number_of_messages), test00_start);\n     let t1 =\n-        task::spawn_joinable2((comm::chan(p),\n+        task::spawn_joinable((comm::chan(p),\n                                number_of_messages * 1,\n                                number_of_messages), test00_start);\n     let t2 =\n-        task::spawn_joinable2((comm::chan(p),\n+        task::spawn_joinable((comm::chan(p),\n                                number_of_messages * 2,\n                                number_of_messages), test00_start);\n     let t3 =\n-        task::spawn_joinable2((comm::chan(p),\n+        task::spawn_joinable((comm::chan(p),\n                                number_of_messages * 3,\n                                number_of_messages), test00_start);\n "}, {"sha": "b6c2bcb15b9600e70445804a38557d1489ef508e", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -16,7 +16,7 @@ fn test00() {\n     let p = comm::port();\n     let number_of_messages: int = 10;\n \n-    let t0 = task::spawn_joinable2((comm::chan(p), number_of_messages),\n+    let t0 = task::spawn_joinable((comm::chan(p), number_of_messages),\n                                   test00_start);\n \n     let i: int = 0;"}, {"sha": "5937232f318181367320780e47f416665acbeb11", "filename": "src/test/run-pass/task-life-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-life-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Ftask-life-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-life-0.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -1,6 +1,6 @@\n use std;\n import std::task;\n-fn main() { task::spawn2(\"Hello\", child); }\n+fn main() { task::spawn(\"Hello\", child); }\n \n fn# child(&&s: str) {\n "}, {"sha": "45a61c3020166e0c87ccd8ce58425d5ed11beb7a", "filename": "src/test/run-pass/terminate-in-initializer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -11,13 +11,13 @@ fn test_ret() { let x: @int = ret; }\n \n fn test_fail() {\n     fn# f(&&_i: ()) { std::task::unsupervise(); let x: @int = fail; }\n-    std::task::spawn2((), f);\n+    std::task::spawn((), f);\n }\n \n fn test_fail_indirect() {\n     fn f() -> ! { fail; }\n     fn# g(&&_i: ()) { std::task::unsupervise(); let x: @int = f(); }\n-    std::task::spawn2((), g);\n+    std::task::spawn((), g);\n }\n \n fn main() {"}, {"sha": "64f79848caa622e8565a39a91fb13213f83267bb", "filename": "src/test/run-pass/threads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthreads.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -5,7 +5,7 @@ import std::task;\n \n fn main() {\n     let i = 10;\n-    while i > 0 { task::spawn2(copy i, child); i = i - 1; }\n+    while i > 0 { task::spawn(copy i, child); i = i - 1; }\n     log \"main thread exiting\";\n }\n "}, {"sha": "2fa17677150b1001af4a0fb2a2ea44619d70d772", "filename": "src/test/run-pass/unique-send-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send-2.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -13,7 +13,7 @@ fn main() {\n     let n = 100u;\n     let expected = 0u;\n     for each i in uint::range(0u, n) {\n-        task::spawn2((comm::chan(p), i), child);\n+        task::spawn((comm::chan(p), i), child);\n         expected += i;\n     }\n "}, {"sha": "8b678a0a1a7478e179872c31b4f88e6976c143bc", "filename": "src/test/run-pass/unwind-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Funwind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Funwind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-box.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -9,5 +9,5 @@ fn# f(&&_i: ()) {\n }\n \n fn main() {\n-    task::spawn2((), f);\n+    task::spawn((), f);\n }\n\\ No newline at end of file"}, {"sha": "b5c79b07015a3cc034f44f73ffe37252dc1268cf", "filename": "src/test/run-pass/unwind-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -16,6 +16,6 @@ fn# f(c: comm::chan<bool>) {\n fn main() {\n     let p = comm::port();\n     let c = comm::chan(p);\n-    task::spawn2(c, f);\n+    task::spawn(c, f);\n     assert comm::recv(p);\n }\n\\ No newline at end of file"}, {"sha": "a7eab7f7eebaf6911581aaccb4c17b848ad11f8d", "filename": "src/test/run-pass/unwind-resource2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource2.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -13,5 +13,5 @@ fn# f(&&_i: ()) {\n }\n \n fn main() {\n-    task::spawn2((), f);\n+    task::spawn((), f);\n }\n\\ No newline at end of file"}, {"sha": "9bc34db3b5a82a392d9498104a682b1007d1a2da", "filename": "src/test/run-pass/unwind-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-unique.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -9,5 +9,5 @@ fn# f(&&_i: ()) {\n }\n \n fn main() {\n-    task::spawn2((), f);\n+    task::spawn((), f);\n }\n\\ No newline at end of file"}, {"sha": "7b7a9d53b03d9d2773011c686632045395c8bd27", "filename": "src/test/run-pass/yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fyield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fyield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -4,7 +4,7 @@ import std::task;\n import std::task::*;\n \n fn main() {\n-    let other = task::spawn_joinable2((), child);\n+    let other = task::spawn_joinable((), child);\n     log_err \"1\";\n     yield();\n     log_err \"2\";"}, {"sha": "945e3da86e7a62d20898364935cda40ba6b106f1", "filename": "src/test/run-pass/yield1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fyield1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Frun-pass%2Fyield1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield1.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -4,7 +4,7 @@ import std::task;\n import std::task::*;\n \n fn main() {\n-    let other = task::spawn_joinable2((), child);\n+    let other = task::spawn_joinable((), child);\n     log_err \"1\";\n     yield();\n     join(other);"}, {"sha": "bc34428e5b2fb563f4b71241ed766a8c1e08b127", "filename": "src/test/stdtest/task.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Fstdtest%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d6a485f71b98fe9ea7dddd25de0c33efeea7a/src%2Ftest%2Fstdtest%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ftask.rs?ref=686d6a485f71b98fe9ea7dddd25de0c33efeea7a", "patch": "@@ -8,27 +8,27 @@ fn test_sleep() { task::sleep(1000000u); }\n #[test]\n fn test_unsupervise() {\n     fn# f(&&_i: ()) { task::unsupervise(); fail; }\n-    task::spawn2((), f);\n+    task::spawn((), f);\n }\n \n #[test]\n fn test_lib_spawn() {\n     fn# foo(&&_i: ()) { log_err \"Hello, World!\"; }\n-    task::spawn2((), foo);\n+    task::spawn((), foo);\n }\n \n #[test]\n fn test_lib_spawn2() {\n     fn# foo(&&x: int) { assert (x == 42); }\n-    task::spawn2(42, foo);\n+    task::spawn(42, foo);\n }\n \n #[test]\n fn test_join_chan() {\n     fn# winner(&&_i: ()) { }\n \n     let p = comm::port();\n-    task::spawn_notify2((), winner, comm::chan(p));\n+    task::spawn_notify((), winner, comm::chan(p));\n     let s = comm::recv(p);\n     log_err \"received task status message\";\n     log_err s;\n@@ -43,7 +43,7 @@ fn test_join_chan_fail() {\n     fn# failer(&&_i: ()) { task::unsupervise(); fail }\n \n     let p = comm::port();\n-    task::spawn_notify2((), failer, comm::chan(p));\n+    task::spawn_notify((), failer, comm::chan(p));\n     let s = comm::recv(p);\n     log_err \"received task status message\";\n     log_err s;\n@@ -56,7 +56,7 @@ fn test_join_chan_fail() {\n #[test]\n fn test_join_convenient() {\n     fn# winner(&&_i: ()) { }\n-    let handle = task::spawn_joinable2((), winner);\n+    let handle = task::spawn_joinable((), winner);\n     assert (task::tr_success == task::join(handle));\n }\n \n@@ -66,6 +66,6 @@ fn spawn_polymorphic() {\n     // FIXME #1038: Can't spawn palymorphic functions\n     /*fn# foo<~T>(x: T) { log_err x; }\n \n-    task::spawn2(true, foo);\n-    task::spawn2(42, foo);*/\n+    task::spawn(true, foo);\n+    task::spawn(42, foo);*/\n }"}]}