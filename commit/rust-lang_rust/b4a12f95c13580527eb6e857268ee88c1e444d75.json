{"sha": "b4a12f95c13580527eb6e857268ee88c1e444d75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0YTEyZjk1YzEzNTgwNTI3ZWI2ZTg1NzI2OGVlODhjMWU0NDRkNzU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-06T16:09:49Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-06T16:09:49Z"}, "message": "Don't store the full LinkerInfo inside Linker impls", "tree": {"sha": "f9957a28d17412c64c8621dd5ec4a92e2f839c19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9957a28d17412c64c8621dd5ec4a92e2f839c19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4a12f95c13580527eb6e857268ee88c1e444d75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4a12f95c13580527eb6e857268ee88c1e444d75", "html_url": "https://github.com/rust-lang/rust/commit/b4a12f95c13580527eb6e857268ee88c1e444d75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4a12f95c13580527eb6e857268ee88c1e444d75/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfff3a35a2f871491b6d8f73b6025fd3cc0a3be1", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfff3a35a2f871491b6d8f73b6025fd3cc0a3be1", "html_url": "https://github.com/rust-lang/rust/commit/cfff3a35a2f871491b6d8f73b6025fd3cc0a3be1"}], "stats": {"total": 71, "additions": 44, "deletions": 27}, "files": [{"sha": "b16685e76a70fe0f6d97a432350a9aa458af7a1a", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 44, "deletions": 27, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/b4a12f95c13580527eb6e857268ee88c1e444d75/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a12f95c13580527eb6e857268ee88c1e444d75/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=b4a12f95c13580527eb6e857268ee88c1e444d75", "patch": "@@ -153,28 +153,40 @@ pub fn get_linker<'a>(\n \n     match flavor {\n         LinkerFlavor::Lld(LldFlavor::Link) | LinkerFlavor::Msvc => {\n-            Box::new(MsvcLinker { cmd, sess, info }) as Box<dyn Linker>\n+            Box::new(MsvcLinker { cmd, sess, exports: &info.exports }) as Box<dyn Linker>\n         }\n-        LinkerFlavor::Em => Box::new(EmLinker { cmd, sess, info }) as Box<dyn Linker>,\n-        LinkerFlavor::Gcc => {\n-            Box::new(GccLinker { cmd, sess, info, hinted_static: false, is_ld: false })\n-                as Box<dyn Linker>\n+        LinkerFlavor::Em => {\n+            Box::new(EmLinker { cmd, sess, exports: &info.exports }) as Box<dyn Linker>\n         }\n+        LinkerFlavor::Gcc => Box::new(GccLinker {\n+            cmd,\n+            sess,\n+            exports: &info.exports,\n+            target_cpu: &info.target_cpu,\n+            hinted_static: false,\n+            is_ld: false,\n+        }) as Box<dyn Linker>,\n \n         LinkerFlavor::Lld(LldFlavor::Ld)\n         | LinkerFlavor::Lld(LldFlavor::Ld64)\n-        | LinkerFlavor::Ld => {\n-            Box::new(GccLinker { cmd, sess, info, hinted_static: false, is_ld: true })\n-                as Box<dyn Linker>\n-        }\n+        | LinkerFlavor::Ld => Box::new(GccLinker {\n+            cmd,\n+            sess,\n+            exports: &info.exports,\n+            target_cpu: &info.target_cpu,\n+            hinted_static: false,\n+            is_ld: true,\n+        }) as Box<dyn Linker>,\n \n         LinkerFlavor::Lld(LldFlavor::Wasm) => {\n-            Box::new(WasmLd::new(cmd, sess, info)) as Box<dyn Linker>\n+            Box::new(WasmLd::new(cmd, sess, &info.exports)) as Box<dyn Linker>\n         }\n \n         LinkerFlavor::PtxLinker => Box::new(PtxLinker { cmd, sess }) as Box<dyn Linker>,\n \n-        LinkerFlavor::BpfLinker => Box::new(BpfLinker { cmd, sess, info }) as Box<dyn Linker>,\n+        LinkerFlavor::BpfLinker => {\n+            Box::new(BpfLinker { cmd, sess, exports: &info.exports }) as Box<dyn Linker>\n+        }\n     }\n }\n \n@@ -238,7 +250,8 @@ impl dyn Linker + '_ {\n pub struct GccLinker<'a> {\n     cmd: Command,\n     sess: &'a Session,\n-    info: &'a LinkerInfo,\n+    exports: &'a FxHashMap<CrateType, Vec<String>>,\n+    target_cpu: &'a str,\n     hinted_static: bool, // Keeps track of the current hinting mode.\n     // Link as ld\n     is_ld: bool,\n@@ -313,7 +326,7 @@ impl<'a> GccLinker<'a> {\n         };\n \n         self.linker_arg(&format!(\"-plugin-opt={}\", opt_level));\n-        self.linker_arg(&format!(\"-plugin-opt=mcpu={}\", self.info.target_cpu));\n+        self.linker_arg(&format!(\"-plugin-opt=mcpu={}\", self.target_cpu));\n     }\n \n     fn build_dylib(&mut self, out_filename: &Path) {\n@@ -671,7 +684,7 @@ impl<'a> Linker for GccLinker<'a> {\n             // Write a plain, newline-separated list of symbols\n             let res: io::Result<()> = try {\n                 let mut f = BufWriter::new(File::create(&path)?);\n-                for sym in self.info.exports[&crate_type].iter() {\n+                for sym in self.exports[&crate_type].iter() {\n                     debug!(\"  _{}\", sym);\n                     writeln!(f, \"_{}\", sym)?;\n                 }\n@@ -686,7 +699,7 @@ impl<'a> Linker for GccLinker<'a> {\n                 // .def file similar to MSVC one but without LIBRARY section\n                 // because LD doesn't like when it's empty\n                 writeln!(f, \"EXPORTS\")?;\n-                for symbol in self.info.exports[&crate_type].iter() {\n+                for symbol in self.exports[&crate_type].iter() {\n                     debug!(\"  _{}\", symbol);\n                     writeln!(f, \"  {}\", symbol)?;\n                 }\n@@ -699,9 +712,9 @@ impl<'a> Linker for GccLinker<'a> {\n             let res: io::Result<()> = try {\n                 let mut f = BufWriter::new(File::create(&path)?);\n                 writeln!(f, \"{{\")?;\n-                if !self.info.exports[&crate_type].is_empty() {\n+                if !self.exports[&crate_type].is_empty() {\n                     writeln!(f, \"  global:\")?;\n-                    for sym in self.info.exports[&crate_type].iter() {\n+                    for sym in self.exports[&crate_type].iter() {\n                         debug!(\"    {};\", sym);\n                         writeln!(f, \"    {};\", sym)?;\n                     }\n@@ -801,7 +814,7 @@ impl<'a> Linker for GccLinker<'a> {\n pub struct MsvcLinker<'a> {\n     cmd: Command,\n     sess: &'a Session,\n-    info: &'a LinkerInfo,\n+    exports: &'a FxHashMap<CrateType, Vec<String>>,\n }\n \n impl<'a> Linker for MsvcLinker<'a> {\n@@ -989,7 +1002,7 @@ impl<'a> Linker for MsvcLinker<'a> {\n             // straight to exports.\n             writeln!(f, \"LIBRARY\")?;\n             writeln!(f, \"EXPORTS\")?;\n-            for symbol in self.info.exports[&crate_type].iter() {\n+            for symbol in self.exports[&crate_type].iter() {\n                 debug!(\"  _{}\", symbol);\n                 writeln!(f, \"  {}\", symbol)?;\n             }\n@@ -1042,7 +1055,7 @@ impl<'a> Linker for MsvcLinker<'a> {\n pub struct EmLinker<'a> {\n     cmd: Command,\n     sess: &'a Session,\n-    info: &'a LinkerInfo,\n+    exports: &'a FxHashMap<CrateType, Vec<String>>,\n }\n \n impl<'a> Linker for EmLinker<'a> {\n@@ -1155,7 +1168,7 @@ impl<'a> Linker for EmLinker<'a> {\n     }\n \n     fn export_symbols(&mut self, _tmpdir: &Path, crate_type: CrateType) {\n-        let symbols = &self.info.exports[&crate_type];\n+        let symbols = &self.exports[&crate_type];\n \n         debug!(\"EXPORTED SYMBOLS:\");\n \n@@ -1198,11 +1211,15 @@ impl<'a> Linker for EmLinker<'a> {\n pub struct WasmLd<'a> {\n     cmd: Command,\n     sess: &'a Session,\n-    info: &'a LinkerInfo,\n+    exports: &'a FxHashMap<CrateType, Vec<String>>,\n }\n \n impl<'a> WasmLd<'a> {\n-    fn new(mut cmd: Command, sess: &'a Session, info: &'a LinkerInfo) -> WasmLd<'a> {\n+    fn new(\n+        mut cmd: Command,\n+        sess: &'a Session,\n+        exports: &'a FxHashMap<CrateType, Vec<String>>,\n+    ) -> WasmLd<'a> {\n         // If the atomics feature is enabled for wasm then we need a whole bunch\n         // of flags:\n         //\n@@ -1235,7 +1252,7 @@ impl<'a> WasmLd<'a> {\n             cmd.arg(\"--export=__tls_align\");\n             cmd.arg(\"--export=__tls_base\");\n         }\n-        WasmLd { cmd, sess, info }\n+        WasmLd { cmd, sess, exports }\n     }\n }\n \n@@ -1352,7 +1369,7 @@ impl<'a> Linker for WasmLd<'a> {\n     fn no_default_libraries(&mut self) {}\n \n     fn export_symbols(&mut self, _tmpdir: &Path, crate_type: CrateType) {\n-        for sym in self.info.exports[&crate_type].iter() {\n+        for sym in self.exports[&crate_type].iter() {\n             self.cmd.arg(\"--export\").arg(&sym);\n         }\n \n@@ -1518,7 +1535,7 @@ impl<'a> Linker for PtxLinker<'a> {\n pub struct BpfLinker<'a> {\n     cmd: Command,\n     sess: &'a Session,\n-    info: &'a LinkerInfo,\n+    exports: &'a FxHashMap<CrateType, Vec<String>>,\n }\n \n impl<'a> Linker for BpfLinker<'a> {\n@@ -1609,7 +1626,7 @@ impl<'a> Linker for BpfLinker<'a> {\n         let path = tmpdir.join(\"symbols\");\n         let res: io::Result<()> = try {\n             let mut f = BufWriter::new(File::create(&path)?);\n-            for sym in self.info.exports[&crate_type].iter() {\n+            for sym in self.exports[&crate_type].iter() {\n                 writeln!(f, \"{}\", sym)?;\n             }\n         };"}]}