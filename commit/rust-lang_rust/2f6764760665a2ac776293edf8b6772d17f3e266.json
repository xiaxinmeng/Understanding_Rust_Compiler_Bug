{"sha": "2f6764760665a2ac776293edf8b6772d17f3e266", "node_id": "C_kwDOAAsO6NoAKDJmNjc2NDc2MDY2NWEyYWM3NzYyOTNlZGY4YjY3NzJkMTdmM2UyNjY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-25T20:59:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-25T20:59:46Z"}, "message": "Rollup merge of #89581 - jblazquez:master, r=Mark-Simulacrum\n\nAdd -Z no-unique-section-names to reduce ELF header bloat.\n\nThis change adds a new compiler flag that can help reduce the size of ELF binaries that contain many functions.\n\nBy default, when enabling function sections (which is the default for most targets), the LLVM backend will generate different section names for each function. For example, a function `func` would generate a section called `.text.func`. Normally this is fine because the linker will merge all those sections into a single one in the binary. However, starting with [LLVM 12](https://github.com/llvm/llvm-project/commit/ee5d1a04), the backend will also generate unique section names for exception handling, resulting in thousands of `.gcc_except_table.*` sections ending up in the final binary because some linkers like LLD don't currently merge or strip these EH sections (see discussion [here](https://reviews.llvm.org/D83655)). This can bloat the ELF headers and string table significantly in binaries that contain many functions.\n\nThe new option is analogous to Clang's `-fno-unique-section-names`, and instructs LLVM to generate the same `.text` and `.gcc_except_table` section for each function, resulting in a smaller final binary.\n\nThe motivation to add this new option was because we have a binary that ended up with so many ELF sections (over 65,000) that it broke some existing ELF tools, which couldn't handle so many sections.\n\nHere's our old binary:\n\n```\n$ readelf --sections old.elf | head -1\nThere are 71746 section headers, starting at offset 0x2a246508:\n\n$ readelf --sections old.elf | grep shstrtab\n  [71742] .shstrtab      STRTAB          0000000000000000 2977204c ad44bb 00      0   0  1\n```\n\nThat's an 11MB+ string table. Here's the new binary using this option:\n\n```\n$ readelf --sections new.elf | head -1\nThere are 43 section headers, starting at offset 0x29143ca8:\n\n$ readelf --sections new.elf | grep shstrtab\n  [40] .shstrtab         STRTAB          0000000000000000 29143acc 0001db 00      0   0  1\n```\n\nThe whole binary size went down by over 20MB, which is quite significant.", "tree": {"sha": "e84bd3cd77b71a98f73defb66278d0f90714048c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e84bd3cd77b71a98f73defb66278d0f90714048c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f6764760665a2ac776293edf8b6772d17f3e266", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhdxrDCRBK7hj4Ov3rIwAAPI8IABVa3UwOX8cpZL72zuL+byY8\n9L8VeMxkFRiU0xzIM02z8mj7BSlNhoq5nhqySJeKXHLQLoVRqjmTo2RubvpgrQnC\nhZ0hef/QWTZI+Z1L7obPtUJ9i+iWL9DUq5/EDgcBprkWifutG6WgGCyhoLANCDlN\nFKe0UyeZmxrCgwjRm9fJnyiFDD84tKXnlA9skyNgpSfkdIDTXBGPg4BjFaqYcXt2\nz1i/gwk6AaIHpY+yltFfWsF1nW4TfkLWOp+dz6848JRBz+N9vV9Eug0o46Z9IX6W\no+akVPGFmAo3Kf4wpgfsoGLJUZfscQ9dfKAeVqb236zek9mb1AywRE2QdwZlon0=\n=jz9o\n-----END PGP SIGNATURE-----\n", "payload": "tree e84bd3cd77b71a98f73defb66278d0f90714048c\nparent 84c2a8505dcdfa0e38e05f72066480ea51ba9cbd\nparent 4ed846ad4d4e0be96efc4837fa416aabce1882db\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1635195586 +0200\ncommitter GitHub <noreply@github.com> 1635195586 +0200\n\nRollup merge of #89581 - jblazquez:master, r=Mark-Simulacrum\n\nAdd -Z no-unique-section-names to reduce ELF header bloat.\n\nThis change adds a new compiler flag that can help reduce the size of ELF binaries that contain many functions.\n\nBy default, when enabling function sections (which is the default for most targets), the LLVM backend will generate different section names for each function. For example, a function `func` would generate a section called `.text.func`. Normally this is fine because the linker will merge all those sections into a single one in the binary. However, starting with [LLVM 12](https://github.com/llvm/llvm-project/commit/ee5d1a04), the backend will also generate unique section names for exception handling, resulting in thousands of `.gcc_except_table.*` sections ending up in the final binary because some linkers like LLD don't currently merge or strip these EH sections (see discussion [here](https://reviews.llvm.org/D83655)). This can bloat the ELF headers and string table significantly in binaries that contain many functions.\n\nThe new option is analogous to Clang's `-fno-unique-section-names`, and instructs LLVM to generate the same `.text` and `.gcc_except_table` section for each function, resulting in a smaller final binary.\n\nThe motivation to add this new option was because we have a binary that ended up with so many ELF sections (over 65,000) that it broke some existing ELF tools, which couldn't handle so many sections.\n\nHere's our old binary:\n\n```\n$ readelf --sections old.elf | head -1\nThere are 71746 section headers, starting at offset 0x2a246508:\n\n$ readelf --sections old.elf | grep shstrtab\n  [71742] .shstrtab      STRTAB          0000000000000000 2977204c ad44bb 00      0   0  1\n```\n\nThat's an 11MB+ string table. Here's the new binary using this option:\n\n```\n$ readelf --sections new.elf | head -1\nThere are 43 section headers, starting at offset 0x29143ca8:\n\n$ readelf --sections new.elf | grep shstrtab\n  [40] .shstrtab         STRTAB          0000000000000000 29143acc 0001db 00      0   0  1\n```\n\nThe whole binary size went down by over 20MB, which is quite significant.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f6764760665a2ac776293edf8b6772d17f3e266", "html_url": "https://github.com/rust-lang/rust/commit/2f6764760665a2ac776293edf8b6772d17f3e266", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f6764760665a2ac776293edf8b6772d17f3e266/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84c2a8505dcdfa0e38e05f72066480ea51ba9cbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/84c2a8505dcdfa0e38e05f72066480ea51ba9cbd", "html_url": "https://github.com/rust-lang/rust/commit/84c2a8505dcdfa0e38e05f72066480ea51ba9cbd"}, {"sha": "4ed846ad4d4e0be96efc4837fa416aabce1882db", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ed846ad4d4e0be96efc4837fa416aabce1882db", "html_url": "https://github.com/rust-lang/rust/commit/4ed846ad4d4e0be96efc4837fa416aabce1882db"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "82c3c2006eb148f8cb5bb72ac913cc47c8c77686", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6764760665a2ac776293edf8b6772d17f3e266/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6764760665a2ac776293edf8b6772d17f3e266/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=2f6764760665a2ac776293edf8b6772d17f3e266", "patch": "@@ -161,6 +161,7 @@ pub fn target_machine_factory(\n     let ffunction_sections =\n         sess.opts.debugging_opts.function_sections.unwrap_or(sess.target.function_sections);\n     let fdata_sections = ffunction_sections;\n+    let funique_section_names = !sess.opts.debugging_opts.no_unique_section_names;\n \n     let code_model = to_llvm_code_model(sess.code_model());\n \n@@ -205,6 +206,7 @@ pub fn target_machine_factory(\n                 use_softfp,\n                 ffunction_sections,\n                 fdata_sections,\n+                funique_section_names,\n                 trap_unreachable,\n                 singlethread,\n                 asm_comments,"}, {"sha": "d57573558da55b395cf5f6ea93a962609d02286a", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f6764760665a2ac776293edf8b6772d17f3e266/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6764760665a2ac776293edf8b6772d17f3e266/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=2f6764760665a2ac776293edf8b6772d17f3e266", "patch": "@@ -2187,6 +2187,7 @@ extern \"C\" {\n         UseSoftFP: bool,\n         FunctionSections: bool,\n         DataSections: bool,\n+        UniqueSectionNames: bool,\n         TrapUnreachable: bool,\n         Singlethread: bool,\n         AsmComments: bool,"}, {"sha": "2d3cb52f5fd478fc6718f715765ce8375479f73d", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f6764760665a2ac776293edf8b6772d17f3e266/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6764760665a2ac776293edf8b6772d17f3e266/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=2f6764760665a2ac776293edf8b6772d17f3e266", "patch": "@@ -744,6 +744,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(new_llvm_pass_manager, Some(true));\n     tracked!(no_generate_arange_section, true);\n     tracked!(no_link, true);\n+    tracked!(no_unique_section_names, true);\n     tracked!(no_profiler_runtime, true);\n     tracked!(osx_rpath_install_name, true);\n     tracked!(panic_abort_tests, true);"}, {"sha": "32b866e81b131eca15e114368170038fa9d8e0e1", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6764760665a2ac776293edf8b6772d17f3e266/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2f6764760665a2ac776293edf8b6772d17f3e266/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=2f6764760665a2ac776293edf8b6772d17f3e266", "patch": "@@ -462,6 +462,7 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n     LLVMRustCodeGenOptLevel RustOptLevel, bool UseSoftFloat,\n     bool FunctionSections,\n     bool DataSections,\n+    bool UniqueSectionNames,\n     bool TrapUnreachable,\n     bool Singlethread,\n     bool AsmComments,\n@@ -491,6 +492,7 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n   }\n   Options.DataSections = DataSections;\n   Options.FunctionSections = FunctionSections;\n+  Options.UniqueSectionNames = UniqueSectionNames;\n   Options.MCOptions.AsmVerbose = AsmComments;\n   Options.MCOptions.PreserveAsmComments = AsmComments;\n   Options.MCOptions.ABIName = ABIStr;"}, {"sha": "3ff91c0553afe8f22678714366d0058edad84038", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6764760665a2ac776293edf8b6772d17f3e266/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6764760665a2ac776293edf8b6772d17f3e266/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=2f6764760665a2ac776293edf8b6772d17f3e266", "patch": "@@ -1214,6 +1214,8 @@ options! {\n         \"compile without linking\"),\n     no_parallel_llvm: bool = (false, parse_no_flag, [UNTRACKED],\n         \"run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)\"),\n+    no_unique_section_names: bool = (false, parse_bool, [TRACKED],\n+        \"do not use unique names for text and data sections when -Z function-sections is used\"),\n     no_profiler_runtime: bool = (false, parse_no_flag, [TRACKED],\n         \"prevent automatic injection of the profiler_builtins crate\"),\n     normalize_docs: bool = (false, parse_bool, [TRACKED],"}, {"sha": "5c1c7cda7013e9615259fa53bd090306435180f7", "filename": "src/doc/unstable-book/src/compiler-flags/no-unique-section-names.md", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2f6764760665a2ac776293edf8b6772d17f3e266/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fno-unique-section-names.md", "raw_url": "https://github.com/rust-lang/rust/raw/2f6764760665a2ac776293edf8b6772d17f3e266/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fno-unique-section-names.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fno-unique-section-names.md?ref=2f6764760665a2ac776293edf8b6772d17f3e266", "patch": "@@ -0,0 +1,9 @@\n+# `no-unique-section-names`\n+\n+------------------------\n+\n+This flag currently applies only to ELF-based targets using the LLVM codegen backend. It prevents the generation of unique ELF section names for each separate code and data item when `-Z function-sections` is also in use, which is the default for most targets. This option can reduce the size of object files, and depending on the linker, the final ELF binary as well.\n+\n+For example, a function `func` will by default generate a code section called `.text.func`. Normally this is fine because the linker will merge all those `.text.*` sections into a single one in the binary. However, starting with [LLVM 12](https://github.com/llvm/llvm-project/commit/ee5d1a04), the backend will also generate unique section names for exception handling, so you would see a section name of `.gcc_except_table.func` in the object file and potentially in the final ELF binary, which could add significant bloat to programs that contain many functions.\n+\n+This flag instructs LLVM to use the same `.text` and `.gcc_except_table` section name for each function, and it is analogous to Clang's `-fno-unique-section-names` option."}]}