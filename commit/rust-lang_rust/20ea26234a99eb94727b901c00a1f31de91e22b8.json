{"sha": "20ea26234a99eb94727b901c00a1f31de91e22b8", "node_id": "C_kwDOAAsO6NoAKDIwZWEyNjIzNGE5OWViOTQ3MjdiOTAxYzAwYTFmMzFkZTkxZTIyYjg", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-01-28T14:12:34Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-28T16:48:26Z"}, "message": "Lint field accesses in `explicit_auto_deref`", "tree": {"sha": "66fd62dcd58b445791e779a4c5a6e3daee14fa36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66fd62dcd58b445791e779a4c5a6e3daee14fa36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20ea26234a99eb94727b901c00a1f31de91e22b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20ea26234a99eb94727b901c00a1f31de91e22b8", "html_url": "https://github.com/rust-lang/rust/commit/20ea26234a99eb94727b901c00a1f31de91e22b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20ea26234a99eb94727b901c00a1f31de91e22b8/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a187d6412bbcf52f2e0cdcb271b3e453520c2840", "url": "https://api.github.com/repos/rust-lang/rust/commits/a187d6412bbcf52f2e0cdcb271b3e453520c2840", "html_url": "https://github.com/rust-lang/rust/commit/a187d6412bbcf52f2e0cdcb271b3e453520c2840"}], "stats": {"total": 104, "additions": 98, "deletions": 6}, "files": [{"sha": "f1915f16339e6ae7c4e0343d9aabc34f0441da50", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/20ea26234a99eb94727b901c00a1f31de91e22b8/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ea26234a99eb94727b901c00a1f31de91e22b8/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=20ea26234a99eb94727b901c00a1f31de91e22b8", "patch": "@@ -15,7 +15,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeckResults};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::{symbol::sym, Span};\n+use rustc_span::{symbol::sym, Span, Symbol};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -181,6 +181,9 @@ enum State {\n         deref_span: Span,\n         deref_hir_id: HirId,\n     },\n+    ExplicitDerefField {\n+        name: Symbol,\n+    },\n     Reborrow {\n         deref_span: Span,\n         deref_hir_id: HirId,\n@@ -243,8 +246,18 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n             (None, kind) => {\n                 let parent = get_parent_node(cx.tcx, expr.hir_id);\n                 let expr_ty = typeck.expr_ty(expr);\n-\n                 match kind {\n+                    RefOp::Deref => {\n+                        if let Some(Node::Expr(e)) = parent\n+                            && let ExprKind::Field(_, name) = e.kind\n+                            && !ty_contains_field(typeck.expr_ty(sub_expr), name.name)\n+                        {\n+                            self.state = Some((\n+                                State::ExplicitDerefField { name: name.name },\n+                                StateData { span: expr.span, hir_id: expr.hir_id },\n+                            ));\n+                        }\n+                    }\n                     RefOp::Method(target_mut)\n                         if !is_lint_allowed(cx, EXPLICIT_DEREF_METHODS, expr.hir_id)\n                             && is_linted_explicit_deref_position(parent, expr.hir_id, expr.span) =>\n@@ -349,7 +362,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                             ));\n                         }\n                     },\n-                    _ => (),\n+                    RefOp::Method(..) => (),\n                 }\n             },\n             (\n@@ -436,6 +449,11 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n             (state @ Some((State::ExplicitDeref { .. }, _)), RefOp::Deref) => {\n                 self.state = state;\n             },\n+            (Some((State::ExplicitDerefField { name }, data)), RefOp::Deref)\n+                if !ty_contains_field(typeck.expr_ty(sub_expr), name) =>\n+            {\n+                self.state = Some((State::ExplicitDerefField { name }, data));\n+            },\n \n             (Some((state, data)), _) => report(cx, expr, state, data),\n         }\n@@ -879,6 +897,14 @@ fn param_auto_deref_stability(ty: Ty<'_>) -> AutoDerefStability {\n     }\n }\n \n+fn ty_contains_field(ty: Ty<'_>, name: Symbol) -> bool {\n+    if let ty::Adt(adt, _) = *ty.kind() {\n+        adt.is_struct() && adt.non_enum_variant().fields.iter().any(|f| f.name == name)\n+    } else {\n+        false\n+    }\n+}\n+\n #[expect(clippy::needless_pass_by_value)]\n fn report<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, state: State, data: StateData) {\n     match state {\n@@ -968,6 +994,20 @@ fn report<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, state: State, data\n                 },\n             );\n         },\n+        State::ExplicitDerefField { .. } => {\n+            span_lint_hir_and_then(\n+                cx,\n+                EXPLICIT_AUTO_DEREF,\n+                data.hir_id,\n+                data.span,\n+                \"deref which would be done by auto-deref\",\n+                |diag| {\n+                    let mut app = Applicability::MachineApplicable;\n+                    let snip = snippet_with_context(cx, expr.span, data.span.ctxt(), \"..\", &mut app).0;\n+                    diag.span_suggestion(data.span, \"try this\", snip.into_owned(), app);\n+                },\n+            );\n+        },\n         State::Borrow | State::Reborrow { .. } => (),\n     }\n }"}, {"sha": "65cecd333f1ce6c090e8082ea46de21a2d2c6988", "filename": "clippy_lints/src/matches/redundant_pattern_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20ea26234a99eb94727b901c00a1f31de91e22b8/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ea26234a99eb94727b901c00a1f31de91e22b8/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs?ref=20ea26234a99eb94727b901c00a1f31de91e22b8", "patch": "@@ -362,9 +362,9 @@ fn find_good_method_for_match<'a>(\n         .qpath_res(path_right, arms[1].pat.hir_id)\n         .opt_def_id()?;\n     let body_node_pair = if match_def_path(cx, left_id, expected_left) && match_def_path(cx, right_id, expected_right) {\n-        (&(*arms[0].body).kind, &(*arms[1].body).kind)\n+        (&arms[0].body.kind, &arms[1].body.kind)\n     } else if match_def_path(cx, right_id, expected_left) && match_def_path(cx, right_id, expected_right) {\n-        (&(*arms[1].body).kind, &(*arms[0].body).kind)\n+        (&arms[1].body.kind, &arms[0].body.kind)\n     } else {\n         return None;\n     };"}, {"sha": "91d0379b70e794a893969fea518bc96056d5c5c7", "filename": "tests/ui/explicit_auto_deref.fixed", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/20ea26234a99eb94727b901c00a1f31de91e22b8/tests%2Fui%2Fexplicit_auto_deref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/20ea26234a99eb94727b901c00a1f31de91e22b8/tests%2Fui%2Fexplicit_auto_deref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.fixed?ref=20ea26234a99eb94727b901c00a1f31de91e22b8", "patch": "@@ -164,4 +164,24 @@ fn main() {\n     let ref_s = &s;\n     let _: &String = &*ref_s; // Don't lint reborrow.\n     f_string(&*ref_s); // Don't lint reborrow.\n+\n+    struct S5 {\n+        foo: u32,\n+    }\n+    let b = Box::new(Box::new(S5 { foo: 5 }));\n+    let _ = b.foo;\n+    let _ = b.foo;\n+    let _ = b.foo;\n+\n+    struct S6 {\n+        foo: S5,\n+    }\n+    impl core::ops::Deref for S6 {\n+        type Target = S5;\n+        fn deref(&self) -> &Self::Target {\n+            &self.foo\n+        }\n+    }\n+    let s6 = S6 { foo: S5 { foo: 5 } };\n+    let _ = (*s6).foo; // Don't lint. `S6` also has a field named `foo`\n }"}, {"sha": "e57553b2a992bd7b7ca854d4b1f7e6e56083d67d", "filename": "tests/ui/explicit_auto_deref.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/20ea26234a99eb94727b901c00a1f31de91e22b8/tests%2Fui%2Fexplicit_auto_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ea26234a99eb94727b901c00a1f31de91e22b8/tests%2Fui%2Fexplicit_auto_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.rs?ref=20ea26234a99eb94727b901c00a1f31de91e22b8", "patch": "@@ -164,4 +164,24 @@ fn main() {\n     let ref_s = &s;\n     let _: &String = &*ref_s; // Don't lint reborrow.\n     f_string(&*ref_s); // Don't lint reborrow.\n+\n+    struct S5 {\n+        foo: u32,\n+    }\n+    let b = Box::new(Box::new(S5 { foo: 5 }));\n+    let _ = b.foo;\n+    let _ = (*b).foo;\n+    let _ = (**b).foo;\n+\n+    struct S6 {\n+        foo: S5,\n+    }\n+    impl core::ops::Deref for S6 {\n+        type Target = S5;\n+        fn deref(&self) -> &Self::Target {\n+            &self.foo\n+        }\n+    }\n+    let s6 = S6 { foo: S5 { foo: 5 } };\n+    let _ = (*s6).foo; // Don't lint. `S6` also has a field named `foo`\n }"}, {"sha": "54f1a2cd8868df1ba87a03aabe6353fba2188913", "filename": "tests/ui/explicit_auto_deref.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/20ea26234a99eb94727b901c00a1f31de91e22b8/tests%2Fui%2Fexplicit_auto_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20ea26234a99eb94727b901c00a1f31de91e22b8/tests%2Fui%2Fexplicit_auto_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.stderr?ref=20ea26234a99eb94727b901c00a1f31de91e22b8", "patch": "@@ -156,5 +156,17 @@ error: deref which would be done by auto-deref\n LL |     let _ = E1::S2 { s: &*s };\n    |                          ^^ help: try this: `s`\n \n-error: aborting due to 26 previous errors\n+error: deref which would be done by auto-deref\n+  --> $DIR/explicit_auto_deref.rs:173:13\n+   |\n+LL |     let _ = (*b).foo;\n+   |             ^^^^ help: try this: `b`\n+\n+error: deref which would be done by auto-deref\n+  --> $DIR/explicit_auto_deref.rs:174:13\n+   |\n+LL |     let _ = (**b).foo;\n+   |             ^^^^^ help: try this: `b`\n+\n+error: aborting due to 28 previous errors\n "}]}