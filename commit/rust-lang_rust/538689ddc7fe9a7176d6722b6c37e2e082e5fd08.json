{"sha": "538689ddc7fe9a7176d6722b6c37e2e082e5fd08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzODY4OWRkYzdmZTlhNzE3NmQ2NzIyYjZjMzdlMmUwODJlNWZkMDg=", "commit": {"author": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2015-12-02T23:06:26Z"}, "committer": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2015-12-02T23:07:59Z"}, "message": "Move ID generator to a more suited location", "tree": {"sha": "6ad4aaae096d0850d860107ffc767078d14987d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ad4aaae096d0850d860107ffc767078d14987d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/538689ddc7fe9a7176d6722b6c37e2e082e5fd08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/538689ddc7fe9a7176d6722b6c37e2e082e5fd08", "html_url": "https://github.com/rust-lang/rust/commit/538689ddc7fe9a7176d6722b6c37e2e082e5fd08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/538689ddc7fe9a7176d6722b6c37e2e082e5fd08/comments", "author": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5321f2abe7f6fadf8a3993b113ebb8ce9266fe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5321f2abe7f6fadf8a3993b113ebb8ce9266fe9", "html_url": "https://github.com/rust-lang/rust/commit/d5321f2abe7f6fadf8a3993b113ebb8ce9266fe9"}], "stats": {"total": 85, "additions": 45, "deletions": 40}, "files": [{"sha": "9496b7e2a6fbe3b3d868f30e2e7d6d4437de2c48", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 12, "deletions": 37, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/538689ddc7fe9a7176d6722b6c37e2e082e5fd08/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538689ddc7fe9a7176d6722b6c37e2e082e5fd08/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=538689ddc7fe9a7176d6722b6c37e2e082e5fd08", "patch": "@@ -14,7 +14,7 @@\n //! (bundled into the rust runtime). This module self-contains the C bindings\n //! and necessary legwork to render markdown, and exposes all of the\n //! functionality through a unit-struct, `Markdown`, which has an implementation\n-//! of `fmt::String`. Example usage:\n+//! of `fmt::Display`. Example usage:\n //!\n //! ```rust,ignore\n //! use rustdoc::html::markdown::Markdown;\n@@ -29,19 +29,19 @@\n use libc;\n use std::ascii::AsciiExt;\n use std::cell::RefCell;\n-use std::collections::HashMap;\n use std::default::Default;\n use std::ffi::CString;\n use std::fmt;\n use std::slice;\n use std::str;\n \n+use html::render::{with_unique_id, reset_ids};\n use html::toc::TocBuilder;\n use html::highlight;\n use html::escape::Escape;\n use test;\n \n-/// A unit struct which has the `fmt::String` trait implemented. When\n+/// A unit struct which has the `fmt::Display` trait implemented. When\n /// formatted, this struct will emit the HTML corresponding to the rendered\n /// version of the contained markdown string.\n pub struct Markdown<'a>(pub &'a str);\n@@ -210,10 +210,6 @@ fn collapse_whitespace(s: &str) -> String {\n     s.split_whitespace().collect::<Vec<_>>().join(\" \")\n }\n \n-thread_local!(static USED_HEADER_MAP: RefCell<HashMap<String, usize>> = {\n-    RefCell::new(HashMap::new())\n-});\n-\n thread_local!(pub static PLAYGROUND_KRATE: RefCell<Option<Option<String>>> = {\n     RefCell::new(None)\n });\n@@ -311,31 +307,22 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n         let opaque = unsafe { (*data).opaque as *mut hoedown_html_renderer_state };\n         let opaque = unsafe { &mut *((*opaque).opaque as *mut MyOpaque) };\n \n-        // Make sure our hyphenated ID is unique for this page\n-        let id = USED_HEADER_MAP.with(|map| {\n-            let id = match map.borrow_mut().get_mut(&id) {\n-                None => id,\n-                Some(a) => { *a += 1; format!(\"{}-{}\", id, *a - 1) }\n-            };\n-            map.borrow_mut().insert(id.clone(), 1);\n-            id\n-        });\n-\n+        let text = with_unique_id(id, |id| {\n+            let sec = opaque.toc_builder.as_mut().map_or(\"\".to_owned(), |builder| {\n+                format!(\"{} \", builder.push(level as u32, s.clone(), id.to_owned()))\n+            });\n \n-        let sec = opaque.toc_builder.as_mut().map_or(\"\".to_owned(), |builder| {\n-            format!(\"{} \", builder.push(level as u32, s.clone(), id.clone()))\n+            // Render the HTML\n+            format!(\"<h{lvl} id='{id}' class='section-header'>\\\n+                    <a href='#{id}'>{sec}{}</a></h{lvl}>\",\n+                    s, lvl = level, id = id, sec = sec)\n         });\n \n-        // Render the HTML\n-        let text = format!(\"<h{lvl} id='{id}' class='section-header'>\\\n-                           <a href='#{id}'>{sec}{}</a></h{lvl}>\",\n-                           s, lvl = level, id = id, sec = sec);\n-\n         let text = CString::new(text).unwrap();\n         unsafe { hoedown_buffer_puts(ob, text.as_ptr()) }\n     }\n \n-    reset_headers();\n+    reset_ids();\n \n     extern fn codespan(\n         ob: *mut hoedown_buffer,\n@@ -500,18 +487,6 @@ impl LangString {\n     }\n }\n \n-/// By default this markdown renderer generates anchors for each header in the\n-/// rendered document. The anchor name is the contents of the header separated\n-/// by hyphens, and a thread-local map is used to disambiguate among duplicate\n-/// headers (numbers are appended).\n-///\n-/// This method will reset the local table for these headers. This is typically\n-/// used at the beginning of rendering an entire HTML page to reset from the\n-/// previous state (if any).\n-pub fn reset_headers() {\n-    USED_HEADER_MAP.with(|s| s.borrow_mut().clear());\n-}\n-\n impl<'a> fmt::Display for Markdown<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let Markdown(md) = *self;"}, {"sha": "c4fb9d5d9e7d5337aa7ed6e9ad2bb568a2a8de43", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/538689ddc7fe9a7176d6722b6c37e2e082e5fd08/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538689ddc7fe9a7176d6722b6c37e2e082e5fd08/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=538689ddc7fe9a7176d6722b6c37e2e082e5fd08", "patch": "@@ -342,6 +342,35 @@ impl fmt::Display for IndexItemFunctionType {\n thread_local!(static CACHE_KEY: RefCell<Arc<Cache>> = Default::default());\n thread_local!(pub static CURRENT_LOCATION_KEY: RefCell<Vec<String>> =\n                     RefCell::new(Vec::new()));\n+thread_local!(static USED_ID_MAP: RefCell<HashMap<String, usize>> =\n+                    RefCell::new(HashMap::new()));\n+\n+/// This method resets the local table of used ID attributes. This is typically\n+/// used at the beginning of rendering an entire HTML page to reset from the\n+/// previous state (if any).\n+pub fn reset_ids() {\n+    USED_ID_MAP.with(|s| s.borrow_mut().clear());\n+}\n+\n+pub fn with_unique_id<T, F: FnOnce(&str) -> T>(candidate: String, f: F) -> T {\n+    USED_ID_MAP.with(|map| {\n+        let (id, ret) = match map.borrow_mut().get_mut(&candidate) {\n+            None => {\n+                let ret = f(&candidate);\n+                (candidate, ret)\n+            },\n+            Some(a) => {\n+                let id = format!(\"{}-{}\", candidate, *a);\n+                let ret = f(&id);\n+                *a += 1;\n+                (id, ret)\n+            }\n+        };\n+\n+        map.borrow_mut().insert(id, 1);\n+        ret\n+    })\n+}\n \n /// Generates the documentation for `crate` into the directory `dst`\n pub fn run(mut krate: clean::Crate,\n@@ -1274,7 +1303,7 @@ impl Context {\n                 keywords: &keywords,\n             };\n \n-            markdown::reset_headers();\n+            reset_ids();\n \n             // We have a huge number of calls to write, so try to alleviate some\n             // of the pain by using a buffered writer instead of invoking the"}, {"sha": "ac64fd3bec0e75d81c2d248378928a53e9eb5072", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/538689ddc7fe9a7176d6722b6c37e2e082e5fd08/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538689ddc7fe9a7176d6722b6c37e2e082e5fd08/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=538689ddc7fe9a7176d6722b6c37e2e082e5fd08", "patch": "@@ -21,9 +21,10 @@ use rustc::session::search_paths::SearchPaths;\n \n use externalfiles::ExternalHtml;\n \n+use html::render::reset_ids;\n use html::escape::Escape;\n use html::markdown;\n-use html::markdown::{Markdown, MarkdownWithToc, find_testable_code, reset_headers};\n+use html::markdown::{Markdown, MarkdownWithToc, find_testable_code};\n use test::{TestOptions, Collector};\n \n /// Separate any lines at the start of the file that begin with `%`.\n@@ -82,7 +83,7 @@ pub fn render(input: &str, mut output: PathBuf, matches: &getopts::Matches,\n     }\n     let title = metadata[0];\n \n-    reset_headers();\n+    reset_ids();\n \n     let rendered = if include_toc {\n         format!(\"{}\", MarkdownWithToc(text))"}]}