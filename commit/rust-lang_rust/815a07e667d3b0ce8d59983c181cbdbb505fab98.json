{"sha": "815a07e667d3b0ce8d59983c181cbdbb505fab98", "node_id": "C_kwDOAAsO6NoAKDgxNWEwN2U2NjdkM2IwY2U4ZDU5OTgzYzE4MWNiZGJiNTA1ZmFiOTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T05:11:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T05:11:52Z"}, "message": "Auto merge of #10725 - y21:issue9914, r=Jarcho\n\ndon't remove `dbg!` in arbitrary expressions\n\nFixes #9914\n\nThe `dbg_macro` lint replaces empty `dbg!` invocations with the empty string in its suggestion, which is not always valid code in certain contexts (e.g. `let _ = dbg!();` becomes `let _ = ;`). This PR changes it to `()`, which should always be valid where `dbg!()` is valid (`dbg!()` with no arguments evaluates to `()`).\n\nIt also special-cases \"standalone\" `dbg!();` expression statements, where it will suggest removing the whole statement entirely like it did before.\n\nchangelog: [`dbg_macro`]: don't remove `dbg!()` in arbitrary expressions as it sometimes results in syntax errors", "tree": {"sha": "c70d6191e85d11b12a3a0e831ed6a5c41ab2ea12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c70d6191e85d11b12a3a0e831ed6a5c41ab2ea12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/815a07e667d3b0ce8d59983c181cbdbb505fab98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/815a07e667d3b0ce8d59983c181cbdbb505fab98", "html_url": "https://github.com/rust-lang/rust/commit/815a07e667d3b0ce8d59983c181cbdbb505fab98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/815a07e667d3b0ce8d59983c181cbdbb505fab98/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf182b9f4327194e9636a2ec8ddb1d246815a162", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf182b9f4327194e9636a2ec8ddb1d246815a162", "html_url": "https://github.com/rust-lang/rust/commit/cf182b9f4327194e9636a2ec8ddb1d246815a162"}, {"sha": "f0be0ee1aa5314f6c7bb6949a8afe19e84ead35a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0be0ee1aa5314f6c7bb6949a8afe19e84ead35a", "html_url": "https://github.com/rust-lang/rust/commit/f0be0ee1aa5314f6c7bb6949a8afe19e84ead35a"}], "stats": {"total": 166, "additions": 143, "deletions": 23}, "files": [{"sha": "ea17e7a6071046349a56dbc8a4dabf253f2da95e", "filename": "clippy_lints/src/dbg_macro.rs", "status": "modified", "additions": 47, "deletions": 10, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/815a07e667d3b0ce8d59983c181cbdbb505fab98/clippy_lints%2Fsrc%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/815a07e667d3b0ce8d59983c181cbdbb505fab98/clippy_lints%2Fsrc%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdbg_macro.rs?ref=815a07e667d3b0ce8d59983c181cbdbb505fab98", "patch": "@@ -3,10 +3,10 @@ use clippy_utils::macros::root_macro_call_first_node;\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::{is_in_cfg_test, is_in_test_function};\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_hir::{Expr, ExprKind, Node};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::sym;\n+use rustc_span::{sym, BytePos, Pos, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -31,6 +31,31 @@ declare_clippy_lint! {\n     \"`dbg!` macro is intended as a debugging tool\"\n }\n \n+/// Gets the span of the statement up to the next semicolon, if and only if the next\n+/// non-whitespace character actually is a semicolon.\n+/// E.g.\n+/// ```rust,ignore\n+/// \n+///    dbg!();\n+///    ^^^^^^^  this span is returned\n+///\n+///   foo!(dbg!());\n+///             no span is returned\n+/// ```\n+fn span_including_semi(cx: &LateContext<'_>, span: Span) -> Option<Span> {\n+    let sm = cx.sess().source_map();\n+    let sf = sm.lookup_source_file(span.hi());\n+    let src = sf.src.as_ref()?.get(span.hi().to_usize()..)?;\n+    let first_non_whitespace = src.find(|c: char| !c.is_whitespace())?;\n+\n+    if src.as_bytes()[first_non_whitespace] == b';' {\n+        let hi = span.hi() + BytePos::from_usize(first_non_whitespace + 1);\n+        Some(span.with_hi(hi))\n+    } else {\n+        None\n+    }\n+}\n+\n #[derive(Copy, Clone)]\n pub struct DbgMacro {\n     allow_dbg_in_tests: bool,\n@@ -55,13 +80,25 @@ impl LateLintPass<'_> for DbgMacro {\n                 return;\n             }\n             let mut applicability = Applicability::MachineApplicable;\n-            let suggestion = match expr.peel_drop_temps().kind {\n+\n+            let (sugg_span, suggestion) = match expr.peel_drop_temps().kind {\n                 // dbg!()\n-                ExprKind::Block(_, _) => String::new(),\n-                // dbg!(1)\n-                ExprKind::Match(val, ..) => {\n-                    snippet_with_applicability(cx, val.span.source_callsite(), \"..\", &mut applicability).to_string()\n+                ExprKind::Block(..) => {\n+                    // If the `dbg!` macro is a \"free\" statement and not contained within other expressions,\n+                    // remove the whole statement.\n+                    if let Some(Node::Stmt(stmt)) = cx.tcx.hir().find_parent(expr.hir_id)\n+                        && let Some(span) = span_including_semi(cx, stmt.span.source_callsite())\n+                    {\n+                        (span, String::new())\n+                    } else {\n+                        (macro_call.span, String::from(\"()\"))\n+                    }\n                 },\n+                // dbg!(1)\n+                ExprKind::Match(val, ..) => (\n+                    macro_call.span,\n+                    snippet_with_applicability(cx, val.span.source_callsite(), \"..\", &mut applicability).to_string(),\n+                ),\n                 // dbg!(2, 3)\n                 ExprKind::Tup(\n                     [\n@@ -82,15 +119,15 @@ impl LateLintPass<'_> for DbgMacro {\n                         \"..\",\n                         &mut applicability,\n                     );\n-                    format!(\"({snippet})\")\n+                    (macro_call.span, format!(\"({snippet})\"))\n                 },\n                 _ => return,\n             };\n \n             span_lint_and_sugg(\n                 cx,\n                 DBG_MACRO,\n-                macro_call.span,\n+                sugg_span,\n                 \"the `dbg!` macro is intended as a debugging tool\",\n                 \"remove the invocation before committing it to a version control system\",\n                 suggestion,"}, {"sha": "10788d4048164576db1953db18cc8fb1c26ab5b4", "filename": "tests/ui/dbg_macro.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/815a07e667d3b0ce8d59983c181cbdbb505fab98/tests%2Fui%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/815a07e667d3b0ce8d59983c181cbdbb505fab98/tests%2Fui%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdbg_macro.rs?ref=815a07e667d3b0ce8d59983c181cbdbb505fab98", "patch": "@@ -4,6 +4,7 @@\n fn foo(n: u32) -> u32 {\n     if let Some(n) = dbg!(n.checked_sub(4)) { n } else { n }\n }\n+fn bar(_: ()) {}\n \n fn factorial(n: u32) -> u32 {\n     if dbg!(n <= 1) {\n@@ -21,6 +22,32 @@ fn main() {\n     dbg!(1, 2, 3, 4, 5);\n }\n \n+fn issue9914() {\n+    macro_rules! foo {\n+        ($x:expr) => {\n+            $x;\n+        };\n+    }\n+    macro_rules! foo2 {\n+        ($x:expr) => {\n+            $x;\n+        };\n+    }\n+    macro_rules! expand_to_dbg {\n+        () => {\n+            dbg!();\n+        };\n+    }\n+\n+    dbg!();\n+    #[allow(clippy::let_unit_value)]\n+    let _ = dbg!();\n+    bar(dbg!());\n+    foo!(dbg!());\n+    foo2!(foo!(dbg!()));\n+    expand_to_dbg!();\n+}\n+\n mod issue7274 {\n     trait Thing<'b> {\n         fn foo(&self);"}, {"sha": "530e766331777dd24c074c129ec962e8289953ba", "filename": "tests/ui/dbg_macro.stderr", "status": "modified", "additions": 69, "deletions": 13, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/815a07e667d3b0ce8d59983c181cbdbb505fab98/tests%2Fui%2Fdbg_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/815a07e667d3b0ce8d59983c181cbdbb505fab98/tests%2Fui%2Fdbg_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdbg_macro.stderr?ref=815a07e667d3b0ce8d59983c181cbdbb505fab98", "patch": "@@ -11,7 +11,7 @@ LL |     if let Some(n) = n.checked_sub(4) { n } else { n }\n    |                      ~~~~~~~~~~~~~~~~\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:9:8\n+  --> $DIR/dbg_macro.rs:10:8\n    |\n LL |     if dbg!(n <= 1) {\n    |        ^^^^^^^^^^^^\n@@ -22,7 +22,7 @@ LL |     if n <= 1 {\n    |        ~~~~~~\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:10:9\n+  --> $DIR/dbg_macro.rs:11:9\n    |\n LL |         dbg!(1)\n    |         ^^^^^^^\n@@ -33,7 +33,7 @@ LL |         1\n    |\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:12:9\n+  --> $DIR/dbg_macro.rs:13:9\n    |\n LL |         dbg!(n * factorial(n - 1))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -44,7 +44,7 @@ LL |         n * factorial(n - 1)\n    |\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:17:5\n+  --> $DIR/dbg_macro.rs:18:5\n    |\n LL |     dbg!(42);\n    |     ^^^^^^^^\n@@ -55,7 +55,7 @@ LL |     42;\n    |     ~~\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:18:5\n+  --> $DIR/dbg_macro.rs:19:5\n    |\n LL |     dbg!(dbg!(dbg!(42)));\n    |     ^^^^^^^^^^^^^^^^^^^^\n@@ -66,7 +66,7 @@ LL |     dbg!(dbg!(42));\n    |     ~~~~~~~~~~~~~~\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:19:14\n+  --> $DIR/dbg_macro.rs:20:14\n    |\n LL |     foo(3) + dbg!(factorial(4));\n    |              ^^^^^^^^^^^^^^^^^^\n@@ -77,7 +77,7 @@ LL |     foo(3) + factorial(4);\n    |              ~~~~~~~~~~~~\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:20:5\n+  --> $DIR/dbg_macro.rs:21:5\n    |\n LL |     dbg!(1, 2, dbg!(3, 4));\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n@@ -88,7 +88,7 @@ LL |     (1, 2, dbg!(3, 4));\n    |     ~~~~~~~~~~~~~~~~~~\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:21:5\n+  --> $DIR/dbg_macro.rs:22:5\n    |\n LL |     dbg!(1, 2, 3, 4, 5);\n    |     ^^^^^^^^^^^^^^^^^^^\n@@ -99,7 +99,63 @@ LL |     (1, 2, 3, 4, 5);\n    |     ~~~~~~~~~~~~~~~\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:41:9\n+  --> $DIR/dbg_macro.rs:42:5\n+   |\n+LL |     dbg!();\n+   |     ^^^^^^^\n+   |\n+help: remove the invocation before committing it to a version control system\n+   |\n+LL -     dbg!();\n+LL +     \n+   |\n+\n+error: the `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:44:13\n+   |\n+LL |     let _ = dbg!();\n+   |             ^^^^^^\n+   |\n+help: remove the invocation before committing it to a version control system\n+   |\n+LL |     let _ = ();\n+   |             ~~\n+\n+error: the `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:45:9\n+   |\n+LL |     bar(dbg!());\n+   |         ^^^^^^\n+   |\n+help: remove the invocation before committing it to a version control system\n+   |\n+LL |     bar(());\n+   |         ~~\n+\n+error: the `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:46:10\n+   |\n+LL |     foo!(dbg!());\n+   |          ^^^^^^\n+   |\n+help: remove the invocation before committing it to a version control system\n+   |\n+LL |     foo!(());\n+   |          ~~\n+\n+error: the `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:47:16\n+   |\n+LL |     foo2!(foo!(dbg!()));\n+   |                ^^^^^^\n+   |\n+help: remove the invocation before committing it to a version control system\n+   |\n+LL |     foo2!(foo!(()));\n+   |                ~~\n+\n+error: the `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:68:9\n    |\n LL |         dbg!(2);\n    |         ^^^^^^^\n@@ -110,7 +166,7 @@ LL |         2;\n    |         ~\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:47:5\n+  --> $DIR/dbg_macro.rs:74:5\n    |\n LL |     dbg!(1);\n    |     ^^^^^^^\n@@ -121,7 +177,7 @@ LL |     1;\n    |     ~\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:52:5\n+  --> $DIR/dbg_macro.rs:79:5\n    |\n LL |     dbg!(1);\n    |     ^^^^^^^\n@@ -132,7 +188,7 @@ LL |     1;\n    |     ~\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:58:9\n+  --> $DIR/dbg_macro.rs:85:9\n    |\n LL |         dbg!(1);\n    |         ^^^^^^^\n@@ -142,5 +198,5 @@ help: remove the invocation before committing it to a version control system\n LL |         1;\n    |         ~\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 18 previous errors\n "}]}