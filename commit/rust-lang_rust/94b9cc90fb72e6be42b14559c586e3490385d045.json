{"sha": "94b9cc90fb72e6be42b14559c586e3490385d045", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YjljYzkwZmI3MmU2YmU0MmIxNDU1OWM1ODZlMzQ5MDM4NWQwNDU=", "commit": {"author": {"name": "Johannes L\u00f6thberg", "email": "johannes@kyriasis.com", "date": "2017-07-14T20:01:37Z"}, "committer": {"name": "Johannes L\u00f6thberg", "email": "johannes@kyriasis.com", "date": "2017-07-14T20:01:37Z"}, "message": "Support both partial and full RELRO\n\nSigned-off-by: Johannes L\u00f6thberg <johannes@kyriasis.com>", "tree": {"sha": "c5da10b2313795f5e8cb2d0ffff32718eb0f6c47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5da10b2313795f5e8cb2d0ffff32718eb0f6c47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94b9cc90fb72e6be42b14559c586e3490385d045", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94b9cc90fb72e6be42b14559c586e3490385d045", "html_url": "https://github.com/rust-lang/rust/commit/94b9cc90fb72e6be42b14559c586e3490385d045", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94b9cc90fb72e6be42b14559c586e3490385d045/comments", "author": {"login": "kyrias", "id": 2285387, "node_id": "MDQ6VXNlcjIyODUzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/2285387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyrias", "html_url": "https://github.com/kyrias", "followers_url": "https://api.github.com/users/kyrias/followers", "following_url": "https://api.github.com/users/kyrias/following{/other_user}", "gists_url": "https://api.github.com/users/kyrias/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyrias/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyrias/subscriptions", "organizations_url": "https://api.github.com/users/kyrias/orgs", "repos_url": "https://api.github.com/users/kyrias/repos", "events_url": "https://api.github.com/users/kyrias/events{/privacy}", "received_events_url": "https://api.github.com/users/kyrias/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kyrias", "id": 2285387, "node_id": "MDQ6VXNlcjIyODUzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/2285387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyrias", "html_url": "https://github.com/kyrias", "followers_url": "https://api.github.com/users/kyrias/followers", "following_url": "https://api.github.com/users/kyrias/following{/other_user}", "gists_url": "https://api.github.com/users/kyrias/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyrias/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyrias/subscriptions", "organizations_url": "https://api.github.com/users/kyrias/orgs", "repos_url": "https://api.github.com/users/kyrias/repos", "events_url": "https://api.github.com/users/kyrias/events{/privacy}", "received_events_url": "https://api.github.com/users/kyrias/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "230668765d5a1c435cfd6d6a101aaee0f67de2dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/230668765d5a1c435cfd6d6a101aaee0f67de2dc", "html_url": "https://github.com/rust-lang/rust/commit/230668765d5a1c435cfd6d6a101aaee0f67de2dc"}], "stats": {"total": 138, "additions": 110, "deletions": 28}, "files": [{"sha": "83734c926ee17db23c0ecddade4188a0fd183562", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/94b9cc90fb72e6be42b14559c586e3490385d045/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b9cc90fb72e6be42b14559c586e3490385d045/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=94b9cc90fb72e6be42b14559c586e3490385d045", "patch": "@@ -19,7 +19,7 @@ pub use self::DebugInfoLevel::*;\n use session::{early_error, early_warn, Session};\n use session::search_paths::SearchPaths;\n \n-use rustc_back::{LinkerFlavor, PanicStrategy};\n+use rustc_back::{LinkerFlavor, PanicStrategy, RelroLevel};\n use rustc_back::target::Target;\n use lint;\n use middle::cstore;\n@@ -654,6 +654,8 @@ macro_rules! options {\n             Some(\"a number\");\n         pub const parse_panic_strategy: Option<&'static str> =\n             Some(\"either `panic` or `abort`\");\n+        pub const parse_relro_level: Option<&'static str> =\n+            Some(\"one of: `full`, `partial`, or `off`\");\n         pub const parse_sanitizer: Option<&'static str> =\n             Some(\"one of: `address`, `leak`, `memory` or `thread`\");\n         pub const parse_linker_flavor: Option<&'static str> =\n@@ -665,7 +667,7 @@ macro_rules! options {\n     #[allow(dead_code)]\n     mod $mod_set {\n         use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer};\n-        use rustc_back::{LinkerFlavor, PanicStrategy};\n+        use rustc_back::{LinkerFlavor, PanicStrategy, RelroLevel};\n \n         $(\n             pub fn $opt(cg: &mut $struct_name, v: Option<&str>) -> bool {\n@@ -786,6 +788,16 @@ macro_rules! options {\n             true\n         }\n \n+        fn parse_relro_level(slot: &mut Option<RelroLevel>, v: Option<&str>) -> bool {\n+            match v {\n+                Some(\"full\") => *slot = Some(RelroLevel::Full),\n+                Some(\"partial\") => *slot = Some(RelroLevel::Partial),\n+                Some(\"off\") => *slot = Some(RelroLevel::Off),\n+                _ => return false\n+            }\n+            true\n+        }\n+\n         fn parse_sanitizer(slote: &mut Option<Sanitizer>, v: Option<&str>) -> bool {\n             match v {\n                 Some(\"address\") => *slote = Some(Sanitizer::Address),\n@@ -869,6 +881,8 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"disable the use of the redzone\"),\n     relocation_model: Option<String> = (None, parse_opt_string, [TRACKED],\n          \"choose the relocation model to use (rustc --print relocation-models for details)\"),\n+    relro_level: Option<RelroLevel> = (None, parse_relro_level, [TRACKED],\n+        \"choose which RELRO level to use\"),\n     code_model: Option<String> = (None, parse_opt_string, [TRACKED],\n          \"choose the code model to use (rustc --print code-models for details)\"),\n     metadata: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n@@ -1776,7 +1790,7 @@ mod dep_tracking {\n     use super::{Passes, CrateType, OptLevel, DebugInfoLevel,\n                 OutputTypes, Externs, ErrorOutputType, Sanitizer};\n     use syntax::feature_gate::UnstableFeatures;\n-    use rustc_back::PanicStrategy;\n+    use rustc_back::{PanicStrategy, RelroLevel};\n \n     pub trait DepTrackingHash {\n         fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType);\n@@ -1818,11 +1832,13 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Option<String>);\n     impl_dep_tracking_hash_via_hash!(Option<(String, u64)>);\n     impl_dep_tracking_hash_via_hash!(Option<PanicStrategy>);\n+    impl_dep_tracking_hash_via_hash!(Option<RelroLevel>);\n     impl_dep_tracking_hash_via_hash!(Option<lint::Level>);\n     impl_dep_tracking_hash_via_hash!(Option<PathBuf>);\n     impl_dep_tracking_hash_via_hash!(Option<cstore::NativeLibraryKind>);\n     impl_dep_tracking_hash_via_hash!(CrateType);\n     impl_dep_tracking_hash_via_hash!(PanicStrategy);\n+    impl_dep_tracking_hash_via_hash!(RelroLevel);\n     impl_dep_tracking_hash_via_hash!(Passes);\n     impl_dep_tracking_hash_via_hash!(OptLevel);\n     impl_dep_tracking_hash_via_hash!(DebugInfoLevel);\n@@ -1904,7 +1920,7 @@ mod tests {\n     use std::path::PathBuf;\n     use std::rc::Rc;\n     use super::{OutputType, OutputTypes, Externs};\n-    use rustc_back::PanicStrategy;\n+    use rustc_back::{PanicStrategy, RelroLevel};\n     use syntax::symbol::Symbol;\n \n     fn optgroups() -> getopts::Options {\n@@ -2434,6 +2450,10 @@ mod tests {\n         opts.cg.relocation_model = Some(String::from(\"relocation model\"));\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n+        opts = reference.clone();\n+        opts.cg.relro_level = Some(RelroLevel::Full);\n+        assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n         opts = reference.clone();\n         opts.cg.code_model = Some(String::from(\"code model\"));\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());"}, {"sha": "7ec9b77af4bfc9b96b3a51779d18e645d54733a3", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/94b9cc90fb72e6be42b14559c586e3490385d045/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b9cc90fb72e6be42b14559c586e3490385d045/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=94b9cc90fb72e6be42b14559c586e3490385d045", "patch": "@@ -114,3 +114,30 @@ impl ToJson for PanicStrategy {\n         }\n     }\n }\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n+pub enum RelroLevel {\n+    Full,\n+    Partial,\n+    Off,\n+}\n+\n+impl RelroLevel {\n+    pub fn desc(&self) -> &str {\n+        match *self {\n+            RelroLevel::Full => \"full\",\n+            RelroLevel::Partial => \"partial\",\n+            RelroLevel::Off => \"off\",\n+        }\n+    }\n+}\n+\n+impl ToJson for RelroLevel {\n+    fn to_json(&self) -> Json {\n+        match *self {\n+            RelroLevel::Full => \"full\".to_json(),\n+            RelroLevel::Partial => \"partial\".to_json(),\n+            RelroLevel::Off => \"off\".to_json(),\n+        }\n+    }\n+}"}, {"sha": "45ceb2d5a6046f45b428ca992fab9df58daeb880", "filename": "src/librustc_back/target/bitrig_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94b9cc90fb72e6be42b14559c586e3490385d045/src%2Flibrustc_back%2Ftarget%2Fbitrig_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b9cc90fb72e6be42b14559c586e3490385d045/src%2Flibrustc_back%2Ftarget%2Fbitrig_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fbitrig_base.rs?ref=94b9cc90fb72e6be42b14559c586e3490385d045", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::TargetOptions;\n+use target::{TargetOptions, RelroLevel};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n@@ -19,7 +19,7 @@ pub fn opts() -> TargetOptions {\n         linker_is_gnu: true,\n         has_rpath: true,\n         position_independent_executables: true,\n-        full_relro: true,\n+        relro_level: RelroLevel::Full,\n \n         .. Default::default()\n     }"}, {"sha": "21dca99aa500504c8924fae1ee5735ca895a7355", "filename": "src/librustc_back/target/dragonfly_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94b9cc90fb72e6be42b14559c586e3490385d045/src%2Flibrustc_back%2Ftarget%2Fdragonfly_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b9cc90fb72e6be42b14559c586e3490385d045/src%2Flibrustc_back%2Ftarget%2Fdragonfly_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fdragonfly_base.rs?ref=94b9cc90fb72e6be42b14559c586e3490385d045", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use LinkerFlavor;\n-use target::{LinkArgs, TargetOptions};\n+use target::{LinkArgs, TargetOptions, RelroLevel};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n@@ -33,7 +33,7 @@ pub fn opts() -> TargetOptions {\n         has_rpath: true,\n         pre_link_args: args,\n         position_independent_executables: true,\n-        full_relro: true,\n+        relro_level: RelroLevel::Full,\n         exe_allocation_crate: super::maybe_jemalloc(),\n         .. Default::default()\n     }"}, {"sha": "21dca99aa500504c8924fae1ee5735ca895a7355", "filename": "src/librustc_back/target/freebsd_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94b9cc90fb72e6be42b14559c586e3490385d045/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b9cc90fb72e6be42b14559c586e3490385d045/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs?ref=94b9cc90fb72e6be42b14559c586e3490385d045", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use LinkerFlavor;\n-use target::{LinkArgs, TargetOptions};\n+use target::{LinkArgs, TargetOptions, RelroLevel};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n@@ -33,7 +33,7 @@ pub fn opts() -> TargetOptions {\n         has_rpath: true,\n         pre_link_args: args,\n         position_independent_executables: true,\n-        full_relro: true,\n+        relro_level: RelroLevel::Full,\n         exe_allocation_crate: super::maybe_jemalloc(),\n         .. Default::default()\n     }"}, {"sha": "21410dcd4126448967a4aa3e40434ce3aad81d46", "filename": "src/librustc_back/target/haiku_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94b9cc90fb72e6be42b14559c586e3490385d045/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b9cc90fb72e6be42b14559c586e3490385d045/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs?ref=94b9cc90fb72e6be42b14559c586e3490385d045", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::TargetOptions;\n+use target::{TargetOptions, RelroLevel};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n@@ -18,7 +18,7 @@ pub fn opts() -> TargetOptions {\n         executables: true,\n         has_rpath: false,\n         target_family: Some(\"unix\".to_string()),\n-        full_relro: true,\n+        relro_level: RelroLevel::Full,\n         linker_is_gnu: true,\n         no_integrated_as: true,\n         .. Default::default()"}, {"sha": "52f700ac7519f51f134d552f27cb640abea45b62", "filename": "src/librustc_back/target/linux_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94b9cc90fb72e6be42b14559c586e3490385d045/src%2Flibrustc_back%2Ftarget%2Flinux_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b9cc90fb72e6be42b14559c586e3490385d045/src%2Flibrustc_back%2Ftarget%2Flinux_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Flinux_base.rs?ref=94b9cc90fb72e6be42b14559c586e3490385d045", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use LinkerFlavor;\n-use target::{LinkArgs, TargetOptions};\n+use target::{LinkArgs, TargetOptions, RelroLevel};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n@@ -36,7 +36,7 @@ pub fn opts() -> TargetOptions {\n         has_rpath: true,\n         pre_link_args: args,\n         position_independent_executables: true,\n-        full_relro: true,\n+        relro_level: RelroLevel::Full,\n         exe_allocation_crate: super::maybe_jemalloc(),\n         has_elf_tls: true,\n         .. Default::default()"}, {"sha": "a07f5d154a18414759698cc79de47f391be0f136", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/94b9cc90fb72e6be42b14559c586e3490385d045/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b9cc90fb72e6be42b14559c586e3490385d045/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=94b9cc90fb72e6be42b14559c586e3490385d045", "patch": "@@ -50,7 +50,7 @@ use std::default::Default;\n use std::io::prelude::*;\n use syntax::abi::{Abi, lookup as lookup_abi};\n \n-use {LinkerFlavor, PanicStrategy};\n+use {LinkerFlavor, PanicStrategy, RelroLevel};\n \n mod android_base;\n mod apple_base;\n@@ -367,9 +367,10 @@ pub struct TargetOptions {\n     /// the functions in the executable are not randomized and can be used\n     /// during an exploit of a vulnerability in any code.\n     pub position_independent_executables: bool,\n-    /// Full RELRO makes the dynamic linker resolve all symbols at startup and marks the GOT\n-    /// read-only before starting the program, preventing overwriting the GOT.\n-    pub full_relro: bool,\n+    /// Either partial, full, or off. Full RELRO makes the dynamic linker\n+    /// resolve all symbols at startup and marks the GOT read-only before\n+    /// starting the program, preventing overwriting the GOT.\n+    pub relro_level: RelroLevel,\n     /// Format that archives should be emitted in. This affects whether we use\n     /// LLVM to assemble an archive or fall back to the system linker, and\n     /// currently only \"gnu\" is used to fall into LLVM. Unknown strings cause\n@@ -457,7 +458,7 @@ impl Default for TargetOptions {\n             has_rpath: false,\n             no_default_libraries: true,\n             position_independent_executables: false,\n-            full_relro: false,\n+            relro_level: RelroLevel::Off,\n             pre_link_objects_exe: Vec::new(),\n             pre_link_objects_dll: Vec::new(),\n             post_link_objects: Vec::new(),\n@@ -584,6 +585,20 @@ impl Target {\n                 Some(Ok(()))\n             })).unwrap_or(Ok(()))\n             } );\n+            ($key_name:ident, RelroLevel) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n+                    match s {\n+                        \"full\" => base.options.$key_name = RelroLevel::Full,\n+                        \"partial\" => base.options.$key_name = RelroLevel::Partial,\n+                        \"off\" => base.options.$key_name = RelroLevel::Off,\n+                        _ => return Some(Err(format!(\"'{}' is not a valid value for \\\n+                                                      relro-level. Use 'full', 'partial, or 'off'.\",\n+                                                      s))),\n+                    }\n+                    Some(Ok(()))\n+                })).unwrap_or(Ok(()))\n+            } );\n             ($key_name:ident, list) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).map(|o| o.as_array()\n@@ -687,7 +702,7 @@ impl Target {\n         key!(has_rpath, bool);\n         key!(no_default_libraries, bool);\n         key!(position_independent_executables, bool);\n-        key!(full_relro, bool);\n+        try!(key!(relro_level, RelroLevel));\n         key!(archive_format);\n         key!(allow_asm, bool);\n         key!(custom_unwind_resume, bool);\n@@ -875,7 +890,7 @@ impl ToJson for Target {\n         target_option_val!(has_rpath);\n         target_option_val!(no_default_libraries);\n         target_option_val!(position_independent_executables);\n-        target_option_val!(full_relro);\n+        target_option_val!(relro_level);\n         target_option_val!(archive_format);\n         target_option_val!(allow_asm);\n         target_option_val!(custom_unwind_resume);"}, {"sha": "1cb311371938e54bf332f8f99597e876ce04c120", "filename": "src/librustc_back/target/netbsd_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94b9cc90fb72e6be42b14559c586e3490385d045/src%2Flibrustc_back%2Ftarget%2Fnetbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b9cc90fb72e6be42b14559c586e3490385d045/src%2Flibrustc_back%2Ftarget%2Fnetbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fnetbsd_base.rs?ref=94b9cc90fb72e6be42b14559c586e3490385d045", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use LinkerFlavor;\n-use target::{LinkArgs, TargetOptions};\n+use target::{LinkArgs, TargetOptions, RelroLevel};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n@@ -33,7 +33,7 @@ pub fn opts() -> TargetOptions {\n         has_rpath: true,\n         pre_link_args: args,\n         position_independent_executables: true,\n-        full_relro: true,\n+        relro_level: RelroLevel::Full,\n         .. Default::default()\n     }\n }"}, {"sha": "a5f8e7ae5f91bf2bd00f7f8be8d7ef99600f2a72", "filename": "src/librustc_back/target/openbsd_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94b9cc90fb72e6be42b14559c586e3490385d045/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b9cc90fb72e6be42b14559c586e3490385d045/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs?ref=94b9cc90fb72e6be42b14559c586e3490385d045", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use LinkerFlavor;\n-use target::{LinkArgs, TargetOptions};\n+use target::{LinkArgs, TargetOptions, RelroLevel};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n@@ -34,7 +34,7 @@ pub fn opts() -> TargetOptions {\n         is_like_openbsd: true,\n         pre_link_args: args,\n         position_independent_executables: true,\n-        full_relro: true,\n+        relro_level: RelroLevel::Full,\n         .. Default::default()\n     }\n }"}, {"sha": "e4ef0c73c539ef10ebe3d7eaf5bacea63a1dfb19", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/94b9cc90fb72e6be42b14559c586e3490385d045/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b9cc90fb72e6be42b14559c586e3490385d045/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=94b9cc90fb72e6be42b14559c586e3490385d045", "patch": "@@ -27,7 +27,7 @@ use rustc::dep_graph::{DepKind, DepNode};\n use rustc::hir::def_id::CrateNum;\n use rustc::hir::svh::Svh;\n use rustc_back::tempdir::TempDir;\n-use rustc_back::PanicStrategy;\n+use rustc_back::{PanicStrategy, RelroLevel};\n use rustc_incremental::IncrementalHashesMap;\n use context::get_reloc_model;\n use llvm;\n@@ -1029,8 +1029,18 @@ fn link_args(cmd: &mut Linker,\n         }\n     }\n \n-    if t.options.full_relro {\n-        cmd.full_relro();\n+    let relro_level = match sess.opts.cg.relro_level {\n+        Some(level) => level,\n+        None => t.options.relro_level,\n+    };\n+    match relro_level {\n+        RelroLevel::Full => {\n+            cmd.full_relro();\n+        },\n+        RelroLevel::Partial => {\n+            cmd.partial_relro();\n+        },\n+        RelroLevel::Off => {},\n     }\n \n     // Pass optimization flags down to the linker."}, {"sha": "89ebfd0d254ecfd1df144d7d6fc5589b5e4434c1", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94b9cc90fb72e6be42b14559c586e3490385d045/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b9cc90fb72e6be42b14559c586e3490385d045/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=94b9cc90fb72e6be42b14559c586e3490385d045", "patch": "@@ -104,6 +104,7 @@ pub trait Linker {\n     fn add_object(&mut self, path: &Path);\n     fn gc_sections(&mut self, keep_metadata: bool);\n     fn position_independent_executable(&mut self);\n+    fn partial_relro(&mut self);\n     fn full_relro(&mut self);\n     fn optimize(&mut self);\n     fn debuginfo(&mut self);\n@@ -176,6 +177,7 @@ impl<'a> Linker for GccLinker<'a> {\n     fn output_filename(&mut self, path: &Path) { self.cmd.arg(\"-o\").arg(path); }\n     fn add_object(&mut self, path: &Path) { self.cmd.arg(path); }\n     fn position_independent_executable(&mut self) { self.cmd.arg(\"-pie\"); }\n+    fn partial_relro(&mut self) { self.linker_arg(\"-z,relro\"); }\n     fn full_relro(&mut self) { self.linker_arg(\"-z,relro,-z,now\"); }\n     fn args(&mut self, args: &[String]) { self.cmd.args(args); }\n \n@@ -430,6 +432,10 @@ impl<'a> Linker for MsvcLinker<'a> {\n         // noop\n     }\n \n+    fn partial_relro(&mut self) {\n+        // noop\n+    }\n+\n     fn full_relro(&mut self) {\n         // noop\n     }\n@@ -601,6 +607,10 @@ impl<'a> Linker for EmLinker<'a> {\n         // noop\n     }\n \n+    fn partial_relro(&mut self) {\n+        // noop\n+    }\n+\n     fn full_relro(&mut self) {\n         // noop\n     }"}]}