{"sha": "786c7d8d8ce3a21a394404c41a01a666c26071f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NmM3ZDhkOGNlM2EyMWEzOTQ0MDRjNDFhMDFhNjY2YzI2MDcxZjM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-02T12:27:51Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-02T12:27:51Z"}, "message": "Rustup to rustc 1.44.0-nightly (76b11980a 2020-04-01)", "tree": {"sha": "ad1be0ccaedcd5e2e62090a26e6ca9f04858279c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad1be0ccaedcd5e2e62090a26e6ca9f04858279c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/786c7d8d8ce3a21a394404c41a01a666c26071f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/786c7d8d8ce3a21a394404c41a01a666c26071f3", "html_url": "https://github.com/rust-lang/rust/commit/786c7d8d8ce3a21a394404c41a01a666c26071f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/786c7d8d8ce3a21a394404c41a01a666c26071f3/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5958355ef1f8a1787acee664128e18b0db2d2d23", "url": "https://api.github.com/repos/rust-lang/rust/commits/5958355ef1f8a1787acee664128e18b0db2d2d23", "html_url": "https://github.com/rust-lang/rust/commit/5958355ef1f8a1787acee664128e18b0db2d2d23"}], "stats": {"total": 7, "additions": 2, "deletions": 5}, "files": [{"sha": "876125317a9a293cc77ee52eb423b3033c7b2572", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/786c7d8d8ce3a21a394404c41a01a666c26071f3/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/786c7d8d8ce3a21a394404c41a01a666c26071f3/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=786c7d8d8ce3a21a394404c41a01a666c26071f3", "patch": "@@ -1 +1 @@\n-nightly-2020-03-31\n+nightly-2020-04-02"}, {"sha": "f94ccae8185d3091d51a57a6fcf4d32a7449d115", "filename": "src/constant.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/786c7d8d8ce3a21a394404c41a01a666c26071f3/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786c7d8d8ce3a21a394404c41a01a666c26071f3/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=786c7d8d8ce3a21a394404c41a01a666c26071f3", "patch": "@@ -171,7 +171,6 @@ fn trans_const_place<'tcx>(\n         );\n         ecx.push_stack_frame(\n             fx.instance,\n-            DUMMY_SP,\n             fx.mir,\n             None,\n             StackPopCleanup::None { cleanup: false },\n@@ -412,7 +411,6 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for TransPlaceInterpreter {\n \n     fn find_mir_or_eval_fn(\n         _: &mut InterpCx<'mir, 'tcx, Self>,\n-        _: Span,\n         _: Instance<'tcx>,\n         _: &[OpTy<'tcx>],\n         _: Option<(PlaceTy<'tcx>, BasicBlock)>,\n@@ -423,7 +421,6 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for TransPlaceInterpreter {\n \n     fn call_intrinsic(\n         _: &mut InterpCx<'mir, 'tcx, Self>,\n-        _: Span,\n         _: Instance<'tcx>,\n         _: &[OpTy<'tcx>],\n         _: Option<(PlaceTy<'tcx>, BasicBlock)>,"}, {"sha": "e5a1e2188255677d3af947fb5dc6b0e1f6f35336", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/786c7d8d8ce3a21a394404c41a01a666c26071f3/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786c7d8d8ce3a21a394404c41a01a666c26071f3/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=786c7d8d8ce3a21a394404c41a01a666c26071f3", "patch": "@@ -144,7 +144,7 @@ fn lane_type_and_count<'tcx>(\n ) -> (TyAndLayout<'tcx>, u16) {\n     assert!(layout.ty.is_simd());\n     let lane_count = match layout.fields {\n-        layout::FieldPlacement::Array { stride: _, count } => u16::try_from(count).unwrap(),\n+        layout::FieldsShape::Array { stride: _, count } => u16::try_from(count).unwrap(),\n         _ => unreachable!(\"lane_type_and_count({:?})\", layout),\n     };\n     let lane_layout = layout.field(&ty::layout::LayoutCx {"}]}