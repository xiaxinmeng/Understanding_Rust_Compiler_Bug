{"sha": "cd2003ffd8dd976342f9e8fc1429ae93d6780e81", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMjAwM2ZmZDhkZDk3NjM0MmY5ZThmYzE0MjlhZTkzZDY3ODBlODE=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2014-08-06T02:07:38Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2014-08-06T02:14:15Z"}, "message": "Added clarification regarding rust_try_inner.", "tree": {"sha": "59f45119a76c6ede2cf3b3c104fc34ba948eae84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59f45119a76c6ede2cf3b3c104fc34ba948eae84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd2003ffd8dd976342f9e8fc1429ae93d6780e81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd2003ffd8dd976342f9e8fc1429ae93d6780e81", "html_url": "https://github.com/rust-lang/rust/commit/cd2003ffd8dd976342f9e8fc1429ae93d6780e81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd2003ffd8dd976342f9e8fc1429ae93d6780e81/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb55279f2378c8f3e8528c8c4c8a0f67d6955cb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb55279f2378c8f3e8528c8c4c8a0f67d6955cb1", "html_url": "https://github.com/rust-lang/rust/commit/cb55279f2378c8f3e8528c8c4c8a0f67d6955cb1"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "f0967edc82061f469aa63df10c0d0da1ac3c2ed0", "filename": "src/librustrt/unwind.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cd2003ffd8dd976342f9e8fc1429ae93d6780e81/src%2Flibrustrt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd2003ffd8dd976342f9e8fc1429ae93d6780e81/src%2Flibrustrt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Funwind.rs?ref=cd2003ffd8dd976342f9e8fc1429ae93d6780e81", "patch": "@@ -220,12 +220,19 @@ fn rust_exception_class() -> uw::_Unwind_Exception_Class {\n //\n // This is pretty close to Rust's exception handling approach, except that Rust\n // does have a single \"catch-all\" handler at the bottom of each task's stack.\n-// So we have two versions:\n+// So we have two versions of the personality routine:\n // - rust_eh_personality, used by all cleanup landing pads, which never catches,\n //   so the behavior of __gcc_personality_v0 is perfectly adequate there, and\n // - rust_eh_personality_catch, used only by rust_try(), which always catches.\n-//   This is achieved by overriding the return value in search phase to always\n-//   say \"catch!\".\n+//\n+// Note, however, that for implementation simplicity, rust_eh_personality_catch\n+// lacks code to install a landing pad, so in order to obtain exception object\n+// pointer (which it needs to return upstream), rust_try() employs another trick:\n+// it calls into the nested rust_try_inner(), whose landing pad does not resume\n+// unwinds.  Instead, it extracts the exception pointer and performs a \"normal\"\n+// return.\n+//\n+// See also: rt/rust_try.ll\n \n #[cfg(not(target_arch = \"arm\"), not(windows, target_arch = \"x86_64\"), not(test))]\n #[doc(hidden)]\n@@ -334,7 +341,8 @@ pub mod eabi {\n \n // ARM EHABI uses a slightly different personality routine signature,\n // but otherwise works the same.\n-#[cfg(target_arch = \"arm\", not(target_os = \"ios\", not(test)))]\n+#[cfg(target_arch = \"arm\", not(target_os = \"ios\"), not(test))]\n+#[doc(hidden)]\n #[allow(visible_private_types)]\n pub mod eabi {\n     use uw = libunwind;\n@@ -384,10 +392,9 @@ pub mod eabi {\n // with an \"API translator\" layer (_GCC_specific_handler).\n \n #[cfg(windows, target_arch = \"x86_64\", not(test))]\n+#[doc(hidden)]\n #[allow(visible_private_types)]\n #[allow(non_camel_case_types)]\n-#[allow(unused_variable)]\n-#[allow(uppercase_variables)]\n pub mod eabi {\n     use uw = libunwind;\n     use libc::{c_void, c_int};"}, {"sha": "33d2d31a2e0c1775865b33ae9f90c8ddfa93153e", "filename": "src/rt/rust_try.ll", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd2003ffd8dd976342f9e8fc1429ae93d6780e81/src%2Frt%2Frust_try.ll", "raw_url": "https://github.com/rust-lang/rust/raw/cd2003ffd8dd976342f9e8fc1429ae93d6780e81/src%2Frt%2Frust_try.ll", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_try.ll?ref=cd2003ffd8dd976342f9e8fc1429ae93d6780e81", "patch": "@@ -11,6 +11,7 @@\n ; Rust's try-catch\n ; When f(...) returns normally, the return value is null.\n ; When f(...) throws, the return value is a pointer to the caught exception object.\n+\n ; See also: librustrt/unwind.rs\n \n define i8* @rust_try(void (i8*,i8*)* %f, i8* %fptr, i8* %env) {\n@@ -25,7 +26,7 @@ normal:\n catch:\n     landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @rust_eh_personality_catch to i8*)\n         catch i8* null\n-    ; execution will never reach here because rust_try_inner's landing pad does not resume unwinds\n+    ; rust_try_inner's landing pad does not resume unwinds, so execution will never reach here\n     ret i8* null\n }\n "}, {"sha": "dd1c444119bde49b720f558ebfa90d5d889f377d", "filename": "src/rustllvm/llvm-auto-clean-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd2003ffd8dd976342f9e8fc1429ae93d6780e81/src%2Frustllvm%2Fllvm-auto-clean-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/cd2003ffd8dd976342f9e8fc1429ae93d6780e81/src%2Frustllvm%2Fllvm-auto-clean-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-auto-clean-trigger?ref=cd2003ffd8dd976342f9e8fc1429ae93d6780e81", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be forcibly cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2014-08-24\n+2014-08-05"}]}