{"sha": "fc236785a27478aab61b79270a4837658ee14eaa", "node_id": "C_kwDOAAsO6NoAKGZjMjM2Nzg1YTI3NDc4YWFiNjFiNzkyNzBhNDgzNzY1OGVlMTRlYWE", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2022-01-25T14:17:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-25T14:17:50Z"}, "message": "Merge pull request #115 from bjorn3/foreign_statics\n\nCorrectly import foreign statics", "tree": {"sha": "1d957d7c2933e2c486d9b62bb98d37b5990d2b50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d957d7c2933e2c486d9b62bb98d37b5990d2b50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc236785a27478aab61b79270a4837658ee14eaa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh8AaOCRBK7hj4Ov3rIwAAsXcIABL/oRd7djrAv1L5Qj3ObCZ4\nfL1r3J+JIpzxHu6xtmG0JG1odTRHc9MYk48bYI9I+26cNHkr6HOpUegaTsN7pu2p\nz/XMKZuyE0Q4PrILF9RypLaCKUYgfy96+3XEUniVY0LopM7sUmBYkA9rhyLtjXYb\nA9WGZNDeuufICQ8IjGM16xaEUcVH6Lmod1XrZt81Q3VX+Eu98t7lcv9D320Peo7j\nQM9gTVj9iqBBZaZ+GStPYllqYDbgZKvUFmNxUUZF7iSqillRvoWoOvgzkOuHSfWp\nM2UyC0oM/Lpv6NZQ2lsroELN68vwA2dXBusikUVo0WAxWwOZdJqtc3s1HYzdRqE=\n=TVRP\n-----END PGP SIGNATURE-----\n", "payload": "tree 1d957d7c2933e2c486d9b62bb98d37b5990d2b50\nparent e690fb12731eb5f86d4c88400a344f65607af385\nparent 6663f4e78e001fe711011ea9df7a0692a73a7695\nauthor antoyo <antoyo@users.noreply.github.com> 1643120270 -0500\ncommitter GitHub <noreply@github.com> 1643120270 -0500\n\nMerge pull request #115 from bjorn3/foreign_statics\n\nCorrectly import foreign statics"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc236785a27478aab61b79270a4837658ee14eaa", "html_url": "https://github.com/rust-lang/rust/commit/fc236785a27478aab61b79270a4837658ee14eaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc236785a27478aab61b79270a4837658ee14eaa/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e690fb12731eb5f86d4c88400a344f65607af385", "url": "https://api.github.com/repos/rust-lang/rust/commits/e690fb12731eb5f86d4c88400a344f65607af385", "html_url": "https://github.com/rust-lang/rust/commit/e690fb12731eb5f86d4c88400a344f65607af385"}, {"sha": "6663f4e78e001fe711011ea9df7a0692a73a7695", "url": "https://api.github.com/repos/rust-lang/rust/commits/6663f4e78e001fe711011ea9df7a0692a73a7695", "html_url": "https://github.com/rust-lang/rust/commit/6663f4e78e001fe711011ea9df7a0692a73a7695"}], "stats": {"total": 43, "additions": 25, "deletions": 18}, "files": [{"sha": "332f365ce0ceed7cc0cf71fc6c08f51b3e69f4fa", "filename": "cargo.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc236785a27478aab61b79270a4837658ee14eaa/cargo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/fc236785a27478aab61b79270a4837658ee14eaa/cargo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo.sh?ref=fc236785a27478aab61b79270a4837658ee14eaa", "patch": "@@ -8,7 +8,7 @@ pushd $(dirname \"$0\") >/dev/null\n source config.sh\n \n # read nightly compiler from rust-toolchain file\n-TOOLCHAIN=$(cat rust-toolchain)\n+TOOLCHAIN=$(cat rust-toolchain | grep channel | sed 's/channel = \"\\(.*\\)\"/\\1/')\n \n popd >/dev/null\n "}, {"sha": "3896775a0b9d27045c0dee3754bbade61027f28e", "filename": "prepare_build.sh", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc236785a27478aab61b79270a4837658ee14eaa/prepare_build.sh", "raw_url": "https://github.com/rust-lang/rust/raw/fc236785a27478aab61b79270a4837658ee14eaa/prepare_build.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/prepare_build.sh?ref=fc236785a27478aab61b79270a4837658ee14eaa", "patch": "@@ -1,5 +1,4 @@\n #!/bin/bash --verbose\n set -e\n \n-rustup component add rust-src rustc-dev llvm-tools-preview\n ./build_sysroot/prepare_sysroot_src.sh"}, {"sha": "cab94c0b8cfa7ee659f48c907789d6575ff539ce", "filename": "rust-toolchain", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc236785a27478aab61b79270a4837658ee14eaa/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/fc236785a27478aab61b79270a4837658ee14eaa/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=fc236785a27478aab61b79270a4837658ee14eaa", "patch": "@@ -1 +1,3 @@\n-nightly-2021-12-30\n+[toolchain]\n+channel = \"nightly-2021-12-30\"\n+components = [\"rust-src\", \"rustc-dev\", \"llvm-tools-preview\"]"}, {"sha": "e55da7952e753e68d93037320b0eedbaf4368945", "filename": "src/consts.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc236785a27478aab61b79270a4837658ee14eaa/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc236785a27478aab61b79270a4837658ee14eaa/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=fc236785a27478aab61b79270a4837658ee14eaa", "patch": "@@ -1,4 +1,4 @@\n-use gccjit::{LValue, RValue, ToRValue, Type};\n+use gccjit::{GlobalKind, LValue, RValue, ToRValue, Type};\n use rustc_codegen_ssa::traits::{BaseTypeMethods, ConstMethods, DerivedTypeMethods, StaticMethods};\n use rustc_hir as hir;\n use rustc_hir::Node;\n@@ -218,7 +218,13 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n                         }\n \n                         let is_tls = fn_attrs.flags.contains(CodegenFnAttrFlags::THREAD_LOCAL);\n-                        let global = self.declare_global(&sym, llty, is_tls, fn_attrs.link_section);\n+                        let global = self.declare_global(\n+                            &sym,\n+                            llty,\n+                            GlobalKind::Exported,\n+                            is_tls,\n+                            fn_attrs.link_section,\n+                        );\n \n                         if !self.tcx.is_reachable_non_generic(def_id) {\n                             // TODO(antoyo): set visibility.\n@@ -389,6 +395,6 @@ fn check_and_apply_linkage<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, attrs: &Codeg\n         // don't do this then linker errors can be generated where the linker\n         // complains that one object files has a thread local version of the\n         // symbol and another one doesn't.\n-        cx.declare_global(&sym, llty, is_tls, attrs.link_section)\n+        cx.declare_global(&sym, llty, GlobalKind::Imported, is_tls, attrs.link_section)\n     }\n }"}, {"sha": "ec6f8ea4dde090e4ac0652124411d4cfe74a977c", "filename": "src/declare.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc236785a27478aab61b79270a4837658ee14eaa/src%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc236785a27478aab61b79270a4837658ee14eaa/src%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdeclare.rs?ref=fc236785a27478aab61b79270a4837658ee14eaa", "patch": "@@ -22,7 +22,7 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n             global\n         }\n         else {\n-            self.declare_global(name, ty, is_tls, link_section)\n+            self.declare_global(name, ty, GlobalKind::Exported, is_tls, link_section)\n         }\n     }\n \n@@ -47,8 +47,8 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n         unsafe { std::mem::transmute(func) }\n     }*/\n \n-    pub fn declare_global(&self, name: &str, ty: Type<'gcc>, is_tls: bool, link_section: Option<Symbol>) -> LValue<'gcc> {\n-        let global = self.context.new_global(None, GlobalKind::Exported, ty, name);\n+    pub fn declare_global(&self, name: &str, ty: Type<'gcc>, global_kind: GlobalKind, is_tls: bool, link_section: Option<Symbol>) -> LValue<'gcc> {\n+        let global = self.context.new_global(None, global_kind, ty, name);\n         if is_tls {\n             global.set_tls_model(self.tls_model);\n         }"}, {"sha": "70bd86edcbe2472248743d73fc65c5e496e6bb15", "filename": "test.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc236785a27478aab61b79270a4837658ee14eaa/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/fc236785a27478aab61b79270a4837658ee14eaa/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=fc236785a27478aab61b79270a4837658ee14eaa", "patch": "@@ -145,7 +145,7 @@ function test_rustc() {\n     echo\n     echo \"[TEST] rust-lang/rust\"\n \n-    rust_toolchain=$(cat rust-toolchain)\n+    rust_toolchain=$(cat rust-toolchain | grep channel | sed 's/channel = \"\\(.*\\)\"/\\1/')\n \n     git clone https://github.com/rust-lang/rust.git || true\n     cd rust"}, {"sha": "eb38a8a383575587c6880ecf37160fcf133ba499", "filename": "tests/run/assign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc236785a27478aab61b79270a4837658ee14eaa/tests%2Frun%2Fassign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc236785a27478aab61b79270a4837658ee14eaa/tests%2Frun%2Fassign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun%2Fassign.rs?ref=fc236785a27478aab61b79270a4837658ee14eaa", "patch": "@@ -51,7 +51,7 @@ mod libc {\n         pub fn fflush(stream: *mut i32) -> i32;\n         pub fn printf(format: *const i8, ...) -> i32;\n \n-        pub static STDOUT: *mut i32;\n+        pub static stdout: *mut i32;\n     }\n }\n \n@@ -67,7 +67,7 @@ mod intrinsics {\n pub fn panic(_msg: &str) -> ! {\n     unsafe {\n         libc::puts(\"Panicking\\0\" as *const str as *const u8);\n-        libc::fflush(libc::STDOUT);\n+        libc::fflush(libc::stdout);\n         intrinsics::abort();\n     }\n }"}, {"sha": "6477b83982804646fbb7bc9c597e9dcd8a09a3d4", "filename": "tests/run/int_overflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc236785a27478aab61b79270a4837658ee14eaa/tests%2Frun%2Fint_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc236785a27478aab61b79270a4837658ee14eaa/tests%2Frun%2Fint_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun%2Fint_overflow.rs?ref=fc236785a27478aab61b79270a4837658ee14eaa", "patch": "@@ -49,7 +49,7 @@ mod libc {\n         pub fn puts(s: *const u8) -> i32;\n         pub fn fflush(stream: *mut i32) -> i32;\n \n-        pub static STDOUT: *mut i32;\n+        pub static stdout: *mut i32;\n     }\n }\n \n@@ -65,7 +65,7 @@ mod intrinsics {\n pub fn panic(_msg: &str) -> ! {\n     unsafe {\n         libc::puts(\"Panicking\\0\" as *const str as *const u8);\n-        libc::fflush(libc::STDOUT);\n+        libc::fflush(libc::stdout);\n         intrinsics::abort();\n     }\n }"}, {"sha": "52de20021f3e0c16c506573e7cf2f896027d317c", "filename": "tests/run/mut_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc236785a27478aab61b79270a4837658ee14eaa/tests%2Frun%2Fmut_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc236785a27478aab61b79270a4837658ee14eaa/tests%2Frun%2Fmut_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun%2Fmut_ref.rs?ref=fc236785a27478aab61b79270a4837658ee14eaa", "patch": "@@ -53,7 +53,7 @@ mod libc {\n         pub fn fflush(stream: *mut i32) -> i32;\n         pub fn printf(format: *const i8, ...) -> i32;\n \n-        pub static STDOUT: *mut i32;\n+        pub static stdout: *mut i32;\n     }\n }\n \n@@ -69,7 +69,7 @@ mod intrinsics {\n pub fn panic(_msg: &str) -> ! {\n     unsafe {\n         libc::puts(\"Panicking\\0\" as *const str as *const u8);\n-        libc::fflush(libc::STDOUT);\n+        libc::fflush(libc::stdout);\n         intrinsics::abort();\n     }\n }"}, {"sha": "e078b37b4aba9ed247fe3849b74fdb4d649ed7b5", "filename": "tests/run/operations.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc236785a27478aab61b79270a4837658ee14eaa/tests%2Frun%2Foperations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc236785a27478aab61b79270a4837658ee14eaa/tests%2Frun%2Foperations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun%2Foperations.rs?ref=fc236785a27478aab61b79270a4837658ee14eaa", "patch": "@@ -59,7 +59,7 @@ mod libc {\n         pub fn puts(s: *const u8) -> i32;\n         pub fn fflush(stream: *mut i32) -> i32;\n \n-        pub static STDOUT: *mut i32;\n+        pub static stdout: *mut i32;\n     }\n }\n \n@@ -75,7 +75,7 @@ mod intrinsics {\n pub fn panic(_msg: &str) -> ! {\n     unsafe {\n         libc::puts(\"Panicking\\0\" as *const str as *const u8);\n-        libc::fflush(libc::STDOUT);\n+        libc::fflush(libc::stdout);\n         intrinsics::abort();\n     }\n }"}]}