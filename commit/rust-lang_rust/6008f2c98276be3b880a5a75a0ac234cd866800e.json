{"sha": "6008f2c98276be3b880a5a75a0ac234cd866800e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMDhmMmM5ODI3NmJlM2I4ODBhNWE3NWEwYWMyMzRjZDg2NjgwMGU=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-06-12T00:23:11Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-06-19T05:22:26Z"}, "message": "Add stability inheritance\n\nThis commit makes several changes to the stability index infrastructure:\n\n* Stability levels are now inherited lexically, i.e., each item's\n  stability level becomes the default for any nested items.\n\n* The computed stability level for an item is stored as part of the\n  metadata. When using an item from an external crate, this data is\n  looked up and cached.\n\n* The stability lint works from the computed stability level, rather\n  than manual stability attribute annotations. However, the lint still\n  checks only a limited set of item uses (e.g., it does not check every\n  component of a path on import). This will be addressed in a later PR,\n  as part of issue #8962.\n\n* The stability lint only applies to items originating from external\n  crates, since the stability index is intended as a promise to\n  downstream crates.\n\n* The \"experimental\" lint is now _allow_ by default. This is because\n  almost all existing crates have been marked \"experimental\", pending\n  library stabilization. With inheritance in place, this would generate\n  a massive explosion of warnings for every Rust program.\n\n  The lint should be changed back to deny-by-default after library\n  stabilization is complete.\n\n* The \"deprecated\" lint still warns by default.\n\nThe net result: we can begin tracking stability index for the standard\nlibraries as we stabilize, without impacting most clients.\n\nCloses #13540.", "tree": {"sha": "5f420c6d2d216182c49a1ea6ed122cf6451ca705", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f420c6d2d216182c49a1ea6ed122cf6451ca705"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6008f2c98276be3b880a5a75a0ac234cd866800e", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6008f2c98276be3b880a5a75a0ac234cd866800e", "html_url": "https://github.com/rust-lang/rust/commit/6008f2c98276be3b880a5a75a0ac234cd866800e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6008f2c98276be3b880a5a75a0ac234cd866800e/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f05cd6e04e62651ec95a3ae66906399d7c0092a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f05cd6e04e62651ec95a3ae66906399d7c0092a1", "html_url": "https://github.com/rust-lang/rust/commit/f05cd6e04e62651ec95a3ae66906399d7c0092a1"}], "stats": {"total": 494, "additions": 385, "deletions": 109}, "files": [{"sha": "831c5bd97c161bb9a9b10a8fff12d3a96db2b493", "filename": "src/doc/rust.md", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=6008f2c98276be3b880a5a75a0ac234cd866800e", "patch": "@@ -2300,28 +2300,43 @@ One can indicate the stability of an API using the following attributes:\n These levels are directly inspired by\n [Node.js' \"stability index\"](http://nodejs.org/api/documentation.html).\n \n-There are lints for disallowing items marked with certain levels:\n-`deprecated`, `experimental` and `unstable`; the first two will warn\n-by default. Items with not marked with a stability are considered to\n-be unstable for the purposes of the lint. One can give an optional\n+Stability levels are inherited, so an items's stability attribute is the\n+default stability for everything nested underneath it.\n+\n+There are lints for disallowing items marked with certain levels: `deprecated`,\n+`experimental` and `unstable`. For now, only `deprecated` warns by default, but\n+this will change once the standard library has been stabilized.\n+Stability levels are meant to be promises at the crate\n+ level, so these lints only apply when referencing\n+items from an _external_ crate, not to items defined within the\n+current crate. Items with no stability level are considered\n+to be unstable for the purposes of the lint. One can give an optional\n string that will be displayed when the lint flags the use of an item.\n \n-~~~~ {.ignore}\n-#![warn(unstable)]\n+For example, if we define one crate called `stability_levels`:\n \n+~~~~ {.ignore}\n #[deprecated=\"replaced by `best`\"]\n-fn bad() {\n+pub fn bad() {\n     // delete everything\n }\n \n-fn better() {\n+pub fn better() {\n     // delete fewer things\n }\n \n #[stable]\n-fn best() {\n+pub fn best() {\n     // delete nothing\n }\n+~~~~\n+\n+then the lints will work as follows for a client crate:\n+\n+~~~~ {.ignore}\n+#![warn(unstable)]\n+extern crate stability_levels;\n+use stability_levels::{bad, better, best};\n \n fn main() {\n     bad(); // \"warning: use of deprecated item: replaced by `best`\""}, {"sha": "ac6558aef651f17e015562920e42389cad24b8b7", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=6008f2c98276be3b880a5a75a0ac234cd866800e", "patch": "@@ -20,7 +20,7 @@ use metadata::common::LinkMeta;\n use metadata::creader;\n use middle::cfg;\n use middle::cfg::graphviz::LabelledCFG;\n-use middle::{trans, freevars, kind, ty, typeck, lint, reachable};\n+use middle::{trans, freevars, stability, kind, ty, typeck, lint, reachable};\n use middle::dependency_format;\n use middle;\n use plugin::load::Plugins;\n@@ -312,8 +312,11 @@ pub fn phase_3_run_analysis_passes(sess: Session,\n     time(time_passes, \"loop checking\", (), |_|\n          middle::check_loop::check_crate(&sess, krate));\n \n+    let stability_index = time(time_passes, \"stability index\", (), |_|\n+                               stability::Index::build(krate));\n+\n     let ty_cx = ty::mk_ctxt(sess, def_map, named_region_map, ast_map,\n-                            freevars, region_map, lang_items);\n+                            freevars, region_map, lang_items, stability_index);\n \n     // passes are timed inside typeck\n     typeck::check_crate(&ty_cx, trait_map, krate);"}, {"sha": "f157e6b17e72700ac74a30d038bb8b3ff5c3fcfb", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=6008f2c98276be3b880a5a75a0ac234cd866800e", "patch": "@@ -80,6 +80,7 @@ pub mod middle {\n     pub mod weak_lang_items;\n     pub mod save;\n     pub mod intrinsicck;\n+    pub mod stability;\n }\n \n pub mod front {"}, {"sha": "9e1d272f5da2e2ec8c4beb3a129dfe2a628b48d3", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=6008f2c98276be3b880a5a75a0ac234cd866800e", "patch": "@@ -210,6 +210,9 @@ pub static tag_method_argument_name: uint = 0x8f;\n pub static tag_reachable_extern_fns: uint = 0x90;\n pub static tag_reachable_extern_fn_id: uint = 0x91;\n \n+pub static tag_items_data_item_stability: uint = 0x92;\n+\n+\n #[deriving(Clone, Show)]\n pub struct LinkMeta {\n     pub crateid: CrateId,"}, {"sha": "32b7df23d520add0e2fa708227f4583c0e85e263", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=6008f2c98276be3b880a5a75a0ac234cd866800e", "patch": "@@ -25,6 +25,7 @@ use serialize::ebml::reader;\n use std::rc::Rc;\n use syntax::ast;\n use syntax::ast_map;\n+use syntax::attr;\n use syntax::diagnostic::expect;\n use syntax::parse::token;\n \n@@ -328,3 +329,10 @@ pub fn is_typedef(cstore: &cstore::CStore, did: ast::DefId) -> bool {\n     let cdata = cstore.get_crate_data(did.krate);\n     decoder::is_typedef(&*cdata, did.node)\n }\n+\n+pub fn get_stability(cstore: &cstore::CStore,\n+                     def: ast::DefId)\n+                     -> Option<attr::Stability> {\n+    let cdata = cstore.get_crate_data(def.krate);\n+    decoder::get_stability(&*cdata, def.node)\n+}"}, {"sha": "548a8c50501ddd97951fe7d7205a16cc07002a2f", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=6008f2c98276be3b880a5a75a0ac234cd866800e", "patch": "@@ -439,6 +439,14 @@ pub fn get_type(cdata: Cmd, id: ast::NodeId, tcx: &ty::ctxt)\n     }\n }\n \n+pub fn get_stability(cdata: Cmd, id: ast::NodeId) -> Option<attr::Stability> {\n+    let item = lookup_item(id, cdata.data());\n+    reader::maybe_get_doc(item, tag_items_data_item_stability).map(|doc| {\n+        let mut decoder = reader::Decoder::new(doc);\n+        Decodable::decode(&mut decoder).unwrap()\n+    })\n+}\n+\n pub fn get_impl_trait(cdata: Cmd,\n                       id: ast::NodeId,\n                       tcx: &ty::ctxt) -> Option<Rc<ty::TraitRef>>"}, {"sha": "a94ea0b98eb6aeb307cdf69cbde723764b10778d", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=6008f2c98276be3b880a5a75a0ac234cd866800e", "patch": "@@ -327,6 +327,10 @@ fn encode_enum_variant_info(ecx: &EncodeContext,\n         encode_parent_item(ebml_w, local_def(id));\n         encode_visibility(ebml_w, variant.node.vis);\n         encode_attributes(ebml_w, variant.node.attrs.as_slice());\n+\n+        let stab = ecx.tcx.stability.borrow().lookup_local(variant.node.id);\n+        encode_stability(ebml_w, stab);\n+\n         match variant.node.kind {\n             ast::TupleVariantKind(ref args)\n                     if args.len() > 0 && generics.ty_params.len() == 0 => {\n@@ -588,6 +592,7 @@ fn encode_info_for_mod(ecx: &EncodeContext,\n \n     encode_path(ebml_w, path.clone());\n     encode_visibility(ebml_w, vis);\n+    encode_stability(ebml_w, ecx.tcx.stability.borrow().lookup_local(id));\n \n     // Encode the reexports of this module, if this module is public.\n     if vis == Public {\n@@ -717,6 +722,8 @@ fn encode_info_for_struct_ctor(ecx: &EncodeContext,\n         encode_symbol(ecx, ebml_w, ctor_id);\n     }\n \n+    encode_stability(ebml_w, ecx.tcx.stability.borrow().lookup_local(ctor_id));\n+\n     // indicate that this is a tuple struct ctor, because downstream users will normally want\n     // the tuple struct definition, but without this there is no way for them to tell that\n     // they actually have a ctor rather than a normal function\n@@ -761,6 +768,9 @@ fn encode_info_for_method(ecx: &EncodeContext,\n     encode_method_ty_fields(ecx, ebml_w, m);\n     encode_parent_item(ebml_w, local_def(parent_id));\n \n+    let stab = ecx.tcx.stability.borrow().lookup_local(m.def_id.node);\n+    encode_stability(ebml_w, stab);\n+\n     // The type for methods gets encoded twice, which is unfortunate.\n     let tpt = lookup_item_type(ecx.tcx, m.def_id);\n     encode_bounds_and_type(ebml_w, ecx, &tpt);\n@@ -880,6 +890,14 @@ fn encode_sized(ebml_w: &mut Encoder, sized: Sized) {\n     ebml_w.end_tag();\n }\n \n+fn encode_stability(ebml_w: &mut Encoder, stab_opt: Option<attr::Stability>) {\n+    stab_opt.map(|stab| {\n+        ebml_w.start_tag(tag_items_data_item_stability);\n+        stab.encode(ebml_w).unwrap();\n+        ebml_w.end_tag();\n+    });\n+}\n+\n fn encode_info_for_item(ecx: &EncodeContext,\n                         ebml_w: &mut Encoder,\n                         item: &Item,\n@@ -900,6 +918,8 @@ fn encode_info_for_item(ecx: &EncodeContext,\n            ecx.tcx.sess.codemap().span_to_str(item.span));\n \n     let def_id = local_def(item.id);\n+    let stab = tcx.stability.borrow().lookup_local(item.id);\n+\n     match item.node {\n       ItemStatic(_, m, _) => {\n         add_to_index(item, ebml_w, index);\n@@ -921,6 +941,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             encode_inlined_item(ecx, ebml_w, IIItemRef(item));\n         }\n         encode_visibility(ebml_w, vis);\n+        encode_stability(ebml_w, stab);\n         ebml_w.end_tag();\n       }\n       ItemFn(ref decl, fn_style, _, ref generics, _) => {\n@@ -939,6 +960,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             encode_symbol(ecx, ebml_w, item.id);\n         }\n         encode_visibility(ebml_w, vis);\n+        encode_stability(ebml_w, stab);\n         encode_method_argument_names(ebml_w, &**decl);\n         ebml_w.end_tag();\n       }\n@@ -968,6 +990,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             ebml_w.end_tag();\n         }\n         encode_visibility(ebml_w, vis);\n+        encode_stability(ebml_w, stab);\n         ebml_w.end_tag();\n       }\n       ItemTy(..) => {\n@@ -979,6 +1002,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_name(ebml_w, item.ident.name);\n         encode_path(ebml_w, path);\n         encode_visibility(ebml_w, vis);\n+        encode_stability(ebml_w, stab);\n         ebml_w.end_tag();\n       }\n       ItemEnum(ref enum_definition, ref generics) => {\n@@ -1001,6 +1025,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_inherent_implementations(ecx, ebml_w, def_id);\n \n         encode_visibility(ebml_w, vis);\n+        encode_stability(ebml_w, stab);\n         ebml_w.end_tag();\n \n         encode_enum_variant_info(ecx,\n@@ -1035,6 +1060,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_name(ebml_w, item.ident.name);\n         encode_attributes(ebml_w, item.attrs.as_slice());\n         encode_path(ebml_w, path.clone());\n+        encode_stability(ebml_w, stab);\n         encode_visibility(ebml_w, vis);\n \n         /* Encode def_ids for each field and method\n@@ -1095,6 +1121,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             encode_impl_vtables(ebml_w, ecx, &impl_vtables);\n         }\n         encode_path(ebml_w, path.clone());\n+        encode_stability(ebml_w, stab);\n         ebml_w.end_tag();\n \n         // Iterate down the methods, emitting them. We rely on the\n@@ -1138,6 +1165,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         // should no longer need this ugly little hack either.\n         encode_sized(ebml_w, sized);\n         encode_visibility(ebml_w, vis);\n+        encode_stability(ebml_w, stab);\n         for &method_def_id in ty::trait_method_def_ids(tcx, def_id).iter() {\n             ebml_w.start_tag(tag_item_trait_method);\n             encode_def_id(ebml_w, method_def_id);\n@@ -1176,9 +1204,11 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             ebml_w.start_tag(tag_items_data_item);\n \n             encode_method_ty_fields(ecx, ebml_w, &*method_ty);\n-\n             encode_parent_item(ebml_w, def_id);\n \n+            let stab = tcx.stability.borrow().lookup_local(method_def_id.node);\n+            encode_stability(ebml_w, stab);\n+\n             let elem = ast_map::PathName(method_ty.ident.name);\n             encode_path(ebml_w, path.clone().chain(Some(elem).move_iter()));\n "}, {"sha": "c2a19bb43c8337ab3895ad7f19e354896360d05b", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 11, "deletions": 29, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=6008f2c98276be3b880a5a75a0ac234cd866800e", "patch": "@@ -372,7 +372,8 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n      LintSpec {\n         lint: Experimental,\n         desc: \"detects use of #[experimental] items\",\n-        default: Warn\n+        // FIXME #6875: Change to Warn after std library stabilization is complete\n+        default: Allow\n     }),\n \n     (\"unstable\",\n@@ -1661,6 +1662,8 @@ fn check_missing_doc_variant(cx: &Context, v: &ast::Variant) {\n /// Checks for use of items with #[deprecated], #[experimental] and\n /// #[unstable] (or none of them) attributes.\n fn check_stability(cx: &Context, e: &ast::Expr) {\n+    let tcx = cx.tcx;\n+\n     let id = match e.node {\n         ast::ExprPath(..) | ast::ExprStruct(..) => {\n             match cx.tcx.def_map.borrow().find(&e.id) {\n@@ -1670,16 +1673,16 @@ fn check_stability(cx: &Context, e: &ast::Expr) {\n         }\n         ast::ExprMethodCall(..) => {\n             let method_call = typeck::MethodCall::expr(e.id);\n-            match cx.tcx.method_map.borrow().find(&method_call) {\n+            match tcx.method_map.borrow().find(&method_call) {\n                 Some(method) => {\n                     match method.origin {\n                         typeck::MethodStatic(def_id) => {\n                             // If this implements a trait method, get def_id\n                             // of the method inside trait definition.\n                             // Otherwise, use the current def_id (which refers\n                             // to the method inside impl).\n-                            ty::trait_method_of_method(\n-                                cx.tcx, def_id).unwrap_or(def_id)\n+                            ty::trait_method_of_method(cx.tcx, def_id)\n+                               .unwrap_or(def_id)\n                         }\n                         typeck::MethodParam(typeck::MethodParam {\n                             trait_id: trait_id,\n@@ -1699,32 +1702,11 @@ fn check_stability(cx: &Context, e: &ast::Expr) {\n         _ => return\n     };\n \n-    let stability = if ast_util::is_local(id) {\n-        // this crate\n-        let s = cx.tcx.map.with_attrs(id.node, |attrs| {\n-            attrs.map(|a| attr::find_stability(a.as_slice()))\n-        });\n-        match s {\n-            Some(s) => s,\n+    // stability attributes are promises made across crates; do not\n+    // check anything for crate-local usage.\n+    if ast_util::is_local(id) { return }\n \n-            // no possibility of having attributes\n-            // (e.g. it's a local variable), so just\n-            // ignore it.\n-            None => return\n-        }\n-    } else {\n-        // cross-crate\n-\n-        let mut s = None;\n-        // run through all the attributes and take the first\n-        // stability one.\n-        csearch::get_item_attrs(&cx.tcx.sess.cstore, id, |attrs| {\n-            if s.is_none() {\n-                s = attr::find_stability(attrs.as_slice())\n-            }\n-        });\n-        s\n-    };\n+    let stability = tcx.stability.borrow_mut().lookup(&tcx.sess.cstore, id);\n \n     let (lint, label) = match stability {\n         // no stability attributes == Unstable"}, {"sha": "fc76648ec5524c411768c2a1314a2d06809fec39", "filename": "src/librustc/middle/stability.rs", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=6008f2c98276be3b880a5a75a0ac234cd866800e", "patch": "@@ -0,0 +1,125 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! A pass that annotates every item and method with its stability level,\n+//! propagating default levels lexically from parent to children ast nodes.\n+\n+use util::nodemap::{NodeMap, DefIdMap};\n+use syntax::codemap::Span;\n+use syntax::{attr, visit};\n+use syntax::ast::{Attribute, Block, Crate, DefId, FnDecl, NodeId, Variant};\n+use syntax::ast::{Item, Required, Provided, TraitMethod, TypeMethod, Method};\n+use syntax::ast::{Generics, StructDef, Ident};\n+use syntax::ast_util::is_local;\n+use syntax::attr::Stability;\n+use syntax::visit::{FnKind, FkMethod, Visitor};\n+use metadata::{cstore, csearch};\n+\n+/// A stability index, giving the stability level for items and methods.\n+pub struct Index {\n+    // stability for crate-local items; unmarked stability == no entry\n+    local: NodeMap<Stability>,\n+    // cache for extern-crate items; unmarked stability == entry with None\n+    extern_cache: DefIdMap<Option<Stability>>\n+}\n+\n+// A private tree-walker for producing an Index.\n+struct Annotator {\n+    index: Index\n+}\n+\n+impl Annotator {\n+    // Determine the stability for a node based on its attributes and inherited\n+    // stability. The stability is recorded in the index and returned.\n+    fn annotate(&mut self, id: NodeId, attrs: &[Attribute],\n+                parent: Option<Stability>) -> Option<Stability> {\n+        match attr::find_stability(attrs).or(parent) {\n+            Some(stab) => {\n+                self.index.local.insert(id, stab.clone());\n+                Some(stab)\n+            }\n+            None => None\n+        }\n+    }\n+}\n+\n+impl Visitor<Option<Stability>> for Annotator {\n+    fn visit_item(&mut self, i: &Item, parent: Option<Stability>) {\n+        let stab = self.annotate(i.id, i.attrs.as_slice(), parent);\n+        visit::walk_item(self, i, stab)\n+    }\n+\n+    fn visit_fn(&mut self, fk: &FnKind, fd: &FnDecl, b: &Block,\n+                s: Span, _: NodeId, parent: Option<Stability>) {\n+        let stab = match *fk {\n+            FkMethod(_, _, meth) =>\n+                self.annotate(meth.id, meth.attrs.as_slice(), parent),\n+            _ => parent\n+        };\n+        visit::walk_fn(self, fk, fd, b, s, stab)\n+    }\n+\n+    fn visit_trait_method(&mut self, t: &TraitMethod, parent: Option<Stability>) {\n+        let stab = match *t {\n+            Required(TypeMethod {attrs: ref attrs, id: id, ..}) =>\n+                self.annotate(id, attrs.as_slice(), parent),\n+\n+            // work around lack of pattern matching for @ types\n+            Provided(method) => match *method {\n+                Method {attrs: ref attrs, id: id, ..} =>\n+                    self.annotate(id, attrs.as_slice(), parent)\n+            }\n+        };\n+        visit::walk_trait_method(self, t, stab)\n+    }\n+\n+    fn visit_variant(&mut self, v: &Variant, g: &Generics, parent: Option<Stability>) {\n+        let stab = self.annotate(v.node.id, v.node.attrs.as_slice(), parent);\n+        visit::walk_variant(self, v, g, stab)\n+    }\n+\n+    fn visit_struct_def(&mut self, s: &StructDef, _: Ident, _: &Generics,\n+                        _: NodeId, parent: Option<Stability>) {\n+        s.ctor_id.map(|id| self.annotate(id, &[], parent.clone()));\n+        visit::walk_struct_def(self, s, parent)\n+    }\n+}\n+\n+impl Index {\n+    /// Construct the stability index for a crate being compiled.\n+    pub fn build(krate: &Crate) -> Index {\n+        let mut annotator = Annotator {\n+            index: Index {\n+                local: NodeMap::new(),\n+                extern_cache: DefIdMap::new()\n+            }\n+        };\n+        visit::walk_crate(&mut annotator, krate,\n+                          attr::find_stability(krate.attrs.as_slice()));\n+        annotator.index\n+    }\n+\n+    /// Lookup the stability for a node, loading external crate\n+    /// metadata as necessary.\n+    pub fn lookup(&mut self, cstore: &cstore::CStore, id: DefId) -> Option<Stability> {\n+        if is_local(id) {\n+            self.lookup_local(id.node)\n+        } else {\n+            let stab = csearch::get_stability(cstore, id);\n+            self.extern_cache.insert(id, stab.clone());\n+            stab\n+        }\n+    }\n+\n+    /// Lookup the stability for a local node without loading any external crates\n+    pub fn lookup_local(&self, id: NodeId) -> Option<Stability> {\n+        self.local.find_copy(&id)\n+    }\n+}"}, {"sha": "783c843b7a9c0ccccc569c36a1a8fa03d1c034c7", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=6008f2c98276be3b880a5a75a0ac234cd866800e", "patch": "@@ -25,6 +25,7 @@ use middle::resolve;\n use middle::resolve_lifetime;\n use middle::subst;\n use middle::subst::{Subst, Substs, VecPerParamSpace};\n+use middle::stability;\n use middle::ty;\n use middle::typeck;\n use middle::typeck::MethodCall;\n@@ -373,6 +374,9 @@ pub struct ctxt {\n     /// to be valid. We gather up these restrictions in the intrinsicck pass\n     /// and check them in trans.\n     pub transmute_restrictions: RefCell<Vec<TransmuteRestriction>>,\n+\n+    /// Maps any item's def-id to its stability index.\n+    pub stability: RefCell<stability::Index>,\n }\n \n pub enum tbox_flag {\n@@ -1065,7 +1069,8 @@ pub fn mk_ctxt(s: Session,\n                map: ast_map::Map,\n                freevars: freevars::freevar_map,\n                region_maps: middle::region::RegionMaps,\n-               lang_items: middle::lang_items::LanguageItems)\n+               lang_items: middle::lang_items::LanguageItems,\n+               stability: stability::Index)\n             -> ctxt {\n     ctxt {\n         named_region_map: named_region_map,\n@@ -1119,6 +1124,7 @@ pub fn mk_ctxt(s: Session,\n         dependency_formats: RefCell::new(HashMap::new()),\n         node_lint_levels: RefCell::new(HashMap::new()),\n         transmute_restrictions: RefCell::new(Vec::new()),\n+        stability: RefCell::new(stability)\n     }\n }\n "}, {"sha": "a037c0ac07e0e14864a0612ac902c60ec8208f6a", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=6008f2c98276be3b880a5a75a0ac234cd866800e", "patch": "@@ -361,13 +361,14 @@ pub fn test_cfg<AM: AttrMetaMethods, It: Iterator<AM>>\n }\n \n /// Represents the #[deprecated=\"foo\"] and friends attributes.\n+#[deriving(Encodable,Decodable,Clone,Show)]\n pub struct Stability {\n     pub level: StabilityLevel,\n     pub text: Option<InternedString>\n }\n \n /// The available stability levels.\n-#[deriving(PartialEq,PartialOrd,Clone,Show)]\n+#[deriving(Encodable,Decodable,PartialEq,PartialOrd,Clone,Show)]\n pub enum StabilityLevel {\n     Deprecated,\n     Experimental,"}, {"sha": "af3dd94fe1d77f983c379b293f4f4b191049e900", "filename": "src/test/auxiliary/inherited_stability.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Ftest%2Fauxiliary%2Finherited_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Ftest%2Fauxiliary%2Finherited_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Finherited_stability.rs?ref=6008f2c98276be3b880a5a75a0ac234cd866800e", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![crate_id=\"inherited_stability#0.1\"]\n+#![crate_type = \"lib\"]\n+#![experimental]\n+\n+pub fn experimental() {}\n+\n+#[stable]\n+pub fn stable() {}\n+\n+#[stable]\n+pub mod stable_mod {\n+    #[experimental]\n+    pub fn experimental() {}\n+\n+    pub fn stable() {}\n+}\n+\n+pub mod experimental_mod {\n+    pub fn experimental() {}\n+\n+    #[stable]\n+    pub fn stable() {}\n+}\n+\n+#[stable]\n+pub trait Stable {\n+    #[experimental]\n+    fn experimental(&self);\n+\n+    fn stable(&self);\n+}\n+\n+impl Stable for uint {\n+    fn experimental(&self) {}\n+    fn stable(&self) {}\n+}\n+\n+pub enum Experimental {\n+    ExperimentalVariant,\n+    #[stable]\n+    StableVariant\n+}"}, {"sha": "00500da655f7f6308df5db0522b607f9f9f254cf", "filename": "src/test/auxiliary/lint_output_format.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Ftest%2Fauxiliary%2Flint_output_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Ftest%2Fauxiliary%2Flint_output_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_output_format.rs?ref=6008f2c98276be3b880a5a75a0ac234cd866800e", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_id=\"lint_output_format#0.1\"]\n+#![crate_type = \"lib\"]\n+\n+#[deprecated]\n+pub fn foo() -> uint {\n+    20\n+}\n+\n+#[experimental]\n+pub fn bar() -> uint {\n+    40\n+}\n+\n+#[unstable]\n+pub fn baz() -> uint {\n+    30\n+}"}, {"sha": "db60002b468e11ae48a3fd358b7777383becd975", "filename": "src/test/compile-fail/lint-output-format.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Ftest%2Fcompile-fail%2Flint-output-format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Ftest%2Fcompile-fail%2Flint-output-format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-output-format.rs?ref=6008f2c98276be3b880a5a75a0ac234cd866800e", "patch": "@@ -9,21 +9,10 @@\n // except according to those terms.\n \n // compile-flags:-F experimental -D unstable\n+// aux-build:lint_output_format.rs\n \n-#[deprecated]\n-fn foo() -> uint {\n-    20\n-}\n-\n-#[experimental]\n-fn bar() -> uint {\n-    40\n-}\n-\n-#[unstable]\n-fn baz() -> uint {\n-    30\n-}\n+extern crate lint_output_format;\n+use lint_output_format::{foo, bar, baz};\n \n fn main() {\n     let _x = foo(); //~ WARNING #[warn(deprecated)] on by default"}, {"sha": "5d06ad79c9bdfe5e33d394ecaf16e4bbf4bd2357", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 79, "deletions": 52, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6008f2c98276be3b880a5a75a0ac234cd866800e/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=6008f2c98276be3b880a5a75a0ac234cd866800e", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:lint_stability.rs\n+// aux-build:inherited_stability.rs\n \n #![feature(globs)]\n #![deny(unstable)]\n@@ -21,7 +22,6 @@ mod cross_crate {\n     use self::lint_stability::*;\n \n     fn test() {\n-        // FIXME: attributes on methods are not encoded cross crate.\n         let foo = MethodTester;\n \n         deprecated(); //~ ERROR use of deprecated item\n@@ -133,6 +133,29 @@ mod cross_crate {\n     }\n }\n \n+mod inheritance {\n+    extern crate inherited_stability;\n+    use self::inherited_stability::*;\n+\n+    fn test_inheritance() {\n+        experimental(); //~ ERROR use of experimental item\n+        stable();\n+\n+        stable_mod::experimental(); //~ ERROR use of experimental item\n+        stable_mod::stable();\n+\n+        experimental_mod::experimental(); //~ ERROR use of experimental item\n+        experimental_mod::stable();\n+\n+        let _ = ExperimentalVariant; //~ ERROR use of experimental item\n+        let _ = StableVariant;\n+\n+        let x: uint = 0;\n+        x.experimental(); //~ ERROR use of experimental item\n+        x.stable();\n+    }\n+}\n+\n mod this_crate {\n     #[deprecated]\n     pub fn deprecated() {}\n@@ -299,35 +322,39 @@ mod this_crate {\n     pub struct LockedTupleStruct(int);\n \n     fn test() {\n+        // None of the following should generate errors, because\n+        // stability attributes now have meaning only *across* crates,\n+        // not within a single crate.\n+\n         let foo = MethodTester;\n \n-        deprecated(); //~ ERROR use of deprecated item\n-        foo.method_deprecated(); //~ ERROR use of deprecated item\n-        foo.trait_deprecated(); //~ ERROR use of deprecated item\n+        deprecated();\n+        foo.method_deprecated();\n+        foo.trait_deprecated();\n \n-        deprecated_text(); //~ ERROR use of deprecated item: text\n-        foo.method_deprecated_text(); //~ ERROR use of deprecated item: text\n-        foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n+        deprecated_text();\n+        foo.method_deprecated_text();\n+        foo.trait_deprecated_text();\n \n-        experimental(); //~ ERROR use of experimental item\n-        foo.method_experimental(); //~ ERROR use of experimental item\n-        foo.trait_experimental(); //~ ERROR use of experimental item\n+        experimental();\n+        foo.method_experimental();\n+        foo.trait_experimental();\n \n-        experimental_text(); //~ ERROR use of experimental item: text\n-        foo.method_experimental_text(); //~ ERROR use of experimental item: text\n-        foo.trait_experimental_text(); //~ ERROR use of experimental item: text\n+        experimental_text();\n+        foo.method_experimental_text();\n+        foo.trait_experimental_text();\n \n-        unstable(); //~ ERROR use of unstable item\n-        foo.method_unstable(); //~ ERROR use of unstable item\n-        foo.trait_unstable(); //~ ERROR use of unstable item\n+        unstable();\n+        foo.method_unstable();\n+        foo.trait_unstable();\n \n-        unstable_text(); //~ ERROR use of unstable item: text\n-        foo.method_unstable_text(); //~ ERROR use of unstable item: text\n-        foo.trait_unstable_text(); //~ ERROR use of unstable item: text\n+        unstable_text();\n+        foo.method_unstable_text();\n+        foo.trait_unstable_text();\n \n-        unmarked(); //~ ERROR use of unmarked item\n-        foo.method_unmarked(); //~ ERROR use of unmarked item\n-        foo.trait_unmarked(); //~ ERROR use of unmarked item\n+        unmarked();\n+        foo.method_unmarked();\n+        foo.trait_unmarked();\n \n         stable();\n         foo.method_stable();\n@@ -354,58 +381,58 @@ mod this_crate {\n         foo.trait_locked_text();\n \n \n-        let _ = DeprecatedStruct { i: 0 }; //~ ERROR use of deprecated item\n-        let _ = ExperimentalStruct { i: 0 }; //~ ERROR use of experimental item\n-        let _ = UnstableStruct { i: 0 }; //~ ERROR use of unstable item\n-        let _ = UnmarkedStruct { i: 0 }; //~ ERROR use of unmarked item\n+        let _ = DeprecatedStruct { i: 0 };\n+        let _ = ExperimentalStruct { i: 0 };\n+        let _ = UnstableStruct { i: 0 };\n+        let _ = UnmarkedStruct { i: 0 };\n         let _ = StableStruct { i: 0 };\n         let _ = FrozenStruct { i: 0 };\n         let _ = LockedStruct { i: 0 };\n \n-        let _ = DeprecatedUnitStruct; //~ ERROR use of deprecated item\n-        let _ = ExperimentalUnitStruct; //~ ERROR use of experimental item\n-        let _ = UnstableUnitStruct; //~ ERROR use of unstable item\n-        let _ = UnmarkedUnitStruct; //~ ERROR use of unmarked item\n+        let _ = DeprecatedUnitStruct;\n+        let _ = ExperimentalUnitStruct;\n+        let _ = UnstableUnitStruct;\n+        let _ = UnmarkedUnitStruct;\n         let _ = StableUnitStruct;\n         let _ = FrozenUnitStruct;\n         let _ = LockedUnitStruct;\n \n-        let _ = DeprecatedVariant; //~ ERROR use of deprecated item\n-        let _ = ExperimentalVariant; //~ ERROR use of experimental item\n-        let _ = UnstableVariant; //~ ERROR use of unstable item\n-        let _ = UnmarkedVariant; //~ ERROR use of unmarked item\n+        let _ = DeprecatedVariant;\n+        let _ = ExperimentalVariant;\n+        let _ = UnstableVariant;\n+        let _ = UnmarkedVariant;\n         let _ = StableVariant;\n         let _ = FrozenVariant;\n         let _ = LockedVariant;\n \n-        let _ = DeprecatedTupleStruct (1); //~ ERROR use of deprecated item\n-        let _ = ExperimentalTupleStruct (1); //~ ERROR use of experimental item\n-        let _ = UnstableTupleStruct (1); //~ ERROR use of unstable item\n-        let _ = UnmarkedTupleStruct (1); //~ ERROR use of unmarked item\n+        let _ = DeprecatedTupleStruct (1);\n+        let _ = ExperimentalTupleStruct (1);\n+        let _ = UnstableTupleStruct (1);\n+        let _ = UnmarkedTupleStruct (1);\n         let _ = StableTupleStruct (1);\n         let _ = FrozenTupleStruct (1);\n         let _ = LockedTupleStruct (1);\n     }\n \n     fn test_method_param<F: Trait>(foo: F) {\n-        foo.trait_deprecated(); //~ ERROR use of deprecated item\n-        foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n-        foo.trait_experimental(); //~ ERROR use of experimental item\n-        foo.trait_experimental_text(); //~ ERROR use of experimental item: text\n-        foo.trait_unstable(); //~ ERROR use of unstable item\n-        foo.trait_unstable_text(); //~ ERROR use of unstable item: text\n-        foo.trait_unmarked(); //~ ERROR use of unmarked item\n+        foo.trait_deprecated();\n+        foo.trait_deprecated_text();\n+        foo.trait_experimental();\n+        foo.trait_experimental_text();\n+        foo.trait_unstable();\n+        foo.trait_unstable_text();\n+        foo.trait_unmarked();\n         foo.trait_stable();\n     }\n \n     fn test_method_object(foo: &Trait) {\n-        foo.trait_deprecated(); //~ ERROR use of deprecated item\n-        foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n-        foo.trait_experimental(); //~ ERROR use of experimental item\n-        foo.trait_experimental_text(); //~ ERROR use of experimental item: text\n-        foo.trait_unstable(); //~ ERROR use of unstable item\n-        foo.trait_unstable_text(); //~ ERROR use of unstable item: text\n-        foo.trait_unmarked(); //~ ERROR use of unmarked item\n+        foo.trait_deprecated();\n+        foo.trait_deprecated_text();\n+        foo.trait_experimental();\n+        foo.trait_experimental_text();\n+        foo.trait_unstable();\n+        foo.trait_unstable_text();\n+        foo.trait_unmarked();\n         foo.trait_stable();\n     }\n }"}]}