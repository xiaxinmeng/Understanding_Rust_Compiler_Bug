{"sha": "a9b1a3b40f29795d5f049e342ec4a494e83125e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YjFhM2I0MGYyOTc5NWQ1ZjA0OWUzNDJlYzRhNDk0ZTgzMTI1ZTk=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-08-07T09:25:31Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-08-09T08:17:40Z"}, "message": "refactored pprust::State constructor methods out from `pprust::print_crate`.\n\n(Groundwork for pretty-printing only selected items in an input crate.)", "tree": {"sha": "d613464957cdb7d1e0302563f766c9c5c951ef25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d613464957cdb7d1e0302563f766c9c5c951ef25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9b1a3b40f29795d5f049e342ec4a494e83125e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9b1a3b40f29795d5f049e342ec4a494e83125e9", "html_url": "https://github.com/rust-lang/rust/commit/a9b1a3b40f29795d5f049e342ec4a494e83125e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9b1a3b40f29795d5f049e342ec4a494e83125e9/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c2ff0ab1790208e5a81abdcebd29d9e7d5c2ccf", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c2ff0ab1790208e5a81abdcebd29d9e7d5c2ccf", "html_url": "https://github.com/rust-lang/rust/commit/4c2ff0ab1790208e5a81abdcebd29d9e7d5c2ccf"}], "stats": {"total": 75, "additions": 51, "deletions": 24}, "files": [{"sha": "9d4b7343c8a156fa63e039549773934a59199a8e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 51, "deletions": 24, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/a9b1a3b40f29795d5f049e342ec4a494e83125e9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b1a3b40f29795d5f049e342ec4a494e83125e9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=a9b1a3b40f29795d5f049e342ec4a494e83125e9", "patch": "@@ -97,35 +97,62 @@ pub fn print_crate<'a>(cm: &'a CodeMap,\n                        out: Box<io::Writer>,\n                        ann: &'a PpAnn,\n                        is_expanded: bool) -> IoResult<()> {\n-    let (cmnts, lits) = comments::gather_comments_and_literals(\n-        span_diagnostic,\n-        filename,\n-        input\n-    );\n-    let mut s = State {\n-        s: pp::mk_printer(out, default_columns),\n-        cm: Some(cm),\n-        comments: Some(cmnts),\n-        // If the code is post expansion, don't use the table of\n-        // literals, since it doesn't correspond with the literals\n-        // in the AST anymore.\n-        literals: if is_expanded {\n-            None\n-        } else {\n-            Some(lits)\n-        },\n-        cur_cmnt_and_lit: CurrentCommentAndLiteral {\n-            cur_cmnt: 0,\n-            cur_lit: 0\n-        },\n-        boxes: Vec::new(),\n-        ann: ann\n-    };\n+    let mut s = State::new_from_input(cm,\n+                                      span_diagnostic,\n+                                      filename,\n+                                      input,\n+                                      out,\n+                                      ann,\n+                                      is_expanded);\n     try!(s.print_mod(&krate.module, krate.attrs.as_slice()));\n     try!(s.print_remaining_comments());\n     eof(&mut s.s)\n }\n \n+impl<'a> State<'a> {\n+    pub fn new_from_input(cm: &'a CodeMap,\n+                          span_diagnostic: &diagnostic::SpanHandler,\n+                          filename: String,\n+                          input: &mut io::Reader,\n+                          out: Box<io::Writer>,\n+                          ann: &'a PpAnn,\n+                          is_expanded: bool) -> State<'a> {\n+        let (cmnts, lits) = comments::gather_comments_and_literals(\n+            span_diagnostic,\n+            filename,\n+            input);\n+\n+        State::new(\n+            cm,\n+            out,\n+            ann,\n+            Some(cmnts),\n+            // If the code is post expansion, don't use the table of\n+            // literals, since it doesn't correspond with the literals\n+            // in the AST anymore.\n+            if is_expanded { None } else { Some(lits) })\n+    }\n+\n+    pub fn new(cm: &'a CodeMap,\n+               out: Box<io::Writer>,\n+               ann: &'a PpAnn,\n+               comments: Option<Vec<comments::Comment>>,\n+               literals: Option<Vec<comments::Literal>>) -> State<'a> {\n+        State {\n+            s: pp::mk_printer(out, default_columns),\n+            cm: Some(cm),\n+            comments: comments,\n+            literals: literals,\n+            cur_cmnt_and_lit: CurrentCommentAndLiteral {\n+                cur_cmnt: 0,\n+                cur_lit: 0\n+            },\n+            boxes: Vec::new(),\n+            ann: ann\n+        }\n+    }\n+}\n+\n pub fn to_string(f: |&mut State| -> IoResult<()>) -> String {\n     let mut s = rust_printer(box MemWriter::new());\n     f(&mut s).unwrap();"}]}