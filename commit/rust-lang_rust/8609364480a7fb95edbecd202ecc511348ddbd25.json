{"sha": "8609364480a7fb95edbecd202ecc511348ddbd25", "node_id": "C_kwDOAAsO6NoAKDg2MDkzNjQ0ODBhN2ZiOTVlZGJlY2QyMDJlY2M1MTEzNDhkZGJkMjU", "commit": {"author": {"name": "Sarthak Singh", "email": "ss269@uw.edu", "date": "2022-10-30T12:08:49Z"}, "committer": {"name": "Sarthak Singh", "email": "ss269@uw.edu", "date": "2022-10-30T15:07:43Z"}, "message": "All verbosity checks in `PrettyPrinter` now go through `PrettyPrinter::should_print_verbose`", "tree": {"sha": "57f47ed5e68b333067a351a128f253c1d753020d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57f47ed5e68b333067a351a128f253c1d753020d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8609364480a7fb95edbecd202ecc511348ddbd25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8609364480a7fb95edbecd202ecc511348ddbd25", "html_url": "https://github.com/rust-lang/rust/commit/8609364480a7fb95edbecd202ecc511348ddbd25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8609364480a7fb95edbecd202ecc511348ddbd25/comments", "author": {"login": "SarthakSingh31", "id": 35749450, "node_id": "MDQ6VXNlcjM1NzQ5NDUw", "avatar_url": "https://avatars.githubusercontent.com/u/35749450?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SarthakSingh31", "html_url": "https://github.com/SarthakSingh31", "followers_url": "https://api.github.com/users/SarthakSingh31/followers", "following_url": "https://api.github.com/users/SarthakSingh31/following{/other_user}", "gists_url": "https://api.github.com/users/SarthakSingh31/gists{/gist_id}", "starred_url": "https://api.github.com/users/SarthakSingh31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SarthakSingh31/subscriptions", "organizations_url": "https://api.github.com/users/SarthakSingh31/orgs", "repos_url": "https://api.github.com/users/SarthakSingh31/repos", "events_url": "https://api.github.com/users/SarthakSingh31/events{/privacy}", "received_events_url": "https://api.github.com/users/SarthakSingh31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SarthakSingh31", "id": 35749450, "node_id": "MDQ6VXNlcjM1NzQ5NDUw", "avatar_url": "https://avatars.githubusercontent.com/u/35749450?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SarthakSingh31", "html_url": "https://github.com/SarthakSingh31", "followers_url": "https://api.github.com/users/SarthakSingh31/followers", "following_url": "https://api.github.com/users/SarthakSingh31/following{/other_user}", "gists_url": "https://api.github.com/users/SarthakSingh31/gists{/gist_id}", "starred_url": "https://api.github.com/users/SarthakSingh31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SarthakSingh31/subscriptions", "organizations_url": "https://api.github.com/users/SarthakSingh31/orgs", "repos_url": "https://api.github.com/users/SarthakSingh31/repos", "events_url": "https://api.github.com/users/SarthakSingh31/events{/privacy}", "received_events_url": "https://api.github.com/users/SarthakSingh31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b03502b35d111bef0399a66ab3cc765f0802e8ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/b03502b35d111bef0399a66ab3cc765f0802e8ba", "html_url": "https://github.com/rust-lang/rust/commit/b03502b35d111bef0399a66ab3cc765f0802e8ba"}], "stats": {"total": 61, "additions": 35, "deletions": 26}, "files": [{"sha": "b15606baee5882b4e9d73acc0d5b797e2c90b261", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8609364480a7fb95edbecd202ecc511348ddbd25/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8609364480a7fb95edbecd202ecc511348ddbd25/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=8609364480a7fb95edbecd202ecc511348ddbd25", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::definitions::DisambiguatedDefPathData;\n use rustc_middle::mir::interpret::{Allocation, ConstAllocation};\n use rustc_middle::ty::{\n     self,\n-    print::{with_no_verbose_constants, PrettyPrinter, Print, Printer},\n+    print::{PrettyPrinter, Print, Printer},\n     subst::{GenericArg, GenericArgKind},\n     Ty, TyCtxt,\n };\n@@ -179,6 +179,11 @@ impl<'tcx> PrettyPrinter<'tcx> for AbsolutePathPrinter<'tcx> {\n \n         Ok(self)\n     }\n+\n+    fn should_print_verbose(&self) -> bool {\n+        // `std::any::type_name` should never print verbose type names\n+        false\n+    }\n }\n \n impl Write for AbsolutePathPrinter<'_> {\n@@ -190,9 +195,7 @@ impl Write for AbsolutePathPrinter<'_> {\n \n /// Directly returns an `Allocation` containing an absolute path representation of the given type.\n pub(crate) fn alloc_type_name<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> ConstAllocation<'tcx> {\n-    let path = with_no_verbose_constants!(\n-        AbsolutePathPrinter { tcx, path: String::new() }.print_type(ty).unwrap().path\n-    );\n+    let path = AbsolutePathPrinter { tcx, path: String::new() }.print_type(ty).unwrap().path;\n     let alloc = Allocation::from_bytes_byte_aligned_immutable(path.into_bytes());\n     tcx.intern_const_alloc(alloc)\n }"}, {"sha": "f07c60af248290c25e4eb3c830eaad1f9319b882", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8609364480a7fb95edbecd202ecc511348ddbd25/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8609364480a7fb95edbecd202ecc511348ddbd25/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=8609364480a7fb95edbecd202ecc511348ddbd25", "patch": "@@ -63,7 +63,6 @@ thread_local! {\n     static NO_TRIMMED_PATH: Cell<bool> = const { Cell::new(false) };\n     static NO_QUERIES: Cell<bool> = const { Cell::new(false) };\n     static NO_VISIBLE_PATH: Cell<bool> = const { Cell::new(false) };\n-    static NO_VERBOSE_CONSTANTS: Cell<bool> = const { Cell::new(false) };\n }\n \n macro_rules! define_helper {\n@@ -118,9 +117,6 @@ define_helper!(\n     /// Prevent selection of visible paths. `Display` impl of DefId will prefer\n     /// visible (public) reexports of types as paths.\n     fn with_no_visible_paths(NoVisibleGuard, NO_VISIBLE_PATH);\n-    /// Prevent verbose printing of constants. Verbose printing of constants is\n-    /// never desirable in some contexts like `std::any::type_name`.\n-    fn with_no_verbose_constants(NoVerboseConstantsGuard, NO_VERBOSE_CONSTANTS);\n );\n \n /// The \"region highlights\" are used to control region printing during\n@@ -600,7 +596,7 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::FnPtr(ref bare_fn) => p!(print(bare_fn)),\n             ty::Infer(infer_ty) => {\n-                let verbose = self.tcx().sess.verbose();\n+                let verbose = self.should_print_verbose();\n                 if let ty::TyVar(ty_vid) = infer_ty {\n                     if let Some(name) = self.ty_infer_name(ty_vid) {\n                         p!(write(\"{}\", name))\n@@ -642,7 +638,7 @@ pub trait PrettyPrinter<'tcx>:\n                 p!(print_def_path(def_id, &[]));\n             }\n             ty::Projection(ref data) => {\n-                if !(self.tcx().sess.verbose() || NO_QUERIES.with(|q| q.get()))\n+                if !(self.should_print_verbose() || NO_QUERIES.with(|q| q.get()))\n                     && self.tcx().def_kind(data.item_def_id) == DefKind::ImplTraitPlaceholder\n                 {\n                     return self.pretty_print_opaque_impl_type(data.item_def_id, data.substs);\n@@ -658,7 +654,7 @@ pub trait PrettyPrinter<'tcx>:\n                 // only affect certain debug messages (e.g. messages printed\n                 // from `rustc_middle::ty` during the computation of `tcx.predicates_of`),\n                 // and should have no effect on any compiler output.\n-                if self.tcx().sess.verbose() || NO_QUERIES.with(|q| q.get()) {\n+                if self.should_print_verbose() || NO_QUERIES.with(|q| q.get()) {\n                     p!(write(\"Opaque({:?}, {:?})\", def_id, substs));\n                     return Ok(self);\n                 }\n@@ -689,7 +685,7 @@ pub trait PrettyPrinter<'tcx>:\n                     hir::Movability::Static => p!(\"static \"),\n                 }\n \n-                if !self.tcx().sess.verbose() {\n+                if !self.should_print_verbose() {\n                     p!(\"generator\");\n                     // FIXME(eddyb) should use `def_span`.\n                     if let Some(did) = did.as_local() {\n@@ -725,7 +721,7 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::Closure(did, substs) => {\n                 p!(write(\"[\"));\n-                if !self.tcx().sess.verbose() {\n+                if !self.should_print_verbose() {\n                     p!(write(\"closure\"));\n                     // FIXME(eddyb) should use `def_span`.\n                     if let Some(did) = did.as_local() {\n@@ -763,7 +759,7 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::Array(ty, sz) => {\n                 p!(\"[\", print(ty), \"; \");\n-                if !NO_VERBOSE_CONSTANTS.with(|flag| flag.get()) && self.tcx().sess.verbose() {\n+                if self.should_print_verbose() {\n                     p!(write(\"{:?}\", sz));\n                 } else if let ty::ConstKind::Unevaluated(..) = sz.kind() {\n                     // Do not try to evaluate unevaluated constants. If we are const evaluating an\n@@ -1077,7 +1073,7 @@ pub trait PrettyPrinter<'tcx>:\n \n                 // Special-case `Fn(...) -> ...` and re-sugar it.\n                 let fn_trait_kind = cx.tcx().fn_trait_kind_from_lang_item(principal.def_id);\n-                if !cx.tcx().sess.verbose() && fn_trait_kind.is_some() {\n+                if !cx.should_print_verbose() && fn_trait_kind.is_some() {\n                     if let ty::Tuple(tys) = principal.substs.type_at(0).kind() {\n                         let mut projections = predicates.projection_bounds();\n                         if let (Some(proj), None) = (projections.next(), projections.next()) {\n@@ -1185,7 +1181,7 @@ pub trait PrettyPrinter<'tcx>:\n     ) -> Result<Self::Const, Self::Error> {\n         define_scoped_cx!(self);\n \n-        if !NO_VERBOSE_CONSTANTS.with(|flag| flag.get()) && self.tcx().sess.verbose() {\n+        if self.should_print_verbose() {\n             p!(write(\"Const({:?}: {:?})\", ct.kind(), ct.ty()));\n             return Ok(self);\n         }\n@@ -1420,7 +1416,7 @@ pub trait PrettyPrinter<'tcx>:\n     ) -> Result<Self::Const, Self::Error> {\n         define_scoped_cx!(self);\n \n-        if !NO_VERBOSE_CONSTANTS.with(|flag| flag.get()) && self.tcx().sess.verbose() {\n+        if self.should_print_verbose() {\n             p!(write(\"ValTree({:?}: \", valtree), print(ty), \")\");\n             return Ok(self);\n         }\n@@ -1564,6 +1560,10 @@ pub trait PrettyPrinter<'tcx>:\n             Ok(cx)\n         })\n     }\n+\n+    fn should_print_verbose(&self) -> bool {\n+        self.tcx().sess.verbose()\n+    }\n }\n \n // HACK(eddyb) boxed to avoid moving around a large struct by-value.\n@@ -1839,7 +1839,7 @@ impl<'tcx> Printer<'tcx> for FmtPrinter<'_, 'tcx> {\n             }\n         }\n \n-        let verbose = self.tcx.sess.verbose();\n+        let verbose = self.should_print_verbose();\n         disambiguated_data.fmt_maybe_verbose(&mut self, verbose)?;\n \n         self.empty_path = false;\n@@ -1940,7 +1940,7 @@ impl<'tcx> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx> {\n             return true;\n         }\n \n-        if self.tcx.sess.verbose() {\n+        if self.should_print_verbose() {\n             return true;\n         }\n \n@@ -2012,7 +2012,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n             return Ok(self);\n         }\n \n-        if self.tcx.sess.verbose() {\n+        if self.should_print_verbose() {\n             p!(write(\"{:?}\", region));\n             return Ok(self);\n         }\n@@ -2218,7 +2218,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n         // aren't named. Eventually, we might just want this as the default, but\n         // this is not *quite* right and changes the ordering of some output\n         // anyways.\n-        let (new_value, map) = if self.tcx().sess.verbose() {\n+        let (new_value, map) = if self.should_print_verbose() {\n             let regions: Vec<_> = value\n                 .bound_vars()\n                 .into_iter()"}, {"sha": "64f0c09e89bca1ec914b82a0d08b89540a997f09", "filename": "src/test/ui/type/issue-94187-verbose-type-name.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8609364480a7fb95edbecd202ecc511348ddbd25/src%2Ftest%2Fui%2Ftype%2Fissue-94187-verbose-type-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8609364480a7fb95edbecd202ecc511348ddbd25/src%2Ftest%2Fui%2Ftype%2Fissue-94187-verbose-type-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-94187-verbose-type-name.rs?ref=8609364480a7fb95edbecd202ecc511348ddbd25", "patch": "@@ -1,13 +1,19 @@\n-// Check to insure that the output of `std::any::type_name` does not change based on -Zverbose\n-// when printing constants\n+// Check to insure that the output of `std::any::type_name` does not change based on `-Zverbose`\n // run-pass\n // edition: 2018\n // revisions: normal verbose\n // [verbose]compile-flags:-Zverbose\n \n-struct Wrapper<const VALUE: usize>;\n+use std::any::type_name;\n \n fn main() {\n-    assert_eq!(std::any::type_name::<[u32; 0]>(), \"[u32; 0]\");\n-    assert_eq!(std::any::type_name::<Wrapper<0>>(), \"issue_94187_verbose_type_name::Wrapper<0>\");\n+    assert_eq!(type_name::<[u32; 0]>(), \"[u32; 0]\");\n+\n+    struct Wrapper<const VALUE: usize>;\n+    assert_eq!(type_name::<Wrapper<0>>(), \"issue_94187_verbose_type_name::main::Wrapper<0>\");\n+\n+    assert_eq!(\n+        type_name::<dyn Fn(u32) -> u32>(),\n+        \"dyn core::ops::function::Fn<(u32,)>+Output = u32\"\n+    );\n }"}]}