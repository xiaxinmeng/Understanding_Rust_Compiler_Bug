{"sha": "9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljYTM0ZTM3ZmE5MzI4YmJkOWYxZmQ3NTVhZmE1N2NmYjgyYmRkYzE=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-03-09T07:51:23Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-03-12T05:53:25Z"}, "message": "Run more doc tests\n\nThis executes some more doc tests that were ignored before.", "tree": {"sha": "bad49e0055a1731c42f2a6129c767cc49935d98b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bad49e0055a1731c42f2a6129c767cc49935d98b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlyHSVYACgkQtvoGpuDi\nZlt6tg//Q0dOyp4nqrMCC+14nUFw6OW+quLwexIZ4ZiQGxbwgTQwc0VIpuG8EEYC\nO+EGXhnnjrPM8WSKYPRqI3F9luBxAFnesXWiqs/1Up8unSZ93LC19TsUQpNKrmqb\nA7T1FiTR2XnVK7zkvhvhZooF5LVYz/N7lP5AAaGBKEqDLBQD2gC8riRFiFiAv5/8\nJxxEc9eCodJc75oFRGHRBOjKf5uQeVYGTxKp3gw+gNezcMz2avkQF8LbcDzfcmik\n721hV3+gX2+3L3oWBEe9k5YVYFg+YvDMxdRsM1e+hpXhjNj6K3Xu/Sw/9jsvSBCE\ntg7U81cWAAnlBdUTzIxYtbF9KnMQZ1Vvvxb364YHXWYeb4jySz8sUl5QxcuiChT7\nXMwCg1ij8zIvS5x3uwMgkbaGyRr5ayORyuqk705bjQroG1NbzgLp6NPwKXbFjV8G\nUYDgDQFGBudbyO1JyHtFHaO1oc1CYH8ke2e0xscMOJkhuGWtKq+rOxBx88iJa3Qu\nh2tHPrUhbTpB5lZiMDoltJcNgi1mBAGAOz4UcxqaDs1exJJQ76jQBogIAyB+ze6c\n6Tvg0yJ/6FXkJTpdm4c9dtXZRt7vFilh2TgwiuW1QP2R0AB/xKZreOM4EKZL6mc0\n/qJAuCaZKAC0q3vXtmO+Ga7EumefQBdNlgQ5OE3a68wqAfYvuhM=\n=AenB\n-----END PGP SIGNATURE-----", "payload": "tree bad49e0055a1731c42f2a6129c767cc49935d98b\nparent 1cdac4a9c798f8e22a4db220020713175eb9159b\nauthor Philipp Hansch <dev@phansch.net> 1552117883 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1552370005 +0100\n\nRun more doc tests\n\nThis executes some more doc tests that were ignored before.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1", "html_url": "https://github.com/rust-lang/rust/commit/9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cdac4a9c798f8e22a4db220020713175eb9159b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cdac4a9c798f8e22a4db220020713175eb9159b", "html_url": "https://github.com/rust-lang/rust/commit/1cdac4a9c798f8e22a4db220020713175eb9159b"}], "stats": {"total": 155, "additions": 103, "deletions": 52}, "files": [{"sha": "76314a610b16ad2c77dabb7e0c022bbdc5ff9fc4", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1", "patch": "@@ -37,8 +37,9 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```ignore\n-    /// if (x & 1 == 2) { \u2026 }\n+    /// ```rust\n+    /// # let x = 1;\n+    /// if (x & 1 == 2) { }\n     /// ```\n     pub BAD_BIT_MASK,\n     correctness,\n@@ -65,8 +66,9 @@ declare_clippy_lint! {\n     /// uncommon).\n     ///\n     /// **Example:**\n-    /// ```ignore\n-    /// if (x | 1 > 3) { \u2026 }\n+    /// ```rust\n+    /// # let x = 1;\n+    /// if (x | 1 > 3) {  }\n     /// ```\n     pub INEFFECTIVE_BIT_MASK,\n     correctness,\n@@ -83,8 +85,9 @@ declare_clippy_lint! {\n     /// **Known problems:** llvm generates better code for `x & 15 == 0` on x86\n     ///\n     /// **Example:**\n-    /// ```ignore\n-    /// x & 0x1111 == 0\n+    /// ```rust\n+    /// # let x = 1;\n+    /// if x & 0x1111 == 0 { }\n     /// ```\n     pub VERBOSE_BIT_MASK,\n     style,"}, {"sha": "1f42a06fbcd3dc768c3781a74abe3aa94a2d64c8", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1", "patch": "@@ -19,8 +19,9 @@ declare_clippy_lint! {\n     /// calls. We may introduce a whitelist of known pure functions in the future.\n     ///\n     /// **Example:**\n-    /// ```ignore\n-    /// x + 1 == x + 1\n+    /// ```rust\n+    /// # let x = 1;\n+    /// if x + 1 == x + 1 {}\n     /// ```\n     pub EQ_OP,\n     correctness,"}, {"sha": "7bd3fd7f4c412d607fce833c2642def31aecaba5", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1", "patch": "@@ -27,7 +27,9 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```ignore\n+    /// ```rust\n+    /// # fn bar(stool: &str) {}\n+    /// # let x = Some(\"abc\");\n     /// match x {\n     ///     Some(ref foo) => bar(foo),\n     ///     _ => (),\n@@ -59,7 +61,7 @@ declare_clippy_lint! {\n     ///\n     /// Using `if let` with `else`:\n     ///\n-    /// ```ignore\n+    /// ```rust\n     /// if let Some(ref foo) = x {\n     ///     bar(foo);\n     /// } else {\n@@ -82,7 +84,7 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```ignore\n+    /// ```rust,ignore\n     /// match x {\n     ///     &A(ref y) => foo(y),\n     ///     &B => bar(),\n@@ -103,15 +105,19 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```ignore\n+    /// ```rust\n+    /// # fn foo() {}\n+    /// # fn bar() {}\n     /// let condition: bool = true;\n     /// match condition {\n     ///     true => foo(),\n     ///     false => bar(),\n     /// }\n     /// ```\n     /// Use if/else instead:\n-    /// ```ignore\n+    /// ```rust\n+    /// # fn foo() {}\n+    /// # fn bar() {}\n     /// let condition: bool = true;\n     /// if condition {\n     ///     foo();"}, {"sha": "a1e0f9d8345aa970919562e5ad7d91dfd9ff3935", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1", "patch": "@@ -54,8 +54,11 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```ignore\n-    /// x == NAN\n+    /// ```rust\n+    /// # use core::f32::NAN;\n+    /// # let x = 1.0;\n+    ///\n+    /// if x == NAN { }\n     /// ```\n     pub CMP_NAN,\n     correctness,\n@@ -75,9 +78,11 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```ignore\n-    /// y == 1.23f64\n-    /// y != x  // where both are floats\n+    /// ```rust\n+    /// let x = 1.2331f64;\n+    /// let y = 1.2332f64;\n+    /// if y == 1.23f64 { }\n+    /// if y != x {} // where both are floats\n     /// ```\n     pub FLOAT_CMP,\n     correctness,\n@@ -114,8 +119,9 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```ignore\n-    /// x % 1\n+    /// ```rust\n+    /// # let x = 1;\n+    /// let a = x % 1;\n     /// ```\n     pub MODULO_ONE,\n     correctness,\n@@ -131,7 +137,9 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```ignore\n+    /// ```rust\n+    /// # let v = Some(\"abc\");\n+    ///\n     /// match v {\n     ///     Some(x) => (),\n     ///     y @ _ => (), // easier written as `y`,\n@@ -194,8 +202,8 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     ///\n-    /// ```ignore\n-    /// 0 as *const u32\n+    /// ```rust\n+    /// let a = 0 as *const u32;\n     /// ```\n     pub ZERO_PTR,\n     style,"}, {"sha": "b54442413ed56ed81fc63a2731f907b6a32c6bed", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1", "patch": "@@ -2,9 +2,12 @@\n //!\n //! For example, the lint would catch\n //!\n-//! ```ignore\n-//! while condition() {\n-//!     update_condition();\n+//! ```rust\n+//! let mut a = 1;\n+//! let x = true;\n+//!\n+//! while a < 5 {\n+//!     a = 6;\n //!     if x {\n //!         // ...\n //!     } else {\n@@ -16,9 +19,12 @@\n //!\n //! And suggest something like this:\n //!\n-//! ```ignore\n-//! while condition() {\n-//!     update_condition();\n+//! ```rust\n+//! let mut a = 1;\n+//! let x = true;\n+//!\n+//! while a < 5 {\n+//!     a = 6;\n //!     if x {\n //!         // ...\n //!         println!(\"Hello, world\");\n@@ -374,7 +380,7 @@ fn check_and_warn<'a>(ctx: &EarlyContext<'_>, expr: &'a ast::Expr) {\n /// continues eating till a non-whitespace character is found.\n /// e.g., the string\n ///\n-/// ```\n+/// ```rust\n /// {\n ///     let x = 5;\n /// }"}, {"sha": "32a67f3943993608729ecd1eb302aff3d2b57e46", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1", "patch": "@@ -19,7 +19,7 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```rust,ignore\n+    /// ```rust\n     /// let t = b;\n     /// b = a;\n     /// a = t;\n@@ -41,7 +41,9 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```rust,ignore\n+    /// ```rust\n+    /// # let mut a = 1;\n+    /// # let mut b = 2;\n     /// a = b;\n     /// b = a;\n     /// ```"}, {"sha": "6f122daf71ab4ad69adfdd14cd3839aeaee3d6b7", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1", "patch": "@@ -511,7 +511,10 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```ignore\n+    /// ```rust\n+    /// # fn foo() {};\n+    /// # fn bar() {};\n+    /// # fn baz() {};\n     /// if {\n     ///     foo();\n     /// } == {\n@@ -521,7 +524,10 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     /// is equal to\n-    /// ```ignore\n+    /// ```rust\n+    /// # fn foo() {};\n+    /// # fn bar() {};\n+    /// # fn baz() {};\n     /// {\n     ///     foo();\n     ///     bar();\n@@ -850,13 +856,13 @@ declare_clippy_lint! {\n     ///\n     /// **Example**\n     ///\n-    /// ```ignore\n+    /// ```rust\n     /// // Bad\n-    /// fn fun() -> i32 {}\n+    /// fn fun() -> i32 { 1 }\n     /// let a = fun as i64;\n     ///\n     /// // Good\n-    /// fn fun2() -> i32 {}\n+    /// fn fun2() -> i32 { 1 }\n     /// let a = fun2 as usize;\n     /// ```\n     pub FN_TO_NUMERIC_CAST,\n@@ -1538,9 +1544,11 @@ declare_clippy_lint! {\n     /// like `#[cfg(target_pointer_width = \"64\")] ..` instead.\n     ///\n     /// **Example:**\n-    /// ```rust,ignore\n-    /// vec.len() <= 0\n-    /// 100 > std::i32::MAX\n+    ///\n+    /// ```rust\n+    /// let vec: Vec<isize> = vec![];\n+    /// if vec.len() <= 0 {}\n+    /// if 100 > std::i32::MAX {}\n     /// ```\n     pub ABSURD_EXTREME_COMPARISONS,\n     correctness,\n@@ -1963,10 +1971,13 @@ declare_clippy_lint! {\n     /// pieces of code, possibly including external crates.\n     ///\n     /// **Example:**\n-    /// ```ignore\n-    /// impl<K: Hash + Eq, V> Serialize for HashMap<K, V> { ... }\n+    /// ```rust\n+    /// # use std::collections::HashMap;\n+    /// # use std::hash::Hash;\n+    /// # trait Serialize {};\n+    /// impl<K: Hash + Eq, V> Serialize for HashMap<K, V> { }\n     ///\n-    /// pub foo(map: &mut HashMap<i32, i32>) { .. }\n+    /// pub fn foo(map: &mut HashMap<i32, i32>) { }\n     /// ```\n     pub IMPLICIT_HASHER,\n     style,\n@@ -2304,7 +2315,7 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```ignore\n+    /// ```rust,ignore\n     /// fn x(r: &i32) {\n     ///     unsafe {\n     ///         *(r as *const _ as *mut _) += 1;\n@@ -2314,7 +2325,9 @@ declare_clippy_lint! {\n     ///\n     /// Instead consider using interior mutability types.\n     ///\n-    /// ```ignore\n+    /// ```rust\n+    /// use std::cell::UnsafeCell;\n+    ///\n     /// fn x(r: &UnsafeCell<i32>) {\n     ///     unsafe {\n     ///         *r.get() += 1;"}, {"sha": "c0ffb16c3574e45399e927a63d5bc246abf25a16", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=9ca34e37fa9328bbd9f1fd755afa57cfb82bddc1", "patch": "@@ -35,11 +35,13 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```ignore\n+    /// ```rust\n+    /// # let name = \"World\";\n     /// print!(\"Hello {}!\\n\", name);\n     /// ```\n     /// use println!() instead\n-    /// ```ignore\n+    /// ```rust\n+    /// # let name = \"World\";\n     /// println!(\"Hello {}!\", name);\n     /// ```\n     pub PRINT_WITH_NEWLINE,\n@@ -113,7 +115,9 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```ignore\n+    /// ```rust\n+    /// # use std::fmt::Write;\n+    /// # let mut buf = String::new();\n     /// writeln!(buf, \"\");\n     /// ```\n     pub WRITELN_EMPTY_STRING,\n@@ -132,7 +136,10 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```ignore\n+    /// ```rust\n+    /// # use std::fmt::Write;\n+    /// # let mut buf = String::new();\n+    /// # let name = \"World\";\n     /// write!(buf, \"Hello {}!\\n\", name);\n     /// ```\n     pub WRITE_WITH_NEWLINE,\n@@ -151,7 +158,9 @@ declare_clippy_lint! {\n     /// -- e.g., `writeln!(buf, \"{}\", env!(\"FOO\"))`.\n     ///\n     /// **Example:**\n-    /// ```ignore\n+    /// ```rust\n+    /// # use std::fmt::Write;\n+    /// # let mut buf = String::new();\n     /// writeln!(buf, \"{}\", \"foo\");\n     /// ```\n     pub WRITE_LITERAL,\n@@ -259,8 +268,11 @@ impl EarlyLintPass for Pass {\n /// Example:\n ///\n /// Calling this function on\n-/// ```rust,ignore\n-/// writeln!(buf, \"string to write: {}\", something)\n+/// ```rust\n+/// # use std::fmt::Write;\n+/// # let mut buf = String::new();\n+/// # let something = \"something\";\n+/// writeln!(buf, \"string to write: {}\", something);\n /// ```\n /// will return\n /// ```rust,ignore"}]}