{"sha": "bea67bde21d36df40c55b02cd8d8b28c0ec864b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYTY3YmRlMjFkMzZkZjQwYzU1YjAyY2Q4ZDhiMjhjMGVjODY0YjY=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-13T18:48:09Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-15T02:14:16Z"}, "message": "Change ast::path into a struct.", "tree": {"sha": "4970407fc9c5b4662e315e9fe66281cfa6a93c44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4970407fc9c5b4662e315e9fe66281cfa6a93c44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bea67bde21d36df40c55b02cd8d8b28c0ec864b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bea67bde21d36df40c55b02cd8d8b28c0ec864b6", "html_url": "https://github.com/rust-lang/rust/commit/bea67bde21d36df40c55b02cd8d8b28c0ec864b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bea67bde21d36df40c55b02cd8d8b28c0ec864b6/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1be4bfb8ccfd6a91fe63cc2808f3c5e9177d52dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1be4bfb8ccfd6a91fe63cc2808f3c5e9177d52dd", "html_url": "https://github.com/rust-lang/rust/commit/1be4bfb8ccfd6a91fe63cc2808f3c5e9177d52dd"}], "stats": {"total": 215, "additions": 144, "deletions": 71}, "files": [{"sha": "d8d48d023d0ee498dac18781fe4c30f1efb59e56", "filename": "src/librustc/front/core_inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea67bde21d36df40c55b02cd8d8b28c0ec864b6/src%2Flibrustc%2Ffront%2Fcore_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea67bde21d36df40c55b02cd8d8b28c0ec864b6/src%2Flibrustc%2Ffront%2Fcore_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fcore_inject.rs?ref=bea67bde21d36df40c55b02cd8d8b28c0ec864b6", "patch": "@@ -76,7 +76,7 @@ fn inject_libcore_ref(sess: Session,\n         fold_mod: |module, fld| {\n             let n2 = sess.next_node_id();\n \n-            let prelude_path = @{\n+            let prelude_path = @ast::path {\n                 span: dummy_sp(),\n                 global: false,\n                 idents: ~["}, {"sha": "68f1405063f7d853a05d88d78f69bbe4de556d91", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bea67bde21d36df40c55b02cd8d8b28c0ec864b6/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea67bde21d36df40c55b02cd8d8b28c0ec864b6/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=bea67bde21d36df40c55b02cd8d8b28c0ec864b6", "patch": "@@ -244,11 +244,19 @@ fn nospan<T: Copy>(t: T) -> ast::spanned<T> {\n }\n \n fn path_node(+ids: ~[ast::ident]) -> @ast::path {\n-    @{span: dummy_sp(), global: false, idents: ids, rp: None, types: ~[]}\n+    @ast::path { span: dummy_sp(),\n+                 global: false,\n+                 idents: ids,\n+                 rp: None,\n+                 types: ~[] }\n }\n \n fn path_node_global(+ids: ~[ast::ident]) -> @ast::path {\n-    @{span: dummy_sp(), global: true, idents: ids, rp: None, types: ~[]}\n+    @ast::path { span: dummy_sp(),\n+                 global: true,\n+                 idents: ids,\n+                 rp: None,\n+                 types: ~[] }\n }\n \n fn mk_std(cx: test_ctxt) -> @ast::view_item {"}, {"sha": "05d2a996171f07f265d1114507c3d50ace16746c", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bea67bde21d36df40c55b02cd8d8b28c0ec864b6/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea67bde21d36df40c55b02cd8d8b28c0ec864b6/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=bea67bde21d36df40c55b02cd8d8b28c0ec864b6", "patch": "@@ -101,9 +101,11 @@ fn parse_path(st: @pstate) -> @ast::path {\n           ':' => { next(st); next(st); }\n           c => {\n             if c == '(' {\n-                return @{span: ast_util::dummy_sp(),\n-                      global: false, idents: idents,\n-                      rp: None, types: ~[]};\n+                return @ast::path { span: ast_util::dummy_sp(),\n+                                    global: false,\n+                                    idents: idents,\n+                                    rp: None,\n+                                    types: ~[] };\n             } else { idents.push(parse_ident_(st, is_last)); }\n           }\n         }"}, {"sha": "f5fbb11655b68703d07abaaa0b80788a6a591a32", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bea67bde21d36df40c55b02cd8d8b28c0ec864b6/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea67bde21d36df40c55b02cd8d8b28c0ec864b6/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=bea67bde21d36df40c55b02cd8d8b28c0ec864b6", "patch": "@@ -79,11 +79,13 @@ type fn_ident = Option<ident>;\n \n #[auto_encode]\n #[auto_decode]\n-type path = {span: span,\n-             global: bool,\n-             idents: ~[ident],\n-             rp: Option<@region>,\n-             types: ~[@Ty]};\n+struct path {\n+    span: span,\n+    global: bool,\n+    idents: ~[ident],\n+    rp: Option<@region>,\n+    types: ~[@Ty],\n+}\n \n type crate_num = int;\n "}, {"sha": "d2012637b02634329da121091c425aad21dcd4e7", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bea67bde21d36df40c55b02cd8d8b28c0ec864b6/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea67bde21d36df40c55b02cd8d8b28c0ec864b6/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=bea67bde21d36df40c55b02cd8d8b28c0ec864b6", "patch": "@@ -294,8 +294,11 @@ fn default_block(+stmts1: ~[@stmt], expr1: Option<@expr>, id1: node_id) ->\n }\n \n fn ident_to_path(s: span, +i: ident) -> @path {\n-    @{span: s, global: false, idents: ~[i],\n-      rp: None, types: ~[]}\n+    @ast::path { span: s,\n+                 global: false,\n+                 idents: ~[i],\n+                 rp: None,\n+                 types: ~[] }\n }\n \n fn ident_to_pat(id: node_id, s: span, +i: ident) -> @pat {"}, {"sha": "bc28e836802e1a725710a52ddbe6a6035bb140c0", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bea67bde21d36df40c55b02cd8d8b28c0ec864b6/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea67bde21d36df40c55b02cd8d8b28c0ec864b6/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=bea67bde21d36df40c55b02cd8d8b28c0ec864b6", "patch": "@@ -264,21 +264,45 @@ priv impl ext_ctxt {\n     }\n \n     fn path(span: span, strs: ~[ast::ident]) -> @ast::path {\n-        @{span: span, global: false, idents: strs, rp: None, types: ~[]}\n+        @ast::path {\n+            span: span,\n+            global: false,\n+            idents: strs,\n+            rp: None,\n+            types: ~[]\n+        }\n     }\n \n     fn path_global(span: span, strs: ~[ast::ident]) -> @ast::path {\n-        @{span: span, global: true, idents: strs, rp: None, types: ~[]}\n+        @ast::path {\n+            span: span,\n+            global: true,\n+            idents: strs,\n+            rp: None,\n+            types: ~[]\n+        }\n     }\n \n     fn path_tps(span: span, strs: ~[ast::ident],\n                 tps: ~[@ast::Ty]) -> @ast::path {\n-        @{span: span, global: false, idents: strs, rp: None, types: tps}\n+        @ast::path {\n+            span: span,\n+            global: false,\n+            idents: strs,\n+            rp: None,\n+            types: tps\n+        }\n     }\n \n     fn path_tps_global(span: span, strs: ~[ast::ident],\n                        tps: ~[@ast::Ty]) -> @ast::path {\n-        @{span: span, global: true, idents: strs, rp: None, types: tps}\n+        @ast::path {\n+            span: span,\n+            global: true,\n+            idents: strs,\n+            rp: None,\n+            types: tps\n+        }\n     }\n \n     fn ty_path(span: span, strs: ~[ast::ident],\n@@ -289,11 +313,9 @@ priv impl ext_ctxt {\n     }\n \n     fn binder_pat(span: span, nm: ast::ident) -> @ast::pat {\n-        let path = @{span: span, global: false, idents: ~[nm],\n-                     rp: None, types: ~[]};\n         @{id: self.next_id(),\n           node: ast::pat_ident(ast::bind_by_ref(ast::m_imm),\n-                               path,\n+                               self.path(span, ~[nm]),\n                                None),\n           span: span}\n     }"}, {"sha": "a50952f75e759b5bbae91dbe38d4c5c53124648b", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bea67bde21d36df40c55b02cd8d8b28c0ec864b6/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea67bde21d36df40c55b02cd8d8b28c0ec864b6/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=bea67bde21d36df40c55b02cd8d8b28c0ec864b6", "patch": "@@ -53,20 +53,29 @@ fn mk_unary(cx: ext_ctxt, sp: span, op: ast::unop, e: @ast::expr)\n     mk_expr(cx, sp, ast::expr_unary(op, e))\n }\n fn mk_raw_path(sp: span, idents: ~[ast::ident]) -> @ast::path {\n-    let p : @ast::path = @{span: sp, global: false, idents: idents,\n-                           rp: None, types: ~[]};\n+    let p = @ast::path { span: sp,\n+                         global: false,\n+                         idents: idents,\n+                         rp: None,\n+                         types: ~[] };\n     return p;\n }\n fn mk_raw_path_(sp: span,\n                 idents: ~[ast::ident],\n                 +types: ~[@ast::Ty])\n              -> @ast::path {\n-    @{ span: sp, global: false, idents: idents, rp: None, types: move types }\n+    @ast::path { span: sp,\n+                 global: false,\n+                 idents: idents,\n+                 rp: None,\n+                 types: move types }\n }\n fn mk_raw_path_global(sp: span, idents: ~[ast::ident]) -> @ast::path {\n-    let p : @ast::path = @{span: sp, global: true, idents: idents,\n-                           rp: None, types: ~[]};\n-    return p;\n+    @ast::path { span: sp,\n+                 global: true,\n+                 idents: idents,\n+                 rp: None,\n+                 types: ~[] }\n }\n fn mk_path(cx: ext_ctxt, sp: span, idents: ~[ast::ident]) ->\n     @ast::expr {"}, {"sha": "32e77afab930a5a067da3c411dd368d80101ed55", "filename": "src/libsyntax/ext/concat_idents.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bea67bde21d36df40c55b02cd8d8b28c0ec864b6/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea67bde21d36df40c55b02cd8d8b28c0ec864b6/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat_idents.rs?ref=bea67bde21d36df40c55b02cd8d8b28c0ec864b6", "patch": "@@ -36,9 +36,11 @@ fn expand_syntax_ext(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n \n     let e = @{id: cx.next_id(),\n               callee_id: cx.next_id(),\n-              node: ast::expr_path(@{span: sp, global: false,\n-                                     idents: ~[res],\n-                                     rp: None, types: ~[]}),\n+              node: ast::expr_path(@ast::path { span: sp,\n+                                                global: false,\n+                                                idents: ~[res],\n+                                                rp: None,\n+                                                types: ~[] }),\n               span: sp};\n     mr_expr(e)\n }"}, {"sha": "392b4068880ef1fff80825fa86fb31f40313b43e", "filename": "src/libsyntax/ext/deriving.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bea67bde21d36df40c55b02cd8d8b28c0ec864b6/src%2Flibsyntax%2Fext%2Fderiving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea67bde21d36df40c55b02cd8d8b28c0ec864b6/src%2Flibsyntax%2Fext%2Fderiving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving.rs?ref=bea67bde21d36df40c55b02cd8d8b28c0ec864b6", "patch": "@@ -13,6 +13,7 @@\n \n use core::prelude::*;\n \n+use ast;\n use ast::{TraitTyParamBound, Ty, and, bind_by_ref, binop, deref, enum_def};\n use ast::{enum_variant_kind, expr, expr_match, ident, item, item_};\n use ast::{item_enum, item_impl, item_struct, m_imm, meta_item, method};\n@@ -218,7 +219,7 @@ fn create_derived_impl(cx: ext_ctxt,\n     let impl_ty_params = dvec::unwrap(move impl_ty_params);\n \n     // Create the reference to the trait.\n-    let trait_path = {\n+    let trait_path = ast::path {\n         span: span,\n         global: true,\n         idents: trait_path.map(|x| *x),"}, {"sha": "1b32ccc43d87f7d71d3904603c311340a84bcd3d", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bea67bde21d36df40c55b02cd8d8b28c0ec864b6/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea67bde21d36df40c55b02cd8d8b28c0ec864b6/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=bea67bde21d36df40c55b02cd8d8b28c0ec864b6", "patch": "@@ -34,19 +34,19 @@ mod syntax {\n }\n \n fn path(ids: ~[ident], span: span) -> @ast::path {\n-    @{span: span,\n-      global: false,\n-      idents: ids,\n-      rp: None,\n-      types: ~[]}\n+    @ast::path { span: span,\n+                 global: false,\n+                 idents: ids,\n+                 rp: None,\n+                 types: ~[] }\n }\n \n fn path_global(ids: ~[ident], span: span) -> @ast::path {\n-    @{span: span,\n-      global: true,\n-      idents: ids,\n-      rp: None,\n-      types: ~[]}\n+    @ast::path { span: span,\n+                 global: true,\n+                 idents: ids,\n+                 rp: None,\n+                 types: ~[] }\n }\n \n trait append_types {\n@@ -56,13 +56,13 @@ trait append_types {\n \n impl @ast::path: append_types {\n     fn add_ty(ty: @ast::Ty) -> @ast::path {\n-        @{types: vec::append_one(self.types, ty),\n-          .. *self}\n+        @ast::path { types: vec::append_one(self.types, ty),\n+                     .. *self}\n     }\n \n     fn add_tys(+tys: ~[@ast::Ty]) -> @ast::path {\n-        @{types: vec::append(self.types, tys),\n-          .. *self}\n+        @ast::path { types: vec::append(self.types, tys),\n+                     .. *self}\n     }\n }\n "}, {"sha": "0cd4dc7d0ad2754936849b4b1ae506e9e720382c", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bea67bde21d36df40c55b02cd8d8b28c0ec864b6/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea67bde21d36df40c55b02cd8d8b28c0ec864b6/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=bea67bde21d36df40c55b02cd8d8b28c0ec864b6", "patch": "@@ -614,10 +614,11 @@ fn noop_fold_ident(&&i: ident, _fld: ast_fold) -> ident {\n }\n \n fn noop_fold_path(&&p: path, fld: ast_fold) -> path {\n-    return {span: fld.new_span(p.span), global: p.global,\n-         idents: vec::map(p.idents, |x| fld.fold_ident(*x)),\n-         rp: p.rp,\n-         types: vec::map(p.types, |x| fld.fold_ty(*x))};\n+    ast::path { span: fld.new_span(p.span),\n+                global: p.global,\n+                idents: p.idents.map(|x| fld.fold_ident(*x)),\n+                rp: p.rp,\n+                types: p.types.map(|x| fld.fold_ty(*x)) }\n }\n \n fn noop_fold_local(l: local_, fld: ast_fold) -> local_ {"}, {"sha": "3ab5e6c862ea96b574844cc728bda6a9391ad237", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 46, "deletions": 23, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/bea67bde21d36df40c55b02cd8d8b28c0ec864b6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea67bde21d36df40c55b02cd8d8b28c0ec864b6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=bea67bde21d36df40c55b02cd8d8b28c0ec864b6", "patch": "@@ -802,8 +802,11 @@ impl Parser {\n                 break;\n             }\n         }\n-        @{span: mk_sp(lo, self.last_span.hi), global: global,\n-          idents: ids, rp: None, types: ~[]}\n+        @ast::path { span: mk_sp(lo, self.last_span.hi),\n+                     global: global,\n+                     idents: ids,\n+                     rp: None,\n+                     types: ~[] }\n     }\n \n     fn parse_value_path() -> @path {\n@@ -849,9 +852,10 @@ impl Parser {\n             }\n         };\n \n-        return @{span: mk_sp(lo, tps.span.hi),\n-              rp: rp,\n-              types: tps.node,.. *path};\n+        @ast::path { span: mk_sp(lo, tps.span.hi),\n+                     rp: rp,\n+                     types: tps.node,\n+                     .. *path }\n     }\n \n     fn parse_mutability() -> mutability {\n@@ -2730,18 +2734,27 @@ impl Parser {\n                          typarams: ~[ty_param]) -> @path {\n         let s = self.last_span;\n \n-        @{span: s, global: false, idents: ~[i],\n-          rp: None,\n-          types: vec::map(typarams, |tp| {\n-              @{id: self.get_id(),\n-                node: ty_path(ident_to_path(s, tp.ident), self.get_id()),\n-                span: s}})\n+        @ast::path {\n+             span: s,\n+             global: false,\n+             idents: ~[i],\n+             rp: None,\n+             types: do typarams.map |tp| {\n+                @{\n+                    id: self.get_id(),\n+                    node: ty_path(ident_to_path(s, tp.ident), self.get_id()),\n+                    span: s\n+                }\n+            }\n          }\n     }\n \n     fn ident_to_path(i: ident) -> @path {\n-        @{span: self.last_span, global: false, idents: ~[i],\n-          rp: None, types: ~[]}\n+        @ast::path { span: self.last_span,\n+                     global: false,\n+                     idents: ~[i],\n+                     rp: None,\n+                     types: ~[] }\n     }\n \n     fn parse_trait_ref() -> @trait_ref {\n@@ -3661,8 +3674,11 @@ impl Parser {\n                 let id = self.parse_ident();\n                 path.push(id);\n             }\n-            let path = @{span: mk_sp(lo, self.span.hi), global: false,\n-                         idents: path, rp: None, types: ~[]};\n+            let path = @ast::path { span: mk_sp(lo, self.span.hi),\n+                                    global: false,\n+                                    idents: path,\n+                                    rp: None,\n+                                    types: ~[] };\n             return @spanned(lo, self.span.hi,\n                          view_path_simple(first_ident, path, namespace,\n                                           self.get_id()));\n@@ -3686,19 +3702,23 @@ impl Parser {\n                         token::LBRACE, token::RBRACE,\n                         seq_sep_trailing_allowed(token::COMMA),\n                         |p| p.parse_path_list_ident());\n-                    let path = @{span: mk_sp(lo, self.span.hi),\n-                                 global: false, idents: path,\n-                                 rp: None, types: ~[]};\n+                    let path = @ast::path { span: mk_sp(lo, self.span.hi),\n+                                            global: false,\n+                                            idents: path,\n+                                            rp: None,\n+                                            types: ~[] };\n                     return @spanned(lo, self.span.hi,\n                                  view_path_list(path, idents, self.get_id()));\n                   }\n \n                   // foo::bar::*\n                   token::BINOP(token::STAR) => {\n                     self.bump();\n-                    let path = @{span: mk_sp(lo, self.span.hi),\n-                                 global: false, idents: path,\n-                                 rp: None, types: ~[]};\n+                    let path = @ast::path { span: mk_sp(lo, self.span.hi),\n+                                            global: false,\n+                                            idents: path,\n+                                            rp: None,\n+                                            types: ~[] };\n                     return @spanned(lo, self.span.hi,\n                                  view_path_glob(path, self.get_id()));\n                   }\n@@ -3710,8 +3730,11 @@ impl Parser {\n           _ => ()\n         }\n         let last = path[vec::len(path) - 1u];\n-        let path = @{span: mk_sp(lo, self.span.hi), global: false,\n-                     idents: path, rp: None, types: ~[]};\n+        let path = @ast::path { span: mk_sp(lo, self.span.hi),\n+                                global: false,\n+                                idents: path,\n+                                rp: None,\n+                                types: ~[] };\n         return @spanned(lo, self.span.hi,\n                      view_path_simple(last, path, namespace, self.get_id()));\n     }"}]}