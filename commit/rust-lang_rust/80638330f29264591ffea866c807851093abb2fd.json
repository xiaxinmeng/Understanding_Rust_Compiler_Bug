{"sha": "80638330f29264591ffea866c807851093abb2fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNjM4MzMwZjI5MjY0NTkxZmZlYTg2NmM4MDc4NTEwOTNhYmIyZmQ=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-04-04T16:34:18Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-09-03T18:59:32Z"}, "message": "support in-place collect for MapWhile adapters", "tree": {"sha": "780442e7eae9ce855c6378653eeb1d91d00c77ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/780442e7eae9ce855c6378653eeb1d91d00c77ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80638330f29264591ffea866c807851093abb2fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80638330f29264591ffea866c807851093abb2fd", "html_url": "https://github.com/rust-lang/rust/commit/80638330f29264591ffea866c807851093abb2fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80638330f29264591ffea866c807851093abb2fd/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55d1296a55f29d2e59060798a874bfd5b240ca0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/55d1296a55f29d2e59060798a874bfd5b240ca0b", "html_url": "https://github.com/rust-lang/rust/commit/55d1296a55f29d2e59060798a874bfd5b240ca0b"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "b1513d1b056554d83dcd60627cbfbc9e38e75615", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80638330f29264591ffea866c807851093abb2fd/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80638330f29264591ffea866c807851093abb2fd/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=80638330f29264591ffea866c807851093abb2fd", "patch": "@@ -15,6 +15,7 @@\n #![feature(split_inclusive)]\n #![feature(binary_heap_retain)]\n #![feature(inplace_iteration)]\n+#![feature(iter_map_while)]\n \n use std::collections::hash_map::DefaultHasher;\n use std::hash::{Hash, Hasher};"}, {"sha": "47819714cc4f6abb3398ccbe01a0624b784d51cf", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80638330f29264591ffea866c807851093abb2fd/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80638330f29264591ffea866c807851093abb2fd/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=80638330f29264591ffea866c807851093abb2fd", "patch": "@@ -819,6 +819,7 @@ fn test_from_iter_specialization_with_iterator_adapters() {\n         .map(|i| i.0 + i.1)\n         .zip(std::iter::repeat(1usize))\n         .map(|(a, b)| a + b)\n+        .map_while(Option::Some)\n         .peekable()\n         .skip(1)\n         .map(|e| std::num::NonZeroUsize::new(e));"}, {"sha": "93e0ad3c8ead104ef5bd2f344c8c88300e0c39cd", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/80638330f29264591ffea866c807851093abb2fd/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80638330f29264591ffea866c807851093abb2fd/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=80638330f29264591ffea866c807851093abb2fd", "patch": "@@ -2191,6 +2191,27 @@ where\n     }\n }\n \n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n+unsafe impl<S: Iterator, B, I: Iterator, P> SourceIter for MapWhile<I, P>\n+where\n+    P: FnMut(I::Item) -> Option<B>,\n+    I: SourceIter<Source = S>,\n+{\n+    type Source = S;\n+\n+    #[inline]\n+    unsafe fn as_inner(&mut self) -> &mut S {\n+        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        unsafe { SourceIter::as_inner(&mut self.iter) }\n+    }\n+}\n+\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n+unsafe impl<B, I: InPlaceIterable, P> InPlaceIterable for MapWhile<I, P> where\n+    P: FnMut(I::Item) -> Option<B>\n+{\n+}\n+\n /// An iterator that skips over `n` elements of `iter`.\n ///\n /// This `struct` is created by the [`skip`] method on [`Iterator`]. See its"}]}