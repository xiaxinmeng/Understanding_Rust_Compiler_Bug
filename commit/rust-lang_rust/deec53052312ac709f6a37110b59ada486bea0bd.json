{"sha": "deec53052312ac709f6a37110b59ada486bea0bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZWM1MzA1MjMxMmFjNzA5ZjZhMzcxMTBiNTlhZGE0ODZiZWEwYmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-07T15:37:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-07T15:37:47Z"}, "message": "Auto merge of #77341 - davidtwco:issue-73427-you-might-have-meant-variant, r=estebank\n\nresolve: improve \"try using the enum's variant\"\n\nFixes #73427.\n\nThis PR improves the \"try using the enum's variant\" suggestion:\n\n- Variants in suggestions would not result in more errors (e.g. use of a struct variant is only suggested if the suggestion can trivially construct that variant). Therefore, suggestions are only   emitted for variants that have no fields (since the suggestion can't know what value fields would have).\n- Suggestions include the syntax for constructing the variant. If a struct or tuple variant is suggested, then it is constructed in the suggestion - unless in pattern-matching or when arguments are already provided.\n- A help message is added which mentions the variants which are no longer suggested.\n\nAll of the diagnostic logic introduced by this PR is separated from the normal code path for a successful compilation.\n\nr? `@estebank`", "tree": {"sha": "c38a6dbc282630326734e6a936950ffad40080c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c38a6dbc282630326734e6a936950ffad40080c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/deec53052312ac709f6a37110b59ada486bea0bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/deec53052312ac709f6a37110b59ada486bea0bd", "html_url": "https://github.com/rust-lang/rust/commit/deec53052312ac709f6a37110b59ada486bea0bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/deec53052312ac709f6a37110b59ada486bea0bd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a14bf4862df2749917a3eed7a44d420b8fa4e55d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a14bf4862df2749917a3eed7a44d420b8fa4e55d", "html_url": "https://github.com/rust-lang/rust/commit/a14bf4862df2749917a3eed7a44d420b8fa4e55d"}, {"sha": "9ef68f53e1f882afb63f824a10ff33ccd2c4764b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ef68f53e1f882afb63f824a10ff33ccd2c4764b", "html_url": "https://github.com/rust-lang/rust/commit/9ef68f53e1f882afb63f824a10ff33ccd2c4764b"}], "stats": {"total": 346, "additions": 258, "deletions": 88}, "files": [{"sha": "15e722288708a020d4254a81bc1dbe575dcac151", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 124, "deletions": 21, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/deec53052312ac709f6a37110b59ada486bea0bd/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec53052312ac709f6a37110b59ada486bea0bd/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=deec53052312ac709f6a37110b59ada486bea0bd", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::Namespace::{self, *};\n-use rustc_hir::def::{self, CtorKind, DefKind};\n+use rustc_hir::def::{self, CtorKind, CtorOf, DefKind};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::PrimTy;\n use rustc_session::config::nightly_options;\n@@ -726,24 +726,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     // We already suggested changing `:` into `::` during parsing.\n                     return false;\n                 }\n-                if let Some(variants) = self.collect_enum_variants(def_id) {\n-                    if !variants.is_empty() {\n-                        let msg = if variants.len() == 1 {\n-                            \"try using the enum's variant\"\n-                        } else {\n-                            \"try using one of the enum's variants\"\n-                        };\n \n-                        err.span_suggestions(\n-                            span,\n-                            msg,\n-                            variants.iter().map(path_names_to_string),\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n-                } else {\n-                    err.note(\"you might have meant to use one of the enum's variants\");\n-                }\n+                self.suggest_using_enum_variant(err, source, def_id, span);\n             }\n             (Res::Def(DefKind::Struct, def_id), _) if ns == ValueNS => {\n                 if let Some((ctor_def, ctor_vis, fields)) =\n@@ -1126,20 +1110,139 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         result\n     }\n \n-    fn collect_enum_variants(&mut self, def_id: DefId) -> Option<Vec<Path>> {\n+    fn collect_enum_ctors(&mut self, def_id: DefId) -> Option<Vec<(Path, DefId, CtorKind)>> {\n         self.find_module(def_id).map(|(enum_module, enum_import_suggestion)| {\n             let mut variants = Vec::new();\n             enum_module.for_each_child(self.r, |_, ident, _, name_binding| {\n-                if let Res::Def(DefKind::Variant, _) = name_binding.res() {\n+                if let Res::Def(DefKind::Ctor(CtorOf::Variant, kind), def_id) = name_binding.res() {\n                     let mut segms = enum_import_suggestion.path.segments.clone();\n                     segms.push(ast::PathSegment::from_ident(ident));\n-                    variants.push(Path { span: name_binding.span, segments: segms, tokens: None });\n+                    let path = Path { span: name_binding.span, segments: segms, tokens: None };\n+                    variants.push((path, def_id, kind));\n                 }\n             });\n             variants\n         })\n     }\n \n+    /// Adds a suggestion for using an enum's variant when an enum is used instead.\n+    fn suggest_using_enum_variant(\n+        &mut self,\n+        err: &mut DiagnosticBuilder<'a>,\n+        source: PathSource<'_>,\n+        def_id: DefId,\n+        span: Span,\n+    ) {\n+        let variants = match self.collect_enum_ctors(def_id) {\n+            Some(variants) => variants,\n+            None => {\n+                err.note(\"you might have meant to use one of the enum's variants\");\n+                return;\n+            }\n+        };\n+\n+        let suggest_only_tuple_variants =\n+            matches!(source, PathSource::TupleStruct(..)) || source.is_call();\n+        let mut suggestable_variants = if suggest_only_tuple_variants {\n+            // Suggest only tuple variants regardless of whether they have fields and do not\n+            // suggest path with added parenthesis.\n+            variants\n+                .iter()\n+                .filter(|(.., kind)| *kind == CtorKind::Fn)\n+                .map(|(variant, ..)| path_names_to_string(variant))\n+                .collect::<Vec<_>>()\n+        } else {\n+            variants\n+                .iter()\n+                .filter(|(_, def_id, kind)| {\n+                    // Suggest only variants that have no fields (these can definitely\n+                    // be constructed).\n+                    let has_fields =\n+                        self.r.field_names.get(&def_id).map(|f| f.is_empty()).unwrap_or(false);\n+                    match kind {\n+                        CtorKind::Const => true,\n+                        CtorKind::Fn | CtorKind::Fictive if has_fields => true,\n+                        _ => false,\n+                    }\n+                })\n+                .map(|(variant, _, kind)| (path_names_to_string(variant), kind))\n+                .map(|(variant_str, kind)| {\n+                    // Add constructor syntax where appropriate.\n+                    match kind {\n+                        CtorKind::Const => variant_str,\n+                        CtorKind::Fn => format!(\"({}())\", variant_str),\n+                        CtorKind::Fictive => format!(\"({} {{}})\", variant_str),\n+                    }\n+                })\n+                .collect::<Vec<_>>()\n+        };\n+\n+        let non_suggestable_variant_count = variants.len() - suggestable_variants.len();\n+\n+        if !suggestable_variants.is_empty() {\n+            let msg = if non_suggestable_variant_count == 0 && suggestable_variants.len() == 1 {\n+                \"try using the enum's variant\"\n+            } else {\n+                \"try using one of the enum's variants\"\n+            };\n+\n+            err.span_suggestions(\n+                span,\n+                msg,\n+                suggestable_variants.drain(..),\n+                Applicability::MaybeIncorrect,\n+            );\n+        }\n+\n+        if suggest_only_tuple_variants {\n+            let source_msg = if source.is_call() {\n+                \"to construct\"\n+            } else if matches!(source, PathSource::TupleStruct(..)) {\n+                \"to match against\"\n+            } else {\n+                unreachable!()\n+            };\n+\n+            // If the enum has no tuple variants..\n+            if non_suggestable_variant_count == variants.len() {\n+                err.help(&format!(\"the enum has no tuple variants {}\", source_msg));\n+            }\n+\n+            // If there are also non-tuple variants..\n+            if non_suggestable_variant_count == 1 {\n+                err.help(&format!(\n+                    \"you might have meant {} the enum's non-tuple variant\",\n+                    source_msg\n+                ));\n+            } else if non_suggestable_variant_count >= 1 {\n+                err.help(&format!(\n+                    \"you might have meant {} one of the enum's non-tuple variants\",\n+                    source_msg\n+                ));\n+            }\n+        } else {\n+            let made_suggestion = non_suggestable_variant_count != variants.len();\n+            if made_suggestion {\n+                if non_suggestable_variant_count == 1 {\n+                    err.help(\n+                        \"you might have meant to use the enum's other variant that has fields\",\n+                    );\n+                } else if non_suggestable_variant_count >= 1 {\n+                    err.help(\n+                        \"you might have meant to use one of the enum's other variants that \\\n+                         have fields\",\n+                    );\n+                }\n+            } else {\n+                if non_suggestable_variant_count == 1 {\n+                    err.help(\"you might have meant to use the enum's variant\");\n+                } else if non_suggestable_variant_count >= 1 {\n+                    err.help(\"you might have meant to use one of the enum's variants\");\n+                }\n+            }\n+        }\n+    }\n+\n     crate fn report_missing_type_error(\n         &self,\n         path: &[Segment],"}, {"sha": "e1325b789d2e9256964bb375ada81e316343d8ab", "filename": "src/test/ui/did_you_mean/issue-43871-enum-instead-of-variant.stderr", "status": "modified", "additions": 10, "deletions": 32, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/deec53052312ac709f6a37110b59ada486bea0bd/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deec53052312ac709f6a37110b59ada486bea0bd/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr?ref=deec53052312ac709f6a37110b59ada486bea0bd", "patch": "@@ -2,64 +2,42 @@ error[E0423]: expected function, tuple struct or tuple variant, found enum `Opti\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:19:13\n    |\n LL |     let x = Option(1);\n-   |             ^^^^^^\n+   |             ^^^^^^ help: try using one of the enum's variants: `std::option::Option::Some`\n    |\n-help: try using one of the enum's variants\n-   |\n-LL |     let x = std::option::Option::None(1);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n-LL |     let x = std::option::Option::Some(1);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: you might have meant to construct the enum's non-tuple variant\n \n error[E0532]: expected tuple struct or tuple variant, found enum `Option`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:21:12\n    |\n LL |     if let Option(_) = x {\n-   |            ^^^^^^\n-   |\n-help: try using one of the enum's variants\n+   |            ^^^^^^ help: try using one of the enum's variants: `std::option::Option::Some`\n    |\n-LL |     if let std::option::Option::None(_) = x {\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n-LL |     if let std::option::Option::Some(_) = x {\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: you might have meant to match against the enum's non-tuple variant\n \n error[E0532]: expected tuple struct or tuple variant, found enum `Example`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:27:12\n    |\n LL |     if let Example(_) = y {\n-   |            ^^^^^^^\n-   |\n-help: try using one of the enum's variants\n+   |            ^^^^^^^ help: try using one of the enum's variants: `Example::Ex`\n    |\n-LL |     if let Example::Ex(_) = y {\n-   |            ^^^^^^^^^^^\n-LL |     if let Example::NotEx(_) = y {\n-   |            ^^^^^^^^^^^^^^\n+   = help: you might have meant to match against the enum's non-tuple variant\n \n error[E0423]: expected function, tuple struct or tuple variant, found enum `Void`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:31:13\n    |\n LL |     let y = Void();\n    |             ^^^^\n+   |\n+   = help: the enum has no tuple variants to construct\n \n error[E0423]: expected function, tuple struct or tuple variant, found enum `ManyVariants`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:33:13\n    |\n LL |     let z = ManyVariants();\n    |             ^^^^^^^^^^^^\n    |\n-help: try using one of the enum's variants\n-   |\n-LL |     let z = ManyVariants::One();\n-   |             ^^^^^^^^^^^^^^^^^\n-LL |     let z = ManyVariants::Two();\n-   |             ^^^^^^^^^^^^^^^^^\n-LL |     let z = ManyVariants::Three();\n-   |             ^^^^^^^^^^^^^^^^^^^\n-LL |     let z = ManyVariants::Four();\n-   |             ^^^^^^^^^^^^^^^^^^\n-     and 6 other candidates\n+   = help: the enum has no tuple variants to construct\n+   = help: you might have meant to construct one of the enum's non-tuple variants\n \n error: aborting due to 5 previous errors\n "}, {"sha": "3c62782a89799c87d196784c13107c297d3fbbfd", "filename": "src/test/ui/issues/issue-73427.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/deec53052312ac709f6a37110b59ada486bea0bd/src%2Ftest%2Fui%2Fissues%2Fissue-73427.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec53052312ac709f6a37110b59ada486bea0bd/src%2Ftest%2Fui%2Fissues%2Fissue-73427.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-73427.rs?ref=deec53052312ac709f6a37110b59ada486bea0bd", "patch": "@@ -0,0 +1,44 @@\n+enum A {\n+    StructWithFields { x: () },\n+    TupleWithFields(()),\n+    Struct {},\n+    Tuple(),\n+    Unit,\n+}\n+\n+enum B {\n+    StructWithFields { x: () },\n+    TupleWithFields(()),\n+}\n+\n+enum C {\n+    StructWithFields { x: () },\n+    TupleWithFields(()),\n+    Unit,\n+}\n+\n+enum D {\n+    TupleWithFields(()),\n+    Unit,\n+}\n+\n+fn main() {\n+    // Only variants without fields are suggested (and others mentioned in a note) where an enum\n+    // is used rather than a variant.\n+\n+    A.foo();\n+    //~^ ERROR expected value, found enum `A`\n+    B.foo();\n+    //~^ ERROR expected value, found enum `B`\n+    C.foo();\n+    //~^ ERROR expected value, found enum `C`\n+    D.foo();\n+    //~^ ERROR expected value, found enum `D`\n+\n+    // Only tuple variants are suggested in calls or tuple struct pattern matching.\n+\n+    let x = A(3);\n+    //~^ ERROR expected function, tuple struct or tuple variant, found enum `A`\n+    if let A(3) = x { }\n+    //~^ ERROR expected tuple struct or tuple variant, found enum `A`\n+}"}, {"sha": "88d19943f0226135a3b4ae8a35003bfe2993768d", "filename": "src/test/ui/issues/issue-73427.stderr", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/deec53052312ac709f6a37110b59ada486bea0bd/src%2Ftest%2Fui%2Fissues%2Fissue-73427.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deec53052312ac709f6a37110b59ada486bea0bd/src%2Ftest%2Fui%2Fissues%2Fissue-73427.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-73427.stderr?ref=deec53052312ac709f6a37110b59ada486bea0bd", "patch": "@@ -0,0 +1,72 @@\n+error[E0423]: expected value, found enum `A`\n+  --> $DIR/issue-73427.rs:29:5\n+   |\n+LL |     A.foo();\n+   |     ^\n+   |\n+   = help: you might have meant to use one of the enum's other variants that have fields\n+help: try using one of the enum's variants\n+   |\n+LL |     (A::Struct {}).foo();\n+   |     ^^^^^^^^^^^^^^\n+LL |     (A::Tuple()).foo();\n+   |     ^^^^^^^^^^^^\n+LL |     A::Unit.foo();\n+   |     ^^^^^^^\n+\n+error[E0423]: expected value, found enum `B`\n+  --> $DIR/issue-73427.rs:31:5\n+   |\n+LL |     B.foo();\n+   |     ^\n+   |\n+   = help: you might have meant to use one of the enum's variants\n+\n+error[E0423]: expected value, found enum `C`\n+  --> $DIR/issue-73427.rs:33:5\n+   |\n+LL |     C.foo();\n+   |     ^ help: try using one of the enum's variants: `C::Unit`\n+   |\n+   = help: you might have meant to use one of the enum's other variants that have fields\n+\n+error[E0423]: expected value, found enum `D`\n+  --> $DIR/issue-73427.rs:35:5\n+   |\n+LL |     D.foo();\n+   |     ^ help: try using one of the enum's variants: `D::Unit`\n+   |\n+   = help: you might have meant to use the enum's other variant that has fields\n+\n+error[E0423]: expected function, tuple struct or tuple variant, found enum `A`\n+  --> $DIR/issue-73427.rs:40:13\n+   |\n+LL |     let x = A(3);\n+   |             ^\n+   |\n+   = help: you might have meant to construct one of the enum's non-tuple variants\n+help: try using one of the enum's variants\n+   |\n+LL |     let x = A::TupleWithFields(3);\n+   |             ^^^^^^^^^^^^^^^^^^\n+LL |     let x = A::Tuple(3);\n+   |             ^^^^^^^^\n+\n+error[E0532]: expected tuple struct or tuple variant, found enum `A`\n+  --> $DIR/issue-73427.rs:42:12\n+   |\n+LL |     if let A(3) = x { }\n+   |            ^\n+   |\n+   = help: you might have meant to match against one of the enum's non-tuple variants\n+help: try using one of the enum's variants\n+   |\n+LL |     if let A::TupleWithFields(3) = x { }\n+   |            ^^^^^^^^^^^^^^^^^^\n+LL |     if let A::Tuple(3) = x { }\n+   |            ^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors have detailed explanations: E0423, E0532.\n+For more information about an error, try `rustc --explain E0423`."}, {"sha": "77429f800f1a313c61700f6f505133383258670b", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 8, "deletions": 35, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/deec53052312ac709f6a37110b59ada486bea0bd/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deec53052312ac709f6a37110b59ada486bea0bd/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=deec53052312ac709f6a37110b59ada486bea0bd", "patch": "@@ -2,31 +2,17 @@ error[E0423]: expected value, found enum `n::Z`\n   --> $DIR/privacy-enum-ctor.rs:23:9\n    |\n LL |         n::Z;\n-   |         ^^^^\n+   |         ^^^^ help: try using one of the enum's variants: `m::Z::Unit`\n    |\n-help: try using one of the enum's variants\n-   |\n-LL |         m::Z::Fn;\n-   |         ^^^^^^^^\n-LL |         m::Z::Struct;\n-   |         ^^^^^^^^^^^^\n-LL |         m::Z::Unit;\n-   |         ^^^^^^^^^^\n+   = help: you might have meant to use one of the enum's other variants that have fields\n \n error[E0423]: expected value, found enum `Z`\n   --> $DIR/privacy-enum-ctor.rs:25:9\n    |\n LL |         Z;\n-   |         ^\n+   |         ^ help: try using one of the enum's variants: `m::Z::Unit`\n    |\n-help: try using one of the enum's variants\n-   |\n-LL |         m::Z::Fn;\n-   |         ^^^^^^^^\n-LL |         m::Z::Struct;\n-   |         ^^^^^^^^^^^^\n-LL |         m::Z::Unit;\n-   |         ^^^^^^^^^^\n+   = help: you might have meant to use one of the enum's other variants that have fields\n \n error[E0423]: expected value, found struct variant `Z::Struct`\n   --> $DIR/privacy-enum-ctor.rs:29:20\n@@ -48,12 +34,9 @@ LL |     fn f() {\n LL |     let _: E = m::E;\n    |                ^^^^\n    |\n+   = help: you might have meant to use one of the enum's other variants that have fields\n help: try using one of the enum's variants\n    |\n-LL |     let _: E = E::Fn;\n-   |                ^^^^^\n-LL |     let _: E = E::Struct;\n-   |                ^^^^^^^^^\n LL |     let _: E = E::Unit;\n    |                ^^^^^^^\n help: a function with a similar name exists\n@@ -84,12 +67,9 @@ error[E0423]: expected value, found enum `E`\n LL |     let _: E = E;\n    |                ^\n    |\n+   = help: you might have meant to use one of the enum's other variants that have fields\n help: try using one of the enum's variants\n    |\n-LL |     let _: E = E::Fn;\n-   |                ^^^^^\n-LL |     let _: E = E::Struct;\n-   |                ^^^^^^^^^\n LL |     let _: E = E::Unit;\n    |                ^^^^^^^\n help: consider importing one of these items instead\n@@ -132,16 +112,9 @@ error[E0423]: expected value, found enum `m::n::Z`\n   --> $DIR/privacy-enum-ctor.rs:57:16\n    |\n LL |     let _: Z = m::n::Z;\n-   |                ^^^^^^^\n+   |                ^^^^^^^ help: try using one of the enum's variants: `m::Z::Unit`\n    |\n-help: try using one of the enum's variants\n-   |\n-LL |     let _: Z = m::Z::Fn;\n-   |                ^^^^^^^^\n-LL |     let _: Z = m::Z::Struct;\n-   |                ^^^^^^^^^^^^\n-LL |     let _: Z = m::Z::Unit;\n-   |                ^^^^^^^^^^\n+   = help: you might have meant to use one of the enum's other variants that have fields\n \n error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:61:12"}]}