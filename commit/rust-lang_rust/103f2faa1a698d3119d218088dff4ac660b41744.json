{"sha": "103f2faa1a698d3119d218088dff4ac660b41744", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwM2YyZmFhMWE2OThkMzExOWQyMTgwODhkZmY0YWM2NjBiNDE3NDQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-04-16T17:07:30Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-04-24T17:00:21Z"}, "message": "[WIP] Try using GnuBuilder", "tree": {"sha": "600b92c07ca7d7b8c312a946607d97263071dccc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/600b92c07ca7d7b8c312a946607d97263071dccc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/103f2faa1a698d3119d218088dff4ac660b41744", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/103f2faa1a698d3119d218088dff4ac660b41744", "html_url": "https://github.com/rust-lang/rust/commit/103f2faa1a698d3119d218088dff4ac660b41744", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/103f2faa1a698d3119d218088dff4ac660b41744/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "472b591f90c237efb3683b9addc49b98ef0fb797", "url": "https://api.github.com/repos/rust-lang/rust/commits/472b591f90c237efb3683b9addc49b98ef0fb797", "html_url": "https://github.com/rust-lang/rust/commit/472b591f90c237efb3683b9addc49b98ef0fb797"}], "stats": {"total": 48, "additions": 38, "deletions": 10}, "files": [{"sha": "aeca3ecf47242409c3b980f0b5ea72373d7e5588", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/103f2faa1a698d3119d218088dff4ac660b41744/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/103f2faa1a698d3119d218088dff4ac660b41744/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=103f2faa1a698d3119d218088dff4ac660b41744", "patch": "@@ -19,7 +19,7 @@ dependencies = [\n [[package]]\n name = \"ar\"\n version = \"0.6.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+source = \"git+https://github.com/mdsteele/rust-ar.git#1cfa68dcecaa063510758e8bdced7115a3393616\"\n dependencies = [\n  \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -582,7 +582,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"rustc_codegen_cranelift\"\n version = \"0.1.0\"\n dependencies = [\n- \"ar 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ar 0.6.2 (git+https://github.com/mdsteele/rust-ar.git)\",\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cranelift 0.30.0 (git+https://github.com/CraneStation/cranelift.git)\",\n@@ -843,7 +843,7 @@ dependencies = [\n [metadata]\n \"checksum aho-corasick 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e6f484ae0c99fec2e858eb6134949117399f222608d84cadb3f58c1f97c2364c\"\n \"checksum ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n-\"checksum ar 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"579681b3fecd1e9d6b5ce6969e05f9feb913f296eddaf595be1166a5ca597bc4\"\n+\"checksum ar 0.6.2 (git+https://github.com/mdsteele/rust-ar.git)\" = \"<none>\"\n \"checksum arrayvec 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92c7fb76bc8826a8b33b4ee5bb07a247a81e76764ab4d55e8f73e3a4d8808c71\"\n \"checksum atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a7d5b8723950951411ee34d271d99dddcc2035a16ab25310ea2c8cfd4369652\"\n \"checksum autocfg 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a6d640bee2da49f60a4068a7fae53acde8982514ab7bae8b8cea9e88cbcfd799\""}, {"sha": "b71ad7ffb255857ee15434ca62a99435a570c3b8", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/103f2faa1a698d3119d218088dff4ac660b41744/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/103f2faa1a698d3119d218088dff4ac660b41744/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=103f2faa1a698d3119d218088dff4ac660b41744", "patch": "@@ -38,5 +38,8 @@ indexmap = \"1.0.2\"\n #[patch.\"https://github.com/gimli-rs/gimli.git\"]\n #gimli = { path = \"../\" }\n \n+[patch.crates-io]\n+ar = { git = \"https://github.com/mdsteele/rust-ar.git\" }\n+\n [profile.dev.overrides.\"*\"]\n opt-level = 3"}, {"sha": "02b8c4fd14e51384892abc60c1c67ef7fb3481cf", "filename": "src/archive.rs", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/103f2faa1a698d3119d218088dff4ac660b41744/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/103f2faa1a698d3119d218088dff4ac660b41744/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=103f2faa1a698d3119d218088dff4ac660b41744", "patch": "@@ -8,12 +8,14 @@ use rustc_codegen_ssa::{METADATA_FILENAME, RLIB_BYTECODE_EXTENSION};\n use rustc_codegen_ssa::back::archive::{ArchiveBuilder, find_library};\n \n struct ArchiveConfig<'a> {\n-    pub sess: &'a Session,\n-    pub dst: PathBuf,\n-    pub src: Option<PathBuf>,\n-    pub lib_search_paths: Vec<PathBuf>,\n+    sess: &'a Session,\n+    dst: PathBuf,\n+    src: Option<PathBuf>,\n+    lib_search_paths: Vec<PathBuf>,\n+    is_like_osx: bool,\n }\n \n+#[derive(Debug)]\n enum ArchiveEntry {\n     FromArchive { archive_index: usize, entry_index: usize },\n     File(File),\n@@ -34,6 +36,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n             dst: output.to_path_buf(),\n             src: input.map(|p| p.to_path_buf()),\n             lib_search_paths: archive_search_paths(sess),\n+            is_like_osx: sess.target.target.options.is_like_osx,\n         };\n \n         let (src_archives, entries) = if let Some(src) = &config.src {\n@@ -119,7 +122,23 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n     }\n \n     fn build(mut self) {\n-        let mut builder = ar::Builder::new(File::create(&self.config.dst).unwrap());\n+        println!(\"{:?}\", self.src_archives.len());\n+        println!(\"{:?}\", self.entries);\n+\n+        enum BuilderKind {\n+            Bsd(ar::Builder<File>),\n+            Gnu(ar::GnuBuilder<File>),\n+        }\n+\n+        let archive_file = File::create(&self.config.dst).unwrap();\n+        let mut builder = if self.config.is_like_osx {\n+            BuilderKind::Bsd(ar::Builder::new(archive_file))\n+        } else {\n+            BuilderKind::Gnu(ar::GnuBuilder::new(\n+                archive_file,\n+                self.entries.keys().map(|key| key.as_bytes().to_vec()).collect(),\n+            ))\n+        };\n \n         // Add all files\n         for (entry_name, entry) in self.entries.into_iter() {\n@@ -133,10 +152,16 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n                     header.set_uid(orig_header.uid());\n                     header.set_gid(orig_header.gid());\n                     header.set_mode(orig_header.mode());\n-                    builder.append(&header, entry).unwrap();\n+                    match builder {\n+                        BuilderKind::Bsd(ref mut builder) => builder.append(&header, entry).unwrap(),\n+                        BuilderKind::Gnu(ref mut builder) => builder.append(&header, entry).unwrap(),\n+                    }\n                 }\n                 ArchiveEntry::File(mut file) => {\n-                    builder.append_file(entry_name.as_bytes(), &mut file).unwrap();\n+                    match builder {\n+                        BuilderKind::Bsd(ref mut builder) => builder.append_file(entry_name.as_bytes(), &mut file).unwrap(),\n+                        BuilderKind::Gnu(ref mut builder) => builder.append_file(entry_name.as_bytes(), &mut file).unwrap(),\n+                    }\n                 }\n             }\n         }"}]}