{"sha": "5e7af4669f80e5f682141f050193ab679afdb4b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlN2FmNDY2OWY4MGU1ZjY4MjE0MWYwNTAxOTNhYjY3OWFmZGI0YjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-16T15:28:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-16T15:28:41Z"}, "message": "Auto merge of #67885 - tobithiel:fix_group_lint_allow_override, r=Mark-Simulacrum\n\nrustc_session: allow overriding lint level of individual lints from a group\n\nFixes #58211 and fixes rust-lang/rust-clippy#4778 and fixes rust-lang/rust-clippy#4091\n\nInstead of hard-coding the lint level preferences (from lowest to highest precedence: `lint::Allow -> lint::Warn -> lint::Deny -> lint::Forbid`), the position of the argument in the command line gets taken into account.\n\nExamples:\n1. Passing `-D unused -A unused-variables` denies everything in the lint group `unused` **except** `unused-variables` which is explicitly allowed.\n1. Passing `-A unused-variables -D unused` denies everything in the lint group `unused` **including** `unused-variables` since the allow is specified before the deny (and therefore overridden by the deny).\n\nThis matches the behavior that is already being used when specifying `allow`/`deny` in the source code.", "tree": {"sha": "ac303ced99f72dcbc4012813b2ee55a2c5617e28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac303ced99f72dcbc4012813b2ee55a2c5617e28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e7af4669f80e5f682141f050193ab679afdb4b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e7af4669f80e5f682141f050193ab679afdb4b1", "html_url": "https://github.com/rust-lang/rust/commit/5e7af4669f80e5f682141f050193ab679afdb4b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e7af4669f80e5f682141f050193ab679afdb4b1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "116dff95a37214e86f067715374a18a4de1621f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/116dff95a37214e86f067715374a18a4de1621f0", "html_url": "https://github.com/rust-lang/rust/commit/116dff95a37214e86f067715374a18a4de1621f0"}, {"sha": "3fc9253a5a27771c72429a738d5379c34e1cd924", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fc9253a5a27771c72429a738d5379c34e1cd924", "html_url": "https://github.com/rust-lang/rust/commit/3fc9253a5a27771c72429a738d5379c34e1cd924"}], "stats": {"total": 79, "additions": 65, "deletions": 14}, "files": [{"sha": "659f8f65e65d2defdbdcdfbe3a461f3991ac551b", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e7af4669f80e5f682141f050193ab679afdb4b1/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/5e7af4669f80e5f682141f050193ab679afdb4b1/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=5e7af4669f80e5f682141f050193ab679afdb4b1", "patch": "@@ -215,21 +215,29 @@ This controls which [target](targets/index.md) to produce.\n \n This flag will set which lints should be set to the [warn level](lints/levels.md#warn).\n \n+_Note:_ The order of these lint level arguments is taken into account, see [lint level via compiler flag](lints/levels.md#via-compiler-flag) for more information.\n+\n <a id=\"option-a-allow\"></a>\n ## `-A`: set lint allowed\n \n This flag will set which lints should be set to the [allow level](lints/levels.md#allow).\n \n+_Note:_ The order of these lint level arguments is taken into account, see [lint level via compiler flag](lints/levels.md#via-compiler-flag) for more information.\n+\n <a id=\"option-d-deny\"></a>\n ## `-D`: set lint denied\n \n This flag will set which lints should be set to the [deny level](lints/levels.md#deny).\n \n+_Note:_ The order of these lint level arguments is taken into account, see [lint level via compiler flag](lints/levels.md#via-compiler-flag) for more information.\n+\n <a id=\"option-f-forbid\"></a>\n ## `-F`: set lint forbidden\n \n This flag will set which lints should be set to the [forbid level](lints/levels.md#forbid).\n \n+_Note:_ The order of these lint level arguments is taken into account, see [lint level via compiler flag](lints/levels.md#via-compiler-flag) for more information.\n+\n <a id=\"option-z-unstable\"></a>\n ## `-Z`: set unstable options\n "}, {"sha": "3cfe2f698f3e01cf9a55afa67d3132d56aad52e1", "filename": "src/doc/rustc/src/lints/levels.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e7af4669f80e5f682141f050193ab679afdb4b1/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md", "raw_url": "https://github.com/rust-lang/rust/raw/5e7af4669f80e5f682141f050193ab679afdb4b1/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md?ref=5e7af4669f80e5f682141f050193ab679afdb4b1", "patch": "@@ -164,6 +164,18 @@ And of course, you can mix these four flags together:\n $ rustc lib.rs --crate-type=lib -D missing-docs -A unused-variables\n ```\n \n+The order of these command line arguments is taken into account. The following allows the `unused-variables` lint, because it is the last argument for that lint:\n+\n+```bash\n+$ rustc lib.rs --crate-type=lib -D unused-variables -A unused-variables\n+```\n+\n+You can make use of this behavior by overriding the level of one specific lint out of a group of lints. The following example denies all the lints in the `unused` group, but explicitly allows the `unused-variables` lint in that group:\n+\n+```bash\n+$ rustc lib.rs --crate-type=lib -D unused -A unused-variables\n+```\n+\n ### Via an attribute\n \n You can also modify the lint level with a crate-wide attribute:"}, {"sha": "a6f9a5fe3e0faf71871d37346b8eeaa72cd33e9d", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5e7af4669f80e5f682141f050193ab679afdb4b1/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7af4669f80e5f682141f050193ab679afdb4b1/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=5e7af4669f80e5f682141f050193ab679afdb4b1", "patch": "@@ -1006,19 +1006,26 @@ pub fn get_cmd_lint_options(\n     matches: &getopts::Matches,\n     error_format: ErrorOutputType,\n ) -> (Vec<(String, lint::Level)>, bool, Option<lint::Level>) {\n-    let mut lint_opts = vec![];\n+    let mut lint_opts_with_position = vec![];\n     let mut describe_lints = false;\n \n     for &level in &[lint::Allow, lint::Warn, lint::Deny, lint::Forbid] {\n-        for lint_name in matches.opt_strs(level.as_str()) {\n+        for (arg_pos, lint_name) in matches.opt_strs_pos(level.as_str()) {\n             if lint_name == \"help\" {\n                 describe_lints = true;\n             } else {\n-                lint_opts.push((lint_name.replace(\"-\", \"_\"), level));\n+                lint_opts_with_position.push((arg_pos, lint_name.replace(\"-\", \"_\"), level));\n             }\n         }\n     }\n \n+    lint_opts_with_position.sort_by_key(|x| x.0);\n+    let lint_opts = lint_opts_with_position\n+        .iter()\n+        .cloned()\n+        .map(|(_, lint_name, level)| (lint_name, level))\n+        .collect();\n+\n     let lint_cap = matches.opt_str(\"cap-lints\").map(|cap| {\n         lint::Level::from_str(&cap)\n             .unwrap_or_else(|| early_error(error_format, &format!(\"unknown lint level: `{}`\", cap)))"}, {"sha": "7498745f2069921d54b33f6408b38efba6caeb8d", "filename": "src/test/ui-fulldeps/lint-group-denied-lint-allowed.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e7af4669f80e5f682141f050193ab679afdb4b1/src%2Ftest%2Fui-fulldeps%2Flint-group-denied-lint-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7af4669f80e5f682141f050193ab679afdb4b1/src%2Ftest%2Fui-fulldeps%2Flint-group-denied-lint-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-group-denied-lint-allowed.rs?ref=5e7af4669f80e5f682141f050193ab679afdb4b1", "patch": "@@ -0,0 +1,7 @@\n+// aux-build:lint-group-plugin-test.rs\n+// check-pass\n+// compile-flags: -D unused -A unused-variables\n+\n+fn main() {\n+    let x = 1;\n+}"}, {"sha": "ac808b1f14e13eb3431c06bf4459e5d2ac5e154c", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5e7af4669f80e5f682141f050193ab679afdb4b1/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7af4669f80e5f682141f050193ab679afdb4b1/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=5e7af4669f80e5f682141f050193ab679afdb4b1", "patch": "@@ -1478,11 +1478,7 @@ impl<'test> TestCx<'test> {\n             WillExecute::No => TargetLocation::ThisDirectory(self.output_base_dir()),\n         };\n \n-        let mut rustc = self.make_compile_args(&self.testpaths.file, output_file, emit_metadata);\n-\n-        rustc.arg(\"-L\").arg(&self.aux_output_dir_name());\n-\n-        match self.config.mode {\n+        let allow_unused = match self.config.mode {\n             CompileFail | Ui => {\n                 // compile-fail and ui tests tend to have tons of unused code as\n                 // it's just testing various pieces of the compile, but we don't\n@@ -1495,11 +1491,18 @@ impl<'test> TestCx<'test> {\n                     // via command line flags.\n                     && local_pm != Some(PassMode::Run)\n                 {\n-                    rustc.args(&[\"-A\", \"unused\"]);\n+                    AllowUnused::Yes\n+                } else {\n+                    AllowUnused::No\n                 }\n             }\n-            _ => {}\n-        }\n+            _ => AllowUnused::No,\n+        };\n+\n+        let mut rustc =\n+            self.make_compile_args(&self.testpaths.file, output_file, emit_metadata, allow_unused);\n+\n+        rustc.arg(\"-L\").arg(&self.aux_output_dir_name());\n \n         self.compose_and_run_compiler(rustc, None)\n     }\n@@ -1710,7 +1713,8 @@ impl<'test> TestCx<'test> {\n         // Create the directory for the stdout/stderr files.\n         create_dir_all(aux_cx.output_base_dir()).unwrap();\n         let input_file = &aux_testpaths.file;\n-        let mut aux_rustc = aux_cx.make_compile_args(input_file, aux_output, EmitMetadata::No);\n+        let mut aux_rustc =\n+            aux_cx.make_compile_args(input_file, aux_output, EmitMetadata::No, AllowUnused::No);\n \n         let (dylib, crate_type) = if aux_props.no_prefer_dynamic {\n             (true, None)\n@@ -1819,6 +1823,7 @@ impl<'test> TestCx<'test> {\n         input_file: &Path,\n         output_file: TargetLocation,\n         emit_metadata: EmitMetadata,\n+        allow_unused: AllowUnused,\n     ) -> Command {\n         let is_rustdoc = self.is_rustdoc();\n         let mut rustc = if !is_rustdoc {\n@@ -1953,6 +1958,10 @@ impl<'test> TestCx<'test> {\n             rustc.arg(\"-Ctarget-feature=-crt-static\");\n         }\n \n+        if let AllowUnused::Yes = allow_unused {\n+            rustc.args(&[\"-A\", \"unused\"]);\n+        }\n+\n         rustc.args(&self.props.compile_flags);\n \n         rustc\n@@ -2136,7 +2145,8 @@ impl<'test> TestCx<'test> {\n \n         let output_file = TargetLocation::ThisDirectory(self.output_base_dir());\n         let input_file = &self.testpaths.file;\n-        let mut rustc = self.make_compile_args(input_file, output_file, EmitMetadata::No);\n+        let mut rustc =\n+            self.make_compile_args(input_file, output_file, EmitMetadata::No, AllowUnused::No);\n         rustc.arg(\"-L\").arg(aux_dir).arg(\"--emit=llvm-ir\");\n \n         self.compose_and_run_compiler(rustc, None)\n@@ -2149,7 +2159,8 @@ impl<'test> TestCx<'test> {\n \n         let output_file = TargetLocation::ThisFile(output_path.clone());\n         let input_file = &self.testpaths.file;\n-        let mut rustc = self.make_compile_args(input_file, output_file, EmitMetadata::No);\n+        let mut rustc =\n+            self.make_compile_args(input_file, output_file, EmitMetadata::No, AllowUnused::No);\n \n         rustc.arg(\"-L\").arg(self.aux_output_dir_name());\n \n@@ -3000,6 +3011,7 @@ impl<'test> TestCx<'test> {\n                 &self.testpaths.file.with_extension(UI_FIXED),\n                 TargetLocation::ThisFile(self.make_exe_name()),\n                 emit_metadata,\n+                AllowUnused::No,\n             );\n             rustc.arg(\"-L\").arg(&self.aux_output_dir_name());\n             let res = self.compose_and_run_compiler(rustc, None);\n@@ -3487,6 +3499,11 @@ enum ExpectedLine<T: AsRef<str>> {\n     Text(T),\n }\n \n+enum AllowUnused {\n+    Yes,\n+    No,\n+}\n+\n impl<T> fmt::Debug for ExpectedLine<T>\n where\n     T: AsRef<str> + fmt::Debug,"}]}