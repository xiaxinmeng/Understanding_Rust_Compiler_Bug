{"sha": "7b78b6a78d2caf20f6e6c76523719ec6fe039c19", "node_id": "C_kwDOAAsO6NoAKDdiNzhiNmE3OGQyY2FmMjBmNmU2Yzc2NTIzNzE5ZWM2ZmUwMzljMTk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-28T04:20:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-28T04:20:15Z"}, "message": "Rollup merge of #107022 - scottmcm:ordering-option-eq, r=m-ou-se\n\nImplement `SpecOptionPartialEq` for `cmp::Ordering`\n\nNoticed as I continue to explore options for having code using `partial_cmp` optimize better.\n\nBefore:\n```llvm\n; Function Attrs: mustprogress nofree nosync nounwind willreturn uwtable\ndefine noundef zeroext i1 `@ordering_eq(i8` noundef %0, i8 noundef %1) unnamed_addr #0 {\nstart:\n  %2 = icmp eq i8 %0, 2\n  br i1 %2, label %bb1.i, label %bb3.i\n\nbb1.i:                                            ; preds = %start\n  %3 = icmp eq i8 %1, 2\n  br label %\"_ZN55_$LT$T$u20$as$u20$core..option..SpecOptionPartialEq$GT$2eq17hb7e7beacecde585fE.exit\"\n\nbb3.i:                                            ; preds = %start\n  %.not.i = icmp ne i8 %1, 2\n  %4 = icmp eq i8 %0, %1\n  %spec.select.i = and i1 %.not.i, %4\n  br label %\"_ZN55_$LT$T$u20$as$u20$core..option..SpecOptionPartialEq$GT$2eq17hb7e7beacecde585fE.exit\"\n\n\"_ZN55_$LT$T$u20$as$u20$core..option..SpecOptionPartialEq$GT$2eq17hb7e7beacecde585fE.exit\": ; preds = %bb1.i, %bb3.i\n  %.0.i = phi i1 [ %3, %bb1.i ], [ %spec.select.i, %bb3.i ]\n  ret i1 %.0.i\n}\n```\n\nAfter:\n```llvm\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn uwtable\ndefine noundef zeroext i1 `@ordering_eq(i8` noundef %0, i8 noundef %1) unnamed_addr #1 {\nstart:\n  %2 = icmp eq i8 %0, %1\n  ret i1 %2\n}\n```\n\n(Which <https://alive2.llvm.org/ce/z/-rop5r> says LLVM *could* just do itself, but there's probably an issue already open for that problem from when this was originally looked at for `Option<NonZeroU8>` and friends.)", "tree": {"sha": "27203a72b46068e3a6eb79dc34493f81b9acf697", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27203a72b46068e3a6eb79dc34493f81b9acf697"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b78b6a78d2caf20f6e6c76523719ec6fe039c19", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj1KJ/CRBK7hj4Ov3rIwAA1zEIAGKuhM0Am/vBhTf2jsHg1T2d\ni5tRmITVIXC/iNIPhMjs4u9LsKF0SQ9aSR0AWfhCGf+Itf+NZKBqG24XWCRZSWsO\n88NAWY+Uxjos348+md1sbo6hjA3j6JF/iRE0d0ADxjYE51Ec+oxudYQzYTDIa1Mp\nwRehuJPCdiklbpjM8ZIgE9D0AhjJ2tujDN8dGbH9RfcTyPkiUZUuU6OIak+JtCSq\n0KY48kGk/CzBLKI68sdxv+kD0k0C6alj08XcwEi/OQElmx6CcnMpOZT2d3j6/CWV\nyWVyROTKHLoz3dSsUDSV9nfjf3W1KKMA3Ibwkns6ijr2EFywSrhiPOlBoG9QBiA=\n=hcRy\n-----END PGP SIGNATURE-----\n", "payload": "tree 27203a72b46068e3a6eb79dc34493f81b9acf697\nparent 6cd6bad51fb34a0d89e97c27814041fe4d0838b5\nparent 3e9d1e40cb2a4dc1e1d303e9d9fa382c34106277\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674879615 +0100\ncommitter GitHub <noreply@github.com> 1674879615 +0100\n\nRollup merge of #107022 - scottmcm:ordering-option-eq, r=m-ou-se\n\nImplement `SpecOptionPartialEq` for `cmp::Ordering`\n\nNoticed as I continue to explore options for having code using `partial_cmp` optimize better.\n\nBefore:\n```llvm\n; Function Attrs: mustprogress nofree nosync nounwind willreturn uwtable\ndefine noundef zeroext i1 `@ordering_eq(i8` noundef %0, i8 noundef %1) unnamed_addr #0 {\nstart:\n  %2 = icmp eq i8 %0, 2\n  br i1 %2, label %bb1.i, label %bb3.i\n\nbb1.i:                                            ; preds = %start\n  %3 = icmp eq i8 %1, 2\n  br label %\"_ZN55_$LT$T$u20$as$u20$core..option..SpecOptionPartialEq$GT$2eq17hb7e7beacecde585fE.exit\"\n\nbb3.i:                                            ; preds = %start\n  %.not.i = icmp ne i8 %1, 2\n  %4 = icmp eq i8 %0, %1\n  %spec.select.i = and i1 %.not.i, %4\n  br label %\"_ZN55_$LT$T$u20$as$u20$core..option..SpecOptionPartialEq$GT$2eq17hb7e7beacecde585fE.exit\"\n\n\"_ZN55_$LT$T$u20$as$u20$core..option..SpecOptionPartialEq$GT$2eq17hb7e7beacecde585fE.exit\": ; preds = %bb1.i, %bb3.i\n  %.0.i = phi i1 [ %3, %bb1.i ], [ %spec.select.i, %bb3.i ]\n  ret i1 %.0.i\n}\n```\n\nAfter:\n```llvm\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn uwtable\ndefine noundef zeroext i1 `@ordering_eq(i8` noundef %0, i8 noundef %1) unnamed_addr #1 {\nstart:\n  %2 = icmp eq i8 %0, %1\n  ret i1 %2\n}\n```\n\n(Which <https://alive2.llvm.org/ce/z/-rop5r> says LLVM *could* just do itself, but there's probably an issue already open for that problem from when this was originally looked at for `Option<NonZeroU8>` and friends.)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b78b6a78d2caf20f6e6c76523719ec6fe039c19", "html_url": "https://github.com/rust-lang/rust/commit/7b78b6a78d2caf20f6e6c76523719ec6fe039c19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b78b6a78d2caf20f6e6c76523719ec6fe039c19/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cd6bad51fb34a0d89e97c27814041fe4d0838b5", "html_url": "https://github.com/rust-lang/rust/commit/6cd6bad51fb34a0d89e97c27814041fe4d0838b5"}, {"sha": "3e9d1e40cb2a4dc1e1d303e9d9fa382c34106277", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e9d1e40cb2a4dc1e1d303e9d9fa382c34106277", "html_url": "https://github.com/rust-lang/rust/commit/3e9d1e40cb2a4dc1e1d303e9d9fa382c34106277"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "c43b728022d2fa60ab35b41f249c33410d3afef0", "filename": "library/core/src/option.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7b78b6a78d2caf20f6e6c76523719ec6fe039c19/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b78b6a78d2caf20f6e6c76523719ec6fe039c19/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=7b78b6a78d2caf20f6e6c76523719ec6fe039c19", "patch": "@@ -551,7 +551,7 @@ use crate::marker::Destruct;\n use crate::panicking::{panic, panic_str};\n use crate::pin::Pin;\n use crate::{\n-    convert, hint, mem,\n+    cmp, convert, hint, mem,\n     ops::{self, ControlFlow, Deref, DerefMut},\n };\n \n@@ -2090,6 +2090,12 @@ impl<T: PartialEq> PartialEq for Option<T> {\n     }\n }\n \n+/// This specialization trait is a workaround for LLVM not currently (2023-01)\n+/// being able to optimize this itself, even though Alive confirms that it would\n+/// be legal to do so: <https://github.com/llvm/llvm-project/issues/52622>\n+///\n+/// Once that's fixed, `Option` should go back to deriving `PartialEq`, as\n+/// it used to do before <https://github.com/rust-lang/rust/pull/103556>.\n #[unstable(feature = \"spec_option_partial_eq\", issue = \"none\", reason = \"exposed only for rustc\")]\n #[doc(hidden)]\n pub trait SpecOptionPartialEq: Sized {\n@@ -2146,6 +2152,14 @@ impl<T> SpecOptionPartialEq for crate::ptr::NonNull<T> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl SpecOptionPartialEq for cmp::Ordering {\n+    #[inline]\n+    fn eq(l: &Option<Self>, r: &Option<Self>) -> bool {\n+        l.map_or(2, |x| x as i8) == r.map_or(2, |x| x as i8)\n+    }\n+}\n+\n /////////////////////////////////////////////////////////////////////////////\n // The Option Iterators\n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "835decd3e5f5e488f98693f3b8aa3acbffd857d2", "filename": "tests/codegen/option-nonzero-eq.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b78b6a78d2caf20f6e6c76523719ec6fe039c19/tests%2Fcodegen%2Foption-nonzero-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b78b6a78d2caf20f6e6c76523719ec6fe039c19/tests%2Fcodegen%2Foption-nonzero-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Foption-nonzero-eq.rs?ref=7b78b6a78d2caf20f6e6c76523719ec6fe039c19", "patch": "@@ -3,6 +3,7 @@\n #![crate_type = \"lib\"]\n \n extern crate core;\n+use core::cmp::Ordering;\n use core::num::{NonZeroU32, NonZeroI64};\n use core::ptr::NonNull;\n \n@@ -32,3 +33,12 @@ pub fn non_null_eq(l: Option<NonNull<u8>>, r: Option<NonNull<u8>>) -> bool {\n     // CHECK-NEXT: ret i1\n     l == r\n }\n+\n+// CHECK-lABEL: @ordering_eq\n+#[no_mangle]\n+pub fn ordering_eq(l: Option<Ordering>, r: Option<Ordering>) -> bool {\n+    // CHECK: start:\n+    // CHECK-NEXT: icmp eq i8\n+    // CHECK-NEXT: ret i1\n+    l == r\n+}"}]}