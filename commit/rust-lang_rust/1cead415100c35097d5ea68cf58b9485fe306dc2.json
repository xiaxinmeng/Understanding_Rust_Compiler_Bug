{"sha": "1cead415100c35097d5ea68cf58b9485fe306dc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZWFkNDE1MTAwYzM1MDk3ZDVlYTY4Y2Y1OGI5NDg1ZmUzMDZkYzI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-20T19:00:57Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-20T19:22:32Z"}, "message": "Simplify", "tree": {"sha": "6f5710a5612ce2a0e383bee9b21e8525746fc456", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f5710a5612ce2a0e383bee9b21e8525746fc456"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cead415100c35097d5ea68cf58b9485fe306dc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cead415100c35097d5ea68cf58b9485fe306dc2", "html_url": "https://github.com/rust-lang/rust/commit/1cead415100c35097d5ea68cf58b9485fe306dc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cead415100c35097d5ea68cf58b9485fe306dc2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6241cf9a598b19cbd6c8c41c3743f8d56adafd2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6241cf9a598b19cbd6c8c41c3743f8d56adafd2b", "html_url": "https://github.com/rust-lang/rust/commit/6241cf9a598b19cbd6c8c41c3743f8d56adafd2b"}], "stats": {"total": 56, "additions": 15, "deletions": 41}, "files": [{"sha": "a132d128b57162abe5e640cccdcbb4f490e90594", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1cead415100c35097d5ea68cf58b9485fe306dc2/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cead415100c35097d5ea68cf58b9485fe306dc2/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=1cead415100c35097d5ea68cf58b9485fe306dc2", "patch": "@@ -432,15 +432,16 @@ impl Adt {\n         }\n     }\n \n+    pub fn module(self, db: &impl DefDatabase) -> Module {\n+        match self {\n+            Adt::Struct(s) => s.module(db),\n+            Adt::Union(s) => s.module(db),\n+            Adt::Enum(e) => e.module(db),\n+        }\n+    }\n+\n     pub fn krate(self, db: &impl HirDatabase) -> Option<Crate> {\n-        Some(\n-            match self {\n-                Adt::Struct(s) => s.module(db),\n-                Adt::Union(s) => s.module(db),\n-                Adt::Enum(e) => e.module(db),\n-            }\n-            .krate(),\n-        )\n+        Some(self.module(db).krate())\n     }\n }\n "}, {"sha": "eca8e05969baf9a2778d19bcd446953cba07451b", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 6, "deletions": 33, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1cead415100c35097d5ea68cf58b9485fe306dc2/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cead415100c35097d5ea68cf58b9485fe306dc2/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=1cead415100c35097d5ea68cf58b9485fe306dc2", "patch": "@@ -16,7 +16,7 @@ use crate::{\n     expr::{ExprScopes, PatId, ScopeId},\n     generics::{GenericParams, HasGenericParams},\n     Adt, Const, Container, DefWithBody, Enum, EnumVariant, Function, GenericDef, ImplBlock, Local,\n-    MacroDef, Module, ModuleDef, PerNs, Static, Struct, Trait, TypeAlias, Union,\n+    MacroDef, Module, ModuleDef, PerNs, Static, Struct, Trait, TypeAlias,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -505,40 +505,13 @@ impl HasResolver for Trait {\n     }\n }\n \n-impl HasResolver for Struct {\n+impl<T: Into<Adt>> HasResolver for T {\n     fn resolver(self, db: &impl DefDatabase) -> Resolver {\n-        self.module(db)\n-            .resolver(db)\n-            .push_generic_params_scope(db, self.into())\n-            .push_scope(Scope::AdtScope(self.into()))\n-    }\n-}\n-\n-impl HasResolver for Union {\n-    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n-        self.module(db)\n-            .resolver(db)\n-            .push_generic_params_scope(db, self.into())\n-            .push_scope(Scope::AdtScope(self.into()))\n-    }\n-}\n-\n-impl HasResolver for Enum {\n-    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n-        self.module(db)\n+        let def = self.into();\n+        def.module(db)\n             .resolver(db)\n-            .push_generic_params_scope(db, self.into())\n-            .push_scope(Scope::AdtScope(self.into()))\n-    }\n-}\n-\n-impl HasResolver for Adt {\n-    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n-        match self {\n-            Adt::Struct(it) => it.resolver(db),\n-            Adt::Union(it) => it.resolver(db),\n-            Adt::Enum(it) => it.resolver(db),\n-        }\n+            .push_generic_params_scope(db, def.into())\n+            .push_scope(Scope::AdtScope(def))\n     }\n }\n "}]}