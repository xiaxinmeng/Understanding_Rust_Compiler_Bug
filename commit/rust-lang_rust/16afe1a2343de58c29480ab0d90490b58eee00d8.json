{"sha": "16afe1a2343de58c29480ab0d90490b58eee00d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2YWZlMWEyMzQzZGU1OGMyOTQ4MGFiMGQ5MDQ5MGI1OGVlZTAwZDg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-06T17:28:58Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-17T15:29:19Z"}, "message": "towards letting cargo do binary selection: wrappers and runners set up", "tree": {"sha": "d776bccee87967f096b1cdd644817dc2e77423f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d776bccee87967f096b1cdd644817dc2e77423f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16afe1a2343de58c29480ab0d90490b58eee00d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16afe1a2343de58c29480ab0d90490b58eee00d8", "html_url": "https://github.com/rust-lang/rust/commit/16afe1a2343de58c29480ab0d90490b58eee00d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16afe1a2343de58c29480ab0d90490b58eee00d8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b3b83eb2c01d82cd1fce9285e50bae1c2cb9b54", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b3b83eb2c01d82cd1fce9285e50bae1c2cb9b54", "html_url": "https://github.com/rust-lang/rust/commit/2b3b83eb2c01d82cd1fce9285e50bae1c2cb9b54"}], "stats": {"total": 357, "additions": 103, "deletions": 254}, "files": [{"sha": "bb3b05db03a41d6a0d01b3be6f9b8bab774a047c", "filename": "cargo-miri/Cargo.lock", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/16afe1a2343de58c29480ab0d90490b58eee00d8/cargo-miri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/16afe1a2343de58c29480ab0d90490b58eee00d8/cargo-miri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2FCargo.lock?ref=16afe1a2343de58c29480ab0d90490b58eee00d8", "patch": "@@ -45,7 +45,6 @@ dependencies = [\n name = \"cargo-miri\"\n version = \"0.1.0\"\n dependencies = [\n- \"cargo_metadata\",\n  \"directories\",\n  \"rustc-workspace-hack\",\n  \"rustc_version\",\n@@ -54,17 +53,6 @@ dependencies = [\n  \"vergen\",\n ]\n \n-[[package]]\n-name = \"cargo_metadata\"\n-version = \"0.11.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"89fec17b16f1ac67908af82e47d0a90a7afd0e1827b181cd77504323d3263d35\"\n-dependencies = [\n- \"semver 0.10.0\",\n- \"serde\",\n- \"serde_json\",\n-]\n-\n [[package]]\n name = \"cfg-if\"\n version = \"0.1.10\"\n@@ -228,7 +216,7 @@ version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"\n dependencies = [\n- \"semver 0.9.0\",\n+ \"semver\",\n ]\n \n [[package]]\n@@ -246,16 +234,6 @@ dependencies = [\n  \"semver-parser\",\n ]\n \n-[[package]]\n-name = \"semver\"\n-version = \"0.10.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"394cec28fa623e00903caf7ba4fa6fb9a0e260280bb8cdbbba029611108a0190\"\n-dependencies = [\n- \"semver-parser\",\n- \"serde\",\n-]\n-\n [[package]]\n name = \"semver-parser\"\n version = \"0.7.0\""}, {"sha": "2de581c1c2e260abd7068c83df443b69cd4e5698", "filename": "cargo-miri/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16afe1a2343de58c29480ab0d90490b58eee00d8/cargo-miri%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/16afe1a2343de58c29480ab0d90490b58eee00d8/cargo-miri%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2FCargo.toml?ref=16afe1a2343de58c29480ab0d90490b58eee00d8", "patch": "@@ -14,7 +14,6 @@ test = false # we have no unit tests\n doctest = false # and no doc tests\n \n [dependencies]\n-cargo_metadata = \"0.11\"\n directories = \"2.0\"\n rustc_version = \"0.2.3\"\n serde_json = \"1.0.40\""}, {"sha": "f3a2a511517f4c46a50f5bf065b081c2175341b3", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 102, "deletions": 230, "changes": 332, "blob_url": "https://github.com/rust-lang/rust/blob/16afe1a2343de58c29480ab0d90490b58eee00d8/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16afe1a2343de58c29480ab0d90490b58eee00d8/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=16afe1a2343de58c29480ab0d90490b58eee00d8", "patch": "@@ -116,50 +116,6 @@ fn xargo_check() -> Command {\n     Command::new(env::var_os(\"XARGO_CHECK\").unwrap_or_else(|| OsString::from(\"xargo-check\")))\n }\n \n-fn list_targets() -> impl Iterator<Item = cargo_metadata::Target> {\n-    // We need to get the manifest, and then the metadata, to enumerate targets.\n-    let manifest_path =\n-        get_arg_flag_value(\"--manifest-path\").map(|m| Path::new(&m).canonicalize().unwrap());\n-\n-    let mut cmd = cargo_metadata::MetadataCommand::new();\n-    if let Some(manifest_path) = &manifest_path {\n-        cmd.manifest_path(manifest_path);\n-    }\n-    let mut metadata = if let Ok(metadata) = cmd.exec() {\n-        metadata\n-    } else {\n-        show_error(format!(\"Could not obtain Cargo metadata; likely an ill-formed manifest\"));\n-    };\n-\n-    let current_dir = std::env::current_dir();\n-\n-    let package_index = metadata\n-        .packages\n-        .iter()\n-        .position(|package| {\n-            let package_manifest_path = Path::new(&package.manifest_path);\n-            if let Some(manifest_path) = &manifest_path {\n-                package_manifest_path == manifest_path\n-            } else {\n-                let current_dir = current_dir.as_ref().expect(\"could not read current directory\");\n-                let package_manifest_directory = package_manifest_path\n-                    .parent()\n-                    .expect(\"could not find parent directory of package manifest\");\n-                package_manifest_directory == current_dir\n-            }\n-        })\n-        .unwrap_or_else(|| {\n-            show_error(format!(\n-                \"this seems to be a workspace, which is not supported by `cargo miri`.\\n\\\n-                 Try to `cd` into the crate you want to test, and re-run `cargo miri` there.\"\n-            ))\n-        });\n-    let package = metadata.packages.remove(package_index);\n-\n-    // Finally we got the list of targets to build\n-    package.targets.into_iter()\n-}\n-\n fn xargo_version() -> Option<(u32, u32, u32)> {\n     let out = xargo_check().arg(\"--version\").output().ok()?;\n     if !out.status.success() {\n@@ -381,173 +337,77 @@ path = \"lib.rs\"\n     }\n }\n \n-enum CargoTargets {\n-    All,\n-    Filtered { lib: bool, bin: Vec<String>, test: Vec<String> },\n-}\n-\n-impl CargoTargets {\n-    fn matches(&self, kind: &str, name: &str) -> bool {\n-        match self {\n-            CargoTargets::All => true,\n-            CargoTargets::Filtered { lib, bin, test } => match kind {\n-                \"lib\" => *lib,\n-                \"bin\" => bin.iter().any(|n| n == name),\n-                \"test\" => test.iter().any(|n| n == name),\n-                _ => false,\n-            },\n-        }\n-    }\n-}\n-\n-fn parse_cargo_miri_args(\n-    mut args: impl Iterator<Item = String>,\n-) -> (CargoTargets, Vec<String>, Vec<String>) {\n-    let mut lib_present = false;\n-    let mut bin_targets = Vec::new();\n-    let mut test_targets = Vec::new();\n-    let mut additional_args = Vec::new();\n-    while let Some(arg) = args.next() {\n-        match arg {\n-            arg if arg == \"--\" => {\n-                // Miri arguments begin after the first \"--\".\n-                break;\n-            }\n-            arg if arg == \"--lib\" => lib_present = true,\n-            arg if arg == \"--bin\" => {\n-                if let Some(binary) = args.next() {\n-                    if binary == \"--\" {\n-                        show_error(format!(\"\\\"--bin\\\" takes one argument.\"));\n-                    } else {\n-                        bin_targets.push(binary)\n-                    }\n-                } else {\n-                    show_error(format!(\"\\\"--bin\\\" takes one argument.\"));\n-                }\n-            }\n-            arg if arg.starts_with(\"--bin=\") => bin_targets.push((&arg[\"--bin=\".len()..]).to_string()),\n-            arg if arg == \"--test\" => {\n-                if let Some(test) = args.next() {\n-                    if test == \"--\" {\n-                        show_error(format!(\"\\\"--test\\\" takes one argument.\"));\n-                    } else {\n-                        test_targets.push(test)\n-                    }\n-                } else {\n-                    show_error(format!(\"\\\"--test\\\" takes one argument.\"));\n-                }\n-            }\n-            arg if arg.starts_with(\"--test=\") => test_targets.push((&arg[\"--test=\".len()..]).to_string()),\n-            other => additional_args.push(other),\n-        }\n-    }\n-    let targets = if !lib_present && bin_targets.len() == 0 && test_targets.len() == 0 {\n-        CargoTargets::All\n-    } else {\n-        CargoTargets::Filtered { lib: lib_present, bin: bin_targets, test: test_targets }\n-    };\n-    (targets, additional_args, args.collect())\n-}\n-\n-fn in_cargo_miri() {\n-    let (subcommand, skip) = match std::env::args().nth(2).as_deref() {\n-        Some(\"test\") => (MiriCommand::Test, 3),\n-        Some(\"run\") => (MiriCommand::Run, 3),\n-        Some(\"setup\") => (MiriCommand::Setup, 3),\n-        // Default command, if there is an option or nothing.\n-        Some(s) if s.starts_with(\"-\") => (MiriCommand::Run, 2),\n-        None => (MiriCommand::Run, 2),\n+fn phase_cargo_miri(mut args: env::Args) {\n+    // Require a subcommand before any flags.\n+    // We cannot know which of those flags take arguments and which do not,\n+    // so we cannot detect subcommands later.\n+    let subcommand = match args.next().as_deref() {\n+        Some(\"test\") => MiriCommand::Test,\n+        Some(\"run\") => MiriCommand::Run,\n+        Some(\"setup\") => MiriCommand::Setup,\n         // Invalid command.\n-        Some(s) => show_error(format!(\"Unknown command `{}`\", s)),\n+        None => show_error(format!(\"`cargo miri` must be immediately followed by `test`, `run`, or `setup`.\")),\n+        Some(s) => show_error(format!(\"unknown command `{}`\", s)),\n     };\n     let verbose = has_arg_flag(\"-v\");\n \n     // We always setup.\n     setup(subcommand);\n-    if subcommand == MiriCommand::Setup {\n-        // Stop here.\n-        return;\n-    }\n \n-    // FIXME: this accepts --test, --lib, and multiple --bin for `cargo miri run`.\n-    let (target_filters, cargo_args, miri_args) =\n-        parse_cargo_miri_args(std::env::args().skip(skip));\n-\n-    // Now run the command.\n-    for target in list_targets() {\n-        let kind = target\n-            .kind\n-            .get(0)\n-            .expect(\"badly formatted cargo metadata: target::kind is an empty array\");\n-        if !target_filters.matches(kind, &target.name) {\n-            continue;\n-        }\n-        // Now we run `cargo check $FLAGS $ARGS`, giving the user the\n-        // change to add additional arguments. `FLAGS` is set to identify\n-        // this target.  The user gets to control what gets actually passed to Miri.\n-        let mut cmd = cargo();\n-        cmd.arg(\"check\");\n-        match (subcommand, kind.as_str()) {\n-            (MiriCommand::Run, \"bin\") => {\n-                // FIXME: we default to running all binaries here.\n-                cmd.arg(\"--bin\").arg(target.name);\n-            }\n-            (MiriCommand::Test, \"test\") => {\n-                cmd.arg(\"--test\").arg(target.name);\n-            }\n-            (MiriCommand::Test, \"lib\") => {\n-                // There can be only one lib.\n-                cmd.arg(\"--lib\").arg(\"--profile\").arg(\"test\");\n-            }\n-            (MiriCommand::Test, \"bin\") => {\n-                cmd.arg(\"--bin\").arg(target.name).arg(\"--profile\").arg(\"test\");\n-            }\n-            // The remaining targets we do not even want to build.\n-            _ => continue,\n-        }\n-        // Forward further `cargo` args.\n-        for arg in cargo_args.iter() {\n-            cmd.arg(arg);\n-        }\n-        // We want to always run `cargo` with `--target`. This later helps us detect\n-        // which crates are proc-macro/build-script (host crates) and which crates are\n-        // needed for the program itself.\n-        if get_arg_flag_value(\"--target\").is_none() {\n-            // When no `--target` is given, default to the host.\n-            cmd.arg(\"--target\");\n-            cmd.arg(version_info().host);\n-        }\n+    // Invoke actual cargo for the job, but with different flags.\n+    let miri_path = std::env::current_exe().expect(\"current executable path invalid\");\n+    let cargo_cmd = match subcommand {\n+        MiriCommand::Test => \"test\",\n+        MiriCommand::Run => \"run\",\n+        MiriCommand::Setup => return, // `cargo miri setup` stops here.\n+    };\n+    let mut cmd = cargo();\n+    cmd.arg(cargo_cmd);\n+\n+    // Make sure we know the build target, and cargo does, too.\n+    // This is needed to make the `CARGO_TARGET_*_RUNNER` env var do something,\n+    // and it later helps us detect which crates are proc-macro/build-script\n+    // (host crates) and which crates are needed for the program itself.\n+    let target = if let Some(target) = get_arg_flag_value(\"--target\") {\n+        target\n+    } else {\n+        // No target given. Pick default and tell cargo about it.\n+        let host = version_info().host;\n+        cmd.arg(\"--target\");\n+        cmd.arg(&host);\n+        host\n+    };\n \n-        // Serialize the remaining args into a special environemt variable.\n-        // This will be read by `inside_cargo_rustc` when we go to invoke\n-        // our actual target crate (the binary or the test we are running).\n-        // Since we're using \"cargo check\", we have no other way of passing\n-        // these arguments.\n-        cmd.env(\"MIRI_ARGS\", serde_json::to_string(&miri_args).expect(\"failed to serialize args\"));\n-\n-        // Set `RUSTC_WRAPPER` to ourselves.  Cargo will prepend that binary to its usual invocation,\n-        // i.e., the first argument is `rustc` -- which is what we use in `main` to distinguish\n-        // the two codepaths. (That extra argument is why we prefer this over setting `RUSTC`.)\n-        if env::var_os(\"RUSTC_WRAPPER\").is_some() {\n-            println!(\"WARNING: Ignoring existing `RUSTC_WRAPPER` environment variable, Miri does not support wrapping.\");\n-        }\n-        let path = std::env::current_exe().expect(\"current executable path invalid\");\n-        cmd.env(\"RUSTC_WRAPPER\", path);\n-        if verbose {\n-            cmd.env(\"MIRI_VERBOSE\", \"\"); // this makes `inside_cargo_rustc` verbose.\n-            eprintln!(\"+ {:?}\", cmd);\n-        }\n+    // Forward all further arguments.\n+    cmd.args(args);\n \n-        let exit_status =\n-            cmd.spawn().expect(\"could not run cargo\").wait().expect(\"failed to wait for cargo?\");\n+    // Set `RUSTC_WRAPPER` to ourselves.  Cargo will prepend that binary to its usual invocation,\n+    // i.e., the first argument is `rustc` -- which is what we use in `main` to distinguish\n+    // the two codepaths. (That extra argument is why we prefer this over setting `RUSTC`.)\n+    if env::var_os(\"RUSTC_WRAPPER\").is_some() {\n+        println!(\"WARNING: Ignoring `RUSTC_WRAPPER` environment variable, Miri does not support wrapping.\");\n+    }\n+    cmd.env(\"RUSTC_WRAPPER\", &miri_path);\n+    if verbose {\n+        eprintln!(\"+ RUSTC_WRAPPER={:?}\", miri_path);\n+    }\n \n-        if !exit_status.success() {\n-            std::process::exit(exit_status.code().unwrap_or(-1))\n-        }\n+    // Set the runner for the current target to us as well, so we can interpret the binaries.\n+    let runner_env_name = format!(\"CARGO_TARGET_{}_RUNNER\", target.to_uppercase().replace('-', \"_\"));\n+    cmd.env(runner_env_name, &miri_path);\n+\n+    // Run cargo.\n+    if verbose {\n+        cmd.env(\"MIRI_VERBOSE\", \"\"); // this makes `inside_cargo_rustc` verbose.\n+        eprintln!(\"+ {:?}\", cmd);\n     }\n+    let exit_status =\n+        cmd.spawn().expect(\"could not run cargo\").wait().expect(\"failed to wait for cargo?\");\n+\n+    std::process::exit(exit_status.code().unwrap_or(-1))\n }\n \n-fn inside_cargo_rustc() {\n+fn phase_cargo_rustc(mut args: env::Args) {\n     /// Determines if we are being invoked (as rustc) to build a crate for\n     /// the \"target\" architecture, in contrast to the \"host\" architecture.\n     /// Host crates are for build scripts and proc macros and still need to\n@@ -569,15 +429,35 @@ fn inside_cargo_rustc() {\n     fn is_runnable_crate() -> bool {\n         let is_bin = get_arg_flag_value(\"--crate-type\").as_deref() == Some(\"bin\");\n         let is_test = has_arg_flag(\"--test\");\n-        is_bin || is_test\n+        let print = get_arg_flag_value(\"--print\").is_some();\n+        (is_bin || is_test) && !print\n     }\n \n     let verbose = std::env::var_os(\"MIRI_VERBOSE\").is_some();\n     let target_crate = is_target_crate();\n \n+    if target_crate && is_runnable_crate() {\n+        // This is the binary or test crate that we want to interpret under Miri.\n+        // But we cannot run it here, as cargo invoked us as a compiler -- our stdin and stdout are not\n+        // like we want them.\n+        // Instead of compiling, we write JSON into the output file with all the relevant command-line flags\n+        // and environment variables; this is sued alter when cargo calls us again in the CARGO_TARGET_RUNNER phase.\n+        let filename = format!(\n+            \"{}/{}{}\",\n+            get_arg_flag_value(\"--out-dir\").unwrap(),\n+            get_arg_flag_value(\"--crate-name\").unwrap(),\n+            // This is technically a `-C` flag but the prefix seems unique enough...\n+            // (and cargo passes this before the filename so it should be unique)\n+            get_arg_flag_value(\"extra-filename\").unwrap_or(String::new()),\n+        );\n+        eprintln!(\"Miri is supposed to run {}\", filename);\n+        return;\n+    }\n+\n     let mut cmd = miri();\n     // Forward arguments.\n-    cmd.args(std::env::args().skip(2)); // skip `cargo-miri rustc`\n+    cmd.args(args);\n+    // FIXME: Make the build check-only!\n \n     // We make sure to only specify our custom Xargo sysroot for target crates - that is,\n     // crates which are needed for interpretation by Miri. proc-macros and build scripts\n@@ -589,23 +469,9 @@ fn inside_cargo_rustc() {\n         cmd.arg(sysroot);\n     }\n \n-    // If this is a runnable target crate, we want Miri to start interpretation;\n-    // otherwise we want Miri to behave like rustc and build the crate as usual.\n-    if target_crate && is_runnable_crate() {\n-        // This is the binary or test crate that we want to interpret under Miri.\n-        // (Testing `target_crate` is needed to exclude build scripts.)\n-        // We deserialize the arguments that are meant for Miri from the special environment\n-        // variable \"MIRI_ARGS\", and feed them to the 'miri' binary.\n-        //\n-        // `env::var` is okay here, well-formed JSON is always UTF-8.\n-        let magic = std::env::var(\"MIRI_ARGS\").expect(\"missing MIRI_ARGS\");\n-        let miri_args: Vec<String> =\n-            serde_json::from_str(&magic).expect(\"failed to deserialize MIRI_ARGS\");\n-        cmd.args(miri_args);\n-    } else {\n-        // We want to compile, not interpret.\n-        cmd.env(\"MIRI_BE_RUSTC\", \"1\");\n-    };\n+    // We want to compile, not interpret. We still use Miri to make sure the compiler version etc\n+    // are the exact same as what is used for interpretation.\n+    cmd.env(\"MIRI_BE_RUSTC\", \"1\");\n \n     // Run it.\n     if verbose {\n@@ -620,6 +486,10 @@ fn inside_cargo_rustc() {\n     }\n }\n \n+fn phase_cargo_runner(binary: &str, args: env::Args) {\n+    eprintln!(\"Asked to execute {}, args: {:?}\", binary, args.collect::<Vec<_>>());\n+}\n+\n fn main() {\n     // Check for version and help flags even when invoked as `cargo-miri`.\n     if has_arg_flag(\"--help\") || has_arg_flag(\"-h\") {\n@@ -631,18 +501,20 @@ fn main() {\n         return;\n     }\n \n-    if let Some(\"miri\") = std::env::args().nth(1).as_deref() {\n-        // This arm is for when `cargo miri` is called. We call `cargo check` for each applicable target,\n-        // but with the `RUSTC` env var set to the `cargo-miri` binary so that we come back in the other branch,\n-        // and dispatch the invocations to `rustc` and `miri`, respectively.\n-        in_cargo_miri();\n-    } else if let Some(\"rustc\") = std::env::args().nth(1).as_deref() {\n-        // This arm is executed when `cargo-miri` runs `cargo check` with the `RUSTC_WRAPPER` env var set to itself:\n-        // dependencies get dispatched to `rustc`, the final test/binary to `miri`.\n-        inside_cargo_rustc();\n-    } else {\n-        show_error(format!(\n-            \"`cargo-miri` must be called with either `miri` or `rustc` as first argument.\"\n-        ))\n+    let mut args = std::env::args();\n+    // Skip binary name.\n+    args.next().unwrap();\n+\n+    // Dispatch to `cargo-miri` phase. There are three phases:\n+    // - When we are called via `cargo miri`, we run as the frontend and invoke the underlying\n+    //   cargo. We set RUSTC_WRAPPER and CARGO_TARGET_RUNNER to ourselves.\n+    // - When we are executed due to RUSTC_WRAPPER, we build crates or store the flags of\n+    //   binary crates for later interpretation.\n+    // - When we are executed due to CARGO_TARGET_RUNNER, we start interpretation based on the\n+    //   flags that were stored earlier.\n+    match &*args.next().unwrap() {\n+        \"miri\" => phase_cargo_miri(args),\n+        \"rustc\" => phase_cargo_rustc(args),\n+        binary => phase_cargo_runner(binary, args),\n     }\n }"}]}