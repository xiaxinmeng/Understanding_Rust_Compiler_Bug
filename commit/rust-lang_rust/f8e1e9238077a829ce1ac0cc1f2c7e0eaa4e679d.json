{"sha": "f8e1e9238077a829ce1ac0cc1f2c7e0eaa4e679d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZTFlOTIzODA3N2E4MjljZTFhYzBjYzFmMmM3ZTBlYWE0ZTY3OWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-16T15:11:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-16T15:11:48Z"}, "message": "Auto merge of #84549 - tmiasko:static-initializer, r=varkor\n\nReachable statics have reachable initializers\n\nStatic initializer can read other statics. Initializers are evaluated at\ncompile time, and so their content could become inlined into another\ncrate. Ensure that initializers of reachable statics are also reachable.\n\nPreviously, when an item incorrectly considered to be unreachable was\nreached from another crate an attempt would be made to codegen it. The\nattempt could fail with an ICE (in the case MIR wasn't available to do\nso) in some circumstances the attempt could also succeed resulting in\na local codegen of non-local items, including static ones.\n\nFixes #84455.", "tree": {"sha": "f42214318eb2191b970f85c0c4408711213bce9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f42214318eb2191b970f85c0c4408711213bce9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8e1e9238077a829ce1ac0cc1f2c7e0eaa4e679d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8e1e9238077a829ce1ac0cc1f2c7e0eaa4e679d", "html_url": "https://github.com/rust-lang/rust/commit/f8e1e9238077a829ce1ac0cc1f2c7e0eaa4e679d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8e1e9238077a829ce1ac0cc1f2c7e0eaa4e679d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "747a5d2a5d6693f5e9426524b0dab34eb1587377", "url": "https://api.github.com/repos/rust-lang/rust/commits/747a5d2a5d6693f5e9426524b0dab34eb1587377", "html_url": "https://github.com/rust-lang/rust/commit/747a5d2a5d6693f5e9426524b0dab34eb1587377"}, {"sha": "eaddc8febd02ca0b0cbd0fa08b8b752cb347b725", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaddc8febd02ca0b0cbd0fa08b8b752cb347b725", "html_url": "https://github.com/rust-lang/rust/commit/eaddc8febd02ca0b0cbd0fa08b8b752cb347b725"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "ec47f5972573dbe24a011f4eb933c492e426ed29", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8e1e9238077a829ce1ac0cc1f2c7e0eaa4e679d/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8e1e9238077a829ce1ac0cc1f2c7e0eaa4e679d/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=f8e1e9238077a829ce1ac0cc1f2c7e0eaa4e679d", "patch": "@@ -250,7 +250,7 @@ impl<'tcx> ReachableContext<'tcx> {\n                     // Reachable constants will be inlined into other crates\n                     // unconditionally, so we need to make sure that their\n                     // contents are also reachable.\n-                    hir::ItemKind::Const(_, init) => {\n+                    hir::ItemKind::Const(_, init) | hir::ItemKind::Static(_, _, init) => {\n                         self.visit_nested_body(init);\n                     }\n \n@@ -261,7 +261,6 @@ impl<'tcx> ReachableContext<'tcx> {\n                     | hir::ItemKind::Use(..)\n                     | hir::ItemKind::OpaqueTy(..)\n                     | hir::ItemKind::TyAlias(..)\n-                    | hir::ItemKind::Static(..)\n                     | hir::ItemKind::Mod(..)\n                     | hir::ItemKind::ForeignMod { .. }\n                     | hir::ItemKind::Impl { .. }"}, {"sha": "feb4af6286eea1c8d4726a05eb53670569c65a9f", "filename": "src/test/codegen/external-no-mangle-statics.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8e1e9238077a829ce1ac0cc1f2c7e0eaa4e679d/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8e1e9238077a829ce1ac0cc1f2c7e0eaa4e679d/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs?ref=f8e1e9238077a829ce1ac0cc1f2c7e0eaa4e679d", "patch": "@@ -58,7 +58,6 @@ const HIDDEN: () = {\n     pub static mut L: u8 = 0;\n };\n \n-// The surrounding item should not accidentally become external\n fn x() {\n     // CHECK: @M = local_unnamed_addr constant\n     #[no_mangle]\n@@ -76,6 +75,3 @@ fn x() {\n     #[no_mangle]\n     pub static mut P: u8 = 0;\n }\n-// CHECK-LABEL: ; external_no_mangle_statics::x\n-// CHECK-NEXT: ; Function Attrs:\n-// CHECK-NEXT: define internal"}, {"sha": "3b664f43654e9a48a124054b9e694e799d154112", "filename": "src/test/ui/cross-crate/auxiliary/static_init_aux.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8e1e9238077a829ce1ac0cc1f2c7e0eaa4e679d/src%2Ftest%2Fui%2Fcross-crate%2Fauxiliary%2Fstatic_init_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8e1e9238077a829ce1ac0cc1f2c7e0eaa4e679d/src%2Ftest%2Fui%2Fcross-crate%2Fauxiliary%2Fstatic_init_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-crate%2Fauxiliary%2Fstatic_init_aux.rs?ref=f8e1e9238077a829ce1ac0cc1f2c7e0eaa4e679d", "patch": "@@ -0,0 +1,10 @@\n+pub static V: &u32 = &X;\n+pub static F: fn() = f;\n+\n+static X: u32 = 42;\n+\n+pub fn v() -> *const u32 {\n+    V\n+}\n+\n+fn f() {}"}, {"sha": "2e893c5d9bff9e01c9f7441c6e938c79403a6803", "filename": "src/test/ui/cross-crate/static-init.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f8e1e9238077a829ce1ac0cc1f2c7e0eaa4e679d/src%2Ftest%2Fui%2Fcross-crate%2Fstatic-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8e1e9238077a829ce1ac0cc1f2c7e0eaa4e679d/src%2Ftest%2Fui%2Fcross-crate%2Fstatic-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-crate%2Fstatic-init.rs?ref=f8e1e9238077a829ce1ac0cc1f2c7e0eaa4e679d", "patch": "@@ -0,0 +1,15 @@\n+// run-pass\n+// aux-build:static_init_aux.rs\n+extern crate static_init_aux as aux;\n+\n+static V: &u32 = aux::V;\n+static F: fn() = aux::F;\n+\n+fn v() -> *const u32 {\n+    V\n+}\n+\n+fn main() {\n+    assert_eq!(aux::v(), crate::v());\n+    F();\n+}"}]}