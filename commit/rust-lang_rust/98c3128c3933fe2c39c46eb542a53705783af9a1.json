{"sha": "98c3128c3933fe2c39c46eb542a53705783af9a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YzMxMjhjMzkzM2ZlMmMzOWM0NmViNTQyYTUzNzA1NzgzYWY5YTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-22T08:56:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-22T08:56:27Z"}, "message": "Auto merge of #39127 - canndrew:unreachable-pattern-errors-into-warnings, r=arielb1\n\nChange unreachable pattern ICEs to warnings\n\nAllow code with unreachable `?` and `for` patterns to compile.\nAdd some tests.", "tree": {"sha": "3dcba0f646003ad33609aa42a56c1fc8e4b99621", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dcba0f646003ad33609aa42a56c1fc8e4b99621"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98c3128c3933fe2c39c46eb542a53705783af9a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98c3128c3933fe2c39c46eb542a53705783af9a1", "html_url": "https://github.com/rust-lang/rust/commit/98c3128c3933fe2c39c46eb542a53705783af9a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98c3128c3933fe2c39c46eb542a53705783af9a1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44858b8d467ed0ecab5a266a8aac3b5563775e94", "url": "https://api.github.com/repos/rust-lang/rust/commits/44858b8d467ed0ecab5a266a8aac3b5563775e94", "html_url": "https://github.com/rust-lang/rust/commit/44858b8d467ed0ecab5a266a8aac3b5563775e94"}, {"sha": "0aad529e1ce777c03d1a04db774d0b371b0ff6bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aad529e1ce777c03d1a04db774d0b371b0ff6bf", "html_url": "https://github.com/rust-lang/rust/commit/0aad529e1ce777c03d1a04db774d0b371b0ff6bf"}], "stats": {"total": 153, "additions": 135, "deletions": 18}, "files": [{"sha": "89afc08fa2438c0bfad7582db1d52615821f1b19", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/98c3128c3933fe2c39c46eb542a53705783af9a1/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c3128c3933fe2c39c46eb542a53705783af9a1/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=98c3128c3933fe2c39c46eb542a53705783af9a1", "patch": "@@ -51,6 +51,7 @@ use util::nodemap::{NodeMap, FxHashMap};\n use std::collections::BTreeMap;\n use std::iter;\n \n+use syntax::attr;\n use syntax::ast::*;\n use syntax::errors;\n use syntax::ptr::P;\n@@ -1831,8 +1832,9 @@ impl<'a> LoweringContext<'a> {\n                     // to:\n                     //\n                     // match Carrier::translate(<expr>) {\n-                    //     Ok(val) => val,\n-                    //     Err(err) => return Carrier::from_error(From::from(err))\n+                    //     Ok(val) => #[allow(unreachable_code)] val,\n+                    //     Err(err) => #[allow(unreachable_code)]\n+                    //                 return Carrier::from_error(From::from(err)),\n                     // }\n                     let unstable_span = self.allow_internal_unstable(\"?\", e.span);\n \n@@ -1846,17 +1848,36 @@ impl<'a> LoweringContext<'a> {\n                         P(self.expr_call(e.span, path, hir_vec![sub_expr]))\n                     };\n \n-                    // Ok(val) => val\n+                    // #[allow(unreachable_code)]\n+                    let attr = {\n+                        // allow(unreachable_code)\n+                        let allow = {\n+                            let allow_ident = self.str_to_ident(\"allow\");\n+                            let uc_ident = self.str_to_ident(\"unreachable_code\");\n+                            let uc_meta_item = attr::mk_spanned_word_item(e.span, uc_ident);\n+                            let uc_nested = NestedMetaItemKind::MetaItem(uc_meta_item);\n+                            let uc_spanned = respan(e.span, uc_nested);\n+                            attr::mk_spanned_list_item(e.span, allow_ident, vec![uc_spanned])\n+                        };\n+                        attr::mk_spanned_attr_outer(e.span, attr::mk_attr_id(), allow)\n+                    };\n+                    let attrs = vec![attr];\n+\n+                    // Ok(val) => #[allow(unreachable_code)] val,\n                     let ok_arm = {\n                         let val_ident = self.str_to_ident(\"val\");\n                         let val_pat = self.pat_ident(e.span, val_ident);\n-                        let val_expr = P(self.expr_ident(e.span, val_ident, val_pat.id));\n+                        let val_expr = P(self.expr_ident_with_attrs(e.span,\n+                                                                    val_ident,\n+                                                                    val_pat.id,\n+                                                                    ThinVec::from(attrs.clone())));\n                         let ok_pat = self.pat_ok(e.span, val_pat);\n \n                         self.arm(hir_vec![ok_pat], val_expr)\n                     };\n \n-                    // Err(err) => return Carrier::from_error(From::from(err))\n+                    // Err(err) => #[allow(unreachable_code)]\n+                    //             return Carrier::from_error(From::from(err)),\n                     let err_arm = {\n                         let err_ident = self.str_to_ident(\"err\");\n                         let err_local = self.pat_ident(e.span, err_ident);\n@@ -1876,7 +1897,7 @@ impl<'a> LoweringContext<'a> {\n \n                         let ret_expr = P(self.expr(e.span,\n                                                    hir::Expr_::ExprRet(Some(from_err_expr)),\n-                                                                       ThinVec::new()));\n+                                                                       ThinVec::from(attrs)));\n \n                         let err_pat = self.pat_err(e.span, err_local);\n                         self.arm(hir_vec![err_pat], ret_expr)\n@@ -2028,6 +2049,13 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn expr_ident(&mut self, span: Span, id: Name, binding: NodeId) -> hir::Expr {\n+        self.expr_ident_with_attrs(span, id, binding, ThinVec::new())\n+    }\n+\n+    fn expr_ident_with_attrs(&mut self, span: Span,\n+                                        id: Name,\n+                                        binding: NodeId,\n+                                        attrs: ThinVec<Attribute>) -> hir::Expr {\n         let def = {\n             let defs = self.resolver.definitions();\n             Def::Local(defs.local_def_id(binding))\n@@ -2039,7 +2067,7 @@ impl<'a> LoweringContext<'a> {\n             segments: hir_vec![hir::PathSegment::from_name(id)],\n         })));\n \n-        self.expr(span, expr_path, ThinVec::new())\n+        self.expr(span, expr_path, attrs)\n     }\n \n     fn expr_mut_addr_of(&mut self, span: Span, e: P<hir::Expr>) -> hir::Expr {"}, {"sha": "52f332a30c03b81f591af3bd4e099a6751eac8f1", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/98c3128c3933fe2c39c46eb542a53705783af9a1/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c3128c3933fe2c39c46eb542a53705783af9a1/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=98c3128c3933fe2c39c46eb542a53705783af9a1", "patch": "@@ -308,14 +308,7 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                                 .emit();\n                         },\n \n-                        hir::MatchSource::ForLoopDesugar => {\n-                            // this is a bug, because on `match iter.next()` we cover\n-                            // `Some(<head>)` and `None`. It's impossible to have an unreachable\n-                            // pattern\n-                            // (see libsyntax/ext/expand.rs for the full expansion of a for loop)\n-                            span_bug!(pat.span, \"unreachable for-loop pattern\")\n-                        },\n-\n+                        hir::MatchSource::ForLoopDesugar |\n                         hir::MatchSource::Normal => {\n                             let mut diagnostic = Diagnostic::new(Level::Warning,\n                                                                  \"unreachable pattern\");\n@@ -329,9 +322,9 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                                                             hir_pat.id, diagnostic);\n                         },\n \n-                        hir::MatchSource::TryDesugar => {\n-                            span_bug!(pat.span, \"unreachable try pattern\")\n-                        },\n+                        // Unreachable patterns in try expressions occur when one of the arms\n+                        // are an uninhabited type. Which is OK.\n+                        hir::MatchSource::TryDesugar => {}\n                     }\n                 }\n                 Useful => (),"}, {"sha": "f8d6c3de2ab03824668244a8d5ae5ed8e0bcf3c4", "filename": "src/test/compile-fail/recursive-types-are-not-uninhabited.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/98c3128c3933fe2c39c46eb542a53705783af9a1/src%2Ftest%2Fcompile-fail%2Frecursive-types-are-not-uninhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c3128c3933fe2c39c46eb542a53705783af9a1/src%2Ftest%2Fcompile-fail%2Frecursive-types-are-not-uninhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecursive-types-are-not-uninhabited.rs?ref=98c3128c3933fe2c39c46eb542a53705783af9a1", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//#![feature(never_type)]\n+\n+struct R<'a> {\n+    r: &'a R<'a>,\n+}\n+\n+fn foo(res: Result<u32, &R>) -> u32 {\n+    let Ok(x) = res;\n+    //~^ ERROR refutable pattern\n+    x\n+}\n+\n+fn main() {\n+    foo(Ok(23));\n+}\n+"}, {"sha": "6147692658f945f5d8b10013a566dbe396f04f1e", "filename": "src/test/compile-fail/unreachable-loop-patterns.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/98c3128c3933fe2c39c46eb542a53705783af9a1/src%2Ftest%2Fcompile-fail%2Funreachable-loop-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c3128c3933fe2c39c46eb542a53705783af9a1/src%2Ftest%2Fcompile-fail%2Funreachable-loop-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-loop-patterns.rs?ref=98c3128c3933fe2c39c46eb542a53705783af9a1", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(never_type)]\n+#![deny(unreachable_patterns)]\n+\n+fn main() {\n+    let x: &[!] = &[];\n+\n+    for _ in x {}\n+    //~^ ERROR unreachable pattern\n+}\n+"}, {"sha": "f4817ba33b518f45dd44d62b5065819f78742f1f", "filename": "src/test/compile-fail/unreachable-try-pattern.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/98c3128c3933fe2c39c46eb542a53705783af9a1/src%2Ftest%2Fcompile-fail%2Funreachable-try-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c3128c3933fe2c39c46eb542a53705783af9a1/src%2Ftest%2Fcompile-fail%2Funreachable-try-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-try-pattern.rs?ref=98c3128c3933fe2c39c46eb542a53705783af9a1", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(never_type)]\n+#![deny(unreachable_code)]\n+#![deny(unreachable_patterns)]\n+\n+enum Void {}\n+\n+impl From<Void> for i32 {\n+    fn from(v: Void) -> i32 {\n+        match v {}\n+    }\n+}\n+\n+fn bar(x: Result<!, i32>) -> Result<u32, i32> {\n+    x?\n+}\n+\n+fn foo(x: Result<!, i32>) -> Result<u32, i32> {\n+    let y = (match x { Ok(n) => Ok(n as u32), Err(e) => Err(e) })?;\n+    //~^ ERROR unreachable pattern\n+    //~| ERROR unreachable expression\n+    Ok(y)\n+}\n+\n+fn qux(x: Result<u32, Void>) -> Result<u32, i32> {\n+    Ok(x?)\n+}\n+\n+fn vom(x: Result<u32, Void>) -> Result<u32, i32> {\n+    let y = (match x { Ok(n) => Ok(n), Err(e) => Err(e) })?;\n+    //~^ ERROR unreachable pattern\n+    Ok(y)\n+}\n+\n+fn main() {\n+    let _ = bar(Err(123));\n+    let _ = foo(Err(123));\n+    let _ = qux(Ok(123));\n+    let _ = vom(Ok(123));\n+}\n+"}]}