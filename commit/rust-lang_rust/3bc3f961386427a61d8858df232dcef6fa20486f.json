{"sha": "3bc3f961386427a61d8858df232dcef6fa20486f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYzNmOTYxMzg2NDI3YTYxZDg4NThkZjIzMmRjZWY2ZmEyMDQ4NmY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-05T09:51:41Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-05T09:51:41Z"}, "message": "Make trans_lval lval-only\n\nCall trans_temp_lval if you want the old fallback-to-temporary behaviour.\n\nIssue #667", "tree": {"sha": "753f8897c47343f46c419444e7f32f11bb4957c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/753f8897c47343f46c419444e7f32f11bb4957c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bc3f961386427a61d8858df232dcef6fa20486f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bc3f961386427a61d8858df232dcef6fa20486f", "html_url": "https://github.com/rust-lang/rust/commit/3bc3f961386427a61d8858df232dcef6fa20486f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bc3f961386427a61d8858df232dcef6fa20486f/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cc0008ec04153d36fd11e6172cfb39b21ca31b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cc0008ec04153d36fd11e6172cfb39b21ca31b2", "html_url": "https://github.com/rust-lang/rust/commit/2cc0008ec04153d36fd11e6172cfb39b21ca31b2"}], "stats": {"total": 74, "additions": 15, "deletions": 59}, "files": [{"sha": "60b78e9cbe89123d19a356b6dd01ab402cbc0af4", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 14, "deletions": 57, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/3bc3f961386427a61d8858df232dcef6fa20486f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc3f961386427a61d8858df232dcef6fa20486f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=3bc3f961386427a61d8858df232dcef6fa20486f", "patch": "@@ -2541,27 +2541,6 @@ fn get_dest_addr(dest: dest) -> ValueRef {\n     alt dest { save_in(a) { a } }\n }\n \n-// Wrapper through which legacy non-DPS code can use DPS functions\n-fn dps_to_result(bcx: @block_ctxt,\n-                 work: block(@block_ctxt, dest) -> @block_ctxt,\n-                 ty: ty::t) -> result {\n-    let tcx = bcx_tcx(bcx);\n-    if ty::type_is_nil(tcx, ty) || ty::type_is_bot(tcx, ty) {\n-        ret rslt(work(bcx, ignore), C_nil());\n-    } else if type_is_immediate(bcx_ccx(bcx), ty) {\n-        let cell = empty_dest_cell();\n-        bcx = work(bcx, by_val(cell));\n-        add_clean_temp(bcx, *cell, ty);\n-        ret rslt(bcx, *cell);\n-    } else {\n-        let {bcx, val: alloca} = alloc_ty(bcx, ty);\n-        bcx = zero_alloca(bcx, alloca, ty);\n-        bcx = work(bcx, save_in(alloca));\n-        add_clean_temp(bcx, alloca, ty);\n-        ret rslt(bcx, alloca);\n-    }\n-}\n-\n fn trans_if(cx: @block_ctxt, cond: @ast::expr, thn: ast::blk,\n             els: option::t<@ast::expr>, dest: dest)\n     -> @block_ctxt {\n@@ -3244,7 +3223,7 @@ fn trans_callee(bcx: @block_ctxt, e: @ast::expr) -> lval_maybe_callee {\n     alt e.node {\n       ast::expr_path(p) { ret trans_path(bcx, p, e.id); }\n       ast::expr_field(base, ident) {\n-        // Lval means record field, so not a method\n+        // Lval means this is a record field, so not a method\n         if !expr_is_lval(bcx_tcx(bcx), e) {\n             let of = trans_object_field(bcx, base, ident);\n             ret {bcx: of.bcx, val: of.mthptr, is_mem: true,\n@@ -3262,7 +3241,7 @@ fn trans_callee(bcx: @block_ctxt, e: @ast::expr) -> lval_maybe_callee {\n       }\n       _ {}\n     }\n-    let lv = trans_lval(bcx, e);\n+    let lv = trans_temp_lval(bcx, e);\n     ret lval_no_env(lv.bcx, lv.val, lv.is_mem);\n }\n \n@@ -3288,7 +3267,6 @@ fn expr_is_lval(tcx: ty::ctxt, e: @ast::expr) -> bool {\n // The additional bool returned indicates whether it's mem (that is\n // represented as an alloca or heap, hence needs a 'load' to be used as an\n // immediate).\n-// FIXME[DPS] only allow this to be called on actual lvals\n fn trans_lval(cx: @block_ctxt, e: @ast::expr) -> lval_result {\n     alt e.node {\n       ast::expr_path(p) {\n@@ -3327,25 +3305,13 @@ fn trans_lval(cx: @block_ctxt, e: @ast::expr) -> lval_result {\n             };\n         ret lval_mem(sub.bcx, val);\n       }\n+      // This is a by-ref returning call. Regular calls are not lval\n       ast::expr_call(f, args) {\n-        // A by-ref returning function\n-        if expr_is_lval(bcx_tcx(cx), e) {\n-            let cell = empty_dest_cell();\n-            let bcx = trans_call(cx, f, none, args, e.id, by_val(cell));\n-            ret lval_mem(bcx, *cell);\n-        } else { // By-value return\n-            // FIXME[DPS] this will disappear when trans_lval only handles\n-            // lvals\n-            let {bcx, val} = dps_to_result(cx, {|bcx, dest|\n-                trans_call(bcx, f, none, args, e.id, dest) },\n-                                           ty::expr_ty(bcx_tcx(cx), e));\n-            ret lval_val(bcx, val);\n-        }\n-      }\n-      _ {\n-        let res = trans_temp_expr(cx, e);\n-        ret lval_val(res.bcx, res.val);\n+        let cell = empty_dest_cell();\n+        let bcx = trans_call(cx, f, none, args, e.id, by_val(cell));\n+        ret lval_mem(bcx, *cell);\n       }\n+      _ { bcx_ccx(cx).sess.span_bug(e.span, \"non-lval in trans_lval\"); }\n     }\n }\n \n@@ -3736,7 +3702,7 @@ fn trans_arg_expr(cx: @block_ctxt, arg: ty::arg, lldestty0: TypeRef,\n     let ccx = bcx_ccx(cx);\n     let e_ty = ty::expr_ty(ccx.tcx, e);\n     let is_bot = ty::type_is_bot(ccx.tcx, e_ty);\n-    let lv = trans_lval(cx, e);\n+    let lv = trans_temp_lval(cx, e);\n     let bcx = lv.bcx;\n     let val = lv.val;\n     if is_bot {\n@@ -5331,27 +5297,18 @@ fn trans_closure(cx: @local_ctxt, sp: span, f: ast::_fn, llfndecl: ValueRef,\n     finish_fn(fcx, lltop);\n }\n \n-fn trans_fn_inner(cx: @local_ctxt, sp: span, f: ast::_fn, llfndecl: ValueRef,\n-                  ty_self: option::t<ty::t>, ty_params: [ast::ty_param],\n-                  id: ast::node_id) {\n-    trans_closure(cx, sp, f, llfndecl, ty_self, ty_params, id, {|_fcx|});\n-}\n-\n-\n // trans_fn: creates an LLVM function corresponding to a source language\n // function.\n fn trans_fn(cx: @local_ctxt, sp: span, f: ast::_fn, llfndecl: ValueRef,\n             ty_self: option::t<ty::t>, ty_params: [ast::ty_param],\n             id: ast::node_id) {\n-    if !cx.ccx.sess.get_opts().stats {\n-        trans_fn_inner(cx, sp, f, llfndecl, ty_self, ty_params, id);\n-        ret;\n+    let do_time = cx.ccx.sess.get_opts().stats;\n+    let start = do_time ? time::get_time() : {sec: 0u32, usec: 0u32};\n+    trans_closure(cx, sp, f, llfndecl, ty_self, ty_params, id, {|_fcx|});\n+    if do_time {\n+        let end = time::get_time();\n+        log_fn_time(cx.ccx, str::connect(cx.path, \"::\"), start, end);\n     }\n-\n-    let start = time::get_time();\n-    trans_fn_inner(cx, sp, f, llfndecl, ty_self, ty_params, id);\n-    let end = time::get_time();\n-    log_fn_time(cx.ccx, str::connect(cx.path, \"::\"), start, end);\n }\n \n fn trans_res_ctor(cx: @local_ctxt, sp: span, dtor: ast::_fn,"}, {"sha": "def42ecfdd93e54535739da5a31aecaa45fc6f77", "filename": "src/comp/middle/trans_uniq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bc3f961386427a61d8858df232dcef6fa20486f/src%2Fcomp%2Fmiddle%2Ftrans_uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc3f961386427a61d8858df232dcef6fa20486f/src%2Fcomp%2Fmiddle%2Ftrans_uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_uniq.rs?ref=3bc3f961386427a61d8858df232dcef6fa20486f", "patch": "@@ -7,7 +7,6 @@ import trans::{\n     type_of_inner,\n     size_of,\n     node_id_type,\n-    trans_lval,\n     INIT,\n     trans_shared_free,\n     drop_ty,"}, {"sha": "c772d026ffc9bbc5c6d8b3b367dd4846e74856cf", "filename": "src/comp/middle/trans_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc3f961386427a61d8858df232dcef6fa20486f/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc3f961386427a61d8858df232dcef6fa20486f/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs?ref=3bc3f961386427a61d8858df232dcef6fa20486f", "patch": "@@ -6,7 +6,7 @@ import back::abi;\n import trans::{call_memmove, trans_shared_malloc, llsize_of, type_of_or_i8,\n                INIT, copy_val, load_if_immediate, alloca, size_of,\n                llderivedtydescs_block_ctxt, lazily_emit_tydesc_glue,\n-               get_tydesc, load_inbounds, trans_lval,\n+               get_tydesc, load_inbounds,\n                node_id_type, new_sub_block_ctxt, tps_normal, do_spill_noroot,\n                GEPi, alloc_ty, dest};\n import trans_build::*;"}]}