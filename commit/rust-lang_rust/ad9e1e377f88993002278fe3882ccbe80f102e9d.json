{"sha": "ad9e1e377f88993002278fe3882ccbe80f102e9d", "node_id": "C_kwDOAAsO6NoAKGFkOWUxZTM3N2Y4ODk5MzAwMjI3OGZlMzg4MmNjYmU4MGYxMDJlOWQ", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-07-08T01:43:24Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-07-08T02:14:01Z"}, "message": "Use map_bound", "tree": {"sha": "40e22f0057f778c3ebf232d4cb0c0339300425e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40e22f0057f778c3ebf232d4cb0c0339300425e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad9e1e377f88993002278fe3882ccbe80f102e9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad9e1e377f88993002278fe3882ccbe80f102e9d", "html_url": "https://github.com/rust-lang/rust/commit/ad9e1e377f88993002278fe3882ccbe80f102e9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad9e1e377f88993002278fe3882ccbe80f102e9d/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99357966455daafb7e9aec35acb2c1d95cce4fbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/99357966455daafb7e9aec35acb2c1d95cce4fbe", "html_url": "https://github.com/rust-lang/rust/commit/99357966455daafb7e9aec35acb2c1d95cce4fbe"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "f3153a64820483513ca3d4fd1220e5ba7ad46204", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ad9e1e377f88993002278fe3882ccbe80f102e9d/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad9e1e377f88993002278fe3882ccbe80f102e9d/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=ad9e1e377f88993002278fe3882ccbe80f102e9d", "patch": "@@ -537,13 +537,12 @@ fn build_call_shim<'tcx>(\n     };\n \n     let def_id = instance.def_id();\n-    let sig = tcx.fn_sig(def_id);\n-    let mut sig = tcx.erase_late_bound_regions(sig);\n+    let sig = tcx.bound_fn_sig(def_id);\n+    let sig = sig.map_bound(|sig| tcx.erase_late_bound_regions(sig));\n \n     assert_eq!(sig_substs.is_some(), !instance.has_polymorphic_mir_body());\n-    if let Some(sig_substs) = sig_substs {\n-        sig = EarlyBinder(sig).subst(tcx, sig_substs);\n-    }\n+    let mut sig =\n+        if let Some(sig_substs) = sig_substs { sig.subst(tcx, sig_substs) } else { sig.0 };\n \n     if let CallKind::Indirect(fnty) = call_kind {\n         // `sig` determines our local decls, and thus the callee type in the `Call` terminator. This"}, {"sha": "4862631980e36ee9798a2ba5780cc2ef4e3f3bfb", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad9e1e377f88993002278fe3882ccbe80f102e9d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad9e1e377f88993002278fe3882ccbe80f102e9d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=ad9e1e377f88993002278fe3882ccbe80f102e9d", "patch": "@@ -12,7 +12,7 @@ use rustc_index::bit_set::GrowableBitSet;\n use rustc_infer::infer::InferOk;\n use rustc_infer::infer::LateBoundRegionConversionTime::HigherRankedType;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst, SubstsRef};\n-use rustc_middle::ty::{self, EarlyBinder, GenericParamDefKind, Ty, TyCtxt};\n+use rustc_middle::ty::{self, GenericParamDefKind, Ty, TyCtxt};\n use rustc_middle::ty::{ToPolyTraitRef, ToPredicate};\n use rustc_span::def_id::DefId;\n \n@@ -555,7 +555,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n                         let bound_vars = tcx.mk_bound_variable_kinds(bound_vars.into_iter());\n                         let bound =\n-                            EarlyBinder(bound.0.kind().skip_binder()).subst(tcx, assoc_ty_substs);\n+                            bound.map_bound(|b| b.kind().skip_binder()).subst(tcx, assoc_ty_substs);\n                         tcx.mk_predicate(ty::Binder::bind_with_vars(bound, bound_vars))\n                     };\n                 let normalized_bound = normalize_with_depth_to("}]}