{"sha": "9231ceb6dd273d8101e1b3906e6060f802e6423d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMzFjZWI2ZGQyNzNkODEwMWUxYjM5MDZlNjA2MGY4MDJlNjQyM2Q=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-03-19T23:37:34Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-03-23T18:27:19Z"}, "message": "Stabilize the Error trait\n\nThis small commit stabilizes the `Error` trait as-is, except that `Send`\nand `Debug` are added as constraints. The `Send` constraint is because\nmost uses of `Error` will be for trait objects, and by default we would\nlike these objects to be transferrable between threads. The `Debug`\nconstraint is to ensure that e.g. `Box<Error>` is `Debug`, and because\ntypes that implement `Display` should certainly implement `Debug` in any case.\n\nIn the near future we expect to add `Any`-like downcasting features to\n`Error`, but this is waiting on some additional\nmechanisms (`Reflect`). It will be added before 1.0 via default methods.\n\n[breaking-change]", "tree": {"sha": "fd81c98f0ae31b117bc16787e1bd68fec9b1a2e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd81c98f0ae31b117bc16787e1bd68fec9b1a2e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9231ceb6dd273d8101e1b3906e6060f802e6423d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9231ceb6dd273d8101e1b3906e6060f802e6423d", "html_url": "https://github.com/rust-lang/rust/commit/9231ceb6dd273d8101e1b3906e6060f802e6423d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9231ceb6dd273d8101e1b3906e6060f802e6423d/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f53b943f94b338e4c5401f1ce9efbe7da92b0c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f53b943f94b338e4c5401f1ce9efbe7da92b0c5", "html_url": "https://github.com/rust-lang/rust/commit/7f53b943f94b338e4c5401f1ce9efbe7da92b0c5"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "d29964d63a58ed95ab07cbd5d1a43947287e4058", "filename": "src/libcore/error.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9231ceb6dd273d8101e1b3906e6060f802e6423d/src%2Flibcore%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9231ceb6dd273d8101e1b3906e6060f802e6423d/src%2Flibcore%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ferror.rs?ref=9231ceb6dd273d8101e1b3906e6060f802e6423d", "patch": "@@ -82,16 +82,21 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use prelude::*;\n-use fmt::Display;\n+use fmt::{Debug, Display};\n \n /// Base functionality for all errors in Rust.\n-#[unstable(feature = \"core\",\n-           reason = \"the exact API of this trait may change\")]\n-pub trait Error: Display {\n-    /// A short description of the error; usually a static string.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub trait Error: Debug + Display + Send {\n+    /// A short description of the error.\n+    ///\n+    /// The description should not contain newlines or sentence-ending\n+    /// punctuation, to facilitate embedding in larger user-facing\n+    /// strings.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn description(&self) -> &str;\n \n     /// The lower-level cause of this error, if any.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn cause(&self) -> Option<&Error> { None }\n }\n "}, {"sha": "4def601f1c0e7657f6a3e7da1c057ec3c53da99a", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9231ceb6dd273d8101e1b3906e6060f802e6423d/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9231ceb6dd273d8101e1b3906e6060f802e6423d/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=9231ceb6dd273d8101e1b3906e6060f802e6423d", "patch": "@@ -258,7 +258,7 @@ impl<W> FromError<IntoInnerError<W>> for Error {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<W> error::Error for IntoInnerError<W> {\n+impl<W: Send + fmt::Debug> error::Error for IntoInnerError<W> {\n     fn description(&self) -> &str {\n         error::Error::description(self.error())\n     }"}, {"sha": "2cf0df305c21c5afbdc34534ec1e67401f966208", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9231ceb6dd273d8101e1b3906e6060f802e6423d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9231ceb6dd273d8101e1b3906e6060f802e6423d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=9231ceb6dd273d8101e1b3906e6060f802e6423d", "patch": "@@ -977,7 +977,7 @@ impl<T> fmt::Display for SendError<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> error::Error for SendError<T> {\n+impl<T: Send> error::Error for SendError<T> {\n \n     fn description(&self) -> &str {\n         \"sending on a closed channel\"\n@@ -1013,7 +1013,7 @@ impl<T> fmt::Display for TrySendError<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> error::Error for TrySendError<T> {\n+impl<T: Send> error::Error for TrySendError<T> {\n \n     fn description(&self) -> &str {\n         match *self {"}, {"sha": "c07c83d37f48881b041966d9c9cfbf48d82f5d8a", "filename": "src/libstd/sync/poison.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9231ceb6dd273d8101e1b3906e6060f802e6423d/src%2Flibstd%2Fsync%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9231ceb6dd273d8101e1b3906e6060f802e6423d/src%2Flibstd%2Fsync%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fpoison.rs?ref=9231ceb6dd273d8101e1b3906e6060f802e6423d", "patch": "@@ -105,11 +105,11 @@ impl<T> fmt::Debug for PoisonError<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> fmt::Display for PoisonError<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.description().fmt(f)\n+        \"poisoned lock: another task failed inside\".fmt(f)\n     }\n }\n \n-impl<T> Error for PoisonError<T> {\n+impl<T: Send> Error for PoisonError<T> {\n     fn description(&self) -> &str {\n         \"poisoned lock: another task failed inside\"\n     }\n@@ -161,13 +161,13 @@ impl<T> fmt::Debug for TryLockError<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> fmt::Display for TryLockError<T> {\n+impl<T: Send> fmt::Display for TryLockError<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.description().fmt(f)\n     }\n }\n \n-impl<T> Error for TryLockError<T> {\n+impl<T: Send> Error for TryLockError<T> {\n     fn description(&self) -> &str {\n         match *self {\n             TryLockError::Poisoned(ref p) => p.description(),"}, {"sha": "e896dee27919e1c4121e2be47b7c5c334e8ffa1f", "filename": "src/rustbook/error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9231ceb6dd273d8101e1b3906e6060f802e6423d/src%2Frustbook%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9231ceb6dd273d8101e1b3906e6060f802e6423d/src%2Frustbook%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Ferror.rs?ref=9231ceb6dd273d8101e1b3906e6060f802e6423d", "patch": "@@ -20,6 +20,7 @@ pub type CommandError = Box<Error + 'static>;\n pub type CommandResult<T> = Result<T, CommandError>;\n \n pub fn err(s: &str) -> CliError {\n+    #[derive(Debug)]\n     struct E(String);\n \n     impl Error for E {"}]}