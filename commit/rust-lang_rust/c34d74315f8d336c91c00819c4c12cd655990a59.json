{"sha": "c34d74315f8d336c91c00819c4c12cd655990a59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNGQ3NDMxNWY4ZDMzNmM5MWMwMDgxOWM0YzEyY2Q2NTU5OTBhNTk=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-29T18:51:18Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-29T18:54:44Z"}, "message": "Remove unreachable statements", "tree": {"sha": "bc20eed21c7406a23b42d8610baf3cf0b88b554c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc20eed21c7406a23b42d8610baf3cf0b88b554c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c34d74315f8d336c91c00819c4c12cd655990a59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c34d74315f8d336c91c00819c4c12cd655990a59", "html_url": "https://github.com/rust-lang/rust/commit/c34d74315f8d336c91c00819c4c12cd655990a59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c34d74315f8d336c91c00819c4c12cd655990a59/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa3b89610e081b3b58a3d4acb5201c0d6ea200c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa3b89610e081b3b58a3d4acb5201c0d6ea200c6", "html_url": "https://github.com/rust-lang/rust/commit/aa3b89610e081b3b58a3d4acb5201c0d6ea200c6"}], "stats": {"total": 58, "additions": 25, "deletions": 33}, "files": [{"sha": "98f540de7e816317c6738beb9aa21fa8929cba9d", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34d74315f8d336c91c00819c4c12cd655990a59/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34d74315f8d336c91c00819c4c12cd655990a59/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=c34d74315f8d336c91c00819c4c12cd655990a59", "patch": "@@ -36,7 +36,6 @@ fn llvm_err(sess: session::session, msg: str) {\n     if buf as uint == 0u {\n         sess.fatal(msg);\n     } else { sess.fatal(msg + \": \" + str::str_from_cstr(buf)); }\n-    fail;\n }\n \n fn link_intrinsics(sess: session::session, llmod: ModuleRef) {"}, {"sha": "d58968c65468d4003c38dee69d787ec17934d9ec", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34d74315f8d336c91c00819c4c12cd655990a59/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34d74315f8d336c91c00819c4c12cd655990a59/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=c34d74315f8d336c91c00819c4c12cd655990a59", "patch": "@@ -94,7 +94,7 @@ fn parse_input(sess: session::session, cfg: &ast::crate_cfg, input: str) ->\n         } else if (str::ends_with(input, \".rs\")) {\n             parser::parse_crate_from_source_file(input, cfg,\n                                                  sess.get_parse_sess())\n-        } else { sess.fatal(\"unknown input file type: \" + input); fail };\n+        } else { sess.fatal(\"unknown input file type: \" + input) };\n }\n \n fn time[T](do_it: bool, what: str, thunk: fn() -> T ) -> T {"}, {"sha": "2fc24f8cb528f39daa1406d875abcb805cfcff0f", "filename": "src/comp/middle/trans_comm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34d74315f8d336c91c00819c4c12cd655990a59/src%2Fcomp%2Fmiddle%2Ftrans_comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34d74315f8d336c91c00819c4c12cd655990a59/src%2Fcomp%2Fmiddle%2Ftrans_comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_comm.rs?ref=c34d74315f8d336c91c00819c4c12cd655990a59", "patch": "@@ -206,6 +206,7 @@ fn trans_send(cx: &@block_ctxt, lhs: &@ast::expr, rhs: &@ast::expr,\n     let data = trans_lval(bcx, rhs);\n     bcx = data.res.bcx;\n     let chan_ty = node_id_type(cx.fcx.lcx.ccx, id);\n+    let unit_ty;\n     alt ty::struct(cx.fcx.lcx.ccx.tcx, chan_ty) {\n       ty::ty_chan(t) { unit_ty = t; }\n       _ { bcx.fcx.lcx.ccx.sess.bug(\"non-chan type in trans_send\"); }\n@@ -223,7 +224,6 @@ fn trans_send(cx: &@block_ctxt, lhs: &@ast::expr, rhs: &@ast::expr,\n     bcx = zero_alloca(bcx, data_alloc.val, unit_ty).bcx;\n \n     ret rslt(bcx, chn.val);\n-    let unit_ty;\n }\n \n fn trans_recv(cx: &@block_ctxt, lhs: &@ast::expr, rhs: &@ast::expr,"}, {"sha": "9e93c40b60c7c736d9dd837dd98f5a65038566f4", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c34d74315f8d336c91c00819c4c12cd655990a59/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34d74315f8d336c91c00819c4c12cd655990a59/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=c34d74315f8d336c91c00819c4c12cd655990a59", "patch": "@@ -1820,26 +1820,30 @@ fn ty_fn_args(cx: &ctxt, fty: &t) -> arg[] {\n     alt struct(cx, fty) {\n       ty::ty_fn(_, a, _, _, _) { ret a; }\n       ty::ty_native_fn(_, a, _) { ret a; }\n+      _ { cx.sess.bug(\"ty_fn_args() called on non-fn type\"); }\n     }\n-    cx.sess.bug(\"ty_fn_args() called on non-fn type\");\n }\n \n fn ty_fn_proto(cx: &ctxt, fty: &t) -> ast::proto {\n-    alt struct(cx, fty) { ty::ty_fn(p, _, _, _, _) { ret p; } }\n-    cx.sess.bug(\"ty_fn_proto() called on non-fn type\");\n+    alt struct(cx, fty) {\n+      ty::ty_fn(p, _, _, _, _) { ret p; }\n+      _ { cx.sess.bug(\"ty_fn_proto() called on non-fn type\"); }\n+    }\n }\n \n fn ty_fn_abi(cx: &ctxt, fty: &t) -> ast::native_abi {\n-    alt struct(cx, fty) { ty::ty_native_fn(a, _, _) { ret a; } }\n-    cx.sess.bug(\"ty_fn_abi() called on non-native-fn type\");\n+    alt struct(cx, fty) {\n+      ty::ty_native_fn(a, _, _) { ret a; }\n+      _ { cx.sess.bug(\"ty_fn_abi() called on non-native-fn type\"); }\n+    }\n }\n \n fn ty_fn_ret(cx: &ctxt, fty: &t) -> t {\n     alt struct(cx, fty) {\n       ty::ty_fn(_, _, r, _, _) { ret r; }\n       ty::ty_native_fn(_, _, r) { ret r; }\n+      _ { cx.sess.bug(\"ty_fn_ret() called on non-fn type\"); }\n     }\n-    cx.sess.bug(\"ty_fn_ret() called on non-fn type\");\n }\n \n fn is_fn_ty(cx: &ctxt, fty: &t) -> bool {\n@@ -2707,7 +2711,6 @@ fn type_err_to_str(err: &ty::type_err) -> str {\n       terr_mode_mismatch(e_mode, a_mode) {\n         ret \"expected argument mode \" + mode_str_1(e_mode) + \" but found \" +\n                 mode_str_1(a_mode);\n-        fail;\n       }\n       terr_constr_len(e_len, a_len) {\n         ret \"Expected a type with \" + uint::str(e_len) +"}, {"sha": "fc2d64ddb49fc39e7c342b3c292fe56bb75a01cd", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34d74315f8d336c91c00819c4c12cd655990a59/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34d74315f8d336c91c00819c4c12cd655990a59/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=c34d74315f8d336c91c00819c4c12cd655990a59", "patch": "@@ -81,7 +81,6 @@ fn def_id_of_def(d: def) -> def_id {\n       def_native_fn(id) { ret id; }\n       def_upvar(id, _) { ret id; }\n     }\n-    fail;\n }\n \n // The set of meta_items that define the compilation environment of the crate,"}, {"sha": "06f998e71e8b9daa65a983da4e6c66a5528f9996", "filename": "src/comp/syntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c34d74315f8d336c91c00819c4c12cd655990a59/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34d74315f8d336c91c00819c4c12cd655990a59/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs?ref=c34d74315f8d336c91c00819c4c12cd655990a59", "patch": "@@ -54,13 +54,12 @@ fn mk_ctxt(sess: &session) -> ext_ctxt {\n         sess.span_err(sp, \"unimplemented \" + msg);\n         fail;\n     }\n-    let ext_span_unimpl = bind ext_span_unimpl_(sess, _, _);\n+    let ext_span_bug = bind ext_span_bug_(sess, _, _);\n     fn ext_span_bug_(sess: &session, sp: span, msg: str) -> ! {\n         sess.span_bug(sp, msg);\n-        fail;\n     }\n-    let ext_span_bug = bind ext_span_bug_(sess, _, _);\n-    fn ext_bug_(sess: &session, msg: str) -> ! { sess.bug(msg); fail; }\n+    let ext_span_unimpl = bind ext_span_unimpl_(sess, _, _);\n+    fn ext_bug_(sess: &session, msg: str) -> ! { sess.bug(msg); }\n     let ext_bug = bind ext_bug_(sess, _);\n \n "}, {"sha": "d7de173e5e33b1d30d95bb2d920cd91edce7a429", "filename": "src/comp/syntax/ext/simplext.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c34d74315f8d336c91c00819c4c12cd655990a59/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34d74315f8d336c91c00819c4c12cd655990a59/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs?ref=c34d74315f8d336c91c00819c4c12cd655990a59", "patch": "@@ -452,7 +452,7 @@ fn p_t_s_rec(cx: &ext_ctxt, m: &matchable, s: &selector, b: &binders) {\n                       match_expr(e) {\n                         if e == pat { some(leaf(match_exact)) } else { none }\n                       }\n-                      _ { cx.bug(\"broken traversal in p_t_s_r\"); fail }\n+                      _ { cx.bug(\"broken traversal in p_t_s_r\") }\n                     }\n             }\n             b.literal_ast_matchers += ~[bind select(cx, _, e)];\n@@ -488,7 +488,7 @@ fn p_t_s_r_path(cx: &ext_ctxt, p: &path, s: &selector, b: &binders) {\n         fn select(cx: &ext_ctxt, m: &matchable) -> match_result {\n             ret alt m {\n                   match_expr(e) { some(leaf(specialize_match(m))) }\n-                  _ { cx.bug(\"broken traversal in p_t_s_r\"); fail }\n+                  _ { cx.bug(\"broken traversal in p_t_s_r\") }\n                 }\n         }\n         if b.real_binders.contains_key(p_id) {\n@@ -517,7 +517,7 @@ fn p_t_s_r_mac(cx: &ext_ctxt, mac: &ast::mac, s: &selector, b: &binders) {\n               match_expr(e) {\n                 alt e.node { expr_mac(mac) { fn_m(mac) } _ { none } }\n               }\n-              _ { cx.bug(\"broken traversal in p_t_s_r\"); fail }\n+              _ { cx.bug(\"broken traversal in p_t_s_r\") }\n             }\n     }\n     fn no_des(cx: &ext_ctxt, sp: &span, syn: &str) -> ! {\n@@ -593,7 +593,7 @@ fn p_t_s_r_ellipses(cx: &ext_ctxt, repeat_me: @expr, s: &selector,\n                   _ { none }\n                 }\n               }\n-              _ { cx.bug(\"broken traversal in p_t_s_r\"); fail }\n+              _ { cx.bug(\"broken traversal in p_t_s_r\") }\n             }\n     }\n     p_t_s_rec(cx, match_expr(repeat_me),\n@@ -633,7 +633,7 @@ fn p_t_s_r_actual_vector(cx: &ext_ctxt, elts: (@expr)[], s: &selector,\n                       _ { none }\n                     }\n                   }\n-                  _ { cx.bug(\"broken traversal in p_t_s_r\"); fail }\n+                  _ { cx.bug(\"broken traversal in p_t_s_r\") }\n                 }\n         }\n         p_t_s_rec(cx, match_expr(elts.(idx)),"}, {"sha": "bf91dfc8a9c81e547c6803225a53857ea2f4c888", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34d74315f8d336c91c00819c4c12cd655990a59/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34d74315f8d336c91c00819c4c12cd655990a59/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=c34d74315f8d336c91c00819c4c12cd655990a59", "patch": "@@ -541,7 +541,6 @@ fn next_token_inner(rdr: &reader) -> token::token {\n       '%' { ret binop(rdr, token::PERCENT); }\n       c { rdr.err(#fmt(\"unkown start of token: %d\", c as int)); fail; }\n     }\n-    fail;\n }\n \n tag cmnt_style {"}, {"sha": "3fba6f614f0102edf5f501e52ae2c9cc38cba138", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c34d74315f8d336c91c00819c4c12cd655990a59/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34d74315f8d336c91c00819c4c12cd655990a59/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=c34d74315f8d336c91c00819c4c12cd655990a59", "patch": "@@ -211,7 +211,7 @@ fn spanned[T](lo: uint, hi: uint, node: &T) -> spanned[T] {\n fn parse_ident(p: &parser) -> ast::ident {\n     alt p.peek() {\n       token::IDENT(i, _) { p.bump(); ret p.get_str(i); }\n-      _ { p.fatal(\"expecting ident\"); fail; }\n+      _ { p.fatal(\"expecting ident\"); }\n     }\n }\n \n@@ -331,7 +331,6 @@ fn parse_ty_obj(p: &parser, hi: &mutable uint) -> ast::ty_ {\n                          constrs: constrs});\n           }\n         }\n-        fail;\n     }\n     let meths =\n         parse_seq(token::LBRACE, token::RBRACE, none, parse_method_sig, p);\n@@ -589,7 +588,7 @@ fn parse_ty(p: &parser) -> @ast::ty {\n         let path = parse_path(p);\n         t = ast::ty_path(path, p.get_id());\n         hi = path.span.hi;\n-    } else { p.fatal(\"expecting type\"); t = ast::ty_nil; fail; }\n+    } else { p.fatal(\"expecting type\"); }\n     ret parse_ty_postfix(t, p);\n }\n \n@@ -1570,10 +1569,9 @@ fn parse_source_stmt(p: &parser) -> @ast::stmt {\n             let e = parse_expr(p);\n             ret @spanned(lo, e.span.hi, ast::stmt_expr(e, p.get_id()));\n           }\n+          _ { p.fatal(\"expected statement\"); }\n         }\n     }\n-    p.fatal(\"expected statement\");\n-    fail;\n }\n \n fn stmt_to_expr(stmt: @ast::stmt) -> option::t[@ast::expr] {\n@@ -1669,7 +1667,6 @@ fn parse_block_tail(p: &parser, lo: uint) -> ast::blk {\n                         p.fatal(\"expected ';' or '}' after \" +\n                                     \"expression but found \" +\n                                     token::to_str(p.get_reader(), t));\n-                        fail;\n                     }\n                     stmts += ~[stmt];\n                   }\n@@ -1933,7 +1930,7 @@ fn parse_native_item(p: &parser, attrs: &ast::attribute[]) ->\n         ret parse_item_native_type(p, attrs);\n     } else if (eat_word(p, \"fn\")) {\n         ret parse_item_native_fn(p, attrs);\n-    } else { unexpected(p, p.peek()); fail; }\n+    } else { unexpected(p, p.peek()); }\n }\n \n fn parse_native_mod_items(p: &parser, native_name: &str, abi: ast::native_abi,\n@@ -1971,7 +1968,7 @@ fn parse_item_native_mod(p: &parser, attrs: &ast::attribute[]) -> @ast::item {\n             abi = ast::native_abi_rust_intrinsic;\n         } else if (str::eq(t, \"x86stdcall\")) {\n             abi = ast::native_abi_x86stdcall;\n-        } else { p.fatal(\"unsupported abi: \" + t); fail; }\n+        } else { p.fatal(\"unsupported abi: \" + t); }\n     }\n     expect_word(p, \"mod\");\n     let id = parse_ident(p);\n@@ -2071,7 +2068,6 @@ fn parse_auth(p: &parser) -> ast::_auth {\n     if eat_word(p, \"unsafe\") {\n         ret ast::auth_unsafe;\n     } else { unexpected(p, p.peek()); }\n-    fail;\n }\n \n fn parse_item(p: &parser, attrs: &ast::attribute[]) -> option::t[@ast::item] {\n@@ -2260,7 +2256,6 @@ fn parse_full_import_name(p: &parser, def_ident: ast::ident) ->\n       }\n       _ { p.fatal(\"expecting an identifier\"); }\n     }\n-    fail;\n }\n \n fn parse_import(p: &parser) -> ast::view_item_ {\n@@ -2277,7 +2272,6 @@ fn parse_import(p: &parser) -> ast::view_item_ {\n       }\n       _ { p.fatal(\"expecting an identifier\"); }\n     }\n-    fail;\n }\n \n fn parse_export(p: &parser) -> ast::view_item_ {\n@@ -2307,7 +2301,6 @@ fn is_view_item(p: &parser) -> bool {\n       }\n       _ { ret false; }\n     }\n-    ret false;\n }\n \n fn parse_view(p: &parser) -> (@ast::view_item)[] {"}]}