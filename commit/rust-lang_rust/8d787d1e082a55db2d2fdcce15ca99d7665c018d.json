{"sha": "8d787d1e082a55db2d2fdcce15ca99d7665c018d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNzg3ZDFlMDgyYTU1ZGIyZDJmZGNjZTE1Y2E5OWQ3NjY1YzAxOGQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-24T18:45:48Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-24T18:45:48Z"}, "message": "Avoid emitting unnecessary frame glue. Wins a couple hundred kb of rustc.", "tree": {"sha": "caafca26453fd6dbe6eec61f6bde42df4da83474", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caafca26453fd6dbe6eec61f6bde42df4da83474"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d787d1e082a55db2d2fdcce15ca99d7665c018d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d787d1e082a55db2d2fdcce15ca99d7665c018d", "html_url": "https://github.com/rust-lang/rust/commit/8d787d1e082a55db2d2fdcce15ca99d7665c018d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d787d1e082a55db2d2fdcce15ca99d7665c018d/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87c9a9e25d922cd9e00981ac9a3e6fa43df20c0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/87c9a9e25d922cd9e00981ac9a3e6fa43df20c0b", "html_url": "https://github.com/rust-lang/rust/commit/87c9a9e25d922cd9e00981ac9a3e6fa43df20c0b"}], "stats": {"total": 107, "additions": 74, "deletions": 33}, "files": [{"sha": "5b36a9f3774925330ef60d30ff9172b958ae495f", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 74, "deletions": 33, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/8d787d1e082a55db2d2fdcce15ca99d7665c018d/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/8d787d1e082a55db2d2fdcce15ca99d7665c018d/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=8d787d1e082a55db2d2fdcce15ca99d7665c018d", "patch": "@@ -104,10 +104,6 @@ let trans_visitor\n     Il.Imm (crate_rel fix, word_ty_signed_mach)\n   in\n \n-  let table_of_crate_rel_fixups (fixups:fixup array) : Asm.frag =\n-    Asm.SEQ (Array.map crate_rel_word fixups)\n-  in\n-\n   let fixup_rel_word (base:fixup) (fix:fixup) =\n     Asm.WORD (word_ty_signed_mach,\n               Asm.SUB (Asm.M_POS fix, Asm.M_POS base))\n@@ -1767,7 +1763,7 @@ let trans_visitor\n         trans_copy_ty ty_params true dst ty src ty curr_iso;\n         let skip_noninit_jmp = mark() in\n           emit (Il.jmp Il.JMP Il.CodeNone);\n-          List.iter patch jmps;          \n+          List.iter patch jmps;\n           trans_copy_ty ty_params false dst ty src ty curr_iso;\n           patch skip_noninit_jmp;\n     in\n@@ -4810,41 +4806,86 @@ let trans_visitor\n               end\n         end\n     in\n+    let frame_has_aliases =\n+      let r = ref false in\n+        iter_frame_and_arg_slots cx fnid\n+          begin\n+            fun _ _ slot ->\n+              match slot.Ast.slot_mode with\n+                  Ast.MODE_alias -> r := true\n+                | _ -> ()\n+          end;\n+        !r\n+    in\n+    let frame_points_to_heap =\n+      let r = ref false in\n+        iter_frame_and_arg_slots cx fnid\n+          begin\n+            fun _ slot_id _ ->\n+              if type_points_to_heap (slot_ty (get_slot cx slot_id))\n+              then r := true\n+          end;\n+        !r\n+    in\n+    let null_word = Asm.WORD (word_ty_mach, Asm.IMM 0L) in\n+\n     trans_crate_rel_data_operand\n       (DATA_frame_glue_fns fnid)\n       begin\n         fun _ ->\n-          let mark_frame_glue_fixup =\n-            get_frame_glue (GLUE_mark_frame fnid)\n-              begin\n-                fun _ _ ty_params slot slot_cell ->\n-                  mark_slot ty_params slot_cell slot None\n-              end\n+          let mark_frame_word =\n+            if frame_points_to_heap\n+            then\n+              crate_rel_word\n+                begin\n+                  get_frame_glue (GLUE_mark_frame fnid)\n+                    begin\n+                      fun _ _ ty_params slot slot_cell ->\n+                        mark_slot ty_params slot_cell slot None\n+                    end\n+                end\n+            else\n+              null_word\n           in\n-          let drop_frame_glue_fixup =\n-            get_frame_glue (GLUE_drop_frame fnid)\n-              begin\n-                fun _ _ ty_params slot slot_cell ->\n-                  drop_slot ty_params slot_cell slot None\n-              end\n+\n+          let drop_frame_word =\n+            if frame_points_to_heap\n+            then\n+              crate_rel_word\n+                begin\n+                  get_frame_glue (GLUE_drop_frame fnid)\n+                    begin\n+                      fun _ _ ty_params slot slot_cell ->\n+                        drop_slot ty_params slot_cell slot None\n+                    end\n+                end\n+            else\n+              null_word\n           in\n-          let reloc_frame_glue_fixup =\n-            get_frame_glue (GLUE_reloc_frame fnid)\n-              begin\n-                fun _ _ _ _ _ ->\n-                  ()\n-              end\n+\n+          let reloc_frame_word =\n+            if frame_has_aliases\n+            then\n+              crate_rel_word\n+                begin\n+                  get_frame_glue (GLUE_reloc_frame fnid)\n+                    begin\n+                      fun _ _ _ _ _ ->\n+                        ()\n+                    end\n+                end\n+            else\n+              null_word\n           in\n-            table_of_crate_rel_fixups\n-              [|\n-               (* \n-                * NB: this must match the struct-offsets given in ABI\n-                * & rust runtime library.\n-                *)\n-                mark_frame_glue_fixup;\n-                drop_frame_glue_fixup;\n-                reloc_frame_glue_fixup;\n-              |]\n+            Asm.SEQ [|\n+              (* \n+               * NB: this must match the struct-offsets given in ABI\n+               * & rust runtime library.\n+               *)\n+              mark_frame_word;\n+              drop_frame_word;\n+              reloc_frame_word;\n+            |]\n       end\n   in\n "}]}