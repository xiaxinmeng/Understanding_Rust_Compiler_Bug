{"sha": "7361b22b4c57a446e042f8cbc95e17969a7301eb", "node_id": "C_kwDOAAsO6NoAKDczNjFiMjJiNGM1N2E0NDZlMDQyZjhjYmM5NWUxNzk2OWE3MzAxZWI", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-05-17T22:40:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-17T22:40:59Z"}, "message": "Rollup merge of #97097 - chorman0773:add_tmm_clobers, r=joshtriplett\n\nAdd tmm_reg clobbers\n\nThis adds support for naming the 8 tile registers from intel AMX as clobbers from `asm!` invocations on x86_64 (only). It does not add the registers as input or output operands.", "tree": {"sha": "182458c2d16b1147a38f54f66ebb06e61e4ff8ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/182458c2d16b1147a38f54f66ebb06e61e4ff8ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7361b22b4c57a446e042f8cbc95e17969a7301eb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJihCR7CRBK7hj4Ov3rIwAAs98IAJESux89CnPCzGVq+xwVCt6/\nMG7Z20KD5OCDfcQsSu3LsTWW6alIhRQoX+IludJkBdzx+BcWsmlgL5VlW8RpndvB\ngLQkWXgj42ZeeIw88s1u955fQbRZE3k3m3+fkiGK7mLjuq0ErNVduz23t8M5loDy\nQeCj63BIjcOLnygba2/KxW8c+HfekQyopRjPIQ3+3LlMxlePxOVqTsuY0joIxHro\njgsvIlDGL5230+2mWGFUhwEljYwpgn23h11fzGOM6jvwEABnTF+mk6JIPEJplLpZ\ncWwZ+xg+tyCFadGwmlXSFw8myVPcrW4K7b6Pt/pnqogYqfbpc1XTUbFFZf4aF48=\n=7BBw\n-----END PGP SIGNATURE-----\n", "payload": "tree 182458c2d16b1147a38f54f66ebb06e61e4ff8ee\nparent f5978468266e8b227a58767a646304c3c006dd0f\nparent eabe851a5ca2130576500674baa3304666c6fd4f\nauthor Yuki Okushi <jtitor@2k36.org> 1652827259 +0900\ncommitter GitHub <noreply@github.com> 1652827259 +0900\n\nRollup merge of #97097 - chorman0773:add_tmm_clobers, r=joshtriplett\n\nAdd tmm_reg clobbers\n\nThis adds support for naming the 8 tile registers from intel AMX as clobbers from `asm!` invocations on x86_64 (only). It does not add the registers as input or output operands.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7361b22b4c57a446e042f8cbc95e17969a7301eb", "html_url": "https://github.com/rust-lang/rust/commit/7361b22b4c57a446e042f8cbc95e17969a7301eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7361b22b4c57a446e042f8cbc95e17969a7301eb/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5978468266e8b227a58767a646304c3c006dd0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5978468266e8b227a58767a646304c3c006dd0f", "html_url": "https://github.com/rust-lang/rust/commit/f5978468266e8b227a58767a646304c3c006dd0f"}, {"sha": "eabe851a5ca2130576500674baa3304666c6fd4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/eabe851a5ca2130576500674baa3304666c6fd4f", "html_url": "https://github.com/rust-lang/rust/commit/eabe851a5ca2130576500674baa3304666c6fd4f"}], "stats": {"total": 45, "additions": 36, "deletions": 9}, "files": [{"sha": "20d91b80e8c52821904c449c572e2fa681225c8c", "filename": "compiler/rustc_codegen_gcc/src/asm.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7361b22b4c57a446e042f8cbc95e17969a7301eb/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7361b22b4c57a446e042f8cbc95e17969a7301eb/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs?ref=7361b22b4c57a446e042f8cbc95e17969a7301eb", "patch": "@@ -592,7 +592,7 @@ fn reg_to_gcc(reg: InlineAsmRegOrRegClass) -> ConstraintOrRegister {\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg0) => unimplemented!(),\n             InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => unimplemented!(),\n             InlineAsmRegClass::X86(\n-                X86InlineAsmRegClass::x87_reg | X86InlineAsmRegClass::mmx_reg,\n+                X86InlineAsmRegClass::x87_reg | X86InlineAsmRegClass::mmx_reg | X86InlineAsmRegClass::tmm_reg,\n             ) => unreachable!(\"clobber-only\"),\n             InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n                 bug!(\"GCC backend does not support SPIR-V\")\n@@ -656,6 +656,7 @@ fn dummy_output_type<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, reg: InlineAsmRegCl\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::x87_reg) => unimplemented!(),\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => cx.type_i16(),\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg0) => cx.type_i16(),\n+        InlineAsmRegClass::X86(X86InlineAsmRegClass::tmm_reg) => unimplemented!(),\n         InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => cx.type_i32(),\n         InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n             bug!(\"LLVM backend does not support SPIR-V\")\n@@ -787,7 +788,7 @@ fn modifier_to_gcc(arch: InlineAsmArch, reg: InlineAsmRegClass, modifier: Option\n         },\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => None,\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg0) => None,\n-        InlineAsmRegClass::X86(X86InlineAsmRegClass::x87_reg | X86InlineAsmRegClass::mmx_reg) => {\n+        InlineAsmRegClass::X86(X86InlineAsmRegClass::x87_reg | X86InlineAsmRegClass::mmx_reg | X86InlineAsmRegClass::tmm_reg) => {\n             unreachable!(\"clobber-only\")\n         }\n         InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => unimplemented!(),"}, {"sha": "a53946995ee1c43d484f35369c4e31d72fb9fecf", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7361b22b4c57a446e042f8cbc95e17969a7301eb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7361b22b4c57a446e042f8cbc95e17969a7301eb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=7361b22b4c57a446e042f8cbc95e17969a7301eb", "patch": "@@ -604,7 +604,8 @@ fn reg_to_llvm(reg: InlineAsmRegOrRegClass, layout: Option<&TyAndLayout<'_>>) ->\n             InlineAsmRegClass::X86(\n                 X86InlineAsmRegClass::x87_reg\n                 | X86InlineAsmRegClass::mmx_reg\n-                | X86InlineAsmRegClass::kreg0,\n+                | X86InlineAsmRegClass::kreg0\n+                | X86InlineAsmRegClass::tmm_reg,\n             ) => unreachable!(\"clobber-only\"),\n             InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => \"r\",\n             InlineAsmRegClass::Bpf(BpfInlineAsmRegClass::reg) => \"r\",\n@@ -692,7 +693,8 @@ fn modifier_to_llvm(\n         InlineAsmRegClass::X86(\n             X86InlineAsmRegClass::x87_reg\n             | X86InlineAsmRegClass::mmx_reg\n-            | X86InlineAsmRegClass::kreg0,\n+            | X86InlineAsmRegClass::kreg0\n+            | X86InlineAsmRegClass::tmm_reg,\n         ) => {\n             unreachable!(\"clobber-only\")\n         }\n@@ -766,7 +768,8 @@ fn dummy_output_type<'ll>(cx: &CodegenCx<'ll, '_>, reg: InlineAsmRegClass) -> &'\n         InlineAsmRegClass::X86(\n             X86InlineAsmRegClass::x87_reg\n             | X86InlineAsmRegClass::mmx_reg\n-            | X86InlineAsmRegClass::kreg0,\n+            | X86InlineAsmRegClass::kreg0\n+            | X86InlineAsmRegClass::tmm_reg,\n         ) => {\n             unreachable!(\"clobber-only\")\n         }"}, {"sha": "5c9c16350e469b3a96fa4d42de2f8b7fc0d4548a", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7361b22b4c57a446e042f8cbc95e17969a7301eb/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7361b22b4c57a446e042f8cbc95e17969a7301eb/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=7361b22b4c57a446e042f8cbc95e17969a7301eb", "patch": "@@ -1408,6 +1408,7 @@ symbols! {\n         thread_local_macro,\n         thumb2,\n         thumb_mode: \"thumb-mode\",\n+        tmm_reg,\n         todo_macro,\n         tool_attributes,\n         tool_lints,"}, {"sha": "df8ccc42a77a33fe27629c09aa0eb2863e1a41ba", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7361b22b4c57a446e042f8cbc95e17969a7301eb/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7361b22b4c57a446e042f8cbc95e17969a7301eb/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=7361b22b4c57a446e042f8cbc95e17969a7301eb", "patch": "@@ -912,6 +912,7 @@ impl InlineAsmClobberAbi {\n \n                     mm0, mm1, mm2, mm3, mm4, mm5, mm6, mm7,\n                     st0, st1, st2, st3, st4, st5, st6, st7,\n+                    tmm0, tmm1, tmm2, tmm3, tmm4, tmm5, tmm6, tmm7,\n                 }\n             },\n             InlineAsmClobberAbi::X86_64Win => clobbered_regs! {\n@@ -931,6 +932,7 @@ impl InlineAsmClobberAbi {\n \n                     mm0, mm1, mm2, mm3, mm4, mm5, mm6, mm7,\n                     st0, st1, st2, st3, st4, st5, st6, st7,\n+                    tmm0, tmm1, tmm2, tmm3, tmm4, tmm5, tmm6, tmm7,\n                 }\n             },\n             InlineAsmClobberAbi::AArch64 => clobbered_regs! {"}, {"sha": "e35035fd25af6e52263aad4218d15b16a73d092b", "filename": "compiler/rustc_target/src/asm/x86.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7361b22b4c57a446e042f8cbc95e17969a7301eb/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7361b22b4c57a446e042f8cbc95e17969a7301eb/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs?ref=7361b22b4c57a446e042f8cbc95e17969a7301eb", "patch": "@@ -17,6 +17,7 @@ def_reg_class! {\n         kreg0,\n         mmx_reg,\n         x87_reg,\n+        tmm_reg,\n     }\n }\n \n@@ -41,6 +42,7 @@ impl X86InlineAsmRegClass {\n             Self::xmm_reg | Self::ymm_reg | Self::zmm_reg => &['x', 'y', 'z'],\n             Self::kreg | Self::kreg0 => &[],\n             Self::mmx_reg | Self::x87_reg => &[],\n+            Self::tmm_reg => &[],\n         }\n     }\n \n@@ -80,6 +82,7 @@ impl X86InlineAsmRegClass {\n             },\n             Self::kreg | Self::kreg0 => None,\n             Self::mmx_reg | Self::x87_reg => None,\n+            Self::tmm_reg => None,\n         }\n     }\n \n@@ -98,6 +101,7 @@ impl X86InlineAsmRegClass {\n             Self::zmm_reg => Some(('z', \"zmm0\")),\n             Self::kreg | Self::kreg0 => None,\n             Self::mmx_reg | Self::x87_reg => None,\n+            Self::tmm_reg => None,\n         }\n     }\n \n@@ -135,6 +139,7 @@ impl X86InlineAsmRegClass {\n             },\n             Self::kreg0 => &[],\n             Self::mmx_reg | Self::x87_reg => &[],\n+            Self::tmm_reg => &[],\n         }\n     }\n }\n@@ -320,6 +325,14 @@ def_regs! {\n         st5: x87_reg = [\"st(5)\"],\n         st6: x87_reg = [\"st(6)\"],\n         st7: x87_reg = [\"st(7)\"],\n+        tmm0: tmm_reg = [\"tmm0\"] % x86_64_only,\n+        tmm1: tmm_reg = [\"tmm1\"] % x86_64_only,\n+        tmm2: tmm_reg = [\"tmm2\"] % x86_64_only,\n+        tmm3: tmm_reg = [\"tmm3\"] % x86_64_only,\n+        tmm4: tmm_reg = [\"tmm4\"] % x86_64_only,\n+        tmm5: tmm_reg = [\"tmm5\"] % x86_64_only,\n+        tmm6: tmm_reg = [\"tmm6\"] % x86_64_only,\n+        tmm7: tmm_reg = [\"tmm7\"] % x86_64_only,\n         #error = [\"bp\", \"bpl\", \"ebp\", \"rbp\"] =>\n             \"the frame pointer cannot be used as an operand for inline asm\",\n         #error = [\"sp\", \"spl\", \"esp\", \"rsp\"] =>"}, {"sha": "f70caea2fb9e26417730742ec11bff205e4f536a", "filename": "src/test/codegen/asm-clobber_abi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7361b22b4c57a446e042f8cbc95e17969a7301eb/src%2Ftest%2Fcodegen%2Fasm-clobber_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7361b22b4c57a446e042f8cbc95e17969a7301eb/src%2Ftest%2Fcodegen%2Fasm-clobber_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasm-clobber_abi.rs?ref=7361b22b4c57a446e042f8cbc95e17969a7301eb", "patch": "@@ -6,29 +6,29 @@\n use std::arch::asm;\n \n // CHECK-LABEL: @clobber_sysv64\n-// CHECK: ={ax},={cx},={dx},={si},={di},={r8},={r9},={r10},={r11},={xmm0},={xmm1},={xmm2},={xmm3},={xmm4},={xmm5},={xmm6},={xmm7},={xmm8},={xmm9},={xmm10},={xmm11},={xmm12},={xmm13},={xmm14},={xmm15},~{xmm16},~{xmm17},~{xmm18},~{xmm19},~{xmm20},~{xmm21},~{xmm22},~{xmm23},~{xmm24},~{xmm25},~{xmm26},~{xmm27},~{xmm28},~{xmm29},~{xmm30},~{xmm31},~{k0},~{k1},~{k2},~{k3},~{k4},~{k5},~{k6},~{k7},~{st},~{st(1)},~{st(2)},~{st(3)},~{st(4)},~{st(5)},~{st(6)},~{st(7)},~{dirflag},~{fpsr},~{flags},~{memory}\n+// CHECK: ={ax},={cx},={dx},={si},={di},={r8},={r9},={r10},={r11},={xmm0},={xmm1},={xmm2},={xmm3},={xmm4},={xmm5},={xmm6},={xmm7},={xmm8},={xmm9},={xmm10},={xmm11},={xmm12},={xmm13},={xmm14},={xmm15},~{xmm16},~{xmm17},~{xmm18},~{xmm19},~{xmm20},~{xmm21},~{xmm22},~{xmm23},~{xmm24},~{xmm25},~{xmm26},~{xmm27},~{xmm28},~{xmm29},~{xmm30},~{xmm31},~{k0},~{k1},~{k2},~{k3},~{k4},~{k5},~{k6},~{k7},~{st},~{st(1)},~{st(2)},~{st(3)},~{st(4)},~{st(5)},~{st(6)},~{st(7)},~{tmm0},~{tmm1},~{tmm2},~{tmm3},~{tmm4},~{tmm5},~{tmm6},~{tmm7},~{dirflag},~{fpsr},~{flags},~{memory}\n #[no_mangle]\n pub unsafe fn clobber_sysv64() {\n     asm!(\"\", clobber_abi(\"sysv64\"));\n }\n \n // CHECK-LABEL: @clobber_win64\n-// CHECK: ={ax},={cx},={dx},={r8},={r9},={r10},={r11},={xmm0},={xmm1},={xmm2},={xmm3},={xmm4},={xmm5},={xmm6},={xmm7},={xmm8},={xmm9},={xmm10},={xmm11},={xmm12},={xmm13},={xmm14},={xmm15},~{xmm16},~{xmm17},~{xmm18},~{xmm19},~{xmm20},~{xmm21},~{xmm22},~{xmm23},~{xmm24},~{xmm25},~{xmm26},~{xmm27},~{xmm28},~{xmm29},~{xmm30},~{xmm31},~{k0},~{k1},~{k2},~{k3},~{k4},~{k5},~{k6},~{k7},~{st},~{st(1)},~{st(2)},~{st(3)},~{st(4)},~{st(5)},~{st(6)},~{st(7)},~{dirflag},~{fpsr},~{flags},~{memory}\n+// CHECK: ={ax},={cx},={dx},={r8},={r9},={r10},={r11},={xmm0},={xmm1},={xmm2},={xmm3},={xmm4},={xmm5},={xmm6},={xmm7},={xmm8},={xmm9},={xmm10},={xmm11},={xmm12},={xmm13},={xmm14},={xmm15},~{xmm16},~{xmm17},~{xmm18},~{xmm19},~{xmm20},~{xmm21},~{xmm22},~{xmm23},~{xmm24},~{xmm25},~{xmm26},~{xmm27},~{xmm28},~{xmm29},~{xmm30},~{xmm31},~{k0},~{k1},~{k2},~{k3},~{k4},~{k5},~{k6},~{k7},~{st},~{st(1)},~{st(2)},~{st(3)},~{st(4)},~{st(5)},~{st(6)},~{st(7)},~{tmm0},~{tmm1},~{tmm2},~{tmm3},~{tmm4},~{tmm5},~{tmm6},~{tmm7},~{dirflag},~{fpsr},~{flags},~{memory}\n #[no_mangle]\n pub unsafe fn clobber_win64() {\n     asm!(\"\", clobber_abi(\"win64\"));\n }\n \n // CHECK-LABEL: @clobber_sysv64\n-// CHECK: =&{dx},={ax},={cx},={si},={di},={r8},={r9},={r10},={r11},={xmm0},={xmm1},={xmm2},={xmm3},={xmm4},={xmm5},={xmm6},={xmm7},={xmm8},={xmm9},={xmm10},={xmm11},={xmm12},={xmm13},={xmm14},={xmm15},~{xmm16},~{xmm17},~{xmm18},~{xmm19},~{xmm20},~{xmm21},~{xmm22},~{xmm23},~{xmm24},~{xmm25},~{xmm26},~{xmm27},~{xmm28},~{xmm29},~{xmm30},~{xmm31},~{k0},~{k1},~{k2},~{k3},~{k4},~{k5},~{k6},~{k7},~{st},~{st(1)},~{st(2)},~{st(3)},~{st(4)},~{st(5)},~{st(6)},~{st(7)},~{dirflag},~{fpsr},~{flags},~{memory}\n+// CHECK: =&{dx},={ax},={cx},={si},={di},={r8},={r9},={r10},={r11},={xmm0},={xmm1},={xmm2},={xmm3},={xmm4},={xmm5},={xmm6},={xmm7},={xmm8},={xmm9},={xmm10},={xmm11},={xmm12},={xmm13},={xmm14},={xmm15},~{xmm16},~{xmm17},~{xmm18},~{xmm19},~{xmm20},~{xmm21},~{xmm22},~{xmm23},~{xmm24},~{xmm25},~{xmm26},~{xmm27},~{xmm28},~{xmm29},~{xmm30},~{xmm31},~{k0},~{k1},~{k2},~{k3},~{k4},~{k5},~{k6},~{k7},~{st},~{st(1)},~{st(2)},~{st(3)},~{st(4)},~{st(5)},~{st(6)},~{st(7)},~{tmm0},~{tmm1},~{tmm2},~{tmm3},~{tmm4},~{tmm5},~{tmm6},~{tmm7},~{dirflag},~{fpsr},~{flags},~{memory}\n #[no_mangle]\n pub unsafe fn clobber_sysv64_edx() {\n     let foo: i32;\n     asm!(\"\", out(\"edx\") foo, clobber_abi(\"sysv64\"));\n }\n \n // CHECK-LABEL: @clobber_win64\n-// CHECK: =&{dx},={ax},={cx},={r8},={r9},={r10},={r11},={xmm0},={xmm1},={xmm2},={xmm3},={xmm4},={xmm5},={xmm6},={xmm7},={xmm8},={xmm9},={xmm10},={xmm11},={xmm12},={xmm13},={xmm14},={xmm15},~{xmm16},~{xmm17},~{xmm18},~{xmm19},~{xmm20},~{xmm21},~{xmm22},~{xmm23},~{xmm24},~{xmm25},~{xmm26},~{xmm27},~{xmm28},~{xmm29},~{xmm30},~{xmm31},~{k0},~{k1},~{k2},~{k3},~{k4},~{k5},~{k6},~{k7},~{st},~{st(1)},~{st(2)},~{st(3)},~{st(4)},~{st(5)},~{st(6)},~{st(7)},~{dirflag},~{fpsr},~{flags},~{memory}\n+// CHECK: =&{dx},={ax},={cx},={r8},={r9},={r10},={r11},={xmm0},={xmm1},={xmm2},={xmm3},={xmm4},={xmm5},={xmm6},={xmm7},={xmm8},={xmm9},={xmm10},={xmm11},={xmm12},={xmm13},={xmm14},={xmm15},~{xmm16},~{xmm17},~{xmm18},~{xmm19},~{xmm20},~{xmm21},~{xmm22},~{xmm23},~{xmm24},~{xmm25},~{xmm26},~{xmm27},~{xmm28},~{xmm29},~{xmm30},~{xmm31},~{k0},~{k1},~{k2},~{k3},~{k4},~{k5},~{k6},~{k7},~{st},~{st(1)},~{st(2)},~{st(3)},~{st(4)},~{st(5)},~{st(6)},~{st(7)},~{tmm0},~{tmm1},~{tmm2},~{tmm3},~{tmm4},~{tmm5},~{tmm6},~{tmm7},~{dirflag},~{fpsr},~{flags},~{memory}\n #[no_mangle]\n pub unsafe fn clobber_win64_edx() {\n     let foo: i32;"}, {"sha": "ac30e18ec52346791a68bf118c4dc26bc966bd5b", "filename": "src/test/codegen/asm-target-clobbers.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7361b22b4c57a446e042f8cbc95e17969a7301eb/src%2Ftest%2Fcodegen%2Fasm-target-clobbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7361b22b4c57a446e042f8cbc95e17969a7301eb/src%2Ftest%2Fcodegen%2Fasm-target-clobbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasm-target-clobbers.rs?ref=7361b22b4c57a446e042f8cbc95e17969a7301eb", "patch": "@@ -6,6 +6,13 @@\n \n use std::arch::asm;\n \n+// CHECK-LABEL: @amx_clobber\n+// base: call void asm sideeffect inteldialect \"\", \"~{tmm0}\"()\n+#[no_mangle]\n+pub unsafe fn amx_clobber() {\n+    asm!(\"\", out(\"tmm0\") _, options(nostack, nomem, preserves_flags));\n+}\n+\n // CHECK-LABEL: @avx512_clobber\n // base: call void asm sideeffect inteldialect \"\", \"~{xmm31}\"()\n // avx512: call float asm sideeffect inteldialect \"\", \"=&{xmm31}\"()"}]}