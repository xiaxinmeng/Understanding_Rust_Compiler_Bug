{"sha": "db4a06e9bdbfc808e60b06b357c35481a91fc8e6", "node_id": "C_kwDOAAsO6NoAKGRiNGEwNmU5YmRiZmM4MDhlNjBiMDZiMzU3YzM1NDgxYTkxZmM4ZTY", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-11T23:35:10Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-24T20:00:54Z"}, "message": "Use `path.def_id()` in `Type::inner_def_id()`", "tree": {"sha": "14d35b1b1c594d3e4006f25c070144e562b63433", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14d35b1b1c594d3e4006f25c070144e562b63433"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db4a06e9bdbfc808e60b06b357c35481a91fc8e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db4a06e9bdbfc808e60b06b357c35481a91fc8e6", "html_url": "https://github.com/rust-lang/rust/commit/db4a06e9bdbfc808e60b06b357c35481a91fc8e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db4a06e9bdbfc808e60b06b357c35481a91fc8e6/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47266bacf1585ca290cd3baca214497adc200803", "url": "https://api.github.com/repos/rust-lang/rust/commits/47266bacf1585ca290cd3baca214497adc200803", "html_url": "https://github.com/rust-lang/rust/commit/47266bacf1585ca290cd3baca214497adc200803"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "ed773cf4ad22bc19e25d3e2167db12b1e276db58", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db4a06e9bdbfc808e60b06b357c35481a91fc8e6/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4a06e9bdbfc808e60b06b357c35481a91fc8e6/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=db4a06e9bdbfc808e60b06b357c35481a91fc8e6", "patch": "@@ -1522,7 +1522,7 @@ impl Type {\n \n     fn inner_def_id(&self, cache: Option<&Cache>) -> Option<DefId> {\n         let t: PrimitiveType = match *self {\n-            ResolvedPath { did, .. } => return Some(did),\n+            ResolvedPath { ref path, did: _ } => return Some(path.def_id()),\n             DynTrait(ref bounds, _) => return Some(bounds[0].trait_.def_id()),\n             Primitive(p) => return cache.and_then(|c| c.primitive_locations.get(&p).cloned()),\n             BorrowedRef { type_: box Generic(..), .. } => PrimitiveType::Reference,"}]}