{"sha": "e702534763599db252f2ca308739ec340d0933de", "node_id": "C_kwDOAAsO6NoAKGU3MDI1MzQ3NjM1OTlkYjI1MmYyY2EzMDg3MzllYzM0MGQwOTMzZGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-16T07:20:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-16T07:20:30Z"}, "message": "Auto merge of #102935 - ajtribick:display-float-0.5-fixed-0, r=scottmcm\n\nFix inconsistent rounding of 0.5 when formatted to 0 decimal places\n\nAs described in #70336, when displaying values to zero decimal places the value of 0.5 is rounded to 1, which is inconsistent with the display of other half-integer values which round to even.\n\nFrom testing the flt2dec implementation, it looks like this comes down to the condition in the fixed-width Dragon implementation where an empty buffer is treated as a case to apply rounding up. I believe the change below fixes it and updates only the relevant tests.\n\nNevertheless I am aware this is very much a core piece of functionality, so please take a very careful look to make sure I haven't missed anything. I hope this change does not break anything in the wider ecosystem as having a consistent rounding behaviour in floating point formatting is in my opinion a useful feature to have.\n\nResolves #70336", "tree": {"sha": "041b34bdae1354bcfd29757625e44035866d0255", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/041b34bdae1354bcfd29757625e44035866d0255"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e702534763599db252f2ca308739ec340d0933de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e702534763599db252f2ca308739ec340d0933de", "html_url": "https://github.com/rust-lang/rust/commit/e702534763599db252f2ca308739ec340d0933de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e702534763599db252f2ca308739ec340d0933de/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b91b1a37bbb607348b8713d2e8f1051bf414048", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b91b1a37bbb607348b8713d2e8f1051bf414048", "html_url": "https://github.com/rust-lang/rust/commit/3b91b1a37bbb607348b8713d2e8f1051bf414048"}, {"sha": "aa9837ba29d88d0748e2599e46403f333a629836", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa9837ba29d88d0748e2599e46403f333a629836", "html_url": "https://github.com/rust-lang/rust/commit/aa9837ba29d88d0748e2599e46403f333a629836"}], "stats": {"total": 130, "additions": 125, "deletions": 5}, "files": [{"sha": "71b14d0ae3f4c1b8ce4a206f998eca4ea60b25c8", "filename": "library/core/src/num/flt2dec/strategy/dragon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e702534763599db252f2ca308739ec340d0933de/library%2Fcore%2Fsrc%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e702534763599db252f2ca308739ec340d0933de/library%2Fcore%2Fsrc%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs?ref=e702534763599db252f2ca308739ec340d0933de", "patch": "@@ -366,7 +366,7 @@ pub fn format_exact<'a>(\n     if order == Ordering::Greater\n         || (order == Ordering::Equal\n             // SAFETY: `buf[len-1]` is initialized.\n-            && (len == 0 || unsafe { buf[len - 1].assume_init() } & 1 == 1))\n+            && len > 0 && unsafe { buf[len - 1].assume_init() } & 1 == 1)\n     {\n         // if rounding up changes the length, the exponent should also change.\n         // but we've been requested a fixed number of digits, so do not alter the buffer..."}, {"sha": "003782f34dc9338599f6355a3dbb84dc6d9dd2fe", "filename": "library/core/tests/fmt/float.rs", "status": "modified", "additions": 122, "deletions": 2, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/e702534763599db252f2ca308739ec340d0933de/library%2Fcore%2Ftests%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e702534763599db252f2ca308739ec340d0933de/library%2Fcore%2Ftests%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Ffmt%2Ffloat.rs?ref=e702534763599db252f2ca308739ec340d0933de", "patch": "@@ -5,7 +5,7 @@ fn test_format_f64() {\n     assert_eq!(\"10\", format!(\"{:.0}\", 9.9f64));\n     assert_eq!(\"9.8\", format!(\"{:.1}\", 9.849f64));\n     assert_eq!(\"9.9\", format!(\"{:.1}\", 9.851f64));\n-    assert_eq!(\"1\", format!(\"{:.0}\", 0.5f64));\n+    assert_eq!(\"0\", format!(\"{:.0}\", 0.5f64));\n     assert_eq!(\"1.23456789e6\", format!(\"{:e}\", 1234567.89f64));\n     assert_eq!(\"1.23456789e3\", format!(\"{:e}\", 1234.56789f64));\n     assert_eq!(\"1.23456789E6\", format!(\"{:E}\", 1234567.89f64));\n@@ -24,14 +24,74 @@ fn test_format_f64() {\n     assert_eq!(\"1234.6\", format!(\"{:.1?}\", 1234.56789f64));\n }\n \n+#[test]\n+fn test_format_f64_rounds_ties_to_even() {\n+    assert_eq!(\"0\", format!(\"{:.0}\", 0.5f64));\n+    assert_eq!(\"2\", format!(\"{:.0}\", 1.5f64));\n+    assert_eq!(\"2\", format!(\"{:.0}\", 2.5f64));\n+    assert_eq!(\"4\", format!(\"{:.0}\", 3.5f64));\n+    assert_eq!(\"4\", format!(\"{:.0}\", 4.5f64));\n+    assert_eq!(\"6\", format!(\"{:.0}\", 5.5f64));\n+    assert_eq!(\"128\", format!(\"{:.0}\", 127.5f64));\n+    assert_eq!(\"128\", format!(\"{:.0}\", 128.5f64));\n+    assert_eq!(\"0.2\", format!(\"{:.1}\", 0.25f64));\n+    assert_eq!(\"0.8\", format!(\"{:.1}\", 0.75f64));\n+    assert_eq!(\"0.12\", format!(\"{:.2}\", 0.125f64));\n+    assert_eq!(\"0.88\", format!(\"{:.2}\", 0.875f64));\n+    assert_eq!(\"0.062\", format!(\"{:.3}\", 0.062f64));\n+    assert_eq!(\"-0\", format!(\"{:.0}\", -0.5f64));\n+    assert_eq!(\"-2\", format!(\"{:.0}\", -1.5f64));\n+    assert_eq!(\"-2\", format!(\"{:.0}\", -2.5f64));\n+    assert_eq!(\"-4\", format!(\"{:.0}\", -3.5f64));\n+    assert_eq!(\"-4\", format!(\"{:.0}\", -4.5f64));\n+    assert_eq!(\"-6\", format!(\"{:.0}\", -5.5f64));\n+    assert_eq!(\"-128\", format!(\"{:.0}\", -127.5f64));\n+    assert_eq!(\"-128\", format!(\"{:.0}\", -128.5f64));\n+    assert_eq!(\"-0.2\", format!(\"{:.1}\", -0.25f64));\n+    assert_eq!(\"-0.8\", format!(\"{:.1}\", -0.75f64));\n+    assert_eq!(\"-0.12\", format!(\"{:.2}\", -0.125f64));\n+    assert_eq!(\"-0.88\", format!(\"{:.2}\", -0.875f64));\n+    assert_eq!(\"-0.062\", format!(\"{:.3}\", -0.062f64));\n+\n+    assert_eq!(\"2e0\", format!(\"{:.0e}\", 1.5f64));\n+    assert_eq!(\"2e0\", format!(\"{:.0e}\", 2.5f64));\n+    assert_eq!(\"4e0\", format!(\"{:.0e}\", 3.5f64));\n+    assert_eq!(\"4e0\", format!(\"{:.0e}\", 4.5f64));\n+    assert_eq!(\"6e0\", format!(\"{:.0e}\", 5.5f64));\n+    assert_eq!(\"1.28e2\", format!(\"{:.2e}\", 127.5f64));\n+    assert_eq!(\"1.28e2\", format!(\"{:.2e}\", 128.5f64));\n+    assert_eq!(\"-2e0\", format!(\"{:.0e}\", -1.5f64));\n+    assert_eq!(\"-2e0\", format!(\"{:.0e}\", -2.5f64));\n+    assert_eq!(\"-4e0\", format!(\"{:.0e}\", -3.5f64));\n+    assert_eq!(\"-4e0\", format!(\"{:.0e}\", -4.5f64));\n+    assert_eq!(\"-6e0\", format!(\"{:.0e}\", -5.5f64));\n+    assert_eq!(\"-1.28e2\", format!(\"{:.2e}\", -127.5f64));\n+    assert_eq!(\"-1.28e2\", format!(\"{:.2e}\", -128.5f64));\n+\n+    assert_eq!(\"2E0\", format!(\"{:.0E}\", 1.5f64));\n+    assert_eq!(\"2E0\", format!(\"{:.0E}\", 2.5f64));\n+    assert_eq!(\"4E0\", format!(\"{:.0E}\", 3.5f64));\n+    assert_eq!(\"4E0\", format!(\"{:.0E}\", 4.5f64));\n+    assert_eq!(\"6E0\", format!(\"{:.0E}\", 5.5f64));\n+    assert_eq!(\"1.28E2\", format!(\"{:.2E}\", 127.5f64));\n+    assert_eq!(\"1.28E2\", format!(\"{:.2E}\", 128.5f64));\n+    assert_eq!(\"-2E0\", format!(\"{:.0E}\", -1.5f64));\n+    assert_eq!(\"-2E0\", format!(\"{:.0E}\", -2.5f64));\n+    assert_eq!(\"-4E0\", format!(\"{:.0E}\", -3.5f64));\n+    assert_eq!(\"-4E0\", format!(\"{:.0E}\", -4.5f64));\n+    assert_eq!(\"-6E0\", format!(\"{:.0E}\", -5.5f64));\n+    assert_eq!(\"-1.28E2\", format!(\"{:.2E}\", -127.5f64));\n+    assert_eq!(\"-1.28E2\", format!(\"{:.2E}\", -128.5f64));\n+}\n+\n #[test]\n fn test_format_f32() {\n     assert_eq!(\"1\", format!(\"{:.0}\", 1.0f32));\n     assert_eq!(\"9\", format!(\"{:.0}\", 9.4f32));\n     assert_eq!(\"10\", format!(\"{:.0}\", 9.9f32));\n     assert_eq!(\"9.8\", format!(\"{:.1}\", 9.849f32));\n     assert_eq!(\"9.9\", format!(\"{:.1}\", 9.851f32));\n-    assert_eq!(\"1\", format!(\"{:.0}\", 0.5f32));\n+    assert_eq!(\"0\", format!(\"{:.0}\", 0.5f32));\n     assert_eq!(\"1.2345679e6\", format!(\"{:e}\", 1234567.89f32));\n     assert_eq!(\"1.2345679e3\", format!(\"{:e}\", 1234.56789f32));\n     assert_eq!(\"1.2345679E6\", format!(\"{:E}\", 1234567.89f32));\n@@ -50,6 +110,66 @@ fn test_format_f32() {\n     assert_eq!(\"1234.6\", format!(\"{:.1?}\", 1234.56789f32));\n }\n \n+#[test]\n+fn test_format_f32_rounds_ties_to_even() {\n+    assert_eq!(\"0\", format!(\"{:.0}\", 0.5f32));\n+    assert_eq!(\"2\", format!(\"{:.0}\", 1.5f32));\n+    assert_eq!(\"2\", format!(\"{:.0}\", 2.5f32));\n+    assert_eq!(\"4\", format!(\"{:.0}\", 3.5f32));\n+    assert_eq!(\"4\", format!(\"{:.0}\", 4.5f32));\n+    assert_eq!(\"6\", format!(\"{:.0}\", 5.5f32));\n+    assert_eq!(\"128\", format!(\"{:.0}\", 127.5f32));\n+    assert_eq!(\"128\", format!(\"{:.0}\", 128.5f32));\n+    assert_eq!(\"0.2\", format!(\"{:.1}\", 0.25f32));\n+    assert_eq!(\"0.8\", format!(\"{:.1}\", 0.75f32));\n+    assert_eq!(\"0.12\", format!(\"{:.2}\", 0.125f32));\n+    assert_eq!(\"0.88\", format!(\"{:.2}\", 0.875f32));\n+    assert_eq!(\"0.062\", format!(\"{:.3}\", 0.062f32));\n+    assert_eq!(\"-0\", format!(\"{:.0}\", -0.5f32));\n+    assert_eq!(\"-2\", format!(\"{:.0}\", -1.5f32));\n+    assert_eq!(\"-2\", format!(\"{:.0}\", -2.5f32));\n+    assert_eq!(\"-4\", format!(\"{:.0}\", -3.5f32));\n+    assert_eq!(\"-4\", format!(\"{:.0}\", -4.5f32));\n+    assert_eq!(\"-6\", format!(\"{:.0}\", -5.5f32));\n+    assert_eq!(\"-128\", format!(\"{:.0}\", -127.5f32));\n+    assert_eq!(\"-128\", format!(\"{:.0}\", -128.5f32));\n+    assert_eq!(\"-0.2\", format!(\"{:.1}\", -0.25f32));\n+    assert_eq!(\"-0.8\", format!(\"{:.1}\", -0.75f32));\n+    assert_eq!(\"-0.12\", format!(\"{:.2}\", -0.125f32));\n+    assert_eq!(\"-0.88\", format!(\"{:.2}\", -0.875f32));\n+    assert_eq!(\"-0.062\", format!(\"{:.3}\", -0.062f32));\n+\n+    assert_eq!(\"2e0\", format!(\"{:.0e}\", 1.5f32));\n+    assert_eq!(\"2e0\", format!(\"{:.0e}\", 2.5f32));\n+    assert_eq!(\"4e0\", format!(\"{:.0e}\", 3.5f32));\n+    assert_eq!(\"4e0\", format!(\"{:.0e}\", 4.5f32));\n+    assert_eq!(\"6e0\", format!(\"{:.0e}\", 5.5f32));\n+    assert_eq!(\"1.28e2\", format!(\"{:.2e}\", 127.5f32));\n+    assert_eq!(\"1.28e2\", format!(\"{:.2e}\", 128.5f32));\n+    assert_eq!(\"-2e0\", format!(\"{:.0e}\", -1.5f32));\n+    assert_eq!(\"-2e0\", format!(\"{:.0e}\", -2.5f32));\n+    assert_eq!(\"-4e0\", format!(\"{:.0e}\", -3.5f32));\n+    assert_eq!(\"-4e0\", format!(\"{:.0e}\", -4.5f32));\n+    assert_eq!(\"-6e0\", format!(\"{:.0e}\", -5.5f32));\n+    assert_eq!(\"-1.28e2\", format!(\"{:.2e}\", -127.5f32));\n+    assert_eq!(\"-1.28e2\", format!(\"{:.2e}\", -128.5f32));\n+\n+    assert_eq!(\"2E0\", format!(\"{:.0E}\", 1.5f32));\n+    assert_eq!(\"2E0\", format!(\"{:.0E}\", 2.5f32));\n+    assert_eq!(\"4E0\", format!(\"{:.0E}\", 3.5f32));\n+    assert_eq!(\"4E0\", format!(\"{:.0E}\", 4.5f32));\n+    assert_eq!(\"6E0\", format!(\"{:.0E}\", 5.5f32));\n+    assert_eq!(\"1.28E2\", format!(\"{:.2E}\", 127.5f32));\n+    assert_eq!(\"1.28E2\", format!(\"{:.2E}\", 128.5f32));\n+    assert_eq!(\"-2E0\", format!(\"{:.0E}\", -1.5f32));\n+    assert_eq!(\"-2E0\", format!(\"{:.0E}\", -2.5f32));\n+    assert_eq!(\"-4E0\", format!(\"{:.0E}\", -3.5f32));\n+    assert_eq!(\"-4E0\", format!(\"{:.0E}\", -4.5f32));\n+    assert_eq!(\"-6E0\", format!(\"{:.0E}\", -5.5f32));\n+    assert_eq!(\"-1.28E2\", format!(\"{:.2E}\", -127.5f32));\n+    assert_eq!(\"-1.28E2\", format!(\"{:.2E}\", -128.5f32));\n+}\n+\n fn is_exponential(s: &str) -> bool {\n     s.contains(\"e\") || s.contains(\"E\")\n }"}, {"sha": "30843cc3dd79c32a51a364d833e5b278b32bf7ae", "filename": "library/core/tests/num/flt2dec/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e702534763599db252f2ca308739ec340d0933de/library%2Fcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e702534763599db252f2ca308739ec340d0933de/library%2Fcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs?ref=e702534763599db252f2ca308739ec340d0933de", "patch": "@@ -138,7 +138,7 @@ where\n \n     // check exact rounding for zero- and negative-width cases\n     let start;\n-    if expected[0] >= b'5' {\n+    if expected[0] > b'5' {\n         try_fixed!(f(&decoded) => &mut buf, expectedk, b\"1\", expectedk + 1;\n                    \"zero-width rounding-up mismatch for v={v}: \\\n                     actual {actual:?}, expected {expected:?}\",\n@@ -1007,7 +1007,7 @@ where\n     assert_eq!(to_string(f, 999.5, Minus, 3), \"999.500\");\n     assert_eq!(to_string(f, 999.5, Minus, 30), \"999.500000000000000000000000000000\");\n \n-    assert_eq!(to_string(f, 0.5, Minus, 0), \"1\");\n+    assert_eq!(to_string(f, 0.5, Minus, 0), \"0\");\n     assert_eq!(to_string(f, 0.5, Minus, 1), \"0.5\");\n     assert_eq!(to_string(f, 0.5, Minus, 2), \"0.50\");\n     assert_eq!(to_string(f, 0.5, Minus, 3), \"0.500\");"}]}