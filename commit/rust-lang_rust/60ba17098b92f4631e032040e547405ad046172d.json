{"sha": "60ba17098b92f4631e032040e547405ad046172d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYmExNzA5OGI5MmY0NjMxZTAzMjA0MGU1NDc0MDVhZDA0NjE3MmQ=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2013-09-17T04:58:49Z"}, "committer": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2013-09-17T06:19:24Z"}, "message": "std: FsRequest.req_boilerplate() be &mut self", "tree": {"sha": "ff7dd3d69308eb8bced64275848db3434d1ddb89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff7dd3d69308eb8bced64275848db3434d1ddb89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60ba17098b92f4631e032040e547405ad046172d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60ba17098b92f4631e032040e547405ad046172d", "html_url": "https://github.com/rust-lang/rust/commit/60ba17098b92f4631e032040e547405ad046172d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60ba17098b92f4631e032040e547405ad046172d/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a87ff60f496da746733b91b28d1e7b10fc22a612", "url": "https://api.github.com/repos/rust-lang/rust/commits/a87ff60f496da746733b91b28d1e7b10fc22a612", "html_url": "https://github.com/rust-lang/rust/commit/a87ff60f496da746733b91b28d1e7b10fc22a612"}], "stats": {"total": 75, "additions": 58, "deletions": 17}, "files": [{"sha": "ada558036cfeae2419768e52878eb73a9ead533b", "filename": "src/libstd/rt/uv/file.rs", "status": "modified", "additions": 58, "deletions": 17, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/60ba17098b92f4631e032040e547405ad046172d/src%2Flibstd%2Frt%2Fuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ba17098b92f4631e032040e547405ad046172d/src%2Flibstd%2Frt%2Fuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Ffile.rs?ref=60ba17098b92f4631e032040e547405ad046172d", "patch": "@@ -38,7 +38,10 @@ impl FsRequest {\n \n     pub fn open<P: PathLike>(self, loop_: &Loop, path: &P, flags: int, mode: int,\n                cb: FsCallback) {\n-        let complete_cb_ptr = self.req_boilerplate(Some(cb));\n+        let complete_cb_ptr = {\n+            let mut me = self;\n+            me.req_boilerplate(Some(cb))\n+        };\n         path.path_as_str(|p| {\n             p.to_c_str().with_ref(|p| unsafe {\n             uvll::fs_open(loop_.native_handle(),\n@@ -49,7 +52,10 @@ impl FsRequest {\n \n     pub fn open_sync<P: PathLike>(self, loop_: &Loop, path: &P,\n                                   flags: int, mode: int) -> Result<c_int, UvError> {\n-        let complete_cb_ptr = self.req_boilerplate(None);\n+        let complete_cb_ptr = {\n+            let mut me = self;\n+            me.req_boilerplate(None)\n+        };\n         let result = path.path_as_str(|p| {\n             p.to_c_str().with_ref(|p| unsafe {\n             uvll::fs_open(loop_.native_handle(),\n@@ -60,7 +66,10 @@ impl FsRequest {\n     }\n \n     pub fn unlink<P: PathLike>(self, loop_: &Loop, path: &P, cb: FsCallback) {\n-        let complete_cb_ptr = self.req_boilerplate(Some(cb));\n+        let complete_cb_ptr = {\n+            let mut me = self;\n+            me.req_boilerplate(Some(cb))\n+        };\n         path.path_as_str(|p| {\n             p.to_c_str().with_ref(|p| unsafe {\n                 uvll::fs_unlink(loop_.native_handle(),\n@@ -71,7 +80,10 @@ impl FsRequest {\n \n     pub fn unlink_sync<P: PathLike>(self, loop_: &Loop, path: &P)\n       -> Result<c_int, UvError> {\n-        let complete_cb_ptr = self.req_boilerplate(None);\n+        let complete_cb_ptr = {\n+            let mut me = self;\n+            me.req_boilerplate(None)\n+        };\n         let result = path.path_as_str(|p| {\n             p.to_c_str().with_ref(|p| unsafe {\n                 uvll::fs_unlink(loop_.native_handle(),\n@@ -82,7 +94,10 @@ impl FsRequest {\n     }\n \n     pub fn stat<P: PathLike>(self, loop_: &Loop, path: &P, cb: FsCallback) {\n-        let complete_cb_ptr = self.req_boilerplate(Some(cb));\n+        let complete_cb_ptr = {\n+            let mut me = self;\n+            me.req_boilerplate(Some(cb))\n+        };\n         path.path_as_str(|p| {\n             p.to_c_str().with_ref(|p| unsafe {\n                 uvll::fs_stat(loop_.native_handle(),\n@@ -92,7 +107,10 @@ impl FsRequest {\n     }\n \n     pub fn write(self, loop_: &Loop, fd: c_int, buf: Buf, offset: i64, cb: FsCallback) {\n-        let complete_cb_ptr = self.req_boilerplate(Some(cb));\n+        let complete_cb_ptr = {\n+            let mut me = self;\n+            me.req_boilerplate(Some(cb))\n+        };\n         let base_ptr = buf.base as *c_void;\n         let len = buf.len as uint;\n         unsafe {\n@@ -103,7 +121,10 @@ impl FsRequest {\n     }\n     pub fn write_sync(self, loop_: &Loop, fd: c_int, buf: Buf, offset: i64)\n           -> Result<c_int, UvError> {\n-        let complete_cb_ptr = self.req_boilerplate(None);\n+        let complete_cb_ptr = {\n+            let mut me = self;\n+            me.req_boilerplate(None)\n+        };\n         let base_ptr = buf.base as *c_void;\n         let len = buf.len as uint;\n         let result = unsafe {\n@@ -115,7 +136,10 @@ impl FsRequest {\n     }\n \n     pub fn read(self, loop_: &Loop, fd: c_int, buf: Buf, offset: i64, cb: FsCallback) {\n-        let complete_cb_ptr = self.req_boilerplate(Some(cb));\n+        let complete_cb_ptr = {\n+            let mut me = self;\n+            me.req_boilerplate(Some(cb))\n+        };\n         let buf_ptr = buf.base as *c_void;\n         let len = buf.len as uint;\n         unsafe {\n@@ -126,7 +150,10 @@ impl FsRequest {\n     }\n     pub fn read_sync(self, loop_: &Loop, fd: c_int, buf: Buf, offset: i64)\n           -> Result<c_int, UvError> {\n-        let complete_cb_ptr = self.req_boilerplate(None);\n+        let complete_cb_ptr = {\n+            let mut me = self;\n+            me.req_boilerplate(None)\n+        };\n         let buf_ptr = buf.base as *c_void;\n         let len = buf.len as uint;\n         let result = unsafe {\n@@ -138,14 +165,20 @@ impl FsRequest {\n     }\n \n     pub fn close(self, loop_: &Loop, fd: c_int, cb: FsCallback) {\n-        let complete_cb_ptr = self.req_boilerplate(Some(cb));\n+        let complete_cb_ptr = {\n+            let mut me = self;\n+            me.req_boilerplate(Some(cb))\n+        };\n         unsafe {\n             uvll::fs_close(loop_.native_handle(), self.native_handle(),\n                            fd, complete_cb_ptr)\n         };\n     }\n     pub fn close_sync(self, loop_: &Loop, fd: c_int) -> Result<c_int, UvError> {\n-        let complete_cb_ptr = self.req_boilerplate(None);\n+        let complete_cb_ptr = {\n+            let mut me = self;\n+            me.req_boilerplate(None)\n+        };\n         let result = unsafe {\n             uvll::fs_close(loop_.native_handle(), self.native_handle(),\n                            fd, complete_cb_ptr)\n@@ -154,7 +187,10 @@ impl FsRequest {\n     }\n \n     pub fn mkdir<P: PathLike>(self, loop_: &Loop, path: &P, mode: int, cb: FsCallback) {\n-        let complete_cb_ptr = self.req_boilerplate(Some(cb));\n+        let complete_cb_ptr = {\n+            let mut me = self;\n+            me.req_boilerplate(Some(cb))\n+        };\n         path.path_as_str(|p| {\n             p.to_c_str().with_ref(|p| unsafe {\n             uvll::fs_mkdir(loop_.native_handle(),\n@@ -164,7 +200,10 @@ impl FsRequest {\n     }\n \n     pub fn rmdir<P: PathLike>(self, loop_: &Loop, path: &P, cb: FsCallback) {\n-        let complete_cb_ptr = self.req_boilerplate(Some(cb));\n+        let complete_cb_ptr = {\n+            let mut me = self;\n+            me.req_boilerplate(Some(cb))\n+        };\n         path.path_as_str(|p| {\n             p.to_c_str().with_ref(|p| unsafe {\n             uvll::fs_rmdir(loop_.native_handle(),\n@@ -175,7 +214,10 @@ impl FsRequest {\n \n     pub fn readdir<P: PathLike>(self, loop_: &Loop, path: &P,\n                                 flags: c_int, cb: FsCallback) {\n-        let complete_cb_ptr = self.req_boilerplate(Some(cb));\n+        let complete_cb_ptr = {\n+            let mut me = self;\n+            me.req_boilerplate(Some(cb))\n+        };\n         path.path_as_str(|p| {\n             p.to_c_str().with_ref(|p| unsafe {\n             uvll::fs_readdir(loop_.native_handle(),\n@@ -193,8 +235,7 @@ impl FsRequest {\n             None => Ok(result)\n         }\n     }\n-    fn req_boilerplate(&self, cb: Option<FsCallback>) -> *u8 {\n-        // XXX: this is unsafe/mutable\n+    fn req_boilerplate(&mut self, cb: Option<FsCallback>) -> *u8 {\n         let result = match cb {\n             Some(_) => {\n                 compl_cb as *u8\n@@ -204,7 +245,7 @@ impl FsRequest {\n         self.install_req_data(cb);\n         result\n     }\n-    pub fn install_req_data(&self, cb: Option<FsCallback>) {\n+    pub fn install_req_data(&mut self, cb: Option<FsCallback>) {\n         let fs_req = (self.native_handle()) as *uvll::uv_write_t;\n         let data = ~RequestData {\n             complete_cb: cb"}]}