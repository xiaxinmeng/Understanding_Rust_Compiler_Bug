{"sha": "726e329f46e3916306cf3557c19dcdb54a021c2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNmUzMjlmNDZlMzkxNjMwNmNmMzU1N2MxOWRjZGI1NGEwMjFjMmY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-10T12:45:45Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-10T19:34:26Z"}, "message": "Add basic inline asm support for x86_64", "tree": {"sha": "7646d09e5f38fcd61bdd638add66ea6380326410", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7646d09e5f38fcd61bdd638add66ea6380326410"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/726e329f46e3916306cf3557c19dcdb54a021c2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/726e329f46e3916306cf3557c19dcdb54a021c2f", "html_url": "https://github.com/rust-lang/rust/commit/726e329f46e3916306cf3557c19dcdb54a021c2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/726e329f46e3916306cf3557c19dcdb54a021c2f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35701d8caab0eff01b73d5335ac4b8e63f6ff689", "url": "https://api.github.com/repos/rust-lang/rust/commits/35701d8caab0eff01b73d5335ac4b8e63f6ff689", "html_url": "https://github.com/rust-lang/rust/commit/35701d8caab0eff01b73d5335ac4b8e63f6ff689"}], "stats": {"total": 258, "additions": 243, "deletions": 15}, "files": [{"sha": "3639b0e7d469b33a27886a819613d314f9c43a5c", "filename": "Readme.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/726e329f46e3916306cf3557c19dcdb54a021c2f/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/726e329f46e3916306cf3557c19dcdb54a021c2f/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=726e329f46e3916306cf3557c19dcdb54a021c2f", "patch": "@@ -76,5 +76,8 @@ function jit_calc() {\n \n * Good non-rust abi support ([several problems](https://github.com/bjorn3/rustc_codegen_cranelift/issues/10))\n     * Proc macros\n-* Inline assembly ([no cranelift support](https://github.com/bytecodealliance/wasmtime/issues/1041), not coming soon)\n+* Inline assembly ([no cranelift support](https://github.com/bytecodealliance/wasmtime/issues/1041)\n+    * On Linux there is support for invoking an external assembler for `global_asm!` and `asm!`.\n+      `llvm_asm!` will remain unimplemented forever. `asm!` doesn't yet support reg classes. You\n+      have to specify specific registers instead.\n * SIMD ([tracked here](https://github.com/bjorn3/rustc_codegen_cranelift/issues/171), some basic things work)"}, {"sha": "1bd5559c3350154e27d4fb77eb1103b4d558de18", "filename": "src/base.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/726e329f46e3916306cf3557c19dcdb54a021c2f/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/726e329f46e3916306cf3557c19dcdb54a021c2f/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=726e329f46e3916306cf3557c19dcdb54a021c2f", "patch": "@@ -36,6 +36,7 @@ pub(crate) fn trans_fn<'tcx, B: Backend + 'static>(\n     let mut fx = FunctionCx {\n         tcx,\n         module: &mut cx.module,\n+        global_asm: &mut cx.global_asm,\n         pointer_type,\n \n         instance,\n@@ -307,24 +308,26 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n             TerminatorKind::InlineAsm {\n                 template,\n                 operands,\n-                options: _,\n+                options,\n                 destination,\n                 line_spans: _,\n             } => {\n-                match template {\n-                    &[] => {\n-                        assert_eq!(operands, &[]);\n-                        match *destination {\n-                            Some(destination) => {\n-                                let destination_block = fx.get_block(destination);\n-                                fx.bcx.ins().jump(destination_block, &[]);\n-                            }\n-                            None => bug!(),\n-                        }\n+                crate::inline_asm::codegen_inline_asm(\n+                    fx,\n+                    bb_data.terminator().source_info.span,\n+                    template,\n+                    operands,\n+                    *options,\n+                );\n \n-                        // Black box\n+                match *destination {\n+                    Some(destination) => {\n+                        let destination_block = fx.get_block(destination);\n+                        fx.bcx.ins().jump(destination_block, &[]);\n+                    }\n+                    None => {\n+                        crate::trap::trap_unreachable(fx, \"[corruption] Returned from noreturn inline asm\");\n                     }\n-                    _ => fx.tcx.sess.span_fatal(bb_data.terminator().source_info.span, \"Inline assembly is not supported\"),\n                 }\n             }\n             TerminatorKind::Resume | TerminatorKind::Abort => {"}, {"sha": "bf0d4957bc32bf0f6beafa38ada590ed5f07e0b0", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/726e329f46e3916306cf3557c19dcdb54a021c2f/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/726e329f46e3916306cf3557c19dcdb54a021c2f/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=726e329f46e3916306cf3557c19dcdb54a021c2f", "patch": "@@ -254,6 +254,7 @@ pub(crate) struct FunctionCx<'clif, 'tcx, B: Backend + 'static> {\n     // FIXME use a reference to `CodegenCx` instead of `tcx`, `module` and `constants` and `caches`\n     pub(crate) tcx: TyCtxt<'tcx>,\n     pub(crate) module: &'clif mut Module<B>,\n+    pub(crate) global_asm: &'clif mut String,\n     pub(crate) pointer_type: Type, // Cached from module\n \n     pub(crate) instance: Instance<'tcx>,"}, {"sha": "4510614cf43cc89d6fc9306b282fc6e230e8a418", "filename": "src/driver/aot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/726e329f46e3916306cf3557c19dcdb54a021c2f/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/726e329f46e3916306cf3557c19dcdb54a021c2f/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=726e329f46e3916306cf3557c19dcdb54a021c2f", "patch": "@@ -273,7 +273,7 @@ fn codegen_global_asm(tcx: TyCtxt<'_>, cgu_name: &str, global_asm: &str) {\n         }\n \n         // FIXME fix linker error on macOS\n-        tcx.sess.fatal(\"global_asm! is not yet supported on macOS and Windows\");\n+        tcx.sess.fatal(\"asm! and global_asm! are not yet supported on macOS and Windows\");\n     }\n \n     let assembler = crate::toolchain::get_toolchain_binary(tcx.sess, \"as\");"}, {"sha": "e2bbdd5ce917208cc521456c51b2f34b4778be09", "filename": "src/inline_asm.rs", "status": "added", "additions": 220, "deletions": 0, "changes": 220, "blob_url": "https://github.com/rust-lang/rust/blob/726e329f46e3916306cf3557c19dcdb54a021c2f/src%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/726e329f46e3916306cf3557c19dcdb54a021c2f/src%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finline_asm.rs?ref=726e329f46e3916306cf3557c19dcdb54a021c2f", "patch": "@@ -0,0 +1,220 @@\n+use crate::prelude::*;\n+\n+use std::fmt::Write;\n+\n+use rustc_ast::ast::{InlineAsmTemplatePiece, InlineAsmOptions};\n+use rustc_middle::mir::InlineAsmOperand;\n+use rustc_target::asm::*;\n+\n+pub(crate) fn codegen_inline_asm<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    _span: Span,\n+    template: &[InlineAsmTemplatePiece],\n+    operands: &[InlineAsmOperand<'tcx>],\n+    options: InlineAsmOptions,\n+) {\n+    // FIXME add .eh_frame unwind info directives\n+\n+    if template.is_empty() {\n+        // Black box\n+        return;\n+    }\n+\n+    let mut slot_size = Size::from_bytes(0);\n+    let mut clobbered_regs = Vec::new();\n+    let mut inputs = Vec::new();\n+    let mut outputs = Vec::new();\n+\n+    let mut new_slot = |reg_class: InlineAsmRegClass| {\n+        let reg_size = reg_class\n+            .supported_types(InlineAsmArch::X86_64)\n+            .iter()\n+            .map(|(ty, _)| ty.size())\n+            .max()\n+            .unwrap();\n+        let align = rustc_target::abi::Align::from_bytes(reg_size.bytes()).unwrap();\n+        slot_size = slot_size.align_to(align);\n+        let offset = slot_size;\n+        slot_size += reg_size;\n+        offset\n+    };\n+\n+    // FIXME overlap input and output slots to save stack space\n+    for operand in operands {\n+        match *operand {\n+            InlineAsmOperand::In { reg, ref value } => {\n+                let reg = expect_reg(reg);\n+                clobbered_regs.push((reg, new_slot(reg.reg_class())));\n+                inputs.push((reg, new_slot(reg.reg_class()), crate::base::trans_operand(fx, value).load_scalar(fx)));\n+            }\n+            InlineAsmOperand::Out { reg, late: _, place } => {\n+                let reg = expect_reg(reg);\n+                clobbered_regs.push((reg, new_slot(reg.reg_class())));\n+                if let Some(place) = place {\n+                    outputs.push((reg, new_slot(reg.reg_class()), crate::base::trans_place(fx, place)));\n+                }\n+            }\n+            InlineAsmOperand::InOut { reg, late: _, ref in_value, out_place } => {\n+                let reg = expect_reg(reg);\n+                clobbered_regs.push((reg, new_slot(reg.reg_class())));\n+                inputs.push((reg, new_slot(reg.reg_class()), crate::base::trans_operand(fx, in_value).load_scalar(fx)));\n+                if let Some(out_place) = out_place {\n+                    outputs.push((reg, new_slot(reg.reg_class()), crate::base::trans_place(fx, out_place)));\n+                }\n+            }\n+            InlineAsmOperand::Const { value: _ } => todo!(),\n+            InlineAsmOperand::SymFn { value: _ } => todo!(),\n+            InlineAsmOperand::SymStatic { def_id: _ } => todo!(),\n+        }\n+    }\n+\n+    let asm_name = format!(\"{}__inline_asm_{}\", fx.tcx.symbol_name(fx.instance).name, /*FIXME*/0);\n+\n+    let generated_asm = generate_asm_wrapper(&asm_name, InlineAsmArch::X86_64, options, template, clobbered_regs, &inputs, &outputs);\n+    fx.global_asm.push_str(&generated_asm);\n+\n+    call_inline_asm(fx, &asm_name, slot_size, inputs, outputs);\n+}\n+\n+fn generate_asm_wrapper(\n+    asm_name: &str,\n+    arch: InlineAsmArch,\n+    options: InlineAsmOptions,\n+    template: &[InlineAsmTemplatePiece],\n+    clobbered_regs: Vec<(InlineAsmReg, Size)>,\n+    inputs: &[(InlineAsmReg, Size, Value)],\n+    outputs: &[(InlineAsmReg, Size, CPlace<'_>)],\n+) -> String {\n+    let mut generated_asm = String::new();\n+    writeln!(generated_asm, \".globl {}\", asm_name).unwrap();\n+    writeln!(generated_asm, \".type {},@function\", asm_name).unwrap();\n+    writeln!(generated_asm, \".section .text.{},\\\"ax\\\",@progbits\", asm_name).unwrap();\n+    writeln!(generated_asm, \"{}:\", asm_name).unwrap();\n+\n+    generated_asm.push_str(\".intel_syntax noprefix\\n\");\n+    generated_asm.push_str(\"    push rbp\\n\");\n+    generated_asm.push_str(\"    mov rbp,rdi\\n\");\n+\n+    // Save clobbered registers\n+    if !options.contains(InlineAsmOptions::NORETURN) {\n+        // FIXME skip registers saved by the calling convention\n+        for &(reg, offset) in &clobbered_regs {\n+            save_register(&mut generated_asm, arch, reg, offset);\n+        }\n+    }\n+\n+    // Write input registers\n+    for &(reg, offset, _value) in inputs {\n+        restore_register(&mut generated_asm, arch, reg, offset);\n+    }\n+\n+    if options.contains(InlineAsmOptions::ATT_SYNTAX) {\n+        generated_asm.push_str(\".att_syntax\\n\");\n+    }\n+\n+    // The actual inline asm\n+    for piece in template {\n+        match piece {\n+            InlineAsmTemplatePiece::String(s) => {\n+                generated_asm.push_str(s);\n+            }\n+            InlineAsmTemplatePiece::Placeholder { operand_idx: _, modifier: _, span: _ } => todo!(),\n+        }\n+    }\n+    generated_asm.push('\\n');\n+\n+    if options.contains(InlineAsmOptions::ATT_SYNTAX) {\n+        generated_asm.push_str(\".intel_syntax noprefix\\n\");\n+    }\n+\n+    if !options.contains(InlineAsmOptions::NORETURN) {\n+        // Read output registers\n+        for &(reg, offset, _place) in outputs {\n+            save_register(&mut generated_asm, arch, reg, offset);\n+        }\n+\n+        // Restore clobbered registers\n+        for &(reg, offset) in clobbered_regs.iter().rev() {\n+            restore_register(&mut generated_asm, arch, reg, offset);\n+        }\n+\n+        generated_asm.push_str(\"    pop rbp\\n\");\n+        generated_asm.push_str(\"    ret\\n\");\n+    } else {\n+        generated_asm.push_str(\"    ud2\\n\");\n+    }\n+\n+    generated_asm.push_str(\".att_syntax\\n\");\n+    writeln!(generated_asm, \".size {name}, .-{name}\", name=asm_name).unwrap();\n+    generated_asm.push_str(\".text\\n\");\n+    generated_asm.push_str(\"\\n\\n\");\n+\n+    generated_asm\n+}\n+\n+fn call_inline_asm<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    asm_name: &str,\n+    slot_size: Size,\n+    inputs: Vec<(InlineAsmReg, Size, Value)>,\n+    outputs: Vec<(InlineAsmReg, Size, CPlace<'tcx>)>,\n+) {\n+    let stack_slot = fx.bcx.func.create_stack_slot(StackSlotData {\n+        kind: StackSlotKind::ExplicitSlot,\n+        offset: None,\n+        size: u32::try_from(slot_size.bytes()).unwrap(),\n+    });\n+    #[cfg(debug_assertions)]\n+    fx.add_comment(stack_slot, \"inline asm scratch slot\");\n+\n+    let inline_asm_func = fx.module.declare_function(asm_name, Linkage::Import, &Signature {\n+        call_conv: CallConv::SystemV,\n+        params: vec![AbiParam::new(fx.pointer_type)],\n+        returns: vec![],\n+    }).unwrap();\n+    let inline_asm_func = fx.module.declare_func_in_func(inline_asm_func, &mut fx.bcx.func);\n+    #[cfg(debug_assertions)]\n+    fx.add_comment(inline_asm_func, asm_name);\n+\n+    for (_reg, offset, value) in inputs {\n+        fx.bcx.ins().stack_store(value, stack_slot, i32::try_from(offset.bytes()).unwrap());\n+    }\n+\n+    let stack_slot_addr = fx.bcx.ins().stack_addr(fx.pointer_type, stack_slot, 0);\n+    fx.bcx.ins().call(inline_asm_func, &[stack_slot_addr]);\n+\n+    for (_reg, offset, place) in outputs {\n+        let ty = fx.clif_type(place.layout().ty).unwrap();\n+        let value = fx.bcx.ins().stack_load(ty, stack_slot, i32::try_from(offset.bytes()).unwrap());\n+        place.write_cvalue(fx, CValue::by_val(value, place.layout()));\n+    }\n+}\n+\n+fn expect_reg(reg_or_class: InlineAsmRegOrRegClass) -> InlineAsmReg {\n+    match reg_or_class {\n+        InlineAsmRegOrRegClass::Reg(reg) => reg,\n+        InlineAsmRegOrRegClass::RegClass(class) => unimplemented!(\"{:?}\", class),\n+    }\n+}\n+\n+fn save_register(generated_asm: &mut String, arch: InlineAsmArch, reg: InlineAsmReg, offset: Size) {\n+    match arch {\n+        InlineAsmArch::X86_64 => {\n+            write!(generated_asm, \"    mov [rbp+0x{:x}], \", offset.bytes()).unwrap();\n+            reg.emit(generated_asm, InlineAsmArch::X86_64, None).unwrap();\n+            generated_asm.push('\\n');\n+        }\n+        _ => unimplemented!(\"save_register for {:?}\", arch),\n+    }\n+}\n+\n+fn restore_register(generated_asm: &mut String, arch: InlineAsmArch, reg: InlineAsmReg, offset: Size) {\n+    match arch {\n+        InlineAsmArch::X86_64 => {\n+            generated_asm.push_str(\"    mov \");\n+            reg.emit(generated_asm, InlineAsmArch::X86_64, None).unwrap();\n+            writeln!(generated_asm, \", [rbp+0x{:x}]\", offset.bytes()).unwrap();\n+        }\n+        _ => unimplemented!(\"restore_register for {:?}\", arch),\n+    }\n+}"}, {"sha": "041c05722efd55c142a0ccd5777251c2cb562c82", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/726e329f46e3916306cf3557c19dcdb54a021c2f/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/726e329f46e3916306cf3557c19dcdb54a021c2f/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=726e329f46e3916306cf3557c19dcdb54a021c2f", "patch": "@@ -55,6 +55,7 @@ mod constant;\n mod debuginfo;\n mod discriminant;\n mod driver;\n+mod inline_asm;\n mod intrinsics;\n mod linkage;\n mod main_shim;"}]}