{"sha": "bcdbe942e108e47ffa712fa44ad9b251c53c105b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZGJlOTQyZTEwOGU0N2ZmYTcxMmZhNDRhZDliMjUxYzUzYzEwNWI=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-11-29T07:10:26Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2017-01-03T07:31:46Z"}, "message": "Make is_useful handle empty types properly", "tree": {"sha": "8afed02b3f00112fe4aed144a0209eacecdf1320", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8afed02b3f00112fe4aed144a0209eacecdf1320"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcdbe942e108e47ffa712fa44ad9b251c53c105b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcdbe942e108e47ffa712fa44ad9b251c53c105b", "html_url": "https://github.com/rust-lang/rust/commit/bcdbe942e108e47ffa712fa44ad9b251c53c105b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcdbe942e108e47ffa712fa44ad9b251c53c105b/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ad20442e8af42815fde41c03188764ac516cf18", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ad20442e8af42815fde41c03188764ac516cf18", "html_url": "https://github.com/rust-lang/rust/commit/9ad20442e8af42815fde41c03188764ac516cf18"}], "stats": {"total": 331, "additions": 246, "deletions": 85}, "files": [{"sha": "96fb168581b2169ee141d09a22cf9280c50a4155", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=bcdbe942e108e47ffa712fa44ad9b251c53c105b", "patch": "@@ -70,6 +70,12 @@ declare_lint! {\n     \"detects unreachable code paths\"\n }\n \n+declare_lint! {\n+    pub UNREACHABLE_PATTERNS,\n+    Warn,\n+    \"detects unreachable patterns\"\n+}\n+\n declare_lint! {\n     pub WARNINGS,\n     Warn,\n@@ -239,6 +245,7 @@ impl LintPass for HardwiredLints {\n             UNUSED_ASSIGNMENTS,\n             DEAD_CODE,\n             UNREACHABLE_CODE,\n+            UNREACHABLE_PATTERNS,\n             WARNINGS,\n             UNUSED_FEATURES,\n             STABLE_FEATURES,"}, {"sha": "b517a77255e2f744e232f8ab4ee062622eb8f608", "filename": "src/librustc_const_eval/_match.rs", "status": "modified", "additions": 52, "deletions": 11, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Flibrustc_const_eval%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Flibrustc_const_eval%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2F_match.rs?ref=bcdbe942e108e47ffa712fa44ad9b251c53c105b", "patch": "@@ -17,7 +17,7 @@ use eval::{compare_const_vals};\n \n use rustc_const_math::ConstInt;\n \n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::Idx;\n \n use pattern::{FieldPattern, Pattern, PatternKind};\n@@ -29,6 +29,7 @@ use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::mir::Field;\n use rustc::util::common::ErrorReported;\n \n+use syntax::ast::NodeId;\n use syntax_pos::{Span, DUMMY_SP};\n \n use arena::TypedArena;\n@@ -144,6 +145,14 @@ impl<'a, 'tcx> FromIterator<Vec<&'a Pattern<'tcx>>> for Matrix<'a, 'tcx> {\n //NOTE: appears to be the only place other then InferCtxt to contain a ParamEnv\n pub struct MatchCheckCtxt<'a, 'tcx: 'a> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    /// (roughly) where in the code the match occurs. This is necessary for\n+    /// checking inhabited-ness of types because whether a type is (visibly)\n+    /// inhabited can depend on whether it was defined in the current module or\n+    /// not. eg.\n+    ///     struct Foo { _private: ! }\n+    /// can not be seen to be empty outside it's module and should not\n+    /// be matchable with an empty match statement.\n+    pub node: NodeId,\n     /// A wild pattern with an error type - it exists to avoid having to normalize\n     /// associated types to get field types.\n     pub wild_pattern: &'a Pattern<'tcx>,\n@@ -154,6 +163,7 @@ pub struct MatchCheckCtxt<'a, 'tcx: 'a> {\n impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n     pub fn create_and_enter<F, R>(\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        node: NodeId,\n         f: F) -> R\n         where F: for<'b> FnOnce(MatchCheckCtxt<'b, 'tcx>) -> R\n     {\n@@ -167,6 +177,7 @@ impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n \n         f(MatchCheckCtxt {\n             tcx: tcx,\n+            node: node,\n             wild_pattern: &wild_pattern,\n             pattern_arena: &pattern_arena,\n             byte_array_map: FxHashMap(),\n@@ -362,9 +373,9 @@ impl<'tcx> Witness<'tcx> {\n /// Therefore, if there is some pattern that is unmatched by `matrix`, it will\n /// still be unmatched if the first constructor is replaced by any of the constructors\n /// in the return value.\n-fn missing_constructors(cx: &mut MatchCheckCtxt,\n-                        matrix: &Matrix,\n-                        pcx: PatternContext) -> Vec<Constructor> {\n+fn missing_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n+                                      matrix: &Matrix,\n+                                      pcx: PatternContext<'tcx>) -> Vec<Constructor> {\n     let used_constructors: Vec<Constructor> =\n         matrix.0.iter()\n         .flat_map(|row| pat_constructors(cx, row[0], pcx).unwrap_or(vec![]))\n@@ -384,16 +395,46 @@ fn missing_constructors(cx: &mut MatchCheckCtxt,\n ///\n /// but is instead bounded by the maximum fixed length of slice patterns in\n /// the column of patterns being analyzed.\n-fn all_constructors(_cx: &mut MatchCheckCtxt, pcx: PatternContext) -> Vec<Constructor> {\n+///\n+/// We make sure to omit constructors that are statically impossible. eg for\n+/// Option<!> we do not include Some(_) in the returned list of constructors.\n+fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n+                                  pcx: PatternContext<'tcx>) -> Vec<Constructor>\n+{\n     match pcx.ty.sty {\n         ty::TyBool =>\n             [true, false].iter().map(|b| ConstantValue(ConstVal::Bool(*b))).collect(),\n-        ty::TySlice(_) =>\n-            (0..pcx.max_slice_length+1).map(|length| Slice(length)).collect(),\n-        ty::TyArray(_, length) => vec![Slice(length)],\n-        ty::TyAdt(def, _) if def.is_enum() && def.variants.len() > 1 =>\n-            def.variants.iter().map(|v| Variant(v.did)).collect(),\n-        _ => vec![Single]\n+        ty::TySlice(ref sub_ty) => {\n+            if sub_ty.is_uninhabited(Some(cx.node), cx.tcx) {\n+                vec![Slice(0)]\n+            } else {\n+                (0..pcx.max_slice_length+1).map(|length| Slice(length)).collect()\n+            }\n+        }\n+        ty::TyArray(ref sub_ty, length) => {\n+            if length == 0 || !sub_ty.is_uninhabited(Some(cx.node), cx.tcx) {\n+                vec![Slice(length)]\n+            } else {\n+                vec![]\n+            }\n+        }\n+        ty::TyAdt(def, substs) if def.is_enum() && def.variants.len() != 1 => {\n+            def.variants.iter().filter_map(|v| {\n+                let mut visited = FxHashSet::default();\n+                if v.is_uninhabited_recurse(&mut visited, Some(cx.node), cx.tcx, substs, false) {\n+                    None\n+                } else {\n+                    Some(Variant(v.did))\n+                }\n+            }).collect()\n+        }\n+        _ => {\n+            if pcx.ty.is_uninhabited(Some(cx.node), cx.tcx) {\n+                vec![]\n+            } else {\n+                vec![Single]\n+            }\n+        }\n     }\n }\n "}, {"sha": "d6187f40b7f3e60fe393f1463016d075f26242f2", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=bcdbe942e108e47ffa712fa44ad9b251c53c105b", "patch": "@@ -25,6 +25,7 @@ use rustc::middle::mem_categorization::{cmt};\n use rustc::session::Session;\n use rustc::traits::Reveal;\n use rustc::ty::{self, TyCtxt};\n+use rustc::lint;\n use rustc_errors::DiagnosticBuilder;\n \n use rustc::hir::def::*;\n@@ -150,7 +151,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n             }\n         }\n \n-        MatchCheckCtxt::create_and_enter(self.tcx, |ref mut cx| {\n+        MatchCheckCtxt::create_and_enter(self.tcx, scrut.id, |ref mut cx| {\n             let mut have_errors = false;\n \n             let inlined_arms : Vec<(Vec<_>, _)> = arms.iter().map(|arm| (\n@@ -210,7 +211,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n             \"local binding\"\n         };\n \n-        MatchCheckCtxt::create_and_enter(self.tcx, |ref mut cx| {\n+        MatchCheckCtxt::create_and_enter(self.tcx, pat.id, |ref mut cx| {\n             let mut patcx = PatternContext::new(self.tcx);\n             let pats : Matrix = vec![vec![\n                 expand_pattern(cx, patcx.lower_pattern(pat))\n@@ -324,14 +325,19 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                         },\n \n                         hir::MatchSource::Normal => {\n-                            let mut err = struct_span_err!(cx.tcx.sess, pat.span, E0001,\n-                                                           \"unreachable pattern\");\n-                            err.span_label(pat.span, &\"this is an unreachable pattern\");\n-                            // if we had a catchall pattern, hint at that\n+                            // if we had a catchall pattern, raise an error.\n+                            // Otherwise an unreachable pattern raises a warning.\n                             if let Some(catchall) = catchall {\n+                                let mut err = struct_span_err!(cx.tcx.sess, pat.span, E0001,\n+                                                               \"unreachable pattern\");\n+                                err.span_label(pat.span, &\"this is an unreachable pattern\");\n                                 err.span_note(catchall, \"this pattern matches any value\");\n+                                err.emit();\n+                            } else {\n+                                cx.tcx.sess.add_lint(lint::builtin::UNREACHABLE_PATTERNS,\n+                                                     hir_pat.id, pat.span,\n+                                                     String::from(\"unreachable pattern\"));\n                             }\n-                            err.emit();\n                         },\n \n                         hir::MatchSource::TryDesugar => {"}, {"sha": "139443a1719c12030f857ed9da7a416b05905348", "filename": "src/librustc_const_eval/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Flibrustc_const_eval%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Flibrustc_const_eval%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fdiagnostics.rs?ref=bcdbe942e108e47ffa712fa44ad9b251c53c105b", "patch": "@@ -28,7 +28,7 @@ For example, the following `match` block has too many arms:\n ```compile_fail,E0001\n match Some(0) {\n     Some(bar) => {/* ... */}\n-    None => {/* ... */}\n+    x => {/* ... */} // This handles the `None` case\n     _ => {/* ... */} // All possible cases have already been handled\n }\n ```"}, {"sha": "efccc4abd43b8f7d3e96d19e01e6d4ee06b85d50", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=bcdbe942e108e47ffa712fa44ad9b251c53c105b", "patch": "@@ -165,6 +165,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     DEAD_CODE,\n                     UNUSED_MUT,\n                     UNREACHABLE_CODE,\n+                    UNREACHABLE_PATTERNS,\n                     UNUSED_MUST_USE,\n                     UNUSED_UNSAFE,\n                     PATH_STATEMENTS,"}, {"sha": "0fa9062df45915adb3fef479310a6907b56ccc69", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=bcdbe942e108e47ffa712fa44ad9b251c53c105b", "patch": "@@ -399,7 +399,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 self.check_pat(&p, discrim_ty);\n                 all_pats_diverge &= self.diverges.get();\n             }\n-            all_pats_diverge\n+            // As discussed with @eddyb, this is for disabling unreachable_code\n+            // warnings on patterns (they're now subsumed by unreachable_patterns\n+            // warnings).\n+            match all_pats_diverge {\n+                Diverges::Maybe => Diverges::Maybe,\n+                Diverges::Always | Diverges::WarnedAlways => Diverges::WarnedAlways,\n+            }\n         }).collect();\n \n         // Now typecheck the blocks."}, {"sha": "b72b0d661901fbf0d9b3a8bbc215628067e49919", "filename": "src/test/compile-fail/E0001.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2FE0001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2FE0001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0001.rs?ref=bcdbe942e108e47ffa712fa44ad9b251c53c105b", "patch": "@@ -8,11 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![deny(unreachable_patterns)]\n+\n fn main() {\n     let foo = Some(1);\n     match foo {\n-        Some(bar) => {/* ... */}\n+        Some(_) => {/* ... */}\n         None => {/* ... */}\n-        _ => {/* ... */} //~ ERROR E0001\n+        _ => {/* ... */} //~ ERROR unreachable pattern\n     }\n }"}, {"sha": "24765cfc2a671742ad375986ba6bccdd494f00a1", "filename": "src/test/compile-fail/issue-12116.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fissue-12116.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fissue-12116.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12116.rs?ref=bcdbe942e108e47ffa712fa44ad9b251c53c105b", "patch": "@@ -20,7 +20,7 @@ fn tail(source_list: &IntList) -> IntList {\n     match source_list {\n         &IntList::Cons(val, box ref next_list) => tail(next_list),\n         &IntList::Cons(val, box Nil)           => IntList::Cons(val, box Nil),\n-//~^ ERROR unreachable pattern\n+//~^ ERROR cannot move out of borrowed content\n //~^^ WARN pattern binding `Nil` is named the same as one of the variants of the type `IntList`\n         _                          => panic!()\n     }"}, {"sha": "4df1e24dcfbd53c05d12653f63e47e5a37dd8b45", "filename": "src/test/compile-fail/issue-12369.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fissue-12369.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fissue-12369.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12369.rs?ref=bcdbe942e108e47ffa712fa44ad9b251c53c105b", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n #![feature(slice_patterns)]\n+#![allow(unused_variables)]\n+#![deny(unreachable_patterns)]\n \n fn main() {\n     let sl = vec![1,2,3];"}, {"sha": "2e815548e89134c7e95e16cc1fe318f0c0fc8df0", "filename": "src/test/compile-fail/issue-13727.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fissue-13727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fissue-13727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13727.rs?ref=bcdbe942e108e47ffa712fa44ad9b251c53c105b", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(overflowing_literals)]\n+#![deny(unreachable_patterns)]\n+\n fn test(val: u8) {\n   match val {\n     256 => print!(\"0b1110\\n\"),"}, {"sha": "cf6935b9ba6d4a34a16f867b3fb0e854bf683e88", "filename": "src/test/compile-fail/issue-30240-b.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fissue-30240-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fissue-30240-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-30240-b.rs?ref=bcdbe942e108e47ffa712fa44ad9b251c53c105b", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(unreachable_patterns)]\n+\n+fn main() {\n+    match \"world\" {\n+        \"hello\" => {}\n+        _ => {},\n+    }\n+\n+    match \"world\" {\n+        ref _x if false => {}\n+        \"hello\" => {}\n+        \"hello\" => {} //~ ERROR unreachable pattern\n+        _ => {},\n+    }\n+}\n+"}, {"sha": "60fb307d4e1a4a141689f3f7d4e7258cd6eed5c8", "filename": "src/test/compile-fail/issue-30240.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fissue-30240.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fissue-30240.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-30240.rs?ref=bcdbe942e108e47ffa712fa44ad9b251c53c105b", "patch": "@@ -16,6 +16,5 @@ fn main() {\n     match \"world\" { //~ ERROR non-exhaustive patterns: `&_`\n         ref _x if false => {}\n         \"hello\" => {}\n-        \"hello\" => {} //~ ERROR unreachable pattern\n     }\n }"}, {"sha": "8cf6725cec454fc1bf7255b1854f47bbfb1d759e", "filename": "src/test/compile-fail/issue-31221.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fissue-31221.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fissue-31221.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-31221.rs?ref=bcdbe942e108e47ffa712fa44ad9b251c53c105b", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![deny(unreachable_patterns)]\n+\n enum Enum {\n     Var1,\n     Var2,\n@@ -41,13 +43,4 @@ fn main() {\n         //~^ ERROR unreachable pattern\n         //~^^ NOTE this is an unreachable pattern\n     };\n-    // `_` need not emit a note, it is pretty obvious already.\n-    let t = (Var1, Var1);\n-    match t {\n-        (Var1, b) => (),\n-        _ => (),\n-        anything => ()\n-        //~^ ERROR unreachable pattern\n-        //~^^ NOTE this is an unreachable pattern\n-    };\n }"}, {"sha": "cc69a76e04331e411c12a9a217946993ae5c7479", "filename": "src/test/compile-fail/issue-3601.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fissue-3601.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fissue-3601.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3601.rs?ref=bcdbe942e108e47ffa712fa44ad9b251c53c105b", "patch": "@@ -40,6 +40,5 @@ fn main() {\n         box NodeKind::Element(ed) => match ed.kind { //~ ERROR non-exhaustive patterns\n             box ElementKind::HTMLImageElement(ref d) if d.image.is_some() => { true }\n         },\n-        _ => panic!(\"WAT\") //~ ERROR unreachable pattern\n     };\n }"}, {"sha": "40dcf3d0f12cc987d82a12b329d3820efe588baf", "filename": "src/test/compile-fail/match-argm-statics-2.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fmatch-argm-statics-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fmatch-argm-statics-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-argm-statics-2.rs?ref=bcdbe942e108e47ffa712fa44ad9b251c53c105b", "patch": "@@ -0,0 +1,71 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use self::Direction::{North, East, South, West};\n+\n+struct NewBool(bool);\n+\n+enum Direction {\n+    North,\n+    East,\n+    South,\n+    West\n+}\n+\n+const TRUE_TRUE: (bool, bool) = (true, true);\n+\n+fn nonexhaustive_1() {\n+    match (true, false) {\n+    //~^ ERROR non-exhaustive patterns: `(true, false)` not covered\n+        TRUE_TRUE => (),\n+        (false, false) => (),\n+        (false, true) => ()\n+    }\n+}\n+\n+const NONE: Option<Direction> = None;\n+const EAST: Direction = East;\n+\n+fn nonexhaustive_2() {\n+    match Some(Some(North)) {\n+    //~^ ERROR non-exhaustive patterns: `Some(Some(West))` not covered\n+        Some(NONE) => (),\n+        Some(Some(North)) => (),\n+        Some(Some(EAST)) => (),\n+        Some(Some(South)) => (),\n+        None => ()\n+    }\n+}\n+\n+const NEW_FALSE: NewBool = NewBool(false);\n+struct Foo {\n+    bar: Option<Direction>,\n+    baz: NewBool\n+}\n+\n+const STATIC_FOO: Foo = Foo { bar: None, baz: NEW_FALSE };\n+\n+fn nonexhaustive_3() {\n+    match (Foo { bar: Some(North), baz: NewBool(true) }) {\n+    //~^ ERROR non-exhaustive patterns: `Foo { bar: Some(North), baz: NewBool(true) }`\n+        Foo { bar: None, baz: NewBool(true) } => (),\n+        Foo { bar: _, baz: NEW_FALSE } => (),\n+        Foo { bar: Some(West), baz: NewBool(true) } => (),\n+        Foo { bar: Some(South), .. } => (),\n+        Foo { bar: Some(EAST), .. } => ()\n+    }\n+}\n+\n+fn main() {\n+    nonexhaustive_1();\n+    nonexhaustive_2();\n+    nonexhaustive_3();\n+}\n+"}, {"sha": "40d73ab51c76228ca9f45ed6b38ad420f003a454", "filename": "src/test/compile-fail/match-arm-statics.rs", "status": "modified", "additions": 6, "deletions": 36, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fmatch-arm-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fmatch-arm-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-arm-statics.rs?ref=bcdbe942e108e47ffa712fa44ad9b251c53c105b", "patch": "@@ -7,10 +7,16 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n+#![allow(dead_code)]\n+#![deny(unreachable_patterns)]\n+\n use self::Direction::{North, East, South, West};\n \n+#[derive(PartialEq, Eq)]\n struct NewBool(bool);\n \n+#[derive(PartialEq, Eq)]\n enum Direction {\n     North,\n     East,\n@@ -20,15 +26,6 @@ enum Direction {\n \n const TRUE_TRUE: (bool, bool) = (true, true);\n \n-fn nonexhaustive_1() {\n-    match (true, false) {\n-    //~^ ERROR non-exhaustive patterns: `(true, false)` not covered\n-        TRUE_TRUE => (),\n-        (false, false) => (),\n-        (false, true) => ()\n-    }\n-}\n-\n fn unreachable_1() {\n     match (true, false) {\n         TRUE_TRUE => (),\n@@ -43,17 +40,6 @@ fn unreachable_1() {\n const NONE: Option<Direction> = None;\n const EAST: Direction = East;\n \n-fn nonexhaustive_2() {\n-    match Some(Some(North)) {\n-    //~^ ERROR non-exhaustive patterns: `Some(Some(West))` not covered\n-        Some(NONE) => (),\n-        Some(Some(North)) => (),\n-        Some(Some(EAST)) => (),\n-        Some(Some(South)) => (),\n-        None => ()\n-    }\n-}\n-\n fn unreachable_2() {\n     match Some(Some(North)) {\n         Some(NONE) => (),\n@@ -73,19 +59,6 @@ struct Foo {\n     baz: NewBool\n }\n \n-const STATIC_FOO: Foo = Foo { bar: None, baz: NEW_FALSE };\n-\n-fn nonexhaustive_3() {\n-    match (Foo { bar: Some(North), baz: NewBool(true) }) {\n-    //~^ ERROR non-exhaustive patterns: `Foo { bar: Some(North), baz: NewBool(true) }`\n-        Foo { bar: None, baz: NewBool(true) } => (),\n-        Foo { bar: _, baz: NEW_FALSE } => (),\n-        Foo { bar: Some(West), baz: NewBool(true) } => (),\n-        Foo { bar: Some(South), .. } => (),\n-        Foo { bar: Some(EAST), .. } => ()\n-    }\n-}\n-\n fn unreachable_3() {\n     match (Foo { bar: Some(EAST), baz: NewBool(true) }) {\n         Foo { bar: None, baz: NewBool(true) } => (),\n@@ -100,9 +73,6 @@ fn unreachable_3() {\n }\n \n fn main() {\n-    nonexhaustive_1();\n-    nonexhaustive_2();\n-    nonexhaustive_3();\n     unreachable_1();\n     unreachable_2();\n     unreachable_3();"}, {"sha": "ad7e931a0ec9723999b7d5ba6fd2d1ea9c9337b3", "filename": "src/test/compile-fail/match-byte-array-patterns-2.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fmatch-byte-array-patterns-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fmatch-byte-array-patterns-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-byte-array-patterns-2.rs?ref=bcdbe942e108e47ffa712fa44ad9b251c53c105b", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(advanced_slice_patterns, slice_patterns)]\n+\n+fn main() {\n+    let buf = &[0, 1, 2, 3];\n+\n+    match buf { //~ ERROR non-exhaustive\n+        b\"AAAA\" => {}\n+    }\n+\n+    let buf: &[u8] = buf;\n+\n+    match buf { //~ ERROR non-exhaustive\n+        b\"AAAA\" => {}\n+    }\n+}\n+"}, {"sha": "1ff07eae1c9c03a654d9cef0f63d7718df1ea873", "filename": "src/test/compile-fail/match-byte-array-patterns.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fmatch-byte-array-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fmatch-byte-array-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-byte-array-patterns.rs?ref=bcdbe942e108e47ffa712fa44ad9b251c53c105b", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(advanced_slice_patterns, slice_patterns)]\n+#![deny(unreachable_patterns)]\n \n fn main() {\n     let buf = &[0, 1, 2, 3];\n@@ -37,10 +38,6 @@ fn main() {\n         _ => {}\n     }\n \n-    match buf { //~ ERROR non-exhaustive\n-        b\"AAAA\" => {}\n-    }\n-\n     let buf: &[u8] = buf;\n \n     match buf {\n@@ -66,8 +63,4 @@ fn main() {\n         b\"AAAA\" => {}, //~ ERROR unreachable pattern\n         _ => {}\n     }\n-\n-    match buf { //~ ERROR non-exhaustive\n-        b\"AAAA\" => {}\n-    }\n }"}, {"sha": "256aa180f4a59e84d1f3b03973ac4fd36468a27e", "filename": "src/test/compile-fail/match-range-fail-dominate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail-dominate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail-dominate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail-dominate.rs?ref=bcdbe942e108e47ffa712fa44ad9b251c53c105b", "patch": "@@ -14,6 +14,8 @@\n //error-pattern: unreachable\n //error-pattern: unreachable\n \n+#![deny(unreachable_patterns)]\n+\n fn main() {\n     match 5 {\n       1 ... 10 => { }"}, {"sha": "1cdbba17f658ad9501169068232e68ce3774af1a", "filename": "src/test/compile-fail/match-ref-ice.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fmatch-ref-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fmatch-ref-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-ref-ice.rs?ref=bcdbe942e108e47ffa712fa44ad9b251c53c105b", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(slice_patterns)]\n+#![deny(unreachable_patterns)]\n \n // The arity of `ref x` is always 1. If the pattern is compared to some non-structural type whose\n // arity is always 0, an ICE occurs.\n@@ -19,7 +20,7 @@ fn main() {\n     let homura = [1, 2, 3];\n \n     match homura {\n-        [1, ref madoka, 3] => (),\n+        [1, ref _madoka, 3] => (),\n         [1, 2, 3] => (), //~ ERROR unreachable pattern\n         [_, _, _] => (),\n     }"}, {"sha": "dd9379c756d12a147d56d9a71c5e1308cb516d91", "filename": "src/test/compile-fail/match-vec-fixed.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fmatch-vec-fixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fmatch-vec-fixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-fixed.rs?ref=bcdbe942e108e47ffa712fa44ad9b251c53c105b", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(slice_patterns)]\n+#![deny(unreachable_patterns)]\n \n fn a() {\n     let v = [1, 2, 3];"}, {"sha": "6b8111ac31307b5d5b2937be7f95a215614d3a6b", "filename": "src/test/compile-fail/match-vec-unreachable.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs?ref=bcdbe942e108e47ffa712fa44ad9b251c53c105b", "patch": "@@ -9,13 +9,14 @@\n // except according to those terms.\n \n #![feature(slice_patterns)]\n+#![deny(unreachable_patterns)]\n \n fn main() {\n     let x: Vec<(isize, isize)> = Vec::new();\n     let x: &[(isize, isize)] = &x;\n     match *x {\n-        [a, (2, 3), _] => (),\n-        [(1, 2), (2, 3), b] => (), //~ ERROR unreachable pattern\n+        [_, (2, 3), _] => (),\n+        [(1, 2), (2, 3), _] => (), //~ ERROR unreachable pattern\n         _ => ()\n     }\n \n@@ -24,7 +25,7 @@ fn main() {\n                               \"baz\".to_string()];\n     let x: &[String] = &x;\n     match *x {\n-        [a, _, _, ..] => { println!(\"{}\", a); }\n+        [ref a, _, _, ..] => { println!(\"{}\", a); }\n         [_, _, _, _, _] => { } //~ ERROR unreachable pattern\n         _ => { }\n     }"}, {"sha": "dda30141b4a06e9f79b9ee5d46f22587d59683b3", "filename": "src/test/compile-fail/struct-pattern-match-useless.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fstruct-pattern-match-useless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Fstruct-pattern-match-useless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-pattern-match-useless.rs?ref=bcdbe942e108e47ffa712fa44ad9b251c53c105b", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![deny(unreachable_patterns)]\n+\n struct Foo {\n     x: isize,\n     y: isize,\n@@ -16,7 +18,7 @@ struct Foo {\n pub fn main() {\n     let a = Foo { x: 1, y: 2 };\n     match a {\n-        Foo { x: x, y: y } => (),\n+        Foo { x: _x, y: _y } => (),\n         Foo { .. } => () //~ ERROR unreachable pattern\n     }\n "}, {"sha": "461f092b98b5483fa55671076aeee44cacb2d32e", "filename": "src/test/compile-fail/unreachable-arm.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdbe942e108e47ffa712fa44ad9b251c53c105b/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs?ref=bcdbe942e108e47ffa712fa44ad9b251c53c105b", "patch": "@@ -12,7 +12,16 @@\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![allow(dead_code)]\n+#![deny(unreachable_patterns)]\n \n-enum foo { a(Box<foo>, isize), b(usize), }\n+enum Foo { A(Box<Foo>, isize), B(usize), }\n+\n+fn main() {\n+    match Foo::B(1) {\n+        Foo::B(_) | Foo::A(box _, 1) => { }\n+        Foo::A(_, 1) => { }\n+        _ => { }\n+    }\n+}\n \n-fn main() { match foo::b(1) { foo::b(_) | foo::a(box _, 1) => { } foo::a(_, 1) => { } } }"}]}