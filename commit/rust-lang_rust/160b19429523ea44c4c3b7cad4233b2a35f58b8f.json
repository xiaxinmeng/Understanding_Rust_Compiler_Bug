{"sha": "160b19429523ea44c4c3b7cad4233b2a35f58b8f", "node_id": "C_kwDOAAsO6NoAKDE2MGIxOTQyOTUyM2VhNDRjNGMzYjdjYWQ0MjMzYjJhMzVmNThiOGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-03T09:24:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-03T09:24:28Z"}, "message": "Auto merge of #103904 - JakobDegen:mir-opt-dash, r=oli-obk\n\nBan dashes in miropt test file names\n\nDashes in miropt test file names are annoying - specifically, they cause the test files to not be sorted next to their outputs, which makes it very difficult to tell what goes with what. This PR changes all files to use underscores and adds a blessable tidy check that enforces this.\n\nr? `@jyn514`\n\nThis PR is obviously going to bitrot very quickly. Because of this, I'm going to wait at least 48 hours and until review comes back to allow people from `@rust-lang/wg-mir-opt` or elsewhere to lodge complaints if there are any. If not, I'll rebase the branch on Friday afternoon PST and ask that it be `r+`'d with `p=1` at that time.", "tree": {"sha": "d2ced8fa2ec0876082d04f976bc27c8e7511af60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2ced8fa2ec0876082d04f976bc27c8e7511af60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/160b19429523ea44c4c3b7cad4233b2a35f58b8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/160b19429523ea44c4c3b7cad4233b2a35f58b8f", "html_url": "https://github.com/rust-lang/rust/commit/160b19429523ea44c4c3b7cad4233b2a35f58b8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/160b19429523ea44c4c3b7cad4233b2a35f58b8f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "432b1a427710223b31f65585c352796832af8aa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/432b1a427710223b31f65585c352796832af8aa7", "html_url": "https://github.com/rust-lang/rust/commit/432b1a427710223b31f65585c352796832af8aa7"}, {"sha": "0bd4f76944703dc8e8af26c8e55d3db9488689f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bd4f76944703dc8e8af26c8e55d3db9488689f9", "html_url": "https://github.com/rust-lang/rust/commit/0bd4f76944703dc8e8af26c8e55d3db9488689f9"}], "stats": {"total": 6561, "additions": 3299, "deletions": 3262}, "files": [{"sha": "935ce5e7f84b3f154e9feec282b3b65937d6d284", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1052,6 +1052,9 @@ impl Step for Tidy {\n         if builder.is_verbose() {\n             cmd.arg(\"--verbose\");\n         }\n+        if builder.config.cmd.bless() {\n+            cmd.arg(\"--bless\");\n+        }\n \n         builder.info(\"tidy check\");\n         try_run(builder, &mut cmd);"}, {"sha": "5f8b2f9312b757772a1488874558223b0e0a9100", "filename": "src/test/mir-opt/address_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 271, "deletions": 271, "changes": 542, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,115 +1,115 @@\n // MIR for `address_of_reborrow` after SimplifyCfg-initial\n \n | User Type Annotations\n-| 0: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) }, span: $DIR/address-of.rs:7:5: 7:18, inferred_ty: *const [i32; 10]\n-| 1: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) }, span: $DIR/address-of.rs:9:5: 9:25, inferred_ty: *const dyn std::marker::Send\n-| 2: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) }, span: $DIR/address-of.rs:13:12: 13:20, inferred_ty: *const [i32; 10]\n-| 3: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) }, span: $DIR/address-of.rs:13:12: 13:20, inferred_ty: *const [i32; 10]\n-| 4: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32; 10]) }, span: $DIR/address-of.rs:14:12: 14:28, inferred_ty: *const [i32; 10]\n-| 5: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32; 10]) }, span: $DIR/address-of.rs:14:12: 14:28, inferred_ty: *const [i32; 10]\n-| 6: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) }, span: $DIR/address-of.rs:15:12: 15:27, inferred_ty: *const dyn std::marker::Send\n-| 7: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) }, span: $DIR/address-of.rs:15:12: 15:27, inferred_ty: *const dyn std::marker::Send\n-| 8: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) }, span: $DIR/address-of.rs:16:12: 16:24, inferred_ty: *const [i32]\n-| 9: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) }, span: $DIR/address-of.rs:16:12: 16:24, inferred_ty: *const [i32]\n-| 10: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) }, span: $DIR/address-of.rs:18:5: 18:18, inferred_ty: *const [i32; 10]\n-| 11: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) }, span: $DIR/address-of.rs:20:5: 20:25, inferred_ty: *const dyn std::marker::Send\n-| 12: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) }, span: $DIR/address-of.rs:23:12: 23:20, inferred_ty: *const [i32; 10]\n-| 13: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) }, span: $DIR/address-of.rs:23:12: 23:20, inferred_ty: *const [i32; 10]\n-| 14: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32; 10]) }, span: $DIR/address-of.rs:24:12: 24:28, inferred_ty: *const [i32; 10]\n-| 15: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32; 10]) }, span: $DIR/address-of.rs:24:12: 24:28, inferred_ty: *const [i32; 10]\n-| 16: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) }, span: $DIR/address-of.rs:25:12: 25:27, inferred_ty: *const dyn std::marker::Send\n-| 17: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) }, span: $DIR/address-of.rs:25:12: 25:27, inferred_ty: *const dyn std::marker::Send\n-| 18: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) }, span: $DIR/address-of.rs:26:12: 26:24, inferred_ty: *const [i32]\n-| 19: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) }, span: $DIR/address-of.rs:26:12: 26:24, inferred_ty: *const [i32]\n-| 20: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*mut ^0) }, span: $DIR/address-of.rs:28:5: 28:16, inferred_ty: *mut [i32; 10]\n-| 21: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*mut dyn std::marker::Send) }, span: $DIR/address-of.rs:30:5: 30:23, inferred_ty: *mut dyn std::marker::Send\n-| 22: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*mut ^0) }, span: $DIR/address-of.rs:33:12: 33:18, inferred_ty: *mut [i32; 10]\n-| 23: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*mut ^0) }, span: $DIR/address-of.rs:33:12: 33:18, inferred_ty: *mut [i32; 10]\n-| 24: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut [i32; 10]) }, span: $DIR/address-of.rs:34:12: 34:26, inferred_ty: *mut [i32; 10]\n-| 25: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut [i32; 10]) }, span: $DIR/address-of.rs:34:12: 34:26, inferred_ty: *mut [i32; 10]\n-| 26: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*mut dyn std::marker::Send) }, span: $DIR/address-of.rs:35:12: 35:25, inferred_ty: *mut dyn std::marker::Send\n-| 27: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*mut dyn std::marker::Send) }, span: $DIR/address-of.rs:35:12: 35:25, inferred_ty: *mut dyn std::marker::Send\n-| 28: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut [i32]) }, span: $DIR/address-of.rs:36:12: 36:22, inferred_ty: *mut [i32]\n-| 29: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut [i32]) }, span: $DIR/address-of.rs:36:12: 36:22, inferred_ty: *mut [i32]\n+| 0: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) }, span: $DIR/address_of.rs:7:5: 7:18, inferred_ty: *const [i32; 10]\n+| 1: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) }, span: $DIR/address_of.rs:9:5: 9:25, inferred_ty: *const dyn std::marker::Send\n+| 2: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) }, span: $DIR/address_of.rs:13:12: 13:20, inferred_ty: *const [i32; 10]\n+| 3: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) }, span: $DIR/address_of.rs:13:12: 13:20, inferred_ty: *const [i32; 10]\n+| 4: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32; 10]) }, span: $DIR/address_of.rs:14:12: 14:28, inferred_ty: *const [i32; 10]\n+| 5: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32; 10]) }, span: $DIR/address_of.rs:14:12: 14:28, inferred_ty: *const [i32; 10]\n+| 6: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) }, span: $DIR/address_of.rs:15:12: 15:27, inferred_ty: *const dyn std::marker::Send\n+| 7: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) }, span: $DIR/address_of.rs:15:12: 15:27, inferred_ty: *const dyn std::marker::Send\n+| 8: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) }, span: $DIR/address_of.rs:16:12: 16:24, inferred_ty: *const [i32]\n+| 9: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) }, span: $DIR/address_of.rs:16:12: 16:24, inferred_ty: *const [i32]\n+| 10: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) }, span: $DIR/address_of.rs:18:5: 18:18, inferred_ty: *const [i32; 10]\n+| 11: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) }, span: $DIR/address_of.rs:20:5: 20:25, inferred_ty: *const dyn std::marker::Send\n+| 12: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) }, span: $DIR/address_of.rs:23:12: 23:20, inferred_ty: *const [i32; 10]\n+| 13: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) }, span: $DIR/address_of.rs:23:12: 23:20, inferred_ty: *const [i32; 10]\n+| 14: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32; 10]) }, span: $DIR/address_of.rs:24:12: 24:28, inferred_ty: *const [i32; 10]\n+| 15: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32; 10]) }, span: $DIR/address_of.rs:24:12: 24:28, inferred_ty: *const [i32; 10]\n+| 16: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) }, span: $DIR/address_of.rs:25:12: 25:27, inferred_ty: *const dyn std::marker::Send\n+| 17: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) }, span: $DIR/address_of.rs:25:12: 25:27, inferred_ty: *const dyn std::marker::Send\n+| 18: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) }, span: $DIR/address_of.rs:26:12: 26:24, inferred_ty: *const [i32]\n+| 19: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) }, span: $DIR/address_of.rs:26:12: 26:24, inferred_ty: *const [i32]\n+| 20: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*mut ^0) }, span: $DIR/address_of.rs:28:5: 28:16, inferred_ty: *mut [i32; 10]\n+| 21: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*mut dyn std::marker::Send) }, span: $DIR/address_of.rs:30:5: 30:23, inferred_ty: *mut dyn std::marker::Send\n+| 22: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*mut ^0) }, span: $DIR/address_of.rs:33:12: 33:18, inferred_ty: *mut [i32; 10]\n+| 23: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*mut ^0) }, span: $DIR/address_of.rs:33:12: 33:18, inferred_ty: *mut [i32; 10]\n+| 24: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut [i32; 10]) }, span: $DIR/address_of.rs:34:12: 34:26, inferred_ty: *mut [i32; 10]\n+| 25: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut [i32; 10]) }, span: $DIR/address_of.rs:34:12: 34:26, inferred_ty: *mut [i32; 10]\n+| 26: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*mut dyn std::marker::Send) }, span: $DIR/address_of.rs:35:12: 35:25, inferred_ty: *mut dyn std::marker::Send\n+| 27: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*mut dyn std::marker::Send) }, span: $DIR/address_of.rs:35:12: 35:25, inferred_ty: *mut dyn std::marker::Send\n+| 28: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut [i32]) }, span: $DIR/address_of.rs:36:12: 36:22, inferred_ty: *mut [i32]\n+| 29: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut [i32]) }, span: $DIR/address_of.rs:36:12: 36:22, inferred_ty: *mut [i32]\n |\n fn address_of_reborrow() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/address-of.rs:+0:26: +0:26\n-    let _1: &[i32; 10];                  // in scope 0 at $DIR/address-of.rs:+1:9: +1:10\n-    let _2: [i32; 10];                   // in scope 0 at $DIR/address-of.rs:+1:14: +1:21\n-    let mut _4: [i32; 10];               // in scope 0 at $DIR/address-of.rs:+2:22: +2:29\n-    let _5: *const [i32; 10];            // in scope 0 at $DIR/address-of.rs:+4:5: +4:18\n-    let mut _6: *const [i32; 10];        // in scope 0 at $DIR/address-of.rs:+4:5: +4:18\n-    let _7: *const [i32; 10];            // in scope 0 at $DIR/address-of.rs:+5:5: +5:26\n-    let _8: *const dyn std::marker::Send; // in scope 0 at $DIR/address-of.rs:+6:5: +6:25\n-    let mut _9: *const dyn std::marker::Send; // in scope 0 at $DIR/address-of.rs:+6:5: +6:25\n-    let mut _10: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:+6:5: +6:6\n-    let _11: *const [i32];               // in scope 0 at $DIR/address-of.rs:+7:5: +7:22\n-    let mut _12: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:+7:5: +7:6\n-    let _13: *const i32;                 // in scope 0 at $DIR/address-of.rs:+8:5: +8:20\n-    let mut _14: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:+8:5: +8:6\n-    let mut _18: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:+12:30: +12:31\n-    let mut _20: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:+13:27: +13:28\n-    let _21: *const [i32; 10];           // in scope 0 at $DIR/address-of.rs:+15:5: +15:18\n-    let mut _22: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:+15:5: +15:18\n-    let _23: *const [i32; 10];           // in scope 0 at $DIR/address-of.rs:+16:5: +16:26\n-    let _24: *const dyn std::marker::Send; // in scope 0 at $DIR/address-of.rs:+17:5: +17:25\n-    let mut _25: *const dyn std::marker::Send; // in scope 0 at $DIR/address-of.rs:+17:5: +17:25\n-    let mut _26: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:+17:5: +17:6\n-    let _27: *const [i32];               // in scope 0 at $DIR/address-of.rs:+18:5: +18:22\n-    let mut _28: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:+18:5: +18:6\n-    let mut _32: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:+22:30: +22:31\n-    let mut _34: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:+23:27: +23:28\n-    let _35: *mut [i32; 10];             // in scope 0 at $DIR/address-of.rs:+25:5: +25:16\n-    let mut _36: *mut [i32; 10];         // in scope 0 at $DIR/address-of.rs:+25:5: +25:16\n-    let _37: *mut [i32; 10];             // in scope 0 at $DIR/address-of.rs:+26:5: +26:24\n-    let _38: *mut dyn std::marker::Send; // in scope 0 at $DIR/address-of.rs:+27:5: +27:23\n-    let mut _39: *mut dyn std::marker::Send; // in scope 0 at $DIR/address-of.rs:+27:5: +27:23\n-    let mut _40: *mut [i32; 10];         // in scope 0 at $DIR/address-of.rs:+27:5: +27:6\n-    let _41: *mut [i32];                 // in scope 0 at $DIR/address-of.rs:+28:5: +28:20\n-    let mut _42: *mut [i32; 10];         // in scope 0 at $DIR/address-of.rs:+28:5: +28:6\n-    let mut _46: *mut [i32; 10];         // in scope 0 at $DIR/address-of.rs:+32:28: +32:29\n-    let mut _48: *mut [i32; 10];         // in scope 0 at $DIR/address-of.rs:+33:25: +33:26\n+    let mut _0: ();                      // return place in scope 0 at $DIR/address_of.rs:+0:26: +0:26\n+    let _1: &[i32; 10];                  // in scope 0 at $DIR/address_of.rs:+1:9: +1:10\n+    let _2: [i32; 10];                   // in scope 0 at $DIR/address_of.rs:+1:14: +1:21\n+    let mut _4: [i32; 10];               // in scope 0 at $DIR/address_of.rs:+2:22: +2:29\n+    let _5: *const [i32; 10];            // in scope 0 at $DIR/address_of.rs:+4:5: +4:18\n+    let mut _6: *const [i32; 10];        // in scope 0 at $DIR/address_of.rs:+4:5: +4:18\n+    let _7: *const [i32; 10];            // in scope 0 at $DIR/address_of.rs:+5:5: +5:26\n+    let _8: *const dyn std::marker::Send; // in scope 0 at $DIR/address_of.rs:+6:5: +6:25\n+    let mut _9: *const dyn std::marker::Send; // in scope 0 at $DIR/address_of.rs:+6:5: +6:25\n+    let mut _10: *const [i32; 10];       // in scope 0 at $DIR/address_of.rs:+6:5: +6:6\n+    let _11: *const [i32];               // in scope 0 at $DIR/address_of.rs:+7:5: +7:22\n+    let mut _12: *const [i32; 10];       // in scope 0 at $DIR/address_of.rs:+7:5: +7:6\n+    let _13: *const i32;                 // in scope 0 at $DIR/address_of.rs:+8:5: +8:20\n+    let mut _14: *const [i32; 10];       // in scope 0 at $DIR/address_of.rs:+8:5: +8:6\n+    let mut _18: *const [i32; 10];       // in scope 0 at $DIR/address_of.rs:+12:30: +12:31\n+    let mut _20: *const [i32; 10];       // in scope 0 at $DIR/address_of.rs:+13:27: +13:28\n+    let _21: *const [i32; 10];           // in scope 0 at $DIR/address_of.rs:+15:5: +15:18\n+    let mut _22: *const [i32; 10];       // in scope 0 at $DIR/address_of.rs:+15:5: +15:18\n+    let _23: *const [i32; 10];           // in scope 0 at $DIR/address_of.rs:+16:5: +16:26\n+    let _24: *const dyn std::marker::Send; // in scope 0 at $DIR/address_of.rs:+17:5: +17:25\n+    let mut _25: *const dyn std::marker::Send; // in scope 0 at $DIR/address_of.rs:+17:5: +17:25\n+    let mut _26: *const [i32; 10];       // in scope 0 at $DIR/address_of.rs:+17:5: +17:6\n+    let _27: *const [i32];               // in scope 0 at $DIR/address_of.rs:+18:5: +18:22\n+    let mut _28: *const [i32; 10];       // in scope 0 at $DIR/address_of.rs:+18:5: +18:6\n+    let mut _32: *const [i32; 10];       // in scope 0 at $DIR/address_of.rs:+22:30: +22:31\n+    let mut _34: *const [i32; 10];       // in scope 0 at $DIR/address_of.rs:+23:27: +23:28\n+    let _35: *mut [i32; 10];             // in scope 0 at $DIR/address_of.rs:+25:5: +25:16\n+    let mut _36: *mut [i32; 10];         // in scope 0 at $DIR/address_of.rs:+25:5: +25:16\n+    let _37: *mut [i32; 10];             // in scope 0 at $DIR/address_of.rs:+26:5: +26:24\n+    let _38: *mut dyn std::marker::Send; // in scope 0 at $DIR/address_of.rs:+27:5: +27:23\n+    let mut _39: *mut dyn std::marker::Send; // in scope 0 at $DIR/address_of.rs:+27:5: +27:23\n+    let mut _40: *mut [i32; 10];         // in scope 0 at $DIR/address_of.rs:+27:5: +27:6\n+    let _41: *mut [i32];                 // in scope 0 at $DIR/address_of.rs:+28:5: +28:20\n+    let mut _42: *mut [i32; 10];         // in scope 0 at $DIR/address_of.rs:+28:5: +28:6\n+    let mut _46: *mut [i32; 10];         // in scope 0 at $DIR/address_of.rs:+32:28: +32:29\n+    let mut _48: *mut [i32; 10];         // in scope 0 at $DIR/address_of.rs:+33:25: +33:26\n     scope 1 {\n-        debug y => _1;                   // in scope 1 at $DIR/address-of.rs:+1:9: +1:10\n-        let mut _3: &mut [i32; 10];      // in scope 1 at $DIR/address-of.rs:+2:9: +2:14\n+        debug y => _1;                   // in scope 1 at $DIR/address_of.rs:+1:9: +1:10\n+        let mut _3: &mut [i32; 10];      // in scope 1 at $DIR/address_of.rs:+2:9: +2:14\n         scope 2 {\n-            debug z => _3;               // in scope 2 at $DIR/address-of.rs:+2:9: +2:14\n-            let _15: *const [i32; 10] as UserTypeProjection { base: UserType(2), projs: [] }; // in scope 2 at $DIR/address-of.rs:+10:9: +10:10\n+            debug z => _3;               // in scope 2 at $DIR/address_of.rs:+2:9: +2:14\n+            let _15: *const [i32; 10] as UserTypeProjection { base: UserType(2), projs: [] }; // in scope 2 at $DIR/address_of.rs:+10:9: +10:10\n             scope 3 {\n-                debug p => _15;          // in scope 3 at $DIR/address-of.rs:+10:9: +10:10\n-                let _16: *const [i32; 10] as UserTypeProjection { base: UserType(4), projs: [] }; // in scope 3 at $DIR/address-of.rs:+11:9: +11:10\n+                debug p => _15;          // in scope 3 at $DIR/address_of.rs:+10:9: +10:10\n+                let _16: *const [i32; 10] as UserTypeProjection { base: UserType(4), projs: [] }; // in scope 3 at $DIR/address_of.rs:+11:9: +11:10\n                 scope 4 {\n-                    debug p => _16;      // in scope 4 at $DIR/address-of.rs:+11:9: +11:10\n-                    let _17: *const dyn std::marker::Send as UserTypeProjection { base: UserType(6), projs: [] }; // in scope 4 at $DIR/address-of.rs:+12:9: +12:10\n+                    debug p => _16;      // in scope 4 at $DIR/address_of.rs:+11:9: +11:10\n+                    let _17: *const dyn std::marker::Send as UserTypeProjection { base: UserType(6), projs: [] }; // in scope 4 at $DIR/address_of.rs:+12:9: +12:10\n                     scope 5 {\n-                        debug p => _17;  // in scope 5 at $DIR/address-of.rs:+12:9: +12:10\n-                        let _19: *const [i32] as UserTypeProjection { base: UserType(8), projs: [] }; // in scope 5 at $DIR/address-of.rs:+13:9: +13:10\n+                        debug p => _17;  // in scope 5 at $DIR/address_of.rs:+12:9: +12:10\n+                        let _19: *const [i32] as UserTypeProjection { base: UserType(8), projs: [] }; // in scope 5 at $DIR/address_of.rs:+13:9: +13:10\n                         scope 6 {\n-                            debug p => _19; // in scope 6 at $DIR/address-of.rs:+13:9: +13:10\n-                            let _29: *const [i32; 10] as UserTypeProjection { base: UserType(12), projs: [] }; // in scope 6 at $DIR/address-of.rs:+20:9: +20:10\n+                            debug p => _19; // in scope 6 at $DIR/address_of.rs:+13:9: +13:10\n+                            let _29: *const [i32; 10] as UserTypeProjection { base: UserType(12), projs: [] }; // in scope 6 at $DIR/address_of.rs:+20:9: +20:10\n                             scope 7 {\n-                                debug p => _29; // in scope 7 at $DIR/address-of.rs:+20:9: +20:10\n-                                let _30: *const [i32; 10] as UserTypeProjection { base: UserType(14), projs: [] }; // in scope 7 at $DIR/address-of.rs:+21:9: +21:10\n+                                debug p => _29; // in scope 7 at $DIR/address_of.rs:+20:9: +20:10\n+                                let _30: *const [i32; 10] as UserTypeProjection { base: UserType(14), projs: [] }; // in scope 7 at $DIR/address_of.rs:+21:9: +21:10\n                                 scope 8 {\n-                                    debug p => _30; // in scope 8 at $DIR/address-of.rs:+21:9: +21:10\n-                                    let _31: *const dyn std::marker::Send as UserTypeProjection { base: UserType(16), projs: [] }; // in scope 8 at $DIR/address-of.rs:+22:9: +22:10\n+                                    debug p => _30; // in scope 8 at $DIR/address_of.rs:+21:9: +21:10\n+                                    let _31: *const dyn std::marker::Send as UserTypeProjection { base: UserType(16), projs: [] }; // in scope 8 at $DIR/address_of.rs:+22:9: +22:10\n                                     scope 9 {\n-                                        debug p => _31; // in scope 9 at $DIR/address-of.rs:+22:9: +22:10\n-                                        let _33: *const [i32] as UserTypeProjection { base: UserType(18), projs: [] }; // in scope 9 at $DIR/address-of.rs:+23:9: +23:10\n+                                        debug p => _31; // in scope 9 at $DIR/address_of.rs:+22:9: +22:10\n+                                        let _33: *const [i32] as UserTypeProjection { base: UserType(18), projs: [] }; // in scope 9 at $DIR/address_of.rs:+23:9: +23:10\n                                         scope 10 {\n-                                            debug p => _33; // in scope 10 at $DIR/address-of.rs:+23:9: +23:10\n-                                            let _43: *mut [i32; 10] as UserTypeProjection { base: UserType(22), projs: [] }; // in scope 10 at $DIR/address-of.rs:+30:9: +30:10\n+                                            debug p => _33; // in scope 10 at $DIR/address_of.rs:+23:9: +23:10\n+                                            let _43: *mut [i32; 10] as UserTypeProjection { base: UserType(22), projs: [] }; // in scope 10 at $DIR/address_of.rs:+30:9: +30:10\n                                             scope 11 {\n-                                                debug p => _43; // in scope 11 at $DIR/address-of.rs:+30:9: +30:10\n-                                                let _44: *mut [i32; 10] as UserTypeProjection { base: UserType(24), projs: [] }; // in scope 11 at $DIR/address-of.rs:+31:9: +31:10\n+                                                debug p => _43; // in scope 11 at $DIR/address_of.rs:+30:9: +30:10\n+                                                let _44: *mut [i32; 10] as UserTypeProjection { base: UserType(24), projs: [] }; // in scope 11 at $DIR/address_of.rs:+31:9: +31:10\n                                                 scope 12 {\n-                                                    debug p => _44; // in scope 12 at $DIR/address-of.rs:+31:9: +31:10\n-                                                    let _45: *mut dyn std::marker::Send as UserTypeProjection { base: UserType(26), projs: [] }; // in scope 12 at $DIR/address-of.rs:+32:9: +32:10\n+                                                    debug p => _44; // in scope 12 at $DIR/address_of.rs:+31:9: +31:10\n+                                                    let _45: *mut dyn std::marker::Send as UserTypeProjection { base: UserType(26), projs: [] }; // in scope 12 at $DIR/address_of.rs:+32:9: +32:10\n                                                     scope 13 {\n-                                                        debug p => _45; // in scope 13 at $DIR/address-of.rs:+32:9: +32:10\n-                                                        let _47: *mut [i32] as UserTypeProjection { base: UserType(28), projs: [] }; // in scope 13 at $DIR/address-of.rs:+33:9: +33:10\n+                                                        debug p => _45; // in scope 13 at $DIR/address_of.rs:+32:9: +32:10\n+                                                        let _47: *mut [i32] as UserTypeProjection { base: UserType(28), projs: [] }; // in scope 13 at $DIR/address_of.rs:+33:9: +33:10\n                                                         scope 14 {\n-                                                            debug p => _47; // in scope 14 at $DIR/address-of.rs:+33:9: +33:10\n+                                                            debug p => _47; // in scope 14 at $DIR/address_of.rs:+33:9: +33:10\n                                                         }\n                                                     }\n                                                 }\n@@ -126,183 +126,183 @@ fn address_of_reborrow() -> () {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/address-of.rs:+1:9: +1:10\n-        StorageLive(_2);                 // scope 0 at $DIR/address-of.rs:+1:14: +1:21\n-        _2 = [const 0_i32; 10];          // scope 0 at $DIR/address-of.rs:+1:14: +1:21\n-        _1 = &_2;                        // scope 0 at $DIR/address-of.rs:+1:13: +1:21\n-        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/address-of.rs:+1:9: +1:10\n-        StorageLive(_3);                 // scope 1 at $DIR/address-of.rs:+2:9: +2:14\n-        StorageLive(_4);                 // scope 1 at $DIR/address-of.rs:+2:22: +2:29\n-        _4 = [const 0_i32; 10];          // scope 1 at $DIR/address-of.rs:+2:22: +2:29\n-        _3 = &mut _4;                    // scope 1 at $DIR/address-of.rs:+2:17: +2:29\n-        FakeRead(ForLet(None), _3);      // scope 1 at $DIR/address-of.rs:+2:9: +2:14\n-        StorageLive(_5);                 // scope 2 at $DIR/address-of.rs:+4:5: +4:18\n-        StorageLive(_6);                 // scope 2 at $DIR/address-of.rs:+4:5: +4:18\n-        _6 = &raw const (*_1);           // scope 2 at $DIR/address-of.rs:+4:5: +4:6\n-        AscribeUserType(_6, o, UserTypeProjection { base: UserType(0), projs: [] }); // scope 2 at $DIR/address-of.rs:+4:5: +4:18\n-        _5 = _6;                         // scope 2 at $DIR/address-of.rs:+4:5: +4:18\n-        StorageDead(_6);                 // scope 2 at $DIR/address-of.rs:+4:18: +4:19\n-        StorageDead(_5);                 // scope 2 at $DIR/address-of.rs:+4:18: +4:19\n-        StorageLive(_7);                 // scope 2 at $DIR/address-of.rs:+5:5: +5:26\n-        _7 = &raw const (*_1);           // scope 2 at $DIR/address-of.rs:+5:5: +5:6\n-        StorageDead(_7);                 // scope 2 at $DIR/address-of.rs:+5:26: +5:27\n-        StorageLive(_8);                 // scope 2 at $DIR/address-of.rs:+6:5: +6:25\n-        StorageLive(_9);                 // scope 2 at $DIR/address-of.rs:+6:5: +6:25\n-        StorageLive(_10);                // scope 2 at $DIR/address-of.rs:+6:5: +6:6\n-        _10 = &raw const (*_1);          // scope 2 at $DIR/address-of.rs:+6:5: +6:6\n-        _9 = move _10 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 2 at $DIR/address-of.rs:+6:5: +6:6\n-        StorageDead(_10);                // scope 2 at $DIR/address-of.rs:+6:5: +6:6\n-        AscribeUserType(_9, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 2 at $DIR/address-of.rs:+6:5: +6:25\n-        _8 = _9;                         // scope 2 at $DIR/address-of.rs:+6:5: +6:25\n-        StorageDead(_9);                 // scope 2 at $DIR/address-of.rs:+6:25: +6:26\n-        StorageDead(_8);                 // scope 2 at $DIR/address-of.rs:+6:25: +6:26\n-        StorageLive(_11);                // scope 2 at $DIR/address-of.rs:+7:5: +7:22\n-        StorageLive(_12);                // scope 2 at $DIR/address-of.rs:+7:5: +7:6\n-        _12 = &raw const (*_1);          // scope 2 at $DIR/address-of.rs:+7:5: +7:6\n-        _11 = move _12 as *const [i32] (Pointer(Unsize)); // scope 2 at $DIR/address-of.rs:+7:5: +7:6\n-        StorageDead(_12);                // scope 2 at $DIR/address-of.rs:+7:5: +7:6\n-        StorageDead(_11);                // scope 2 at $DIR/address-of.rs:+7:22: +7:23\n-        StorageLive(_13);                // scope 2 at $DIR/address-of.rs:+8:5: +8:20\n-        StorageLive(_14);                // scope 2 at $DIR/address-of.rs:+8:5: +8:6\n-        _14 = &raw const (*_1);          // scope 2 at $DIR/address-of.rs:+8:5: +8:6\n-        _13 = move _14 as *const i32 (Pointer(ArrayToPointer)); // scope 2 at $DIR/address-of.rs:+8:5: +8:20\n-        StorageDead(_14);                // scope 2 at $DIR/address-of.rs:+8:19: +8:20\n-        StorageDead(_13);                // scope 2 at $DIR/address-of.rs:+8:20: +8:21\n-        StorageLive(_15);                // scope 2 at $DIR/address-of.rs:+10:9: +10:10\n-        _15 = &raw const (*_1);          // scope 2 at $DIR/address-of.rs:+10:23: +10:24\n-        FakeRead(ForLet(None), _15);     // scope 2 at $DIR/address-of.rs:+10:9: +10:10\n-        AscribeUserType(_15, o, UserTypeProjection { base: UserType(3), projs: [] }); // scope 2 at $DIR/address-of.rs:+10:12: +10:20\n-        StorageLive(_16);                // scope 3 at $DIR/address-of.rs:+11:9: +11:10\n-        _16 = &raw const (*_1);          // scope 3 at $DIR/address-of.rs:+11:31: +11:32\n-        FakeRead(ForLet(None), _16);     // scope 3 at $DIR/address-of.rs:+11:9: +11:10\n-        AscribeUserType(_16, o, UserTypeProjection { base: UserType(5), projs: [] }); // scope 3 at $DIR/address-of.rs:+11:12: +11:28\n-        StorageLive(_17);                // scope 4 at $DIR/address-of.rs:+12:9: +12:10\n-        StorageLive(_18);                // scope 4 at $DIR/address-of.rs:+12:30: +12:31\n-        _18 = &raw const (*_1);          // scope 4 at $DIR/address-of.rs:+12:30: +12:31\n-        _17 = move _18 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 4 at $DIR/address-of.rs:+12:30: +12:31\n-        StorageDead(_18);                // scope 4 at $DIR/address-of.rs:+12:30: +12:31\n-        FakeRead(ForLet(None), _17);     // scope 4 at $DIR/address-of.rs:+12:9: +12:10\n-        AscribeUserType(_17, o, UserTypeProjection { base: UserType(7), projs: [] }); // scope 4 at $DIR/address-of.rs:+12:12: +12:27\n-        StorageLive(_19);                // scope 5 at $DIR/address-of.rs:+13:9: +13:10\n-        StorageLive(_20);                // scope 5 at $DIR/address-of.rs:+13:27: +13:28\n-        _20 = &raw const (*_1);          // scope 5 at $DIR/address-of.rs:+13:27: +13:28\n-        _19 = move _20 as *const [i32] (Pointer(Unsize)); // scope 5 at $DIR/address-of.rs:+13:27: +13:28\n-        StorageDead(_20);                // scope 5 at $DIR/address-of.rs:+13:27: +13:28\n-        FakeRead(ForLet(None), _19);     // scope 5 at $DIR/address-of.rs:+13:9: +13:10\n-        AscribeUserType(_19, o, UserTypeProjection { base: UserType(9), projs: [] }); // scope 5 at $DIR/address-of.rs:+13:12: +13:24\n-        StorageLive(_21);                // scope 6 at $DIR/address-of.rs:+15:5: +15:18\n-        StorageLive(_22);                // scope 6 at $DIR/address-of.rs:+15:5: +15:18\n-        _22 = &raw const (*_3);          // scope 6 at $DIR/address-of.rs:+15:5: +15:6\n-        AscribeUserType(_22, o, UserTypeProjection { base: UserType(10), projs: [] }); // scope 6 at $DIR/address-of.rs:+15:5: +15:18\n-        _21 = _22;                       // scope 6 at $DIR/address-of.rs:+15:5: +15:18\n-        StorageDead(_22);                // scope 6 at $DIR/address-of.rs:+15:18: +15:19\n-        StorageDead(_21);                // scope 6 at $DIR/address-of.rs:+15:18: +15:19\n-        StorageLive(_23);                // scope 6 at $DIR/address-of.rs:+16:5: +16:26\n-        _23 = &raw const (*_3);          // scope 6 at $DIR/address-of.rs:+16:5: +16:6\n-        StorageDead(_23);                // scope 6 at $DIR/address-of.rs:+16:26: +16:27\n-        StorageLive(_24);                // scope 6 at $DIR/address-of.rs:+17:5: +17:25\n-        StorageLive(_25);                // scope 6 at $DIR/address-of.rs:+17:5: +17:25\n-        StorageLive(_26);                // scope 6 at $DIR/address-of.rs:+17:5: +17:6\n-        _26 = &raw const (*_3);          // scope 6 at $DIR/address-of.rs:+17:5: +17:6\n-        _25 = move _26 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 6 at $DIR/address-of.rs:+17:5: +17:6\n-        StorageDead(_26);                // scope 6 at $DIR/address-of.rs:+17:5: +17:6\n-        AscribeUserType(_25, o, UserTypeProjection { base: UserType(11), projs: [] }); // scope 6 at $DIR/address-of.rs:+17:5: +17:25\n-        _24 = _25;                       // scope 6 at $DIR/address-of.rs:+17:5: +17:25\n-        StorageDead(_25);                // scope 6 at $DIR/address-of.rs:+17:25: +17:26\n-        StorageDead(_24);                // scope 6 at $DIR/address-of.rs:+17:25: +17:26\n-        StorageLive(_27);                // scope 6 at $DIR/address-of.rs:+18:5: +18:22\n-        StorageLive(_28);                // scope 6 at $DIR/address-of.rs:+18:5: +18:6\n-        _28 = &raw const (*_3);          // scope 6 at $DIR/address-of.rs:+18:5: +18:6\n-        _27 = move _28 as *const [i32] (Pointer(Unsize)); // scope 6 at $DIR/address-of.rs:+18:5: +18:6\n-        StorageDead(_28);                // scope 6 at $DIR/address-of.rs:+18:5: +18:6\n-        StorageDead(_27);                // scope 6 at $DIR/address-of.rs:+18:22: +18:23\n-        StorageLive(_29);                // scope 6 at $DIR/address-of.rs:+20:9: +20:10\n-        _29 = &raw const (*_3);          // scope 6 at $DIR/address-of.rs:+20:23: +20:24\n-        FakeRead(ForLet(None), _29);     // scope 6 at $DIR/address-of.rs:+20:9: +20:10\n-        AscribeUserType(_29, o, UserTypeProjection { base: UserType(13), projs: [] }); // scope 6 at $DIR/address-of.rs:+20:12: +20:20\n-        StorageLive(_30);                // scope 7 at $DIR/address-of.rs:+21:9: +21:10\n-        _30 = &raw const (*_3);          // scope 7 at $DIR/address-of.rs:+21:31: +21:32\n-        FakeRead(ForLet(None), _30);     // scope 7 at $DIR/address-of.rs:+21:9: +21:10\n-        AscribeUserType(_30, o, UserTypeProjection { base: UserType(15), projs: [] }); // scope 7 at $DIR/address-of.rs:+21:12: +21:28\n-        StorageLive(_31);                // scope 8 at $DIR/address-of.rs:+22:9: +22:10\n-        StorageLive(_32);                // scope 8 at $DIR/address-of.rs:+22:30: +22:31\n-        _32 = &raw const (*_3);          // scope 8 at $DIR/address-of.rs:+22:30: +22:31\n-        _31 = move _32 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 8 at $DIR/address-of.rs:+22:30: +22:31\n-        StorageDead(_32);                // scope 8 at $DIR/address-of.rs:+22:30: +22:31\n-        FakeRead(ForLet(None), _31);     // scope 8 at $DIR/address-of.rs:+22:9: +22:10\n-        AscribeUserType(_31, o, UserTypeProjection { base: UserType(17), projs: [] }); // scope 8 at $DIR/address-of.rs:+22:12: +22:27\n-        StorageLive(_33);                // scope 9 at $DIR/address-of.rs:+23:9: +23:10\n-        StorageLive(_34);                // scope 9 at $DIR/address-of.rs:+23:27: +23:28\n-        _34 = &raw const (*_3);          // scope 9 at $DIR/address-of.rs:+23:27: +23:28\n-        _33 = move _34 as *const [i32] (Pointer(Unsize)); // scope 9 at $DIR/address-of.rs:+23:27: +23:28\n-        StorageDead(_34);                // scope 9 at $DIR/address-of.rs:+23:27: +23:28\n-        FakeRead(ForLet(None), _33);     // scope 9 at $DIR/address-of.rs:+23:9: +23:10\n-        AscribeUserType(_33, o, UserTypeProjection { base: UserType(19), projs: [] }); // scope 9 at $DIR/address-of.rs:+23:12: +23:24\n-        StorageLive(_35);                // scope 10 at $DIR/address-of.rs:+25:5: +25:16\n-        StorageLive(_36);                // scope 10 at $DIR/address-of.rs:+25:5: +25:16\n-        _36 = &raw mut (*_3);            // scope 10 at $DIR/address-of.rs:+25:5: +25:6\n-        AscribeUserType(_36, o, UserTypeProjection { base: UserType(20), projs: [] }); // scope 10 at $DIR/address-of.rs:+25:5: +25:16\n-        _35 = _36;                       // scope 10 at $DIR/address-of.rs:+25:5: +25:16\n-        StorageDead(_36);                // scope 10 at $DIR/address-of.rs:+25:16: +25:17\n-        StorageDead(_35);                // scope 10 at $DIR/address-of.rs:+25:16: +25:17\n-        StorageLive(_37);                // scope 10 at $DIR/address-of.rs:+26:5: +26:24\n-        _37 = &raw mut (*_3);            // scope 10 at $DIR/address-of.rs:+26:5: +26:6\n-        StorageDead(_37);                // scope 10 at $DIR/address-of.rs:+26:24: +26:25\n-        StorageLive(_38);                // scope 10 at $DIR/address-of.rs:+27:5: +27:23\n-        StorageLive(_39);                // scope 10 at $DIR/address-of.rs:+27:5: +27:23\n-        StorageLive(_40);                // scope 10 at $DIR/address-of.rs:+27:5: +27:6\n-        _40 = &raw mut (*_3);            // scope 10 at $DIR/address-of.rs:+27:5: +27:6\n-        _39 = move _40 as *mut dyn std::marker::Send (Pointer(Unsize)); // scope 10 at $DIR/address-of.rs:+27:5: +27:6\n-        StorageDead(_40);                // scope 10 at $DIR/address-of.rs:+27:5: +27:6\n-        AscribeUserType(_39, o, UserTypeProjection { base: UserType(21), projs: [] }); // scope 10 at $DIR/address-of.rs:+27:5: +27:23\n-        _38 = _39;                       // scope 10 at $DIR/address-of.rs:+27:5: +27:23\n-        StorageDead(_39);                // scope 10 at $DIR/address-of.rs:+27:23: +27:24\n-        StorageDead(_38);                // scope 10 at $DIR/address-of.rs:+27:23: +27:24\n-        StorageLive(_41);                // scope 10 at $DIR/address-of.rs:+28:5: +28:20\n-        StorageLive(_42);                // scope 10 at $DIR/address-of.rs:+28:5: +28:6\n-        _42 = &raw mut (*_3);            // scope 10 at $DIR/address-of.rs:+28:5: +28:6\n-        _41 = move _42 as *mut [i32] (Pointer(Unsize)); // scope 10 at $DIR/address-of.rs:+28:5: +28:6\n-        StorageDead(_42);                // scope 10 at $DIR/address-of.rs:+28:5: +28:6\n-        StorageDead(_41);                // scope 10 at $DIR/address-of.rs:+28:20: +28:21\n-        StorageLive(_43);                // scope 10 at $DIR/address-of.rs:+30:9: +30:10\n-        _43 = &raw mut (*_3);            // scope 10 at $DIR/address-of.rs:+30:21: +30:22\n-        FakeRead(ForLet(None), _43);     // scope 10 at $DIR/address-of.rs:+30:9: +30:10\n-        AscribeUserType(_43, o, UserTypeProjection { base: UserType(23), projs: [] }); // scope 10 at $DIR/address-of.rs:+30:12: +30:18\n-        StorageLive(_44);                // scope 11 at $DIR/address-of.rs:+31:9: +31:10\n-        _44 = &raw mut (*_3);            // scope 11 at $DIR/address-of.rs:+31:29: +31:30\n-        FakeRead(ForLet(None), _44);     // scope 11 at $DIR/address-of.rs:+31:9: +31:10\n-        AscribeUserType(_44, o, UserTypeProjection { base: UserType(25), projs: [] }); // scope 11 at $DIR/address-of.rs:+31:12: +31:26\n-        StorageLive(_45);                // scope 12 at $DIR/address-of.rs:+32:9: +32:10\n-        StorageLive(_46);                // scope 12 at $DIR/address-of.rs:+32:28: +32:29\n-        _46 = &raw mut (*_3);            // scope 12 at $DIR/address-of.rs:+32:28: +32:29\n-        _45 = move _46 as *mut dyn std::marker::Send (Pointer(Unsize)); // scope 12 at $DIR/address-of.rs:+32:28: +32:29\n-        StorageDead(_46);                // scope 12 at $DIR/address-of.rs:+32:28: +32:29\n-        FakeRead(ForLet(None), _45);     // scope 12 at $DIR/address-of.rs:+32:9: +32:10\n-        AscribeUserType(_45, o, UserTypeProjection { base: UserType(27), projs: [] }); // scope 12 at $DIR/address-of.rs:+32:12: +32:25\n-        StorageLive(_47);                // scope 13 at $DIR/address-of.rs:+33:9: +33:10\n-        StorageLive(_48);                // scope 13 at $DIR/address-of.rs:+33:25: +33:26\n-        _48 = &raw mut (*_3);            // scope 13 at $DIR/address-of.rs:+33:25: +33:26\n-        _47 = move _48 as *mut [i32] (Pointer(Unsize)); // scope 13 at $DIR/address-of.rs:+33:25: +33:26\n-        StorageDead(_48);                // scope 13 at $DIR/address-of.rs:+33:25: +33:26\n-        FakeRead(ForLet(None), _47);     // scope 13 at $DIR/address-of.rs:+33:9: +33:10\n-        AscribeUserType(_47, o, UserTypeProjection { base: UserType(29), projs: [] }); // scope 13 at $DIR/address-of.rs:+33:12: +33:22\n-        _0 = const ();                   // scope 0 at $DIR/address-of.rs:+0:26: +34:2\n-        StorageDead(_47);                // scope 13 at $DIR/address-of.rs:+34:1: +34:2\n-        StorageDead(_45);                // scope 12 at $DIR/address-of.rs:+34:1: +34:2\n-        StorageDead(_44);                // scope 11 at $DIR/address-of.rs:+34:1: +34:2\n-        StorageDead(_43);                // scope 10 at $DIR/address-of.rs:+34:1: +34:2\n-        StorageDead(_33);                // scope 9 at $DIR/address-of.rs:+34:1: +34:2\n-        StorageDead(_31);                // scope 8 at $DIR/address-of.rs:+34:1: +34:2\n-        StorageDead(_30);                // scope 7 at $DIR/address-of.rs:+34:1: +34:2\n-        StorageDead(_29);                // scope 6 at $DIR/address-of.rs:+34:1: +34:2\n-        StorageDead(_19);                // scope 5 at $DIR/address-of.rs:+34:1: +34:2\n-        StorageDead(_17);                // scope 4 at $DIR/address-of.rs:+34:1: +34:2\n-        StorageDead(_16);                // scope 3 at $DIR/address-of.rs:+34:1: +34:2\n-        StorageDead(_15);                // scope 2 at $DIR/address-of.rs:+34:1: +34:2\n-        StorageDead(_4);                 // scope 1 at $DIR/address-of.rs:+34:1: +34:2\n-        StorageDead(_3);                 // scope 1 at $DIR/address-of.rs:+34:1: +34:2\n-        StorageDead(_2);                 // scope 0 at $DIR/address-of.rs:+34:1: +34:2\n-        StorageDead(_1);                 // scope 0 at $DIR/address-of.rs:+34:1: +34:2\n-        return;                          // scope 0 at $DIR/address-of.rs:+34:2: +34:2\n+        StorageLive(_1);                 // scope 0 at $DIR/address_of.rs:+1:9: +1:10\n+        StorageLive(_2);                 // scope 0 at $DIR/address_of.rs:+1:14: +1:21\n+        _2 = [const 0_i32; 10];          // scope 0 at $DIR/address_of.rs:+1:14: +1:21\n+        _1 = &_2;                        // scope 0 at $DIR/address_of.rs:+1:13: +1:21\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/address_of.rs:+1:9: +1:10\n+        StorageLive(_3);                 // scope 1 at $DIR/address_of.rs:+2:9: +2:14\n+        StorageLive(_4);                 // scope 1 at $DIR/address_of.rs:+2:22: +2:29\n+        _4 = [const 0_i32; 10];          // scope 1 at $DIR/address_of.rs:+2:22: +2:29\n+        _3 = &mut _4;                    // scope 1 at $DIR/address_of.rs:+2:17: +2:29\n+        FakeRead(ForLet(None), _3);      // scope 1 at $DIR/address_of.rs:+2:9: +2:14\n+        StorageLive(_5);                 // scope 2 at $DIR/address_of.rs:+4:5: +4:18\n+        StorageLive(_6);                 // scope 2 at $DIR/address_of.rs:+4:5: +4:18\n+        _6 = &raw const (*_1);           // scope 2 at $DIR/address_of.rs:+4:5: +4:6\n+        AscribeUserType(_6, o, UserTypeProjection { base: UserType(0), projs: [] }); // scope 2 at $DIR/address_of.rs:+4:5: +4:18\n+        _5 = _6;                         // scope 2 at $DIR/address_of.rs:+4:5: +4:18\n+        StorageDead(_6);                 // scope 2 at $DIR/address_of.rs:+4:18: +4:19\n+        StorageDead(_5);                 // scope 2 at $DIR/address_of.rs:+4:18: +4:19\n+        StorageLive(_7);                 // scope 2 at $DIR/address_of.rs:+5:5: +5:26\n+        _7 = &raw const (*_1);           // scope 2 at $DIR/address_of.rs:+5:5: +5:6\n+        StorageDead(_7);                 // scope 2 at $DIR/address_of.rs:+5:26: +5:27\n+        StorageLive(_8);                 // scope 2 at $DIR/address_of.rs:+6:5: +6:25\n+        StorageLive(_9);                 // scope 2 at $DIR/address_of.rs:+6:5: +6:25\n+        StorageLive(_10);                // scope 2 at $DIR/address_of.rs:+6:5: +6:6\n+        _10 = &raw const (*_1);          // scope 2 at $DIR/address_of.rs:+6:5: +6:6\n+        _9 = move _10 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 2 at $DIR/address_of.rs:+6:5: +6:6\n+        StorageDead(_10);                // scope 2 at $DIR/address_of.rs:+6:5: +6:6\n+        AscribeUserType(_9, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 2 at $DIR/address_of.rs:+6:5: +6:25\n+        _8 = _9;                         // scope 2 at $DIR/address_of.rs:+6:5: +6:25\n+        StorageDead(_9);                 // scope 2 at $DIR/address_of.rs:+6:25: +6:26\n+        StorageDead(_8);                 // scope 2 at $DIR/address_of.rs:+6:25: +6:26\n+        StorageLive(_11);                // scope 2 at $DIR/address_of.rs:+7:5: +7:22\n+        StorageLive(_12);                // scope 2 at $DIR/address_of.rs:+7:5: +7:6\n+        _12 = &raw const (*_1);          // scope 2 at $DIR/address_of.rs:+7:5: +7:6\n+        _11 = move _12 as *const [i32] (Pointer(Unsize)); // scope 2 at $DIR/address_of.rs:+7:5: +7:6\n+        StorageDead(_12);                // scope 2 at $DIR/address_of.rs:+7:5: +7:6\n+        StorageDead(_11);                // scope 2 at $DIR/address_of.rs:+7:22: +7:23\n+        StorageLive(_13);                // scope 2 at $DIR/address_of.rs:+8:5: +8:20\n+        StorageLive(_14);                // scope 2 at $DIR/address_of.rs:+8:5: +8:6\n+        _14 = &raw const (*_1);          // scope 2 at $DIR/address_of.rs:+8:5: +8:6\n+        _13 = move _14 as *const i32 (Pointer(ArrayToPointer)); // scope 2 at $DIR/address_of.rs:+8:5: +8:20\n+        StorageDead(_14);                // scope 2 at $DIR/address_of.rs:+8:19: +8:20\n+        StorageDead(_13);                // scope 2 at $DIR/address_of.rs:+8:20: +8:21\n+        StorageLive(_15);                // scope 2 at $DIR/address_of.rs:+10:9: +10:10\n+        _15 = &raw const (*_1);          // scope 2 at $DIR/address_of.rs:+10:23: +10:24\n+        FakeRead(ForLet(None), _15);     // scope 2 at $DIR/address_of.rs:+10:9: +10:10\n+        AscribeUserType(_15, o, UserTypeProjection { base: UserType(3), projs: [] }); // scope 2 at $DIR/address_of.rs:+10:12: +10:20\n+        StorageLive(_16);                // scope 3 at $DIR/address_of.rs:+11:9: +11:10\n+        _16 = &raw const (*_1);          // scope 3 at $DIR/address_of.rs:+11:31: +11:32\n+        FakeRead(ForLet(None), _16);     // scope 3 at $DIR/address_of.rs:+11:9: +11:10\n+        AscribeUserType(_16, o, UserTypeProjection { base: UserType(5), projs: [] }); // scope 3 at $DIR/address_of.rs:+11:12: +11:28\n+        StorageLive(_17);                // scope 4 at $DIR/address_of.rs:+12:9: +12:10\n+        StorageLive(_18);                // scope 4 at $DIR/address_of.rs:+12:30: +12:31\n+        _18 = &raw const (*_1);          // scope 4 at $DIR/address_of.rs:+12:30: +12:31\n+        _17 = move _18 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 4 at $DIR/address_of.rs:+12:30: +12:31\n+        StorageDead(_18);                // scope 4 at $DIR/address_of.rs:+12:30: +12:31\n+        FakeRead(ForLet(None), _17);     // scope 4 at $DIR/address_of.rs:+12:9: +12:10\n+        AscribeUserType(_17, o, UserTypeProjection { base: UserType(7), projs: [] }); // scope 4 at $DIR/address_of.rs:+12:12: +12:27\n+        StorageLive(_19);                // scope 5 at $DIR/address_of.rs:+13:9: +13:10\n+        StorageLive(_20);                // scope 5 at $DIR/address_of.rs:+13:27: +13:28\n+        _20 = &raw const (*_1);          // scope 5 at $DIR/address_of.rs:+13:27: +13:28\n+        _19 = move _20 as *const [i32] (Pointer(Unsize)); // scope 5 at $DIR/address_of.rs:+13:27: +13:28\n+        StorageDead(_20);                // scope 5 at $DIR/address_of.rs:+13:27: +13:28\n+        FakeRead(ForLet(None), _19);     // scope 5 at $DIR/address_of.rs:+13:9: +13:10\n+        AscribeUserType(_19, o, UserTypeProjection { base: UserType(9), projs: [] }); // scope 5 at $DIR/address_of.rs:+13:12: +13:24\n+        StorageLive(_21);                // scope 6 at $DIR/address_of.rs:+15:5: +15:18\n+        StorageLive(_22);                // scope 6 at $DIR/address_of.rs:+15:5: +15:18\n+        _22 = &raw const (*_3);          // scope 6 at $DIR/address_of.rs:+15:5: +15:6\n+        AscribeUserType(_22, o, UserTypeProjection { base: UserType(10), projs: [] }); // scope 6 at $DIR/address_of.rs:+15:5: +15:18\n+        _21 = _22;                       // scope 6 at $DIR/address_of.rs:+15:5: +15:18\n+        StorageDead(_22);                // scope 6 at $DIR/address_of.rs:+15:18: +15:19\n+        StorageDead(_21);                // scope 6 at $DIR/address_of.rs:+15:18: +15:19\n+        StorageLive(_23);                // scope 6 at $DIR/address_of.rs:+16:5: +16:26\n+        _23 = &raw const (*_3);          // scope 6 at $DIR/address_of.rs:+16:5: +16:6\n+        StorageDead(_23);                // scope 6 at $DIR/address_of.rs:+16:26: +16:27\n+        StorageLive(_24);                // scope 6 at $DIR/address_of.rs:+17:5: +17:25\n+        StorageLive(_25);                // scope 6 at $DIR/address_of.rs:+17:5: +17:25\n+        StorageLive(_26);                // scope 6 at $DIR/address_of.rs:+17:5: +17:6\n+        _26 = &raw const (*_3);          // scope 6 at $DIR/address_of.rs:+17:5: +17:6\n+        _25 = move _26 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 6 at $DIR/address_of.rs:+17:5: +17:6\n+        StorageDead(_26);                // scope 6 at $DIR/address_of.rs:+17:5: +17:6\n+        AscribeUserType(_25, o, UserTypeProjection { base: UserType(11), projs: [] }); // scope 6 at $DIR/address_of.rs:+17:5: +17:25\n+        _24 = _25;                       // scope 6 at $DIR/address_of.rs:+17:5: +17:25\n+        StorageDead(_25);                // scope 6 at $DIR/address_of.rs:+17:25: +17:26\n+        StorageDead(_24);                // scope 6 at $DIR/address_of.rs:+17:25: +17:26\n+        StorageLive(_27);                // scope 6 at $DIR/address_of.rs:+18:5: +18:22\n+        StorageLive(_28);                // scope 6 at $DIR/address_of.rs:+18:5: +18:6\n+        _28 = &raw const (*_3);          // scope 6 at $DIR/address_of.rs:+18:5: +18:6\n+        _27 = move _28 as *const [i32] (Pointer(Unsize)); // scope 6 at $DIR/address_of.rs:+18:5: +18:6\n+        StorageDead(_28);                // scope 6 at $DIR/address_of.rs:+18:5: +18:6\n+        StorageDead(_27);                // scope 6 at $DIR/address_of.rs:+18:22: +18:23\n+        StorageLive(_29);                // scope 6 at $DIR/address_of.rs:+20:9: +20:10\n+        _29 = &raw const (*_3);          // scope 6 at $DIR/address_of.rs:+20:23: +20:24\n+        FakeRead(ForLet(None), _29);     // scope 6 at $DIR/address_of.rs:+20:9: +20:10\n+        AscribeUserType(_29, o, UserTypeProjection { base: UserType(13), projs: [] }); // scope 6 at $DIR/address_of.rs:+20:12: +20:20\n+        StorageLive(_30);                // scope 7 at $DIR/address_of.rs:+21:9: +21:10\n+        _30 = &raw const (*_3);          // scope 7 at $DIR/address_of.rs:+21:31: +21:32\n+        FakeRead(ForLet(None), _30);     // scope 7 at $DIR/address_of.rs:+21:9: +21:10\n+        AscribeUserType(_30, o, UserTypeProjection { base: UserType(15), projs: [] }); // scope 7 at $DIR/address_of.rs:+21:12: +21:28\n+        StorageLive(_31);                // scope 8 at $DIR/address_of.rs:+22:9: +22:10\n+        StorageLive(_32);                // scope 8 at $DIR/address_of.rs:+22:30: +22:31\n+        _32 = &raw const (*_3);          // scope 8 at $DIR/address_of.rs:+22:30: +22:31\n+        _31 = move _32 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 8 at $DIR/address_of.rs:+22:30: +22:31\n+        StorageDead(_32);                // scope 8 at $DIR/address_of.rs:+22:30: +22:31\n+        FakeRead(ForLet(None), _31);     // scope 8 at $DIR/address_of.rs:+22:9: +22:10\n+        AscribeUserType(_31, o, UserTypeProjection { base: UserType(17), projs: [] }); // scope 8 at $DIR/address_of.rs:+22:12: +22:27\n+        StorageLive(_33);                // scope 9 at $DIR/address_of.rs:+23:9: +23:10\n+        StorageLive(_34);                // scope 9 at $DIR/address_of.rs:+23:27: +23:28\n+        _34 = &raw const (*_3);          // scope 9 at $DIR/address_of.rs:+23:27: +23:28\n+        _33 = move _34 as *const [i32] (Pointer(Unsize)); // scope 9 at $DIR/address_of.rs:+23:27: +23:28\n+        StorageDead(_34);                // scope 9 at $DIR/address_of.rs:+23:27: +23:28\n+        FakeRead(ForLet(None), _33);     // scope 9 at $DIR/address_of.rs:+23:9: +23:10\n+        AscribeUserType(_33, o, UserTypeProjection { base: UserType(19), projs: [] }); // scope 9 at $DIR/address_of.rs:+23:12: +23:24\n+        StorageLive(_35);                // scope 10 at $DIR/address_of.rs:+25:5: +25:16\n+        StorageLive(_36);                // scope 10 at $DIR/address_of.rs:+25:5: +25:16\n+        _36 = &raw mut (*_3);            // scope 10 at $DIR/address_of.rs:+25:5: +25:6\n+        AscribeUserType(_36, o, UserTypeProjection { base: UserType(20), projs: [] }); // scope 10 at $DIR/address_of.rs:+25:5: +25:16\n+        _35 = _36;                       // scope 10 at $DIR/address_of.rs:+25:5: +25:16\n+        StorageDead(_36);                // scope 10 at $DIR/address_of.rs:+25:16: +25:17\n+        StorageDead(_35);                // scope 10 at $DIR/address_of.rs:+25:16: +25:17\n+        StorageLive(_37);                // scope 10 at $DIR/address_of.rs:+26:5: +26:24\n+        _37 = &raw mut (*_3);            // scope 10 at $DIR/address_of.rs:+26:5: +26:6\n+        StorageDead(_37);                // scope 10 at $DIR/address_of.rs:+26:24: +26:25\n+        StorageLive(_38);                // scope 10 at $DIR/address_of.rs:+27:5: +27:23\n+        StorageLive(_39);                // scope 10 at $DIR/address_of.rs:+27:5: +27:23\n+        StorageLive(_40);                // scope 10 at $DIR/address_of.rs:+27:5: +27:6\n+        _40 = &raw mut (*_3);            // scope 10 at $DIR/address_of.rs:+27:5: +27:6\n+        _39 = move _40 as *mut dyn std::marker::Send (Pointer(Unsize)); // scope 10 at $DIR/address_of.rs:+27:5: +27:6\n+        StorageDead(_40);                // scope 10 at $DIR/address_of.rs:+27:5: +27:6\n+        AscribeUserType(_39, o, UserTypeProjection { base: UserType(21), projs: [] }); // scope 10 at $DIR/address_of.rs:+27:5: +27:23\n+        _38 = _39;                       // scope 10 at $DIR/address_of.rs:+27:5: +27:23\n+        StorageDead(_39);                // scope 10 at $DIR/address_of.rs:+27:23: +27:24\n+        StorageDead(_38);                // scope 10 at $DIR/address_of.rs:+27:23: +27:24\n+        StorageLive(_41);                // scope 10 at $DIR/address_of.rs:+28:5: +28:20\n+        StorageLive(_42);                // scope 10 at $DIR/address_of.rs:+28:5: +28:6\n+        _42 = &raw mut (*_3);            // scope 10 at $DIR/address_of.rs:+28:5: +28:6\n+        _41 = move _42 as *mut [i32] (Pointer(Unsize)); // scope 10 at $DIR/address_of.rs:+28:5: +28:6\n+        StorageDead(_42);                // scope 10 at $DIR/address_of.rs:+28:5: +28:6\n+        StorageDead(_41);                // scope 10 at $DIR/address_of.rs:+28:20: +28:21\n+        StorageLive(_43);                // scope 10 at $DIR/address_of.rs:+30:9: +30:10\n+        _43 = &raw mut (*_3);            // scope 10 at $DIR/address_of.rs:+30:21: +30:22\n+        FakeRead(ForLet(None), _43);     // scope 10 at $DIR/address_of.rs:+30:9: +30:10\n+        AscribeUserType(_43, o, UserTypeProjection { base: UserType(23), projs: [] }); // scope 10 at $DIR/address_of.rs:+30:12: +30:18\n+        StorageLive(_44);                // scope 11 at $DIR/address_of.rs:+31:9: +31:10\n+        _44 = &raw mut (*_3);            // scope 11 at $DIR/address_of.rs:+31:29: +31:30\n+        FakeRead(ForLet(None), _44);     // scope 11 at $DIR/address_of.rs:+31:9: +31:10\n+        AscribeUserType(_44, o, UserTypeProjection { base: UserType(25), projs: [] }); // scope 11 at $DIR/address_of.rs:+31:12: +31:26\n+        StorageLive(_45);                // scope 12 at $DIR/address_of.rs:+32:9: +32:10\n+        StorageLive(_46);                // scope 12 at $DIR/address_of.rs:+32:28: +32:29\n+        _46 = &raw mut (*_3);            // scope 12 at $DIR/address_of.rs:+32:28: +32:29\n+        _45 = move _46 as *mut dyn std::marker::Send (Pointer(Unsize)); // scope 12 at $DIR/address_of.rs:+32:28: +32:29\n+        StorageDead(_46);                // scope 12 at $DIR/address_of.rs:+32:28: +32:29\n+        FakeRead(ForLet(None), _45);     // scope 12 at $DIR/address_of.rs:+32:9: +32:10\n+        AscribeUserType(_45, o, UserTypeProjection { base: UserType(27), projs: [] }); // scope 12 at $DIR/address_of.rs:+32:12: +32:25\n+        StorageLive(_47);                // scope 13 at $DIR/address_of.rs:+33:9: +33:10\n+        StorageLive(_48);                // scope 13 at $DIR/address_of.rs:+33:25: +33:26\n+        _48 = &raw mut (*_3);            // scope 13 at $DIR/address_of.rs:+33:25: +33:26\n+        _47 = move _48 as *mut [i32] (Pointer(Unsize)); // scope 13 at $DIR/address_of.rs:+33:25: +33:26\n+        StorageDead(_48);                // scope 13 at $DIR/address_of.rs:+33:25: +33:26\n+        FakeRead(ForLet(None), _47);     // scope 13 at $DIR/address_of.rs:+33:9: +33:10\n+        AscribeUserType(_47, o, UserTypeProjection { base: UserType(29), projs: [] }); // scope 13 at $DIR/address_of.rs:+33:12: +33:22\n+        _0 = const ();                   // scope 0 at $DIR/address_of.rs:+0:26: +34:2\n+        StorageDead(_47);                // scope 13 at $DIR/address_of.rs:+34:1: +34:2\n+        StorageDead(_45);                // scope 12 at $DIR/address_of.rs:+34:1: +34:2\n+        StorageDead(_44);                // scope 11 at $DIR/address_of.rs:+34:1: +34:2\n+        StorageDead(_43);                // scope 10 at $DIR/address_of.rs:+34:1: +34:2\n+        StorageDead(_33);                // scope 9 at $DIR/address_of.rs:+34:1: +34:2\n+        StorageDead(_31);                // scope 8 at $DIR/address_of.rs:+34:1: +34:2\n+        StorageDead(_30);                // scope 7 at $DIR/address_of.rs:+34:1: +34:2\n+        StorageDead(_29);                // scope 6 at $DIR/address_of.rs:+34:1: +34:2\n+        StorageDead(_19);                // scope 5 at $DIR/address_of.rs:+34:1: +34:2\n+        StorageDead(_17);                // scope 4 at $DIR/address_of.rs:+34:1: +34:2\n+        StorageDead(_16);                // scope 3 at $DIR/address_of.rs:+34:1: +34:2\n+        StorageDead(_15);                // scope 2 at $DIR/address_of.rs:+34:1: +34:2\n+        StorageDead(_4);                 // scope 1 at $DIR/address_of.rs:+34:1: +34:2\n+        StorageDead(_3);                 // scope 1 at $DIR/address_of.rs:+34:1: +34:2\n+        StorageDead(_2);                 // scope 0 at $DIR/address_of.rs:+34:1: +34:2\n+        StorageDead(_1);                 // scope 0 at $DIR/address_of.rs:+34:1: +34:2\n+        return;                          // scope 0 at $DIR/address_of.rs:+34:2: +34:2\n     }\n }"}, {"sha": "4c67376b56a683cb58c7f738a0f86d88e0299496", "filename": "src/test/mir-opt/address_of.borrow_and_cast.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Faddress_of.borrow_and_cast.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Faddress_of.borrow_and_cast.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Faddress_of.borrow_and_cast.SimplifyCfg-initial.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,47 +1,47 @@\n // MIR for `borrow_and_cast` after SimplifyCfg-initial\n \n fn borrow_and_cast(_1: i32) -> () {\n-    debug x => _1;                       // in scope 0 at $DIR/address-of.rs:+0:20: +0:25\n-    let mut _0: ();                      // return place in scope 0 at $DIR/address-of.rs:+0:32: +0:32\n-    let _2: *const i32;                  // in scope 0 at $DIR/address-of.rs:+1:9: +1:10\n-    let _3: &i32;                        // in scope 0 at $DIR/address-of.rs:+1:13: +1:15\n-    let _5: &mut i32;                    // in scope 0 at $DIR/address-of.rs:+2:13: +2:19\n-    let mut _7: &mut i32;                // in scope 0 at $DIR/address-of.rs:+3:13: +3:19\n+    debug x => _1;                       // in scope 0 at $DIR/address_of.rs:+0:20: +0:25\n+    let mut _0: ();                      // return place in scope 0 at $DIR/address_of.rs:+0:32: +0:32\n+    let _2: *const i32;                  // in scope 0 at $DIR/address_of.rs:+1:9: +1:10\n+    let _3: &i32;                        // in scope 0 at $DIR/address_of.rs:+1:13: +1:15\n+    let _5: &mut i32;                    // in scope 0 at $DIR/address_of.rs:+2:13: +2:19\n+    let mut _7: &mut i32;                // in scope 0 at $DIR/address_of.rs:+3:13: +3:19\n     scope 1 {\n-        debug p => _2;                   // in scope 1 at $DIR/address-of.rs:+1:9: +1:10\n-        let _4: *const i32;              // in scope 1 at $DIR/address-of.rs:+2:9: +2:10\n+        debug p => _2;                   // in scope 1 at $DIR/address_of.rs:+1:9: +1:10\n+        let _4: *const i32;              // in scope 1 at $DIR/address_of.rs:+2:9: +2:10\n         scope 2 {\n-            debug q => _4;               // in scope 2 at $DIR/address-of.rs:+2:9: +2:10\n-            let _6: *mut i32;            // in scope 2 at $DIR/address-of.rs:+3:9: +3:10\n+            debug q => _4;               // in scope 2 at $DIR/address_of.rs:+2:9: +2:10\n+            let _6: *mut i32;            // in scope 2 at $DIR/address_of.rs:+3:9: +3:10\n             scope 3 {\n-                debug r => _6;           // in scope 3 at $DIR/address-of.rs:+3:9: +3:10\n+                debug r => _6;           // in scope 3 at $DIR/address_of.rs:+3:9: +3:10\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/address-of.rs:+1:9: +1:10\n-        StorageLive(_3);                 // scope 0 at $DIR/address-of.rs:+1:13: +1:15\n-        _3 = &_1;                        // scope 0 at $DIR/address-of.rs:+1:13: +1:15\n-        _2 = &raw const (*_3);           // scope 0 at $DIR/address-of.rs:+1:13: +1:15\n-        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/address-of.rs:+1:9: +1:10\n-        StorageDead(_3);                 // scope 0 at $DIR/address-of.rs:+1:29: +1:30\n-        StorageLive(_4);                 // scope 1 at $DIR/address-of.rs:+2:9: +2:10\n-        StorageLive(_5);                 // scope 1 at $DIR/address-of.rs:+2:13: +2:19\n-        _5 = &mut _1;                    // scope 1 at $DIR/address-of.rs:+2:13: +2:19\n-        _4 = &raw const (*_5);           // scope 1 at $DIR/address-of.rs:+2:13: +2:19\n-        FakeRead(ForLet(None), _4);      // scope 1 at $DIR/address-of.rs:+2:9: +2:10\n-        StorageDead(_5);                 // scope 1 at $DIR/address-of.rs:+2:33: +2:34\n-        StorageLive(_6);                 // scope 2 at $DIR/address-of.rs:+3:9: +3:10\n-        StorageLive(_7);                 // scope 2 at $DIR/address-of.rs:+3:13: +3:19\n-        _7 = &mut _1;                    // scope 2 at $DIR/address-of.rs:+3:13: +3:19\n-        _6 = &raw mut (*_7);             // scope 2 at $DIR/address-of.rs:+3:13: +3:19\n-        FakeRead(ForLet(None), _6);      // scope 2 at $DIR/address-of.rs:+3:9: +3:10\n-        StorageDead(_7);                 // scope 2 at $DIR/address-of.rs:+3:31: +3:32\n-        _0 = const ();                   // scope 0 at $DIR/address-of.rs:+0:32: +4:2\n-        StorageDead(_6);                 // scope 2 at $DIR/address-of.rs:+4:1: +4:2\n-        StorageDead(_4);                 // scope 1 at $DIR/address-of.rs:+4:1: +4:2\n-        StorageDead(_2);                 // scope 0 at $DIR/address-of.rs:+4:1: +4:2\n-        return;                          // scope 0 at $DIR/address-of.rs:+4:2: +4:2\n+        StorageLive(_2);                 // scope 0 at $DIR/address_of.rs:+1:9: +1:10\n+        StorageLive(_3);                 // scope 0 at $DIR/address_of.rs:+1:13: +1:15\n+        _3 = &_1;                        // scope 0 at $DIR/address_of.rs:+1:13: +1:15\n+        _2 = &raw const (*_3);           // scope 0 at $DIR/address_of.rs:+1:13: +1:15\n+        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/address_of.rs:+1:9: +1:10\n+        StorageDead(_3);                 // scope 0 at $DIR/address_of.rs:+1:29: +1:30\n+        StorageLive(_4);                 // scope 1 at $DIR/address_of.rs:+2:9: +2:10\n+        StorageLive(_5);                 // scope 1 at $DIR/address_of.rs:+2:13: +2:19\n+        _5 = &mut _1;                    // scope 1 at $DIR/address_of.rs:+2:13: +2:19\n+        _4 = &raw const (*_5);           // scope 1 at $DIR/address_of.rs:+2:13: +2:19\n+        FakeRead(ForLet(None), _4);      // scope 1 at $DIR/address_of.rs:+2:9: +2:10\n+        StorageDead(_5);                 // scope 1 at $DIR/address_of.rs:+2:33: +2:34\n+        StorageLive(_6);                 // scope 2 at $DIR/address_of.rs:+3:9: +3:10\n+        StorageLive(_7);                 // scope 2 at $DIR/address_of.rs:+3:13: +3:19\n+        _7 = &mut _1;                    // scope 2 at $DIR/address_of.rs:+3:13: +3:19\n+        _6 = &raw mut (*_7);             // scope 2 at $DIR/address_of.rs:+3:13: +3:19\n+        FakeRead(ForLet(None), _6);      // scope 2 at $DIR/address_of.rs:+3:9: +3:10\n+        StorageDead(_7);                 // scope 2 at $DIR/address_of.rs:+3:31: +3:32\n+        _0 = const ();                   // scope 0 at $DIR/address_of.rs:+0:32: +4:2\n+        StorageDead(_6);                 // scope 2 at $DIR/address_of.rs:+4:1: +4:2\n+        StorageDead(_4);                 // scope 1 at $DIR/address_of.rs:+4:1: +4:2\n+        StorageDead(_2);                 // scope 0 at $DIR/address_of.rs:+4:1: +4:2\n+        return;                          // scope 0 at $DIR/address_of.rs:+4:2: +4:2\n     }\n }"}, {"sha": "c4bea5613e4026cf4f1869aaddb75d8f5c535a64", "filename": "src/test/mir-opt/address_of.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Faddress_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Faddress_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Faddress_of.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/address-of.rs"}, {"sha": "af5178d4079d0828f281c8aaf27b9d92fe51fca0", "filename": "src/test/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,64 +1,64 @@\n // MIR for `main` after SimplifyCfg-elaborate-drops\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/array-index-is-temporary.rs:+0:11: +0:11\n-    let mut _1: [u32; 3];                // in scope 0 at $DIR/array-index-is-temporary.rs:+1:9: +1:14\n-    let mut _4: &mut usize;              // in scope 0 at $DIR/array-index-is-temporary.rs:+3:25: +3:31\n-    let mut _5: u32;                     // in scope 0 at $DIR/array-index-is-temporary.rs:+4:12: +4:29\n-    let mut _6: *mut usize;              // in scope 0 at $DIR/array-index-is-temporary.rs:+4:25: +4:26\n-    let _7: usize;                       // in scope 0 at $DIR/array-index-is-temporary.rs:+4:7: +4:8\n-    let mut _8: usize;                   // in scope 0 at $DIR/array-index-is-temporary.rs:+4:5: +4:9\n-    let mut _9: bool;                    // in scope 0 at $DIR/array-index-is-temporary.rs:+4:5: +4:9\n+    let mut _0: ();                      // return place in scope 0 at $DIR/array_index_is_temporary.rs:+0:11: +0:11\n+    let mut _1: [u32; 3];                // in scope 0 at $DIR/array_index_is_temporary.rs:+1:9: +1:14\n+    let mut _4: &mut usize;              // in scope 0 at $DIR/array_index_is_temporary.rs:+3:25: +3:31\n+    let mut _5: u32;                     // in scope 0 at $DIR/array_index_is_temporary.rs:+4:12: +4:29\n+    let mut _6: *mut usize;              // in scope 0 at $DIR/array_index_is_temporary.rs:+4:25: +4:26\n+    let _7: usize;                       // in scope 0 at $DIR/array_index_is_temporary.rs:+4:7: +4:8\n+    let mut _8: usize;                   // in scope 0 at $DIR/array_index_is_temporary.rs:+4:5: +4:9\n+    let mut _9: bool;                    // in scope 0 at $DIR/array_index_is_temporary.rs:+4:5: +4:9\n     scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/array-index-is-temporary.rs:+1:9: +1:14\n-        let mut _2: usize;               // in scope 1 at $DIR/array-index-is-temporary.rs:+2:9: +2:14\n+        debug x => _1;                   // in scope 1 at $DIR/array_index_is_temporary.rs:+1:9: +1:14\n+        let mut _2: usize;               // in scope 1 at $DIR/array_index_is_temporary.rs:+2:9: +2:14\n         scope 2 {\n-            debug y => _2;               // in scope 2 at $DIR/array-index-is-temporary.rs:+2:9: +2:14\n-            let _3: *mut usize;          // in scope 2 at $DIR/array-index-is-temporary.rs:+3:9: +3:10\n+            debug y => _2;               // in scope 2 at $DIR/array_index_is_temporary.rs:+2:9: +2:14\n+            let _3: *mut usize;          // in scope 2 at $DIR/array_index_is_temporary.rs:+3:9: +3:10\n             scope 3 {\n-                debug z => _3;           // in scope 3 at $DIR/array-index-is-temporary.rs:+3:9: +3:10\n+                debug z => _3;           // in scope 3 at $DIR/array_index_is_temporary.rs:+3:9: +3:10\n                 scope 4 {\n                 }\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/array-index-is-temporary.rs:+1:9: +1:14\n-        _1 = [const 42_u32, const 43_u32, const 44_u32]; // scope 0 at $DIR/array-index-is-temporary.rs:+1:17: +1:29\n-        StorageLive(_2);                 // scope 1 at $DIR/array-index-is-temporary.rs:+2:9: +2:14\n-        _2 = const 1_usize;              // scope 1 at $DIR/array-index-is-temporary.rs:+2:17: +2:18\n-        StorageLive(_3);                 // scope 2 at $DIR/array-index-is-temporary.rs:+3:9: +3:10\n-        StorageLive(_4);                 // scope 2 at $DIR/array-index-is-temporary.rs:+3:25: +3:31\n-        _4 = &mut _2;                    // scope 2 at $DIR/array-index-is-temporary.rs:+3:25: +3:31\n-        _3 = &raw mut (*_4);             // scope 2 at $DIR/array-index-is-temporary.rs:+3:25: +3:31\n-        StorageDead(_4);                 // scope 2 at $DIR/array-index-is-temporary.rs:+3:31: +3:32\n-        StorageLive(_5);                 // scope 3 at $DIR/array-index-is-temporary.rs:+4:12: +4:29\n-        StorageLive(_6);                 // scope 4 at $DIR/array-index-is-temporary.rs:+4:25: +4:26\n-        _6 = _3;                         // scope 4 at $DIR/array-index-is-temporary.rs:+4:25: +4:26\n-        _5 = foo(move _6) -> bb1;        // scope 4 at $DIR/array-index-is-temporary.rs:+4:21: +4:27\n+        StorageLive(_1);                 // scope 0 at $DIR/array_index_is_temporary.rs:+1:9: +1:14\n+        _1 = [const 42_u32, const 43_u32, const 44_u32]; // scope 0 at $DIR/array_index_is_temporary.rs:+1:17: +1:29\n+        StorageLive(_2);                 // scope 1 at $DIR/array_index_is_temporary.rs:+2:9: +2:14\n+        _2 = const 1_usize;              // scope 1 at $DIR/array_index_is_temporary.rs:+2:17: +2:18\n+        StorageLive(_3);                 // scope 2 at $DIR/array_index_is_temporary.rs:+3:9: +3:10\n+        StorageLive(_4);                 // scope 2 at $DIR/array_index_is_temporary.rs:+3:25: +3:31\n+        _4 = &mut _2;                    // scope 2 at $DIR/array_index_is_temporary.rs:+3:25: +3:31\n+        _3 = &raw mut (*_4);             // scope 2 at $DIR/array_index_is_temporary.rs:+3:25: +3:31\n+        StorageDead(_4);                 // scope 2 at $DIR/array_index_is_temporary.rs:+3:31: +3:32\n+        StorageLive(_5);                 // scope 3 at $DIR/array_index_is_temporary.rs:+4:12: +4:29\n+        StorageLive(_6);                 // scope 4 at $DIR/array_index_is_temporary.rs:+4:25: +4:26\n+        _6 = _3;                         // scope 4 at $DIR/array_index_is_temporary.rs:+4:25: +4:26\n+        _5 = foo(move _6) -> bb1;        // scope 4 at $DIR/array_index_is_temporary.rs:+4:21: +4:27\n                                          // mir::Constant\n-                                         // + span: $DIR/array-index-is-temporary.rs:16:21: 16:24\n+                                         // + span: $DIR/array_index_is_temporary.rs:16:21: 16:24\n                                          // + literal: Const { ty: unsafe fn(*mut usize) -> u32 {foo}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageDead(_6);                 // scope 4 at $DIR/array-index-is-temporary.rs:+4:26: +4:27\n-        StorageLive(_7);                 // scope 3 at $DIR/array-index-is-temporary.rs:+4:7: +4:8\n-        _7 = _2;                         // scope 3 at $DIR/array-index-is-temporary.rs:+4:7: +4:8\n-        _8 = Len(_1);                    // scope 3 at $DIR/array-index-is-temporary.rs:+4:5: +4:9\n-        _9 = Lt(_7, _8);                 // scope 3 at $DIR/array-index-is-temporary.rs:+4:5: +4:9\n-        assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb2; // scope 3 at $DIR/array-index-is-temporary.rs:+4:5: +4:9\n+        StorageDead(_6);                 // scope 4 at $DIR/array_index_is_temporary.rs:+4:26: +4:27\n+        StorageLive(_7);                 // scope 3 at $DIR/array_index_is_temporary.rs:+4:7: +4:8\n+        _7 = _2;                         // scope 3 at $DIR/array_index_is_temporary.rs:+4:7: +4:8\n+        _8 = Len(_1);                    // scope 3 at $DIR/array_index_is_temporary.rs:+4:5: +4:9\n+        _9 = Lt(_7, _8);                 // scope 3 at $DIR/array_index_is_temporary.rs:+4:5: +4:9\n+        assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb2; // scope 3 at $DIR/array_index_is_temporary.rs:+4:5: +4:9\n     }\n \n     bb2: {\n-        _1[_7] = move _5;                // scope 3 at $DIR/array-index-is-temporary.rs:+4:5: +4:29\n-        StorageDead(_5);                 // scope 3 at $DIR/array-index-is-temporary.rs:+4:28: +4:29\n-        StorageDead(_7);                 // scope 3 at $DIR/array-index-is-temporary.rs:+4:29: +4:30\n-        _0 = const ();                   // scope 0 at $DIR/array-index-is-temporary.rs:+0:11: +5:2\n-        StorageDead(_3);                 // scope 2 at $DIR/array-index-is-temporary.rs:+5:1: +5:2\n-        StorageDead(_2);                 // scope 1 at $DIR/array-index-is-temporary.rs:+5:1: +5:2\n-        StorageDead(_1);                 // scope 0 at $DIR/array-index-is-temporary.rs:+5:1: +5:2\n-        return;                          // scope 0 at $DIR/array-index-is-temporary.rs:+5:2: +5:2\n+        _1[_7] = move _5;                // scope 3 at $DIR/array_index_is_temporary.rs:+4:5: +4:29\n+        StorageDead(_5);                 // scope 3 at $DIR/array_index_is_temporary.rs:+4:28: +4:29\n+        StorageDead(_7);                 // scope 3 at $DIR/array_index_is_temporary.rs:+4:29: +4:30\n+        _0 = const ();                   // scope 0 at $DIR/array_index_is_temporary.rs:+0:11: +5:2\n+        StorageDead(_3);                 // scope 2 at $DIR/array_index_is_temporary.rs:+5:1: +5:2\n+        StorageDead(_2);                 // scope 1 at $DIR/array_index_is_temporary.rs:+5:1: +5:2\n+        StorageDead(_1);                 // scope 0 at $DIR/array_index_is_temporary.rs:+5:1: +5:2\n+        return;                          // scope 0 at $DIR/array_index_is_temporary.rs:+5:2: +5:2\n     }\n }"}, {"sha": "e7bde81d4ca36204fe9642958546f34714226aa2", "filename": "src/test/mir-opt/array_index_is_temporary.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/array-index-is-temporary.rs"}, {"sha": "0ebd840cf2d5cc02db12cc2fe1250bec9caba143", "filename": "src/test/mir-opt/building/issue_101867.main.built.after.mir", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_101867.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_101867.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_101867.main.built.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,33 +1,33 @@\n // MIR for `main` after built\n \n | User Type Annotations\n-| 0: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(std::option::Option<u8>) }, span: $DIR/issue-101867.rs:3:12: 3:22, inferred_ty: std::option::Option<u8>\n-| 1: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(std::option::Option<u8>) }, span: $DIR/issue-101867.rs:3:12: 3:22, inferred_ty: std::option::Option<u8>\n+| 0: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(std::option::Option<u8>) }, span: $DIR/issue_101867.rs:3:12: 3:22, inferred_ty: std::option::Option<u8>\n+| 1: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(std::option::Option<u8>) }, span: $DIR/issue_101867.rs:3:12: 3:22, inferred_ty: std::option::Option<u8>\n |\n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/issue-101867.rs:+0:11: +0:11\n-    let _1: std::option::Option<u8> as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/issue-101867.rs:+1:9: +1:10\n-    let mut _2: !;                       // in scope 0 at $DIR/issue-101867.rs:+2:26: +4:6\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue_101867.rs:+0:11: +0:11\n+    let _1: std::option::Option<u8> as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/issue_101867.rs:+1:9: +1:10\n+    let mut _2: !;                       // in scope 0 at $DIR/issue_101867.rs:+2:26: +4:6\n     let _3: ();                          // in scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n     let mut _4: !;                       // in scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n-    let mut _6: isize;                   // in scope 0 at $DIR/issue-101867.rs:+2:9: +2:16\n+    let mut _6: isize;                   // in scope 0 at $DIR/issue_101867.rs:+2:9: +2:16\n     scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/issue-101867.rs:+1:9: +1:10\n-        let _5: u8;                      // in scope 1 at $DIR/issue-101867.rs:+2:14: +2:15\n+        debug x => _1;                   // in scope 1 at $DIR/issue_101867.rs:+1:9: +1:10\n+        let _5: u8;                      // in scope 1 at $DIR/issue_101867.rs:+2:14: +2:15\n         scope 2 {\n-            debug y => _5;               // in scope 2 at $DIR/issue-101867.rs:+2:14: +2:15\n+            debug y => _5;               // in scope 2 at $DIR/issue_101867.rs:+2:14: +2:15\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/issue-101867.rs:+1:9: +1:10\n-        _1 = Option::<u8>::Some(const 1_u8); // scope 0 at $DIR/issue-101867.rs:+1:25: +1:32\n-        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/issue-101867.rs:+1:9: +1:10\n-        AscribeUserType(_1, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 0 at $DIR/issue-101867.rs:+1:12: +1:22\n-        StorageLive(_5);                 // scope 1 at $DIR/issue-101867.rs:+2:14: +2:15\n-        FakeRead(ForMatchedPlace(None), _1); // scope 1 at $DIR/issue-101867.rs:+2:19: +2:20\n-        _6 = discriminant(_1);           // scope 1 at $DIR/issue-101867.rs:+2:19: +2:20\n-        switchInt(move _6) -> [1_isize: bb4, otherwise: bb3]; // scope 1 at $DIR/issue-101867.rs:+2:9: +2:16\n+        StorageLive(_1);                 // scope 0 at $DIR/issue_101867.rs:+1:9: +1:10\n+        _1 = Option::<u8>::Some(const 1_u8); // scope 0 at $DIR/issue_101867.rs:+1:25: +1:32\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/issue_101867.rs:+1:9: +1:10\n+        AscribeUserType(_1, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 0 at $DIR/issue_101867.rs:+1:12: +1:22\n+        StorageLive(_5);                 // scope 1 at $DIR/issue_101867.rs:+2:14: +2:15\n+        FakeRead(ForMatchedPlace(None), _1); // scope 1 at $DIR/issue_101867.rs:+2:19: +2:20\n+        _6 = discriminant(_1);           // scope 1 at $DIR/issue_101867.rs:+2:19: +2:20\n+        switchInt(move _6) -> [1_isize: bb4, otherwise: bb3]; // scope 1 at $DIR/issue_101867.rs:+2:9: +2:16\n     }\n \n     bb1: {\n@@ -44,32 +44,32 @@ fn main() -> () {\n \n     bb2: {\n         StorageDead(_4);                 // scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL\n-        StorageDead(_3);                 // scope 1 at $DIR/issue-101867.rs:+3:16: +3:17\n-        unreachable;                     // scope 1 at $DIR/issue-101867.rs:+2:26: +4:6\n+        StorageDead(_3);                 // scope 1 at $DIR/issue_101867.rs:+3:16: +3:17\n+        unreachable;                     // scope 1 at $DIR/issue_101867.rs:+2:26: +4:6\n     }\n \n     bb3: {\n-        goto -> bb6;                     // scope 1 at $DIR/issue-101867.rs:+2:19: +2:20\n+        goto -> bb6;                     // scope 1 at $DIR/issue_101867.rs:+2:19: +2:20\n     }\n \n     bb4: {\n-        falseEdge -> [real: bb5, imaginary: bb3]; // scope 1 at $DIR/issue-101867.rs:+2:9: +2:16\n+        falseEdge -> [real: bb5, imaginary: bb3]; // scope 1 at $DIR/issue_101867.rs:+2:9: +2:16\n     }\n \n     bb5: {\n-        _5 = ((_1 as Some).0: u8);       // scope 1 at $DIR/issue-101867.rs:+2:14: +2:15\n-        _0 = const ();                   // scope 0 at $DIR/issue-101867.rs:+0:11: +5:2\n-        StorageDead(_5);                 // scope 1 at $DIR/issue-101867.rs:+5:1: +5:2\n-        StorageDead(_1);                 // scope 0 at $DIR/issue-101867.rs:+5:1: +5:2\n-        return;                          // scope 0 at $DIR/issue-101867.rs:+5:2: +5:2\n+        _5 = ((_1 as Some).0: u8);       // scope 1 at $DIR/issue_101867.rs:+2:14: +2:15\n+        _0 = const ();                   // scope 0 at $DIR/issue_101867.rs:+0:11: +5:2\n+        StorageDead(_5);                 // scope 1 at $DIR/issue_101867.rs:+5:1: +5:2\n+        StorageDead(_1);                 // scope 0 at $DIR/issue_101867.rs:+5:1: +5:2\n+        return;                          // scope 0 at $DIR/issue_101867.rs:+5:2: +5:2\n     }\n \n     bb6: {\n-        StorageDead(_5);                 // scope 1 at $DIR/issue-101867.rs:+5:1: +5:2\n-        goto -> bb1;                     // scope 0 at $DIR/issue-101867.rs:+0:11: +5:2\n+        StorageDead(_5);                 // scope 1 at $DIR/issue_101867.rs:+5:1: +5:2\n+        goto -> bb1;                     // scope 0 at $DIR/issue_101867.rs:+0:11: +5:2\n     }\n \n     bb7 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-101867.rs:+0:1: +5:2\n+        resume;                          // scope 0 at $DIR/issue_101867.rs:+0:1: +5:2\n     }\n }"}, {"sha": "a32d8cb37142c84fe57b503718d0e56b0d575cbd", "filename": "src/test/mir-opt/building/issue_101867.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_101867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_101867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_101867.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/building/issue-101867.rs"}, {"sha": "9182bcaa21fa6afa92f1056c1698d95db2e1def3", "filename": "src/test/mir-opt/building/issue_49232.main.built.after.mir", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_49232.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_49232.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_49232.main.built.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,82 +1,82 @@\n // MIR for `main` after built\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/issue-49232.rs:+0:11: +0:11\n-    let mut _1: ();                      // in scope 0 at $DIR/issue-49232.rs:+0:1: +10:2\n-    let _2: i32;                         // in scope 0 at $DIR/issue-49232.rs:+2:13: +2:19\n-    let mut _3: bool;                    // in scope 0 at $DIR/issue-49232.rs:+3:19: +3:23\n-    let mut _4: !;                       // in scope 0 at $DIR/issue-49232.rs:+5:25: +5:30\n-    let _5: ();                          // in scope 0 at $DIR/issue-49232.rs:+8:9: +8:22\n-    let mut _6: &i32;                    // in scope 0 at $DIR/issue-49232.rs:+8:14: +8:21\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue_49232.rs:+0:11: +0:11\n+    let mut _1: ();                      // in scope 0 at $DIR/issue_49232.rs:+0:1: +10:2\n+    let _2: i32;                         // in scope 0 at $DIR/issue_49232.rs:+2:13: +2:19\n+    let mut _3: bool;                    // in scope 0 at $DIR/issue_49232.rs:+3:19: +3:23\n+    let mut _4: !;                       // in scope 0 at $DIR/issue_49232.rs:+5:25: +5:30\n+    let _5: ();                          // in scope 0 at $DIR/issue_49232.rs:+8:9: +8:22\n+    let mut _6: &i32;                    // in scope 0 at $DIR/issue_49232.rs:+8:14: +8:21\n     scope 1 {\n-        debug beacon => _2;              // in scope 1 at $DIR/issue-49232.rs:+2:13: +2:19\n+        debug beacon => _2;              // in scope 1 at $DIR/issue_49232.rs:+2:13: +2:19\n     }\n \n     bb0: {\n-        goto -> bb1;                     // scope 0 at $DIR/issue-49232.rs:+1:5: +9:6\n+        goto -> bb1;                     // scope 0 at $DIR/issue_49232.rs:+1:5: +9:6\n     }\n \n     bb1: {\n-        falseUnwind -> [real: bb2, cleanup: bb11]; // scope 0 at $DIR/issue-49232.rs:+1:5: +9:6\n+        falseUnwind -> [real: bb2, cleanup: bb11]; // scope 0 at $DIR/issue_49232.rs:+1:5: +9:6\n     }\n \n     bb2: {\n-        StorageLive(_2);                 // scope 0 at $DIR/issue-49232.rs:+2:13: +2:19\n-        StorageLive(_3);                 // scope 0 at $DIR/issue-49232.rs:+3:19: +3:23\n-        _3 = const true;                 // scope 0 at $DIR/issue-49232.rs:+3:19: +3:23\n-        FakeRead(ForMatchedPlace(None), _3); // scope 0 at $DIR/issue-49232.rs:+3:19: +3:23\n-        switchInt(_3) -> [false: bb3, otherwise: bb4]; // scope 0 at $DIR/issue-49232.rs:+3:13: +3:23\n+        StorageLive(_2);                 // scope 0 at $DIR/issue_49232.rs:+2:13: +2:19\n+        StorageLive(_3);                 // scope 0 at $DIR/issue_49232.rs:+3:19: +3:23\n+        _3 = const true;                 // scope 0 at $DIR/issue_49232.rs:+3:19: +3:23\n+        FakeRead(ForMatchedPlace(None), _3); // scope 0 at $DIR/issue_49232.rs:+3:19: +3:23\n+        switchInt(_3) -> [false: bb3, otherwise: bb4]; // scope 0 at $DIR/issue_49232.rs:+3:13: +3:23\n     }\n \n     bb3: {\n-        falseEdge -> [real: bb5, imaginary: bb4]; // scope 0 at $DIR/issue-49232.rs:+4:17: +4:22\n+        falseEdge -> [real: bb5, imaginary: bb4]; // scope 0 at $DIR/issue_49232.rs:+4:17: +4:22\n     }\n \n     bb4: {\n-        _0 = const ();                   // scope 0 at $DIR/issue-49232.rs:+5:25: +5:30\n-        goto -> bb10;                    // scope 0 at $DIR/issue-49232.rs:+5:25: +5:30\n+        _0 = const ();                   // scope 0 at $DIR/issue_49232.rs:+5:25: +5:30\n+        goto -> bb10;                    // scope 0 at $DIR/issue_49232.rs:+5:25: +5:30\n     }\n \n     bb5: {\n-        _2 = const 4_i32;                // scope 0 at $DIR/issue-49232.rs:+4:26: +4:27\n-        goto -> bb8;                     // scope 0 at $DIR/issue-49232.rs:+4:26: +4:27\n+        _2 = const 4_i32;                // scope 0 at $DIR/issue_49232.rs:+4:26: +4:27\n+        goto -> bb8;                     // scope 0 at $DIR/issue_49232.rs:+4:26: +4:27\n     }\n \n     bb6: {\n-        unreachable;                     // scope 0 at $DIR/issue-49232.rs:+5:25: +5:30\n+        unreachable;                     // scope 0 at $DIR/issue_49232.rs:+5:25: +5:30\n     }\n \n     bb7: {\n-        goto -> bb8;                     // scope 0 at $DIR/issue-49232.rs:+6:13: +6:14\n+        goto -> bb8;                     // scope 0 at $DIR/issue_49232.rs:+6:13: +6:14\n     }\n \n     bb8: {\n-        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/issue-49232.rs:+2:13: +2:19\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-49232.rs:+7:10: +7:11\n-        StorageLive(_5);                 // scope 1 at $DIR/issue-49232.rs:+8:9: +8:22\n-        StorageLive(_6);                 // scope 1 at $DIR/issue-49232.rs:+8:14: +8:21\n-        _6 = &_2;                        // scope 1 at $DIR/issue-49232.rs:+8:14: +8:21\n-        _5 = std::mem::drop::<&i32>(move _6) -> [return: bb9, unwind: bb11]; // scope 1 at $DIR/issue-49232.rs:+8:9: +8:22\n+        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/issue_49232.rs:+2:13: +2:19\n+        StorageDead(_3);                 // scope 0 at $DIR/issue_49232.rs:+7:10: +7:11\n+        StorageLive(_5);                 // scope 1 at $DIR/issue_49232.rs:+8:9: +8:22\n+        StorageLive(_6);                 // scope 1 at $DIR/issue_49232.rs:+8:14: +8:21\n+        _6 = &_2;                        // scope 1 at $DIR/issue_49232.rs:+8:14: +8:21\n+        _5 = std::mem::drop::<&i32>(move _6) -> [return: bb9, unwind: bb11]; // scope 1 at $DIR/issue_49232.rs:+8:9: +8:22\n                                          // mir::Constant\n-                                         // + span: $DIR/issue-49232.rs:13:9: 13:13\n+                                         // + span: $DIR/issue_49232.rs:13:9: 13:13\n                                          // + literal: Const { ty: fn(&i32) {std::mem::drop::<&i32>}, val: Value(<ZST>) }\n     }\n \n     bb9: {\n-        StorageDead(_6);                 // scope 1 at $DIR/issue-49232.rs:+8:21: +8:22\n-        StorageDead(_5);                 // scope 1 at $DIR/issue-49232.rs:+8:22: +8:23\n-        _1 = const ();                   // scope 0 at $DIR/issue-49232.rs:+1:10: +9:6\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-49232.rs:+9:5: +9:6\n-        goto -> bb1;                     // scope 0 at $DIR/issue-49232.rs:+1:5: +9:6\n+        StorageDead(_6);                 // scope 1 at $DIR/issue_49232.rs:+8:21: +8:22\n+        StorageDead(_5);                 // scope 1 at $DIR/issue_49232.rs:+8:22: +8:23\n+        _1 = const ();                   // scope 0 at $DIR/issue_49232.rs:+1:10: +9:6\n+        StorageDead(_2);                 // scope 0 at $DIR/issue_49232.rs:+9:5: +9:6\n+        goto -> bb1;                     // scope 0 at $DIR/issue_49232.rs:+1:5: +9:6\n     }\n \n     bb10: {\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-49232.rs:+7:10: +7:11\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-49232.rs:+9:5: +9:6\n-        return;                          // scope 0 at $DIR/issue-49232.rs:+10:2: +10:2\n+        StorageDead(_3);                 // scope 0 at $DIR/issue_49232.rs:+7:10: +7:11\n+        StorageDead(_2);                 // scope 0 at $DIR/issue_49232.rs:+9:5: +9:6\n+        return;                          // scope 0 at $DIR/issue_49232.rs:+10:2: +10:2\n     }\n \n     bb11 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-49232.rs:+0:1: +10:2\n+        resume;                          // scope 0 at $DIR/issue_49232.rs:+0:1: +10:2\n     }\n }"}, {"sha": "7e9f0de81f749808ee3b8efff39fc873266857d0", "filename": "src/test/mir-opt/building/issue_49232.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_49232.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_49232.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fissue_49232.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/building/issue-49232.rs"}, {"sha": "41eb00363bd90d14f74bb624db8a7ebc072f61f9", "filename": "src/test/mir-opt/building/receiver_ptr_mutability.main.built.after.mir", "status": "modified", "additions": 65, "deletions": 65, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fbuilding%2Freceiver_ptr_mutability.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fbuilding%2Freceiver_ptr_mutability.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Freceiver_ptr_mutability.main.built.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,96 +1,96 @@\n // MIR for `main` after built\n \n | User Type Annotations\n-| 0: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut Test) }, span: $DIR/receiver-ptr-mutability.rs:14:14: 14:23, inferred_ty: *mut Test\n-| 1: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut Test) }, span: $DIR/receiver-ptr-mutability.rs:14:14: 14:23, inferred_ty: *mut Test\n-| 2: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }], value: Ty(&&&&*mut Test) }, span: $DIR/receiver-ptr-mutability.rs:18:18: 18:31, inferred_ty: &&&&*mut Test\n-| 3: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }], value: Ty(&&&&*mut Test) }, span: $DIR/receiver-ptr-mutability.rs:18:18: 18:31, inferred_ty: &&&&*mut Test\n+| 0: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut Test) }, span: $DIR/receiver_ptr_mutability.rs:14:14: 14:23, inferred_ty: *mut Test\n+| 1: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut Test) }, span: $DIR/receiver_ptr_mutability.rs:14:14: 14:23, inferred_ty: *mut Test\n+| 2: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }], value: Ty(&&&&*mut Test) }, span: $DIR/receiver_ptr_mutability.rs:18:18: 18:31, inferred_ty: &&&&*mut Test\n+| 3: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }], value: Ty(&&&&*mut Test) }, span: $DIR/receiver_ptr_mutability.rs:18:18: 18:31, inferred_ty: &&&&*mut Test\n |\n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/receiver-ptr-mutability.rs:+0:11: +0:11\n-    let _1: *mut Test as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/receiver-ptr-mutability.rs:+1:9: +1:12\n-    let _2: ();                          // in scope 0 at $DIR/receiver-ptr-mutability.rs:+2:5: +2:12\n-    let mut _3: *const Test;             // in scope 0 at $DIR/receiver-ptr-mutability.rs:+2:5: +2:12\n-    let mut _4: *mut Test;               // in scope 0 at $DIR/receiver-ptr-mutability.rs:+2:5: +2:8\n-    let _6: &&&&*mut Test;               // in scope 0 at $DIR/receiver-ptr-mutability.rs:+5:34: +5:41\n-    let _7: &&&*mut Test;                // in scope 0 at $DIR/receiver-ptr-mutability.rs:+5:35: +5:41\n-    let _8: &&*mut Test;                 // in scope 0 at $DIR/receiver-ptr-mutability.rs:+5:36: +5:41\n-    let _9: &*mut Test;                  // in scope 0 at $DIR/receiver-ptr-mutability.rs:+5:37: +5:41\n-    let _10: ();                         // in scope 0 at $DIR/receiver-ptr-mutability.rs:+6:5: +6:16\n-    let mut _11: *const Test;            // in scope 0 at $DIR/receiver-ptr-mutability.rs:+6:5: +6:16\n-    let mut _12: *mut Test;              // in scope 0 at $DIR/receiver-ptr-mutability.rs:+6:5: +6:16\n+    let mut _0: ();                      // return place in scope 0 at $DIR/receiver_ptr_mutability.rs:+0:11: +0:11\n+    let _1: *mut Test as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/receiver_ptr_mutability.rs:+1:9: +1:12\n+    let _2: ();                          // in scope 0 at $DIR/receiver_ptr_mutability.rs:+2:5: +2:12\n+    let mut _3: *const Test;             // in scope 0 at $DIR/receiver_ptr_mutability.rs:+2:5: +2:12\n+    let mut _4: *mut Test;               // in scope 0 at $DIR/receiver_ptr_mutability.rs:+2:5: +2:8\n+    let _6: &&&&*mut Test;               // in scope 0 at $DIR/receiver_ptr_mutability.rs:+5:34: +5:41\n+    let _7: &&&*mut Test;                // in scope 0 at $DIR/receiver_ptr_mutability.rs:+5:35: +5:41\n+    let _8: &&*mut Test;                 // in scope 0 at $DIR/receiver_ptr_mutability.rs:+5:36: +5:41\n+    let _9: &*mut Test;                  // in scope 0 at $DIR/receiver_ptr_mutability.rs:+5:37: +5:41\n+    let _10: ();                         // in scope 0 at $DIR/receiver_ptr_mutability.rs:+6:5: +6:16\n+    let mut _11: *const Test;            // in scope 0 at $DIR/receiver_ptr_mutability.rs:+6:5: +6:16\n+    let mut _12: *mut Test;              // in scope 0 at $DIR/receiver_ptr_mutability.rs:+6:5: +6:16\n     scope 1 {\n-        debug ptr => _1;                 // in scope 1 at $DIR/receiver-ptr-mutability.rs:+1:9: +1:12\n-        let _5: &&&&*mut Test as UserTypeProjection { base: UserType(2), projs: [] }; // in scope 1 at $DIR/receiver-ptr-mutability.rs:+5:9: +5:16\n+        debug ptr => _1;                 // in scope 1 at $DIR/receiver_ptr_mutability.rs:+1:9: +1:12\n+        let _5: &&&&*mut Test as UserTypeProjection { base: UserType(2), projs: [] }; // in scope 1 at $DIR/receiver_ptr_mutability.rs:+5:9: +5:16\n         scope 2 {\n-            debug ptr_ref => _5;         // in scope 2 at $DIR/receiver-ptr-mutability.rs:+5:9: +5:16\n+            debug ptr_ref => _5;         // in scope 2 at $DIR/receiver_ptr_mutability.rs:+5:9: +5:16\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/receiver-ptr-mutability.rs:+1:9: +1:12\n-        _1 = null_mut::<Test>() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/receiver-ptr-mutability.rs:+1:26: +1:46\n+        StorageLive(_1);                 // scope 0 at $DIR/receiver_ptr_mutability.rs:+1:9: +1:12\n+        _1 = null_mut::<Test>() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/receiver_ptr_mutability.rs:+1:26: +1:46\n                                          // mir::Constant\n-                                         // + span: $DIR/receiver-ptr-mutability.rs:14:26: 14:44\n+                                         // + span: $DIR/receiver_ptr_mutability.rs:14:26: 14:44\n                                          // + literal: Const { ty: fn() -> *mut Test {null_mut::<Test>}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/receiver-ptr-mutability.rs:+1:9: +1:12\n-        AscribeUserType(_1, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 0 at $DIR/receiver-ptr-mutability.rs:+1:14: +1:23\n-        StorageLive(_2);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:+2:5: +2:12\n-        StorageLive(_3);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:+2:5: +2:12\n-        StorageLive(_4);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:+2:5: +2:8\n-        _4 = _1;                         // scope 1 at $DIR/receiver-ptr-mutability.rs:+2:5: +2:8\n-        _3 = move _4 as *const Test (Pointer(MutToConstPointer)); // scope 1 at $DIR/receiver-ptr-mutability.rs:+2:5: +2:12\n-        StorageDead(_4);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:+2:7: +2:8\n-        _2 = Test::x(move _3) -> [return: bb2, unwind: bb4]; // scope 1 at $DIR/receiver-ptr-mutability.rs:+2:5: +2:12\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/receiver_ptr_mutability.rs:+1:9: +1:12\n+        AscribeUserType(_1, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 0 at $DIR/receiver_ptr_mutability.rs:+1:14: +1:23\n+        StorageLive(_2);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+2:5: +2:12\n+        StorageLive(_3);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+2:5: +2:12\n+        StorageLive(_4);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+2:5: +2:8\n+        _4 = _1;                         // scope 1 at $DIR/receiver_ptr_mutability.rs:+2:5: +2:8\n+        _3 = move _4 as *const Test (Pointer(MutToConstPointer)); // scope 1 at $DIR/receiver_ptr_mutability.rs:+2:5: +2:12\n+        StorageDead(_4);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+2:7: +2:8\n+        _2 = Test::x(move _3) -> [return: bb2, unwind: bb4]; // scope 1 at $DIR/receiver_ptr_mutability.rs:+2:5: +2:12\n                                          // mir::Constant\n-                                         // + span: $DIR/receiver-ptr-mutability.rs:15:9: 15:10\n+                                         // + span: $DIR/receiver_ptr_mutability.rs:15:9: 15:10\n                                          // + literal: Const { ty: fn(*const Test) {Test::x}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        StorageDead(_3);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:+2:11: +2:12\n-        StorageDead(_2);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:+2:12: +2:13\n-        StorageLive(_5);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:+5:9: +5:16\n-        StorageLive(_6);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:+5:34: +5:41\n-        StorageLive(_7);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:+5:35: +5:41\n-        StorageLive(_8);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:+5:36: +5:41\n-        StorageLive(_9);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:+5:37: +5:41\n-        _9 = &_1;                        // scope 1 at $DIR/receiver-ptr-mutability.rs:+5:37: +5:41\n-        _8 = &_9;                        // scope 1 at $DIR/receiver-ptr-mutability.rs:+5:36: +5:41\n-        _7 = &_8;                        // scope 1 at $DIR/receiver-ptr-mutability.rs:+5:35: +5:41\n-        _6 = &_7;                        // scope 1 at $DIR/receiver-ptr-mutability.rs:+5:34: +5:41\n-        _5 = &(*_6);                     // scope 1 at $DIR/receiver-ptr-mutability.rs:+5:34: +5:41\n-        FakeRead(ForLet(None), _5);      // scope 1 at $DIR/receiver-ptr-mutability.rs:+5:9: +5:16\n-        AscribeUserType(_5, o, UserTypeProjection { base: UserType(3), projs: [] }); // scope 1 at $DIR/receiver-ptr-mutability.rs:+5:18: +5:31\n-        StorageDead(_6);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:+5:41: +5:42\n-        StorageLive(_10);                // scope 2 at $DIR/receiver-ptr-mutability.rs:+6:5: +6:16\n-        StorageLive(_11);                // scope 2 at $DIR/receiver-ptr-mutability.rs:+6:5: +6:16\n-        StorageLive(_12);                // scope 2 at $DIR/receiver-ptr-mutability.rs:+6:5: +6:16\n-        _12 = (*(*(*(*_5))));            // scope 2 at $DIR/receiver-ptr-mutability.rs:+6:5: +6:16\n-        _11 = move _12 as *const Test (Pointer(MutToConstPointer)); // scope 2 at $DIR/receiver-ptr-mutability.rs:+6:5: +6:16\n-        StorageDead(_12);                // scope 2 at $DIR/receiver-ptr-mutability.rs:+6:11: +6:12\n-        _10 = Test::x(move _11) -> [return: bb3, unwind: bb4]; // scope 2 at $DIR/receiver-ptr-mutability.rs:+6:5: +6:16\n+        StorageDead(_3);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+2:11: +2:12\n+        StorageDead(_2);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+2:12: +2:13\n+        StorageLive(_5);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+5:9: +5:16\n+        StorageLive(_6);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+5:34: +5:41\n+        StorageLive(_7);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+5:35: +5:41\n+        StorageLive(_8);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+5:36: +5:41\n+        StorageLive(_9);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+5:37: +5:41\n+        _9 = &_1;                        // scope 1 at $DIR/receiver_ptr_mutability.rs:+5:37: +5:41\n+        _8 = &_9;                        // scope 1 at $DIR/receiver_ptr_mutability.rs:+5:36: +5:41\n+        _7 = &_8;                        // scope 1 at $DIR/receiver_ptr_mutability.rs:+5:35: +5:41\n+        _6 = &_7;                        // scope 1 at $DIR/receiver_ptr_mutability.rs:+5:34: +5:41\n+        _5 = &(*_6);                     // scope 1 at $DIR/receiver_ptr_mutability.rs:+5:34: +5:41\n+        FakeRead(ForLet(None), _5);      // scope 1 at $DIR/receiver_ptr_mutability.rs:+5:9: +5:16\n+        AscribeUserType(_5, o, UserTypeProjection { base: UserType(3), projs: [] }); // scope 1 at $DIR/receiver_ptr_mutability.rs:+5:18: +5:31\n+        StorageDead(_6);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+5:41: +5:42\n+        StorageLive(_10);                // scope 2 at $DIR/receiver_ptr_mutability.rs:+6:5: +6:16\n+        StorageLive(_11);                // scope 2 at $DIR/receiver_ptr_mutability.rs:+6:5: +6:16\n+        StorageLive(_12);                // scope 2 at $DIR/receiver_ptr_mutability.rs:+6:5: +6:16\n+        _12 = (*(*(*(*_5))));            // scope 2 at $DIR/receiver_ptr_mutability.rs:+6:5: +6:16\n+        _11 = move _12 as *const Test (Pointer(MutToConstPointer)); // scope 2 at $DIR/receiver_ptr_mutability.rs:+6:5: +6:16\n+        StorageDead(_12);                // scope 2 at $DIR/receiver_ptr_mutability.rs:+6:11: +6:12\n+        _10 = Test::x(move _11) -> [return: bb3, unwind: bb4]; // scope 2 at $DIR/receiver_ptr_mutability.rs:+6:5: +6:16\n                                          // mir::Constant\n-                                         // + span: $DIR/receiver-ptr-mutability.rs:19:13: 19:14\n+                                         // + span: $DIR/receiver_ptr_mutability.rs:19:13: 19:14\n                                          // + literal: Const { ty: fn(*const Test) {Test::x}, val: Value(<ZST>) }\n     }\n \n     bb3: {\n-        StorageDead(_11);                // scope 2 at $DIR/receiver-ptr-mutability.rs:+6:15: +6:16\n-        StorageDead(_10);                // scope 2 at $DIR/receiver-ptr-mutability.rs:+6:16: +6:17\n-        _0 = const ();                   // scope 0 at $DIR/receiver-ptr-mutability.rs:+0:11: +7:2\n-        StorageDead(_9);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:+7:1: +7:2\n-        StorageDead(_8);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:+7:1: +7:2\n-        StorageDead(_7);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:+7:1: +7:2\n-        StorageDead(_5);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:+7:1: +7:2\n-        StorageDead(_1);                 // scope 0 at $DIR/receiver-ptr-mutability.rs:+7:1: +7:2\n-        return;                          // scope 0 at $DIR/receiver-ptr-mutability.rs:+7:2: +7:2\n+        StorageDead(_11);                // scope 2 at $DIR/receiver_ptr_mutability.rs:+6:15: +6:16\n+        StorageDead(_10);                // scope 2 at $DIR/receiver_ptr_mutability.rs:+6:16: +6:17\n+        _0 = const ();                   // scope 0 at $DIR/receiver_ptr_mutability.rs:+0:11: +7:2\n+        StorageDead(_9);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+7:1: +7:2\n+        StorageDead(_8);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+7:1: +7:2\n+        StorageDead(_7);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+7:1: +7:2\n+        StorageDead(_5);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+7:1: +7:2\n+        StorageDead(_1);                 // scope 0 at $DIR/receiver_ptr_mutability.rs:+7:1: +7:2\n+        return;                          // scope 0 at $DIR/receiver_ptr_mutability.rs:+7:2: +7:2\n     }\n \n     bb4 (cleanup): {\n-        resume;                          // scope 0 at $DIR/receiver-ptr-mutability.rs:+0:1: +7:2\n+        resume;                          // scope 0 at $DIR/receiver_ptr_mutability.rs:+0:1: +7:2\n     }\n }"}, {"sha": "668530968fe51de0067773ae034bd9fc503b3a12", "filename": "src/test/mir-opt/building/receiver_ptr_mutability.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fbuilding%2Freceiver_ptr_mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fbuilding%2Freceiver_ptr_mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Freceiver_ptr_mutability.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/building/receiver-ptr-mutability.rs"}, {"sha": "a4516026c3b47b748f11661169ba7260ee504f1a", "filename": "src/test/mir-opt/building/simple_match.match_bool.built.after.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fbuilding%2Fsimple_match.match_bool.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fbuilding%2Fsimple_match.match_bool.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fsimple_match.match_bool.built.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,29 +1,29 @@\n // MIR for `match_bool` after built\n \n fn match_bool(_1: bool) -> usize {\n-    debug x => _1;                       // in scope 0 at $DIR/simple-match.rs:+0:15: +0:16\n-    let mut _0: usize;                   // return place in scope 0 at $DIR/simple-match.rs:+0:27: +0:32\n+    debug x => _1;                       // in scope 0 at $DIR/simple_match.rs:+0:15: +0:16\n+    let mut _0: usize;                   // return place in scope 0 at $DIR/simple_match.rs:+0:27: +0:32\n \n     bb0: {\n-        FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/simple-match.rs:+1:11: +1:12\n-        switchInt(_1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/simple-match.rs:+1:5: +1:12\n+        FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/simple_match.rs:+1:11: +1:12\n+        switchInt(_1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/simple_match.rs:+1:5: +1:12\n     }\n \n     bb1: {\n-        falseEdge -> [real: bb3, imaginary: bb2]; // scope 0 at $DIR/simple-match.rs:+2:9: +2:13\n+        falseEdge -> [real: bb3, imaginary: bb2]; // scope 0 at $DIR/simple_match.rs:+2:9: +2:13\n     }\n \n     bb2: {\n-        _0 = const 20_usize;             // scope 0 at $DIR/simple-match.rs:+3:14: +3:16\n-        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:+3:14: +3:16\n+        _0 = const 20_usize;             // scope 0 at $DIR/simple_match.rs:+3:14: +3:16\n+        goto -> bb4;                     // scope 0 at $DIR/simple_match.rs:+3:14: +3:16\n     }\n \n     bb3: {\n-        _0 = const 10_usize;             // scope 0 at $DIR/simple-match.rs:+2:17: +2:19\n-        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:+2:17: +2:19\n+        _0 = const 10_usize;             // scope 0 at $DIR/simple_match.rs:+2:17: +2:19\n+        goto -> bb4;                     // scope 0 at $DIR/simple_match.rs:+2:17: +2:19\n     }\n \n     bb4: {\n-        return;                          // scope 0 at $DIR/simple-match.rs:+5:2: +5:2\n+        return;                          // scope 0 at $DIR/simple_match.rs:+5:2: +5:2\n     }\n }"}, {"sha": "0ef97dde6363173c00a65f7b558cd9c39e8b19c0", "filename": "src/test/mir-opt/building/simple_match.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fbuilding%2Fsimple_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fbuilding%2Fsimple_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fsimple_match.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/building/simple-match.rs"}, {"sha": "028480bdc88b451fba658d4ba6d3603459a73d8a", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR-promoted[0].SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,20 +1,20 @@\n // MIR for `BAR::promoted[0]` after SimplifyCfg-elaborate-drops\n \n promoted[0] in BAR: &[&i32; 1] = {\n-    let mut _0: &[&i32; 1];              // return place in scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n-    let mut _1: [&i32; 1];               // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:35\n-    let mut _2: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:32: +0:34\n-    let mut _3: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:33: +0:34\n+    let mut _0: &[&i32; 1];              // return place in scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:44\n+    let mut _1: [&i32; 1];               // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:35\n+    let mut _2: &i32;                    // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:32: +0:34\n+    let mut _3: &i32;                    // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:33: +0:34\n \n     bb0: {\n-        _3 = const {alloc1: &i32};       // scope 0 at $DIR/const-promotion-extern-static.rs:+0:33: +0:34\n+        _3 = const {alloc1: &i32};       // scope 0 at $DIR/const_promotion_extern_static.rs:+0:33: +0:34\n                                          // mir::Constant\n-                                         // + span: $DIR/const-promotion-extern-static.rs:9:33: 9:34\n+                                         // + span: $DIR/const_promotion_extern_static.rs:9:33: 9:34\n                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc1)) }\n-        _2 = &(*_3);                     // scope 0 at $DIR/const-promotion-extern-static.rs:+0:32: +0:34\n-        _1 = [move _2];                  // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:35\n-        _0 = &_1;                        // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n-        return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n+        _2 = &(*_3);                     // scope 0 at $DIR/const_promotion_extern_static.rs:+0:32: +0:34\n+        _1 = [move _2];                  // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:35\n+        _0 = &_1;                        // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:44\n+        return;                          // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:44\n     }\n }\n "}, {"sha": "2ef4378115fbeaf2c14c10cf5903dfa4b33687cb", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,49 +2,49 @@\n + // MIR for `BAR` after PromoteTemps\n   \n   static mut BAR: *const &i32 = {\n-      let mut _0: *const &i32;             // return place in scope 0 at $DIR/const-promotion-extern-static.rs:+0:17: +0:28\n-      let mut _1: &[&i32];                 // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n-      let mut _2: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n-      let _3: [&i32; 1];                   // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:35\n-      let mut _4: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:32: +0:34\n-      let _5: &i32;                        // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:33: +0:34\n-+     let mut _6: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n+      let mut _0: *const &i32;             // return place in scope 0 at $DIR/const_promotion_extern_static.rs:+0:17: +0:28\n+      let mut _1: &[&i32];                 // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:44\n+      let mut _2: &[&i32; 1];              // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:44\n+      let _3: [&i32; 1];                   // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:35\n+      let mut _4: &i32;                    // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:32: +0:34\n+      let _5: &i32;                        // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:33: +0:34\n++     let mut _6: &[&i32; 1];              // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:44\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n-          StorageLive(_2);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n--         StorageLive(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:35\n--         StorageLive(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:32: +0:34\n--         StorageLive(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:33: +0:34\n--         _5 = const {alloc1: &i32};       // scope 0 at $DIR/const-promotion-extern-static.rs:+0:33: +0:34\n-+         _6 = const _;                    // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n+          StorageLive(_1);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:44\n+          StorageLive(_2);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:44\n+-         StorageLive(_3);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:35\n+-         StorageLive(_4);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:32: +0:34\n+-         StorageLive(_5);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:33: +0:34\n+-         _5 = const {alloc1: &i32};       // scope 0 at $DIR/const_promotion_extern_static.rs:+0:33: +0:34\n++         _6 = const _;                    // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:44\n                                            // mir::Constant\n--                                          // + span: $DIR/const-promotion-extern-static.rs:9:33: 9:34\n+-                                          // + span: $DIR/const_promotion_extern_static.rs:9:33: 9:34\n -                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc1)) }\n--         _4 = &(*_5);                     // scope 0 at $DIR/const-promotion-extern-static.rs:+0:32: +0:34\n--         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:35\n--         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n-+                                          // + span: $DIR/const-promotion-extern-static.rs:9:31: 9:44\n+-         _4 = &(*_5);                     // scope 0 at $DIR/const_promotion_extern_static.rs:+0:32: +0:34\n+-         _3 = [move _4];                  // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:35\n+-         _2 = &_3;                        // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:44\n++                                          // + span: $DIR/const_promotion_extern_static.rs:9:31: 9:44\n +                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(BAR, [], Some(promoted[0])) }\n-+         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n-          _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n--         StorageDead(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:34: +0:35\n-          StorageDead(_2);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:34: +0:35\n-          _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n++         _2 = &(*_6);                     // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:44\n+          _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:44\n+-         StorageDead(_4);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:34: +0:35\n+          StorageDead(_2);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:34: +0:35\n+          _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:44\n                                            // mir::Constant\n-                                           // + span: $DIR/const-promotion-extern-static.rs:9:36: 9:42\n+                                           // + span: $DIR/const_promotion_extern_static.rs:9:36: 9:42\n                                            // + literal: Const { ty: for<'a> fn(&'a [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n--         StorageDead(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:43: +0:44\n--         StorageDead(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:43: +0:44\n-          StorageDead(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:43: +0:44\n-          return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:45\n+-         StorageDead(_5);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:43: +0:44\n+-         StorageDead(_3);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:43: +0:44\n+          StorageDead(_1);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:43: +0:44\n+          return;                          // scope 0 at $DIR/const_promotion_extern_static.rs:+0:1: +0:45\n       }\n   \n       bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:45\n+          resume;                          // scope 0 at $DIR/const_promotion_extern_static.rs:+0:1: +0:45\n       }\n - }\n - "}, {"sha": "476fc49a1fe1bf4f1783205c74b1b9940a0f51cb", "filename": "src/test/mir-opt/const_promotion_extern_static.BOP.built.after.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.built.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,17 +1,17 @@\n // MIR for `BOP` after built\n \n static BOP: &i32 = {\n-    let mut _0: &i32;                    // return place in scope 0 at $DIR/const-promotion-extern-static.rs:+0:13: +0:17\n-    let _1: &i32;                        // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:20: +0:23\n-    let _2: i32;                         // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:21: +0:23\n+    let mut _0: &i32;                    // return place in scope 0 at $DIR/const_promotion_extern_static.rs:+0:13: +0:17\n+    let _1: &i32;                        // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:20: +0:23\n+    let _2: i32;                         // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:21: +0:23\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:20: +0:23\n-        StorageLive(_2);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:21: +0:23\n-        _2 = const 13_i32;               // scope 0 at $DIR/const-promotion-extern-static.rs:+0:21: +0:23\n-        _1 = &_2;                        // scope 0 at $DIR/const-promotion-extern-static.rs:+0:20: +0:23\n-        _0 = &(*_1);                     // scope 0 at $DIR/const-promotion-extern-static.rs:+0:20: +0:23\n-        StorageDead(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:22: +0:23\n-        return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:24\n+        StorageLive(_1);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:20: +0:23\n+        StorageLive(_2);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:21: +0:23\n+        _2 = const 13_i32;               // scope 0 at $DIR/const_promotion_extern_static.rs:+0:21: +0:23\n+        _1 = &_2;                        // scope 0 at $DIR/const_promotion_extern_static.rs:+0:20: +0:23\n+        _0 = &(*_1);                     // scope 0 at $DIR/const_promotion_extern_static.rs:+0:20: +0:23\n+        StorageDead(_1);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:22: +0:23\n+        return;                          // scope 0 at $DIR/const_promotion_extern_static.rs:+0:1: +0:24\n     }\n }"}, {"sha": "41657b53fc12c261b293e302da1365d23fc3e952", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO-promoted[0].SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,20 +1,20 @@\n // MIR for `FOO::promoted[0]` after SimplifyCfg-elaborate-drops\n \n promoted[0] in FOO: &[&i32; 1] = {\n-    let mut _0: &[&i32; 1];              // return place in scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n-    let mut _1: [&i32; 1];               // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:46\n-    let mut _2: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:32: +0:45\n-    let mut _3: *const i32;              // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:42: +0:43\n+    let mut _0: &[&i32; 1];              // return place in scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n+    let mut _1: [&i32; 1];               // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:46\n+    let mut _2: &i32;                    // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:32: +0:45\n+    let mut _3: *const i32;              // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:42: +0:43\n \n     bb0: {\n-        _3 = const {alloc3: *const i32}; // scope 0 at $DIR/const-promotion-extern-static.rs:+0:42: +0:43\n+        _3 = const {alloc3: *const i32}; // scope 0 at $DIR/const_promotion_extern_static.rs:+0:42: +0:43\n                                          // mir::Constant\n-                                         // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n+                                         // + span: $DIR/const_promotion_extern_static.rs:13:42: 13:43\n                                          // + literal: Const { ty: *const i32, val: Value(Scalar(alloc3)) }\n-        _2 = &(*_3);                     // scope 0 at $DIR/const-promotion-extern-static.rs:+0:41: +0:43\n-        _1 = [move _2];                  // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:46\n-        _0 = &_1;                        // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n-        return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n+        _2 = &(*_3);                     // scope 0 at $DIR/const_promotion_extern_static.rs:+0:41: +0:43\n+        _1 = [move _2];                  // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:46\n+        _0 = &_1;                        // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n+        return;                          // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n     }\n }\n "}, {"sha": "25ba0face6bd8c3db615c85eb41a673d9c193ea0", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,51 +2,51 @@\n + // MIR for `FOO` after PromoteTemps\n   \n   static mut FOO: *const &i32 = {\n-      let mut _0: *const &i32;             // return place in scope 0 at $DIR/const-promotion-extern-static.rs:+0:17: +0:28\n-      let mut _1: &[&i32];                 // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n-      let mut _2: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n-      let _3: [&i32; 1];                   // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:46\n-      let mut _4: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:32: +0:45\n-      let _5: *const i32;                  // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:42: +0:43\n-+     let mut _6: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n+      let mut _0: *const &i32;             // return place in scope 0 at $DIR/const_promotion_extern_static.rs:+0:17: +0:28\n+      let mut _1: &[&i32];                 // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n+      let mut _2: &[&i32; 1];              // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n+      let _3: [&i32; 1];                   // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:46\n+      let mut _4: &i32;                    // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:32: +0:45\n+      let _5: *const i32;                  // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:42: +0:43\n++     let mut _6: &[&i32; 1];              // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n       scope 1 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n-          StorageLive(_2);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n--         StorageLive(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:46\n--         StorageLive(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:32: +0:45\n--         StorageLive(_5);                 // scope 1 at $DIR/const-promotion-extern-static.rs:+0:42: +0:43\n--         _5 = const {alloc3: *const i32}; // scope 1 at $DIR/const-promotion-extern-static.rs:+0:42: +0:43\n-+         _6 = const _;                    // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n+          StorageLive(_1);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n+          StorageLive(_2);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n+-         StorageLive(_3);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:46\n+-         StorageLive(_4);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:32: +0:45\n+-         StorageLive(_5);                 // scope 1 at $DIR/const_promotion_extern_static.rs:+0:42: +0:43\n+-         _5 = const {alloc3: *const i32}; // scope 1 at $DIR/const_promotion_extern_static.rs:+0:42: +0:43\n++         _6 = const _;                    // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n                                            // mir::Constant\n--                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n+-                                          // + span: $DIR/const_promotion_extern_static.rs:13:42: 13:43\n -                                          // + literal: Const { ty: *const i32, val: Value(Scalar(alloc3)) }\n--         _4 = &(*_5);                     // scope 1 at $DIR/const-promotion-extern-static.rs:+0:41: +0:43\n--         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:46\n--         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n-+                                          // + span: $DIR/const-promotion-extern-static.rs:13:31: 13:55\n+-         _4 = &(*_5);                     // scope 1 at $DIR/const_promotion_extern_static.rs:+0:41: +0:43\n+-         _3 = [move _4];                  // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:46\n+-         _2 = &_3;                        // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n++                                          // + span: $DIR/const_promotion_extern_static.rs:13:31: 13:55\n +                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(FOO, [], Some(promoted[0])) }\n-+         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n-          _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n--         StorageDead(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:45: +0:46\n-          StorageDead(_2);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:45: +0:46\n-          _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n++         _2 = &(*_6);                     // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n+          _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n+-         StorageDead(_4);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:45: +0:46\n+          StorageDead(_2);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:45: +0:46\n+          _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n                                            // mir::Constant\n-                                           // + span: $DIR/const-promotion-extern-static.rs:13:47: 13:53\n+                                           // + span: $DIR/const_promotion_extern_static.rs:13:47: 13:53\n                                            // + literal: Const { ty: for<'a> fn(&'a [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n--         StorageDead(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:54: +0:55\n--         StorageDead(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:54: +0:55\n-          StorageDead(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:54: +0:55\n-          return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:56\n+-         StorageDead(_5);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:54: +0:55\n+-         StorageDead(_3);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:54: +0:55\n+          StorageDead(_1);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:54: +0:55\n+          return;                          // scope 0 at $DIR/const_promotion_extern_static.rs:+0:1: +0:56\n       }\n   \n       bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:56\n+          resume;                          // scope 0 at $DIR/const_promotion_extern_static.rs:+0:1: +0:56\n       }\n   }\n - "}, {"sha": "e4261cfe504470dd4d8662f91db7b21f4b0a0a2e", "filename": "src/test/mir-opt/const_promotion_extern_static.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/const-promotion-extern-static.rs"}, {"sha": "8b3b9d0a4c1bbd87457eeb1322931cb4a80705a3", "filename": "src/test/mir-opt/const_prop/control_flow_simplification.hello.ConstProp.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,15 +2,15 @@\n + // MIR for `hello` after ConstProp\n   \n   fn hello() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/control-flow-simplification.rs:+0:14: +0:14\n-      let mut _1: bool;                    // in scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n+      let mut _0: ();                      // return place in scope 0 at $DIR/control_flow_simplification.rs:+0:14: +0:14\n+      let mut _1: bool;                    // in scope 0 at $DIR/control_flow_simplification.rs:+1:8: +1:21\n       let mut _2: !;                       // in scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n-          _1 = const _;                    // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n--         switchInt(move _1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n-+         switchInt(const false) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n+          StorageLive(_1);                 // scope 0 at $DIR/control_flow_simplification.rs:+1:8: +1:21\n+          _1 = const _;                    // scope 0 at $DIR/control_flow_simplification.rs:+1:8: +1:21\n+-         switchInt(move _1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control_flow_simplification.rs:+1:8: +1:21\n++         switchInt(const false) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control_flow_simplification.rs:+1:8: +1:21\n       }\n   \n       bb1: {\n@@ -25,9 +25,9 @@\n       }\n   \n       bb2: {\n-          nop;                             // scope 0 at $DIR/control-flow-simplification.rs:+3:6: +3:6\n-          StorageDead(_1);                 // scope 0 at $DIR/control-flow-simplification.rs:+3:5: +3:6\n-          return;                          // scope 0 at $DIR/control-flow-simplification.rs:+4:2: +4:2\n+          nop;                             // scope 0 at $DIR/control_flow_simplification.rs:+3:6: +3:6\n+          StorageDead(_1);                 // scope 0 at $DIR/control_flow_simplification.rs:+3:5: +3:6\n+          return;                          // scope 0 at $DIR/control_flow_simplification.rs:+4:2: +4:2\n       }\n   }\n   "}, {"sha": "9f7528f0ce170e3b547c45c7845377b4dadcea2f", "filename": "src/test/mir-opt/const_prop/control_flow_simplification.hello.PreCodegen.before.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.PreCodegen.before.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,9 +1,9 @@\n // MIR for `hello` before PreCodegen\n \n fn hello() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/control-flow-simplification.rs:+0:14: +0:14\n+    let mut _0: ();                      // return place in scope 0 at $DIR/control_flow_simplification.rs:+0:14: +0:14\n \n     bb0: {\n-        return;                          // scope 0 at $DIR/control-flow-simplification.rs:+4:2: +4:2\n+        return;                          // scope 0 at $DIR/control_flow_simplification.rs:+4:2: +4:2\n     }\n }"}, {"sha": "7dbe8e7344b1227bb4cbf6389efb961301a4e5bc", "filename": "src/test/mir-opt/const_prop/control_flow_simplification.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/const_prop/control-flow-simplification.rs"}, {"sha": "7d8e647cbcede741f0656e056fbbd66205546905", "filename": "src/test/mir-opt/const_prop/issue_66971.main.ConstProp.diff", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,32 +2,32 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/issue-66971.rs:+0:11: +0:11\n-      let _1: ();                          // in scope 0 at $DIR/issue-66971.rs:+1:5: +1:23\n-      let mut _2: ((), u8, u8);            // in scope 0 at $DIR/issue-66971.rs:+1:12: +1:22\n-      let mut _3: ();                      // in scope 0 at $DIR/issue-66971.rs:+1:13: +1:15\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue_66971.rs:+0:11: +0:11\n+      let _1: ();                          // in scope 0 at $DIR/issue_66971.rs:+1:5: +1:23\n+      let mut _2: ((), u8, u8);            // in scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n+      let mut _3: ();                      // in scope 0 at $DIR/issue_66971.rs:+1:13: +1:15\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/issue-66971.rs:+1:5: +1:23\n-          StorageLive(_2);                 // scope 0 at $DIR/issue-66971.rs:+1:12: +1:22\n-          StorageLive(_3);                 // scope 0 at $DIR/issue-66971.rs:+1:13: +1:15\n-          nop;                             // scope 0 at $DIR/issue-66971.rs:+1:13: +1:15\n-          Deinit(_2);                      // scope 0 at $DIR/issue-66971.rs:+1:12: +1:22\n-          nop;                             // scope 0 at $DIR/issue-66971.rs:+1:12: +1:22\n-          (_2.1: u8) = const 0_u8;         // scope 0 at $DIR/issue-66971.rs:+1:12: +1:22\n-          (_2.2: u8) = const 0_u8;         // scope 0 at $DIR/issue-66971.rs:+1:12: +1:22\n-          StorageDead(_3);                 // scope 0 at $DIR/issue-66971.rs:+1:21: +1:22\n-          _1 = encode(move _2) -> bb1;     // scope 0 at $DIR/issue-66971.rs:+1:5: +1:23\n+          StorageLive(_1);                 // scope 0 at $DIR/issue_66971.rs:+1:5: +1:23\n+          StorageLive(_2);                 // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n+          StorageLive(_3);                 // scope 0 at $DIR/issue_66971.rs:+1:13: +1:15\n+          nop;                             // scope 0 at $DIR/issue_66971.rs:+1:13: +1:15\n+          Deinit(_2);                      // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n+          nop;                             // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n+          (_2.1: u8) = const 0_u8;         // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n+          (_2.2: u8) = const 0_u8;         // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n+          StorageDead(_3);                 // scope 0 at $DIR/issue_66971.rs:+1:21: +1:22\n+          _1 = encode(move _2) -> bb1;     // scope 0 at $DIR/issue_66971.rs:+1:5: +1:23\n                                            // mir::Constant\n-                                           // + span: $DIR/issue-66971.rs:17:5: 17:11\n+                                           // + span: $DIR/issue_66971.rs:17:5: 17:11\n                                            // + literal: Const { ty: fn(((), u8, u8)) {encode}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_2);                 // scope 0 at $DIR/issue-66971.rs:+1:22: +1:23\n-          StorageDead(_1);                 // scope 0 at $DIR/issue-66971.rs:+1:23: +1:24\n-          nop;                             // scope 0 at $DIR/issue-66971.rs:+0:11: +2:2\n-          return;                          // scope 0 at $DIR/issue-66971.rs:+2:2: +2:2\n+          StorageDead(_2);                 // scope 0 at $DIR/issue_66971.rs:+1:22: +1:23\n+          StorageDead(_1);                 // scope 0 at $DIR/issue_66971.rs:+1:23: +1:24\n+          nop;                             // scope 0 at $DIR/issue_66971.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/issue_66971.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "6ca03438ef3965239bb0c18b0ee68129627fe066", "filename": "src/test/mir-opt/const_prop/issue_66971.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/const_prop/issue-66971.rs"}, {"sha": "79cd8bf483969fb1bfb98a0003e352be82408574", "filename": "src/test/mir-opt/const_prop/issue_67019.main.ConstProp.diff", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,33 +2,33 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/issue-67019.rs:+0:11: +0:11\n-      let _1: ();                          // in scope 0 at $DIR/issue-67019.rs:+1:5: +1:20\n-      let mut _2: ((u8, u8),);             // in scope 0 at $DIR/issue-67019.rs:+1:10: +1:19\n-      let mut _3: (u8, u8);                // in scope 0 at $DIR/issue-67019.rs:+1:11: +1:17\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue_67019.rs:+0:11: +0:11\n+      let _1: ();                          // in scope 0 at $DIR/issue_67019.rs:+1:5: +1:20\n+      let mut _2: ((u8, u8),);             // in scope 0 at $DIR/issue_67019.rs:+1:10: +1:19\n+      let mut _3: (u8, u8);                // in scope 0 at $DIR/issue_67019.rs:+1:11: +1:17\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/issue-67019.rs:+1:5: +1:20\n-          StorageLive(_2);                 // scope 0 at $DIR/issue-67019.rs:+1:10: +1:19\n-          StorageLive(_3);                 // scope 0 at $DIR/issue-67019.rs:+1:11: +1:17\n-          Deinit(_3);                      // scope 0 at $DIR/issue-67019.rs:+1:11: +1:17\n-          (_3.0: u8) = const 1_u8;         // scope 0 at $DIR/issue-67019.rs:+1:11: +1:17\n-          (_3.1: u8) = const 2_u8;         // scope 0 at $DIR/issue-67019.rs:+1:11: +1:17\n-          Deinit(_2);                      // scope 0 at $DIR/issue-67019.rs:+1:10: +1:19\n--         (_2.0: (u8, u8)) = move _3;      // scope 0 at $DIR/issue-67019.rs:+1:10: +1:19\n-+         (_2.0: (u8, u8)) = const (1_u8, 2_u8); // scope 0 at $DIR/issue-67019.rs:+1:10: +1:19\n-          StorageDead(_3);                 // scope 0 at $DIR/issue-67019.rs:+1:18: +1:19\n-          _1 = test(move _2) -> bb1;       // scope 0 at $DIR/issue-67019.rs:+1:5: +1:20\n+          StorageLive(_1);                 // scope 0 at $DIR/issue_67019.rs:+1:5: +1:20\n+          StorageLive(_2);                 // scope 0 at $DIR/issue_67019.rs:+1:10: +1:19\n+          StorageLive(_3);                 // scope 0 at $DIR/issue_67019.rs:+1:11: +1:17\n+          Deinit(_3);                      // scope 0 at $DIR/issue_67019.rs:+1:11: +1:17\n+          (_3.0: u8) = const 1_u8;         // scope 0 at $DIR/issue_67019.rs:+1:11: +1:17\n+          (_3.1: u8) = const 2_u8;         // scope 0 at $DIR/issue_67019.rs:+1:11: +1:17\n+          Deinit(_2);                      // scope 0 at $DIR/issue_67019.rs:+1:10: +1:19\n+-         (_2.0: (u8, u8)) = move _3;      // scope 0 at $DIR/issue_67019.rs:+1:10: +1:19\n++         (_2.0: (u8, u8)) = const (1_u8, 2_u8); // scope 0 at $DIR/issue_67019.rs:+1:10: +1:19\n+          StorageDead(_3);                 // scope 0 at $DIR/issue_67019.rs:+1:18: +1:19\n+          _1 = test(move _2) -> bb1;       // scope 0 at $DIR/issue_67019.rs:+1:5: +1:20\n                                            // mir::Constant\n-                                           // + span: $DIR/issue-67019.rs:12:5: 12:9\n+                                           // + span: $DIR/issue_67019.rs:12:5: 12:9\n                                            // + literal: Const { ty: fn(((u8, u8),)) {test}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_2);                 // scope 0 at $DIR/issue-67019.rs:+1:19: +1:20\n-          StorageDead(_1);                 // scope 0 at $DIR/issue-67019.rs:+1:20: +1:21\n-          nop;                             // scope 0 at $DIR/issue-67019.rs:+0:11: +2:2\n-          return;                          // scope 0 at $DIR/issue-67019.rs:+2:2: +2:2\n+          StorageDead(_2);                 // scope 0 at $DIR/issue_67019.rs:+1:19: +1:20\n+          StorageDead(_1);                 // scope 0 at $DIR/issue_67019.rs:+1:20: +1:21\n+          nop;                             // scope 0 at $DIR/issue_67019.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/issue_67019.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "ffc6fa1f290f3e06210bfd90fe4eb63bc0b70972", "filename": "src/test/mir-opt/const_prop/issue_67019.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/const_prop/issue-67019.rs"}, {"sha": "08481777ed494e81293c32dce0e85aa77ba168ca", "filename": "src/test/mir-opt/exponential_or.match_tuple.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,83 +1,83 @@\n // MIR for `match_tuple` after SimplifyCfg-initial\n \n fn match_tuple(_1: (u32, bool, Option<i32>, u32)) -> u32 {\n-    debug x => _1;                       // in scope 0 at $DIR/exponential-or.rs:+0:16: +0:17\n-    let mut _0: u32;                     // return place in scope 0 at $DIR/exponential-or.rs:+0:53: +0:56\n-    let mut _2: isize;                   // in scope 0 at $DIR/exponential-or.rs:+2:37: +2:48\n-    let mut _3: bool;                    // in scope 0 at $DIR/exponential-or.rs:+2:70: +2:77\n-    let mut _4: bool;                    // in scope 0 at $DIR/exponential-or.rs:+2:70: +2:77\n-    let mut _5: bool;                    // in scope 0 at $DIR/exponential-or.rs:+2:62: +2:67\n-    let mut _6: bool;                    // in scope 0 at $DIR/exponential-or.rs:+2:62: +2:67\n-    let _7: u32;                         // in scope 0 at $DIR/exponential-or.rs:+2:10: +2:11\n-    let _8: u32;                         // in scope 0 at $DIR/exponential-or.rs:+2:57: +2:58\n-    let mut _9: u32;                     // in scope 0 at $DIR/exponential-or.rs:+2:83: +2:84\n-    let mut _10: u32;                    // in scope 0 at $DIR/exponential-or.rs:+2:87: +2:88\n+    debug x => _1;                       // in scope 0 at $DIR/exponential_or.rs:+0:16: +0:17\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/exponential_or.rs:+0:53: +0:56\n+    let mut _2: isize;                   // in scope 0 at $DIR/exponential_or.rs:+2:37: +2:48\n+    let mut _3: bool;                    // in scope 0 at $DIR/exponential_or.rs:+2:70: +2:77\n+    let mut _4: bool;                    // in scope 0 at $DIR/exponential_or.rs:+2:70: +2:77\n+    let mut _5: bool;                    // in scope 0 at $DIR/exponential_or.rs:+2:62: +2:67\n+    let mut _6: bool;                    // in scope 0 at $DIR/exponential_or.rs:+2:62: +2:67\n+    let _7: u32;                         // in scope 0 at $DIR/exponential_or.rs:+2:10: +2:11\n+    let _8: u32;                         // in scope 0 at $DIR/exponential_or.rs:+2:57: +2:58\n+    let mut _9: u32;                     // in scope 0 at $DIR/exponential_or.rs:+2:83: +2:84\n+    let mut _10: u32;                    // in scope 0 at $DIR/exponential_or.rs:+2:87: +2:88\n     scope 1 {\n-        debug y => _7;                   // in scope 1 at $DIR/exponential-or.rs:+2:10: +2:11\n-        debug z => _8;                   // in scope 1 at $DIR/exponential-or.rs:+2:57: +2:58\n+        debug y => _7;                   // in scope 1 at $DIR/exponential_or.rs:+2:10: +2:11\n+        debug z => _8;                   // in scope 1 at $DIR/exponential_or.rs:+2:57: +2:58\n     }\n \n     bb0: {\n-        FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/exponential-or.rs:+1:11: +1:12\n-        switchInt((_1.0: u32)) -> [1_u32: bb2, 4_u32: bb2, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:+2:15: +2:20\n+        FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/exponential_or.rs:+1:11: +1:12\n+        switchInt((_1.0: u32)) -> [1_u32: bb2, 4_u32: bb2, otherwise: bb1]; // scope 0 at $DIR/exponential_or.rs:+2:15: +2:20\n     }\n \n     bb1: {\n-        _0 = const 0_u32;                // scope 0 at $DIR/exponential-or.rs:+3:14: +3:15\n-        goto -> bb10;                    // scope 0 at $DIR/exponential-or.rs:+3:14: +3:15\n+        _0 = const 0_u32;                // scope 0 at $DIR/exponential_or.rs:+3:14: +3:15\n+        goto -> bb10;                    // scope 0 at $DIR/exponential_or.rs:+3:14: +3:15\n     }\n \n     bb2: {\n-        _2 = discriminant((_1.2: std::option::Option<i32>)); // scope 0 at $DIR/exponential-or.rs:+2:37: +2:55\n-        switchInt(move _2) -> [0_isize: bb4, 1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:+2:37: +2:55\n+        _2 = discriminant((_1.2: std::option::Option<i32>)); // scope 0 at $DIR/exponential_or.rs:+2:37: +2:55\n+        switchInt(move _2) -> [0_isize: bb4, 1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/exponential_or.rs:+2:37: +2:55\n     }\n \n     bb3: {\n-        switchInt((((_1.2: std::option::Option<i32>) as Some).0: i32)) -> [1_i32: bb4, 8_i32: bb4, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:+2:37: +2:55\n+        switchInt((((_1.2: std::option::Option<i32>) as Some).0: i32)) -> [1_i32: bb4, 8_i32: bb4, otherwise: bb1]; // scope 0 at $DIR/exponential_or.rs:+2:37: +2:55\n     }\n \n     bb4: {\n-        _5 = Le(const 6_u32, (_1.3: u32)); // scope 0 at $DIR/exponential-or.rs:+2:62: +2:67\n-        switchInt(move _5) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/exponential-or.rs:+2:62: +2:67\n+        _5 = Le(const 6_u32, (_1.3: u32)); // scope 0 at $DIR/exponential_or.rs:+2:62: +2:67\n+        switchInt(move _5) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/exponential_or.rs:+2:62: +2:67\n     }\n \n     bb5: {\n-        _6 = Le((_1.3: u32), const 9_u32); // scope 0 at $DIR/exponential-or.rs:+2:62: +2:67\n-        switchInt(move _6) -> [false: bb6, otherwise: bb8]; // scope 0 at $DIR/exponential-or.rs:+2:62: +2:67\n+        _6 = Le((_1.3: u32), const 9_u32); // scope 0 at $DIR/exponential_or.rs:+2:62: +2:67\n+        switchInt(move _6) -> [false: bb6, otherwise: bb8]; // scope 0 at $DIR/exponential_or.rs:+2:62: +2:67\n     }\n \n     bb6: {\n-        _3 = Le(const 13_u32, (_1.3: u32)); // scope 0 at $DIR/exponential-or.rs:+2:70: +2:77\n-        switchInt(move _3) -> [false: bb1, otherwise: bb7]; // scope 0 at $DIR/exponential-or.rs:+2:70: +2:77\n+        _3 = Le(const 13_u32, (_1.3: u32)); // scope 0 at $DIR/exponential_or.rs:+2:70: +2:77\n+        switchInt(move _3) -> [false: bb1, otherwise: bb7]; // scope 0 at $DIR/exponential_or.rs:+2:70: +2:77\n     }\n \n     bb7: {\n-        _4 = Le((_1.3: u32), const 16_u32); // scope 0 at $DIR/exponential-or.rs:+2:70: +2:77\n-        switchInt(move _4) -> [false: bb1, otherwise: bb8]; // scope 0 at $DIR/exponential-or.rs:+2:70: +2:77\n+        _4 = Le((_1.3: u32), const 16_u32); // scope 0 at $DIR/exponential_or.rs:+2:70: +2:77\n+        switchInt(move _4) -> [false: bb1, otherwise: bb8]; // scope 0 at $DIR/exponential_or.rs:+2:70: +2:77\n     }\n \n     bb8: {\n-        falseEdge -> [real: bb9, imaginary: bb1]; // scope 0 at $DIR/exponential-or.rs:+2:9: +2:79\n+        falseEdge -> [real: bb9, imaginary: bb1]; // scope 0 at $DIR/exponential_or.rs:+2:9: +2:79\n     }\n \n     bb9: {\n-        StorageLive(_7);                 // scope 0 at $DIR/exponential-or.rs:+2:10: +2:11\n-        _7 = (_1.0: u32);                // scope 0 at $DIR/exponential-or.rs:+2:10: +2:11\n-        StorageLive(_8);                 // scope 0 at $DIR/exponential-or.rs:+2:57: +2:58\n-        _8 = (_1.3: u32);                // scope 0 at $DIR/exponential-or.rs:+2:57: +2:58\n-        StorageLive(_9);                 // scope 1 at $DIR/exponential-or.rs:+2:83: +2:84\n-        _9 = _7;                         // scope 1 at $DIR/exponential-or.rs:+2:83: +2:84\n-        StorageLive(_10);                // scope 1 at $DIR/exponential-or.rs:+2:87: +2:88\n-        _10 = _8;                        // scope 1 at $DIR/exponential-or.rs:+2:87: +2:88\n-        _0 = BitXor(move _9, move _10);  // scope 1 at $DIR/exponential-or.rs:+2:83: +2:88\n-        StorageDead(_10);                // scope 1 at $DIR/exponential-or.rs:+2:87: +2:88\n-        StorageDead(_9);                 // scope 1 at $DIR/exponential-or.rs:+2:87: +2:88\n-        StorageDead(_8);                 // scope 0 at $DIR/exponential-or.rs:+2:87: +2:88\n-        StorageDead(_7);                 // scope 0 at $DIR/exponential-or.rs:+2:87: +2:88\n-        goto -> bb10;                    // scope 0 at $DIR/exponential-or.rs:+2:87: +2:88\n+        StorageLive(_7);                 // scope 0 at $DIR/exponential_or.rs:+2:10: +2:11\n+        _7 = (_1.0: u32);                // scope 0 at $DIR/exponential_or.rs:+2:10: +2:11\n+        StorageLive(_8);                 // scope 0 at $DIR/exponential_or.rs:+2:57: +2:58\n+        _8 = (_1.3: u32);                // scope 0 at $DIR/exponential_or.rs:+2:57: +2:58\n+        StorageLive(_9);                 // scope 1 at $DIR/exponential_or.rs:+2:83: +2:84\n+        _9 = _7;                         // scope 1 at $DIR/exponential_or.rs:+2:83: +2:84\n+        StorageLive(_10);                // scope 1 at $DIR/exponential_or.rs:+2:87: +2:88\n+        _10 = _8;                        // scope 1 at $DIR/exponential_or.rs:+2:87: +2:88\n+        _0 = BitXor(move _9, move _10);  // scope 1 at $DIR/exponential_or.rs:+2:83: +2:88\n+        StorageDead(_10);                // scope 1 at $DIR/exponential_or.rs:+2:87: +2:88\n+        StorageDead(_9);                 // scope 1 at $DIR/exponential_or.rs:+2:87: +2:88\n+        StorageDead(_8);                 // scope 0 at $DIR/exponential_or.rs:+2:87: +2:88\n+        StorageDead(_7);                 // scope 0 at $DIR/exponential_or.rs:+2:87: +2:88\n+        goto -> bb10;                    // scope 0 at $DIR/exponential_or.rs:+2:87: +2:88\n     }\n \n     bb10: {\n-        return;                          // scope 0 at $DIR/exponential-or.rs:+5:2: +5:2\n+        return;                          // scope 0 at $DIR/exponential_or.rs:+5:2: +5:2\n     }\n }"}, {"sha": "0b8be8385dde41ec2349f99258287b96a9ba6a19", "filename": "src/test/mir-opt/exponential_or.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fexponential_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fexponential_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fexponential_or.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/exponential-or.rs"}, {"sha": "64fbdc9ded13950469c494ad1c25c134c269b153", "filename": "src/test/mir-opt/fn_ptr_shim.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Ffn_ptr_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Ffn_ptr_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffn_ptr_shim.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/fn-ptr-shim.rs"}, {"sha": "c3b08bf0648925498c1891d1ecda038e9dfd02db", "filename": "src/test/mir-opt/generator_drop_cleanup.main-{closure#0}.generator_drop.0.mir", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -14,71 +14,71 @@\n     },\n } */\n \n-fn main::{closure#0}(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15: 10:17]) -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n-    let mut _2: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n-    let _3: std::string::String;         // in scope 0 at $DIR/generator-drop-cleanup.rs:+1:13: +1:15\n-    let _4: ();                          // in scope 0 at $DIR/generator-drop-cleanup.rs:+2:9: +2:14\n-    let mut _5: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:+2:9: +2:14\n-    let mut _6: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:18: +0:18\n-    let mut _7: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n-    let mut _8: u32;                     // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n+fn main::{closure#0}(_1: *mut [generator@$DIR/generator_drop_cleanup.rs:10:15: 10:17]) -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n+    let mut _2: ();                      // in scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n+    let _3: std::string::String;         // in scope 0 at $DIR/generator_drop_cleanup.rs:+1:13: +1:15\n+    let _4: ();                          // in scope 0 at $DIR/generator_drop_cleanup.rs:+2:9: +2:14\n+    let mut _5: ();                      // in scope 0 at $DIR/generator_drop_cleanup.rs:+2:9: +2:14\n+    let mut _6: ();                      // in scope 0 at $DIR/generator_drop_cleanup.rs:+0:18: +0:18\n+    let mut _7: ();                      // in scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n+    let mut _8: u32;                     // in scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n     scope 1 {\n-        debug _s => (((*_1) as variant#3).0: std::string::String); // in scope 1 at $DIR/generator-drop-cleanup.rs:+1:13: +1:15\n+        debug _s => (((*_1) as variant#3).0: std::string::String); // in scope 1 at $DIR/generator_drop_cleanup.rs:+1:13: +1:15\n     }\n \n     bb0: {\n-        _8 = discriminant((*_1));        // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n-        switchInt(move _8) -> [0_u32: bb7, 3_u32: bb10, otherwise: bb11]; // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n+        _8 = discriminant((*_1));        // scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n+        switchInt(move _8) -> [0_u32: bb7, 3_u32: bb10, otherwise: bb11]; // scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n     }\n \n     bb1: {\n-        StorageDead(_5);                 // scope 1 at $DIR/generator-drop-cleanup.rs:+2:13: +2:14\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-drop-cleanup.rs:+2:14: +2:15\n-        drop((((*_1) as variant#3).0: std::string::String)) -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n+        StorageDead(_5);                 // scope 1 at $DIR/generator_drop_cleanup.rs:+2:13: +2:14\n+        StorageDead(_4);                 // scope 1 at $DIR/generator_drop_cleanup.rs:+2:14: +2:15\n+        drop((((*_1) as variant#3).0: std::string::String)) -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/generator_drop_cleanup.rs:+3:5: +3:6\n     }\n \n     bb2: {\n-        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n-        goto -> bb8;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n+        nop;                             // scope 0 at $DIR/generator_drop_cleanup.rs:+3:5: +3:6\n+        goto -> bb8;                     // scope 0 at $DIR/generator_drop_cleanup.rs:+3:5: +3:6\n     }\n \n     bb3: {\n-        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n+        return;                          // scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n     }\n \n     bb4 (cleanup): {\n-        resume;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n+        resume;                          // scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n     }\n \n     bb5 (cleanup): {\n-        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n-        goto -> bb4;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n+        nop;                             // scope 0 at $DIR/generator_drop_cleanup.rs:+3:5: +3:6\n+        goto -> bb4;                     // scope 0 at $DIR/generator_drop_cleanup.rs:+3:5: +3:6\n     }\n \n     bb6: {\n-        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n+        return;                          // scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n     }\n \n     bb7: {\n-        goto -> bb9;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n+        goto -> bb9;                     // scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n     }\n \n     bb8: {\n-        goto -> bb3;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n+        goto -> bb3;                     // scope 0 at $DIR/generator_drop_cleanup.rs:+3:5: +3:6\n     }\n \n     bb9: {\n-        goto -> bb6;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n+        goto -> bb6;                     // scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n     }\n \n     bb10: {\n-        StorageLive(_4);                 // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n-        StorageLive(_5);                 // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n-        goto -> bb1;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n+        StorageLive(_4);                 // scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n+        StorageLive(_5);                 // scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n+        goto -> bb1;                     // scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n     }\n \n     bb11: {\n-        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n+        return;                          // scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n     }\n }"}, {"sha": "82c1292cbd05c603f0116cb962687acb4a6b7532", "filename": "src/test/mir-opt/generator_drop_cleanup.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/generator-drop-cleanup.rs"}, {"sha": "cfbe0aaf252dde2cd95d9c3a0ef1dab1c894cfee", "filename": "src/test/mir-opt/generator_storage_dead_unwind.main-{closure#0}.StateTransform.before.mir", "status": "modified", "additions": 61, "deletions": 61, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,124 +1,124 @@\n // MIR for `main::{closure#0}` before StateTransform\n \n-fn main::{closure#0}(_1: [generator@$DIR/generator-storage-dead-unwind.rs:22:16: 22:18], _2: ()) -> ()\n+fn main::{closure#0}(_1: [generator@$DIR/generator_storage_dead_unwind.rs:22:16: 22:18], _2: ()) -> ()\n yields ()\n  {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:19: +0:19\n-    let _3: Foo;                         // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+1:13: +1:14\n-    let _5: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n-    let mut _6: ();                      // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n-    let _7: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+4:9: +4:16\n-    let mut _8: Foo;                     // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+4:14: +4:15\n-    let _9: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+5:9: +5:16\n-    let mut _10: Bar;                    // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+5:14: +5:15\n+    let mut _0: ();                      // return place in scope 0 at $DIR/generator_storage_dead_unwind.rs:+0:19: +0:19\n+    let _3: Foo;                         // in scope 0 at $DIR/generator_storage_dead_unwind.rs:+1:13: +1:14\n+    let _5: ();                          // in scope 0 at $DIR/generator_storage_dead_unwind.rs:+3:9: +3:14\n+    let mut _6: ();                      // in scope 0 at $DIR/generator_storage_dead_unwind.rs:+3:9: +3:14\n+    let _7: ();                          // in scope 0 at $DIR/generator_storage_dead_unwind.rs:+4:9: +4:16\n+    let mut _8: Foo;                     // in scope 0 at $DIR/generator_storage_dead_unwind.rs:+4:14: +4:15\n+    let _9: ();                          // in scope 0 at $DIR/generator_storage_dead_unwind.rs:+5:9: +5:16\n+    let mut _10: Bar;                    // in scope 0 at $DIR/generator_storage_dead_unwind.rs:+5:14: +5:15\n     scope 1 {\n-        debug a => _3;                   // in scope 1 at $DIR/generator-storage-dead-unwind.rs:+1:13: +1:14\n-        let _4: Bar;                     // in scope 1 at $DIR/generator-storage-dead-unwind.rs:+2:13: +2:14\n+        debug a => _3;                   // in scope 1 at $DIR/generator_storage_dead_unwind.rs:+1:13: +1:14\n+        let _4: Bar;                     // in scope 1 at $DIR/generator_storage_dead_unwind.rs:+2:13: +2:14\n         scope 2 {\n-            debug b => _4;               // in scope 2 at $DIR/generator-storage-dead-unwind.rs:+2:13: +2:14\n+            debug b => _4;               // in scope 2 at $DIR/generator_storage_dead_unwind.rs:+2:13: +2:14\n         }\n     }\n \n     bb0: {\n-        StorageLive(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:+1:13: +1:14\n-        _3 = Foo(const 5_i32);           // scope 0 at $DIR/generator-storage-dead-unwind.rs:+1:17: +1:23\n-        StorageLive(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:+2:13: +2:14\n-        _4 = Bar(const 6_i32);           // scope 1 at $DIR/generator-storage-dead-unwind.rs:+2:17: +2:23\n-        StorageLive(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n-        StorageLive(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n-        _6 = ();                         // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n-        _5 = yield(move _6) -> [resume: bb1, drop: bb6]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n+        StorageLive(_3);                 // scope 0 at $DIR/generator_storage_dead_unwind.rs:+1:13: +1:14\n+        _3 = Foo(const 5_i32);           // scope 0 at $DIR/generator_storage_dead_unwind.rs:+1:17: +1:23\n+        StorageLive(_4);                 // scope 1 at $DIR/generator_storage_dead_unwind.rs:+2:13: +2:14\n+        _4 = Bar(const 6_i32);           // scope 1 at $DIR/generator_storage_dead_unwind.rs:+2:17: +2:23\n+        StorageLive(_5);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+3:9: +3:14\n+        StorageLive(_6);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+3:9: +3:14\n+        _6 = ();                         // scope 2 at $DIR/generator_storage_dead_unwind.rs:+3:9: +3:14\n+        _5 = yield(move _6) -> [resume: bb1, drop: bb6]; // scope 2 at $DIR/generator_storage_dead_unwind.rs:+3:9: +3:14\n     }\n \n     bb1: {\n-        StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:13: +3:14\n-        StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:14: +3:15\n-        StorageLive(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:9: +4:16\n-        StorageLive(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:14: +4:15\n-        _8 = move _3;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:14: +4:15\n-        _7 = take::<Foo>(move _8) -> [return: bb2, unwind: bb10]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:9: +4:16\n+        StorageDead(_6);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+3:13: +3:14\n+        StorageDead(_5);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+3:14: +3:15\n+        StorageLive(_7);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+4:9: +4:16\n+        StorageLive(_8);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+4:14: +4:15\n+        _8 = move _3;                    // scope 2 at $DIR/generator_storage_dead_unwind.rs:+4:14: +4:15\n+        _7 = take::<Foo>(move _8) -> [return: bb2, unwind: bb10]; // scope 2 at $DIR/generator_storage_dead_unwind.rs:+4:9: +4:16\n                                          // mir::Constant\n-                                         // + span: $DIR/generator-storage-dead-unwind.rs:26:9: 26:13\n+                                         // + span: $DIR/generator_storage_dead_unwind.rs:26:9: 26:13\n                                          // + literal: Const { ty: fn(Foo) {take::<Foo>}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:15: +4:16\n-        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:16: +4:17\n-        StorageLive(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:9: +5:16\n-        StorageLive(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:14: +5:15\n-        _10 = move _4;                   // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:14: +5:15\n-        _9 = take::<Bar>(move _10) -> [return: bb3, unwind: bb9]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:9: +5:16\n+        StorageDead(_8);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+4:15: +4:16\n+        StorageDead(_7);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+4:16: +4:17\n+        StorageLive(_9);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+5:9: +5:16\n+        StorageLive(_10);                // scope 2 at $DIR/generator_storage_dead_unwind.rs:+5:14: +5:15\n+        _10 = move _4;                   // scope 2 at $DIR/generator_storage_dead_unwind.rs:+5:14: +5:15\n+        _9 = take::<Bar>(move _10) -> [return: bb3, unwind: bb9]; // scope 2 at $DIR/generator_storage_dead_unwind.rs:+5:9: +5:16\n                                          // mir::Constant\n-                                         // + span: $DIR/generator-storage-dead-unwind.rs:27:9: 27:13\n+                                         // + span: $DIR/generator_storage_dead_unwind.rs:27:9: 27:13\n                                          // + literal: Const { ty: fn(Bar) {take::<Bar>}, val: Value(<ZST>) }\n     }\n \n     bb3: {\n-        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:15: +5:16\n-        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:16: +5:17\n-        _0 = const ();                   // scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:19: +6:6\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n-        goto -> bb4;                     // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        StorageDead(_10);                // scope 2 at $DIR/generator_storage_dead_unwind.rs:+5:15: +5:16\n+        StorageDead(_9);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+5:16: +5:17\n+        _0 = const ();                   // scope 0 at $DIR/generator_storage_dead_unwind.rs:+0:19: +6:6\n+        StorageDead(_4);                 // scope 1 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n+        goto -> bb4;                     // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n     }\n \n     bb4: {\n-        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n-        drop(_1) -> [return: bb5, unwind: bb14]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n+        drop(_1) -> [return: bb5, unwind: bb14]; // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n     }\n \n     bb5: {\n-        return;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:6: +6:6\n+        return;                          // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:6: +6:6\n     }\n \n     bb6: {\n-        StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:13: +3:14\n-        StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:14: +3:15\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n-        drop(_3) -> [return: bb7, unwind: bb15]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        StorageDead(_6);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+3:13: +3:14\n+        StorageDead(_5);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+3:14: +3:15\n+        StorageDead(_4);                 // scope 1 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n+        drop(_3) -> [return: bb7, unwind: bb15]; // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n     }\n \n     bb7: {\n-        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n-        drop(_1) -> [return: bb8, unwind: bb14]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n+        drop(_1) -> [return: bb8, unwind: bb14]; // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n     }\n \n     bb8: {\n-        generator_drop;                  // scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:16: +6:6\n+        generator_drop;                  // scope 0 at $DIR/generator_storage_dead_unwind.rs:+0:16: +6:6\n     }\n \n     bb9 (cleanup): {\n-        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:15: +5:16\n-        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:16: +5:17\n+        StorageDead(_10);                // scope 2 at $DIR/generator_storage_dead_unwind.rs:+5:15: +5:16\n+        StorageDead(_9);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+5:16: +5:17\n         goto -> bb12;                    // scope 2 at no-location\n     }\n \n     bb10 (cleanup): {\n-        goto -> bb11;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:15: +4:16\n+        goto -> bb11;                    // scope 2 at $DIR/generator_storage_dead_unwind.rs:+4:15: +4:16\n     }\n \n     bb11 (cleanup): {\n-        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:15: +4:16\n-        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:16: +4:17\n+        StorageDead(_8);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+4:15: +4:16\n+        StorageDead(_7);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+4:16: +4:17\n         goto -> bb12;                    // scope 2 at no-location\n     }\n \n     bb12 (cleanup): {\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n-        goto -> bb13;                    // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        StorageDead(_4);                 // scope 1 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n+        goto -> bb13;                    // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n     }\n \n     bb13 (cleanup): {\n-        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n-        drop(_1) -> bb14;                // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n+        drop(_1) -> bb14;                // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n     }\n \n     bb14 (cleanup): {\n-        resume;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:16: +6:6\n+        resume;                          // scope 0 at $DIR/generator_storage_dead_unwind.rs:+0:16: +6:6\n     }\n \n     bb15 (cleanup): {\n-        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n-        drop(_1) -> bb14;                // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n+        drop(_1) -> bb14;                // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n     }\n }"}, {"sha": "b72170adec37a818475d83d84f096d06c47674c5", "filename": "src/test/mir-opt/generator_storage_dead_unwind.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/generator-storage-dead-unwind.rs"}, {"sha": "fee6da2c6352ff5b7667252d7ea87927938ae1c2", "filename": "src/test/mir-opt/generator_tiny.main-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -14,71 +14,71 @@\n     },\n } */\n \n-fn main::{closure#0}(_1: Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 19:24]>, _2: u8) -> GeneratorState<(), ()> {\n-    debug _x => _10;                     // in scope 0 at $DIR/generator-tiny.rs:+0:17: +0:19\n-    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n-    let _3: HasDrop;                     // in scope 0 at $DIR/generator-tiny.rs:+1:13: +1:15\n-    let mut _4: !;                       // in scope 0 at $DIR/generator-tiny.rs:+2:9: +5:10\n-    let mut _5: ();                      // in scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n-    let _6: u8;                          // in scope 0 at $DIR/generator-tiny.rs:+3:13: +3:18\n-    let mut _7: ();                      // in scope 0 at $DIR/generator-tiny.rs:+3:13: +3:18\n-    let _8: ();                          // in scope 0 at $DIR/generator-tiny.rs:+4:13: +4:21\n-    let mut _9: ();                      // in scope 0 at $DIR/generator-tiny.rs:+0:25: +0:25\n-    let _10: u8;                         // in scope 0 at $DIR/generator-tiny.rs:+0:17: +0:19\n-    let mut _11: u32;                    // in scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n+fn main::{closure#0}(_1: Pin<&mut [generator@$DIR/generator_tiny.rs:19:16: 19:24]>, _2: u8) -> GeneratorState<(), ()> {\n+    debug _x => _10;                     // in scope 0 at $DIR/generator_tiny.rs:+0:17: +0:19\n+    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at $DIR/generator_tiny.rs:+0:16: +6:6\n+    let _3: HasDrop;                     // in scope 0 at $DIR/generator_tiny.rs:+1:13: +1:15\n+    let mut _4: !;                       // in scope 0 at $DIR/generator_tiny.rs:+2:9: +5:10\n+    let mut _5: ();                      // in scope 0 at $DIR/generator_tiny.rs:+0:16: +6:6\n+    let _6: u8;                          // in scope 0 at $DIR/generator_tiny.rs:+3:13: +3:18\n+    let mut _7: ();                      // in scope 0 at $DIR/generator_tiny.rs:+3:13: +3:18\n+    let _8: ();                          // in scope 0 at $DIR/generator_tiny.rs:+4:13: +4:21\n+    let mut _9: ();                      // in scope 0 at $DIR/generator_tiny.rs:+0:25: +0:25\n+    let _10: u8;                         // in scope 0 at $DIR/generator_tiny.rs:+0:17: +0:19\n+    let mut _11: u32;                    // in scope 0 at $DIR/generator_tiny.rs:+0:16: +6:6\n     scope 1 {\n-        debug _d => (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24])) as variant#3).0: HasDrop); // in scope 1 at $DIR/generator-tiny.rs:+1:13: +1:15\n+        debug _d => (((*(_1.0: &mut [generator@$DIR/generator_tiny.rs:19:16: 19:24])) as variant#3).0: HasDrop); // in scope 1 at $DIR/generator_tiny.rs:+1:13: +1:15\n     }\n \n     bb0: {\n-        _11 = discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24]))); // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n-        switchInt(move _11) -> [0_u32: bb1, 3_u32: bb5, otherwise: bb6]; // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n+        _11 = discriminant((*(_1.0: &mut [generator@$DIR/generator_tiny.rs:19:16: 19:24]))); // scope 0 at $DIR/generator_tiny.rs:+0:16: +6:6\n+        switchInt(move _11) -> [0_u32: bb1, 3_u32: bb5, otherwise: bb6]; // scope 0 at $DIR/generator_tiny.rs:+0:16: +6:6\n     }\n \n     bb1: {\n-        _10 = move _2;                   // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n-        nop;                             // scope 0 at $DIR/generator-tiny.rs:+1:13: +1:15\n-        (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24])) as variant#3).0: HasDrop) = HasDrop; // scope 0 at $DIR/generator-tiny.rs:+1:18: +1:25\n-        StorageLive(_4);                 // scope 1 at $DIR/generator-tiny.rs:+2:9: +5:10\n-        goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:+2:9: +5:10\n+        _10 = move _2;                   // scope 0 at $DIR/generator_tiny.rs:+0:16: +6:6\n+        nop;                             // scope 0 at $DIR/generator_tiny.rs:+1:13: +1:15\n+        (((*(_1.0: &mut [generator@$DIR/generator_tiny.rs:19:16: 19:24])) as variant#3).0: HasDrop) = HasDrop; // scope 0 at $DIR/generator_tiny.rs:+1:18: +1:25\n+        StorageLive(_4);                 // scope 1 at $DIR/generator_tiny.rs:+2:9: +5:10\n+        goto -> bb2;                     // scope 1 at $DIR/generator_tiny.rs:+2:9: +5:10\n     }\n \n     bb2: {\n-        StorageLive(_6);                 // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n-        StorageLive(_7);                 // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n-        _7 = ();                         // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n-        Deinit(_0);                      // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n-        ((_0 as Yielded).0: ()) = move _7; // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n-        discriminant(_0) = 0;            // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n-        discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24]))) = 3; // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n-        return;                          // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n+        StorageLive(_6);                 // scope 1 at $DIR/generator_tiny.rs:+3:13: +3:18\n+        StorageLive(_7);                 // scope 1 at $DIR/generator_tiny.rs:+3:13: +3:18\n+        _7 = ();                         // scope 1 at $DIR/generator_tiny.rs:+3:13: +3:18\n+        Deinit(_0);                      // scope 1 at $DIR/generator_tiny.rs:+3:13: +3:18\n+        ((_0 as Yielded).0: ()) = move _7; // scope 1 at $DIR/generator_tiny.rs:+3:13: +3:18\n+        discriminant(_0) = 0;            // scope 1 at $DIR/generator_tiny.rs:+3:13: +3:18\n+        discriminant((*(_1.0: &mut [generator@$DIR/generator_tiny.rs:19:16: 19:24]))) = 3; // scope 1 at $DIR/generator_tiny.rs:+3:13: +3:18\n+        return;                          // scope 1 at $DIR/generator_tiny.rs:+3:13: +3:18\n     }\n \n     bb3: {\n-        StorageDead(_7);                 // scope 1 at $DIR/generator-tiny.rs:+3:17: +3:18\n-        StorageDead(_6);                 // scope 1 at $DIR/generator-tiny.rs:+3:18: +3:19\n-        StorageLive(_8);                 // scope 1 at $DIR/generator-tiny.rs:+4:13: +4:21\n-        _8 = callee() -> bb4;            // scope 1 at $DIR/generator-tiny.rs:+4:13: +4:21\n+        StorageDead(_7);                 // scope 1 at $DIR/generator_tiny.rs:+3:17: +3:18\n+        StorageDead(_6);                 // scope 1 at $DIR/generator_tiny.rs:+3:18: +3:19\n+        StorageLive(_8);                 // scope 1 at $DIR/generator_tiny.rs:+4:13: +4:21\n+        _8 = callee() -> bb4;            // scope 1 at $DIR/generator_tiny.rs:+4:13: +4:21\n                                          // mir::Constant\n-                                         // + span: $DIR/generator-tiny.rs:23:13: 23:19\n+                                         // + span: $DIR/generator_tiny.rs:23:13: 23:19\n                                          // + literal: Const { ty: fn() {callee}, val: Value(<ZST>) }\n     }\n \n     bb4: {\n-        StorageDead(_8);                 // scope 1 at $DIR/generator-tiny.rs:+4:21: +4:22\n-        _5 = const ();                   // scope 1 at $DIR/generator-tiny.rs:+2:14: +5:10\n-        goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:+2:9: +5:10\n+        StorageDead(_8);                 // scope 1 at $DIR/generator_tiny.rs:+4:21: +4:22\n+        _5 = const ();                   // scope 1 at $DIR/generator_tiny.rs:+2:14: +5:10\n+        goto -> bb2;                     // scope 1 at $DIR/generator_tiny.rs:+2:9: +5:10\n     }\n \n     bb5: {\n-        StorageLive(_4);                 // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n-        StorageLive(_6);                 // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n-        StorageLive(_7);                 // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n-        _6 = move _2;                    // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n-        goto -> bb3;                     // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n+        StorageLive(_4);                 // scope 0 at $DIR/generator_tiny.rs:+0:16: +6:6\n+        StorageLive(_6);                 // scope 0 at $DIR/generator_tiny.rs:+0:16: +6:6\n+        StorageLive(_7);                 // scope 0 at $DIR/generator_tiny.rs:+0:16: +6:6\n+        _6 = move _2;                    // scope 0 at $DIR/generator_tiny.rs:+0:16: +6:6\n+        goto -> bb3;                     // scope 0 at $DIR/generator_tiny.rs:+0:16: +6:6\n     }\n \n     bb6: {\n-        unreachable;                     // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n+        unreachable;                     // scope 0 at $DIR/generator_tiny.rs:+0:16: +6:6\n     }\n }"}, {"sha": "7dad63a61d6d891d2eaed75d01edd3c9366fb0cb", "filename": "src/test/mir-opt/generator_tiny.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/generator-tiny.rs"}, {"sha": "94180d203439902eabd66afd82477437b955c12d", "filename": "src/test/mir-opt/if_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,29 +2,29 @@\n + // MIR for `dont_opt_bool` after SimplifyComparisonIntegral\n   \n   fn dont_opt_bool(_1: bool) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:+0:18: +0:19\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:+0:30: +0:33\n-      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n+      debug x => _1;                       // in scope 0 at $DIR/if_condition_int.rs:+0:18: +0:19\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/if_condition_int.rs:+0:30: +0:33\n+      let mut _2: bool;                    // in scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n-          _2 = _1;                         // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n+          StorageLive(_2);                 // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n+          _2 = _1;                         // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n       }\n   \n       bb1: {\n-          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:+1:12: +1:13\n-          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +1:26\n+          _0 = const 0_u32;                // scope 0 at $DIR/if_condition_int.rs:+1:12: +1:13\n+          goto -> bb3;                     // scope 0 at $DIR/if_condition_int.rs:+1:5: +1:26\n       }\n   \n       bb2: {\n-          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:+1:23: +1:24\n-          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +1:26\n+          _0 = const 1_u32;                // scope 0 at $DIR/if_condition_int.rs:+1:23: +1:24\n+          goto -> bb3;                     // scope 0 at $DIR/if_condition_int.rs:+1:5: +1:26\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:25: +1:26\n-          return;                          // scope 0 at $DIR/if-condition-int.rs:+2:2: +2:2\n+          StorageDead(_2);                 // scope 0 at $DIR/if_condition_int.rs:+1:25: +1:26\n+          return;                          // scope 0 at $DIR/if_condition_int.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "b22c7eac622f543108726d383573110ba91e7c0c", "filename": "src/test/mir-opt/if_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,33 +2,33 @@\n + // MIR for `dont_opt_floats` after SimplifyComparisonIntegral\n   \n   fn dont_opt_floats(_1: f32) -> i32 {\n-      debug a => _1;                       // in scope 0 at $DIR/if-condition-int.rs:+0:20: +0:21\n-      let mut _0: i32;                     // return place in scope 0 at $DIR/if-condition-int.rs:+0:31: +0:34\n-      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:+1:8: +1:18\n-      let mut _3: f32;                     // in scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n+      debug a => _1;                       // in scope 0 at $DIR/if_condition_int.rs:+0:20: +0:21\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/if_condition_int.rs:+0:31: +0:34\n+      let mut _2: bool;                    // in scope 0 at $DIR/if_condition_int.rs:+1:8: +1:18\n+      let mut _3: f32;                     // in scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:18\n-          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n-          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n-          _2 = Eq(move _3, const -42f32);  // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:18\n-          StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:17: +1:18\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:18\n+          StorageLive(_2);                 // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:18\n+          StorageLive(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n+          _3 = _1;                         // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n+          _2 = Eq(move _3, const -42f32);  // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:18\n+          StorageDead(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:17: +1:18\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:18\n       }\n   \n       bb1: {\n-          _0 = const 0_i32;                // scope 0 at $DIR/if-condition-int.rs:+1:21: +1:22\n-          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +1:35\n+          _0 = const 0_i32;                // scope 0 at $DIR/if_condition_int.rs:+1:21: +1:22\n+          goto -> bb3;                     // scope 0 at $DIR/if_condition_int.rs:+1:5: +1:35\n       }\n   \n       bb2: {\n-          _0 = const 1_i32;                // scope 0 at $DIR/if-condition-int.rs:+1:32: +1:33\n-          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +1:35\n+          _0 = const 1_i32;                // scope 0 at $DIR/if_condition_int.rs:+1:32: +1:33\n+          goto -> bb3;                     // scope 0 at $DIR/if_condition_int.rs:+1:5: +1:35\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:34: +1:35\n-          return;                          // scope 0 at $DIR/if-condition-int.rs:+2:2: +2:2\n+          StorageDead(_2);                 // scope 0 at $DIR/if_condition_int.rs:+1:34: +1:35\n+          return;                          // scope 0 at $DIR/if_condition_int.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "cc0995f99cfdf237b7a02e21de93c3bf9bc61173", "filename": "src/test/mir-opt/if_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,57 +2,57 @@\n + // MIR for `dont_remove_comparison` after SimplifyComparisonIntegral\n   \n   fn dont_remove_comparison(_1: i8) -> i32 {\n-      debug a => _1;                       // in scope 0 at $DIR/if-condition-int.rs:+0:27: +0:28\n-      let mut _0: i32;                     // return place in scope 0 at $DIR/if-condition-int.rs:+0:37: +0:40\n-      let _2: bool;                        // in scope 0 at $DIR/if-condition-int.rs:+1:9: +1:10\n-      let mut _3: i8;                      // in scope 0 at $DIR/if-condition-int.rs:+1:13: +1:14\n-      let mut _4: i32;                     // in scope 0 at $DIR/if-condition-int.rs:+3:23: +3:31\n-      let mut _5: bool;                    // in scope 0 at $DIR/if-condition-int.rs:+3:23: +3:24\n-      let mut _6: i32;                     // in scope 0 at $DIR/if-condition-int.rs:+4:23: +4:31\n-      let mut _7: bool;                    // in scope 0 at $DIR/if-condition-int.rs:+4:23: +4:24\n+      debug a => _1;                       // in scope 0 at $DIR/if_condition_int.rs:+0:27: +0:28\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/if_condition_int.rs:+0:37: +0:40\n+      let _2: bool;                        // in scope 0 at $DIR/if_condition_int.rs:+1:9: +1:10\n+      let mut _3: i8;                      // in scope 0 at $DIR/if_condition_int.rs:+1:13: +1:14\n+      let mut _4: i32;                     // in scope 0 at $DIR/if_condition_int.rs:+3:23: +3:31\n+      let mut _5: bool;                    // in scope 0 at $DIR/if_condition_int.rs:+3:23: +3:24\n+      let mut _6: i32;                     // in scope 0 at $DIR/if_condition_int.rs:+4:23: +4:31\n+      let mut _7: bool;                    // in scope 0 at $DIR/if_condition_int.rs:+4:23: +4:24\n       scope 1 {\n-          debug b => _2;                   // in scope 1 at $DIR/if-condition-int.rs:+1:9: +1:10\n+          debug b => _2;                   // in scope 1 at $DIR/if_condition_int.rs:+1:9: +1:10\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:9: +1:10\n-          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:13: +1:14\n-          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:+1:13: +1:14\n--         _2 = Eq(move _3, const 17_i8);   // scope 0 at $DIR/if-condition-int.rs:+1:13: +1:20\n--         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:19: +1:20\n--         switchInt(_2) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/if-condition-int.rs:+2:5: +2:12\n-+         _2 = Eq(_3, const 17_i8);        // scope 0 at $DIR/if-condition-int.rs:+1:13: +1:20\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:+1:19: +1:20\n-+         switchInt(move _3) -> [17_i8: bb1, otherwise: bb2]; // scope 1 at $DIR/if-condition-int.rs:+2:5: +2:12\n+          StorageLive(_2);                 // scope 0 at $DIR/if_condition_int.rs:+1:9: +1:10\n+          StorageLive(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:13: +1:14\n+          _3 = _1;                         // scope 0 at $DIR/if_condition_int.rs:+1:13: +1:14\n+-         _2 = Eq(move _3, const 17_i8);   // scope 0 at $DIR/if_condition_int.rs:+1:13: +1:20\n+-         StorageDead(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:19: +1:20\n+-         switchInt(_2) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/if_condition_int.rs:+2:5: +2:12\n++         _2 = Eq(_3, const 17_i8);        // scope 0 at $DIR/if_condition_int.rs:+1:13: +1:20\n++         nop;                             // scope 0 at $DIR/if_condition_int.rs:+1:19: +1:20\n++         switchInt(move _3) -> [17_i8: bb1, otherwise: bb2]; // scope 1 at $DIR/if_condition_int.rs:+2:5: +2:12\n       }\n   \n       bb1: {\n-+         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:+2:5: +2:12\n-          StorageLive(_6);                 // scope 1 at $DIR/if-condition-int.rs:+4:23: +4:31\n-          StorageLive(_7);                 // scope 1 at $DIR/if-condition-int.rs:+4:23: +4:24\n-          _7 = _2;                         // scope 1 at $DIR/if-condition-int.rs:+4:23: +4:24\n-          _6 = move _7 as i32 (IntToInt);  // scope 1 at $DIR/if-condition-int.rs:+4:23: +4:31\n-          StorageDead(_7);                 // scope 1 at $DIR/if-condition-int.rs:+4:30: +4:31\n-          _0 = Add(const 100_i32, move _6); // scope 1 at $DIR/if-condition-int.rs:+4:17: +4:31\n-          StorageDead(_6);                 // scope 1 at $DIR/if-condition-int.rs:+4:30: +4:31\n-          goto -> bb3;                     // scope 1 at $DIR/if-condition-int.rs:+4:30: +4:31\n++         StorageDead(_3);                 // scope 1 at $DIR/if_condition_int.rs:+2:5: +2:12\n+          StorageLive(_6);                 // scope 1 at $DIR/if_condition_int.rs:+4:23: +4:31\n+          StorageLive(_7);                 // scope 1 at $DIR/if_condition_int.rs:+4:23: +4:24\n+          _7 = _2;                         // scope 1 at $DIR/if_condition_int.rs:+4:23: +4:24\n+          _6 = move _7 as i32 (IntToInt);  // scope 1 at $DIR/if_condition_int.rs:+4:23: +4:31\n+          StorageDead(_7);                 // scope 1 at $DIR/if_condition_int.rs:+4:30: +4:31\n+          _0 = Add(const 100_i32, move _6); // scope 1 at $DIR/if_condition_int.rs:+4:17: +4:31\n+          StorageDead(_6);                 // scope 1 at $DIR/if_condition_int.rs:+4:30: +4:31\n+          goto -> bb3;                     // scope 1 at $DIR/if_condition_int.rs:+4:30: +4:31\n       }\n   \n       bb2: {\n-+         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:+2:5: +2:12\n-          StorageLive(_4);                 // scope 1 at $DIR/if-condition-int.rs:+3:23: +3:31\n-          StorageLive(_5);                 // scope 1 at $DIR/if-condition-int.rs:+3:23: +3:24\n-          _5 = _2;                         // scope 1 at $DIR/if-condition-int.rs:+3:23: +3:24\n-          _4 = move _5 as i32 (IntToInt);  // scope 1 at $DIR/if-condition-int.rs:+3:23: +3:31\n-          StorageDead(_5);                 // scope 1 at $DIR/if-condition-int.rs:+3:30: +3:31\n-          _0 = Add(const 10_i32, move _4); // scope 1 at $DIR/if-condition-int.rs:+3:18: +3:31\n-          StorageDead(_4);                 // scope 1 at $DIR/if-condition-int.rs:+3:30: +3:31\n-          goto -> bb3;                     // scope 1 at $DIR/if-condition-int.rs:+3:30: +3:31\n++         StorageDead(_3);                 // scope 1 at $DIR/if_condition_int.rs:+2:5: +2:12\n+          StorageLive(_4);                 // scope 1 at $DIR/if_condition_int.rs:+3:23: +3:31\n+          StorageLive(_5);                 // scope 1 at $DIR/if_condition_int.rs:+3:23: +3:24\n+          _5 = _2;                         // scope 1 at $DIR/if_condition_int.rs:+3:23: +3:24\n+          _4 = move _5 as i32 (IntToInt);  // scope 1 at $DIR/if_condition_int.rs:+3:23: +3:31\n+          StorageDead(_5);                 // scope 1 at $DIR/if_condition_int.rs:+3:30: +3:31\n+          _0 = Add(const 10_i32, move _4); // scope 1 at $DIR/if_condition_int.rs:+3:18: +3:31\n+          StorageDead(_4);                 // scope 1 at $DIR/if_condition_int.rs:+3:30: +3:31\n+          goto -> bb3;                     // scope 1 at $DIR/if_condition_int.rs:+3:30: +3:31\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/if-condition-int.rs:+6:2: +6:2\n+          StorageDead(_2);                 // scope 0 at $DIR/if_condition_int.rs:+6:1: +6:2\n+          return;                          // scope 0 at $DIR/if_condition_int.rs:+6:2: +6:2\n       }\n   }\n   "}, {"sha": "801ea04020343105f203f423acd6466b509fe54e", "filename": "src/test/mir-opt/if_condition_int.opt_char.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,38 +2,38 @@\n + // MIR for `opt_char` after SimplifyComparisonIntegral\n   \n   fn opt_char(_1: char) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:+0:13: +0:14\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:+0:25: +0:28\n-      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n-      let mut _3: char;                    // in scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n+      debug x => _1;                       // in scope 0 at $DIR/if_condition_int.rs:+0:13: +0:14\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/if_condition_int.rs:+0:25: +0:28\n+      let mut _2: bool;                    // in scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n+      let mut _3: char;                    // in scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n-          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n-          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n--         _2 = Eq(move _3, const 'x');     // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n--         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:15: +1:16\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:+1:15: +1:16\n-+         switchInt(move _3) -> ['x': bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n+          StorageLive(_2);                 // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n+          StorageLive(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n+          _3 = _1;                         // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n+-         _2 = Eq(move _3, const 'x');     // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n+-         StorageDead(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:15: +1:16\n+-         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n++         nop;                             // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n++         nop;                             // scope 0 at $DIR/if_condition_int.rs:+1:15: +1:16\n++         switchInt(move _3) -> ['x': bb1, otherwise: bb2]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n       }\n   \n       bb1: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n-          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:+1:19: +1:20\n-          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +1:33\n++         StorageDead(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n+          _0 = const 0_u32;                // scope 0 at $DIR/if_condition_int.rs:+1:19: +1:20\n+          goto -> bb3;                     // scope 0 at $DIR/if_condition_int.rs:+1:5: +1:33\n       }\n   \n       bb2: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n-          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:+1:30: +1:31\n-          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +1:33\n++         StorageDead(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n+          _0 = const 1_u32;                // scope 0 at $DIR/if_condition_int.rs:+1:30: +1:31\n+          goto -> bb3;                     // scope 0 at $DIR/if_condition_int.rs:+1:5: +1:33\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:32: +1:33\n-          return;                          // scope 0 at $DIR/if-condition-int.rs:+2:2: +2:2\n+          StorageDead(_2);                 // scope 0 at $DIR/if_condition_int.rs:+1:32: +1:33\n+          return;                          // scope 0 at $DIR/if_condition_int.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "4297f4d646645e4570a9f98090aea9c15664374e", "filename": "src/test/mir-opt/if_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,38 +2,38 @@\n + // MIR for `opt_i8` after SimplifyComparisonIntegral\n   \n   fn opt_i8(_1: i8) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:+0:11: +0:12\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:+0:21: +0:24\n-      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n-      let mut _3: i8;                      // in scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n+      debug x => _1;                       // in scope 0 at $DIR/if_condition_int.rs:+0:11: +0:12\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/if_condition_int.rs:+0:21: +0:24\n+      let mut _2: bool;                    // in scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n+      let mut _3: i8;                      // in scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n-          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n-          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n--         _2 = Eq(move _3, const 42_i8);   // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n--         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:14: +1:15\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:+1:14: +1:15\n-+         switchInt(move _3) -> [42_i8: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n+          StorageLive(_2);                 // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n+          StorageLive(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n+          _3 = _1;                         // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n+-         _2 = Eq(move _3, const 42_i8);   // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n+-         StorageDead(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:14: +1:15\n+-         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n++         nop;                             // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n++         nop;                             // scope 0 at $DIR/if_condition_int.rs:+1:14: +1:15\n++         switchInt(move _3) -> [42_i8: bb1, otherwise: bb2]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n       }\n   \n       bb1: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n-          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:+1:18: +1:19\n-          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +1:32\n++         StorageDead(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n+          _0 = const 0_u32;                // scope 0 at $DIR/if_condition_int.rs:+1:18: +1:19\n+          goto -> bb3;                     // scope 0 at $DIR/if_condition_int.rs:+1:5: +1:32\n       }\n   \n       bb2: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n-          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:+1:29: +1:30\n-          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +1:32\n++         StorageDead(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n+          _0 = const 1_u32;                // scope 0 at $DIR/if_condition_int.rs:+1:29: +1:30\n+          goto -> bb3;                     // scope 0 at $DIR/if_condition_int.rs:+1:5: +1:32\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:31: +1:32\n-          return;                          // scope 0 at $DIR/if-condition-int.rs:+2:2: +2:2\n+          StorageDead(_2);                 // scope 0 at $DIR/if_condition_int.rs:+1:31: +1:32\n+          return;                          // scope 0 at $DIR/if_condition_int.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "8fb794abbd41fa89bba3dc7f76beeb00ea45d580", "filename": "src/test/mir-opt/if_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,64 +2,64 @@\n + // MIR for `opt_multiple_ifs` after SimplifyComparisonIntegral\n   \n   fn opt_multiple_ifs(_1: u32) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:+0:21: +0:22\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:+0:32: +0:35\n-      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n-      let mut _3: u32;                     // in scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n-      let mut _4: bool;                    // in scope 0 at $DIR/if-condition-int.rs:+3:15: +3:22\n-      let mut _5: u32;                     // in scope 0 at $DIR/if-condition-int.rs:+3:15: +3:16\n+      debug x => _1;                       // in scope 0 at $DIR/if_condition_int.rs:+0:21: +0:22\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/if_condition_int.rs:+0:32: +0:35\n+      let mut _2: bool;                    // in scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n+      let mut _3: u32;                     // in scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n+      let mut _4: bool;                    // in scope 0 at $DIR/if_condition_int.rs:+3:15: +3:22\n+      let mut _5: u32;                     // in scope 0 at $DIR/if_condition_int.rs:+3:15: +3:16\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n-          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n-          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n--         _2 = Eq(move _3, const 42_u32);  // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n--         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:14: +1:15\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:+1:14: +1:15\n-+         switchInt(move _3) -> [42_u32: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n+          StorageLive(_2);                 // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n+          StorageLive(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n+          _3 = _1;                         // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n+-         _2 = Eq(move _3, const 42_u32);  // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n+-         StorageDead(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:14: +1:15\n+-         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n++         nop;                             // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n++         nop;                             // scope 0 at $DIR/if_condition_int.rs:+1:14: +1:15\n++         switchInt(move _3) -> [42_u32: bb1, otherwise: bb2]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n       }\n   \n       bb1: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n-          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:+2:9: +2:10\n-          goto -> bb6;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +7:6\n++         StorageDead(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n+          _0 = const 0_u32;                // scope 0 at $DIR/if_condition_int.rs:+2:9: +2:10\n+          goto -> bb6;                     // scope 0 at $DIR/if_condition_int.rs:+1:5: +7:6\n       }\n   \n       bb2: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n-          StorageLive(_4);                 // scope 0 at $DIR/if-condition-int.rs:+3:15: +3:22\n-          StorageLive(_5);                 // scope 0 at $DIR/if-condition-int.rs:+3:15: +3:16\n-          _5 = _1;                         // scope 0 at $DIR/if-condition-int.rs:+3:15: +3:16\n--         _4 = Ne(move _5, const 21_u32);  // scope 0 at $DIR/if-condition-int.rs:+3:15: +3:22\n--         StorageDead(_5);                 // scope 0 at $DIR/if-condition-int.rs:+3:21: +3:22\n--         switchInt(move _4) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/if-condition-int.rs:+3:15: +3:22\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:+3:15: +3:22\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:+3:21: +3:22\n-+         switchInt(move _5) -> [21_u32: bb4, otherwise: bb3]; // scope 0 at $DIR/if-condition-int.rs:+3:15: +3:22\n++         StorageDead(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n+          StorageLive(_4);                 // scope 0 at $DIR/if_condition_int.rs:+3:15: +3:22\n+          StorageLive(_5);                 // scope 0 at $DIR/if_condition_int.rs:+3:15: +3:16\n+          _5 = _1;                         // scope 0 at $DIR/if_condition_int.rs:+3:15: +3:16\n+-         _4 = Ne(move _5, const 21_u32);  // scope 0 at $DIR/if_condition_int.rs:+3:15: +3:22\n+-         StorageDead(_5);                 // scope 0 at $DIR/if_condition_int.rs:+3:21: +3:22\n+-         switchInt(move _4) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/if_condition_int.rs:+3:15: +3:22\n++         nop;                             // scope 0 at $DIR/if_condition_int.rs:+3:15: +3:22\n++         nop;                             // scope 0 at $DIR/if_condition_int.rs:+3:21: +3:22\n++         switchInt(move _5) -> [21_u32: bb4, otherwise: bb3]; // scope 0 at $DIR/if_condition_int.rs:+3:15: +3:22\n       }\n   \n       bb3: {\n-+         StorageDead(_5);                 // scope 0 at $DIR/if-condition-int.rs:+3:15: +3:22\n-          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:+4:9: +4:10\n-          goto -> bb5;                     // scope 0 at $DIR/if-condition-int.rs:+3:12: +7:6\n++         StorageDead(_5);                 // scope 0 at $DIR/if_condition_int.rs:+3:15: +3:22\n+          _0 = const 1_u32;                // scope 0 at $DIR/if_condition_int.rs:+4:9: +4:10\n+          goto -> bb5;                     // scope 0 at $DIR/if_condition_int.rs:+3:12: +7:6\n       }\n   \n       bb4: {\n-+         StorageDead(_5);                 // scope 0 at $DIR/if-condition-int.rs:+3:15: +3:22\n-          _0 = const 2_u32;                // scope 0 at $DIR/if-condition-int.rs:+6:9: +6:10\n-          goto -> bb5;                     // scope 0 at $DIR/if-condition-int.rs:+3:12: +7:6\n++         StorageDead(_5);                 // scope 0 at $DIR/if_condition_int.rs:+3:15: +3:22\n+          _0 = const 2_u32;                // scope 0 at $DIR/if_condition_int.rs:+6:9: +6:10\n+          goto -> bb5;                     // scope 0 at $DIR/if_condition_int.rs:+3:12: +7:6\n       }\n   \n       bb5: {\n-          StorageDead(_4);                 // scope 0 at $DIR/if-condition-int.rs:+7:5: +7:6\n-          goto -> bb6;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +7:6\n+          StorageDead(_4);                 // scope 0 at $DIR/if_condition_int.rs:+7:5: +7:6\n+          goto -> bb6;                     // scope 0 at $DIR/if_condition_int.rs:+1:5: +7:6\n       }\n   \n       bb6: {\n-          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:+7:5: +7:6\n-          return;                          // scope 0 at $DIR/if-condition-int.rs:+8:2: +8:2\n+          StorageDead(_2);                 // scope 0 at $DIR/if_condition_int.rs:+7:5: +7:6\n+          return;                          // scope 0 at $DIR/if_condition_int.rs:+8:2: +8:2\n       }\n   }\n   "}, {"sha": "992253ea780d933cd4e2da77454e495b352c3480", "filename": "src/test/mir-opt/if_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,38 +2,38 @@\n + // MIR for `opt_negative` after SimplifyComparisonIntegral\n   \n   fn opt_negative(_1: i32) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:+0:17: +0:18\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:+0:28: +0:31\n-      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n-      let mut _3: i32;                     // in scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n+      debug x => _1;                       // in scope 0 at $DIR/if_condition_int.rs:+0:17: +0:18\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/if_condition_int.rs:+0:28: +0:31\n+      let mut _2: bool;                    // in scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n+      let mut _3: i32;                     // in scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n-          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n-          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n--         _2 = Eq(move _3, const -42_i32); // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n--         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:15: +1:16\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:+1:15: +1:16\n-+         switchInt(move _3) -> [-42_i32: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n+          StorageLive(_2);                 // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n+          StorageLive(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n+          _3 = _1;                         // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n+-         _2 = Eq(move _3, const -42_i32); // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n+-         StorageDead(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:15: +1:16\n+-         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n++         nop;                             // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n++         nop;                             // scope 0 at $DIR/if_condition_int.rs:+1:15: +1:16\n++         switchInt(move _3) -> [-42_i32: bb1, otherwise: bb2]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n       }\n   \n       bb1: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n-          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:+1:19: +1:20\n-          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +1:33\n++         StorageDead(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n+          _0 = const 0_u32;                // scope 0 at $DIR/if_condition_int.rs:+1:19: +1:20\n+          goto -> bb3;                     // scope 0 at $DIR/if_condition_int.rs:+1:5: +1:33\n       }\n   \n       bb2: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n-          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:+1:30: +1:31\n-          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +1:33\n++         StorageDead(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:16\n+          _0 = const 1_u32;                // scope 0 at $DIR/if_condition_int.rs:+1:30: +1:31\n+          goto -> bb3;                     // scope 0 at $DIR/if_condition_int.rs:+1:5: +1:33\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:32: +1:33\n-          return;                          // scope 0 at $DIR/if-condition-int.rs:+2:2: +2:2\n+          StorageDead(_2);                 // scope 0 at $DIR/if_condition_int.rs:+1:32: +1:33\n+          return;                          // scope 0 at $DIR/if_condition_int.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "7cea9472d3a05e4172bb242e65bdb972f6bb9cab", "filename": "src/test/mir-opt/if_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,38 +2,38 @@\n + // MIR for `opt_u32` after SimplifyComparisonIntegral\n   \n   fn opt_u32(_1: u32) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:+0:12: +0:13\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:+0:23: +0:26\n-      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n-      let mut _3: u32;                     // in scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n+      debug x => _1;                       // in scope 0 at $DIR/if_condition_int.rs:+0:12: +0:13\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/if_condition_int.rs:+0:23: +0:26\n+      let mut _2: bool;                    // in scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n+      let mut _3: u32;                     // in scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n-          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n-          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n--         _2 = Eq(move _3, const 42_u32);  // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n--         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:14: +1:15\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:+1:14: +1:15\n-+         switchInt(move _3) -> [42_u32: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n+          StorageLive(_2);                 // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n+          StorageLive(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n+          _3 = _1;                         // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:9\n+-         _2 = Eq(move _3, const 42_u32);  // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n+-         StorageDead(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:14: +1:15\n+-         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n++         nop;                             // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n++         nop;                             // scope 0 at $DIR/if_condition_int.rs:+1:14: +1:15\n++         switchInt(move _3) -> [42_u32: bb1, otherwise: bb2]; // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n       }\n   \n       bb1: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n-          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:+1:18: +1:19\n-          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +1:32\n++         StorageDead(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n+          _0 = const 0_u32;                // scope 0 at $DIR/if_condition_int.rs:+1:18: +1:19\n+          goto -> bb3;                     // scope 0 at $DIR/if_condition_int.rs:+1:5: +1:32\n       }\n   \n       bb2: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n-          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:+1:29: +1:30\n-          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +1:32\n++         StorageDead(_3);                 // scope 0 at $DIR/if_condition_int.rs:+1:8: +1:15\n+          _0 = const 1_u32;                // scope 0 at $DIR/if_condition_int.rs:+1:29: +1:30\n+          goto -> bb3;                     // scope 0 at $DIR/if_condition_int.rs:+1:5: +1:32\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:31: +1:32\n-          return;                          // scope 0 at $DIR/if-condition-int.rs:+2:2: +2:2\n+          StorageDead(_2);                 // scope 0 at $DIR/if_condition_int.rs:+1:31: +1:32\n+          return;                          // scope 0 at $DIR/if_condition_int.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "398311e6bb8e2b9249f495287ea1ee858b7aed39", "filename": "src/test/mir-opt/if_condition_int.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fif_condition_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fif_condition_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/if-condition-int.rs"}, {"sha": "f1b62ac38ba4b714dbce303cd07b55642486041a", "filename": "src/test/mir-opt/inline/asm_unwind.main.Inline.diff", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,44 +2,44 @@\n + // MIR for `main` after Inline\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/asm-unwind.rs:+0:15: +0:15\n-      let _1: ();                          // in scope 0 at $DIR/asm-unwind.rs:+1:5: +1:10\n-+     scope 1 (inlined foo) {              // at $DIR/asm-unwind.rs:21:5: 21:10\n-+         let _2: D;                       // in scope 1 at $DIR/asm-unwind.rs:15:9: 15:11\n+      let mut _0: ();                      // return place in scope 0 at $DIR/asm_unwind.rs:+0:15: +0:15\n+      let _1: ();                          // in scope 0 at $DIR/asm_unwind.rs:+1:5: +1:10\n++     scope 1 (inlined foo) {              // at $DIR/asm_unwind.rs:21:5: 21:10\n++         let _2: D;                       // in scope 1 at $DIR/asm_unwind.rs:15:9: 15:11\n +         scope 2 {\n-+             debug _d => _2;              // in scope 2 at $DIR/asm-unwind.rs:15:9: 15:11\n++             debug _d => _2;              // in scope 2 at $DIR/asm_unwind.rs:15:9: 15:11\n +             scope 3 {\n +             }\n +         }\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/asm-unwind.rs:+1:5: +1:10\n--         _1 = foo() -> bb1;               // scope 0 at $DIR/asm-unwind.rs:+1:5: +1:10\n+          StorageLive(_1);                 // scope 0 at $DIR/asm_unwind.rs:+1:5: +1:10\n+-         _1 = foo() -> bb1;               // scope 0 at $DIR/asm_unwind.rs:+1:5: +1:10\n -                                          // mir::Constant\n--                                          // + span: $DIR/asm-unwind.rs:21:5: 21:8\n+-                                          // + span: $DIR/asm_unwind.rs:21:5: 21:8\n -                                          // + literal: Const { ty: fn() {foo}, val: Value(<ZST>) }\n-+         StorageLive(_2);                 // scope 1 at $DIR/asm-unwind.rs:15:9: 15:11\n-+         asm!(\"\", options(MAY_UNWIND)) -> [return: bb1, unwind: bb3]; // scope 3 at $DIR/asm-unwind.rs:16:14: 16:54\n++         StorageLive(_2);                 // scope 1 at $DIR/asm_unwind.rs:15:9: 15:11\n++         asm!(\"\", options(MAY_UNWIND)) -> [return: bb1, unwind: bb3]; // scope 3 at $DIR/asm_unwind.rs:16:14: 16:54\n       }\n   \n       bb1: {\n-+         drop(_2) -> bb2;                 // scope 1 at $DIR/asm-unwind.rs:17:1: 17:2\n++         drop(_2) -> bb2;                 // scope 1 at $DIR/asm_unwind.rs:17:1: 17:2\n +     }\n + \n +     bb2: {\n-+         StorageDead(_2);                 // scope 1 at $DIR/asm-unwind.rs:17:1: 17:2\n-          StorageDead(_1);                 // scope 0 at $DIR/asm-unwind.rs:+1:10: +1:11\n-          _0 = const ();                   // scope 0 at $DIR/asm-unwind.rs:+0:15: +2:2\n-          return;                          // scope 0 at $DIR/asm-unwind.rs:+2:2: +2:2\n++         StorageDead(_2);                 // scope 1 at $DIR/asm_unwind.rs:17:1: 17:2\n+          StorageDead(_1);                 // scope 0 at $DIR/asm_unwind.rs:+1:10: +1:11\n+          _0 = const ();                   // scope 0 at $DIR/asm_unwind.rs:+0:15: +2:2\n+          return;                          // scope 0 at $DIR/asm_unwind.rs:+2:2: +2:2\n +     }\n + \n +     bb3 (cleanup): {\n-+         drop(_2) -> bb4;                 // scope 1 at $DIR/asm-unwind.rs:17:1: 17:2\n++         drop(_2) -> bb4;                 // scope 1 at $DIR/asm_unwind.rs:17:1: 17:2\n +     }\n + \n +     bb4 (cleanup): {\n-+         resume;                          // scope 1 at $DIR/asm-unwind.rs:14:1: 17:2\n++         resume;                          // scope 1 at $DIR/asm_unwind.rs:14:1: 17:2\n       }\n   }\n   "}, {"sha": "c03feb433128cd25ed40d77dccd3a97aae258c77", "filename": "src/test/mir-opt/inline/asm_unwind.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fasm_unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fasm_unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fasm_unwind.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/inline/asm-unwind.rs"}, {"sha": "8b03006782b2c106ae14214018333283e0b0af6e", "filename": "src/test/mir-opt/inline/caller_with_trivial_bound.foo.Inline.diff", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fcaller_with_trivial_bound.foo.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fcaller_with_trivial_bound.foo.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcaller_with_trivial_bound.foo.Inline.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,32 +2,32 @@\n + // MIR for `foo` after Inline\n   \n   fn foo() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/caller-with-trivial-bound.rs:+1:1: +1:1\n-      let mut _1: <IntFactory as Factory<T>>::Item; // in scope 0 at $DIR/caller-with-trivial-bound.rs:+4:9: +4:14\n+      let mut _0: ();                      // return place in scope 0 at $DIR/caller_with_trivial_bound.rs:+1:1: +1:1\n+      let mut _1: <IntFactory as Factory<T>>::Item; // in scope 0 at $DIR/caller_with_trivial_bound.rs:+4:9: +4:14\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/caller-with-trivial-bound.rs:+4:9: +4:14\n+          debug x => _1;                   // in scope 1 at $DIR/caller_with_trivial_bound.rs:+4:9: +4:14\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/caller-with-trivial-bound.rs:+4:9: +4:14\n-          _1 = bar::<T>() -> bb1;          // scope 0 at $DIR/caller-with-trivial-bound.rs:+4:51: +4:61\n+          StorageLive(_1);                 // scope 0 at $DIR/caller_with_trivial_bound.rs:+4:9: +4:14\n+          _1 = bar::<T>() -> bb1;          // scope 0 at $DIR/caller_with_trivial_bound.rs:+4:51: +4:61\n                                            // mir::Constant\n-                                           // + span: $DIR/caller-with-trivial-bound.rs:20:51: 20:59\n+                                           // + span: $DIR/caller_with_trivial_bound.rs:20:51: 20:59\n                                            // + literal: Const { ty: fn() -> <IntFactory as Factory<T>>::Item {bar::<T>}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          _0 = const ();                   // scope 0 at $DIR/caller-with-trivial-bound.rs:+3:1: +5:2\n-          drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/caller-with-trivial-bound.rs:+5:1: +5:2\n+          _0 = const ();                   // scope 0 at $DIR/caller_with_trivial_bound.rs:+3:1: +5:2\n+          drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/caller_with_trivial_bound.rs:+5:1: +5:2\n       }\n   \n       bb2: {\n-          StorageDead(_1);                 // scope 0 at $DIR/caller-with-trivial-bound.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/caller-with-trivial-bound.rs:+5:2: +5:2\n+          StorageDead(_1);                 // scope 0 at $DIR/caller_with_trivial_bound.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/caller_with_trivial_bound.rs:+5:2: +5:2\n       }\n   \n       bb3 (cleanup): {\n-          resume;                          // scope 0 at $DIR/caller-with-trivial-bound.rs:+0:1: +5:2\n+          resume;                          // scope 0 at $DIR/caller_with_trivial_bound.rs:+0:1: +5:2\n       }\n   }\n   "}, {"sha": "8545db89414a70161e3df5ab12506091cc092c54", "filename": "src/test/mir-opt/inline/caller_with_trivial_bound.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fcaller_with_trivial_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fcaller_with_trivial_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcaller_with_trivial_bound.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/inline/caller-with-trivial-bound.rs"}, {"sha": "284306a352d15437b2e935ec913c5e2dcb2a5642", "filename": "src/test/mir-opt/inline/dyn_trait.get_query.Inline.diff", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,61 +2,61 @@\n + // MIR for `get_query` after Inline\n   \n   fn get_query(_1: &T) -> () {\n-      debug t => _1;                       // in scope 0 at $DIR/dyn-trait.rs:+0:31: +0:32\n-      let mut _0: ();                      // return place in scope 0 at $DIR/dyn-trait.rs:+0:38: +0:38\n-      let _2: &<Q as Query>::C;            // in scope 0 at $DIR/dyn-trait.rs:+1:9: +1:10\n-      let mut _3: &T;                      // in scope 0 at $DIR/dyn-trait.rs:+1:22: +1:23\n-      let mut _4: &<Q as Query>::C;        // in scope 0 at $DIR/dyn-trait.rs:+2:23: +2:24\n+      debug t => _1;                       // in scope 0 at $DIR/dyn_trait.rs:+0:31: +0:32\n+      let mut _0: ();                      // return place in scope 0 at $DIR/dyn_trait.rs:+0:38: +0:38\n+      let _2: &<Q as Query>::C;            // in scope 0 at $DIR/dyn_trait.rs:+1:9: +1:10\n+      let mut _3: &T;                      // in scope 0 at $DIR/dyn_trait.rs:+1:22: +1:23\n+      let mut _4: &<Q as Query>::C;        // in scope 0 at $DIR/dyn_trait.rs:+2:23: +2:24\n       scope 1 {\n-          debug c => _2;                   // in scope 1 at $DIR/dyn-trait.rs:+1:9: +1:10\n-+         scope 2 (inlined try_execute_query::<<Q as Query>::C>) { // at $DIR/dyn-trait.rs:34:5: 34:25\n-+             debug c => _4;               // in scope 2 at $DIR/dyn-trait.rs:26:36: 26:37\n-+             let mut _5: &dyn Cache<V = <Q as Query>::V>; // in scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n-+             let mut _6: &<Q as Query>::C; // in scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n-+             scope 3 (inlined mk_cycle::<<Q as Query>::V>) { // at $DIR/dyn-trait.rs:27:5: 27:16\n-+                 debug c => _5;           // in scope 3 at $DIR/dyn-trait.rs:20:27: 20:28\n-+                 let mut _7: &dyn Cache<V = <Q as Query>::V>; // in scope 3 at $DIR/dyn-trait.rs:21:5: 21:22\n+          debug c => _2;                   // in scope 1 at $DIR/dyn_trait.rs:+1:9: +1:10\n++         scope 2 (inlined try_execute_query::<<Q as Query>::C>) { // at $DIR/dyn_trait.rs:34:5: 34:25\n++             debug c => _4;               // in scope 2 at $DIR/dyn_trait.rs:26:36: 26:37\n++             let mut _5: &dyn Cache<V = <Q as Query>::V>; // in scope 2 at $DIR/dyn_trait.rs:27:14: 27:15\n++             let mut _6: &<Q as Query>::C; // in scope 2 at $DIR/dyn_trait.rs:27:14: 27:15\n++             scope 3 (inlined mk_cycle::<<Q as Query>::V>) { // at $DIR/dyn_trait.rs:27:5: 27:16\n++                 debug c => _5;           // in scope 3 at $DIR/dyn_trait.rs:20:27: 20:28\n++                 let mut _7: &dyn Cache<V = <Q as Query>::V>; // in scope 3 at $DIR/dyn_trait.rs:21:5: 21:22\n +             }\n +         }\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/dyn-trait.rs:+1:9: +1:10\n-          StorageLive(_3);                 // scope 0 at $DIR/dyn-trait.rs:+1:22: +1:23\n-          _3 = &(*_1);                     // scope 0 at $DIR/dyn-trait.rs:+1:22: +1:23\n-          _2 = <Q as Query>::cache::<T>(move _3) -> bb1; // scope 0 at $DIR/dyn-trait.rs:+1:13: +1:24\n+          StorageLive(_2);                 // scope 0 at $DIR/dyn_trait.rs:+1:9: +1:10\n+          StorageLive(_3);                 // scope 0 at $DIR/dyn_trait.rs:+1:22: +1:23\n+          _3 = &(*_1);                     // scope 0 at $DIR/dyn_trait.rs:+1:22: +1:23\n+          _2 = <Q as Query>::cache::<T>(move _3) -> bb1; // scope 0 at $DIR/dyn_trait.rs:+1:13: +1:24\n                                            // mir::Constant\n-                                           // + span: $DIR/dyn-trait.rs:33:13: 33:21\n+                                           // + span: $DIR/dyn_trait.rs:33:13: 33:21\n                                            // + user_ty: UserType(0)\n                                            // + literal: Const { ty: for<'a> fn(&'a T) -> &'a <Q as Query>::C {<Q as Query>::cache::<T>}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 0 at $DIR/dyn-trait.rs:+1:23: +1:24\n-          StorageLive(_4);                 // scope 1 at $DIR/dyn-trait.rs:+2:23: +2:24\n-          _4 = &(*_2);                     // scope 1 at $DIR/dyn-trait.rs:+2:23: +2:24\n--         _0 = try_execute_query::<<Q as Query>::C>(move _4) -> bb2; // scope 1 at $DIR/dyn-trait.rs:+2:5: +2:25\n-+         StorageLive(_5);                 // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n-+         StorageLive(_6);                 // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n-+         _6 = _4;                         // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n-+         _5 = move _6 as &dyn Cache<V = <Q as Query>::V> (Pointer(Unsize)); // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n-+         StorageDead(_6);                 // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n-+         StorageLive(_7);                 // scope 3 at $DIR/dyn-trait.rs:21:5: 21:22\n-+         _7 = _5;                         // scope 3 at $DIR/dyn-trait.rs:21:5: 21:22\n-+         _0 = <dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache(move _7) -> bb2; // scope 3 at $DIR/dyn-trait.rs:21:5: 21:22\n+          StorageDead(_3);                 // scope 0 at $DIR/dyn_trait.rs:+1:23: +1:24\n+          StorageLive(_4);                 // scope 1 at $DIR/dyn_trait.rs:+2:23: +2:24\n+          _4 = &(*_2);                     // scope 1 at $DIR/dyn_trait.rs:+2:23: +2:24\n+-         _0 = try_execute_query::<<Q as Query>::C>(move _4) -> bb2; // scope 1 at $DIR/dyn_trait.rs:+2:5: +2:25\n++         StorageLive(_5);                 // scope 2 at $DIR/dyn_trait.rs:27:14: 27:15\n++         StorageLive(_6);                 // scope 2 at $DIR/dyn_trait.rs:27:14: 27:15\n++         _6 = _4;                         // scope 2 at $DIR/dyn_trait.rs:27:14: 27:15\n++         _5 = move _6 as &dyn Cache<V = <Q as Query>::V> (Pointer(Unsize)); // scope 2 at $DIR/dyn_trait.rs:27:14: 27:15\n++         StorageDead(_6);                 // scope 2 at $DIR/dyn_trait.rs:27:14: 27:15\n++         StorageLive(_7);                 // scope 3 at $DIR/dyn_trait.rs:21:5: 21:22\n++         _7 = _5;                         // scope 3 at $DIR/dyn_trait.rs:21:5: 21:22\n++         _0 = <dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache(move _7) -> bb2; // scope 3 at $DIR/dyn_trait.rs:21:5: 21:22\n                                            // mir::Constant\n--                                          // + span: $DIR/dyn-trait.rs:34:5: 34:22\n+-                                          // + span: $DIR/dyn_trait.rs:34:5: 34:22\n -                                          // + literal: Const { ty: for<'a> fn(&'a <Q as Query>::C) {try_execute_query::<<Q as Query>::C>}, val: Value(<ZST>) }\n-+                                          // + span: $DIR/dyn-trait.rs:21:7: 21:20\n++                                          // + span: $DIR/dyn_trait.rs:21:7: 21:20\n +                                          // + literal: Const { ty: for<'a> fn(&'a dyn Cache<V = <Q as Query>::V>) {<dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n-+         StorageDead(_7);                 // scope 3 at $DIR/dyn-trait.rs:21:21: 21:22\n-+         StorageDead(_5);                 // scope 2 at $DIR/dyn-trait.rs:27:15: 27:16\n-          StorageDead(_4);                 // scope 1 at $DIR/dyn-trait.rs:+2:24: +2:25\n-          StorageDead(_2);                 // scope 0 at $DIR/dyn-trait.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/dyn-trait.rs:+3:2: +3:2\n++         StorageDead(_7);                 // scope 3 at $DIR/dyn_trait.rs:21:21: 21:22\n++         StorageDead(_5);                 // scope 2 at $DIR/dyn_trait.rs:27:15: 27:16\n+          StorageDead(_4);                 // scope 1 at $DIR/dyn_trait.rs:+2:24: +2:25\n+          StorageDead(_2);                 // scope 0 at $DIR/dyn_trait.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/dyn_trait.rs:+3:2: +3:2\n       }\n   }\n   "}, {"sha": "7653a5ded440ad075747355bc084cb59e51a2b66", "filename": "src/test/mir-opt/inline/dyn_trait.mk_cycle.Inline.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,22 +2,22 @@\n + // MIR for `mk_cycle` after Inline\n   \n   fn mk_cycle(_1: &dyn Cache<V = V>) -> () {\n-      debug c => _1;                       // in scope 0 at $DIR/dyn-trait.rs:+0:27: +0:28\n-      let mut _0: ();                      // return place in scope 0 at $DIR/dyn-trait.rs:+0:49: +0:49\n-      let mut _2: &dyn Cache<V = V>;       // in scope 0 at $DIR/dyn-trait.rs:+1:5: +1:22\n+      debug c => _1;                       // in scope 0 at $DIR/dyn_trait.rs:+0:27: +0:28\n+      let mut _0: ();                      // return place in scope 0 at $DIR/dyn_trait.rs:+0:49: +0:49\n+      let mut _2: &dyn Cache<V = V>;       // in scope 0 at $DIR/dyn_trait.rs:+1:5: +1:22\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/dyn-trait.rs:+1:5: +1:22\n-          _2 = &(*_1);                     // scope 0 at $DIR/dyn-trait.rs:+1:5: +1:22\n-          _0 = <dyn Cache<V = V> as Cache>::store_nocache(move _2) -> bb1; // scope 0 at $DIR/dyn-trait.rs:+1:5: +1:22\n+          StorageLive(_2);                 // scope 0 at $DIR/dyn_trait.rs:+1:5: +1:22\n+          _2 = &(*_1);                     // scope 0 at $DIR/dyn_trait.rs:+1:5: +1:22\n+          _0 = <dyn Cache<V = V> as Cache>::store_nocache(move _2) -> bb1; // scope 0 at $DIR/dyn_trait.rs:+1:5: +1:22\n                                            // mir::Constant\n-                                           // + span: $DIR/dyn-trait.rs:21:7: 21:20\n+                                           // + span: $DIR/dyn_trait.rs:21:7: 21:20\n                                            // + literal: Const { ty: for<'a> fn(&'a dyn Cache<V = V>) {<dyn Cache<V = V> as Cache>::store_nocache}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_2);                 // scope 0 at $DIR/dyn-trait.rs:+1:21: +1:22\n-          return;                          // scope 0 at $DIR/dyn-trait.rs:+2:2: +2:2\n+          StorageDead(_2);                 // scope 0 at $DIR/dyn_trait.rs:+1:21: +1:22\n+          return;                          // scope 0 at $DIR/dyn_trait.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "6a46e1e07b1a8154428b88f88a60209319b609a6", "filename": "src/test/mir-opt/inline/dyn_trait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/inline/dyn-trait.rs"}, {"sha": "0191045f3d1a5c3e060923654103d1073d2a3560", "filename": "src/test/mir-opt/inline/dyn_trait.try_execute_query.Inline.diff", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,36 +2,36 @@\n + // MIR for `try_execute_query` after Inline\n   \n   fn try_execute_query(_1: &C) -> () {\n-      debug c => _1;                       // in scope 0 at $DIR/dyn-trait.rs:+0:36: +0:37\n-      let mut _0: ();                      // return place in scope 0 at $DIR/dyn-trait.rs:+0:43: +0:43\n-      let mut _2: &dyn Cache<V = <C as Cache>::V>; // in scope 0 at $DIR/dyn-trait.rs:+1:14: +1:15\n-      let mut _3: &C;                      // in scope 0 at $DIR/dyn-trait.rs:+1:14: +1:15\n-+     scope 1 (inlined mk_cycle::<<C as Cache>::V>) { // at $DIR/dyn-trait.rs:27:5: 27:16\n-+         debug c => _2;                   // in scope 1 at $DIR/dyn-trait.rs:20:27: 20:28\n-+         let mut _4: &dyn Cache<V = <C as Cache>::V>; // in scope 1 at $DIR/dyn-trait.rs:21:5: 21:22\n+      debug c => _1;                       // in scope 0 at $DIR/dyn_trait.rs:+0:36: +0:37\n+      let mut _0: ();                      // return place in scope 0 at $DIR/dyn_trait.rs:+0:43: +0:43\n+      let mut _2: &dyn Cache<V = <C as Cache>::V>; // in scope 0 at $DIR/dyn_trait.rs:+1:14: +1:15\n+      let mut _3: &C;                      // in scope 0 at $DIR/dyn_trait.rs:+1:14: +1:15\n++     scope 1 (inlined mk_cycle::<<C as Cache>::V>) { // at $DIR/dyn_trait.rs:27:5: 27:16\n++         debug c => _2;                   // in scope 1 at $DIR/dyn_trait.rs:20:27: 20:28\n++         let mut _4: &dyn Cache<V = <C as Cache>::V>; // in scope 1 at $DIR/dyn_trait.rs:21:5: 21:22\n +     }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/dyn-trait.rs:+1:14: +1:15\n-          StorageLive(_3);                 // scope 0 at $DIR/dyn-trait.rs:+1:14: +1:15\n-          _3 = &(*_1);                     // scope 0 at $DIR/dyn-trait.rs:+1:14: +1:15\n-          _2 = move _3 as &dyn Cache<V = <C as Cache>::V> (Pointer(Unsize)); // scope 0 at $DIR/dyn-trait.rs:+1:14: +1:15\n-          StorageDead(_3);                 // scope 0 at $DIR/dyn-trait.rs:+1:14: +1:15\n--         _0 = mk_cycle::<<C as Cache>::V>(move _2) -> bb1; // scope 0 at $DIR/dyn-trait.rs:+1:5: +1:16\n-+         StorageLive(_4);                 // scope 1 at $DIR/dyn-trait.rs:21:5: 21:22\n-+         _4 = _2;                         // scope 1 at $DIR/dyn-trait.rs:21:5: 21:22\n-+         _0 = <dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache(move _4) -> bb1; // scope 1 at $DIR/dyn-trait.rs:21:5: 21:22\n+          StorageLive(_2);                 // scope 0 at $DIR/dyn_trait.rs:+1:14: +1:15\n+          StorageLive(_3);                 // scope 0 at $DIR/dyn_trait.rs:+1:14: +1:15\n+          _3 = &(*_1);                     // scope 0 at $DIR/dyn_trait.rs:+1:14: +1:15\n+          _2 = move _3 as &dyn Cache<V = <C as Cache>::V> (Pointer(Unsize)); // scope 0 at $DIR/dyn_trait.rs:+1:14: +1:15\n+          StorageDead(_3);                 // scope 0 at $DIR/dyn_trait.rs:+1:14: +1:15\n+-         _0 = mk_cycle::<<C as Cache>::V>(move _2) -> bb1; // scope 0 at $DIR/dyn_trait.rs:+1:5: +1:16\n++         StorageLive(_4);                 // scope 1 at $DIR/dyn_trait.rs:21:5: 21:22\n++         _4 = _2;                         // scope 1 at $DIR/dyn_trait.rs:21:5: 21:22\n++         _0 = <dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache(move _4) -> bb1; // scope 1 at $DIR/dyn_trait.rs:21:5: 21:22\n                                            // mir::Constant\n--                                          // + span: $DIR/dyn-trait.rs:27:5: 27:13\n+-                                          // + span: $DIR/dyn_trait.rs:27:5: 27:13\n -                                          // + literal: Const { ty: for<'a> fn(&'a (dyn Cache<V = <C as Cache>::V> + 'a)) {mk_cycle::<<C as Cache>::V>}, val: Value(<ZST>) }\n-+                                          // + span: $DIR/dyn-trait.rs:21:7: 21:20\n++                                          // + span: $DIR/dyn_trait.rs:21:7: 21:20\n +                                          // + literal: Const { ty: for<'a> fn(&'a dyn Cache<V = <C as Cache>::V>) {<dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-+         StorageDead(_4);                 // scope 1 at $DIR/dyn-trait.rs:21:21: 21:22\n-          StorageDead(_2);                 // scope 0 at $DIR/dyn-trait.rs:+1:15: +1:16\n-          return;                          // scope 0 at $DIR/dyn-trait.rs:+2:2: +2:2\n++         StorageDead(_4);                 // scope 1 at $DIR/dyn_trait.rs:21:21: 21:22\n+          StorageDead(_2);                 // scope 0 at $DIR/dyn_trait.rs:+1:15: +1:16\n+          return;                          // scope 0 at $DIR/dyn_trait.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "8956c80dcd2a9ccf3840042c1a9b719f307baae3", "filename": "src/test/mir-opt/inline/inline_any_operand.bar.Inline.after.mir", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,44 +1,44 @@\n // MIR for `bar` after Inline\n \n fn bar() -> bool {\n-    let mut _0: bool;                    // return place in scope 0 at $DIR/inline-any-operand.rs:+0:13: +0:17\n-    let _1: fn(i32, i32) -> bool {foo};  // in scope 0 at $DIR/inline-any-operand.rs:+1:9: +1:10\n-    let mut _2: fn(i32, i32) -> bool {foo}; // in scope 0 at $DIR/inline-any-operand.rs:+2:5: +2:6\n-    let mut _3: i32;                     // in scope 0 at $DIR/inline-any-operand.rs:+2:5: +2:13\n-    let mut _4: i32;                     // in scope 0 at $DIR/inline-any-operand.rs:+2:5: +2:13\n+    let mut _0: bool;                    // return place in scope 0 at $DIR/inline_any_operand.rs:+0:13: +0:17\n+    let _1: fn(i32, i32) -> bool {foo};  // in scope 0 at $DIR/inline_any_operand.rs:+1:9: +1:10\n+    let mut _2: fn(i32, i32) -> bool {foo}; // in scope 0 at $DIR/inline_any_operand.rs:+2:5: +2:6\n+    let mut _3: i32;                     // in scope 0 at $DIR/inline_any_operand.rs:+2:5: +2:13\n+    let mut _4: i32;                     // in scope 0 at $DIR/inline_any_operand.rs:+2:5: +2:13\n     scope 1 {\n-        debug f => _1;                   // in scope 1 at $DIR/inline-any-operand.rs:+1:9: +1:10\n-        scope 2 (inlined foo) {          // at $DIR/inline-any-operand.rs:12:5: 12:13\n-            debug x => _3;               // in scope 2 at $DIR/inline-any-operand.rs:16:8: 16:9\n-            debug y => _4;               // in scope 2 at $DIR/inline-any-operand.rs:16:16: 16:17\n-            let mut _5: i32;             // in scope 2 at $DIR/inline-any-operand.rs:17:5: 17:6\n-            let mut _6: i32;             // in scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n+        debug f => _1;                   // in scope 1 at $DIR/inline_any_operand.rs:+1:9: +1:10\n+        scope 2 (inlined foo) {          // at $DIR/inline_any_operand.rs:12:5: 12:13\n+            debug x => _3;               // in scope 2 at $DIR/inline_any_operand.rs:16:8: 16:9\n+            debug y => _4;               // in scope 2 at $DIR/inline_any_operand.rs:16:16: 16:17\n+            let mut _5: i32;             // in scope 2 at $DIR/inline_any_operand.rs:17:5: 17:6\n+            let mut _6: i32;             // in scope 2 at $DIR/inline_any_operand.rs:17:10: 17:11\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/inline-any-operand.rs:+1:9: +1:10\n-        _1 = foo;                        // scope 0 at $DIR/inline-any-operand.rs:+1:13: +1:16\n+        StorageLive(_1);                 // scope 0 at $DIR/inline_any_operand.rs:+1:9: +1:10\n+        _1 = foo;                        // scope 0 at $DIR/inline_any_operand.rs:+1:13: +1:16\n                                          // mir::Constant\n-                                         // + span: $DIR/inline-any-operand.rs:11:13: 11:16\n+                                         // + span: $DIR/inline_any_operand.rs:11:13: 11:16\n                                          // + literal: Const { ty: fn(i32, i32) -> bool {foo}, val: Value(<ZST>) }\n-        StorageLive(_2);                 // scope 1 at $DIR/inline-any-operand.rs:+2:5: +2:6\n-        _2 = _1;                         // scope 1 at $DIR/inline-any-operand.rs:+2:5: +2:6\n-        StorageLive(_3);                 // scope 1 at $DIR/inline-any-operand.rs:+2:5: +2:13\n-        _3 = const 1_i32;                // scope 1 at $DIR/inline-any-operand.rs:+2:5: +2:13\n-        StorageLive(_4);                 // scope 1 at $DIR/inline-any-operand.rs:+2:5: +2:13\n-        _4 = const -1_i32;               // scope 1 at $DIR/inline-any-operand.rs:+2:5: +2:13\n-        StorageLive(_5);                 // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:6\n-        _5 = _3;                         // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:6\n-        StorageLive(_6);                 // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n-        _6 = _4;                         // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n-        _0 = Eq(move _5, move _6);       // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:11\n-        StorageDead(_6);                 // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n-        StorageDead(_5);                 // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n-        StorageDead(_4);                 // scope 1 at $DIR/inline-any-operand.rs:+2:5: +2:13\n-        StorageDead(_3);                 // scope 1 at $DIR/inline-any-operand.rs:+2:5: +2:13\n-        StorageDead(_2);                 // scope 1 at $DIR/inline-any-operand.rs:+2:12: +2:13\n-        StorageDead(_1);                 // scope 0 at $DIR/inline-any-operand.rs:+3:1: +3:2\n-        return;                          // scope 0 at $DIR/inline-any-operand.rs:+3:2: +3:2\n+        StorageLive(_2);                 // scope 1 at $DIR/inline_any_operand.rs:+2:5: +2:6\n+        _2 = _1;                         // scope 1 at $DIR/inline_any_operand.rs:+2:5: +2:6\n+        StorageLive(_3);                 // scope 1 at $DIR/inline_any_operand.rs:+2:5: +2:13\n+        _3 = const 1_i32;                // scope 1 at $DIR/inline_any_operand.rs:+2:5: +2:13\n+        StorageLive(_4);                 // scope 1 at $DIR/inline_any_operand.rs:+2:5: +2:13\n+        _4 = const -1_i32;               // scope 1 at $DIR/inline_any_operand.rs:+2:5: +2:13\n+        StorageLive(_5);                 // scope 2 at $DIR/inline_any_operand.rs:17:5: 17:6\n+        _5 = _3;                         // scope 2 at $DIR/inline_any_operand.rs:17:5: 17:6\n+        StorageLive(_6);                 // scope 2 at $DIR/inline_any_operand.rs:17:10: 17:11\n+        _6 = _4;                         // scope 2 at $DIR/inline_any_operand.rs:17:10: 17:11\n+        _0 = Eq(move _5, move _6);       // scope 2 at $DIR/inline_any_operand.rs:17:5: 17:11\n+        StorageDead(_6);                 // scope 2 at $DIR/inline_any_operand.rs:17:10: 17:11\n+        StorageDead(_5);                 // scope 2 at $DIR/inline_any_operand.rs:17:10: 17:11\n+        StorageDead(_4);                 // scope 1 at $DIR/inline_any_operand.rs:+2:5: +2:13\n+        StorageDead(_3);                 // scope 1 at $DIR/inline_any_operand.rs:+2:5: +2:13\n+        StorageDead(_2);                 // scope 1 at $DIR/inline_any_operand.rs:+2:12: +2:13\n+        StorageDead(_1);                 // scope 0 at $DIR/inline_any_operand.rs:+3:1: +3:2\n+        return;                          // scope 0 at $DIR/inline_any_operand.rs:+3:2: +3:2\n     }\n }"}, {"sha": "fb0de020f73a2d945ba3717e6547ab1eea2aa27e", "filename": "src/test/mir-opt/inline/inline_any_operand.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/inline/inline-any-operand.rs"}, {"sha": "5c838159b986c55d5c934a0bbccb6ea0ba00cf65", "filename": "src/test/mir-opt/inline/inline_async.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_async.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/inline/inline-async.rs"}, {"sha": "9eb3a01eef91ad492de49d71ae712ff994579ec8", "filename": "src/test/mir-opt/inline/inline_closure.foo.Inline.after.mir", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,49 +1,49 @@\n // MIR for `foo` after Inline\n \n fn foo(_1: T, _2: i32) -> i32 {\n-    debug _t => _1;                      // in scope 0 at $DIR/inline-closure.rs:+0:17: +0:19\n-    debug q => _2;                       // in scope 0 at $DIR/inline-closure.rs:+0:24: +0:25\n-    let mut _0: i32;                     // return place in scope 0 at $DIR/inline-closure.rs:+0:35: +0:38\n-    let _3: [closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline-closure.rs:+1:9: +1:10\n-    let mut _4: &[closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline-closure.rs:+2:5: +2:6\n-    let mut _5: (i32, i32);              // in scope 0 at $DIR/inline-closure.rs:+2:5: +2:12\n-    let mut _6: i32;                     // in scope 0 at $DIR/inline-closure.rs:+2:7: +2:8\n-    let mut _7: i32;                     // in scope 0 at $DIR/inline-closure.rs:+2:10: +2:11\n-    let mut _8: i32;                     // in scope 0 at $DIR/inline-closure.rs:+2:5: +2:12\n-    let mut _9: i32;                     // in scope 0 at $DIR/inline-closure.rs:+2:5: +2:12\n+    debug _t => _1;                      // in scope 0 at $DIR/inline_closure.rs:+0:17: +0:19\n+    debug q => _2;                       // in scope 0 at $DIR/inline_closure.rs:+0:24: +0:25\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/inline_closure.rs:+0:35: +0:38\n+    let _3: [closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline_closure.rs:+1:9: +1:10\n+    let mut _4: &[closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline_closure.rs:+2:5: +2:6\n+    let mut _5: (i32, i32);              // in scope 0 at $DIR/inline_closure.rs:+2:5: +2:12\n+    let mut _6: i32;                     // in scope 0 at $DIR/inline_closure.rs:+2:7: +2:8\n+    let mut _7: i32;                     // in scope 0 at $DIR/inline_closure.rs:+2:10: +2:11\n+    let mut _8: i32;                     // in scope 0 at $DIR/inline_closure.rs:+2:5: +2:12\n+    let mut _9: i32;                     // in scope 0 at $DIR/inline_closure.rs:+2:5: +2:12\n     scope 1 {\n-        debug x => _3;                   // in scope 1 at $DIR/inline-closure.rs:+1:9: +1:10\n-        scope 2 (inlined foo::<T>::{closure#0}) { // at $DIR/inline-closure.rs:12:5: 12:12\n-            debug _t => _8;              // in scope 2 at $DIR/inline-closure.rs:+1:14: +1:16\n-            debug _q => _9;              // in scope 2 at $DIR/inline-closure.rs:+1:18: +1:20\n+        debug x => _3;                   // in scope 1 at $DIR/inline_closure.rs:+1:9: +1:10\n+        scope 2 (inlined foo::<T>::{closure#0}) { // at $DIR/inline_closure.rs:12:5: 12:12\n+            debug _t => _8;              // in scope 2 at $DIR/inline_closure.rs:+1:14: +1:16\n+            debug _q => _9;              // in scope 2 at $DIR/inline_closure.rs:+1:18: +1:20\n         }\n     }\n \n     bb0: {\n-        StorageLive(_3);                 // scope 0 at $DIR/inline-closure.rs:+1:9: +1:10\n-        Deinit(_3);                      // scope 0 at $DIR/inline-closure.rs:+1:13: +1:24\n-        StorageLive(_4);                 // scope 1 at $DIR/inline-closure.rs:+2:5: +2:6\n-        _4 = &_3;                        // scope 1 at $DIR/inline-closure.rs:+2:5: +2:6\n-        StorageLive(_5);                 // scope 1 at $DIR/inline-closure.rs:+2:5: +2:12\n-        StorageLive(_6);                 // scope 1 at $DIR/inline-closure.rs:+2:7: +2:8\n-        _6 = _2;                         // scope 1 at $DIR/inline-closure.rs:+2:7: +2:8\n-        StorageLive(_7);                 // scope 1 at $DIR/inline-closure.rs:+2:10: +2:11\n-        _7 = _2;                         // scope 1 at $DIR/inline-closure.rs:+2:10: +2:11\n-        Deinit(_5);                      // scope 1 at $DIR/inline-closure.rs:+2:5: +2:12\n-        (_5.0: i32) = move _6;           // scope 1 at $DIR/inline-closure.rs:+2:5: +2:12\n-        (_5.1: i32) = move _7;           // scope 1 at $DIR/inline-closure.rs:+2:5: +2:12\n-        StorageLive(_8);                 // scope 1 at $DIR/inline-closure.rs:+2:5: +2:12\n-        _8 = move (_5.0: i32);           // scope 1 at $DIR/inline-closure.rs:+2:5: +2:12\n-        StorageLive(_9);                 // scope 1 at $DIR/inline-closure.rs:+2:5: +2:12\n-        _9 = move (_5.1: i32);           // scope 1 at $DIR/inline-closure.rs:+2:5: +2:12\n-        _0 = _8;                         // scope 2 at $DIR/inline-closure.rs:+1:22: +1:24\n-        StorageDead(_9);                 // scope 1 at $DIR/inline-closure.rs:+2:5: +2:12\n-        StorageDead(_8);                 // scope 1 at $DIR/inline-closure.rs:+2:5: +2:12\n-        StorageDead(_7);                 // scope 1 at $DIR/inline-closure.rs:+2:11: +2:12\n-        StorageDead(_6);                 // scope 1 at $DIR/inline-closure.rs:+2:11: +2:12\n-        StorageDead(_5);                 // scope 1 at $DIR/inline-closure.rs:+2:11: +2:12\n-        StorageDead(_4);                 // scope 1 at $DIR/inline-closure.rs:+2:11: +2:12\n-        StorageDead(_3);                 // scope 0 at $DIR/inline-closure.rs:+3:1: +3:2\n-        return;                          // scope 0 at $DIR/inline-closure.rs:+3:2: +3:2\n+        StorageLive(_3);                 // scope 0 at $DIR/inline_closure.rs:+1:9: +1:10\n+        Deinit(_3);                      // scope 0 at $DIR/inline_closure.rs:+1:13: +1:24\n+        StorageLive(_4);                 // scope 1 at $DIR/inline_closure.rs:+2:5: +2:6\n+        _4 = &_3;                        // scope 1 at $DIR/inline_closure.rs:+2:5: +2:6\n+        StorageLive(_5);                 // scope 1 at $DIR/inline_closure.rs:+2:5: +2:12\n+        StorageLive(_6);                 // scope 1 at $DIR/inline_closure.rs:+2:7: +2:8\n+        _6 = _2;                         // scope 1 at $DIR/inline_closure.rs:+2:7: +2:8\n+        StorageLive(_7);                 // scope 1 at $DIR/inline_closure.rs:+2:10: +2:11\n+        _7 = _2;                         // scope 1 at $DIR/inline_closure.rs:+2:10: +2:11\n+        Deinit(_5);                      // scope 1 at $DIR/inline_closure.rs:+2:5: +2:12\n+        (_5.0: i32) = move _6;           // scope 1 at $DIR/inline_closure.rs:+2:5: +2:12\n+        (_5.1: i32) = move _7;           // scope 1 at $DIR/inline_closure.rs:+2:5: +2:12\n+        StorageLive(_8);                 // scope 1 at $DIR/inline_closure.rs:+2:5: +2:12\n+        _8 = move (_5.0: i32);           // scope 1 at $DIR/inline_closure.rs:+2:5: +2:12\n+        StorageLive(_9);                 // scope 1 at $DIR/inline_closure.rs:+2:5: +2:12\n+        _9 = move (_5.1: i32);           // scope 1 at $DIR/inline_closure.rs:+2:5: +2:12\n+        _0 = _8;                         // scope 2 at $DIR/inline_closure.rs:+1:22: +1:24\n+        StorageDead(_9);                 // scope 1 at $DIR/inline_closure.rs:+2:5: +2:12\n+        StorageDead(_8);                 // scope 1 at $DIR/inline_closure.rs:+2:5: +2:12\n+        StorageDead(_7);                 // scope 1 at $DIR/inline_closure.rs:+2:11: +2:12\n+        StorageDead(_6);                 // scope 1 at $DIR/inline_closure.rs:+2:11: +2:12\n+        StorageDead(_5);                 // scope 1 at $DIR/inline_closure.rs:+2:11: +2:12\n+        StorageDead(_4);                 // scope 1 at $DIR/inline_closure.rs:+2:11: +2:12\n+        StorageDead(_3);                 // scope 0 at $DIR/inline_closure.rs:+3:1: +3:2\n+        return;                          // scope 0 at $DIR/inline_closure.rs:+3:2: +3:2\n     }\n }"}, {"sha": "715fd0138a743da7103c456f1bab84ecb4ac6d82", "filename": "src/test/mir-opt/inline/inline_closure.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/inline/inline-closure.rs"}, {"sha": "e6275ac7f5dd9758833e78112d0174099d71e09f", "filename": "src/test/mir-opt/inline/inline_closure_borrows_arg.foo.Inline.after.mir", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,56 +1,56 @@\n // MIR for `foo` after Inline\n \n fn foo(_1: T, _2: &i32) -> i32 {\n-    debug _t => _1;                      // in scope 0 at $DIR/inline-closure-borrows-arg.rs:+0:17: +0:19\n-    debug q => _2;                       // in scope 0 at $DIR/inline-closure-borrows-arg.rs:+0:24: +0:25\n-    let mut _0: i32;                     // return place in scope 0 at $DIR/inline-closure-borrows-arg.rs:+0:36: +0:39\n-    let _3: [closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline-closure-borrows-arg.rs:+1:9: +1:10\n-    let mut _4: &[closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:6\n-    let mut _5: (&i32, &i32);            // in scope 0 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:12\n-    let mut _6: &i32;                    // in scope 0 at $DIR/inline-closure-borrows-arg.rs:+5:7: +5:8\n-    let mut _7: &i32;                    // in scope 0 at $DIR/inline-closure-borrows-arg.rs:+5:10: +5:11\n-    let mut _8: &i32;                    // in scope 0 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:12\n-    let mut _9: &i32;                    // in scope 0 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:12\n+    debug _t => _1;                      // in scope 0 at $DIR/inline_closure_borrows_arg.rs:+0:17: +0:19\n+    debug q => _2;                       // in scope 0 at $DIR/inline_closure_borrows_arg.rs:+0:24: +0:25\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/inline_closure_borrows_arg.rs:+0:36: +0:39\n+    let _3: [closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline_closure_borrows_arg.rs:+1:9: +1:10\n+    let mut _4: &[closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline_closure_borrows_arg.rs:+5:5: +5:6\n+    let mut _5: (&i32, &i32);            // in scope 0 at $DIR/inline_closure_borrows_arg.rs:+5:5: +5:12\n+    let mut _6: &i32;                    // in scope 0 at $DIR/inline_closure_borrows_arg.rs:+5:7: +5:8\n+    let mut _7: &i32;                    // in scope 0 at $DIR/inline_closure_borrows_arg.rs:+5:10: +5:11\n+    let mut _8: &i32;                    // in scope 0 at $DIR/inline_closure_borrows_arg.rs:+5:5: +5:12\n+    let mut _9: &i32;                    // in scope 0 at $DIR/inline_closure_borrows_arg.rs:+5:5: +5:12\n     scope 1 {\n-        debug x => _3;                   // in scope 1 at $DIR/inline-closure-borrows-arg.rs:+1:9: +1:10\n-        scope 2 (inlined foo::<T>::{closure#0}) { // at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-            debug r => _8;               // in scope 2 at $DIR/inline-closure-borrows-arg.rs:+1:14: +1:15\n-            debug _s => _9;              // in scope 2 at $DIR/inline-closure-borrows-arg.rs:+1:23: +1:25\n-            let _10: &i32;               // in scope 2 at $DIR/inline-closure-borrows-arg.rs:+2:13: +2:21\n+        debug x => _3;                   // in scope 1 at $DIR/inline_closure_borrows_arg.rs:+1:9: +1:10\n+        scope 2 (inlined foo::<T>::{closure#0}) { // at $DIR/inline_closure_borrows_arg.rs:16:5: 16:12\n+            debug r => _8;               // in scope 2 at $DIR/inline_closure_borrows_arg.rs:+1:14: +1:15\n+            debug _s => _9;              // in scope 2 at $DIR/inline_closure_borrows_arg.rs:+1:23: +1:25\n+            let _10: &i32;               // in scope 2 at $DIR/inline_closure_borrows_arg.rs:+2:13: +2:21\n             scope 3 {\n-                debug variable => _10;   // in scope 3 at $DIR/inline-closure-borrows-arg.rs:+2:13: +2:21\n+                debug variable => _10;   // in scope 3 at $DIR/inline_closure_borrows_arg.rs:+2:13: +2:21\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_3);                 // scope 0 at $DIR/inline-closure-borrows-arg.rs:+1:9: +1:10\n-        Deinit(_3);                      // scope 0 at $DIR/inline-closure-borrows-arg.rs:+1:13: +4:6\n-        StorageLive(_4);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:6\n-        _4 = &_3;                        // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:6\n-        StorageLive(_5);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:12\n-        StorageLive(_6);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:7: +5:8\n-        _6 = &(*_2);                     // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:7: +5:8\n-        StorageLive(_7);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:10: +5:11\n-        _7 = &(*_2);                     // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:10: +5:11\n-        Deinit(_5);                      // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:12\n-        (_5.0: &i32) = move _6;          // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:12\n-        (_5.1: &i32) = move _7;          // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:12\n-        StorageLive(_8);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:12\n-        _8 = move (_5.0: &i32);          // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:12\n-        StorageLive(_9);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:12\n-        _9 = move (_5.1: &i32);          // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:12\n-        StorageLive(_10);                // scope 2 at $DIR/inline-closure-borrows-arg.rs:+2:13: +2:21\n-        _10 = _8;                        // scope 2 at $DIR/inline-closure-borrows-arg.rs:+2:24: +2:27\n-        _0 = (*_10);                     // scope 3 at $DIR/inline-closure-borrows-arg.rs:+3:9: +3:18\n-        StorageDead(_10);                // scope 2 at $DIR/inline-closure-borrows-arg.rs:+4:5: +4:6\n-        StorageDead(_9);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:12\n-        StorageDead(_8);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:12\n-        StorageDead(_7);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:11: +5:12\n-        StorageDead(_6);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:11: +5:12\n-        StorageDead(_5);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:11: +5:12\n-        StorageDead(_4);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:11: +5:12\n-        StorageDead(_3);                 // scope 0 at $DIR/inline-closure-borrows-arg.rs:+6:1: +6:2\n-        return;                          // scope 0 at $DIR/inline-closure-borrows-arg.rs:+6:2: +6:2\n+        StorageLive(_3);                 // scope 0 at $DIR/inline_closure_borrows_arg.rs:+1:9: +1:10\n+        Deinit(_3);                      // scope 0 at $DIR/inline_closure_borrows_arg.rs:+1:13: +4:6\n+        StorageLive(_4);                 // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:5: +5:6\n+        _4 = &_3;                        // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:5: +5:6\n+        StorageLive(_5);                 // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:5: +5:12\n+        StorageLive(_6);                 // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:7: +5:8\n+        _6 = &(*_2);                     // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:7: +5:8\n+        StorageLive(_7);                 // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:10: +5:11\n+        _7 = &(*_2);                     // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:10: +5:11\n+        Deinit(_5);                      // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:5: +5:12\n+        (_5.0: &i32) = move _6;          // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:5: +5:12\n+        (_5.1: &i32) = move _7;          // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:5: +5:12\n+        StorageLive(_8);                 // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:5: +5:12\n+        _8 = move (_5.0: &i32);          // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:5: +5:12\n+        StorageLive(_9);                 // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:5: +5:12\n+        _9 = move (_5.1: &i32);          // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:5: +5:12\n+        StorageLive(_10);                // scope 2 at $DIR/inline_closure_borrows_arg.rs:+2:13: +2:21\n+        _10 = _8;                        // scope 2 at $DIR/inline_closure_borrows_arg.rs:+2:24: +2:27\n+        _0 = (*_10);                     // scope 3 at $DIR/inline_closure_borrows_arg.rs:+3:9: +3:18\n+        StorageDead(_10);                // scope 2 at $DIR/inline_closure_borrows_arg.rs:+4:5: +4:6\n+        StorageDead(_9);                 // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:5: +5:12\n+        StorageDead(_8);                 // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:5: +5:12\n+        StorageDead(_7);                 // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:11: +5:12\n+        StorageDead(_6);                 // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:11: +5:12\n+        StorageDead(_5);                 // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:11: +5:12\n+        StorageDead(_4);                 // scope 1 at $DIR/inline_closure_borrows_arg.rs:+5:11: +5:12\n+        StorageDead(_3);                 // scope 0 at $DIR/inline_closure_borrows_arg.rs:+6:1: +6:2\n+        return;                          // scope 0 at $DIR/inline_closure_borrows_arg.rs:+6:2: +6:2\n     }\n }"}, {"sha": "d76bc33f52e7dc10aa9d5c56d7f95df6ef50b020", "filename": "src/test/mir-opt/inline/inline_closure_borrows_arg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/inline/inline-closure-borrows-arg.rs"}, {"sha": "fd19c288666bd5379c29d1b42be0a7e6d7f970f9", "filename": "src/test/mir-opt/inline/inline_closure_captures.foo.Inline.after.mir", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,65 +1,65 @@\n // MIR for `foo` after Inline\n \n fn foo(_1: T, _2: i32) -> (i32, T) {\n-    debug t => _1;                       // in scope 0 at $DIR/inline-closure-captures.rs:+0:17: +0:18\n-    debug q => _2;                       // in scope 0 at $DIR/inline-closure-captures.rs:+0:23: +0:24\n-    let mut _0: (i32, T);                // return place in scope 0 at $DIR/inline-closure-captures.rs:+0:34: +0:42\n-    let _3: [closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline-closure-captures.rs:+1:9: +1:10\n-    let mut _4: &i32;                    // in scope 0 at $DIR/inline-closure-captures.rs:+1:13: +1:24\n-    let mut _5: &T;                      // in scope 0 at $DIR/inline-closure-captures.rs:+1:13: +1:24\n-    let mut _6: &[closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline-closure-captures.rs:+2:5: +2:6\n-    let mut _7: (i32,);                  // in scope 0 at $DIR/inline-closure-captures.rs:+2:5: +2:9\n-    let mut _8: i32;                     // in scope 0 at $DIR/inline-closure-captures.rs:+2:7: +2:8\n-    let mut _9: i32;                     // in scope 0 at $DIR/inline-closure-captures.rs:+2:5: +2:9\n+    debug t => _1;                       // in scope 0 at $DIR/inline_closure_captures.rs:+0:17: +0:18\n+    debug q => _2;                       // in scope 0 at $DIR/inline_closure_captures.rs:+0:23: +0:24\n+    let mut _0: (i32, T);                // return place in scope 0 at $DIR/inline_closure_captures.rs:+0:34: +0:42\n+    let _3: [closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline_closure_captures.rs:+1:9: +1:10\n+    let mut _4: &i32;                    // in scope 0 at $DIR/inline_closure_captures.rs:+1:13: +1:24\n+    let mut _5: &T;                      // in scope 0 at $DIR/inline_closure_captures.rs:+1:13: +1:24\n+    let mut _6: &[closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline_closure_captures.rs:+2:5: +2:6\n+    let mut _7: (i32,);                  // in scope 0 at $DIR/inline_closure_captures.rs:+2:5: +2:9\n+    let mut _8: i32;                     // in scope 0 at $DIR/inline_closure_captures.rs:+2:7: +2:8\n+    let mut _9: i32;                     // in scope 0 at $DIR/inline_closure_captures.rs:+2:5: +2:9\n     scope 1 {\n-        debug x => _3;                   // in scope 1 at $DIR/inline-closure-captures.rs:+1:9: +1:10\n-        scope 2 (inlined foo::<T>::{closure#0}) { // at $DIR/inline-closure-captures.rs:12:5: 12:9\n-            debug _q => _9;              // in scope 2 at $DIR/inline-closure-captures.rs:+1:14: +1:16\n-            debug q => (*((*_6).0: &i32)); // in scope 2 at $DIR/inline-closure-captures.rs:+0:23: +0:24\n-            debug t => (*((*_6).1: &T)); // in scope 2 at $DIR/inline-closure-captures.rs:+0:17: +0:18\n-            let mut _10: i32;            // in scope 2 at $DIR/inline-closure-captures.rs:+1:19: +1:20\n-            let mut _11: T;              // in scope 2 at $DIR/inline-closure-captures.rs:+1:22: +1:23\n-            let mut _12: &i32;           // in scope 2 at $DIR/inline-closure-captures.rs:+1:13: +1:24\n-            let mut _13: &T;             // in scope 2 at $DIR/inline-closure-captures.rs:+1:13: +1:24\n+        debug x => _3;                   // in scope 1 at $DIR/inline_closure_captures.rs:+1:9: +1:10\n+        scope 2 (inlined foo::<T>::{closure#0}) { // at $DIR/inline_closure_captures.rs:12:5: 12:9\n+            debug _q => _9;              // in scope 2 at $DIR/inline_closure_captures.rs:+1:14: +1:16\n+            debug q => (*((*_6).0: &i32)); // in scope 2 at $DIR/inline_closure_captures.rs:+0:23: +0:24\n+            debug t => (*((*_6).1: &T)); // in scope 2 at $DIR/inline_closure_captures.rs:+0:17: +0:18\n+            let mut _10: i32;            // in scope 2 at $DIR/inline_closure_captures.rs:+1:19: +1:20\n+            let mut _11: T;              // in scope 2 at $DIR/inline_closure_captures.rs:+1:22: +1:23\n+            let mut _12: &i32;           // in scope 2 at $DIR/inline_closure_captures.rs:+1:13: +1:24\n+            let mut _13: &T;             // in scope 2 at $DIR/inline_closure_captures.rs:+1:13: +1:24\n         }\n     }\n \n     bb0: {\n-        StorageLive(_3);                 // scope 0 at $DIR/inline-closure-captures.rs:+1:9: +1:10\n-        StorageLive(_4);                 // scope 0 at $DIR/inline-closure-captures.rs:+1:13: +1:24\n-        _4 = &_2;                        // scope 0 at $DIR/inline-closure-captures.rs:+1:13: +1:24\n-        StorageLive(_5);                 // scope 0 at $DIR/inline-closure-captures.rs:+1:13: +1:24\n-        _5 = &_1;                        // scope 0 at $DIR/inline-closure-captures.rs:+1:13: +1:24\n-        Deinit(_3);                      // scope 0 at $DIR/inline-closure-captures.rs:+1:13: +1:24\n-        (_3.0: &i32) = move _4;          // scope 0 at $DIR/inline-closure-captures.rs:+1:13: +1:24\n-        (_3.1: &T) = move _5;            // scope 0 at $DIR/inline-closure-captures.rs:+1:13: +1:24\n-        StorageDead(_5);                 // scope 0 at $DIR/inline-closure-captures.rs:+1:16: +1:17\n-        StorageDead(_4);                 // scope 0 at $DIR/inline-closure-captures.rs:+1:16: +1:17\n-        StorageLive(_6);                 // scope 1 at $DIR/inline-closure-captures.rs:+2:5: +2:6\n-        _6 = &_3;                        // scope 1 at $DIR/inline-closure-captures.rs:+2:5: +2:6\n-        StorageLive(_7);                 // scope 1 at $DIR/inline-closure-captures.rs:+2:5: +2:9\n-        StorageLive(_8);                 // scope 1 at $DIR/inline-closure-captures.rs:+2:7: +2:8\n-        _8 = _2;                         // scope 1 at $DIR/inline-closure-captures.rs:+2:7: +2:8\n-        Deinit(_7);                      // scope 1 at $DIR/inline-closure-captures.rs:+2:5: +2:9\n-        (_7.0: i32) = move _8;           // scope 1 at $DIR/inline-closure-captures.rs:+2:5: +2:9\n-        StorageLive(_9);                 // scope 1 at $DIR/inline-closure-captures.rs:+2:5: +2:9\n-        _9 = move (_7.0: i32);           // scope 1 at $DIR/inline-closure-captures.rs:+2:5: +2:9\n-        StorageLive(_10);                // scope 2 at $DIR/inline-closure-captures.rs:+1:19: +1:20\n-        _12 = deref_copy ((*_6).0: &i32); // scope 2 at $DIR/inline-closure-captures.rs:+1:19: +1:20\n-        _10 = (*_12);                    // scope 2 at $DIR/inline-closure-captures.rs:+1:19: +1:20\n-        StorageLive(_11);                // scope 2 at $DIR/inline-closure-captures.rs:+1:22: +1:23\n-        _13 = deref_copy ((*_6).1: &T);  // scope 2 at $DIR/inline-closure-captures.rs:+1:22: +1:23\n-        _11 = (*_13);                    // scope 2 at $DIR/inline-closure-captures.rs:+1:22: +1:23\n-        Deinit(_0);                      // scope 2 at $DIR/inline-closure-captures.rs:+1:18: +1:24\n-        (_0.0: i32) = move _10;          // scope 2 at $DIR/inline-closure-captures.rs:+1:18: +1:24\n-        (_0.1: T) = move _11;            // scope 2 at $DIR/inline-closure-captures.rs:+1:18: +1:24\n-        StorageDead(_11);                // scope 2 at $DIR/inline-closure-captures.rs:+1:23: +1:24\n-        StorageDead(_10);                // scope 2 at $DIR/inline-closure-captures.rs:+1:23: +1:24\n-        StorageDead(_9);                 // scope 1 at $DIR/inline-closure-captures.rs:+2:5: +2:9\n-        StorageDead(_8);                 // scope 1 at $DIR/inline-closure-captures.rs:+2:8: +2:9\n-        StorageDead(_7);                 // scope 1 at $DIR/inline-closure-captures.rs:+2:8: +2:9\n-        StorageDead(_6);                 // scope 1 at $DIR/inline-closure-captures.rs:+2:8: +2:9\n-        StorageDead(_3);                 // scope 0 at $DIR/inline-closure-captures.rs:+3:1: +3:2\n-        return;                          // scope 0 at $DIR/inline-closure-captures.rs:+3:2: +3:2\n+        StorageLive(_3);                 // scope 0 at $DIR/inline_closure_captures.rs:+1:9: +1:10\n+        StorageLive(_4);                 // scope 0 at $DIR/inline_closure_captures.rs:+1:13: +1:24\n+        _4 = &_2;                        // scope 0 at $DIR/inline_closure_captures.rs:+1:13: +1:24\n+        StorageLive(_5);                 // scope 0 at $DIR/inline_closure_captures.rs:+1:13: +1:24\n+        _5 = &_1;                        // scope 0 at $DIR/inline_closure_captures.rs:+1:13: +1:24\n+        Deinit(_3);                      // scope 0 at $DIR/inline_closure_captures.rs:+1:13: +1:24\n+        (_3.0: &i32) = move _4;          // scope 0 at $DIR/inline_closure_captures.rs:+1:13: +1:24\n+        (_3.1: &T) = move _5;            // scope 0 at $DIR/inline_closure_captures.rs:+1:13: +1:24\n+        StorageDead(_5);                 // scope 0 at $DIR/inline_closure_captures.rs:+1:16: +1:17\n+        StorageDead(_4);                 // scope 0 at $DIR/inline_closure_captures.rs:+1:16: +1:17\n+        StorageLive(_6);                 // scope 1 at $DIR/inline_closure_captures.rs:+2:5: +2:6\n+        _6 = &_3;                        // scope 1 at $DIR/inline_closure_captures.rs:+2:5: +2:6\n+        StorageLive(_7);                 // scope 1 at $DIR/inline_closure_captures.rs:+2:5: +2:9\n+        StorageLive(_8);                 // scope 1 at $DIR/inline_closure_captures.rs:+2:7: +2:8\n+        _8 = _2;                         // scope 1 at $DIR/inline_closure_captures.rs:+2:7: +2:8\n+        Deinit(_7);                      // scope 1 at $DIR/inline_closure_captures.rs:+2:5: +2:9\n+        (_7.0: i32) = move _8;           // scope 1 at $DIR/inline_closure_captures.rs:+2:5: +2:9\n+        StorageLive(_9);                 // scope 1 at $DIR/inline_closure_captures.rs:+2:5: +2:9\n+        _9 = move (_7.0: i32);           // scope 1 at $DIR/inline_closure_captures.rs:+2:5: +2:9\n+        StorageLive(_10);                // scope 2 at $DIR/inline_closure_captures.rs:+1:19: +1:20\n+        _12 = deref_copy ((*_6).0: &i32); // scope 2 at $DIR/inline_closure_captures.rs:+1:19: +1:20\n+        _10 = (*_12);                    // scope 2 at $DIR/inline_closure_captures.rs:+1:19: +1:20\n+        StorageLive(_11);                // scope 2 at $DIR/inline_closure_captures.rs:+1:22: +1:23\n+        _13 = deref_copy ((*_6).1: &T);  // scope 2 at $DIR/inline_closure_captures.rs:+1:22: +1:23\n+        _11 = (*_13);                    // scope 2 at $DIR/inline_closure_captures.rs:+1:22: +1:23\n+        Deinit(_0);                      // scope 2 at $DIR/inline_closure_captures.rs:+1:18: +1:24\n+        (_0.0: i32) = move _10;          // scope 2 at $DIR/inline_closure_captures.rs:+1:18: +1:24\n+        (_0.1: T) = move _11;            // scope 2 at $DIR/inline_closure_captures.rs:+1:18: +1:24\n+        StorageDead(_11);                // scope 2 at $DIR/inline_closure_captures.rs:+1:23: +1:24\n+        StorageDead(_10);                // scope 2 at $DIR/inline_closure_captures.rs:+1:23: +1:24\n+        StorageDead(_9);                 // scope 1 at $DIR/inline_closure_captures.rs:+2:5: +2:9\n+        StorageDead(_8);                 // scope 1 at $DIR/inline_closure_captures.rs:+2:8: +2:9\n+        StorageDead(_7);                 // scope 1 at $DIR/inline_closure_captures.rs:+2:8: +2:9\n+        StorageDead(_6);                 // scope 1 at $DIR/inline_closure_captures.rs:+2:8: +2:9\n+        StorageDead(_3);                 // scope 0 at $DIR/inline_closure_captures.rs:+3:1: +3:2\n+        return;                          // scope 0 at $DIR/inline_closure_captures.rs:+3:2: +3:2\n     }\n }"}, {"sha": "52b6817e401c1b354bd3e2388045d841bb24ddc6", "filename": "src/test/mir-opt/inline/inline_closure_captures.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/inline/inline-closure-captures.rs"}, {"sha": "e30a5e116ea4b3d8e66835280ffdbb3d6da162af", "filename": "src/test/mir-opt/inline/inline_compatibility.inlined_no_sanitize.Inline.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,23 +2,23 @@\n + // MIR for `inlined_no_sanitize` after Inline\n   \n   fn inlined_no_sanitize() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:+0:37: +0:37\n-      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:18\n-+     scope 1 (inlined no_sanitize) {      // at $DIR/inline-compatibility.rs:24:5: 24:18\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_compatibility.rs:+0:37: +0:37\n+      let _1: ();                          // in scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:18\n++     scope 1 (inlined no_sanitize) {      // at $DIR/inline_compatibility.rs:24:5: 24:18\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:18\n--         _1 = no_sanitize() -> bb1;       // scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:18\n+          StorageLive(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:18\n+-         _1 = no_sanitize() -> bb1;       // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:18\n -                                          // mir::Constant\n--                                          // + span: $DIR/inline-compatibility.rs:24:5: 24:16\n+-                                          // + span: $DIR/inline_compatibility.rs:24:5: 24:16\n -                                          // + literal: Const { ty: unsafe fn() {no_sanitize}, val: Value(<ZST>) }\n -     }\n - \n -     bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:+1:18: +1:19\n-          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:+0:37: +2:2\n-          return;                          // scope 0 at $DIR/inline-compatibility.rs:+2:2: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:18: +1:19\n+          _0 = const ();                   // scope 0 at $DIR/inline_compatibility.rs:+0:37: +2:2\n+          return;                          // scope 0 at $DIR/inline_compatibility.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "c2b3c46a30c69c5c22f3afff45b8b7776a0838cf", "filename": "src/test/mir-opt/inline/inline_compatibility.inlined_target_feature.Inline.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,23 +2,23 @@\n + // MIR for `inlined_target_feature` after Inline\n   \n   fn inlined_target_feature() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:+0:40: +0:40\n-      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:21\n-+     scope 1 (inlined target_feature) {   // at $DIR/inline-compatibility.rs:13:5: 13:21\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_compatibility.rs:+0:40: +0:40\n+      let _1: ();                          // in scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:21\n++     scope 1 (inlined target_feature) {   // at $DIR/inline_compatibility.rs:13:5: 13:21\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:21\n--         _1 = target_feature() -> bb1;    // scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:21\n+          StorageLive(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:21\n+-         _1 = target_feature() -> bb1;    // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:21\n -                                          // mir::Constant\n--                                          // + span: $DIR/inline-compatibility.rs:13:5: 13:19\n+-                                          // + span: $DIR/inline_compatibility.rs:13:5: 13:19\n -                                          // + literal: Const { ty: unsafe fn() {target_feature}, val: Value(<ZST>) }\n -     }\n - \n -     bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:+1:21: +1:22\n-          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:+0:40: +2:2\n-          return;                          // scope 0 at $DIR/inline-compatibility.rs:+2:2: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:21: +1:22\n+          _0 = const ();                   // scope 0 at $DIR/inline_compatibility.rs:+0:40: +2:2\n+          return;                          // scope 0 at $DIR/inline_compatibility.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "0ca5a5f70b7fddaf4b2b17caa8bcea5a709108e2", "filename": "src/test/mir-opt/inline/inline_compatibility.not_inlined_c_variadic.Inline.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_c_variadic.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_c_variadic.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_c_variadic.Inline.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,24 +2,24 @@\n + // MIR for `not_inlined_c_variadic` after Inline\n   \n   fn not_inlined_c_variadic() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:+0:40: +0:40\n-      let _1: u32;                         // in scope 0 at $DIR/inline-compatibility.rs:+1:9: +1:10\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_compatibility.rs:+0:40: +0:40\n+      let _1: u32;                         // in scope 0 at $DIR/inline_compatibility.rs:+1:9: +1:10\n       scope 1 {\n-          debug s => _1;                   // in scope 1 at $DIR/inline-compatibility.rs:+1:9: +1:10\n+          debug s => _1;                   // in scope 1 at $DIR/inline_compatibility.rs:+1:9: +1:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:+1:9: +1:10\n-          _1 = sum(const 4_u32, const 4_u32, const 30_u32, const 200_u32, const 1000_u32) -> bb1; // scope 0 at $DIR/inline-compatibility.rs:+1:13: +1:52\n+          StorageLive(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:9: +1:10\n+          _1 = sum(const 4_u32, const 4_u32, const 30_u32, const 200_u32, const 1000_u32) -> bb1; // scope 0 at $DIR/inline_compatibility.rs:+1:13: +1:52\n                                            // mir::Constant\n-                                           // + span: $DIR/inline-compatibility.rs:42:13: 42:16\n+                                           // + span: $DIR/inline_compatibility.rs:42:13: 42:16\n                                            // + literal: Const { ty: unsafe extern \"C\" fn(u32, ...) -> u32 {sum}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:+0:40: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/inline-compatibility.rs:+2:2: +2:2\n+          _0 = const ();                   // scope 0 at $DIR/inline_compatibility.rs:+0:40: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/inline_compatibility.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "00d405c77f91de0a4c19eb5a32bc1024c1d3ce1b", "filename": "src/test/mir-opt/inline/inline_compatibility.not_inlined_no_sanitize.Inline.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,21 +2,21 @@\n + // MIR for `not_inlined_no_sanitize` after Inline\n   \n   fn not_inlined_no_sanitize() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:+0:41: +0:41\n-      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:18\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_compatibility.rs:+0:41: +0:41\n+      let _1: ();                          // in scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:18\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:18\n-          _1 = no_sanitize() -> bb1;       // scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:18\n+          StorageLive(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:18\n+          _1 = no_sanitize() -> bb1;       // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:18\n                                            // mir::Constant\n-                                           // + span: $DIR/inline-compatibility.rs:29:5: 29:16\n+                                           // + span: $DIR/inline_compatibility.rs:29:5: 29:16\n                                            // + literal: Const { ty: unsafe fn() {no_sanitize}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:+1:18: +1:19\n-          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:+0:41: +2:2\n-          return;                          // scope 0 at $DIR/inline-compatibility.rs:+2:2: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:18: +1:19\n+          _0 = const ();                   // scope 0 at $DIR/inline_compatibility.rs:+0:41: +2:2\n+          return;                          // scope 0 at $DIR/inline_compatibility.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "8b9c86f5515a38bc118b9802ace9a403ea6f208b", "filename": "src/test/mir-opt/inline/inline_compatibility.not_inlined_target_feature.Inline.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,21 +2,21 @@\n + // MIR for `not_inlined_target_feature` after Inline\n   \n   fn not_inlined_target_feature() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:+0:44: +0:44\n-      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:21\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_compatibility.rs:+0:44: +0:44\n+      let _1: ();                          // in scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:21\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:21\n-          _1 = target_feature() -> bb1;    // scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:21\n+          StorageLive(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:21\n+          _1 = target_feature() -> bb1;    // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:21\n                                            // mir::Constant\n-                                           // + span: $DIR/inline-compatibility.rs:18:5: 18:19\n+                                           // + span: $DIR/inline_compatibility.rs:18:5: 18:19\n                                            // + literal: Const { ty: unsafe fn() {target_feature}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:+1:21: +1:22\n-          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:+0:44: +2:2\n-          return;                          // scope 0 at $DIR/inline-compatibility.rs:+2:2: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:21: +1:22\n+          _0 = const ();                   // scope 0 at $DIR/inline_compatibility.rs:+0:44: +2:2\n+          return;                          // scope 0 at $DIR/inline_compatibility.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "30aff0a64efb91ff24c9c1cf24e74531e4502080", "filename": "src/test/mir-opt/inline/inline_compatibility.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/inline/inline-compatibility.rs"}, {"sha": "5510cd7bc8ced1d003fbd3b3fd914263c1466c44", "filename": "src/test/mir-opt/inline/inline_cycle.one.Inline.diff", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,29 +2,29 @@\n + // MIR for `one` after Inline\n   \n   fn one() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-cycle.rs:+0:10: +0:10\n-      let _1: ();                          // in scope 0 at $DIR/inline-cycle.rs:+1:5: +1:24\n-+     scope 1 (inlined <C as Call>::call) { // at $DIR/inline-cycle.rs:14:5: 14:24\n-+         scope 2 (inlined <A<C> as Call>::call) { // at $DIR/inline-cycle.rs:43:9: 43:23\n-+             scope 3 (inlined <B<C> as Call>::call) { // at $DIR/inline-cycle.rs:28:9: 28:31\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_cycle.rs:+0:10: +0:10\n+      let _1: ();                          // in scope 0 at $DIR/inline_cycle.rs:+1:5: +1:24\n++     scope 1 (inlined <C as Call>::call) { // at $DIR/inline_cycle.rs:14:5: 14:24\n++         scope 2 (inlined <A<C> as Call>::call) { // at $DIR/inline_cycle.rs:43:9: 43:23\n++             scope 3 (inlined <B<C> as Call>::call) { // at $DIR/inline_cycle.rs:28:9: 28:31\n +             }\n +         }\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-cycle.rs:+1:5: +1:24\n--         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline-cycle.rs:+1:5: +1:24\n-+         _1 = <C as Call>::call() -> bb1; // scope 3 at $DIR/inline-cycle.rs:36:9: 36:28\n+          StorageLive(_1);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:24\n+-         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:24\n++         _1 = <C as Call>::call() -> bb1; // scope 3 at $DIR/inline_cycle.rs:36:9: 36:28\n                                            // mir::Constant\n--                                          // + span: $DIR/inline-cycle.rs:14:5: 14:22\n-+                                          // + span: $DIR/inline-cycle.rs:36:9: 36:26\n+-                                          // + span: $DIR/inline_cycle.rs:14:5: 14:22\n++                                          // + span: $DIR/inline_cycle.rs:36:9: 36:26\n                                            // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-cycle.rs:+1:24: +1:25\n-          _0 = const ();                   // scope 0 at $DIR/inline-cycle.rs:+0:10: +2:2\n-          return;                          // scope 0 at $DIR/inline-cycle.rs:+2:2: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline_cycle.rs:+1:24: +1:25\n+          _0 = const ();                   // scope 0 at $DIR/inline_cycle.rs:+0:10: +2:2\n+          return;                          // scope 0 at $DIR/inline_cycle.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "63ad57de1d46495147c786fc4f69c73952d6d29b", "filename": "src/test/mir-opt/inline/inline_cycle.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/inline/inline-cycle.rs"}, {"sha": "eceeb96f79f08814e4a7b2df2e4effd9ee08fb93", "filename": "src/test/mir-opt/inline/inline_cycle.two.Inline.diff", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,54 +2,54 @@\n + // MIR for `two` after Inline\n   \n   fn two() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-cycle.rs:+0:10: +0:10\n-      let _1: ();                          // in scope 0 at $DIR/inline-cycle.rs:+1:5: +1:12\n-+     let mut _2: fn() {f};                // in scope 0 at $DIR/inline-cycle.rs:+1:5: +1:12\n-+     scope 1 (inlined call::<fn() {f}>) { // at $DIR/inline-cycle.rs:49:5: 49:12\n-+         debug f => _2;                   // in scope 1 at $DIR/inline-cycle.rs:53:22: 53:23\n-+         let _3: ();                      // in scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n-+         let mut _4: fn() {f};            // in scope 1 at $DIR/inline-cycle.rs:54:5: 54:6\n-+         let mut _5: ();                  // in scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n-+         scope 2 (inlined <fn() {f} as FnOnce<()>>::call_once - shim(fn() {f})) { // at $DIR/inline-cycle.rs:54:5: 54:8\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_cycle.rs:+0:10: +0:10\n+      let _1: ();                          // in scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n++     let mut _2: fn() {f};                // in scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n++     scope 1 (inlined call::<fn() {f}>) { // at $DIR/inline_cycle.rs:49:5: 49:12\n++         debug f => _2;                   // in scope 1 at $DIR/inline_cycle.rs:53:22: 53:23\n++         let _3: ();                      // in scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n++         let mut _4: fn() {f};            // in scope 1 at $DIR/inline_cycle.rs:54:5: 54:6\n++         let mut _5: ();                  // in scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n++         scope 2 (inlined <fn() {f} as FnOnce<()>>::call_once - shim(fn() {f})) { // at $DIR/inline_cycle.rs:54:5: 54:8\n +             scope 3 (inlined f) {        // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n-+                 let _6: ();              // in scope 3 at $DIR/inline-cycle.rs:59:5: 59:12\n++                 let _6: ();              // in scope 3 at $DIR/inline_cycle.rs:59:5: 59:12\n +             }\n +         }\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-cycle.rs:+1:5: +1:12\n--         _1 = call::<fn() {f}>(f) -> bb1; // scope 0 at $DIR/inline-cycle.rs:+1:5: +1:12\n-+         StorageLive(_2);                 // scope 0 at $DIR/inline-cycle.rs:+1:5: +1:12\n-+         _2 = f;                          // scope 0 at $DIR/inline-cycle.rs:+1:5: +1:12\n+          StorageLive(_1);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n+-         _1 = call::<fn() {f}>(f) -> bb1; // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n++         StorageLive(_2);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n++         _2 = f;                          // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n                                            // mir::Constant\n--                                          // + span: $DIR/inline-cycle.rs:49:5: 49:9\n-+                                          // + span: $DIR/inline-cycle.rs:49:10: 49:11\n+-                                          // + span: $DIR/inline_cycle.rs:49:5: 49:9\n++                                          // + span: $DIR/inline_cycle.rs:49:10: 49:11\n +                                          // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }\n-+         StorageLive(_3);                 // scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n-+         StorageLive(_4);                 // scope 1 at $DIR/inline-cycle.rs:54:5: 54:6\n-+         _4 = move _2;                    // scope 1 at $DIR/inline-cycle.rs:54:5: 54:6\n-+         StorageLive(_5);                 // scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n-+         StorageLive(_6);                 // scope 3 at $DIR/inline-cycle.rs:59:5: 59:12\n-+         _6 = call::<fn() {f}>(f) -> bb1; // scope 3 at $DIR/inline-cycle.rs:59:5: 59:12\n++         StorageLive(_3);                 // scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n++         StorageLive(_4);                 // scope 1 at $DIR/inline_cycle.rs:54:5: 54:6\n++         _4 = move _2;                    // scope 1 at $DIR/inline_cycle.rs:54:5: 54:6\n++         StorageLive(_5);                 // scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n++         StorageLive(_6);                 // scope 3 at $DIR/inline_cycle.rs:59:5: 59:12\n++         _6 = call::<fn() {f}>(f) -> bb1; // scope 3 at $DIR/inline_cycle.rs:59:5: 59:12\n +                                          // mir::Constant\n-+                                          // + span: $DIR/inline-cycle.rs:59:5: 59:9\n++                                          // + span: $DIR/inline_cycle.rs:59:5: 59:9\n                                            // + literal: Const { ty: fn(fn() {f}) {call::<fn() {f}>}, val: Value(<ZST>) }\n                                            // mir::Constant\n--                                          // + span: $DIR/inline-cycle.rs:49:10: 49:11\n-+                                          // + span: $DIR/inline-cycle.rs:59:10: 59:11\n+-                                          // + span: $DIR/inline_cycle.rs:49:10: 49:11\n++                                          // + span: $DIR/inline_cycle.rs:59:10: 59:11\n                                            // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-+         StorageDead(_6);                 // scope 3 at $DIR/inline-cycle.rs:59:12: 59:13\n-+         StorageDead(_5);                 // scope 1 at $DIR/inline-cycle.rs:54:7: 54:8\n-+         StorageDead(_4);                 // scope 1 at $DIR/inline-cycle.rs:54:7: 54:8\n-+         StorageDead(_3);                 // scope 1 at $DIR/inline-cycle.rs:54:8: 54:9\n-+         StorageDead(_2);                 // scope 0 at $DIR/inline-cycle.rs:+1:5: +1:12\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-cycle.rs:+1:12: +1:13\n-          _0 = const ();                   // scope 0 at $DIR/inline-cycle.rs:+0:10: +2:2\n-          return;                          // scope 0 at $DIR/inline-cycle.rs:+2:2: +2:2\n++         StorageDead(_6);                 // scope 3 at $DIR/inline_cycle.rs:59:12: 59:13\n++         StorageDead(_5);                 // scope 1 at $DIR/inline_cycle.rs:54:7: 54:8\n++         StorageDead(_4);                 // scope 1 at $DIR/inline_cycle.rs:54:7: 54:8\n++         StorageDead(_3);                 // scope 1 at $DIR/inline_cycle.rs:54:8: 54:9\n++         StorageDead(_2);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n+          StorageDead(_1);                 // scope 0 at $DIR/inline_cycle.rs:+1:12: +1:13\n+          _0 = const ();                   // scope 0 at $DIR/inline_cycle.rs:+0:10: +2:2\n+          return;                          // scope 0 at $DIR/inline_cycle.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "52debab4dd1c0348ed20ea66294415146254c6f6", "filename": "src/test/mir-opt/inline/inline_cycle_generic.main.Inline.diff", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,31 +2,31 @@\n + // MIR for `main` after Inline\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-cycle-generic.rs:+0:11: +0:11\n-      let _1: ();                          // in scope 0 at $DIR/inline-cycle-generic.rs:+1:5: +1:24\n-+     scope 1 (inlined <C as Call>::call) { // at $DIR/inline-cycle-generic.rs:9:5: 9:24\n-+         scope 2 (inlined <B<A> as Call>::call) { // at $DIR/inline-cycle-generic.rs:38:9: 38:31\n-+             scope 3 (inlined <A as Call>::call) { // at $DIR/inline-cycle-generic.rs:31:9: 31:28\n-+                 scope 4 (inlined <B<C> as Call>::call) { // at $DIR/inline-cycle-generic.rs:23:9: 23:31\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_cycle_generic.rs:+0:11: +0:11\n+      let _1: ();                          // in scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n++     scope 1 (inlined <C as Call>::call) { // at $DIR/inline_cycle_generic.rs:9:5: 9:24\n++         scope 2 (inlined <B<A> as Call>::call) { // at $DIR/inline_cycle_generic.rs:38:9: 38:31\n++             scope 3 (inlined <A as Call>::call) { // at $DIR/inline_cycle_generic.rs:31:9: 31:28\n++                 scope 4 (inlined <B<C> as Call>::call) { // at $DIR/inline_cycle_generic.rs:23:9: 23:31\n +                 }\n +             }\n +         }\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-cycle-generic.rs:+1:5: +1:24\n--         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline-cycle-generic.rs:+1:5: +1:24\n-+         _1 = <C as Call>::call() -> bb1; // scope 4 at $DIR/inline-cycle-generic.rs:31:9: 31:28\n+          StorageLive(_1);                 // scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n+-         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n++         _1 = <C as Call>::call() -> bb1; // scope 4 at $DIR/inline_cycle_generic.rs:31:9: 31:28\n                                            // mir::Constant\n--                                          // + span: $DIR/inline-cycle-generic.rs:9:5: 9:22\n-+                                          // + span: $DIR/inline-cycle-generic.rs:31:9: 31:26\n+-                                          // + span: $DIR/inline_cycle_generic.rs:9:5: 9:22\n++                                          // + span: $DIR/inline_cycle_generic.rs:31:9: 31:26\n                                            // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-cycle-generic.rs:+1:24: +1:25\n-          _0 = const ();                   // scope 0 at $DIR/inline-cycle-generic.rs:+0:11: +2:2\n-          return;                          // scope 0 at $DIR/inline-cycle-generic.rs:+2:2: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline_cycle_generic.rs:+1:24: +1:25\n+          _0 = const ();                   // scope 0 at $DIR/inline_cycle_generic.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/inline_cycle_generic.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "24b4f37939ad1a4194e9c1dd97b733ce377df880", "filename": "src/test/mir-opt/inline/inline_cycle_generic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/inline/inline-cycle-generic.rs"}, {"sha": "b49191f495b945d3e601ee9e1500b322fe67111b", "filename": "src/test/mir-opt/inline/inline_diverging.f.Inline.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.f.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.f.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.f.Inline.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,23 +2,23 @@\n + // MIR for `f` after Inline\n   \n   fn f() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-diverging.rs:+0:12: +0:12\n-      let mut _1: !;                       // in scope 0 at $DIR/inline-diverging.rs:+0:12: +2:2\n-      let _2: !;                           // in scope 0 at $DIR/inline-diverging.rs:+1:5: +1:12\n-+     scope 1 (inlined sleep) {            // at $DIR/inline-diverging.rs:8:5: 8:12\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_diverging.rs:+0:12: +0:12\n+      let mut _1: !;                       // in scope 0 at $DIR/inline_diverging.rs:+0:12: +2:2\n+      let _2: !;                           // in scope 0 at $DIR/inline_diverging.rs:+1:5: +1:12\n++     scope 1 (inlined sleep) {            // at $DIR/inline_diverging.rs:8:5: 8:12\n +     }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/inline-diverging.rs:+1:5: +1:12\n--         _2 = sleep();                    // scope 0 at $DIR/inline-diverging.rs:+1:5: +1:12\n+          StorageLive(_2);                 // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:12\n+-         _2 = sleep();                    // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:12\n -                                          // mir::Constant\n--                                          // + span: $DIR/inline-diverging.rs:8:5: 8:10\n+-                                          // + span: $DIR/inline_diverging.rs:8:5: 8:10\n -                                          // + literal: Const { ty: fn() -> ! {sleep}, val: Value(<ZST>) }\n-+         goto -> bb1;                     // scope 0 at $DIR/inline-diverging.rs:+1:5: +1:12\n++         goto -> bb1;                     // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:12\n +     }\n + \n +     bb1: {\n-+         goto -> bb1;                     // scope 1 at $DIR/inline-diverging.rs:39:5: 39:12\n++         goto -> bb1;                     // scope 1 at $DIR/inline_diverging.rs:39:5: 39:12\n       }\n   }\n   "}, {"sha": "1e703a8fd2baf357508020763b0776f6e2c45245", "filename": "src/test/mir-opt/inline/inline_diverging.g.Inline.diff", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,42 +2,42 @@\n + // MIR for `g` after Inline\n   \n   fn g(_1: i32) -> u32 {\n-      debug i => _1;                       // in scope 0 at $DIR/inline-diverging.rs:+0:10: +0:11\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/inline-diverging.rs:+0:21: +0:24\n-      let mut _2: bool;                    // in scope 0 at $DIR/inline-diverging.rs:+1:8: +1:13\n-      let mut _3: i32;                     // in scope 0 at $DIR/inline-diverging.rs:+1:8: +1:9\n-      let mut _4: i32;                     // in scope 0 at $DIR/inline-diverging.rs:+2:9: +2:10\n-      let mut _5: !;                       // in scope 0 at $DIR/inline-diverging.rs:+3:12: +5:6\n-      let _6: !;                           // in scope 0 at $DIR/inline-diverging.rs:+4:9: +4:16\n-+     scope 1 (inlined panic) {            // at $DIR/inline-diverging.rs:16:9: 16:16\n+      debug i => _1;                       // in scope 0 at $DIR/inline_diverging.rs:+0:10: +0:11\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/inline_diverging.rs:+0:21: +0:24\n+      let mut _2: bool;                    // in scope 0 at $DIR/inline_diverging.rs:+1:8: +1:13\n+      let mut _3: i32;                     // in scope 0 at $DIR/inline_diverging.rs:+1:8: +1:9\n+      let mut _4: i32;                     // in scope 0 at $DIR/inline_diverging.rs:+2:9: +2:10\n+      let mut _5: !;                       // in scope 0 at $DIR/inline_diverging.rs:+3:12: +5:6\n+      let _6: !;                           // in scope 0 at $DIR/inline_diverging.rs:+4:9: +4:16\n++     scope 1 (inlined panic) {            // at $DIR/inline_diverging.rs:16:9: 16:16\n +         let mut _7: !;                   // in scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL\n +     }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/inline-diverging.rs:+1:8: +1:13\n-          StorageLive(_3);                 // scope 0 at $DIR/inline-diverging.rs:+1:8: +1:9\n-          _3 = _1;                         // scope 0 at $DIR/inline-diverging.rs:+1:8: +1:9\n-          _2 = Gt(move _3, const 0_i32);   // scope 0 at $DIR/inline-diverging.rs:+1:8: +1:13\n-          StorageDead(_3);                 // scope 0 at $DIR/inline-diverging.rs:+1:12: +1:13\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/inline-diverging.rs:+1:8: +1:13\n+          StorageLive(_2);                 // scope 0 at $DIR/inline_diverging.rs:+1:8: +1:13\n+          StorageLive(_3);                 // scope 0 at $DIR/inline_diverging.rs:+1:8: +1:9\n+          _3 = _1;                         // scope 0 at $DIR/inline_diverging.rs:+1:8: +1:9\n+          _2 = Gt(move _3, const 0_i32);   // scope 0 at $DIR/inline_diverging.rs:+1:8: +1:13\n+          StorageDead(_3);                 // scope 0 at $DIR/inline_diverging.rs:+1:12: +1:13\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/inline_diverging.rs:+1:8: +1:13\n       }\n   \n       bb1: {\n-          StorageLive(_4);                 // scope 0 at $DIR/inline-diverging.rs:+2:9: +2:10\n-          _4 = _1;                         // scope 0 at $DIR/inline-diverging.rs:+2:9: +2:10\n-          _0 = move _4 as u32 (IntToInt);  // scope 0 at $DIR/inline-diverging.rs:+2:9: +2:17\n-          StorageDead(_4);                 // scope 0 at $DIR/inline-diverging.rs:+2:16: +2:17\n-          StorageDead(_2);                 // scope 0 at $DIR/inline-diverging.rs:+5:5: +5:6\n-          return;                          // scope 0 at $DIR/inline-diverging.rs:+6:2: +6:2\n+          StorageLive(_4);                 // scope 0 at $DIR/inline_diverging.rs:+2:9: +2:10\n+          _4 = _1;                         // scope 0 at $DIR/inline_diverging.rs:+2:9: +2:10\n+          _0 = move _4 as u32 (IntToInt);  // scope 0 at $DIR/inline_diverging.rs:+2:9: +2:17\n+          StorageDead(_4);                 // scope 0 at $DIR/inline_diverging.rs:+2:16: +2:17\n+          StorageDead(_2);                 // scope 0 at $DIR/inline_diverging.rs:+5:5: +5:6\n+          return;                          // scope 0 at $DIR/inline_diverging.rs:+6:2: +6:2\n       }\n   \n       bb2: {\n-          StorageLive(_6);                 // scope 0 at $DIR/inline-diverging.rs:+4:9: +4:16\n--         _6 = panic();                    // scope 0 at $DIR/inline-diverging.rs:+4:9: +4:16\n+          StorageLive(_6);                 // scope 0 at $DIR/inline_diverging.rs:+4:9: +4:16\n+-         _6 = panic();                    // scope 0 at $DIR/inline_diverging.rs:+4:9: +4:16\n +         StorageLive(_7);                 // scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL\n +         _7 = begin_panic::<&str>(const \"explicit panic\"); // scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL\n                                            // mir::Constant\n--                                          // + span: $DIR/inline-diverging.rs:16:9: 16:14\n+-                                          // + span: $DIR/inline_diverging.rs:16:9: 16:14\n -                                          // + literal: Const { ty: fn() -> ! {panic}, val: Value(<ZST>) }\n +                                          // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n +                                          // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }"}, {"sha": "152153a813ce2deb34a909f1eac72f7a55910b36", "filename": "src/test/mir-opt/inline/inline_diverging.h.Inline.diff", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,55 +2,55 @@\n + // MIR for `h` after Inline\n   \n   fn h() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-diverging.rs:+0:12: +0:12\n-      let _1: (!, !);                      // in scope 0 at $DIR/inline-diverging.rs:+1:5: +1:22\n-+     let mut _2: fn() -> ! {sleep};       // in scope 0 at $DIR/inline-diverging.rs:+1:5: +1:22\n-+     scope 1 (inlined call_twice::<!, fn() -> ! {sleep}>) { // at $DIR/inline-diverging.rs:22:5: 22:22\n-+         debug f => _2;                   // in scope 1 at $DIR/inline-diverging.rs:26:36: 26:37\n-+         let _3: !;                       // in scope 1 at $DIR/inline-diverging.rs:27:9: 27:10\n-+         let mut _4: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n-+         let mut _5: ();                  // in scope 1 at $DIR/inline-diverging.rs:27:13: 27:16\n-+         let mut _7: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:28:13: 28:14\n-+         let mut _8: ();                  // in scope 1 at $DIR/inline-diverging.rs:28:13: 28:16\n-+         let mut _9: !;                   // in scope 1 at $DIR/inline-diverging.rs:29:6: 29:7\n-+         let mut _10: !;                  // in scope 1 at $DIR/inline-diverging.rs:29:9: 29:10\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_diverging.rs:+0:12: +0:12\n+      let _1: (!, !);                      // in scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22\n++     let mut _2: fn() -> ! {sleep};       // in scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22\n++     scope 1 (inlined call_twice::<!, fn() -> ! {sleep}>) { // at $DIR/inline_diverging.rs:22:5: 22:22\n++         debug f => _2;                   // in scope 1 at $DIR/inline_diverging.rs:26:36: 26:37\n++         let _3: !;                       // in scope 1 at $DIR/inline_diverging.rs:27:9: 27:10\n++         let mut _4: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline_diverging.rs:27:13: 27:14\n++         let mut _5: ();                  // in scope 1 at $DIR/inline_diverging.rs:27:13: 27:16\n++         let mut _7: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline_diverging.rs:28:13: 28:14\n++         let mut _8: ();                  // in scope 1 at $DIR/inline_diverging.rs:28:13: 28:16\n++         let mut _9: !;                   // in scope 1 at $DIR/inline_diverging.rs:29:6: 29:7\n++         let mut _10: !;                  // in scope 1 at $DIR/inline_diverging.rs:29:9: 29:10\n +         scope 2 {\n-+             debug a => _3;               // in scope 2 at $DIR/inline-diverging.rs:27:9: 27:10\n-+             let _6: !;                   // in scope 2 at $DIR/inline-diverging.rs:28:9: 28:10\n++             debug a => _3;               // in scope 2 at $DIR/inline_diverging.rs:27:9: 27:10\n++             let _6: !;                   // in scope 2 at $DIR/inline_diverging.rs:28:9: 28:10\n +             scope 3 {\n-+                 debug b => _6;           // in scope 3 at $DIR/inline-diverging.rs:28:9: 28:10\n++                 debug b => _6;           // in scope 3 at $DIR/inline_diverging.rs:28:9: 28:10\n +             }\n-+             scope 6 (inlined <fn() -> ! {sleep} as Fn<()>>::call - shim(fn() -> ! {sleep})) { // at $DIR/inline-diverging.rs:28:13: 28:16\n++             scope 6 (inlined <fn() -> ! {sleep} as Fn<()>>::call - shim(fn() -> ! {sleep})) { // at $DIR/inline_diverging.rs:28:13: 28:16\n +                 scope 7 (inlined sleep) { // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n +                 }\n +             }\n +         }\n-+         scope 4 (inlined <fn() -> ! {sleep} as Fn<()>>::call - shim(fn() -> ! {sleep})) { // at $DIR/inline-diverging.rs:27:13: 27:16\n++         scope 4 (inlined <fn() -> ! {sleep} as Fn<()>>::call - shim(fn() -> ! {sleep})) { // at $DIR/inline_diverging.rs:27:13: 27:16\n +             scope 5 (inlined sleep) {    // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n +             }\n +         }\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-diverging.rs:+1:5: +1:22\n--         _1 = call_twice::<!, fn() -> ! {sleep}>(sleep); // scope 0 at $DIR/inline-diverging.rs:+1:5: +1:22\n-+         StorageLive(_2);                 // scope 0 at $DIR/inline-diverging.rs:+1:5: +1:22\n-+         _2 = sleep;                      // scope 0 at $DIR/inline-diverging.rs:+1:5: +1:22\n+          StorageLive(_1);                 // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22\n+-         _1 = call_twice::<!, fn() -> ! {sleep}>(sleep); // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22\n++         StorageLive(_2);                 // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22\n++         _2 = sleep;                      // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22\n                                            // mir::Constant\n--                                          // + span: $DIR/inline-diverging.rs:22:5: 22:15\n+-                                          // + span: $DIR/inline_diverging.rs:22:5: 22:15\n -                                          // + literal: Const { ty: fn(fn() -> ! {sleep}) -> (!, !) {call_twice::<!, fn() -> ! {sleep}>}, val: Value(<ZST>) }\n -                                          // mir::Constant\n-                                           // + span: $DIR/inline-diverging.rs:22:16: 22:21\n+                                           // + span: $DIR/inline_diverging.rs:22:16: 22:21\n                                            // + literal: Const { ty: fn() -> ! {sleep}, val: Value(<ZST>) }\n-+         StorageLive(_3);                 // scope 1 at $DIR/inline-diverging.rs:27:9: 27:10\n-+         StorageLive(_4);                 // scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n-+         _4 = &_2;                        // scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n-+         StorageLive(_5);                 // scope 1 at $DIR/inline-diverging.rs:27:13: 27:16\n-+         goto -> bb1;                     // scope 5 at $DIR/inline-diverging.rs:39:5: 39:12\n++         StorageLive(_3);                 // scope 1 at $DIR/inline_diverging.rs:27:9: 27:10\n++         StorageLive(_4);                 // scope 1 at $DIR/inline_diverging.rs:27:13: 27:14\n++         _4 = &_2;                        // scope 1 at $DIR/inline_diverging.rs:27:13: 27:14\n++         StorageLive(_5);                 // scope 1 at $DIR/inline_diverging.rs:27:13: 27:16\n++         goto -> bb1;                     // scope 5 at $DIR/inline_diverging.rs:39:5: 39:12\n +     }\n + \n +     bb1: {\n-+         goto -> bb1;                     // scope 5 at $DIR/inline-diverging.rs:39:5: 39:12\n++         goto -> bb1;                     // scope 5 at $DIR/inline_diverging.rs:39:5: 39:12\n       }\n   }\n   "}, {"sha": "ae6f814c290c8ee060a81ae45844c79324e57056", "filename": "src/test/mir-opt/inline/inline_diverging.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/inline/inline-diverging.rs"}, {"sha": "26202f2f40db5e34e6a1f2c647a7944380af555d", "filename": "src/test/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 82, "deletions": 82, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,59 +2,59 @@\n + // MIR for `main` after Inline\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-generator.rs:+0:11: +0:11\n-      let _1: std::ops::GeneratorState<i32, bool>; // in scope 0 at $DIR/inline-generator.rs:+1:9: +1:11\n-      let mut _2: std::pin::Pin<&mut [generator@$DIR/inline-generator.rs:15:5: 15:8]>; // in scope 0 at $DIR/inline-generator.rs:+1:14: +1:32\n-      let mut _3: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 0 at $DIR/inline-generator.rs:+1:23: +1:31\n-      let mut _4: [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 0 at $DIR/inline-generator.rs:+1:28: +1:31\n-+     let mut _7: bool;                    // in scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_generator.rs:+0:11: +0:11\n+      let _1: std::ops::GeneratorState<i32, bool>; // in scope 0 at $DIR/inline_generator.rs:+1:9: +1:11\n+      let mut _2: std::pin::Pin<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>; // in scope 0 at $DIR/inline_generator.rs:+1:14: +1:32\n+      let mut _3: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 0 at $DIR/inline_generator.rs:+1:23: +1:31\n+      let mut _4: [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 0 at $DIR/inline_generator.rs:+1:28: +1:31\n++     let mut _7: bool;                    // in scope 0 at $DIR/inline_generator.rs:+1:14: +1:46\n       scope 1 {\n-          debug _r => _1;                  // in scope 1 at $DIR/inline-generator.rs:+1:9: +1:11\n+          debug _r => _1;                  // in scope 1 at $DIR/inline_generator.rs:+1:9: +1:11\n       }\n-+     scope 2 (inlined g) {                // at $DIR/inline-generator.rs:9:28: 9:31\n++     scope 2 (inlined g) {                // at $DIR/inline_generator.rs:9:28: 9:31\n +     }\n-+     scope 3 (inlined Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:8]>::new) { // at $DIR/inline-generator.rs:9:14: 9:32\n++     scope 3 (inlined Pin::<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>::new) { // at $DIR/inline_generator.rs:9:14: 9:32\n +         debug pointer => _3;             // in scope 3 at $SRC_DIR/core/src/pin.rs:LL:COL\n-+         let mut _5: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 3 at $SRC_DIR/core/src/pin.rs:LL:COL\n++         let mut _5: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 3 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         scope 4 {\n-+             scope 5 (inlined Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:8]>::new_unchecked) { // at $SRC_DIR/core/src/pin.rs:LL:COL\n++             scope 5 (inlined Pin::<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>::new_unchecked) { // at $SRC_DIR/core/src/pin.rs:LL:COL\n +                 debug pointer => _5;     // in scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n-+                 let mut _6: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n++                 let mut _6: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +             }\n +         }\n +     }\n-+     scope 6 (inlined g::{closure#0}) {   // at $DIR/inline-generator.rs:9:14: 9:46\n-+         debug a => _11;                  // in scope 6 at $DIR/inline-generator.rs:15:6: 15:7\n-+         let mut _8: i32;                 // in scope 6 at $DIR/inline-generator.rs:15:17: 15:39\n-+         let mut _9: bool;                // in scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n-+         let mut _10: bool;               // in scope 6 at $DIR/inline-generator.rs:15:9: 15:9\n-+         let _11: bool;                   // in scope 6 at $DIR/inline-generator.rs:15:6: 15:7\n-+         let mut _12: u32;                // in scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n-+         let mut _13: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n-+         let mut _14: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n-+         let mut _15: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n++     scope 6 (inlined g::{closure#0}) {   // at $DIR/inline_generator.rs:9:14: 9:46\n++         debug a => _11;                  // in scope 6 at $DIR/inline_generator.rs:15:6: 15:7\n++         let mut _8: i32;                 // in scope 6 at $DIR/inline_generator.rs:15:17: 15:39\n++         let mut _9: bool;                // in scope 6 at $DIR/inline_generator.rs:15:20: 15:21\n++         let mut _10: bool;               // in scope 6 at $DIR/inline_generator.rs:15:9: 15:9\n++         let _11: bool;                   // in scope 6 at $DIR/inline_generator.rs:15:6: 15:7\n++         let mut _12: u32;                // in scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         let mut _13: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         let mut _14: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         let mut _15: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-generator.rs:+1:9: +1:11\n-          StorageLive(_2);                 // scope 0 at $DIR/inline-generator.rs:+1:14: +1:32\n-          StorageLive(_3);                 // scope 0 at $DIR/inline-generator.rs:+1:23: +1:31\n-          StorageLive(_4);                 // scope 0 at $DIR/inline-generator.rs:+1:28: +1:31\n--         _4 = g() -> bb1;                 // scope 0 at $DIR/inline-generator.rs:+1:28: +1:31\n+          StorageLive(_1);                 // scope 0 at $DIR/inline_generator.rs:+1:9: +1:11\n+          StorageLive(_2);                 // scope 0 at $DIR/inline_generator.rs:+1:14: +1:32\n+          StorageLive(_3);                 // scope 0 at $DIR/inline_generator.rs:+1:23: +1:31\n+          StorageLive(_4);                 // scope 0 at $DIR/inline_generator.rs:+1:28: +1:31\n+-         _4 = g() -> bb1;                 // scope 0 at $DIR/inline_generator.rs:+1:28: +1:31\n -                                          // mir::Constant\n--                                          // + span: $DIR/inline-generator.rs:9:28: 9:29\n+-                                          // + span: $DIR/inline_generator.rs:9:28: 9:29\n -                                          // + literal: Const { ty: fn() -> impl Generator<bool> {g}, val: Value(<ZST>) }\n -     }\n - \n -     bb1: {\n-+         Deinit(_4);                      // scope 2 at $DIR/inline-generator.rs:15:5: 15:41\n-+         discriminant(_4) = 0;            // scope 2 at $DIR/inline-generator.rs:15:5: 15:41\n-          _3 = &mut _4;                    // scope 0 at $DIR/inline-generator.rs:+1:23: +1:31\n--         _2 = Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:8]>::new(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:+1:14: +1:32\n++         Deinit(_4);                      // scope 2 at $DIR/inline_generator.rs:15:5: 15:41\n++         discriminant(_4) = 0;            // scope 2 at $DIR/inline_generator.rs:15:5: 15:41\n+          _3 = &mut _4;                    // scope 0 at $DIR/inline_generator.rs:+1:23: +1:31\n+-         _2 = Pin::<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>::new(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline_generator.rs:+1:14: +1:32\n -                                          // mir::Constant\n--                                          // + span: $DIR/inline-generator.rs:9:14: 9:22\n+-                                          // + span: $DIR/inline_generator.rs:9:14: 9:22\n -                                          // + user_ty: UserType(0)\n--                                          // + literal: Const { ty: fn(&mut [generator@$DIR/inline-generator.rs:15:5: 15:8]) -> Pin<&mut [generator@$DIR/inline-generator.rs:15:5: 15:8]> {Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:8]>::new}, val: Value(<ZST>) }\n+-                                          // + literal: Const { ty: fn(&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]) -> Pin<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]> {Pin::<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>::new}, val: Value(<ZST>) }\n -     }\n - \n -     bb2: {\n@@ -63,86 +63,86 @@\n +         StorageLive(_6);                 // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         _6 = move _5;                    // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         Deinit(_2);                      // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n-+         (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]) = move _6; // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n++         (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]) = move _6; // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         StorageDead(_6);                 // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         StorageDead(_5);                 // scope 4 at $SRC_DIR/core/src/pin.rs:LL:COL\n-          StorageDead(_3);                 // scope 0 at $DIR/inline-generator.rs:+1:31: +1:32\n--         _1 = <[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::resume(move _2, const false) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n+          StorageDead(_3);                 // scope 0 at $DIR/inline_generator.rs:+1:31: +1:32\n+-         _1 = <[generator@$DIR/inline_generator.rs:15:5: 15:8] as Generator<bool>>::resume(move _2, const false) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline_generator.rs:+1:14: +1:46\n -                                          // mir::Constant\n--                                          // + span: $DIR/inline-generator.rs:9:33: 9:39\n--                                          // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@$DIR/inline-generator.rs:15:5: 15:8]>, bool) -> GeneratorState<<[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::Yield, <[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::Return> {<[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::resume}, val: Value(<ZST>) }\n-+         StorageLive(_7);                 // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n-+         _7 = const false;                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n-+         StorageLive(_10);                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n-+         StorageLive(_11);                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n-+         _13 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n-+         _12 = discriminant((*_13));      // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n-+         switchInt(move _12) -> [0_u32: bb3, 1_u32: bb8, 3_u32: bb7, otherwise: bb9]; // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n+-                                          // + span: $DIR/inline_generator.rs:9:33: 9:39\n+-                                          // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>, bool) -> GeneratorState<<[generator@$DIR/inline_generator.rs:15:5: 15:8] as Generator<bool>>::Yield, <[generator@$DIR/inline_generator.rs:15:5: 15:8] as Generator<bool>>::Return> {<[generator@$DIR/inline_generator.rs:15:5: 15:8] as Generator<bool>>::resume}, val: Value(<ZST>) }\n++         StorageLive(_7);                 // scope 0 at $DIR/inline_generator.rs:+1:14: +1:46\n++         _7 = const false;                // scope 0 at $DIR/inline_generator.rs:+1:14: +1:46\n++         StorageLive(_10);                // scope 0 at $DIR/inline_generator.rs:+1:14: +1:46\n++         StorageLive(_11);                // scope 0 at $DIR/inline_generator.rs:+1:14: +1:46\n++         _13 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         _12 = discriminant((*_13));      // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         switchInt(move _12) -> [0_u32: bb3, 1_u32: bb8, 3_u32: bb7, otherwise: bb9]; // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n       }\n   \n -     bb3: {\n +     bb1: {\n-+         StorageDead(_11);                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n-+         StorageDead(_10);                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n-+         StorageDead(_7);                 // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n-          StorageDead(_2);                 // scope 0 at $DIR/inline-generator.rs:+1:45: +1:46\n-          StorageDead(_4);                 // scope 0 at $DIR/inline-generator.rs:+1:46: +1:47\n-          _0 = const ();                   // scope 0 at $DIR/inline-generator.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-generator.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/inline-generator.rs:+2:2: +2:2\n++         StorageDead(_11);                // scope 0 at $DIR/inline_generator.rs:+1:14: +1:46\n++         StorageDead(_10);                // scope 0 at $DIR/inline_generator.rs:+1:14: +1:46\n++         StorageDead(_7);                 // scope 0 at $DIR/inline_generator.rs:+1:14: +1:46\n+          StorageDead(_2);                 // scope 0 at $DIR/inline_generator.rs:+1:45: +1:46\n+          StorageDead(_4);                 // scope 0 at $DIR/inline_generator.rs:+1:46: +1:47\n+          _0 = const ();                   // scope 0 at $DIR/inline_generator.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline_generator.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/inline_generator.rs:+2:2: +2:2\n       }\n   \n -     bb4 (cleanup): {\n +     bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/inline-generator.rs:+0:1: +2:2\n+          resume;                          // scope 0 at $DIR/inline_generator.rs:+0:1: +2:2\n +     }\n + \n +     bb3: {\n-+         _11 = move _7;                   // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n-+         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:15:17: 15:39\n-+         StorageLive(_9);                 // scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n-+         _9 = _11;                        // scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n-+         switchInt(move _9) -> [false: bb5, otherwise: bb4]; // scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n++         _11 = move _7;                   // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         StorageLive(_8);                 // scope 6 at $DIR/inline_generator.rs:15:17: 15:39\n++         StorageLive(_9);                 // scope 6 at $DIR/inline_generator.rs:15:20: 15:21\n++         _9 = _11;                        // scope 6 at $DIR/inline_generator.rs:15:20: 15:21\n++         switchInt(move _9) -> [false: bb5, otherwise: bb4]; // scope 6 at $DIR/inline_generator.rs:15:20: 15:21\n +     }\n + \n +     bb4: {\n-+         _8 = const 7_i32;                // scope 6 at $DIR/inline-generator.rs:15:24: 15:25\n-+         goto -> bb6;                     // scope 6 at $DIR/inline-generator.rs:15:17: 15:39\n++         _8 = const 7_i32;                // scope 6 at $DIR/inline_generator.rs:15:24: 15:25\n++         goto -> bb6;                     // scope 6 at $DIR/inline_generator.rs:15:17: 15:39\n +     }\n + \n +     bb5: {\n-+         _8 = const 13_i32;               // scope 6 at $DIR/inline-generator.rs:15:35: 15:37\n-+         goto -> bb6;                     // scope 6 at $DIR/inline-generator.rs:15:17: 15:39\n++         _8 = const 13_i32;               // scope 6 at $DIR/inline_generator.rs:15:35: 15:37\n++         goto -> bb6;                     // scope 6 at $DIR/inline_generator.rs:15:17: 15:39\n +     }\n + \n +     bb6: {\n-+         StorageDead(_9);                 // scope 6 at $DIR/inline-generator.rs:15:38: 15:39\n-+         Deinit(_1);                      // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n-+         ((_1 as Yielded).0: i32) = move _8; // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n-+         discriminant(_1) = 0;            // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n-+         _14 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n-+         discriminant((*_14)) = 3;        // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n-+         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:15:11: 15:39\n++         StorageDead(_9);                 // scope 6 at $DIR/inline_generator.rs:15:38: 15:39\n++         Deinit(_1);                      // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n++         ((_1 as Yielded).0: i32) = move _8; // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n++         discriminant(_1) = 0;            // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n++         _14 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n++         discriminant((*_14)) = 3;        // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n++         goto -> bb1;                     // scope 0 at $DIR/inline_generator.rs:15:11: 15:39\n +     }\n + \n +     bb7: {\n-+         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n-+         _10 = move _7;                   // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n-+         StorageDead(_8);                 // scope 6 at $DIR/inline-generator.rs:15:38: 15:39\n-+         Deinit(_1);                      // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n-+         ((_1 as Complete).0: bool) = move _10; // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n-+         discriminant(_1) = 1;            // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n-+         _15 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n-+         discriminant((*_15)) = 1;        // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n-+         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:15:41: 15:41\n++         StorageLive(_8);                 // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         _10 = move _7;                   // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         StorageDead(_8);                 // scope 6 at $DIR/inline_generator.rs:15:38: 15:39\n++         Deinit(_1);                      // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n++         ((_1 as Complete).0: bool) = move _10; // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n++         discriminant(_1) = 1;            // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n++         _15 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n++         discriminant((*_15)) = 1;        // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n++         goto -> bb1;                     // scope 0 at $DIR/inline_generator.rs:15:41: 15:41\n +     }\n + \n +     bb8: {\n-+         assert(const false, \"generator resumed after completion\") -> [success: bb8, unwind: bb2]; // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n++         assert(const false, \"generator resumed after completion\") -> [success: bb8, unwind: bb2]; // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n +     }\n + \n +     bb9: {\n-+         unreachable;                     // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n++         unreachable;                     // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n       }\n   }\n   "}, {"sha": "d11b3e548f721f25d2a253057dcaff1953d196a4", "filename": "src/test/mir-opt/inline/inline_generator.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/inline/inline-generator.rs"}, {"sha": "e421428dcdff59c114955d5d7038e949f07ab74a", "filename": "src/test/mir-opt/inline/inline_instruction_set.default.Inline.diff", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.default.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.default.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.default.Inline.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,43 +2,43 @@\n + // MIR for `default` after Inline\n   \n   fn default() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-instruction-set.rs:+0:18: +0:18\n-      let _1: ();                          // in scope 0 at $DIR/inline-instruction-set.rs:+1:5: +1:26\n-      let _2: ();                          // in scope 0 at $DIR/inline-instruction-set.rs:+2:5: +2:26\n-      let _3: ();                          // in scope 0 at $DIR/inline-instruction-set.rs:+3:5: +3:30\n-+     scope 1 (inlined instruction_set_default) { // at $DIR/inline-instruction-set.rs:53:5: 53:30\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_instruction_set.rs:+0:18: +0:18\n+      let _1: ();                          // in scope 0 at $DIR/inline_instruction_set.rs:+1:5: +1:26\n+      let _2: ();                          // in scope 0 at $DIR/inline_instruction_set.rs:+2:5: +2:26\n+      let _3: ();                          // in scope 0 at $DIR/inline_instruction_set.rs:+3:5: +3:30\n++     scope 1 (inlined instruction_set_default) { // at $DIR/inline_instruction_set.rs:53:5: 53:30\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-instruction-set.rs:+1:5: +1:26\n-          _1 = instruction_set_a32() -> bb1; // scope 0 at $DIR/inline-instruction-set.rs:+1:5: +1:26\n+          StorageLive(_1);                 // scope 0 at $DIR/inline_instruction_set.rs:+1:5: +1:26\n+          _1 = instruction_set_a32() -> bb1; // scope 0 at $DIR/inline_instruction_set.rs:+1:5: +1:26\n                                            // mir::Constant\n-                                           // + span: $DIR/inline-instruction-set.rs:51:5: 51:24\n+                                           // + span: $DIR/inline_instruction_set.rs:51:5: 51:24\n                                            // + literal: Const { ty: fn() {instruction_set_a32}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-instruction-set.rs:+1:26: +1:27\n-          StorageLive(_2);                 // scope 0 at $DIR/inline-instruction-set.rs:+2:5: +2:26\n-          _2 = instruction_set_t32() -> bb2; // scope 0 at $DIR/inline-instruction-set.rs:+2:5: +2:26\n+          StorageDead(_1);                 // scope 0 at $DIR/inline_instruction_set.rs:+1:26: +1:27\n+          StorageLive(_2);                 // scope 0 at $DIR/inline_instruction_set.rs:+2:5: +2:26\n+          _2 = instruction_set_t32() -> bb2; // scope 0 at $DIR/inline_instruction_set.rs:+2:5: +2:26\n                                            // mir::Constant\n-                                           // + span: $DIR/inline-instruction-set.rs:52:5: 52:24\n+                                           // + span: $DIR/inline_instruction_set.rs:52:5: 52:24\n                                            // + literal: Const { ty: fn() {instruction_set_t32}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n-          StorageDead(_2);                 // scope 0 at $DIR/inline-instruction-set.rs:+2:26: +2:27\n-          StorageLive(_3);                 // scope 0 at $DIR/inline-instruction-set.rs:+3:5: +3:30\n--         _3 = instruction_set_default() -> bb3; // scope 0 at $DIR/inline-instruction-set.rs:+3:5: +3:30\n+          StorageDead(_2);                 // scope 0 at $DIR/inline_instruction_set.rs:+2:26: +2:27\n+          StorageLive(_3);                 // scope 0 at $DIR/inline_instruction_set.rs:+3:5: +3:30\n+-         _3 = instruction_set_default() -> bb3; // scope 0 at $DIR/inline_instruction_set.rs:+3:5: +3:30\n -                                          // mir::Constant\n--                                          // + span: $DIR/inline-instruction-set.rs:53:5: 53:28\n+-                                          // + span: $DIR/inline_instruction_set.rs:53:5: 53:28\n -                                          // + literal: Const { ty: fn() {instruction_set_default}, val: Value(<ZST>) }\n -     }\n - \n -     bb3: {\n-          StorageDead(_3);                 // scope 0 at $DIR/inline-instruction-set.rs:+3:30: +3:31\n-          _0 = const ();                   // scope 0 at $DIR/inline-instruction-set.rs:+0:18: +4:2\n-          return;                          // scope 0 at $DIR/inline-instruction-set.rs:+4:2: +4:2\n+          StorageDead(_3);                 // scope 0 at $DIR/inline_instruction_set.rs:+3:30: +3:31\n+          _0 = const ();                   // scope 0 at $DIR/inline_instruction_set.rs:+0:18: +4:2\n+          return;                          // scope 0 at $DIR/inline_instruction_set.rs:+4:2: +4:2\n       }\n   }\n   "}, {"sha": "be36ff50c7ef13316cf3a442fc3d70249a986911", "filename": "src/test/mir-opt/inline/inline_instruction_set.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/inline/inline-instruction-set.rs"}, {"sha": "1ea2b87e53acd7a2188313c352a51c8d9eb39625", "filename": "src/test/mir-opt/inline/inline_instruction_set.t32.Inline.diff", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.t32.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.t32.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.t32.Inline.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,45 +2,45 @@\n + // MIR for `t32` after Inline\n   \n   fn t32() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-instruction-set.rs:+0:14: +0:14\n-      let _1: ();                          // in scope 0 at $DIR/inline-instruction-set.rs:+1:5: +1:26\n-      let _2: ();                          // in scope 0 at $DIR/inline-instruction-set.rs:+2:5: +2:26\n-      let _3: ();                          // in scope 0 at $DIR/inline-instruction-set.rs:+5:5: +5:30\n-+     scope 1 (inlined instruction_set_t32) { // at $DIR/inline-instruction-set.rs:43:5: 43:26\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_instruction_set.rs:+0:14: +0:14\n+      let _1: ();                          // in scope 0 at $DIR/inline_instruction_set.rs:+1:5: +1:26\n+      let _2: ();                          // in scope 0 at $DIR/inline_instruction_set.rs:+2:5: +2:26\n+      let _3: ();                          // in scope 0 at $DIR/inline_instruction_set.rs:+5:5: +5:30\n++     scope 1 (inlined instruction_set_t32) { // at $DIR/inline_instruction_set.rs:43:5: 43:26\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-instruction-set.rs:+1:5: +1:26\n-          _1 = instruction_set_a32() -> bb1; // scope 0 at $DIR/inline-instruction-set.rs:+1:5: +1:26\n+          StorageLive(_1);                 // scope 0 at $DIR/inline_instruction_set.rs:+1:5: +1:26\n+          _1 = instruction_set_a32() -> bb1; // scope 0 at $DIR/inline_instruction_set.rs:+1:5: +1:26\n                                            // mir::Constant\n-                                           // + span: $DIR/inline-instruction-set.rs:42:5: 42:24\n+                                           // + span: $DIR/inline_instruction_set.rs:42:5: 42:24\n                                            // + literal: Const { ty: fn() {instruction_set_a32}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-instruction-set.rs:+1:26: +1:27\n-          StorageLive(_2);                 // scope 0 at $DIR/inline-instruction-set.rs:+2:5: +2:26\n--         _2 = instruction_set_t32() -> bb2; // scope 0 at $DIR/inline-instruction-set.rs:+2:5: +2:26\n+          StorageDead(_1);                 // scope 0 at $DIR/inline_instruction_set.rs:+1:26: +1:27\n+          StorageLive(_2);                 // scope 0 at $DIR/inline_instruction_set.rs:+2:5: +2:26\n+-         _2 = instruction_set_t32() -> bb2; // scope 0 at $DIR/inline_instruction_set.rs:+2:5: +2:26\n -                                          // mir::Constant\n--                                          // + span: $DIR/inline-instruction-set.rs:43:5: 43:24\n+-                                          // + span: $DIR/inline_instruction_set.rs:43:5: 43:24\n -                                          // + literal: Const { ty: fn() {instruction_set_t32}, val: Value(<ZST>) }\n -     }\n - \n -     bb2: {\n-          StorageDead(_2);                 // scope 0 at $DIR/inline-instruction-set.rs:+2:26: +2:27\n-          StorageLive(_3);                 // scope 0 at $DIR/inline-instruction-set.rs:+5:5: +5:30\n--         _3 = instruction_set_default() -> bb3; // scope 0 at $DIR/inline-instruction-set.rs:+5:5: +5:30\n-+         _3 = instruction_set_default() -> bb2; // scope 0 at $DIR/inline-instruction-set.rs:+5:5: +5:30\n+          StorageDead(_2);                 // scope 0 at $DIR/inline_instruction_set.rs:+2:26: +2:27\n+          StorageLive(_3);                 // scope 0 at $DIR/inline_instruction_set.rs:+5:5: +5:30\n+-         _3 = instruction_set_default() -> bb3; // scope 0 at $DIR/inline_instruction_set.rs:+5:5: +5:30\n++         _3 = instruction_set_default() -> bb2; // scope 0 at $DIR/inline_instruction_set.rs:+5:5: +5:30\n                                            // mir::Constant\n-                                           // + span: $DIR/inline-instruction-set.rs:46:5: 46:28\n+                                           // + span: $DIR/inline_instruction_set.rs:46:5: 46:28\n                                            // + literal: Const { ty: fn() {instruction_set_default}, val: Value(<ZST>) }\n       }\n   \n -     bb3: {\n +     bb2: {\n-          StorageDead(_3);                 // scope 0 at $DIR/inline-instruction-set.rs:+5:30: +5:31\n-          _0 = const ();                   // scope 0 at $DIR/inline-instruction-set.rs:+0:14: +6:2\n-          return;                          // scope 0 at $DIR/inline-instruction-set.rs:+6:2: +6:2\n+          StorageDead(_3);                 // scope 0 at $DIR/inline_instruction_set.rs:+5:30: +5:31\n+          _0 = const ();                   // scope 0 at $DIR/inline_instruction_set.rs:+0:14: +6:2\n+          return;                          // scope 0 at $DIR/inline_instruction_set.rs:+6:2: +6:2\n       }\n   }\n   "}, {"sha": "2a4dc9e3e809919ed553686727fbb420e1594fb4", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.diff", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,45 +2,45 @@\n + // MIR for `main` after Inline\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-into-box-place.rs:+0:11: +0:11\n-      let _1: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:9: +1:11\n-      let mut _2: usize;                   // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-      let mut _3: usize;                   // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-      let mut _4: *mut u8;                 // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-      let mut _5: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-      let mut _6: ();                      // in scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n-      let mut _7: *const std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-+     let mut _8: &mut std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_into_box_place.rs:+0:11: +0:11\n+      let _1: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline_into_box_place.rs:+1:9: +1:11\n+      let mut _2: usize;                   // in scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43\n+      let mut _3: usize;                   // in scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43\n+      let mut _4: *mut u8;                 // in scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43\n+      let mut _5: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43\n+      let mut _6: ();                      // in scope 0 at $DIR/inline_into_box_place.rs:+1:42: +1:43\n+      let mut _7: *const std::vec::Vec<u32>; // in scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43\n++     let mut _8: &mut std::vec::Vec<u32>; // in scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43\n       scope 1 {\n-          debug _x => _1;                  // in scope 1 at $DIR/inline-into-box-place.rs:+1:9: +1:11\n+          debug _x => _1;                  // in scope 1 at $DIR/inline_into_box_place.rs:+1:9: +1:11\n       }\n       scope 2 {\n       }\n-+     scope 3 (inlined Vec::<u32>::new) {  // at $DIR/inline-into-box-place.rs:8:33: 8:43\n++     scope 3 (inlined Vec::<u32>::new) {  // at $DIR/inline_into_box_place.rs:8:33: 8:43\n +         let mut _9: alloc::raw_vec::RawVec<u32>; // in scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:9: +1:11\n-          _2 = SizeOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-          _3 = AlignOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-          _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n+          StorageLive(_1);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:9: +1:11\n+          _2 = SizeOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline_into_box_place.rs:+1:29: +1:43\n+          _3 = AlignOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline_into_box_place.rs:+1:29: +1:43\n+          _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/inline_into_box_place.rs:+1:29: +1:43\n                                            // mir::Constant\n-                                           // + span: $DIR/inline-into-box-place.rs:8:29: 8:43\n+                                           // + span: $DIR/inline_into_box_place.rs:8:29: 8:43\n                                            // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageLive(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-          _5 = ShallowInitBox(move _4, std::vec::Vec<u32>); // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-          _7 = (((_5.0: std::ptr::Unique<std::vec::Vec<u32>>).0: std::ptr::NonNull<std::vec::Vec<u32>>).0: *const std::vec::Vec<u32>); // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n--         (*_7) = Vec::<u32>::new() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-+         StorageLive(_8);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-+         _8 = &mut (*_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n+          StorageLive(_5);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43\n+          _5 = ShallowInitBox(move _4, std::vec::Vec<u32>); // scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43\n+          _7 = (((_5.0: std::ptr::Unique<std::vec::Vec<u32>>).0: std::ptr::NonNull<std::vec::Vec<u32>>).0: *const std::vec::Vec<u32>); // scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43\n+-         (*_7) = Vec::<u32>::new() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43\n++         StorageLive(_8);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43\n++         _8 = &mut (*_7);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43\n +         StorageLive(_9);                 // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         _9 = const _;                    // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n                                            // mir::Constant\n--                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n+-                                          // + span: $DIR/inline_into_box_place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)\n -                                          // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }\n -     }\n@@ -53,29 +53,29 @@\n +         ((*_8).0: alloc::raw_vec::RawVec<u32>) = move _9; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         ((*_8).1: usize) = const 0_usize; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         StorageDead(_9);                 // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         StorageDead(_8);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-          _1 = move _5;                    // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-          StorageDead(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n-          _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:+0:11: +2:2\n--         drop(_1) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:+2:1: +2:2\n-+         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline-into-box-place.rs:+2:1: +2:2\n++         StorageDead(_8);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43\n+          _1 = move _5;                    // scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43\n+          StorageDead(_5);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:42: +1:43\n+          _0 = const ();                   // scope 0 at $DIR/inline_into_box_place.rs:+0:11: +2:2\n+-         drop(_1) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline_into_box_place.rs:+2:1: +2:2\n++         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline_into_box_place.rs:+2:1: +2:2\n       }\n   \n -     bb3: {\n +     bb2: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/inline-into-box-place.rs:+2:2: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline_into_box_place.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/inline_into_box_place.rs:+2:2: +2:2\n       }\n   \n -     bb4 (cleanup): {\n +     bb3 (cleanup): {\n-          resume;                          // scope 0 at $DIR/inline-into-box-place.rs:+0:1: +2:2\n+          resume;                          // scope 0 at $DIR/inline_into_box_place.rs:+0:1: +2:2\n -     }\n - \n -     bb5 (cleanup): {\n--         _6 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_5.1: std::alloc::Global)) -> bb4; // scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n+-         _6 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_5.1: std::alloc::Global)) -> bb4; // scope 0 at $DIR/inline_into_box_place.rs:+1:42: +1:43\n -                                          // mir::Constant\n--                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n+-                                          // + span: $DIR/inline_into_box_place.rs:8:42: 8:43\n -                                          // + literal: Const { ty: unsafe fn(Unique<Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>}, val: Value(<ZST>) }\n       }\n   }"}, {"sha": "232bcc7b27d465dc327ed666410f825ecd34ada2", "filename": "src/test/mir-opt/inline/inline_into_box_place.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/inline/inline-into-box-place.rs"}, {"sha": "1c590be945c9e1a38401e5cc08684886075a9765", "filename": "src/test/mir-opt/inline/inline_options.main.Inline.after.mir", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,55 +1,55 @@\n // MIR for `main` after Inline\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/inline-options.rs:+0:11: +0:11\n-    let _1: ();                          // in scope 0 at $DIR/inline-options.rs:+1:5: +1:18\n-    let _2: ();                          // in scope 0 at $DIR/inline-options.rs:+2:5: +2:21\n-    scope 1 (inlined inlined::<u32>) {   // at $DIR/inline-options.rs:10:5: 10:21\n-        let _3: ();                      // in scope 1 at $DIR/inline-options.rs:16:23: 16:26\n-        let _4: ();                      // in scope 1 at $DIR/inline-options.rs:16:28: 16:31\n-        let _5: ();                      // in scope 1 at $DIR/inline-options.rs:16:33: 16:36\n+    let mut _0: ();                      // return place in scope 0 at $DIR/inline_options.rs:+0:11: +0:11\n+    let _1: ();                          // in scope 0 at $DIR/inline_options.rs:+1:5: +1:18\n+    let _2: ();                          // in scope 0 at $DIR/inline_options.rs:+2:5: +2:21\n+    scope 1 (inlined inlined::<u32>) {   // at $DIR/inline_options.rs:10:5: 10:21\n+        let _3: ();                      // in scope 1 at $DIR/inline_options.rs:16:23: 16:26\n+        let _4: ();                      // in scope 1 at $DIR/inline_options.rs:16:28: 16:31\n+        let _5: ();                      // in scope 1 at $DIR/inline_options.rs:16:33: 16:36\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/inline-options.rs:+1:5: +1:18\n-        _1 = not_inlined() -> bb1;       // scope 0 at $DIR/inline-options.rs:+1:5: +1:18\n+        StorageLive(_1);                 // scope 0 at $DIR/inline_options.rs:+1:5: +1:18\n+        _1 = not_inlined() -> bb1;       // scope 0 at $DIR/inline_options.rs:+1:5: +1:18\n                                          // mir::Constant\n-                                         // + span: $DIR/inline-options.rs:9:5: 9:16\n+                                         // + span: $DIR/inline_options.rs:9:5: 9:16\n                                          // + literal: Const { ty: fn() {not_inlined}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageDead(_1);                 // scope 0 at $DIR/inline-options.rs:+1:18: +1:19\n-        StorageLive(_2);                 // scope 0 at $DIR/inline-options.rs:+2:5: +2:21\n-        StorageLive(_3);                 // scope 1 at $DIR/inline-options.rs:16:23: 16:26\n-        _3 = g() -> bb2;                 // scope 1 at $DIR/inline-options.rs:16:23: 16:26\n+        StorageDead(_1);                 // scope 0 at $DIR/inline_options.rs:+1:18: +1:19\n+        StorageLive(_2);                 // scope 0 at $DIR/inline_options.rs:+2:5: +2:21\n+        StorageLive(_3);                 // scope 1 at $DIR/inline_options.rs:16:23: 16:26\n+        _3 = g() -> bb2;                 // scope 1 at $DIR/inline_options.rs:16:23: 16:26\n                                          // mir::Constant\n-                                         // + span: $DIR/inline-options.rs:16:23: 16:24\n+                                         // + span: $DIR/inline_options.rs:16:23: 16:24\n                                          // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        StorageDead(_3);                 // scope 1 at $DIR/inline-options.rs:16:26: 16:27\n-        StorageLive(_4);                 // scope 1 at $DIR/inline-options.rs:16:28: 16:31\n-        _4 = g() -> bb3;                 // scope 1 at $DIR/inline-options.rs:16:28: 16:31\n+        StorageDead(_3);                 // scope 1 at $DIR/inline_options.rs:16:26: 16:27\n+        StorageLive(_4);                 // scope 1 at $DIR/inline_options.rs:16:28: 16:31\n+        _4 = g() -> bb3;                 // scope 1 at $DIR/inline_options.rs:16:28: 16:31\n                                          // mir::Constant\n-                                         // + span: $DIR/inline-options.rs:16:28: 16:29\n+                                         // + span: $DIR/inline_options.rs:16:28: 16:29\n                                          // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n     }\n \n     bb3: {\n-        StorageDead(_4);                 // scope 1 at $DIR/inline-options.rs:16:31: 16:32\n-        StorageLive(_5);                 // scope 1 at $DIR/inline-options.rs:16:33: 16:36\n-        _5 = g() -> bb4;                 // scope 1 at $DIR/inline-options.rs:16:33: 16:36\n+        StorageDead(_4);                 // scope 1 at $DIR/inline_options.rs:16:31: 16:32\n+        StorageLive(_5);                 // scope 1 at $DIR/inline_options.rs:16:33: 16:36\n+        _5 = g() -> bb4;                 // scope 1 at $DIR/inline_options.rs:16:33: 16:36\n                                          // mir::Constant\n-                                         // + span: $DIR/inline-options.rs:16:33: 16:34\n+                                         // + span: $DIR/inline_options.rs:16:33: 16:34\n                                          // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n     }\n \n     bb4: {\n-        StorageDead(_5);                 // scope 1 at $DIR/inline-options.rs:16:36: 16:37\n-        StorageDead(_2);                 // scope 0 at $DIR/inline-options.rs:+2:21: +2:22\n-        _0 = const ();                   // scope 0 at $DIR/inline-options.rs:+0:11: +3:2\n-        return;                          // scope 0 at $DIR/inline-options.rs:+3:2: +3:2\n+        StorageDead(_5);                 // scope 1 at $DIR/inline_options.rs:16:36: 16:37\n+        StorageDead(_2);                 // scope 0 at $DIR/inline_options.rs:+2:21: +2:22\n+        _0 = const ();                   // scope 0 at $DIR/inline_options.rs:+0:11: +3:2\n+        return;                          // scope 0 at $DIR/inline_options.rs:+3:2: +3:2\n     }\n }"}, {"sha": "477f050b69e42ac8fba5142de12ac62e4308b8dd", "filename": "src/test/mir-opt/inline/inline_options.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_options.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/inline/inline-options.rs"}, {"sha": "75af20d482ddd22d88088d9cde6f977031e5a541", "filename": "src/test/mir-opt/inline/inline_retag.bar.Inline.after.mir", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,72 +1,72 @@\n // MIR for `bar` after Inline\n \n fn bar() -> bool {\n-    let mut _0: bool;                    // return place in scope 0 at $DIR/inline-retag.rs:+0:13: +0:17\n-    let _1: for<'a, 'b> fn(&'a i32, &'b i32) -> bool {foo}; // in scope 0 at $DIR/inline-retag.rs:+1:9: +1:10\n-    let mut _2: for<'a, 'b> fn(&'a i32, &'b i32) -> bool {foo}; // in scope 0 at $DIR/inline-retag.rs:+2:5: +2:6\n-    let mut _3: &i32;                    // in scope 0 at $DIR/inline-retag.rs:+2:7: +2:9\n-    let _4: &i32;                        // in scope 0 at $DIR/inline-retag.rs:+2:7: +2:9\n-    let _5: i32;                         // in scope 0 at $DIR/inline-retag.rs:+2:8: +2:9\n-    let mut _6: &i32;                    // in scope 0 at $DIR/inline-retag.rs:+2:11: +2:14\n-    let _7: &i32;                        // in scope 0 at $DIR/inline-retag.rs:+2:11: +2:14\n-    let _8: i32;                         // in scope 0 at $DIR/inline-retag.rs:+2:12: +2:14\n+    let mut _0: bool;                    // return place in scope 0 at $DIR/inline_retag.rs:+0:13: +0:17\n+    let _1: for<'a, 'b> fn(&'a i32, &'b i32) -> bool {foo}; // in scope 0 at $DIR/inline_retag.rs:+1:9: +1:10\n+    let mut _2: for<'a, 'b> fn(&'a i32, &'b i32) -> bool {foo}; // in scope 0 at $DIR/inline_retag.rs:+2:5: +2:6\n+    let mut _3: &i32;                    // in scope 0 at $DIR/inline_retag.rs:+2:7: +2:9\n+    let _4: &i32;                        // in scope 0 at $DIR/inline_retag.rs:+2:7: +2:9\n+    let _5: i32;                         // in scope 0 at $DIR/inline_retag.rs:+2:8: +2:9\n+    let mut _6: &i32;                    // in scope 0 at $DIR/inline_retag.rs:+2:11: +2:14\n+    let _7: &i32;                        // in scope 0 at $DIR/inline_retag.rs:+2:11: +2:14\n+    let _8: i32;                         // in scope 0 at $DIR/inline_retag.rs:+2:12: +2:14\n     scope 1 {\n-        debug f => _1;                   // in scope 1 at $DIR/inline-retag.rs:+1:9: +1:10\n-        let mut _9: &i32;                // in scope 1 at $DIR/inline-retag.rs:+2:11: +2:14\n-        let mut _10: &i32;               // in scope 1 at $DIR/inline-retag.rs:+2:7: +2:9\n-        scope 2 (inlined foo) {          // at $DIR/inline-retag.rs:12:5: 12:15\n-            debug x => _3;               // in scope 2 at $DIR/inline-retag.rs:16:8: 16:9\n-            debug y => _6;               // in scope 2 at $DIR/inline-retag.rs:16:17: 16:18\n-            let mut _11: i32;            // in scope 2 at $DIR/inline-retag.rs:17:5: 17:7\n-            let mut _12: i32;            // in scope 2 at $DIR/inline-retag.rs:17:11: 17:13\n+        debug f => _1;                   // in scope 1 at $DIR/inline_retag.rs:+1:9: +1:10\n+        let mut _9: &i32;                // in scope 1 at $DIR/inline_retag.rs:+2:11: +2:14\n+        let mut _10: &i32;               // in scope 1 at $DIR/inline_retag.rs:+2:7: +2:9\n+        scope 2 (inlined foo) {          // at $DIR/inline_retag.rs:12:5: 12:15\n+            debug x => _3;               // in scope 2 at $DIR/inline_retag.rs:16:8: 16:9\n+            debug y => _6;               // in scope 2 at $DIR/inline_retag.rs:16:17: 16:18\n+            let mut _11: i32;            // in scope 2 at $DIR/inline_retag.rs:17:5: 17:7\n+            let mut _12: i32;            // in scope 2 at $DIR/inline_retag.rs:17:11: 17:13\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/inline-retag.rs:+1:9: +1:10\n-        _1 = foo;                        // scope 0 at $DIR/inline-retag.rs:+1:13: +1:16\n+        StorageLive(_1);                 // scope 0 at $DIR/inline_retag.rs:+1:9: +1:10\n+        _1 = foo;                        // scope 0 at $DIR/inline_retag.rs:+1:13: +1:16\n                                          // mir::Constant\n-                                         // + span: $DIR/inline-retag.rs:11:13: 11:16\n+                                         // + span: $DIR/inline_retag.rs:11:13: 11:16\n                                          // + literal: Const { ty: for<'a, 'b> fn(&'a i32, &'b i32) -> bool {foo}, val: Value(<ZST>) }\n-        StorageLive(_2);                 // scope 1 at $DIR/inline-retag.rs:+2:5: +2:6\n-        _2 = _1;                         // scope 1 at $DIR/inline-retag.rs:+2:5: +2:6\n-        StorageLive(_3);                 // scope 1 at $DIR/inline-retag.rs:+2:7: +2:9\n-        StorageLive(_4);                 // scope 1 at $DIR/inline-retag.rs:+2:7: +2:9\n-        _10 = const _;                   // scope 1 at $DIR/inline-retag.rs:+2:7: +2:9\n+        StorageLive(_2);                 // scope 1 at $DIR/inline_retag.rs:+2:5: +2:6\n+        _2 = _1;                         // scope 1 at $DIR/inline_retag.rs:+2:5: +2:6\n+        StorageLive(_3);                 // scope 1 at $DIR/inline_retag.rs:+2:7: +2:9\n+        StorageLive(_4);                 // scope 1 at $DIR/inline_retag.rs:+2:7: +2:9\n+        _10 = const _;                   // scope 1 at $DIR/inline_retag.rs:+2:7: +2:9\n                                          // mir::Constant\n-                                         // + span: $DIR/inline-retag.rs:12:7: 12:9\n+                                         // + span: $DIR/inline_retag.rs:12:7: 12:9\n                                          // + literal: Const { ty: &i32, val: Unevaluated(bar, [], Some(promoted[1])) }\n-        Retag(_10);                      // scope 1 at $DIR/inline-retag.rs:+2:7: +2:9\n-        _4 = &(*_10);                    // scope 1 at $DIR/inline-retag.rs:+2:7: +2:9\n-        Retag(_4);                       // scope 1 at $DIR/inline-retag.rs:+2:7: +2:9\n-        _3 = &(*_4);                     // scope 1 at $DIR/inline-retag.rs:+2:7: +2:9\n-        Retag(_3);                       // scope 1 at $DIR/inline-retag.rs:+2:7: +2:9\n-        StorageLive(_6);                 // scope 1 at $DIR/inline-retag.rs:+2:11: +2:14\n-        StorageLive(_7);                 // scope 1 at $DIR/inline-retag.rs:+2:11: +2:14\n-        _9 = const _;                    // scope 1 at $DIR/inline-retag.rs:+2:11: +2:14\n+        Retag(_10);                      // scope 1 at $DIR/inline_retag.rs:+2:7: +2:9\n+        _4 = &(*_10);                    // scope 1 at $DIR/inline_retag.rs:+2:7: +2:9\n+        Retag(_4);                       // scope 1 at $DIR/inline_retag.rs:+2:7: +2:9\n+        _3 = &(*_4);                     // scope 1 at $DIR/inline_retag.rs:+2:7: +2:9\n+        Retag(_3);                       // scope 1 at $DIR/inline_retag.rs:+2:7: +2:9\n+        StorageLive(_6);                 // scope 1 at $DIR/inline_retag.rs:+2:11: +2:14\n+        StorageLive(_7);                 // scope 1 at $DIR/inline_retag.rs:+2:11: +2:14\n+        _9 = const _;                    // scope 1 at $DIR/inline_retag.rs:+2:11: +2:14\n                                          // mir::Constant\n-                                         // + span: $DIR/inline-retag.rs:12:11: 12:14\n+                                         // + span: $DIR/inline_retag.rs:12:11: 12:14\n                                          // + literal: Const { ty: &i32, val: Unevaluated(bar, [], Some(promoted[0])) }\n-        Retag(_9);                       // scope 1 at $DIR/inline-retag.rs:+2:11: +2:14\n-        _7 = &(*_9);                     // scope 1 at $DIR/inline-retag.rs:+2:11: +2:14\n-        Retag(_7);                       // scope 1 at $DIR/inline-retag.rs:+2:11: +2:14\n-        _6 = &(*_7);                     // scope 1 at $DIR/inline-retag.rs:+2:11: +2:14\n-        Retag(_6);                       // scope 1 at $DIR/inline-retag.rs:+2:11: +2:14\n-        Retag(_3);                       // scope 2 at $DIR/inline-retag.rs:16:8: 16:9\n-        Retag(_6);                       // scope 2 at $DIR/inline-retag.rs:16:17: 16:18\n-        StorageLive(_11);                // scope 2 at $DIR/inline-retag.rs:17:5: 17:7\n-        _11 = (*_3);                     // scope 2 at $DIR/inline-retag.rs:17:5: 17:7\n-        StorageLive(_12);                // scope 2 at $DIR/inline-retag.rs:17:11: 17:13\n-        _12 = (*_6);                     // scope 2 at $DIR/inline-retag.rs:17:11: 17:13\n-        _0 = Eq(move _11, move _12);     // scope 2 at $DIR/inline-retag.rs:17:5: 17:13\n-        StorageDead(_12);                // scope 2 at $DIR/inline-retag.rs:17:12: 17:13\n-        StorageDead(_11);                // scope 2 at $DIR/inline-retag.rs:17:12: 17:13\n-        StorageDead(_6);                 // scope 1 at $DIR/inline-retag.rs:+2:14: +2:15\n-        StorageDead(_3);                 // scope 1 at $DIR/inline-retag.rs:+2:14: +2:15\n-        StorageDead(_2);                 // scope 1 at $DIR/inline-retag.rs:+2:14: +2:15\n-        StorageDead(_1);                 // scope 0 at $DIR/inline-retag.rs:+3:1: +3:2\n-        StorageDead(_7);                 // scope 0 at $DIR/inline-retag.rs:+3:1: +3:2\n-        StorageDead(_4);                 // scope 0 at $DIR/inline-retag.rs:+3:1: +3:2\n-        return;                          // scope 0 at $DIR/inline-retag.rs:+3:2: +3:2\n+        Retag(_9);                       // scope 1 at $DIR/inline_retag.rs:+2:11: +2:14\n+        _7 = &(*_9);                     // scope 1 at $DIR/inline_retag.rs:+2:11: +2:14\n+        Retag(_7);                       // scope 1 at $DIR/inline_retag.rs:+2:11: +2:14\n+        _6 = &(*_7);                     // scope 1 at $DIR/inline_retag.rs:+2:11: +2:14\n+        Retag(_6);                       // scope 1 at $DIR/inline_retag.rs:+2:11: +2:14\n+        Retag(_3);                       // scope 2 at $DIR/inline_retag.rs:16:8: 16:9\n+        Retag(_6);                       // scope 2 at $DIR/inline_retag.rs:16:17: 16:18\n+        StorageLive(_11);                // scope 2 at $DIR/inline_retag.rs:17:5: 17:7\n+        _11 = (*_3);                     // scope 2 at $DIR/inline_retag.rs:17:5: 17:7\n+        StorageLive(_12);                // scope 2 at $DIR/inline_retag.rs:17:11: 17:13\n+        _12 = (*_6);                     // scope 2 at $DIR/inline_retag.rs:17:11: 17:13\n+        _0 = Eq(move _11, move _12);     // scope 2 at $DIR/inline_retag.rs:17:5: 17:13\n+        StorageDead(_12);                // scope 2 at $DIR/inline_retag.rs:17:12: 17:13\n+        StorageDead(_11);                // scope 2 at $DIR/inline_retag.rs:17:12: 17:13\n+        StorageDead(_6);                 // scope 1 at $DIR/inline_retag.rs:+2:14: +2:15\n+        StorageDead(_3);                 // scope 1 at $DIR/inline_retag.rs:+2:14: +2:15\n+        StorageDead(_2);                 // scope 1 at $DIR/inline_retag.rs:+2:14: +2:15\n+        StorageDead(_1);                 // scope 0 at $DIR/inline_retag.rs:+3:1: +3:2\n+        StorageDead(_7);                 // scope 0 at $DIR/inline_retag.rs:+3:1: +3:2\n+        StorageDead(_4);                 // scope 0 at $DIR/inline_retag.rs:+3:1: +3:2\n+        return;                          // scope 0 at $DIR/inline_retag.rs:+3:2: +3:2\n     }\n }"}, {"sha": "c6950f26925229d92ce6aad8bdebfc479b5f457e", "filename": "src/test/mir-opt/inline/inline_retag.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/inline/inline-retag.rs"}, {"sha": "969573ba3253fcf1ed27fdb8b6fc64af8010e1de", "filename": "src/test/mir-opt/inline/inline_shims.clone.Inline.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,25 +2,25 @@\n + // MIR for `clone` after Inline\n   \n   fn clone(_1: fn(A, B)) -> fn(A, B) {\n-      debug f => _1;                       // in scope 0 at $DIR/inline-shims.rs:+0:20: +0:21\n-      let mut _0: fn(A, B);                // return place in scope 0 at $DIR/inline-shims.rs:+0:36: +0:44\n-      let mut _2: &fn(A, B);               // in scope 0 at $DIR/inline-shims.rs:+1:5: +1:14\n-+     scope 1 (inlined <fn(A, B) as Clone>::clone - shim(fn(A, B))) { // at $DIR/inline-shims.rs:6:5: 6:14\n+      debug f => _1;                       // in scope 0 at $DIR/inline_shims.rs:+0:20: +0:21\n+      let mut _0: fn(A, B);                // return place in scope 0 at $DIR/inline_shims.rs:+0:36: +0:44\n+      let mut _2: &fn(A, B);               // in scope 0 at $DIR/inline_shims.rs:+1:5: +1:14\n++     scope 1 (inlined <fn(A, B) as Clone>::clone - shim(fn(A, B))) { // at $DIR/inline_shims.rs:6:5: 6:14\n +     }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/inline-shims.rs:+1:5: +1:14\n-          _2 = &_1;                        // scope 0 at $DIR/inline-shims.rs:+1:5: +1:14\n--         _0 = <fn(A, B) as Clone>::clone(move _2) -> bb1; // scope 0 at $DIR/inline-shims.rs:+1:5: +1:14\n+          StorageLive(_2);                 // scope 0 at $DIR/inline_shims.rs:+1:5: +1:14\n+          _2 = &_1;                        // scope 0 at $DIR/inline_shims.rs:+1:5: +1:14\n+-         _0 = <fn(A, B) as Clone>::clone(move _2) -> bb1; // scope 0 at $DIR/inline_shims.rs:+1:5: +1:14\n -                                          // mir::Constant\n--                                          // + span: $DIR/inline-shims.rs:6:7: 6:12\n+-                                          // + span: $DIR/inline_shims.rs:6:7: 6:12\n -                                          // + literal: Const { ty: for<'a> fn(&'a fn(A, B)) -> fn(A, B) {<fn(A, B) as Clone>::clone}, val: Value(<ZST>) }\n -     }\n - \n -     bb1: {\n +         _0 = (*_2);                      // scope 1 at $SRC_DIR/core/src/clone.rs:LL:COL\n-          StorageDead(_2);                 // scope 0 at $DIR/inline-shims.rs:+1:13: +1:14\n-          return;                          // scope 0 at $DIR/inline-shims.rs:+2:2: +2:2\n+          StorageDead(_2);                 // scope 0 at $DIR/inline_shims.rs:+1:13: +1:14\n+          return;                          // scope 0 at $DIR/inline_shims.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "7a54beca2336c06a16b08a36c7466415056b0174", "filename": "src/test/mir-opt/inline/inline_shims.drop.Inline.diff", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,51 +2,51 @@\n + // MIR for `drop` after Inline\n   \n   fn drop(_1: *mut Vec<A>, _2: *mut Option<B>) -> () {\n-      debug a => _1;                       // in scope 0 at $DIR/inline-shims.rs:+0:19: +0:20\n-      debug b => _2;                       // in scope 0 at $DIR/inline-shims.rs:+0:35: +0:36\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-shims.rs:+0:54: +0:54\n-      let _3: ();                          // in scope 0 at $DIR/inline-shims.rs:+1:14: +1:40\n-      let mut _4: *mut std::vec::Vec<A>;   // in scope 0 at $DIR/inline-shims.rs:+1:38: +1:39\n-      let mut _5: *mut std::option::Option<B>; // in scope 0 at $DIR/inline-shims.rs:+2:38: +2:39\n+      debug a => _1;                       // in scope 0 at $DIR/inline_shims.rs:+0:19: +0:20\n+      debug b => _2;                       // in scope 0 at $DIR/inline_shims.rs:+0:35: +0:36\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_shims.rs:+0:54: +0:54\n+      let _3: ();                          // in scope 0 at $DIR/inline_shims.rs:+1:14: +1:40\n+      let mut _4: *mut std::vec::Vec<A>;   // in scope 0 at $DIR/inline_shims.rs:+1:38: +1:39\n+      let mut _5: *mut std::option::Option<B>; // in scope 0 at $DIR/inline_shims.rs:+2:38: +2:39\n       scope 1 {\n       }\n       scope 2 {\n-+         scope 3 (inlined std::ptr::drop_in_place::<Option<B>> - shim(Some(Option<B>))) { // at $DIR/inline-shims.rs:12:14: 12:40\n++         scope 3 (inlined std::ptr::drop_in_place::<Option<B>> - shim(Some(Option<B>))) { // at $DIR/inline_shims.rs:12:14: 12:40\n +             let mut _6: isize;           // in scope 3 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n +             let mut _7: isize;           // in scope 3 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n +         }\n       }\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/inline-shims.rs:+1:5: +1:42\n-          StorageLive(_4);                 // scope 1 at $DIR/inline-shims.rs:+1:38: +1:39\n-          _4 = _1;                         // scope 1 at $DIR/inline-shims.rs:+1:38: +1:39\n-          _3 = std::ptr::drop_in_place::<Vec<A>>(move _4) -> bb1; // scope 1 at $DIR/inline-shims.rs:+1:14: +1:40\n+          StorageLive(_3);                 // scope 0 at $DIR/inline_shims.rs:+1:5: +1:42\n+          StorageLive(_4);                 // scope 1 at $DIR/inline_shims.rs:+1:38: +1:39\n+          _4 = _1;                         // scope 1 at $DIR/inline_shims.rs:+1:38: +1:39\n+          _3 = std::ptr::drop_in_place::<Vec<A>>(move _4) -> bb1; // scope 1 at $DIR/inline_shims.rs:+1:14: +1:40\n                                            // mir::Constant\n-                                           // + span: $DIR/inline-shims.rs:11:14: 11:37\n+                                           // + span: $DIR/inline_shims.rs:11:14: 11:37\n                                            // + literal: Const { ty: unsafe fn(*mut Vec<A>) {std::ptr::drop_in_place::<Vec<A>>}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_4);                 // scope 1 at $DIR/inline-shims.rs:+1:39: +1:40\n-          StorageDead(_3);                 // scope 0 at $DIR/inline-shims.rs:+1:41: +1:42\n-          StorageLive(_5);                 // scope 2 at $DIR/inline-shims.rs:+2:38: +2:39\n-          _5 = _2;                         // scope 2 at $DIR/inline-shims.rs:+2:38: +2:39\n--         _0 = std::ptr::drop_in_place::<Option<B>>(move _5) -> bb2; // scope 2 at $DIR/inline-shims.rs:+2:14: +2:40\n+          StorageDead(_4);                 // scope 1 at $DIR/inline_shims.rs:+1:39: +1:40\n+          StorageDead(_3);                 // scope 0 at $DIR/inline_shims.rs:+1:41: +1:42\n+          StorageLive(_5);                 // scope 2 at $DIR/inline_shims.rs:+2:38: +2:39\n+          _5 = _2;                         // scope 2 at $DIR/inline_shims.rs:+2:38: +2:39\n+-         _0 = std::ptr::drop_in_place::<Option<B>>(move _5) -> bb2; // scope 2 at $DIR/inline_shims.rs:+2:14: +2:40\n -                                          // mir::Constant\n--                                          // + span: $DIR/inline-shims.rs:12:14: 12:37\n+-                                          // + span: $DIR/inline_shims.rs:12:14: 12:37\n -                                          // + literal: Const { ty: unsafe fn(*mut Option<B>) {std::ptr::drop_in_place::<Option<B>>}, val: Value(<ZST>) }\n-+         StorageLive(_6);                 // scope 2 at $DIR/inline-shims.rs:+2:14: +2:40\n-+         StorageLive(_7);                 // scope 2 at $DIR/inline-shims.rs:+2:14: +2:40\n++         StorageLive(_6);                 // scope 2 at $DIR/inline_shims.rs:+2:14: +2:40\n++         StorageLive(_7);                 // scope 2 at $DIR/inline_shims.rs:+2:14: +2:40\n +         _6 = discriminant((*_5));        // scope 3 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n +         switchInt(move _6) -> [0_isize: bb2, otherwise: bb3]; // scope 3 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n       }\n   \n       bb2: {\n-+         StorageDead(_7);                 // scope 2 at $DIR/inline-shims.rs:+2:14: +2:40\n-+         StorageDead(_6);                 // scope 2 at $DIR/inline-shims.rs:+2:14: +2:40\n-          StorageDead(_5);                 // scope 2 at $DIR/inline-shims.rs:+2:39: +2:40\n-          return;                          // scope 0 at $DIR/inline-shims.rs:+3:2: +3:2\n++         StorageDead(_7);                 // scope 2 at $DIR/inline_shims.rs:+2:14: +2:40\n++         StorageDead(_6);                 // scope 2 at $DIR/inline_shims.rs:+2:14: +2:40\n+          StorageDead(_5);                 // scope 2 at $DIR/inline_shims.rs:+2:39: +2:40\n+          return;                          // scope 0 at $DIR/inline_shims.rs:+3:2: +3:2\n +     }\n + \n +     bb3: {"}, {"sha": "7c8618f71e5f55cf767630e2595197a0375c92d4", "filename": "src/test/mir-opt/inline/inline_shims.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/inline/inline-shims.rs"}, {"sha": "af08296edea576497462a340ff69bb51080f58f9", "filename": "src/test/mir-opt/inline/inline_specialization.main.Inline.diff", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,27 +2,27 @@\n + // MIR for `main` after Inline\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-specialization.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/inline-specialization.rs:+1:9: +1:10\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_specialization.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/inline_specialization.rs:+1:9: +1:10\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/inline-specialization.rs:+1:9: +1:10\n+          debug x => _1;                   // in scope 1 at $DIR/inline_specialization.rs:+1:9: +1:10\n       }\n-+     scope 2 (inlined <Vec<()> as Foo>::bar) { // at $DIR/inline-specialization.rs:5:13: 5:38\n++     scope 2 (inlined <Vec<()> as Foo>::bar) { // at $DIR/inline_specialization.rs:5:13: 5:38\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-specialization.rs:+1:9: +1:10\n--         _1 = <Vec<()> as Foo>::bar() -> bb1; // scope 0 at $DIR/inline-specialization.rs:+1:13: +1:38\n+          StorageLive(_1);                 // scope 0 at $DIR/inline_specialization.rs:+1:9: +1:10\n+-         _1 = <Vec<()> as Foo>::bar() -> bb1; // scope 0 at $DIR/inline_specialization.rs:+1:13: +1:38\n -                                          // mir::Constant\n--                                          // + span: $DIR/inline-specialization.rs:5:13: 5:36\n+-                                          // + span: $DIR/inline_specialization.rs:5:13: 5:36\n -                                          // + literal: Const { ty: fn() -> u32 {<Vec<()> as Foo>::bar}, val: Value(<ZST>) }\n -     }\n - \n -     bb1: {\n-+         _1 = const 123_u32;              // scope 2 at $DIR/inline-specialization.rs:14:31: 14:34\n-          _0 = const ();                   // scope 0 at $DIR/inline-specialization.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-specialization.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/inline-specialization.rs:+2:2: +2:2\n++         _1 = const 123_u32;              // scope 2 at $DIR/inline_specialization.rs:14:31: 14:34\n+          _0 = const ();                   // scope 0 at $DIR/inline_specialization.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline_specialization.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/inline_specialization.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "87275b4e514686c43deb9eef28cac702cbd5c1d2", "filename": "src/test/mir-opt/inline/inline_specialization.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/inline/inline-specialization.rs"}, {"sha": "74be53f55129095014a5b186d941516d469aab19", "filename": "src/test/mir-opt/inline/inline_trait_method.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/inline/inline-trait-method.rs"}, {"sha": "637bf282a65bfa9659743fbbdc20aed45cd542a0", "filename": "src/test/mir-opt/inline/inline_trait_method.test.Inline.after.mir", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,21 +1,21 @@\n // MIR for `test` after Inline\n \n fn test(_1: &dyn X) -> u32 {\n-    debug x => _1;                       // in scope 0 at $DIR/inline-trait-method.rs:+0:9: +0:10\n-    let mut _0: u32;                     // return place in scope 0 at $DIR/inline-trait-method.rs:+0:23: +0:26\n-    let mut _2: &dyn X;                  // in scope 0 at $DIR/inline-trait-method.rs:+1:5: +1:10\n+    debug x => _1;                       // in scope 0 at $DIR/inline_trait_method.rs:+0:9: +0:10\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/inline_trait_method.rs:+0:23: +0:26\n+    let mut _2: &dyn X;                  // in scope 0 at $DIR/inline_trait_method.rs:+1:5: +1:10\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/inline-trait-method.rs:+1:5: +1:10\n-        _2 = &(*_1);                     // scope 0 at $DIR/inline-trait-method.rs:+1:5: +1:10\n-        _0 = <dyn X as X>::y(move _2) -> bb1; // scope 0 at $DIR/inline-trait-method.rs:+1:5: +1:10\n+        StorageLive(_2);                 // scope 0 at $DIR/inline_trait_method.rs:+1:5: +1:10\n+        _2 = &(*_1);                     // scope 0 at $DIR/inline_trait_method.rs:+1:5: +1:10\n+        _0 = <dyn X as X>::y(move _2) -> bb1; // scope 0 at $DIR/inline_trait_method.rs:+1:5: +1:10\n                                          // mir::Constant\n-                                         // + span: $DIR/inline-trait-method.rs:9:7: 9:8\n+                                         // + span: $DIR/inline_trait_method.rs:9:7: 9:8\n                                          // + literal: Const { ty: for<'a> fn(&'a dyn X) -> u32 {<dyn X as X>::y}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageDead(_2);                 // scope 0 at $DIR/inline-trait-method.rs:+1:9: +1:10\n-        return;                          // scope 0 at $DIR/inline-trait-method.rs:+2:2: +2:2\n+        StorageDead(_2);                 // scope 0 at $DIR/inline_trait_method.rs:+1:9: +1:10\n+        return;                          // scope 0 at $DIR/inline_trait_method.rs:+2:2: +2:2\n     }\n }"}, {"sha": "378e71a25673f14cc82f4a438ede58a8591522ed", "filename": "src/test/mir-opt/inline/inline_trait_method_2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/inline/inline-trait-method_2.rs"}, {"sha": "dab8bb9a0c62bb7f5c58d005a6b8a3ca76ed5749", "filename": "src/test/mir-opt/inline/inline_trait_method_2.test2.Inline.after.mir", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,32 +1,32 @@\n // MIR for `test2` after Inline\n \n fn test2(_1: &dyn X) -> bool {\n-    debug x => _1;                       // in scope 0 at $DIR/inline-trait-method_2.rs:+0:10: +0:11\n-    let mut _0: bool;                    // return place in scope 0 at $DIR/inline-trait-method_2.rs:+0:24: +0:28\n-    let mut _2: &dyn X;                  // in scope 0 at $DIR/inline-trait-method_2.rs:+1:10: +1:11\n-    let mut _3: &dyn X;                  // in scope 0 at $DIR/inline-trait-method_2.rs:+1:10: +1:11\n-    scope 1 (inlined test) {             // at $DIR/inline-trait-method_2.rs:5:5: 5:12\n-        debug x => _2;                   // in scope 1 at $DIR/inline-trait-method_2.rs:9:9: 9:10\n-        let mut _4: &dyn X;              // in scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:10\n+    debug x => _1;                       // in scope 0 at $DIR/inline_trait_method_2.rs:+0:10: +0:11\n+    let mut _0: bool;                    // return place in scope 0 at $DIR/inline_trait_method_2.rs:+0:24: +0:28\n+    let mut _2: &dyn X;                  // in scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n+    let mut _3: &dyn X;                  // in scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n+    scope 1 (inlined test) {             // at $DIR/inline_trait_method_2.rs:5:5: 5:12\n+        debug x => _2;                   // in scope 1 at $DIR/inline_trait_method_2.rs:9:9: 9:10\n+        let mut _4: &dyn X;              // in scope 1 at $DIR/inline_trait_method_2.rs:10:5: 10:10\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/inline-trait-method_2.rs:+1:10: +1:11\n-        StorageLive(_3);                 // scope 0 at $DIR/inline-trait-method_2.rs:+1:10: +1:11\n-        _3 = &(*_1);                     // scope 0 at $DIR/inline-trait-method_2.rs:+1:10: +1:11\n-        _2 = move _3 as &dyn X (Pointer(Unsize)); // scope 0 at $DIR/inline-trait-method_2.rs:+1:10: +1:11\n-        StorageDead(_3);                 // scope 0 at $DIR/inline-trait-method_2.rs:+1:10: +1:11\n-        StorageLive(_4);                 // scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:10\n-        _4 = _2;                         // scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:10\n-        _0 = <dyn X as X>::y(move _4) -> bb1; // scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:10\n+        StorageLive(_2);                 // scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n+        StorageLive(_3);                 // scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n+        _3 = &(*_1);                     // scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n+        _2 = move _3 as &dyn X (Pointer(Unsize)); // scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n+        StorageDead(_3);                 // scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n+        StorageLive(_4);                 // scope 1 at $DIR/inline_trait_method_2.rs:10:5: 10:10\n+        _4 = _2;                         // scope 1 at $DIR/inline_trait_method_2.rs:10:5: 10:10\n+        _0 = <dyn X as X>::y(move _4) -> bb1; // scope 1 at $DIR/inline_trait_method_2.rs:10:5: 10:10\n                                          // mir::Constant\n-                                         // + span: $DIR/inline-trait-method_2.rs:10:7: 10:8\n+                                         // + span: $DIR/inline_trait_method_2.rs:10:7: 10:8\n                                          // + literal: Const { ty: for<'a> fn(&'a dyn X) -> bool {<dyn X as X>::y}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageDead(_4);                 // scope 1 at $DIR/inline-trait-method_2.rs:10:9: 10:10\n-        StorageDead(_2);                 // scope 0 at $DIR/inline-trait-method_2.rs:+1:11: +1:12\n-        return;                          // scope 0 at $DIR/inline-trait-method_2.rs:+2:2: +2:2\n+        StorageDead(_4);                 // scope 1 at $DIR/inline_trait_method_2.rs:10:9: 10:10\n+        StorageDead(_2);                 // scope 0 at $DIR/inline_trait_method_2.rs:+1:11: +1:12\n+        return;                          // scope 0 at $DIR/inline_trait_method_2.rs:+2:2: +2:2\n     }\n }"}, {"sha": "777681e1ce7ec4def0a6e72e6058bc4cac447fed", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,30 +1,30 @@\n // MIR for `a` after Inline\n \n fn a(_1: &mut [T]) -> &mut [T] {\n-    debug x => _1;                       // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+0:13: +0:14\n-    let mut _0: &mut [T];                // return place in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+0:29: +0:37\n-    let mut _2: &mut [T];                // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-    let mut _3: &mut [T];                // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-    let mut _4: &mut [T];                // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-    scope 1 (inlined <[T] as AsMut<[T]>>::as_mut) { // at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n+    debug x => _1;                       // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+0:13: +0:14\n+    let mut _0: &mut [T];                // return place in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+0:29: +0:37\n+    let mut _2: &mut [T];                // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n+    let mut _3: &mut [T];                // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n+    let mut _4: &mut [T];                // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n+    scope 1 (inlined <[T] as AsMut<[T]>>::as_mut) { // at $DIR/issue_58867_inline_as_ref_as_mut.rs:3:5: 3:15\n         debug self => _4;                // in scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n         let mut _5: &mut [T];            // in scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-        StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-        StorageLive(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-        _4 = &mut (*_1);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n+        StorageLive(_2);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n+        StorageLive(_3);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n+        StorageLive(_4);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n+        _4 = &mut (*_1);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n         StorageLive(_5);                 // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n         _5 = &mut (*_4);                 // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n         _3 = &mut (*_5);                 // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n         StorageDead(_5);                 // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        _2 = &mut (*_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-        StorageDead(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:14: +1:15\n-        _0 = &mut (*_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+2:1: +2:2\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+2:1: +2:2\n-        return;                          // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+2:2: +2:2\n+        _2 = &mut (*_3);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n+        StorageDead(_4);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:14: +1:15\n+        _0 = &mut (*_2);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n+        StorageDead(_3);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+2:1: +2:2\n+        StorageDead(_2);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+2:1: +2:2\n+        return;                          // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+2:2: +2:2\n     }\n }"}, {"sha": "83545c991000e8e6bb3bbf52c003064e39122f9e", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,12 +1,12 @@\n // MIR for `b` after Inline\n \n fn b(_1: &mut Box<T>) -> &mut T {\n-    debug x => _1;                       // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+0:13: +0:14\n-    let mut _0: &mut T;                  // return place in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+0:32: +0:38\n-    let mut _2: &mut T;                  // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-    let mut _3: &mut T;                  // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-    let mut _4: &mut std::boxed::Box<T>; // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-    scope 1 (inlined <Box<T> as AsMut<T>>::as_mut) { // at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n+    debug x => _1;                       // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+0:13: +0:14\n+    let mut _0: &mut T;                  // return place in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+0:32: +0:38\n+    let mut _2: &mut T;                  // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n+    let mut _3: &mut T;                  // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n+    let mut _4: &mut std::boxed::Box<T>; // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n+    scope 1 (inlined <Box<T> as AsMut<T>>::as_mut) { // at $DIR/issue_58867_inline_as_ref_as_mut.rs:8:5: 8:15\n         debug self => _4;                // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         let mut _5: &mut T;              // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         let mut _6: &mut T;              // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n@@ -15,10 +15,10 @@ fn b(_1: &mut Box<T>) -> &mut T {\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-        StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-        StorageLive(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-        _4 = &mut (*_1);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n+        StorageLive(_2);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n+        StorageLive(_3);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n+        StorageLive(_4);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n+        _4 = &mut (*_1);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n         StorageLive(_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         StorageLive(_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _7 = deref_copy (*_4);           // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n@@ -28,11 +28,11 @@ fn b(_1: &mut Box<T>) -> &mut T {\n         _3 = &mut (*_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         StorageDead(_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         StorageDead(_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _2 = &mut (*_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-        StorageDead(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:14: +1:15\n-        _0 = &mut (*_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+2:1: +2:2\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+2:1: +2:2\n-        return;                          // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+2:2: +2:2\n+        _2 = &mut (*_3);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n+        StorageDead(_4);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:14: +1:15\n+        _0 = &mut (*_2);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n+        StorageDead(_3);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+2:1: +2:2\n+        StorageDead(_2);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+2:1: +2:2\n+        return;                          // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+2:2: +2:2\n     }\n }"}, {"sha": "ed4e9927ce9cdd6db0f913e2c7ae6c05b5eec8a2", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.c.Inline.after.mir", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.c.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.c.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.c.Inline.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,22 +1,22 @@\n // MIR for `c` after Inline\n \n fn c(_1: &[T]) -> &[T] {\n-    debug x => _1;                       // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+0:13: +0:14\n-    let mut _0: &[T];                    // return place in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+0:25: +0:29\n-    let _2: &[T];                        // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-    let mut _3: &[T];                    // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-    scope 1 (inlined <[T] as AsRef<[T]>>::as_ref) { // at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n+    debug x => _1;                       // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+0:13: +0:14\n+    let mut _0: &[T];                    // return place in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+0:25: +0:29\n+    let _2: &[T];                        // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n+    let mut _3: &[T];                    // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n+    scope 1 (inlined <[T] as AsRef<[T]>>::as_ref) { // at $DIR/issue_58867_inline_as_ref_as_mut.rs:13:5: 13:15\n         debug self => _3;                // in scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-        StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-        _3 = &(*_1);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n+        StorageLive(_2);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n+        StorageLive(_3);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n+        _3 = &(*_1);                     // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n         _2 = _3;                         // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        _0 = &(*_2);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:14: +1:15\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+2:1: +2:2\n-        return;                          // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+2:2: +2:2\n+        _0 = &(*_2);                     // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n+        StorageDead(_3);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:14: +1:15\n+        StorageDead(_2);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+2:1: +2:2\n+        return;                          // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+2:2: +2:2\n     }\n }"}, {"sha": "18a2670be215886dcd7a81bcef28bfc0cffa74f8", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,26 +1,26 @@\n // MIR for `d` after Inline\n \n fn d(_1: &Box<T>) -> &T {\n-    debug x => _1;                       // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+0:13: +0:14\n-    let mut _0: &T;                      // return place in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+0:28: +0:30\n-    let _2: &T;                          // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-    let mut _3: &std::boxed::Box<T>;     // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-    scope 1 (inlined <Box<T> as AsRef<T>>::as_ref) { // at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n+    debug x => _1;                       // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+0:13: +0:14\n+    let mut _0: &T;                      // return place in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+0:28: +0:30\n+    let _2: &T;                          // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n+    let mut _3: &std::boxed::Box<T>;     // in scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n+    scope 1 (inlined <Box<T> as AsRef<T>>::as_ref) { // at $DIR/issue_58867_inline_as_ref_as_mut.rs:18:5: 18:15\n         debug self => _3;                // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         let mut _4: std::boxed::Box<T>;  // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         let mut _5: *const T;            // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-        StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-        _3 = &(*_1);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n+        StorageLive(_2);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n+        StorageLive(_3);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n+        _3 = &(*_1);                     // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n         _4 = deref_copy (*_3);           // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _5 = (((_4.0: std::ptr::Unique<T>).0: std::ptr::NonNull<T>).0: *const T); // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _2 = &(*_5);                     // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _0 = &(*_2);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:5: +1:15\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+1:14: +1:15\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+2:1: +2:2\n-        return;                          // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:+2:2: +2:2\n+        _0 = &(*_2);                     // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:5: +1:15\n+        StorageDead(_3);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+1:14: +1:15\n+        StorageDead(_2);                 // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+2:1: +2:2\n+        return;                          // scope 0 at $DIR/issue_58867_inline_as_ref_as_mut.rs:+2:2: +2:2\n     }\n }"}, {"sha": "94f926d39648f5e1e64d4b0d3313b09b62a7e1a0", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/inline/issue-58867-inline-as-ref-as-mut.rs"}, {"sha": "d99ae1a6c7c8356b0b15588063b453f55d54a9dd", "filename": "src/test/mir-opt/inline/issue_76997_inline_scopes_parenting.main.Inline.after.mir", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,42 +1,42 @@\n // MIR for `main` after Inline\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:+0:11: +0:11\n-    let _1: [closure@$DIR/issue-76997-inline-scopes-parenting.rs:5:13: 5:16]; // in scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:+1:9: +1:10\n-    let mut _2: &[closure@$DIR/issue-76997-inline-scopes-parenting.rs:5:13: 5:16]; // in scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:+2:5: +2:6\n-    let mut _3: ((),);                   // in scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:+2:5: +2:10\n-    let mut _4: ();                      // in scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:+2:7: +2:9\n-    let mut _5: ();                      // in scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:+2:5: +2:10\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue_76997_inline_scopes_parenting.rs:+0:11: +0:11\n+    let _1: [closure@$DIR/issue_76997_inline_scopes_parenting.rs:5:13: 5:16]; // in scope 0 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:9: +1:10\n+    let mut _2: &[closure@$DIR/issue_76997_inline_scopes_parenting.rs:5:13: 5:16]; // in scope 0 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:6\n+    let mut _3: ((),);                   // in scope 0 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:10\n+    let mut _4: ();                      // in scope 0 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:7: +2:9\n+    let mut _5: ();                      // in scope 0 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:10\n     scope 1 {\n-        debug f => _1;                   // in scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:+1:9: +1:10\n-        scope 2 (inlined main::{closure#0}) { // at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n-            debug x => _5;               // in scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:+1:14: +1:15\n-            let _6: ();                  // in scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:+1:23: +1:24\n+        debug f => _1;                   // in scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:9: +1:10\n+        scope 2 (inlined main::{closure#0}) { // at $DIR/issue_76997_inline_scopes_parenting.rs:6:5: 6:10\n+            debug x => _5;               // in scope 2 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:14: +1:15\n+            let _6: ();                  // in scope 2 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:23: +1:24\n             scope 3 {\n-                debug y => _6;           // in scope 3 at $DIR/issue-76997-inline-scopes-parenting.rs:+1:23: +1:24\n+                debug y => _6;           // in scope 3 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:23: +1:24\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:+1:9: +1:10\n-        Deinit(_1);                      // scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:+1:13: +1:33\n-        StorageLive(_2);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:+2:5: +2:6\n-        _2 = &_1;                        // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:+2:5: +2:6\n-        StorageLive(_3);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:+2:5: +2:10\n-        StorageLive(_4);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:+2:7: +2:9\n-        Deinit(_4);                      // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:+2:7: +2:9\n-        Deinit(_3);                      // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:+2:5: +2:10\n-        (_3.0: ()) = move _4;            // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:+2:5: +2:10\n-        StorageLive(_5);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:+2:5: +2:10\n-        _5 = move (_3.0: ());            // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:+2:5: +2:10\n-        StorageLive(_6);                 // scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:+1:23: +1:24\n-        StorageDead(_6);                 // scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:+1:32: +1:33\n-        StorageDead(_5);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:+2:5: +2:10\n-        StorageDead(_4);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:+2:9: +2:10\n-        StorageDead(_3);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:+2:9: +2:10\n-        StorageDead(_2);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:+2:9: +2:10\n-        StorageDead(_1);                 // scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:+3:1: +3:2\n-        return;                          // scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:+3:2: +3:2\n+        StorageLive(_1);                 // scope 0 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:9: +1:10\n+        Deinit(_1);                      // scope 0 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:13: +1:33\n+        StorageLive(_2);                 // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:6\n+        _2 = &_1;                        // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:6\n+        StorageLive(_3);                 // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:10\n+        StorageLive(_4);                 // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:7: +2:9\n+        Deinit(_4);                      // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:7: +2:9\n+        Deinit(_3);                      // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:10\n+        (_3.0: ()) = move _4;            // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:10\n+        StorageLive(_5);                 // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:10\n+        _5 = move (_3.0: ());            // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:10\n+        StorageLive(_6);                 // scope 2 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:23: +1:24\n+        StorageDead(_6);                 // scope 2 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:32: +1:33\n+        StorageDead(_5);                 // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:10\n+        StorageDead(_4);                 // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:9: +2:10\n+        StorageDead(_3);                 // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:9: +2:10\n+        StorageDead(_2);                 // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:9: +2:10\n+        StorageDead(_1);                 // scope 0 at $DIR/issue_76997_inline_scopes_parenting.rs:+3:1: +3:2\n+        return;                          // scope 0 at $DIR/issue_76997_inline_scopes_parenting.rs:+3:2: +3:2\n     }\n }"}, {"sha": "76d806acc63491e97118171a14b1a2260e33fe94", "filename": "src/test/mir-opt/inline/issue_76997_inline_scopes_parenting.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/inline/issue-76997-inline-scopes-parenting.rs"}, {"sha": "51a98465fd9a78316f0ea331c4b10f043fcdfd7d", "filename": "src/test/mir-opt/inline/issue_78442.bar.Inline.diff", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,67 +2,67 @@\n + // MIR for `bar` after Inline\n   \n   fn bar(_1: P) -> () {\n-      debug _baz => _1;                    // in scope 0 at $DIR/issue-78442.rs:+2:5: +2:9\n-      let mut _0: ();                      // return place in scope 0 at $DIR/issue-78442.rs:+3:3: +3:3\n-      let _2: ();                          // in scope 0 at $DIR/issue-78442.rs:+4:5: +4:17\n-      let mut _3: &fn() {foo};             // in scope 0 at $DIR/issue-78442.rs:+4:5: +4:15\n-      let _4: fn() {foo};                  // in scope 0 at $DIR/issue-78442.rs:+4:5: +4:15\n-      let mut _5: ();                      // in scope 0 at $DIR/issue-78442.rs:+4:5: +4:17\n-+     scope 1 (inlined <fn() {foo} as Fn<()>>::call - shim(fn() {foo})) { // at $DIR/issue-78442.rs:11:5: 11:17\n+      debug _baz => _1;                    // in scope 0 at $DIR/issue_78442.rs:+2:5: +2:9\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue_78442.rs:+3:3: +3:3\n+      let _2: ();                          // in scope 0 at $DIR/issue_78442.rs:+4:5: +4:17\n+      let mut _3: &fn() {foo};             // in scope 0 at $DIR/issue_78442.rs:+4:5: +4:15\n+      let _4: fn() {foo};                  // in scope 0 at $DIR/issue_78442.rs:+4:5: +4:15\n+      let mut _5: ();                      // in scope 0 at $DIR/issue_78442.rs:+4:5: +4:17\n++     scope 1 (inlined <fn() {foo} as Fn<()>>::call - shim(fn() {foo})) { // at $DIR/issue_78442.rs:11:5: 11:17\n +     }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/issue-78442.rs:+4:5: +4:17\n-          StorageLive(_3);                 // scope 0 at $DIR/issue-78442.rs:+4:5: +4:15\n-          StorageLive(_4);                 // scope 0 at $DIR/issue-78442.rs:+4:5: +4:15\n--         _4 = hide_foo() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:+4:5: +4:15\n-+         _4 = hide_foo() -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/issue-78442.rs:+4:5: +4:15\n+          StorageLive(_2);                 // scope 0 at $DIR/issue_78442.rs:+4:5: +4:17\n+          StorageLive(_3);                 // scope 0 at $DIR/issue_78442.rs:+4:5: +4:15\n+          StorageLive(_4);                 // scope 0 at $DIR/issue_78442.rs:+4:5: +4:15\n+-         _4 = hide_foo() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/issue_78442.rs:+4:5: +4:15\n++         _4 = hide_foo() -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/issue_78442.rs:+4:5: +4:15\n                                            // mir::Constant\n-                                           // + span: $DIR/issue-78442.rs:11:5: 11:13\n+                                           // + span: $DIR/issue_78442.rs:11:5: 11:13\n                                            // + literal: Const { ty: fn() -> impl Fn() {hide_foo}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          _3 = &_4;                        // scope 0 at $DIR/issue-78442.rs:+4:5: +4:15\n-          StorageLive(_5);                 // scope 0 at $DIR/issue-78442.rs:+4:5: +4:17\n-          Deinit(_5);                      // scope 0 at $DIR/issue-78442.rs:+4:5: +4:17\n--         _2 = <fn() {foo} as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:+4:5: +4:17\n+          _3 = &_4;                        // scope 0 at $DIR/issue_78442.rs:+4:5: +4:15\n+          StorageLive(_5);                 // scope 0 at $DIR/issue_78442.rs:+4:5: +4:17\n+          Deinit(_5);                      // scope 0 at $DIR/issue_78442.rs:+4:5: +4:17\n+-         _2 = <fn() {foo} as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue_78442.rs:+4:5: +4:17\n -                                          // mir::Constant\n--                                          // + span: $DIR/issue-78442.rs:11:5: 11:15\n+-                                          // + span: $DIR/issue_78442.rs:11:5: 11:15\n -                                          // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a fn() {foo}, ()) -> <fn() {foo} as FnOnce<()>>::Output {<fn() {foo} as Fn<()>>::call}, val: Value(<ZST>) }\n +         _2 = move (*_3)() -> [return: bb5, unwind: bb3]; // scope 1 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n       bb2: {\n--         StorageDead(_5);                 // scope 0 at $DIR/issue-78442.rs:+4:16: +4:17\n--         StorageDead(_3);                 // scope 0 at $DIR/issue-78442.rs:+4:16: +4:17\n--         StorageDead(_4);                 // scope 0 at $DIR/issue-78442.rs:+4:17: +4:18\n--         StorageDead(_2);                 // scope 0 at $DIR/issue-78442.rs:+4:17: +4:18\n--         _0 = const ();                   // scope 0 at $DIR/issue-78442.rs:+3:3: +5:2\n--         drop(_1) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/issue-78442.rs:+5:1: +5:2\n-+         return;                          // scope 0 at $DIR/issue-78442.rs:+5:2: +5:2\n+-         StorageDead(_5);                 // scope 0 at $DIR/issue_78442.rs:+4:16: +4:17\n+-         StorageDead(_3);                 // scope 0 at $DIR/issue_78442.rs:+4:16: +4:17\n+-         StorageDead(_4);                 // scope 0 at $DIR/issue_78442.rs:+4:17: +4:18\n+-         StorageDead(_2);                 // scope 0 at $DIR/issue_78442.rs:+4:17: +4:18\n+-         _0 = const ();                   // scope 0 at $DIR/issue_78442.rs:+3:3: +5:2\n+-         drop(_1) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/issue_78442.rs:+5:1: +5:2\n++         return;                          // scope 0 at $DIR/issue_78442.rs:+5:2: +5:2\n       }\n   \n -     bb3: {\n--         return;                          // scope 0 at $DIR/issue-78442.rs:+5:2: +5:2\n+-         return;                          // scope 0 at $DIR/issue_78442.rs:+5:2: +5:2\n +     bb3 (cleanup): {\n-+         drop(_1) -> bb4;                 // scope 0 at $DIR/issue-78442.rs:+5:1: +5:2\n++         drop(_1) -> bb4;                 // scope 0 at $DIR/issue_78442.rs:+5:1: +5:2\n       }\n   \n       bb4 (cleanup): {\n--         drop(_1) -> bb5;                 // scope 0 at $DIR/issue-78442.rs:+5:1: +5:2\n-+         resume;                          // scope 0 at $DIR/issue-78442.rs:+0:1: +5:2\n+-         drop(_1) -> bb5;                 // scope 0 at $DIR/issue_78442.rs:+5:1: +5:2\n++         resume;                          // scope 0 at $DIR/issue_78442.rs:+0:1: +5:2\n       }\n   \n -     bb5 (cleanup): {\n--         resume;                          // scope 0 at $DIR/issue-78442.rs:+0:1: +5:2\n+-         resume;                          // scope 0 at $DIR/issue_78442.rs:+0:1: +5:2\n +     bb5: {\n-+         StorageDead(_5);                 // scope 0 at $DIR/issue-78442.rs:+4:16: +4:17\n-+         StorageDead(_3);                 // scope 0 at $DIR/issue-78442.rs:+4:16: +4:17\n-+         StorageDead(_4);                 // scope 0 at $DIR/issue-78442.rs:+4:17: +4:18\n-+         StorageDead(_2);                 // scope 0 at $DIR/issue-78442.rs:+4:17: +4:18\n-+         _0 = const ();                   // scope 0 at $DIR/issue-78442.rs:+3:3: +5:2\n-+         drop(_1) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:+5:1: +5:2\n++         StorageDead(_5);                 // scope 0 at $DIR/issue_78442.rs:+4:16: +4:17\n++         StorageDead(_3);                 // scope 0 at $DIR/issue_78442.rs:+4:16: +4:17\n++         StorageDead(_4);                 // scope 0 at $DIR/issue_78442.rs:+4:17: +4:18\n++         StorageDead(_2);                 // scope 0 at $DIR/issue_78442.rs:+4:17: +4:18\n++         _0 = const ();                   // scope 0 at $DIR/issue_78442.rs:+3:3: +5:2\n++         drop(_1) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue_78442.rs:+5:1: +5:2\n       }\n   }\n   "}, {"sha": "e47466c5e80476a5b9915b747bc8c4a9b7b907b8", "filename": "src/test/mir-opt/inline/issue_78442.bar.RevealAll.diff", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,56 +2,56 @@\n + // MIR for `bar` after RevealAll\n   \n   fn bar(_1: P) -> () {\n-      debug _baz => _1;                    // in scope 0 at $DIR/issue-78442.rs:+2:5: +2:9\n-      let mut _0: ();                      // return place in scope 0 at $DIR/issue-78442.rs:+3:3: +3:3\n-      let _2: ();                          // in scope 0 at $DIR/issue-78442.rs:+4:5: +4:17\n--     let mut _3: &impl Fn();              // in scope 0 at $DIR/issue-78442.rs:+4:5: +4:15\n--     let _4: impl Fn();                   // in scope 0 at $DIR/issue-78442.rs:+4:5: +4:15\n-+     let mut _3: &fn() {foo};             // in scope 0 at $DIR/issue-78442.rs:+4:5: +4:15\n-+     let _4: fn() {foo};                  // in scope 0 at $DIR/issue-78442.rs:+4:5: +4:15\n-      let mut _5: ();                      // in scope 0 at $DIR/issue-78442.rs:+4:5: +4:17\n+      debug _baz => _1;                    // in scope 0 at $DIR/issue_78442.rs:+2:5: +2:9\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue_78442.rs:+3:3: +3:3\n+      let _2: ();                          // in scope 0 at $DIR/issue_78442.rs:+4:5: +4:17\n+-     let mut _3: &impl Fn();              // in scope 0 at $DIR/issue_78442.rs:+4:5: +4:15\n+-     let _4: impl Fn();                   // in scope 0 at $DIR/issue_78442.rs:+4:5: +4:15\n++     let mut _3: &fn() {foo};             // in scope 0 at $DIR/issue_78442.rs:+4:5: +4:15\n++     let _4: fn() {foo};                  // in scope 0 at $DIR/issue_78442.rs:+4:5: +4:15\n+      let mut _5: ();                      // in scope 0 at $DIR/issue_78442.rs:+4:5: +4:17\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/issue-78442.rs:+4:5: +4:17\n-          StorageLive(_3);                 // scope 0 at $DIR/issue-78442.rs:+4:5: +4:15\n-          StorageLive(_4);                 // scope 0 at $DIR/issue-78442.rs:+4:5: +4:15\n-          _4 = hide_foo() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:+4:5: +4:15\n+          StorageLive(_2);                 // scope 0 at $DIR/issue_78442.rs:+4:5: +4:17\n+          StorageLive(_3);                 // scope 0 at $DIR/issue_78442.rs:+4:5: +4:15\n+          StorageLive(_4);                 // scope 0 at $DIR/issue_78442.rs:+4:5: +4:15\n+          _4 = hide_foo() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/issue_78442.rs:+4:5: +4:15\n                                            // mir::Constant\n-                                           // + span: $DIR/issue-78442.rs:11:5: 11:13\n+                                           // + span: $DIR/issue_78442.rs:11:5: 11:13\n                                            // + literal: Const { ty: fn() -> impl Fn() {hide_foo}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          _3 = &_4;                        // scope 0 at $DIR/issue-78442.rs:+4:5: +4:15\n-          StorageLive(_5);                 // scope 0 at $DIR/issue-78442.rs:+4:5: +4:17\n-          Deinit(_5);                      // scope 0 at $DIR/issue-78442.rs:+4:5: +4:17\n--         _2 = <impl Fn() as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:+4:5: +4:17\n-+         _2 = <fn() {foo} as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:+4:5: +4:17\n+          _3 = &_4;                        // scope 0 at $DIR/issue_78442.rs:+4:5: +4:15\n+          StorageLive(_5);                 // scope 0 at $DIR/issue_78442.rs:+4:5: +4:17\n+          Deinit(_5);                      // scope 0 at $DIR/issue_78442.rs:+4:5: +4:17\n+-         _2 = <impl Fn() as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue_78442.rs:+4:5: +4:17\n++         _2 = <fn() {foo} as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue_78442.rs:+4:5: +4:17\n                                            // mir::Constant\n-                                           // + span: $DIR/issue-78442.rs:11:5: 11:15\n+                                           // + span: $DIR/issue_78442.rs:11:5: 11:15\n -                                          // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a impl Fn(), ()) -> <impl Fn() as FnOnce<()>>::Output {<impl Fn() as Fn<()>>::call}, val: Value(<ZST>) }\n +                                          // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a fn() {foo}, ()) -> <fn() {foo} as FnOnce<()>>::Output {<fn() {foo} as Fn<()>>::call}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n-          StorageDead(_5);                 // scope 0 at $DIR/issue-78442.rs:+4:16: +4:17\n-          StorageDead(_3);                 // scope 0 at $DIR/issue-78442.rs:+4:16: +4:17\n-          StorageDead(_4);                 // scope 0 at $DIR/issue-78442.rs:+4:17: +4:18\n-          StorageDead(_2);                 // scope 0 at $DIR/issue-78442.rs:+4:17: +4:18\n-          _0 = const ();                   // scope 0 at $DIR/issue-78442.rs:+3:3: +5:2\n-          drop(_1) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/issue-78442.rs:+5:1: +5:2\n+          StorageDead(_5);                 // scope 0 at $DIR/issue_78442.rs:+4:16: +4:17\n+          StorageDead(_3);                 // scope 0 at $DIR/issue_78442.rs:+4:16: +4:17\n+          StorageDead(_4);                 // scope 0 at $DIR/issue_78442.rs:+4:17: +4:18\n+          StorageDead(_2);                 // scope 0 at $DIR/issue_78442.rs:+4:17: +4:18\n+          _0 = const ();                   // scope 0 at $DIR/issue_78442.rs:+3:3: +5:2\n+          drop(_1) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/issue_78442.rs:+5:1: +5:2\n       }\n   \n       bb3: {\n-          return;                          // scope 0 at $DIR/issue-78442.rs:+5:2: +5:2\n+          return;                          // scope 0 at $DIR/issue_78442.rs:+5:2: +5:2\n       }\n   \n       bb4 (cleanup): {\n-          drop(_1) -> bb5;                 // scope 0 at $DIR/issue-78442.rs:+5:1: +5:2\n+          drop(_1) -> bb5;                 // scope 0 at $DIR/issue_78442.rs:+5:1: +5:2\n       }\n   \n       bb5 (cleanup): {\n-          resume;                          // scope 0 at $DIR/issue-78442.rs:+0:1: +5:2\n+          resume;                          // scope 0 at $DIR/issue_78442.rs:+0:1: +5:2\n       }\n   }\n   "}, {"sha": "aa8ede2df9e9c126cdea02da120f450fbd003ddd", "filename": "src/test/mir-opt/inline/issue_78442.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/inline/issue-78442.rs"}, {"sha": "7388722b776339b96e05f0176eb441c61e51c46e", "filename": "src/test/mir-opt/inline/polymorphic_recursion.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fpolymorphic_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Finline%2Fpolymorphic_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fpolymorphic_recursion.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/inline/polymorphic-recursion.rs"}, {"sha": "c24abedae927f6a54a9c219cbda8941ebd9f2de9", "filename": "src/test/mir-opt/issue_101973.inner.ConstProp.diff", "status": "modified", "additions": 61, "deletions": 61, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,62 +2,62 @@\n + // MIR for `inner` after ConstProp\n   \n   fn inner(_1: u32) -> i64 {\n-      debug fields => _1;                  // in scope 0 at $DIR/issue-101973.rs:+0:14: +0:20\n-      let mut _0: i64;                     // return place in scope 0 at $DIR/issue-101973.rs:+0:30: +0:33\n-      let mut _2: i32;                     // in scope 0 at $DIR/issue-101973.rs:+1:5: +1:65\n-      let mut _3: u32;                     // in scope 0 at $DIR/issue-101973.rs:+1:5: +1:58\n-      let mut _4: u32;                     // in scope 0 at $DIR/issue-101973.rs:+1:5: +1:17\n-      let mut _5: u32;                     // in scope 0 at $DIR/issue-101973.rs:+1:10: +1:16\n-      let mut _6: u32;                     // in scope 0 at $DIR/issue-101973.rs:+1:31: +1:57\n-      let mut _7: u32;                     // in scope 0 at $DIR/issue-101973.rs:+1:31: +1:52\n-      let mut _8: u32;                     // in scope 0 at $DIR/issue-101973.rs:+1:32: +1:45\n-      let mut _9: u32;                     // in scope 0 at $DIR/issue-101973.rs:+1:33: +1:39\n-      let mut _10: (u32, bool);            // in scope 0 at $DIR/issue-101973.rs:+1:32: +1:45\n-      let mut _11: (u32, bool);            // in scope 0 at $DIR/issue-101973.rs:+1:31: +1:57\n-      scope 1 (inlined imm8) {             // at $DIR/issue-101973.rs:14:5: 14:17\n-          debug x => _5;                   // in scope 1 at $DIR/issue-101973.rs:5:13: 5:14\n-          let mut _12: u32;                // in scope 1 at $DIR/issue-101973.rs:7:12: 7:27\n-          let mut _13: u32;                // in scope 1 at $DIR/issue-101973.rs:7:12: 7:20\n-          let mut _14: u32;                // in scope 1 at $DIR/issue-101973.rs:7:13: 7:14\n-          let mut _15: (u32, bool);        // in scope 1 at $DIR/issue-101973.rs:7:12: 7:20\n+      debug fields => _1;                  // in scope 0 at $DIR/issue_101973.rs:+0:14: +0:20\n+      let mut _0: i64;                     // return place in scope 0 at $DIR/issue_101973.rs:+0:30: +0:33\n+      let mut _2: i32;                     // in scope 0 at $DIR/issue_101973.rs:+1:5: +1:65\n+      let mut _3: u32;                     // in scope 0 at $DIR/issue_101973.rs:+1:5: +1:58\n+      let mut _4: u32;                     // in scope 0 at $DIR/issue_101973.rs:+1:5: +1:17\n+      let mut _5: u32;                     // in scope 0 at $DIR/issue_101973.rs:+1:10: +1:16\n+      let mut _6: u32;                     // in scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n+      let mut _7: u32;                     // in scope 0 at $DIR/issue_101973.rs:+1:31: +1:52\n+      let mut _8: u32;                     // in scope 0 at $DIR/issue_101973.rs:+1:32: +1:45\n+      let mut _9: u32;                     // in scope 0 at $DIR/issue_101973.rs:+1:33: +1:39\n+      let mut _10: (u32, bool);            // in scope 0 at $DIR/issue_101973.rs:+1:32: +1:45\n+      let mut _11: (u32, bool);            // in scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n+      scope 1 (inlined imm8) {             // at $DIR/issue_101973.rs:14:5: 14:17\n+          debug x => _5;                   // in scope 1 at $DIR/issue_101973.rs:5:13: 5:14\n+          let mut _12: u32;                // in scope 1 at $DIR/issue_101973.rs:7:12: 7:27\n+          let mut _13: u32;                // in scope 1 at $DIR/issue_101973.rs:7:12: 7:20\n+          let mut _14: u32;                // in scope 1 at $DIR/issue_101973.rs:7:13: 7:14\n+          let mut _15: (u32, bool);        // in scope 1 at $DIR/issue_101973.rs:7:12: 7:20\n           scope 2 {\n-              debug out => _4;             // in scope 2 at $DIR/issue-101973.rs:6:9: 6:16\n+              debug out => _4;             // in scope 2 at $DIR/issue_101973.rs:6:9: 6:16\n           }\n       }\n-      scope 3 (inlined core::num::<impl u32>::rotate_right) { // at $DIR/issue-101973.rs:14:5: 14:58\n+      scope 3 (inlined core::num::<impl u32>::rotate_right) { // at $DIR/issue_101973.rs:14:5: 14:58\n           debug self => _4;                // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n           debug n => _6;                   // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n           let mut _16: u32;                // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n           let mut _17: u32;                // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/issue-101973.rs:+1:5: +1:65\n-          StorageLive(_3);                 // scope 0 at $DIR/issue-101973.rs:+1:5: +1:58\n-          StorageLive(_4);                 // scope 0 at $DIR/issue-101973.rs:+1:5: +1:17\n-          StorageLive(_5);                 // scope 0 at $DIR/issue-101973.rs:+1:10: +1:16\n-          _5 = _1;                         // scope 0 at $DIR/issue-101973.rs:+1:10: +1:16\n-          _4 = const 0_u32;                // scope 1 at $DIR/issue-101973.rs:6:19: 6:23\n-          StorageLive(_12);                // scope 2 at $DIR/issue-101973.rs:7:12: 7:27\n-          StorageLive(_13);                // scope 2 at $DIR/issue-101973.rs:7:12: 7:20\n-          StorageLive(_14);                // scope 2 at $DIR/issue-101973.rs:7:13: 7:14\n-          _14 = _5;                        // scope 2 at $DIR/issue-101973.rs:7:13: 7:14\n-          _15 = CheckedShr(_14, const 0_i32); // scope 2 at $DIR/issue-101973.rs:7:12: 7:20\n-          assert(!move (_15.1: bool), \"attempt to shift right by `{}`, which would overflow\", const 0_i32) -> bb3; // scope 2 at $DIR/issue-101973.rs:7:12: 7:20\n+          StorageLive(_2);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:65\n+          StorageLive(_3);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:58\n+          StorageLive(_4);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:17\n+          StorageLive(_5);                 // scope 0 at $DIR/issue_101973.rs:+1:10: +1:16\n+          _5 = _1;                         // scope 0 at $DIR/issue_101973.rs:+1:10: +1:16\n+          _4 = const 0_u32;                // scope 1 at $DIR/issue_101973.rs:6:19: 6:23\n+          StorageLive(_12);                // scope 2 at $DIR/issue_101973.rs:7:12: 7:27\n+          StorageLive(_13);                // scope 2 at $DIR/issue_101973.rs:7:12: 7:20\n+          StorageLive(_14);                // scope 2 at $DIR/issue_101973.rs:7:13: 7:14\n+          _14 = _5;                        // scope 2 at $DIR/issue_101973.rs:7:13: 7:14\n+          _15 = CheckedShr(_14, const 0_i32); // scope 2 at $DIR/issue_101973.rs:7:12: 7:20\n+          assert(!move (_15.1: bool), \"attempt to shift right by `{}`, which would overflow\", const 0_i32) -> bb3; // scope 2 at $DIR/issue_101973.rs:7:12: 7:20\n       }\n   \n       bb1: {\n-          _8 = move (_10.0: u32);          // scope 0 at $DIR/issue-101973.rs:+1:32: +1:45\n-          StorageDead(_9);                 // scope 0 at $DIR/issue-101973.rs:+1:44: +1:45\n-          _7 = BitAnd(move _8, const 15_u32); // scope 0 at $DIR/issue-101973.rs:+1:31: +1:52\n-          StorageDead(_8);                 // scope 0 at $DIR/issue-101973.rs:+1:51: +1:52\n-          _11 = CheckedShl(_7, const 1_i32); // scope 0 at $DIR/issue-101973.rs:+1:31: +1:57\n-          assert(!move (_11.1: bool), \"attempt to shift left by `{}`, which would overflow\", const 1_i32) -> bb2; // scope 0 at $DIR/issue-101973.rs:+1:31: +1:57\n+          _8 = move (_10.0: u32);          // scope 0 at $DIR/issue_101973.rs:+1:32: +1:45\n+          StorageDead(_9);                 // scope 0 at $DIR/issue_101973.rs:+1:44: +1:45\n+          _7 = BitAnd(move _8, const 15_u32); // scope 0 at $DIR/issue_101973.rs:+1:31: +1:52\n+          StorageDead(_8);                 // scope 0 at $DIR/issue_101973.rs:+1:51: +1:52\n+          _11 = CheckedShl(_7, const 1_i32); // scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n+          assert(!move (_11.1: bool), \"attempt to shift left by `{}`, which would overflow\", const 1_i32) -> bb2; // scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n       }\n   \n       bb2: {\n-          _6 = move (_11.0: u32);          // scope 0 at $DIR/issue-101973.rs:+1:31: +1:57\n-          StorageDead(_7);                 // scope 0 at $DIR/issue-101973.rs:+1:56: +1:57\n+          _6 = move (_11.0: u32);          // scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n+          StorageDead(_7);                 // scope 0 at $DIR/issue_101973.rs:+1:56: +1:57\n           StorageLive(_16);                // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n           _16 = _4;                        // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n           StorageLive(_17);                // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n@@ -69,32 +69,32 @@\n       }\n   \n       bb3: {\n-          _13 = move (_15.0: u32);         // scope 2 at $DIR/issue-101973.rs:7:12: 7:20\n-          StorageDead(_14);                // scope 2 at $DIR/issue-101973.rs:7:19: 7:20\n-          _12 = BitAnd(move _13, const 255_u32); // scope 2 at $DIR/issue-101973.rs:7:12: 7:27\n-          StorageDead(_13);                // scope 2 at $DIR/issue-101973.rs:7:26: 7:27\n-          _4 = BitOr(_4, move _12);        // scope 2 at $DIR/issue-101973.rs:7:5: 7:27\n-          StorageDead(_12);                // scope 2 at $DIR/issue-101973.rs:7:26: 7:27\n-          StorageDead(_5);                 // scope 0 at $DIR/issue-101973.rs:+1:16: +1:17\n-          StorageLive(_6);                 // scope 0 at $DIR/issue-101973.rs:+1:31: +1:57\n-          StorageLive(_7);                 // scope 0 at $DIR/issue-101973.rs:+1:31: +1:52\n-          StorageLive(_8);                 // scope 0 at $DIR/issue-101973.rs:+1:32: +1:45\n-          StorageLive(_9);                 // scope 0 at $DIR/issue-101973.rs:+1:33: +1:39\n-          _9 = _1;                         // scope 0 at $DIR/issue-101973.rs:+1:33: +1:39\n-          _10 = CheckedShr(_9, const 8_i32); // scope 0 at $DIR/issue-101973.rs:+1:32: +1:45\n-          assert(!move (_10.1: bool), \"attempt to shift right by `{}`, which would overflow\", const 8_i32) -> bb1; // scope 0 at $DIR/issue-101973.rs:+1:32: +1:45\n+          _13 = move (_15.0: u32);         // scope 2 at $DIR/issue_101973.rs:7:12: 7:20\n+          StorageDead(_14);                // scope 2 at $DIR/issue_101973.rs:7:19: 7:20\n+          _12 = BitAnd(move _13, const 255_u32); // scope 2 at $DIR/issue_101973.rs:7:12: 7:27\n+          StorageDead(_13);                // scope 2 at $DIR/issue_101973.rs:7:26: 7:27\n+          _4 = BitOr(_4, move _12);        // scope 2 at $DIR/issue_101973.rs:7:5: 7:27\n+          StorageDead(_12);                // scope 2 at $DIR/issue_101973.rs:7:26: 7:27\n+          StorageDead(_5);                 // scope 0 at $DIR/issue_101973.rs:+1:16: +1:17\n+          StorageLive(_6);                 // scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n+          StorageLive(_7);                 // scope 0 at $DIR/issue_101973.rs:+1:31: +1:52\n+          StorageLive(_8);                 // scope 0 at $DIR/issue_101973.rs:+1:32: +1:45\n+          StorageLive(_9);                 // scope 0 at $DIR/issue_101973.rs:+1:33: +1:39\n+          _9 = _1;                         // scope 0 at $DIR/issue_101973.rs:+1:33: +1:39\n+          _10 = CheckedShr(_9, const 8_i32); // scope 0 at $DIR/issue_101973.rs:+1:32: +1:45\n+          assert(!move (_10.1: bool), \"attempt to shift right by `{}`, which would overflow\", const 8_i32) -> bb1; // scope 0 at $DIR/issue_101973.rs:+1:32: +1:45\n       }\n   \n       bb4: {\n           StorageDead(_17);                // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n           StorageDead(_16);                // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-          StorageDead(_6);                 // scope 0 at $DIR/issue-101973.rs:+1:57: +1:58\n-          StorageDead(_4);                 // scope 0 at $DIR/issue-101973.rs:+1:57: +1:58\n-          _2 = move _3 as i32 (IntToInt);  // scope 0 at $DIR/issue-101973.rs:+1:5: +1:65\n-          StorageDead(_3);                 // scope 0 at $DIR/issue-101973.rs:+1:64: +1:65\n-          _0 = move _2 as i64 (IntToInt);  // scope 0 at $DIR/issue-101973.rs:+1:5: +1:72\n-          StorageDead(_2);                 // scope 0 at $DIR/issue-101973.rs:+1:71: +1:72\n-          return;                          // scope 0 at $DIR/issue-101973.rs:+2:2: +2:2\n+          StorageDead(_6);                 // scope 0 at $DIR/issue_101973.rs:+1:57: +1:58\n+          StorageDead(_4);                 // scope 0 at $DIR/issue_101973.rs:+1:57: +1:58\n+          _2 = move _3 as i32 (IntToInt);  // scope 0 at $DIR/issue_101973.rs:+1:5: +1:65\n+          StorageDead(_3);                 // scope 0 at $DIR/issue_101973.rs:+1:64: +1:65\n+          _0 = move _2 as i64 (IntToInt);  // scope 0 at $DIR/issue_101973.rs:+1:5: +1:72\n+          StorageDead(_2);                 // scope 0 at $DIR/issue_101973.rs:+1:71: +1:72\n+          return;                          // scope 0 at $DIR/issue_101973.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "216659a235ef7729df5c632b53a9f90968eba10c", "filename": "src/test/mir-opt/issue_101973.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_101973.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_101973.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_101973.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/issue-101973.rs"}, {"sha": "82210081832c88d9a8d153963876aa7b1092e677", "filename": "src/test/mir-opt/issue_38669.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,52 +1,52 @@\n // MIR for `main` after SimplifyCfg-initial\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/issue-38669.rs:+0:11: +0:11\n-    let mut _1: bool;                    // in scope 0 at $DIR/issue-38669.rs:+1:9: +1:25\n-    let mut _2: ();                      // in scope 0 at $DIR/issue-38669.rs:+0:1: +8:2\n-    let _3: ();                          // in scope 0 at $DIR/issue-38669.rs:+3:9: +5:10\n-    let mut _4: bool;                    // in scope 0 at $DIR/issue-38669.rs:+3:12: +3:24\n-    let mut _5: !;                       // in scope 0 at $DIR/issue-38669.rs:+3:25: +5:10\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue_38669.rs:+0:11: +0:11\n+    let mut _1: bool;                    // in scope 0 at $DIR/issue_38669.rs:+1:9: +1:25\n+    let mut _2: ();                      // in scope 0 at $DIR/issue_38669.rs:+0:1: +8:2\n+    let _3: ();                          // in scope 0 at $DIR/issue_38669.rs:+3:9: +5:10\n+    let mut _4: bool;                    // in scope 0 at $DIR/issue_38669.rs:+3:12: +3:24\n+    let mut _5: !;                       // in scope 0 at $DIR/issue_38669.rs:+3:25: +5:10\n     scope 1 {\n-        debug should_break => _1;        // in scope 1 at $DIR/issue-38669.rs:+1:9: +1:25\n+        debug should_break => _1;        // in scope 1 at $DIR/issue_38669.rs:+1:9: +1:25\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/issue-38669.rs:+1:9: +1:25\n-        _1 = const false;                // scope 0 at $DIR/issue-38669.rs:+1:28: +1:33\n-        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/issue-38669.rs:+1:9: +1:25\n-        goto -> bb1;                     // scope 1 at $DIR/issue-38669.rs:+2:5: +7:6\n+        StorageLive(_1);                 // scope 0 at $DIR/issue_38669.rs:+1:9: +1:25\n+        _1 = const false;                // scope 0 at $DIR/issue_38669.rs:+1:28: +1:33\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/issue_38669.rs:+1:9: +1:25\n+        goto -> bb1;                     // scope 1 at $DIR/issue_38669.rs:+2:5: +7:6\n     }\n \n     bb1: {\n-        falseUnwind -> [real: bb2, cleanup: bb5]; // scope 1 at $DIR/issue-38669.rs:+2:5: +7:6\n+        falseUnwind -> [real: bb2, cleanup: bb5]; // scope 1 at $DIR/issue_38669.rs:+2:5: +7:6\n     }\n \n     bb2: {\n-        StorageLive(_3);                 // scope 1 at $DIR/issue-38669.rs:+3:9: +5:10\n-        StorageLive(_4);                 // scope 1 at $DIR/issue-38669.rs:+3:12: +3:24\n-        _4 = _1;                         // scope 1 at $DIR/issue-38669.rs:+3:12: +3:24\n-        switchInt(move _4) -> [false: bb4, otherwise: bb3]; // scope 1 at $DIR/issue-38669.rs:+3:12: +3:24\n+        StorageLive(_3);                 // scope 1 at $DIR/issue_38669.rs:+3:9: +5:10\n+        StorageLive(_4);                 // scope 1 at $DIR/issue_38669.rs:+3:12: +3:24\n+        _4 = _1;                         // scope 1 at $DIR/issue_38669.rs:+3:12: +3:24\n+        switchInt(move _4) -> [false: bb4, otherwise: bb3]; // scope 1 at $DIR/issue_38669.rs:+3:12: +3:24\n     }\n \n     bb3: {\n-        _0 = const ();                   // scope 1 at $DIR/issue-38669.rs:+4:13: +4:18\n-        StorageDead(_4);                 // scope 1 at $DIR/issue-38669.rs:+5:9: +5:10\n-        StorageDead(_3);                 // scope 1 at $DIR/issue-38669.rs:+5:9: +5:10\n-        StorageDead(_1);                 // scope 0 at $DIR/issue-38669.rs:+8:1: +8:2\n-        return;                          // scope 0 at $DIR/issue-38669.rs:+8:2: +8:2\n+        _0 = const ();                   // scope 1 at $DIR/issue_38669.rs:+4:13: +4:18\n+        StorageDead(_4);                 // scope 1 at $DIR/issue_38669.rs:+5:9: +5:10\n+        StorageDead(_3);                 // scope 1 at $DIR/issue_38669.rs:+5:9: +5:10\n+        StorageDead(_1);                 // scope 0 at $DIR/issue_38669.rs:+8:1: +8:2\n+        return;                          // scope 0 at $DIR/issue_38669.rs:+8:2: +8:2\n     }\n \n     bb4: {\n-        _3 = const ();                   // scope 1 at $DIR/issue-38669.rs:+5:10: +5:10\n-        StorageDead(_4);                 // scope 1 at $DIR/issue-38669.rs:+5:9: +5:10\n-        StorageDead(_3);                 // scope 1 at $DIR/issue-38669.rs:+5:9: +5:10\n-        _1 = const true;                 // scope 1 at $DIR/issue-38669.rs:+6:9: +6:28\n-        _2 = const ();                   // scope 1 at $DIR/issue-38669.rs:+2:10: +7:6\n-        goto -> bb1;                     // scope 1 at $DIR/issue-38669.rs:+2:5: +7:6\n+        _3 = const ();                   // scope 1 at $DIR/issue_38669.rs:+5:10: +5:10\n+        StorageDead(_4);                 // scope 1 at $DIR/issue_38669.rs:+5:9: +5:10\n+        StorageDead(_3);                 // scope 1 at $DIR/issue_38669.rs:+5:9: +5:10\n+        _1 = const true;                 // scope 1 at $DIR/issue_38669.rs:+6:9: +6:28\n+        _2 = const ();                   // scope 1 at $DIR/issue_38669.rs:+2:10: +7:6\n+        goto -> bb1;                     // scope 1 at $DIR/issue_38669.rs:+2:5: +7:6\n     }\n \n     bb5 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-38669.rs:+0:1: +8:2\n+        resume;                          // scope 0 at $DIR/issue_38669.rs:+0:1: +8:2\n     }\n }"}, {"sha": "db3f89472c982378b4d1ab7859c3c5c40484b9d4", "filename": "src/test/mir-opt/issue_38669.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_38669.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_38669.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_38669.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/issue-38669.rs"}, {"sha": "c573ad5a8e4a406e385813b39ec2b70042761e60", "filename": "src/test/mir-opt/issue_41110.main.ElaborateDrops.after.mir", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,70 +1,70 @@\n // MIR for `main` after ElaborateDrops\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/issue-41110.rs:+0:11: +0:11\n-    let _1: ();                          // in scope 0 at $DIR/issue-41110.rs:+1:9: +1:10\n-    let mut _2: S;                       // in scope 0 at $DIR/issue-41110.rs:+1:13: +1:14\n-    let mut _3: S;                       // in scope 0 at $DIR/issue-41110.rs:+1:21: +1:27\n-    let mut _4: S;                       // in scope 0 at $DIR/issue-41110.rs:+1:21: +1:22\n-    let mut _5: bool;                    // in scope 0 at $DIR/issue-41110.rs:+1:27: +1:28\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue_41110.rs:+0:11: +0:11\n+    let _1: ();                          // in scope 0 at $DIR/issue_41110.rs:+1:9: +1:10\n+    let mut _2: S;                       // in scope 0 at $DIR/issue_41110.rs:+1:13: +1:14\n+    let mut _3: S;                       // in scope 0 at $DIR/issue_41110.rs:+1:21: +1:27\n+    let mut _4: S;                       // in scope 0 at $DIR/issue_41110.rs:+1:21: +1:22\n+    let mut _5: bool;                    // in scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n     scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/issue-41110.rs:+1:9: +1:10\n+        debug x => _1;                   // in scope 1 at $DIR/issue_41110.rs:+1:9: +1:10\n     }\n \n     bb0: {\n-        _5 = const false;                // scope 0 at $DIR/issue-41110.rs:+1:9: +1:10\n-        StorageLive(_1);                 // scope 0 at $DIR/issue-41110.rs:+1:9: +1:10\n-        StorageLive(_2);                 // scope 0 at $DIR/issue-41110.rs:+1:13: +1:14\n-        _5 = const true;                 // scope 0 at $DIR/issue-41110.rs:+1:13: +1:14\n-        _2 = S;                          // scope 0 at $DIR/issue-41110.rs:+1:13: +1:14\n-        StorageLive(_3);                 // scope 0 at $DIR/issue-41110.rs:+1:21: +1:27\n-        StorageLive(_4);                 // scope 0 at $DIR/issue-41110.rs:+1:21: +1:22\n-        _4 = S;                          // scope 0 at $DIR/issue-41110.rs:+1:21: +1:22\n-        _3 = S::id(move _4) -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/issue-41110.rs:+1:21: +1:27\n+        _5 = const false;                // scope 0 at $DIR/issue_41110.rs:+1:9: +1:10\n+        StorageLive(_1);                 // scope 0 at $DIR/issue_41110.rs:+1:9: +1:10\n+        StorageLive(_2);                 // scope 0 at $DIR/issue_41110.rs:+1:13: +1:14\n+        _5 = const true;                 // scope 0 at $DIR/issue_41110.rs:+1:13: +1:14\n+        _2 = S;                          // scope 0 at $DIR/issue_41110.rs:+1:13: +1:14\n+        StorageLive(_3);                 // scope 0 at $DIR/issue_41110.rs:+1:21: +1:27\n+        StorageLive(_4);                 // scope 0 at $DIR/issue_41110.rs:+1:21: +1:22\n+        _4 = S;                          // scope 0 at $DIR/issue_41110.rs:+1:21: +1:22\n+        _3 = S::id(move _4) -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/issue_41110.rs:+1:21: +1:27\n                                          // mir::Constant\n-                                         // + span: $DIR/issue-41110.rs:8:23: 8:25\n+                                         // + span: $DIR/issue_41110.rs:8:23: 8:25\n                                          // + literal: Const { ty: fn(S) -> S {S::id}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageDead(_4);                 // scope 0 at $DIR/issue-41110.rs:+1:26: +1:27\n-        _5 = const false;                // scope 0 at $DIR/issue-41110.rs:+1:13: +1:28\n-        _1 = S::other(move _2, move _3) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/issue-41110.rs:+1:13: +1:28\n+        StorageDead(_4);                 // scope 0 at $DIR/issue_41110.rs:+1:26: +1:27\n+        _5 = const false;                // scope 0 at $DIR/issue_41110.rs:+1:13: +1:28\n+        _1 = S::other(move _2, move _3) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/issue_41110.rs:+1:13: +1:28\n                                          // mir::Constant\n-                                         // + span: $DIR/issue-41110.rs:8:15: 8:20\n+                                         // + span: $DIR/issue_41110.rs:8:15: 8:20\n                                          // + literal: Const { ty: fn(S, S) {S::other}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-41110.rs:+1:27: +1:28\n-        _5 = const false;                // scope 0 at $DIR/issue-41110.rs:+1:27: +1:28\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-41110.rs:+1:27: +1:28\n-        _0 = const ();                   // scope 0 at $DIR/issue-41110.rs:+0:11: +2:2\n-        StorageDead(_1);                 // scope 0 at $DIR/issue-41110.rs:+2:1: +2:2\n-        return;                          // scope 0 at $DIR/issue-41110.rs:+2:2: +2:2\n+        StorageDead(_3);                 // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n+        _5 = const false;                // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n+        StorageDead(_2);                 // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n+        _0 = const ();                   // scope 0 at $DIR/issue_41110.rs:+0:11: +2:2\n+        StorageDead(_1);                 // scope 0 at $DIR/issue_41110.rs:+2:1: +2:2\n+        return;                          // scope 0 at $DIR/issue_41110.rs:+2:2: +2:2\n     }\n \n     bb3 (cleanup): {\n-        goto -> bb5;                     // scope 0 at $DIR/issue-41110.rs:+1:27: +1:28\n+        goto -> bb5;                     // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n     }\n \n     bb4 (cleanup): {\n-        goto -> bb5;                     // scope 0 at $DIR/issue-41110.rs:+1:26: +1:27\n+        goto -> bb5;                     // scope 0 at $DIR/issue_41110.rs:+1:26: +1:27\n     }\n \n     bb5 (cleanup): {\n-        goto -> bb8;                     // scope 0 at $DIR/issue-41110.rs:+1:27: +1:28\n+        goto -> bb8;                     // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n     }\n \n     bb6 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41110.rs:+0:1: +2:2\n+        resume;                          // scope 0 at $DIR/issue_41110.rs:+0:1: +2:2\n     }\n \n     bb7 (cleanup): {\n-        drop(_2) -> bb6;                 // scope 0 at $DIR/issue-41110.rs:+1:27: +1:28\n+        drop(_2) -> bb6;                 // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n     }\n \n     bb8 (cleanup): {\n-        switchInt(_5) -> [false: bb6, otherwise: bb7]; // scope 0 at $DIR/issue-41110.rs:+1:27: +1:28\n+        switchInt(_5) -> [false: bb6, otherwise: bb7]; // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n     }\n }"}, {"sha": "638dc601ec869d90faac56c75a191cf0b7942104", "filename": "src/test/mir-opt/issue_41110.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_41110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_41110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41110.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/issue-41110.rs"}, {"sha": "470b032328184926af5acdefc16d5ebed1932bca", "filename": "src/test/mir-opt/issue_41110.test.ElaborateDrops.after.mir", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,101 +1,101 @@\n // MIR for `test` after ElaborateDrops\n \n fn test() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/issue-41110.rs:+0:15: +0:15\n-    let _1: S;                           // in scope 0 at $DIR/issue-41110.rs:+1:9: +1:10\n-    let _3: ();                          // in scope 0 at $DIR/issue-41110.rs:+3:5: +3:12\n-    let mut _4: S;                       // in scope 0 at $DIR/issue-41110.rs:+3:10: +3:11\n-    let mut _5: S;                       // in scope 0 at $DIR/issue-41110.rs:+4:9: +4:10\n-    let mut _6: bool;                    // in scope 0 at $DIR/issue-41110.rs:+5:1: +5:2\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue_41110.rs:+0:15: +0:15\n+    let _1: S;                           // in scope 0 at $DIR/issue_41110.rs:+1:9: +1:10\n+    let _3: ();                          // in scope 0 at $DIR/issue_41110.rs:+3:5: +3:12\n+    let mut _4: S;                       // in scope 0 at $DIR/issue_41110.rs:+3:10: +3:11\n+    let mut _5: S;                       // in scope 0 at $DIR/issue_41110.rs:+4:9: +4:10\n+    let mut _6: bool;                    // in scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n     scope 1 {\n-        debug u => _1;                   // in scope 1 at $DIR/issue-41110.rs:+1:9: +1:10\n-        let mut _2: S;                   // in scope 1 at $DIR/issue-41110.rs:+2:9: +2:14\n+        debug u => _1;                   // in scope 1 at $DIR/issue_41110.rs:+1:9: +1:10\n+        let mut _2: S;                   // in scope 1 at $DIR/issue_41110.rs:+2:9: +2:14\n         scope 2 {\n-            debug v => _2;               // in scope 2 at $DIR/issue-41110.rs:+2:9: +2:14\n+            debug v => _2;               // in scope 2 at $DIR/issue_41110.rs:+2:9: +2:14\n         }\n     }\n \n     bb0: {\n-        _6 = const false;                // scope 0 at $DIR/issue-41110.rs:+1:9: +1:10\n-        StorageLive(_1);                 // scope 0 at $DIR/issue-41110.rs:+1:9: +1:10\n-        _6 = const true;                 // scope 0 at $DIR/issue-41110.rs:+1:13: +1:14\n-        _1 = S;                          // scope 0 at $DIR/issue-41110.rs:+1:13: +1:14\n-        StorageLive(_2);                 // scope 1 at $DIR/issue-41110.rs:+2:9: +2:14\n-        _2 = S;                          // scope 1 at $DIR/issue-41110.rs:+2:17: +2:18\n-        StorageLive(_3);                 // scope 2 at $DIR/issue-41110.rs:+3:5: +3:12\n-        StorageLive(_4);                 // scope 2 at $DIR/issue-41110.rs:+3:10: +3:11\n-        _4 = move _2;                    // scope 2 at $DIR/issue-41110.rs:+3:10: +3:11\n-        _3 = std::mem::drop::<S>(move _4) -> [return: bb1, unwind: bb7]; // scope 2 at $DIR/issue-41110.rs:+3:5: +3:12\n+        _6 = const false;                // scope 0 at $DIR/issue_41110.rs:+1:9: +1:10\n+        StorageLive(_1);                 // scope 0 at $DIR/issue_41110.rs:+1:9: +1:10\n+        _6 = const true;                 // scope 0 at $DIR/issue_41110.rs:+1:13: +1:14\n+        _1 = S;                          // scope 0 at $DIR/issue_41110.rs:+1:13: +1:14\n+        StorageLive(_2);                 // scope 1 at $DIR/issue_41110.rs:+2:9: +2:14\n+        _2 = S;                          // scope 1 at $DIR/issue_41110.rs:+2:17: +2:18\n+        StorageLive(_3);                 // scope 2 at $DIR/issue_41110.rs:+3:5: +3:12\n+        StorageLive(_4);                 // scope 2 at $DIR/issue_41110.rs:+3:10: +3:11\n+        _4 = move _2;                    // scope 2 at $DIR/issue_41110.rs:+3:10: +3:11\n+        _3 = std::mem::drop::<S>(move _4) -> [return: bb1, unwind: bb7]; // scope 2 at $DIR/issue_41110.rs:+3:5: +3:12\n                                          // mir::Constant\n-                                         // + span: $DIR/issue-41110.rs:17:5: 17:9\n+                                         // + span: $DIR/issue_41110.rs:17:5: 17:9\n                                          // + literal: Const { ty: fn(S) {std::mem::drop::<S>}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageDead(_4);                 // scope 2 at $DIR/issue-41110.rs:+3:11: +3:12\n-        StorageDead(_3);                 // scope 2 at $DIR/issue-41110.rs:+3:12: +3:13\n-        StorageLive(_5);                 // scope 2 at $DIR/issue-41110.rs:+4:9: +4:10\n-        _6 = const false;                // scope 2 at $DIR/issue-41110.rs:+4:9: +4:10\n-        _5 = move _1;                    // scope 2 at $DIR/issue-41110.rs:+4:9: +4:10\n-        goto -> bb12;                    // scope 2 at $DIR/issue-41110.rs:+4:5: +4:6\n+        StorageDead(_4);                 // scope 2 at $DIR/issue_41110.rs:+3:11: +3:12\n+        StorageDead(_3);                 // scope 2 at $DIR/issue_41110.rs:+3:12: +3:13\n+        StorageLive(_5);                 // scope 2 at $DIR/issue_41110.rs:+4:9: +4:10\n+        _6 = const false;                // scope 2 at $DIR/issue_41110.rs:+4:9: +4:10\n+        _5 = move _1;                    // scope 2 at $DIR/issue_41110.rs:+4:9: +4:10\n+        goto -> bb12;                    // scope 2 at $DIR/issue_41110.rs:+4:5: +4:6\n     }\n \n     bb2: {\n-        goto -> bb3;                     // scope 2 at $DIR/issue-41110.rs:+4:9: +4:10\n+        goto -> bb3;                     // scope 2 at $DIR/issue_41110.rs:+4:9: +4:10\n     }\n \n     bb3: {\n-        StorageDead(_5);                 // scope 2 at $DIR/issue-41110.rs:+4:9: +4:10\n-        _0 = const ();                   // scope 0 at $DIR/issue-41110.rs:+0:15: +5:2\n-        drop(_2) -> [return: bb4, unwind: bb9]; // scope 1 at $DIR/issue-41110.rs:+5:1: +5:2\n+        StorageDead(_5);                 // scope 2 at $DIR/issue_41110.rs:+4:9: +4:10\n+        _0 = const ();                   // scope 0 at $DIR/issue_41110.rs:+0:15: +5:2\n+        drop(_2) -> [return: bb4, unwind: bb9]; // scope 1 at $DIR/issue_41110.rs:+5:1: +5:2\n     }\n \n     bb4: {\n-        StorageDead(_2);                 // scope 1 at $DIR/issue-41110.rs:+5:1: +5:2\n-        goto -> bb5;                     // scope 0 at $DIR/issue-41110.rs:+5:1: +5:2\n+        StorageDead(_2);                 // scope 1 at $DIR/issue_41110.rs:+5:1: +5:2\n+        goto -> bb5;                     // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n     }\n \n     bb5: {\n-        _6 = const false;                // scope 0 at $DIR/issue-41110.rs:+5:1: +5:2\n-        StorageDead(_1);                 // scope 0 at $DIR/issue-41110.rs:+5:1: +5:2\n-        return;                          // scope 0 at $DIR/issue-41110.rs:+5:2: +5:2\n+        _6 = const false;                // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n+        StorageDead(_1);                 // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n+        return;                          // scope 0 at $DIR/issue_41110.rs:+5:2: +5:2\n     }\n \n     bb6 (cleanup): {\n-        goto -> bb8;                     // scope 2 at $DIR/issue-41110.rs:+4:9: +4:10\n+        goto -> bb8;                     // scope 2 at $DIR/issue_41110.rs:+4:9: +4:10\n     }\n \n     bb7 (cleanup): {\n-        goto -> bb8;                     // scope 2 at $DIR/issue-41110.rs:+3:11: +3:12\n+        goto -> bb8;                     // scope 2 at $DIR/issue_41110.rs:+3:11: +3:12\n     }\n \n     bb8 (cleanup): {\n-        goto -> bb9;                     // scope 1 at $DIR/issue-41110.rs:+5:1: +5:2\n+        goto -> bb9;                     // scope 1 at $DIR/issue_41110.rs:+5:1: +5:2\n     }\n \n     bb9 (cleanup): {\n-        goto -> bb14;                    // scope 0 at $DIR/issue-41110.rs:+5:1: +5:2\n+        goto -> bb14;                    // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n     }\n \n     bb10 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41110.rs:+0:1: +5:2\n+        resume;                          // scope 0 at $DIR/issue_41110.rs:+0:1: +5:2\n     }\n \n     bb11 (cleanup): {\n-        _2 = move _5;                    // scope 2 at $DIR/issue-41110.rs:+4:5: +4:6\n-        goto -> bb6;                     // scope 2 at $DIR/issue-41110.rs:+4:5: +4:6\n+        _2 = move _5;                    // scope 2 at $DIR/issue_41110.rs:+4:5: +4:6\n+        goto -> bb6;                     // scope 2 at $DIR/issue_41110.rs:+4:5: +4:6\n     }\n \n     bb12: {\n-        _2 = move _5;                    // scope 2 at $DIR/issue-41110.rs:+4:5: +4:6\n-        goto -> bb2;                     // scope 2 at $DIR/issue-41110.rs:+4:5: +4:6\n+        _2 = move _5;                    // scope 2 at $DIR/issue_41110.rs:+4:5: +4:6\n+        goto -> bb2;                     // scope 2 at $DIR/issue_41110.rs:+4:5: +4:6\n     }\n \n     bb13 (cleanup): {\n-        drop(_1) -> bb10;                // scope 0 at $DIR/issue-41110.rs:+5:1: +5:2\n+        drop(_1) -> bb10;                // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n     }\n \n     bb14 (cleanup): {\n-        switchInt(_6) -> [false: bb10, otherwise: bb13]; // scope 0 at $DIR/issue-41110.rs:+5:1: +5:2\n+        switchInt(_6) -> [false: bb10, otherwise: bb13]; // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n     }\n }"}, {"sha": "cbd8633a345c7fdf16fa3bf449272ccf545db7ee", "filename": "src/test/mir-opt/issue_41697.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_41697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_41697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41697.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/issue-41697.rs"}, {"sha": "8af087d84f116798727807801e4d9a52aa4e2028", "filename": "src/test/mir-opt/issue_41697.{impl#0}-{constant#0}.SimplifyCfg-promote-consts.after.mir", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,20 +1,20 @@\n-// MIR for `<impl at $DIR/issue-41697.rs:18:1: 18:23>::{constant#0}` after SimplifyCfg-promote-consts\n+// MIR for `<impl at $DIR/issue_41697.rs:18:1: 18:23>::{constant#0}` after SimplifyCfg-promote-consts\n \n-<impl at $DIR/issue-41697.rs:18:1: 18:23>::{constant#0}: usize = {\n-    let mut _0: usize;                   // return place in scope 0 at $DIR/issue-41697.rs:+0:19: +0:22\n-    let mut _1: (usize, bool);           // in scope 0 at $DIR/issue-41697.rs:+0:19: +0:22\n+<impl at $DIR/issue_41697.rs:18:1: 18:23>::{constant#0}: usize = {\n+    let mut _0: usize;                   // return place in scope 0 at $DIR/issue_41697.rs:+0:19: +0:22\n+    let mut _1: (usize, bool);           // in scope 0 at $DIR/issue_41697.rs:+0:19: +0:22\n \n     bb0: {\n-        _1 = CheckedAdd(const 1_usize, const 1_usize); // scope 0 at $DIR/issue-41697.rs:+0:19: +0:22\n-        assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_usize, const 1_usize) -> [success: bb1, unwind: bb2]; // scope 0 at $DIR/issue-41697.rs:+0:19: +0:22\n+        _1 = CheckedAdd(const 1_usize, const 1_usize); // scope 0 at $DIR/issue_41697.rs:+0:19: +0:22\n+        assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_usize, const 1_usize) -> [success: bb1, unwind: bb2]; // scope 0 at $DIR/issue_41697.rs:+0:19: +0:22\n     }\n \n     bb1: {\n-        _0 = move (_1.0: usize);         // scope 0 at $DIR/issue-41697.rs:+0:19: +0:22\n-        return;                          // scope 0 at $DIR/issue-41697.rs:+0:19: +0:22\n+        _0 = move (_1.0: usize);         // scope 0 at $DIR/issue_41697.rs:+0:19: +0:22\n+        return;                          // scope 0 at $DIR/issue_41697.rs:+0:19: +0:22\n     }\n \n     bb2 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41697.rs:+0:19: +0:22\n+        resume;                          // scope 0 at $DIR/issue_41697.rs:+0:19: +0:22\n     }\n }"}, {"sha": "73372c97bea7287fc19ed0388a8856ab1428ca81", "filename": "src/test/mir-opt/issue_41888.main.ElaborateDrops.after.mir", "status": "modified", "additions": 73, "deletions": 73, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,152 +1,152 @@\n // MIR for `main` after ElaborateDrops\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/issue-41888.rs:+0:11: +0:11\n-    let _1: E;                           // in scope 0 at $DIR/issue-41888.rs:+1:9: +1:10\n-    let mut _2: bool;                    // in scope 0 at $DIR/issue-41888.rs:+2:8: +2:14\n-    let mut _3: E;                       // in scope 0 at $DIR/issue-41888.rs:+3:13: +3:20\n-    let mut _4: K;                       // in scope 0 at $DIR/issue-41888.rs:+3:18: +3:19\n-    let mut _5: isize;                   // in scope 0 at $DIR/issue-41888.rs:+4:16: +4:24\n-    let mut _7: bool;                    // in scope 0 at $DIR/issue-41888.rs:+9:1: +9:2\n-    let mut _8: bool;                    // in scope 0 at $DIR/issue-41888.rs:+9:1: +9:2\n-    let mut _9: bool;                    // in scope 0 at $DIR/issue-41888.rs:+9:1: +9:2\n-    let mut _10: isize;                  // in scope 0 at $DIR/issue-41888.rs:+9:1: +9:2\n-    let mut _11: isize;                  // in scope 0 at $DIR/issue-41888.rs:+9:1: +9:2\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue_41888.rs:+0:11: +0:11\n+    let _1: E;                           // in scope 0 at $DIR/issue_41888.rs:+1:9: +1:10\n+    let mut _2: bool;                    // in scope 0 at $DIR/issue_41888.rs:+2:8: +2:14\n+    let mut _3: E;                       // in scope 0 at $DIR/issue_41888.rs:+3:13: +3:20\n+    let mut _4: K;                       // in scope 0 at $DIR/issue_41888.rs:+3:18: +3:19\n+    let mut _5: isize;                   // in scope 0 at $DIR/issue_41888.rs:+4:16: +4:24\n+    let mut _7: bool;                    // in scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n+    let mut _8: bool;                    // in scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n+    let mut _9: bool;                    // in scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n+    let mut _10: isize;                  // in scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n+    let mut _11: isize;                  // in scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n     scope 1 {\n-        debug e => _1;                   // in scope 1 at $DIR/issue-41888.rs:+1:9: +1:10\n+        debug e => _1;                   // in scope 1 at $DIR/issue_41888.rs:+1:9: +1:10\n         scope 2 {\n-            debug _k => _6;              // in scope 2 at $DIR/issue-41888.rs:+4:21: +4:23\n-            let _6: K;                   // in scope 2 at $DIR/issue-41888.rs:+4:21: +4:23\n+            debug _k => _6;              // in scope 2 at $DIR/issue_41888.rs:+4:21: +4:23\n+            let _6: K;                   // in scope 2 at $DIR/issue_41888.rs:+4:21: +4:23\n         }\n     }\n \n     bb0: {\n-        _9 = const false;                // scope 0 at $DIR/issue-41888.rs:+1:9: +1:10\n-        _7 = const false;                // scope 0 at $DIR/issue-41888.rs:+1:9: +1:10\n-        _8 = const false;                // scope 0 at $DIR/issue-41888.rs:+1:9: +1:10\n-        StorageLive(_1);                 // scope 0 at $DIR/issue-41888.rs:+1:9: +1:10\n-        StorageLive(_2);                 // scope 1 at $DIR/issue-41888.rs:+2:8: +2:14\n-        _2 = cond() -> [return: bb1, unwind: bb11]; // scope 1 at $DIR/issue-41888.rs:+2:8: +2:14\n+        _9 = const false;                // scope 0 at $DIR/issue_41888.rs:+1:9: +1:10\n+        _7 = const false;                // scope 0 at $DIR/issue_41888.rs:+1:9: +1:10\n+        _8 = const false;                // scope 0 at $DIR/issue_41888.rs:+1:9: +1:10\n+        StorageLive(_1);                 // scope 0 at $DIR/issue_41888.rs:+1:9: +1:10\n+        StorageLive(_2);                 // scope 1 at $DIR/issue_41888.rs:+2:8: +2:14\n+        _2 = cond() -> [return: bb1, unwind: bb11]; // scope 1 at $DIR/issue_41888.rs:+2:8: +2:14\n                                          // mir::Constant\n-                                         // + span: $DIR/issue-41888.rs:8:8: 8:12\n+                                         // + span: $DIR/issue_41888.rs:8:8: 8:12\n                                          // + literal: Const { ty: fn() -> bool {cond}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        switchInt(move _2) -> [false: bb7, otherwise: bb2]; // scope 1 at $DIR/issue-41888.rs:+2:8: +2:14\n+        switchInt(move _2) -> [false: bb7, otherwise: bb2]; // scope 1 at $DIR/issue_41888.rs:+2:8: +2:14\n     }\n \n     bb2: {\n-        StorageLive(_3);                 // scope 1 at $DIR/issue-41888.rs:+3:13: +3:20\n-        StorageLive(_4);                 // scope 1 at $DIR/issue-41888.rs:+3:18: +3:19\n-        _4 = K;                          // scope 1 at $DIR/issue-41888.rs:+3:18: +3:19\n-        _3 = E::F(move _4);              // scope 1 at $DIR/issue-41888.rs:+3:13: +3:20\n-        StorageDead(_4);                 // scope 1 at $DIR/issue-41888.rs:+3:19: +3:20\n-        goto -> bb14;                    // scope 1 at $DIR/issue-41888.rs:+3:9: +3:10\n+        StorageLive(_3);                 // scope 1 at $DIR/issue_41888.rs:+3:13: +3:20\n+        StorageLive(_4);                 // scope 1 at $DIR/issue_41888.rs:+3:18: +3:19\n+        _4 = K;                          // scope 1 at $DIR/issue_41888.rs:+3:18: +3:19\n+        _3 = E::F(move _4);              // scope 1 at $DIR/issue_41888.rs:+3:13: +3:20\n+        StorageDead(_4);                 // scope 1 at $DIR/issue_41888.rs:+3:19: +3:20\n+        goto -> bb14;                    // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n     }\n \n     bb3: {\n-        goto -> bb4;                     // scope 1 at $DIR/issue-41888.rs:+3:19: +3:20\n+        goto -> bb4;                     // scope 1 at $DIR/issue_41888.rs:+3:19: +3:20\n     }\n \n     bb4: {\n-        StorageDead(_3);                 // scope 1 at $DIR/issue-41888.rs:+3:19: +3:20\n-        _5 = discriminant(_1);           // scope 2 at $DIR/issue-41888.rs:+4:16: +4:24\n-        switchInt(move _5) -> [0_isize: bb5, otherwise: bb6]; // scope 2 at $DIR/issue-41888.rs:+4:16: +4:24\n+        StorageDead(_3);                 // scope 1 at $DIR/issue_41888.rs:+3:19: +3:20\n+        _5 = discriminant(_1);           // scope 2 at $DIR/issue_41888.rs:+4:16: +4:24\n+        switchInt(move _5) -> [0_isize: bb5, otherwise: bb6]; // scope 2 at $DIR/issue_41888.rs:+4:16: +4:24\n     }\n \n     bb5: {\n-        StorageLive(_6);                 // scope 2 at $DIR/issue-41888.rs:+4:21: +4:23\n-        _9 = const false;                // scope 2 at $DIR/issue-41888.rs:+4:21: +4:23\n-        _6 = move ((_1 as F).0: K);      // scope 2 at $DIR/issue-41888.rs:+4:21: +4:23\n-        _0 = const ();                   // scope 2 at $DIR/issue-41888.rs:+4:29: +7:10\n-        StorageDead(_6);                 // scope 1 at $DIR/issue-41888.rs:+7:9: +7:10\n-        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:+4:9: +7:10\n+        StorageLive(_6);                 // scope 2 at $DIR/issue_41888.rs:+4:21: +4:23\n+        _9 = const false;                // scope 2 at $DIR/issue_41888.rs:+4:21: +4:23\n+        _6 = move ((_1 as F).0: K);      // scope 2 at $DIR/issue_41888.rs:+4:21: +4:23\n+        _0 = const ();                   // scope 2 at $DIR/issue_41888.rs:+4:29: +7:10\n+        StorageDead(_6);                 // scope 1 at $DIR/issue_41888.rs:+7:9: +7:10\n+        goto -> bb8;                     // scope 1 at $DIR/issue_41888.rs:+4:9: +7:10\n     }\n \n     bb6: {\n-        _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:+7:10: +7:10\n-        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:+4:9: +7:10\n+        _0 = const ();                   // scope 1 at $DIR/issue_41888.rs:+7:10: +7:10\n+        goto -> bb8;                     // scope 1 at $DIR/issue_41888.rs:+4:9: +7:10\n     }\n \n     bb7: {\n-        _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:+8:6: +8:6\n-        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:+2:5: +8:6\n+        _0 = const ();                   // scope 1 at $DIR/issue_41888.rs:+8:6: +8:6\n+        goto -> bb8;                     // scope 1 at $DIR/issue_41888.rs:+2:5: +8:6\n     }\n \n     bb8: {\n-        StorageDead(_2);                 // scope 1 at $DIR/issue-41888.rs:+8:5: +8:6\n-        goto -> bb20;                    // scope 0 at $DIR/issue-41888.rs:+9:1: +9:2\n+        StorageDead(_2);                 // scope 1 at $DIR/issue_41888.rs:+8:5: +8:6\n+        goto -> bb20;                    // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n     }\n \n     bb9: {\n-        _7 = const false;                // scope 0 at $DIR/issue-41888.rs:+9:1: +9:2\n-        _8 = const false;                // scope 0 at $DIR/issue-41888.rs:+9:1: +9:2\n-        _9 = const false;                // scope 0 at $DIR/issue-41888.rs:+9:1: +9:2\n-        StorageDead(_1);                 // scope 0 at $DIR/issue-41888.rs:+9:1: +9:2\n-        return;                          // scope 0 at $DIR/issue-41888.rs:+9:2: +9:2\n+        _7 = const false;                // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n+        _8 = const false;                // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n+        _9 = const false;                // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n+        StorageDead(_1);                 // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n+        return;                          // scope 0 at $DIR/issue_41888.rs:+9:2: +9:2\n     }\n \n     bb10 (cleanup): {\n-        goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:+3:19: +3:20\n+        goto -> bb11;                    // scope 1 at $DIR/issue_41888.rs:+3:19: +3:20\n     }\n \n     bb11 (cleanup): {\n-        goto -> bb12;                    // scope 0 at $DIR/issue-41888.rs:+9:1: +9:2\n+        goto -> bb12;                    // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n     }\n \n     bb12 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41888.rs:+0:1: +9:2\n+        resume;                          // scope 0 at $DIR/issue_41888.rs:+0:1: +9:2\n     }\n \n     bb13 (cleanup): {\n-        _7 = const true;                 // scope 1 at $DIR/issue-41888.rs:+3:9: +3:10\n-        _8 = const true;                 // scope 1 at $DIR/issue-41888.rs:+3:9: +3:10\n-        _9 = const true;                 // scope 1 at $DIR/issue-41888.rs:+3:9: +3:10\n-        _1 = move _3;                    // scope 1 at $DIR/issue-41888.rs:+3:9: +3:10\n-        goto -> bb10;                    // scope 1 at $DIR/issue-41888.rs:+3:9: +3:10\n+        _7 = const true;                 // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n+        _8 = const true;                 // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n+        _9 = const true;                 // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n+        _1 = move _3;                    // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n+        goto -> bb10;                    // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n     }\n \n     bb14: {\n-        _7 = const true;                 // scope 1 at $DIR/issue-41888.rs:+3:9: +3:10\n-        _8 = const true;                 // scope 1 at $DIR/issue-41888.rs:+3:9: +3:10\n-        _9 = const true;                 // scope 1 at $DIR/issue-41888.rs:+3:9: +3:10\n-        _1 = move _3;                    // scope 1 at $DIR/issue-41888.rs:+3:9: +3:10\n-        goto -> bb3;                     // scope 1 at $DIR/issue-41888.rs:+3:9: +3:10\n+        _7 = const true;                 // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n+        _8 = const true;                 // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n+        _9 = const true;                 // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n+        _1 = move _3;                    // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n+        goto -> bb3;                     // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n     }\n \n     bb15: {\n-        _7 = const false;                // scope 0 at $DIR/issue-41888.rs:+9:1: +9:2\n-        goto -> bb9;                     // scope 0 at $DIR/issue-41888.rs:+9:1: +9:2\n+        _7 = const false;                // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n+        goto -> bb9;                     // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n     }\n \n     bb16 (cleanup): {\n-        goto -> bb12;                    // scope 0 at $DIR/issue-41888.rs:+9:1: +9:2\n+        goto -> bb12;                    // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n     }\n \n     bb17: {\n-        drop(_1) -> [return: bb15, unwind: bb12]; // scope 0 at $DIR/issue-41888.rs:+9:1: +9:2\n+        drop(_1) -> [return: bb15, unwind: bb12]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n     }\n \n     bb18 (cleanup): {\n-        drop(_1) -> bb12;                // scope 0 at $DIR/issue-41888.rs:+9:1: +9:2\n+        drop(_1) -> bb12;                // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n     }\n \n     bb19: {\n-        _10 = discriminant(_1);          // scope 0 at $DIR/issue-41888.rs:+9:1: +9:2\n-        switchInt(move _10) -> [0_isize: bb15, otherwise: bb17]; // scope 0 at $DIR/issue-41888.rs:+9:1: +9:2\n+        _10 = discriminant(_1);          // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n+        switchInt(move _10) -> [0_isize: bb15, otherwise: bb17]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n     }\n \n     bb20: {\n-        switchInt(_7) -> [false: bb15, otherwise: bb19]; // scope 0 at $DIR/issue-41888.rs:+9:1: +9:2\n+        switchInt(_7) -> [false: bb15, otherwise: bb19]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n     }\n \n     bb21 (cleanup): {\n-        _11 = discriminant(_1);          // scope 0 at $DIR/issue-41888.rs:+9:1: +9:2\n-        switchInt(move _11) -> [0_isize: bb16, otherwise: bb18]; // scope 0 at $DIR/issue-41888.rs:+9:1: +9:2\n+        _11 = discriminant(_1);          // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n+        switchInt(move _11) -> [0_isize: bb16, otherwise: bb18]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n     }\n \n     bb22 (cleanup): {\n-        switchInt(_7) -> [false: bb12, otherwise: bb21]; // scope 0 at $DIR/issue-41888.rs:+9:1: +9:2\n+        switchInt(_7) -> [false: bb12, otherwise: bb21]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n     }\n }"}, {"sha": "c1046c14dbf858c324429ab11f3dc5c6a437f50e", "filename": "src/test/mir-opt/issue_41888.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_41888.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_41888.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41888.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/issue-41888.rs"}, {"sha": "37e3390d5fc066240978d20d6fa779e9d5c09cd0", "filename": "src/test/mir-opt/issue_62289.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_62289.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_62289.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_62289.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/issue-62289.rs"}, {"sha": "6969a66ac19253a321282731d812fc2bb11c11f1", "filename": "src/test/mir-opt/issue_62289.test.ElaborateDrops.before.mir", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,122 +1,122 @@\n // MIR for `test` before ElaborateDrops\n \n fn test() -> Option<Box<u32>> {\n-    let mut _0: std::option::Option<std::boxed::Box<u32>>; // return place in scope 0 at $DIR/issue-62289.rs:+0:14: +0:30\n-    let mut _1: std::boxed::Box<u32>;    // in scope 0 at $DIR/issue-62289.rs:+1:10: +1:21\n-    let mut _2: usize;                   // in scope 0 at $DIR/issue-62289.rs:+1:10: +1:21\n-    let mut _3: usize;                   // in scope 0 at $DIR/issue-62289.rs:+1:10: +1:21\n-    let mut _4: *mut u8;                 // in scope 0 at $DIR/issue-62289.rs:+1:10: +1:21\n-    let mut _5: std::boxed::Box<u32>;    // in scope 0 at $DIR/issue-62289.rs:+1:10: +1:21\n-    let mut _6: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, u32>; // in scope 0 at $DIR/issue-62289.rs:+1:15: +1:20\n-    let mut _7: std::option::Option<u32>; // in scope 0 at $DIR/issue-62289.rs:+1:15: +1:19\n-    let mut _8: isize;                   // in scope 0 at $DIR/issue-62289.rs:+1:19: +1:20\n-    let _9: std::option::Option<std::convert::Infallible>; // in scope 0 at $DIR/issue-62289.rs:+1:19: +1:20\n-    let mut _10: !;                      // in scope 0 at $DIR/issue-62289.rs:+1:19: +1:20\n-    let mut _11: std::option::Option<std::convert::Infallible>; // in scope 0 at $DIR/issue-62289.rs:+1:19: +1:20\n-    let _12: u32;                        // in scope 0 at $DIR/issue-62289.rs:+1:15: +1:20\n+    let mut _0: std::option::Option<std::boxed::Box<u32>>; // return place in scope 0 at $DIR/issue_62289.rs:+0:14: +0:30\n+    let mut _1: std::boxed::Box<u32>;    // in scope 0 at $DIR/issue_62289.rs:+1:10: +1:21\n+    let mut _2: usize;                   // in scope 0 at $DIR/issue_62289.rs:+1:10: +1:21\n+    let mut _3: usize;                   // in scope 0 at $DIR/issue_62289.rs:+1:10: +1:21\n+    let mut _4: *mut u8;                 // in scope 0 at $DIR/issue_62289.rs:+1:10: +1:21\n+    let mut _5: std::boxed::Box<u32>;    // in scope 0 at $DIR/issue_62289.rs:+1:10: +1:21\n+    let mut _6: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, u32>; // in scope 0 at $DIR/issue_62289.rs:+1:15: +1:20\n+    let mut _7: std::option::Option<u32>; // in scope 0 at $DIR/issue_62289.rs:+1:15: +1:19\n+    let mut _8: isize;                   // in scope 0 at $DIR/issue_62289.rs:+1:19: +1:20\n+    let _9: std::option::Option<std::convert::Infallible>; // in scope 0 at $DIR/issue_62289.rs:+1:19: +1:20\n+    let mut _10: !;                      // in scope 0 at $DIR/issue_62289.rs:+1:19: +1:20\n+    let mut _11: std::option::Option<std::convert::Infallible>; // in scope 0 at $DIR/issue_62289.rs:+1:19: +1:20\n+    let _12: u32;                        // in scope 0 at $DIR/issue_62289.rs:+1:15: +1:20\n     scope 1 {\n     }\n     scope 2 {\n-        debug residual => _9;            // in scope 2 at $DIR/issue-62289.rs:+1:19: +1:20\n+        debug residual => _9;            // in scope 2 at $DIR/issue_62289.rs:+1:19: +1:20\n         scope 3 {\n         }\n     }\n     scope 4 {\n-        debug val => _12;                // in scope 4 at $DIR/issue-62289.rs:+1:15: +1:20\n+        debug val => _12;                // in scope 4 at $DIR/issue_62289.rs:+1:15: +1:20\n         scope 5 {\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/issue-62289.rs:+1:10: +1:21\n-        _2 = SizeOf(u32);                // scope 1 at $DIR/issue-62289.rs:+1:10: +1:21\n-        _3 = AlignOf(u32);               // scope 1 at $DIR/issue-62289.rs:+1:10: +1:21\n-        _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 1 at $DIR/issue-62289.rs:+1:10: +1:21\n+        StorageLive(_1);                 // scope 0 at $DIR/issue_62289.rs:+1:10: +1:21\n+        _2 = SizeOf(u32);                // scope 1 at $DIR/issue_62289.rs:+1:10: +1:21\n+        _3 = AlignOf(u32);               // scope 1 at $DIR/issue_62289.rs:+1:10: +1:21\n+        _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 1 at $DIR/issue_62289.rs:+1:10: +1:21\n                                          // mir::Constant\n-                                         // + span: $DIR/issue-62289.rs:9:10: 9:21\n+                                         // + span: $DIR/issue_62289.rs:9:10: 9:21\n                                          // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageLive(_5);                 // scope 0 at $DIR/issue-62289.rs:+1:10: +1:21\n-        _5 = ShallowInitBox(move _4, u32); // scope 0 at $DIR/issue-62289.rs:+1:10: +1:21\n-        StorageLive(_6);                 // scope 0 at $DIR/issue-62289.rs:+1:15: +1:20\n-        StorageLive(_7);                 // scope 0 at $DIR/issue-62289.rs:+1:15: +1:19\n-        _7 = Option::<u32>::None;        // scope 0 at $DIR/issue-62289.rs:+1:15: +1:19\n-        _6 = <Option<u32> as Try>::branch(move _7) -> [return: bb2, unwind: bb12]; // scope 0 at $DIR/issue-62289.rs:+1:15: +1:20\n+        StorageLive(_5);                 // scope 0 at $DIR/issue_62289.rs:+1:10: +1:21\n+        _5 = ShallowInitBox(move _4, u32); // scope 0 at $DIR/issue_62289.rs:+1:10: +1:21\n+        StorageLive(_6);                 // scope 0 at $DIR/issue_62289.rs:+1:15: +1:20\n+        StorageLive(_7);                 // scope 0 at $DIR/issue_62289.rs:+1:15: +1:19\n+        _7 = Option::<u32>::None;        // scope 0 at $DIR/issue_62289.rs:+1:15: +1:19\n+        _6 = <Option<u32> as Try>::branch(move _7) -> [return: bb2, unwind: bb12]; // scope 0 at $DIR/issue_62289.rs:+1:15: +1:20\n                                          // mir::Constant\n-                                         // + span: $DIR/issue-62289.rs:9:15: 9:20\n+                                         // + span: $DIR/issue_62289.rs:9:15: 9:20\n                                          // + literal: Const { ty: fn(Option<u32>) -> ControlFlow<<Option<u32> as Try>::Residual, <Option<u32> as Try>::Output> {<Option<u32> as Try>::branch}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        StorageDead(_7);                 // scope 0 at $DIR/issue-62289.rs:+1:19: +1:20\n-        _8 = discriminant(_6);           // scope 0 at $DIR/issue-62289.rs:+1:15: +1:20\n-        switchInt(move _8) -> [0_isize: bb3, 1_isize: bb5, otherwise: bb4]; // scope 0 at $DIR/issue-62289.rs:+1:15: +1:20\n+        StorageDead(_7);                 // scope 0 at $DIR/issue_62289.rs:+1:19: +1:20\n+        _8 = discriminant(_6);           // scope 0 at $DIR/issue_62289.rs:+1:15: +1:20\n+        switchInt(move _8) -> [0_isize: bb3, 1_isize: bb5, otherwise: bb4]; // scope 0 at $DIR/issue_62289.rs:+1:15: +1:20\n     }\n \n     bb3: {\n-        StorageLive(_12);                // scope 0 at $DIR/issue-62289.rs:+1:15: +1:20\n-        _12 = ((_6 as Continue).0: u32); // scope 0 at $DIR/issue-62289.rs:+1:15: +1:20\n-        (*_5) = _12;                     // scope 5 at $DIR/issue-62289.rs:+1:15: +1:20\n-        StorageDead(_12);                // scope 0 at $DIR/issue-62289.rs:+1:19: +1:20\n-        _1 = move _5;                    // scope 0 at $DIR/issue-62289.rs:+1:10: +1:21\n-        drop(_5) -> [return: bb7, unwind: bb11]; // scope 0 at $DIR/issue-62289.rs:+1:20: +1:21\n+        StorageLive(_12);                // scope 0 at $DIR/issue_62289.rs:+1:15: +1:20\n+        _12 = ((_6 as Continue).0: u32); // scope 0 at $DIR/issue_62289.rs:+1:15: +1:20\n+        (*_5) = _12;                     // scope 5 at $DIR/issue_62289.rs:+1:15: +1:20\n+        StorageDead(_12);                // scope 0 at $DIR/issue_62289.rs:+1:19: +1:20\n+        _1 = move _5;                    // scope 0 at $DIR/issue_62289.rs:+1:10: +1:21\n+        drop(_5) -> [return: bb7, unwind: bb11]; // scope 0 at $DIR/issue_62289.rs:+1:20: +1:21\n     }\n \n     bb4: {\n-        unreachable;                     // scope 0 at $DIR/issue-62289.rs:+1:15: +1:20\n+        unreachable;                     // scope 0 at $DIR/issue_62289.rs:+1:15: +1:20\n     }\n \n     bb5: {\n-        StorageLive(_9);                 // scope 0 at $DIR/issue-62289.rs:+1:19: +1:20\n-        _9 = ((_6 as Break).0: std::option::Option<std::convert::Infallible>); // scope 0 at $DIR/issue-62289.rs:+1:19: +1:20\n-        StorageLive(_11);                // scope 3 at $DIR/issue-62289.rs:+1:19: +1:20\n-        _11 = _9;                        // scope 3 at $DIR/issue-62289.rs:+1:19: +1:20\n-        _0 = <Option<Box<u32>> as FromResidual<Option<Infallible>>>::from_residual(move _11) -> [return: bb6, unwind: bb12]; // scope 3 at $DIR/issue-62289.rs:+1:15: +1:20\n+        StorageLive(_9);                 // scope 0 at $DIR/issue_62289.rs:+1:19: +1:20\n+        _9 = ((_6 as Break).0: std::option::Option<std::convert::Infallible>); // scope 0 at $DIR/issue_62289.rs:+1:19: +1:20\n+        StorageLive(_11);                // scope 3 at $DIR/issue_62289.rs:+1:19: +1:20\n+        _11 = _9;                        // scope 3 at $DIR/issue_62289.rs:+1:19: +1:20\n+        _0 = <Option<Box<u32>> as FromResidual<Option<Infallible>>>::from_residual(move _11) -> [return: bb6, unwind: bb12]; // scope 3 at $DIR/issue_62289.rs:+1:15: +1:20\n                                          // mir::Constant\n-                                         // + span: $DIR/issue-62289.rs:9:19: 9:20\n+                                         // + span: $DIR/issue_62289.rs:9:19: 9:20\n                                          // + literal: Const { ty: fn(Option<Infallible>) -> Option<Box<u32>> {<Option<Box<u32>> as FromResidual<Option<Infallible>>>::from_residual}, val: Value(<ZST>) }\n     }\n \n     bb6: {\n-        StorageDead(_11);                // scope 3 at $DIR/issue-62289.rs:+1:19: +1:20\n-        StorageDead(_9);                 // scope 0 at $DIR/issue-62289.rs:+1:19: +1:20\n-        drop(_5) -> bb9;                 // scope 0 at $DIR/issue-62289.rs:+1:20: +1:21\n+        StorageDead(_11);                // scope 3 at $DIR/issue_62289.rs:+1:19: +1:20\n+        StorageDead(_9);                 // scope 0 at $DIR/issue_62289.rs:+1:19: +1:20\n+        drop(_5) -> bb9;                 // scope 0 at $DIR/issue_62289.rs:+1:20: +1:21\n     }\n \n     bb7: {\n-        StorageDead(_5);                 // scope 0 at $DIR/issue-62289.rs:+1:20: +1:21\n-        _0 = Option::<Box<u32>>::Some(move _1); // scope 0 at $DIR/issue-62289.rs:+1:5: +1:22\n-        drop(_1) -> bb8;                 // scope 0 at $DIR/issue-62289.rs:+1:21: +1:22\n+        StorageDead(_5);                 // scope 0 at $DIR/issue_62289.rs:+1:20: +1:21\n+        _0 = Option::<Box<u32>>::Some(move _1); // scope 0 at $DIR/issue_62289.rs:+1:5: +1:22\n+        drop(_1) -> bb8;                 // scope 0 at $DIR/issue_62289.rs:+1:21: +1:22\n     }\n \n     bb8: {\n-        StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:+1:21: +1:22\n-        StorageDead(_6);                 // scope 0 at $DIR/issue-62289.rs:+2:1: +2:2\n-        goto -> bb10;                    // scope 0 at $DIR/issue-62289.rs:+2:2: +2:2\n+        StorageDead(_1);                 // scope 0 at $DIR/issue_62289.rs:+1:21: +1:22\n+        StorageDead(_6);                 // scope 0 at $DIR/issue_62289.rs:+2:1: +2:2\n+        goto -> bb10;                    // scope 0 at $DIR/issue_62289.rs:+2:2: +2:2\n     }\n \n     bb9: {\n-        StorageDead(_5);                 // scope 0 at $DIR/issue-62289.rs:+1:20: +1:21\n-        StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:+1:21: +1:22\n-        StorageDead(_6);                 // scope 0 at $DIR/issue-62289.rs:+2:1: +2:2\n-        goto -> bb10;                    // scope 0 at $DIR/issue-62289.rs:+2:2: +2:2\n+        StorageDead(_5);                 // scope 0 at $DIR/issue_62289.rs:+1:20: +1:21\n+        StorageDead(_1);                 // scope 0 at $DIR/issue_62289.rs:+1:21: +1:22\n+        StorageDead(_6);                 // scope 0 at $DIR/issue_62289.rs:+2:1: +2:2\n+        goto -> bb10;                    // scope 0 at $DIR/issue_62289.rs:+2:2: +2:2\n     }\n \n     bb10: {\n-        return;                          // scope 0 at $DIR/issue-62289.rs:+2:2: +2:2\n+        return;                          // scope 0 at $DIR/issue_62289.rs:+2:2: +2:2\n     }\n \n     bb11 (cleanup): {\n-        drop(_1) -> bb13;                // scope 0 at $DIR/issue-62289.rs:+1:21: +1:22\n+        drop(_1) -> bb13;                // scope 0 at $DIR/issue_62289.rs:+1:21: +1:22\n     }\n \n     bb12 (cleanup): {\n-        drop(_5) -> bb13;                // scope 0 at $DIR/issue-62289.rs:+1:20: +1:21\n+        drop(_5) -> bb13;                // scope 0 at $DIR/issue_62289.rs:+1:20: +1:21\n     }\n \n     bb13 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-62289.rs:+0:1: +2:2\n+        resume;                          // scope 0 at $DIR/issue_62289.rs:+0:1: +2:2\n     }\n }"}, {"sha": "ebee89001b99852621973544aaab500eea22f6de", "filename": "src/test/mir-opt/issue_72181.bar.built.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.built.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,17 +1,17 @@\n // MIR for `bar` after built\n \n fn bar(_1: [(Never, u32); 1]) -> u32 {\n-    let mut _0: u32;                     // return place in scope 0 at $DIR/issue-72181.rs:+0:40: +0:43\n-    let _2: u32;                         // in scope 0 at $DIR/issue-72181.rs:+0:13: +0:14\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/issue_72181.rs:+0:40: +0:43\n+    let _2: u32;                         // in scope 0 at $DIR/issue_72181.rs:+0:13: +0:14\n     scope 1 {\n-        debug x => _2;                   // in scope 1 at $DIR/issue-72181.rs:+0:13: +0:14\n+        debug x => _2;                   // in scope 1 at $DIR/issue_72181.rs:+0:13: +0:14\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/issue-72181.rs:+0:13: +0:14\n-        _2 = (_1[0 of 1].1: u32);        // scope 0 at $DIR/issue-72181.rs:+0:13: +0:14\n-        _0 = _2;                         // scope 1 at $DIR/issue-72181.rs:+0:46: +0:47\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-72181.rs:+0:48: +0:49\n-        return;                          // scope 0 at $DIR/issue-72181.rs:+0:49: +0:49\n+        StorageLive(_2);                 // scope 0 at $DIR/issue_72181.rs:+0:13: +0:14\n+        _2 = (_1[0 of 1].1: u32);        // scope 0 at $DIR/issue_72181.rs:+0:13: +0:14\n+        _0 = _2;                         // scope 1 at $DIR/issue_72181.rs:+0:46: +0:47\n+        StorageDead(_2);                 // scope 0 at $DIR/issue_72181.rs:+0:48: +0:49\n+        return;                          // scope 0 at $DIR/issue_72181.rs:+0:49: +0:49\n     }\n }"}, {"sha": "90c9785202a74924f8e21940885cf8d648e3e983", "filename": "src/test/mir-opt/issue_72181.foo.built.after.mir", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.built.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,27 +1,27 @@\n // MIR for `foo` after built\n \n fn foo(_1: [(Never, u32); 1]) -> u32 {\n-    debug xs => _1;                      // in scope 0 at $DIR/issue-72181.rs:+0:8: +0:10\n-    let mut _0: u32;                     // return place in scope 0 at $DIR/issue-72181.rs:+0:34: +0:37\n-    let _2: usize;                       // in scope 0 at $DIR/issue-72181.rs:+0:43: +0:44\n-    let mut _3: usize;                   // in scope 0 at $DIR/issue-72181.rs:+0:40: +0:45\n-    let mut _4: bool;                    // in scope 0 at $DIR/issue-72181.rs:+0:40: +0:45\n+    debug xs => _1;                      // in scope 0 at $DIR/issue_72181.rs:+0:8: +0:10\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/issue_72181.rs:+0:34: +0:37\n+    let _2: usize;                       // in scope 0 at $DIR/issue_72181.rs:+0:43: +0:44\n+    let mut _3: usize;                   // in scope 0 at $DIR/issue_72181.rs:+0:40: +0:45\n+    let mut _4: bool;                    // in scope 0 at $DIR/issue_72181.rs:+0:40: +0:45\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/issue-72181.rs:+0:43: +0:44\n-        _2 = const 0_usize;              // scope 0 at $DIR/issue-72181.rs:+0:43: +0:44\n-        _3 = Len(_1);                    // scope 0 at $DIR/issue-72181.rs:+0:40: +0:45\n-        _4 = Lt(_2, _3);                 // scope 0 at $DIR/issue-72181.rs:+0:40: +0:45\n-        assert(move _4, \"index out of bounds: the length is {} but the index is {}\", move _3, _2) -> [success: bb1, unwind: bb2]; // scope 0 at $DIR/issue-72181.rs:+0:40: +0:45\n+        StorageLive(_2);                 // scope 0 at $DIR/issue_72181.rs:+0:43: +0:44\n+        _2 = const 0_usize;              // scope 0 at $DIR/issue_72181.rs:+0:43: +0:44\n+        _3 = Len(_1);                    // scope 0 at $DIR/issue_72181.rs:+0:40: +0:45\n+        _4 = Lt(_2, _3);                 // scope 0 at $DIR/issue_72181.rs:+0:40: +0:45\n+        assert(move _4, \"index out of bounds: the length is {} but the index is {}\", move _3, _2) -> [success: bb1, unwind: bb2]; // scope 0 at $DIR/issue_72181.rs:+0:40: +0:45\n     }\n \n     bb1: {\n-        _0 = (_1[_2].1: u32);            // scope 0 at $DIR/issue-72181.rs:+0:40: +0:47\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-72181.rs:+0:48: +0:49\n-        return;                          // scope 0 at $DIR/issue-72181.rs:+0:49: +0:49\n+        _0 = (_1[_2].1: u32);            // scope 0 at $DIR/issue_72181.rs:+0:40: +0:47\n+        StorageDead(_2);                 // scope 0 at $DIR/issue_72181.rs:+0:48: +0:49\n+        return;                          // scope 0 at $DIR/issue_72181.rs:+0:49: +0:49\n     }\n \n     bb2 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-72181.rs:+0:1: +0:49\n+        resume;                          // scope 0 at $DIR/issue_72181.rs:+0:1: +0:49\n     }\n }"}, {"sha": "e8683692770d1e68b5d9db22649ea20c37969463", "filename": "src/test/mir-opt/issue_72181.main.built.after.mir", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_72181.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_72181.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.built.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,18 +1,18 @@\n // MIR for `main` after built\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/issue-72181.rs:+0:11: +0:11\n-    let mut _1: usize;                   // in scope 0 at $DIR/issue-72181.rs:+1:13: +1:34\n-    let mut _3: Foo;                     // in scope 0 at $DIR/issue-72181.rs:+3:14: +3:27\n-    let mut _4: Foo;                     // in scope 0 at $DIR/issue-72181.rs:+3:29: +3:42\n-    let mut _5: u64;                     // in scope 0 at $DIR/issue-72181.rs:+4:13: +4:30\n-    let _6: usize;                       // in scope 0 at $DIR/issue-72181.rs:+4:24: +4:25\n-    let mut _7: usize;                   // in scope 0 at $DIR/issue-72181.rs:+4:22: +4:26\n-    let mut _8: bool;                    // in scope 0 at $DIR/issue-72181.rs:+4:22: +4:26\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue_72181.rs:+0:11: +0:11\n+    let mut _1: usize;                   // in scope 0 at $DIR/issue_72181.rs:+1:13: +1:34\n+    let mut _3: Foo;                     // in scope 0 at $DIR/issue_72181.rs:+3:14: +3:27\n+    let mut _4: Foo;                     // in scope 0 at $DIR/issue_72181.rs:+3:29: +3:42\n+    let mut _5: u64;                     // in scope 0 at $DIR/issue_72181.rs:+4:13: +4:30\n+    let _6: usize;                       // in scope 0 at $DIR/issue_72181.rs:+4:24: +4:25\n+    let mut _7: usize;                   // in scope 0 at $DIR/issue_72181.rs:+4:22: +4:26\n+    let mut _8: bool;                    // in scope 0 at $DIR/issue_72181.rs:+4:22: +4:26\n     scope 1 {\n-        let _2: [Foo; 2];                // in scope 1 at $DIR/issue-72181.rs:+3:9: +3:10\n+        let _2: [Foo; 2];                // in scope 1 at $DIR/issue_72181.rs:+3:9: +3:10\n         scope 2 {\n-            debug f => _2;               // in scope 2 at $DIR/issue-72181.rs:+3:9: +3:10\n+            debug f => _2;               // in scope 2 at $DIR/issue_72181.rs:+3:9: +3:10\n             scope 3 {\n             }\n             scope 4 {\n@@ -21,42 +21,42 @@ fn main() -> () {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/issue-72181.rs:+1:13: +1:34\n-        _1 = std::mem::size_of::<Foo>() -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/issue-72181.rs:+1:13: +1:34\n+        StorageLive(_1);                 // scope 0 at $DIR/issue_72181.rs:+1:13: +1:34\n+        _1 = std::mem::size_of::<Foo>() -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/issue_72181.rs:+1:13: +1:34\n                                          // mir::Constant\n-                                         // + span: $DIR/issue-72181.rs:24:13: 24:32\n+                                         // + span: $DIR/issue_72181.rs:24:13: 24:32\n                                          // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Foo>}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageDead(_1);                 // scope 0 at $DIR/issue-72181.rs:+1:34: +1:35\n-        StorageLive(_2);                 // scope 1 at $DIR/issue-72181.rs:+3:9: +3:10\n-        StorageLive(_3);                 // scope 1 at $DIR/issue-72181.rs:+3:14: +3:27\n-        _3 = Foo { a: const 42_u64 };    // scope 1 at $DIR/issue-72181.rs:+3:14: +3:27\n-        StorageLive(_4);                 // scope 1 at $DIR/issue-72181.rs:+3:29: +3:42\n-        _4 = Foo { a: const 10_u64 };    // scope 1 at $DIR/issue-72181.rs:+3:29: +3:42\n-        _2 = [move _3, move _4];         // scope 1 at $DIR/issue-72181.rs:+3:13: +3:43\n-        StorageDead(_4);                 // scope 1 at $DIR/issue-72181.rs:+3:42: +3:43\n-        StorageDead(_3);                 // scope 1 at $DIR/issue-72181.rs:+3:42: +3:43\n-        FakeRead(ForLet(None), _2);      // scope 1 at $DIR/issue-72181.rs:+3:9: +3:10\n-        StorageLive(_5);                 // scope 2 at $DIR/issue-72181.rs:+4:13: +4:30\n-        StorageLive(_6);                 // scope 4 at $DIR/issue-72181.rs:+4:24: +4:25\n-        _6 = const 0_usize;              // scope 4 at $DIR/issue-72181.rs:+4:24: +4:25\n-        _7 = Len(_2);                    // scope 4 at $DIR/issue-72181.rs:+4:22: +4:26\n-        _8 = Lt(_6, _7);                 // scope 4 at $DIR/issue-72181.rs:+4:22: +4:26\n-        assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb2, unwind: bb3]; // scope 4 at $DIR/issue-72181.rs:+4:22: +4:26\n+        StorageDead(_1);                 // scope 0 at $DIR/issue_72181.rs:+1:34: +1:35\n+        StorageLive(_2);                 // scope 1 at $DIR/issue_72181.rs:+3:9: +3:10\n+        StorageLive(_3);                 // scope 1 at $DIR/issue_72181.rs:+3:14: +3:27\n+        _3 = Foo { a: const 42_u64 };    // scope 1 at $DIR/issue_72181.rs:+3:14: +3:27\n+        StorageLive(_4);                 // scope 1 at $DIR/issue_72181.rs:+3:29: +3:42\n+        _4 = Foo { a: const 10_u64 };    // scope 1 at $DIR/issue_72181.rs:+3:29: +3:42\n+        _2 = [move _3, move _4];         // scope 1 at $DIR/issue_72181.rs:+3:13: +3:43\n+        StorageDead(_4);                 // scope 1 at $DIR/issue_72181.rs:+3:42: +3:43\n+        StorageDead(_3);                 // scope 1 at $DIR/issue_72181.rs:+3:42: +3:43\n+        FakeRead(ForLet(None), _2);      // scope 1 at $DIR/issue_72181.rs:+3:9: +3:10\n+        StorageLive(_5);                 // scope 2 at $DIR/issue_72181.rs:+4:13: +4:30\n+        StorageLive(_6);                 // scope 4 at $DIR/issue_72181.rs:+4:24: +4:25\n+        _6 = const 0_usize;              // scope 4 at $DIR/issue_72181.rs:+4:24: +4:25\n+        _7 = Len(_2);                    // scope 4 at $DIR/issue_72181.rs:+4:22: +4:26\n+        _8 = Lt(_6, _7);                 // scope 4 at $DIR/issue_72181.rs:+4:22: +4:26\n+        assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb2, unwind: bb3]; // scope 4 at $DIR/issue_72181.rs:+4:22: +4:26\n     }\n \n     bb2: {\n-        _5 = (_2[_6].0: u64);            // scope 4 at $DIR/issue-72181.rs:+4:22: +4:28\n-        StorageDead(_6);                 // scope 2 at $DIR/issue-72181.rs:+4:30: +4:31\n-        StorageDead(_5);                 // scope 2 at $DIR/issue-72181.rs:+4:30: +4:31\n-        _0 = const ();                   // scope 0 at $DIR/issue-72181.rs:+0:11: +5:2\n-        StorageDead(_2);                 // scope 1 at $DIR/issue-72181.rs:+5:1: +5:2\n-        return;                          // scope 0 at $DIR/issue-72181.rs:+5:2: +5:2\n+        _5 = (_2[_6].0: u64);            // scope 4 at $DIR/issue_72181.rs:+4:22: +4:28\n+        StorageDead(_6);                 // scope 2 at $DIR/issue_72181.rs:+4:30: +4:31\n+        StorageDead(_5);                 // scope 2 at $DIR/issue_72181.rs:+4:30: +4:31\n+        _0 = const ();                   // scope 0 at $DIR/issue_72181.rs:+0:11: +5:2\n+        StorageDead(_2);                 // scope 1 at $DIR/issue_72181.rs:+5:1: +5:2\n+        return;                          // scope 0 at $DIR/issue_72181.rs:+5:2: +5:2\n     }\n \n     bb3 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-72181.rs:+0:1: +5:2\n+        resume;                          // scope 0 at $DIR/issue_72181.rs:+0:1: +5:2\n     }\n }"}, {"sha": "6a32d4bbee2f7355a9171c35ae0c2eec69bceb13", "filename": "src/test/mir-opt/issue_72181.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_72181.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_72181.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/issue-72181.rs"}, {"sha": "4086da5201134f9109fc33c37c04e2a08390f6dc", "filename": "src/test/mir-opt/issue_72181_1.f.built.after.mir", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.built.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,29 +1,29 @@\n // MIR for `f` after built\n \n fn f(_1: Void) -> ! {\n-    debug v => _1;                       // in scope 0 at $DIR/issue-72181-1.rs:+0:6: +0:7\n-    let mut _0: !;                       // return place in scope 0 at $DIR/issue-72181-1.rs:+0:18: +0:19\n-    let mut _2: !;                       // in scope 0 at $DIR/issue-72181-1.rs:+0:20: +2:2\n-    let mut _3: !;                       // in scope 0 at $DIR/issue-72181-1.rs:+1:5: +1:15\n+    debug v => _1;                       // in scope 0 at $DIR/issue_72181_1.rs:+0:6: +0:7\n+    let mut _0: !;                       // return place in scope 0 at $DIR/issue_72181_1.rs:+0:18: +0:19\n+    let mut _2: !;                       // in scope 0 at $DIR/issue_72181_1.rs:+0:20: +2:2\n+    let mut _3: !;                       // in scope 0 at $DIR/issue_72181_1.rs:+1:5: +1:15\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/issue-72181-1.rs:+0:20: +2:2\n-        StorageLive(_3);                 // scope 0 at $DIR/issue-72181-1.rs:+1:5: +1:15\n-        FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/issue-72181-1.rs:+1:11: +1:12\n-        unreachable;                     // scope 0 at $DIR/issue-72181-1.rs:+1:11: +1:12\n+        StorageLive(_2);                 // scope 0 at $DIR/issue_72181_1.rs:+0:20: +2:2\n+        StorageLive(_3);                 // scope 0 at $DIR/issue_72181_1.rs:+1:5: +1:15\n+        FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/issue_72181_1.rs:+1:11: +1:12\n+        unreachable;                     // scope 0 at $DIR/issue_72181_1.rs:+1:11: +1:12\n     }\n \n     bb1: {\n-        unreachable;                     // scope 0 at $DIR/issue-72181-1.rs:+1:5: +1:15\n+        unreachable;                     // scope 0 at $DIR/issue_72181_1.rs:+1:5: +1:15\n     }\n \n     bb2: {\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-72181-1.rs:+1:14: +1:15\n-        unreachable;                     // scope 0 at $DIR/issue-72181-1.rs:+0:20: +2:2\n+        StorageDead(_3);                 // scope 0 at $DIR/issue_72181_1.rs:+1:14: +1:15\n+        unreachable;                     // scope 0 at $DIR/issue_72181_1.rs:+0:20: +2:2\n     }\n \n     bb3: {\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-72181-1.rs:+2:1: +2:2\n-        return;                          // scope 0 at $DIR/issue-72181-1.rs:+2:2: +2:2\n+        StorageDead(_2);                 // scope 0 at $DIR/issue_72181_1.rs:+2:1: +2:2\n+        return;                          // scope 0 at $DIR/issue_72181_1.rs:+2:2: +2:2\n     }\n }"}, {"sha": "2172f3aa9e285d4a516a444ea4d096089dc22ddc", "filename": "src/test/mir-opt/issue_72181_1.main.built.after.mir", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.built.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,57 +1,57 @@\n // MIR for `main` after built\n \n | User Type Annotations\n-| 0: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(Void) }, span: $DIR/issue-72181-1.rs:16:12: 16:16, inferred_ty: Void\n-| 1: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(Void) }, span: $DIR/issue-72181-1.rs:16:12: 16:16, inferred_ty: Void\n+| 0: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(Void) }, span: $DIR/issue_72181_1.rs:16:12: 16:16, inferred_ty: Void\n+| 1: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(Void) }, span: $DIR/issue_72181_1.rs:16:12: 16:16, inferred_ty: Void\n |\n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/issue-72181-1.rs:+0:11: +0:11\n-    let mut _1: !;                       // in scope 0 at $DIR/issue-72181-1.rs:+0:11: +6:2\n-    let _2: Void as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/issue-72181-1.rs:+1:9: +1:10\n-    let mut _3: ();                      // in scope 0 at $DIR/issue-72181-1.rs:+2:41: +2:43\n-    let _4: !;                           // in scope 0 at $DIR/issue-72181-1.rs:+5:5: +5:9\n-    let mut _5: Void;                    // in scope 0 at $DIR/issue-72181-1.rs:+5:7: +5:8\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue_72181_1.rs:+0:11: +0:11\n+    let mut _1: !;                       // in scope 0 at $DIR/issue_72181_1.rs:+0:11: +6:2\n+    let _2: Void as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/issue_72181_1.rs:+1:9: +1:10\n+    let mut _3: ();                      // in scope 0 at $DIR/issue_72181_1.rs:+2:41: +2:43\n+    let _4: !;                           // in scope 0 at $DIR/issue_72181_1.rs:+5:5: +5:9\n+    let mut _5: Void;                    // in scope 0 at $DIR/issue_72181_1.rs:+5:7: +5:8\n     scope 1 {\n-        debug v => _2;                   // in scope 1 at $DIR/issue-72181-1.rs:+1:9: +1:10\n+        debug v => _2;                   // in scope 1 at $DIR/issue_72181_1.rs:+1:9: +1:10\n     }\n     scope 2 {\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/issue-72181-1.rs:+1:9: +1:10\n-        StorageLive(_3);                 // scope 2 at $DIR/issue-72181-1.rs:+2:41: +2:43\n-        _3 = ();                         // scope 2 at $DIR/issue-72181-1.rs:+2:41: +2:43\n-        _2 = transmute::<(), Void>(move _3) -> bb4; // scope 2 at $DIR/issue-72181-1.rs:+2:9: +2:44\n+        StorageLive(_2);                 // scope 0 at $DIR/issue_72181_1.rs:+1:9: +1:10\n+        StorageLive(_3);                 // scope 2 at $DIR/issue_72181_1.rs:+2:41: +2:43\n+        _3 = ();                         // scope 2 at $DIR/issue_72181_1.rs:+2:41: +2:43\n+        _2 = transmute::<(), Void>(move _3) -> bb4; // scope 2 at $DIR/issue_72181_1.rs:+2:9: +2:44\n                                          // mir::Constant\n-                                         // + span: $DIR/issue-72181-1.rs:17:9: 17:40\n+                                         // + span: $DIR/issue_72181_1.rs:17:9: 17:40\n                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(()) -> Void {transmute::<(), Void>}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageDead(_3);                 // scope 2 at $DIR/issue-72181-1.rs:+2:43: +2:44\n-        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/issue-72181-1.rs:+1:9: +1:10\n-        AscribeUserType(_2, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 0 at $DIR/issue-72181-1.rs:+1:12: +1:16\n-        StorageLive(_4);                 // scope 1 at $DIR/issue-72181-1.rs:+5:5: +5:9\n-        StorageLive(_5);                 // scope 1 at $DIR/issue-72181-1.rs:+5:7: +5:8\n-        _5 = move _2;                    // scope 1 at $DIR/issue-72181-1.rs:+5:7: +5:8\n-        _4 = f(move _5) -> bb4;          // scope 1 at $DIR/issue-72181-1.rs:+5:5: +5:9\n+        StorageDead(_3);                 // scope 2 at $DIR/issue_72181_1.rs:+2:43: +2:44\n+        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/issue_72181_1.rs:+1:9: +1:10\n+        AscribeUserType(_2, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 0 at $DIR/issue_72181_1.rs:+1:12: +1:16\n+        StorageLive(_4);                 // scope 1 at $DIR/issue_72181_1.rs:+5:5: +5:9\n+        StorageLive(_5);                 // scope 1 at $DIR/issue_72181_1.rs:+5:7: +5:8\n+        _5 = move _2;                    // scope 1 at $DIR/issue_72181_1.rs:+5:7: +5:8\n+        _4 = f(move _5) -> bb4;          // scope 1 at $DIR/issue_72181_1.rs:+5:5: +5:9\n                                          // mir::Constant\n-                                         // + span: $DIR/issue-72181-1.rs:20:5: 20:6\n+                                         // + span: $DIR/issue_72181_1.rs:20:5: 20:6\n                                          // + literal: Const { ty: fn(Void) -> ! {f}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        StorageDead(_5);                 // scope 1 at $DIR/issue-72181-1.rs:+5:8: +5:9\n-        StorageDead(_4);                 // scope 1 at $DIR/issue-72181-1.rs:+5:9: +5:10\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-72181-1.rs:+6:1: +6:2\n-        unreachable;                     // scope 0 at $DIR/issue-72181-1.rs:+0:11: +6:2\n+        StorageDead(_5);                 // scope 1 at $DIR/issue_72181_1.rs:+5:8: +5:9\n+        StorageDead(_4);                 // scope 1 at $DIR/issue_72181_1.rs:+5:9: +5:10\n+        StorageDead(_2);                 // scope 0 at $DIR/issue_72181_1.rs:+6:1: +6:2\n+        unreachable;                     // scope 0 at $DIR/issue_72181_1.rs:+0:11: +6:2\n     }\n \n     bb3: {\n-        return;                          // scope 0 at $DIR/issue-72181-1.rs:+6:2: +6:2\n+        return;                          // scope 0 at $DIR/issue_72181_1.rs:+6:2: +6:2\n     }\n \n     bb4 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-72181-1.rs:+0:1: +6:2\n+        resume;                          // scope 0 at $DIR/issue_72181_1.rs:+0:1: +6:2\n     }\n }"}, {"sha": "8ae2599ec73f8fc025fddb85d0f1237d11273be3", "filename": "src/test/mir-opt/issue_72181_1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_72181_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_72181_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/issue-72181-1.rs"}, {"sha": "c9a9511586d78ea9befb6994c320c85c1cacc5ee", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,18 +2,18 @@\n + // MIR for `main` after SimplifyArmIdentity\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/issue-73223.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/issue-73223.rs:+1:9: +1:14\n-      let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-      let mut _3: isize;                   // in scope 0 at $DIR/issue-73223.rs:+2:9: +2:16\n-      let _4: i32;                         // in scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n-      let mut _5: !;                       // in scope 0 at $DIR/issue-73223.rs:+3:17: +3:23\n-      let mut _7: i32;                     // in scope 0 at $DIR/issue-73223.rs:+6:22: +6:27\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue_73223.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/issue_73223.rs:+1:9: +1:14\n+      let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/issue_73223.rs:+1:23: +1:30\n+      let mut _3: isize;                   // in scope 0 at $DIR/issue_73223.rs:+2:9: +2:16\n+      let _4: i32;                         // in scope 0 at $DIR/issue_73223.rs:+2:14: +2:15\n+      let mut _5: !;                       // in scope 0 at $DIR/issue_73223.rs:+3:17: +3:23\n+      let mut _7: i32;                     // in scope 0 at $DIR/issue_73223.rs:+6:22: +6:27\n       let _8: ();                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _9: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _10: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _11: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _12: i32;                        // in scope 0 at $DIR/issue-73223.rs:+7:23: +7:24\n+      let _12: i32;                        // in scope 0 at $DIR/issue_73223.rs:+7:23: +7:24\n       let mut _15: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _16: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _17: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -27,10 +27,10 @@\n       let _26: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _27: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       scope 1 {\n-          debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:+1:9: +1:14\n-          let _6: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:+6:9: +6:14\n+          debug split => _1;               // in scope 1 at $DIR/issue_73223.rs:+1:9: +1:14\n+          let _6: std::option::Option<i32>; // in scope 1 at $DIR/issue_73223.rs:+6:9: +6:14\n           scope 3 {\n-              debug _prev => _6;           // in scope 3 at $DIR/issue-73223.rs:+6:9: +6:14\n+              debug _prev => _6;           // in scope 3 at $DIR/issue_73223.rs:+6:9: +6:14\n               let _13: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               let _14: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               let mut _28: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -45,43 +45,43 @@\n           }\n       }\n       scope 2 {\n-          debug v => _4;                   // in scope 2 at $DIR/issue-73223.rs:+2:14: +2:15\n+          debug v => _4;                   // in scope 2 at $DIR/issue_73223.rs:+2:14: +2:15\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:+1:9: +1:14\n-          StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          Deinit(_2);                      // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          _3 = const 1_isize;              // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          goto -> bb3;                     // scope 0 at $DIR/issue-73223.rs:+1:17: +1:30\n+          StorageLive(_1);                 // scope 0 at $DIR/issue_73223.rs:+1:9: +1:14\n+          StorageLive(_2);                 // scope 0 at $DIR/issue_73223.rs:+1:23: +1:30\n+          Deinit(_2);                      // scope 0 at $DIR/issue_73223.rs:+1:23: +1:30\n+          ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue_73223.rs:+1:23: +1:30\n+          discriminant(_2) = 1;            // scope 0 at $DIR/issue_73223.rs:+1:23: +1:30\n+          _3 = const 1_isize;              // scope 0 at $DIR/issue_73223.rs:+1:23: +1:30\n+          goto -> bb3;                     // scope 0 at $DIR/issue_73223.rs:+1:17: +1:30\n       }\n   \n       bb1: {\n-          nop;                             // scope 0 at $DIR/issue-73223.rs:+3:17: +3:23\n-          StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:+4:6: +4:7\n-          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:+8:1: +8:2\n-          return;                          // scope 0 at $DIR/issue-73223.rs:+8:2: +8:2\n+          nop;                             // scope 0 at $DIR/issue_73223.rs:+3:17: +3:23\n+          StorageDead(_2);                 // scope 0 at $DIR/issue_73223.rs:+4:6: +4:7\n+          StorageDead(_1);                 // scope 0 at $DIR/issue_73223.rs:+8:1: +8:2\n+          return;                          // scope 0 at $DIR/issue_73223.rs:+8:2: +8:2\n       }\n   \n       bb2: {\n-          unreachable;                     // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n+          unreachable;                     // scope 0 at $DIR/issue_73223.rs:+1:23: +1:30\n       }\n   \n       bb3: {\n-          StorageLive(_4);                 // scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n-          _4 = ((_2 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n-          _1 = _4;                         // scope 2 at $DIR/issue-73223.rs:+2:20: +2:21\n-          StorageDead(_4);                 // scope 0 at $DIR/issue-73223.rs:+2:20: +2:21\n-          StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:+4:6: +4:7\n-          StorageLive(_6);                 // scope 1 at $DIR/issue-73223.rs:+6:9: +6:14\n-          StorageLive(_7);                 // scope 1 at $DIR/issue-73223.rs:+6:22: +6:27\n-          _7 = _1;                         // scope 1 at $DIR/issue-73223.rs:+6:22: +6:27\n-          Deinit(_6);                      // scope 1 at $DIR/issue-73223.rs:+6:17: +6:28\n-          ((_6 as Some).0: i32) = move _7; // scope 1 at $DIR/issue-73223.rs:+6:17: +6:28\n-          discriminant(_6) = 1;            // scope 1 at $DIR/issue-73223.rs:+6:17: +6:28\n-          StorageDead(_7);                 // scope 1 at $DIR/issue-73223.rs:+6:27: +6:28\n+          StorageLive(_4);                 // scope 0 at $DIR/issue_73223.rs:+2:14: +2:15\n+          _4 = ((_2 as Some).0: i32);      // scope 0 at $DIR/issue_73223.rs:+2:14: +2:15\n+          _1 = _4;                         // scope 2 at $DIR/issue_73223.rs:+2:20: +2:21\n+          StorageDead(_4);                 // scope 0 at $DIR/issue_73223.rs:+2:20: +2:21\n+          StorageDead(_2);                 // scope 0 at $DIR/issue_73223.rs:+4:6: +4:7\n+          StorageLive(_6);                 // scope 1 at $DIR/issue_73223.rs:+6:9: +6:14\n+          StorageLive(_7);                 // scope 1 at $DIR/issue_73223.rs:+6:22: +6:27\n+          _7 = _1;                         // scope 1 at $DIR/issue_73223.rs:+6:22: +6:27\n+          Deinit(_6);                      // scope 1 at $DIR/issue_73223.rs:+6:17: +6:28\n+          ((_6 as Some).0: i32) = move _7; // scope 1 at $DIR/issue_73223.rs:+6:17: +6:28\n+          discriminant(_6) = 1;            // scope 1 at $DIR/issue_73223.rs:+6:17: +6:28\n+          StorageDead(_7);                 // scope 1 at $DIR/issue_73223.rs:+6:27: +6:28\n           StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -152,10 +152,10 @@\n           StorageDead(_13);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          nop;                             // scope 0 at $DIR/issue-73223.rs:+0:11: +8:2\n-          StorageDead(_6);                 // scope 1 at $DIR/issue-73223.rs:+8:1: +8:2\n-          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:+8:1: +8:2\n-          return;                          // scope 0 at $DIR/issue-73223.rs:+8:2: +8:2\n+          nop;                             // scope 0 at $DIR/issue_73223.rs:+0:11: +8:2\n+          StorageDead(_6);                 // scope 1 at $DIR/issue_73223.rs:+8:1: +8:2\n+          StorageDead(_1);                 // scope 0 at $DIR/issue_73223.rs:+8:1: +8:2\n+          return;                          // scope 0 at $DIR/issue_73223.rs:+8:2: +8:2\n       }\n   }\n   "}, {"sha": "be114cab719c0c77fb5abdb715f464b549126fdc", "filename": "src/test/mir-opt/issue_73223.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_73223.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_73223.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/issue-73223.rs"}, {"sha": "116ca304c99391257b52c68ac25a323c3df533de", "filename": "src/test/mir-opt/issue_78192.f.InstCombine.diff", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_78192.f.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_78192.f.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_78192.f.InstCombine.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,28 +2,28 @@\n + // MIR for `f` after InstCombine\n   \n   fn f(_1: &T) -> *const T {\n-      debug a => _1;                       // in scope 0 at $DIR/issue-78192.rs:+0:13: +0:14\n-      let mut _0: *const T;                // return place in scope 0 at $DIR/issue-78192.rs:+0:23: +0:31\n-      let _2: &*const T;                   // in scope 0 at $DIR/issue-78192.rs:+1:9: +1:10\n-      let _3: &*const T;                   // in scope 0 at $DIR/issue-78192.rs:+1:24: +1:40\n-      let _4: *const T;                    // in scope 0 at $DIR/issue-78192.rs:+1:25: +1:40\n+      debug a => _1;                       // in scope 0 at $DIR/issue_78192.rs:+0:13: +0:14\n+      let mut _0: *const T;                // return place in scope 0 at $DIR/issue_78192.rs:+0:23: +0:31\n+      let _2: &*const T;                   // in scope 0 at $DIR/issue_78192.rs:+1:9: +1:10\n+      let _3: &*const T;                   // in scope 0 at $DIR/issue_78192.rs:+1:24: +1:40\n+      let _4: *const T;                    // in scope 0 at $DIR/issue_78192.rs:+1:25: +1:40\n       scope 1 {\n-          debug b => _2;                   // in scope 1 at $DIR/issue-78192.rs:+1:9: +1:10\n+          debug b => _2;                   // in scope 1 at $DIR/issue_78192.rs:+1:9: +1:10\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/issue-78192.rs:+1:9: +1:10\n-          StorageLive(_3);                 // scope 0 at $DIR/issue-78192.rs:+1:24: +1:40\n-          StorageLive(_4);                 // scope 0 at $DIR/issue-78192.rs:+1:25: +1:40\n-          _4 = &raw const (*_1);           // scope 0 at $DIR/issue-78192.rs:+1:26: +1:27\n-          _3 = &_4;                        // scope 0 at $DIR/issue-78192.rs:+1:24: +1:40\n--         _2 = &(*_3);                     // scope 0 at $DIR/issue-78192.rs:+1:24: +1:40\n-+         _2 = _3;                         // scope 0 at $DIR/issue-78192.rs:+1:24: +1:40\n-          StorageDead(_3);                 // scope 0 at $DIR/issue-78192.rs:+1:40: +1:41\n-          _0 = (*_2);                      // scope 1 at $DIR/issue-78192.rs:+2:5: +2:7\n-          StorageDead(_4);                 // scope 0 at $DIR/issue-78192.rs:+3:1: +3:2\n-          StorageDead(_2);                 // scope 0 at $DIR/issue-78192.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/issue-78192.rs:+3:2: +3:2\n+          StorageLive(_2);                 // scope 0 at $DIR/issue_78192.rs:+1:9: +1:10\n+          StorageLive(_3);                 // scope 0 at $DIR/issue_78192.rs:+1:24: +1:40\n+          StorageLive(_4);                 // scope 0 at $DIR/issue_78192.rs:+1:25: +1:40\n+          _4 = &raw const (*_1);           // scope 0 at $DIR/issue_78192.rs:+1:26: +1:27\n+          _3 = &_4;                        // scope 0 at $DIR/issue_78192.rs:+1:24: +1:40\n+-         _2 = &(*_3);                     // scope 0 at $DIR/issue_78192.rs:+1:24: +1:40\n++         _2 = _3;                         // scope 0 at $DIR/issue_78192.rs:+1:24: +1:40\n+          StorageDead(_3);                 // scope 0 at $DIR/issue_78192.rs:+1:40: +1:41\n+          _0 = (*_2);                      // scope 1 at $DIR/issue_78192.rs:+2:5: +2:7\n+          StorageDead(_4);                 // scope 0 at $DIR/issue_78192.rs:+3:1: +3:2\n+          StorageDead(_2);                 // scope 0 at $DIR/issue_78192.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/issue_78192.rs:+3:2: +3:2\n       }\n   }\n   "}, {"sha": "39f665402b025cf12918fba727f95bc93ecf6410", "filename": "src/test/mir-opt/issue_78192.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_78192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_78192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_78192.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/issue-78192.rs"}, {"sha": "c3fb90e84024e07a057b41e9d087d12d2e7e9073", "filename": "src/test/mir-opt/issue_91633.bar.built.after.mir", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_91633.bar.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_91633.bar.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_91633.bar.built.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,39 +1,39 @@\n // MIR for `bar` after built\n \n fn bar(_1: Box<[T]>) -> () {\n-    debug it => _1;                      // in scope 0 at $DIR/issue-91633.rs:+0:12: +0:14\n-    let mut _0: ();                      // return place in scope 0 at $DIR/issue-91633.rs:+1:2: +1:2\n-    let mut _2: &<[T] as std::ops::Index<usize>>::Output; // in scope 0 at $DIR/issue-91633.rs:+4:14: +4:19\n-    let mut _3: &[T];                    // in scope 0 at $DIR/issue-91633.rs:+4:14: +4:16\n+    debug it => _1;                      // in scope 0 at $DIR/issue_91633.rs:+0:12: +0:14\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue_91633.rs:+1:2: +1:2\n+    let mut _2: &<[T] as std::ops::Index<usize>>::Output; // in scope 0 at $DIR/issue_91633.rs:+4:14: +4:19\n+    let mut _3: &[T];                    // in scope 0 at $DIR/issue_91633.rs:+4:14: +4:16\n     scope 1 {\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/issue-91633.rs:+4:14: +4:19\n-        StorageLive(_3);                 // scope 0 at $DIR/issue-91633.rs:+4:14: +4:16\n-        _3 = &(*_1);                     // scope 0 at $DIR/issue-91633.rs:+4:14: +4:16\n-        _2 = <[T] as Index<usize>>::index(move _3, const 0_usize) -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/issue-91633.rs:+4:14: +4:19\n+        StorageLive(_2);                 // scope 0 at $DIR/issue_91633.rs:+4:14: +4:19\n+        StorageLive(_3);                 // scope 0 at $DIR/issue_91633.rs:+4:14: +4:16\n+        _3 = &(*_1);                     // scope 0 at $DIR/issue_91633.rs:+4:14: +4:16\n+        _2 = <[T] as Index<usize>>::index(move _3, const 0_usize) -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/issue_91633.rs:+4:14: +4:19\n                                          // mir::Constant\n-                                         // + span: $DIR/issue-91633.rs:15:14: 15:19\n+                                         // + span: $DIR/issue_91633.rs:15:14: 15:19\n                                          // + literal: Const { ty: for<'a> fn(&'a [T], usize) -> &'a <[T] as Index<usize>>::Output {<[T] as Index<usize>>::index}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-91633.rs:+4:18: +4:19\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-91633.rs:+4:19: +4:20\n-        _0 = const ();                   // scope 0 at $DIR/issue-91633.rs:+3:2: +5:3\n-        drop(_1) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-91633.rs:+5:2: +5:3\n+        StorageDead(_3);                 // scope 0 at $DIR/issue_91633.rs:+4:18: +4:19\n+        StorageDead(_2);                 // scope 0 at $DIR/issue_91633.rs:+4:19: +4:20\n+        _0 = const ();                   // scope 0 at $DIR/issue_91633.rs:+3:2: +5:3\n+        drop(_1) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue_91633.rs:+5:2: +5:3\n     }\n \n     bb2: {\n-        return;                          // scope 0 at $DIR/issue-91633.rs:+5:3: +5:3\n+        return;                          // scope 0 at $DIR/issue_91633.rs:+5:3: +5:3\n     }\n \n     bb3 (cleanup): {\n-        drop(_1) -> bb4;                 // scope 0 at $DIR/issue-91633.rs:+5:2: +5:3\n+        drop(_1) -> bb4;                 // scope 0 at $DIR/issue_91633.rs:+5:2: +5:3\n     }\n \n     bb4 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-91633.rs:+0:1: +5:3\n+        resume;                          // scope 0 at $DIR/issue_91633.rs:+0:1: +5:3\n     }\n }"}, {"sha": "4e3dd365e924f06fe139cd9e525249d41b1e87ef", "filename": "src/test/mir-opt/issue_91633.foo.built.after.mir", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_91633.foo.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_91633.foo.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_91633.foo.built.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,57 +1,57 @@\n // MIR for `foo` after built\n \n fn foo(_1: Box<[T]>) -> T {\n-    debug it => _1;                      // in scope 0 at $DIR/issue-91633.rs:+0:19: +0:21\n-    let mut _0: T;                       // return place in scope 0 at $DIR/issue-91633.rs:+0:36: +0:37\n-    let _2: T;                           // in scope 0 at $DIR/issue-91633.rs:+2:10: +2:11\n-    let mut _3: &T;                      // in scope 0 at $DIR/issue-91633.rs:+2:14: +2:27\n-    let _4: usize;                       // in scope 0 at $DIR/issue-91633.rs:+2:17: +2:18\n-    let mut _5: usize;                   // in scope 0 at $DIR/issue-91633.rs:+2:14: +2:19\n-    let mut _6: bool;                    // in scope 0 at $DIR/issue-91633.rs:+2:14: +2:19\n+    debug it => _1;                      // in scope 0 at $DIR/issue_91633.rs:+0:19: +0:21\n+    let mut _0: T;                       // return place in scope 0 at $DIR/issue_91633.rs:+0:36: +0:37\n+    let _2: T;                           // in scope 0 at $DIR/issue_91633.rs:+2:10: +2:11\n+    let mut _3: &T;                      // in scope 0 at $DIR/issue_91633.rs:+2:14: +2:27\n+    let _4: usize;                       // in scope 0 at $DIR/issue_91633.rs:+2:17: +2:18\n+    let mut _5: usize;                   // in scope 0 at $DIR/issue_91633.rs:+2:14: +2:19\n+    let mut _6: bool;                    // in scope 0 at $DIR/issue_91633.rs:+2:14: +2:19\n     scope 1 {\n-        debug f => _2;                   // in scope 1 at $DIR/issue-91633.rs:+2:10: +2:11\n+        debug f => _2;                   // in scope 1 at $DIR/issue_91633.rs:+2:10: +2:11\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/issue-91633.rs:+2:10: +2:11\n-        StorageLive(_3);                 // scope 0 at $DIR/issue-91633.rs:+2:14: +2:27\n-        StorageLive(_4);                 // scope 0 at $DIR/issue-91633.rs:+2:17: +2:18\n-        _4 = const 0_usize;              // scope 0 at $DIR/issue-91633.rs:+2:17: +2:18\n-        _5 = Len((*_1));                 // scope 0 at $DIR/issue-91633.rs:+2:14: +2:19\n-        _6 = Lt(_4, _5);                 // scope 0 at $DIR/issue-91633.rs:+2:14: +2:19\n-        assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> [success: bb1, unwind: bb5]; // scope 0 at $DIR/issue-91633.rs:+2:14: +2:19\n+        StorageLive(_2);                 // scope 0 at $DIR/issue_91633.rs:+2:10: +2:11\n+        StorageLive(_3);                 // scope 0 at $DIR/issue_91633.rs:+2:14: +2:27\n+        StorageLive(_4);                 // scope 0 at $DIR/issue_91633.rs:+2:17: +2:18\n+        _4 = const 0_usize;              // scope 0 at $DIR/issue_91633.rs:+2:17: +2:18\n+        _5 = Len((*_1));                 // scope 0 at $DIR/issue_91633.rs:+2:14: +2:19\n+        _6 = Lt(_4, _5);                 // scope 0 at $DIR/issue_91633.rs:+2:14: +2:19\n+        assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> [success: bb1, unwind: bb5]; // scope 0 at $DIR/issue_91633.rs:+2:14: +2:19\n     }\n \n     bb1: {\n-        _3 = &(*_1)[_4];                 // scope 0 at $DIR/issue-91633.rs:+2:14: +2:27\n-        _2 = <T as Clone>::clone(move _3) -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/issue-91633.rs:+2:14: +2:27\n+        _3 = &(*_1)[_4];                 // scope 0 at $DIR/issue_91633.rs:+2:14: +2:27\n+        _2 = <T as Clone>::clone(move _3) -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/issue_91633.rs:+2:14: +2:27\n                                          // mir::Constant\n-                                         // + span: $DIR/issue-91633.rs:28:20: 28:25\n+                                         // + span: $DIR/issue_91633.rs:28:20: 28:25\n                                          // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-91633.rs:+2:26: +2:27\n-        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/issue-91633.rs:+2:10: +2:11\n-        StorageDead(_4);                 // scope 0 at $DIR/issue-91633.rs:+2:27: +2:28\n-        _0 = move _2;                    // scope 1 at $DIR/issue-91633.rs:+3:6: +3:7\n-        drop(_2) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/issue-91633.rs:+4:2: +4:3\n+        StorageDead(_3);                 // scope 0 at $DIR/issue_91633.rs:+2:26: +2:27\n+        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/issue_91633.rs:+2:10: +2:11\n+        StorageDead(_4);                 // scope 0 at $DIR/issue_91633.rs:+2:27: +2:28\n+        _0 = move _2;                    // scope 1 at $DIR/issue_91633.rs:+3:6: +3:7\n+        drop(_2) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/issue_91633.rs:+4:2: +4:3\n     }\n \n     bb3: {\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-91633.rs:+4:2: +4:3\n-        drop(_1) -> [return: bb4, unwind: bb6]; // scope 0 at $DIR/issue-91633.rs:+4:2: +4:3\n+        StorageDead(_2);                 // scope 0 at $DIR/issue_91633.rs:+4:2: +4:3\n+        drop(_1) -> [return: bb4, unwind: bb6]; // scope 0 at $DIR/issue_91633.rs:+4:2: +4:3\n     }\n \n     bb4: {\n-        return;                          // scope 0 at $DIR/issue-91633.rs:+4:3: +4:3\n+        return;                          // scope 0 at $DIR/issue_91633.rs:+4:3: +4:3\n     }\n \n     bb5 (cleanup): {\n-        drop(_1) -> bb6;                 // scope 0 at $DIR/issue-91633.rs:+4:2: +4:3\n+        drop(_1) -> bb6;                 // scope 0 at $DIR/issue_91633.rs:+4:2: +4:3\n     }\n \n     bb6 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-91633.rs:+0:1: +4:3\n+        resume;                          // scope 0 at $DIR/issue_91633.rs:+0:1: +4:3\n     }\n }"}, {"sha": "42486d3a50e3897ac9e78349008c584009f1ad3b", "filename": "src/test/mir-opt/issue_91633.fun.built.after.mir", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_91633.fun.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_91633.fun.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_91633.fun.built.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,35 +1,35 @@\n // MIR for `fun` after built\n \n fn fun(_1: &[T]) -> &T {\n-    debug it => _1;                      // in scope 0 at $DIR/issue-91633.rs:+0:12: +0:14\n-    let mut _0: &T;                      // return place in scope 0 at $DIR/issue-91633.rs:+0:25: +0:27\n-    let _2: &T;                          // in scope 0 at $DIR/issue-91633.rs:+2:10: +2:11\n-    let _3: usize;                       // in scope 0 at $DIR/issue-91633.rs:+2:18: +2:19\n-    let mut _4: usize;                   // in scope 0 at $DIR/issue-91633.rs:+2:15: +2:20\n-    let mut _5: bool;                    // in scope 0 at $DIR/issue-91633.rs:+2:15: +2:20\n+    debug it => _1;                      // in scope 0 at $DIR/issue_91633.rs:+0:12: +0:14\n+    let mut _0: &T;                      // return place in scope 0 at $DIR/issue_91633.rs:+0:25: +0:27\n+    let _2: &T;                          // in scope 0 at $DIR/issue_91633.rs:+2:10: +2:11\n+    let _3: usize;                       // in scope 0 at $DIR/issue_91633.rs:+2:18: +2:19\n+    let mut _4: usize;                   // in scope 0 at $DIR/issue_91633.rs:+2:15: +2:20\n+    let mut _5: bool;                    // in scope 0 at $DIR/issue_91633.rs:+2:15: +2:20\n     scope 1 {\n-        debug f => _2;                   // in scope 1 at $DIR/issue-91633.rs:+2:10: +2:11\n+        debug f => _2;                   // in scope 1 at $DIR/issue_91633.rs:+2:10: +2:11\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/issue-91633.rs:+2:10: +2:11\n-        StorageLive(_3);                 // scope 0 at $DIR/issue-91633.rs:+2:18: +2:19\n-        _3 = const 0_usize;              // scope 0 at $DIR/issue-91633.rs:+2:18: +2:19\n-        _4 = Len((*_1));                 // scope 0 at $DIR/issue-91633.rs:+2:15: +2:20\n-        _5 = Lt(_3, _4);                 // scope 0 at $DIR/issue-91633.rs:+2:15: +2:20\n-        assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind: bb2]; // scope 0 at $DIR/issue-91633.rs:+2:15: +2:20\n+        StorageLive(_2);                 // scope 0 at $DIR/issue_91633.rs:+2:10: +2:11\n+        StorageLive(_3);                 // scope 0 at $DIR/issue_91633.rs:+2:18: +2:19\n+        _3 = const 0_usize;              // scope 0 at $DIR/issue_91633.rs:+2:18: +2:19\n+        _4 = Len((*_1));                 // scope 0 at $DIR/issue_91633.rs:+2:15: +2:20\n+        _5 = Lt(_3, _4);                 // scope 0 at $DIR/issue_91633.rs:+2:15: +2:20\n+        assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind: bb2]; // scope 0 at $DIR/issue_91633.rs:+2:15: +2:20\n     }\n \n     bb1: {\n-        _2 = &(*_1)[_3];                 // scope 0 at $DIR/issue-91633.rs:+2:14: +2:20\n-        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/issue-91633.rs:+2:10: +2:11\n-        _0 = &(*_2);                     // scope 1 at $DIR/issue-91633.rs:+3:6: +3:7\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-91633.rs:+4:2: +4:3\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-91633.rs:+4:2: +4:3\n-        return;                          // scope 0 at $DIR/issue-91633.rs:+4:3: +4:3\n+        _2 = &(*_1)[_3];                 // scope 0 at $DIR/issue_91633.rs:+2:14: +2:20\n+        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/issue_91633.rs:+2:10: +2:11\n+        _0 = &(*_2);                     // scope 1 at $DIR/issue_91633.rs:+3:6: +3:7\n+        StorageDead(_3);                 // scope 0 at $DIR/issue_91633.rs:+4:2: +4:3\n+        StorageDead(_2);                 // scope 0 at $DIR/issue_91633.rs:+4:2: +4:3\n+        return;                          // scope 0 at $DIR/issue_91633.rs:+4:3: +4:3\n     }\n \n     bb2 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-91633.rs:+0:1: +4:3\n+        resume;                          // scope 0 at $DIR/issue_91633.rs:+0:1: +4:3\n     }\n }"}, {"sha": "ccb06dd5983f445666e5cd5f3477d71a8dd42aea", "filename": "src/test/mir-opt/issue_91633.hey.built.after.mir", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_91633.hey.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_91633.hey.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_91633.hey.built.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,35 +1,35 @@\n // MIR for `hey` after built\n \n fn hey(_1: &[T]) -> () {\n-    debug it => _1;                      // in scope 0 at $DIR/issue-91633.rs:+0:12: +0:14\n-    let mut _0: ();                      // return place in scope 0 at $DIR/issue-91633.rs:+1:2: +1:2\n-    let mut _2: &<[T] as std::ops::Index<usize>>::Output; // in scope 0 at $DIR/issue-91633.rs:+4:14: +4:20\n-    let _3: &<[T] as std::ops::Index<usize>>::Output; // in scope 0 at $DIR/issue-91633.rs:+4:15: +4:20\n-    let mut _4: &[T];                    // in scope 0 at $DIR/issue-91633.rs:+4:15: +4:17\n+    debug it => _1;                      // in scope 0 at $DIR/issue_91633.rs:+0:12: +0:14\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue_91633.rs:+1:2: +1:2\n+    let mut _2: &<[T] as std::ops::Index<usize>>::Output; // in scope 0 at $DIR/issue_91633.rs:+4:14: +4:20\n+    let _3: &<[T] as std::ops::Index<usize>>::Output; // in scope 0 at $DIR/issue_91633.rs:+4:15: +4:20\n+    let mut _4: &[T];                    // in scope 0 at $DIR/issue_91633.rs:+4:15: +4:17\n     scope 1 {\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/issue-91633.rs:+4:14: +4:20\n-        StorageLive(_3);                 // scope 0 at $DIR/issue-91633.rs:+4:15: +4:20\n-        StorageLive(_4);                 // scope 0 at $DIR/issue-91633.rs:+4:15: +4:17\n-        _4 = &(*_1);                     // scope 0 at $DIR/issue-91633.rs:+4:15: +4:17\n-        _3 = <[T] as Index<usize>>::index(move _4, const 0_usize) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/issue-91633.rs:+4:15: +4:20\n+        StorageLive(_2);                 // scope 0 at $DIR/issue_91633.rs:+4:14: +4:20\n+        StorageLive(_3);                 // scope 0 at $DIR/issue_91633.rs:+4:15: +4:20\n+        StorageLive(_4);                 // scope 0 at $DIR/issue_91633.rs:+4:15: +4:17\n+        _4 = &(*_1);                     // scope 0 at $DIR/issue_91633.rs:+4:15: +4:17\n+        _3 = <[T] as Index<usize>>::index(move _4, const 0_usize) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/issue_91633.rs:+4:15: +4:20\n                                          // mir::Constant\n-                                         // + span: $DIR/issue-91633.rs:7:15: 7:20\n+                                         // + span: $DIR/issue_91633.rs:7:15: 7:20\n                                          // + literal: Const { ty: for<'a> fn(&'a [T], usize) -> &'a <[T] as Index<usize>>::Output {<[T] as Index<usize>>::index}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageDead(_4);                 // scope 0 at $DIR/issue-91633.rs:+4:19: +4:20\n-        _2 = &(*_3);                     // scope 0 at $DIR/issue-91633.rs:+4:14: +4:20\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-91633.rs:+4:20: +4:21\n-        _0 = const ();                   // scope 0 at $DIR/issue-91633.rs:+3:2: +5:3\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-91633.rs:+5:2: +5:3\n-        return;                          // scope 0 at $DIR/issue-91633.rs:+5:3: +5:3\n+        StorageDead(_4);                 // scope 0 at $DIR/issue_91633.rs:+4:19: +4:20\n+        _2 = &(*_3);                     // scope 0 at $DIR/issue_91633.rs:+4:14: +4:20\n+        StorageDead(_2);                 // scope 0 at $DIR/issue_91633.rs:+4:20: +4:21\n+        _0 = const ();                   // scope 0 at $DIR/issue_91633.rs:+3:2: +5:3\n+        StorageDead(_3);                 // scope 0 at $DIR/issue_91633.rs:+5:2: +5:3\n+        return;                          // scope 0 at $DIR/issue_91633.rs:+5:3: +5:3\n     }\n \n     bb2 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-91633.rs:+0:1: +5:3\n+        resume;                          // scope 0 at $DIR/issue_91633.rs:+0:1: +5:3\n     }\n }"}, {"sha": "9127cacc97c5debd487278d63530591e0d0b29c9", "filename": "src/test/mir-opt/issue_91633.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_91633.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_91633.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_91633.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/issue-91633.rs"}, {"sha": "3db40412b2ef47dc727e11d56429671df7c361ee", "filename": "src/test/mir-opt/issue_99325.main.built.after.mir", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_99325.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_99325.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_99325.main.built.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,18 +1,18 @@\n // MIR for `main` after built\n \n | User Type Annotations\n-| 0: user_ty: Canonical { max_universe: U0, variables: [], value: TypeOf(DefId(0:3 ~ issue_99325[8f58]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Value(Branch([Leaf(0x41), Leaf(0x41), Leaf(0x41), Leaf(0x41)])) }], user_self_ty: None }) }, span: $DIR/issue-99325.rs:10:16: 10:46, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n-| 1: user_ty: Canonical { max_universe: U0, variables: [], value: TypeOf(DefId(0:3 ~ issue_99325[8f58]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Unevaluated(UnevaluatedConst { def: WithOptConstParam { did: DefId(0:8 ~ issue_99325[8f58]::main::{constant#1}), const_param_did: Some(DefId(0:4 ~ issue_99325[8f58]::function_with_bytes::BYTES)) }, substs: [] }) }], user_self_ty: None }) }, span: $DIR/issue-99325.rs:11:16: 11:68, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n+| 0: user_ty: Canonical { max_universe: U0, variables: [], value: TypeOf(DefId(0:3 ~ issue_99325[8f58]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Value(Branch([Leaf(0x41), Leaf(0x41), Leaf(0x41), Leaf(0x41)])) }], user_self_ty: None }) }, span: $DIR/issue_99325.rs:10:16: 10:46, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n+| 1: user_ty: Canonical { max_universe: U0, variables: [], value: TypeOf(DefId(0:3 ~ issue_99325[8f58]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Unevaluated(UnevaluatedConst { def: WithOptConstParam { did: DefId(0:8 ~ issue_99325[8f58]::main::{constant#1}), const_param_did: Some(DefId(0:4 ~ issue_99325[8f58]::function_with_bytes::BYTES)) }, substs: [] }) }], user_self_ty: None }) }, span: $DIR/issue_99325.rs:11:16: 11:68, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n |\n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/issue-99325.rs:+0:15: +0:15\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue_99325.rs:+0:15: +0:15\n     let _1: ();                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n     let mut _2: (&&[u8], &&[u8; 4]);     // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n     let mut _3: &&[u8];                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-    let _4: &[u8];                       // in scope 0 at $DIR/issue-99325.rs:+1:16: +1:48\n+    let _4: &[u8];                       // in scope 0 at $DIR/issue_99325.rs:+1:16: +1:48\n     let mut _5: &&[u8; 4];               // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-    let _6: &[u8; 4];                    // in scope 0 at $DIR/issue-99325.rs:+1:50: +1:75\n-    let _7: [u8; 4];                     // in scope 0 at $DIR/issue-99325.rs:+1:51: +1:75\n+    let _6: &[u8; 4];                    // in scope 0 at $DIR/issue_99325.rs:+1:50: +1:75\n+    let _7: [u8; 4];                     // in scope 0 at $DIR/issue_99325.rs:+1:51: +1:75\n     let _8: &&[u8];                      // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n     let _9: &&[u8; 4];                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n     let mut _10: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -30,9 +30,9 @@ fn main() -> () {\n     let _23: ();                         // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n     let mut _24: (&&[u8], &&[u8; 4]);    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n     let mut _25: &&[u8];                 // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-    let _26: &[u8];                      // in scope 0 at $DIR/issue-99325.rs:+2:16: +2:70\n+    let _26: &[u8];                      // in scope 0 at $DIR/issue_99325.rs:+2:16: +2:70\n     let mut _27: &&[u8; 4];              // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-    let _28: &[u8; 4];                   // in scope 0 at $DIR/issue-99325.rs:+2:72: +2:79\n+    let _28: &[u8; 4];                   // in scope 0 at $DIR/issue_99325.rs:+2:72: +2:79\n     let _29: &&[u8];                     // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n     let _30: &&[u8; 4];                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n     let mut _31: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -68,21 +68,21 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageLive(_2);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageLive(_3);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        StorageLive(_4);                 // scope 0 at $DIR/issue-99325.rs:+1:16: +1:48\n-        _4 = function_with_bytes::<&*b\"AAAA\">() -> [return: bb1, unwind: bb19]; // scope 0 at $DIR/issue-99325.rs:+1:16: +1:48\n+        StorageLive(_4);                 // scope 0 at $DIR/issue_99325.rs:+1:16: +1:48\n+        _4 = function_with_bytes::<&*b\"AAAA\">() -> [return: bb1, unwind: bb19]; // scope 0 at $DIR/issue_99325.rs:+1:16: +1:48\n                                          // mir::Constant\n-                                         // + span: $DIR/issue-99325.rs:10:16: 10:46\n+                                         // + span: $DIR/issue_99325.rs:10:16: 10:46\n                                          // + user_ty: UserType(0)\n                                          // + literal: Const { ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n         _3 = &_4;                        // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageLive(_5);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        StorageLive(_6);                 // scope 0 at $DIR/issue-99325.rs:+1:50: +1:75\n-        StorageLive(_7);                 // scope 0 at $DIR/issue-99325.rs:+1:51: +1:75\n-        _7 = [const 65_u8, const 65_u8, const 65_u8, const 65_u8]; // scope 0 at $DIR/issue-99325.rs:+1:51: +1:75\n-        _6 = &_7;                        // scope 0 at $DIR/issue-99325.rs:+1:50: +1:75\n+        StorageLive(_6);                 // scope 0 at $DIR/issue_99325.rs:+1:50: +1:75\n+        StorageLive(_7);                 // scope 0 at $DIR/issue_99325.rs:+1:51: +1:75\n+        _7 = [const 65_u8, const 65_u8, const 65_u8, const 65_u8]; // scope 0 at $DIR/issue_99325.rs:+1:51: +1:75\n+        _6 = &_7;                        // scope 0 at $DIR/issue_99325.rs:+1:50: +1:75\n         _5 = &_6;                        // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _2 = (move _3, move _5);         // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageDead(_5);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -176,21 +176,21 @@ fn main() -> () {\n         StorageLive(_23);                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageLive(_24);                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageLive(_25);                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        StorageLive(_26);                // scope 0 at $DIR/issue-99325.rs:+2:16: +2:70\n-        _26 = function_with_bytes::<&*b\"AAAA\">() -> [return: bb10, unwind: bb19]; // scope 0 at $DIR/issue-99325.rs:+2:16: +2:70\n+        StorageLive(_26);                // scope 0 at $DIR/issue_99325.rs:+2:16: +2:70\n+        _26 = function_with_bytes::<&*b\"AAAA\">() -> [return: bb10, unwind: bb19]; // scope 0 at $DIR/issue_99325.rs:+2:16: +2:70\n                                          // mir::Constant\n-                                         // + span: $DIR/issue-99325.rs:11:16: 11:68\n+                                         // + span: $DIR/issue_99325.rs:11:16: 11:68\n                                          // + user_ty: UserType(1)\n                                          // + literal: Const { ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}, val: Value(<ZST>) }\n     }\n \n     bb10: {\n         _25 = &_26;                      // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageLive(_27);                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        StorageLive(_28);                // scope 0 at $DIR/issue-99325.rs:+2:72: +2:79\n-        _28 = const b\"AAAA\";             // scope 0 at $DIR/issue-99325.rs:+2:72: +2:79\n+        StorageLive(_28);                // scope 0 at $DIR/issue_99325.rs:+2:72: +2:79\n+        _28 = const b\"AAAA\";             // scope 0 at $DIR/issue_99325.rs:+2:72: +2:79\n                                          // mir::Constant\n-                                         // + span: $DIR/issue-99325.rs:11:72: 11:79\n+                                         // + span: $DIR/issue_99325.rs:11:72: 11:79\n                                          // + literal: Const { ty: &[u8; 4], val: Value(Scalar(alloc4)) }\n         _27 = &_28;                      // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _24 = (move _25, move _27);      // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -281,12 +281,12 @@ fn main() -> () {\n         StorageDead(_26);                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageDead(_24);                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageDead(_23);                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        _0 = const ();                   // scope 0 at $DIR/issue-99325.rs:+0:15: +3:2\n-        return;                          // scope 0 at $DIR/issue-99325.rs:+3:2: +3:2\n+        _0 = const ();                   // scope 0 at $DIR/issue_99325.rs:+0:15: +3:2\n+        return;                          // scope 0 at $DIR/issue_99325.rs:+3:2: +3:2\n     }\n \n     bb19 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-99325.rs:+0:1: +3:2\n+        resume;                          // scope 0 at $DIR/issue_99325.rs:+0:1: +3:2\n     }\n }\n "}, {"sha": "fe819cddb2c34b6e7997454c58997432fa438cea", "filename": "src/test/mir-opt/issue_99325.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_99325.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissue_99325.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_99325.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/issue-99325.rs"}, {"sha": "1cfa41b4daa49d49908d3ecc1fc6e606401b6b62", "filename": "src/test/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,14 +1,14 @@\n // MIR for `num_to_digit` after PreCodegen\n \n fn num_to_digit(_1: char) -> u32 {\n-    debug num => _1;                     // in scope 0 at $DIR/issue-59352.rs:+0:21: +0:24\n-    let mut _0: u32;                     // return place in scope 0 at $DIR/issue-59352.rs:+0:35: +0:38\n-    let mut _2: char;                    // in scope 0 at $DIR/issue-59352.rs:+2:8: +2:11\n-    let mut _3: std::option::Option<u32>; // in scope 0 at $DIR/issue-59352.rs:+2:26: +2:41\n-    let mut _4: char;                    // in scope 0 at $DIR/issue-59352.rs:+2:26: +2:29\n-    let mut _5: u32;                     // in scope 0 at $DIR/issue-59352.rs:+2:8: +2:23\n+    debug num => _1;                     // in scope 0 at $DIR/issue_59352.rs:+0:21: +0:24\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/issue_59352.rs:+0:35: +0:38\n+    let mut _2: char;                    // in scope 0 at $DIR/issue_59352.rs:+2:8: +2:11\n+    let mut _3: std::option::Option<u32>; // in scope 0 at $DIR/issue_59352.rs:+2:26: +2:41\n+    let mut _4: char;                    // in scope 0 at $DIR/issue_59352.rs:+2:26: +2:29\n+    let mut _5: u32;                     // in scope 0 at $DIR/issue_59352.rs:+2:8: +2:23\n     let mut _12: isize;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-    scope 1 (inlined char::methods::<impl char>::is_digit) { // at $DIR/issue-59352.rs:14:8: 14:23\n+    scope 1 (inlined char::methods::<impl char>::is_digit) { // at $DIR/issue_59352.rs:14:8: 14:23\n         debug self => _2;                // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         debug radix => _5;               // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         let mut _6: &std::option::Option<u32>; // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n@@ -19,7 +19,7 @@ fn num_to_digit(_1: char) -> u32 {\n             let mut _9: isize;           // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n         }\n     }\n-    scope 3 (inlined #[track_caller] Option::<u32>::unwrap) { // at $DIR/issue-59352.rs:14:26: 14:50\n+    scope 3 (inlined #[track_caller] Option::<u32>::unwrap) { // at $DIR/issue_59352.rs:14:26: 14:50\n         debug self => _3;                // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n         let mut _10: isize;              // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n         let mut _11: !;                  // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n@@ -29,9 +29,9 @@ fn num_to_digit(_1: char) -> u32 {\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/issue-59352.rs:+2:8: +2:11\n-        _2 = _1;                         // scope 0 at $DIR/issue-59352.rs:+2:8: +2:11\n-        StorageLive(_5);                 // scope 0 at $DIR/issue-59352.rs:+2:8: +2:23\n+        StorageLive(_2);                 // scope 0 at $DIR/issue_59352.rs:+2:8: +2:11\n+        _2 = _1;                         // scope 0 at $DIR/issue_59352.rs:+2:8: +2:11\n+        StorageLive(_5);                 // scope 0 at $DIR/issue_59352.rs:+2:8: +2:23\n         StorageLive(_6);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         StorageLive(_7);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         StorageLive(_8);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n@@ -43,30 +43,30 @@ fn num_to_digit(_1: char) -> u32 {\n     }\n \n     bb1: {\n-        StorageDead(_12);                // scope 0 at $DIR/issue-59352.rs:+2:8: +2:23\n-        StorageLive(_3);                 // scope 0 at $DIR/issue-59352.rs:+2:26: +2:41\n-        StorageLive(_4);                 // scope 0 at $DIR/issue-59352.rs:+2:26: +2:29\n-        _4 = _1;                         // scope 0 at $DIR/issue-59352.rs:+2:26: +2:29\n-        _3 = char::methods::<impl char>::to_digit(move _4, const 8_u32) -> bb2; // scope 0 at $DIR/issue-59352.rs:+2:26: +2:41\n+        StorageDead(_12);                // scope 0 at $DIR/issue_59352.rs:+2:8: +2:23\n+        StorageLive(_3);                 // scope 0 at $DIR/issue_59352.rs:+2:26: +2:41\n+        StorageLive(_4);                 // scope 0 at $DIR/issue_59352.rs:+2:26: +2:29\n+        _4 = _1;                         // scope 0 at $DIR/issue_59352.rs:+2:26: +2:29\n+        _3 = char::methods::<impl char>::to_digit(move _4, const 8_u32) -> bb2; // scope 0 at $DIR/issue_59352.rs:+2:26: +2:41\n                                          // mir::Constant\n-                                         // + span: $DIR/issue-59352.rs:14:30: 14:38\n+                                         // + span: $DIR/issue_59352.rs:14:30: 14:38\n                                          // + literal: Const { ty: fn(char, u32) -> Option<u32> {char::methods::<impl char>::to_digit}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        StorageDead(_4);                 // scope 0 at $DIR/issue-59352.rs:+2:40: +2:41\n+        StorageDead(_4);                 // scope 0 at $DIR/issue_59352.rs:+2:40: +2:41\n         _10 = discriminant(_3);          // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n         switchInt(move _10) -> [0_isize: bb6, 1_isize: bb8, otherwise: bb7]; // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n     }\n \n     bb3: {\n-        StorageDead(_12);                // scope 0 at $DIR/issue-59352.rs:+2:8: +2:23\n-        _0 = const 0_u32;                // scope 0 at $DIR/issue-59352.rs:+2:60: +2:61\n-        goto -> bb4;                     // scope 0 at $DIR/issue-59352.rs:+2:5: +2:63\n+        StorageDead(_12);                // scope 0 at $DIR/issue_59352.rs:+2:8: +2:23\n+        _0 = const 0_u32;                // scope 0 at $DIR/issue_59352.rs:+2:60: +2:61\n+        goto -> bb4;                     // scope 0 at $DIR/issue_59352.rs:+2:5: +2:63\n     }\n \n     bb4: {\n-        return;                          // scope 0 at $DIR/issue-59352.rs:+3:2: +3:2\n+        return;                          // scope 0 at $DIR/issue_59352.rs:+3:2: +3:2\n     }\n \n     bb5: {\n@@ -77,9 +77,9 @@ fn num_to_digit(_1: char) -> u32 {\n         _12 = move _9;                   // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageDead(_6);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         StorageDead(_7);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        StorageDead(_5);                 // scope 0 at $DIR/issue-59352.rs:+2:8: +2:23\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-59352.rs:+2:22: +2:23\n-        switchInt(move _12) -> [1_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/issue-59352.rs:+2:8: +2:23\n+        StorageDead(_5);                 // scope 0 at $DIR/issue_59352.rs:+2:8: +2:23\n+        StorageDead(_2);                 // scope 0 at $DIR/issue_59352.rs:+2:22: +2:23\n+        switchInt(move _12) -> [1_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/issue_59352.rs:+2:8: +2:23\n     }\n \n     bb6: {\n@@ -99,7 +99,7 @@ fn num_to_digit(_1: char) -> u32 {\n \n     bb8: {\n         _0 = move ((_3 as Some).0: u32); // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-59352.rs:+2:49: +2:50\n-        goto -> bb4;                     // scope 0 at $DIR/issue-59352.rs:+2:5: +2:63\n+        StorageDead(_3);                 // scope 0 at $DIR/issue_59352.rs:+2:49: +2:50\n+        goto -> bb4;                     // scope 0 at $DIR/issue_59352.rs:+2:5: +2:63\n     }\n }"}, {"sha": "1e0045555ab84d5906768003b7a02541652cb7aa", "filename": "src/test/mir-opt/issues/issue_59352.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/issues/issue-59352.rs"}, {"sha": "87066cc62c02a6b1e32dbab67c84bd7931997890", "filename": "src/test/mir-opt/issues/issue_75439.foo.MatchBranchSimplification.diff", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,17 +2,17 @@\n + // MIR for `foo` after MatchBranchSimplification\n   \n   fn foo(_1: [u8; 16]) -> Option<[u8; 4]> {\n-      debug bytes => _1;                   // in scope 0 at $DIR/issue-75439.rs:+0:12: +0:17\n-      let mut _0: std::option::Option<[u8; 4]>; // return place in scope 0 at $DIR/issue-75439.rs:+0:32: +0:47\n-      let _2: [u32; 4];                    // in scope 0 at $DIR/issue-75439.rs:+2:9: +2:15\n-      let mut _3: [u8; 16];                // in scope 0 at $DIR/issue-75439.rs:+2:47: +2:52\n-      let mut _5: [u8; 4];                 // in scope 0 at $DIR/issue-75439.rs:+5:14: +5:38\n-      let mut _6: u32;                     // in scope 0 at $DIR/issue-75439.rs:+5:33: +5:35\n+      debug bytes => _1;                   // in scope 0 at $DIR/issue_75439.rs:+0:12: +0:17\n+      let mut _0: std::option::Option<[u8; 4]>; // return place in scope 0 at $DIR/issue_75439.rs:+0:32: +0:47\n+      let _2: [u32; 4];                    // in scope 0 at $DIR/issue_75439.rs:+2:9: +2:15\n+      let mut _3: [u8; 16];                // in scope 0 at $DIR/issue_75439.rs:+2:47: +2:52\n+      let mut _5: [u8; 4];                 // in scope 0 at $DIR/issue_75439.rs:+5:14: +5:38\n+      let mut _6: u32;                     // in scope 0 at $DIR/issue_75439.rs:+5:33: +5:35\n       scope 1 {\n-          debug dwords => _2;              // in scope 1 at $DIR/issue-75439.rs:+2:9: +2:15\n+          debug dwords => _2;              // in scope 1 at $DIR/issue_75439.rs:+2:9: +2:15\n           scope 3 {\n-              debug ip => _4;              // in scope 3 at $DIR/issue-75439.rs:+4:27: +4:29\n-              let _4: u32;                 // in scope 3 at $DIR/issue-75439.rs:+4:27: +4:29\n+              debug ip => _4;              // in scope 3 at $DIR/issue_75439.rs:+4:27: +4:29\n+              let _4: u32;                 // in scope 3 at $DIR/issue_75439.rs:+4:27: +4:29\n               scope 4 {\n               }\n           }\n@@ -21,69 +21,69 @@\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/issue-75439.rs:+2:9: +2:15\n-          StorageLive(_3);                 // scope 2 at $DIR/issue-75439.rs:+2:47: +2:52\n-          _3 = _1;                         // scope 2 at $DIR/issue-75439.rs:+2:47: +2:52\n-          _2 = transmute::<[u8; 16], [u32; 4]>(move _3) -> bb1; // scope 2 at $DIR/issue-75439.rs:+2:37: +2:53\n+          StorageLive(_2);                 // scope 0 at $DIR/issue_75439.rs:+2:9: +2:15\n+          StorageLive(_3);                 // scope 2 at $DIR/issue_75439.rs:+2:47: +2:52\n+          _3 = _1;                         // scope 2 at $DIR/issue_75439.rs:+2:47: +2:52\n+          _2 = transmute::<[u8; 16], [u32; 4]>(move _3) -> bb1; // scope 2 at $DIR/issue_75439.rs:+2:37: +2:53\n                                            // mir::Constant\n-                                           // + span: $DIR/issue-75439.rs:7:37: 7:46\n+                                           // + span: $DIR/issue_75439.rs:7:37: 7:46\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn([u8; 16]) -> [u32; 4] {transmute::<[u8; 16], [u32; 4]>}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 2 at $DIR/issue-75439.rs:+2:52: +2:53\n-          switchInt(_2[0 of 4]) -> [0_u32: bb2, otherwise: bb8]; // scope 3 at $DIR/issue-75439.rs:+4:12: +4:30\n+          StorageDead(_3);                 // scope 2 at $DIR/issue_75439.rs:+2:52: +2:53\n+          switchInt(_2[0 of 4]) -> [0_u32: bb2, otherwise: bb8]; // scope 3 at $DIR/issue_75439.rs:+4:12: +4:30\n       }\n   \n       bb2: {\n-          switchInt(_2[1 of 4]) -> [0_u32: bb3, otherwise: bb8]; // scope 3 at $DIR/issue-75439.rs:+4:12: +4:30\n+          switchInt(_2[1 of 4]) -> [0_u32: bb3, otherwise: bb8]; // scope 3 at $DIR/issue_75439.rs:+4:12: +4:30\n       }\n   \n       bb3: {\n-          switchInt(_2[2 of 4]) -> [0_u32: bb5, 4294901760_u32: bb6, otherwise: bb8]; // scope 3 at $DIR/issue-75439.rs:+4:12: +4:30\n+          switchInt(_2[2 of 4]) -> [0_u32: bb5, 4294901760_u32: bb6, otherwise: bb8]; // scope 3 at $DIR/issue_75439.rs:+4:12: +4:30\n       }\n   \n       bb4: {\n-          StorageLive(_5);                 // scope 3 at $DIR/issue-75439.rs:+5:14: +5:38\n-          StorageLive(_6);                 // scope 4 at $DIR/issue-75439.rs:+5:33: +5:35\n-          _6 = _4;                         // scope 4 at $DIR/issue-75439.rs:+5:33: +5:35\n-          _5 = transmute::<u32, [u8; 4]>(move _6) -> bb7; // scope 4 at $DIR/issue-75439.rs:+5:23: +5:36\n+          StorageLive(_5);                 // scope 3 at $DIR/issue_75439.rs:+5:14: +5:38\n+          StorageLive(_6);                 // scope 4 at $DIR/issue_75439.rs:+5:33: +5:35\n+          _6 = _4;                         // scope 4 at $DIR/issue_75439.rs:+5:33: +5:35\n+          _5 = transmute::<u32, [u8; 4]>(move _6) -> bb7; // scope 4 at $DIR/issue_75439.rs:+5:23: +5:36\n                                            // mir::Constant\n-                                           // + span: $DIR/issue-75439.rs:10:23: 10:32\n+                                           // + span: $DIR/issue_75439.rs:10:23: 10:32\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u32) -> [u8; 4] {transmute::<u32, [u8; 4]>}, val: Value(<ZST>) }\n       }\n   \n       bb5: {\n-          StorageLive(_4);                 // scope 3 at $DIR/issue-75439.rs:+4:27: +4:29\n-          _4 = _2[3 of 4];                 // scope 3 at $DIR/issue-75439.rs:+4:27: +4:29\n-          goto -> bb4;                     // scope 3 at $DIR/issue-75439.rs:+4:12: +4:30\n+          StorageLive(_4);                 // scope 3 at $DIR/issue_75439.rs:+4:27: +4:29\n+          _4 = _2[3 of 4];                 // scope 3 at $DIR/issue_75439.rs:+4:27: +4:29\n+          goto -> bb4;                     // scope 3 at $DIR/issue_75439.rs:+4:12: +4:30\n       }\n   \n       bb6: {\n-          StorageLive(_4);                 // scope 3 at $DIR/issue-75439.rs:+4:27: +4:29\n-          _4 = _2[3 of 4];                 // scope 3 at $DIR/issue-75439.rs:+4:27: +4:29\n-          goto -> bb4;                     // scope 3 at $DIR/issue-75439.rs:+4:12: +4:30\n+          StorageLive(_4);                 // scope 3 at $DIR/issue_75439.rs:+4:27: +4:29\n+          _4 = _2[3 of 4];                 // scope 3 at $DIR/issue_75439.rs:+4:27: +4:29\n+          goto -> bb4;                     // scope 3 at $DIR/issue_75439.rs:+4:12: +4:30\n       }\n   \n       bb7: {\n-          StorageDead(_6);                 // scope 4 at $DIR/issue-75439.rs:+5:35: +5:36\n-          Deinit(_0);                      // scope 3 at $DIR/issue-75439.rs:+5:9: +5:39\n-          ((_0 as Some).0: [u8; 4]) = move _5; // scope 3 at $DIR/issue-75439.rs:+5:9: +5:39\n-          discriminant(_0) = 1;            // scope 3 at $DIR/issue-75439.rs:+5:9: +5:39\n-          StorageDead(_5);                 // scope 3 at $DIR/issue-75439.rs:+5:38: +5:39\n-          StorageDead(_4);                 // scope 1 at $DIR/issue-75439.rs:+6:5: +6:6\n-          goto -> bb9;                     // scope 1 at $DIR/issue-75439.rs:+4:5: +8:6\n+          StorageDead(_6);                 // scope 4 at $DIR/issue_75439.rs:+5:35: +5:36\n+          Deinit(_0);                      // scope 3 at $DIR/issue_75439.rs:+5:9: +5:39\n+          ((_0 as Some).0: [u8; 4]) = move _5; // scope 3 at $DIR/issue_75439.rs:+5:9: +5:39\n+          discriminant(_0) = 1;            // scope 3 at $DIR/issue_75439.rs:+5:9: +5:39\n+          StorageDead(_5);                 // scope 3 at $DIR/issue_75439.rs:+5:38: +5:39\n+          StorageDead(_4);                 // scope 1 at $DIR/issue_75439.rs:+6:5: +6:6\n+          goto -> bb9;                     // scope 1 at $DIR/issue_75439.rs:+4:5: +8:6\n       }\n   \n       bb8: {\n-          Deinit(_0);                      // scope 1 at $DIR/issue-75439.rs:+7:9: +7:13\n-          discriminant(_0) = 0;            // scope 1 at $DIR/issue-75439.rs:+7:9: +7:13\n-          goto -> bb9;                     // scope 1 at $DIR/issue-75439.rs:+4:5: +8:6\n+          Deinit(_0);                      // scope 1 at $DIR/issue_75439.rs:+7:9: +7:13\n+          discriminant(_0) = 0;            // scope 1 at $DIR/issue_75439.rs:+7:9: +7:13\n+          goto -> bb9;                     // scope 1 at $DIR/issue_75439.rs:+4:5: +8:6\n       }\n   \n       bb9: {\n-          StorageDead(_2);                 // scope 0 at $DIR/issue-75439.rs:+9:1: +9:2\n-          return;                          // scope 0 at $DIR/issue-75439.rs:+9:2: +9:2\n+          StorageDead(_2);                 // scope 0 at $DIR/issue_75439.rs:+9:1: +9:2\n+          return;                          // scope 0 at $DIR/issue_75439.rs:+9:2: +9:2\n       }\n   }\n   "}, {"sha": "ae2e036312e88373f7f3804d191bed8932afc681", "filename": "src/test/mir-opt/issues/issue_75439.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/issues/issue-75439.rs"}, {"sha": "d3db3b182717d3c2a1177b421aef1cb92ce4a218", "filename": "src/test/mir-opt/match_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "status": "modified", "additions": 145, "deletions": 145, "changes": 290, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,271 +2,271 @@\n + // MIR for `complicated_match` after ElaborateDrops\n   \n   fn complicated_match(_1: bool, _2: (bool, bool, String)) -> i32 {\n-      debug cond => _1;                    // in scope 0 at $DIR/match-arm-scopes.rs:+0:22: +0:26\n-      debug items => _2;                   // in scope 0 at $DIR/match-arm-scopes.rs:+0:34: +0:39\n-      let mut _0: i32;                     // return place in scope 0 at $DIR/match-arm-scopes.rs:+0:66: +0:69\n-      let mut _3: &bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:+1:11: +1:16\n-      let mut _4: &bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:+1:11: +1:16\n-      let _5: bool;                        // in scope 0 at $DIR/match-arm-scopes.rs:+2:17: +2:18\n-      let _6: &bool;                       // in scope 0 at $DIR/match-arm-scopes.rs:+2:17: +2:18\n-      let _7: std::string::String;         // in scope 0 at $DIR/match-arm-scopes.rs:+2:20: +2:21\n-      let _8: &std::string::String;        // in scope 0 at $DIR/match-arm-scopes.rs:+2:20: +2:21\n-      let mut _9: bool;                    // in scope 0 at $DIR/match-arm-scopes.rs:+2:42: +2:73\n-      let mut _10: bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:+2:45: +2:49\n-      let mut _11: !;                      // in scope 0 at $DIR/match-arm-scopes.rs:+2:52: +2:60\n-      let mut _12: bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:+2:42: +2:73\n-      let mut _13: bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:+2:45: +2:49\n-      let mut _14: !;                      // in scope 0 at $DIR/match-arm-scopes.rs:+2:52: +2:60\n-      let _15: bool;                       // in scope 0 at $DIR/match-arm-scopes.rs:+3:16: +3:17\n-      let _16: std::string::String;        // in scope 0 at $DIR/match-arm-scopes.rs:+3:19: +3:20\n+      debug cond => _1;                    // in scope 0 at $DIR/match_arm_scopes.rs:+0:22: +0:26\n+      debug items => _2;                   // in scope 0 at $DIR/match_arm_scopes.rs:+0:34: +0:39\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/match_arm_scopes.rs:+0:66: +0:69\n+      let mut _3: &bool;                   // in scope 0 at $DIR/match_arm_scopes.rs:+1:11: +1:16\n+      let mut _4: &bool;                   // in scope 0 at $DIR/match_arm_scopes.rs:+1:11: +1:16\n+      let _5: bool;                        // in scope 0 at $DIR/match_arm_scopes.rs:+2:17: +2:18\n+      let _6: &bool;                       // in scope 0 at $DIR/match_arm_scopes.rs:+2:17: +2:18\n+      let _7: std::string::String;         // in scope 0 at $DIR/match_arm_scopes.rs:+2:20: +2:21\n+      let _8: &std::string::String;        // in scope 0 at $DIR/match_arm_scopes.rs:+2:20: +2:21\n+      let mut _9: bool;                    // in scope 0 at $DIR/match_arm_scopes.rs:+2:42: +2:73\n+      let mut _10: bool;                   // in scope 0 at $DIR/match_arm_scopes.rs:+2:45: +2:49\n+      let mut _11: !;                      // in scope 0 at $DIR/match_arm_scopes.rs:+2:52: +2:60\n+      let mut _12: bool;                   // in scope 0 at $DIR/match_arm_scopes.rs:+2:42: +2:73\n+      let mut _13: bool;                   // in scope 0 at $DIR/match_arm_scopes.rs:+2:45: +2:49\n+      let mut _14: !;                      // in scope 0 at $DIR/match_arm_scopes.rs:+2:52: +2:60\n+      let _15: bool;                       // in scope 0 at $DIR/match_arm_scopes.rs:+3:16: +3:17\n+      let _16: std::string::String;        // in scope 0 at $DIR/match_arm_scopes.rs:+3:19: +3:20\n       scope 1 {\n-          debug a => _5;                   // in scope 1 at $DIR/match-arm-scopes.rs:+2:17: +2:18\n-          debug a => _6;                   // in scope 1 at $DIR/match-arm-scopes.rs:+2:17: +2:18\n-          debug s => _7;                   // in scope 1 at $DIR/match-arm-scopes.rs:+2:20: +2:21\n-          debug s => _8;                   // in scope 1 at $DIR/match-arm-scopes.rs:+2:20: +2:21\n+          debug a => _5;                   // in scope 1 at $DIR/match_arm_scopes.rs:+2:17: +2:18\n+          debug a => _6;                   // in scope 1 at $DIR/match_arm_scopes.rs:+2:17: +2:18\n+          debug s => _7;                   // in scope 1 at $DIR/match_arm_scopes.rs:+2:20: +2:21\n+          debug s => _8;                   // in scope 1 at $DIR/match_arm_scopes.rs:+2:20: +2:21\n       }\n       scope 2 {\n-          debug b => _15;                  // in scope 2 at $DIR/match-arm-scopes.rs:+3:16: +3:17\n-          debug t => _16;                  // in scope 2 at $DIR/match-arm-scopes.rs:+3:19: +3:20\n+          debug b => _15;                  // in scope 2 at $DIR/match_arm_scopes.rs:+3:16: +3:17\n+          debug t => _16;                  // in scope 2 at $DIR/match_arm_scopes.rs:+3:19: +3:20\n       }\n   \n       bb0: {\n--         FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match-arm-scopes.rs:+1:11: +1:16\n--         switchInt((_2.0: bool)) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/match-arm-scopes.rs:+1:5: +1:16\n-+         switchInt((_2.0: bool)) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:+1:5: +1:16\n+-         FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match_arm_scopes.rs:+1:11: +1:16\n+-         switchInt((_2.0: bool)) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/match_arm_scopes.rs:+1:5: +1:16\n++         switchInt((_2.0: bool)) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/match_arm_scopes.rs:+1:5: +1:16\n       }\n   \n       bb1: {\n--         falseEdge -> [real: bb8, imaginary: bb3]; // scope 0 at $DIR/match-arm-scopes.rs:+2:9: +2:22\n-+         switchInt((_2.1: bool)) -> [false: bb10, otherwise: bb2]; // scope 0 at $DIR/match-arm-scopes.rs:+1:5: +1:16\n+-         falseEdge -> [real: bb8, imaginary: bb3]; // scope 0 at $DIR/match_arm_scopes.rs:+2:9: +2:22\n++         switchInt((_2.1: bool)) -> [false: bb10, otherwise: bb2]; // scope 0 at $DIR/match_arm_scopes.rs:+1:5: +1:16\n       }\n   \n       bb2: {\n--         switchInt((_2.1: bool)) -> [false: bb3, otherwise: bb4]; // scope 0 at $DIR/match-arm-scopes.rs:+1:5: +1:16\n-+         switchInt((_2.0: bool)) -> [false: bb3, otherwise: bb17]; // scope 0 at $DIR/match-arm-scopes.rs:+1:5: +1:16\n+-         switchInt((_2.1: bool)) -> [false: bb3, otherwise: bb4]; // scope 0 at $DIR/match_arm_scopes.rs:+1:5: +1:16\n++         switchInt((_2.0: bool)) -> [false: bb3, otherwise: bb17]; // scope 0 at $DIR/match_arm_scopes.rs:+1:5: +1:16\n       }\n   \n       bb3: {\n--         falseEdge -> [real: bb13, imaginary: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:+2:25: +2:38\n+-         falseEdge -> [real: bb13, imaginary: bb5]; // scope 0 at $DIR/match_arm_scopes.rs:+2:25: +2:38\n -     }\n - \n -     bb4: {\n--         switchInt((_2.0: bool)) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:+1:5: +1:16\n+-         switchInt((_2.0: bool)) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/match_arm_scopes.rs:+1:5: +1:16\n -     }\n - \n -     bb5: {\n--         falseEdge -> [real: bb20, imaginary: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:+3:9: +3:21\n+-         falseEdge -> [real: bb20, imaginary: bb6]; // scope 0 at $DIR/match_arm_scopes.rs:+3:9: +3:21\n -     }\n - \n -     bb6: {\n-          StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:+3:32: +3:33\n-          _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:+3:32: +3:33\n-          StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:+3:35: +3:36\n-          _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:+3:35: +3:36\n--         goto -> bb19;                    // scope 0 at $DIR/match-arm-scopes.rs:+1:5: +4:6\n-+         goto -> bb16;                    // scope 0 at $DIR/match-arm-scopes.rs:+1:5: +4:6\n+          StorageLive(_15);                // scope 0 at $DIR/match_arm_scopes.rs:+3:32: +3:33\n+          _15 = (_2.1: bool);              // scope 0 at $DIR/match_arm_scopes.rs:+3:32: +3:33\n+          StorageLive(_16);                // scope 0 at $DIR/match_arm_scopes.rs:+3:35: +3:36\n+          _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match_arm_scopes.rs:+3:35: +3:36\n+-         goto -> bb19;                    // scope 0 at $DIR/match_arm_scopes.rs:+1:5: +4:6\n++         goto -> bb16;                    // scope 0 at $DIR/match_arm_scopes.rs:+1:5: +4:6\n       }\n   \n -     bb7: {\n +     bb4: {\n-          _0 = const 1_i32;                // scope 1 at $DIR/match-arm-scopes.rs:+2:77: +2:78\n--         drop(_7) -> [return: bb18, unwind: bb25]; // scope 0 at $DIR/match-arm-scopes.rs:+2:77: +2:78\n-+         drop(_7) -> [return: bb15, unwind: bb22]; // scope 0 at $DIR/match-arm-scopes.rs:+2:77: +2:78\n+          _0 = const 1_i32;                // scope 1 at $DIR/match_arm_scopes.rs:+2:77: +2:78\n+-         drop(_7) -> [return: bb18, unwind: bb25]; // scope 0 at $DIR/match_arm_scopes.rs:+2:77: +2:78\n++         drop(_7) -> [return: bb15, unwind: bb22]; // scope 0 at $DIR/match_arm_scopes.rs:+2:77: +2:78\n       }\n   \n -     bb8: {\n +     bb5: {\n-          StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:+2:17: +2:18\n-          _6 = &(_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:+2:17: +2:18\n-          StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:+2:20: +2:21\n-          _8 = &(_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:+2:20: +2:21\n--         _3 = &shallow (_2.0: bool);      // scope 0 at $DIR/match-arm-scopes.rs:+1:11: +1:16\n--         _4 = &shallow (_2.1: bool);      // scope 0 at $DIR/match-arm-scopes.rs:+1:11: +1:16\n-          StorageLive(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:+2:42: +2:73\n-          StorageLive(_10);                // scope 0 at $DIR/match-arm-scopes.rs:+2:45: +2:49\n-          _10 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:+2:45: +2:49\n--         switchInt(move _10) -> [false: bb10, otherwise: bb9]; // scope 0 at $DIR/match-arm-scopes.rs:+2:45: +2:49\n-+         switchInt(move _10) -> [false: bb7, otherwise: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:+2:45: +2:49\n+          StorageLive(_6);                 // scope 0 at $DIR/match_arm_scopes.rs:+2:17: +2:18\n+          _6 = &(_2.1: bool);              // scope 0 at $DIR/match_arm_scopes.rs:+2:17: +2:18\n+          StorageLive(_8);                 // scope 0 at $DIR/match_arm_scopes.rs:+2:20: +2:21\n+          _8 = &(_2.2: std::string::String); // scope 0 at $DIR/match_arm_scopes.rs:+2:20: +2:21\n+-         _3 = &shallow (_2.0: bool);      // scope 0 at $DIR/match_arm_scopes.rs:+1:11: +1:16\n+-         _4 = &shallow (_2.1: bool);      // scope 0 at $DIR/match_arm_scopes.rs:+1:11: +1:16\n+          StorageLive(_9);                 // scope 0 at $DIR/match_arm_scopes.rs:+2:42: +2:73\n+          StorageLive(_10);                // scope 0 at $DIR/match_arm_scopes.rs:+2:45: +2:49\n+          _10 = _1;                        // scope 0 at $DIR/match_arm_scopes.rs:+2:45: +2:49\n+-         switchInt(move _10) -> [false: bb10, otherwise: bb9]; // scope 0 at $DIR/match_arm_scopes.rs:+2:45: +2:49\n++         switchInt(move _10) -> [false: bb7, otherwise: bb6]; // scope 0 at $DIR/match_arm_scopes.rs:+2:45: +2:49\n       }\n   \n -     bb9: {\n +     bb6: {\n-          _0 = const 3_i32;                // scope 0 at $DIR/match-arm-scopes.rs:+2:59: +2:60\n-          StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:+2:72: +2:73\n-          StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:+2:72: +2:73\n+          _0 = const 3_i32;                // scope 0 at $DIR/match_arm_scopes.rs:+2:59: +2:60\n+          StorageDead(_10);                // scope 0 at $DIR/match_arm_scopes.rs:+2:72: +2:73\n+          StorageDead(_9);                 // scope 0 at $DIR/match_arm_scopes.rs:+2:72: +2:73\n -         goto -> bb23;                    // scope 0 at no-location\n +         goto -> bb20;                    // scope 0 at no-location\n       }\n   \n -     bb10: {\n +     bb7: {\n-          _9 = (*_6);                      // scope 0 at $DIR/match-arm-scopes.rs:+2:70: +2:71\n--         switchInt(move _9) -> [false: bb12, otherwise: bb11]; // scope 0 at $DIR/match-arm-scopes.rs:+2:42: +2:73\n-+         switchInt(move _9) -> [false: bb9, otherwise: bb8]; // scope 0 at $DIR/match-arm-scopes.rs:+2:42: +2:73\n+          _9 = (*_6);                      // scope 0 at $DIR/match_arm_scopes.rs:+2:70: +2:71\n+-         switchInt(move _9) -> [false: bb12, otherwise: bb11]; // scope 0 at $DIR/match_arm_scopes.rs:+2:42: +2:73\n++         switchInt(move _9) -> [false: bb9, otherwise: bb8]; // scope 0 at $DIR/match_arm_scopes.rs:+2:42: +2:73\n       }\n   \n -     bb11: {\n +     bb8: {\n-          StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:+2:72: +2:73\n-          StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:+2:72: +2:73\n--         FakeRead(ForMatchGuard, _3);     // scope 0 at $DIR/match-arm-scopes.rs:+2:72: +2:73\n--         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match-arm-scopes.rs:+2:72: +2:73\n--         FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match-arm-scopes.rs:+2:72: +2:73\n--         FakeRead(ForGuardBinding, _8);   // scope 0 at $DIR/match-arm-scopes.rs:+2:72: +2:73\n-          StorageLive(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:+2:17: +2:18\n-          _5 = (_2.1: bool);               // scope 0 at $DIR/match-arm-scopes.rs:+2:17: +2:18\n-          StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:+2:20: +2:21\n-          _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:+2:20: +2:21\n--         goto -> bb7;                     // scope 0 at $DIR/match-arm-scopes.rs:+1:5: +4:6\n-+         goto -> bb4;                     // scope 0 at $DIR/match-arm-scopes.rs:+1:5: +4:6\n+          StorageDead(_10);                // scope 0 at $DIR/match_arm_scopes.rs:+2:72: +2:73\n+          StorageDead(_9);                 // scope 0 at $DIR/match_arm_scopes.rs:+2:72: +2:73\n+-         FakeRead(ForMatchGuard, _3);     // scope 0 at $DIR/match_arm_scopes.rs:+2:72: +2:73\n+-         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match_arm_scopes.rs:+2:72: +2:73\n+-         FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match_arm_scopes.rs:+2:72: +2:73\n+-         FakeRead(ForGuardBinding, _8);   // scope 0 at $DIR/match_arm_scopes.rs:+2:72: +2:73\n+          StorageLive(_5);                 // scope 0 at $DIR/match_arm_scopes.rs:+2:17: +2:18\n+          _5 = (_2.1: bool);               // scope 0 at $DIR/match_arm_scopes.rs:+2:17: +2:18\n+          StorageLive(_7);                 // scope 0 at $DIR/match_arm_scopes.rs:+2:20: +2:21\n+          _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match_arm_scopes.rs:+2:20: +2:21\n+-         goto -> bb7;                     // scope 0 at $DIR/match_arm_scopes.rs:+1:5: +4:6\n++         goto -> bb4;                     // scope 0 at $DIR/match_arm_scopes.rs:+1:5: +4:6\n       }\n   \n -     bb12: {\n +     bb9: {\n-          StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:+2:72: +2:73\n-          StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:+2:72: +2:73\n-          StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:+2:77: +2:78\n-          StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:+2:77: +2:78\n--         falseEdge -> [real: bb2, imaginary: bb3]; // scope 0 at $DIR/match-arm-scopes.rs:+2:42: +2:73\n-+         goto -> bb1;                     // scope 0 at $DIR/match-arm-scopes.rs:+2:42: +2:73\n+          StorageDead(_10);                // scope 0 at $DIR/match_arm_scopes.rs:+2:72: +2:73\n+          StorageDead(_9);                 // scope 0 at $DIR/match_arm_scopes.rs:+2:72: +2:73\n+          StorageDead(_8);                 // scope 0 at $DIR/match_arm_scopes.rs:+2:77: +2:78\n+          StorageDead(_6);                 // scope 0 at $DIR/match_arm_scopes.rs:+2:77: +2:78\n+-         falseEdge -> [real: bb2, imaginary: bb3]; // scope 0 at $DIR/match_arm_scopes.rs:+2:42: +2:73\n++         goto -> bb1;                     // scope 0 at $DIR/match_arm_scopes.rs:+2:42: +2:73\n       }\n   \n -     bb13: {\n +     bb10: {\n-          StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:+2:26: +2:27\n-          _6 = &(_2.0: bool);              // scope 0 at $DIR/match-arm-scopes.rs:+2:26: +2:27\n-          StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:+2:36: +2:37\n-          _8 = &(_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:+2:36: +2:37\n--         _3 = &shallow (_2.0: bool);      // scope 0 at $DIR/match-arm-scopes.rs:+1:11: +1:16\n--         _4 = &shallow (_2.1: bool);      // scope 0 at $DIR/match-arm-scopes.rs:+1:11: +1:16\n-          StorageLive(_12);                // scope 0 at $DIR/match-arm-scopes.rs:+2:42: +2:73\n-          StorageLive(_13);                // scope 0 at $DIR/match-arm-scopes.rs:+2:45: +2:49\n-          _13 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:+2:45: +2:49\n--         switchInt(move _13) -> [false: bb15, otherwise: bb14]; // scope 0 at $DIR/match-arm-scopes.rs:+2:45: +2:49\n-+         switchInt(move _13) -> [false: bb12, otherwise: bb11]; // scope 0 at $DIR/match-arm-scopes.rs:+2:45: +2:49\n+          StorageLive(_6);                 // scope 0 at $DIR/match_arm_scopes.rs:+2:26: +2:27\n+          _6 = &(_2.0: bool);              // scope 0 at $DIR/match_arm_scopes.rs:+2:26: +2:27\n+          StorageLive(_8);                 // scope 0 at $DIR/match_arm_scopes.rs:+2:36: +2:37\n+          _8 = &(_2.2: std::string::String); // scope 0 at $DIR/match_arm_scopes.rs:+2:36: +2:37\n+-         _3 = &shallow (_2.0: bool);      // scope 0 at $DIR/match_arm_scopes.rs:+1:11: +1:16\n+-         _4 = &shallow (_2.1: bool);      // scope 0 at $DIR/match_arm_scopes.rs:+1:11: +1:16\n+          StorageLive(_12);                // scope 0 at $DIR/match_arm_scopes.rs:+2:42: +2:73\n+          StorageLive(_13);                // scope 0 at $DIR/match_arm_scopes.rs:+2:45: +2:49\n+          _13 = _1;                        // scope 0 at $DIR/match_arm_scopes.rs:+2:45: +2:49\n+-         switchInt(move _13) -> [false: bb15, otherwise: bb14]; // scope 0 at $DIR/match_arm_scopes.rs:+2:45: +2:49\n++         switchInt(move _13) -> [false: bb12, otherwise: bb11]; // scope 0 at $DIR/match_arm_scopes.rs:+2:45: +2:49\n       }\n   \n -     bb14: {\n +     bb11: {\n-          _0 = const 3_i32;                // scope 0 at $DIR/match-arm-scopes.rs:+2:59: +2:60\n-          StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:+2:72: +2:73\n-          StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:+2:72: +2:73\n+          _0 = const 3_i32;                // scope 0 at $DIR/match_arm_scopes.rs:+2:59: +2:60\n+          StorageDead(_13);                // scope 0 at $DIR/match_arm_scopes.rs:+2:72: +2:73\n+          StorageDead(_12);                // scope 0 at $DIR/match_arm_scopes.rs:+2:72: +2:73\n -         goto -> bb23;                    // scope 0 at no-location\n +         goto -> bb20;                    // scope 0 at no-location\n       }\n   \n -     bb15: {\n +     bb12: {\n-          _12 = (*_6);                     // scope 0 at $DIR/match-arm-scopes.rs:+2:70: +2:71\n--         switchInt(move _12) -> [false: bb17, otherwise: bb16]; // scope 0 at $DIR/match-arm-scopes.rs:+2:42: +2:73\n-+         switchInt(move _12) -> [false: bb14, otherwise: bb13]; // scope 0 at $DIR/match-arm-scopes.rs:+2:42: +2:73\n+          _12 = (*_6);                     // scope 0 at $DIR/match_arm_scopes.rs:+2:70: +2:71\n+-         switchInt(move _12) -> [false: bb17, otherwise: bb16]; // scope 0 at $DIR/match_arm_scopes.rs:+2:42: +2:73\n++         switchInt(move _12) -> [false: bb14, otherwise: bb13]; // scope 0 at $DIR/match_arm_scopes.rs:+2:42: +2:73\n       }\n   \n -     bb16: {\n +     bb13: {\n-          StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:+2:72: +2:73\n-          StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:+2:72: +2:73\n--         FakeRead(ForMatchGuard, _3);     // scope 0 at $DIR/match-arm-scopes.rs:+2:72: +2:73\n--         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match-arm-scopes.rs:+2:72: +2:73\n--         FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match-arm-scopes.rs:+2:72: +2:73\n--         FakeRead(ForGuardBinding, _8);   // scope 0 at $DIR/match-arm-scopes.rs:+2:72: +2:73\n-          StorageLive(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:+2:26: +2:27\n-          _5 = (_2.0: bool);               // scope 0 at $DIR/match-arm-scopes.rs:+2:26: +2:27\n-          StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:+2:36: +2:37\n-          _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:+2:36: +2:37\n--         goto -> bb7;                     // scope 0 at $DIR/match-arm-scopes.rs:+1:5: +4:6\n-+         goto -> bb4;                     // scope 0 at $DIR/match-arm-scopes.rs:+1:5: +4:6\n+          StorageDead(_13);                // scope 0 at $DIR/match_arm_scopes.rs:+2:72: +2:73\n+          StorageDead(_12);                // scope 0 at $DIR/match_arm_scopes.rs:+2:72: +2:73\n+-         FakeRead(ForMatchGuard, _3);     // scope 0 at $DIR/match_arm_scopes.rs:+2:72: +2:73\n+-         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match_arm_scopes.rs:+2:72: +2:73\n+-         FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match_arm_scopes.rs:+2:72: +2:73\n+-         FakeRead(ForGuardBinding, _8);   // scope 0 at $DIR/match_arm_scopes.rs:+2:72: +2:73\n+          StorageLive(_5);                 // scope 0 at $DIR/match_arm_scopes.rs:+2:26: +2:27\n+          _5 = (_2.0: bool);               // scope 0 at $DIR/match_arm_scopes.rs:+2:26: +2:27\n+          StorageLive(_7);                 // scope 0 at $DIR/match_arm_scopes.rs:+2:36: +2:37\n+          _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match_arm_scopes.rs:+2:36: +2:37\n+-         goto -> bb7;                     // scope 0 at $DIR/match_arm_scopes.rs:+1:5: +4:6\n++         goto -> bb4;                     // scope 0 at $DIR/match_arm_scopes.rs:+1:5: +4:6\n       }\n   \n -     bb17: {\n +     bb14: {\n-          StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:+2:72: +2:73\n-          StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:+2:72: +2:73\n-          StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:+2:77: +2:78\n-          StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:+2:77: +2:78\n--         falseEdge -> [real: bb4, imaginary: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:+2:42: +2:73\n-+         goto -> bb2;                     // scope 0 at $DIR/match-arm-scopes.rs:+2:42: +2:73\n+          StorageDead(_13);                // scope 0 at $DIR/match_arm_scopes.rs:+2:72: +2:73\n+          StorageDead(_12);                // scope 0 at $DIR/match_arm_scopes.rs:+2:72: +2:73\n+          StorageDead(_8);                 // scope 0 at $DIR/match_arm_scopes.rs:+2:77: +2:78\n+          StorageDead(_6);                 // scope 0 at $DIR/match_arm_scopes.rs:+2:77: +2:78\n+-         falseEdge -> [real: bb4, imaginary: bb5]; // scope 0 at $DIR/match_arm_scopes.rs:+2:42: +2:73\n++         goto -> bb2;                     // scope 0 at $DIR/match_arm_scopes.rs:+2:42: +2:73\n       }\n   \n -     bb18: {\n +     bb15: {\n-          StorageDead(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:+2:77: +2:78\n-          StorageDead(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:+2:77: +2:78\n-          StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:+2:77: +2:78\n-          StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:+2:77: +2:78\n--         goto -> bb22;                    // scope 0 at $DIR/match-arm-scopes.rs:+2:77: +2:78\n-+         goto -> bb19;                    // scope 0 at $DIR/match-arm-scopes.rs:+2:77: +2:78\n+          StorageDead(_7);                 // scope 0 at $DIR/match_arm_scopes.rs:+2:77: +2:78\n+          StorageDead(_5);                 // scope 0 at $DIR/match_arm_scopes.rs:+2:77: +2:78\n+          StorageDead(_8);                 // scope 0 at $DIR/match_arm_scopes.rs:+2:77: +2:78\n+          StorageDead(_6);                 // scope 0 at $DIR/match_arm_scopes.rs:+2:77: +2:78\n+-         goto -> bb22;                    // scope 0 at $DIR/match_arm_scopes.rs:+2:77: +2:78\n++         goto -> bb19;                    // scope 0 at $DIR/match_arm_scopes.rs:+2:77: +2:78\n       }\n   \n -     bb19: {\n +     bb16: {\n-          _0 = const 2_i32;                // scope 2 at $DIR/match-arm-scopes.rs:+3:41: +3:42\n--         drop(_16) -> [return: bb21, unwind: bb25]; // scope 0 at $DIR/match-arm-scopes.rs:+3:41: +3:42\n-+         drop(_16) -> [return: bb18, unwind: bb22]; // scope 0 at $DIR/match-arm-scopes.rs:+3:41: +3:42\n+          _0 = const 2_i32;                // scope 2 at $DIR/match_arm_scopes.rs:+3:41: +3:42\n+-         drop(_16) -> [return: bb21, unwind: bb25]; // scope 0 at $DIR/match_arm_scopes.rs:+3:41: +3:42\n++         drop(_16) -> [return: bb18, unwind: bb22]; // scope 0 at $DIR/match_arm_scopes.rs:+3:41: +3:42\n       }\n   \n -     bb20: {\n +     bb17: {\n-          StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:+3:16: +3:17\n-          _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:+3:16: +3:17\n-          StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:+3:19: +3:20\n-          _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:+3:19: +3:20\n--         goto -> bb19;                    // scope 0 at $DIR/match-arm-scopes.rs:+1:5: +4:6\n-+         goto -> bb16;                    // scope 0 at $DIR/match-arm-scopes.rs:+1:5: +4:6\n+          StorageLive(_15);                // scope 0 at $DIR/match_arm_scopes.rs:+3:16: +3:17\n+          _15 = (_2.1: bool);              // scope 0 at $DIR/match_arm_scopes.rs:+3:16: +3:17\n+          StorageLive(_16);                // scope 0 at $DIR/match_arm_scopes.rs:+3:19: +3:20\n+          _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match_arm_scopes.rs:+3:19: +3:20\n+-         goto -> bb19;                    // scope 0 at $DIR/match_arm_scopes.rs:+1:5: +4:6\n++         goto -> bb16;                    // scope 0 at $DIR/match_arm_scopes.rs:+1:5: +4:6\n       }\n   \n -     bb21: {\n +     bb18: {\n-          StorageDead(_16);                // scope 0 at $DIR/match-arm-scopes.rs:+3:41: +3:42\n-          StorageDead(_15);                // scope 0 at $DIR/match-arm-scopes.rs:+3:41: +3:42\n--         goto -> bb22;                    // scope 0 at $DIR/match-arm-scopes.rs:+3:41: +3:42\n-+         goto -> bb19;                    // scope 0 at $DIR/match-arm-scopes.rs:+3:41: +3:42\n+          StorageDead(_16);                // scope 0 at $DIR/match_arm_scopes.rs:+3:41: +3:42\n+          StorageDead(_15);                // scope 0 at $DIR/match_arm_scopes.rs:+3:41: +3:42\n+-         goto -> bb22;                    // scope 0 at $DIR/match_arm_scopes.rs:+3:41: +3:42\n++         goto -> bb19;                    // scope 0 at $DIR/match_arm_scopes.rs:+3:41: +3:42\n       }\n   \n -     bb22: {\n--         drop(_2) -> [return: bb24, unwind: bb26]; // scope 0 at $DIR/match-arm-scopes.rs:+5:1: +5:2\n+-         drop(_2) -> [return: bb24, unwind: bb26]; // scope 0 at $DIR/match_arm_scopes.rs:+5:1: +5:2\n +     bb19: {\n-+         goto -> bb26;                    // scope 0 at $DIR/match-arm-scopes.rs:+5:1: +5:2\n++         goto -> bb26;                    // scope 0 at $DIR/match_arm_scopes.rs:+5:1: +5:2\n       }\n   \n -     bb23: {\n +     bb20: {\n-          StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:+2:77: +2:78\n-          StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:+2:77: +2:78\n--         drop(_2) -> [return: bb24, unwind: bb26]; // scope 0 at $DIR/match-arm-scopes.rs:+5:1: +5:2\n-+         drop(_2) -> [return: bb21, unwind: bb23]; // scope 0 at $DIR/match-arm-scopes.rs:+5:1: +5:2\n+          StorageDead(_8);                 // scope 0 at $DIR/match_arm_scopes.rs:+2:77: +2:78\n+          StorageDead(_6);                 // scope 0 at $DIR/match_arm_scopes.rs:+2:77: +2:78\n+-         drop(_2) -> [return: bb24, unwind: bb26]; // scope 0 at $DIR/match_arm_scopes.rs:+5:1: +5:2\n++         drop(_2) -> [return: bb21, unwind: bb23]; // scope 0 at $DIR/match_arm_scopes.rs:+5:1: +5:2\n       }\n   \n -     bb24: {\n +     bb21: {\n-          return;                          // scope 0 at $DIR/match-arm-scopes.rs:+5:2: +5:2\n+          return;                          // scope 0 at $DIR/match_arm_scopes.rs:+5:2: +5:2\n       }\n   \n -     bb25 (cleanup): {\n--         drop(_2) -> bb26;                // scope 0 at $DIR/match-arm-scopes.rs:+5:1: +5:2\n+-         drop(_2) -> bb26;                // scope 0 at $DIR/match_arm_scopes.rs:+5:1: +5:2\n +     bb22 (cleanup): {\n-+         goto -> bb27;                    // scope 0 at $DIR/match-arm-scopes.rs:+5:1: +5:2\n++         goto -> bb27;                    // scope 0 at $DIR/match_arm_scopes.rs:+5:1: +5:2\n       }\n   \n -     bb26 (cleanup): {\n +     bb23 (cleanup): {\n-          resume;                          // scope 0 at $DIR/match-arm-scopes.rs:+0:1: +5:2\n+          resume;                          // scope 0 at $DIR/match_arm_scopes.rs:+0:1: +5:2\n +     }\n + \n +     bb24: {\n-+         goto -> bb21;                    // scope 0 at $DIR/match-arm-scopes.rs:+5:1: +5:2\n++         goto -> bb21;                    // scope 0 at $DIR/match_arm_scopes.rs:+5:1: +5:2\n +     }\n + \n +     bb25 (cleanup): {\n-+         goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:+5:1: +5:2\n++         goto -> bb23;                    // scope 0 at $DIR/match_arm_scopes.rs:+5:1: +5:2\n +     }\n + \n +     bb26: {\n-+         goto -> bb24;                    // scope 0 at $DIR/match-arm-scopes.rs:+5:1: +5:2\n++         goto -> bb24;                    // scope 0 at $DIR/match_arm_scopes.rs:+5:1: +5:2\n +     }\n + \n +     bb27 (cleanup): {\n-+         goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:+5:1: +5:2\n++         goto -> bb23;                    // scope 0 at $DIR/match_arm_scopes.rs:+5:1: +5:2\n       }\n   }\n   "}, {"sha": "7b7de7788c2f6f53c6cfc2dca967a27e638c2202", "filename": "src/test/mir-opt/match_arm_scopes.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/match-arm-scopes.rs"}, {"sha": "843716033ca41a073edb4941b2ba2ec4b65a67fc", "filename": "src/test/mir-opt/nll/named_lifetimes_basic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/nll/named-lifetimes-basic.rs"}, {"sha": "6cd6d8b77959ecc538fe41e3ca020e85e99222d3", "filename": "src/test/mir-opt/nll/named_lifetimes_basic.use_x.nll.0.mir", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -24,24 +24,24 @@\n | '_#2r live at {bb0[0..=1]}\n | '_#3r live at {bb0[0..=1]}\n | '_#4r live at {bb0[0..=1]}\n-| '_#1r: '_#5r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:26: 12:27) ($DIR/named-lifetimes-basic.rs:12:26: 12:27 (#0)\n-| '_#1r: '_#7r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:54: 12:55) ($DIR/named-lifetimes-basic.rs:12:54: 12:55 (#0)\n-| '_#2r: '_#6r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:42: 12:43) ($DIR/named-lifetimes-basic.rs:12:42: 12:43 (#0)\n-| '_#3r: '_#8r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:66: 12:67) ($DIR/named-lifetimes-basic.rs:12:66: 12:67 (#0)\n-| '_#5r: '_#1r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:26: 12:27) ($DIR/named-lifetimes-basic.rs:12:26: 12:27 (#0)\n-| '_#6r: '_#2r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:42: 12:43) ($DIR/named-lifetimes-basic.rs:12:42: 12:43 (#0)\n-| '_#7r: '_#1r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:54: 12:55) ($DIR/named-lifetimes-basic.rs:12:54: 12:55 (#0)\n-| '_#8r: '_#3r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:66: 12:67) ($DIR/named-lifetimes-basic.rs:12:66: 12:67 (#0)\n+| '_#1r: '_#5r due to BoringNoLocation at All($DIR/named_lifetimes_basic.rs:12:26: 12:27) ($DIR/named_lifetimes_basic.rs:12:26: 12:27 (#0)\n+| '_#1r: '_#7r due to BoringNoLocation at All($DIR/named_lifetimes_basic.rs:12:54: 12:55) ($DIR/named_lifetimes_basic.rs:12:54: 12:55 (#0)\n+| '_#2r: '_#6r due to BoringNoLocation at All($DIR/named_lifetimes_basic.rs:12:42: 12:43) ($DIR/named_lifetimes_basic.rs:12:42: 12:43 (#0)\n+| '_#3r: '_#8r due to BoringNoLocation at All($DIR/named_lifetimes_basic.rs:12:66: 12:67) ($DIR/named_lifetimes_basic.rs:12:66: 12:67 (#0)\n+| '_#5r: '_#1r due to BoringNoLocation at All($DIR/named_lifetimes_basic.rs:12:26: 12:27) ($DIR/named_lifetimes_basic.rs:12:26: 12:27 (#0)\n+| '_#6r: '_#2r due to BoringNoLocation at All($DIR/named_lifetimes_basic.rs:12:42: 12:43) ($DIR/named_lifetimes_basic.rs:12:42: 12:43 (#0)\n+| '_#7r: '_#1r due to BoringNoLocation at All($DIR/named_lifetimes_basic.rs:12:54: 12:55) ($DIR/named_lifetimes_basic.rs:12:54: 12:55 (#0)\n+| '_#8r: '_#3r due to BoringNoLocation at All($DIR/named_lifetimes_basic.rs:12:66: 12:67) ($DIR/named_lifetimes_basic.rs:12:66: 12:67 (#0)\n |\n fn use_x(_1: &'_#5r mut i32, _2: &'_#6r u32, _3: &'_#7r u32, _4: &'_#8r u32) -> bool {\n-    debug w => _1;                       // in scope 0 at $DIR/named-lifetimes-basic.rs:+0:26: +0:27\n-    debug x => _2;                       // in scope 0 at $DIR/named-lifetimes-basic.rs:+0:42: +0:43\n-    debug y => _3;                       // in scope 0 at $DIR/named-lifetimes-basic.rs:+0:54: +0:55\n-    debug z => _4;                       // in scope 0 at $DIR/named-lifetimes-basic.rs:+0:66: +0:67\n-    let mut _0: bool;                    // return place in scope 0 at $DIR/named-lifetimes-basic.rs:+0:81: +0:85\n+    debug w => _1;                       // in scope 0 at $DIR/named_lifetimes_basic.rs:+0:26: +0:27\n+    debug x => _2;                       // in scope 0 at $DIR/named_lifetimes_basic.rs:+0:42: +0:43\n+    debug y => _3;                       // in scope 0 at $DIR/named_lifetimes_basic.rs:+0:54: +0:55\n+    debug z => _4;                       // in scope 0 at $DIR/named_lifetimes_basic.rs:+0:66: +0:67\n+    let mut _0: bool;                    // return place in scope 0 at $DIR/named_lifetimes_basic.rs:+0:81: +0:85\n \n     bb0: {\n-        _0 = const ConstValue(Scalar(0x01): bool); // bb0[0]: scope 0 at $DIR/named-lifetimes-basic.rs:+0:88: +0:92\n-        return;                          // bb0[1]: scope 0 at $DIR/named-lifetimes-basic.rs:+0:94: +0:94\n+        _0 = const ConstValue(Scalar(0x01): bool); // bb0[0]: scope 0 at $DIR/named_lifetimes_basic.rs:+0:88: +0:92\n+        return;                          // bb0[1]: scope 0 at $DIR/named_lifetimes_basic.rs:+0:94: +0:94\n     }\n }"}, {"sha": "3e3fda6141aec93fb430e9e8dd3853b9baab523c", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.32bit.mir", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -17,95 +17,95 @@\n | '_#2r live at {bb1[0]}\n | '_#3r live at {bb1[1..=3]}\n | '_#4r live at {bb1[4..=7], bb2[0..=2]}\n-| '_#2r: '_#3r due to Assignment at Single(bb1[0]) ($DIR/region-subtyping-basic.rs:18:13: 18:18 (#0)\n-| '_#3r: '_#4r due to Assignment at Single(bb1[3]) ($DIR/region-subtyping-basic.rs:19:13: 19:14 (#0)\n+| '_#2r: '_#3r due to Assignment at Single(bb1[0]) ($DIR/region_subtyping_basic.rs:18:13: 18:18 (#0)\n+| '_#3r: '_#4r due to Assignment at Single(bb1[3]) ($DIR/region_subtyping_basic.rs:19:13: 19:14 (#0)\n |\n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/region-subtyping-basic.rs:+0:11: +0:11\n-    let mut _1: [usize; Const { ty: usize, kind: Value(Leaf(0x00000003)) }]; // in scope 0 at $DIR/region-subtyping-basic.rs:+1:9: +1:14\n-    let _3: usize;                       // in scope 0 at $DIR/region-subtyping-basic.rs:+2:16: +2:17\n-    let mut _4: usize;                   // in scope 0 at $DIR/region-subtyping-basic.rs:+2:14: +2:18\n-    let mut _5: bool;                    // in scope 0 at $DIR/region-subtyping-basic.rs:+2:14: +2:18\n-    let mut _7: bool;                    // in scope 0 at $DIR/region-subtyping-basic.rs:+4:8: +4:12\n-    let _8: bool;                        // in scope 0 at $DIR/region-subtyping-basic.rs:+5:9: +5:18\n-    let mut _9: usize;                   // in scope 0 at $DIR/region-subtyping-basic.rs:+5:15: +5:17\n-    let _10: bool;                       // in scope 0 at $DIR/region-subtyping-basic.rs:+7:9: +7:18\n+    let mut _0: ();                      // return place in scope 0 at $DIR/region_subtyping_basic.rs:+0:11: +0:11\n+    let mut _1: [usize; Const { ty: usize, kind: Value(Leaf(0x00000003)) }]; // in scope 0 at $DIR/region_subtyping_basic.rs:+1:9: +1:14\n+    let _3: usize;                       // in scope 0 at $DIR/region_subtyping_basic.rs:+2:16: +2:17\n+    let mut _4: usize;                   // in scope 0 at $DIR/region_subtyping_basic.rs:+2:14: +2:18\n+    let mut _5: bool;                    // in scope 0 at $DIR/region_subtyping_basic.rs:+2:14: +2:18\n+    let mut _7: bool;                    // in scope 0 at $DIR/region_subtyping_basic.rs:+4:8: +4:12\n+    let _8: bool;                        // in scope 0 at $DIR/region_subtyping_basic.rs:+5:9: +5:18\n+    let mut _9: usize;                   // in scope 0 at $DIR/region_subtyping_basic.rs:+5:15: +5:17\n+    let _10: bool;                       // in scope 0 at $DIR/region_subtyping_basic.rs:+7:9: +7:18\n     scope 1 {\n-        debug v => _1;                   // in scope 1 at $DIR/region-subtyping-basic.rs:+1:9: +1:14\n-        let _2: &'_#3r usize;            // in scope 1 at $DIR/region-subtyping-basic.rs:+2:9: +2:10\n+        debug v => _1;                   // in scope 1 at $DIR/region_subtyping_basic.rs:+1:9: +1:14\n+        let _2: &'_#3r usize;            // in scope 1 at $DIR/region_subtyping_basic.rs:+2:9: +2:10\n         scope 2 {\n-            debug p => _2;               // in scope 2 at $DIR/region-subtyping-basic.rs:+2:9: +2:10\n-            let _6: &'_#4r usize;        // in scope 2 at $DIR/region-subtyping-basic.rs:+3:9: +3:10\n+            debug p => _2;               // in scope 2 at $DIR/region_subtyping_basic.rs:+2:9: +2:10\n+            let _6: &'_#4r usize;        // in scope 2 at $DIR/region_subtyping_basic.rs:+3:9: +3:10\n             scope 3 {\n-                debug q => _6;           // in scope 3 at $DIR/region-subtyping-basic.rs:+3:9: +3:10\n+                debug q => _6;           // in scope 3 at $DIR/region_subtyping_basic.rs:+3:9: +3:10\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/region-subtyping-basic.rs:+1:9: +1:14\n-        _1 = [const ConstValue(Scalar(0x00000001): usize), const ConstValue(Scalar(0x00000002): usize), const ConstValue(Scalar(0x00000003): usize)]; // bb0[1]: scope 0 at $DIR/region-subtyping-basic.rs:+1:17: +1:26\n-        FakeRead(ForLet(None), _1);      // bb0[2]: scope 0 at $DIR/region-subtyping-basic.rs:+1:9: +1:14\n-        StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/region-subtyping-basic.rs:+2:9: +2:10\n-        StorageLive(_3);                 // bb0[4]: scope 1 at $DIR/region-subtyping-basic.rs:+2:16: +2:17\n-        _3 = const ConstValue(Scalar(0x00000000): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:+2:16: +2:17\n-        _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:+2:14: +2:18\n-        _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:+2:14: +2:18\n-        assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind: bb7]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:+2:14: +2:18\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/region_subtyping_basic.rs:+1:9: +1:14\n+        _1 = [const ConstValue(Scalar(0x00000001): usize), const ConstValue(Scalar(0x00000002): usize), const ConstValue(Scalar(0x00000003): usize)]; // bb0[1]: scope 0 at $DIR/region_subtyping_basic.rs:+1:17: +1:26\n+        FakeRead(ForLet(None), _1);      // bb0[2]: scope 0 at $DIR/region_subtyping_basic.rs:+1:9: +1:14\n+        StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/region_subtyping_basic.rs:+2:9: +2:10\n+        StorageLive(_3);                 // bb0[4]: scope 1 at $DIR/region_subtyping_basic.rs:+2:16: +2:17\n+        _3 = const ConstValue(Scalar(0x00000000): usize); // bb0[5]: scope 1 at $DIR/region_subtyping_basic.rs:+2:16: +2:17\n+        _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region_subtyping_basic.rs:+2:14: +2:18\n+        _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region_subtyping_basic.rs:+2:14: +2:18\n+        assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind: bb7]; // bb0[8]: scope 1 at $DIR/region_subtyping_basic.rs:+2:14: +2:18\n     }\n \n     bb1: {\n-        _2 = &'_#2r _1[_3];              // bb1[0]: scope 1 at $DIR/region-subtyping-basic.rs:+2:13: +2:18\n-        FakeRead(ForLet(None), _2);      // bb1[1]: scope 1 at $DIR/region-subtyping-basic.rs:+2:9: +2:10\n-        StorageLive(_6);                 // bb1[2]: scope 2 at $DIR/region-subtyping-basic.rs:+3:9: +3:10\n-        _6 = _2;                         // bb1[3]: scope 2 at $DIR/region-subtyping-basic.rs:+3:13: +3:14\n-        FakeRead(ForLet(None), _6);      // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:+3:9: +3:10\n-        StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region-subtyping-basic.rs:+4:8: +4:12\n-        _7 = const ConstValue(Scalar(0x01): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:+4:8: +4:12\n-        switchInt(move _7) -> [ConstValue(Scalar(0x00): bool): bb4, otherwise: bb2]; // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:+4:8: +4:12\n+        _2 = &'_#2r _1[_3];              // bb1[0]: scope 1 at $DIR/region_subtyping_basic.rs:+2:13: +2:18\n+        FakeRead(ForLet(None), _2);      // bb1[1]: scope 1 at $DIR/region_subtyping_basic.rs:+2:9: +2:10\n+        StorageLive(_6);                 // bb1[2]: scope 2 at $DIR/region_subtyping_basic.rs:+3:9: +3:10\n+        _6 = _2;                         // bb1[3]: scope 2 at $DIR/region_subtyping_basic.rs:+3:13: +3:14\n+        FakeRead(ForLet(None), _6);      // bb1[4]: scope 2 at $DIR/region_subtyping_basic.rs:+3:9: +3:10\n+        StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region_subtyping_basic.rs:+4:8: +4:12\n+        _7 = const ConstValue(Scalar(0x01): bool); // bb1[6]: scope 3 at $DIR/region_subtyping_basic.rs:+4:8: +4:12\n+        switchInt(move _7) -> [ConstValue(Scalar(0x00): bool): bb4, otherwise: bb2]; // bb1[7]: scope 3 at $DIR/region_subtyping_basic.rs:+4:8: +4:12\n     }\n \n     bb2: {\n-        StorageLive(_8);                 // bb2[0]: scope 3 at $DIR/region-subtyping-basic.rs:+5:9: +5:18\n-        StorageLive(_9);                 // bb2[1]: scope 3 at $DIR/region-subtyping-basic.rs:+5:15: +5:17\n-        _9 = (*_6);                      // bb2[2]: scope 3 at $DIR/region-subtyping-basic.rs:+5:15: +5:17\n-        _8 = ConstValue(ZeroSized: fn(usize) -> bool {use_x})(move _9) -> [return: bb3, unwind: bb7]; // bb2[3]: scope 3 at $DIR/region-subtyping-basic.rs:+5:9: +5:18\n+        StorageLive(_8);                 // bb2[0]: scope 3 at $DIR/region_subtyping_basic.rs:+5:9: +5:18\n+        StorageLive(_9);                 // bb2[1]: scope 3 at $DIR/region_subtyping_basic.rs:+5:15: +5:17\n+        _9 = (*_6);                      // bb2[2]: scope 3 at $DIR/region_subtyping_basic.rs:+5:15: +5:17\n+        _8 = ConstValue(ZeroSized: fn(usize) -> bool {use_x})(move _9) -> [return: bb3, unwind: bb7]; // bb2[3]: scope 3 at $DIR/region_subtyping_basic.rs:+5:9: +5:18\n                                          // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:21:9: 21:14\n+                                         // + span: $DIR/region_subtyping_basic.rs:21:9: 21:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(<ZST>) }\n     }\n \n     bb3: {\n-        StorageDead(_9);                 // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:+5:17: +5:18\n-        StorageDead(_8);                 // bb3[1]: scope 3 at $DIR/region-subtyping-basic.rs:+5:18: +5:19\n-        _0 = const ConstValue(ZeroSized: ()); // bb3[2]: scope 3 at $DIR/region-subtyping-basic.rs:+4:13: +6:6\n-        goto -> bb6;                     // bb3[3]: scope 3 at $DIR/region-subtyping-basic.rs:+4:5: +8:6\n+        StorageDead(_9);                 // bb3[0]: scope 3 at $DIR/region_subtyping_basic.rs:+5:17: +5:18\n+        StorageDead(_8);                 // bb3[1]: scope 3 at $DIR/region_subtyping_basic.rs:+5:18: +5:19\n+        _0 = const ConstValue(ZeroSized: ()); // bb3[2]: scope 3 at $DIR/region_subtyping_basic.rs:+4:13: +6:6\n+        goto -> bb6;                     // bb3[3]: scope 3 at $DIR/region_subtyping_basic.rs:+4:5: +8:6\n     }\n \n     bb4: {\n-        StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:+7:9: +7:18\n-        _10 = ConstValue(ZeroSized: fn(usize) -> bool {use_x})(const ConstValue(Scalar(0x00000016): usize)) -> [return: bb5, unwind: bb7]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:+7:9: +7:18\n+        StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region_subtyping_basic.rs:+7:9: +7:18\n+        _10 = ConstValue(ZeroSized: fn(usize) -> bool {use_x})(const ConstValue(Scalar(0x00000016): usize)) -> [return: bb5, unwind: bb7]; // bb4[1]: scope 3 at $DIR/region_subtyping_basic.rs:+7:9: +7:18\n                                          // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:23:9: 23:14\n+                                         // + span: $DIR/region_subtyping_basic.rs:23:9: 23:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(<ZST>) }\n     }\n \n     bb5: {\n-        StorageDead(_10);                // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:+7:18: +7:19\n-        _0 = const ConstValue(ZeroSized: ()); // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:+6:12: +8:6\n-        goto -> bb6;                     // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:+4:5: +8:6\n+        StorageDead(_10);                // bb5[0]: scope 3 at $DIR/region_subtyping_basic.rs:+7:18: +7:19\n+        _0 = const ConstValue(ZeroSized: ()); // bb5[1]: scope 3 at $DIR/region_subtyping_basic.rs:+6:12: +8:6\n+        goto -> bb6;                     // bb5[2]: scope 3 at $DIR/region_subtyping_basic.rs:+4:5: +8:6\n     }\n \n     bb6: {\n-        StorageDead(_7);                 // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:+8:5: +8:6\n-        StorageDead(_6);                 // bb6[1]: scope 2 at $DIR/region-subtyping-basic.rs:+9:1: +9:2\n-        StorageDead(_3);                 // bb6[2]: scope 1 at $DIR/region-subtyping-basic.rs:+9:1: +9:2\n-        StorageDead(_2);                 // bb6[3]: scope 1 at $DIR/region-subtyping-basic.rs:+9:1: +9:2\n-        StorageDead(_1);                 // bb6[4]: scope 0 at $DIR/region-subtyping-basic.rs:+9:1: +9:2\n-        return;                          // bb6[5]: scope 0 at $DIR/region-subtyping-basic.rs:+9:2: +9:2\n+        StorageDead(_7);                 // bb6[0]: scope 3 at $DIR/region_subtyping_basic.rs:+8:5: +8:6\n+        StorageDead(_6);                 // bb6[1]: scope 2 at $DIR/region_subtyping_basic.rs:+9:1: +9:2\n+        StorageDead(_3);                 // bb6[2]: scope 1 at $DIR/region_subtyping_basic.rs:+9:1: +9:2\n+        StorageDead(_2);                 // bb6[3]: scope 1 at $DIR/region_subtyping_basic.rs:+9:1: +9:2\n+        StorageDead(_1);                 // bb6[4]: scope 0 at $DIR/region_subtyping_basic.rs:+9:1: +9:2\n+        return;                          // bb6[5]: scope 0 at $DIR/region_subtyping_basic.rs:+9:2: +9:2\n     }\n \n     bb7 (cleanup): {\n-        resume;                          // bb7[0]: scope 0 at $DIR/region-subtyping-basic.rs:+0:1: +9:2\n+        resume;                          // bb7[0]: scope 0 at $DIR/region_subtyping_basic.rs:+0:1: +9:2\n     }\n }"}, {"sha": "39a53702a4cbb6921c0cb35bc5d2e7d6558349ff", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.64bit.mir", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -17,95 +17,95 @@\n | '_#2r live at {bb1[0]}\n | '_#3r live at {bb1[1..=3]}\n | '_#4r live at {bb1[4..=7], bb2[0..=2]}\n-| '_#2r: '_#3r due to Assignment at Single(bb1[0]) ($DIR/region-subtyping-basic.rs:18:13: 18:18 (#0)\n-| '_#3r: '_#4r due to Assignment at Single(bb1[3]) ($DIR/region-subtyping-basic.rs:19:13: 19:14 (#0)\n+| '_#2r: '_#3r due to Assignment at Single(bb1[0]) ($DIR/region_subtyping_basic.rs:18:13: 18:18 (#0)\n+| '_#3r: '_#4r due to Assignment at Single(bb1[3]) ($DIR/region_subtyping_basic.rs:19:13: 19:14 (#0)\n |\n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/region-subtyping-basic.rs:+0:11: +0:11\n-    let mut _1: [usize; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]; // in scope 0 at $DIR/region-subtyping-basic.rs:+1:9: +1:14\n-    let _3: usize;                       // in scope 0 at $DIR/region-subtyping-basic.rs:+2:16: +2:17\n-    let mut _4: usize;                   // in scope 0 at $DIR/region-subtyping-basic.rs:+2:14: +2:18\n-    let mut _5: bool;                    // in scope 0 at $DIR/region-subtyping-basic.rs:+2:14: +2:18\n-    let mut _7: bool;                    // in scope 0 at $DIR/region-subtyping-basic.rs:+4:8: +4:12\n-    let _8: bool;                        // in scope 0 at $DIR/region-subtyping-basic.rs:+5:9: +5:18\n-    let mut _9: usize;                   // in scope 0 at $DIR/region-subtyping-basic.rs:+5:15: +5:17\n-    let _10: bool;                       // in scope 0 at $DIR/region-subtyping-basic.rs:+7:9: +7:18\n+    let mut _0: ();                      // return place in scope 0 at $DIR/region_subtyping_basic.rs:+0:11: +0:11\n+    let mut _1: [usize; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]; // in scope 0 at $DIR/region_subtyping_basic.rs:+1:9: +1:14\n+    let _3: usize;                       // in scope 0 at $DIR/region_subtyping_basic.rs:+2:16: +2:17\n+    let mut _4: usize;                   // in scope 0 at $DIR/region_subtyping_basic.rs:+2:14: +2:18\n+    let mut _5: bool;                    // in scope 0 at $DIR/region_subtyping_basic.rs:+2:14: +2:18\n+    let mut _7: bool;                    // in scope 0 at $DIR/region_subtyping_basic.rs:+4:8: +4:12\n+    let _8: bool;                        // in scope 0 at $DIR/region_subtyping_basic.rs:+5:9: +5:18\n+    let mut _9: usize;                   // in scope 0 at $DIR/region_subtyping_basic.rs:+5:15: +5:17\n+    let _10: bool;                       // in scope 0 at $DIR/region_subtyping_basic.rs:+7:9: +7:18\n     scope 1 {\n-        debug v => _1;                   // in scope 1 at $DIR/region-subtyping-basic.rs:+1:9: +1:14\n-        let _2: &'_#3r usize;            // in scope 1 at $DIR/region-subtyping-basic.rs:+2:9: +2:10\n+        debug v => _1;                   // in scope 1 at $DIR/region_subtyping_basic.rs:+1:9: +1:14\n+        let _2: &'_#3r usize;            // in scope 1 at $DIR/region_subtyping_basic.rs:+2:9: +2:10\n         scope 2 {\n-            debug p => _2;               // in scope 2 at $DIR/region-subtyping-basic.rs:+2:9: +2:10\n-            let _6: &'_#4r usize;        // in scope 2 at $DIR/region-subtyping-basic.rs:+3:9: +3:10\n+            debug p => _2;               // in scope 2 at $DIR/region_subtyping_basic.rs:+2:9: +2:10\n+            let _6: &'_#4r usize;        // in scope 2 at $DIR/region_subtyping_basic.rs:+3:9: +3:10\n             scope 3 {\n-                debug q => _6;           // in scope 3 at $DIR/region-subtyping-basic.rs:+3:9: +3:10\n+                debug q => _6;           // in scope 3 at $DIR/region_subtyping_basic.rs:+3:9: +3:10\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/region-subtyping-basic.rs:+1:9: +1:14\n-        _1 = [const ConstValue(Scalar(0x0000000000000001): usize), const ConstValue(Scalar(0x0000000000000002): usize), const ConstValue(Scalar(0x0000000000000003): usize)]; // bb0[1]: scope 0 at $DIR/region-subtyping-basic.rs:+1:17: +1:26\n-        FakeRead(ForLet(None), _1);      // bb0[2]: scope 0 at $DIR/region-subtyping-basic.rs:+1:9: +1:14\n-        StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/region-subtyping-basic.rs:+2:9: +2:10\n-        StorageLive(_3);                 // bb0[4]: scope 1 at $DIR/region-subtyping-basic.rs:+2:16: +2:17\n-        _3 = const ConstValue(Scalar(0x0000000000000000): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:+2:16: +2:17\n-        _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:+2:14: +2:18\n-        _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:+2:14: +2:18\n-        assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind: bb7]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:+2:14: +2:18\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/region_subtyping_basic.rs:+1:9: +1:14\n+        _1 = [const ConstValue(Scalar(0x0000000000000001): usize), const ConstValue(Scalar(0x0000000000000002): usize), const ConstValue(Scalar(0x0000000000000003): usize)]; // bb0[1]: scope 0 at $DIR/region_subtyping_basic.rs:+1:17: +1:26\n+        FakeRead(ForLet(None), _1);      // bb0[2]: scope 0 at $DIR/region_subtyping_basic.rs:+1:9: +1:14\n+        StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/region_subtyping_basic.rs:+2:9: +2:10\n+        StorageLive(_3);                 // bb0[4]: scope 1 at $DIR/region_subtyping_basic.rs:+2:16: +2:17\n+        _3 = const ConstValue(Scalar(0x0000000000000000): usize); // bb0[5]: scope 1 at $DIR/region_subtyping_basic.rs:+2:16: +2:17\n+        _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region_subtyping_basic.rs:+2:14: +2:18\n+        _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region_subtyping_basic.rs:+2:14: +2:18\n+        assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind: bb7]; // bb0[8]: scope 1 at $DIR/region_subtyping_basic.rs:+2:14: +2:18\n     }\n \n     bb1: {\n-        _2 = &'_#2r _1[_3];              // bb1[0]: scope 1 at $DIR/region-subtyping-basic.rs:+2:13: +2:18\n-        FakeRead(ForLet(None), _2);      // bb1[1]: scope 1 at $DIR/region-subtyping-basic.rs:+2:9: +2:10\n-        StorageLive(_6);                 // bb1[2]: scope 2 at $DIR/region-subtyping-basic.rs:+3:9: +3:10\n-        _6 = _2;                         // bb1[3]: scope 2 at $DIR/region-subtyping-basic.rs:+3:13: +3:14\n-        FakeRead(ForLet(None), _6);      // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:+3:9: +3:10\n-        StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region-subtyping-basic.rs:+4:8: +4:12\n-        _7 = const ConstValue(Scalar(0x01): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:+4:8: +4:12\n-        switchInt(move _7) -> [ConstValue(Scalar(0x00): bool): bb4, otherwise: bb2]; // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:+4:8: +4:12\n+        _2 = &'_#2r _1[_3];              // bb1[0]: scope 1 at $DIR/region_subtyping_basic.rs:+2:13: +2:18\n+        FakeRead(ForLet(None), _2);      // bb1[1]: scope 1 at $DIR/region_subtyping_basic.rs:+2:9: +2:10\n+        StorageLive(_6);                 // bb1[2]: scope 2 at $DIR/region_subtyping_basic.rs:+3:9: +3:10\n+        _6 = _2;                         // bb1[3]: scope 2 at $DIR/region_subtyping_basic.rs:+3:13: +3:14\n+        FakeRead(ForLet(None), _6);      // bb1[4]: scope 2 at $DIR/region_subtyping_basic.rs:+3:9: +3:10\n+        StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region_subtyping_basic.rs:+4:8: +4:12\n+        _7 = const ConstValue(Scalar(0x01): bool); // bb1[6]: scope 3 at $DIR/region_subtyping_basic.rs:+4:8: +4:12\n+        switchInt(move _7) -> [ConstValue(Scalar(0x00): bool): bb4, otherwise: bb2]; // bb1[7]: scope 3 at $DIR/region_subtyping_basic.rs:+4:8: +4:12\n     }\n \n     bb2: {\n-        StorageLive(_8);                 // bb2[0]: scope 3 at $DIR/region-subtyping-basic.rs:+5:9: +5:18\n-        StorageLive(_9);                 // bb2[1]: scope 3 at $DIR/region-subtyping-basic.rs:+5:15: +5:17\n-        _9 = (*_6);                      // bb2[2]: scope 3 at $DIR/region-subtyping-basic.rs:+5:15: +5:17\n-        _8 = ConstValue(ZeroSized: fn(usize) -> bool {use_x})(move _9) -> [return: bb3, unwind: bb7]; // bb2[3]: scope 3 at $DIR/region-subtyping-basic.rs:+5:9: +5:18\n+        StorageLive(_8);                 // bb2[0]: scope 3 at $DIR/region_subtyping_basic.rs:+5:9: +5:18\n+        StorageLive(_9);                 // bb2[1]: scope 3 at $DIR/region_subtyping_basic.rs:+5:15: +5:17\n+        _9 = (*_6);                      // bb2[2]: scope 3 at $DIR/region_subtyping_basic.rs:+5:15: +5:17\n+        _8 = ConstValue(ZeroSized: fn(usize) -> bool {use_x})(move _9) -> [return: bb3, unwind: bb7]; // bb2[3]: scope 3 at $DIR/region_subtyping_basic.rs:+5:9: +5:18\n                                          // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:21:9: 21:14\n+                                         // + span: $DIR/region_subtyping_basic.rs:21:9: 21:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(<ZST>) }\n     }\n \n     bb3: {\n-        StorageDead(_9);                 // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:+5:17: +5:18\n-        StorageDead(_8);                 // bb3[1]: scope 3 at $DIR/region-subtyping-basic.rs:+5:18: +5:19\n-        _0 = const ConstValue(ZeroSized: ()); // bb3[2]: scope 3 at $DIR/region-subtyping-basic.rs:+4:13: +6:6\n-        goto -> bb6;                     // bb3[3]: scope 3 at $DIR/region-subtyping-basic.rs:+4:5: +8:6\n+        StorageDead(_9);                 // bb3[0]: scope 3 at $DIR/region_subtyping_basic.rs:+5:17: +5:18\n+        StorageDead(_8);                 // bb3[1]: scope 3 at $DIR/region_subtyping_basic.rs:+5:18: +5:19\n+        _0 = const ConstValue(ZeroSized: ()); // bb3[2]: scope 3 at $DIR/region_subtyping_basic.rs:+4:13: +6:6\n+        goto -> bb6;                     // bb3[3]: scope 3 at $DIR/region_subtyping_basic.rs:+4:5: +8:6\n     }\n \n     bb4: {\n-        StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:+7:9: +7:18\n-        _10 = ConstValue(ZeroSized: fn(usize) -> bool {use_x})(const ConstValue(Scalar(0x0000000000000016): usize)) -> [return: bb5, unwind: bb7]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:+7:9: +7:18\n+        StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region_subtyping_basic.rs:+7:9: +7:18\n+        _10 = ConstValue(ZeroSized: fn(usize) -> bool {use_x})(const ConstValue(Scalar(0x0000000000000016): usize)) -> [return: bb5, unwind: bb7]; // bb4[1]: scope 3 at $DIR/region_subtyping_basic.rs:+7:9: +7:18\n                                          // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:23:9: 23:14\n+                                         // + span: $DIR/region_subtyping_basic.rs:23:9: 23:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(<ZST>) }\n     }\n \n     bb5: {\n-        StorageDead(_10);                // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:+7:18: +7:19\n-        _0 = const ConstValue(ZeroSized: ()); // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:+6:12: +8:6\n-        goto -> bb6;                     // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:+4:5: +8:6\n+        StorageDead(_10);                // bb5[0]: scope 3 at $DIR/region_subtyping_basic.rs:+7:18: +7:19\n+        _0 = const ConstValue(ZeroSized: ()); // bb5[1]: scope 3 at $DIR/region_subtyping_basic.rs:+6:12: +8:6\n+        goto -> bb6;                     // bb5[2]: scope 3 at $DIR/region_subtyping_basic.rs:+4:5: +8:6\n     }\n \n     bb6: {\n-        StorageDead(_7);                 // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:+8:5: +8:6\n-        StorageDead(_6);                 // bb6[1]: scope 2 at $DIR/region-subtyping-basic.rs:+9:1: +9:2\n-        StorageDead(_3);                 // bb6[2]: scope 1 at $DIR/region-subtyping-basic.rs:+9:1: +9:2\n-        StorageDead(_2);                 // bb6[3]: scope 1 at $DIR/region-subtyping-basic.rs:+9:1: +9:2\n-        StorageDead(_1);                 // bb6[4]: scope 0 at $DIR/region-subtyping-basic.rs:+9:1: +9:2\n-        return;                          // bb6[5]: scope 0 at $DIR/region-subtyping-basic.rs:+9:2: +9:2\n+        StorageDead(_7);                 // bb6[0]: scope 3 at $DIR/region_subtyping_basic.rs:+8:5: +8:6\n+        StorageDead(_6);                 // bb6[1]: scope 2 at $DIR/region_subtyping_basic.rs:+9:1: +9:2\n+        StorageDead(_3);                 // bb6[2]: scope 1 at $DIR/region_subtyping_basic.rs:+9:1: +9:2\n+        StorageDead(_2);                 // bb6[3]: scope 1 at $DIR/region_subtyping_basic.rs:+9:1: +9:2\n+        StorageDead(_1);                 // bb6[4]: scope 0 at $DIR/region_subtyping_basic.rs:+9:1: +9:2\n+        return;                          // bb6[5]: scope 0 at $DIR/region_subtyping_basic.rs:+9:2: +9:2\n     }\n \n     bb7 (cleanup): {\n-        resume;                          // bb7[0]: scope 0 at $DIR/region-subtyping-basic.rs:+0:1: +9:2\n+        resume;                          // bb7[0]: scope 0 at $DIR/region_subtyping_basic.rs:+0:1: +9:2\n     }\n }"}, {"sha": "64332f302e82ea8d0794c484d4443ae4fe6dddaf", "filename": "src/test/mir-opt/nll/region_subtyping_basic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/nll/region-subtyping-basic.rs"}, {"sha": "34e2b1a134ff91735a3880a97d23b7cf21d8becf", "filename": "src/test/mir-opt/no_drop_for_inactive_variant.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/no-drop-for-inactive-variant.rs"}, {"sha": "e708255cea4304adb10b16ef597f21b54dad1b97", "filename": "src/test/mir-opt/no_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,21 +1,21 @@\n // MIR for `unwrap` after SimplifyCfg-elaborate-drops\n \n fn unwrap(_1: Option<T>) -> T {\n-    debug opt => _1;                     // in scope 0 at $DIR/no-drop-for-inactive-variant.rs:+0:14: +0:17\n-    let mut _0: T;                       // return place in scope 0 at $DIR/no-drop-for-inactive-variant.rs:+0:33: +0:34\n-    let mut _2: isize;                   // in scope 0 at $DIR/no-drop-for-inactive-variant.rs:+2:9: +2:16\n-    let _3: T;                           // in scope 0 at $DIR/no-drop-for-inactive-variant.rs:+2:14: +2:15\n+    debug opt => _1;                     // in scope 0 at $DIR/no_drop_for_inactive_variant.rs:+0:14: +0:17\n+    let mut _0: T;                       // return place in scope 0 at $DIR/no_drop_for_inactive_variant.rs:+0:33: +0:34\n+    let mut _2: isize;                   // in scope 0 at $DIR/no_drop_for_inactive_variant.rs:+2:9: +2:16\n+    let _3: T;                           // in scope 0 at $DIR/no_drop_for_inactive_variant.rs:+2:14: +2:15\n     let mut _4: !;                       // in scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n-    let mut _5: isize;                   // in scope 0 at $DIR/no-drop-for-inactive-variant.rs:+5:1: +5:2\n-    let mut _6: isize;                   // in scope 0 at $DIR/no-drop-for-inactive-variant.rs:+5:1: +5:2\n-    let mut _7: isize;                   // in scope 0 at $DIR/no-drop-for-inactive-variant.rs:+5:1: +5:2\n+    let mut _5: isize;                   // in scope 0 at $DIR/no_drop_for_inactive_variant.rs:+5:1: +5:2\n+    let mut _6: isize;                   // in scope 0 at $DIR/no_drop_for_inactive_variant.rs:+5:1: +5:2\n+    let mut _7: isize;                   // in scope 0 at $DIR/no_drop_for_inactive_variant.rs:+5:1: +5:2\n     scope 1 {\n-        debug x => _3;                   // in scope 1 at $DIR/no-drop-for-inactive-variant.rs:+2:14: +2:15\n+        debug x => _3;                   // in scope 1 at $DIR/no_drop_for_inactive_variant.rs:+2:14: +2:15\n     }\n \n     bb0: {\n-        _2 = discriminant(_1);           // scope 0 at $DIR/no-drop-for-inactive-variant.rs:+1:11: +1:14\n-        switchInt(move _2) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/no-drop-for-inactive-variant.rs:+1:5: +1:14\n+        _2 = discriminant(_1);           // scope 0 at $DIR/no_drop_for_inactive_variant.rs:+1:11: +1:14\n+        switchInt(move _2) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/no_drop_for_inactive_variant.rs:+1:5: +1:14\n     }\n \n     bb1: {\n@@ -30,20 +30,20 @@ fn unwrap(_1: Option<T>) -> T {\n     }\n \n     bb2: {\n-        unreachable;                     // scope 0 at $DIR/no-drop-for-inactive-variant.rs:+1:11: +1:14\n+        unreachable;                     // scope 0 at $DIR/no_drop_for_inactive_variant.rs:+1:11: +1:14\n     }\n \n     bb3: {\n-        StorageLive(_3);                 // scope 0 at $DIR/no-drop-for-inactive-variant.rs:+2:14: +2:15\n-        _3 = move ((_1 as Some).0: T);   // scope 0 at $DIR/no-drop-for-inactive-variant.rs:+2:14: +2:15\n-        _0 = move _3;                    // scope 1 at $DIR/no-drop-for-inactive-variant.rs:+2:20: +2:21\n-        StorageDead(_3);                 // scope 0 at $DIR/no-drop-for-inactive-variant.rs:+2:20: +2:21\n-        _5 = discriminant(_1);           // scope 0 at $DIR/no-drop-for-inactive-variant.rs:+5:1: +5:2\n-        return;                          // scope 0 at $DIR/no-drop-for-inactive-variant.rs:+5:2: +5:2\n+        StorageLive(_3);                 // scope 0 at $DIR/no_drop_for_inactive_variant.rs:+2:14: +2:15\n+        _3 = move ((_1 as Some).0: T);   // scope 0 at $DIR/no_drop_for_inactive_variant.rs:+2:14: +2:15\n+        _0 = move _3;                    // scope 1 at $DIR/no_drop_for_inactive_variant.rs:+2:20: +2:21\n+        StorageDead(_3);                 // scope 0 at $DIR/no_drop_for_inactive_variant.rs:+2:20: +2:21\n+        _5 = discriminant(_1);           // scope 0 at $DIR/no_drop_for_inactive_variant.rs:+5:1: +5:2\n+        return;                          // scope 0 at $DIR/no_drop_for_inactive_variant.rs:+5:2: +5:2\n     }\n \n     bb4 (cleanup): {\n-        _7 = discriminant(_1);           // scope 0 at $DIR/no-drop-for-inactive-variant.rs:+5:1: +5:2\n-        resume;                          // scope 0 at $DIR/no-drop-for-inactive-variant.rs:+0:1: +5:2\n+        _7 = discriminant(_1);           // scope 0 at $DIR/no_drop_for_inactive_variant.rs:+5:1: +5:2\n+        resume;                          // scope 0 at $DIR/no_drop_for_inactive_variant.rs:+0:1: +5:2\n     }\n }"}, {"sha": "0cb34a2f27476820c46e64673c4cf0a39ec7f1e8", "filename": "src/test/mir-opt/no_spurious_drop_after_call.main.ElaborateDrops.before.mir", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,49 +1,49 @@\n // MIR for `main` before ElaborateDrops\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/no-spurious-drop-after-call.rs:+0:11: +0:11\n-    let _1: ();                          // in scope 0 at $DIR/no-spurious-drop-after-call.rs:+1:5: +1:35\n-    let mut _2: std::string::String;     // in scope 0 at $DIR/no-spurious-drop-after-call.rs:+1:20: +1:34\n-    let mut _3: &str;                    // in scope 0 at $DIR/no-spurious-drop-after-call.rs:+1:20: +1:34\n-    let _4: &str;                        // in scope 0 at $DIR/no-spurious-drop-after-call.rs:+1:20: +1:22\n+    let mut _0: ();                      // return place in scope 0 at $DIR/no_spurious_drop_after_call.rs:+0:11: +0:11\n+    let _1: ();                          // in scope 0 at $DIR/no_spurious_drop_after_call.rs:+1:5: +1:35\n+    let mut _2: std::string::String;     // in scope 0 at $DIR/no_spurious_drop_after_call.rs:+1:20: +1:34\n+    let mut _3: &str;                    // in scope 0 at $DIR/no_spurious_drop_after_call.rs:+1:20: +1:34\n+    let _4: &str;                        // in scope 0 at $DIR/no_spurious_drop_after_call.rs:+1:20: +1:22\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:+1:5: +1:35\n-        StorageLive(_2);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:+1:20: +1:34\n-        StorageLive(_3);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:+1:20: +1:34\n-        StorageLive(_4);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:+1:20: +1:22\n-        _4 = const \"\";                   // scope 0 at $DIR/no-spurious-drop-after-call.rs:+1:20: +1:22\n+        StorageLive(_1);                 // scope 0 at $DIR/no_spurious_drop_after_call.rs:+1:5: +1:35\n+        StorageLive(_2);                 // scope 0 at $DIR/no_spurious_drop_after_call.rs:+1:20: +1:34\n+        StorageLive(_3);                 // scope 0 at $DIR/no_spurious_drop_after_call.rs:+1:20: +1:34\n+        StorageLive(_4);                 // scope 0 at $DIR/no_spurious_drop_after_call.rs:+1:20: +1:22\n+        _4 = const \"\";                   // scope 0 at $DIR/no_spurious_drop_after_call.rs:+1:20: +1:22\n                                          // mir::Constant\n-                                         // + span: $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n+                                         // + span: $DIR/no_spurious_drop_after_call.rs:9:20: 9:22\n                                          // + literal: Const { ty: &str, val: Value(Slice(..)) }\n-        _3 = &(*_4);                     // scope 0 at $DIR/no-spurious-drop-after-call.rs:+1:20: +1:34\n-        _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at $DIR/no-spurious-drop-after-call.rs:+1:20: +1:34\n+        _3 = &(*_4);                     // scope 0 at $DIR/no_spurious_drop_after_call.rs:+1:20: +1:34\n+        _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at $DIR/no_spurious_drop_after_call.rs:+1:20: +1:34\n                                          // mir::Constant\n-                                         // + span: $DIR/no-spurious-drop-after-call.rs:9:23: 9:32\n+                                         // + span: $DIR/no_spurious_drop_after_call.rs:9:23: 9:32\n                                          // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageDead(_3);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:+1:33: +1:34\n-        _1 = std::mem::drop::<String>(move _2) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/no-spurious-drop-after-call.rs:+1:5: +1:35\n+        StorageDead(_3);                 // scope 0 at $DIR/no_spurious_drop_after_call.rs:+1:33: +1:34\n+        _1 = std::mem::drop::<String>(move _2) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/no_spurious_drop_after_call.rs:+1:5: +1:35\n                                          // mir::Constant\n-                                         // + span: $DIR/no-spurious-drop-after-call.rs:9:5: 9:19\n+                                         // + span: $DIR/no_spurious_drop_after_call.rs:9:5: 9:19\n                                          // + literal: Const { ty: fn(String) {std::mem::drop::<String>}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        StorageDead(_2);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:+1:34: +1:35\n-        StorageDead(_4);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:+1:35: +1:36\n-        StorageDead(_1);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:+1:35: +1:36\n-        _0 = const ();                   // scope 0 at $DIR/no-spurious-drop-after-call.rs:+0:11: +2:2\n-        return;                          // scope 0 at $DIR/no-spurious-drop-after-call.rs:+2:2: +2:2\n+        StorageDead(_2);                 // scope 0 at $DIR/no_spurious_drop_after_call.rs:+1:34: +1:35\n+        StorageDead(_4);                 // scope 0 at $DIR/no_spurious_drop_after_call.rs:+1:35: +1:36\n+        StorageDead(_1);                 // scope 0 at $DIR/no_spurious_drop_after_call.rs:+1:35: +1:36\n+        _0 = const ();                   // scope 0 at $DIR/no_spurious_drop_after_call.rs:+0:11: +2:2\n+        return;                          // scope 0 at $DIR/no_spurious_drop_after_call.rs:+2:2: +2:2\n     }\n \n     bb3 (cleanup): {\n-        drop(_2) -> bb4;                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:+1:34: +1:35\n+        drop(_2) -> bb4;                 // scope 0 at $DIR/no_spurious_drop_after_call.rs:+1:34: +1:35\n     }\n \n     bb4 (cleanup): {\n-        resume;                          // scope 0 at $DIR/no-spurious-drop-after-call.rs:+0:1: +2:2\n+        resume;                          // scope 0 at $DIR/no_spurious_drop_after_call.rs:+0:1: +2:2\n     }\n }"}, {"sha": "bb5bb9aa4e5b62147ffe47d672ea02b7ae01b730", "filename": "src/test/mir-opt/no_spurious_drop_after_call.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/no-spurious-drop-after-call.rs"}, {"sha": "61a16065bfbdc8d21078a0aa171b8f70a6561bc3", "filename": "src/test/mir-opt/nrvo_simple.nrvo.RenameReturnPlace.diff", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fnrvo_simple.nrvo.RenameReturnPlace.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fnrvo_simple.nrvo.RenameReturnPlace.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnrvo_simple.nrvo.RenameReturnPlace.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,42 +2,42 @@\n + // MIR for `nrvo` after RenameReturnPlace\n   \n   fn nrvo(_1: for<'a> fn(&'a mut [u8; 1024])) -> [u8; 1024] {\n-      debug init => _1;                    // in scope 0 at $DIR/nrvo-simple.rs:+0:9: +0:13\n--     let mut _0: [u8; 1024];              // return place in scope 0 at $DIR/nrvo-simple.rs:+0:39: +0:49\n-+     let mut _0: [u8; 1024];              // return place in scope 0 at $DIR/nrvo-simple.rs:+1:9: +1:16\n-      let mut _2: [u8; 1024];              // in scope 0 at $DIR/nrvo-simple.rs:+1:9: +1:16\n-      let _3: ();                          // in scope 0 at $DIR/nrvo-simple.rs:+2:5: +2:19\n-      let mut _4: for<'a> fn(&'a mut [u8; 1024]); // in scope 0 at $DIR/nrvo-simple.rs:+2:5: +2:9\n-      let mut _5: &mut [u8; 1024];         // in scope 0 at $DIR/nrvo-simple.rs:+2:10: +2:18\n-      let mut _6: &mut [u8; 1024];         // in scope 0 at $DIR/nrvo-simple.rs:+2:10: +2:18\n+      debug init => _1;                    // in scope 0 at $DIR/nrvo_simple.rs:+0:9: +0:13\n+-     let mut _0: [u8; 1024];              // return place in scope 0 at $DIR/nrvo_simple.rs:+0:39: +0:49\n++     let mut _0: [u8; 1024];              // return place in scope 0 at $DIR/nrvo_simple.rs:+1:9: +1:16\n+      let mut _2: [u8; 1024];              // in scope 0 at $DIR/nrvo_simple.rs:+1:9: +1:16\n+      let _3: ();                          // in scope 0 at $DIR/nrvo_simple.rs:+2:5: +2:19\n+      let mut _4: for<'a> fn(&'a mut [u8; 1024]); // in scope 0 at $DIR/nrvo_simple.rs:+2:5: +2:9\n+      let mut _5: &mut [u8; 1024];         // in scope 0 at $DIR/nrvo_simple.rs:+2:10: +2:18\n+      let mut _6: &mut [u8; 1024];         // in scope 0 at $DIR/nrvo_simple.rs:+2:10: +2:18\n       scope 1 {\n--         debug buf => _2;                 // in scope 1 at $DIR/nrvo-simple.rs:+1:9: +1:16\n-+         debug buf => _0;                 // in scope 1 at $DIR/nrvo-simple.rs:+1:9: +1:16\n+-         debug buf => _2;                 // in scope 1 at $DIR/nrvo_simple.rs:+1:9: +1:16\n++         debug buf => _0;                 // in scope 1 at $DIR/nrvo_simple.rs:+1:9: +1:16\n       }\n   \n       bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/nrvo-simple.rs:+1:9: +1:16\n--         _2 = [const 0_u8; 1024];         // scope 0 at $DIR/nrvo-simple.rs:+1:19: +1:28\n-+         _0 = [const 0_u8; 1024];         // scope 0 at $DIR/nrvo-simple.rs:+1:19: +1:28\n-          StorageLive(_3);                 // scope 1 at $DIR/nrvo-simple.rs:+2:5: +2:19\n-          StorageLive(_4);                 // scope 1 at $DIR/nrvo-simple.rs:+2:5: +2:9\n-          _4 = _1;                         // scope 1 at $DIR/nrvo-simple.rs:+2:5: +2:9\n-          StorageLive(_5);                 // scope 1 at $DIR/nrvo-simple.rs:+2:10: +2:18\n-          StorageLive(_6);                 // scope 1 at $DIR/nrvo-simple.rs:+2:10: +2:18\n--         _6 = &mut _2;                    // scope 1 at $DIR/nrvo-simple.rs:+2:10: +2:18\n-+         _6 = &mut _0;                    // scope 1 at $DIR/nrvo-simple.rs:+2:10: +2:18\n-          _5 = &mut (*_6);                 // scope 1 at $DIR/nrvo-simple.rs:+2:10: +2:18\n-          _3 = move _4(move _5) -> bb1;    // scope 1 at $DIR/nrvo-simple.rs:+2:5: +2:19\n+-         StorageLive(_2);                 // scope 0 at $DIR/nrvo_simple.rs:+1:9: +1:16\n+-         _2 = [const 0_u8; 1024];         // scope 0 at $DIR/nrvo_simple.rs:+1:19: +1:28\n++         _0 = [const 0_u8; 1024];         // scope 0 at $DIR/nrvo_simple.rs:+1:19: +1:28\n+          StorageLive(_3);                 // scope 1 at $DIR/nrvo_simple.rs:+2:5: +2:19\n+          StorageLive(_4);                 // scope 1 at $DIR/nrvo_simple.rs:+2:5: +2:9\n+          _4 = _1;                         // scope 1 at $DIR/nrvo_simple.rs:+2:5: +2:9\n+          StorageLive(_5);                 // scope 1 at $DIR/nrvo_simple.rs:+2:10: +2:18\n+          StorageLive(_6);                 // scope 1 at $DIR/nrvo_simple.rs:+2:10: +2:18\n+-         _6 = &mut _2;                    // scope 1 at $DIR/nrvo_simple.rs:+2:10: +2:18\n++         _6 = &mut _0;                    // scope 1 at $DIR/nrvo_simple.rs:+2:10: +2:18\n+          _5 = &mut (*_6);                 // scope 1 at $DIR/nrvo_simple.rs:+2:10: +2:18\n+          _3 = move _4(move _5) -> bb1;    // scope 1 at $DIR/nrvo_simple.rs:+2:5: +2:19\n       }\n   \n       bb1: {\n-          StorageDead(_5);                 // scope 1 at $DIR/nrvo-simple.rs:+2:18: +2:19\n-          StorageDead(_4);                 // scope 1 at $DIR/nrvo-simple.rs:+2:18: +2:19\n-          StorageDead(_6);                 // scope 1 at $DIR/nrvo-simple.rs:+2:19: +2:20\n-          StorageDead(_3);                 // scope 1 at $DIR/nrvo-simple.rs:+2:19: +2:20\n--         _0 = _2;                         // scope 1 at $DIR/nrvo-simple.rs:+3:5: +3:8\n--         StorageDead(_2);                 // scope 0 at $DIR/nrvo-simple.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/nrvo-simple.rs:+4:2: +4:2\n+          StorageDead(_5);                 // scope 1 at $DIR/nrvo_simple.rs:+2:18: +2:19\n+          StorageDead(_4);                 // scope 1 at $DIR/nrvo_simple.rs:+2:18: +2:19\n+          StorageDead(_6);                 // scope 1 at $DIR/nrvo_simple.rs:+2:19: +2:20\n+          StorageDead(_3);                 // scope 1 at $DIR/nrvo_simple.rs:+2:19: +2:20\n+-         _0 = _2;                         // scope 1 at $DIR/nrvo_simple.rs:+3:5: +3:8\n+-         StorageDead(_2);                 // scope 0 at $DIR/nrvo_simple.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/nrvo_simple.rs:+4:2: +4:2\n       }\n   }\n   "}, {"sha": "5786ae62127054cbd56a2e507ba8b9da07befd86", "filename": "src/test/mir-opt/nrvo_simple.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fnrvo_simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fnrvo_simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnrvo_simple.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/nrvo-simple.rs"}, {"sha": "e522534867d50c4747798c0b8f143ad7f02886cb", "filename": "src/test/mir-opt/packed_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,60 +1,60 @@\n // MIR for `main` after SimplifyCfg-elaborate-drops\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/packed-struct-drop-aligned.rs:+0:11: +0:11\n-    let mut _1: Packed;                  // in scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:9: +1:14\n-    let mut _2: Aligned;                 // in scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:24: +1:42\n-    let mut _3: Droppy;                  // in scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:32: +1:41\n-    let mut _4: Aligned;                 // in scope 0 at $DIR/packed-struct-drop-aligned.rs:+2:11: +2:29\n-    let mut _5: Droppy;                  // in scope 0 at $DIR/packed-struct-drop-aligned.rs:+2:19: +2:28\n-    let mut _6: Aligned;                 // in scope 0 at $DIR/packed-struct-drop-aligned.rs:+2:5: +2:8\n+    let mut _0: ();                      // return place in scope 0 at $DIR/packed_struct_drop_aligned.rs:+0:11: +0:11\n+    let mut _1: Packed;                  // in scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:9: +1:14\n+    let mut _2: Aligned;                 // in scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:24: +1:42\n+    let mut _3: Droppy;                  // in scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:32: +1:41\n+    let mut _4: Aligned;                 // in scope 0 at $DIR/packed_struct_drop_aligned.rs:+2:11: +2:29\n+    let mut _5: Droppy;                  // in scope 0 at $DIR/packed_struct_drop_aligned.rs:+2:19: +2:28\n+    let mut _6: Aligned;                 // in scope 0 at $DIR/packed_struct_drop_aligned.rs:+2:5: +2:8\n     scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/packed-struct-drop-aligned.rs:+1:9: +1:14\n+        debug x => _1;                   // in scope 1 at $DIR/packed_struct_drop_aligned.rs:+1:9: +1:14\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:9: +1:14\n-        StorageLive(_2);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:24: +1:42\n-        StorageLive(_3);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:32: +1:41\n-        Deinit(_3);                      // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:32: +1:41\n-        (_3.0: usize) = const 0_usize;   // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:32: +1:41\n-        Deinit(_2);                      // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:24: +1:42\n-        (_2.0: Droppy) = move _3;        // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:24: +1:42\n-        StorageDead(_3);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:41: +1:42\n-        Deinit(_1);                      // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:17: +1:43\n-        (_1.0: Aligned) = move _2;       // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:17: +1:43\n-        StorageDead(_2);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:+1:42: +1:43\n-        StorageLive(_4);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:11: +2:29\n-        StorageLive(_5);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:19: +2:28\n-        Deinit(_5);                      // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:19: +2:28\n-        (_5.0: usize) = const 0_usize;   // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:19: +2:28\n-        Deinit(_4);                      // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:11: +2:29\n-        (_4.0: Droppy) = move _5;        // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:11: +2:29\n-        StorageDead(_5);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:28: +2:29\n-        StorageLive(_6);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:5: +2:8\n-        _6 = move (_1.0: Aligned);       // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:5: +2:8\n-        drop(_6) -> [return: bb4, unwind: bb3]; // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:5: +2:8\n+        StorageLive(_1);                 // scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:9: +1:14\n+        StorageLive(_2);                 // scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:24: +1:42\n+        StorageLive(_3);                 // scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:32: +1:41\n+        Deinit(_3);                      // scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:32: +1:41\n+        (_3.0: usize) = const 0_usize;   // scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:32: +1:41\n+        Deinit(_2);                      // scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:24: +1:42\n+        (_2.0: Droppy) = move _3;        // scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:24: +1:42\n+        StorageDead(_3);                 // scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:41: +1:42\n+        Deinit(_1);                      // scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:17: +1:43\n+        (_1.0: Aligned) = move _2;       // scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:17: +1:43\n+        StorageDead(_2);                 // scope 0 at $DIR/packed_struct_drop_aligned.rs:+1:42: +1:43\n+        StorageLive(_4);                 // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:11: +2:29\n+        StorageLive(_5);                 // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:19: +2:28\n+        Deinit(_5);                      // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:19: +2:28\n+        (_5.0: usize) = const 0_usize;   // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:19: +2:28\n+        Deinit(_4);                      // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:11: +2:29\n+        (_4.0: Droppy) = move _5;        // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:11: +2:29\n+        StorageDead(_5);                 // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:28: +2:29\n+        StorageLive(_6);                 // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:5: +2:8\n+        _6 = move (_1.0: Aligned);       // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:5: +2:8\n+        drop(_6) -> [return: bb4, unwind: bb3]; // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:5: +2:8\n     }\n \n     bb1: {\n-        StorageDead(_1);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:+3:1: +3:2\n-        return;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:+3:2: +3:2\n+        StorageDead(_1);                 // scope 0 at $DIR/packed_struct_drop_aligned.rs:+3:1: +3:2\n+        return;                          // scope 0 at $DIR/packed_struct_drop_aligned.rs:+3:2: +3:2\n     }\n \n     bb2 (cleanup): {\n-        resume;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:+0:1: +3:2\n+        resume;                          // scope 0 at $DIR/packed_struct_drop_aligned.rs:+0:1: +3:2\n     }\n \n     bb3 (cleanup): {\n-        (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:5: +2:8\n-        drop(_1) -> bb2;                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:+3:1: +3:2\n+        (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:5: +2:8\n+        drop(_1) -> bb2;                 // scope 0 at $DIR/packed_struct_drop_aligned.rs:+3:1: +3:2\n     }\n \n     bb4: {\n-        StorageDead(_6);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:5: +2:8\n-        (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:5: +2:8\n-        StorageDead(_4);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:+2:28: +2:29\n-        _0 = const ();                   // scope 0 at $DIR/packed-struct-drop-aligned.rs:+0:11: +3:2\n-        drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/packed-struct-drop-aligned.rs:+3:1: +3:2\n+        StorageDead(_6);                 // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:5: +2:8\n+        (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:5: +2:8\n+        StorageDead(_4);                 // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:28: +2:29\n+        _0 = const ();                   // scope 0 at $DIR/packed_struct_drop_aligned.rs:+0:11: +3:2\n+        drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/packed_struct_drop_aligned.rs:+3:1: +3:2\n     }\n }"}, {"sha": "cb65242609086e0ef04ca11b20eb2b74e0fd7e35", "filename": "src/test/mir-opt/packed_struct_drop_aligned.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/packed-struct-drop-aligned.rs"}, {"sha": "8eb0e9c8f483f6d446c9a08557427fceb1749586", "filename": "src/test/mir-opt/remove_never_const.no_codegen.PreCodegen.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fremove_never_const.no_codegen.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fremove_never_const.no_codegen.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_never_const.no_codegen.PreCodegen.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,11 +1,11 @@\n // MIR for `no_codegen` after PreCodegen\n \n fn no_codegen() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/remove-never-const.rs:+0:20: +0:20\n+    let mut _0: ();                      // return place in scope 0 at $DIR/remove_never_const.rs:+0:20: +0:20\n     scope 1 {\n     }\n \n     bb0: {\n-        unreachable;                     // scope 0 at $DIR/remove-never-const.rs:+1:13: +1:33\n+        unreachable;                     // scope 0 at $DIR/remove_never_const.rs:+1:13: +1:33\n     }\n }"}, {"sha": "16095cfdd7dc015764d60cb20624e58fced1597e", "filename": "src/test/mir-opt/remove_never_const.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fremove_never_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fremove_never_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_never_const.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/remove-never-const.rs"}, {"sha": "c247872e2af46fb4bad904d0185a647a5559ea57", "filename": "src/test/mir-opt/simplify_arm.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/simplify-arm.rs"}, {"sha": "cf6ff57aa96deef66017ce5bbde5f94fe420f23e", "filename": "src/test/mir-opt/simplify_arm_identity.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/simplify-arm-identity.rs"}, {"sha": "1a5143aa0fa035d4565ac593013d9fb0f7bf6d57", "filename": "src/test/mir-opt/simplify_locals.c.SimplifyLocals.diff", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals.c.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals.c.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.c.SimplifyLocals.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,32 +2,32 @@\n + // MIR for `c` after SimplifyLocals\n   \n   fn c() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/simplify-locals.rs:+0:8: +0:8\n-      let _1: [u8; 10];                    // in scope 0 at $DIR/simplify-locals.rs:+1:9: +1:14\n--     let mut _2: &[u8];                   // in scope 0 at $DIR/simplify-locals.rs:+3:20: +3:26\n--     let mut _3: &[u8; 10];               // in scope 0 at $DIR/simplify-locals.rs:+3:20: +3:26\n--     let _4: &[u8; 10];                   // in scope 0 at $DIR/simplify-locals.rs:+3:20: +3:26\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify_locals.rs:+0:8: +0:8\n+      let _1: [u8; 10];                    // in scope 0 at $DIR/simplify_locals.rs:+1:9: +1:14\n+-     let mut _2: &[u8];                   // in scope 0 at $DIR/simplify_locals.rs:+3:20: +3:26\n+-     let mut _3: &[u8; 10];               // in scope 0 at $DIR/simplify_locals.rs:+3:20: +3:26\n+-     let _4: &[u8; 10];                   // in scope 0 at $DIR/simplify_locals.rs:+3:20: +3:26\n       scope 1 {\n-          debug bytes => _1;               // in scope 1 at $DIR/simplify-locals.rs:+1:9: +1:14\n+          debug bytes => _1;               // in scope 1 at $DIR/simplify_locals.rs:+1:9: +1:14\n           scope 2 {\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/simplify-locals.rs:+1:9: +1:14\n-          _1 = [const 0_u8; 10];           // scope 0 at $DIR/simplify-locals.rs:+1:17: +1:26\n--         StorageLive(_2);                 // scope 1 at $DIR/simplify-locals.rs:+3:20: +3:26\n--         StorageLive(_3);                 // scope 1 at $DIR/simplify-locals.rs:+3:20: +3:26\n--         StorageLive(_4);                 // scope 1 at $DIR/simplify-locals.rs:+3:20: +3:26\n--         _4 = &_1;                        // scope 1 at $DIR/simplify-locals.rs:+3:20: +3:26\n--         _3 = &(*_4);                     // scope 1 at $DIR/simplify-locals.rs:+3:20: +3:26\n--         _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 1 at $DIR/simplify-locals.rs:+3:20: +3:26\n--         StorageDead(_3);                 // scope 1 at $DIR/simplify-locals.rs:+3:25: +3:26\n--         StorageDead(_4);                 // scope 1 at $DIR/simplify-locals.rs:+3:26: +3:27\n--         StorageDead(_2);                 // scope 1 at $DIR/simplify-locals.rs:+3:26: +3:27\n-          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:+0:8: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/simplify-locals.rs:+4:2: +4:2\n+          StorageLive(_1);                 // scope 0 at $DIR/simplify_locals.rs:+1:9: +1:14\n+          _1 = [const 0_u8; 10];           // scope 0 at $DIR/simplify_locals.rs:+1:17: +1:26\n+-         StorageLive(_2);                 // scope 1 at $DIR/simplify_locals.rs:+3:20: +3:26\n+-         StorageLive(_3);                 // scope 1 at $DIR/simplify_locals.rs:+3:20: +3:26\n+-         StorageLive(_4);                 // scope 1 at $DIR/simplify_locals.rs:+3:20: +3:26\n+-         _4 = &_1;                        // scope 1 at $DIR/simplify_locals.rs:+3:20: +3:26\n+-         _3 = &(*_4);                     // scope 1 at $DIR/simplify_locals.rs:+3:20: +3:26\n+-         _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 1 at $DIR/simplify_locals.rs:+3:20: +3:26\n+-         StorageDead(_3);                 // scope 1 at $DIR/simplify_locals.rs:+3:25: +3:26\n+-         StorageDead(_4);                 // scope 1 at $DIR/simplify_locals.rs:+3:26: +3:27\n+-         StorageDead(_2);                 // scope 1 at $DIR/simplify_locals.rs:+3:26: +3:27\n+          _0 = const ();                   // scope 0 at $DIR/simplify_locals.rs:+0:8: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/simplify_locals.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/simplify_locals.rs:+4:2: +4:2\n       }\n   }\n   "}, {"sha": "6426bf926a43d73cd7a21b85aad66bf23083a47e", "filename": "src/test/mir-opt/simplify_locals.d1.SimplifyLocals.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,18 +2,18 @@\n + // MIR for `d1` after SimplifyLocals\n   \n   fn d1() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/simplify-locals.rs:+0:9: +0:9\n--     let mut _1: E;                       // in scope 0 at $DIR/simplify-locals.rs:+2:13: +2:17\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify_locals.rs:+0:9: +0:9\n+-     let mut _1: E;                       // in scope 0 at $DIR/simplify_locals.rs:+2:13: +2:17\n       scope 1 {\n       }\n   \n       bb0: {\n--         StorageLive(_1);                 // scope 0 at $DIR/simplify-locals.rs:+2:13: +2:17\n--         Deinit(_1);                      // scope 0 at $DIR/simplify-locals.rs:+2:13: +2:17\n--         discriminant(_1) = 0;            // scope 0 at $DIR/simplify-locals.rs:+2:13: +2:17\n--         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:+2:17: +2:18\n-          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:+0:9: +3:2\n-          return;                          // scope 0 at $DIR/simplify-locals.rs:+3:2: +3:2\n+-         StorageLive(_1);                 // scope 0 at $DIR/simplify_locals.rs:+2:13: +2:17\n+-         Deinit(_1);                      // scope 0 at $DIR/simplify_locals.rs:+2:13: +2:17\n+-         discriminant(_1) = 0;            // scope 0 at $DIR/simplify_locals.rs:+2:13: +2:17\n+-         StorageDead(_1);                 // scope 0 at $DIR/simplify_locals.rs:+2:17: +2:18\n+          _0 = const ();                   // scope 0 at $DIR/simplify_locals.rs:+0:9: +3:2\n+          return;                          // scope 0 at $DIR/simplify_locals.rs:+3:2: +3:2\n       }\n   }\n   "}, {"sha": "db5ab182d6f30061e01b8e678efd47eb467cd85b", "filename": "src/test/mir-opt/simplify_locals.d2.SimplifyLocals.diff", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,28 +2,28 @@\n + // MIR for `d2` after SimplifyLocals\n   \n   fn d2() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/simplify-locals.rs:+0:9: +0:9\n--     let mut _1: E;                       // in scope 0 at $DIR/simplify-locals.rs:+2:22: +2:26\n--     let mut _2: (i32, E);                // in scope 0 at $DIR/simplify-locals.rs:+2:5: +2:17\n--     let mut _3: E;                       // in scope 0 at $DIR/simplify-locals.rs:+2:11: +2:15\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify_locals.rs:+0:9: +0:9\n+-     let mut _1: E;                       // in scope 0 at $DIR/simplify_locals.rs:+2:22: +2:26\n+-     let mut _2: (i32, E);                // in scope 0 at $DIR/simplify_locals.rs:+2:5: +2:17\n+-     let mut _3: E;                       // in scope 0 at $DIR/simplify_locals.rs:+2:11: +2:15\n   \n       bb0: {\n--         StorageLive(_1);                 // scope 0 at $DIR/simplify-locals.rs:+2:22: +2:26\n--         Deinit(_1);                      // scope 0 at $DIR/simplify-locals.rs:+2:22: +2:26\n--         discriminant(_1) = 1;            // scope 0 at $DIR/simplify-locals.rs:+2:22: +2:26\n--         StorageLive(_2);                 // scope 0 at $DIR/simplify-locals.rs:+2:5: +2:17\n--         StorageLive(_3);                 // scope 0 at $DIR/simplify-locals.rs:+2:11: +2:15\n--         Deinit(_3);                      // scope 0 at $DIR/simplify-locals.rs:+2:11: +2:15\n--         discriminant(_3) = 0;            // scope 0 at $DIR/simplify-locals.rs:+2:11: +2:15\n--         Deinit(_2);                      // scope 0 at $DIR/simplify-locals.rs:+2:6: +2:16\n--         (_2.0: i32) = const 10_i32;      // scope 0 at $DIR/simplify-locals.rs:+2:6: +2:16\n--         (_2.1: E) = move _3;             // scope 0 at $DIR/simplify-locals.rs:+2:6: +2:16\n--         StorageDead(_3);                 // scope 0 at $DIR/simplify-locals.rs:+2:15: +2:16\n--         (_2.1: E) = move _1;             // scope 0 at $DIR/simplify-locals.rs:+2:5: +2:26\n--         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:+2:25: +2:26\n--         StorageDead(_2);                 // scope 0 at $DIR/simplify-locals.rs:+2:26: +2:27\n-          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:+0:9: +3:2\n-          return;                          // scope 0 at $DIR/simplify-locals.rs:+3:2: +3:2\n+-         StorageLive(_1);                 // scope 0 at $DIR/simplify_locals.rs:+2:22: +2:26\n+-         Deinit(_1);                      // scope 0 at $DIR/simplify_locals.rs:+2:22: +2:26\n+-         discriminant(_1) = 1;            // scope 0 at $DIR/simplify_locals.rs:+2:22: +2:26\n+-         StorageLive(_2);                 // scope 0 at $DIR/simplify_locals.rs:+2:5: +2:17\n+-         StorageLive(_3);                 // scope 0 at $DIR/simplify_locals.rs:+2:11: +2:15\n+-         Deinit(_3);                      // scope 0 at $DIR/simplify_locals.rs:+2:11: +2:15\n+-         discriminant(_3) = 0;            // scope 0 at $DIR/simplify_locals.rs:+2:11: +2:15\n+-         Deinit(_2);                      // scope 0 at $DIR/simplify_locals.rs:+2:6: +2:16\n+-         (_2.0: i32) = const 10_i32;      // scope 0 at $DIR/simplify_locals.rs:+2:6: +2:16\n+-         (_2.1: E) = move _3;             // scope 0 at $DIR/simplify_locals.rs:+2:6: +2:16\n+-         StorageDead(_3);                 // scope 0 at $DIR/simplify_locals.rs:+2:15: +2:16\n+-         (_2.1: E) = move _1;             // scope 0 at $DIR/simplify_locals.rs:+2:5: +2:26\n+-         StorageDead(_1);                 // scope 0 at $DIR/simplify_locals.rs:+2:25: +2:26\n+-         StorageDead(_2);                 // scope 0 at $DIR/simplify_locals.rs:+2:26: +2:27\n+          _0 = const ();                   // scope 0 at $DIR/simplify_locals.rs:+0:9: +3:2\n+          return;                          // scope 0 at $DIR/simplify_locals.rs:+3:2: +3:2\n       }\n   }\n   "}, {"sha": "c707b0da07e065e85ea483af6b54d99e39a0d049", "filename": "src/test/mir-opt/simplify_locals.expose_addr.SimplifyLocals.diff", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals.expose_addr.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals.expose_addr.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.expose_addr.SimplifyLocals.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,20 +2,20 @@\n + // MIR for `expose_addr` after SimplifyLocals\n   \n   fn expose_addr(_1: *const usize) -> () {\n-      debug p => _1;                       // in scope 0 at $DIR/simplify-locals.rs:+0:16: +0:17\n-      let mut _0: ();                      // return place in scope 0 at $DIR/simplify-locals.rs:+0:33: +0:33\n-      let _2: usize;                       // in scope 0 at $DIR/simplify-locals.rs:+2:5: +2:15\n-      let mut _3: *const usize;            // in scope 0 at $DIR/simplify-locals.rs:+2:5: +2:6\n+      debug p => _1;                       // in scope 0 at $DIR/simplify_locals.rs:+0:16: +0:17\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify_locals.rs:+0:33: +0:33\n+      let _2: usize;                       // in scope 0 at $DIR/simplify_locals.rs:+2:5: +2:15\n+      let mut _3: *const usize;            // in scope 0 at $DIR/simplify_locals.rs:+2:5: +2:6\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify-locals.rs:+2:5: +2:15\n-          StorageLive(_3);                 // scope 0 at $DIR/simplify-locals.rs:+2:5: +2:6\n-          _3 = _1;                         // scope 0 at $DIR/simplify-locals.rs:+2:5: +2:6\n-          _2 = move _3 as usize (PointerExposeAddress); // scope 0 at $DIR/simplify-locals.rs:+2:5: +2:15\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify-locals.rs:+2:14: +2:15\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify-locals.rs:+2:15: +2:16\n-          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:+0:33: +3:2\n-          return;                          // scope 0 at $DIR/simplify-locals.rs:+3:2: +3:2\n+          StorageLive(_2);                 // scope 0 at $DIR/simplify_locals.rs:+2:5: +2:15\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify_locals.rs:+2:5: +2:6\n+          _3 = _1;                         // scope 0 at $DIR/simplify_locals.rs:+2:5: +2:6\n+          _2 = move _3 as usize (PointerExposeAddress); // scope 0 at $DIR/simplify_locals.rs:+2:5: +2:15\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify_locals.rs:+2:14: +2:15\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_locals.rs:+2:15: +2:16\n+          _0 = const ();                   // scope 0 at $DIR/simplify_locals.rs:+0:33: +3:2\n+          return;                          // scope 0 at $DIR/simplify_locals.rs:+3:2: +3:2\n       }\n   }\n   "}, {"sha": "ff6eb2cff5e94b1eb1630c018c4ae4ebd370f1d0", "filename": "src/test/mir-opt/simplify_locals.r.SimplifyLocals.diff", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals.r.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals.r.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.r.SimplifyLocals.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,30 +2,30 @@\n + // MIR for `r` after SimplifyLocals\n   \n   fn r() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/simplify-locals.rs:+0:8: +0:8\n-      let mut _1: i32;                     // in scope 0 at $DIR/simplify-locals.rs:+1:9: +1:14\n--     let mut _2: &i32;                    // in scope 0 at $DIR/simplify-locals.rs:+3:13: +3:15\n--     let mut _3: &mut i32;                // in scope 0 at $DIR/simplify-locals.rs:+4:13: +4:19\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify_locals.rs:+0:8: +0:8\n+      let mut _1: i32;                     // in scope 0 at $DIR/simplify_locals.rs:+1:9: +1:14\n+-     let mut _2: &i32;                    // in scope 0 at $DIR/simplify_locals.rs:+3:13: +3:15\n+-     let mut _3: &mut i32;                // in scope 0 at $DIR/simplify_locals.rs:+4:13: +4:19\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/simplify-locals.rs:+1:9: +1:14\n+          debug a => _1;                   // in scope 1 at $DIR/simplify_locals.rs:+1:9: +1:14\n           scope 2 {\n               scope 3 {\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/simplify-locals.rs:+1:9: +1:14\n-          _1 = const 1_i32;                // scope 0 at $DIR/simplify-locals.rs:+1:17: +1:18\n--         StorageLive(_2);                 // scope 1 at $DIR/simplify-locals.rs:+3:13: +3:15\n--         _2 = &_1;                        // scope 1 at $DIR/simplify-locals.rs:+3:13: +3:15\n--         StorageDead(_2);                 // scope 1 at $DIR/simplify-locals.rs:+3:15: +3:16\n--         StorageLive(_3);                 // scope 2 at $DIR/simplify-locals.rs:+4:13: +4:19\n--         _3 = &mut _1;                    // scope 2 at $DIR/simplify-locals.rs:+4:13: +4:19\n--         StorageDead(_3);                 // scope 2 at $DIR/simplify-locals.rs:+4:19: +4:20\n-          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:+0:8: +5:2\n-          StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/simplify-locals.rs:+5:2: +5:2\n+          StorageLive(_1);                 // scope 0 at $DIR/simplify_locals.rs:+1:9: +1:14\n+          _1 = const 1_i32;                // scope 0 at $DIR/simplify_locals.rs:+1:17: +1:18\n+-         StorageLive(_2);                 // scope 1 at $DIR/simplify_locals.rs:+3:13: +3:15\n+-         _2 = &_1;                        // scope 1 at $DIR/simplify_locals.rs:+3:13: +3:15\n+-         StorageDead(_2);                 // scope 1 at $DIR/simplify_locals.rs:+3:15: +3:16\n+-         StorageLive(_3);                 // scope 2 at $DIR/simplify_locals.rs:+4:13: +4:19\n+-         _3 = &mut _1;                    // scope 2 at $DIR/simplify_locals.rs:+4:13: +4:19\n+-         StorageDead(_3);                 // scope 2 at $DIR/simplify_locals.rs:+4:19: +4:20\n+          _0 = const ();                   // scope 0 at $DIR/simplify_locals.rs:+0:8: +5:2\n+          StorageDead(_1);                 // scope 0 at $DIR/simplify_locals.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/simplify_locals.rs:+5:2: +5:2\n       }\n   }\n   "}, {"sha": "89d9391f832dc3e5290eeab56719aca61c268f72", "filename": "src/test/mir-opt/simplify_locals.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/simplify-locals.rs"}, {"sha": "49db77479638dc84ae4c51040a9b5bf4b74e2dd3", "filename": "src/test/mir-opt/simplify_locals.t1.SimplifyLocals.diff", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t1.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t1.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t1.SimplifyLocals.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,21 +2,21 @@\n + // MIR for `t1` after SimplifyLocals\n   \n   fn t1() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/simplify-locals.rs:+0:9: +0:9\n--     let _1: u32;                         // in scope 0 at $DIR/simplify-locals.rs:+2:14: +2:15\n--     let mut _2: *mut u32;                // in scope 0 at $DIR/simplify-locals.rs:+2:14: +2:15\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify_locals.rs:+0:9: +0:9\n+-     let _1: u32;                         // in scope 0 at $DIR/simplify_locals.rs:+2:14: +2:15\n+-     let mut _2: *mut u32;                // in scope 0 at $DIR/simplify_locals.rs:+2:14: +2:15\n       scope 1 {\n       }\n   \n       bb0: {\n--         StorageLive(_1);                 // scope 0 at $DIR/simplify-locals.rs:+2:5: +2:17\n--         StorageLive(_2);                 // scope 1 at $DIR/simplify-locals.rs:+2:14: +2:15\n--         _2 = &/*tls*/ mut X;             // scope 1 at $DIR/simplify-locals.rs:+2:14: +2:15\n--         _1 = (*_2);                      // scope 1 at $DIR/simplify-locals.rs:+2:14: +2:15\n--         StorageDead(_2);                 // scope 0 at $DIR/simplify-locals.rs:+2:17: +2:18\n--         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:+2:17: +2:18\n-          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:+0:9: +3:2\n-          return;                          // scope 0 at $DIR/simplify-locals.rs:+3:2: +3:2\n+-         StorageLive(_1);                 // scope 0 at $DIR/simplify_locals.rs:+2:5: +2:17\n+-         StorageLive(_2);                 // scope 1 at $DIR/simplify_locals.rs:+2:14: +2:15\n+-         _2 = &/*tls*/ mut X;             // scope 1 at $DIR/simplify_locals.rs:+2:14: +2:15\n+-         _1 = (*_2);                      // scope 1 at $DIR/simplify_locals.rs:+2:14: +2:15\n+-         StorageDead(_2);                 // scope 0 at $DIR/simplify_locals.rs:+2:17: +2:18\n+-         StorageDead(_1);                 // scope 0 at $DIR/simplify_locals.rs:+2:17: +2:18\n+          _0 = const ();                   // scope 0 at $DIR/simplify_locals.rs:+0:9: +3:2\n+          return;                          // scope 0 at $DIR/simplify_locals.rs:+3:2: +3:2\n       }\n   }\n   "}, {"sha": "e3f4ae3701b04a99c9a46e73f5f140a2f136336a", "filename": "src/test/mir-opt/simplify_locals.t2.SimplifyLocals.diff", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t2.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t2.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t2.SimplifyLocals.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,21 +2,21 @@\n + // MIR for `t2` after SimplifyLocals\n   \n   fn t2() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/simplify-locals.rs:+0:9: +0:9\n--     let _1: &mut u32;                    // in scope 0 at $DIR/simplify-locals.rs:+2:14: +2:20\n--     let mut _2: *mut u32;                // in scope 0 at $DIR/simplify-locals.rs:+2:19: +2:20\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify_locals.rs:+0:9: +0:9\n+-     let _1: &mut u32;                    // in scope 0 at $DIR/simplify_locals.rs:+2:14: +2:20\n+-     let mut _2: *mut u32;                // in scope 0 at $DIR/simplify_locals.rs:+2:19: +2:20\n       scope 1 {\n       }\n   \n       bb0: {\n--         StorageLive(_1);                 // scope 0 at $DIR/simplify-locals.rs:+2:5: +2:22\n--         StorageLive(_2);                 // scope 1 at $DIR/simplify-locals.rs:+2:19: +2:20\n--         _2 = &/*tls*/ mut X;             // scope 1 at $DIR/simplify-locals.rs:+2:19: +2:20\n--         _1 = &mut (*_2);                 // scope 1 at $DIR/simplify-locals.rs:+2:14: +2:20\n--         StorageDead(_2);                 // scope 0 at $DIR/simplify-locals.rs:+2:22: +2:23\n--         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:+2:22: +2:23\n-          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:+0:9: +3:2\n-          return;                          // scope 0 at $DIR/simplify-locals.rs:+3:2: +3:2\n+-         StorageLive(_1);                 // scope 0 at $DIR/simplify_locals.rs:+2:5: +2:22\n+-         StorageLive(_2);                 // scope 1 at $DIR/simplify_locals.rs:+2:19: +2:20\n+-         _2 = &/*tls*/ mut X;             // scope 1 at $DIR/simplify_locals.rs:+2:19: +2:20\n+-         _1 = &mut (*_2);                 // scope 1 at $DIR/simplify_locals.rs:+2:14: +2:20\n+-         StorageDead(_2);                 // scope 0 at $DIR/simplify_locals.rs:+2:22: +2:23\n+-         StorageDead(_1);                 // scope 0 at $DIR/simplify_locals.rs:+2:22: +2:23\n+          _0 = const ();                   // scope 0 at $DIR/simplify_locals.rs:+0:9: +3:2\n+          return;                          // scope 0 at $DIR/simplify_locals.rs:+3:2: +3:2\n       }\n   }\n   "}, {"sha": "f1ce7778e1915a81f3fae9438cf6676612d3f029", "filename": "src/test/mir-opt/simplify_locals.t3.SimplifyLocals.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t3.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t3.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t3.SimplifyLocals.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,25 +2,25 @@\n + // MIR for `t3` after SimplifyLocals\n   \n   fn t3() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/simplify-locals.rs:+0:9: +0:9\n--     let _1: u32;                         // in scope 0 at $DIR/simplify-locals.rs:+2:14: +2:21\n--     let mut _2: &mut u32;                // in scope 0 at $DIR/simplify-locals.rs:+2:15: +2:21\n--     let mut _3: *mut u32;                // in scope 0 at $DIR/simplify-locals.rs:+2:20: +2:21\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify_locals.rs:+0:9: +0:9\n+-     let _1: u32;                         // in scope 0 at $DIR/simplify_locals.rs:+2:14: +2:21\n+-     let mut _2: &mut u32;                // in scope 0 at $DIR/simplify_locals.rs:+2:15: +2:21\n+-     let mut _3: *mut u32;                // in scope 0 at $DIR/simplify_locals.rs:+2:20: +2:21\n       scope 1 {\n       }\n   \n       bb0: {\n--         StorageLive(_1);                 // scope 0 at $DIR/simplify-locals.rs:+2:5: +2:23\n--         StorageLive(_2);                 // scope 1 at $DIR/simplify-locals.rs:+2:15: +2:21\n--         StorageLive(_3);                 // scope 1 at $DIR/simplify-locals.rs:+2:20: +2:21\n--         _3 = &/*tls*/ mut X;             // scope 1 at $DIR/simplify-locals.rs:+2:20: +2:21\n--         _2 = &mut (*_3);                 // scope 1 at $DIR/simplify-locals.rs:+2:15: +2:21\n--         _1 = (*_2);                      // scope 1 at $DIR/simplify-locals.rs:+2:14: +2:21\n--         StorageDead(_3);                 // scope 0 at $DIR/simplify-locals.rs:+2:23: +2:24\n--         StorageDead(_2);                 // scope 0 at $DIR/simplify-locals.rs:+2:23: +2:24\n--         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:+2:23: +2:24\n-          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:+0:9: +3:2\n-          return;                          // scope 0 at $DIR/simplify-locals.rs:+3:2: +3:2\n+-         StorageLive(_1);                 // scope 0 at $DIR/simplify_locals.rs:+2:5: +2:23\n+-         StorageLive(_2);                 // scope 1 at $DIR/simplify_locals.rs:+2:15: +2:21\n+-         StorageLive(_3);                 // scope 1 at $DIR/simplify_locals.rs:+2:20: +2:21\n+-         _3 = &/*tls*/ mut X;             // scope 1 at $DIR/simplify_locals.rs:+2:20: +2:21\n+-         _2 = &mut (*_3);                 // scope 1 at $DIR/simplify_locals.rs:+2:15: +2:21\n+-         _1 = (*_2);                      // scope 1 at $DIR/simplify_locals.rs:+2:14: +2:21\n+-         StorageDead(_3);                 // scope 0 at $DIR/simplify_locals.rs:+2:23: +2:24\n+-         StorageDead(_2);                 // scope 0 at $DIR/simplify_locals.rs:+2:23: +2:24\n+-         StorageDead(_1);                 // scope 0 at $DIR/simplify_locals.rs:+2:23: +2:24\n+          _0 = const ();                   // scope 0 at $DIR/simplify_locals.rs:+0:9: +3:2\n+          return;                          // scope 0 at $DIR/simplify_locals.rs:+3:2: +3:2\n       }\n   }\n   "}, {"sha": "71cf9594b9eb29b783dfaff2fd0f77a9911a2440", "filename": "src/test/mir-opt/simplify_locals.t4.SimplifyLocals.diff", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t4.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t4.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t4.SimplifyLocals.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,21 +2,21 @@\n + // MIR for `t4` after SimplifyLocals\n   \n   fn t4() -> u32 {\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/simplify-locals.rs:+0:12: +0:15\n-      let mut _1: u32;                     // in scope 0 at $DIR/simplify-locals.rs:+2:14: +2:15\n-      let mut _2: *mut u32;                // in scope 0 at $DIR/simplify-locals.rs:+2:14: +2:15\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/simplify_locals.rs:+0:12: +0:15\n+      let mut _1: u32;                     // in scope 0 at $DIR/simplify_locals.rs:+2:14: +2:15\n+      let mut _2: *mut u32;                // in scope 0 at $DIR/simplify_locals.rs:+2:14: +2:15\n       scope 1 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 1 at $DIR/simplify-locals.rs:+2:14: +2:15\n-          StorageLive(_2);                 // scope 1 at $DIR/simplify-locals.rs:+2:14: +2:15\n-          _2 = &/*tls*/ mut X;             // scope 1 at $DIR/simplify-locals.rs:+2:14: +2:15\n-          _1 = (*_2);                      // scope 1 at $DIR/simplify-locals.rs:+2:14: +2:15\n-          _0 = Add(move _1, const 1_u32);  // scope 1 at $DIR/simplify-locals.rs:+2:14: +2:19\n-          StorageDead(_1);                 // scope 1 at $DIR/simplify-locals.rs:+2:18: +2:19\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify-locals.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/simplify-locals.rs:+3:2: +3:2\n+          StorageLive(_1);                 // scope 1 at $DIR/simplify_locals.rs:+2:14: +2:15\n+          StorageLive(_2);                 // scope 1 at $DIR/simplify_locals.rs:+2:14: +2:15\n+          _2 = &/*tls*/ mut X;             // scope 1 at $DIR/simplify_locals.rs:+2:14: +2:15\n+          _1 = (*_2);                      // scope 1 at $DIR/simplify_locals.rs:+2:14: +2:15\n+          _0 = Add(move _1, const 1_u32);  // scope 1 at $DIR/simplify_locals.rs:+2:14: +2:19\n+          StorageDead(_1);                 // scope 1 at $DIR/simplify_locals.rs:+2:18: +2:19\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_locals.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/simplify_locals.rs:+3:2: +3:2\n       }\n   }\n   "}, {"sha": "8feddcef2ceefe67ec2ed32ac8db97b3ddb17827", "filename": "src/test/mir-opt/simplify_locals_fixedpoint.foo.SimplifyLocals.diff", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,61 +2,61 @@\n + // MIR for `foo` after SimplifyLocals\n   \n   fn foo() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/simplify-locals-fixedpoint.rs:+0:13: +0:13\n-      let mut _1: (std::option::Option<u8>, std::option::Option<T>); // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:+1:30: +1:69\n-      let mut _2: std::option::Option<u8>; // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:+1:31: +1:49\n-      let mut _3: std::option::Option<T>;  // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:+1:51: +1:68\n-      let mut _4: isize;                   // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:+1:22: +1:26\n-      let mut _5: isize;                   // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:+1:13: +1:20\n--     let mut _7: bool;                    // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:+2:12: +2:20\n--     let mut _8: u8;                      // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:+2:12: +2:13\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify_locals_fixedpoint.rs:+0:13: +0:13\n+      let mut _1: (std::option::Option<u8>, std::option::Option<T>); // in scope 0 at $DIR/simplify_locals_fixedpoint.rs:+1:30: +1:69\n+      let mut _2: std::option::Option<u8>; // in scope 0 at $DIR/simplify_locals_fixedpoint.rs:+1:31: +1:49\n+      let mut _3: std::option::Option<T>;  // in scope 0 at $DIR/simplify_locals_fixedpoint.rs:+1:51: +1:68\n+      let mut _4: isize;                   // in scope 0 at $DIR/simplify_locals_fixedpoint.rs:+1:22: +1:26\n+      let mut _5: isize;                   // in scope 0 at $DIR/simplify_locals_fixedpoint.rs:+1:13: +1:20\n+-     let mut _7: bool;                    // in scope 0 at $DIR/simplify_locals_fixedpoint.rs:+2:12: +2:20\n+-     let mut _8: u8;                      // in scope 0 at $DIR/simplify_locals_fixedpoint.rs:+2:12: +2:13\n       scope 1 {\n-          debug a => _6;                   // in scope 1 at $DIR/simplify-locals-fixedpoint.rs:+1:18: +1:19\n-          let _6: u8;                      // in scope 1 at $DIR/simplify-locals-fixedpoint.rs:+1:18: +1:19\n+          debug a => _6;                   // in scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:18: +1:19\n+          let _6: u8;                      // in scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:18: +1:19\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:+1:30: +1:69\n-          StorageLive(_2);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:+1:31: +1:49\n-          Deinit(_2);                      // scope 1 at $DIR/simplify-locals-fixedpoint.rs:+1:31: +1:49\n-          discriminant(_2) = 0;            // scope 1 at $DIR/simplify-locals-fixedpoint.rs:+1:31: +1:49\n-          StorageLive(_3);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:+1:51: +1:68\n-          Deinit(_3);                      // scope 1 at $DIR/simplify-locals-fixedpoint.rs:+1:51: +1:68\n-          discriminant(_3) = 0;            // scope 1 at $DIR/simplify-locals-fixedpoint.rs:+1:51: +1:68\n-          Deinit(_1);                      // scope 1 at $DIR/simplify-locals-fixedpoint.rs:+1:30: +1:69\n-          (_1.0: std::option::Option<u8>) = move _2; // scope 1 at $DIR/simplify-locals-fixedpoint.rs:+1:30: +1:69\n-          (_1.1: std::option::Option<T>) = move _3; // scope 1 at $DIR/simplify-locals-fixedpoint.rs:+1:30: +1:69\n-          StorageDead(_3);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:+1:68: +1:69\n-          StorageDead(_2);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:+1:68: +1:69\n-          _5 = discriminant((_1.0: std::option::Option<u8>)); // scope 1 at $DIR/simplify-locals-fixedpoint.rs:+1:12: +1:27\n-          switchInt(move _5) -> [1_isize: bb1, otherwise: bb3]; // scope 1 at $DIR/simplify-locals-fixedpoint.rs:+1:12: +1:27\n+          StorageLive(_1);                 // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:30: +1:69\n+          StorageLive(_2);                 // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:31: +1:49\n+          Deinit(_2);                      // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:31: +1:49\n+          discriminant(_2) = 0;            // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:31: +1:49\n+          StorageLive(_3);                 // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:51: +1:68\n+          Deinit(_3);                      // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:51: +1:68\n+          discriminant(_3) = 0;            // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:51: +1:68\n+          Deinit(_1);                      // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:30: +1:69\n+          (_1.0: std::option::Option<u8>) = move _2; // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:30: +1:69\n+          (_1.1: std::option::Option<T>) = move _3; // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:30: +1:69\n+          StorageDead(_3);                 // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:68: +1:69\n+          StorageDead(_2);                 // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:68: +1:69\n+          _5 = discriminant((_1.0: std::option::Option<u8>)); // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:12: +1:27\n+          switchInt(move _5) -> [1_isize: bb1, otherwise: bb3]; // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:12: +1:27\n       }\n   \n       bb1: {\n-          _4 = discriminant((_1.1: std::option::Option<T>)); // scope 1 at $DIR/simplify-locals-fixedpoint.rs:+1:12: +1:27\n-          switchInt(move _4) -> [0_isize: bb2, otherwise: bb3]; // scope 1 at $DIR/simplify-locals-fixedpoint.rs:+1:12: +1:27\n+          _4 = discriminant((_1.1: std::option::Option<T>)); // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:12: +1:27\n+          switchInt(move _4) -> [0_isize: bb2, otherwise: bb3]; // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:12: +1:27\n       }\n   \n       bb2: {\n-          StorageLive(_6);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:+1:18: +1:19\n-          _6 = (((_1.0: std::option::Option<u8>) as Some).0: u8); // scope 1 at $DIR/simplify-locals-fixedpoint.rs:+1:18: +1:19\n--         StorageLive(_7);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:+2:12: +2:20\n--         StorageLive(_8);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:+2:12: +2:13\n--         _8 = _6;                         // scope 1 at $DIR/simplify-locals-fixedpoint.rs:+2:12: +2:13\n--         _7 = Gt(move _8, const 42_u8);   // scope 1 at $DIR/simplify-locals-fixedpoint.rs:+2:12: +2:20\n--         StorageDead(_8);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:+2:19: +2:20\n--         StorageDead(_7);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:+4:9: +4:10\n-          StorageDead(_6);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:+5:5: +5:6\n-          goto -> bb3;                     // scope 0 at $DIR/simplify-locals-fixedpoint.rs:+1:5: +5:6\n+          StorageLive(_6);                 // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:18: +1:19\n+          _6 = (((_1.0: std::option::Option<u8>) as Some).0: u8); // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:18: +1:19\n+-         StorageLive(_7);                 // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+2:12: +2:20\n+-         StorageLive(_8);                 // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+2:12: +2:13\n+-         _8 = _6;                         // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+2:12: +2:13\n+-         _7 = Gt(move _8, const 42_u8);   // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+2:12: +2:20\n+-         StorageDead(_8);                 // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+2:19: +2:20\n+-         StorageDead(_7);                 // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+4:9: +4:10\n+          StorageDead(_6);                 // scope 0 at $DIR/simplify_locals_fixedpoint.rs:+5:5: +5:6\n+          goto -> bb3;                     // scope 0 at $DIR/simplify_locals_fixedpoint.rs:+1:5: +5:6\n       }\n   \n       bb3: {\n-          drop(_1) -> bb4;                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:+6:1: +6:2\n+          drop(_1) -> bb4;                 // scope 0 at $DIR/simplify_locals_fixedpoint.rs:+6:1: +6:2\n       }\n   \n       bb4: {\n-          StorageDead(_1);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/simplify-locals-fixedpoint.rs:+6:2: +6:2\n+          StorageDead(_1);                 // scope 0 at $DIR/simplify_locals_fixedpoint.rs:+6:1: +6:2\n+          return;                          // scope 0 at $DIR/simplify_locals_fixedpoint.rs:+6:2: +6:2\n       }\n   }\n   "}, {"sha": "78b1f9f55e59d2a8119077cf6e837266ed76ddd9", "filename": "src/test/mir-opt/simplify_locals_fixedpoint.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/simplify-locals-fixedpoint.rs"}, {"sha": "78272272b0704853281f4b5d4fe967e186dabbfd", "filename": "src/test/mir-opt/simplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "status": "modified", "additions": 88, "deletions": 88, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,108 +2,108 @@\n + // MIR for `main` after SimplifyLocals\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+0:11: +0:11\n--     let mut _1: ((), ());                // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:20: +1:28\n--     let mut _2: ();                      // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:21: +1:23\n--     let mut _3: ();                      // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:25: +1:27\n--     let _4: ();                          // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+2:5: +2:22\n--     let mut _5: ((), ());                // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n--     let mut _6: ();                      // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+2:14: +2:16\n--     let mut _7: ();                      // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+2:18: +2:20\n--     let _8: ();                          // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+4:5: +4:35\n--     let mut _9: u8;                      // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:34\n--     let mut _10: u8;                     // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:30\n--     let mut _11: Temp;                   // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:28\n-+     let _1: ();                          // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+2:5: +2:22\n-+     let mut _2: ((), ());                // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n-+     let mut _3: ();                      // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+2:14: +2:16\n-+     let mut _4: ();                      // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+2:18: +2:20\n-+     let _5: ();                          // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+4:5: +4:35\n-+     let mut _6: u8;                      // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:34\n-+     let mut _7: u8;                      // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:30\n-+     let mut _8: Temp;                    // in scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:28\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+0:11: +0:11\n+-     let mut _1: ((), ());                // in scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:20: +1:28\n+-     let mut _2: ();                      // in scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:21: +1:23\n+-     let mut _3: ();                      // in scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:25: +1:27\n+-     let _4: ();                          // in scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+2:5: +2:22\n+-     let mut _5: ((), ());                // in scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+2:13: +2:21\n+-     let mut _6: ();                      // in scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+2:14: +2:16\n+-     let mut _7: ();                      // in scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+2:18: +2:20\n+-     let _8: ();                          // in scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+4:5: +4:35\n+-     let mut _9: u8;                      // in scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:34\n+-     let mut _10: u8;                     // in scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:30\n+-     let mut _11: Temp;                   // in scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:28\n++     let _1: ();                          // in scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+2:5: +2:22\n++     let mut _2: ((), ());                // in scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+2:13: +2:21\n++     let mut _3: ();                      // in scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+2:14: +2:16\n++     let mut _4: ();                      // in scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+2:18: +2:20\n++     let _5: ();                          // in scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+4:5: +4:35\n++     let mut _6: u8;                      // in scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:34\n++     let mut _7: u8;                      // in scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:30\n++     let mut _8: Temp;                    // in scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:28\n       scope 1 {\n       }\n   \n       bb0: {\n--         StorageLive(_1);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:20: +1:28\n--         StorageLive(_2);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:21: +1:23\n--         Deinit(_2);                      // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:21: +1:23\n--         StorageLive(_3);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:25: +1:27\n--         Deinit(_3);                      // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:25: +1:27\n--         Deinit(_1);                      // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:20: +1:28\n--         (_1.0: ()) = move _2;            // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:20: +1:28\n--         (_1.1: ()) = move _3;            // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:20: +1:28\n--         StorageDead(_3);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:27: +1:28\n--         StorageDead(_2);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:27: +1:28\n--         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+1:28: +1:29\n--         StorageLive(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:5: +2:22\n--         StorageLive(_5);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n--         StorageLive(_6);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:14: +2:16\n--         Deinit(_6);                      // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:14: +2:16\n--         StorageLive(_7);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:18: +2:20\n--         Deinit(_7);                      // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:18: +2:20\n--         Deinit(_5);                      // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n--         (_5.0: ()) = move _6;            // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n--         (_5.1: ()) = move _7;            // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n--         StorageDead(_7);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:20: +2:21\n--         StorageDead(_6);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:20: +2:21\n--         _4 = use_zst(move _5) -> bb1;    // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:5: +2:22\n-+         StorageLive(_1);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:5: +2:22\n-+         StorageLive(_2);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n-+         StorageLive(_3);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:14: +2:16\n-+         Deinit(_3);                      // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:14: +2:16\n-+         StorageLive(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:18: +2:20\n-+         Deinit(_4);                      // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:18: +2:20\n-+         Deinit(_2);                      // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n-+         (_2.0: ()) = move _3;            // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n-+         (_2.1: ()) = move _4;            // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:13: +2:21\n-+         StorageDead(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:20: +2:21\n-+         StorageDead(_3);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:20: +2:21\n-+         _1 = use_zst(move _2) -> bb1;    // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:5: +2:22\n+-         StorageLive(_1);                 // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:20: +1:28\n+-         StorageLive(_2);                 // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:21: +1:23\n+-         Deinit(_2);                      // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:21: +1:23\n+-         StorageLive(_3);                 // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:25: +1:27\n+-         Deinit(_3);                      // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:25: +1:27\n+-         Deinit(_1);                      // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:20: +1:28\n+-         (_1.0: ()) = move _2;            // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:20: +1:28\n+-         (_1.1: ()) = move _3;            // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:20: +1:28\n+-         StorageDead(_3);                 // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:27: +1:28\n+-         StorageDead(_2);                 // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:27: +1:28\n+-         StorageDead(_1);                 // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+1:28: +1:29\n+-         StorageLive(_4);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:5: +2:22\n+-         StorageLive(_5);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:13: +2:21\n+-         StorageLive(_6);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:14: +2:16\n+-         Deinit(_6);                      // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:14: +2:16\n+-         StorageLive(_7);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:18: +2:20\n+-         Deinit(_7);                      // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:18: +2:20\n+-         Deinit(_5);                      // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:13: +2:21\n+-         (_5.0: ()) = move _6;            // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:13: +2:21\n+-         (_5.1: ()) = move _7;            // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:13: +2:21\n+-         StorageDead(_7);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:20: +2:21\n+-         StorageDead(_6);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:20: +2:21\n+-         _4 = use_zst(move _5) -> bb1;    // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:5: +2:22\n++         StorageLive(_1);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:5: +2:22\n++         StorageLive(_2);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:13: +2:21\n++         StorageLive(_3);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:14: +2:16\n++         Deinit(_3);                      // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:14: +2:16\n++         StorageLive(_4);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:18: +2:20\n++         Deinit(_4);                      // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:18: +2:20\n++         Deinit(_2);                      // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:13: +2:21\n++         (_2.0: ()) = move _3;            // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:13: +2:21\n++         (_2.1: ()) = move _4;            // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:13: +2:21\n++         StorageDead(_4);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:20: +2:21\n++         StorageDead(_3);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:20: +2:21\n++         _1 = use_zst(move _2) -> bb1;    // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:5: +2:22\n                                            // mir::Constant\n-                                           // + span: $DIR/simplify-locals-removes-unused-consts.rs:15:5: 15:12\n+                                           // + span: $DIR/simplify_locals_removes_unused_consts.rs:15:5: 15:12\n                                            // + literal: Const { ty: fn(((), ())) {use_zst}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n--         StorageDead(_5);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:21: +2:22\n--         StorageDead(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:22: +2:23\n--         StorageLive(_8);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:5: +4:35\n--         StorageLive(_9);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:34\n--         StorageLive(_10);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:30\n--         StorageLive(_11);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:28\n--         Deinit(_11);                     // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:28\n--         (_11.0: u8) = const 40_u8;       // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:28\n--         _10 = (_11.0: u8);               // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:30\n--         _9 = Add(move _10, const 2_u8);  // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:34\n--         StorageDead(_10);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:33: +4:34\n--         _8 = use_u8(move _9) -> bb2;     // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:5: +4:35\n-+         StorageDead(_2);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:21: +2:22\n-+         StorageDead(_1);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+2:22: +2:23\n-+         StorageLive(_5);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:5: +4:35\n-+         StorageLive(_6);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:34\n-+         StorageLive(_7);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:30\n-+         StorageLive(_8);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:28\n-+         Deinit(_8);                      // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:28\n-+         (_8.0: u8) = const 40_u8;        // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:28\n-+         _7 = (_8.0: u8);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:30\n-+         _6 = Add(move _7, const 2_u8);   // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:12: +4:34\n-+         StorageDead(_7);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:33: +4:34\n-+         _5 = use_u8(move _6) -> bb2;     // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:5: +4:35\n+-         StorageDead(_5);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:21: +2:22\n+-         StorageDead(_4);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:22: +2:23\n+-         StorageLive(_8);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:5: +4:35\n+-         StorageLive(_9);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:34\n+-         StorageLive(_10);                // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:30\n+-         StorageLive(_11);                // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:28\n+-         Deinit(_11);                     // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:28\n+-         (_11.0: u8) = const 40_u8;       // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:28\n+-         _10 = (_11.0: u8);               // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:30\n+-         _9 = Add(move _10, const 2_u8);  // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:34\n+-         StorageDead(_10);                // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:33: +4:34\n+-         _8 = use_u8(move _9) -> bb2;     // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:5: +4:35\n++         StorageDead(_2);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:21: +2:22\n++         StorageDead(_1);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+2:22: +2:23\n++         StorageLive(_5);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:5: +4:35\n++         StorageLive(_6);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:34\n++         StorageLive(_7);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:30\n++         StorageLive(_8);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:28\n++         Deinit(_8);                      // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:28\n++         (_8.0: u8) = const 40_u8;        // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:28\n++         _7 = (_8.0: u8);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:30\n++         _6 = Add(move _7, const 2_u8);   // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:12: +4:34\n++         StorageDead(_7);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:33: +4:34\n++         _5 = use_u8(move _6) -> bb2;     // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:5: +4:35\n                                            // mir::Constant\n-                                           // + span: $DIR/simplify-locals-removes-unused-consts.rs:17:5: 17:11\n+                                           // + span: $DIR/simplify_locals_removes_unused_consts.rs:17:5: 17:11\n                                            // + literal: Const { ty: fn(u8) {use_u8}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n--         StorageDead(_9);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:34: +4:35\n--         StorageDead(_11);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:35: +4:36\n-+         StorageDead(_6);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:34: +4:35\n-          StorageDead(_8);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:35: +4:36\n-+         StorageDead(_5);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:+4:35: +4:36\n-          _0 = const ();                   // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+0:11: +5:2\n-          return;                          // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:+5:2: +5:2\n+-         StorageDead(_9);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:34: +4:35\n+-         StorageDead(_11);                // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:35: +4:36\n++         StorageDead(_6);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:34: +4:35\n+          StorageDead(_8);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:35: +4:36\n++         StorageDead(_5);                 // scope 1 at $DIR/simplify_locals_removes_unused_consts.rs:+4:35: +4:36\n+          _0 = const ();                   // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+0:11: +5:2\n+          return;                          // scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+5:2: +5:2\n       }\n   }\n   "}, {"sha": "39b7911d4aedbcfafd6fd3a4c38ed43f92a189f9", "filename": "src/test/mir-opt/simplify_locals_removes_unused_consts.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/simplify-locals-removes-unused-consts.rs"}, {"sha": "6e7294003afae8e5eb09590912f0229cbb8b6f35", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -2,51 +2,51 @@\n + // MIR for `map` after SimplifyLocals\n   \n   fn map(_1: Option<Box<()>>) -> Option<Box<()>> {\n-      debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+0:8: +0:9\n-      let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+0:31: +0:46\n-      let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+2:9: +2:13\n-      let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n-      let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:25: +3:26\n--     let mut _5: bool;                    // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:1: +5:2\n--     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:1: +5:2\n--     let mut _7: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:1: +5:2\n+      debug x => _1;                       // in scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+0:8: +0:9\n+      let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+0:31: +0:46\n+      let mut _2: isize;                   // in scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+2:9: +2:13\n+      let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:14: +3:15\n+      let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:25: +3:26\n+-     let mut _5: bool;                    // in scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+5:1: +5:2\n+-     let mut _6: isize;                   // in scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+5:1: +5:2\n+-     let mut _7: isize;                   // in scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+5:1: +5:2\n       scope 1 {\n-          debug x => _3;                   // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n+          debug x => _3;                   // in scope 1 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:14: +3:15\n       }\n   \n       bb0: {\n--         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:11: +1:12\n--         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:11: +1:12\n-          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:11: +1:12\n-          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:5: +1:12\n+-         _5 = const false;                // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+1:11: +1:12\n+-         _5 = const true;                 // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+1:11: +1:12\n+          _2 = discriminant(_1);           // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+1:11: +1:12\n+          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+1:5: +1:12\n       }\n   \n       bb1: {\n-          StorageLive(_3);                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n-          _3 = move ((_1 as Some).0: std::boxed::Box<()>); // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n-          StorageLive(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:25: +3:26\n-          _4 = move _3;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:25: +3:26\n-          Deinit(_0);                      // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:20: +3:27\n-          ((_0 as Some).0: std::boxed::Box<()>) = move _4; // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:20: +3:27\n-          discriminant(_0) = 1;            // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:20: +3:27\n-          StorageDead(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:26: +3:27\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:26: +3:27\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:26: +3:27\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:14: +3:15\n+          _3 = move ((_1 as Some).0: std::boxed::Box<()>); // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:14: +3:15\n+          StorageLive(_4);                 // scope 1 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:25: +3:26\n+          _4 = move _3;                    // scope 1 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:25: +3:26\n+          Deinit(_0);                      // scope 1 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:20: +3:27\n+          ((_0 as Some).0: std::boxed::Box<()>) = move _4; // scope 1 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:20: +3:27\n+          discriminant(_0) = 1;            // scope 1 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:20: +3:27\n+          StorageDead(_4);                 // scope 1 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:26: +3:27\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:26: +3:27\n+          goto -> bb4;                     // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+3:26: +3:27\n       }\n   \n       bb2: {\n-          unreachable;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:11: +1:12\n+          unreachable;                     // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+1:11: +1:12\n       }\n   \n       bb3: {\n-          Deinit(_0);                      // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+2:17: +2:21\n-          discriminant(_0) = 0;            // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+2:17: +2:21\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+2:17: +2:21\n+          Deinit(_0);                      // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+2:17: +2:21\n+          discriminant(_0) = 0;            // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+2:17: +2:21\n+          goto -> bb4;                     // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+2:17: +2:21\n       }\n   \n       bb4: {\n--         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:2: +5:2\n+-         _6 = discriminant(_1);           // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+5:2: +5:2\n       }\n   }\n   "}, {"sha": "d09bd92c4e81d176328a1159f1c23aadd8c1e723", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads.rs"}, {"sha": "344c1af2c91347c661ace0a5476d8dd05e5dd894", "filename": "src/test/mir-opt/slice_drop_shim.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/slice-drop-shim.rs"}, {"sha": "b962d80c59e524b5241ed8c6cebf8323b89b61f0", "filename": "src/test/mir-opt/spanview_block.main.built.after.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fspanview_block.main.built.after.html", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fspanview_block.main.built.after.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fspanview_block.main.built.after.html?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -59,7 +59,7 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 4\"><span class=\"line\"><span class=\"code\" style=\"--layer: 0\">fn main() </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"0: $DIR/spanview-block.rs:5:11: 5:13:\n+<div class=\"code\" style=\"counter-reset: line 4\"><span class=\"line\"><span class=\"code\" style=\"--layer: 0\">fn main() </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"0: $DIR/spanview_block.rs:5:11: 5:13:\n     5:11-5:13: Assign: _0 = const ()\n     5:13-5:13: Return: return\"><span class=\"annotation\">0\u298a</span>{}<span class=\"annotation\">\u29890</span></span></span></span></div>\n </body>"}, {"sha": "0ecf35ad6a2e86b71b41c99cd45447c761a1749e", "filename": "src/test/mir-opt/spanview_block.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fspanview_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fspanview_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fspanview_block.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/spanview-block.rs"}, {"sha": "43bff7d096e215caa45964c9365fdac5ec476249", "filename": "src/test/mir-opt/spanview_statement.main.built.after.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fspanview_statement.main.built.after.html", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fspanview_statement.main.built.after.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fspanview_statement.main.built.after.html?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -59,8 +59,8 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 4\"><span class=\"line\"><span class=\"code\" style=\"--layer: 0\">fn main() </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"0[0]: $DIR/spanview-statement.rs:5:11: 5:13:\n-    5:11-5:13: Assign: _0 = const ()\"><span class=\"annotation\">0[0]\u298a</span>{}<span class=\"annotation\">\u29890[0]</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"0:Return: $DIR/spanview-statement.rs:5:13: 5:13:\n+<div class=\"code\" style=\"counter-reset: line 4\"><span class=\"line\"><span class=\"code\" style=\"--layer: 0\">fn main() </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"0[0]: $DIR/spanview_statement.rs:5:11: 5:13:\n+    5:11-5:13: Assign: _0 = const ()\"><span class=\"annotation\">0[0]\u298a</span>{}<span class=\"annotation\">\u29890[0]</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"0:Return: $DIR/spanview_statement.rs:5:13: 5:13:\n     5:13-5:13: Return: return\"><span class=\"annotation\">0:Return\u298a</span>\u2038<span class=\"annotation\">\u29890:Return</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "457052617b788a8e5c2e3a88ef84d9e3ef09fbd3", "filename": "src/test/mir-opt/spanview_statement.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fspanview_statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fspanview_statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fspanview_statement.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/spanview-statement.rs"}, {"sha": "aa7e44c157161a84dfef6c4dbcd809c3b048546f", "filename": "src/test/mir-opt/spanview_terminator.main.built.after.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fspanview_terminator.main.built.after.html", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fspanview_terminator.main.built.after.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fspanview_terminator.main.built.after.html?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -59,7 +59,7 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 4\"><span class=\"line\"><span class=\"code\" style=\"--layer: 0\">fn main() {}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"0:Return: $DIR/spanview-terminator.rs:5:13: 5:13:\n+<div class=\"code\" style=\"counter-reset: line 4\"><span class=\"line\"><span class=\"code\" style=\"--layer: 0\">fn main() {}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"0:Return: $DIR/spanview_terminator.rs:5:13: 5:13:\n     5:13-5:13: Return: return\"><span class=\"annotation\">0:Return\u298a</span>\u2038<span class=\"annotation\">\u29890:Return</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "76fced188f1db71d72ed2ae73b4eb366df1eeb9a", "filename": "src/test/mir-opt/spanview_terminator.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fspanview_terminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fspanview_terminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fspanview_terminator.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/spanview-terminator.rs"}, {"sha": "09453b8ba9c3af3760996e49ac8de824682aadfd", "filename": "src/test/mir-opt/tls_access.main.PreCodegen.after.mir", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Ftls_access.main.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Ftls_access.main.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ftls_access.main.PreCodegen.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,28 +1,28 @@\n // MIR for `main` after PreCodegen\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/tls-access.rs:+0:11: +0:11\n-    let _2: *mut u8;                     // in scope 0 at $DIR/tls-access.rs:+2:18: +2:21\n-    let mut _3: *mut u8;                 // in scope 0 at $DIR/tls-access.rs:+3:9: +3:12\n+    let mut _0: ();                      // return place in scope 0 at $DIR/tls_access.rs:+0:11: +0:11\n+    let _2: *mut u8;                     // in scope 0 at $DIR/tls_access.rs:+2:18: +2:21\n+    let mut _3: *mut u8;                 // in scope 0 at $DIR/tls_access.rs:+3:9: +3:12\n     scope 1 {\n-        let _1: &u8;                     // in scope 1 at $DIR/tls-access.rs:+2:13: +2:14\n+        let _1: &u8;                     // in scope 1 at $DIR/tls_access.rs:+2:13: +2:14\n         scope 2 {\n-            debug a => _1;               // in scope 2 at $DIR/tls-access.rs:+2:13: +2:14\n+            debug a => _1;               // in scope 2 at $DIR/tls_access.rs:+2:13: +2:14\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 1 at $DIR/tls-access.rs:+2:13: +2:14\n-        StorageLive(_2);                 // scope 1 at $DIR/tls-access.rs:+2:18: +2:21\n-        _2 = &/*tls*/ mut FOO;           // scope 1 at $DIR/tls-access.rs:+2:18: +2:21\n-        _1 = &(*_2);                     // scope 1 at $DIR/tls-access.rs:+2:17: +2:21\n-        StorageLive(_3);                 // scope 2 at $DIR/tls-access.rs:+3:9: +3:12\n-        _3 = &/*tls*/ mut FOO;           // scope 2 at $DIR/tls-access.rs:+3:9: +3:12\n-        (*_3) = const 42_u8;             // scope 2 at $DIR/tls-access.rs:+3:9: +3:17\n-        StorageDead(_3);                 // scope 2 at $DIR/tls-access.rs:+3:17: +3:18\n-        _0 = const ();                   // scope 1 at $DIR/tls-access.rs:+1:5: +4:6\n-        StorageDead(_2);                 // scope 1 at $DIR/tls-access.rs:+4:5: +4:6\n-        StorageDead(_1);                 // scope 1 at $DIR/tls-access.rs:+4:5: +4:6\n-        return;                          // scope 0 at $DIR/tls-access.rs:+5:2: +5:2\n+        StorageLive(_1);                 // scope 1 at $DIR/tls_access.rs:+2:13: +2:14\n+        StorageLive(_2);                 // scope 1 at $DIR/tls_access.rs:+2:18: +2:21\n+        _2 = &/*tls*/ mut FOO;           // scope 1 at $DIR/tls_access.rs:+2:18: +2:21\n+        _1 = &(*_2);                     // scope 1 at $DIR/tls_access.rs:+2:17: +2:21\n+        StorageLive(_3);                 // scope 2 at $DIR/tls_access.rs:+3:9: +3:12\n+        _3 = &/*tls*/ mut FOO;           // scope 2 at $DIR/tls_access.rs:+3:9: +3:12\n+        (*_3) = const 42_u8;             // scope 2 at $DIR/tls_access.rs:+3:9: +3:17\n+        StorageDead(_3);                 // scope 2 at $DIR/tls_access.rs:+3:17: +3:18\n+        _0 = const ();                   // scope 1 at $DIR/tls_access.rs:+1:5: +4:6\n+        StorageDead(_2);                 // scope 1 at $DIR/tls_access.rs:+4:5: +4:6\n+        StorageDead(_1);                 // scope 1 at $DIR/tls_access.rs:+4:5: +4:6\n+        return;                          // scope 0 at $DIR/tls_access.rs:+5:2: +5:2\n     }\n }"}, {"sha": "19344c868621264154043b78630c4c44837cb560", "filename": "src/test/mir-opt/tls_access.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Ftls_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Ftls_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ftls_access.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/tls-access.rs"}, {"sha": "2c0fcc6621a3eba713c86840caa8454611bf32f3", "filename": "src/test/mir-opt/uninhabited_enum.process_never.SimplifyLocals.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_never.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_never.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_never.SimplifyLocals.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,16 +1,16 @@\n // MIR for `process_never` after SimplifyLocals\n \n fn process_never(_1: *const !) -> () {\n-    debug input => _1;                   // in scope 0 at $DIR/uninhabited-enum.rs:+0:22: +0:27\n-    let mut _0: ();                      // return place in scope 0 at $DIR/uninhabited-enum.rs:+0:39: +0:39\n-    let _2: &!;                          // in scope 0 at $DIR/uninhabited-enum.rs:+1:8: +1:14\n+    debug input => _1;                   // in scope 0 at $DIR/uninhabited_enum.rs:+0:22: +0:27\n+    let mut _0: ();                      // return place in scope 0 at $DIR/uninhabited_enum.rs:+0:39: +0:39\n+    let _2: &!;                          // in scope 0 at $DIR/uninhabited_enum.rs:+1:8: +1:14\n     scope 1 {\n-        debug _input => _2;              // in scope 1 at $DIR/uninhabited-enum.rs:+1:8: +1:14\n+        debug _input => _2;              // in scope 1 at $DIR/uninhabited_enum.rs:+1:8: +1:14\n     }\n     scope 2 {\n     }\n \n     bb0: {\n-        unreachable;                     // scope 0 at $DIR/uninhabited-enum.rs:+0:39: +2:2\n+        unreachable;                     // scope 0 at $DIR/uninhabited_enum.rs:+0:39: +2:2\n     }\n }"}, {"sha": "ae341a7b97b66f3dfeafd29d583e4a4d2a7016f1", "filename": "src/test/mir-opt/uninhabited_enum.process_void.SimplifyLocals.after.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_void.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_void.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_void.SimplifyLocals.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,18 +1,18 @@\n // MIR for `process_void` after SimplifyLocals\n \n fn process_void(_1: *const Void) -> () {\n-    debug input => _1;                   // in scope 0 at $DIR/uninhabited-enum.rs:+0:21: +0:26\n-    let mut _0: ();                      // return place in scope 0 at $DIR/uninhabited-enum.rs:+0:41: +0:41\n-    let _2: &Void;                       // in scope 0 at $DIR/uninhabited-enum.rs:+1:8: +1:14\n+    debug input => _1;                   // in scope 0 at $DIR/uninhabited_enum.rs:+0:21: +0:26\n+    let mut _0: ();                      // return place in scope 0 at $DIR/uninhabited_enum.rs:+0:41: +0:41\n+    let _2: &Void;                       // in scope 0 at $DIR/uninhabited_enum.rs:+1:8: +1:14\n     scope 1 {\n-        debug _input => _2;              // in scope 1 at $DIR/uninhabited-enum.rs:+1:8: +1:14\n+        debug _input => _2;              // in scope 1 at $DIR/uninhabited_enum.rs:+1:8: +1:14\n     }\n     scope 2 {\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/uninhabited-enum.rs:+1:8: +1:14\n-        StorageDead(_2);                 // scope 0 at $DIR/uninhabited-enum.rs:+4:1: +4:2\n-        return;                          // scope 0 at $DIR/uninhabited-enum.rs:+4:2: +4:2\n+        StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum.rs:+1:8: +1:14\n+        StorageDead(_2);                 // scope 0 at $DIR/uninhabited_enum.rs:+4:1: +4:2\n+        return;                          // scope 0 at $DIR/uninhabited_enum.rs:+4:2: +4:2\n     }\n }"}, {"sha": "97c6e8cd5311107d5e94d825981563af444c532a", "filename": "src/test/mir-opt/uninhabited_enum.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Funinhabited_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Funinhabited_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/uninhabited-enum.rs"}, {"sha": "5257491f0d49456fdbb89d614cd038ee04aa20f8", "filename": "src/test/mir-opt/unusual_item_types.E-V-{constant#0}.built.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.built.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,10 +1,10 @@\n // MIR for `E::V::{constant#0}` after built\n \n E::V::{constant#0}: isize = {\n-    let mut _0: isize;                   // return place in scope 0 at $DIR/unusual-item-types.rs:+0:9: +0:10\n+    let mut _0: isize;                   // return place in scope 0 at $DIR/unusual_item_types.rs:+0:9: +0:10\n \n     bb0: {\n-        _0 = const 5_isize;              // scope 0 at $DIR/unusual-item-types.rs:+0:9: +0:10\n-        return;                          // scope 0 at $DIR/unusual-item-types.rs:+0:9: +0:10\n+        _0 = const 5_isize;              // scope 0 at $DIR/unusual_item_types.rs:+0:9: +0:10\n+        return;                          // scope 0 at $DIR/unusual_item_types.rs:+0:9: +0:10\n     }\n }"}, {"sha": "ee029676311bf25d676195340fad7a58b9e59f17", "filename": "src/test/mir-opt/unusual_item_types.Test-X-{constructor#0}.built.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.built.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,12 +1,12 @@\n // MIR for `Test::X` after built\n \n fn Test::X(_1: usize) -> Test {\n-    let mut _0: Test;                    // return place in scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:6\n+    let mut _0: Test;                    // return place in scope 0 at $DIR/unusual_item_types.rs:+0:5: +0:6\n \n     bb0: {\n-        Deinit(_0);                      // scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:6\n-        ((_0 as X).0: usize) = move _1;  // scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:6\n-        discriminant(_0) = 0;            // scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:6\n-        return;                          // scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:6\n+        Deinit(_0);                      // scope 0 at $DIR/unusual_item_types.rs:+0:5: +0:6\n+        ((_0 as X).0: usize) = move _1;  // scope 0 at $DIR/unusual_item_types.rs:+0:5: +0:6\n+        discriminant(_0) = 0;            // scope 0 at $DIR/unusual_item_types.rs:+0:5: +0:6\n+        return;                          // scope 0 at $DIR/unusual_item_types.rs:+0:5: +0:6\n     }\n }"}, {"sha": "6dad636416f228826ad35746c125fe047e06ac99", "filename": "src/test/mir-opt/unusual_item_types.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Funusual_item_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Funusual_item_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/unusual-item-types.rs"}, {"sha": "90444b481221f1cd35ba3b24ed7811f0f1d57c06", "filename": "src/test/mir-opt/unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.built.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.built.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,10 +1,10 @@\n-// MIR for `<impl at $DIR/unusual-item-types.rs:9:1: 9:7>::ASSOCIATED_CONSTANT` after built\n+// MIR for `<impl at $DIR/unusual_item_types.rs:9:1: 9:7>::ASSOCIATED_CONSTANT` after built\n \n-const <impl at $DIR/unusual-item-types.rs:9:1: 9:7>::ASSOCIATED_CONSTANT: i32 = {\n-    let mut _0: i32;                     // return place in scope 0 at $DIR/unusual-item-types.rs:+0:32: +0:35\n+const <impl at $DIR/unusual_item_types.rs:9:1: 9:7>::ASSOCIATED_CONSTANT: i32 = {\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/unusual_item_types.rs:+0:32: +0:35\n \n     bb0: {\n-        _0 = const 2_i32;                // scope 0 at $DIR/unusual-item-types.rs:+0:38: +0:39\n-        return;                          // scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:40\n+        _0 = const 2_i32;                // scope 0 at $DIR/unusual_item_types.rs:+0:38: +0:39\n+        return;                          // scope 0 at $DIR/unusual_item_types.rs:+0:5: +0:40\n     }\n }"}, {"sha": "afd083acb3402066b810f4e283bc5581f0c4ec21", "filename": "src/test/mir-opt/while_storage.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fwhile_storage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fwhile_storage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_storage.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "previous_filename": "src/test/mir-opt/while-storage.rs"}, {"sha": "68aa3e5db32980b69defcf16cfc7ce80c11fbeb0", "filename": "src/test/mir-opt/while_storage.while_loop.PreCodegen.after.mir", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,64 +1,64 @@\n // MIR for `while_loop` after PreCodegen\n \n fn while_loop(_1: bool) -> () {\n-    debug c => _1;                       // in scope 0 at $DIR/while-storage.rs:+0:15: +0:16\n-    let mut _0: ();                      // return place in scope 0 at $DIR/while-storage.rs:+0:24: +0:24\n-    let mut _2: bool;                    // in scope 0 at $DIR/while-storage.rs:+1:11: +1:22\n-    let mut _3: bool;                    // in scope 0 at $DIR/while-storage.rs:+1:20: +1:21\n-    let mut _4: bool;                    // in scope 0 at $DIR/while-storage.rs:+2:12: +2:23\n-    let mut _5: bool;                    // in scope 0 at $DIR/while-storage.rs:+2:21: +2:22\n+    debug c => _1;                       // in scope 0 at $DIR/while_storage.rs:+0:15: +0:16\n+    let mut _0: ();                      // return place in scope 0 at $DIR/while_storage.rs:+0:24: +0:24\n+    let mut _2: bool;                    // in scope 0 at $DIR/while_storage.rs:+1:11: +1:22\n+    let mut _3: bool;                    // in scope 0 at $DIR/while_storage.rs:+1:20: +1:21\n+    let mut _4: bool;                    // in scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n+    let mut _5: bool;                    // in scope 0 at $DIR/while_storage.rs:+2:21: +2:22\n \n     bb0: {\n-        goto -> bb1;                     // scope 0 at $DIR/while-storage.rs:+1:5: +5:6\n+        goto -> bb1;                     // scope 0 at $DIR/while_storage.rs:+1:5: +5:6\n     }\n \n     bb1: {\n-        StorageLive(_2);                 // scope 0 at $DIR/while-storage.rs:+1:11: +1:22\n-        StorageLive(_3);                 // scope 0 at $DIR/while-storage.rs:+1:20: +1:21\n-        _3 = _1;                         // scope 0 at $DIR/while-storage.rs:+1:20: +1:21\n-        _2 = get_bool(move _3) -> bb2;   // scope 0 at $DIR/while-storage.rs:+1:11: +1:22\n+        StorageLive(_2);                 // scope 0 at $DIR/while_storage.rs:+1:11: +1:22\n+        StorageLive(_3);                 // scope 0 at $DIR/while_storage.rs:+1:20: +1:21\n+        _3 = _1;                         // scope 0 at $DIR/while_storage.rs:+1:20: +1:21\n+        _2 = get_bool(move _3) -> bb2;   // scope 0 at $DIR/while_storage.rs:+1:11: +1:22\n                                          // mir::Constant\n-                                         // + span: $DIR/while-storage.rs:10:11: 10:19\n+                                         // + span: $DIR/while_storage.rs:10:11: 10:19\n                                          // + literal: Const { ty: fn(bool) -> bool {get_bool}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        StorageDead(_3);                 // scope 0 at $DIR/while-storage.rs:+1:21: +1:22\n-        switchInt(move _2) -> [false: bb7, otherwise: bb3]; // scope 0 at $DIR/while-storage.rs:+1:11: +1:22\n+        StorageDead(_3);                 // scope 0 at $DIR/while_storage.rs:+1:21: +1:22\n+        switchInt(move _2) -> [false: bb7, otherwise: bb3]; // scope 0 at $DIR/while_storage.rs:+1:11: +1:22\n     }\n \n     bb3: {\n-        StorageLive(_4);                 // scope 0 at $DIR/while-storage.rs:+2:12: +2:23\n-        StorageLive(_5);                 // scope 0 at $DIR/while-storage.rs:+2:21: +2:22\n-        _5 = _1;                         // scope 0 at $DIR/while-storage.rs:+2:21: +2:22\n-        _4 = get_bool(move _5) -> bb4;   // scope 0 at $DIR/while-storage.rs:+2:12: +2:23\n+        StorageLive(_4);                 // scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n+        StorageLive(_5);                 // scope 0 at $DIR/while_storage.rs:+2:21: +2:22\n+        _5 = _1;                         // scope 0 at $DIR/while_storage.rs:+2:21: +2:22\n+        _4 = get_bool(move _5) -> bb4;   // scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n                                          // mir::Constant\n-                                         // + span: $DIR/while-storage.rs:11:12: 11:20\n+                                         // + span: $DIR/while_storage.rs:11:12: 11:20\n                                          // + literal: Const { ty: fn(bool) -> bool {get_bool}, val: Value(<ZST>) }\n     }\n \n     bb4: {\n-        StorageDead(_5);                 // scope 0 at $DIR/while-storage.rs:+2:22: +2:23\n-        switchInt(move _4) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/while-storage.rs:+2:12: +2:23\n+        StorageDead(_5);                 // scope 0 at $DIR/while_storage.rs:+2:22: +2:23\n+        switchInt(move _4) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n     }\n \n     bb5: {\n-        StorageDead(_4);                 // scope 0 at $DIR/while-storage.rs:+4:9: +4:10\n+        StorageDead(_4);                 // scope 0 at $DIR/while_storage.rs:+4:9: +4:10\n         goto -> bb8;                     // scope 0 at no-location\n     }\n \n     bb6: {\n-        StorageDead(_4);                 // scope 0 at $DIR/while-storage.rs:+4:9: +4:10\n-        StorageDead(_2);                 // scope 0 at $DIR/while-storage.rs:+5:5: +5:6\n-        goto -> bb1;                     // scope 0 at $DIR/while-storage.rs:+1:5: +5:6\n+        StorageDead(_4);                 // scope 0 at $DIR/while_storage.rs:+4:9: +4:10\n+        StorageDead(_2);                 // scope 0 at $DIR/while_storage.rs:+5:5: +5:6\n+        goto -> bb1;                     // scope 0 at $DIR/while_storage.rs:+1:5: +5:6\n     }\n \n     bb7: {\n         goto -> bb8;                     // scope 0 at no-location\n     }\n \n     bb8: {\n-        StorageDead(_2);                 // scope 0 at $DIR/while-storage.rs:+5:5: +5:6\n-        return;                          // scope 0 at $DIR/while-storage.rs:+6:2: +6:2\n+        StorageDead(_2);                 // scope 0 at $DIR/while_storage.rs:+5:5: +5:6\n+        return;                          // scope 0 at $DIR/while_storage.rs:+6:2: +6:2\n     }\n }"}, {"sha": "b0b11cafca5a8a20be5482dca060a6403e61623a", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -31,6 +31,7 @@ fn main() {\n     let args: Vec<String> = env::args().skip(1).collect();\n \n     let verbose = args.iter().any(|s| *s == \"--verbose\");\n+    let bless = args.iter().any(|s| *s == \"--bless\");\n \n     let bad = std::sync::Arc::new(AtomicBool::new(false));\n \n@@ -64,7 +65,7 @@ fn main() {\n         // Checks over tests.\n         check!(debug_artifacts, &src_path);\n         check!(ui_tests, &src_path);\n-        check!(mir_opt_tests, &src_path);\n+        check!(mir_opt_tests, &src_path, bless);\n \n         // Checks that only make sense for the compiler.\n         check!(errors, &compiler_path);"}, {"sha": "ea24fa45138323922c5cf45fb19b06eda72bd283", "filename": "src/tools/tidy/src/mir_opt_tests.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftools%2Ftidy%2Fsrc%2Fmir_opt_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftools%2Ftidy%2Fsrc%2Fmir_opt_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmir_opt_tests.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,9 +1,9 @@\n-//! Tidy check to ensure that mir opt directories do not have stale files.\n+//! Tidy check to ensure that mir opt directories do not have stale files or dashes in file names\n \n use std::collections::HashSet;\n use std::path::{Path, PathBuf};\n \n-pub fn check(path: &Path, bad: &mut bool) {\n+fn check_unused_files(path: &Path, bad: &mut bool) {\n     let mut rs_files = Vec::<PathBuf>::new();\n     let mut output_files = HashSet::<PathBuf>::new();\n     let files = walkdir::WalkDir::new(&path.join(\"test/mir-opt\")).into_iter();\n@@ -35,3 +35,36 @@ pub fn check(path: &Path, bad: &mut bool) {\n         }\n     }\n }\n+\n+fn check_dash_files(path: &Path, bless: bool, bad: &mut bool) {\n+    for file in walkdir::WalkDir::new(&path.join(\"test/mir-opt\"))\n+        .into_iter()\n+        .filter_map(Result::ok)\n+        .filter(|e| e.file_type().is_file())\n+    {\n+        let path = file.path();\n+        if path.extension() == Some(\"rs\".as_ref()) {\n+            if let Some(name) = path.file_name().and_then(|s| s.to_str()) {\n+                if name.contains('-') {\n+                    if !bless {\n+                        tidy_error!(\n+                            bad,\n+                            \"mir-opt test files should not have dashes in them: {}\",\n+                            path.display()\n+                        );\n+                    } else {\n+                        let new_name = name.replace('-', \"_\");\n+                        let mut new_path = path.to_owned();\n+                        new_path.set_file_name(new_name);\n+                        let _ = std::fs::rename(path, new_path);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+pub fn check(path: &Path, bless: bool, bad: &mut bool) {\n+    check_unused_files(path, bad);\n+    check_dash_files(path, bless, bad);\n+}"}]}