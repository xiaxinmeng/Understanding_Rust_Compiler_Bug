{"sha": "c705fff309ef5ec41c37339ba0bb61d3b24b515d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MDVmZmYzMDllZjVlYzQxYzM3MzM5YmEwYmI2MWQzYjI0YjUxNWQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-09-05T18:54:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-05T18:54:20Z"}, "message": "Merge #1770\n\n1770: rename test file to match impl file r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "dbe740488fbaa1dcc1f24f466c39d61e1b0c7e0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbe740488fbaa1dcc1f24f466c39d61e1b0c7e0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c705fff309ef5ec41c37339ba0bb61d3b24b515d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdcVncCRBK7hj4Ov3rIwAAdHIIAFpZcEZm4SkL24NxtVY5aCh3\nqMp3wQL72UdodJEZXnDXzo9+caKDhEqmyrbaAWVreF6cIeQCftXyQilS6uRRMvjL\nysbiPHhKtb8KfD+QAuDHf5JmNuxk2sM5NcCBLVCjIl8O4lyMc/8NpFX8zX8cpYzi\n2fPW126D0RkI5efA74ehD8qxJrXm78eJm8vCnM2Aqt8m1ouXhfB47rpxiGW9d9XZ\nIESN2x7S7UQ6wGhKutcskH4QX+tRtD2Ga95w0dq5+u20v9/2irAdpolZdZKhOuDH\nkWP4JSCbTSM/9LP4jsw8lrOfhOSJpnDT4R+EwT0t/W10JeEINKEsJX4/siiMJ3E=\n=gchK\n-----END PGP SIGNATURE-----\n", "payload": "tree dbe740488fbaa1dcc1f24f466c39d61e1b0c7e0e\nparent 9856096a80bfb7178af0434249f1950596f5c268\nparent 5a38a80d1ac2baa0579d7e58e5ab46355f5e2738\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1567709660 +0000\ncommitter GitHub <noreply@github.com> 1567709660 +0000\n\nMerge #1770\n\n1770: rename test file to match impl file r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c705fff309ef5ec41c37339ba0bb61d3b24b515d", "html_url": "https://github.com/rust-lang/rust/commit/c705fff309ef5ec41c37339ba0bb61d3b24b515d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c705fff309ef5ec41c37339ba0bb61d3b24b515d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9856096a80bfb7178af0434249f1950596f5c268", "url": "https://api.github.com/repos/rust-lang/rust/commits/9856096a80bfb7178af0434249f1950596f5c268", "html_url": "https://github.com/rust-lang/rust/commit/9856096a80bfb7178af0434249f1950596f5c268"}, {"sha": "5a38a80d1ac2baa0579d7e58e5ab46355f5e2738", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a38a80d1ac2baa0579d7e58e5ab46355f5e2738", "html_url": "https://github.com/rust-lang/rust/commit/5a38a80d1ac2baa0579d7e58e5ab46355f5e2738"}], "stats": {"total": 375, "additions": 191, "deletions": 184}, "files": [{"sha": "dc2e2172b53c57eef7913114578c70b8d7a36062", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c705fff309ef5ec41c37339ba0bb61d3b24b515d/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c705fff309ef5ec41c37339ba0bb61d3b24b515d/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=c705fff309ef5ec41c37339ba0bb61d3b24b515d", "patch": "@@ -50,6 +50,7 @@\n mod per_ns;\n mod raw;\n mod collector;\n+mod mod_resolution;\n #[cfg(test)]\n mod tests;\n "}, {"sha": "d6c7c083dc7196fe536ae952530c928371931322", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 7, "deletions": 183, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/c705fff309ef5ec41c37339ba0bb61d3b24b515d/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c705fff309ef5ec41c37339ba0bb61d3b24b515d/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=c705fff309ef5ec41c37339ba0bb61d3b24b515d", "patch": "@@ -1,9 +1,5 @@\n-use std::borrow::Cow;\n-use std::sync::Arc;\n-\n-use ra_db::{FileId, SourceRoot};\n-use ra_syntax::{ast, SmolStr};\n-use relative_path::RelativePathBuf;\n+use ra_db::FileId;\n+use ra_syntax::ast;\n use rustc_hash::FxHashMap;\n use test_utils::tested_by;\n \n@@ -12,8 +8,10 @@ use crate::{\n     ids::{AstItemDef, LocationCtx, MacroCallId, MacroCallLoc, MacroDefId, MacroFileKind},\n     name::MACRO_RULES,\n     nameres::{\n-        diagnostics::DefDiagnostic, raw, CrateDefMap, CrateModuleId, ItemOrMacro, ModuleData,\n-        ModuleDef, PerNs, ReachedFixedPoint, Resolution, ResolveMode,\n+        diagnostics::DefDiagnostic,\n+        mod_resolution::{resolve_submodule, ParentModule},\n+        raw, CrateDefMap, CrateModuleId, ItemOrMacro, ModuleData, ModuleDef, PerNs,\n+        ReachedFixedPoint, Resolution, ResolveMode,\n     },\n     AstId, Const, DefDatabase, Enum, Function, HirFileId, MacroDef, Module, Name, Path, Static,\n     Struct, Trait, TypeAlias, Union,\n@@ -568,7 +566,7 @@ where\n                     name,\n                     is_root,\n                     attr_path.as_ref(),\n-                    self.parent_module.as_ref(),\n+                    self.parent_module,\n                 ) {\n                     Ok(file_id) => {\n                         let module_id = self.push_child_module(name.clone(), ast_id, Some(file_id));\n@@ -679,180 +677,6 @@ fn is_macro_rules(path: &Path) -> bool {\n     path.as_ident() == Some(&MACRO_RULES)\n }\n \n-fn resolve_submodule(\n-    db: &impl DefDatabase,\n-    file_id: HirFileId,\n-    name: &Name,\n-    is_root: bool,\n-    attr_path: Option<&SmolStr>,\n-    parent_module: Option<&ParentModule>,\n-) -> Result<FileId, RelativePathBuf> {\n-    let file_id = file_id.original_file(db);\n-    let source_root_id = db.file_source_root(file_id);\n-    let path = db.file_relative_path(file_id);\n-    let root = RelativePathBuf::default();\n-    let dir_path = path.parent().unwrap_or(&root);\n-    let mod_name = path.file_stem().unwrap_or(\"unknown\");\n-\n-    let resolve_mode = match (attr_path.filter(|p| !p.is_empty()), parent_module) {\n-        (Some(file_path), Some(parent_module)) => {\n-            let file_path = normalize_attribute_path(file_path);\n-            match parent_module.attribute_path() {\n-                Some(parent_module_attr_path) => {\n-                    let path = dir_path\n-                        .join(format!(\n-                            \"{}/{}\",\n-                            normalize_attribute_path(parent_module_attr_path),\n-                            file_path\n-                        ))\n-                        .normalize();\n-                    ResolutionMode::InlineModuleWithAttributePath(\n-                        InsideInlineModuleMode::WithAttributePath(path),\n-                    )\n-                }\n-                None => {\n-                    let path =\n-                        dir_path.join(format!(\"{}/{}\", parent_module.name, file_path)).normalize();\n-                    ResolutionMode::InsideInlineModule(InsideInlineModuleMode::WithAttributePath(\n-                        path,\n-                    ))\n-                }\n-            }\n-        }\n-        (None, Some(parent_module)) => match parent_module.attribute_path() {\n-            Some(parent_module_attr_path) => {\n-                let path = dir_path.join(format!(\n-                    \"{}/{}.rs\",\n-                    normalize_attribute_path(parent_module_attr_path),\n-                    name\n-                ));\n-                ResolutionMode::InlineModuleWithAttributePath(InsideInlineModuleMode::File(path))\n-            }\n-            None => {\n-                let path = dir_path.join(format!(\"{}/{}.rs\", parent_module.name, name));\n-                ResolutionMode::InsideInlineModule(InsideInlineModuleMode::File(path))\n-            }\n-        },\n-        (Some(file_path), None) => {\n-            let file_path = normalize_attribute_path(file_path);\n-            let path = dir_path.join(file_path.as_ref()).normalize();\n-            ResolutionMode::OutOfLine(OutOfLineMode::WithAttributePath(path))\n-        }\n-        _ => {\n-            let is_dir_owner = is_root || mod_name == \"mod\";\n-            if is_dir_owner {\n-                let file_mod = dir_path.join(format!(\"{}.rs\", name));\n-                let dir_mod = dir_path.join(format!(\"{}/mod.rs\", name));\n-                ResolutionMode::OutOfLine(OutOfLineMode::RootOrModRs {\n-                    file: file_mod,\n-                    directory: dir_mod,\n-                })\n-            } else {\n-                let path = dir_path.join(format!(\"{}/{}.rs\", mod_name, name));\n-                ResolutionMode::OutOfLine(OutOfLineMode::FileInDirectory(path))\n-            }\n-        }\n-    };\n-\n-    resolve_mode.resolve(db.source_root(source_root_id))\n-}\n-\n-fn normalize_attribute_path(file_path: &SmolStr) -> Cow<str> {\n-    let current_dir = \"./\";\n-    let windows_path_separator = r#\"\\\"#;\n-    let current_dir_normalize = if file_path.starts_with(current_dir) {\n-        &file_path[current_dir.len()..]\n-    } else {\n-        file_path.as_str()\n-    };\n-    if current_dir_normalize.contains(windows_path_separator) {\n-        Cow::Owned(current_dir_normalize.replace(windows_path_separator, \"/\"))\n-    } else {\n-        Cow::Borrowed(current_dir_normalize)\n-    }\n-}\n-\n-enum OutOfLineMode {\n-    RootOrModRs { file: RelativePathBuf, directory: RelativePathBuf },\n-    FileInDirectory(RelativePathBuf),\n-    WithAttributePath(RelativePathBuf),\n-}\n-\n-impl OutOfLineMode {\n-    pub fn resolve(&self, source_root: Arc<SourceRoot>) -> Result<FileId, RelativePathBuf> {\n-        match self {\n-            OutOfLineMode::RootOrModRs { file, directory } => match source_root.files.get(file) {\n-                None => resolve_simple_path(source_root, directory).map_err(|_| file.clone()),\n-                file_id => resolve_find_result(file_id, file),\n-            },\n-            OutOfLineMode::FileInDirectory(path) => resolve_simple_path(source_root, path),\n-            OutOfLineMode::WithAttributePath(path) => resolve_simple_path(source_root, path),\n-        }\n-    }\n-}\n-\n-enum InsideInlineModuleMode {\n-    File(RelativePathBuf),\n-    WithAttributePath(RelativePathBuf),\n-}\n-\n-impl InsideInlineModuleMode {\n-    pub fn resolve(&self, source_root: Arc<SourceRoot>) -> Result<FileId, RelativePathBuf> {\n-        match self {\n-            InsideInlineModuleMode::File(path) => resolve_simple_path(source_root, path),\n-            InsideInlineModuleMode::WithAttributePath(path) => {\n-                resolve_simple_path(source_root, path)\n-            }\n-        }\n-    }\n-}\n-\n-enum ResolutionMode {\n-    OutOfLine(OutOfLineMode),\n-    InsideInlineModule(InsideInlineModuleMode),\n-    InlineModuleWithAttributePath(InsideInlineModuleMode),\n-}\n-\n-impl ResolutionMode {\n-    pub fn resolve(&self, source_root: Arc<SourceRoot>) -> Result<FileId, RelativePathBuf> {\n-        use self::ResolutionMode::*;\n-\n-        match self {\n-            OutOfLine(mode) => mode.resolve(source_root),\n-            InsideInlineModule(mode) => mode.resolve(source_root),\n-            InlineModuleWithAttributePath(mode) => mode.resolve(source_root),\n-        }\n-    }\n-}\n-\n-fn resolve_simple_path(\n-    source_root: Arc<SourceRoot>,\n-    path: &RelativePathBuf,\n-) -> Result<FileId, RelativePathBuf> {\n-    resolve_find_result(source_root.files.get(path), path)\n-}\n-\n-fn resolve_find_result(\n-    file_id: Option<&FileId>,\n-    path: &RelativePathBuf,\n-) -> Result<FileId, RelativePathBuf> {\n-    match file_id {\n-        Some(file_id) => Ok(file_id.clone()),\n-        None => Err(path.clone()),\n-    }\n-}\n-\n-struct ParentModule<'a> {\n-    name: &'a Name,\n-    attr_path: Option<&'a SmolStr>,\n-}\n-\n-impl<'a> ParentModule<'a> {\n-    pub fn attribute_path(&self) -> Option<&SmolStr> {\n-        self.attr_path.filter(|p| !p.is_empty())\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use ra_db::SourceDatabase;"}, {"sha": "94c9946ffdd9022604226ffb4c82647e6130e323", "filename": "crates/ra_hir/src/nameres/mod_resolution.rs", "status": "added", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/c705fff309ef5ec41c37339ba0bb61d3b24b515d/crates%2Fra_hir%2Fsrc%2Fnameres%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c705fff309ef5ec41c37339ba0bb61d3b24b515d/crates%2Fra_hir%2Fsrc%2Fnameres%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fmod_resolution.rs?ref=c705fff309ef5ec41c37339ba0bb61d3b24b515d", "patch": "@@ -0,0 +1,182 @@\n+use std::{borrow::Cow, sync::Arc};\n+\n+use ra_db::{FileId, SourceRoot};\n+use ra_syntax::SmolStr;\n+use relative_path::RelativePathBuf;\n+\n+use crate::{DefDatabase, HirFileId, Name};\n+\n+#[derive(Clone, Copy)]\n+pub(super) struct ParentModule<'a> {\n+    pub(super) name: &'a Name,\n+    pub(super) attr_path: Option<&'a SmolStr>,\n+}\n+\n+impl<'a> ParentModule<'a> {\n+    fn attribute_path(&self) -> Option<&SmolStr> {\n+        self.attr_path.filter(|p| !p.is_empty())\n+    }\n+}\n+\n+pub(super) fn resolve_submodule(\n+    db: &impl DefDatabase,\n+    file_id: HirFileId,\n+    name: &Name,\n+    is_root: bool,\n+    attr_path: Option<&SmolStr>,\n+    parent_module: Option<ParentModule<'_>>,\n+) -> Result<FileId, RelativePathBuf> {\n+    let file_id = file_id.original_file(db);\n+    let source_root_id = db.file_source_root(file_id);\n+    let path = db.file_relative_path(file_id);\n+    let root = RelativePathBuf::default();\n+    let dir_path = path.parent().unwrap_or(&root);\n+    let mod_name = path.file_stem().unwrap_or(\"unknown\");\n+\n+    let resolve_mode = match (attr_path.filter(|p| !p.is_empty()), parent_module) {\n+        (Some(file_path), Some(parent_module)) => {\n+            let file_path = normalize_attribute_path(file_path);\n+            match parent_module.attribute_path() {\n+                Some(parent_module_attr_path) => {\n+                    let path = dir_path\n+                        .join(format!(\n+                            \"{}/{}\",\n+                            normalize_attribute_path(parent_module_attr_path),\n+                            file_path\n+                        ))\n+                        .normalize();\n+                    ResolutionMode::InlineModuleWithAttributePath(\n+                        InsideInlineModuleMode::WithAttributePath(path),\n+                    )\n+                }\n+                None => {\n+                    let path =\n+                        dir_path.join(format!(\"{}/{}\", parent_module.name, file_path)).normalize();\n+                    ResolutionMode::InsideInlineModule(InsideInlineModuleMode::WithAttributePath(\n+                        path,\n+                    ))\n+                }\n+            }\n+        }\n+        (None, Some(parent_module)) => match parent_module.attribute_path() {\n+            Some(parent_module_attr_path) => {\n+                let path = dir_path.join(format!(\n+                    \"{}/{}.rs\",\n+                    normalize_attribute_path(parent_module_attr_path),\n+                    name\n+                ));\n+                ResolutionMode::InlineModuleWithAttributePath(InsideInlineModuleMode::File(path))\n+            }\n+            None => {\n+                let path = dir_path.join(format!(\"{}/{}.rs\", parent_module.name, name));\n+                ResolutionMode::InsideInlineModule(InsideInlineModuleMode::File(path))\n+            }\n+        },\n+        (Some(file_path), None) => {\n+            let file_path = normalize_attribute_path(file_path);\n+            let path = dir_path.join(file_path.as_ref()).normalize();\n+            ResolutionMode::OutOfLine(OutOfLineMode::WithAttributePath(path))\n+        }\n+        _ => {\n+            let is_dir_owner = is_root || mod_name == \"mod\";\n+            if is_dir_owner {\n+                let file_mod = dir_path.join(format!(\"{}.rs\", name));\n+                let dir_mod = dir_path.join(format!(\"{}/mod.rs\", name));\n+                ResolutionMode::OutOfLine(OutOfLineMode::RootOrModRs {\n+                    file: file_mod,\n+                    directory: dir_mod,\n+                })\n+            } else {\n+                let path = dir_path.join(format!(\"{}/{}.rs\", mod_name, name));\n+                ResolutionMode::OutOfLine(OutOfLineMode::FileInDirectory(path))\n+            }\n+        }\n+    };\n+\n+    resolve_mode.resolve(db.source_root(source_root_id))\n+}\n+\n+fn normalize_attribute_path(file_path: &SmolStr) -> Cow<str> {\n+    let current_dir = \"./\";\n+    let windows_path_separator = r#\"\\\"#;\n+    let current_dir_normalize = if file_path.starts_with(current_dir) {\n+        &file_path[current_dir.len()..]\n+    } else {\n+        file_path.as_str()\n+    };\n+    if current_dir_normalize.contains(windows_path_separator) {\n+        Cow::Owned(current_dir_normalize.replace(windows_path_separator, \"/\"))\n+    } else {\n+        Cow::Borrowed(current_dir_normalize)\n+    }\n+}\n+\n+enum OutOfLineMode {\n+    RootOrModRs { file: RelativePathBuf, directory: RelativePathBuf },\n+    FileInDirectory(RelativePathBuf),\n+    WithAttributePath(RelativePathBuf),\n+}\n+\n+impl OutOfLineMode {\n+    pub fn resolve(&self, source_root: Arc<SourceRoot>) -> Result<FileId, RelativePathBuf> {\n+        match self {\n+            OutOfLineMode::RootOrModRs { file, directory } => match source_root.files.get(file) {\n+                None => resolve_simple_path(source_root, directory).map_err(|_| file.clone()),\n+                file_id => resolve_find_result(file_id, file),\n+            },\n+            OutOfLineMode::FileInDirectory(path) => resolve_simple_path(source_root, path),\n+            OutOfLineMode::WithAttributePath(path) => resolve_simple_path(source_root, path),\n+        }\n+    }\n+}\n+\n+enum InsideInlineModuleMode {\n+    File(RelativePathBuf),\n+    WithAttributePath(RelativePathBuf),\n+}\n+\n+impl InsideInlineModuleMode {\n+    pub fn resolve(&self, source_root: Arc<SourceRoot>) -> Result<FileId, RelativePathBuf> {\n+        match self {\n+            InsideInlineModuleMode::File(path) => resolve_simple_path(source_root, path),\n+            InsideInlineModuleMode::WithAttributePath(path) => {\n+                resolve_simple_path(source_root, path)\n+            }\n+        }\n+    }\n+}\n+\n+enum ResolutionMode {\n+    OutOfLine(OutOfLineMode),\n+    InsideInlineModule(InsideInlineModuleMode),\n+    InlineModuleWithAttributePath(InsideInlineModuleMode),\n+}\n+\n+impl ResolutionMode {\n+    pub fn resolve(&self, source_root: Arc<SourceRoot>) -> Result<FileId, RelativePathBuf> {\n+        use self::ResolutionMode::*;\n+\n+        match self {\n+            OutOfLine(mode) => mode.resolve(source_root),\n+            InsideInlineModule(mode) => mode.resolve(source_root),\n+            InlineModuleWithAttributePath(mode) => mode.resolve(source_root),\n+        }\n+    }\n+}\n+\n+fn resolve_simple_path(\n+    source_root: Arc<SourceRoot>,\n+    path: &RelativePathBuf,\n+) -> Result<FileId, RelativePathBuf> {\n+    resolve_find_result(source_root.files.get(path), path)\n+}\n+\n+fn resolve_find_result(\n+    file_id: Option<&FileId>,\n+    path: &RelativePathBuf,\n+) -> Result<FileId, RelativePathBuf> {\n+    match file_id {\n+        Some(file_id) => Ok(file_id.clone()),\n+        None => Err(path.clone()),\n+    }\n+}"}, {"sha": "4ff897ca5ed53509cd4cd092fa34f7c20bce530f", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c705fff309ef5ec41c37339ba0bb61d3b24b515d/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c705fff309ef5ec41c37339ba0bb61d3b24b515d/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=c705fff309ef5ec41c37339ba0bb61d3b24b515d", "patch": "@@ -2,7 +2,7 @@ mod macros;\n mod globs;\n mod incremental;\n mod primitives;\n-mod mods;\n+mod mod_resolution;\n \n use std::sync::Arc;\n "}, {"sha": "4f8398460d11e953fffaa2e368e1f60c77fd9241", "filename": "crates/ra_hir/src/nameres/tests/mod_resolution.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c705fff309ef5ec41c37339ba0bb61d3b24b515d/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c705fff309ef5ec41c37339ba0bb61d3b24b515d/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs?ref=c705fff309ef5ec41c37339ba0bb61d3b24b515d", "previous_filename": "crates/ra_hir/src/nameres/tests/mods.rs"}]}