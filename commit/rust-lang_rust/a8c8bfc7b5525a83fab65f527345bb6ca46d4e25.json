{"sha": "a8c8bfc7b5525a83fab65f527345bb6ca46d4e25", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4YzhiZmM3YjU1MjVhODNmYWI2NWY1MjczNDViYjZjYTQ2ZDRlMjU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-11T08:27:27Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-06T19:56:32Z"}, "message": "rt: Add rust_try_get_current_task", "tree": {"sha": "d0f239eda07b7b5b169ea950e5ac2ddb5cc4f7fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0f239eda07b7b5b169ea950e5ac2ddb5cc4f7fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8c8bfc7b5525a83fab65f527345bb6ca46d4e25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8c8bfc7b5525a83fab65f527345bb6ca46d4e25", "html_url": "https://github.com/rust-lang/rust/commit/a8c8bfc7b5525a83fab65f527345bb6ca46d4e25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8c8bfc7b5525a83fab65f527345bb6ca46d4e25/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "801f3225b24a796402b83f660f80e62ac504befe", "url": "https://api.github.com/repos/rust-lang/rust/commits/801f3225b24a796402b83f660f80e62ac504befe", "html_url": "https://github.com/rust-lang/rust/commit/801f3225b24a796402b83f660f80e62ac504befe"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "0105b83e28b4581793155625f6f2fd9ab8f8edf5", "filename": "src/rt/rust_sched_loop.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8c8bfc7b5525a83fab65f527345bb6ca46d4e25/src%2Frt%2Frust_sched_loop.h", "raw_url": "https://github.com/rust-lang/rust/raw/a8c8bfc7b5525a83fab65f527345bb6ca46d4e25/src%2Frt%2Frust_sched_loop.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_loop.h?ref=a8c8bfc7b5525a83fab65f527345bb6ca46d4e25", "patch": "@@ -135,6 +135,7 @@ struct rust_sched_loop\n     void place_task_in_tls(rust_task *task);\n \n     static rust_task *get_task_tls();\n+    static rust_task *try_get_task_tls();\n \n     // Called by each task when they are ready to be destroyed\n     void release_task(rust_task *task);\n@@ -154,7 +155,7 @@ rust_sched_loop::get_log() {\n     return _log;\n }\n \n-inline rust_task* rust_sched_loop::get_task_tls()\n+inline rust_task* rust_sched_loop::try_get_task_tls()\n {\n     if (!tls_initialized)\n         return NULL;\n@@ -165,6 +166,12 @@ inline rust_task* rust_sched_loop::get_task_tls()\n     rust_task *task = reinterpret_cast<rust_task *>\n         (pthread_getspecific(task_key));\n #endif\n+    return task;\n+}\n+\n+inline rust_task* rust_sched_loop::get_task_tls()\n+{\n+    rust_task *task = try_get_task_tls();\n     assert(task && \"Couldn't get the task from TLS!\");\n     return task;\n }"}, {"sha": "cbde863fa231950756d7e900423c62f489ddb727", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a8c8bfc7b5525a83fab65f527345bb6ca46d4e25/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/a8c8bfc7b5525a83fab65f527345bb6ca46d4e25/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=a8c8bfc7b5525a83fab65f527345bb6ca46d4e25", "patch": "@@ -619,14 +619,14 @@ rust_task::record_stack_limit() {\n     record_sp_limit(stk->data + LIMIT_OFFSET + RED_ZONE_SIZE);\n }\n \n-inline rust_task* rust_get_current_task() {\n+inline rust_task* rust_try_get_current_task() {\n     uintptr_t sp_limit = get_sp_limit();\n \n     // FIXME (#1226) - Because of a hack in upcall_call_shim_on_c_stack this\n     // value is sometimes inconveniently set to 0, so we can't use this\n     // method of retreiving the task pointer and need to fall back to TLS.\n     if (sp_limit == 0)\n-        return rust_sched_loop::get_task_tls();\n+        return rust_sched_loop::try_get_task_tls();\n \n     // The stack pointer boundary is stored in a quickly-accessible location\n     // in the TCB. From that we can calculate the address of the stack segment\n@@ -642,6 +642,12 @@ inline rust_task* rust_get_current_task() {\n     return stk->task;\n }\n \n+inline rust_task* rust_get_current_task() {\n+    rust_task* task = rust_try_get_current_task();\n+    assert(task != NULL && \"no current task\");\n+    return task;\n+}\n+\n //\n // Local Variables:\n // mode: C++"}]}