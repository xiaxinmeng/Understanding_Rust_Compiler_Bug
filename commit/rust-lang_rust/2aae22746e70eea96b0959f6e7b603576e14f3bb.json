{"sha": "2aae22746e70eea96b0959f6e7b603576e14f3bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhYWUyMjc0NmU3MGVlYTk2YjA5NTlmNmU3YjYwMzU3NmUxNGYzYmI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-02-05T20:20:57Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-02-05T20:20:57Z"}, "message": "Warn about more ignored bounds on type aliases", "tree": {"sha": "efae49d137fc78caa3e0a148e73ad82c4efc88f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efae49d137fc78caa3e0a148e73ad82c4efc88f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2aae22746e70eea96b0959f6e7b603576e14f3bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2aae22746e70eea96b0959f6e7b603576e14f3bb", "html_url": "https://github.com/rust-lang/rust/commit/2aae22746e70eea96b0959f6e7b603576e14f3bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2aae22746e70eea96b0959f6e7b603576e14f3bb/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c83dd0306215e21ce5f8dab92edcc3ac9795f3da", "url": "https://api.github.com/repos/rust-lang/rust/commits/c83dd0306215e21ce5f8dab92edcc3ac9795f3da", "html_url": "https://github.com/rust-lang/rust/commit/c83dd0306215e21ce5f8dab92edcc3ac9795f3da"}], "stats": {"total": 90, "additions": 68, "deletions": 22}, "files": [{"sha": "ecef168dcadd2f24f29297c9e28c3c7838060bac", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2aae22746e70eea96b0959f6e7b603576e14f3bb/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aae22746e70eea96b0959f6e7b603576e14f3bb/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=2aae22746e70eea96b0959f6e7b603576e14f3bb", "patch": "@@ -355,40 +355,35 @@ fn is_param<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n-fn ensure_no_ty_param_bounds(tcx: TyCtxt,\n-                             span: Span,\n-                             generics: &hir::Generics,\n-                             thing: &'static str) {\n+fn ensure_no_param_bounds(tcx: TyCtxt,\n+                          span: Span,\n+                          generics: &hir::Generics,\n+                          thing: &'static str) {\n     let mut warn = false;\n \n     for ty_param in generics.ty_params() {\n-        for bound in ty_param.bounds.iter() {\n-            match *bound {\n-                hir::TraitTyParamBound(..) => {\n-                    warn = true;\n-                }\n-                hir::RegionTyParamBound(..) => { }\n-            }\n+        if !ty_param.bounds.is_empty() {\n+            warn = true;\n         }\n     }\n \n-    for predicate in generics.where_clause.predicates.iter() {\n-        match *predicate {\n-            hir::WherePredicate::BoundPredicate(..) => {\n-                warn = true;\n-            }\n-            hir::WherePredicate::RegionPredicate(..) => { }\n-            hir::WherePredicate::EqPredicate(..) => { }\n+    for lft_param in generics.lifetimes() {\n+        if !lft_param.bounds.is_empty() {\n+            warn = true;\n         }\n     }\n \n+    if !generics.where_clause.predicates.is_empty() {\n+        warn = true;\n+    }\n+\n     if warn {\n         // According to accepted RFC #XXX, we should\n         // eventually accept these, but it will not be\n         // part of this PR. Still, convert to warning to\n         // make bootstrapping easier.\n         span_warn!(tcx.sess, span, E0122,\n-                   \"trait bounds are ignored in {} definitions\",\n+                   \"bounds are ignored in {}\",\n                    thing);\n     }\n }\n@@ -454,7 +449,7 @@ fn convert_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: ast::NodeId) {\n             }\n         },\n         hir::ItemTy(_, ref generics) => {\n-            ensure_no_ty_param_bounds(tcx, it.span, generics, \"type\");\n+            ensure_no_param_bounds(tcx, it.span, generics, \"type aliases\");\n             tcx.generics_of(def_id);\n             tcx.type_of(def_id);\n             tcx.predicates_of(def_id);"}, {"sha": "759da7b2bde218de795d984a876601e5ae0aaf54", "filename": "src/test/compile-fail/dst-bad-assign-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aae22746e70eea96b0959f6e7b603576e14f3bb/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aae22746e70eea96b0959f6e7b603576e14f3bb/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs?ref=2aae22746e70eea96b0959f6e7b603576e14f3bb", "patch": "@@ -13,7 +13,7 @@\n #![feature(unsized_tuple_coercion)]\n \n type Fat<T: ?Sized> = (isize, &'static str, T);\n-//~^ WARNING trait bounds are not (yet) enforced\n+//~^ WARNING bounds are ignored\n \n #[derive(PartialEq,Eq)]\n struct Bar;"}, {"sha": "aa91ce27c379af2f295e87f16a2aacf89e0d7342", "filename": "src/test/compile-fail/private-in-public-warn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aae22746e70eea96b0959f6e7b603576e14f3bb/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aae22746e70eea96b0959f6e7b603576e14f3bb/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs?ref=2aae22746e70eea96b0959f6e7b603576e14f3bb", "patch": "@@ -58,7 +58,7 @@ mod traits {\n     pub trait PubTr {}\n \n     pub type Alias<T: PrivTr> = T; //~ ERROR private trait `traits::PrivTr` in public interface\n-    //~^ WARN trait bounds are not (yet) enforced in type definitions\n+    //~^ WARN bounds are ignored in type aliases\n     //~| WARNING hard error\n     pub trait Tr1: PrivTr {} //~ ERROR private trait `traits::PrivTr` in public interface\n     //~^ WARNING hard error"}, {"sha": "9e09102f2d43993a93a10e79b7138d1ebde2ff58", "filename": "src/test/ui/param-bounds-ignored.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2aae22746e70eea96b0959f6e7b603576e14f3bb/src%2Ftest%2Fui%2Fparam-bounds-ignored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aae22746e70eea96b0959f6e7b603576e14f3bb/src%2Ftest%2Fui%2Fparam-bounds-ignored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparam-bounds-ignored.rs?ref=2aae22746e70eea96b0959f6e7b603576e14f3bb", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// must-compile-successfully\n+\n+use std::rc::Rc;\n+\n+type SVec<T: Send> = Vec<T>;\n+type VVec<'b, 'a: 'b> = Vec<&'a i32>;\n+type WVec<'b, T: 'b> = Vec<T>;\n+\n+fn foo<'a>(y: &'a i32) {\n+    // If the bounds above would matter, the code below would be rejected.\n+    let mut x : SVec<_> = Vec::new();\n+    x.push(Rc::new(42));\n+\n+    let mut x : VVec<'static, 'a> = Vec::new();\n+    x.push(y);\n+\n+    let mut x : WVec<'static, & 'a i32> = Vec::new();\n+    x.push(y);\n+}\n+\n+fn main() {\n+    foo(&42);\n+}"}, {"sha": "a14d416aaa73356c7c8c4ec9c6262bda2a924acc", "filename": "src/test/ui/param-bounds-ignored.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2aae22746e70eea96b0959f6e7b603576e14f3bb/src%2Ftest%2Fui%2Fparam-bounds-ignored.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aae22746e70eea96b0959f6e7b603576e14f3bb/src%2Ftest%2Fui%2Fparam-bounds-ignored.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparam-bounds-ignored.stderr?ref=2aae22746e70eea96b0959f6e7b603576e14f3bb", "patch": "@@ -0,0 +1,18 @@\n+warning[E0122]: bounds are ignored in type aliases\n+  --> $DIR/param-bounds-ignored.rs:15:1\n+   |\n+15 | type SVec<T: Send> = Vec<T>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning[E0122]: bounds are ignored in type aliases\n+  --> $DIR/param-bounds-ignored.rs:16:1\n+   |\n+16 | type VVec<'b, 'a: 'b> = Vec<&'a i32>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning[E0122]: bounds are ignored in type aliases\n+  --> $DIR/param-bounds-ignored.rs:17:1\n+   |\n+17 | type WVec<'b, T: 'b> = Vec<T>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+"}]}