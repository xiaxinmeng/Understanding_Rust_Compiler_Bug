{"sha": "7cbcdae81879893f02f681d945402acedba89c7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjYmNkYWU4MTg3OTg5M2YwMmY2ODFkOTQ1NDAyYWNlZGJhODljN2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-01T22:32:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-01T22:32:26Z"}, "message": "Auto merge of #54693 - RalfJung:ctfe-scalar-pair-undef, r=oli-obk\n\ndo not normalize all non-scalar constants to a ConstValue::ScalarPair\n\nWe still need `ConstValue::ScalarPair` for match handling (matching slices and strings), but that will never see anything `Undef`. For non-fat-ptr `ScalarPair`, just point to the allocation like larger data structures do.\n\nFixes https://github.com/rust-lang/rust/issues/54387\n\nr? @eddyb", "tree": {"sha": "4d85c02e43a07dbd3ba8a14c8a56ef018d24279a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d85c02e43a07dbd3ba8a14c8a56ef018d24279a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cbcdae81879893f02f681d945402acedba89c7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cbcdae81879893f02f681d945402acedba89c7c", "html_url": "https://github.com/rust-lang/rust/commit/7cbcdae81879893f02f681d945402acedba89c7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cbcdae81879893f02f681d945402acedba89c7c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de3d640f59c4fa4a09faf2a8d6b0a812aaa6d6cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/de3d640f59c4fa4a09faf2a8d6b0a812aaa6d6cb", "html_url": "https://github.com/rust-lang/rust/commit/de3d640f59c4fa4a09faf2a8d6b0a812aaa6d6cb"}, {"sha": "d62aa3e085245621218759f8c8d56e29f600b74c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d62aa3e085245621218759f8c8d56e29f600b74c", "html_url": "https://github.com/rust-lang/rust/commit/d62aa3e085245621218759f8c8d56e29f600b74c"}], "stats": {"total": 316, "additions": 166, "deletions": 150}, "files": [{"sha": "9c4e995e24d01fe3dd6fd2dd8171a525d0386276", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=7cbcdae81879893f02f681d945402acedba89c7c", "patch": "@@ -391,11 +391,6 @@ for ::mir::interpret::ConstValue<'gcx> {\n     }\n }\n \n-impl_stable_hash_for!(enum mir::interpret::ScalarMaybeUndef {\n-    Scalar(v),\n-    Undef\n-});\n-\n impl_stable_hash_for!(struct mir::interpret::Pointer {\n     alloc_id,\n     offset"}, {"sha": "e9d0b041339556162c663a4e6c7bfce5b73c88a5", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=7cbcdae81879893f02f681d945402acedba89c7c", "patch": "@@ -23,7 +23,7 @@ pub use self::error::{\n     FrameInfo, ConstEvalResult,\n };\n \n-pub use self::value::{Scalar, ConstValue, ScalarMaybeUndef};\n+pub use self::value::{Scalar, ConstValue};\n \n use std::fmt;\n use mir;"}, {"sha": "d695ad88e47aa3d14cc8a355ac1508ce398652b5", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 9, "deletions": 99, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=7cbcdae81879893f02f681d945402acedba89c7c", "patch": "@@ -24,15 +24,18 @@ pub enum ConstValue<'tcx> {\n     /// to allow HIR creation to happen for everything before needing to be able to run constant\n     /// evaluation\n     Unevaluated(DefId, &'tcx Substs<'tcx>),\n+\n     /// Used only for types with layout::abi::Scalar ABI and ZSTs\n     ///\n     /// Not using the enum `Value` to encode that this must not be `Undef`\n     Scalar(Scalar),\n-    /// Used only for types with layout::abi::ScalarPair\n+\n+    /// Used only for *fat pointers* with layout::abi::ScalarPair\n     ///\n-    /// The second field may be undef in case of `Option<usize>::None`\n-    ScalarPair(Scalar, ScalarMaybeUndef),\n-    /// Used only for the remaining cases. An allocation + offset into the allocation.\n+    /// Needed for pattern matching code related to slices and strings.\n+    ScalarPair(Scalar, Scalar),\n+\n+    /// An allocation + offset into the allocation.\n     /// Invariant: The AllocId matches the allocation.\n     ByRef(AllocId, &'tcx Allocation, Size),\n }\n@@ -67,12 +70,12 @@ impl<'tcx> ConstValue<'tcx> {\n         ConstValue::ScalarPair(val, Scalar::Bits {\n             bits: len as u128,\n             size: cx.data_layout().pointer_size.bytes() as u8,\n-        }.into())\n+        })\n     }\n \n     #[inline]\n     pub fn new_dyn_trait(val: Scalar, vtable: Pointer) -> Self {\n-        ConstValue::ScalarPair(val, Scalar::Ptr(vtable).into())\n+        ConstValue::ScalarPair(val, Scalar::Ptr(vtable))\n     }\n }\n \n@@ -340,96 +343,3 @@ pub enum Scalar<Id=AllocId> {\n     /// relocation and its associated offset together as a `Pointer` here.\n     Ptr(Pointer<Id>),\n }\n-\n-#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n-pub enum ScalarMaybeUndef<Id=AllocId> {\n-    Scalar(Scalar<Id>),\n-    Undef,\n-}\n-\n-impl From<Scalar> for ScalarMaybeUndef {\n-    #[inline(always)]\n-    fn from(s: Scalar) -> Self {\n-        ScalarMaybeUndef::Scalar(s)\n-    }\n-}\n-\n-impl<'tcx> ScalarMaybeUndef {\n-    #[inline]\n-    pub fn not_undef(self) -> EvalResult<'static, Scalar> {\n-        match self {\n-            ScalarMaybeUndef::Scalar(scalar) => Ok(scalar),\n-            ScalarMaybeUndef::Undef => err!(ReadUndefBytes(Size::from_bytes(0))),\n-        }\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_ptr(self) -> EvalResult<'tcx, Pointer> {\n-        self.not_undef()?.to_ptr()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_bits(self, target_size: Size) -> EvalResult<'tcx, u128> {\n-        self.not_undef()?.to_bits(target_size)\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_bool(self) -> EvalResult<'tcx, bool> {\n-        self.not_undef()?.to_bool()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_char(self) -> EvalResult<'tcx, char> {\n-        self.not_undef()?.to_char()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_f32(self) -> EvalResult<'tcx, f32> {\n-        self.not_undef()?.to_f32()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_f64(self) -> EvalResult<'tcx, f64> {\n-        self.not_undef()?.to_f64()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_u8(self) -> EvalResult<'tcx, u8> {\n-        self.not_undef()?.to_u8()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_u32(self) -> EvalResult<'tcx, u32> {\n-        self.not_undef()?.to_u32()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_u64(self) -> EvalResult<'tcx, u64> {\n-        self.not_undef()?.to_u64()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_usize(self, cx: impl HasDataLayout) -> EvalResult<'tcx, u64> {\n-        self.not_undef()?.to_usize(cx)\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_i8(self) -> EvalResult<'tcx, i8> {\n-        self.not_undef()?.to_i8()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_i32(self) -> EvalResult<'tcx, i32> {\n-        self.not_undef()?.to_i32()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_i64(self) -> EvalResult<'tcx, i64> {\n-        self.not_undef()?.to_i64()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_isize(self, cx: impl HasDataLayout) -> EvalResult<'tcx, i64> {\n-        self.not_undef()?.to_isize(cx)\n-    }\n-}"}, {"sha": "f36d9553d31c9723fc114ae64d4ab9603832cfac", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=7cbcdae81879893f02f681d945402acedba89c7c", "patch": "@@ -17,7 +17,7 @@ use hir::def::CtorKind;\n use hir::def_id::DefId;\n use hir::{self, HirId, InlineAsm};\n use middle::region;\n-use mir::interpret::{ConstValue, EvalErrorKind, Scalar, ScalarMaybeUndef};\n+use mir::interpret::{ConstValue, EvalErrorKind, Scalar};\n use mir::visit::MirVisitable;\n use rustc_apfloat::ieee::{Double, Single};\n use rustc_apfloat::Float;\n@@ -2397,7 +2397,7 @@ pub fn fmt_const_val(f: &mut impl Write, const_val: &ty::Const<'_>) -> fmt::Resu\n     // print string literals\n     if let ConstValue::ScalarPair(ptr, len) = value {\n         if let Scalar::Ptr(ptr) = ptr {\n-            if let ScalarMaybeUndef::Scalar(Scalar::Bits { bits: len, .. }) = len {\n+            if let Scalar::Bits { bits: len, .. } = len {\n                 if let Ref(_, &ty::TyS { sty: Str, .. }, _) = ty.sty {\n                     return ty::tls::with(|tcx| {\n                         let alloc = tcx.alloc_map.lock().get(ptr.alloc_id);"}, {"sha": "ab43531240f3f5509637915e1fb7529be2dcfee6", "filename": "src/librustc_codegen_llvm/mir/operand.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs?ref=7cbcdae81879893f02f681d945402acedba89c7c", "patch": "@@ -8,9 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::mir::interpret::ConstEvalErr;\n+use rustc::mir::interpret::{ConstValue, ConstEvalErr};\n use rustc::mir;\n-use rustc::mir::interpret::{ConstValue, ScalarMaybeUndef};\n use rustc::ty;\n use rustc::ty::layout::{self, Align, LayoutOf, TyLayout};\n use rustc_data_structures::sync::Lrc;\n@@ -114,15 +113,12 @@ impl OperandRef<'ll, 'tcx> {\n                     layout.scalar_pair_element_llvm_type(bx.cx, 0, true),\n                 );\n                 let b_layout = layout.scalar_pair_element_llvm_type(bx.cx, 1, true);\n-                let b_llval = match b {\n-                    ScalarMaybeUndef::Scalar(b) => scalar_to_llvm(\n-                        bx.cx,\n-                        b,\n-                        b_scalar,\n-                        b_layout,\n-                    ),\n-                    ScalarMaybeUndef::Undef => C_undef(b_layout),\n-                };\n+                let b_llval = scalar_to_llvm(\n+                    bx.cx,\n+                    b,\n+                    b_scalar,\n+                    b_layout,\n+                );\n                 OperandValue::Pair(a_llval, b_llval)\n             },\n             ConstValue::ByRef(_, alloc, offset) => {"}, {"sha": "07e2cfe1e80d2f318c4214aa24c2c08b41e31c5e", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=7cbcdae81879893f02f681d945402acedba89c7c", "patch": "@@ -17,7 +17,7 @@ use rustc::hir::{self, def_id::DefId};\n use rustc::mir::interpret::ConstEvalErr;\n use rustc::mir;\n use rustc::ty::{self, TyCtxt, Instance, query::TyCtxtAt};\n-use rustc::ty::layout::{LayoutOf, TyLayout};\n+use rustc::ty::layout::{self, LayoutOf, TyLayout};\n use rustc::ty::subst::Subst;\n use rustc_data_structures::indexed_vec::IndexVec;\n \n@@ -97,8 +97,18 @@ pub(crate) fn eval_promoted<'a, 'mir, 'tcx>(\n pub fn op_to_const<'tcx>(\n     ecx: &CompileTimeEvalContext<'_, '_, 'tcx>,\n     op: OpTy<'tcx>,\n-    normalize: bool,\n+    may_normalize: bool,\n ) -> EvalResult<'tcx, &'tcx ty::Const<'tcx>> {\n+    // We do not normalize just any data.  Only scalar layout and fat pointers.\n+    let normalize = may_normalize\n+        && match op.layout.abi {\n+            layout::Abi::Scalar(..) => true,\n+            layout::Abi::ScalarPair(..) => {\n+                // Must be a fat pointer\n+                op.layout.ty.builtin_deref(true).is_some()\n+            },\n+            _ => false,\n+        };\n     let normalized_op = if normalize {\n         ecx.try_read_value(op)?\n     } else {\n@@ -125,7 +135,7 @@ pub fn op_to_const<'tcx>(\n         Ok(Value::Scalar(x)) =>\n             ConstValue::Scalar(x.not_undef()?),\n         Ok(Value::ScalarPair(a, b)) =>\n-            ConstValue::ScalarPair(a.not_undef()?, b),\n+            ConstValue::ScalarPair(a.not_undef()?, b.not_undef()?),\n     };\n     Ok(ty::Const::from_const_value(ecx.tcx.tcx, val, op.layout.ty))\n }"}, {"sha": "b22cc4a1a42b50d14c1d139f99a9044c334b13b9", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=7cbcdae81879893f02f681d945402acedba89c7c", "patch": "@@ -1124,13 +1124,6 @@ pub fn compare_const_vals<'a, 'tcx>(\n                         len_b,\n                     ),\n                 ) if ptr_a.offset.bytes() == 0 && ptr_b.offset.bytes() == 0 => {\n-                    let len_a = len_a.not_undef().ok();\n-                    let len_b = len_b.not_undef().ok();\n-                    if len_a.is_none() || len_b.is_none() {\n-                        tcx.sess.struct_err(\"str slice len is undef\").delay_as_bug();\n-                    }\n-                    let len_a = len_a?;\n-                    let len_b = len_b?;\n                     if let Ok(len_a) = len_a.to_bits(tcx.data_layout.pointer_size) {\n                         if let Ok(len_b) = len_b.to_bits(tcx.data_layout.pointer_size) {\n                             if len_a == len_b {"}, {"sha": "ff059e7d1853b0c8592d3af9bd8edf2d9700b198", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=7cbcdae81879893f02f681d945402acedba89c7c", "patch": "@@ -25,14 +25,13 @@ use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::mir::interpret::{\n     GlobalId, Scalar, FrameInfo, AllocId,\n     EvalResult, EvalErrorKind,\n-    ScalarMaybeUndef,\n     truncate, sign_extend,\n };\n \n use syntax::source_map::{self, Span};\n \n use super::{\n-    Value, Operand, MemPlace, MPlaceTy, Place,\n+    Value, Operand, MemPlace, MPlaceTy, Place, ScalarMaybeUndef,\n     Memory, Machine\n };\n "}, {"sha": "11e27a597fbcab9a1efcfb954956a6d68e994563", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=7cbcdae81879893f02f681d945402acedba89c7c", "patch": "@@ -21,15 +21,15 @@ use std::ptr;\n \n use rustc::ty::{self, Instance, query::TyCtxtAt};\n use rustc::ty::layout::{self, Align, TargetDataLayout, Size, HasDataLayout};\n-use rustc::mir::interpret::{Pointer, AllocId, Allocation, ConstValue, ScalarMaybeUndef, GlobalId,\n+use rustc::mir::interpret::{Pointer, AllocId, Allocation, ConstValue, GlobalId,\n                             EvalResult, Scalar, EvalErrorKind, AllocType, PointerArithmetic,\n                             truncate};\n pub use rustc::mir::interpret::{write_target_uint, read_target_uint};\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n \n use syntax::ast::Mutability;\n \n-use super::Machine;\n+use super::{Machine, ScalarMaybeUndef};\n \n #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]\n pub enum MemoryKind<T> {"}, {"sha": "b840af193b64a7d87c4fb3c4a40664d93e19a26f", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=7cbcdae81879893f02f681d945402acedba89c7c", "patch": "@@ -34,4 +34,4 @@ pub use self::memory::{Memory, MemoryKind};\n \n pub use self::machine::Machine;\n \n-pub use self::operand::{Value, ValTy, Operand, OpTy};\n+pub use self::operand::{ScalarMaybeUndef, Value, ValTy, Operand, OpTy};"}, {"sha": "b53bcfa993d53d9ecb389c9347e442afe73eb363", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 96, "deletions": 2, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=7cbcdae81879893f02f681d945402acedba89c7c", "patch": "@@ -19,11 +19,105 @@ use rustc::ty::layout::{self, Size, LayoutOf, TyLayout, HasDataLayout, IntegerEx\n \n use rustc::mir::interpret::{\n     GlobalId, AllocId,\n-    ConstValue, Pointer, Scalar, ScalarMaybeUndef,\n+    ConstValue, Pointer, Scalar,\n     EvalResult, EvalErrorKind\n };\n use super::{EvalContext, Machine, MemPlace, MPlaceTy, MemoryKind};\n \n+#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n+pub enum ScalarMaybeUndef<Id=AllocId> {\n+    Scalar(Scalar<Id>),\n+    Undef,\n+}\n+\n+impl From<Scalar> for ScalarMaybeUndef {\n+    #[inline(always)]\n+    fn from(s: Scalar) -> Self {\n+        ScalarMaybeUndef::Scalar(s)\n+    }\n+}\n+\n+impl<'tcx> ScalarMaybeUndef {\n+    #[inline]\n+    pub fn not_undef(self) -> EvalResult<'static, Scalar> {\n+        match self {\n+            ScalarMaybeUndef::Scalar(scalar) => Ok(scalar),\n+            ScalarMaybeUndef::Undef => err!(ReadUndefBytes(Size::from_bytes(0))),\n+        }\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_ptr(self) -> EvalResult<'tcx, Pointer> {\n+        self.not_undef()?.to_ptr()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_bits(self, target_size: Size) -> EvalResult<'tcx, u128> {\n+        self.not_undef()?.to_bits(target_size)\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_bool(self) -> EvalResult<'tcx, bool> {\n+        self.not_undef()?.to_bool()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_char(self) -> EvalResult<'tcx, char> {\n+        self.not_undef()?.to_char()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_f32(self) -> EvalResult<'tcx, f32> {\n+        self.not_undef()?.to_f32()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_f64(self) -> EvalResult<'tcx, f64> {\n+        self.not_undef()?.to_f64()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_u8(self) -> EvalResult<'tcx, u8> {\n+        self.not_undef()?.to_u8()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_u32(self) -> EvalResult<'tcx, u32> {\n+        self.not_undef()?.to_u32()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_u64(self) -> EvalResult<'tcx, u64> {\n+        self.not_undef()?.to_u64()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_usize(self, cx: impl HasDataLayout) -> EvalResult<'tcx, u64> {\n+        self.not_undef()?.to_usize(cx)\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_i8(self) -> EvalResult<'tcx, i8> {\n+        self.not_undef()?.to_i8()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_i32(self) -> EvalResult<'tcx, i32> {\n+        self.not_undef()?.to_i32()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_i64(self) -> EvalResult<'tcx, i64> {\n+        self.not_undef()?.to_i64()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_isize(self, cx: impl HasDataLayout) -> EvalResult<'tcx, i64> {\n+        self.not_undef()?.to_isize(cx)\n+    }\n+}\n+\n+\n /// A `Value` represents a single immediate self-contained Rust value.\n ///\n /// For optimization of a few very common cases, there is also a representation for a pair of\n@@ -490,7 +584,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                 Ok(Operand::Indirect(MemPlace::from_ptr(Pointer::new(id, offset), alloc.align)))\n             },\n             ConstValue::ScalarPair(a, b) =>\n-                Ok(Operand::Immediate(Value::ScalarPair(a.into(), b))),\n+                Ok(Operand::Immediate(Value::ScalarPair(a.into(), b.into()))),\n             ConstValue::Scalar(x) =>\n                 Ok(Operand::Immediate(Value::Scalar(x.into()))),\n         }"}, {"sha": "8878e5ca83f41f05ca770d22f78b756fa03b0316", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=7cbcdae81879893f02f681d945402acedba89c7c", "patch": "@@ -19,9 +19,9 @@ use rustc::ty::{self, Ty};\n use rustc::ty::layout::{self, Size, Align, LayoutOf, TyLayout, HasDataLayout};\n \n use rustc::mir::interpret::{\n-    GlobalId, AllocId, Scalar, EvalResult, Pointer, ScalarMaybeUndef, PointerArithmetic\n+    GlobalId, AllocId, Scalar, EvalResult, Pointer, PointerArithmetic\n };\n-use super::{EvalContext, Machine, Value, ValTy, Operand, OpTy, MemoryKind};\n+use super::{EvalContext, Machine, Value, ValTy, ScalarMaybeUndef, Operand, OpTy, MemoryKind};\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct MemPlace<Id=AllocId> {"}, {"sha": "9b507eca3633b1cf16f771dd4ae16f0c05ce86e5", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=7cbcdae81879893f02f681d945402acedba89c7c", "patch": "@@ -11,7 +11,7 @@ use std::mem;\n use rustc::ich::{StableHashingContext, StableHashingContextProvider};\n use rustc::mir;\n use rustc::mir::interpret::{\n-    AllocId, Pointer, Scalar, ScalarMaybeUndef,\n+    AllocId, Pointer, Scalar,\n     Relocations, Allocation, UndefMask,\n     EvalResult, EvalErrorKind,\n };\n@@ -25,7 +25,7 @@ use syntax::ast::Mutability;\n use syntax::source_map::Span;\n \n use super::eval_context::{LocalValue, StackPopCleanup};\n-use super::{Frame, Memory, Operand, MemPlace, Place, Value};\n+use super::{Frame, Memory, Operand, MemPlace, Place, Value, ScalarMaybeUndef};\n use const_eval::CompileTimeInterpreter;\n \n #[derive(Default)]\n@@ -193,6 +193,11 @@ impl<'a, Ctx> Snapshot<'a, Ctx> for Scalar\n     }\n }\n \n+impl_stable_hash_for!(enum ::interpret::ScalarMaybeUndef {\n+    Scalar(v),\n+    Undef\n+});\n+\n impl_snapshot_for!(enum ScalarMaybeUndef {\n     Scalar(s),\n     Undef,"}, {"sha": "c5238d24cf7eddcbb8db0934fa74490205210541", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=7cbcdae81879893f02f681d945402acedba89c7c", "patch": "@@ -15,11 +15,11 @@ use rustc::ty::layout::{self, Size, Primitive};\n use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashSet;\n use rustc::mir::interpret::{\n-    Scalar, AllocType, EvalResult, ScalarMaybeUndef, EvalErrorKind, PointerArithmetic\n+    Scalar, AllocType, EvalResult, EvalErrorKind, PointerArithmetic\n };\n \n use super::{\n-    OpTy, Machine, EvalContext\n+    OpTy, Machine, EvalContext, ScalarMaybeUndef\n };\n \n macro_rules! validation_failure{"}, {"sha": "b2fa83493849cf37f2dad731c8e11cadd67a59ba", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=7cbcdae81879893f02f681d945402acedba89c7c", "patch": "@@ -193,7 +193,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n \n use rustc::hir::Node;\n use rustc::hir::def_id::DefId;\n-use rustc::mir::interpret::{AllocId, ConstValue, ScalarMaybeUndef};\n+use rustc::mir::interpret::{AllocId, ConstValue};\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem, StartFnLangItem};\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, TypeFoldable, Ty, TyCtxt, GenericParamDefKind};\n@@ -1263,11 +1263,11 @@ fn collect_const<'a, 'tcx>(\n     };\n     match val {\n         ConstValue::Unevaluated(..) => bug!(\"const eval yielded unevaluated const\"),\n-        ConstValue::ScalarPair(Scalar::Ptr(a), ScalarMaybeUndef::Scalar(Scalar::Ptr(b))) => {\n+        ConstValue::ScalarPair(Scalar::Ptr(a), Scalar::Ptr(b)) => {\n             collect_miri(tcx, a.alloc_id, output);\n             collect_miri(tcx, b.alloc_id, output);\n         }\n-        ConstValue::ScalarPair(_, ScalarMaybeUndef::Scalar(Scalar::Ptr(ptr))) |\n+        ConstValue::ScalarPair(_, Scalar::Ptr(ptr)) |\n         ConstValue::ScalarPair(Scalar::Ptr(ptr), _) |\n         ConstValue::Scalar(Scalar::Ptr(ptr)) =>\n             collect_miri(tcx, ptr.alloc_id, output),"}, {"sha": "70d50d589d1a041b1e24d827e70fffa07c3187b9", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbcdae81879893f02f681d945402acedba89c7c/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=7cbcdae81879893f02f681d945402acedba89c7c", "patch": "@@ -18,10 +18,10 @@ use rustc::mir::{NullOp, UnOp, StatementKind, Statement, BasicBlock, LocalKind};\n use rustc::mir::{TerminatorKind, ClearCrossCrate, SourceInfo, BinOp, ProjectionElem};\n use rustc::mir::visit::{Visitor, PlaceContext};\n use rustc::mir::interpret::{\n-    ConstEvalErr, EvalErrorKind, ScalarMaybeUndef, Scalar, GlobalId, EvalResult\n+    ConstEvalErr, EvalErrorKind, Scalar, GlobalId, EvalResult\n };\n use rustc::ty::{TyCtxt, self, Instance};\n-use interpret::{self, EvalContext, Value, OpTy, MemoryKind};\n+use interpret::{self, EvalContext, Value, OpTy, MemoryKind, ScalarMaybeUndef};\n use const_eval::{CompileTimeInterpreter, eval_promoted, mk_borrowck_eval_cx};\n use transform::{MirPass, MirSource};\n use syntax::source_map::{Span, DUMMY_SP};"}, {"sha": "5d50004e5549d112925063af615bf2cb444cca51", "filename": "src/test/ui/consts/const-eval/union-ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cbcdae81879893f02f681d945402acedba89c7c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbcdae81879893f02f681d945402acedba89c7c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.rs?ref=7cbcdae81879893f02f681d945402acedba89c7c", "patch": "@@ -22,7 +22,7 @@ const UNION: DummyUnion = DummyUnion { field1: 1065353216 };\n \n const FIELD3: Field3 = unsafe { UNION.field3 }; //~ ERROR this constant cannot be used\n \n-const FIELD_PATH: Struct = Struct { //~ ERROR this constant cannot be used\n+const FIELD_PATH: Struct = Struct { //~ ERROR this constant likely exhibits undefined behavior\n     a: 42,\n     b: unsafe { UNION.field3 },\n };"}, {"sha": "ec51802681e0df40295b55d80407b9800539969f", "filename": "src/test/ui/consts/const-eval/union-ice.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7cbcdae81879893f02f681d945402acedba89c7c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cbcdae81879893f02f681d945402acedba89c7c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr?ref=7cbcdae81879893f02f681d945402acedba89c7c", "patch": "@@ -6,14 +6,16 @@ LL | const FIELD3: Field3 = unsafe { UNION.field3 }; //~ ERROR this constant can\n    |\n    = note: #[deny(const_err)] on by default\n \n-error: this constant cannot be used\n+error[E0080]: this constant likely exhibits undefined behavior\n   --> $DIR/union-ice.rs:25:1\n    |\n-LL | / const FIELD_PATH: Struct = Struct { //~ ERROR this constant cannot be used\n+LL | / const FIELD_PATH: Struct = Struct { //~ ERROR this constant likely exhibits undefined behavior\n LL | |     a: 42,\n LL | |     b: unsafe { UNION.field3 },\n LL | | };\n-   | |__^ attempted to read undefined bytes\n+   | |__^ type validation failed: encountered undefined bytes at .b\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: this constant likely exhibits undefined behavior\n   --> $DIR/union-ice.rs:35:1"}, {"sha": "ac1033add0ee49376c5eea7cf30bf169a601fcba", "filename": "src/test/ui/issues/issue-54387.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7cbcdae81879893f02f681d945402acedba89c7c/src%2Ftest%2Fui%2Fissues%2Fissue-54387.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbcdae81879893f02f681d945402acedba89c7c/src%2Ftest%2Fui%2Fissues%2Fissue-54387.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54387.rs?ref=7cbcdae81879893f02f681d945402acedba89c7c", "patch": "@@ -0,0 +1,12 @@\n+// compile-pass\n+\n+pub struct GstRc {\n+    _obj: *const (),\n+    _borrowed: bool,\n+}\n+\n+const FOO: Option<GstRc> = None;\n+\n+fn main() {\n+    let _meh = FOO;\n+}"}]}