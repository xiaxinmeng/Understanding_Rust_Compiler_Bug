{"sha": "fddb46eda35be880945348e1ec40260af9306d74", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZGI0NmVkYTM1YmU4ODA5NDUzNDhlMWVjNDAyNjBhZjkzMDZkNzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-30T16:48:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-30T16:48:53Z"}, "message": "Auto merge of #51100 - estebank:as-ref, r=oli-obk\n\nSuggest using `as_ref` on some borrow errors [hack]\n\nWhen encountering the following code:\n\n```rust\nstruct Foo;\nfn takes_ref(_: &Foo) {}\nlet ref opt = Some(Foo);\n\nopt.map(|arg| takes_ref(arg));\n```\n\nSuggest using `opt.as_ref().map(|arg| takes_ref(arg));` instead.\n\nThis is a stop gap solution until we expand typeck to deal with these\ncases in a more graceful way.\n\n#43861", "tree": {"sha": "ee0b22341763cd0cb2585dacd9b65fab7c6d8d47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee0b22341763cd0cb2585dacd9b65fab7c6d8d47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fddb46eda35be880945348e1ec40260af9306d74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fddb46eda35be880945348e1ec40260af9306d74", "html_url": "https://github.com/rust-lang/rust/commit/fddb46eda35be880945348e1ec40260af9306d74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fddb46eda35be880945348e1ec40260af9306d74/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74d09399c1289a20b1c258153f005f2604f9ec46", "url": "https://api.github.com/repos/rust-lang/rust/commits/74d09399c1289a20b1c258153f005f2604f9ec46", "html_url": "https://github.com/rust-lang/rust/commit/74d09399c1289a20b1c258153f005f2604f9ec46"}, {"sha": "a19a03a31fc1145f66513de74e9b5f89558719ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/a19a03a31fc1145f66513de74e9b5f89558719ec", "html_url": "https://github.com/rust-lang/rust/commit/a19a03a31fc1145f66513de74e9b5f89558719ec"}], "stats": {"total": 160, "additions": 144, "deletions": 16}, "files": [{"sha": "5b922af821cc228c718f7a77342c36ca42ccd41e", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 72, "deletions": 16, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/fddb46eda35be880945348e1ec40260af9306d74/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fddb46eda35be880945348e1ec40260af9306d74/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=fddb46eda35be880945348e1ec40260af9306d74", "patch": "@@ -19,7 +19,7 @@ use syntax::util::parser::PREC_POSTFIX;\n use syntax_pos::Span;\n use rustc::hir;\n use rustc::hir::def::Def;\n-use rustc::hir::map::NodeItem;\n+use rustc::hir::map::{NodeItem, NodeExpr};\n use rustc::hir::{Item, ItemConst, print};\n use rustc::ty::{self, Ty, AssociatedItem};\n use rustc::ty::adjustment::AllowTwoPhase;\n@@ -140,8 +140,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n \n-        if let Some((msg, suggestion)) = self.check_ref(expr, checked_ty, expected) {\n-            err.span_suggestion(expr.span, msg, suggestion);\n+        if let Some((sp, msg, suggestion)) = self.check_ref(expr, checked_ty, expected) {\n+            err.span_suggestion(sp, msg, suggestion);\n         } else if !self.check_for_cast(&mut err, expr, expr_ty, expected) {\n             let methods = self.get_conversion_methods(expr.span, expected, checked_ty);\n             if let Ok(expr_text) = self.tcx.sess.codemap().span_to_snippet(expr.span) {\n@@ -194,6 +194,57 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    /// Identify some cases where `as_ref()` would be appropriate and suggest it.\n+    ///\n+    /// Given the following code:\n+    /// ```\n+    /// struct Foo;\n+    /// fn takes_ref(_: &Foo) {}\n+    /// let ref opt = Some(Foo);\n+    ///\n+    /// opt.map(|arg| takes_ref(arg));\n+    /// ```\n+    /// Suggest using `opt.as_ref().map(|arg| takes_ref(arg));` instead.\n+    ///\n+    /// It only checks for `Option` and `Result` and won't work with\n+    /// ```\n+    /// opt.map(|arg| { takes_ref(arg) });\n+    /// ```\n+    fn can_use_as_ref(&self, expr: &hir::Expr) -> Option<(Span, &'static str, String)> {\n+        if let hir::ExprPath(hir::QPath::Resolved(_, ref path)) = expr.node {\n+            if let hir::def::Def::Local(id) = path.def {\n+                let parent = self.tcx.hir.get_parent_node(id);\n+                if let Some(NodeExpr(hir::Expr {\n+                    id,\n+                    node: hir::ExprClosure(_, decl, ..),\n+                    ..\n+                })) = self.tcx.hir.find(parent) {\n+                    let parent = self.tcx.hir.get_parent_node(*id);\n+                    if let (Some(NodeExpr(hir::Expr {\n+                        node: hir::ExprMethodCall(path, span, expr),\n+                        ..\n+                    })), 1) = (self.tcx.hir.find(parent), decl.inputs.len()) {\n+                        let self_ty = self.tables.borrow().node_id_to_type(expr[0].hir_id);\n+                        let self_ty = format!(\"{:?}\", self_ty);\n+                        let name = path.name.as_str();\n+                        let is_as_ref_able = (\n+                            self_ty.starts_with(\"&std::option::Option\") ||\n+                            self_ty.starts_with(\"&std::result::Result\") ||\n+                            self_ty.starts_with(\"std::option::Option\") ||\n+                            self_ty.starts_with(\"std::result::Result\")\n+                        ) && (name == \"map\" || name == \"and_then\");\n+                        if is_as_ref_able {\n+                            return Some((span.shrink_to_lo(),\n+                                         \"consider using `as_ref` instead\",\n+                                         \"as_ref().\".into()));\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        None\n+    }\n+\n     /// This function is used to determine potential \"simple\" improvements or users' errors and\n     /// provide them useful help. For example:\n     ///\n@@ -214,32 +265,33 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                  expr: &hir::Expr,\n                  checked_ty: Ty<'tcx>,\n                  expected: Ty<'tcx>)\n-                 -> Option<(&'static str, String)> {\n+                 -> Option<(Span, &'static str, String)> {\n+        let sp = expr.span;\n         match (&expected.sty, &checked_ty.sty) {\n             (&ty::TyRef(_, exp, _), &ty::TyRef(_, check, _)) => match (&exp.sty, &check.sty) {\n                 (&ty::TyStr, &ty::TyArray(arr, _)) |\n                 (&ty::TyStr, &ty::TySlice(arr)) if arr == self.tcx.types.u8 => {\n                     if let hir::ExprLit(_) = expr.node {\n                         let sp = self.sess().codemap().call_span_if_macro(expr.span);\n                         if let Ok(src) = self.tcx.sess.codemap().span_to_snippet(sp) {\n-                            return Some((\"consider removing the leading `b`\",\n+                            return Some((sp,\n+                                         \"consider removing the leading `b`\",\n                                          src[1..].to_string()));\n                         }\n                     }\n-                    None\n                 },\n                 (&ty::TyArray(arr, _), &ty::TyStr) |\n                 (&ty::TySlice(arr), &ty::TyStr) if arr == self.tcx.types.u8 => {\n                     if let hir::ExprLit(_) = expr.node {\n                         let sp = self.sess().codemap().call_span_if_macro(expr.span);\n                         if let Ok(src) = self.tcx.sess.codemap().span_to_snippet(sp) {\n-                            return Some((\"consider adding a leading `b`\",\n+                            return Some((sp,\n+                                         \"consider adding a leading `b`\",\n                                          format!(\"b{}\", src)));\n                         }\n                     }\n-                    None\n                 }\n-                _ => None,\n+                _ => {}\n             },\n             (&ty::TyRef(_, _, mutability), _) => {\n                 // Check if it can work when put into a ref. For example:\n@@ -266,17 +318,20 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             hir::ExprCast(_, _) | hir::ExprBinary(_, _, _) => format!(\"({})\", src),\n                             _ => src,\n                         };\n+                        if let Some(sugg) = self.can_use_as_ref(expr) {\n+                            return Some(sugg);\n+                        }\n                         return Some(match mutability {\n                             hir::Mutability::MutMutable => {\n-                                (\"consider mutably borrowing here\", format!(\"&mut {}\", sugg_expr))\n+                                (sp, \"consider mutably borrowing here\", format!(\"&mut {}\",\n+                                                                                sugg_expr))\n                             }\n                             hir::Mutability::MutImmutable => {\n-                                (\"consider borrowing here\", format!(\"&{}\", sugg_expr))\n+                                (sp, \"consider borrowing here\", format!(\"&{}\", sugg_expr))\n                             }\n                         });\n                     }\n                 }\n-                None\n             }\n             (_, &ty::TyRef(_, checked, _)) => {\n                 // We have `&T`, check if what was expected was `T`. If so,\n@@ -292,7 +347,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         // Maybe remove `&`?\n                         hir::ExprAddrOf(_, ref expr) => {\n                             if let Ok(code) = self.tcx.sess.codemap().span_to_snippet(expr.span) {\n-                                return Some((\"consider removing the borrow\", code));\n+                                return Some((sp, \"consider removing the borrow\", code));\n                             }\n                         }\n \n@@ -303,17 +358,18 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                                 expr.span) {\n                                 let sp = self.sess().codemap().call_span_if_macro(expr.span);\n                                 if let Ok(code) = self.tcx.sess.codemap().span_to_snippet(sp) {\n-                                    return Some((\"consider dereferencing the borrow\",\n+                                    return Some((sp,\n+                                                 \"consider dereferencing the borrow\",\n                                                  format!(\"*{}\", code)));\n                                 }\n                             }\n                         }\n                     }\n                 }\n-                None\n             }\n-            _ => None,\n+            _ => {}\n         }\n+        None\n     }\n \n     fn check_for_cast(&self,"}, {"sha": "ae1c98c8564bfbcf2d74958be377d3e5ef2b6147", "filename": "src/test/ui/suggestions/as-ref.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fddb46eda35be880945348e1ec40260af9306d74/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fddb46eda35be880945348e1ec40260af9306d74/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.rs?ref=fddb46eda35be880945348e1ec40260af9306d74", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo;\n+fn takes_ref(_: &Foo) {}\n+\n+fn main() {\n+  let ref opt = Some(Foo);\n+  opt.map(|arg| takes_ref(arg));\n+  //~^ ERROR mismatched types [E0308]\n+  opt.and_then(|arg| Some(takes_ref(arg)));\n+  //~^ ERROR mismatched types [E0308]\n+  let ref opt: Result<_, ()> = Ok(Foo);\n+  opt.map(|arg| takes_ref(arg));\n+  //~^ ERROR mismatched types [E0308]\n+  opt.and_then(|arg| Ok(takes_ref(arg)));\n+  //~^ ERROR mismatched types [E0308]\n+}"}, {"sha": "27016445ec5ad02f2ed4e2f9ccb8612d4c529d5c", "filename": "src/test/ui/suggestions/as-ref.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/fddb46eda35be880945348e1ec40260af9306d74/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fddb46eda35be880945348e1ec40260af9306d74/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr?ref=fddb46eda35be880945348e1ec40260af9306d74", "patch": "@@ -0,0 +1,47 @@\n+error[E0308]: mismatched types\n+  --> $DIR/as-ref.rs:16:27\n+   |\n+LL |   opt.map(|arg| takes_ref(arg));\n+   |       -                   ^^^ expected &Foo, found struct `Foo`\n+   |       |\n+   |       help: consider using `as_ref` instead: `as_ref().`\n+   |\n+   = note: expected type `&Foo`\n+              found type `Foo`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/as-ref.rs:18:37\n+   |\n+LL |   opt.and_then(|arg| Some(takes_ref(arg)));\n+   |       -                             ^^^ expected &Foo, found struct `Foo`\n+   |       |\n+   |       help: consider using `as_ref` instead: `as_ref().`\n+   |\n+   = note: expected type `&Foo`\n+              found type `Foo`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/as-ref.rs:21:27\n+   |\n+LL |   opt.map(|arg| takes_ref(arg));\n+   |       -                   ^^^ expected &Foo, found struct `Foo`\n+   |       |\n+   |       help: consider using `as_ref` instead: `as_ref().`\n+   |\n+   = note: expected type `&Foo`\n+              found type `Foo`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/as-ref.rs:23:35\n+   |\n+LL |   opt.and_then(|arg| Ok(takes_ref(arg)));\n+   |       -                           ^^^ expected &Foo, found struct `Foo`\n+   |       |\n+   |       help: consider using `as_ref` instead: `as_ref().`\n+   |\n+   = note: expected type `&Foo`\n+              found type `Foo`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}