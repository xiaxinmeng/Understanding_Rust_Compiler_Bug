{"sha": "533a389962c7bfff1bd38e2395cf63ea0af5b8ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzM2EzODk5NjJjN2JmZmYxYmQzOGUyMzk1Y2Y2M2VhMGFmNWI4YWU=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-06-27T17:44:50Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-08-13T13:37:09Z"}, "message": "Small optimization\n\nOptimiize ExprKind::EmptyToAny expressions applied to function calls.", "tree": {"sha": "4457fd9414475efb3b643d4a12f8a517add73c38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4457fd9414475efb3b643d4a12f8a517add73c38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/533a389962c7bfff1bd38e2395cf63ea0af5b8ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/533a389962c7bfff1bd38e2395cf63ea0af5b8ae", "html_url": "https://github.com/rust-lang/rust/commit/533a389962c7bfff1bd38e2395cf63ea0af5b8ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/533a389962c7bfff1bd38e2395cf63ea0af5b8ae/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "798f719daf37155480678ad5da82e2f088095c1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/798f719daf37155480678ad5da82e2f088095c1c", "html_url": "https://github.com/rust-lang/rust/commit/798f719daf37155480678ad5da82e2f088095c1c"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "5705798dab0760e5b602289d03d83c5de994417c", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/533a389962c7bfff1bd38e2395cf63ea0af5b8ae/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/533a389962c7bfff1bd38e2395cf63ea0af5b8ae/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=533a389962c7bfff1bd38e2395cf63ea0af5b8ae", "patch": "@@ -46,12 +46,24 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 this.match_expr(destination, expr_span, block, discriminant, arms)\n             }\n             ExprKind::EmptyToAny { source } => {\n-                // TODO(canndrew): Do we need to do this?\n+                let source = this.hir.mirror(source);\n+                let is_call = match source.kind {\n+                    ExprKind::Call { .. } => true,\n+                    _ => false,\n+                };\n+\n                 unpack!(block = this.as_rvalue(block, source));\n \n-                this.cfg.terminate(block, source_info, TerminatorKind::Unreachable);\n-                let end_block = this.cfg.start_new_block();\n-                end_block.unit()\n+                // This is an optimization. If the expression was a call then we already have an\n+                // unreachable block. Don't bother to terminate it and create a new one.\n+                if is_call {\n+                    block.unit()\n+                }\n+                else {\n+                    this.cfg.terminate(block, source_info, TerminatorKind::Unreachable);\n+                    let end_block = this.cfg.start_new_block();\n+                    end_block.unit()\n+                }\n             }\n             ExprKind::If { condition: cond_expr, then: then_expr, otherwise: else_expr } => {\n                 let operand = unpack!(block = this.as_operand(block, cond_expr));"}]}