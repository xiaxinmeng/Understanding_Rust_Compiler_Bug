{"sha": "fff8e7291381327f5106120b98d7f9585a493cad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZjhlNzI5MTM4MTMyN2Y1MTA2MTIwYjk4ZDdmOTU4NWE0OTNjYWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-03T16:17:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-03T16:17:41Z"}, "message": "Auto merge of #5761 - ThibsG:TypeRepetitionThreshold, r=flip1995\n\nImprovements for `type_repetition_in_bounds` lint\n\nSome improvements for `type_repetition_in_bounds`:\n- add a configurable threshold to trigger the lint (#4380). The lint won't trigger anymore if there are more bounds (strictly) than `conf.max_trait_bounds` on this type.\n- take generic args into account over bounded type (#4323)\n- don't lint for predicates generated in macros (#4326)\n\nFixes #4380,\nFixes #4323,\nFixes #4326,\nCloses #3764\n\nchangelog: Fix multiple FPs in `type_repetition_in_bounds` and add a configuration option\n\nNote: the #3764 has already been fixed but not closed", "tree": {"sha": "0f0e5ccb35231dc0d387227bf155d74bca74c88e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f0e5ccb35231dc0d387227bf155d74bca74c88e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fff8e7291381327f5106120b98d7f9585a493cad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fff8e7291381327f5106120b98d7f9585a493cad", "html_url": "https://github.com/rust-lang/rust/commit/fff8e7291381327f5106120b98d7f9585a493cad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fff8e7291381327f5106120b98d7f9585a493cad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c493090a8a601baea39a592fdbe199bd64d6db22", "url": "https://api.github.com/repos/rust-lang/rust/commits/c493090a8a601baea39a592fdbe199bd64d6db22", "html_url": "https://github.com/rust-lang/rust/commit/c493090a8a601baea39a592fdbe199bd64d6db22"}, {"sha": "2d5930a3da7048d784489f28b44a769880b6ceff", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d5930a3da7048d784489f28b44a769880b6ceff", "html_url": "https://github.com/rust-lang/rust/commit/2d5930a3da7048d784489f28b44a769880b6ceff"}], "stats": {"total": 128, "additions": 107, "deletions": 21}, "files": [{"sha": "38f8d007c72f9037f9dda150d71fdce7433f5dd2", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fff8e7291381327f5106120b98d7f9585a493cad/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff8e7291381327f5106120b98d7f9585a493cad/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=fff8e7291381327f5106120b98d7f9585a493cad", "patch": "@@ -996,7 +996,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box checked_conversions::CheckedConversions);\n     store.register_late_pass(|| box integer_division::IntegerDivision);\n     store.register_late_pass(|| box inherent_to_string::InherentToString);\n-    store.register_late_pass(|| box trait_bounds::TraitBounds);\n+    let max_trait_bounds = conf.max_trait_bounds;\n+    store.register_late_pass(move || box trait_bounds::TraitBounds::new(max_trait_bounds));\n     store.register_late_pass(|| box comparison_chain::ComparisonChain);\n     store.register_late_pass(|| box mut_key::MutableKeyType);\n     store.register_late_pass(|| box modulo_arithmetic::ModuloArithmetic);\n@@ -1033,7 +1034,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let array_size_threshold = conf.array_size_threshold;\n     store.register_late_pass(move || box large_stack_arrays::LargeStackArrays::new(array_size_threshold));\n     store.register_late_pass(move || box large_const_arrays::LargeConstArrays::new(array_size_threshold));\n-    store.register_late_pass(move || box floating_point_arithmetic::FloatingPointArithmetic);\n+    store.register_late_pass(|| box floating_point_arithmetic::FloatingPointArithmetic);\n     store.register_early_pass(|| box as_conversions::AsConversions);\n     store.register_early_pass(|| box utils::internal_lints::ProduceIce);\n     store.register_late_pass(|| box let_underscore::LetUnderscore);"}, {"sha": "0ef70311fb1cde5a80e9f21b20f21ed511d1093f", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fff8e7291381327f5106120b98d7f9585a493cad/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff8e7291381327f5106120b98d7f9585a493cad/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=fff8e7291381327f5106120b98d7f9585a493cad", "patch": "@@ -1,19 +1,19 @@\n use crate::utils::{in_macro, snippet, snippet_with_applicability, span_lint_and_help, SpanlessHash};\n+use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_hir::{GenericBound, Generics, WherePredicate};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n-#[derive(Copy, Clone)]\n-pub struct TraitBounds;\n-\n declare_clippy_lint! {\n     /// **What it does:** This lint warns about unnecessary type repetitions in trait bounds\n     ///\n     /// **Why is this bad?** Repeating the type for every bound makes the code\n     /// less readable than combining the bounds\n     ///\n+    /// **Known problems:** None.\n+    ///\n     /// **Example:**\n     /// ```rust\n     /// pub fn foo<T>(t: T) where T: Copy, T: Clone {}\n@@ -29,6 +29,18 @@ declare_clippy_lint! {\n     \"Types are repeated unnecessary in trait bounds use `+` instead of using `T: _, T: _`\"\n }\n \n+#[derive(Copy, Clone)]\n+pub struct TraitBounds {\n+    max_trait_bounds: u64,\n+}\n+\n+impl TraitBounds {\n+    #[must_use]\n+    pub fn new(max_trait_bounds: u64) -> Self {\n+        Self { max_trait_bounds }\n+    }\n+}\n+\n impl_lint_pass!(TraitBounds => [TYPE_REPETITION_IN_BOUNDS]);\n \n impl<'tcx> LateLintPass<'tcx> for TraitBounds {\n@@ -44,9 +56,14 @@ impl<'tcx> LateLintPass<'tcx> for TraitBounds {\n         let mut map = FxHashMap::default();\n         let mut applicability = Applicability::MaybeIncorrect;\n         for bound in gen.where_clause.predicates {\n-            if let WherePredicate::BoundPredicate(ref p) = bound {\n+            if_chain! {\n+                if let WherePredicate::BoundPredicate(ref p) = bound;\n+                if p.bounds.len() as u64 <= self.max_trait_bounds;\n+                if !in_macro(p.span);\n                 let h = hash(&p.bounded_ty);\n-                if let Some(ref v) = map.insert(h, p.bounds.iter().collect::<Vec<_>>()) {\n+                if let Some(ref v) = map.insert(h, p.bounds.iter().collect::<Vec<_>>());\n+\n+                then {\n                     let mut hint_string = format!(\n                         \"consider combining the bounds: `{}:\",\n                         snippet(cx, p.bounded_ty.span, \"_\")"}, {"sha": "de425211e38ef60b99011a5307377d6fb63c55cf", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff8e7291381327f5106120b98d7f9585a493cad/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff8e7291381327f5106120b98d7f9585a493cad/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=fff8e7291381327f5106120b98d7f9585a493cad", "patch": "@@ -156,6 +156,8 @@ define_Conf! {\n     (array_size_threshold, \"array_size_threshold\": u64, 512_000),\n     /// Lint: VEC_BOX. The size of the boxed type in bytes, where boxing in a `Vec` is allowed\n     (vec_box_size_threshold, \"vec_box_size_threshold\": u64, 4096),\n+    /// Lint: TYPE_REPETITION_IN_BOUNDS. The maximum number of bounds a trait can have to be linted\n+    (max_trait_bounds, \"max_trait_bounds\": u64, 3),\n     /// Lint: STRUCT_EXCESSIVE_BOOLS. The maximum number of bools a struct can have\n     (max_struct_bools, \"max_struct_bools\": u64, 3),\n     /// Lint: FN_PARAMS_EXCESSIVE_BOOLS. The maximum number of bools function parameters can have"}, {"sha": "34341594c1985ef41a7a48b84198fad986c59233", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fff8e7291381327f5106120b98d7f9585a493cad/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff8e7291381327f5106120b98d7f9585a493cad/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=fff8e7291381327f5106120b98d7f9585a493cad", "patch": "@@ -703,6 +703,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     }\n                     for segment in path.segments {\n                         segment.ident.name.hash(&mut self.s);\n+                        self.hash_generic_args(segment.generic_args().args);\n                     }\n                 },\n                 QPath::TypeRelative(ref ty, ref segment) => {\n@@ -711,13 +712,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 },\n             },\n             TyKind::OpaqueDef(_, arg_list) => {\n-                for arg in *arg_list {\n-                    match arg {\n-                        GenericArg::Lifetime(ref l) => self.hash_lifetime(l),\n-                        GenericArg::Type(ref ty) => self.hash_ty(&ty),\n-                        GenericArg::Const(ref ca) => self.hash_body(ca.value.body),\n-                    }\n-                }\n+                self.hash_generic_args(arg_list);\n             },\n             TyKind::TraitObject(_, lifetime) => {\n                 self.hash_lifetime(lifetime);\n@@ -735,4 +730,14 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         self.hash_expr(&self.cx.tcx.hir().body(body_id).value);\n         self.maybe_typeck_tables = old_maybe_typeck_tables;\n     }\n+\n+    fn hash_generic_args(&mut self, arg_list: &[GenericArg<'_>]) {\n+        for arg in arg_list {\n+            match arg {\n+                GenericArg::Lifetime(ref l) => self.hash_lifetime(l),\n+                GenericArg::Type(ref ty) => self.hash_ty(&ty),\n+                GenericArg::Const(ref ca) => self.hash_body(ca.value.body),\n+            }\n+        }\n+    }\n }"}, {"sha": "6fbba01416a8d5a27ed47c0b8ae60206ccc1f5fe", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff8e7291381327f5106120b98d7f9585a493cad/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff8e7291381327f5106120b98d7f9585a493cad/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=fff8e7291381327f5106120b98d7f9585a493cad", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `third-party` at line 5 column 1\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `third-party` at line 5 column 1\n \n error: aborting due to previous error\n "}, {"sha": "766190f209977fcec1a70bd9f5ae9a4ec467c603", "filename": "tests/ui/type_repetition_in_bounds.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/fff8e7291381327f5106120b98d7f9585a493cad/tests%2Fui%2Ftype_repetition_in_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff8e7291381327f5106120b98d7f9585a493cad/tests%2Fui%2Ftype_repetition_in_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype_repetition_in_bounds.rs?ref=fff8e7291381327f5106120b98d7f9585a493cad", "patch": "@@ -1,4 +1,6 @@\n-#[deny(clippy::type_repetition_in_bounds)]\n+#![deny(clippy::type_repetition_in_bounds)]\n+\n+use std::ops::{Add, AddAssign, Div, DivAssign, Mul, MulAssign, Sub, SubAssign};\n \n pub fn foo<T>(_t: T)\n where\n@@ -16,4 +18,55 @@ where\n     unimplemented!();\n }\n \n+// Threshold test (see #4380)\n+trait LintBounds\n+where\n+    Self: Clone,\n+    Self: Copy + Default + Ord,\n+    Self: Add<Output = Self> + AddAssign + Sub<Output = Self> + SubAssign,\n+    Self: Mul<Output = Self> + MulAssign + Div<Output = Self> + DivAssign,\n+{\n+}\n+\n+trait LotsOfBounds\n+where\n+    Self: Clone + Copy + Default + Ord,\n+    Self: Add<Output = Self> + AddAssign + Sub<Output = Self> + SubAssign,\n+    Self: Mul<Output = Self> + MulAssign + Div<Output = Self> + DivAssign,\n+{\n+}\n+\n+// Generic distinction (see #4323)\n+mod issue4323 {\n+    pub struct Foo<A>(A);\n+    pub struct Bar<A, B> {\n+        a: Foo<A>,\n+        b: Foo<B>,\n+    }\n+\n+    impl<A, B> Unpin for Bar<A, B>\n+    where\n+        Foo<A>: Unpin,\n+        Foo<B>: Unpin,\n+    {\n+    }\n+}\n+\n+// Extern macros shouldn't lint (see #4326)\n+extern crate serde;\n+mod issue4326 {\n+    use serde::{Deserialize, Serialize};\n+\n+    trait Foo {}\n+    impl Foo for String {}\n+\n+    #[derive(Debug, Serialize, Deserialize)]\n+    struct Bar<S>\n+    where\n+        S: Foo,\n+    {\n+        foo: S,\n+    }\n+}\n+\n fn main() {}"}, {"sha": "148c19c7d0701dc2910de718d175a03122d26e03", "filename": "tests/ui/type_repetition_in_bounds.stderr", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fff8e7291381327f5106120b98d7f9585a493cad/tests%2Fui%2Ftype_repetition_in_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff8e7291381327f5106120b98d7f9585a493cad/tests%2Fui%2Ftype_repetition_in_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype_repetition_in_bounds.stderr?ref=fff8e7291381327f5106120b98d7f9585a493cad", "patch": "@@ -1,15 +1,23 @@\n error: this type has already been used as a bound predicate\n-  --> $DIR/type_repetition_in_bounds.rs:6:5\n+  --> $DIR/type_repetition_in_bounds.rs:8:5\n    |\n LL |     T: Clone,\n    |     ^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/type_repetition_in_bounds.rs:1:8\n+  --> $DIR/type_repetition_in_bounds.rs:1:9\n    |\n-LL | #[deny(clippy::type_repetition_in_bounds)]\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(clippy::type_repetition_in_bounds)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: consider combining the bounds: `T: Copy + Clone`\n \n-error: aborting due to previous error\n+error: this type has already been used as a bound predicate\n+  --> $DIR/type_repetition_in_bounds.rs:25:5\n+   |\n+LL |     Self: Copy + Default + Ord,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider combining the bounds: `Self: Clone + Copy + Default + Ord`\n+\n+error: aborting due to 2 previous errors\n "}]}