{"sha": "824ea6bf2d883fd04ed826f1d09a20dc3ede11d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNGVhNmJmMmQ4ODNmZDA0ZWQ4MjZmMWQwOWEyMGRjM2VkZTExZDA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-08T07:55:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-08T07:55:30Z"}, "message": "Rollup merge of #72963 - poliorcetics:cstring-from-raw, r=dtolnay\n\nCstring `from_raw` and `into_raw` safety precisions\n\nFixes #48525.\nFixes #68456.\n\nThis issue had two points:\n\n- The one about `from_raw` has been addressed (I hope).\n- The other one, about `into_raw`, has only been partially fixed.\n\nAbout `into_raw`: the idea was to:\n\n> steer users away from using the pattern of CString::{into_raw,from_raw} when interfacing with C APIs that may change the effective length of the string by writing interior NULs or erasing the final NUL\n\nI tried making a `Vec<c_char>` like suggested but my current solution feels very unsafe and *hacky* to me (most notably the type cast), I included it here to make it available for discussion:\n\n```rust\nfn main() {\n    use std::os::raw::c_char;\n\n    let v = String::from(\"abc\")\n        .bytes()\n        // From u8 to i8,\n        // I feel like it will be a problem for values of u8 > 255\n        .map(|c| c as c_char)\n        .collect::<Vec<_>>();\n\n    dbg!(v);\n}\n```", "tree": {"sha": "0011b35a9ecd651616be6a54cd2a2f3f3a83da13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0011b35a9ecd651616be6a54cd2a2f3f3a83da13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/824ea6bf2d883fd04ed826f1d09a20dc3ede11d0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe3e7yCRBK7hj4Ov3rIwAAdHIIADbEKbghSZAvSIHCjlBXCMg0\nqm9VzsAx2lLixzVDJuuOvR+75/C/n2KxX7TW33D1DFn11DUBFwJ7NyIGLqnHOyRy\nmWFciPb3hrZY0l/ozpVUrOgJXNGrNsF4rM05tWy6hwX1lcrLhhzxltWqhaudjYjN\nPVoTA4DEooOtAv/hDIrbffkIVfmjg4eXBeyRfhXkKTMJ3cTIxEHK+BVjPGZp1jKd\nJo2Bopp1C/brFGj9WDfQfahTsTOOqAVS+TNlGdVvbMhdz1Esn7UXdp7Rn1woHFhj\n1PGhjLK5qDm4EuIJ+hv2R1WrfZCo7yIw+luvNXNTNvyJiqVOVTGQVqPT0TrgYoA=\n=jDdp\n-----END PGP SIGNATURE-----\n", "payload": "tree 0011b35a9ecd651616be6a54cd2a2f3f3a83da13\nparent 13815e4b35031ea86eefc2aea4515b753388bbb3\nparent 87abe174c46bf10246369e63a36eccd6748b7dbe\nauthor Ralf Jung <post@ralfj.de> 1591602930 +0200\ncommitter GitHub <noreply@github.com> 1591602930 +0200\n\nRollup merge of #72963 - poliorcetics:cstring-from-raw, r=dtolnay\n\nCstring `from_raw` and `into_raw` safety precisions\n\nFixes #48525.\nFixes #68456.\n\nThis issue had two points:\n\n- The one about `from_raw` has been addressed (I hope).\n- The other one, about `into_raw`, has only been partially fixed.\n\nAbout `into_raw`: the idea was to:\n\n> steer users away from using the pattern of CString::{into_raw,from_raw} when interfacing with C APIs that may change the effective length of the string by writing interior NULs or erasing the final NUL\n\nI tried making a `Vec<c_char>` like suggested but my current solution feels very unsafe and *hacky* to me (most notably the type cast), I included it here to make it available for discussion:\n\n```rust\nfn main() {\n    use std::os::raw::c_char;\n\n    let v = String::from(\"abc\")\n        .bytes()\n        // From u8 to i8,\n        // I feel like it will be a problem for values of u8 > 255\n        .map(|c| c as c_char)\n        .collect::<Vec<_>>();\n\n    dbg!(v);\n}\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/824ea6bf2d883fd04ed826f1d09a20dc3ede11d0", "html_url": "https://github.com/rust-lang/rust/commit/824ea6bf2d883fd04ed826f1d09a20dc3ede11d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/824ea6bf2d883fd04ed826f1d09a20dc3ede11d0/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13815e4b35031ea86eefc2aea4515b753388bbb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/13815e4b35031ea86eefc2aea4515b753388bbb3", "html_url": "https://github.com/rust-lang/rust/commit/13815e4b35031ea86eefc2aea4515b753388bbb3"}, {"sha": "87abe174c46bf10246369e63a36eccd6748b7dbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/87abe174c46bf10246369e63a36eccd6748b7dbe", "html_url": "https://github.com/rust-lang/rust/commit/87abe174c46bf10246369e63a36eccd6748b7dbe"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "b324b1618966bce066c494865a0d7da3e0f0a430", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/824ea6bf2d883fd04ed826f1d09a20dc3ede11d0/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/824ea6bf2d883fd04ed826f1d09a20dc3ede11d0/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=824ea6bf2d883fd04ed826f1d09a20dc3ede11d0", "patch": "@@ -395,6 +395,12 @@ impl CString {\n     /// ownership of a string that was allocated by foreign code) is likely to lead\n     /// to undefined behavior or allocator corruption.\n     ///\n+    /// It should be noted that the length isn't just \"recomputed,\" but that\n+    /// the recomputed length must match the original length from the\n+    /// [`into_raw`] call. This means the [`into_raw`]/`from_raw` methods\n+    /// should not be used when passing the string to C functions that can\n+    /// modify the string's length.\n+    ///\n     /// > **Note:** If you need to borrow a string that was allocated by\n     /// > foreign code, use [`CStr`]. If you need to take ownership of\n     /// > a string that was allocated by foreign code, you will need to\n@@ -440,6 +446,11 @@ impl CString {\n     ///\n     /// Failure to call [`from_raw`] will lead to a memory leak.\n     ///\n+    /// The C side must **not** modify the length of the string (by writing a\n+    /// `NULL` somewhere inside the string or removing the final one) before\n+    /// it makes it back into Rust using [`from_raw`]. See the safety section\n+    /// in [`from_raw`].\n+    ///\n     /// [`from_raw`]: #method.from_raw\n     ///\n     /// # Examples"}]}