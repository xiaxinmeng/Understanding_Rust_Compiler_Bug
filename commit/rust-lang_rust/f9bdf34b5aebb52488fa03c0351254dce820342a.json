{"sha": "f9bdf34b5aebb52488fa03c0351254dce820342a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YmRmMzRiNWFlYmI1MjQ4OGZhMDNjMDM1MTI1NGRjZTgyMDM0MmE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-01-08T11:06:44Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-01-21T09:02:39Z"}, "message": "Resolve `Self` in impl headers", "tree": {"sha": "8194a6d88623edc789509b28dd27604f224b05b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8194a6d88623edc789509b28dd27604f224b05b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9bdf34b5aebb52488fa03c0351254dce820342a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9bdf34b5aebb52488fa03c0351254dce820342a", "html_url": "https://github.com/rust-lang/rust/commit/f9bdf34b5aebb52488fa03c0351254dce820342a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9bdf34b5aebb52488fa03c0351254dce820342a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4cb1878f04b0edb91f978347a6cb9545e9a1275", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4cb1878f04b0edb91f978347a6cb9545e9a1275", "html_url": "https://github.com/rust-lang/rust/commit/b4cb1878f04b0edb91f978347a6cb9545e9a1275"}], "stats": {"total": 189, "additions": 122, "deletions": 67}, "files": [{"sha": "4ae841e8cc2d2b6fe4c9e5f450932c655441d788", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 61, "deletions": 53, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/f9bdf34b5aebb52488fa03c0351254dce820342a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9bdf34b5aebb52488fa03c0351254dce820342a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f9bdf34b5aebb52488fa03c0351254dce820342a", "patch": "@@ -1551,7 +1551,10 @@ impl<'a> Resolver<'a> {\n             }\n \n             ItemKind::DefaultImpl(_, ref trait_ref) => {\n-                self.with_optional_trait_ref(Some(trait_ref), |_, _| {});\n+                self.with_optional_trait_ref(Some(trait_ref), |this, _| {\n+                    // Resolve type arguments in trait path\n+                    visit::walk_trait_ref(this, trait_ref);\n+                });\n             }\n             ItemKind::Impl(.., ref generics, ref opt_trait_ref, ref self_type, ref impl_items) =>\n                 self.resolve_implementation(generics,\n@@ -1715,7 +1718,6 @@ impl<'a> Resolver<'a> {\n                 new_val = Some((def.def_id(), trait_ref.clone()));\n                 new_id = Some(def.def_id());\n             }\n-            visit::walk_trait_ref(self, trait_ref);\n         }\n         let original_trait_ref = replace(&mut self.current_trait_ref, new_val);\n         let result = f(self, new_id);\n@@ -1743,60 +1745,66 @@ impl<'a> Resolver<'a> {\n                               impl_items: &[ImplItem]) {\n         // If applicable, create a rib for the type parameters.\n         self.with_type_parameter_rib(HasTypeParameters(generics, ItemRibKind), |this| {\n-            // Resolve the type parameters.\n-            this.visit_generics(generics);\n-\n-            // Resolve the trait reference, if necessary.\n-            this.with_optional_trait_ref(opt_trait_reference.as_ref(), |this, trait_id| {\n-                // Resolve the self type.\n-                this.visit_ty(self_type);\n-\n-                let item_def_id = this.definitions.local_def_id(item_id);\n-                this.with_self_rib(Def::SelfTy(trait_id, Some(item_def_id)), |this| {\n-                    this.with_current_self_type(self_type, |this| {\n-                        for impl_item in impl_items {\n-                            this.check_proc_macro_attrs(&impl_item.attrs);\n-                            this.resolve_visibility(&impl_item.vis);\n-                            match impl_item.node {\n-                                ImplItemKind::Const(..) => {\n-                                    // If this is a trait impl, ensure the const\n-                                    // exists in trait\n-                                    this.check_trait_item(impl_item.ident.name,\n-                                                          ValueNS,\n-                                                          impl_item.span,\n-                                        |n, s| ResolutionError::ConstNotMemberOfTrait(n, s));\n-                                    visit::walk_impl_item(this, impl_item);\n-                                }\n-                                ImplItemKind::Method(ref sig, _) => {\n-                                    // If this is a trait impl, ensure the method\n-                                    // exists in trait\n-                                    this.check_trait_item(impl_item.ident.name,\n-                                                          ValueNS,\n-                                                          impl_item.span,\n-                                        |n, s| ResolutionError::MethodNotMemberOfTrait(n, s));\n-\n-                                    // We also need a new scope for the method-\n-                                    // specific type parameters.\n-                                    let type_parameters =\n-                                        HasTypeParameters(&sig.generics,\n-                                                          MethodRibKind(!sig.decl.has_self()));\n-                                    this.with_type_parameter_rib(type_parameters, |this| {\n+            // Dummy self type for better errors if `Self` is used in the trait path.\n+            this.with_self_rib(Def::SelfTy(None, None), |this| {\n+                // Resolve the trait reference, if necessary.\n+                this.with_optional_trait_ref(opt_trait_reference.as_ref(), |this, trait_id| {\n+                    let item_def_id = this.definitions.local_def_id(item_id);\n+                    this.with_self_rib(Def::SelfTy(trait_id, Some(item_def_id)), |this| {\n+                        if let Some(trait_ref) = opt_trait_reference.as_ref() {\n+                            // Resolve type arguments in trait path\n+                            visit::walk_trait_ref(this, trait_ref);\n+                        }\n+                        // Resolve the self type.\n+                        this.visit_ty(self_type);\n+                        // Resolve the type parameters.\n+                        this.visit_generics(generics);\n+                        this.with_current_self_type(self_type, |this| {\n+                            for impl_item in impl_items {\n+                                this.check_proc_macro_attrs(&impl_item.attrs);\n+                                this.resolve_visibility(&impl_item.vis);\n+                                match impl_item.node {\n+                                    ImplItemKind::Const(..) => {\n+                                        // If this is a trait impl, ensure the const\n+                                        // exists in trait\n+                                        this.check_trait_item(impl_item.ident.name,\n+                                                            ValueNS,\n+                                                            impl_item.span,\n+                                            |n, s| ResolutionError::ConstNotMemberOfTrait(n, s));\n                                         visit::walk_impl_item(this, impl_item);\n-                                    });\n-                                }\n-                                ImplItemKind::Type(ref ty) => {\n-                                    // If this is a trait impl, ensure the type\n-                                    // exists in trait\n-                                    this.check_trait_item(impl_item.ident.name,\n-                                                          TypeNS,\n-                                                          impl_item.span,\n-                                        |n, s| ResolutionError::TypeNotMemberOfTrait(n, s));\n-\n-                                    this.visit_ty(ty);\n+                                    }\n+                                    ImplItemKind::Method(ref sig, _) => {\n+                                        // If this is a trait impl, ensure the method\n+                                        // exists in trait\n+                                        this.check_trait_item(impl_item.ident.name,\n+                                                            ValueNS,\n+                                                            impl_item.span,\n+                                            |n, s| ResolutionError::MethodNotMemberOfTrait(n, s));\n+\n+                                        // We also need a new scope for the method-\n+                                        // specific type parameters.\n+                                        let type_parameters =\n+                                            HasTypeParameters(&sig.generics,\n+                                                            MethodRibKind(!sig.decl.has_self()));\n+                                        this.with_type_parameter_rib(type_parameters, |this| {\n+                                            visit::walk_impl_item(this, impl_item);\n+                                        });\n+                                    }\n+                                    ImplItemKind::Type(ref ty) => {\n+                                        // If this is a trait impl, ensure the type\n+                                        // exists in trait\n+                                        this.check_trait_item(impl_item.ident.name,\n+                                                            TypeNS,\n+                                                            impl_item.span,\n+                                            |n, s| ResolutionError::TypeNotMemberOfTrait(n, s));\n+\n+                                        this.visit_ty(ty);\n+                                    }\n+                                    ImplItemKind::Macro(_) =>\n+                                        panic!(\"unexpanded macro in resolve!\"),\n                                 }\n-                                ImplItemKind::Macro(_) => panic!(\"unexpanded macro in resolve!\"),\n                             }\n-                        }\n+                        });\n                     });\n                 });\n             });"}, {"sha": "838dbef8ecf1b3d13e09db328f5b41a3999b68a1", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f9bdf34b5aebb52488fa03c0351254dce820342a/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9bdf34b5aebb52488fa03c0351254dce820342a/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=f9bdf34b5aebb52488fa03c0351254dce820342a", "patch": "@@ -1401,11 +1401,23 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n                 assert_eq!(opt_self_ty, None);\n                 tcx.prohibit_type_params(&path.segments);\n-                let ty = tcx.item_type(def_id);\n-                if let Some(free_substs) = self.get_free_substs() {\n-                    ty.subst(tcx, free_substs)\n+\n+                // FIXME: Self type is not always computed when we are here because type parameter\n+                // bounds may affect Self type and have to be converted before it.\n+                let ty = if def_id.is_local() {\n+                    tcx.item_types.borrow().get(&def_id).cloned()\n                 } else {\n-                    ty\n+                    Some(tcx.item_type(def_id))\n+                };\n+                if let Some(ty) = ty {\n+                    if let Some(free_substs) = self.get_free_substs() {\n+                        ty.subst(tcx, free_substs)\n+                    } else {\n+                        ty\n+                    }\n+                } else {\n+                    tcx.sess.span_err(span, \"`Self` type is used before it's determined\");\n+                    tcx.types.err\n                 }\n             }\n             Def::SelfTy(Some(_), None) => {"}, {"sha": "adc208a0202a2861e7792d2a33f8e7669ea38390", "filename": "src/test/compile-fail/resolve-self-in-impl-2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f9bdf34b5aebb52488fa03c0351254dce820342a/src%2Ftest%2Fcompile-fail%2Fresolve-self-in-impl-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9bdf34b5aebb52488fa03c0351254dce820342a/src%2Ftest%2Fcompile-fail%2Fresolve-self-in-impl-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-self-in-impl-2.rs?ref=f9bdf34b5aebb52488fa03c0351254dce820342a", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S<T = u8>(T);\n+trait Tr<T = u8> {}\n+\n+impl Self for S {} //~ ERROR expected trait, found self type `Self`\n+impl Self::N for S {} //~ ERROR cannot find trait `N` in `Self`\n+\n+fn main() {}"}, {"sha": "82037b6c9ed02646ac201915a642eedd2b1f4732", "filename": "src/test/compile-fail/resolve-self-in-impl.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f9bdf34b5aebb52488fa03c0351254dce820342a/src%2Ftest%2Fcompile-fail%2Fresolve-self-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9bdf34b5aebb52488fa03c0351254dce820342a/src%2Ftest%2Fcompile-fail%2Fresolve-self-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-self-in-impl.rs?ref=f9bdf34b5aebb52488fa03c0351254dce820342a", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S<T = u8>(T);\n+trait Tr<T = u8> {}\n+\n+impl Tr<Self> for S {} // OK\n+\n+// FIXME: `Self` cannot be used in bounds because it depends on bounds itself.\n+impl<T: Tr<Self>> Tr<T> for S {} //~ ERROR `Self` type is used before it's determined\n+impl<T = Self> Tr<T> for S {} //~ ERROR `Self` type is used before it's determined\n+impl Tr for S where Self: Copy {} //~ ERROR `Self` type is used before it's determined\n+impl Tr for S where S<Self>: Copy {} //~ ERROR `Self` type is used before it's determined\n+impl Tr for Self {} //~ ERROR `Self` type is used before it's determined\n+impl Tr for S<Self> {} //~ ERROR `Self` type is used before it's determined\n+impl Self {} //~ ERROR `Self` type is used before it's determined\n+impl S<Self> {} //~ ERROR `Self` type is used before it's determined\n+\n+fn main() {}"}, {"sha": "881f04300ed036f67ed5dd1c74c8b14375dca2da", "filename": "src/test/ui/resolve/issue-23305.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9bdf34b5aebb52488fa03c0351254dce820342a/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9bdf34b5aebb52488fa03c0351254dce820342a/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr?ref=f9bdf34b5aebb52488fa03c0351254dce820342a", "patch": "@@ -1,16 +1,8 @@\n-error[E0411]: cannot find type `Self` in this scope\n+error: `Self` type is used before it's determined\n   --> $DIR/issue-23305.rs:15:12\n    |\n 15 | impl ToNbt<Self> {}\n-   |            ^^^^ `Self` is only available in traits and impls\n-\n-error[E0038]: the trait `ToNbt` cannot be made into an object\n-  --> $DIR/issue-23305.rs:15:6\n-   |\n-15 | impl ToNbt<Self> {}\n-   |      ^^^^^^^^^^^ the trait `ToNbt` cannot be made into an object\n-   |\n-   = note: method `new` has no receiver\n+   |            ^^^^\n \n error: aborting due to previous error\n "}]}