{"sha": "96f1eda6d0ae0cf4f91d28304ded3996efda356a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZjFlZGE2ZDBhZTBjZjRmOTFkMjgzMDRkZWQzOTk2ZWZkYTM1NmE=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-16T09:50:34Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-16T10:19:32Z"}, "message": "Be more careful about pretty-printing literals\n\nBefore, literal printing would basically get derailed completely when\na literal was encountered that did not end up being printed. This\ncaused the strangeness seen in #1532.\n\nAlso cleans up pretty-printing of discriminants a little.\n\nCloses #1510\nCloses #1532", "tree": {"sha": "63a01bf8200de4e716a287c0af3a5f4ccbb800bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63a01bf8200de4e716a287c0af3a5f4ccbb800bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96f1eda6d0ae0cf4f91d28304ded3996efda356a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96f1eda6d0ae0cf4f91d28304ded3996efda356a", "html_url": "https://github.com/rust-lang/rust/commit/96f1eda6d0ae0cf4f91d28304ded3996efda356a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96f1eda6d0ae0cf4f91d28304ded3996efda356a/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d36a71aee17b6dad04a184541cebbb8e3901a5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d36a71aee17b6dad04a184541cebbb8e3901a5a", "html_url": "https://github.com/rust-lang/rust/commit/2d36a71aee17b6dad04a184541cebbb8e3901a5a"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "092fb5780b1f46a4e32a1ade00897033e5681486", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/96f1eda6d0ae0cf4f91d28304ded3996efda356a/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f1eda6d0ae0cf4f91d28304ded3996efda356a/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=96f1eda6d0ae0cf4f91d28304ded3996efda356a", "patch": "@@ -419,6 +419,7 @@ fn print_item(s: ps, &&item: @ast::item) {\n             for v: ast::variant in variants {\n                 space_if_not_bol(s);\n                 maybe_print_comment(s, v.span.lo);\n+                ibox(s, indent_unit);\n                 word(s.s, v.node.name);\n                 if vec::len(v.node.args) > 0u {\n                     popen(s);\n@@ -429,14 +430,15 @@ fn print_item(s: ps, &&item: @ast::item) {\n                     pclose(s);\n                 }\n                 alt v.node.disr_expr {\n-                  some(expr) {\n-                    nbsp(s);\n-                    word_nbsp(s, \"=\");\n-                    print_expr(s, expr);\n+                  some(d) {\n+                    space(s.s);\n+                    word_space(s, \"=\");\n+                    print_expr(s, d);\n                   }\n                   _ {}\n                 }\n                 word(s.s, \";\");\n+                end(s);\n                 maybe_print_trailing_comment(s, v.span, none::<uint>);\n             }\n             bclose(s, item.span);\n@@ -1414,11 +1416,12 @@ fn in_cbox(s: ps) -> bool {\n \n fn print_literal(s: ps, &&lit: @ast::lit) {\n     maybe_print_comment(s, lit.span.lo);\n-    alt next_lit(s) {\n+    alt next_lit(s, lit.span.lo) {\n       some(lt) {\n-        if lt.pos == lit.span.lo { word(s.s, lt.lit); s.cur_lit += 1u; ret; }\n+        word(s.s, lt.lit);\n+        ret;\n       }\n-      _ { }\n+      _ {}\n     }\n     alt lit.node {\n       ast::lit_str(st) { print_string(s, st); }\n@@ -1443,14 +1446,18 @@ fn print_literal(s: ps, &&lit: @ast::lit) {\n \n fn lit_to_str(l: @ast::lit) -> str { be to_str(l, print_literal); }\n \n-fn next_lit(s: ps) -> option::t<lexer::lit> {\n+fn next_lit(s: ps, pos: uint) -> option::t<lexer::lit> {\n     alt s.literals {\n       some(lits) {\n-        if s.cur_lit < vec::len(lits) {\n-            ret some(lits[s.cur_lit]);\n-        } else { ret none::<lexer::lit>; }\n+        while s.cur_lit < vec::len(lits) {\n+            let lt = lits[s.cur_lit];\n+            if lt.pos > pos { ret none; }\n+            s.cur_lit += 1u;\n+            if lt.pos == pos { ret some(lt); }\n+        }\n+        ret none;\n       }\n-      _ { ret none::<lexer::lit>; }\n+      _ { ret none; }\n     }\n }\n "}]}