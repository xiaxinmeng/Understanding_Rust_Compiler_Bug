{"sha": "e443e1bdf9f474f822008f88862fed630b50381f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NDNlMWJkZjlmNDc0ZjgyMjAwOGY4ODg2MmZlZDYzMGI1MDM4MWY=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-09-27T13:21:16Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-10-03T18:21:55Z"}, "message": "Regression tests.\n\nUpdate: incorporate review feedback.", "tree": {"sha": "2112040c865c4fd335b35e661bfbeaef7416ac2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2112040c865c4fd335b35e661bfbeaef7416ac2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e443e1bdf9f474f822008f88862fed630b50381f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e443e1bdf9f474f822008f88862fed630b50381f", "html_url": "https://github.com/rust-lang/rust/commit/e443e1bdf9f474f822008f88862fed630b50381f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e443e1bdf9f474f822008f88862fed630b50381f/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a18d424c48e5b2e23cebf5ab5969a3254ab90a9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a18d424c48e5b2e23cebf5ab5969a3254ab90a9e", "html_url": "https://github.com/rust-lang/rust/commit/a18d424c48e5b2e23cebf5ab5969a3254ab90a9e"}], "stats": {"total": 116, "additions": 116, "deletions": 0}, "files": [{"sha": "cc93794e8fcdc1ab5642df7811d7d00d1e3a7d68", "filename": "src/test/ui/generics/issue-61631-default-type-param-can-reference-self-in-trait.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e443e1bdf9f474f822008f88862fed630b50381f/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e443e1bdf9f474f822008f88862fed630b50381f/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.rs?ref=e443e1bdf9f474f822008f88862fed630b50381f", "patch": "@@ -0,0 +1,20 @@\n+#![crate_type=\"lib\"]\n+\n+// rust-lang/rust#61631: The use of `Self` in the defaults of generic\n+// types in a *trait* definition are allowed.\n+//\n+// It *must* be accepted; we have used this pattern extensively since\n+// Rust 1.0 (see e.g. `trait Add<Rhs=Self>`).\n+trait Tnobound<P = Self> {}\n+\n+impl Tnobound for () { }\n+\n+// This variant is accepted at the definition site; but it will be\n+// rejected at every possible usage site (such as the one immediately\n+// below). Maybe one day we will attempt to catch it at the definition\n+// site, but today this is accepted due to compiler implementation\n+// limitations.\n+trait Tsized<P: Sized = [Self]> {}\n+\n+impl Tsized for () {}\n+//~^ ERROR the size for values of type `[()]` cannot be known at compilation time [E0277]"}, {"sha": "ea0664c48d4d8b6b862640ec9b78d55d6fe509d2", "filename": "src/test/ui/generics/issue-61631-default-type-param-can-reference-self-in-trait.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e443e1bdf9f474f822008f88862fed630b50381f/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e443e1bdf9f474f822008f88862fed630b50381f/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr?ref=e443e1bdf9f474f822008f88862fed630b50381f", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: the size for values of type `[()]` cannot be known at compilation time\n+  --> $DIR/issue-61631-default-type-param-can-reference-self-in-trait.rs:19:6\n+   |\n+LL | impl Tsized for () {}\n+   |      ^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `[()]`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "b560cc2ce7060d33f03ca8c61584136de9a5e8c7", "filename": "src/test/ui/generics/issue-61631-default-type-param-cannot-reference-self.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e443e1bdf9f474f822008f88862fed630b50381f/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e443e1bdf9f474f822008f88862fed630b50381f/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.rs?ref=e443e1bdf9f474f822008f88862fed630b50381f", "patch": "@@ -0,0 +1,45 @@\n+#![crate_type=\"lib\"]\n+\n+// rust-lang/rust#61631: Uses of `Self` in the defaults of generic\n+// types for ADT's are not allowed. We justify this because the `Self`\n+// type could be considered the \"final\" type parameter, that is only\n+// well-defined after all of the other type parameters on the ADT have\n+// been instantiated.\n+//\n+// These were previously were ICE'ing at the usage point anyway (see\n+// `demo_usages` below), so there should not be any backwards\n+// compatibility concern.\n+\n+struct Snobound<'a, P = Self> { x: Option<&'a P> }\n+//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+\n+enum Enobound<'a, P = Self> { A, B(Option<&'a P>) }\n+//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+\n+union Unobound<'a, P = Self> { x: i32, y: Option<&'a P> }\n+//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+\n+// Disallowing `Self` in defaults sidesteps need to check the bounds\n+// on the defaults in cases like these.\n+\n+struct Ssized<'a, P: Sized = [Self]> { x: Option<&'a P> }\n+//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+\n+enum Esized<'a, P: Sized = [Self]> { A, B(Option<&'a P>) }\n+//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+\n+union Usized<'a, P: Sized = [Self]> { x: i32, y: Option<&'a P> }\n+//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+\n+fn demo_usages() {\n+    // An ICE means you only get the error from the first line of the\n+    // demo; comment each out to observe the other ICEs when trying\n+    // this out on older versions of Rust.\n+\n+    let _ice: Snobound;\n+    let _ice: Enobound;\n+    let _ice: Unobound;\n+    let _ice: Ssized;\n+    let _ice: Esized;\n+    let _ice: Usized;\n+}"}, {"sha": "689ffbd0febc2e7bf1ea8a7c076b0bf98f3c7158", "filename": "src/test/ui/generics/issue-61631-default-type-param-cannot-reference-self.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e443e1bdf9f474f822008f88862fed630b50381f/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e443e1bdf9f474f822008f88862fed630b50381f/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.stderr?ref=e443e1bdf9f474f822008f88862fed630b50381f", "patch": "@@ -0,0 +1,39 @@\n+error[E0735]: type parameters cannot use `Self` in their defaults\n+  --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:13:25\n+   |\n+LL | struct Snobound<'a, P = Self> { x: Option<&'a P> }\n+   |                         ^^^^ `Self` in type parameter default\n+\n+error[E0735]: type parameters cannot use `Self` in their defaults\n+  --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:16:23\n+   |\n+LL | enum Enobound<'a, P = Self> { A, B(Option<&'a P>) }\n+   |                       ^^^^ `Self` in type parameter default\n+\n+error[E0735]: type parameters cannot use `Self` in their defaults\n+  --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:19:24\n+   |\n+LL | union Unobound<'a, P = Self> { x: i32, y: Option<&'a P> }\n+   |                        ^^^^ `Self` in type parameter default\n+\n+error[E0735]: type parameters cannot use `Self` in their defaults\n+  --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:25:31\n+   |\n+LL | struct Ssized<'a, P: Sized = [Self]> { x: Option<&'a P> }\n+   |                               ^^^^ `Self` in type parameter default\n+\n+error[E0735]: type parameters cannot use `Self` in their defaults\n+  --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:28:29\n+   |\n+LL | enum Esized<'a, P: Sized = [Self]> { A, B(Option<&'a P>) }\n+   |                             ^^^^ `Self` in type parameter default\n+\n+error[E0735]: type parameters cannot use `Self` in their defaults\n+  --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:31:30\n+   |\n+LL | union Usized<'a, P: Sized = [Self]> { x: i32, y: Option<&'a P> }\n+   |                              ^^^^ `Self` in type parameter default\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0735`."}]}