{"sha": "48def35f1b9b16f37c10e41a29397cf351c04625", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZGVmMzVmMWI5YjE2ZjM3YzEwZTQxYTI5Mzk3Y2YzNTFjMDQ2MjU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-10-31T11:27:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-31T11:27:23Z"}, "message": "Rollup merge of #37438 - Cobrand:index_doc, r=GuillaumeGomez\n\nimprove docs for Index and IndexMut\n\nThis mainly changes the boring example of Foo/Bar of `IndexMut` into a better one.\n\nAlso added explanations about syntactic sugar for `v[index]`.\n\nCloses #36329", "tree": {"sha": "9f7875bcf26ea9900b0d28f532a7e1515184cd6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f7875bcf26ea9900b0d28f532a7e1515184cd6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48def35f1b9b16f37c10e41a29397cf351c04625", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48def35f1b9b16f37c10e41a29397cf351c04625", "html_url": "https://github.com/rust-lang/rust/commit/48def35f1b9b16f37c10e41a29397cf351c04625", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48def35f1b9b16f37c10e41a29397cf351c04625/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4497196ba56e5839bf4ef674851fd06d942c5544", "url": "https://api.github.com/repos/rust-lang/rust/commits/4497196ba56e5839bf4ef674851fd06d942c5544", "html_url": "https://github.com/rust-lang/rust/commit/4497196ba56e5839bf4ef674851fd06d942c5544"}, {"sha": "6768edde788430c5277aad6b5165df8eaaedf3a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6768edde788430c5277aad6b5165df8eaaedf3a2", "html_url": "https://github.com/rust-lang/rust/commit/6768edde788430c5277aad6b5165df8eaaedf3a2"}], "stats": {"total": 85, "additions": 67, "deletions": 18}, "files": [{"sha": "0a86bec728e2c9d511661b59f4e289d3714a31ce", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 67, "deletions": 18, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/48def35f1b9b16f37c10e41a29397cf351c04625/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48def35f1b9b16f37c10e41a29397cf351c04625/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=48def35f1b9b16f37c10e41a29397cf351c04625", "patch": "@@ -1879,10 +1879,18 @@ shr_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n /// The `Index` trait is used to specify the functionality of indexing operations\n /// like `container[index]` when used in an immutable context.\n ///\n+/// `container[index]` is actually syntactic sugar for `*container.index(index)`,\n+/// but only when used as an immutable value. If a mutable value is requested,\n+/// [`IndexMut`] is used instead. This allows nice things such as\n+/// `let value = v[index]` if `value` implements [`Copy`].\n+///\n+/// [`IndexMut`]: ../../std/ops/trait.IndexMut.html\n+/// [`Copy`]: ../../std/marker/trait.Copy.html\n+///\n /// # Examples\n ///\n-/// This example implements `Index` on a read-only `NucleotideCount` container,\n-/// enabling individual counts to be retrieved with index syntax.\n+/// The following example implements `Index` on a read-only `NucleotideCount`\n+/// container, enabling individual counts to be retrieved with index syntax.\n ///\n /// ```\n /// use std::ops::Index;\n@@ -1934,37 +1942,78 @@ pub trait Index<Idx: ?Sized> {\n }\n \n /// The `IndexMut` trait is used to specify the functionality of indexing\n-/// operations like `container[index]`, when used in a mutable context.\n+/// operations like `container[index]` when used in a mutable context.\n+///\n+/// `container[index]` is actually syntactic sugar for\n+/// `*container.index_mut(index)`, but only when used as a mutable value. If\n+/// an immutable value is requested, the [`Index`] trait is used instead. This\n+/// allows nice things such as `v[index] = value` if `value` implements [`Copy`].\n+///\n+/// [`Index`]: ../../std/ops/trait.Index.html\n+/// [`Copy`]: ../../std/marker/trait.Copy.html\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `IndexMut` for a type `Foo`. When `&mut Foo[2]`\n-/// happens, it ends up calling `index_mut`, and therefore, `main` prints\n-/// `Mutable indexing with 2!`.\n+/// A very simple implementation of a `Balance` struct that has two sides, where\n+/// each can be indexed mutably and immutably.\n ///\n /// ```\n-/// use std::ops::{Index, IndexMut};\n+/// use std::ops::{Index,IndexMut};\n ///\n-/// #[derive(Copy, Clone)]\n-/// struct Foo;\n+/// #[derive(Debug)]\n+/// enum Side {\n+///     Left,\n+///     Right,\n+/// }\n ///\n-/// impl Index<usize> for Foo {\n-///     type Output = Foo;\n+/// #[derive(Debug, PartialEq)]\n+/// enum Weight {\n+///     Kilogram(f32),\n+///     Pound(f32),\n+/// }\n+///\n+/// struct Balance {\n+///     pub left: Weight,\n+///     pub right:Weight,\n+/// }\n ///\n-///     fn index(&self, _index: usize) -> &Foo {\n-///         self\n+/// impl Index<Side> for Balance {\n+///     type Output = Weight;\n+///\n+///     fn index<'a>(&'a self, index: Side) -> &'a Weight {\n+///         println!(\"Accessing {:?}-side of balance immutably\", index);\n+///         match index {\n+///             Side::Left => &self.left,\n+///             Side::Right => &self.right,\n+///         }\n ///     }\n /// }\n ///\n-/// impl IndexMut<usize> for Foo {\n-///     fn index_mut(&mut self, index: usize) -> &mut Foo {\n-///         println!(\"Mutable indexing with {}!\", index);\n-///         self\n+/// impl IndexMut<Side> for Balance {\n+///     fn index_mut<'a>(&'a mut self, index: Side) -> &'a mut Weight {\n+///         println!(\"Accessing {:?}-side of balance mutably\", index);\n+///         match index {\n+///             Side::Left => &mut self.left,\n+///             Side::Right => &mut self.right,\n+///         }\n ///     }\n /// }\n ///\n /// fn main() {\n-///     &mut Foo[2];\n+///     let mut balance = Balance {\n+///         right: Weight::Kilogram(2.5),\n+///         left: Weight::Pound(1.5),\n+///     };\n+///\n+///     // In this case balance[Side::Right] is sugar for\n+///     // *balance.index(Side::Right), since we are only reading\n+///     // balance[Side::Right], not writing it.\n+///     assert_eq!(balance[Side::Right],Weight::Kilogram(2.5));\n+///\n+///     // However in this case balance[Side::Left] is sugar for\n+///     // *balance.index_mut(Side::Left), since we are writing\n+///     // balance[Side::Left].\n+///     balance[Side::Left] = Weight::Kilogram(3.0);\n /// }\n /// ```\n #[lang = \"index_mut\"]"}]}