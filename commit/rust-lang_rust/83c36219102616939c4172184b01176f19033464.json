{"sha": "83c36219102616939c4172184b01176f19033464", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzYzM2MjE5MTAyNjE2OTM5YzQxNzIxODRiMDExNzZmMTkwMzM0NjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-19T00:35:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-19T00:35:33Z"}, "message": "Auto merge of #40989 - matklad:comma-arms, r=petrochenkov\n\nUnify rules about commas in match arms and semicolons in expressions\n\nOriginal discussion: https://internals.rust-lang.org/t/syntax-of-block-like-expressions-in-match-arms/5025/7.\n\nCurrently, rust uses different rules to determine if `,` is needed after an expression in a match arm and if `;` is needed in an expression statement:\n\n```Rust\nfn stmt() {\n    # no need for semicolons\n    { () }\n    if true { () } else { () }\n    loop {}\n    while true {}\n}\n\nfn match_arm(n: i32) {\n    match n {\n        1 => { () } # can omit comma here\n        2 => if true { () } else { () }, # but all other cases do need commas.\n        3 => loop { },\n        4 => while true {},\n        _ => ()\n    }\n}\n```\n\nThis seems weird: why would you want to require `,` after and `if`?\n\nThis PR unifies the rules. It is backwards compatible because it allows strictly more programs.", "tree": {"sha": "d549285d8c122f654bb321211a431ca0527c972e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d549285d8c122f654bb321211a431ca0527c972e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83c36219102616939c4172184b01176f19033464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83c36219102616939c4172184b01176f19033464", "html_url": "https://github.com/rust-lang/rust/commit/83c36219102616939c4172184b01176f19033464", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83c36219102616939c4172184b01176f19033464/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af049cd08b58520af2dd202f15d00f67f9748322", "url": "https://api.github.com/repos/rust-lang/rust/commits/af049cd08b58520af2dd202f15d00f67f9748322", "html_url": "https://github.com/rust-lang/rust/commit/af049cd08b58520af2dd202f15d00f67f9748322"}, {"sha": "e3d052f30af80e58289065bb3d7520e0e7be1ee8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3d052f30af80e58289065bb3d7520e0e7be1ee8", "html_url": "https://github.com/rust-lang/rust/commit/e3d052f30af80e58289065bb3d7520e0e7be1ee8"}], "stats": {"total": 68, "additions": 57, "deletions": 11}, "files": [{"sha": "b8e02556625d0c597456e39a00eb1eaebad4f387", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/83c36219102616939c4172184b01176f19033464/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83c36219102616939c4172184b01176f19033464/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=83c36219102616939c4172184b01176f19033464", "patch": "@@ -12,7 +12,7 @@\n \n // Predicates on exprs and stmts that the pretty-printer and parser use\n \n-use ast::{self, BlockCheckMode};\n+use ast;\n \n /// Does this expression require a semicolon to be treated\n /// as a statement? The negation of this: 'can this expression\n@@ -30,18 +30,12 @@ pub fn expr_requires_semi_to_be_stmt(e: &ast::Expr) -> bool {\n         ast::ExprKind::While(..) |\n         ast::ExprKind::WhileLet(..) |\n         ast::ExprKind::Loop(..) |\n-        ast::ExprKind::ForLoop(..) => false,\n+        ast::ExprKind::ForLoop(..) |\n+        ast::ExprKind::Catch(..) => false,\n         _ => true,\n     }\n }\n \n-pub fn expr_is_simple_block(e: &ast::Expr) -> bool {\n-    match e.node {\n-        ast::ExprKind::Block(ref block) => block.rules == BlockCheckMode::Default,\n-        _ => false,\n-    }\n-}\n-\n /// this statement requires a semicolon after it.\n /// note that in one case (`stmt_semi`), we've already\n /// seen the semicolon, and thus don't need another."}, {"sha": "ae3edfcbf325d2d179103106c9f7e2606ce0d045", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/83c36219102616939c4172184b01176f19033464/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83c36219102616939c4172184b01176f19033464/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=83c36219102616939c4172184b01176f19033464", "patch": "@@ -3209,8 +3209,7 @@ impl<'a> Parser<'a> {\n         self.expect(&token::FatArrow)?;\n         let expr = self.parse_expr_res(RESTRICTION_STMT_EXPR, None)?;\n \n-        let require_comma =\n-            !classify::expr_is_simple_block(&expr)\n+        let require_comma = classify::expr_requires_semi_to_be_stmt(&expr)\n             && self.token != token::CloseDelim(token::Brace);\n \n         if require_comma {"}, {"sha": "310b6ea5bcc6d448e809a2ce4addd3a645e1fe85", "filename": "src/test/run-pass/catch-expr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83c36219102616939c4172184b01176f19033464/src%2Ftest%2Frun-pass%2Fcatch-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83c36219102616939c4172184b01176f19033464/src%2Ftest%2Frun-pass%2Fcatch-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcatch-expr.rs?ref=83c36219102616939c4172184b01176f19033464", "patch": "@@ -71,4 +71,10 @@ pub fn main() {\n         Ok(&my_string)\n     };\n     assert_eq!(res, Ok(\"test\"));\n+\n+    do catch {\n+        ()\n+    }\n+\n+    ();\n }"}, {"sha": "b25ec444f22add983821fdf5ae2d306ca30d4b90", "filename": "src/test/run-pass/optional_comma_in_match_arm.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/83c36219102616939c4172184b01176f19033464/src%2Ftest%2Frun-pass%2Foptional_comma_in_match_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83c36219102616939c4172184b01176f19033464/src%2Ftest%2Frun-pass%2Foptional_comma_in_match_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foptional_comma_in_match_arm.rs?ref=83c36219102616939c4172184b01176f19033464", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-pretty issue #37199\n+\n+fn main() {\n+    let x = 1;\n+\n+    match x {\n+        1 => loop { break; },\n+        2 => while true { break; },\n+        3 => if true { () },\n+        4 => if true { () } else { () },\n+        5 => match () { () => () },\n+        6 => { () },\n+        7 => unsafe { () },\n+        _ => (),\n+    }\n+\n+    match x {\n+        1 => loop { break; }\n+        2 => while true { break; }\n+        3 => if true { () }\n+        4 => if true { () } else { () }\n+        5 => match () { () => () }\n+        6 => { () }\n+        7 => unsafe { () }\n+        _ => ()\n+    }\n+\n+    let r: &i32 = &x;\n+\n+    match r {\n+        // Absence of comma should not cause confusion between a pattern\n+        // and a bitwise and.\n+        &1 => if true { () } else { () }\n+        &2 => (),\n+        _ =>()\n+    }\n+}"}]}