{"sha": "b5e4c99ca72cefd811820425b2d1297e7e59cff4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZTRjOTljYTcyY2VmZDgxMTgyMDQyNWIyZDEyOTdlN2U1OWNmZjQ=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-11-29T21:12:32Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-11-29T21:12:32Z"}, "message": "Use an explicit flag to decide on whether to add brace compensation", "tree": {"sha": "b5aaa231f20f01ad287d15d813129965979d4a45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5aaa231f20f01ad287d15d813129965979d4a45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5e4c99ca72cefd811820425b2d1297e7e59cff4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5e4c99ca72cefd811820425b2d1297e7e59cff4", "html_url": "https://github.com/rust-lang/rust/commit/b5e4c99ca72cefd811820425b2d1297e7e59cff4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5e4c99ca72cefd811820425b2d1297e7e59cff4/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ea3e65df6ee614f44dcfc57f5c37ea5b499fbee", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea3e65df6ee614f44dcfc57f5c37ea5b499fbee", "html_url": "https://github.com/rust-lang/rust/commit/9ea3e65df6ee614f44dcfc57f5c37ea5b499fbee"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "1743b1a03a80116f841ebe8badd1fc66c34fa87f", "filename": "src/closures.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5e4c99ca72cefd811820425b2d1297e7e59cff4/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5e4c99ca72cefd811820425b2d1297e7e59cff4/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=b5e4c99ca72cefd811820425b2d1297e7e59cff4", "patch": "@@ -131,7 +131,8 @@ fn rewrite_closure_with_block(\n         rules: ast::BlockCheckMode::Default,\n         span: body.span,\n     };\n-    rewrite_closure_block(&block, prefix, context, shape)\n+    let block = ::expr::rewrite_block_with_visitor(context, \"\", &block, shape, true)?;\n+    Some(format!(\"{} {}\", prefix, block))\n }\n \n // Rewrite closure with a single expression without wrapping its body with block."}, {"sha": "6d7114524fd942c72a6327d86e454645934febb8", "filename": "src/expr.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b5e4c99ca72cefd811820425b2d1297e7e59cff4/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5e4c99ca72cefd811820425b2d1297e7e59cff4/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=b5e4c99ca72cefd811820425b2d1297e7e59cff4", "patch": "@@ -116,7 +116,7 @@ pub fn format_expr(\n                         rw\n                     } else {\n                         let prefix = block_prefix(context, block, shape)?;\n-                        rewrite_block_with_visitor(context, &prefix, block, shape)\n+                        rewrite_block_with_visitor(context, &prefix, block, shape, false)\n                     }\n                 }\n                 ExprType::SubExpression => block.rewrite(context, shape),\n@@ -598,11 +598,12 @@ fn rewrite_single_line_block(\n     None\n }\n \n-fn rewrite_block_with_visitor(\n+pub fn rewrite_block_with_visitor(\n     context: &RewriteContext,\n     prefix: &str,\n     block: &ast::Block,\n     shape: Shape,\n+    is_dummy: bool,\n ) -> Option<String> {\n     if let rw @ Some(_) = rewrite_empty_block(context, block, shape) {\n         return rw;\n@@ -620,7 +621,7 @@ fn rewrite_block_with_visitor(\n         ast::BlockCheckMode::Default => visitor.last_pos = block.span.lo(),\n     }\n \n-    visitor.visit_block(block, None);\n+    visitor.visit_block(block, None, is_dummy);\n     Some(format!(\"{}{}\", prefix, visitor.buffer))\n }\n \n@@ -634,7 +635,7 @@ impl Rewrite for ast::Block {\n \n         let prefix = block_prefix(context, self, shape)?;\n \n-        let result = rewrite_block_with_visitor(context, &prefix, self, shape);\n+        let result = rewrite_block_with_visitor(context, &prefix, self, shape, false);\n         if let Some(ref result_str) = result {\n             if result_str.lines().count() <= 3 {\n                 if let rw @ Some(_) = rewrite_single_line_block(context, &prefix, self, shape) {\n@@ -1064,7 +1065,8 @@ impl<'a> Rewrite for ControlFlow<'a> {\n         };\n         let mut block_context = context.clone();\n         block_context.is_if_else_block = self.else_block.is_some();\n-        let block_str = rewrite_block_with_visitor(&block_context, \"\", self.block, block_shape)?;\n+        let block_str =\n+            rewrite_block_with_visitor(&block_context, \"\", self.block, block_shape, false)?;\n \n         let mut result = format!(\"{}{}\", cond_str, block_str);\n "}, {"sha": "d97fb44438cb85ee264ed020d367e9412815710b", "filename": "src/visitor.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b5e4c99ca72cefd811820425b2d1297e7e59cff4/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5e4c99ca72cefd811820425b2d1297e7e59cff4/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=b5e4c99ca72cefd811820425b2d1297e7e59cff4", "patch": "@@ -90,17 +90,20 @@ impl<'a> FmtVisitor<'a> {\n         }\n     }\n \n-    pub fn visit_block(&mut self, b: &ast::Block, inner_attrs: Option<&[ast::Attribute]>) {\n+    pub fn visit_block(\n+        &mut self,\n+        b: &ast::Block,\n+        inner_attrs: Option<&[ast::Attribute]>,\n+        is_dummy: bool,\n+    ) {\n         debug!(\n             \"visit_block: {:?} {:?}\",\n             self.codemap.lookup_char_pos(b.span.lo()),\n             self.codemap.lookup_char_pos(b.span.hi())\n         );\n \n         // Check if this block has braces.\n-        let snippet = self.snippet(b.span);\n-        let has_braces = snippet.starts_with('{') || snippet.starts_with(\"unsafe\");\n-        let brace_compensation = if has_braces { BytePos(1) } else { BytePos(0) };\n+        let brace_compensation = BytePos(if is_dummy { 0 } else { 1 });\n \n         self.last_pos = self.last_pos + brace_compensation;\n         self.block_indent = self.block_indent.block_indent(self.config);\n@@ -272,7 +275,7 @@ impl<'a> FmtVisitor<'a> {\n         }\n \n         self.last_pos = source!(self, block.span).lo();\n-        self.visit_block(block, inner_attrs)\n+        self.visit_block(block, inner_attrs, false)\n     }\n \n     pub fn visit_item(&mut self, item: &ast::Item) {"}]}