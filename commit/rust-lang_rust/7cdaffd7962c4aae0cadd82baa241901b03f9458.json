{"sha": "7cdaffd7962c4aae0cadd82baa241901b03f9458", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZGFmZmQ3OTYyYzRhYWUwY2FkZDgyYmFhMjQxOTAxYjAzZjk0NTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-05T18:29:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-05T18:29:39Z"}, "message": "Auto merge of #61548 - Centril:rollup-5t6cvbk, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #61503 (Fix cfg(test) build for x86_64-fortanix-unknown-sgx)\n - #61534 (Edit docs of ExitStatus)\n - #61536 (Don't allow using const fn arguments as \"args_required_const\")\n - #61538 (Don't use GNU noexec stack note)\n - #61546 (azure: Fix some minor issues which have broken our configuration )\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "f053afdeb0cc36faa2d4c419cbf370e467c6d854", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f053afdeb0cc36faa2d4c419cbf370e467c6d854"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cdaffd7962c4aae0cadd82baa241901b03f9458", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cdaffd7962c4aae0cadd82baa241901b03f9458", "html_url": "https://github.com/rust-lang/rust/commit/7cdaffd7962c4aae0cadd82baa241901b03f9458", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cdaffd7962c4aae0cadd82baa241901b03f9458/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47f4975cd751a03c941431b35cd7a6cba6201730", "url": "https://api.github.com/repos/rust-lang/rust/commits/47f4975cd751a03c941431b35cd7a6cba6201730", "html_url": "https://github.com/rust-lang/rust/commit/47f4975cd751a03c941431b35cd7a6cba6201730"}, {"sha": "694b0486371752cd75270788f30e19a16601f88d", "url": "https://api.github.com/repos/rust-lang/rust/commits/694b0486371752cd75270788f30e19a16601f88d", "html_url": "https://github.com/rust-lang/rust/commit/694b0486371752cd75270788f30e19a16601f88d"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "a646b34fe7d024adb4cf8f4ba1dbfa967c326e44", "filename": ".azure-pipelines/steps/run.yml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7cdaffd7962c4aae0cadd82baa241901b03f9458/.azure-pipelines%2Fsteps%2Frun.yml", "raw_url": "https://github.com/rust-lang/rust/raw/7cdaffd7962c4aae0cadd82baa241901b03f9458/.azure-pipelines%2Fsteps%2Frun.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Frun.yml?ref=7cdaffd7962c4aae0cadd82baa241901b03f9458", "patch": "@@ -50,6 +50,7 @@ steps:\n # on since libstd tests require it\n - bash: |\n     set -e\n+    sudo mkdir -p /etc/docker\n     echo '{\"ipv6\":true,\"fixed-cidr-v6\":\"fd9a:8454:6789:13f7::/64\"}' | sudo tee /etc/docker/daemon.json\n     sudo service docker restart\n   displayName: Enable IPv6\n@@ -101,6 +102,10 @@ steps:\n \n - bash: |\n     set -e\n+    # Remove any preexisting rustup installation since it can interfere\n+    # with the cargotest step and its auto-detection of things like Clippy in\n+    # the environment\n+    rustup self uninstall -y || true\n     if [ \"$IMAGE\" = \"\" ]; then\n       src/ci/run.sh\n     else"}, {"sha": "8696291e05875e2aeaa816d2913a21bf9e188c84", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cdaffd7962c4aae0cadd82baa241901b03f9458/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cdaffd7962c4aae0cadd82baa241901b03f9458/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=7cdaffd7962c4aae0cadd82baa241901b03f9458", "patch": "@@ -1304,7 +1304,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                 }\n             }\n \n-            if self.mode == Mode::Fn {\n+            // No need to do anything in constants and statics, as everything is \"constant\" anyway\n+            // so promotion would be useless.\n+            if self.mode != Mode::Static && self.mode != Mode::Const {\n                 let constant_args = callee_def_id.and_then(|id| {\n                     args_required_const(self.tcx, id)\n                 }).unwrap_or_default();"}, {"sha": "72e2fd59cf8d640c28d75e22a22660f39d22b1e8", "filename": "src/librustc_target/spec/netbsd_base.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7cdaffd7962c4aae0cadd82baa241901b03f9458/src%2Flibrustc_target%2Fspec%2Fnetbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cdaffd7962c4aae0cadd82baa241901b03f9458/src%2Flibrustc_target%2Fspec%2Fnetbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fnetbsd_base.rs?ref=7cdaffd7962c4aae0cadd82baa241901b03f9458", "patch": "@@ -9,9 +9,6 @@ pub fn opts() -> TargetOptions {\n         // libraries which follow this flag.  Thus, use it before\n         // specifying libraries to link to.\n         \"-Wl,--as-needed\".to_string(),\n-\n-        // Always enable NX protection when it is available\n-        \"-Wl,-z,noexecstack\".to_string(),\n     ]);\n \n     TargetOptions {"}, {"sha": "a3356e6be2c3f2e57f8e9af53724fa56da771c83", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7cdaffd7962c4aae0cadd82baa241901b03f9458/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cdaffd7962c4aae0cadd82baa241901b03f9458/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=7cdaffd7962c4aae0cadd82baa241901b03f9458", "patch": "@@ -223,7 +223,8 @@\n #![cfg_attr(all(target_vendor = \"fortanix\", target_env = \"sgx\"),\n             feature(global_asm, slice_index_methods,\n                     decl_macro, coerce_unsized, sgx_platform, ptr_wrapping_offset_from))]\n-#![cfg_attr(all(test, target_vendor = \"fortanix\", target_env = \"sgx\"), feature(fixed_size_array))]\n+#![cfg_attr(all(test, target_vendor = \"fortanix\", target_env = \"sgx\"),\n+            feature(fixed_size_array, maybe_uninit_extra))]\n \n // std is implemented with unstable features, many of which are internal\n // compiler details that will never be stable"}, {"sha": "a568f46663730f939f0acfe3df5a04f8ffd8eaf4", "filename": "src/libstd/process.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7cdaffd7962c4aae0cadd82baa241901b03f9458/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cdaffd7962c4aae0cadd82baa241901b03f9458/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=7cdaffd7962c4aae0cadd82baa241901b03f9458", "patch": "@@ -1153,10 +1153,13 @@ impl From<fs::File> for Stdio {\n ///\n /// This `struct` is used to represent the exit status of a child process.\n /// Child processes are created via the [`Command`] struct and their exit\n-/// status is exposed through the [`status`] method.\n+/// status is exposed through the [`status`] method, or the [`wait`] method\n+/// of a [`Child`] process.\n ///\n /// [`Command`]: struct.Command.html\n+/// [`Child`]: struct.Child.html\n /// [`status`]: struct.Command.html#method.status\n+/// [`wait`]: struct.Child.html#method.wait\n #[derive(PartialEq, Eq, Clone, Copy, Debug)]\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct ExitStatus(imp::ExitStatus);"}, {"sha": "3399e51ed4edb26d60636b89282a557d4af89f7a", "filename": "src/test/ui/consts/const_arg_promotable2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7cdaffd7962c4aae0cadd82baa241901b03f9458/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_promotable2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cdaffd7962c4aae0cadd82baa241901b03f9458/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_promotable2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_promotable2.rs?ref=7cdaffd7962c4aae0cadd82baa241901b03f9458", "patch": "@@ -0,0 +1,18 @@\n+// This test is a regression test for a bug where we only checked function calls in no-const\n+// functions for `rustc_args_required_const` arguments. This meant that even though `bar` needs its\n+// argument to be const, inside a const fn (callable at runtime), the value for it may come from a\n+// non-constant (namely an argument to the const fn).\n+\n+#![feature(rustc_attrs)]\n+const fn foo(a: i32) {\n+    bar(a); //~ ERROR argument 1 is required to be a constant\n+}\n+\n+#[rustc_args_required_const(0)]\n+const fn bar(_: i32) {}\n+\n+fn main() {\n+    // this function call will pass a runtime-value (number of program arguments) to `foo`, which\n+    // will in turn forward it to `bar`, which expects a compile-time argument\n+    foo(std::env::args().count() as i32);\n+}"}, {"sha": "149d1ce89408d78473de8e7138fa0e1f875918a9", "filename": "src/test/ui/consts/const_arg_promotable2.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7cdaffd7962c4aae0cadd82baa241901b03f9458/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_promotable2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cdaffd7962c4aae0cadd82baa241901b03f9458/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_promotable2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_arg_promotable2.stderr?ref=7cdaffd7962c4aae0cadd82baa241901b03f9458", "patch": "@@ -0,0 +1,8 @@\n+error: argument 1 is required to be a constant\n+  --> $DIR/const_arg_promotable2.rs:8:5\n+   |\n+LL |     bar(a);\n+   |     ^^^^^^\n+\n+error: aborting due to previous error\n+"}]}