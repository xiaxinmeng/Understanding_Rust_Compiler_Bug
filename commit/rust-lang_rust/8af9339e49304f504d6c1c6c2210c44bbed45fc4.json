{"sha": "8af9339e49304f504d6c1c6c2210c44bbed45fc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZjkzMzllNDkzMDRmNTA0ZDZjMWM2YzIyMTBjNDRiYmVkNDVmYzQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-22T11:01:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-22T11:01:04Z"}, "message": "Rollup merge of #86501 - jyn514:doctest-cleanup, r=CraftSpider\n\nCleanup handling of `crate_name` for doctests\n\n- Remove unnecessary reallocation\n- Remove unnecessary messing around with `queries` for the crate name; it's simpler and faster to go through the TyCtxt instead\n- Rename `cratename` -> `crate_name` for consistency with the rest of the compiler", "tree": {"sha": "05d98a63483fcc866936effd4f9f3a332f1037fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05d98a63483fcc866936effd4f9f3a332f1037fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8af9339e49304f504d6c1c6c2210c44bbed45fc4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg0cLwCRBK7hj4Ov3rIwAAGGQIAIQoBK7tA0+dYOigfr83SvAE\nDx3SRo9OgVNviMv8m2pDSk02Vs7b8XfmhlK2sdwCkqeMXkMRQd7ihi0NOtRadVHd\noDwZSJvfyHuUQD1U8W4O/+oc/zQ8Jl1AhOKu9r9WQ7H2J8BsnN5yJgDk1pcpmIUx\nohQRlyXjXFCRwqSQOCXMtEk9nHB3c7ZnU22ruq7fzrgRCYbXcuxV90iqlYTvUGTJ\n33LNWEIn6Cvka5qAQg/Y33jxMSiTQjpy10jvPtvwo9mWZWxsjALrgOg51wylJSyD\nR/vrtKojpjHcmK3mSFPkEP/QNTMV+fAzBfViskJ+QCRy/FUcQCSPqix1jpxZFTo=\n=tPtN\n-----END PGP SIGNATURE-----\n", "payload": "tree 05d98a63483fcc866936effd4f9f3a332f1037fd\nparent 555fbd7a43824503e3163762978fc21761d40b31\nparent ff0e0466abc364f90bd5930b9e48cce41aa08137\nauthor Yuki Okushi <jtitor@2k36.org> 1624359664 +0900\ncommitter GitHub <noreply@github.com> 1624359664 +0900\n\nRollup merge of #86501 - jyn514:doctest-cleanup, r=CraftSpider\n\nCleanup handling of `crate_name` for doctests\n\n- Remove unnecessary reallocation\n- Remove unnecessary messing around with `queries` for the crate name; it's simpler and faster to go through the TyCtxt instead\n- Rename `cratename` -> `crate_name` for consistency with the rest of the compiler\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8af9339e49304f504d6c1c6c2210c44bbed45fc4", "html_url": "https://github.com/rust-lang/rust/commit/8af9339e49304f504d6c1c6c2210c44bbed45fc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8af9339e49304f504d6c1c6c2210c44bbed45fc4/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "555fbd7a43824503e3163762978fc21761d40b31", "url": "https://api.github.com/repos/rust-lang/rust/commits/555fbd7a43824503e3163762978fc21761d40b31", "html_url": "https://github.com/rust-lang/rust/commit/555fbd7a43824503e3163762978fc21761d40b31"}, {"sha": "ff0e0466abc364f90bd5930b9e48cce41aa08137", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff0e0466abc364f90bd5930b9e48cce41aa08137", "html_url": "https://github.com/rust-lang/rust/commit/ff0e0466abc364f90bd5930b9e48cce41aa08137"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "1750f05b4dcffa43bac275ae9314159b00c74acc", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8af9339e49304f504d6c1c6c2210c44bbed45fc4/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af9339e49304f504d6c1c6c2210c44bbed45fc4/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=8af9339e49304f504d6c1c6c2210c44bbed45fc4", "patch": "@@ -3,6 +3,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{ColorConfig, ErrorReported};\n use rustc_hir as hir;\n+use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::intravisit;\n use rustc_hir::{HirId, CRATE_HIR_ID};\n use rustc_interface::interface;\n@@ -13,6 +14,7 @@ use rustc_session::{lint, DiagnosticOutput, Session};\n use rustc_span::edition::Edition;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::sym;\n+use rustc_span::Symbol;\n use rustc_span::{BytePos, FileName, Pos, Span, DUMMY_SP};\n use rustc_target::spec::TargetTriple;\n use tempfile::Builder as TempFileBuilder;\n@@ -111,8 +113,6 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n     let res = interface::run_compiler(config, |compiler| {\n         compiler.enter(|queries| {\n             let _lower_to_hir = queries.lower_to_hir()?;\n-\n-            let crate_name = queries.crate_name()?.peek().to_string();\n             let mut global_ctxt = queries.global_ctxt()?.take();\n \n             let collector = global_ctxt.enter(|tcx| {\n@@ -123,7 +123,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n                 opts.display_warnings |= options.display_warnings;\n                 let enable_per_target_ignores = options.enable_per_target_ignores;\n                 let mut collector = Collector::new(\n-                    crate_name,\n+                    tcx.crate_name(LOCAL_CRATE),\n                     options,\n                     false,\n                     opts,\n@@ -293,7 +293,7 @@ struct UnusedExterns {\n \n fn run_test(\n     test: &str,\n-    cratename: &str,\n+    crate_name: &str,\n     line: usize,\n     options: Options,\n     should_panic: bool,\n@@ -312,7 +312,7 @@ fn run_test(\n     report_unused_externs: impl Fn(UnusedExterns),\n ) -> Result<(), TestFailure> {\n     let (test, line_offset, supports_color) =\n-        make_test(test, Some(cratename), as_test_harness, opts, edition, Some(test_id));\n+        make_test(test, Some(crate_name), as_test_harness, opts, edition, Some(test_id));\n \n     let output_file = outdir.path().join(\"rust_out\");\n \n@@ -479,7 +479,7 @@ fn run_test(\n /// lines before the test code begins as well as if the output stream supports colors or not.\n crate fn make_test(\n     s: &str,\n-    cratename: Option<&str>,\n+    crate_name: Option<&str>,\n     dont_insert_main: bool,\n     opts: &TestOptions,\n     edition: Edition,\n@@ -540,7 +540,7 @@ crate fn make_test(\n             let sess = ParseSess::with_span_handler(handler, sm);\n \n             let mut found_main = false;\n-            let mut found_extern_crate = cratename.is_none();\n+            let mut found_extern_crate = crate_name.is_none();\n             let mut found_macro = false;\n \n             let mut parser = match maybe_new_parser_from_source_str(&sess, filename, source) {\n@@ -567,13 +567,13 @@ crate fn make_test(\n \n                         if !found_extern_crate {\n                             if let ast::ItemKind::ExternCrate(original) = item.kind {\n-                                // This code will never be reached if `cratename` is none because\n+                                // This code will never be reached if `crate_name` is none because\n                                 // `found_extern_crate` is initialized to `true` if it is none.\n-                                let cratename = cratename.unwrap();\n+                                let crate_name = crate_name.unwrap();\n \n                                 match original {\n-                                    Some(name) => found_extern_crate = name.as_str() == cratename,\n-                                    None => found_extern_crate = item.ident.as_str() == cratename,\n+                                    Some(name) => found_extern_crate = name.as_str() == crate_name,\n+                                    None => found_extern_crate = item.ident.as_str() == crate_name,\n                                 }\n                             }\n                         }\n@@ -631,14 +631,14 @@ crate fn make_test(\n \n     // Don't inject `extern crate std` because it's already injected by the\n     // compiler.\n-    if !already_has_extern_crate && !opts.no_crate_inject && cratename != Some(\"std\") {\n-        if let Some(cratename) = cratename {\n+    if !already_has_extern_crate && !opts.no_crate_inject && crate_name != Some(\"std\") {\n+        if let Some(crate_name) = crate_name {\n             // Don't inject `extern crate` if the crate is never used.\n             // NOTE: this is terribly inaccurate because it doesn't actually\n             // parse the source, but only has false positives, not false\n             // negatives.\n-            if s.contains(cratename) {\n-                prog.push_str(&format!(\"extern crate r#{};\\n\", cratename));\n+            if s.contains(crate_name) {\n+                prog.push_str(&format!(\"extern crate r#{};\\n\", crate_name));\n                 line_offset += 1;\n             }\n         }\n@@ -797,7 +797,7 @@ crate struct Collector {\n     options: Options,\n     use_headers: bool,\n     enable_per_target_ignores: bool,\n-    cratename: String,\n+    crate_name: Symbol,\n     opts: TestOptions,\n     position: Span,\n     source_map: Option<Lrc<SourceMap>>,\n@@ -809,7 +809,7 @@ crate struct Collector {\n \n impl Collector {\n     crate fn new(\n-        cratename: String,\n+        crate_name: Symbol,\n         options: Options,\n         use_headers: bool,\n         opts: TestOptions,\n@@ -823,7 +823,7 @@ impl Collector {\n             options,\n             use_headers,\n             enable_per_target_ignores,\n-            cratename,\n+            crate_name,\n             opts,\n             position: DUMMY_SP,\n             source_map,\n@@ -871,7 +871,7 @@ impl Tester for Collector {\n     fn add_test(&mut self, test: String, config: LangString, line: usize) {\n         let filename = self.get_filename();\n         let name = self.generate_name(line, &filename);\n-        let cratename = self.cratename.to_string();\n+        let crate_name = self.crate_name.to_string();\n         let opts = self.opts.clone();\n         let edition = config.edition.unwrap_or(self.options.edition);\n         let options = self.options.clone();\n@@ -954,7 +954,7 @@ impl Tester for Collector {\n                 };\n                 let res = run_test(\n                     &test,\n-                    &cratename,\n+                    &crate_name,\n                     line,\n                     options,\n                     config.should_panic,"}, {"sha": "5da3a75e876315ed2173c5c86280d8151daaa343", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8af9339e49304f504d6c1c6c2210c44bbed45fc4/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af9339e49304f504d6c1c6c2210c44bbed45fc4/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=8af9339e49304f504d6c1c6c2210c44bbed45fc4", "patch": "@@ -4,6 +4,7 @@ use std::path::Path;\n \n use rustc_span::edition::Edition;\n use rustc_span::source_map::DUMMY_SP;\n+use rustc_span::Symbol;\n \n use crate::config::{Options, RenderOptions};\n use crate::doctest::{Collector, TestOptions};\n@@ -121,7 +122,7 @@ crate fn test(mut options: Options) -> Result<(), String> {\n     opts.no_crate_inject = true;\n     opts.display_warnings = options.display_warnings;\n     let mut collector = Collector::new(\n-        options.input.display().to_string(),\n+        Symbol::intern(&options.input.display().to_string()),\n         options.clone(),\n         true,\n         opts,"}]}