{"sha": "e9b2fcb2fec4c9bff790adfcd1f5f6f307f2d835", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YjJmY2IyZmVjNGM5YmZmNzkwYWRmY2QxZjVmNmYzMDdmMmQ4MzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-29T00:02:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-29T00:02:01Z"}, "message": "Auto merge of #37373 - nnethercote:html5ever-more-more, r=nrc\n\nAvoid more allocations when compiling html5ever\n\nThese three commits reduce the number of allocations performed when compiling html5ever from 13.2M to 10.8M, which speeds up compilation by about 2%.\n\nr? @nrc", "tree": {"sha": "342088ea365340206d5b3935c6fe25fac1f62ecf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/342088ea365340206d5b3935c6fe25fac1f62ecf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9b2fcb2fec4c9bff790adfcd1f5f6f307f2d835", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9b2fcb2fec4c9bff790adfcd1f5f6f307f2d835", "html_url": "https://github.com/rust-lang/rust/commit/e9b2fcb2fec4c9bff790adfcd1f5f6f307f2d835", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9b2fcb2fec4c9bff790adfcd1f5f6f307f2d835/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0ab4a4f2abb778361bca645b07661cd07c702bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0ab4a4f2abb778361bca645b07661cd07c702bb", "html_url": "https://github.com/rust-lang/rust/commit/f0ab4a4f2abb778361bca645b07661cd07c702bb"}, {"sha": "c440a7ae654fb641e68a9ee53b03bf3f7133c2fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/c440a7ae654fb641e68a9ee53b03bf3f7133c2fe", "html_url": "https://github.com/rust-lang/rust/commit/c440a7ae654fb641e68a9ee53b03bf3f7133c2fe"}], "stats": {"total": 72, "additions": 51, "deletions": 21}, "files": [{"sha": "91675065eb86e5240116ff6fbde3266ab7745100", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e9b2fcb2fec4c9bff790adfcd1f5f6f307f2d835/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b2fcb2fec4c9bff790adfcd1f5f6f307f2d835/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=e9b2fcb2fec4c9bff790adfcd1f5f6f307f2d835", "patch": "@@ -92,6 +92,7 @@ use parse::token;\n use print::pprust;\n use ptr::P;\n use tokenstream::{self, TokenTree};\n+use util::small_vector::SmallVector;\n \n use std::mem;\n use std::rc::Rc;\n@@ -104,7 +105,7 @@ use std::collections::hash_map::Entry::{Vacant, Occupied};\n #[derive(Clone)]\n enum TokenTreeOrTokenTreeVec {\n     Tt(tokenstream::TokenTree),\n-    TtSeq(Rc<Vec<tokenstream::TokenTree>>),\n+    TtSeq(Vec<tokenstream::TokenTree>),\n }\n \n impl TokenTreeOrTokenTreeVec {\n@@ -161,7 +162,7 @@ pub fn count_names(ms: &[TokenTree]) -> usize {\n     })\n }\n \n-pub fn initial_matcher_pos(ms: Rc<Vec<TokenTree>>, sep: Option<Token>, lo: BytePos)\n+pub fn initial_matcher_pos(ms: Vec<TokenTree>, sep: Option<Token>, lo: BytePos)\n                            -> Box<MatcherPos> {\n     let match_idx_hi = count_names(&ms[..]);\n     let matches: Vec<_> = (0..match_idx_hi).map(|_| Vec::new()).collect();\n@@ -284,12 +285,9 @@ pub fn parse(sess: &ParseSess,\n              mut rdr: TtReader,\n              ms: &[TokenTree])\n              -> NamedParseResult {\n-    let mut cur_eis = Vec::new();\n-    cur_eis.push(initial_matcher_pos(Rc::new(ms.iter()\n-                                                .cloned()\n-                                                .collect()),\n-                                     None,\n-                                     rdr.peek().sp.lo));\n+    let mut cur_eis = SmallVector::one(initial_matcher_pos(ms.to_owned(),\n+                                                           None,\n+                                                           rdr.peek().sp.lo));\n \n     loop {\n         let mut bb_eis = Vec::new(); // black-box parsed by parser.rs"}, {"sha": "8a6a8e53a3e4c1b122aa2c33030b4724e94a1449", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e9b2fcb2fec4c9bff790adfcd1f5f6f307f2d835/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b2fcb2fec4c9bff790adfcd1f5f6f307f2d835/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=e9b2fcb2fec4c9bff790adfcd1f5f6f307f2d835", "patch": "@@ -10,14 +10,15 @@\n use self::LockstepIterSize::*;\n \n use ast::Ident;\n-use syntax_pos::{Span, DUMMY_SP};\n use errors::{Handler, DiagnosticBuilder};\n use ext::tt::macro_parser::{NamedMatch, MatchedSeq, MatchedNonterminal};\n use parse::token::{DocComment, MatchNt, SubstNt};\n use parse::token::{Token, Interpolated, NtIdent, NtTT};\n use parse::token;\n use parse::lexer::TokenAndSpan;\n+use syntax_pos::{Span, DUMMY_SP};\n use tokenstream::{self, TokenTree};\n+use util::small_vector::SmallVector;\n \n use std::rc::Rc;\n use std::ops::Add;\n@@ -36,7 +37,7 @@ struct TtFrame {\n pub struct TtReader<'a> {\n     pub sp_diag: &'a Handler,\n     /// the unzipped tree:\n-    stack: Vec<TtFrame>,\n+    stack: SmallVector<TtFrame>,\n     /* for MBE-style macro transcription */\n     interpolations: HashMap<Ident, Rc<NamedMatch>>,\n \n@@ -74,7 +75,7 @@ pub fn new_tt_reader_with_doc_flag(sp_diag: &Handler,\n                                    -> TtReader {\n     let mut r = TtReader {\n         sp_diag: sp_diag,\n-        stack: vec!(TtFrame {\n+        stack: SmallVector::one(TtFrame {\n             forest: TokenTree::Sequence(DUMMY_SP, Rc::new(tokenstream::SequenceRepetition {\n                 tts: src,\n                 // doesn't matter. This merely holds the root unzipping."}, {"sha": "b86e508d89970a3f614e4b979d7fa2ccf201668a", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9b2fcb2fec4c9bff790adfcd1f5f6f307f2d835/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b2fcb2fec4c9bff790adfcd1f5f6f307f2d835/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=e9b2fcb2fec4c9bff790adfcd1f5f6f307f2d835", "patch": "@@ -36,6 +36,7 @@\n #![feature(specialization)]\n #![feature(dotdot_in_tuple_patterns)]\n \n+extern crate core;\n extern crate serialize;\n extern crate term;\n extern crate libc;"}, {"sha": "57258c76335a1a4c39bb1bcd9a84c50404f250f5", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e9b2fcb2fec4c9bff790adfcd1f5f6f307f2d835/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b2fcb2fec4c9bff790adfcd1f5f6f307f2d835/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=e9b2fcb2fec4c9bff790adfcd1f5f6f307f2d835", "patch": "@@ -11,6 +11,7 @@\n use self::SmallVectorRepr::*;\n use self::IntoIterRepr::*;\n \n+use core::ops;\n use std::iter::{IntoIterator, FromIterator};\n use std::mem;\n use std::slice;\n@@ -19,10 +20,12 @@ use std::vec;\n use util::move_map::MoveMap;\n \n /// A vector type optimized for cases where the size is almost always 0 or 1\n+#[derive(Clone)]\n pub struct SmallVector<T> {\n     repr: SmallVectorRepr<T>,\n }\n \n+#[derive(Clone)]\n enum SmallVectorRepr<T> {\n     Zero,\n     One(T),\n@@ -75,16 +78,11 @@ impl<T> SmallVector<T> {\n     }\n \n     pub fn as_slice(&self) -> &[T] {\n-        match self.repr {\n-            Zero => {\n-                let result: &[T] = &[];\n-                result\n-            }\n-            One(ref v) => {\n-                unsafe { slice::from_raw_parts(v, 1) }\n-            }\n-            Many(ref vs) => vs\n-        }\n+        self\n+    }\n+\n+    pub fn as_mut_slice(&mut self) -> &mut [T] {\n+        self\n     }\n \n     pub fn pop(&mut self) -> Option<T> {\n@@ -163,6 +161,38 @@ impl<T> SmallVector<T> {\n     }\n }\n \n+impl<T> ops::Deref for SmallVector<T> {\n+    type Target = [T];\n+\n+    fn deref(&self) -> &[T] {\n+        match self.repr {\n+            Zero => {\n+                let result: &[T] = &[];\n+                result\n+            }\n+            One(ref v) => {\n+                unsafe { slice::from_raw_parts(v, 1) }\n+            }\n+            Many(ref vs) => vs\n+        }\n+    }\n+}\n+\n+impl<T> ops::DerefMut for SmallVector<T> {\n+    fn deref_mut(&mut self) -> &mut [T] {\n+        match self.repr {\n+            Zero => {\n+                let result: &mut [T] = &mut [];\n+                result\n+            }\n+            One(ref mut v) => {\n+                unsafe { slice::from_raw_parts_mut(v, 1) }\n+            }\n+            Many(ref mut vs) => vs\n+        }\n+    }\n+}\n+\n impl<T> IntoIterator for SmallVector<T> {\n     type Item = T;\n     type IntoIter = IntoIter<T>;"}]}