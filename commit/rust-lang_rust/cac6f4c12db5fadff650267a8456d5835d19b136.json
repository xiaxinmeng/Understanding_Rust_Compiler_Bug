{"sha": "cac6f4c12db5fadff650267a8456d5835d19b136", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYzZmNGMxMmRiNWZhZGZmNjUwMjY3YTg0NTZkNTgzNWQxOWIxMzY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-26T22:32:34Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-07T14:41:48Z"}, "message": "Move `to_const_value` from `MPlaceTy` to its only use site", "tree": {"sha": "edc9fc69edb5a7a8a4e77076f1a3134df4be57d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edc9fc69edb5a7a8a4e77076f1a3134df4be57d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cac6f4c12db5fadff650267a8456d5835d19b136", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cac6f4c12db5fadff650267a8456d5835d19b136", "html_url": "https://github.com/rust-lang/rust/commit/cac6f4c12db5fadff650267a8456d5835d19b136", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cac6f4c12db5fadff650267a8456d5835d19b136/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a5c35bc4490ecf5b06d311917ac64be63673d3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a5c35bc4490ecf5b06d311917ac64be63673d3c", "html_url": "https://github.com/rust-lang/rust/commit/4a5c35bc4490ecf5b06d311917ac64be63673d3c"}], "stats": {"total": 32, "additions": 14, "deletions": 18}, "files": [{"sha": "b0add10dcac4321e9838a5883594fd806935e032", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cac6f4c12db5fadff650267a8456d5835d19b136/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac6f4c12db5fadff650267a8456d5835d19b136/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=cac6f4c12db5fadff650267a8456d5835d19b136", "patch": "@@ -117,12 +117,23 @@ pub(super) fn op_to_const<'tcx>(\n         // structs containing such.\n         op.try_as_mplace(ecx)\n     };\n+\n+    let to_const_value = |mplace: MPlaceTy<'_>| match mplace.ptr {\n+        Scalar::Ptr(ptr) => {\n+            let alloc = ecx.tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id);\n+            ConstValue::ByRef { alloc, offset: ptr.offset }\n+        }\n+        Scalar::Raw { data, .. } => {\n+            assert_eq!(data, mplace.layout.align.abi.bytes().into());\n+            ConstValue::Scalar(Scalar::zst())\n+        }\n+    };\n     let val = match immediate {\n-        Ok(mplace) => mplace.to_const_value(ecx.tcx.tcx),\n+        Ok(mplace) => to_const_value(mplace),\n         // see comment on `let try_as_immediate` above\n         Err(ImmTy { imm: Immediate::Scalar(x), .. }) => match x {\n             ScalarMaybeUndef::Scalar(s) => ConstValue::Scalar(s),\n-            ScalarMaybeUndef::Undef => op.assert_mem_place(ecx).to_const_value(ecx.tcx.tcx),\n+            ScalarMaybeUndef::Undef => to_const_value(op.assert_mem_place(ecx)),\n         },\n         Err(ImmTy { imm: Immediate::ScalarPair(a, b), .. }) => {\n             let (data, start) = match a.not_undef().unwrap() {"}, {"sha": "c8499d845dd134840c27b68aded043f4d411603a", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cac6f4c12db5fadff650267a8456d5835d19b136/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac6f4c12db5fadff650267a8456d5835d19b136/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=cac6f4c12db5fadff650267a8456d5835d19b136", "patch": "@@ -6,13 +6,12 @@ use std::convert::TryFrom;\n use std::hash::Hash;\n \n use rustc::mir;\n-use rustc::mir::interpret::{truncate, ConstValue};\n+use rustc::mir::interpret::truncate;\n use rustc::ty::layout::{\n     self, Align, HasDataLayout, LayoutOf, PrimitiveExt, Size, TyLayout, VariantIdx,\n };\n use rustc::ty::TypeFoldable;\n use rustc::ty::{self, Ty};\n-use rustc::ty::{self, Ty, TyCtxt};\n use rustc_macros::HashStable;\n \n use super::{\n@@ -196,20 +195,6 @@ impl<'tcx, Tag> MPlaceTy<'tcx, Tag> {\n             _ => bug!(\"vtable not supported on type {:?}\", self.layout.ty),\n         }\n     }\n-\n-    #[inline(always)]\n-    pub fn to_const_value(self, tcx: TyCtxt<'tcx>) -> ConstValue<'tcx> {\n-        match self.mplace.ptr {\n-            Scalar::Ptr(ptr) => {\n-                let alloc = tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id);\n-                ConstValue::ByRef { alloc, offset: ptr.offset }\n-            }\n-            Scalar::Raw { data, .. } => {\n-                assert_eq!(data, self.layout.align.abi.bytes().into());\n-                ConstValue::Scalar(Scalar::zst())\n-            }\n-        }\n-    }\n }\n \n // These are defined here because they produce a place."}]}