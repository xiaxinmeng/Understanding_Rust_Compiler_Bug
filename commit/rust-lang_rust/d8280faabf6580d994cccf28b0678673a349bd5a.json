{"sha": "d8280faabf6580d994cccf28b0678673a349bd5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MjgwZmFhYmY2NTgwZDk5NGNjY2YyOGIwNjc4NjczYTM0OWJkNWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-30T20:43:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-30T20:43:31Z"}, "message": "Rollup merge of #62293 - Centril:remove-await-macro, r=cramertj\n\nUnsupport the `await!(future)` macro\n\nUnsupport the `await!(future)` \"macro\" and recognize it in error recovery instead.\n\nThe `future.await` syntax has been on nightly since 2019-05-08.\nThis was 55 days ago which is 1.31 releases ago.\n\nCloses https://github.com/rust-lang/rust/issues/60610.\n\nr? @cramertj", "tree": {"sha": "e9ca17c285331e81f254efb1c279e4ab1182cdaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9ca17c285331e81f254efb1c279e4ab1182cdaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8280faabf6580d994cccf28b0678673a349bd5a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdQKvzCRBK7hj4Ov3rIwAAdHIIAGUDEUV9RRZ6ppLOZQfUXkEr\nkZQPJi2T1IZj+LnX0FfKEc+R5aKRw7dBlV4dJYtdSXp95vxlqA1Sk+Hm9SLL3GTZ\np4ZzHxkrmKRILcf8+dQ9uIbB35qbtdhCNOwFYZ7Yqv1gStHgr0dFOS2iSlQfbN+D\nq8pQ+I148qOwQ5zPYAt2qzLlJF6AYbsvQDYmXDEKt7m952ZfmZe/rV3OKNJbwD2w\n88BumyCuktQ8clu7bWt5ueCMGUsVJnS6oEvnY/tfkBrop/P0zl+l3di/7ZV2BFCg\nRGl4FTz7cbPsYuQi2daE3GdkN13+zukqxdkztoFB/6V76YcEMkjy5xSQ4UokFMU=\n=XazB\n-----END PGP SIGNATURE-----\n", "payload": "tree e9ca17c285331e81f254efb1c279e4ab1182cdaa\nparent f690098e6d65ad7b33dc7fdefccc387806782027\nparent b21f0a313e22875dcdd399f599f5542df6ebb5c2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564519411 +0200\ncommitter GitHub <noreply@github.com> 1564519411 +0200\n\nRollup merge of #62293 - Centril:remove-await-macro, r=cramertj\n\nUnsupport the `await!(future)` macro\n\nUnsupport the `await!(future)` \"macro\" and recognize it in error recovery instead.\n\nThe `future.await` syntax has been on nightly since 2019-05-08.\nThis was 55 days ago which is 1.31 releases ago.\n\nCloses https://github.com/rust-lang/rust/issues/60610.\n\nr? @cramertj\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8280faabf6580d994cccf28b0678673a349bd5a", "html_url": "https://github.com/rust-lang/rust/commit/d8280faabf6580d994cccf28b0678673a349bd5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8280faabf6580d994cccf28b0678673a349bd5a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f690098e6d65ad7b33dc7fdefccc387806782027", "url": "https://api.github.com/repos/rust-lang/rust/commits/f690098e6d65ad7b33dc7fdefccc387806782027", "html_url": "https://github.com/rust-lang/rust/commit/f690098e6d65ad7b33dc7fdefccc387806782027"}, {"sha": "b21f0a313e22875dcdd399f599f5542df6ebb5c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b21f0a313e22875dcdd399f599f5542df6ebb5c2", "html_url": "https://github.com/rust-lang/rust/commit/b21f0a313e22875dcdd399f599f5542df6ebb5c2"}], "stats": {"total": 517, "additions": 164, "deletions": 353}, "files": [{"sha": "b3eee7c3464896ea3bd3e29462085fbb59e4d02c", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=d8280faabf6580d994cccf28b0678673a349bd5a", "patch": "@@ -2088,11 +2088,11 @@ generator can be constructed.\n Erroneous code example:\n \n ```edition2018,compile-fail,E0698\n-#![feature(futures_api, async_await, await_macro)]\n+#![feature(async_await)]\n async fn bar<T>() -> () {}\n \n async fn foo() {\n-  await!(bar());  // error: cannot infer type for `T`\n+    bar().await; // error: cannot infer type for `T`\n }\n ```\n \n@@ -2101,12 +2101,12 @@ To fix this you must bind `T` to a concrete type such as `String`\n so that a generator can then be constructed:\n \n ```edition2018\n-#![feature(futures_api, async_await, await_macro)]\n+#![feature(async_await)]\n async fn bar<T>() -> () {}\n \n async fn foo() {\n-  await!(bar::<String>());\n-  //          ^^^^^^^^ specify type explicitly\n+  bar::<String>().await;\n+  //   ^^^^^^^^ specify type explicitly\n }\n ```\n \"##,"}, {"sha": "026c3cc6f95b20bda97a1d72554f9765315ef88b", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=d8280faabf6580d994cccf28b0678673a349bd5a", "patch": "@@ -4685,7 +4685,7 @@ impl<'a> LoweringContext<'a> {\n                     })\n                 })\n             }\n-            ExprKind::Await(_origin, ref expr) => self.lower_await(e.span, expr),\n+            ExprKind::Await(ref expr) => self.lower_await(e.span, expr),\n             ExprKind::Closure(\n                 capture_clause, asyncness, movability, ref decl, ref body, fn_decl_span\n             ) => {"}, {"sha": "b633705a65f5d6518b18e956cbba36759c1608f8", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d8280faabf6580d994cccf28b0678673a349bd5a", "patch": "@@ -1178,7 +1178,7 @@ pub enum ExprKind {\n     /// preexisting defs.\n     Async(CaptureBy, NodeId, P<Block>),\n     /// An await expression (`my_future.await`).\n-    Await(AwaitOrigin, P<Expr>),\n+    Await(P<Expr>),\n \n     /// A try block (`try { ... }`).\n     TryBlock(P<Block>),"}, {"sha": "d11deeb86454275f8a57dd62d35e4fa32a17e8e3", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d8280faabf6580d994cccf28b0678673a349bd5a", "patch": "@@ -468,10 +468,6 @@ declare_features! (\n     // Allows async and await syntax.\n     (active, async_await, \"1.28.0\", Some(50547), None),\n \n-    // Allows await! macro-like syntax.\n-    // This will likely be removed prior to stabilization of async/await.\n-    (active, await_macro, \"1.28.0\", Some(50547), None),\n-\n     // Allows reinterpretation of the bits of a value of one type as another type during const eval.\n     (active, const_transmute, \"1.29.0\", Some(53605), None),\n \n@@ -627,6 +623,8 @@ declare_features! (\n     (removed, quote, \"1.33.0\", Some(29601), None, None),\n     // Allows using `#[unsafe_destructor_blind_to_params]` (RFC 1238).\n     (removed, dropck_parametricity, \"1.38.0\", Some(28498), None, None),\n+    (removed, await_macro, \"1.38.0\", Some(50547), None,\n+     Some(\"subsumed by `.await` syntax\")),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: removed features\n@@ -2109,19 +2107,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::ExprKind::Async(..) => {\n                 gate_feature_post!(&self, async_await, e.span, \"async blocks are unstable\");\n             }\n-            ast::ExprKind::Await(origin, _) => {\n-                match origin {\n-                    ast::AwaitOrigin::FieldLike =>\n-                        gate_feature_post!(&self, async_await, e.span, \"async/await is unstable\"),\n-                    ast::AwaitOrigin::MacroLike =>\n-                        gate_feature_post!(\n-                            &self,\n-                            await_macro,\n-                            e.span,\n-                            \"`await!(<expr>)` macro syntax is unstable, and will soon be removed \\\n-                            in favor of `<expr>.await` syntax.\"\n-                        ),\n-                }\n+            ast::ExprKind::Await(_) => {\n+                gate_feature_post!(&self, async_await, e.span, \"async/await is unstable\");\n             }\n             _ => {}\n         }"}, {"sha": "7b328e817bf8e36b624686af6ee7aa557f2d09cd", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=d8280faabf6580d994cccf28b0678673a349bd5a", "patch": "@@ -1139,7 +1139,7 @@ pub fn noop_visit_expr<T: MutVisitor>(Expr { node, id, span, attrs }: &mut Expr,\n             vis.visit_id(node_id);\n             vis.visit_block(body);\n         }\n-        ExprKind::Await(_origin, expr) => vis.visit_expr(expr),\n+        ExprKind::Await(expr) => vis.visit_expr(expr),\n         ExprKind::Assign(el, er) => {\n             vis.visit_expr(el);\n             vis.visit_expr(er);"}, {"sha": "730efb5ef013cdd73e56772d45d3d42c4be0017b", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=d8280faabf6580d994cccf28b0678673a349bd5a", "patch": "@@ -869,13 +869,23 @@ impl<'a> Parser<'a> {\n         Ok(())\n     }\n \n-    /// Consume alternative await syntaxes like `await <expr>`, `await? <expr>`, `await(<expr>)`\n-    /// and `await { <expr> }`.\n+    /// Consume alternative await syntaxes like `await!(<expr>)`, `await <expr>`,\n+    /// `await? <expr>`, `await(<expr>)`, and `await { <expr> }`.\n     crate fn parse_incorrect_await_syntax(\n         &mut self,\n         lo: Span,\n         await_sp: Span,\n     ) -> PResult<'a, (Span, ExprKind)> {\n+        if self.token == token::Not {\n+            // Handle `await!(<expr>)`.\n+            self.expect(&token::Not)?;\n+            self.expect(&token::OpenDelim(token::Paren))?;\n+            let expr = self.parse_expr()?;\n+            self.expect(&token::CloseDelim(token::Paren))?;\n+            let sp = self.error_on_incorrect_await(lo, self.prev_span, &expr, false);\n+            return Ok((sp, ExprKind::Await(expr)))\n+        }\n+\n         let is_question = self.eat(&token::Question); // Handle `await? <expr>`.\n         let expr = if self.token == token::OpenDelim(token::Brace) {\n             // Handle `await { <expr> }`.\n@@ -893,18 +903,23 @@ impl<'a> Parser<'a> {\n             err.span_label(await_sp, \"while parsing this incorrect await expression\");\n             err\n         })?;\n+        let sp = self.error_on_incorrect_await(lo, expr.span, &expr, is_question);\n+        Ok((sp, ExprKind::Await(expr)))\n+    }\n+\n+    fn error_on_incorrect_await(&self, lo: Span, hi: Span, expr: &Expr, is_question: bool) -> Span {\n         let expr_str = self.span_to_snippet(expr.span)\n             .unwrap_or_else(|_| pprust::expr_to_string(&expr));\n         let suggestion = format!(\"{}.await{}\", expr_str, if is_question { \"?\" } else { \"\" });\n-        let sp = lo.to(expr.span);\n+        let sp = lo.to(hi);\n         let app = match expr.node {\n             ExprKind::Try(_) => Applicability::MaybeIncorrect, // `await <expr>?`\n             _ => Applicability::MachineApplicable,\n         };\n         self.struct_span_err(sp, \"incorrect use of `await`\")\n             .span_suggestion(sp, \"`await` is a postfix operation\", suggestion, app)\n             .emit();\n-        Ok((sp, ExprKind::Await(ast::AwaitOrigin::FieldLike, expr)))\n+        sp\n     }\n \n     /// If encountering `future.await()`, consume and emit error."}, {"sha": "7fda9158b4bdfed7e05c39621c8d43bf11ea5fb4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 35, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d8280faabf6580d994cccf28b0678673a349bd5a", "patch": "@@ -2234,7 +2234,7 @@ impl<'a> Parser<'a> {\n                 } else if self.eat_keyword(kw::Let) {\n                     return self.parse_let_expr(attrs);\n                 } else if is_span_rust_2018 && self.eat_keyword(kw::Await) {\n-                    let (await_hi, e_kind) = self.parse_await_macro_or_alt(lo, self.prev_span)?;\n+                    let (await_hi, e_kind) = self.parse_incorrect_await_syntax(lo, self.prev_span)?;\n                     hi = await_hi;\n                     ex = e_kind;\n                 } else if self.token.is_path_start() {\n@@ -2282,31 +2282,6 @@ impl<'a> Parser<'a> {\n         self.maybe_recover_from_bad_qpath(expr, true)\n     }\n \n-    /// Parse `await!(<expr>)` calls, or alternatively recover from incorrect but reasonable\n-    /// alternative syntaxes `await <expr>`, `await? <expr>`, `await(<expr>)` and\n-    /// `await { <expr> }`.\n-    fn parse_await_macro_or_alt(\n-        &mut self,\n-        lo: Span,\n-        await_sp: Span,\n-    ) -> PResult<'a, (Span, ExprKind)> {\n-        if self.token == token::Not {\n-            // Handle correct `await!(<expr>)`.\n-            // FIXME: make this an error when `await!` is no longer supported\n-            // https://github.com/rust-lang/rust/issues/60610\n-            self.expect(&token::Not)?;\n-            self.expect(&token::OpenDelim(token::Paren))?;\n-            let expr = self.parse_expr().map_err(|mut err| {\n-                err.span_label(await_sp, \"while parsing this await macro call\");\n-                err\n-            })?;\n-            self.expect(&token::CloseDelim(token::Paren))?;\n-            Ok((self.prev_span, ExprKind::Await(ast::AwaitOrigin::MacroLike, expr)))\n-        } else { // Handle `await <expr>`.\n-            self.parse_incorrect_await_syntax(lo, await_sp)\n-        }\n-    }\n-\n     fn maybe_parse_struct_expr(\n         &mut self,\n         lo: Span,\n@@ -2509,18 +2484,19 @@ impl<'a> Parser<'a> {\n         )\n     }\n \n-    // Assuming we have just parsed `.`, continue parsing into an expression.\n+    fn mk_await_expr(&mut self, self_arg: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {\n+        let span = lo.to(self.prev_span);\n+        let await_expr = self.mk_expr(span, ExprKind::Await(self_arg), ThinVec::new());\n+        self.recover_from_await_method_call();\n+        Ok(await_expr)\n+    }\n+\n+    /// Assuming we have just parsed `.`, continue parsing into an expression.\n     fn parse_dot_suffix(&mut self, self_arg: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {\n         if self.token.span.rust_2018() && self.eat_keyword(kw::Await) {\n-            let span = lo.to(self.prev_span);\n-            let await_expr = self.mk_expr(\n-                span,\n-                ExprKind::Await(ast::AwaitOrigin::FieldLike, self_arg),\n-                ThinVec::new(),\n-            );\n-            self.recover_from_await_method_call();\n-            return Ok(await_expr);\n+            return self.mk_await_expr(self_arg, lo);\n         }\n+\n         let segment = self.parse_path_segment(PathStyle::Expr)?;\n         self.check_trailing_angle_brackets(&segment, token::OpenDelim(token::Paren));\n "}, {"sha": "88ff6ee9071014deb7efefb3b46af59be7ba269c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d8280faabf6580d994cccf28b0678673a349bd5a", "patch": "@@ -2120,17 +2120,9 @@ impl<'a> State<'a> {\n                 self.ibox(0);\n                 self.print_block_with_attrs(blk, attrs);\n             }\n-            ast::ExprKind::Await(origin, ref expr) => {\n-                match origin {\n-                    ast::AwaitOrigin::MacroLike => {\n-                        self.s.word(\"await!\");\n-                        self.print_expr_maybe_paren(expr, parser::PREC_FORCE_PAREN);\n-                    }\n-                    ast::AwaitOrigin::FieldLike => {\n-                        self.print_expr_maybe_paren(expr, parser::PREC_POSTFIX);\n-                        self.s.word(\".await\");\n-                    }\n-                }\n+            ast::ExprKind::Await(ref expr) => {\n+                self.print_expr_maybe_paren(expr, parser::PREC_POSTFIX);\n+                self.s.word(\".await\");\n             }\n             ast::ExprKind::Assign(ref lhs, ref rhs) => {\n                 let prec = AssocOp::Assign.precedence() as i8;"}, {"sha": "d71358f45c470ec3bb787bf288bfaca4cf7f801a", "filename": "src/libsyntax/util/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Flibsyntax%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Flibsyntax%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser.rs?ref=d8280faabf6580d994cccf28b0678673a349bd5a", "patch": "@@ -382,7 +382,7 @@ pub fn contains_exterior_struct_lit(value: &ast::Expr) -> bool {\n             // X { y: 1 } + X { y: 2 }\n             contains_exterior_struct_lit(&lhs) || contains_exterior_struct_lit(&rhs)\n         }\n-        ast::ExprKind::Await(_, ref x) |\n+        ast::ExprKind::Await(ref x) |\n         ast::ExprKind::Unary(_, ref x) |\n         ast::ExprKind::Cast(ref x, _) |\n         ast::ExprKind::Type(ref x, _) |"}, {"sha": "5fee8ed81ab3bde39034848b4d3729c52fed09a5", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=d8280faabf6580d994cccf28b0678673a349bd5a", "patch": "@@ -757,7 +757,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         ExprKind::Async(_, _, ref body) => {\n             visitor.visit_block(body);\n         }\n-        ExprKind::Await(_, ref expr) => visitor.visit_expr(expr),\n+        ExprKind::Await(ref expr) => visitor.visit_expr(expr),\n         ExprKind::Assign(ref left_hand_expression, ref right_hand_expression) => {\n             visitor.visit_expr(left_hand_expression);\n             visitor.visit_expr(right_hand_expression);"}, {"sha": "422a5a6394f8e71fc2948427cee8a3f72b36a3a9", "filename": "src/test/ui/async-await/await-keyword/2015-edition-error-various-positions.rs", "status": "renamed", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.rs?ref=d8280faabf6580d994cccf28b0678673a349bd5a", "patch": "@@ -1,4 +1,4 @@\n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n #![allow(non_camel_case_types)]\n #![deny(keyword_idents)]\n \n@@ -29,6 +29,9 @@ macro_rules! await {\n }\n \n fn main() {\n+    await!(); //~ ERROR `await` is a keyword in the 2018 edition\n+    //~^ WARN this was previously accepted by the compiler\n+\n     match await { await => {} } //~ ERROR `await` is a keyword in the 2018 edition\n     //~^ ERROR `await` is a keyword in the 2018 edition\n     //~^^ WARN this was previously accepted by the compiler", "previous_filename": "src/test/ui/async-await/await-keyword/2015-edition-error-in-non-macro-position.rs"}, {"sha": "8af0110169ebd2deaee4a15617e0400a71113cf8", "filename": "src/test/ui/async-await/await-keyword/2015-edition-error-various-positions.stderr", "status": "renamed", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr?ref=d8280faabf6580d994cccf28b0678673a349bd5a", "patch": "@@ -1,19 +1,19 @@\n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:6:13\n+  --> $DIR/2015-edition-error-various-positions.rs:6:13\n    |\n LL |     pub mod await {\n    |             ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n note: lint level defined here\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:3:9\n+  --> $DIR/2015-edition-error-various-positions.rs:3:9\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:8:20\n+  --> $DIR/2015-edition-error-various-positions.rs:8:20\n    |\n LL |         pub struct await;\n    |                    ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -22,7 +22,7 @@ LL |         pub struct await;\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:12:16\n+  --> $DIR/2015-edition-error-various-positions.rs:12:16\n    |\n LL | use outer_mod::await::await;\n    |                ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -31,7 +31,7 @@ LL | use outer_mod::await::await;\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:12:23\n+  --> $DIR/2015-edition-error-various-positions.rs:12:23\n    |\n LL | use outer_mod::await::await;\n    |                       ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -40,7 +40,7 @@ LL | use outer_mod::await::await;\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:17:14\n+  --> $DIR/2015-edition-error-various-positions.rs:17:14\n    |\n LL | struct Foo { await: () }\n    |              ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -49,7 +49,7 @@ LL | struct Foo { await: () }\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:21:15\n+  --> $DIR/2015-edition-error-various-positions.rs:21:15\n    |\n LL | impl Foo { fn await() {} }\n    |               ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -58,7 +58,7 @@ LL | impl Foo { fn await() {} }\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:25:14\n+  --> $DIR/2015-edition-error-various-positions.rs:25:14\n    |\n LL | macro_rules! await {\n    |              ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -67,7 +67,16 @@ LL | macro_rules! await {\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:32:11\n+  --> $DIR/2015-edition-error-various-positions.rs:32:5\n+   |\n+LL |     await!();\n+   |     ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `await` is a keyword in the 2018 edition\n+  --> $DIR/2015-edition-error-various-positions.rs:35:11\n    |\n LL |     match await { await => {} }\n    |           ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -76,13 +85,13 @@ LL |     match await { await => {} }\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:32:19\n+  --> $DIR/2015-edition-error-various-positions.rs:35:19\n    |\n LL |     match await { await => {} }\n    |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 10 previous errors\n ", "previous_filename": "src/test/ui/async-await/await-keyword/2015-edition-error-in-non-macro-position.stderr"}, {"sha": "e620c27f9e36de8bafa376753bfa452718103320", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.rs?ref=d8280faabf6580d994cccf28b0678673a349bd5a", "patch": "@@ -9,4 +9,8 @@ mod outer_mod {\n use self::outer_mod::await::await; //~ ERROR expected identifier\n     //~^ ERROR expected identifier, found reserved keyword `await`\n \n-fn main() {}\n+macro_rules! await { () => {}; } //~ ERROR expected identifier, found reserved keyword `await`\n+\n+fn main() {\n+    await!(); //~ ERROR expected expression, found `)`\n+}"}, {"sha": "9304928cfde5d8183bae99410a6dc3f4136e2a87", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.stderr?ref=d8280faabf6580d994cccf28b0678673a349bd5a", "patch": "@@ -38,5 +38,21 @@ help: you can escape reserved keywords to use them as identifiers\n LL | use self::outer_mod::await::r#await;\n    |                             ^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: expected identifier, found reserved keyword `await`\n+  --> $DIR/2018-edition-error.rs:12:14\n+   |\n+LL | macro_rules! await { () => {}; }\n+   |              ^^^^^ expected identifier, found reserved keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL | macro_rules! r#await { () => {}; }\n+   |              ^^^^^^^\n+\n+error: expected expression, found `)`\n+  --> $DIR/2018-edition-error.rs:15:12\n+   |\n+LL |     await!();\n+   |            ^ expected expression\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "25da337c58798c2542af2b2bbb1c2530cdfa7cda", "filename": "src/test/ui/async-await/await-keyword/incorrect-syntax-suggestions.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs?ref=d8280faabf6580d994cccf28b0678673a349bd5a", "patch": "@@ -104,6 +104,31 @@ fn foo25() -> Result<(), ()> {\n     foo()\n }\n \n+async fn foo26() -> Result<(), ()> {\n+    let _ = await!(bar()); //~ ERROR incorrect use of `await`\n+    Ok(())\n+}\n+async fn foo27() -> Result<(), ()> {\n+    let _ = await!(bar())?; //~ ERROR incorrect use of `await`\n+    Ok(())\n+}\n+fn foo28() -> Result<(), ()> {\n+    fn foo() -> Result<(), ()> {\n+        let _ = await!(bar())?; //~ ERROR incorrect use of `await`\n+        //~^ ERROR `await` is only allowed inside `async` functions\n+        Ok(())\n+    }\n+    foo()\n+}\n+fn foo29() -> Result<(), ()> {\n+    let foo = || {\n+        let _ = await!(bar())?; //~ ERROR incorrect use of `await`\n+        //~^ ERROR `await` is only allowed inside `async` functions\n+        Ok(())\n+    };\n+    foo()\n+}\n+\n fn main() {\n     match await { await => () }\n     //~^ ERROR expected expression, found `=>`"}, {"sha": "db86d3d5d03ba8ac79fe7ad24a7badf1edd73741", "filename": "src/test/ui/async-await/await-keyword/incorrect-syntax-suggestions.stderr", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr?ref=d8280faabf6580d994cccf28b0678673a349bd5a", "patch": "@@ -88,22 +88,46 @@ error: incorrect use of `await`\n LL |     let _ = bar().await()?;\n    |                        ^^ help: `await` is not a method call, remove the parentheses\n \n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:108:13\n+   |\n+LL |     let _ = await!(bar());\n+   |             ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n+\n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:112:13\n+   |\n+LL |     let _ = await!(bar())?;\n+   |             ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n+\n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:117:17\n+   |\n+LL |         let _ = await!(bar())?;\n+   |                 ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n+\n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:125:17\n+   |\n+LL |         let _ = await!(bar())?;\n+   |                 ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n+\n error: expected expression, found `=>`\n-  --> $DIR/incorrect-syntax-suggestions.rs:108:25\n+  --> $DIR/incorrect-syntax-suggestions.rs:133:25\n    |\n LL |     match await { await => () }\n    |                   ----- ^^ expected expression\n    |                   |\n    |                   while parsing this incorrect await expression\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:108:11\n+  --> $DIR/incorrect-syntax-suggestions.rs:133:11\n    |\n LL |     match await { await => () }\n    |           ^^^^^^^^^^^^^^^^^^^^^ help: `await` is a postfix operation: `{ await => () }.await`\n \n error: expected one of `.`, `?`, `{`, or an operator, found `}`\n-  --> $DIR/incorrect-syntax-suggestions.rs:111:1\n+  --> $DIR/incorrect-syntax-suggestions.rs:136:1\n    |\n LL |     match await { await => () }\n    |     -----                      - expected one of `.`, `?`, `{`, or an operator here\n@@ -193,6 +217,22 @@ LL |     let foo = || {\n LL |         let _ = bar().await?;\n    |                 ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n+error[E0728]: `await` is only allowed inside `async` functions and blocks\n+  --> $DIR/incorrect-syntax-suggestions.rs:117:17\n+   |\n+LL |     fn foo() -> Result<(), ()> {\n+   |        --- this is not `async`\n+LL |         let _ = await!(bar())?;\n+   |                 ^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+\n+error[E0728]: `await` is only allowed inside `async` functions and blocks\n+  --> $DIR/incorrect-syntax-suggestions.rs:125:17\n+   |\n+LL |     let foo = || {\n+   |               -- this is not `async`\n+LL |         let _ = await!(bar())?;\n+   |                 ^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+\n error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n   --> $DIR/incorrect-syntax-suggestions.rs:18:19\n    |\n@@ -202,6 +242,6 @@ LL |     let _ = await bar()?;\n    = help: the trait `std::ops::Try` is not implemented for `impl std::future::Future`\n    = note: required by `std::ops::Try::into_result`\n \n-error: aborting due to 29 previous errors\n+error: aborting due to 35 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "0996c38b3b6c61f18efcbefa970c498b3457bf8b", "filename": "src/test/ui/async-await/await-keyword/post_expansion_error.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fpost_expansion_error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fpost_expansion_error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fpost_expansion_error.stderr?ref=d8280faabf6580d994cccf28b0678673a349bd5a", "patch": "@@ -2,9 +2,7 @@ error: expected expression, found `)`\n   --> $DIR/post_expansion_error.rs:8:12\n    |\n LL |     await!()\n-   |     -----  ^ expected expression\n-   |     |\n-   |     while parsing this await macro call\n+   |            ^ expected expression\n \n error: aborting due to previous error\n "}, {"sha": "b9cd3903513a47492bb528adf9b61f50ee7a4ad3", "filename": "src/test/ui/async-await/await-macro.rs", "status": "removed", "additions": 0, "deletions": 230, "changes": 230, "blob_url": "https://github.com/rust-lang/rust/blob/f690098e6d65ad7b33dc7fdefccc387806782027/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f690098e6d65ad7b33dc7fdefccc387806782027/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs?ref=f690098e6d65ad7b33dc7fdefccc387806782027", "patch": "@@ -1,230 +0,0 @@\n-// run-pass\n-\n-// edition:2018\n-// aux-build:arc_wake.rs\n-\n-#![feature(async_await, async_closure, await_macro)]\n-\n-extern crate arc_wake;\n-\n-use std::pin::Pin;\n-use std::future::Future;\n-use std::sync::{\n-    Arc,\n-    atomic::{self, AtomicUsize},\n-};\n-use std::task::{Context, Poll};\n-use arc_wake::ArcWake;\n-\n-struct Counter {\n-    wakes: AtomicUsize,\n-}\n-\n-impl ArcWake for Counter {\n-    fn wake(self: Arc<Self>) {\n-        Self::wake_by_ref(&self)\n-    }\n-    fn wake_by_ref(arc_self: &Arc<Self>) {\n-        arc_self.wakes.fetch_add(1, atomic::Ordering::SeqCst);\n-    }\n-}\n-\n-struct WakeOnceThenComplete(bool);\n-\n-fn wake_and_yield_once() -> WakeOnceThenComplete { WakeOnceThenComplete(false) }\n-\n-impl Future for WakeOnceThenComplete {\n-    type Output = ();\n-    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {\n-        if self.0 {\n-            Poll::Ready(())\n-        } else {\n-            cx.waker().wake_by_ref();\n-            self.0 = true;\n-            Poll::Pending\n-        }\n-    }\n-}\n-\n-fn async_block(x: u8) -> impl Future<Output = u8> {\n-    async move {\n-        await!(wake_and_yield_once());\n-        x\n-    }\n-}\n-\n-fn async_block_with_borrow_named_lifetime<'a>(x: &'a u8) -> impl Future<Output = u8> + 'a {\n-    async move {\n-        await!(wake_and_yield_once());\n-        *x\n-    }\n-}\n-\n-fn async_nonmove_block(x: u8) -> impl Future<Output = u8> {\n-    async move {\n-        let future = async {\n-            await!(wake_and_yield_once());\n-            x\n-        };\n-        await!(future)\n-    }\n-}\n-\n-fn async_closure(x: u8) -> impl Future<Output = u8> {\n-    (async move |x: u8| -> u8 {\n-        await!(wake_and_yield_once());\n-        x\n-    })(x)\n-}\n-\n-fn async_closure_in_unsafe_block(x: u8) -> impl Future<Output = u8> {\n-    (unsafe {\n-        async move |x: u8| unsafe_fn(await!(unsafe_async_fn(x)))\n-    })(x)\n-}\n-\n-async fn async_fn(x: u8) -> u8 {\n-    await!(wake_and_yield_once());\n-    x\n-}\n-\n-async fn generic_async_fn<T>(x: T) -> T {\n-    await!(wake_and_yield_once());\n-    x\n-}\n-\n-async fn async_fn_with_borrow(x: &u8) -> u8 {\n-    await!(wake_and_yield_once());\n-    *x\n-}\n-\n-async fn async_fn_with_borrow_named_lifetime<'a>(x: &'a u8) -> u8 {\n-    await!(wake_and_yield_once());\n-    *x\n-}\n-\n-fn async_fn_with_impl_future_named_lifetime<'a>(x: &'a u8) -> impl Future<Output = u8> + 'a {\n-    async move {\n-        await!(wake_and_yield_once());\n-        *x\n-    }\n-}\n-\n-/* FIXME(cramertj) support when `existential type T<'a, 'b>:;` works\n-async fn async_fn_multiple_args(x: &u8, _y: &u8) -> u8 {\n-    await!(wake_and_yield_once());\n-    *x\n-}\n-*/\n-\n-async fn async_fn_multiple_args_named_lifetime<'a>(x: &'a u8, _y: &'a u8) -> u8 {\n-    await!(wake_and_yield_once());\n-    *x\n-}\n-\n-fn async_fn_with_internal_borrow(y: u8) -> impl Future<Output = u8> {\n-    async move {\n-        await!(async_fn_with_borrow_named_lifetime(&y))\n-    }\n-}\n-\n-async unsafe fn unsafe_async_fn(x: u8) -> u8 {\n-    await!(wake_and_yield_once());\n-    x\n-}\n-\n-unsafe fn unsafe_fn(x: u8) -> u8 {\n-    x\n-}\n-\n-fn async_block_in_unsafe_block(x: u8) -> impl Future<Output = u8> {\n-    unsafe {\n-        async move {\n-            unsafe_fn(await!(unsafe_async_fn(x)))\n-        }\n-    }\n-}\n-\n-struct Foo;\n-\n-trait Bar {\n-    fn foo() {}\n-}\n-\n-impl Foo {\n-    async fn async_assoc_item(x: u8) -> u8 {\n-        unsafe {\n-            await!(unsafe_async_fn(x))\n-        }\n-    }\n-\n-    async unsafe fn async_unsafe_assoc_item(x: u8) -> u8 {\n-        await!(unsafe_async_fn(x))\n-    }\n-}\n-\n-fn test_future_yields_once_then_returns<F, Fut>(f: F)\n-where\n-    F: FnOnce(u8) -> Fut,\n-    Fut: Future<Output = u8>,\n-{\n-    let mut fut = Box::pin(f(9));\n-    let counter = Arc::new(Counter { wakes: AtomicUsize::new(0) });\n-    let waker = ArcWake::into_waker(counter.clone());\n-    let mut cx = Context::from_waker(&waker);\n-    assert_eq!(0, counter.wakes.load(atomic::Ordering::SeqCst));\n-    assert_eq!(Poll::Pending, fut.as_mut().poll(&mut cx));\n-    assert_eq!(1, counter.wakes.load(atomic::Ordering::SeqCst));\n-    assert_eq!(Poll::Ready(9), fut.as_mut().poll(&mut cx));\n-}\n-\n-fn main() {\n-    macro_rules! test {\n-        ($($fn_name:expr,)*) => { $(\n-            test_future_yields_once_then_returns($fn_name);\n-        )* }\n-    }\n-\n-    macro_rules! test_with_borrow {\n-        ($($fn_name:expr,)*) => { $(\n-            test_future_yields_once_then_returns(|x| {\n-                async move {\n-                    await!($fn_name(&x))\n-                }\n-            });\n-        )* }\n-    }\n-\n-    test! {\n-        async_block,\n-        async_nonmove_block,\n-        async_closure,\n-        async_closure_in_unsafe_block,\n-        async_fn,\n-        generic_async_fn,\n-        async_fn_with_internal_borrow,\n-        async_block_in_unsafe_block,\n-        Foo::async_assoc_item,\n-        |x| {\n-            async move {\n-                unsafe { await!(unsafe_async_fn(x)) }\n-            }\n-        },\n-        |x| {\n-            async move {\n-                unsafe { await!(Foo::async_unsafe_assoc_item(x)) }\n-            }\n-        },\n-    }\n-    test_with_borrow! {\n-        async_block_with_borrow_named_lifetime,\n-        async_fn_with_borrow,\n-        async_fn_with_borrow_named_lifetime,\n-        async_fn_with_impl_future_named_lifetime,\n-        |x| {\n-            async move {\n-                await!(async_fn_multiple_args_named_lifetime(x, x))\n-            }\n-        },\n-    }\n-}"}, {"sha": "cd479e256b4e55e0215724f197abaf72633e351e", "filename": "src/test/ui/async-await/multiple-lifetimes/named.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fnamed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8280faabf6580d994cccf28b0678673a349bd5a/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fnamed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fnamed.rs?ref=d8280faabf6580d994cccf28b0678673a349bd5a", "patch": "@@ -3,7 +3,7 @@\n \n // Test that we can use async fns with multiple arbitrary lifetimes.\n \n-#![feature(arbitrary_self_types, async_await, await_macro)]\n+#![feature(async_await)]\n \n async fn multiple_named_lifetimes<'a, 'b>(_: &'a u8, _: &'b u8) {}\n "}, {"sha": "291db9ba41370637b608f5981a73b3d12b2c50cc", "filename": "src/test/ui/feature-gate/await-macro.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f690098e6d65ad7b33dc7fdefccc387806782027/src%2Ftest%2Fui%2Ffeature-gate%2Fawait-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f690098e6d65ad7b33dc7fdefccc387806782027/src%2Ftest%2Fui%2Ffeature-gate%2Fawait-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fawait-macro.rs?ref=f690098e6d65ad7b33dc7fdefccc387806782027", "patch": "@@ -1,12 +0,0 @@\n-// gate-test-await_macro\n-// edition:2018\n-\n-#![feature(async_await)]\n-\n-async fn bar() {}\n-\n-async fn foo() {\n-    await!(bar()); //~ ERROR `await!(<expr>)` macro syntax is unstable, and will soon be removed\n-}\n-\n-fn main() {}"}, {"sha": "0d4f03e211b52d98b610b07aef2ca83fc01e4ddc", "filename": "src/test/ui/feature-gate/await-macro.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f690098e6d65ad7b33dc7fdefccc387806782027/src%2Ftest%2Fui%2Ffeature-gate%2Fawait-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f690098e6d65ad7b33dc7fdefccc387806782027/src%2Ftest%2Fui%2Ffeature-gate%2Fawait-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fawait-macro.stderr?ref=f690098e6d65ad7b33dc7fdefccc387806782027", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: `await!(<expr>)` macro syntax is unstable, and will soon be removed in favor of `<expr>.await` syntax.\n-  --> $DIR/await-macro.rs:9:5\n-   |\n-LL |     await!(bar());\n-   |     ^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/50547\n-   = help: add `#![feature(await_macro)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}]}