{"sha": "186640a158d732ec6de0a0a9dc79803c47be551d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NjY0MGExNThkNzMyZWM2ZGUwYTBhOWRjNzk4MDNjNDdiZTU1MWQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-19T16:15:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-19T16:15:02Z"}, "message": "Rollup merge of #73248 - marmeladema:save-analysis-various-fixes, r=Xanewok\n\nsave_analysis: improve handling of enum struct variant\n\nFixes #61385", "tree": {"sha": "2963c607d33f6f0bcf5ef30e7c298fc8ce19552c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2963c607d33f6f0bcf5ef30e7c298fc8ce19552c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/186640a158d732ec6de0a0a9dc79803c47be551d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7OSGCRBK7hj4Ov3rIwAAdHIIAKuADTFOrGehwODc+/abOV1u\nm1ciVH8QBsq2tfrnaxczHHQwaTn96R08oruXI+sGh2eSGV2D+M8Wh1TkhEpTg44x\nBzw6ptAsa+bB1rQcVeHqaaCXtafHtz+pxAIm2ZWGtIVqRmHwS2BW8I4DcaUqUQjQ\nm7FPaJ59Kmt8EDRxqEX2+x9KpsYRuGQMv6f6tGZgClxO/GyCfh8dsub0C0teuAOY\nXmc/rYXVDr4XMBNLBGvfRbKgquXK+l9FkskEtyUllQhWR7manaq2Hvn8dEH1rqSH\nCjC+PkP4M8sfgoFKLiLH7ebUF10bXN3/ukCnXKJMsaH86cOnyvOJq7Ap1O79ioY=\n=3U4O\n-----END PGP SIGNATURE-----\n", "payload": "tree 2963c607d33f6f0bcf5ef30e7c298fc8ce19552c\nparent bc773fe5687269976bafabe1b080f86bc555ea73\nparent 0e31380f42165f79c54261c5a94f4bc54831ee52\nauthor Manish Goregaokar <manishsmail@gmail.com> 1592583302 -0700\ncommitter GitHub <noreply@github.com> 1592583302 -0700\n\nRollup merge of #73248 - marmeladema:save-analysis-various-fixes, r=Xanewok\n\nsave_analysis: improve handling of enum struct variant\n\nFixes #61385\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/186640a158d732ec6de0a0a9dc79803c47be551d", "html_url": "https://github.com/rust-lang/rust/commit/186640a158d732ec6de0a0a9dc79803c47be551d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/186640a158d732ec6de0a0a9dc79803c47be551d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc773fe5687269976bafabe1b080f86bc555ea73", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc773fe5687269976bafabe1b080f86bc555ea73", "html_url": "https://github.com/rust-lang/rust/commit/bc773fe5687269976bafabe1b080f86bc555ea73"}, {"sha": "0e31380f42165f79c54261c5a94f4bc54831ee52", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e31380f42165f79c54261c5a94f4bc54831ee52", "html_url": "https://github.com/rust-lang/rust/commit/0e31380f42165f79c54261c5a94f4bc54831ee52"}], "stats": {"total": 25, "additions": 6, "deletions": 19}, "files": [{"sha": "f5c3e84c624267788ac42e888ff06da83a631a0c", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/186640a158d732ec6de0a0a9dc79803c47be551d/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186640a158d732ec6de0a0a9dc79803c47be551d/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=186640a158d732ec6de0a0a9dc79803c47be551d", "patch": "@@ -518,24 +518,13 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n     }\n \n     pub fn get_expr_data(&self, expr: &hir::Expr<'_>) -> Option<Data> {\n-        let hir_node = self.tcx.hir().expect_expr(expr.hir_id);\n-        let ty = self.tables.expr_ty_adjusted_opt(&hir_node);\n-        if ty.is_none() || matches!(ty.unwrap().kind, ty::Error(_)) {\n+        let ty = self.tables.expr_ty_adjusted_opt(expr)?;\n+        if matches!(ty.kind, ty::Error(_)) {\n             return None;\n         }\n         match expr.kind {\n             hir::ExprKind::Field(ref sub_ex, ident) => {\n-                let hir_node = match self.tcx.hir().find(sub_ex.hir_id) {\n-                    Some(Node::Expr(expr)) => expr,\n-                    _ => {\n-                        debug!(\n-                            \"Missing or weird node for sub-expression {} in {:?}\",\n-                            sub_ex.hir_id, expr\n-                        );\n-                        return None;\n-                    }\n-                };\n-                match self.tables.expr_ty_adjusted(&hir_node).kind {\n+                match self.tables.expr_ty_adjusted(&sub_ex).kind {\n                     ty::Adt(def, _) if !def.is_enum() => {\n                         let variant = &def.non_enum_variant();\n                         filter!(self.span_utils, ident.span);\n@@ -562,8 +551,8 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     hir::QPath::Resolved(_, path) => path.segments.last().unwrap(),\n                     hir::QPath::TypeRelative(_, segment) => segment,\n                 };\n-                match self.tables.expr_ty_adjusted(&hir_node).kind {\n-                    ty::Adt(def, _) if !def.is_enum() => {\n+                match ty.kind {\n+                    ty::Adt(def, _) => {\n                         let sub_span = segment.ident.span;\n                         filter!(self.span_utils, sub_span);\n                         let span = self.span_from_span(sub_span);\n@@ -574,9 +563,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                         }))\n                     }\n                     _ => {\n-                        // FIXME ty could legitimately be an enum, but then we will fail\n-                        // later if we try to look up the fields.\n-                        debug!(\"expected struct or union, found {:?}\", ty);\n+                        debug!(\"expected adt, found {:?}\", ty);\n                         None\n                     }\n                 }"}]}