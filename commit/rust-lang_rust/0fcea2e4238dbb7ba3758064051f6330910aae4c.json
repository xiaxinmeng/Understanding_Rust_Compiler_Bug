{"sha": "0fcea2e4238dbb7ba3758064051f6330910aae4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmY2VhMmU0MjM4ZGJiN2JhMzc1ODA2NDA1MWY2MzMwOTEwYWFlNGM=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-06-09T01:09:54Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-06-09T01:09:54Z"}, "message": "Don't lose empty `where` clause when pretty-printing\n\nPreviously, we would parse `struct Foo where;` and `struct Foo;`\nidentically, leading to an 'empty' `where` clause being omitted during\npretty printing. This will cause us to lose spans when proc-macros\ninvolved, since we will have a collected `where` token that does not\nappear in the pretty-printed item.\n\nWe now explicitly track the presence of a `where` token during parsing,\nso that we can distinguish between `struct Foo where;` and `struct Foo;`\nduring pretty-printing", "tree": {"sha": "a96aa0b360fa84cd7256cca18b69c06e4e8a20d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a96aa0b360fa84cd7256cca18b69c06e4e8a20d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fcea2e4238dbb7ba3758064051f6330910aae4c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl7e4foACgkQtAh+UQ6Y\nsWQ2fA//e6/vVIgTRel/Up13Lu2cwbOv8M0/cZ5JKSZIEA0MUPHGTzDonB1NguIs\nsqGgQEEdGHBh/uAO0nK3H2OnwRQ1zZM5epmDpM/60Fb/wvV/17OjYL/ggxARAHNX\n16xsBgneHOIZnmitAT51hQc2voOxx/UuUkMEzSjtXExi8IS8uJOC8X1hgYvsRjon\nvkcZKnw9Twc4Qb0EjGdZYQDPJUhkwhIp91UOP0G4EePxVdRT5I0vtN9MKBfodOwQ\nBs/86vKzEtVWA3W1e+F1JznSDXCqM9/vn8D5ZIB9TvW9f3djbXQptOxMM4/SpmxH\n3ek5mXZX87IuNQFiniZ7ByxBd/KUnQNTvQYskpJxtLUgzw1176etY0Qg2wpVnfVs\nWmIoAVe5X1peEIibYrbCV9tFzm0lMxCQBw78QXs6aZtnttWhERy1x/1R9ruET38L\nWT2HnBTrqq8CzO1AInT/iIJFAessW580o0gd8vBw1il97Nb+LSp4mX1WbqJTviOY\nitWj0Z+NMDYTI5txI+Q6HASJv1NZ9tY+zZbx75nMLxnB0ZKIw46jmhgRuFo+zVqb\nLagdNTQE3uYbOaIozt0w7niHX5Y7eo4e/8Oh+Vd1Wcb8L1Jm0Vi5YVYlfzfEOh1z\no2OMtVp/qu/gcW1xbD/CGyocYlV/ktR8YXHViki8MR9SvniE8wQ=\n=GSr+\n-----END PGP SIGNATURE-----", "payload": "tree a96aa0b360fa84cd7256cca18b69c06e4e8a20d0\nparent fd4b177aabb9749dfb562c48e47379cea81dc277\nauthor Aaron Hill <aa1ronham@gmail.com> 1591664994 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1591664994 -0400\n\nDon't lose empty `where` clause when pretty-printing\n\nPreviously, we would parse `struct Foo where;` and `struct Foo;`\nidentically, leading to an 'empty' `where` clause being omitted during\npretty printing. This will cause us to lose spans when proc-macros\ninvolved, since we will have a collected `where` token that does not\nappear in the pretty-printed item.\n\nWe now explicitly track the presence of a `where` token during parsing,\nso that we can distinguish between `struct Foo where;` and `struct Foo;`\nduring pretty-printing\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fcea2e4238dbb7ba3758064051f6330910aae4c", "html_url": "https://github.com/rust-lang/rust/commit/0fcea2e4238dbb7ba3758064051f6330910aae4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fcea2e4238dbb7ba3758064051f6330910aae4c/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd4b177aabb9749dfb562c48e47379cea81dc277", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd4b177aabb9749dfb562c48e47379cea81dc277", "html_url": "https://github.com/rust-lang/rust/commit/fd4b177aabb9749dfb562c48e47379cea81dc277"}], "stats": {"total": 75, "additions": 68, "deletions": 7}, "files": [{"sha": "672ef108969e546a4ba310c0bea11438fcbaff63", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0fcea2e4238dbb7ba3758064051f6330910aae4c/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcea2e4238dbb7ba3758064051f6330910aae4c/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=0fcea2e4238dbb7ba3758064051f6330910aae4c", "patch": "@@ -362,7 +362,11 @@ impl Default for Generics {\n     fn default() -> Generics {\n         Generics {\n             params: Vec::new(),\n-            where_clause: WhereClause { predicates: Vec::new(), span: DUMMY_SP },\n+            where_clause: WhereClause {\n+                has_where_token: false,\n+                predicates: Vec::new(),\n+                span: DUMMY_SP,\n+            },\n             span: DUMMY_SP,\n         }\n     }\n@@ -371,6 +375,11 @@ impl Default for Generics {\n /// A where-clause in a definition.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct WhereClause {\n+    /// `true` if we ate a `where` token: this can happen\n+    /// if we parsed no predicates (e.g. `struct Foo where {}\n+    /// This allows us to accurately pretty-print\n+    /// in `nt_to_tokenstream`\n+    pub has_where_token: bool,\n     pub predicates: Vec<WherePredicate>,\n     pub span: Span,\n }"}, {"sha": "66b8d7f97f0ed44abda221d7dc2c804d6bb53d94", "filename": "src/librustc_ast/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fcea2e4238dbb7ba3758064051f6330910aae4c/src%2Flibrustc_ast%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcea2e4238dbb7ba3758064051f6330910aae4c/src%2Flibrustc_ast%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fmut_visit.rs?ref=0fcea2e4238dbb7ba3758064051f6330910aae4c", "patch": "@@ -786,7 +786,7 @@ pub fn noop_visit_generics<T: MutVisitor>(generics: &mut Generics, vis: &mut T)\n }\n \n pub fn noop_visit_where_clause<T: MutVisitor>(wc: &mut WhereClause, vis: &mut T) {\n-    let WhereClause { predicates, span } = wc;\n+    let WhereClause { has_where_token: _, predicates, span } = wc;\n     visit_vec(predicates, |predicate| vis.visit_where_predicate(predicate));\n     vis.visit_span(span);\n }"}, {"sha": "8ff80df527ce7c64168c50619ae36d878847c9c6", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0fcea2e4238dbb7ba3758064051f6330910aae4c/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcea2e4238dbb7ba3758064051f6330910aae4c/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=0fcea2e4238dbb7ba3758064051f6330910aae4c", "patch": "@@ -2593,7 +2593,7 @@ impl<'a> State<'a> {\n     }\n \n     crate fn print_where_clause(&mut self, where_clause: &ast::WhereClause) {\n-        if where_clause.predicates.is_empty() {\n+        if where_clause.predicates.is_empty() && !where_clause.has_where_token {\n             return;\n         }\n \n@@ -2739,7 +2739,11 @@ impl<'a> State<'a> {\n         }\n         let generics = ast::Generics {\n             params: Vec::new(),\n-            where_clause: ast::WhereClause { predicates: Vec::new(), span: rustc_span::DUMMY_SP },\n+            where_clause: ast::WhereClause {\n+                has_where_token: false,\n+                predicates: Vec::new(),\n+                span: rustc_span::DUMMY_SP,\n+            },\n             span: rustc_span::DUMMY_SP,\n         };\n         let header = ast::FnHeader { unsafety, ext, ..ast::FnHeader::default() };"}, {"sha": "609feb6f259d6a9647de777421155b398b347340", "filename": "src/librustc_builtin_macros/deriving/generic/ty.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0fcea2e4238dbb7ba3758064051f6330910aae4c/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcea2e4238dbb7ba3758064051f6330910aae4c/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fty.rs?ref=0fcea2e4238dbb7ba3758064051f6330910aae4c", "patch": "@@ -216,7 +216,11 @@ fn mk_ty_param(\n }\n \n fn mk_generics(params: Vec<ast::GenericParam>, span: Span) -> Generics {\n-    Generics { params, where_clause: ast::WhereClause { predicates: Vec::new(), span }, span }\n+    Generics {\n+        params,\n+        where_clause: ast::WhereClause { has_where_token: false, predicates: Vec::new(), span },\n+        span,\n+    }\n }\n \n /// Lifetimes and bounds on type parameters"}, {"sha": "04b64d93c70dd2b2a4ff4ff5d79d0cf5da25eeb5", "filename": "src/librustc_parse/parser/generics.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0fcea2e4238dbb7ba3758064051f6330910aae4c/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcea2e4238dbb7ba3758064051f6330910aae4c/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs?ref=0fcea2e4238dbb7ba3758064051f6330910aae4c", "patch": "@@ -157,6 +157,7 @@ impl<'a> Parser<'a> {\n         Ok(ast::Generics {\n             params,\n             where_clause: WhereClause {\n+                has_where_token: false,\n                 predicates: Vec::new(),\n                 span: self.prev_token.span.shrink_to_hi(),\n             },\n@@ -170,12 +171,16 @@ impl<'a> Parser<'a> {\n     /// where T : Trait<U, V> + 'b, 'a : 'b\n     /// ```\n     pub(super) fn parse_where_clause(&mut self) -> PResult<'a, WhereClause> {\n-        let mut where_clause =\n-            WhereClause { predicates: Vec::new(), span: self.prev_token.span.shrink_to_hi() };\n+        let mut where_clause = WhereClause {\n+            has_where_token: false,\n+            predicates: Vec::new(),\n+            span: self.prev_token.span.shrink_to_hi(),\n+        };\n \n         if !self.eat_keyword(kw::Where) {\n             return Ok(where_clause);\n         }\n+        where_clause.has_where_token = true;\n         let lo = self.prev_token.span;\n \n         // We are considering adding generics to the `where` keyword as an alternative higher-rank"}, {"sha": "719555c092a7878c7c3a47c1ff2c7e96afcbcda9", "filename": "src/test/ui/proc-macro/empty-where-clause.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0fcea2e4238dbb7ba3758064051f6330910aae4c/src%2Ftest%2Fui%2Fproc-macro%2Fempty-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcea2e4238dbb7ba3758064051f6330910aae4c/src%2Ftest%2Fui%2Fproc-macro%2Fempty-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fempty-where-clause.rs?ref=0fcea2e4238dbb7ba3758064051f6330910aae4c", "patch": "@@ -0,0 +1,18 @@\n+// aux-build:test-macros.rs\n+\n+extern crate test_macros;\n+use test_macros::recollect_attr;\n+\n+#[recollect_attr]\n+struct FieldStruct where {\n+    field: MissingType1 //~ ERROR cannot find\n+}\n+\n+#[recollect_attr]\n+struct TupleStruct(MissingType2) where; //~ ERROR cannot find\n+\n+enum MyEnum where {\n+    Variant(MissingType3) //~ ERROR cannot find\n+}\n+\n+fn main() {}"}, {"sha": "192a2b30f0dcdfaea7e046906448b81289a019b0", "filename": "src/test/ui/proc-macro/empty-where-clause.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0fcea2e4238dbb7ba3758064051f6330910aae4c/src%2Ftest%2Fui%2Fproc-macro%2Fempty-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fcea2e4238dbb7ba3758064051f6330910aae4c/src%2Ftest%2Fui%2Fproc-macro%2Fempty-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fempty-where-clause.stderr?ref=0fcea2e4238dbb7ba3758064051f6330910aae4c", "patch": "@@ -0,0 +1,21 @@\n+error[E0412]: cannot find type `MissingType1` in this scope\n+  --> $DIR/empty-where-clause.rs:8:12\n+   |\n+LL |     field: MissingType1\n+   |            ^^^^^^^^^^^^ not found in this scope\n+\n+error[E0412]: cannot find type `MissingType2` in this scope\n+  --> $DIR/empty-where-clause.rs:12:20\n+   |\n+LL | struct TupleStruct(MissingType2) where;\n+   |                    ^^^^^^^^^^^^ not found in this scope\n+\n+error[E0412]: cannot find type `MissingType3` in this scope\n+  --> $DIR/empty-where-clause.rs:15:13\n+   |\n+LL |     Variant(MissingType3)\n+   |             ^^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0412`."}]}