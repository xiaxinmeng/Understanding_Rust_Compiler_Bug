{"sha": "ea16814761decb00a5337286664124aa0faa6290", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMTY4MTQ3NjFkZWNiMDBhNTMzNzI4NjY2NDEyNGFhMGZhYTYyOTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-10T23:32:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-10T23:32:09Z"}, "message": "Auto merge of #46248 - zackmdavis:one_time_private_enum_variant_reexport_error, r=estebank\n\none-time diagnostics for private enum variants glob re\u00ebxport\n\n![private_enum_reexport](https://user-images.githubusercontent.com/1076988/33224719-4e5805f0-d121-11e7-8bc0-a708a277a5db.png)\n\nr? @estebank", "tree": {"sha": "ac3dbe6e2360af3ed660213f5043aea66ee73652", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac3dbe6e2360af3ed660213f5043aea66ee73652"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea16814761decb00a5337286664124aa0faa6290", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea16814761decb00a5337286664124aa0faa6290", "html_url": "https://github.com/rust-lang/rust/commit/ea16814761decb00a5337286664124aa0faa6290", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea16814761decb00a5337286664124aa0faa6290/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d4df9584bebbdc72db77f550a6786819a3a791f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d4df9584bebbdc72db77f550a6786819a3a791f", "html_url": "https://github.com/rust-lang/rust/commit/2d4df9584bebbdc72db77f550a6786819a3a791f"}, {"sha": "4fb57e0796cc61bec9d6a8a0392bbfe5855d693e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fb57e0796cc61bec9d6a8a0392bbfe5855d693e", "html_url": "https://github.com/rust-lang/rust/commit/4fb57e0796cc61bec9d6a8a0392bbfe5855d693e"}], "stats": {"total": 172, "additions": 148, "deletions": 24}, "files": [{"sha": "f0761ce61786551380ecc3abea6be57be09521ea", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ea16814761decb00a5337286664124aa0faa6290/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea16814761decb00a5337286664124aa0faa6290/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=ea16814761decb00a5337286664124aa0faa6290", "patch": "@@ -37,7 +37,7 @@ use errors::{DiagnosticBuilder, DiagnosticId};\n use hir::def_id::{CrateNum, LOCAL_CRATE};\n use hir::intravisit::{self, FnKind};\n use hir;\n-use session::Session;\n+use session::{Session, DiagnosticMessageId};\n use std::hash;\n use syntax::ast;\n use syntax::codemap::MultiSpan;\n@@ -423,7 +423,7 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n         LintSource::Default => {\n             sess.diag_note_once(\n                 &mut err,\n-                lint,\n+                DiagnosticMessageId::from(lint),\n                 &format!(\"#[{}({})] on by default\", level.as_str(), name));\n         }\n         LintSource::CommandLine(lint_flag_val) => {\n@@ -437,24 +437,25 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n             if lint_flag_val.as_str() == name {\n                 sess.diag_note_once(\n                     &mut err,\n-                    lint,\n+                    DiagnosticMessageId::from(lint),\n                     &format!(\"requested on the command line with `{} {}`\",\n                              flag, hyphen_case_lint_name));\n             } else {\n                 let hyphen_case_flag_val = lint_flag_val.as_str().replace(\"_\", \"-\");\n                 sess.diag_note_once(\n                     &mut err,\n-                    lint,\n+                    DiagnosticMessageId::from(lint),\n                     &format!(\"`{} {}` implied by `{} {}`\",\n                              flag, hyphen_case_lint_name, flag,\n                              hyphen_case_flag_val));\n             }\n         }\n         LintSource::Node(lint_attr_name, src) => {\n-            sess.diag_span_note_once(&mut err, lint, src, \"lint level defined here\");\n+            sess.diag_span_note_once(&mut err, DiagnosticMessageId::from(lint),\n+                                     src, \"lint level defined here\");\n             if lint_attr_name.as_str() != name {\n                 let level_str = level.as_str();\n-                sess.diag_note_once(&mut err, lint,\n+                sess.diag_note_once(&mut err, DiagnosticMessageId::from(lint),\n                                     &format!(\"#[{}({})] implied by #[{}({})]\",\n                                              level_str, name, level_str, lint_attr_name));\n             }"}, {"sha": "36c1966bdc8348442b270216d1e71ddfe8f46a08", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ea16814761decb00a5337286664124aa0faa6290/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea16814761decb00a5337286664124aa0faa6290/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=ea16814761decb00a5337286664124aa0faa6290", "patch": "@@ -161,6 +161,7 @@ pub struct PerfStats {\n enum DiagnosticBuilderMethod {\n     Note,\n     SpanNote,\n+    SpanSuggestion(String), // suggestion\n     // add more variants as needed to support one-time diagnostics\n }\n \n@@ -173,6 +174,12 @@ pub enum DiagnosticMessageId {\n     StabilityId(u32) // issue number\n }\n \n+impl From<&'static lint::Lint> for DiagnosticMessageId {\n+    fn from(lint: &'static lint::Lint) -> Self {\n+        DiagnosticMessageId::LintId(lint::LintId::of(lint))\n+    }\n+}\n+\n impl Session {\n     pub fn local_crate_disambiguator(&self) -> CrateDisambiguator {\n         match *self.crate_disambiguator.borrow() {\n@@ -358,33 +365,50 @@ impl Session {\n     fn diag_once<'a, 'b>(&'a self,\n                          diag_builder: &'b mut DiagnosticBuilder<'a>,\n                          method: DiagnosticBuilderMethod,\n-                         lint: &'static lint::Lint, message: &str, span: Option<Span>) {\n+                         msg_id: DiagnosticMessageId,\n+                         message: &str,\n+                         span_maybe: Option<Span>) {\n \n-        let lint_id = DiagnosticMessageId::LintId(lint::LintId::of(lint));\n-        let id_span_message = (lint_id, span, message.to_owned());\n+        let id_span_message = (msg_id, span_maybe, message.to_owned());\n         let fresh = self.one_time_diagnostics.borrow_mut().insert(id_span_message);\n         if fresh {\n             match method {\n                 DiagnosticBuilderMethod::Note => {\n                     diag_builder.note(message);\n                 },\n                 DiagnosticBuilderMethod::SpanNote => {\n-                    diag_builder.span_note(span.expect(\"span_note expects a span\"), message);\n+                    let span = span_maybe.expect(\"span_note needs a span\");\n+                    diag_builder.span_note(span, message);\n+                },\n+                DiagnosticBuilderMethod::SpanSuggestion(suggestion) => {\n+                    let span = span_maybe.expect(\"span_suggestion needs a span\");\n+                    diag_builder.span_suggestion(span, message, suggestion);\n                 }\n             }\n         }\n     }\n \n     pub fn diag_span_note_once<'a, 'b>(&'a self,\n                                        diag_builder: &'b mut DiagnosticBuilder<'a>,\n-                                       lint: &'static lint::Lint, span: Span, message: &str) {\n-        self.diag_once(diag_builder, DiagnosticBuilderMethod::SpanNote, lint, message, Some(span));\n+                                       msg_id: DiagnosticMessageId, span: Span, message: &str) {\n+        self.diag_once(diag_builder, DiagnosticBuilderMethod::SpanNote,\n+                       msg_id, message, Some(span));\n     }\n \n     pub fn diag_note_once<'a, 'b>(&'a self,\n                                   diag_builder: &'b mut DiagnosticBuilder<'a>,\n-                                  lint: &'static lint::Lint, message: &str) {\n-        self.diag_once(diag_builder, DiagnosticBuilderMethod::Note, lint, message, None);\n+                                  msg_id: DiagnosticMessageId, message: &str) {\n+        self.diag_once(diag_builder, DiagnosticBuilderMethod::Note, msg_id, message, None);\n+    }\n+\n+    pub fn diag_span_suggestion_once<'a, 'b>(&'a self,\n+                                             diag_builder: &'b mut DiagnosticBuilder<'a>,\n+                                             msg_id: DiagnosticMessageId,\n+                                             span: Span,\n+                                             message: &str,\n+                                             suggestion: String) {\n+        self.diag_once(diag_builder, DiagnosticBuilderMethod::SpanSuggestion(suggestion),\n+                       msg_id, message, Some(span));\n     }\n \n     pub fn codemap<'a>(&'a self) -> &'a codemap::CodeMap {"}, {"sha": "d4a08d643ab6768dbd7a77df2594993777e9b305", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 54, "deletions": 6, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ea16814761decb00a5337286664124aa0faa6290/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea16814761decb00a5337286664124aa0faa6290/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=ea16814761decb00a5337286664124aa0faa6290", "patch": "@@ -21,6 +21,7 @@ use rustc::ty;\n use rustc::lint::builtin::PUB_USE_OF_PRIVATE_EXTERN_CRATE;\n use rustc::hir::def_id::DefId;\n use rustc::hir::def::*;\n+use rustc::session::DiagnosticMessageId;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n \n use syntax::ast::{Ident, Name, SpannedIdent, NodeId};\n@@ -72,7 +73,7 @@ impl<'a> ImportDirective<'a> {\n     }\n }\n \n-#[derive(Clone, Default)]\n+#[derive(Clone, Default, Debug)]\n /// Records information about the resolution of a name in a namespace of a module.\n pub struct NameResolution<'a> {\n     /// The single imports that define the name in the namespace.\n@@ -867,12 +868,59 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             }\n \n             match binding.kind {\n-                NameBindingKind::Import { binding: orig_binding, .. } => {\n+                NameBindingKind::Import { binding: orig_binding, directive, .. } => {\n                     if ns == TypeNS && orig_binding.is_variant() &&\n-                       !orig_binding.vis.is_at_least(binding.vis, &*self) {\n-                        let msg = format!(\"variant `{}` is private, and cannot be reexported, \\\n-                                           consider declaring its enum as `pub`\", ident);\n-                        self.session.span_err(binding.span, &msg);\n+                        !orig_binding.vis.is_at_least(binding.vis, &*self) {\n+                            let msg = match directive.subclass {\n+                                ImportDirectiveSubclass::SingleImport { .. } => {\n+                                    format!(\"variant `{}` is private and cannot be reexported\",\n+                                            ident)\n+                                },\n+                                ImportDirectiveSubclass::GlobImport { .. } => {\n+                                    let msg = \"enum is private and its variants \\\n+                                               cannot be reexported\".to_owned();\n+                                    let error_id = (DiagnosticMessageId::ErrorId(0), // no code?!\n+                                                    Some(binding.span),\n+                                                    msg.clone());\n+                                    let fresh = self.session.one_time_diagnostics\n+                                        .borrow_mut().insert(error_id);\n+                                    if !fresh {\n+                                        continue;\n+                                    }\n+                                    msg\n+                                },\n+                                ref s @ _ => bug!(\"unexpected import subclass {:?}\", s)\n+                            };\n+                            let mut err = self.session.struct_span_err(binding.span, &msg);\n+\n+                            let imported_module = directive.imported_module.get()\n+                                .expect(\"module should exist\");\n+                            let resolutions = imported_module.parent.expect(\"parent should exist\")\n+                                .resolutions.borrow();\n+                            let enum_path_segment_index = directive.module_path.len() - 1;\n+                            let enum_ident = directive.module_path[enum_path_segment_index].node;\n+\n+                            let enum_resolution = resolutions.get(&(enum_ident, TypeNS))\n+                                .expect(\"resolution should exist\");\n+                            let enum_span = enum_resolution.borrow()\n+                                .binding.expect(\"binding should exist\")\n+                                .span;\n+                            let enum_def_span = self.session.codemap().def_span(enum_span);\n+                            let enum_def_snippet = self.session.codemap()\n+                                .span_to_snippet(enum_def_span).expect(\"snippet should exist\");\n+                            // potentially need to strip extant `crate`/`pub(path)` for suggestion\n+                            let after_vis_index = enum_def_snippet.find(\"enum\")\n+                                .expect(\"`enum` keyword should exist in snippet\");\n+                            let suggestion = format!(\"pub {}\",\n+                                                     &enum_def_snippet[after_vis_index..]);\n+\n+                            self.session\n+                                .diag_span_suggestion_once(&mut err,\n+                                                           DiagnosticMessageId::ErrorId(0),\n+                                                           enum_def_span,\n+                                                           \"consider making the enum public\",\n+                                                           suggestion);\n+                            err.emit();\n                     }\n                 }\n                 NameBindingKind::Ambiguity { b1, b2, .. }"}, {"sha": "5b23e5e815053467be7ce0150b11917460e587a0", "filename": "src/test/compile-fail/issue-46209-private-enum-variant-reexport.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/ea16814761decb00a5337286664124aa0faa6290/src%2Ftest%2Fcompile-fail%2Fissue-46209-private-enum-variant-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea16814761decb00a5337286664124aa0faa6290/src%2Ftest%2Fcompile-fail%2Fissue-46209-private-enum-variant-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-46209-private-enum-variant-reexport.rs?ref=ea16814761decb00a5337286664124aa0faa6290", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(crate_visibility_modifier)]\n+\n+mod rank {\n+    pub use self::Professor::*;\n+    //~^ ERROR enum is private and its variants cannot be reexported\n+    pub use self::Lieutenant::{JuniorGrade, Full};\n+    //~^ ERROR variant `JuniorGrade` is private and cannot be reexported\n+    //~| ERROR variant `Full` is private and cannot be reexported\n+    pub use self::PettyOfficer::*;\n+    //~^ ERROR enum is private and its variants cannot be reexported\n+    pub use self::Crewman::*;\n+    //~^ ERROR enum is private and its variants cannot be reexported\n+\n+    enum Professor {\n+        Adjunct,\n+        Assistant,\n+        Associate,\n+        Full\n+    }\n+\n+    enum Lieutenant {\n+        JuniorGrade,\n+        Full,\n+    }\n+\n+    pub(in rank) enum PettyOfficer {\n+        SecondClass,\n+        FirstClass,\n+        Chief,\n+        MasterChief\n+    }\n+\n+    crate enum Crewman {\n+        Recruit,\n+        Apprentice,\n+        Full\n+    }\n+\n+}\n+\n+fn main() {}"}, {"sha": "1280aba3076abbb3654f79619cbeadff461c64a2", "filename": "src/test/compile-fail/private-variant-reexport.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea16814761decb00a5337286664124aa0faa6290/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea16814761decb00a5337286664124aa0faa6290/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs?ref=ea16814761decb00a5337286664124aa0faa6290", "patch": "@@ -9,19 +9,19 @@\n // except according to those terms.\n \n mod m1 {\n-    pub use ::E::V; //~ ERROR variant `V` is private, and cannot be reexported\n+    pub use ::E::V; //~ ERROR variant `V` is private and cannot be reexported\n }\n \n mod m2 {\n-    pub use ::E::{V}; //~ ERROR variant `V` is private, and cannot be reexported\n+    pub use ::E::{V}; //~ ERROR variant `V` is private and cannot be reexported\n }\n \n mod m3 {\n-    pub use ::E::V::{self}; //~ ERROR variant `V` is private, and cannot be reexported\n+    pub use ::E::V::{self}; //~ ERROR variant `V` is private and cannot be reexported\n }\n \n mod m4 {\n-    pub use ::E::*; //~ ERROR variant `V` is private, and cannot be reexported\n+    pub use ::E::*; //~ ERROR enum is private and its variants cannot be reexported\n }\n \n enum E { V }"}]}