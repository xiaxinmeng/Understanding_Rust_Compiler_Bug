{"sha": "0a33de04cfcd961a8cd2a8391dbae00cc7328a49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMzNkZTA0Y2ZjZDk2MWE4Y2QyYTgzOTFkYmFlMDBjYzczMjhhNDk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-09-06T19:45:26Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-09-10T08:48:46Z"}, "message": "rustc_resolve: inject `uniform_paths` canaries regardless of the feature-gate, on Rust 2018.", "tree": {"sha": "456177b0106bfe8b49acfb20c5833041b11a96b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/456177b0106bfe8b49acfb20c5833041b11a96b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a33de04cfcd961a8cd2a8391dbae00cc7328a49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a33de04cfcd961a8cd2a8391dbae00cc7328a49", "html_url": "https://github.com/rust-lang/rust/commit/0a33de04cfcd961a8cd2a8391dbae00cc7328a49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a33de04cfcd961a8cd2a8391dbae00cc7328a49/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb945f0ebba1a6d5d0f9d0b62dedacd6c828fff7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb945f0ebba1a6d5d0f9d0b62dedacd6c828fff7", "html_url": "https://github.com/rust-lang/rust/commit/fb945f0ebba1a6d5d0f9d0b62dedacd6c828fff7"}], "stats": {"total": 244, "additions": 237, "deletions": 7}, "files": [{"sha": "f97997d0dfc5025c94cdb416ece0068039ccdd0d", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a33de04cfcd961a8cd2a8391dbae00cc7328a49/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a33de04cfcd961a8cd2a8391dbae00cc7328a49/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=0a33de04cfcd961a8cd2a8391dbae00cc7328a49", "patch": "@@ -194,7 +194,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         // ergonomically unacceptable.\n         let emit_uniform_paths_canary =\n             !uniform_paths_canary_emitted &&\n-            uniform_paths &&\n+            self.session.rust_2018() &&\n             starts_with_non_keyword;\n         if emit_uniform_paths_canary {\n             let source = prefix_start.unwrap();"}, {"sha": "9332fdb9ca25fa838f9c36817deddc293f90897a", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0a33de04cfcd961a8cd2a8391dbae00cc7328a49/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a33de04cfcd961a8cd2a8391dbae00cc7328a49/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=0a33de04cfcd961a8cd2a8391dbae00cc7328a49", "patch": "@@ -705,6 +705,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n             }\n         }\n \n+        let uniform_paths_feature = self.session.features_untracked().uniform_paths;\n         for ((span, _), (name, results)) in uniform_paths_canaries {\n             self.per_ns(|this, ns| {\n                 let results = &results[ns];\n@@ -736,15 +737,24 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                         suggestion_choices.push_str(\" or \");\n                     }\n                     write!(suggestion_choices, \"`self::{}`\", name);\n-                    err.span_label(span,\n-                        format!(\"can refer to `self::{}`\", name));\n+                    if uniform_paths_feature {\n+                        err.span_label(span,\n+                            format!(\"can refer to `self::{}`\", name));\n+                    } else {\n+                        err.span_label(span,\n+                            format!(\"may refer to `self::{}` in the future\", name));\n+                    }\n                 }\n                 for &span in &results.block_scopes {\n                     err.span_label(span,\n                         format!(\"shadowed by block-scoped `{}`\", name));\n                 }\n                 err.help(&format!(\"write {} explicitly instead\", suggestion_choices));\n-                err.note(\"relative `use` paths enabled by `#![feature(uniform_paths)]`\");\n+                if uniform_paths_feature {\n+                    err.note(\"relative `use` paths enabled by `#![feature(uniform_paths)]`\");\n+                } else {\n+                    err.note(\"in the future, `#![feature(uniform_paths)]` may become the default\");\n+                }\n                 err.emit();\n             });\n         }\n@@ -930,11 +940,15 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n             _ => unreachable!(),\n         };\n \n+        // Do not record uses from canaries, to avoid interfering with other\n+        // diagnostics or suggestions that rely on some items not being used.\n+        let record_used = !directive.is_uniform_paths_canary;\n+\n         let mut all_ns_err = true;\n         self.per_ns(|this, ns| if !type_ns_only || ns == TypeNS {\n             if let Ok(binding) = result[ns].get() {\n                 all_ns_err = false;\n-                if this.record_use(ident, ns, binding) {\n+                if record_used && this.record_use(ident, ns, binding) {\n                     if let ModuleOrUniformRoot::Module(module) = module {\n                         this.resolution(module, ident, ns).borrow_mut().binding =\n                             Some(this.dummy_binding);\n@@ -946,7 +960,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         if all_ns_err {\n             let mut all_ns_failed = true;\n             self.per_ns(|this, ns| if !type_ns_only || ns == TypeNS {\n-                match this.resolve_ident_in_module(module, ident, ns, true, span) {\n+                match this.resolve_ident_in_module(module, ident, ns, record_used, span) {\n                     Ok(_) => all_ns_failed = false,\n                     _ => {}\n                 }"}, {"sha": "590e83b07819a24e4f33994fc1b9f72d0f14c55a", "filename": "src/test/ui/rust-2018/uniform-paths-forward-compat/ambiguity-macros-nested.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0a33de04cfcd961a8cd2a8391dbae00cc7328a49/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-macros-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a33de04cfcd961a8cd2a8391dbae00cc7328a49/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-macros-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-macros-nested.rs?ref=0a33de04cfcd961a8cd2a8391dbae00cc7328a49", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// edition:2018\n+\n+// This test is similar to `ambiguity-macros.rs`, but nested in a module.\n+\n+mod foo {\n+    pub use std::io;\n+    //~^ ERROR `std` import is ambiguous\n+\n+    macro_rules! m {\n+        () => {\n+            mod std {\n+                pub struct io;\n+            }\n+        }\n+    }\n+    m!();\n+}\n+\n+fn main() {}"}, {"sha": "948043cff7614ee3cf0b5187d24e108d444caf0d", "filename": "src/test/ui/rust-2018/uniform-paths-forward-compat/ambiguity-macros-nested.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0a33de04cfcd961a8cd2a8391dbae00cc7328a49/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-macros-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a33de04cfcd961a8cd2a8391dbae00cc7328a49/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-macros-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-macros-nested.stderr?ref=0a33de04cfcd961a8cd2a8391dbae00cc7328a49", "patch": "@@ -0,0 +1,16 @@\n+error: `std` import is ambiguous\n+  --> $DIR/ambiguity-macros-nested.rs:16:13\n+   |\n+LL |       pub use std::io;\n+   |               ^^^ can refer to external crate `::std`\n+...\n+LL | /             mod std {\n+LL | |                 pub struct io;\n+LL | |             }\n+   | |_____________- may refer to `self::std` in the future\n+   |\n+   = help: write `::std` or `self::std` explicitly instead\n+   = note: in the future, `#![feature(uniform_paths)]` may become the default\n+\n+error: aborting due to previous error\n+"}, {"sha": "861efba14f80c9ccf098c011b3e80312e6f7299d", "filename": "src/test/ui/rust-2018/uniform-paths-forward-compat/ambiguity-macros.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0a33de04cfcd961a8cd2a8391dbae00cc7328a49/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a33de04cfcd961a8cd2a8391dbae00cc7328a49/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-macros.rs?ref=0a33de04cfcd961a8cd2a8391dbae00cc7328a49", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// edition:2018\n+\n+// This test is similar to `ambiguity.rs`, but with macros defining local items.\n+\n+use std::io;\n+//~^ ERROR `std` import is ambiguous\n+\n+macro_rules! m {\n+    () => {\n+        mod std {\n+            pub struct io;\n+        }\n+    }\n+}\n+m!();\n+\n+fn main() {}"}, {"sha": "40cceea2440b95330876db764e4f0482b0bcdf12", "filename": "src/test/ui/rust-2018/uniform-paths-forward-compat/ambiguity-macros.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0a33de04cfcd961a8cd2a8391dbae00cc7328a49/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a33de04cfcd961a8cd2a8391dbae00cc7328a49/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-macros.stderr?ref=0a33de04cfcd961a8cd2a8391dbae00cc7328a49", "patch": "@@ -0,0 +1,16 @@\n+error: `std` import is ambiguous\n+  --> $DIR/ambiguity-macros.rs:15:5\n+   |\n+LL |   use std::io;\n+   |       ^^^ can refer to external crate `::std`\n+...\n+LL | /         mod std {\n+LL | |             pub struct io;\n+LL | |         }\n+   | |_________- may refer to `self::std` in the future\n+   |\n+   = help: write `::std` or `self::std` explicitly instead\n+   = note: in the future, `#![feature(uniform_paths)]` may become the default\n+\n+error: aborting due to previous error\n+"}, {"sha": "a69eb101917fa50bd4b711fbd939e00339b782a3", "filename": "src/test/ui/rust-2018/uniform-paths-forward-compat/ambiguity-nested.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0a33de04cfcd961a8cd2a8391dbae00cc7328a49/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a33de04cfcd961a8cd2a8391dbae00cc7328a49/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-nested.rs?ref=0a33de04cfcd961a8cd2a8391dbae00cc7328a49", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// edition:2018\n+\n+// This test is similar to `ambiguity.rs`, but nested in a module.\n+\n+mod foo {\n+    pub use std::io;\n+    //~^ ERROR `std` import is ambiguous\n+\n+    mod std {\n+        pub struct io;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "7538d3d2d917a2a5988c9154328c99521cfcee37", "filename": "src/test/ui/rust-2018/uniform-paths-forward-compat/ambiguity-nested.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0a33de04cfcd961a8cd2a8391dbae00cc7328a49/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a33de04cfcd961a8cd2a8391dbae00cc7328a49/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-nested.stderr?ref=0a33de04cfcd961a8cd2a8391dbae00cc7328a49", "patch": "@@ -0,0 +1,16 @@\n+error: `std` import is ambiguous\n+  --> $DIR/ambiguity-nested.rs:16:13\n+   |\n+LL |       pub use std::io;\n+   |               ^^^ can refer to external crate `::std`\n+...\n+LL | /     mod std {\n+LL | |         pub struct io;\n+LL | |     }\n+   | |_____- may refer to `self::std` in the future\n+   |\n+   = help: write `::std` or `self::std` explicitly instead\n+   = note: in the future, `#![feature(uniform_paths)]` may become the default\n+\n+error: aborting due to previous error\n+"}, {"sha": "500e9f6c63ff87901671b965ddd82d69af5fe6a0", "filename": "src/test/ui/rust-2018/uniform-paths-forward-compat/ambiguity.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0a33de04cfcd961a8cd2a8391dbae00cc7328a49/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a33de04cfcd961a8cd2a8391dbae00cc7328a49/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity.rs?ref=0a33de04cfcd961a8cd2a8391dbae00cc7328a49", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// edition:2018\n+\n+use std::io;\n+//~^ ERROR `std` import is ambiguous\n+\n+mod std {\n+    pub struct io;\n+}\n+\n+fn main() {}"}, {"sha": "7b64b8f02464af6025435535d8de29daa2b6012e", "filename": "src/test/ui/rust-2018/uniform-paths-forward-compat/ambiguity.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0a33de04cfcd961a8cd2a8391dbae00cc7328a49/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a33de04cfcd961a8cd2a8391dbae00cc7328a49/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity.stderr?ref=0a33de04cfcd961a8cd2a8391dbae00cc7328a49", "patch": "@@ -0,0 +1,16 @@\n+error: `std` import is ambiguous\n+  --> $DIR/ambiguity.rs:13:5\n+   |\n+LL |   use std::io;\n+   |       ^^^ can refer to external crate `::std`\n+...\n+LL | / mod std {\n+LL | |     pub struct io;\n+LL | | }\n+   | |_- may refer to `self::std` in the future\n+   |\n+   = help: write `::std` or `self::std` explicitly instead\n+   = note: in the future, `#![feature(uniform_paths)]` may become the default\n+\n+error: aborting due to previous error\n+"}, {"sha": "ca488fec5162de71299105f3e913850c2599e880", "filename": "src/test/ui/rust-2018/uniform-paths-forward-compat/block-scoped-shadow.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0a33de04cfcd961a8cd2a8391dbae00cc7328a49/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fblock-scoped-shadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a33de04cfcd961a8cd2a8391dbae00cc7328a49/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fblock-scoped-shadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fblock-scoped-shadow.rs?ref=0a33de04cfcd961a8cd2a8391dbae00cc7328a49", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// edition:2018\n+\n+struct std;\n+\n+fn main() {\n+    fn std() {}\n+    enum std {}\n+    use std as foo;\n+    //~^ ERROR `std` import is ambiguous\n+    //~| ERROR `std` import is ambiguous\n+}"}, {"sha": "27e0e883691272dab890cab8fc4b1b643a014bca", "filename": "src/test/ui/rust-2018/uniform-paths-forward-compat/block-scoped-shadow.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0a33de04cfcd961a8cd2a8391dbae00cc7328a49/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fblock-scoped-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a33de04cfcd961a8cd2a8391dbae00cc7328a49/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fblock-scoped-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fblock-scoped-shadow.stderr?ref=0a33de04cfcd961a8cd2a8391dbae00cc7328a49", "patch": "@@ -0,0 +1,31 @@\n+error: `std` import is ambiguous\n+  --> $DIR/block-scoped-shadow.rs:18:9\n+   |\n+LL | struct std;\n+   | ----------- may refer to `self::std` in the future\n+...\n+LL |     enum std {}\n+   |     ----------- shadowed by block-scoped `std`\n+LL |     use std as foo;\n+   |         ^^^ can refer to external crate `::std`\n+   |\n+   = help: write `::std` or `self::std` explicitly instead\n+   = note: in the future, `#![feature(uniform_paths)]` may become the default\n+\n+error: `std` import is ambiguous\n+  --> $DIR/block-scoped-shadow.rs:18:9\n+   |\n+LL | struct std;\n+   | ----------- may refer to `self::std` in the future\n+...\n+LL |     fn std() {}\n+   |     ----------- shadowed by block-scoped `std`\n+LL |     enum std {}\n+LL |     use std as foo;\n+   |         ^^^\n+   |\n+   = help: write `self::std` explicitly instead\n+   = note: in the future, `#![feature(uniform_paths)]` may become the default\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "fa922de1e5e1f02b576b7a5aa6ded16935693ec5", "filename": "src/tools/rls", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frls?ref=0a33de04cfcd961a8cd2a8391dbae00cc7328a49", "patch": "@@ -1 +1 @@\n-Subproject commit 5b5cd9d45719414196e254ec17baa598acc8cd25\n+Subproject commit fa922de1e5e1f02b576b7a5aa6ded16935693ec5"}]}