{"sha": "c7f85003a345826b17801d473303d0c545d0e8d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3Zjg1MDAzYTM0NTgyNmIxNzgwMWQ0NzMzMDNkMGM1NDVkMGU4ZDI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-02-12T00:33:31Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-02-16T13:01:10Z"}, "message": "Permit lifetimes to appear in type parameter lists and after `&`.  Lifetimes in\ntype parameter lists are currently ignored, but `&'a T` is equivalent to\n`&a/T`.", "tree": {"sha": "34a6c740c8eebc2d77b7e29a80b9b2737131ae55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34a6c740c8eebc2d77b7e29a80b9b2737131ae55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7f85003a345826b17801d473303d0c545d0e8d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7f85003a345826b17801d473303d0c545d0e8d2", "html_url": "https://github.com/rust-lang/rust/commit/c7f85003a345826b17801d473303d0c545d0e8d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7f85003a345826b17801d473303d0c545d0e8d2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ad8a1f46566ddcd705cc918863cee2946d8b946", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ad8a1f46566ddcd705cc918863cee2946d8b946", "html_url": "https://github.com/rust-lang/rust/commit/9ad8a1f46566ddcd705cc918863cee2946d8b946"}], "stats": {"total": 141, "additions": 120, "deletions": 21}, "files": [{"sha": "5fcc53a407bc9fa668334fffd8b8c5f44df57363", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7f85003a345826b17801d473303d0c545d0e8d2/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f85003a345826b17801d473303d0c545d0e8d2/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c7f85003a345826b17801d473303d0c545d0e8d2", "patch": "@@ -67,6 +67,12 @@ pub impl to_bytes::IterBytes for ident {\n // Functions may or may not have names.\n pub type fn_ident = Option<ident>;\n \n+pub struct Lifetime {\n+    id: node_id,\n+    span: span,\n+    ident: ident\n+}\n+\n #[auto_encode]\n #[auto_decode]\n #[deriving_eq]"}, {"sha": "fce0948e711d9c9de45c06c14953b9c683c7d6d2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 99, "deletions": 11, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/c7f85003a345826b17801d473303d0c545d0e8d2/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f85003a345826b17801d473303d0c545d0e8d2/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c7f85003a345826b17801d473303d0c545d0e8d2", "patch": "@@ -624,8 +624,13 @@ pub impl Parser {\n         sigil: ast::Sigil,\n         ctor: &fn(+v: mt) -> ty_) -> ty_\n     {\n-        // @foo/fn() or @fn() are parsed directly as fn types:\n+        // @'foo fn() or @foo/fn() or @fn() are parsed directly as fn types:\n         match copy self.token {\n+            token::LIFETIME(rname) => {\n+                self.bump();\n+                return self.parse_ty_closure(Some(sigil), Some(rname));\n+            }\n+\n             token::IDENT(rname, _) => {\n                 if self.look_ahead(1u) == token::BINOP(token::SLASH) &&\n                     self.token_is_closure_keyword(self.look_ahead(2u))\n@@ -648,8 +653,13 @@ pub impl Parser {\n     }\n \n     fn parse_borrowed_pointee() -> ty_ {\n-        // look for `&foo/` and interpret `foo` as the region name:\n-        let rname = match copy self.token {\n+        // look for `&'lt` or `&foo/` and interpret `foo` as the region name:\n+        let rname = match self.token {\n+            token::LIFETIME(sid) => {\n+                self.bump();\n+                Some(sid)\n+            }\n+\n             token::IDENT(sid, _) => {\n                 if self.look_ahead(1u) == token::BINOP(token::SLASH) {\n                     self.bump(); self.bump();\n@@ -658,6 +668,7 @@ pub impl Parser {\n                     None\n                 }\n             }\n+\n             _ => { None }\n         };\n \n@@ -890,22 +901,95 @@ pub impl Parser {\n             }\n         };\n \n-        // Parse any type parameters which may appear:\n+        // Parse any lifetime or type parameters which may appear:\n         let tps = {\n-            if self.token == token::LT {\n-                self.parse_seq_lt_gt(Some(token::COMMA),\n-                                     |p| p.parse_ty(false))\n+            if !self.eat(token::LT) {\n+                ~[]\n             } else {\n-                codemap::spanned {node: ~[], span: path.span}\n+                // First consume lifetimes.\n+                let _lifetimes = self.parse_lifetimes();\n+                let result = self.parse_seq_to_gt(\n+                    Some(token::COMMA),\n+                    |p| p.parse_ty(false));\n+                result\n             }\n         };\n \n-        @ast::path { span: mk_sp(lo, tps.span.hi),\n+        let hi = self.span.lo;\n+\n+        @ast::path { span: mk_sp(lo, hi),\n                      rp: rp,\n-                     types: tps.node,\n+                     types: tps,\n                      .. *path }\n     }\n \n+    fn parse_opt_lifetime() -> Option<ast::Lifetime> {\n+        /*!\n+         *\n+         * Parses 0 or 1 lifetime.\n+         */\n+\n+        match self.token {\n+            token::LIFETIME(_) => {\n+                Some(self.parse_lifetime())\n+            }\n+            _ => {\n+                None\n+            }\n+        }\n+    }\n+\n+    fn parse_lifetime() -> ast::Lifetime {\n+        /*!\n+         *\n+         * Parses a single lifetime.\n+         */\n+\n+        match self.token {\n+            token::LIFETIME(i) => {\n+                self.bump();\n+                return ast::Lifetime {\n+                    id: self.get_id(),\n+                    span: self.span,\n+                    ident: i\n+                };\n+            }\n+            _ => {\n+                self.fatal(fmt!(\"Expected a lifetime name\"));\n+            }\n+        }\n+    }\n+\n+    fn parse_lifetimes() -> ~[ast::Lifetime] {\n+        /*!\n+         *\n+         * Parses zero or more comma separated lifetimes.\n+         * Expects each lifetime to be followed by either\n+         * a comma or `>`.  Used when parsing type parameter\n+         * lists, where we expect something like `<'a, 'b, T>`.\n+         */\n+\n+        let mut res = ~[];\n+        loop {\n+            match self.token {\n+                token::LIFETIME(_) => {\n+                    res.push(self.parse_lifetime());\n+                }\n+                _ => {\n+                    return res;\n+                }\n+            }\n+\n+            match self.token {\n+                token::COMMA => { self.bump();}\n+                token::GT => { return res; }\n+                _ => {\n+                    self.fatal(~\"expected `,` or `>` after lifetime name\");\n+                }\n+            }\n+        }\n+    }\n+\n     fn parse_mutability() -> mutability {\n         if self.eat_keyword(~\"mut\") {\n             m_mutbl\n@@ -1424,6 +1508,7 @@ pub impl Parser {\n               }\n               token::AND => {\n                 self.bump();\n+                let _lt = self.parse_opt_lifetime();\n                 let m = self.parse_mutability();\n                 let e = self.parse_prefix_expr();\n                 hi = e.span.hi;\n@@ -2574,7 +2659,10 @@ pub impl Parser {\n \n     fn parse_ty_params() -> ~[ty_param] {\n         if self.eat(token::LT) {\n-            self.parse_seq_to_gt(Some(token::COMMA), |p| p.parse_ty_param())\n+            let _lifetimes = self.parse_lifetimes();\n+            self.parse_seq_to_gt(\n+                Some(token::COMMA),\n+                |p| p.parse_ty_param())\n         } else { ~[] }\n     }\n "}, {"sha": "7f2140d96e16c55b686730916fb781d17c3d41a6", "filename": "src/test/compile-fail/regions-addr-of-arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7f85003a345826b17801d473303d0c545d0e8d2/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f85003a345826b17801d473303d0c545d0e8d2/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-arg.rs?ref=c7f85003a345826b17801d473303d0c545d0e8d2", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n fn foo(a: int) {\n-    let _p: &static/int = &a; //~ ERROR illegal borrow\n+    let _p: &'static int = &a; //~ ERROR illegal borrow\n }\n \n fn bar(a: int) {\n-    let _q: &blk/int = &a;\n+    let _q: &'blk int = &a;\n }\n \n fn main() {"}, {"sha": "cf026785420d7a0c99d2f152a762b9e4a1478039", "filename": "src/test/compile-fail/regions-addr-of-upvar-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7f85003a345826b17801d473303d0c545d0e8d2/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f85003a345826b17801d473303d0c545d0e8d2/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs?ref=c7f85003a345826b17801d473303d0c545d0e8d2", "patch": "@@ -15,7 +15,7 @@ struct dog {\n impl dog {\n     fn chase_cat() {\n         for uint::range(0u, 10u) |_i| {\n-            let p: &static/mut uint = &mut self.food; //~ ERROR illegal borrow\n+            let p: &'static mut uint = &mut self.food; //~ ERROR illegal borrow\n             *p = 3u;\n         }\n     }"}, {"sha": "47ddbf38e3de19b2782a2f981a53ed1b7305cc59", "filename": "src/test/compile-fail/regions-bounds.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7f85003a345826b17801d473303d0c545d0e8d2/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f85003a345826b17801d473303d0c545d0e8d2/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs?ref=c7f85003a345826b17801d473303d0c545d0e8d2", "patch": "@@ -13,8 +13,10 @@\n // checked.\n \n enum an_enum = &int;\n-trait a_trait { fn foo() -> &self/int; }\n-struct a_class { x:&self/int }\n+trait a_trait {\n+    fn foo() -> &'self int;\n+}\n+struct a_class { x:&'self int }\n \n fn a_fn1(e: an_enum/&a) -> an_enum/&b {\n     return e; //~ ERROR mismatched types: expected `an_enum/&b` but found `an_enum/&a`"}, {"sha": "68c61137cbf6e7027cbe44cb62cfdcf15324c95b", "filename": "src/test/compile-fail/regions-in-enums.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c7f85003a345826b17801d473303d0c545d0e8d2/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f85003a345826b17801d473303d0c545d0e8d2/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs?ref=c7f85003a345826b17801d473303d0c545d0e8d2", "patch": "@@ -8,16 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum yes0 {\n-    x3(&uint)\n+enum yes0<'lt> {\n+    // This will eventually be legal (and in fact the only way):\n+    x3(&'lt uint) //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n }\n \n enum yes1 {\n-    x4(&self/uint)\n+    x4(&'self uint)\n }\n \n enum yes2 {\n-    x5(&foo/uint) //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n+    x5(&'foo uint) //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n }\n \n fn main() {}"}, {"sha": "87aefdca537d17cc452f0ad588a9f55303cea14a", "filename": "src/test/run-pass/regions-self-impls.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7f85003a345826b17801d473303d0c545d0e8d2/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f85003a345826b17801d473303d0c545d0e8d2/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs?ref=c7f85003a345826b17801d473303d0c545d0e8d2", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Clam { chowder: &int }\n+struct Clam<'self> {\n+    chowder: &'self int\n+}\n \n trait get_chowder {\n     fn get_chowder() -> &self/int;"}]}