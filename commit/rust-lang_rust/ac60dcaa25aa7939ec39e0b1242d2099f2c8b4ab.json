{"sha": "ac60dcaa25aa7939ec39e0b1242d2099f2c8b4ab", "node_id": "C_kwDOAAsO6NoAKGFjNjBkY2FhMjVhYTc5MzllYzM5ZTBiMTI0MmQyMDk5ZjJjOGI0YWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-13T13:20:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-13T13:20:18Z"}, "message": "Auto merge of #10177 - chansuke:almost_swapped, r=Alexendoo\n\nAlmost swapped\n\nTake over from https://github.com/rust-lang/rust-clippy/pull/8945\n\nFix https://github.com/rust-lang/rust-clippy/issues/8151\n\n---\n\nchangelog: enhancement: [`almost_swapped`]: Now detects almost swaps using `let` statements\n[#10177](https://github.com/rust-lang/rust-clippy/pull/10177)\n<!-- changelog_checked -->", "tree": {"sha": "c6c34a9b40d0b1b9f5b19e4e5ac4fbddf25b1455", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6c34a9b40d0b1b9f5b19e4e5ac4fbddf25b1455"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac60dcaa25aa7939ec39e0b1242d2099f2c8b4ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac60dcaa25aa7939ec39e0b1242d2099f2c8b4ab", "html_url": "https://github.com/rust-lang/rust/commit/ac60dcaa25aa7939ec39e0b1242d2099f2c8b4ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac60dcaa25aa7939ec39e0b1242d2099f2c8b4ab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "298f1397982a4e7cf718931bff399fcc6bffd9e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/298f1397982a4e7cf718931bff399fcc6bffd9e1", "html_url": "https://github.com/rust-lang/rust/commit/298f1397982a4e7cf718931bff399fcc6bffd9e1"}, {"sha": "ebca1b5d008f87bb0d5712144f68dce18b28c261", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebca1b5d008f87bb0d5712144f68dce18b28c261", "html_url": "https://github.com/rust-lang/rust/commit/ebca1b5d008f87bb0d5712144f68dce18b28c261"}], "stats": {"total": 225, "additions": 166, "deletions": 59}, "files": [{"sha": "0f062cecf886c281c7ceecc85fbe1234a855e22f", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 64, "deletions": 43, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/ac60dcaa25aa7939ec39e0b1242d2099f2c8b4ab/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac60dcaa25aa7939ec39e0b1242d2099f2c8b4ab/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=ac60dcaa25aa7939ec39e0b1242d2099f2c8b4ab", "patch": "@@ -10,7 +10,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n-use rustc_span::{sym, Span};\n+use rustc_span::{sym, symbol::Ident, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -174,53 +174,74 @@ fn check_manual_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n \n /// Implementation of the `ALMOST_SWAPPED` lint.\n fn check_suspicious_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n-    for w in block.stmts.windows(2) {\n-        if_chain! {\n-            if let StmtKind::Semi(first) = w[0].kind;\n-            if let StmtKind::Semi(second) = w[1].kind;\n-            if first.span.ctxt() == second.span.ctxt();\n-            if let ExprKind::Assign(lhs0, rhs0, _) = first.kind;\n-            if let ExprKind::Assign(lhs1, rhs1, _) = second.kind;\n-            if eq_expr_value(cx, lhs0, rhs1);\n-            if eq_expr_value(cx, lhs1, rhs0);\n-            then {\n-                let lhs0 = Sugg::hir_opt(cx, lhs0);\n-                let rhs0 = Sugg::hir_opt(cx, rhs0);\n-                let (what, lhs, rhs) = if let (Some(first), Some(second)) = (lhs0, rhs0) {\n-                    (\n-                        format!(\" `{first}` and `{second}`\"),\n-                        first.mut_addr().to_string(),\n-                        second.mut_addr().to_string(),\n-                    )\n-                } else {\n-                    (String::new(), String::new(), String::new())\n-                };\n+    for [first, second] in block.stmts.array_windows() {\n+        if let Some((lhs0, rhs0)) = parse(first)\n+            && let Some((lhs1, rhs1)) = parse(second)\n+            && first.span.eq_ctxt(second.span)\n+            && is_same(cx, lhs0, rhs1)\n+            && is_same(cx, lhs1, rhs0)\n+            && let Some(lhs_sugg) = match &lhs0 {\n+                ExprOrIdent::Expr(expr) => Sugg::hir_opt(cx, expr),\n+                ExprOrIdent::Ident(ident) => Some(Sugg::NonParen(ident.as_str().into())),\n+            }\n+            && let Some(rhs_sugg) = Sugg::hir_opt(cx, rhs0)\n+        {\n+            let span = first.span.to(rhs1.span);\n+            let Some(sugg) = std_or_core(cx) else { return };\n+            span_lint_and_then(\n+                cx,\n+                ALMOST_SWAPPED,\n+                span,\n+                &format!(\"this looks like you are trying to swap `{lhs_sugg}` and `{rhs_sugg}`\"),\n+                |diag| {\n+                    diag.span_suggestion(\n+                        span,\n+                        \"try\",\n+                        format!(\"{sugg}::mem::swap({}, {})\", lhs_sugg.mut_addr(), rhs_sugg.mut_addr()),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                    diag.note(format!(\"or maybe you should use `{sugg}::mem::replace`?\"));\n+                },\n+            );\n+        }\n+    }\n+}\n+\n+fn is_same(cx: &LateContext<'_>, lhs: ExprOrIdent<'_>, rhs: &Expr<'_>) -> bool {\n+    match lhs {\n+        ExprOrIdent::Expr(expr) => eq_expr_value(cx, expr, rhs),\n+        ExprOrIdent::Ident(ident) => {\n+            if let ExprKind::Path(QPath::Resolved(None, path)) = rhs.kind\n+                && let [segment] = &path.segments\n+                && segment.ident == ident\n+            {\n+                true\n+            } else {\n+                false\n+            }\n+        }\n+    }\n+}\n \n-                let span = first.span.to(second.span);\n-                let Some(sugg) = std_or_core(cx) else { return };\n+#[derive(Debug, Clone, Copy)]\n+enum ExprOrIdent<'a> {\n+    Expr(&'a Expr<'a>),\n+    Ident(Ident),\n+}\n \n-                span_lint_and_then(cx,\n-                    ALMOST_SWAPPED,\n-                    span,\n-                    &format!(\"this looks like you are trying to swap{what}\"),\n-                    |diag| {\n-                        if !what.is_empty() {\n-                            diag.span_suggestion(\n-                                span,\n-                                \"try\",\n-                                format!(\n-                                    \"{sugg}::mem::swap({lhs}, {rhs})\",\n-                                ),\n-                                Applicability::MaybeIncorrect,\n-                            );\n-                            diag.note(\n-                                format!(\"or maybe you should use `{sugg}::mem::replace`?\")\n-                            );\n-                        }\n-                    });\n+fn parse<'a, 'hir>(stmt: &'a Stmt<'hir>) -> Option<(ExprOrIdent<'hir>, &'a Expr<'hir>)> {\n+    if let StmtKind::Semi(expr) = stmt.kind {\n+        if let ExprKind::Assign(lhs, rhs, _) = expr.kind {\n+            return Some((ExprOrIdent::Expr(lhs), rhs));\n+        }\n+    } else if let StmtKind::Local(expr) = stmt.kind {\n+        if let Some(rhs) = expr.init {\n+            if let PatKind::Binding(_, _, ident_l, _) = expr.pat.kind {\n+                return Some((ExprOrIdent::Ident(ident_l), rhs));\n             }\n         }\n     }\n+    None\n }\n \n /// Implementation of the xor case for `MANUAL_SWAP` lint."}, {"sha": "fa89706a815afc8bd4ce30e8315ec90c1f533b6c", "filename": "tests/ui/swap.fixed", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ac60dcaa25aa7939ec39e0b1242d2099f2c8b4ab/tests%2Fui%2Fswap.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ac60dcaa25aa7939ec39e0b1242d2099f2c8b4ab/tests%2Fui%2Fswap.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.fixed?ref=ac60dcaa25aa7939ec39e0b1242d2099f2c8b4ab", "patch": "@@ -7,7 +7,8 @@\n     clippy::redundant_clone,\n     redundant_semicolons,\n     dead_code,\n-    unused_assignments\n+    unused_assignments,\n+    unused_variables\n )]\n \n struct Foo(u32);\n@@ -121,6 +122,27 @@ fn main() {\n     std::mem::swap(&mut c.0, &mut a);\n \n     ; std::mem::swap(&mut c.0, &mut a);\n+\n+    std::mem::swap(&mut a, &mut b);\n+\n+    let mut c = 1;\n+    let mut d = 2;\n+    std::mem::swap(&mut d, &mut c);\n+\n+    let mut b = 1;\n+    std::mem::swap(&mut a, &mut b);\n+\n+    let b = 1;\n+    let a = 2;\n+\n+    let t = b;\n+    let b = a;\n+    let a = t;\n+\n+    let mut b = 1;\n+    let mut a = 2;\n+\n+    std::mem::swap(&mut b, &mut a);\n }\n \n fn issue_8154() {"}, {"sha": "ef8a81c8341b17a6e78f7169ba99887e7332a753", "filename": "tests/ui/swap.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ac60dcaa25aa7939ec39e0b1242d2099f2c8b4ab/tests%2Fui%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac60dcaa25aa7939ec39e0b1242d2099f2c8b4ab/tests%2Fui%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.rs?ref=ac60dcaa25aa7939ec39e0b1242d2099f2c8b4ab", "patch": "@@ -7,7 +7,8 @@\n     clippy::redundant_clone,\n     redundant_semicolons,\n     dead_code,\n-    unused_assignments\n+    unused_assignments,\n+    unused_variables\n )]\n \n struct Foo(u32);\n@@ -143,6 +144,32 @@ fn main() {\n     ; let t = c.0;\n     c.0 = a;\n     a = t;\n+\n+    let a = b;\n+    let b = a;\n+\n+    let mut c = 1;\n+    let mut d = 2;\n+    d = c;\n+    c = d;\n+\n+    let mut b = 1;\n+    let a = b;\n+    b = a;\n+\n+    let b = 1;\n+    let a = 2;\n+\n+    let t = b;\n+    let b = a;\n+    let a = t;\n+\n+    let mut b = 1;\n+    let mut a = 2;\n+\n+    let t = b;\n+    b = a;\n+    a = t;\n }\n \n fn issue_8154() {"}, {"sha": "f0acbfe253f43aefe2b0617680157477893106bf", "filename": "tests/ui/swap.stderr", "status": "modified", "additions": 51, "deletions": 14, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/ac60dcaa25aa7939ec39e0b1242d2099f2c8b4ab/tests%2Fui%2Fswap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac60dcaa25aa7939ec39e0b1242d2099f2c8b4ab/tests%2Fui%2Fswap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.stderr?ref=ac60dcaa25aa7939ec39e0b1242d2099f2c8b4ab", "patch": "@@ -1,5 +1,5 @@\n error: this looks like you are swapping `bar.a` and `bar.b` manually\n-  --> $DIR/swap.rs:24:5\n+  --> $DIR/swap.rs:25:5\n    |\n LL | /     let temp = bar.a;\n LL | |     bar.a = bar.b;\n@@ -10,55 +10,55 @@ LL | |     bar.b = temp;\n    = note: `-D clippy::manual-swap` implied by `-D warnings`\n \n error: this looks like you are swapping elements of `foo` manually\n-  --> $DIR/swap.rs:36:5\n+  --> $DIR/swap.rs:37:5\n    |\n LL | /     let temp = foo[0];\n LL | |     foo[0] = foo[1];\n LL | |     foo[1] = temp;\n    | |_________________^ help: try: `foo.swap(0, 1)`\n \n error: this looks like you are swapping elements of `foo` manually\n-  --> $DIR/swap.rs:45:5\n+  --> $DIR/swap.rs:46:5\n    |\n LL | /     let temp = foo[0];\n LL | |     foo[0] = foo[1];\n LL | |     foo[1] = temp;\n    | |_________________^ help: try: `foo.swap(0, 1)`\n \n error: this looks like you are swapping elements of `foo` manually\n-  --> $DIR/swap.rs:64:5\n+  --> $DIR/swap.rs:65:5\n    |\n LL | /     let temp = foo[0];\n LL | |     foo[0] = foo[1];\n LL | |     foo[1] = temp;\n    | |_________________^ help: try: `foo.swap(0, 1)`\n \n error: this looks like you are swapping `a` and `b` manually\n-  --> $DIR/swap.rs:75:5\n+  --> $DIR/swap.rs:76:5\n    |\n LL | /     a ^= b;\n LL | |     b ^= a;\n LL | |     a ^= b;\n    | |___________^ help: try: `std::mem::swap(&mut a, &mut b)`\n \n error: this looks like you are swapping `bar.a` and `bar.b` manually\n-  --> $DIR/swap.rs:83:5\n+  --> $DIR/swap.rs:84:5\n    |\n LL | /     bar.a ^= bar.b;\n LL | |     bar.b ^= bar.a;\n LL | |     bar.a ^= bar.b;\n    | |___________________^ help: try: `std::mem::swap(&mut bar.a, &mut bar.b)`\n \n error: this looks like you are swapping elements of `foo` manually\n-  --> $DIR/swap.rs:91:5\n+  --> $DIR/swap.rs:92:5\n    |\n LL | /     foo[0] ^= foo[1];\n LL | |     foo[1] ^= foo[0];\n LL | |     foo[0] ^= foo[1];\n    | |_____________________^ help: try: `foo.swap(0, 1)`\n \n error: this looks like you are swapping `foo[0][1]` and `bar[1][0]` manually\n-  --> $DIR/swap.rs:120:5\n+  --> $DIR/swap.rs:121:5\n    |\n LL | /     let temp = foo[0][1];\n LL | |     foo[0][1] = bar[1][0];\n@@ -68,7 +68,7 @@ LL | |     bar[1][0] = temp;\n    = note: or maybe you should use `std::mem::replace`?\n \n error: this looks like you are swapping `a` and `b` manually\n-  --> $DIR/swap.rs:134:7\n+  --> $DIR/swap.rs:135:7\n    |\n LL |       ; let t = a;\n    |  _______^\n@@ -79,7 +79,7 @@ LL | |     b = t;\n    = note: or maybe you should use `std::mem::replace`?\n \n error: this looks like you are swapping `c.0` and `a` manually\n-  --> $DIR/swap.rs:143:7\n+  --> $DIR/swap.rs:144:7\n    |\n LL |       ; let t = c.0;\n    |  _______^\n@@ -89,8 +89,18 @@ LL | |     a = t;\n    |\n    = note: or maybe you should use `std::mem::replace`?\n \n+error: this looks like you are swapping `b` and `a` manually\n+  --> $DIR/swap.rs:170:5\n+   |\n+LL | /     let t = b;\n+LL | |     b = a;\n+LL | |     a = t;\n+   | |_________^ help: try: `std::mem::swap(&mut b, &mut a)`\n+   |\n+   = note: or maybe you should use `std::mem::replace`?\n+\n error: this looks like you are trying to swap `a` and `b`\n-  --> $DIR/swap.rs:131:5\n+  --> $DIR/swap.rs:132:5\n    |\n LL | /     a = b;\n LL | |     b = a;\n@@ -100,16 +110,43 @@ LL | |     b = a;\n    = note: `-D clippy::almost-swapped` implied by `-D warnings`\n \n error: this looks like you are trying to swap `c.0` and `a`\n-  --> $DIR/swap.rs:140:5\n+  --> $DIR/swap.rs:141:5\n    |\n LL | /     c.0 = a;\n LL | |     a = c.0;\n    | |___________^ help: try: `std::mem::swap(&mut c.0, &mut a)`\n    |\n    = note: or maybe you should use `std::mem::replace`?\n \n+error: this looks like you are trying to swap `a` and `b`\n+  --> $DIR/swap.rs:148:5\n+   |\n+LL | /     let a = b;\n+LL | |     let b = a;\n+   | |_____________^ help: try: `std::mem::swap(&mut a, &mut b)`\n+   |\n+   = note: or maybe you should use `std::mem::replace`?\n+\n+error: this looks like you are trying to swap `d` and `c`\n+  --> $DIR/swap.rs:153:5\n+   |\n+LL | /     d = c;\n+LL | |     c = d;\n+   | |_________^ help: try: `std::mem::swap(&mut d, &mut c)`\n+   |\n+   = note: or maybe you should use `std::mem::replace`?\n+\n+error: this looks like you are trying to swap `a` and `b`\n+  --> $DIR/swap.rs:157:5\n+   |\n+LL | /     let a = b;\n+LL | |     b = a;\n+   | |_________^ help: try: `std::mem::swap(&mut a, &mut b)`\n+   |\n+   = note: or maybe you should use `std::mem::replace`?\n+\n error: this looks like you are swapping `s.0.x` and `s.0.y` manually\n-  --> $DIR/swap.rs:178:5\n+  --> $DIR/swap.rs:205:5\n    |\n LL | /     let t = s.0.x;\n LL | |     s.0.x = s.0.y;\n@@ -118,5 +155,5 @@ LL | |     s.0.y = t;\n    |\n    = note: or maybe you should use `std::mem::replace`?\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 17 previous errors\n "}]}