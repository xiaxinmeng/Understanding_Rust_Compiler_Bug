{"sha": "083578ddec6fa07a757959efe64b02de38e73ce6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MzU3OGRkZWM2ZmEwN2E3NTc5NTllZmU2NGIwMmRlMzhlNzNjZTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-24T15:12:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-24T15:12:24Z"}, "message": "auto merge of #17813 : P1start/rust/lint-field-shorthand, r=huonw\n\nCloses #17792.", "tree": {"sha": "96d1083c76a16fd603b6ed481eb1810bcf75af11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96d1083c76a16fd603b6ed481eb1810bcf75af11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/083578ddec6fa07a757959efe64b02de38e73ce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/083578ddec6fa07a757959efe64b02de38e73ce6", "html_url": "https://github.com/rust-lang/rust/commit/083578ddec6fa07a757959efe64b02de38e73ce6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/083578ddec6fa07a757959efe64b02de38e73ce6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00cc6d24099eb93ecfeb9bf807ab9e5130a01749", "url": "https://api.github.com/repos/rust-lang/rust/commits/00cc6d24099eb93ecfeb9bf807ab9e5130a01749", "html_url": "https://github.com/rust-lang/rust/commit/00cc6d24099eb93ecfeb9bf807ab9e5130a01749"}, {"sha": "ead6c4b9d44f43945db6e91c92f14cef31240c64", "url": "https://api.github.com/repos/rust-lang/rust/commits/ead6c4b9d44f43945db6e91c92f14cef31240c64", "html_url": "https://github.com/rust-lang/rust/commit/ead6c4b9d44f43945db6e91c92f14cef31240c64"}], "stats": {"total": 469, "additions": 266, "deletions": 203}, "files": [{"sha": "6ef76219fa97ff964ed672f4233e4cd6f5b3b5c4", "filename": "src/doc/guide.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -3877,6 +3877,7 @@ match x {\n If you have a struct, you can destructure it inside of a pattern:\n \n ```{rust}\n+# #![allow(non_shorthand_field_patterns)]\n struct Point {\n     x: int,\n     y: int,\n@@ -3892,6 +3893,7 @@ match origin {\n If we only care about some of the values, we don't have to give them all names:\n \n ```{rust}\n+# #![allow(non_shorthand_field_patterns)]\n struct Point {\n     x: int,\n     y: int,\n@@ -3977,6 +3979,7 @@ You can also define methods that do not take a `self` parameter. Here's a\n pattern that's very common in Rust code:\n \n ```{rust}\n+# #![allow(non_shorthand_field_patterns)]\n struct Circle {\n     x: f64,\n     y: f64,"}, {"sha": "ee01cd343c3ae52e3b66524a46b272c3a7e98427", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -434,7 +434,7 @@ impl<K: Ord, V> TreeMap<K, V> {\n     /// assert_eq!(vec, vec![(\"a\", 1), (\"b\", 2), (\"c\", 3)]);\n     /// ```\n     pub fn into_iter(self) -> MoveEntries<K, V> {\n-        let TreeMap { root: root, length: length } = self;\n+        let TreeMap { root, length } = self;\n         let stk = match root {\n             None => vec!(),\n             Some(box tn) => vec!(tn)\n@@ -898,11 +898,11 @@ impl<K, V> Iterator<(K, V)> for MoveEntries<K,V> {\n     fn next(&mut self) -> Option<(K, V)> {\n         while !self.stack.is_empty() {\n             let TreeNode {\n-                key: key,\n-                value: value,\n-                left: left,\n-                right: right,\n-                level: level\n+                key,\n+                value,\n+                left,\n+                right,\n+                level,\n             } = self.stack.pop().unwrap();\n \n             match left {"}, {"sha": "a73f7ddf7f7edf1a26634b508a8c9a244f2a96a6", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -235,10 +235,10 @@ impl OptGroup {\n     /// (Both short and long names correspond to different Opts).\n     pub fn long_to_short(&self) -> Opt {\n         let OptGroup {\n-            short_name: short_name,\n-            long_name: long_name,\n-            hasarg: hasarg,\n-            occur: occur,\n+            short_name,\n+            long_name,\n+            hasarg,\n+            occur,\n             ..\n         } = (*self).clone();\n \n@@ -671,11 +671,11 @@ pub fn usage(brief: &str, opts: &[OptGroup]) -> String {\n     let desc_sep = format!(\"\\n{}\", \" \".repeat(24));\n \n     let mut rows = opts.iter().map(|optref| {\n-        let OptGroup{short_name: short_name,\n-                     long_name: long_name,\n-                     hint: hint,\n-                     desc: desc,\n-                     hasarg: hasarg,\n+        let OptGroup{short_name,\n+                     long_name,\n+                     hint,\n+                     desc,\n+                     hasarg,\n                      ..} = (*optref).clone();\n \n         let mut row = \" \".repeat(4);"}, {"sha": "c465aad3e3b5be7f59cd350efbe62f26a672b25c", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -636,7 +636,7 @@ impl Scheduler {\n                 mem::transmute(&**next_task.sched.as_mut().unwrap());\n \n             let current_task: &mut GreenTask = match sched.cleanup_job {\n-                Some(CleanupJob { task: ref mut task, .. }) => &mut **task,\n+                Some(CleanupJob { ref mut task, .. }) => &mut **task,\n                 None => rtabort!(\"no cleanup job\")\n             };\n \n@@ -953,7 +953,7 @@ impl CleanupJob {\n     }\n \n     pub fn run(self, sched: &mut Scheduler) {\n-        let CleanupJob { task: task, f: f } = self;\n+        let CleanupJob { task, f } = self;\n         f.to_fn()(sched, task)\n     }\n }"}, {"sha": "8c44adc55d288cd8f5c87e0a699c48885ea52c3a", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -1143,6 +1143,40 @@ impl LintPass for UnusedImportBraces {\n     }\n }\n \n+declare_lint!(NON_SHORTHAND_FIELD_PATTERNS, Warn,\n+              \"using `Struct { x: x }` instead of `Struct { x }`\")\n+\n+pub struct NonShorthandFieldPatterns;\n+\n+impl LintPass for NonShorthandFieldPatterns {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(NON_SHORTHAND_FIELD_PATTERNS)\n+    }\n+\n+    fn check_pat(&mut self, cx: &Context, pat: &ast::Pat) {\n+        let def_map = cx.tcx.def_map.borrow();\n+        match pat.node {\n+            ast::PatStruct(_, ref v, _) => {\n+                for fieldpat in v.iter()\n+                                 .filter(|fieldpat| !fieldpat.node.is_shorthand)\n+                                 .filter(|fieldpat| def_map.find(&fieldpat.node.pat.id)\n+                                    == Some(&def::DefLocal(fieldpat.node.pat.id))) {\n+                    match fieldpat.node.pat.node {\n+                        ast::PatIdent(_, ident, None) if ident.node.as_str()\n+                                                         == fieldpat.node.ident.as_str() => {\n+                            cx.span_lint(NON_SHORTHAND_FIELD_PATTERNS, fieldpat.span,\n+                                         format!(\"the `{}:` in this pattern is redundant and can \\\n+                                                  be removed\", ident.node.as_str()).as_slice())\n+                        },\n+                        _ => {},\n+                    }\n+                }\n+            },\n+            _ => {}\n+        }\n+    }\n+}\n+\n declare_lint!(pub UNUSED_UNSAFE, Warn,\n               \"unnecessary use of an `unsafe` block\")\n \n@@ -1523,12 +1557,12 @@ impl LintPass for Stability {\n                                 def_id\n                             }\n                             typeck::MethodTypeParam(typeck::MethodParam {\n-                                trait_ref: ref trait_ref,\n+                                ref trait_ref,\n                                 method_num: index,\n                                 ..\n                             }) |\n                             typeck::MethodTraitObject(typeck::MethodObject {\n-                                trait_ref: ref trait_ref,\n+                                ref trait_ref,\n                                 method_num: index,\n                                 ..\n                             }) => {"}, {"sha": "4cdca9e536595e62138612239dda93b0384d88f7", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -202,6 +202,7 @@ impl LintStore {\n                      NonUpperCaseGlobals,\n                      UnusedParens,\n                      UnusedImportBraces,\n+                     NonShorthandFieldPatterns,\n                      UnusedUnsafe,\n                      UnsafeBlocks,\n                      UnusedMut,"}, {"sha": "aa88de756552385cf1b3dcd0a3f237ca00ee3365", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -1093,9 +1093,9 @@ impl<'a> rbml_writer_helpers for Encoder<'a> {\n                         this.emit_enum_variant_arg(1, |this| idx.encode(this))\n                     })\n                 }\n-                ty::UnsizeVtable(ty::TyTrait { def_id: def_id,\n+                ty::UnsizeVtable(ty::TyTrait { def_id,\n                                                bounds: ref b,\n-                                               substs: ref substs },\n+                                               ref substs },\n                                  self_ty) => {\n                     this.emit_enum_variant(\"UnsizeVtable\", 2, 4, |this| {\n                         this.emit_enum_variant_arg("}, {"sha": "f63dafe861e10197ae5932783809e0bb744e29a8", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -132,7 +132,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n \n             ast::PatStruct(_, ref subpats, _) => {\n                 let pats_exit =\n-                    self.pats_all(subpats.iter().map(|f| &f.pat), pred);\n+                    self.pats_all(subpats.iter().map(|f| &f.node.pat), pred);\n                 self.add_node(pat.id, [pats_exit])\n             }\n "}, {"sha": "315266dbc84060484da3386c122d58a96b3fb33e", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -413,12 +413,16 @@ fn construct_witness(cx: &MatchCheckCtxt, ctor: &Constructor,\n             };\n             if is_structure {\n                 let fields = ty::lookup_struct_fields(cx.tcx, vid);\n-                let field_pats: Vec<FieldPat> = fields.into_iter()\n+                let field_pats: Vec<Spanned<FieldPat>> = fields.into_iter()\n                     .zip(pats)\n                     .filter(|&(_, ref pat)| pat.node != PatWild(PatWildSingle))\n-                    .map(|(field, pat)| FieldPat {\n-                        ident: Ident::new(field.name),\n-                        pat: pat\n+                    .map(|(field, pat)| Spanned {\n+                        span: DUMMY_SP,\n+                        node: FieldPat {\n+                            ident: Ident::new(field.name),\n+                            pat: pat,\n+                            is_shorthand: true,\n+                        }\n                     }).collect();\n                 let has_more_fields = field_pats.len() < pats_len;\n                 PatStruct(def_to_path(cx.tcx, vid), field_pats, has_more_fields)\n@@ -427,7 +431,7 @@ fn construct_witness(cx: &MatchCheckCtxt, ctor: &Constructor,\n             }\n         }\n \n-        ty::ty_rptr(_, ty::mt { ty: ty, .. }) => {\n+        ty::ty_rptr(_, ty::mt { ty, .. }) => {\n             match ty::get(ty).sty {\n                ty::ty_vec(_, Some(n)) => match ctor {\n                     &Single => {\n@@ -495,7 +499,7 @@ fn all_constructors(cx: &MatchCheckCtxt, left_ty: ty::t,\n         ty::ty_nil =>\n             vec!(ConstantValue(const_nil)),\n \n-        ty::ty_rptr(_, ty::mt { ty: ty, .. }) => match ty::get(ty).sty {\n+        ty::ty_rptr(_, ty::mt { ty, .. }) => match ty::get(ty).sty {\n             ty::ty_vec(_, None) =>\n                 range_inclusive(0, max_slice_length).map(|length| Slice(length)).collect(),\n             _ => vec!(Single)\n@@ -692,7 +696,7 @@ pub fn constructor_arity(cx: &MatchCheckCtxt, ctor: &Constructor, ty: ty::t) ->\n     match ty::get(ty).sty {\n         ty::ty_tup(ref fs) => fs.len(),\n         ty::ty_uniq(_) => 1u,\n-        ty::ty_rptr(_, ty::mt { ty: ty, .. }) => match ty::get(ty).sty {\n+        ty::ty_rptr(_, ty::mt { ty, .. }) => match ty::get(ty).sty {\n             ty::ty_vec(_, None) => match *ctor {\n                 Slice(length) => length,\n                 ConstantValue(_) => 0u,\n@@ -740,7 +744,7 @@ fn range_covered_by_constructor(ctor: &Constructor,\n pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat],\n                       constructor: &Constructor, col: uint, arity: uint) -> Option<Vec<&'a Pat>> {\n     let &Pat {\n-        id: pat_id, node: ref node, span: pat_span\n+        id: pat_id, ref node, span: pat_span\n     } = raw_pat(r[col]);\n     let head: Option<Vec<&Pat>> = match node {\n \n@@ -806,8 +810,8 @@ pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat],\n             class_id.map(|variant_id| {\n                 let struct_fields = ty::lookup_struct_fields(cx.tcx, variant_id);\n                 let args = struct_fields.iter().map(|sf| {\n-                    match pattern_fields.iter().find(|f| f.ident.name == sf.name) {\n-                        Some(ref f) => &*f.pat,\n+                    match pattern_fields.iter().find(|f| f.node.ident.name == sf.name) {\n+                        Some(ref f) => &*f.node.pat,\n                         _ => DUMMY_WILD_PAT\n                     }\n                 }).collect();"}, {"sha": "9e2f78edb77f0dca7c3d16d50ab8518432d276f4", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -25,7 +25,7 @@ use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n use syntax::visit::Visitor;\n use syntax::visit;\n-use syntax::{ast, ast_map, ast_util};\n+use syntax::{ast, ast_map, ast_util, codemap};\n \n use std::rc::Rc;\n use std::collections::hashmap::Vacant;\n@@ -115,7 +115,7 @@ fn lookup_variant_by_id<'a>(tcx: &'a ty::ctxt,\n         match tcx.map.find(enum_def.node) {\n             None => None,\n             Some(ast_map::NodeItem(it)) => match it.node {\n-                ItemEnum(ast::EnumDef { variants: ref variants }, _) => {\n+                ItemEnum(ast::EnumDef { ref variants }, _) => {\n                     variant_expr(variants.as_slice(), variant_def.node)\n                 }\n                 _ => None\n@@ -133,7 +133,7 @@ fn lookup_variant_by_id<'a>(tcx: &'a ty::ctxt,\n         let expr_id = match csearch::maybe_get_item_ast(tcx, enum_def,\n             |a, b, c, d| astencode::decode_inlined_item(a, b, c, d)) {\n             csearch::found(&ast::IIItem(ref item)) => match item.node {\n-                ItemEnum(ast::EnumDef { variants: ref variants }, _) => {\n+                ItemEnum(ast::EnumDef { ref variants }, _) => {\n                     // NOTE this doesn't do the right thing, it compares inlined\n                     // NodeId's to the original variant_def's NodeId, but they\n                     // come from different crates, so they will likely never match.\n@@ -336,9 +336,13 @@ pub fn const_expr_to_pat(tcx: &ty::ctxt, expr: &Expr) -> P<Pat> {\n         }\n \n         ExprStruct(ref path, ref fields, None) => {\n-            let field_pats = fields.iter().map(|field| FieldPat {\n-                ident: field.ident.node,\n-                pat: const_expr_to_pat(tcx, &*field.expr)\n+            let field_pats = fields.iter().map(|field| codemap::Spanned {\n+                span: codemap::DUMMY_SP,\n+                node: FieldPat {\n+                    ident: field.ident.node,\n+                    pat: const_expr_to_pat(tcx, &*field.expr),\n+                    is_shorthand: true,\n+                },\n             }).collect();\n             PatStruct(path.clone(), field_pats, false)\n         }"}, {"sha": "80cef763d24e77b487cb82390ff2666fdb91896c", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -102,12 +102,12 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n                     }\n                     typeck::MethodStaticUnboxedClosure(_) => {}\n                     typeck::MethodTypeParam(typeck::MethodParam {\n-                        trait_ref: ref trait_ref,\n+                        ref trait_ref,\n                         method_num: index,\n                         ..\n                     }) |\n                     typeck::MethodTraitObject(typeck::MethodObject {\n-                        trait_ref: ref trait_ref,\n+                        ref trait_ref,\n                         method_num: index,\n                         ..\n                     }) => {\n@@ -156,7 +156,8 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn handle_field_pattern_match(&mut self, lhs: &ast::Pat, pats: &[ast::FieldPat]) {\n+    fn handle_field_pattern_match(&mut self, lhs: &ast::Pat,\n+                                  pats: &[codemap::Spanned<ast::FieldPat>]) {\n         let id = match (*self.tcx.def_map.borrow())[lhs.id] {\n             def::DefVariant(_, id, _) => id,\n             _ => {\n@@ -174,7 +175,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n         let fields = ty::lookup_struct_fields(self.tcx, id);\n         for pat in pats.iter() {\n             let field_id = fields.iter()\n-                .find(|field| field.name == pat.ident.name).unwrap().id;\n+                .find(|field| field.name == pat.node.ident.name).unwrap().id;\n             self.live_symbols.insert(field_id.node);\n         }\n     }"}, {"sha": "ee9dc05c0e7612a5efb68e314344234ac2da567b", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -179,8 +179,8 @@ impl OverloadedCallType {\n             MethodStaticUnboxedClosure(def_id) => {\n                 OverloadedCallType::from_unboxed_closure(tcx, def_id)\n             }\n-            MethodTypeParam(MethodParam { trait_ref: ref trait_ref, .. }) |\n-            MethodTraitObject(MethodObject { trait_ref: ref trait_ref, .. }) => {\n+            MethodTypeParam(MethodParam { ref trait_ref, .. }) |\n+            MethodTraitObject(MethodObject { ref trait_ref, .. }) => {\n                 OverloadedCallType::from_trait_id(tcx, trait_ref.def_id)\n             }\n         }"}, {"sha": "ebca401ecf4ebcd4b418f545796d45866d262019", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -433,7 +433,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n \n                     ty::AdjustDerefRef(\n                         ty::AutoDerefRef {\n-                            autoref: None, autoderefs: autoderefs}) => {\n+                            autoref: None, autoderefs}) => {\n                         // Equivalent to *expr or something similar.\n                         self.cat_expr_autoderefd(expr, autoderefs)\n                     }\n@@ -1222,9 +1222,9 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n           ast::PatStruct(_, ref field_pats, _) => {\n             // {f1: p1, ..., fN: pN}\n             for fp in field_pats.iter() {\n-                let field_ty = if_ok!(self.pat_ty(&*fp.pat)); // see (*2)\n-                let cmt_field = self.cat_field(pat, cmt.clone(), fp.ident.name, field_ty);\n-                if_ok!(self.cat_pattern(cmt_field, &*fp.pat, |x,y,z| op(x,y,z)));\n+                let field_ty = if_ok!(self.pat_ty(&*fp.node.pat)); // see (*2)\n+                let cmt_field = self.cat_field(pat, cmt.clone(), fp.node.ident.name, field_ty);\n+                if_ok!(self.cat_pattern(cmt_field, &*fp.node.pat, |x,y,z| op(x,y,z)));\n             }\n           }\n \n@@ -1524,7 +1524,7 @@ impl Repr for InteriorKind {\n \n fn element_kind(t: ty::t) -> ElementKind {\n     match ty::get(t).sty {\n-        ty::ty_rptr(_, ty::mt{ty:ty, ..}) |\n+        ty::ty_rptr(_, ty::mt{ty, ..}) |\n         ty::ty_uniq(ty) => match ty::get(ty).sty {\n             ty::ty_vec(_, None) => VecElement,\n             _ => OtherElement"}, {"sha": "7f429bef129c6be6e4d82351f851061f4d614c80", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -739,9 +739,9 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n                 resolve::LastMod(resolve::DependsOn(def)) => {\n                     self.report_error(ck_public(def));\n                 },\n-                resolve::LastImport{value_priv: value_priv,\n+                resolve::LastImport{value_priv,\n                                     value_used: check_value,\n-                                    type_priv: type_priv,\n+                                    type_priv,\n                                     type_used: check_type} => {\n                     // This dance with found_error is because we don't want to report\n                     // a privacy error twice for the same directive.\n@@ -828,8 +828,8 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n             MethodStaticUnboxedClosure(_) => {}\n             // Trait methods are always all public. The only controlling factor\n             // is whether the trait itself is accessible or not.\n-            MethodTypeParam(MethodParam { trait_ref: ref trait_ref, .. }) |\n-            MethodTraitObject(MethodObject { trait_ref: ref trait_ref, .. }) => {\n+            MethodTypeParam(MethodParam { ref trait_ref, .. }) |\n+            MethodTraitObject(MethodObject { ref trait_ref, .. }) => {\n                 self.report_error(self.ensure_public(span, trait_ref.def_id,\n                                                      None, \"source trait\"));\n             }\n@@ -991,15 +991,15 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n                     ty::ty_struct(id, _) => {\n                         for field in fields.iter() {\n                             self.check_field(pattern.span, id,\n-                                             NamedField(field.ident));\n+                                             NamedField(field.node.ident));\n                         }\n                     }\n                     ty::ty_enum(_, _) => {\n                         match self.tcx.def_map.borrow().find(&pattern.id) {\n                             Some(&def::DefVariant(_, variant_id, _)) => {\n                                 for field in fields.iter() {\n                                     self.check_field(pattern.span, variant_id,\n-                                                     NamedField(field.ident));\n+                                                     NamedField(field.node.ident));\n                                 }\n                             }\n                             _ => self.tcx.sess.span_bug(pattern.span,"}, {"sha": "ad297309c088003885756fe16760c5b9fc0ddf34", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -647,7 +647,7 @@ fn resolve_local(visitor: &mut RegionResolutionVisitor, local: &ast::Local) {\n             ast::PatIdent(ast::BindByRef(_), _, _) => true,\n \n             ast::PatStruct(_, ref field_pats, _) => {\n-                field_pats.iter().any(|fp| is_binding_pat(&*fp.pat))\n+                field_pats.iter().any(|fp| is_binding_pat(&*fp.node.pat))\n             }\n \n             ast::PatVec(ref pats1, ref pats2, ref pats3) => {"}, {"sha": "47c596f3474958a6e42293cee8cafece9e5e0b91", "filename": "src/librustc/middle/save/mod.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -972,28 +972,14 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                                                    self.span.snippet(p.span)).as_slice());\n                     }\n                 };\n-                // The AST doesn't give us a span for the struct field, so we have\n-                // to figure out where it is by assuming it's the token before each colon.\n-                let field_spans = self.span.sub_spans_before_tokens(p.span,\n-                                                                    token::COMMA,\n-                                                                    token::COLON);\n-                if fields.len() != field_spans.len() {\n-                    self.sess.span_bug(p.span,\n-                        format!(\"Mismatched field count in '{}', found {}, expected {}\",\n-                                self.span.snippet(p.span), field_spans.len(), fields.len()\n-                               ).as_slice());\n-                }\n-                for (field, &span) in fields.iter().zip(field_spans.iter()) {\n+                for &Spanned { node: ref field, span } in fields.iter() {\n                     self.visit_pat(&*field.pat);\n-                    if span.is_none() {\n-                        continue;\n-                    }\n                     let fields = ty::lookup_struct_fields(&self.analysis.ty_cx, struct_def);\n                     for f in fields.iter() {\n                         if f.name == field.ident.name {\n                             self.fmt.ref_str(recorder::VarRef,\n                                              p.span,\n-                                             span,\n+                                             Some(span),\n                                              f.id,\n                                              self.cur_scope);\n                             break;"}, {"sha": "10832572ae255f33949b5105acd19805be1e5910", "filename": "src/librustc/middle/save/span_utils.rs", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fsave%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fsave%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsave%2Fspan_utils.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -276,58 +276,6 @@ impl<'a> SpanUtils<'a> {\n         }\n     }\n \n-    // Return an owned vector of the subspans of the tokens that come before tok2\n-    // which is before tok1. If there is no instance of tok2 before tok1, then that\n-    // place in the result is None.\n-    // Everything returned must be inside a set of (non-angle) brackets, but no\n-    // more deeply nested than that.\n-    pub fn sub_spans_before_tokens(&self,\n-                               span: Span,\n-                               tok1: Token,\n-                               tok2: Token) -> Vec<Option<Span>> {\n-        let mut sub_spans : Vec<Option<Span>> = vec!();\n-        let mut toks = self.retokenise_span(span);\n-        let mut prev = toks.next_token();\n-        let mut next = toks.next_token();\n-        let mut stored_val = false;\n-        let mut found_val = false;\n-        let mut bracket_count = 0u;\n-        while next.tok != token::EOF {\n-            if bracket_count == 1 {\n-                if next.tok == tok2 {\n-                    sub_spans.push(self.make_sub_span(span, Some(prev.sp)));\n-                    stored_val = true;\n-                    found_val = false;\n-                }\n-                if next.tok == tok1 {\n-                    if !stored_val {\n-                        sub_spans.push(None);\n-                    } else {\n-                        stored_val = false;\n-                    }\n-                    found_val = false;\n-                }\n-                if !stored_val &&\n-                   is_ident(&next.tok) {\n-                    found_val = true;\n-                }\n-            }\n-\n-            bracket_count += match next.tok {\n-                token::LPAREN | token::LBRACE => 1,\n-                token::RPAREN | token::RBRACE => -1,\n-                _ => 0\n-            };\n-\n-            prev = next;\n-            next = toks.next_token();\n-        }\n-        if found_val {\n-            sub_spans.push(None);\n-        }\n-        return sub_spans;\n-    }\n-\n     pub fn sub_span_after_keyword(&self,\n                               span: Span,\n                               keyword: keywords::Keyword) -> Option<Span> {"}, {"sha": "9cac97dc65941a489aa9097ed065a65ef5df79bc", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -82,7 +82,7 @@ impl<'v> Visitor<'v> for Annotator {\n             // work around lack of pattern matching for @ types\n             ProvidedMethod(ref method) => {\n                 match **method {\n-                    Method {attrs: ref attrs, id: id, ..} => (id, attrs),\n+                    Method {ref attrs, id, ..} => (id, attrs),\n                 }\n             }\n "}, {"sha": "237f4e950ceee42a301bb9735a407138e652172c", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -165,7 +165,7 @@ impl Substs {\n     }\n \n     pub fn erase_regions(self) -> Substs {\n-        let Substs { types: types, regions: _ } = self;\n+        let Substs { types, regions: _ } = self;\n         Substs { types: types, regions: ErasedRegions }\n     }\n "}, {"sha": "23257912b8264f457970d5af15db82b7b06508ac", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -1281,7 +1281,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             }\n \n-            ty::ty_rptr(_, ty::mt { ty: referent_ty, mutbl: mutbl }) => {\n+            ty::ty_rptr(_, ty::mt { ty: referent_ty, mutbl }) => {\n                 // &mut T or &T\n                 match bound {\n                     ty::BoundCopy => {"}, {"sha": "e4f34d8ab47be48ad1bdd53fabff54351aba337b", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -1692,10 +1692,10 @@ fn bind_irrefutable_pat<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             let pat_repr = adt::represent_type(bcx.ccx(), pat_ty);\n             expr::with_field_tys(tcx, pat_ty, Some(pat.id), |discr, field_tys| {\n                 for f in fields.iter() {\n-                    let ix = ty::field_idx_strict(tcx, f.ident.name, field_tys);\n+                    let ix = ty::field_idx_strict(tcx, f.node.ident.name, field_tys);\n                     let fldptr = adt::trans_field_ptr(bcx, &*pat_repr, val,\n                                                       discr, ix);\n-                    bcx = bind_irrefutable_pat(bcx, &*f.pat, fldptr, cleanup_scope);\n+                    bcx = bind_irrefutable_pat(bcx, &*f.node.pat, fldptr, cleanup_scope);\n                 }\n             })\n         }"}, {"sha": "438bb337e3f4e1095a783831ec1a3d521b887351", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -765,7 +765,7 @@ pub fn trans_set_discr(bcx: Block, r: &Repr, val: ValueRef, discr: Disr) {\n                 Store(bcx, C_null(llptrty), val)\n             }\n         }\n-        StructWrappedNullablePointer { nonnull: ref nonnull, nndiscr, ptrfield, .. } => {\n+        StructWrappedNullablePointer { ref nonnull, nndiscr, ptrfield, .. } => {\n             if discr != nndiscr {\n                 let (llptrptr, llptrty) = match ptrfield {\n                     ThinPointer(field) =>\n@@ -806,8 +806,8 @@ pub fn num_args(r: &Repr, discr: Disr) -> uint {\n         RawNullablePointer { nndiscr, ref nullfields, .. } => {\n             if discr == nndiscr { 1 } else { nullfields.len() }\n         }\n-        StructWrappedNullablePointer { nonnull: ref nonnull, nndiscr,\n-                                       nullfields: ref nullfields, .. } => {\n+        StructWrappedNullablePointer { ref nonnull, nndiscr,\n+                                       ref nullfields, .. } => {\n             if discr == nndiscr { nonnull.fields.len() } else { nullfields.len() }\n         }\n     }\n@@ -988,7 +988,7 @@ pub fn trans_const(ccx: &CrateContext, r: &Repr, discr: Disr,\n                 C_null(type_of::sizing_type_of(ccx, nnty))\n             }\n         }\n-        StructWrappedNullablePointer { nonnull: ref nonnull, nndiscr, .. } => {\n+        StructWrappedNullablePointer { ref nonnull, nndiscr, .. } => {\n             if discr == nndiscr {\n                 C_struct(ccx, build_const_struct(ccx,\n                                                  nonnull,"}, {"sha": "b92b9e84a9562c13cc1d7c3e64e64dc770590a56", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -401,7 +401,7 @@ pub fn malloc_raw_dyn_proc<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, t: ty::t) -> Resu\n     let llalign = C_uint(ccx, llalign_of_min(bcx.ccx(), llty));\n \n     // Allocate space and store the destructor pointer:\n-    let Result {bcx: bcx, val: llbox} = malloc_raw_dyn(bcx, ptr_llty, t, size, llalign);\n+    let Result {bcx, val: llbox} = malloc_raw_dyn(bcx, ptr_llty, t, size, llalign);\n     let dtor_ptr = GEPi(bcx, llbox, [0u, abi::box_field_drop_glue]);\n     let drop_glue_field_ty = type_of(ccx, ty::mk_nil_ptr(bcx.tcx()));\n     let drop_glue = PointerCast(bcx, glue::get_drop_glue(ccx, ty::mk_uniq(bcx.tcx(), t)),"}, {"sha": "22fd943b68c7426fee14b6c4f14720052880d53e", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -102,7 +102,7 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &ast::Expr)\n \n     fn datum_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &ast::Expr)\n                                 -> Callee<'blk, 'tcx> {\n-        let DatumBlock {bcx: mut bcx, datum} = expr::trans(bcx, expr);\n+        let DatumBlock {mut bcx, datum} = expr::trans(bcx, expr);\n         match ty::get(datum.ty).sty {\n             ty::ty_bare_fn(..) => {\n                 let llval = datum.to_llscalarish(bcx);"}, {"sha": "94df7fa57db2310d29170703525a28802ea65435", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -190,7 +190,7 @@ pub fn store_environment<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     }\n \n     // allocate closure in the heap\n-    let Result {bcx: bcx, val: llbox} = allocate_cbox(bcx, store, cdata_ty);\n+    let Result {bcx, val: llbox} = allocate_cbox(bcx, store, cdata_ty);\n \n     let llbox = PointerCast(bcx, llbox, llboxptr_ty);\n     debug!(\"tuplify_box_ty = {}\", ty_to_string(tcx, cbox_ty));"}, {"sha": "995943c301731fe27f1e7b5404d0df2f4283a03e", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -312,7 +312,7 @@ pub fn trans_for<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                                                   (),\n                                                   |(), bcx, lloption| {\n         let Result {\n-            bcx: bcx,\n+            bcx,\n             val: _\n         } = callee::trans_call_inner(bcx,\n                                      Some(loop_info),"}, {"sha": "3e07eaf9586de6658a8800fd3e60647178ace6f1", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -1449,7 +1449,7 @@ pub fn create_function_debug_context(cx: &CrateContext,\n \n         // Handle other generic parameters\n         let actual_types = param_substs.substs.types.get_slice(subst::FnSpace);\n-        for (index, &ast::TyParam{ ident: ident, .. }) in generics.ty_params.iter().enumerate() {\n+        for (index, &ast::TyParam{ ident, .. }) in generics.ty_params.iter().enumerate() {\n             let actual_type = actual_types[index];\n             // Add actual type name to <...> clause of function name\n             let actual_type_name = compute_debuginfo_type_name(cx,\n@@ -3344,7 +3344,10 @@ fn populate_scope_map(cx: &CrateContext,\n             ast::PatStruct(_, ref field_pats, _) => {\n                 scope_map.insert(pat.id, scope_stack.last().unwrap().scope_metadata);\n \n-                for &ast::FieldPat { pat: ref sub_pat, .. } in field_pats.iter() {\n+                for &codemap::Spanned {\n+                    node: ast::FieldPat { pat: ref sub_pat, .. },\n+                    ..\n+                } in field_pats.iter() {\n                     walk_pattern(cx, &**sub_pat, scope_stack, scope_map);\n                 }\n             }\n@@ -3602,8 +3605,8 @@ fn populate_scope_map(cx: &CrateContext,\n                 }\n             }\n \n-            ast::ExprInlineAsm(ast::InlineAsm { inputs: ref inputs,\n-                                                outputs: ref outputs,\n+            ast::ExprInlineAsm(ast::InlineAsm { ref inputs,\n+                                                ref outputs,\n                                                 .. }) => {\n                 // inputs, outputs: Vec<(String, P<Expr>)>\n                 for &(_, ref exp) in inputs.iter() {"}, {"sha": "834441d4430b0d4ddf9a118be82c95f9e22b90a0", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -324,7 +324,7 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 _ => bcx.sess().bug(format!(\"UnsizeStruct with bad sty: {}\",\n                                           bcx.ty_to_string(unsized_ty)).as_slice())\n             },\n-            &ty::UnsizeVtable(ty::TyTrait { def_id: def_id, substs: ref substs, .. }, _) => {\n+            &ty::UnsizeVtable(ty::TyTrait { def_id, ref substs, .. }, _) => {\n                 let substs = substs.with_self_ty(unsized_ty);\n                 let trait_ref =\n                     Rc::new(ty::TraitRef { def_id: def_id,"}, {"sha": "24b41fe144a230b99ebfbfbef8fe975dc82cfdad", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -132,8 +132,8 @@ pub fn trans_method_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         }\n \n         typeck::MethodTypeParam(typeck::MethodParam {\n-            trait_ref: ref trait_ref,\n-            method_num: method_num\n+            ref trait_ref,\n+            method_num\n         }) => {\n             let trait_ref =\n                 Rc::new(trait_ref.subst(bcx.tcx(),\n@@ -564,7 +564,7 @@ pub fn get_vtable(bcx: Block,\n             traits::VtableImpl(\n                 traits::VtableImplData {\n                     impl_def_id: id,\n-                    substs: substs,\n+                    substs,\n                     nested: _ }) => {\n                 emit_vtable_methods(bcx, id, substs).into_iter()\n             }"}, {"sha": "c54f2aec12dce151b4f81a995f945b6719db725b", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -378,13 +378,13 @@ pub fn type_of_adjust(cx: &ctxt, adj: &AutoAdjustment) -> Option<t> {\n     fn type_of_autoref(cx: &ctxt, autoref: &AutoRef) -> Option<t> {\n         match autoref {\n             &AutoUnsize(ref k) => match k {\n-                &UnsizeVtable(TyTrait { def_id, substs: ref substs, bounds }, _) => {\n+                &UnsizeVtable(TyTrait { def_id, ref substs, bounds }, _) => {\n                     Some(mk_trait(cx, def_id, substs.clone(), bounds))\n                 }\n                 _ => None\n             },\n             &AutoUnsizeUniq(ref k) => match k {\n-                &UnsizeVtable(TyTrait { def_id, substs: ref substs, bounds }, _) => {\n+                &UnsizeVtable(TyTrait { def_id, ref substs, bounds }, _) => {\n                     Some(mk_uniq(cx, mk_trait(cx, def_id, substs.clone(), bounds)))\n                 }\n                 _ => None\n@@ -3522,7 +3522,7 @@ pub fn unsize_ty(cx: &ctxt,\n                                   format!(\"UnsizeStruct with bad sty: {}\",\n                                           ty_to_string(cx, ty)).as_slice())\n         },\n-        &UnsizeVtable(TyTrait { def_id, substs: ref substs, bounds }, _) => {\n+        &UnsizeVtable(TyTrait { def_id, ref substs, bounds }, _) => {\n             mk_trait(cx, def_id, substs.clone(), bounds)\n         }\n     }\n@@ -5484,7 +5484,7 @@ pub fn accumulate_lifetimes_in_type(accumulator: &mut Vec<ty::Region>,\n             ty_rptr(region, _) => accumulator.push(region),\n             ty_enum(_, ref substs) |\n             ty_trait(box TyTrait {\n-                substs: ref substs,\n+                ref substs,\n                 ..\n             }) |\n             ty_struct(_, ref substs) => {"}, {"sha": "fa0c29d888335ddece84da490830bc887ed3d0b0", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -361,7 +361,7 @@ impl TypeFoldable for ty::UnsizeKind {\n         match *self {\n             ty::UnsizeLength(len) => ty::UnsizeLength(len),\n             ty::UnsizeStruct(box ref k, n) => ty::UnsizeStruct(box k.fold_with(folder), n),\n-            ty::UnsizeVtable(ty::TyTrait{bounds, def_id, substs: ref substs}, self_ty) => {\n+            ty::UnsizeVtable(ty::TyTrait{bounds, def_id, ref substs}, self_ty) => {\n                 ty::UnsizeVtable(\n                     ty::TyTrait {\n                         bounds: bounds.fold_with(folder),"}, {"sha": "15e3ee4c8fad3b754b6141f2822577217ba7f2f2", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -382,7 +382,7 @@ pub fn ast_path_to_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n     -> TypeAndSubsts {\n     let tcx = this.tcx();\n     let ty::Polytype {\n-        generics: generics,\n+        generics,\n         ty: decl_ty\n     } = this.get_item_ty(did);\n \n@@ -411,7 +411,7 @@ pub fn ast_path_to_ty_relaxed<'tcx, AC: AstConv<'tcx>,\n                               -> TypeAndSubsts {\n     let tcx = this.tcx();\n     let ty::Polytype {\n-        generics: generics,\n+        generics,\n         ty: decl_ty\n     } = this.get_item_ty(did);\n "}, {"sha": "94ae9561990292924d45fe259437d1c54c4d0172", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -27,7 +27,7 @@ use std::collections::{HashMap, HashSet};\n use syntax::ast;\n use syntax::ast_util;\n use syntax::parse::token;\n-use syntax::codemap::Span;\n+use syntax::codemap::{Span, Spanned};\n use syntax::print::pprust;\n use syntax::ptr::P;\n \n@@ -294,7 +294,7 @@ pub fn check_pat_variant(pcx: &pat_ctxt, pat: &ast::Pat, path: &ast::Path,\n /// `etc` is true if the pattern said '...' and false otherwise.\n pub fn check_struct_pat_fields(pcx: &pat_ctxt,\n                                span: Span,\n-                               fields: &[ast::FieldPat],\n+                               fields: &[Spanned<ast::FieldPat>],\n                                class_fields: Vec<ty::field_ty>,\n                                class_id: ast::DefId,\n                                substitutions: &subst::Substs,\n@@ -310,7 +310,7 @@ pub fn check_struct_pat_fields(pcx: &pat_ctxt,\n \n     // Typecheck each field.\n     let mut found_fields = HashSet::new();\n-    for field in fields.iter() {\n+    for &Spanned { node: ref field, span } in fields.iter() {\n         match field_map.find_mut(&field.ident.name) {\n             Some(&(_, true)) => {\n                 // Check the pattern anyway, so that attempts to look\n@@ -356,7 +356,7 @@ pub fn check_struct_pat_fields(pcx: &pat_ctxt,\n }\n \n pub fn check_struct_pat(pcx: &pat_ctxt, span: Span,\n-                        fields: &[ast::FieldPat], etc: bool,\n+                        fields: &[Spanned<ast::FieldPat>], etc: bool,\n                         struct_id: ast::DefId,\n                         substitutions: &subst::Substs) {\n     let _fcx = pcx.fcx;\n@@ -373,7 +373,7 @@ pub fn check_struct_like_enum_variant_pat(pcx: &pat_ctxt,\n                                           span: Span,\n                                           expected: ty::t,\n                                           path: &ast::Path,\n-                                          fields: &[ast::FieldPat],\n+                                          fields: &[Spanned<ast::FieldPat>],\n                                           etc: bool,\n                                           enum_id: ast::DefId,\n                                           substitutions: &subst::Substs) {\n@@ -416,7 +416,7 @@ pub fn check_struct_like_enum_variant_pat(pcx: &pat_ctxt,\n \n     if ty::type_is_error(fcx.node_ty(pat_id)) {\n         for field in fields.iter() {\n-            check_pat(pcx, &*field.pat, ty::mk_err());\n+            check_pat(pcx, &*field.node.pat, ty::mk_err());\n         }\n     }\n }"}, {"sha": "cb2f1e010ac6e6ed719557f56569a850b311a34f", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -1606,8 +1606,8 @@ impl<'a, 'tcx> LookupContext<'a, 'tcx> {\n             MethodStaticUnboxedClosure(_) => {\n                 false\n             }\n-            MethodTypeParam(MethodParam { trait_ref: ref trait_ref, .. }) |\n-            MethodTraitObject(MethodObject { trait_ref: ref trait_ref, .. }) => {\n+            MethodTypeParam(MethodParam { ref trait_ref, .. }) |\n+            MethodTraitObject(MethodObject { ref trait_ref, .. }) => {\n                 Some(trait_ref.def_id) == self.tcx().lang_items.drop_trait()\n             }\n         };"}, {"sha": "2755c4e2f7886d3f0e32896fca2a403ac7b53b9c", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -2875,8 +2875,8 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n         };\n \n         let fn_sig = match *fn_sty {\n-            ty::ty_bare_fn(ty::BareFnTy {sig: ref sig, ..}) |\n-            ty::ty_closure(box ty::ClosureTy {sig: ref sig, ..}) => sig,\n+            ty::ty_bare_fn(ty::BareFnTy {ref sig, ..}) |\n+            ty::ty_closure(box ty::ClosureTy {ref sig, ..}) => sig,\n             _ => {\n                 fcx.type_error_message(call_expr.span, |actual| {\n                     format!(\"expected function, found `{}`\", actual)"}, {"sha": "31fe30fc9f857c756cd38754aa1cec4f8b687055", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -845,7 +845,7 @@ fn check_expr_fn_block(rcx: &mut Rcx,\n \n     match ty::get(function_type).sty {\n         ty::ty_closure(box ty::ClosureTy{store: ty::RegionTraitStore(..),\n-                                         bounds: ref bounds,\n+                                         ref bounds,\n                                          ..}) => {\n             // For closure, ensure that the variables outlive region\n             // bound, since they are captured by reference."}, {"sha": "a3339f217ce8f36a9c730c21f90f52ce8565ac91", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -71,7 +71,7 @@ use syntax::visit;\n pub fn collect_item_types(ccx: &CrateCtxt) {\n     fn collect_intrinsic_type(ccx: &CrateCtxt,\n                               lang_item: ast::DefId) {\n-        let ty::Polytype { ty: ty, .. } =\n+        let ty::Polytype { ty, .. } =\n             ccx.get_item_ty(lang_item);\n         ccx.tcx.intrinsic_defs.borrow_mut().insert(lang_item, ty);\n     }"}, {"sha": "426c6836778e283af587c5f19cda84bfeb874131", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -1354,11 +1354,11 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                     lifetime: ast::Lifetime)\n                     -> ast::Path {\n         let RebuildPathInfo {\n-            path: path,\n-            indexes: indexes,\n-            expected: expected,\n-            anon_nums: anon_nums,\n-            region_names: region_names,\n+            path,\n+            indexes,\n+            expected,\n+            anon_nums,\n+            region_names,\n         } = rebuild_info;\n \n         let last_seg = path.segments.last().unwrap();"}, {"sha": "d9838cc6444e8362be01529f45ce71604f0971ac", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -805,7 +805,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                     variance);\n             }\n \n-            ty::ty_param(ty::ParamTy { def_id: ref def_id, .. }) => {\n+            ty::ty_param(ty::ParamTy { ref def_id, .. }) => {\n                 assert_eq!(def_id.krate, ast::LOCAL_CRATE);\n                 match self.terms_cx.inferred_map.find(&def_id.node) {\n                     Some(&index) => {"}, {"sha": "bdafe192705ce3a8c51119f2274ca06e6c51715f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -17,7 +17,7 @@ use syntax::ast_util;\n use syntax::ast_util::PostExpansionMethod;\n use syntax::attr;\n use syntax::attr::{AttributeMethods, AttrMetaMethods};\n-use syntax::codemap::{DUMMY_SP, Pos};\n+use syntax::codemap::{DUMMY_SP, Pos, Spanned};\n use syntax::parse::token::InternedString;\n use syntax::parse::token;\n use syntax::ptr::P;\n@@ -2045,7 +2045,7 @@ fn name_from_pat(p: &ast::Pat) -> String {\n         PatEnum(ref p, _) => path_to_string(p),\n         PatStruct(ref name, ref fields, etc) => {\n             format!(\"{} {{ {}{} }}\", path_to_string(name),\n-                fields.iter().map(|fp|\n+                fields.iter().map(|&Spanned { node: ref fp, .. }|\n                                   format!(\"{}: {}\", fp.ident.as_str(), name_from_pat(&*fp.pat)))\n                              .collect::<Vec<String>>().connect(\", \"),\n                 if etc { \", ...\" } else { \"\" }"}, {"sha": "5cc5698edfc89d4647d1809d8719e28544bb945d", "filename": "src/librustdoc/stability_summary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustdoc%2Fstability_summary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibrustdoc%2Fstability_summary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fstability_summary.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -142,7 +142,7 @@ fn summarize_item(item: &Item) -> (Counts, Option<ModuleSummary>) {\n                                        .sum();\n             (item_counts + subcounts, None)\n         }\n-        ModuleItem(Module { items: ref items, .. }) => {\n+        ModuleItem(Module { ref items, .. }) => {\n             let mut counts = item_counts;\n             let mut submodules = Vec::new();\n "}, {"sha": "8eaee7282d1971f4527f37cb4287626add9f0ca3", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -340,6 +340,7 @@ pub struct Pat {\n pub struct FieldPat {\n     pub ident: Ident,\n     pub pat: P<Pat>,\n+    pub is_shorthand: bool,\n }\n \n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n@@ -374,7 +375,7 @@ pub enum Pat_ {\n     /// \"None\" means a * pattern where we don't bind the fields to names.\n     PatEnum(Path, Option<Vec<P<Pat>>>),\n \n-    PatStruct(Path, Vec<FieldPat>, bool),\n+    PatStruct(Path, Vec<Spanned<FieldPat>>, bool),\n     PatTup(Vec<P<Pat>>),\n     PatBox(P<Pat>),\n     PatRegion(P<Pat>), // reference pattern"}, {"sha": "d5a460dc9dba1812f61a5be4043f8e2adbf805ed", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -602,7 +602,7 @@ pub fn walk_pat(pat: &Pat, it: |&Pat| -> bool) -> bool {\n     match pat.node {\n         PatIdent(_, _, Some(ref p)) => walk_pat(&**p, it),\n         PatStruct(_, ref fields, _) => {\n-            fields.iter().all(|field| walk_pat(&*field.pat, |p| it(p)))\n+            fields.iter().all(|field| walk_pat(&*field.node.pat, |p| it(p)))\n         }\n         PatEnum(_, Some(ref s)) | PatTup(ref s) => {\n             s.iter().all(|p| walk_pat(&**p, |p| it(p)))"}, {"sha": "dc4eaf7d7adebfbfa297d03bc582401f6da45e0e", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -169,7 +169,7 @@ pub trait AstBuilder {\n                               bm: ast::BindingMode) -> P<ast::Pat>;\n     fn pat_enum(&self, span: Span, path: ast::Path, subpats: Vec<P<ast::Pat>> ) -> P<ast::Pat>;\n     fn pat_struct(&self, span: Span,\n-                  path: ast::Path, field_pats: Vec<ast::FieldPat> ) -> P<ast::Pat>;\n+                  path: ast::Path, field_pats: Vec<Spanned<ast::FieldPat>> ) -> P<ast::Pat>;\n     fn pat_tuple(&self, span: Span, pats: Vec<P<ast::Pat>>) -> P<ast::Pat>;\n \n     fn pat_some(&self, span: Span, pat: P<ast::Pat>) -> P<ast::Pat>;\n@@ -796,7 +796,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.pat(span, pat)\n     }\n     fn pat_struct(&self, span: Span,\n-                  path: ast::Path, field_pats: Vec<ast::FieldPat>) -> P<ast::Pat> {\n+                  path: ast::Path, field_pats: Vec<Spanned<ast::FieldPat>>) -> P<ast::Pat> {\n         let pat = ast::PatStruct(path, field_pats, false);\n         self.pat(span, pat)\n     }"}, {"sha": "533a28998bd1d2f45e6b2a7155d86ea9d76e6239", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -1248,7 +1248,10 @@ impl<'a> TraitDef<'a> {\n         let pattern = if struct_type == Record {\n             let field_pats = subpats.into_iter().zip(ident_expr.iter()).map(|(pat, &(_, id, _))| {\n                 // id is guaranteed to be Some\n-                ast::FieldPat { ident: id.unwrap(), pat: pat }\n+                codemap::Spanned {\n+                    span: pat.span,\n+                    node: ast::FieldPat { ident: id.unwrap(), pat: pat, is_shorthand: true },\n+                }\n             }).collect();\n             cx.pat_struct(self.span, matching_path, field_pats)\n         } else {"}, {"sha": "f2081674fb7c847097768cab5fad31925b42c1f3", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -250,7 +250,7 @@ pub fn parse(sess: &ParseSess,\n         let mut next_eis = Vec::new(); // or proceed normally\n         let mut eof_eis = Vec::new();\n \n-        let TokenAndSpan {tok: tok, sp: sp} = rdr.peek();\n+        let TokenAndSpan { tok, sp } = rdr.peek();\n \n         /* we append new items to this while we go */\n         loop {"}, {"sha": "ceef190f5d4535731614987efddfb2ed1a7b91d3", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -1139,10 +1139,12 @@ pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> {\n             PatStruct(pth, fields, etc) => {\n                 let pth = folder.fold_path(pth);\n                 let fs = fields.move_map(|f| {\n-                    ast::FieldPat {\n-                        ident: f.ident,\n-                        pat: folder.fold_pat(f.pat)\n-                    }\n+                    Spanned { span: folder.new_span(f.span),\n+                              node: ast::FieldPat {\n+                                  ident: f.node.ident,\n+                                  pat: folder.fold_pat(f.node.pat),\n+                                  is_shorthand: f.node.is_shorthand,\n+                              }}\n                 });\n                 PatStruct(pth, fs, etc)\n             }"}, {"sha": "3298eae125a638c85a2349502ae0583deb98bab8", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -366,7 +366,7 @@ pub fn gather_comments_and_literals(span_diagnostic: &diagnostic::SpanHandler,\n         let bstart = rdr.last_pos;\n         rdr.next_token();\n         //discard, and look ahead; we're working with internal state\n-        let TokenAndSpan {tok: tok, sp: sp} = rdr.peek();\n+        let TokenAndSpan { tok, sp } = rdr.peek();\n         if token::is_lit(&tok) {\n             rdr.with_str_from(bstart, |s| {\n                 debug!(\"tok lit: {}\", s);"}, {"sha": "5abf79836f5b2b4d5a45d8c4852f779ebcc18e49", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -3100,7 +3100,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse the fields of a struct-like pattern\n-    fn parse_pat_fields(&mut self) -> (Vec<ast::FieldPat> , bool) {\n+    fn parse_pat_fields(&mut self) -> (Vec<codemap::Spanned<ast::FieldPat>> , bool) {\n         let mut fields = Vec::new();\n         let mut etc = false;\n         let mut first = true;\n@@ -3113,6 +3113,9 @@ impl<'a> Parser<'a> {\n                 if self.token == token::RBRACE { break }\n             }\n \n+            let lo = self.span.lo;\n+            let hi;\n+\n             if self.token == token::DOTDOT {\n                 self.bump();\n                 if self.token != token::RBRACE {\n@@ -3134,7 +3137,7 @@ impl<'a> Parser<'a> {\n \n             let fieldname = self.parse_ident();\n \n-            let subpat = if self.token == token::COLON {\n+            let (subpat, is_shorthand) = if self.token == token::COLON {\n                 match bind_type {\n                     BindByRef(..) | BindByValue(MutMutable) => {\n                         let token_str = self.this_token_to_string();\n@@ -3145,16 +3148,22 @@ impl<'a> Parser<'a> {\n                 }\n \n                 self.bump();\n-                self.parse_pat()\n+                let pat = self.parse_pat();\n+                hi = pat.span.hi;\n+                (pat, false)\n             } else {\n+                hi = self.last_span.hi;\n                 let fieldpath = codemap::Spanned{span:self.last_span, node: fieldname};\n-                P(ast::Pat {\n+                (P(ast::Pat {\n                     id: ast::DUMMY_NODE_ID,\n                     node: PatIdent(bind_type, fieldpath, None),\n                     span: self.last_span\n-                })\n+                }), true)\n             };\n-            fields.push(ast::FieldPat { ident: fieldname, pat: subpat });\n+            fields.push(codemap::Spanned { span: mk_sp(lo, hi),\n+                                           node: ast::FieldPat { ident: fieldname,\n+                                                                 pat: subpat,\n+                                                                 is_shorthand: is_shorthand }});\n         }\n         return (fields, etc);\n     }\n@@ -3665,9 +3674,9 @@ impl<'a> Parser<'a> {\n \n         // wouldn't it be more uniform to parse view items only, here?\n         let ParsedItemsAndViewItems {\n-            attrs_remaining: attrs_remaining,\n-            view_items: view_items,\n-            items: items,\n+            attrs_remaining,\n+            view_items,\n+            items,\n             ..\n         } = self.parse_items_and_view_items(first_item_attrs,\n                                             false, false);\n@@ -4705,8 +4714,8 @@ impl<'a> Parser<'a> {\n         // parse all of the items up to closing or an attribute.\n         // view items are legal here.\n         let ParsedItemsAndViewItems {\n-            attrs_remaining: attrs_remaining,\n-            view_items: view_items,\n+            attrs_remaining,\n+            view_items,\n             items: starting_items,\n             ..\n         } = self.parse_items_and_view_items(first_item_attrs, true, true);\n@@ -4978,10 +4987,10 @@ impl<'a> Parser<'a> {\n                                first_item_attrs: Vec<Attribute> )\n                                -> ForeignMod {\n         let ParsedItemsAndViewItems {\n-            attrs_remaining: attrs_remaining,\n-            view_items: view_items,\n+            attrs_remaining,\n+            view_items,\n             items: _,\n-            foreign_items: foreign_items\n+            foreign_items,\n         } = self.parse_foreign_items(first_item_attrs, true);\n         if !attrs_remaining.is_empty() {\n             let last_span = self.last_span;"}, {"sha": "b63f9b0120b9ee2e65614a9a36a9a0decfd9df1c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -1983,12 +1983,12 @@ impl<'a> State<'a> {\n                     Consistent, fields.as_slice(),\n                     |s, f| {\n                         try!(s.cbox(indent_unit));\n-                        try!(s.print_ident(f.ident));\n+                        try!(s.print_ident(f.node.ident));\n                         try!(s.word_nbsp(\":\"));\n-                        try!(s.print_pat(&*f.pat));\n+                        try!(s.print_pat(&*f.node.pat));\n                         s.end()\n                     },\n-                    |f| f.pat.span));\n+                    |f| f.node.pat.span));\n                 if etc {\n                     if fields.len() != 0u { try!(self.word_space(\",\")); }\n                     try!(word(&mut self.s, \"..\"));"}, {"sha": "f2d56f53d22caef7098f0ca490d870222d075586", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -429,7 +429,7 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n         PatStruct(ref path, ref fields, _) => {\n             visitor.visit_path(path, pattern.id);\n             for field in fields.iter() {\n-                visitor.visit_pat(&*field.pat)\n+                visitor.visit_pat(&*field.node.pat)\n             }\n         }\n         PatTup(ref tuple_elements) => {"}, {"sha": "ac8b9c3821ef5f2daa62ad9717762ab6e426d8c3", "filename": "src/test/compile-fail/lint-dead-code-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -38,7 +38,7 @@ enum XYZ {\n \n fn field_match_in_patterns(b: XYZ) -> String {\n     match b {\n-        Y { a: a, .. } => a,\n+        Y { a, .. } => a,\n         _ => \"\".to_string()\n     }\n }"}, {"sha": "ff9347b9fc516faa577f817c985aeb593526a295", "filename": "src/test/compile-fail/lint-shorthand-field.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Ftest%2Fcompile-fail%2Flint-shorthand-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083578ddec6fa07a757959efe64b02de38e73ce6/src%2Ftest%2Fcompile-fail%2Flint-shorthand-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-shorthand-field.rs?ref=083578ddec6fa07a757959efe64b02de38e73ce6", "patch": "@@ -0,0 +1,64 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(bad_style, unused_variables)]\n+#![deny(non_shorthand_field_patterns)]\n+\n+struct Foo {\n+    x: int,\n+    y: int,\n+}\n+\n+fn main() {\n+    {\n+        let Foo {\n+            x: x, //~ ERROR the `x:` in this pattern is redundant\n+            y: ref y, //~ ERROR the `y:` in this pattern is redundant\n+        } = Foo { x: 0, y: 0 };\n+\n+        let Foo {\n+            x,\n+            ref y,\n+        } = Foo { x: 0, y: 0 };\n+    }\n+\n+    {\n+        const x: int = 1;\n+\n+        match (Foo { x: 1, y: 1 }) {\n+            Foo { x: x, ..} => {},\n+            _ => {},\n+        }\n+    }\n+\n+    {\n+        struct Bar {\n+            x: x,\n+        }\n+\n+        struct x;\n+\n+        match (Bar { x: x }) {\n+            Bar { x: x } => {},\n+        }\n+    }\n+\n+    {\n+        struct Bar {\n+            x: Foo,\n+        }\n+\n+        enum Foo { x }\n+\n+        match (Bar { x: x }) {\n+            Bar { x: x } => {},\n+        }\n+    }\n+}"}]}