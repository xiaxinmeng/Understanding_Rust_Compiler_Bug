{"sha": "c920eb88b247c40a64437db54c652f14b83113c3", "node_id": "C_kwDOAAsO6NoAKGM5MjBlYjg4YjI0N2M0MGE2NDQzN2RiNTRjNjUyZjE0YjgzMTEzYzM", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-02-07T17:20:09Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-03-05T18:15:00Z"}, "message": "Fallback to other where clause if preferred is missing", "tree": {"sha": "63b2389dc955278f40c0733c41d71313809478a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63b2389dc955278f40c0733c41d71313809478a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c920eb88b247c40a64437db54c652f14b83113c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c920eb88b247c40a64437db54c652f14b83113c3", "html_url": "https://github.com/rust-lang/rust/commit/c920eb88b247c40a64437db54c652f14b83113c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c920eb88b247c40a64437db54c652f14b83113c3/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f504f6984331f9465496d9d96c1f43dab5ce9c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f504f6984331f9465496d9d96c1f43dab5ce9c6", "html_url": "https://github.com/rust-lang/rust/commit/3f504f6984331f9465496d9d96c1f43dab5ce9c6"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "b452290dff460bf3fdf571cc5789f84a2d582870", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c920eb88b247c40a64437db54c652f14b83113c3/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c920eb88b247c40a64437db54c652f14b83113c3/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=c920eb88b247c40a64437db54c652f14b83113c3", "patch": "@@ -25,6 +25,26 @@ pub(super) struct ItemLowerer<'a, 'lowering, 'hir> {\n     pub(super) lctx: &'a mut LoweringContext<'lowering, 'hir>,\n }\n \n+/// When we have a ty alias we *may* have two where clauses. To give the best diagnostics, we set the span\n+/// to the where clause that is prefered, if it exists. Otherwise, it sets the span to the other where\n+/// clause if it exists.\n+fn add_ty_alias_where_clause(\n+    generics: &mut ast::Generics,\n+    mut where_clauses: (TyAliasWhereClause, TyAliasWhereClause),\n+    prefer_first: bool,\n+) {\n+    if !prefer_first {\n+        where_clauses = (where_clauses.1, where_clauses.0);\n+    }\n+    if where_clauses.0.0 || !where_clauses.1.0 {\n+        generics.where_clause.has_where_token = where_clauses.0.0;\n+        generics.where_clause.span = where_clauses.0.1;\n+    } else {\n+        generics.where_clause.has_where_token = where_clauses.1.0;\n+        generics.where_clause.span = where_clauses.1.1;\n+    }\n+}\n+\n impl ItemLowerer<'_, '_, '_> {\n     fn with_trait_impl_ref<T>(\n         &mut self,\n@@ -298,8 +318,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     },\n                 );\n                 let mut generics = generics.clone();\n-                generics.where_clause.has_where_token = where_clauses.0.0;\n-                generics.where_clause.span = where_clauses.0.1;\n+                add_ty_alias_where_clause(&mut generics, where_clauses, true);\n                 let generics = self.lower_generics(\n                     &generics,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n@@ -311,8 +330,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }) => {\n                 let ty = self.arena.alloc(self.ty(span, hir::TyKind::Err));\n                 let mut generics = generics.clone();\n-                generics.where_clause.has_where_token = where_clauses.0.0;\n-                generics.where_clause.span = where_clauses.0.1;\n+                add_ty_alias_where_clause(&mut generics, *where_clauses, true);\n                 let generics = self.lower_generics(\n                     &generics,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n@@ -856,8 +874,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     self.lower_ty(x, ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n                 });\n                 let mut generics = generics.clone();\n-                generics.where_clause.has_where_token = where_clauses.1.0;\n-                generics.where_clause.span = where_clauses.1.1;\n+                add_ty_alias_where_clause(&mut generics, where_clauses, false);\n                 let generics = self.lower_generics(\n                     &generics,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n@@ -941,8 +958,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }\n             AssocItemKind::TyAlias(box TyAlias { generics, where_clauses, ty, .. }) => {\n                 let mut generics = generics.clone();\n-                generics.where_clause.has_where_token = where_clauses.1.0;\n-                generics.where_clause.span = where_clauses.1.1;\n+                add_ty_alias_where_clause(&mut generics, *where_clauses, false);\n                 let generics = self.lower_generics(\n                     &generics,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Generic),"}]}