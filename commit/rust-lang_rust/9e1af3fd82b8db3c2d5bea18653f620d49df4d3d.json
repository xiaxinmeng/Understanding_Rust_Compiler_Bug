{"sha": "9e1af3fd82b8db3c2d5bea18653f620d49df4d3d", "node_id": "C_kwDOAAsO6NoAKDllMWFmM2ZkODJiOGRiM2MyZDViZWExODY1M2Y2MjBkNDlkZjRkM2Q", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-13T14:02:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-13T14:02:33Z"}, "message": "Rollup merge of #98574 - dingxiangfei2009:let-else-thir, r=oli-obk\n\nLower let-else in MIR\n\nThis MR will switch to lower let-else statements in MIR building instead.\n\nTo lower let-else in MIR, we build a mini-switch two branches. One branch leads to the matching case, and the other leads to the `else` block. This arrangement will allow temporary lifetime analysis running as-is so that the temporaries are properly extended according to the same rule applied to regular `let` statements.\n\ncc https://github.com/rust-lang/rust/issues/87335\n\nFix #98672", "tree": {"sha": "21f0c5767860f1946feacbd441be7a37586445a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21f0c5767860f1946feacbd441be7a37586445a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e1af3fd82b8db3c2d5bea18653f620d49df4d3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e1af3fd82b8db3c2d5bea18653f620d49df4d3d", "html_url": "https://github.com/rust-lang/rust/commit/9e1af3fd82b8db3c2d5bea18653f620d49df4d3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e1af3fd82b8db3c2d5bea18653f620d49df4d3d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e2f6895a8dc5176a971a162e9c5bf38223c88ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e2f6895a8dc5176a971a162e9c5bf38223c88ed", "html_url": "https://github.com/rust-lang/rust/commit/9e2f6895a8dc5176a971a162e9c5bf38223c88ed"}, {"sha": "af3ba22313c351dabeb7492a21074a45c482faae", "url": "https://api.github.com/repos/rust-lang/rust/commits/af3ba22313c351dabeb7492a21074a45c482faae", "html_url": "https://github.com/rust-lang/rust/commit/af3ba22313c351dabeb7492a21074a45c482faae"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "ca617859db49d713ea5fe3ffa4fc0aaa52e0f771", "filename": "clippy_lints/src/loops/while_let_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1af3fd82b8db3c2d5bea18653f620d49df4d3d/clippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1af3fd82b8db3c2d5bea18653f620d49df4d3d/clippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs?ref=9e1af3fd82b8db3c2d5bea18653f620d49df4d3d", "patch": "@@ -11,7 +11,7 @@ use rustc_lint::LateContext;\n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, loop_block: &'tcx Block<'_>) {\n     let (init, has_trailing_exprs) = match (loop_block.stmts, loop_block.expr) {\n         ([stmt, stmts @ ..], expr) => {\n-            if let StmtKind::Local(&Local { init: Some(e), .. }) | StmtKind::Semi(e) | StmtKind::Expr(e) = stmt.kind {\n+            if let StmtKind::Local(&Local { init: Some(e), els: None, .. }) | StmtKind::Semi(e) | StmtKind::Expr(e) = stmt.kind {\n                 (e, !stmts.is_empty() || expr.is_some())\n             } else {\n                 return;"}, {"sha": "3077b999f4ee445f72716412911a1238eb2d4276", "filename": "clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e1af3fd82b8db3c2d5bea18653f620d49df4d3d/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1af3fd82b8db3c2d5bea18653f620d49df4d3d/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=9e1af3fd82b8db3c2d5bea18653f620d49df4d3d", "patch": "@@ -1041,7 +1041,8 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n     }\n \n     fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'_>) {\n-        self.infallible_destructuring_match_linted |= infallible_destructuring_match::check(cx, local);\n+        self.infallible_destructuring_match_linted |=\n+            local.els.is_none() && infallible_destructuring_match::check(cx, local);\n     }\n \n     fn check_pat(&mut self, cx: &LateContext<'tcx>, pat: &'tcx Pat<'_>) {"}, {"sha": "819646bb6780e98099d405f0a1bd8993de003393", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e1af3fd82b8db3c2d5bea18653f620d49df4d3d/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1af3fd82b8db3c2d5bea18653f620d49df4d3d/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=9e1af3fd82b8db3c2d5bea18653f620d49df4d3d", "patch": "@@ -92,6 +92,7 @@ fn check_no_effect(cx: &LateContext<'_>, stmt: &Stmt<'_>) -> bool {\n         if_chain! {\n             if !is_lint_allowed(cx, NO_EFFECT_UNDERSCORE_BINDING, local.hir_id);\n             if let Some(init) = local.init;\n+            if local.els.is_none();\n             if !local.pat.span.from_expansion();\n             if has_no_effect(cx, init);\n             if let PatKind::Binding(_, _, ident, _) = local.pat.kind;"}, {"sha": "1d9a2abf7066c8819b61a42faacde644a72eb94a", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e1af3fd82b8db3c2d5bea18653f620d49df4d3d/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1af3fd82b8db3c2d5bea18653f620d49df4d3d/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=9e1af3fd82b8db3c2d5bea18653f620d49df4d3d", "patch": "@@ -10,7 +10,6 @@ use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n \n@@ -203,9 +202,7 @@ fn check_final_expr<'tcx>(\n                 check_block_return(cx, ifblock);\n             }\n             if let Some(else_clause) = else_clause_opt {\n-                if expr.span.desugaring_kind() != Some(DesugaringKind::LetElse) {\n-                    check_final_expr(cx, else_clause, None, RetReplacement::Empty);\n-                }\n+                check_final_expr(cx, else_clause, None, RetReplacement::Empty);\n             }\n         },\n         // a match expr, check all arms"}, {"sha": "942f14ddd3d51337637ded33c8dde63aeb84744b", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e1af3fd82b8db3c2d5bea18653f620d49df4d3d/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1af3fd82b8db3c2d5bea18653f620d49df4d3d/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=9e1af3fd82b8db3c2d5bea18653f620d49df4d3d", "patch": "@@ -102,7 +102,7 @@ pub struct HirEqInterExpr<'a, 'b, 'tcx> {\n impl HirEqInterExpr<'_, '_, '_> {\n     pub fn eq_stmt(&mut self, left: &Stmt<'_>, right: &Stmt<'_>) -> bool {\n         match (&left.kind, &right.kind) {\n-            (&StmtKind::Local(l), &StmtKind::Local(r)) => {\n+            (&StmtKind::Local(l, ), &StmtKind::Local(r, )) => {\n                 // This additional check ensures that the type of the locals are equivalent even if the init\n                 // expression or type have some inferred parts.\n                 if let Some((typeck_lhs, typeck_rhs)) = self.inner.maybe_typeck_results {\n@@ -117,6 +117,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n                 // these only get added if the init and type is equal.\n                 both(&l.init, &r.init, |l, r| self.eq_expr(l, r))\n                     && both(&l.ty, &r.ty, |l, r| self.eq_ty(l, r))\n+                    && both(&l.els, &r.els, |l, r| self.eq_block(l, r))\n                     && self.eq_pat(l.pat, r.pat)\n             },\n             (&StmtKind::Expr(l), &StmtKind::Expr(r)) | (&StmtKind::Semi(l), &StmtKind::Semi(r)) => self.eq_expr(l, r),\n@@ -921,11 +922,14 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         std::mem::discriminant(&b.kind).hash(&mut self.s);\n \n         match &b.kind {\n-            StmtKind::Local(local) => {\n+            StmtKind::Local(local, ) => {\n                 self.hash_pat(local.pat);\n                 if let Some(init) = local.init {\n                     self.hash_expr(init);\n                 }\n+                if let Some(els) = local.els {\n+                    self.hash_block(els);\n+                }\n             },\n             StmtKind::Item(..) => {},\n             StmtKind::Expr(expr) | StmtKind::Semi(expr) => {"}]}