{"sha": "bcd7ecb242cb546c83a40c1a3341543f1ed71064", "node_id": "C_kwDOAAsO6NoAKGJjZDdlY2IyNDJjYjU0NmM4M2E0MGMxYTMzNDE1NDNmMWVkNzEwNjQ", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-03-07T09:12:52Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-03-07T09:12:52Z"}, "message": "Add profiling to mir lower and borrowck query", "tree": {"sha": "aeaf539eb963dcfbb22712296dd8890f5fc4de08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aeaf539eb963dcfbb22712296dd8890f5fc4de08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcd7ecb242cb546c83a40c1a3341543f1ed71064", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcd7ecb242cb546c83a40c1a3341543f1ed71064", "html_url": "https://github.com/rust-lang/rust/commit/bcd7ecb242cb546c83a40c1a3341543f1ed71064", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcd7ecb242cb546c83a40c1a3341543f1ed71064/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cce9dc3e922a2ec9f700dd2e364814ba5ae7445", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cce9dc3e922a2ec9f700dd2e364814ba5ae7445", "html_url": "https://github.com/rust-lang/rust/commit/2cce9dc3e922a2ec9f700dd2e364814ba5ae7445"}], "stats": {"total": 54, "additions": 33, "deletions": 21}, "files": [{"sha": "c8729af86a9eaf11f5ac974ca1d6ae51d6722921", "filename": "crates/hir-ty/src/mir/borrowck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7ecb242cb546c83a40c1a3341543f1ed71064/crates%2Fhir-ty%2Fsrc%2Fmir%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7ecb242cb546c83a40c1a3341543f1ed71064/crates%2Fhir-ty%2Fsrc%2Fmir%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Fborrowck.rs?ref=bcd7ecb242cb546c83a40c1a3341543f1ed71064", "patch": "@@ -33,6 +33,7 @@ pub fn borrowck_query(\n     db: &dyn HirDatabase,\n     def: DefWithBodyId,\n ) -> Result<Arc<BorrowckResult>, MirLowerError> {\n+    let _p = profile::span(\"borrowck_query\");\n     let body = db.mir_body(def)?;\n     let r = BorrowckResult { mutability_of_locals: mutability_of_locals(&body), mir_body: body };\n     Ok(Arc::new(r))"}, {"sha": "afa5275ac6bb764716d851ebd54908d975ca4eef", "filename": "crates/hir-ty/src/mir/lower.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7ecb242cb546c83a40c1a3341543f1ed71064/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7ecb242cb546c83a40c1a3341543f1ed71064/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs?ref=bcd7ecb242cb546c83a40c1a3341543f1ed71064", "patch": "@@ -15,7 +15,7 @@ use hir_def::{\n     resolver::{resolver_for_expr, ResolveValueResult, ValueNs},\n     DefWithBodyId, EnumVariantId, HasModule,\n };\n-use hir_expand::name;\n+use hir_expand::name::Name;\n use la_arena::ArenaMap;\n \n use crate::{\n@@ -1453,6 +1453,16 @@ fn cast_kind(source_ty: &Ty, target_ty: &Ty) -> Result<CastKind> {\n }\n \n pub fn mir_body_query(db: &dyn HirDatabase, def: DefWithBodyId) -> Result<Arc<MirBody>> {\n+    let _p = profile::span(\"mir_body_query\").detail(|| match def {\n+        DefWithBodyId::FunctionId(it) => db.function_data(it).name.to_string(),\n+        DefWithBodyId::StaticId(it) => db.static_data(it).name.clone().to_string(),\n+        DefWithBodyId::ConstId(it) => {\n+            db.const_data(it).name.clone().unwrap_or_else(Name::missing).to_string()\n+        }\n+        DefWithBodyId::VariantId(it) => {\n+            db.enum_data(it.parent).variants[it.local_id].name.to_string()\n+        }\n+    });\n     let body = db.body(def);\n     let infer = db.infer(def);\n     let result = lower_to_mir(db, def, &body, &infer, body.body_expr)?;"}, {"sha": "09bcdd93be019886de7417f3bd8bc5d64b5445ae", "filename": "crates/hir-ty/src/mir/lower/as_place.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7ecb242cb546c83a40c1a3341543f1ed71064/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7ecb242cb546c83a40c1a3341543f1ed71064/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower%2Fas_place.rs?ref=bcd7ecb242cb546c83a40c1a3341543f1ed71064", "patch": "@@ -1,6 +1,7 @@\n //! MIR lowering for places\n \n use super::*;\n+use hir_expand::name;\n \n macro_rules! not_supported {\n     ($x: expr) => {"}, {"sha": "9c79ceba01e4eb712cb9421d68e28b221d1d02e2", "filename": "crates/ide-diagnostics/src/handlers/mutability_errors.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7ecb242cb546c83a40c1a3341543f1ed71064/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7ecb242cb546c83a40c1a3341543f1ed71064/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs?ref=bcd7ecb242cb546c83a40c1a3341543f1ed71064", "patch": "@@ -22,8 +22,8 @@ pub(crate) fn need_mut(ctx: &DiagnosticsContext<'_>, d: &hir::NeedMut) -> Diagno\n         }\n         let edit = edit_builder.finish();\n         Some(vec![fix(\n-            \"remove_mut\",\n-            \"Remove unnecessary `mut`\",\n+            \"add_mut\",\n+            \"Change it to be mutable\",\n             SourceChange::from_text_edit(file_id, edit),\n             use_range,\n         )])\n@@ -66,7 +66,7 @@ pub(crate) fn unused_mut(ctx: &DiagnosticsContext<'_>, d: &hir::UnusedMut) -> Di\n     let ast = d.local.primary_source(ctx.sema.db).syntax_ptr();\n     Diagnostic::new(\n         \"unused-mut\",\n-        \"remove this `mut`\",\n+        \"variable does not need to be mutable\",\n         ctx.sema.diagnostics_display_range(ast).range,\n     )\n     .severity(Severity::WeakWarning)\n@@ -89,7 +89,7 @@ mod tests {\n fn f(_: i32) {}\n fn main() {\n     let mut x = 2;\n-      //^^^^^ \ud83d\udca1 weak: remove this `mut`\n+      //^^^^^ \ud83d\udca1 weak: variable does not need to be mutable\n     f(x);\n }\n \"#,\n@@ -264,7 +264,7 @@ fn main() {\n fn f(_: i32) {}\n fn main() {\n     let mut x = (2, 7);\n-      //^^^^^ \ud83d\udca1 weak: remove this `mut`\n+      //^^^^^ \ud83d\udca1 weak: variable does not need to be mutable\n     f(x.1);\n }\n \"#,\n@@ -298,7 +298,7 @@ fn main() {\n             r#\"\n fn main() {\n     let mut x = &mut 2;\n-      //^^^^^ \ud83d\udca1 weak: remove this `mut`\n+      //^^^^^ \ud83d\udca1 weak: variable does not need to be mutable\n     *x = 5;\n }\n \"#,\n@@ -343,7 +343,7 @@ fn main() {\n fn main() {\n     match (2, 3) {\n         (x, mut y) => {\n-          //^^^^^ \ud83d\udca1 weak: remove this `mut`\n+          //^^^^^ \ud83d\udca1 weak: variable does not need to be mutable\n             x = 7;\n           //^^^^^ \ud83d\udca1 error: cannot mutate immutable variable `x`\n         }\n@@ -364,7 +364,7 @@ fn main() {\n fn main() {\n     return;\n     let mut x = 2;\n-      //^^^^^ \ud83d\udca1 weak: remove this `mut`\n+      //^^^^^ \ud83d\udca1 weak: variable does not need to be mutable\n     &mut x;\n }\n \"#,\n@@ -374,7 +374,7 @@ fn main() {\n fn main() {\n     loop {}\n     let mut x = 2;\n-      //^^^^^ \ud83d\udca1 weak: remove this `mut`\n+      //^^^^^ \ud83d\udca1 weak: variable does not need to be mutable\n     &mut x;\n }\n \"#,\n@@ -395,7 +395,7 @@ fn main(b: bool) {\n         g();\n     }\n     let mut x = 2;\n-      //^^^^^ \ud83d\udca1 weak: remove this `mut`\n+      //^^^^^ \ud83d\udca1 weak: variable does not need to be mutable\n     &mut x;\n }\n \"#,\n@@ -409,7 +409,7 @@ fn main(b: bool) {\n         return;\n     }\n     let mut x = 2;\n-      //^^^^^ \ud83d\udca1 weak: remove this `mut`\n+      //^^^^^ \ud83d\udca1 weak: variable does not need to be mutable\n     &mut x;\n }\n \"#,\n@@ -423,7 +423,7 @@ fn main(b: bool) {\n fn f(_: i32) {}\n fn main() {\n     let mut x;\n-      //^^^^^ \ud83d\udca1 weak: remove this `mut`\n+      //^^^^^ \ud83d\udca1 weak: variable does not need to be mutable\n     x = 5;\n     f(x);\n }\n@@ -434,7 +434,7 @@ fn main() {\n fn f(_: i32) {}\n fn main(b: bool) {\n     let mut x;\n-      //^^^^^ \ud83d\udca1 weak: remove this `mut`\n+      //^^^^^ \ud83d\udca1 weak: variable does not need to be mutable\n     if b {\n         x = 1;\n     } else {\n@@ -477,15 +477,15 @@ fn f(_: i32) {}\n fn main() {\n     loop {\n         let mut x = 1;\n-          //^^^^^ \ud83d\udca1 weak: remove this `mut`\n+          //^^^^^ \ud83d\udca1 weak: variable does not need to be mutable\n         f(x);\n         if let mut y = 2 {\n-             //^^^^^ \ud83d\udca1 weak: remove this `mut`\n+             //^^^^^ \ud83d\udca1 weak: variable does not need to be mutable\n             f(y);\n         }\n         match 3 {\n             mut z => f(z),\n-          //^^^^^ \ud83d\udca1 weak: remove this `mut`\n+          //^^^^^ \ud83d\udca1 weak: variable does not need to be mutable\n         }\n     }\n }\n@@ -498,7 +498,7 @@ fn main() {\n         check_diagnostics(\n             r#\"\n fn f(mut x: i32) {\n-   //^^^^^ \ud83d\udca1 weak: remove this `mut`\n+   //^^^^^ \ud83d\udca1 weak: variable does not need to be mutable\n }\n \"#,\n         );\n@@ -519,7 +519,7 @@ fn f(x: i32) {\n //- minicore: iterators\n fn f(x: [(i32, u8); 10]) {\n     for (a, mut b) in x {\n-          //^^^^^ \ud83d\udca1 weak: remove this `mut`\n+          //^^^^^ \ud83d\udca1 weak: variable does not need to be mutable\n         a = 2;\n       //^^^^^ \ud83d\udca1 error: cannot mutate immutable variable `a`\n     }\n@@ -567,7 +567,7 @@ fn f() {\n fn f(_: i32) {}\n fn main() {\n     let ((Some(mut x), None) | (_, Some(mut x))) = (None, Some(7));\n-             //^^^^^ \ud83d\udca1 weak: remove this `mut`\n+             //^^^^^ \ud83d\udca1 weak: variable does not need to be mutable\n     f(x);\n }\n \"#,\n@@ -583,7 +583,7 @@ fn f(_: i32) {}\n fn main() {\n     #[allow(unused_mut)]\n     let mut x = 2;\n-      //^^^^^ \ud83d\udca1 weak: remove this `mut`\n+      //^^^^^ \ud83d\udca1 weak: variable does not need to be mutable\n     f(x);\n }\n \"#,"}]}