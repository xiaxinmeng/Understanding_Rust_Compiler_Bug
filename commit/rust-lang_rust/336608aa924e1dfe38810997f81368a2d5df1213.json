{"sha": "336608aa924e1dfe38810997f81368a2d5df1213", "node_id": "C_kwDOAAsO6NoAKDMzNjYwOGFhOTI0ZTFkZmUzODgxMDk5N2Y4MTM2OGEyZDVkZjEyMTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-09T14:24:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-09T14:24:41Z"}, "message": "Auto merge of #13810 - tfpk:tfpk/macro-inline, r=Veykril\n\nAdd action to expand a declarative macro once, inline. Fixes #13598\n\nThis commit adds a new r-a method, `expandMacroInline`, which expands the macro that's currently selected. See  #13598 for the most applicable issue; though I suspect it'll resolve part of #5949 and make #11888 significantly easier).\n\nThe macro works like this:\n\n![rust-analyser-feature](https://user-images.githubusercontent.com/10906982/208813167-3123e379-8fd5-4206-a4f4-5af1129565f9.gif)\n\nI have 2 questions before this PR can be merged:\n\n1. **Should we rustfmt the output?** The advantage of doing this is neater code. The disadvantages are we'd have to format the whole expr/stmt/block (since there's no point just formatting one part, especially over multiple lines), and maybe it moves the code around more in weird ways. My suggestion here is to start off by not doing any formatting; and if it appears useful we can decide to do formatting in a later release.\n2.   **Is it worth solving the `$crate` hygiene issue now?** -- I think this PR is usable as of right now for some use-cases; but it is annoying that many common macros (i.e. `println!()`, `format!()`) can't be expanded further unless the user guesses the correct `$crate` value. The trouble with solving that issue is that I think it's complicated and imperfect. If we do solve it; we'd also need to either change the existing `expandMacro`/`expandMacroInline` commands; provide some option to allow/disallow `$crate` expanding; or come to some other compromise.", "tree": {"sha": "2943234553fe42d453eab7a1449c85f08b19ff49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2943234553fe42d453eab7a1449c85f08b19ff49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/336608aa924e1dfe38810997f81368a2d5df1213", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/336608aa924e1dfe38810997f81368a2d5df1213", "html_url": "https://github.com/rust-lang/rust/commit/336608aa924e1dfe38810997f81368a2d5df1213", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/336608aa924e1dfe38810997f81368a2d5df1213/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "938a39ab8950740c9682fc5ef2e270529f103c35", "url": "https://api.github.com/repos/rust-lang/rust/commits/938a39ab8950740c9682fc5ef2e270529f103c35", "html_url": "https://github.com/rust-lang/rust/commit/938a39ab8950740c9682fc5ef2e270529f103c35"}, {"sha": "769273ca4ca41fe3ca704ff7793de95c5def1728", "url": "https://api.github.com/repos/rust-lang/rust/commits/769273ca4ca41fe3ca704ff7793de95c5def1728", "html_url": "https://github.com/rust-lang/rust/commit/769273ca4ca41fe3ca704ff7793de95c5def1728"}], "stats": {"total": 268, "additions": 268, "deletions": 0}, "files": [{"sha": "9d03f03d201a94294459485bcfde82350ed971c7", "filename": "crates/ide-assists/src/handlers/inline_macro.rs", "status": "added", "additions": 233, "deletions": 0, "changes": 233, "blob_url": "https://github.com/rust-lang/rust/blob/336608aa924e1dfe38810997f81368a2d5df1213/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336608aa924e1dfe38810997f81368a2d5df1213/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_macro.rs?ref=336608aa924e1dfe38810997f81368a2d5df1213", "patch": "@@ -0,0 +1,233 @@\n+use syntax::ast::{self, AstNode};\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: inline_macro\n+//\n+// Takes a macro and inlines it one step.\n+//\n+// ```\n+// macro_rules! num {\n+//     (+$($t:tt)+) => (1 + num!($($t )+));\n+//     (-$($t:tt)+) => (-1 + num!($($t )+));\n+//     (+) => (1);\n+//     (-) => (-1);\n+// }\n+//\n+// fn main() {\n+//     let number = num$0!(+ + + - + +);\n+//     println!(\"{number}\");\n+// }\n+// ```\n+// ->\n+// ```\n+// macro_rules! num {\n+//     (+$($t:tt)+) => (1 + num!($($t )+));\n+//     (-$($t:tt)+) => (-1 + num!($($t )+));\n+//     (+) => (1);\n+//     (-) => (-1);\n+// }\n+//\n+// fn main() {\n+//     let number = 1+num!(+ + - + +);\n+//     println!(\"{number}\");\n+// }\n+// ```\n+pub(crate) fn inline_macro(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+    let unexpanded = ctx.find_node_at_offset::<ast::MacroCall>()?;\n+    let expanded = ctx.sema.expand(&unexpanded)?.clone_for_update();\n+\n+    let text_range = unexpanded.syntax().text_range();\n+\n+    acc.add(\n+        AssistId(\"inline_macro\", AssistKind::RefactorRewrite),\n+        format!(\"Inline macro\"),\n+        text_range,\n+        |builder| builder.replace(text_range, expanded.to_string()),\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n+\n+    macro_rules! simple_macro {\n+        () => {\n+            r#\"\n+macro_rules! foo {\n+    (foo) => (true);\n+    () => (false);\n+}\n+\"#\n+        };\n+    }\n+    macro_rules! double_macro {\n+        () => {\n+            r#\"\n+macro_rules! bar {\n+    (bar) => (true);\n+    ($($tt:tt)?) => (false);\n+}\n+macro_rules! foo {\n+    (foo) => (true);\n+    (bar) => (bar!(bar));\n+    ($($tt:tt)?) => (bar!($($tt)?));\n+}\n+\"#\n+        };\n+    }\n+\n+    macro_rules! complex_macro {\n+        () => {\n+            r#\"\n+macro_rules! num {\n+    (+$($t:tt)+) => (1 + num!($($t )+));\n+    (-$($t:tt)+) => (-1 + num!($($t )+));\n+    (+) => (1);\n+    (-) => (-1);\n+}\n+\"#\n+        };\n+    }\n+    #[test]\n+    fn inline_macro_target() {\n+        check_assist_target(\n+            inline_macro,\n+            concat!(simple_macro!(), r#\"fn f() { let a = foo$0!(foo); }\"#),\n+            \"foo!(foo)\",\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_macro_target_start() {\n+        check_assist_target(\n+            inline_macro,\n+            concat!(simple_macro!(), r#\"fn f() { let a = $0foo!(foo); }\"#),\n+            \"foo!(foo)\",\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_macro_target_end() {\n+        check_assist_target(\n+            inline_macro,\n+            concat!(simple_macro!(), r#\"fn f() { let a = foo!(foo$0); }\"#),\n+            \"foo!(foo)\",\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_macro_simple_case1() {\n+        check_assist(\n+            inline_macro,\n+            concat!(simple_macro!(), r#\"fn f() { let result = foo$0!(foo); }\"#),\n+            concat!(simple_macro!(), r#\"fn f() { let result = true; }\"#),\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_macro_simple_case2() {\n+        check_assist(\n+            inline_macro,\n+            concat!(simple_macro!(), r#\"fn f() { let result = foo$0!(); }\"#),\n+            concat!(simple_macro!(), r#\"fn f() { let result = false; }\"#),\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_macro_simple_not_applicable() {\n+        check_assist_not_applicable(\n+            inline_macro,\n+            concat!(simple_macro!(), r#\"fn f() { let result$0 = foo!(foo); }\"#),\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_macro_simple_not_applicable_broken_macro() {\n+        // FIXME: This is a bug. The macro should not expand, but it's\n+        // the same behaviour as the \"Expand Macro Recursively\" commmand\n+        // so it's presumably OK for the time being.\n+        check_assist(\n+            inline_macro,\n+            concat!(simple_macro!(), r#\"fn f() { let result = foo$0!(asdfasdf); }\"#),\n+            concat!(simple_macro!(), r#\"fn f() { let result = true; }\"#),\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_macro_double_case1() {\n+        check_assist(\n+            inline_macro,\n+            concat!(double_macro!(), r#\"fn f() { let result = foo$0!(bar); }\"#),\n+            concat!(double_macro!(), r#\"fn f() { let result = bar!(bar); }\"#),\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_macro_double_case2() {\n+        check_assist(\n+            inline_macro,\n+            concat!(double_macro!(), r#\"fn f() { let result = foo$0!(asdf); }\"#),\n+            concat!(double_macro!(), r#\"fn f() { let result = bar!(asdf); }\"#),\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_macro_complex_case1() {\n+        check_assist(\n+            inline_macro,\n+            concat!(complex_macro!(), r#\"fn f() { let result = num!(+ +$0 + - +); }\"#),\n+            concat!(complex_macro!(), r#\"fn f() { let result = 1+num!(+ + - +); }\"#),\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_macro_complex_case2() {\n+        check_assist(\n+            inline_macro,\n+            concat!(complex_macro!(), r#\"fn f() { let result = n$0um!(- + + - +); }\"#),\n+            concat!(complex_macro!(), r#\"fn f() { let result = -1+num!(+ + - +); }\"#),\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_macro_recursive_macro() {\n+        check_assist(\n+            inline_macro,\n+            r#\"\n+macro_rules! foo {\n+  () => {foo!()}\n+}\n+fn f() { let result = foo$0!(); }\n+\"#,\n+            r#\"\n+macro_rules! foo {\n+  () => {foo!()}\n+}\n+fn f() { let result = foo!(); }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_macro_unknown_macro() {\n+        check_assist_not_applicable(\n+            inline_macro,\n+            r#\"\n+fn f() { let result = foo$0!(); }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_macro_function_call_not_applicable() {\n+        check_assist_not_applicable(\n+            inline_macro,\n+            r#\"\n+fn f() { let result = foo$0(); }\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "dcf10622920d071d7f13ea72a766d8b31432b36c", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/336608aa924e1dfe38810997f81368a2d5df1213/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336608aa924e1dfe38810997f81368a2d5df1213/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=336608aa924e1dfe38810997f81368a2d5df1213", "patch": "@@ -159,6 +159,7 @@ mod handlers {\n     mod add_return_type;\n     mod inline_call;\n     mod inline_local_variable;\n+    mod inline_macro;\n     mod inline_type_alias;\n     mod introduce_named_lifetime;\n     mod invert_if;\n@@ -259,6 +260,7 @@ mod handlers {\n             inline_local_variable::inline_local_variable,\n             inline_type_alias::inline_type_alias,\n             inline_type_alias::inline_type_alias_uses,\n+            inline_macro::inline_macro,\n             introduce_named_generic::introduce_named_generic,\n             introduce_named_lifetime::introduce_named_lifetime,\n             invert_if::invert_if,"}, {"sha": "9f35bd30e5fca3fd0884c45012fb842b12373d11", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/336608aa924e1dfe38810997f81368a2d5df1213/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336608aa924e1dfe38810997f81368a2d5df1213/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=336608aa924e1dfe38810997f81368a2d5df1213", "patch": "@@ -1469,6 +1469,39 @@ fn main() {\n     )\n }\n \n+#[test]\n+fn doctest_inline_macro() {\n+    check_doc_test(\n+        \"inline_macro\",\n+        r#####\"\n+macro_rules! num {\n+    (+$($t:tt)+) => (1 + num!($($t )+));\n+    (-$($t:tt)+) => (-1 + num!($($t )+));\n+    (+) => (1);\n+    (-) => (-1);\n+}\n+\n+fn main() {\n+    let number = num$0!(+ + + - + +);\n+    println!(\"{number}\");\n+}\n+\"#####,\n+        r#####\"\n+macro_rules! num {\n+    (+$($t:tt)+) => (1 + num!($($t )+));\n+    (-$($t:tt)+) => (-1 + num!($($t )+));\n+    (+) => (1);\n+    (-) => (-1);\n+}\n+\n+fn main() {\n+    let number = 1+num!(+ + - + +);\n+    println!(\"{number}\");\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_inline_type_alias() {\n     check_doc_test("}]}