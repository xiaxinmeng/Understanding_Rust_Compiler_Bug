{"sha": "b97b0e3929030693f5cf0498e5639580a8089fdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5N2IwZTM5MjkwMzA2OTNmNWNmMDQ5OGU1NjM5NTgwYTgwODlmZGY=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-21T16:07:00Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-22T22:30:27Z"}, "message": "TRPL: UFCS\n\nAKA, two four-letter acronyms :wink:", "tree": {"sha": "7766043c2d50f0952192190ff8fc4ced0e554cf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7766043c2d50f0952192190ff8fc4ced0e554cf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b97b0e3929030693f5cf0498e5639580a8089fdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b97b0e3929030693f5cf0498e5639580a8089fdf", "html_url": "https://github.com/rust-lang/rust/commit/b97b0e3929030693f5cf0498e5639580a8089fdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b97b0e3929030693f5cf0498e5639580a8089fdf/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3860240b0e124f38483ea4bd070b61d362871ece", "url": "https://api.github.com/repos/rust-lang/rust/commits/3860240b0e124f38483ea4bd070b61d362871ece", "html_url": "https://github.com/rust-lang/rust/commit/3860240b0e124f38483ea4bd070b61d362871ece"}], "stats": {"total": 126, "additions": 125, "deletions": 1}, "files": [{"sha": "2d5c742ddb8482312a2ee0661f46808b694c8c50", "filename": "src/doc/trpl/ufcs.md", "status": "modified", "additions": 125, "deletions": 1, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/b97b0e3929030693f5cf0498e5639580a8089fdf/src%2Fdoc%2Ftrpl%2Fufcs.md", "raw_url": "https://github.com/rust-lang/rust/raw/b97b0e3929030693f5cf0498e5639580a8089fdf/src%2Fdoc%2Ftrpl%2Fufcs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fufcs.md?ref=b97b0e3929030693f5cf0498e5639580a8089fdf", "patch": "@@ -1,3 +1,127 @@\n % Universal Function Call Syntax\n \n-Coming soon\n+Sometimes, functions can have the same names. Consider this code:\n+\n+```rust\n+trait Foo {\n+    fn f(&self);\n+}\n+\n+trait Bar {\n+    fn f(&self);\n+}\n+\n+struct Baz;\n+\n+impl Foo for Baz {\n+    fn f(&self) { println!(\"Baz\u2019s impl of Foo\"); }\n+}\n+\n+impl Bar for Baz {\n+    fn f(&self) { println!(\"Baz\u2019s impl of Bar\"); }\n+}\n+\n+let b = Baz;\n+```\n+\n+If we were to try to call `b.f()`, we\u2019d get an error:\n+\n+```text\n+error: multiple applicable methods in scope [E0034]\n+b.f();\n+  ^~~\n+note: candidate #1 is defined in an impl of the trait `main::Foo` for the type\n+`main::Baz`\n+    fn f(&self) { println!(\"Baz\u2019s impl of Foo\"); }\n+    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+note: candidate #2 is defined in an impl of the trait `main::Bar` for the type\n+`main::Baz`\n+    fn f(&self) { println!(\"Baz\u2019s impl of Bar\"); }\n+    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+```\n+\n+We need a way to disambiguate which method we need. This feature is called\n+\u2018universal function call syntax\u2019, and it looks like this:\n+\n+```rust\n+# trait Foo {\n+#     fn f(&self);\n+# }\n+# trait Bar {\n+#     fn f(&self);\n+# }\n+# struct Baz;\n+# impl Foo for Baz {\n+#     fn f(&self) { println!(\"Baz\u2019s impl of Foo\"); }\n+# }\n+# impl Bar for Baz {\n+#     fn f(&self) { println!(\"Baz\u2019s impl of Bar\"); }\n+# }\n+# let b = Baz;\n+Foo::f(&b);\n+Bar::f(&b);\n+```\n+\n+Let\u2019s break it down.\n+\n+```rust,ignore\n+Foo::\n+Bar::\n+```\n+\n+These halves of the invocation are the types of the two traits: `Foo` and\n+`Bar`. This is what ends up actually doing the disambiguation between the two:\n+Rust calls the one from the trait name you use.\n+\n+```rust,ignore\n+f(&b)\n+```\n+\n+When we call a method like `b.f()` using [method syntax][methodsyntax], Rust\n+will automatically borrow `b` if `f()` takes `&self`. In this case, Rust will\n+not, and so we need to pass an explicit `&b`.\n+\n+[methodsyntax]: method-syntax.html\n+\n+# Angle-bracket Form\n+\n+The form of UFCS we just talked about:\n+\n+```rust,ignore\n+Type::method(args);\n+```\n+\n+Is a short-hand. There\u2019s an expanded form of this that\u2019s needed in some\n+situations:\n+\n+```rust,ignore\n+<Type as Trait>::method(args);\n+```\n+\n+The `<>::` syntax is a means of providing a type hint. The type goes inside\n+the `<>`s. In this case, the type is `Type as Trait`, indicating that we want\n+`Trait`\u2019s version of `method` to be called here. The `as Trait` part is\n+optional if it\u2019s not ambiguous. Same with the angle brackets, hence the\n+shorter form.\n+\n+Here\u2019s an example of using the longer form.\n+\n+```rust\n+trait Foo {\n+    fn clone(&self);\n+}\n+\n+#[derive(Clone)]\n+struct Bar;\n+\n+impl Foo for Bar {\n+    fn clone(&self) {\n+        println!(\"Making a clone of Bar\");\n+\n+        <Bar as Clone>::clone(self);\n+    }\n+}\n+```\n+\n+This will call the `Clone` trait\u2019s `clone()` method, rather than `Foo`\u2019s."}]}