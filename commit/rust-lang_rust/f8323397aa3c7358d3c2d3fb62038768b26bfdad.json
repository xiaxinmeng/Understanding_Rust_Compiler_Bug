{"sha": "f8323397aa3c7358d3c2d3fb62038768b26bfdad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MzIzMzk3YWEzYzczNThkM2MyZDNmYjYyMDM4NzY4YjI2YmZkYWQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-03-19T09:39:03Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-03-22T13:15:06Z"}, "message": "compiletest: Use lines_each instead of lines(..).each, or split(.., n).each", "tree": {"sha": "f1cb2ed8479720127f0e5587b441bb495b9902af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1cb2ed8479720127f0e5587b441bb495b9902af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8323397aa3c7358d3c2d3fb62038768b26bfdad", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8323397aa3c7358d3c2d3fb62038768b26bfdad", "html_url": "https://github.com/rust-lang/rust/commit/f8323397aa3c7358d3c2d3fb62038768b26bfdad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8323397aa3c7358d3c2d3fb62038768b26bfdad/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "429b8a9b9e48925fa34b02b05568e630d78c855b", "url": "https://api.github.com/repos/rust-lang/rust/commits/429b8a9b9e48925fa34b02b05568e630d78c855b", "html_url": "https://github.com/rust-lang/rust/commit/429b8a9b9e48925fa34b02b05568e630d78c855b"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "a6f4f1ce86281b2d8b9500e0f9cc36aa2a84eed5", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f8323397aa3c7358d3c2d3fb62038768b26bfdad/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8323397aa3c7358d3c2d3fb62038768b26bfdad/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=f8323397aa3c7358d3c2d3fb62038768b26bfdad", "patch": "@@ -267,7 +267,7 @@ fn run_debuginfo_test(config: config, props: TestProps, testfile: &Path) {\n         // check if each line in props.check_lines appears in the\n         // output (in order)\n         let mut i = 0u;\n-        for str::lines(ProcRes.stdout).each |line| {\n+        for str::lines_each(ProcRes.stdout) |line| {\n             if props.check_lines[i].trim() == line.trim() {\n                 i += 1u;\n             }\n@@ -297,8 +297,8 @@ fn check_error_patterns(props: TestProps,\n     let mut next_err_idx = 0u;\n     let mut next_err_pat = props.error_patterns[next_err_idx];\n     let mut done = false;\n-    for str::split_char(ProcRes.stderr, '\\n').each |line| {\n-        if str::contains(*line, next_err_pat) {\n+    for str::lines_each(ProcRes.stderr) |line| {\n+        if str::contains(line, next_err_pat) {\n             debug!(\"found error pattern %s\", next_err_pat);\n             next_err_idx += 1u;\n             if next_err_idx == vec::len(props.error_patterns) {\n@@ -347,15 +347,15 @@ fn check_expected_errors(expected_errors: ~[errors::ExpectedError],\n     //    filename:line1:col1: line2:col2: *warning:* msg\n     // where line1:col1: is the starting point, line2:col2:\n     // is the ending point, and * represents ANSI color codes.\n-    for str::split_char(ProcRes.stderr, '\\n').each |line| {\n+    for str::lines_each(ProcRes.stderr) |line| {\n         let mut was_expected = false;\n         for vec::eachi(expected_errors) |i, ee| {\n             if !found_flags[i] {\n                 debug!(\"prefix=%s ee.kind=%s ee.msg=%s line=%s\",\n-                       prefixes[i], ee.kind, ee.msg, *line);\n-                if (str::starts_with(*line, prefixes[i]) &&\n-                    str::contains(*line, ee.kind) &&\n-                    str::contains(*line, ee.msg)) {\n+                       prefixes[i], ee.kind, ee.msg, line);\n+                if (str::starts_with(line, prefixes[i]) &&\n+                    str::contains(line, ee.kind) &&\n+                    str::contains(line, ee.msg)) {\n                     found_flags[i] = true;\n                     was_expected = true;\n                     break;\n@@ -364,13 +364,13 @@ fn check_expected_errors(expected_errors: ~[errors::ExpectedError],\n         }\n \n         // ignore this msg which gets printed at the end\n-        if str::contains(*line, ~\"aborting due to\") {\n+        if str::contains(line, ~\"aborting due to\") {\n             was_expected = true;\n         }\n \n-        if !was_expected && is_compiler_error_or_warning(*line) {\n+        if !was_expected && is_compiler_error_or_warning(str::from_slice(line)) {\n             fatal_ProcRes(fmt!(\"unexpected compiler error or warning: '%s'\",\n-                               *line),\n+                               line),\n                           ProcRes);\n         }\n     }"}]}