{"sha": "abd77441010d74430be5c34a2e62002e578fa165", "node_id": "C_kwDOAAsO6NoAKGFiZDc3NDQxMDEwZDc0NDMwYmU1YzM0YTJlNjIwMDJlNTc4ZmExNjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-17T11:33:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-17T11:33:40Z"}, "message": "Auto merge of #103145 - matthiaskrgr:rollup-mxwsysv, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #102962 (remote-test-server: Show command line arguments)\n - #103129 (rustdoc: remove unused `.sub-logo-container` DOM on non-source pages)\n - #103136 (Fix types in documentation for `Alignment::as_usize` and `Alignmnet::as_nonzero`)\n - #103139 (Duplicate comment in mod.rs)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "9bca7964fdcdbcb3f2088a4fa37124a5582c2e01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bca7964fdcdbcb3f2088a4fa37124a5582c2e01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abd77441010d74430be5c34a2e62002e578fa165", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abd77441010d74430be5c34a2e62002e578fa165", "html_url": "https://github.com/rust-lang/rust/commit/abd77441010d74430be5c34a2e62002e578fa165", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abd77441010d74430be5c34a2e62002e578fa165/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c19a893f87e70fc1c9bab193c3f9c83d9a9d71d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c19a893f87e70fc1c9bab193c3f9c83d9a9d71d3", "html_url": "https://github.com/rust-lang/rust/commit/c19a893f87e70fc1c9bab193c3f9c83d9a9d71d3"}, {"sha": "bb3f60b847ef725124beb097d1b30115bfb3e499", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb3f60b847ef725124beb097d1b30115bfb3e499", "html_url": "https://github.com/rust-lang/rust/commit/bb3f60b847ef725124beb097d1b30115bfb3e499"}], "stats": {"total": 58, "additions": 32, "deletions": 26}, "files": [{"sha": "e73d44bbb36c38e7b21f41a50bfd3916befe55f6", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/abd77441010d74430be5c34a2e62002e578fa165/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd77441010d74430be5c34a2e62002e578fa165/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=abd77441010d74430be5c34a2e62002e578fa165", "patch": "@@ -598,11 +598,6 @@ pub type SelectionResult<'tcx, T> = Result<Option<T>, SelectionError<'tcx>>;\n ///     // type parameters, ImplSource will carry resolutions for those as well:\n ///     concrete.clone(); // ImplSource(Impl_1, [ImplSource(Impl_2, [ImplSource(Impl_3)])])\n ///\n-///     // Case A: ImplSource points at a specific impl. Only possible when\n-///     // type is concretely known. If the impl itself has bounded\n-///     // type parameters, ImplSource will carry resolutions for those as well:\n-///     concrete.clone(); // ImplSource(Impl_1, [ImplSource(Impl_2, [ImplSource(Impl_3)])])\n-///\n ///     // Case B: ImplSource must be provided by caller. This applies when\n ///     // type is a type parameter.\n ///     param.clone();    // ImplSource::Param"}, {"sha": "846efbc4ebf6c5971c8df98aacf132e953d062ae", "filename": "library/core/src/ptr/alignment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abd77441010d74430be5c34a2e62002e578fa165/library%2Fcore%2Fsrc%2Fptr%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd77441010d74430be5c34a2e62002e578fa165/library%2Fcore%2Fsrc%2Fptr%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Falignment.rs?ref=abd77441010d74430be5c34a2e62002e578fa165", "patch": "@@ -83,15 +83,15 @@ impl Alignment {\n         unsafe { mem::transmute::<usize, Alignment>(align) }\n     }\n \n-    /// Returns the alignment as a [`NonZeroUsize`]\n+    /// Returns the alignment as a [`usize`]\n     #[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n     #[rustc_const_unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n     #[inline]\n     pub const fn as_usize(self) -> usize {\n         self.0 as usize\n     }\n \n-    /// Returns the alignment as a [`usize`]\n+    /// Returns the alignment as a [`NonZeroUsize`]\n     #[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n     #[inline]\n     pub const fn as_nonzero(self) -> NonZeroUsize {"}, {"sha": "4bfc8ada2808476369c9a1fa62b9e2efb65cb264", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/abd77441010d74430be5c34a2e62002e578fa165/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/abd77441010d74430be5c34a2e62002e578fa165/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=abd77441010d74430be5c34a2e62002e578fa165", "patch": "@@ -372,15 +372,11 @@ img {\n }\n \n .sub-logo-container {\n-\tdisplay: none;\n-\tmargin-right: 20px;\n-}\n-\n-.source .sub-logo-container {\n \tdisplay: block;\n+\tmargin-right: 20px;\n }\n \n-.source .sub-logo-container > img {\n+.sub-logo-container > img {\n \theight: 60px;\n \twidth: 60px;\n \tobject-fit: contain;\n@@ -1716,12 +1712,6 @@ in storage.js plus the media query with (max-width: 700px)\n \t\tmargin-top: 16px;\n \t}\n \n-\t/* When we expand the sidebar on the source code page, we hide the logo on the left of the\n-\tsearch bar to have more space. */\n-\t.source-sidebar-expanded .source .sidebar + main .width-limiter .sub-logo-container.rust-logo {\n-\t\tdisplay: none;\n-\t}\n-\n \t.source-sidebar-expanded .source .sidebar {\n \t\twidth: 300px;\n \t}\n@@ -2025,7 +2015,7 @@ in storage.js plus the media query with (min-width: 701px)\n \t\talign-self: center;\n \t}\n \n-\t.source .sub-logo-container > img {\n+\t.sub-logo-container > img {\n \t\theight: 35px;\n \t\twidth: 35px;\n \t}"}, {"sha": "123bd576d64635f7acce0d6c87d87c3670f85c38", "filename": "src/librustdoc/html/templates/page.html", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd77441010d74430be5c34a2e62002e578fa165/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/abd77441010d74430be5c34a2e62002e578fa165/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html?ref=abd77441010d74430be5c34a2e62002e578fa165", "patch": "@@ -103,13 +103,15 @@ <h2 class=\"location\"></h2> {#- -#}\n     <main> {#- -#}\n         <div class=\"width-limiter\"> {#- -#}\n             <div class=\"sub-container\"> {#- -#}\n+                {%- if page.css_class == \"source\" -%}\n                 <a class=\"sub-logo-container\" href=\"{{page.root_path|safe}}{{krate_with_trailing_slash|safe}}index.html\"> {#- -#}\n                     {%- if !layout.logo.is_empty()  %}\n                         <img src=\"{{layout.logo}}\" alt=\"logo\"> {#- -#}\n                     {%- else -%}\n                         <img class=\"rust-logo\" src=\"{{static_root_path|safe}}rust-logo{{page.resource_suffix}}.svg\" alt=\"logo\"> {#- -#}\n                     {%- endif -%}\n                 </a> {#- -#}\n+                {%- endif -%}\n                 <nav class=\"sub\"> {#- -#}\n                     <form class=\"search-form\"> {#- -#}\n                         <div class=\"search-container\"> {#- -#}"}, {"sha": "d2d4391997ff0cc9f5645118f19528566c48f4b0", "filename": "src/test/rustdoc/logo-class-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd77441010d74430be5c34a2e62002e578fa165/src%2Ftest%2Frustdoc%2Flogo-class-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd77441010d74430be5c34a2e62002e578fa165/src%2Ftest%2Frustdoc%2Flogo-class-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Flogo-class-default.rs?ref=abd77441010d74430be5c34a2e62002e578fa165", "patch": "@@ -1,4 +1,4 @@\n // Note: this test is paired with logo-class.rs.\n // @has logo_class_default/struct.SomeStruct.html '//*[@class=\"logo-container\"]/img[@class=\"rust-logo\"]' ''\n-// @has logo_class_default/struct.SomeStruct.html '//*[@class=\"sub-logo-container\"]/img[@class=\"rust-logo\"]' ''\n+// @has src/logo_class_default/logo-class-default.rs.html '//*[@class=\"sub-logo-container\"]/img[@class=\"rust-logo\"]' ''\n pub struct SomeStruct;"}, {"sha": "d3aa446dab94d3b1812dbd594ed4f5cf786c4fc4", "filename": "src/test/rustdoc/logo-class.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abd77441010d74430be5c34a2e62002e578fa165/src%2Ftest%2Frustdoc%2Flogo-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd77441010d74430be5c34a2e62002e578fa165/src%2Ftest%2Frustdoc%2Flogo-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Flogo-class.rs?ref=abd77441010d74430be5c34a2e62002e578fa165", "patch": "@@ -5,6 +5,6 @@\n // @has logo_class/struct.SomeStruct.html '//*[@class=\"logo-container\"]/img[@src=\"https://raw.githubusercontent.com/sagebind/isahc/master/media/isahc.svg.png\"]' ''\n // @!has logo_class/struct.SomeStruct.html '//*[@class=\"logo-container\"]/img[@class=\"rust-logo\"]' ''\n //\n-// @has logo_class/struct.SomeStruct.html '//*[@class=\"sub-logo-container\"]/img[@src=\"https://raw.githubusercontent.com/sagebind/isahc/master/media/isahc.svg.png\"]' ''\n-// @!has logo_class/struct.SomeStruct.html '//*[@class=\"sub-logo-container\"]/img[@class=\"rust-logo\"]' ''\n+// @has src/logo_class/logo-class.rs.html '//*[@class=\"sub-logo-container\"]/img[@src=\"https://raw.githubusercontent.com/sagebind/isahc/master/media/isahc.svg.png\"]' ''\n+// @!has src/logo_class/logo-class.rs.html '//*[@class=\"sub-logo-container\"]/img[@class=\"rust-logo\"]' ''\n pub struct SomeStruct;"}, {"sha": "ec992da681219add9c0b4174f42981ef8f7f207b", "filename": "src/tools/remote-test-server/src/main.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/abd77441010d74430be5c34a2e62002e578fa165/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd77441010d74430be5c34a2e62002e578fa165/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs?ref=abd77441010d74430be5c34a2e62002e578fa165", "patch": "@@ -74,7 +74,11 @@ impl Config {\n                 \"--bind\" => next_is_bind = true,\n                 \"--sequential\" => config.sequential = true,\n                 \"--verbose\" | \"-v\" => config.verbose = true,\n-                arg => panic!(\"unknown argument: {}\", arg),\n+                \"--help\" | \"-h\" => {\n+                    show_help();\n+                    std::process::exit(0);\n+                }\n+                arg => panic!(\"unknown argument: {}, use `--help` for known arguments\", arg),\n             }\n         }\n         if next_is_bind {\n@@ -85,16 +89,31 @@ impl Config {\n     }\n }\n \n+fn show_help() {\n+    eprintln!(\n+        r#\"Usage:\n+\n+{} [OPTIONS]\n+\n+OPTIONS:\n+    --bind <IP>:<PORT>   Specify IP address and port to listen for requests, e.g. \"0.0.0.0:12345\"\n+    --sequential         Run only one test at a time\n+    -v, --verbose        Show status messages\n+    -h, --help           Show this help screen\n+\"#,\n+        std::env::args().next().unwrap()\n+    );\n+}\n+\n fn print_verbose(s: &str, conf: Config) {\n     if conf.verbose {\n         println!(\"{}\", s);\n     }\n }\n \n fn main() {\n-    println!(\"starting test server\");\n-\n     let config = Config::parse_args();\n+    println!(\"starting test server\");\n \n     let listener = t!(TcpListener::bind(config.bind));\n     let (work, tmp): (PathBuf, PathBuf) = if cfg!(target_os = \"android\") {"}]}