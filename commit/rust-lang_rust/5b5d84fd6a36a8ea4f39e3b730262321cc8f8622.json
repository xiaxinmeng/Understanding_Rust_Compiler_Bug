{"sha": "5b5d84fd6a36a8ea4f39e3b730262321cc8f8622", "node_id": "C_kwDOAAsO6NoAKDViNWQ4NGZkNmEzNmE4ZWE0ZjM5ZTNiNzMwMjYyMzIxY2M4Zjg2MjI", "commit": {"author": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "me@fmease.dev", "date": "2023-06-06T18:17:07Z"}, "committer": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "me@fmease.dev", "date": "2023-06-07T11:29:36Z"}, "message": "use wf::object_region_bounds", "tree": {"sha": "02f3c6ce9cf9acbf7b953340e8a2d567611b9650", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02f3c6ce9cf9acbf7b953340e8a2d567611b9650"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b5d84fd6a36a8ea4f39e3b730262321cc8f8622", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXSQFaHGAjVoD5I3F0XoHIV9o5xMFAmSAaiAACgkQ0XoHIV9o\n5xNhhw/9HMBGLTYEECBXjM24kDwJMq+CcZ0G1LocTDm6f0elckZDrxyY2t0Oy/yT\nnWbUqqxfkpeCmeI979a/pfhUunMQwIfYKtsOoQfpkNB+X7Msg0PCDehuBAdJgxSt\nPmLNrSjyD9RN1XgdhrcmqpwAGtaxPeOpcJugl9XDhAfVGeq2M1IckoDBEwYorU9U\nmv3QnJyUFpWhq884URG9bHcz0HkRyNMoF1YoE0gWEKJjdsM6BsDt5yWjZxNORi6v\ndA6ygvkAzaL2mrVFzCmgOzwryoXgVMMp9Aj4rwSz3+fN15/lxKRuixtAyw6toNUY\nX7fB7MLnQ3CflsR6MfZy4vKsAPaUYVEBdEs1lGMzrHOYubUOojppyPa14QF4zEY8\nL0oTalx8iGfMn3/N3Nhuf8BM96oZcnE0mY5wgopJD2hlkkoO4DSNCEpP20XyI5fI\nMK/HeWyaK9mdrMf+y18JHF6QZLbeBv/+vYDYHL9r5vHIzwhl9tFuVfz9iX4LK7Uk\nOMu3Ytrq2fNK1ThLyLtF1/NFKOr68zlvMZFPyfZAsECPbNN+JzVQZqWncnOmagLu\nPXseU4RMuvbOOT+tjWRfxtYMUoSjK3abzo4fG1063zVKgqSeUhasr6ZMpD0Vy24k\nNgZlBTjlCkQfnZpIR4RG6skisd/gHbUmtPhromPTpO6rsDSyD7s=\n=RGnu\n-----END PGP SIGNATURE-----", "payload": "tree 02f3c6ce9cf9acbf7b953340e8a2d567611b9650\nparent 3490a510d552390f1970cb36d5ca76569f571a97\nauthor Le\u00f3n Orell Valerian Liehr <me@fmease.dev> 1686075427 +0200\ncommitter Le\u00f3n Orell Valerian Liehr <me@fmease.dev> 1686137376 +0200\n\nuse wf::object_region_bounds\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b5d84fd6a36a8ea4f39e3b730262321cc8f8622", "html_url": "https://github.com/rust-lang/rust/commit/5b5d84fd6a36a8ea4f39e3b730262321cc8f8622", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b5d84fd6a36a8ea4f39e3b730262321cc8f8622/comments", "author": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3490a510d552390f1970cb36d5ca76569f571a97", "url": "https://api.github.com/repos/rust-lang/rust/commits/3490a510d552390f1970cb36d5ca76569f571a97", "html_url": "https://github.com/rust-lang/rust/commit/3490a510d552390f1970cb36d5ca76569f571a97"}], "stats": {"total": 51, "additions": 9, "deletions": 42}, "files": [{"sha": "0c7950bfd3ddd08fcc82106eefb9dbb8b92ff1de", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 9, "deletions": 42, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5b5d84fd6a36a8ea4f39e3b730262321cc8f8622/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5d84fd6a36a8ea4f39e3b730262321cc8f8622/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5b5d84fd6a36a8ea4f39e3b730262321cc8f8622", "patch": "@@ -31,6 +31,7 @@ use rustc_middle::{bug, span_bug};\n use rustc_span::hygiene::{AstPass, MacroKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{self, ExpnKind};\n+use rustc_trait_selection::traits::wf::object_region_bounds;\n \n use std::borrow::Cow;\n use std::collections::hash_map::Entry;\n@@ -1760,11 +1761,10 @@ fn normalize<'tcx>(\n fn clean_trait_object_lifetime_bound<'tcx>(\n     region: ty::Region<'tcx>,\n     container: Option<ContainerTy<'tcx>>,\n-    trait_: DefId,\n-    substs: ty::Binder<'tcx, &ty::List<ty::GenericArg<'tcx>>>,\n+    preds: &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>>,\n     tcx: TyCtxt<'tcx>,\n ) -> Option<Lifetime> {\n-    if can_elide_trait_object_lifetime_bound(region, container, trait_, substs, tcx) {\n+    if can_elide_trait_object_lifetime_bound(region, container, preds, tcx) {\n         return None;\n     }\n \n@@ -1792,8 +1792,7 @@ fn clean_trait_object_lifetime_bound<'tcx>(\n fn can_elide_trait_object_lifetime_bound<'tcx>(\n     region: ty::Region<'tcx>,\n     container: Option<ContainerTy<'tcx>>,\n-    trait_: DefId,\n-    substs: ty::Binder<'tcx, &ty::List<ty::GenericArg<'tcx>>>,\n+    preds: &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>>,\n     tcx: TyCtxt<'tcx>,\n ) -> bool {\n     // Below we quote extracts from https://doc.rust-lang.org/reference/lifetime-elision.html#default-trait-object-lifetimes\n@@ -1817,41 +1816,8 @@ fn can_elide_trait_object_lifetime_bound<'tcx>(\n         ObjectLifetimeDefault::Empty => {}\n     }\n \n-    // We filter out any escaping regions below, thus it's fine to skip the binder.\n-    let substs = substs.skip_binder();\n-\n     // > If neither of those rules apply, then the bounds on the trait are used:\n-    let mut trait_regions: Vec<_> = tcx\n-        .predicates_of(trait_)\n-        .predicates\n-        .iter()\n-        .filter_map(|(pred, _)| {\n-            // Look for bounds of the form `Self: 'a` for any region `'a`.\n-            if let ty::PredicateKind::Clause(ty::Clause::TypeOutlives(ty::OutlivesPredicate(ty, region))) = pred.kind().skip_binder()\n-                && let ty::Param(param) = ty.kind()\n-                && param.name == kw::SelfUpper\n-            {\n-                Some(ty::EarlyBinder::bind(region).subst(tcx, tcx.mk_substs_trait(ty, substs)))\n-                    .filter(|region| !region.has_escaping_bound_vars())\n-            } else {\n-                None\n-            }\n-        })\n-        .collect();\n-\n-    // As a result of the substitutions above, we might be left with duplicate regions.\n-    // Consider `<'a, 'b> Self: 'a + 'b` with substitution `<'r, 'r>`. Deduplicate.\n-    trait_regions.dedup();\n-\n-    // > If 'static is used for any lifetime bound then 'static is used.\n-    // If the list contains `'static`, throw out everyhing else as it outlives any of them.\n-    if let Some(index) = trait_regions.iter().position(|region| region.is_static()) {\n-        let static_ = trait_regions.swap_remove(index);\n-        trait_regions.clear();\n-        trait_regions.push(static_);\n-    }\n-\n-    match *trait_regions {\n+    match *object_region_bounds(tcx, preds) {\n         // > If the trait has no lifetime bounds, then the lifetime is inferred in expressions\n         // > and is 'static outside of expressions.\n         // FIXME: If we are in an expression context (i.e. fn bodies and const exprs) then the default is\n@@ -1861,9 +1827,10 @@ fn can_elide_trait_object_lifetime_bound<'tcx>(\n         // nor show the contents of fn bodies.\n         [] => *region == ty::ReStatic,\n         // > If the trait is defined with a single lifetime bound then that bound is used.\n+        // > If 'static is used for any lifetime bound then 'static is used.\n         // FIXME(fmease): Don't compare lexically but respect de Bruijn indices etc. to handle shadowing correctly.\n-        [trait_region] => trait_region.get_name() == region.get_name(),\n-        // There are several distinct trait regions and none are `'static` (thanks to the preprocessing above).\n+        [object_region] => object_region.get_name() == region.get_name(),\n+        // There are several distinct trait regions and none are `'static`.\n         // Due to ambiguity there is no default trait-object lifetime and thus elision is impossible.\n         // Don't elide the lifetime.\n         _ => false,\n@@ -2004,7 +1971,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n \n             inline::record_extern_fqn(cx, did, ItemType::Trait);\n \n-            let lifetime = clean_trait_object_lifetime_bound(*reg, container, did, substs, cx.tcx);\n+            let lifetime = clean_trait_object_lifetime_bound(*reg, container, obj, cx.tcx);\n \n             let mut bounds = dids\n                 .map(|did| {"}]}