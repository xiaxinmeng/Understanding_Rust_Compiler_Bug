{"sha": "e494e73cdd30fda0a10d6b3c067ca3a2809527eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0OTRlNzNjZGQzMGZkYTBhMTBkNmIzYzA2N2NhM2EyODA5NTI3ZWI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-10T05:56:12Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-10T22:44:11Z"}, "message": "Use more encapsulation for metadata::cstore", "tree": {"sha": "ac1dcc7bafb735fdb2d3d19fc150f63c22674d03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac1dcc7bafb735fdb2d3d19fc150f63c22674d03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e494e73cdd30fda0a10d6b3c067ca3a2809527eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e494e73cdd30fda0a10d6b3c067ca3a2809527eb", "html_url": "https://github.com/rust-lang/rust/commit/e494e73cdd30fda0a10d6b3c067ca3a2809527eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e494e73cdd30fda0a10d6b3c067ca3a2809527eb/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18ebef5bbadac330dcb350a072bb864231c3e920", "url": "https://api.github.com/repos/rust-lang/rust/commits/18ebef5bbadac330dcb350a072bb864231c3e920", "html_url": "https://github.com/rust-lang/rust/commit/18ebef5bbadac330dcb350a072bb864231c3e920"}], "stats": {"total": 94, "additions": 69, "deletions": 25}, "files": [{"sha": "2812dd533079c2d3984a294da0e967d92649885d", "filename": "src/comp/metadata/cstore.rs", "status": "modified", "additions": 66, "deletions": 22, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/e494e73cdd30fda0a10d6b3c067ca3a2809527eb/src%2Fcomp%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e494e73cdd30fda0a10d6b3c067ca3a2809527eb/src%2Fcomp%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcstore.rs?ref=e494e73cdd30fda0a10d6b3c067ca3a2809527eb", "patch": "@@ -6,6 +6,23 @@ import std::vec;\n import std::str;\n import syntax::ast;\n \n+export cstore;\n+export cnum_map;\n+export crate_metadata;\n+export mk_cstore;\n+export get_crate_data;\n+export set_crate_data;\n+export have_crate_data;\n+export iter_crate_data;\n+export add_used_crate_file;\n+export get_used_crate_files;\n+export add_used_library;\n+export get_used_libraries;\n+export add_used_link_args;\n+export get_used_link_args;\n+export add_use_stmt_cnum;\n+export get_use_stmt_cnum;\n+\n // A map from external crate numbers (as decoded from some crate file) to\n // local crate numbers (as generated during this session). Each external\n // crate may refer to types in other external crates, and each has their\n@@ -16,73 +33,100 @@ type crate_metadata = rec(str name,\n                           vec[u8] data,\n                           cnum_map cnum_map);\n \n+// This is a bit of an experiment at encapsulating the data in cstore. By\n+// keeping all the data in a non-exported tag variant, it's impossible for\n+// other modules to access the cstore's private data. This could also be\n+// achieved with an obj, but at the expense of a vtable. Not sure if this is a\n+// good pattern or not.\n+tag cstore {\n+    private(cstore_private);\n+}\n+\n+type cstore_private = @rec(map::hashmap[ast::crate_num, crate_metadata] metas,\n+                           use_crate_map use_crate_map,\n+                           mutable vec[str] used_crate_files,\n+                           mutable vec[str] used_libraries,\n+                           mutable vec[str] used_link_args);\n+\n // Map from node_id's of local use statements to crate numbers\n type use_crate_map = map::hashmap[ast::node_id, ast::crate_num];\n \n-type cstore = @rec(map::hashmap[ast::crate_num, crate_metadata] metas,\n-                   use_crate_map use_crate_map,\n-                   mutable vec[str] used_crate_files,\n-                   mutable vec[str] used_libraries,\n-                   mutable vec[str] used_link_args);\n+// Internal method to retrieve the data from the cstore\n+fn p(&cstore cstore) -> cstore_private {\n+    alt (cstore) {\n+        case (private(?p)) { p }\n+    }\n+}\n \n fn mk_cstore() -> cstore {\n     auto meta_cache = map::new_int_hash[crate_metadata]();\n     auto crate_map = map::new_int_hash[ast::crate_num]();\n-    ret @rec(metas = meta_cache,\n-             use_crate_map = crate_map,\n-             mutable used_crate_files = [],\n-             mutable used_libraries = [],\n-             mutable used_link_args = []);\n+    ret private(@rec(metas = meta_cache,\n+                     use_crate_map = crate_map,\n+                     mutable used_crate_files = [],\n+                     mutable used_libraries = [],\n+                     mutable used_link_args = []));\n }\n \n fn get_crate_data(&cstore cstore, ast::crate_num cnum) -> crate_metadata {\n-    ret cstore.metas.get(cnum);\n+    ret p(cstore).metas.get(cnum);\n }\n \n fn set_crate_data(&cstore cstore, ast::crate_num cnum, &crate_metadata data) {\n-    cstore.metas.insert(cnum, data);\n+    p(cstore).metas.insert(cnum, data);\n }\n \n fn have_crate_data(&cstore cstore, ast::crate_num cnum) -> bool {\n-    ret cstore.metas.contains_key(cnum);\n+    ret p(cstore).metas.contains_key(cnum);\n+}\n+\n+iter iter_crate_data(&cstore cstore) -> @tup(ast::crate_num, crate_metadata) {\n+    for each (@tup(ast::crate_num, crate_metadata) kv\n+              in p(cstore).metas.items()) {\n+        put kv;\n+    }\n }\n \n fn add_used_crate_file(&cstore cstore, &str lib) {\n-    if (!vec::member(lib, cstore.used_crate_files)) {\n-        cstore.used_crate_files += [lib];\n+    if (!vec::member(lib, p(cstore).used_crate_files)) {\n+        p(cstore).used_crate_files += [lib];\n     }\n }\n \n fn get_used_crate_files(&cstore cstore) -> vec[str] {\n-    ret cstore.used_crate_files;\n+    ret p(cstore).used_crate_files;\n }\n \n fn add_used_library(&cstore cstore, &str lib) -> bool {\n     if (lib == \"\") { ret false; }\n \n-    if (vec::member(lib, cstore.used_libraries)) {\n+    if (vec::member(lib, p(cstore).used_libraries)) {\n         ret false;\n     }\n \n-    cstore.used_libraries += [lib];\n+    p(cstore).used_libraries += [lib];\n     ret true;\n }\n \n fn get_used_libraries(&cstore cstore) -> vec[str] {\n-    ret cstore.used_libraries;\n+    ret p(cstore).used_libraries;\n }\n \n fn add_used_link_args(&cstore cstore, &str args) {\n-    cstore.used_link_args += str::split(args, ' ' as u8);\n+    p(cstore).used_link_args += str::split(args, ' ' as u8);\n }\n \n fn get_used_link_args(&cstore cstore) -> vec[str] {\n-    ret cstore.used_link_args;\n+    ret p(cstore).used_link_args;\n }\n \n fn add_use_stmt_cnum(&cstore cstore, ast::node_id use_id,\n                      ast::crate_num cnum) {\n-    cstore.use_crate_map.insert(use_id, cnum);\n+    p(cstore).use_crate_map.insert(use_id, cnum);\n+}\n+\n+fn get_use_stmt_cnum(&cstore cstore, ast::node_id use_id) -> ast::crate_num {\n+    ret p(cstore).use_crate_map.get(use_id);\n }\n \n // Local Variables:"}, {"sha": "c1c48bcd18ebe6e25661933eee9ff5bbab1121d8", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e494e73cdd30fda0a10d6b3c067ca3a2809527eb/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e494e73cdd30fda0a10d6b3c067ca3a2809527eb/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=e494e73cdd30fda0a10d6b3c067ca3a2809527eb", "patch": "@@ -528,7 +528,7 @@ fn encode_crate_deps(&ebml::writer ebml_w, &cstore::cstore cstore) {\n \n         // Pull the cnums and names out of cstore\n         let vec[mutable numname] pairs = [mutable];\n-        for each (hashkv hashkv in cstore.metas.items()) {\n+        for each (hashkv hashkv in cstore::iter_crate_data(cstore)) {\n             pairs += [mutable tup(hashkv._0, hashkv._1.name)];\n         }\n "}, {"sha": "ab7aa564477a9d68b759e0d83c98ece1217e3a34", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e494e73cdd30fda0a10d6b3c067ca3a2809527eb/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e494e73cdd30fda0a10d6b3c067ca3a2809527eb/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=e494e73cdd30fda0a10d6b3c067ca3a2809527eb", "patch": "@@ -886,8 +886,8 @@ fn found_view_item(&env e, @ast::view_item vi, namespace ns) ->\n    option::t[def] {\n     alt (vi.node) {\n         case (ast::view_item_use(_, _, ?id)) {\n-            auto crate_map = e.cstore.use_crate_map;\n-            ret some(ast::def_mod(tup(crate_map.get(id), -1)));\n+            auto cnum = cstore::get_use_stmt_cnum(e.cstore, id);\n+            ret some(ast::def_mod(tup(cnum, -1)));\n         }\n         case (ast::view_item_import(_, _, ?id)) {\n             ret lookup_import(e, local_def(id), ns);"}]}