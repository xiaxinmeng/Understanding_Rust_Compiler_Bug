{"sha": "4b19c80819efbbf48a0efe0aba0e6e2fd3cafbc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMTljODA4MTllZmJiZjQ4YTBlZmUwYWJhMGU2ZTJmZDNjYWZiYzM=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-01-01T23:19:29Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-01-11T06:56:01Z"}, "message": "Don't create strings in the fast path", "tree": {"sha": "956c02bbc1d8d7059c20ca0beae44a975b8468b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/956c02bbc1d8d7059c20ca0beae44a975b8468b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b19c80819efbbf48a0efe0aba0e6e2fd3cafbc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b19c80819efbbf48a0efe0aba0e6e2fd3cafbc3", "html_url": "https://github.com/rust-lang/rust/commit/4b19c80819efbbf48a0efe0aba0e6e2fd3cafbc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b19c80819efbbf48a0efe0aba0e6e2fd3cafbc3/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88d1109600660d1acb471e85631e1ea349843fd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/88d1109600660d1acb471e85631e1ea349843fd9", "html_url": "https://github.com/rust-lang/rust/commit/88d1109600660d1acb471e85631e1ea349843fd9"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "84b63e986d97871144e99a0c137ddf4a20849f48", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4b19c80819efbbf48a0efe0aba0e6e2fd3cafbc3/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b19c80819efbbf48a0efe0aba0e6e2fd3cafbc3/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=4b19c80819efbbf48a0efe0aba0e6e2fd3cafbc3", "patch": "@@ -1318,10 +1318,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // those that do.\n                 self.one_bound_for_assoc_type(\n                     || traits::supertraits(tcx, trait_ref),\n-                    &trait_ref.print_only_trait_path().to_string(),\n+                    || trait_ref.print_only_trait_path().to_string(),\n                     binding.item_name,\n                     path_span,\n-                    match binding.kind {\n+                    || match binding.kind {\n                         ConvertedBindingKind::Equality(ty) => Some(ty.to_string()),\n                         _ => None,\n                     },\n@@ -1878,10 +1878,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     predicates.iter().filter_map(|(p, _)| p.to_opt_poly_trait_ref()),\n                 )\n             },\n-            &param_name.as_str(),\n+            || param_name.to_string(),\n             assoc_name,\n             span,\n-            None,\n+            || None,\n         )\n     }\n \n@@ -1890,10 +1890,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     fn one_bound_for_assoc_type<I>(\n         &self,\n         all_candidates: impl Fn() -> I,\n-        ty_param_name: &str,\n+        ty_param_name: impl Fn() -> String,\n         assoc_name: ast::Ident,\n         span: Span,\n-        is_equality: Option<String>,\n+        is_equality: impl Fn() -> Option<String>,\n     ) -> Result<ty::PolyTraitRef<'tcx>, ErrorReported>\n     where\n         I: Iterator<Item = ty::PolyTraitRef<'tcx>>,\n@@ -1906,7 +1906,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             None => {\n                 self.complain_about_assoc_type_not_found(\n                     all_candidates,\n-                    ty_param_name,\n+                    &ty_param_name(),\n                     assoc_name,\n                     span,\n                 );\n@@ -1919,6 +1919,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         if let Some(bound2) = matching_candidates.next() {\n             debug!(\"one_bound_for_assoc_type: bound2 = {:?}\", bound2);\n \n+            let is_equality = is_equality();\n             let bounds = iter::once(bound).chain(iter::once(bound2)).chain(matching_candidates);\n             let mut err = if is_equality.is_some() {\n                 // More specific Error Index entry.\n@@ -1928,7 +1929,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     E0222,\n                     \"ambiguous associated type `{}` in bounds of `{}`\",\n                     assoc_name,\n-                    ty_param_name\n+                    ty_param_name()\n                 )\n             } else {\n                 struct_span_err!(\n@@ -1937,7 +1938,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     E0221,\n                     \"ambiguous associated type `{}` in bounds of `{}`\",\n                     assoc_name,\n-                    ty_param_name\n+                    ty_param_name()\n                 )\n             };\n             err.span_label(span, format!(\"ambiguous associated type `{}`\", assoc_name));\n@@ -1975,7 +1976,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             \"use fully qualified syntax to disambiguate\",\n                             format!(\n                                 \"<{} as {}>::{}\",\n-                                ty_param_name,\n+                                ty_param_name(),\n                                 bound.print_only_trait_path(),\n                                 assoc_name,\n                             ),\n@@ -1985,7 +1986,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 } else {\n                     err.note(&format!(\n                         \"associated type `{}` could derive from `{}`\",\n-                        ty_param_name,\n+                        ty_param_name(),\n                         bound.print_only_trait_path(),\n                     ));\n                 }\n@@ -1994,7 +1995,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 err.help(&format!(\n                     \"consider introducing a new type parameter `T` and adding `where` constraints:\\\n                      \\n    where\\n        T: {},\\n{}\",\n-                    ty_param_name,\n+                    ty_param_name(),\n                     where_bounds.join(\",\\n\"),\n                 ));\n             }\n@@ -2108,10 +2109,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n                 self.one_bound_for_assoc_type(\n                     || traits::supertraits(tcx, ty::Binder::bind(trait_ref)),\n-                    \"Self\",\n+                    || \"Self\".to_string(),\n                     assoc_ident,\n                     span,\n-                    None,\n+                    || None,\n                 )?\n             }\n             (&ty::Param(_), Res::SelfTy(Some(param_did), None))"}]}