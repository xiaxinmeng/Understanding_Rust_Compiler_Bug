{"sha": "d11855a8ceb129c25160a7adb995087fdf799102", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMTg1NWE4Y2ViMTI5YzI1MTYwYTdhZGI5OTUwODdmZGY3OTkxMDI=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-15T06:17:23Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-15T18:55:03Z"}, "message": "Rename VariantKind -> Variant\n\nThere's no `Variant`, so it seems silly to have `Kind`.", "tree": {"sha": "25c6b4105f6a850c5796741611e81fcb16142496", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25c6b4105f6a850c5796741611e81fcb16142496"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d11855a8ceb129c25160a7adb995087fdf799102", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d11855a8ceb129c25160a7adb995087fdf799102", "html_url": "https://github.com/rust-lang/rust/commit/d11855a8ceb129c25160a7adb995087fdf799102", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d11855a8ceb129c25160a7adb995087fdf799102/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd459a2be6973cdf2e79158c8ff386447c401d1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd459a2be6973cdf2e79158c8ff386447c401d1d", "html_url": "https://github.com/rust-lang/rust/commit/dd459a2be6973cdf2e79158c8ff386447c401d1d"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "545f432def5a7493890d8ce628ac7e0c784d4869", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d11855a8ceb129c25160a7adb995087fdf799102/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d11855a8ceb129c25160a7adb995087fdf799102/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d11855a8ceb129c25160a7adb995087fdf799102", "patch": "@@ -1840,11 +1840,11 @@ impl Clean<VariantStruct> for rustc_hir::VariantData<'_> {\n impl Clean<Item> for ty::VariantDef {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         let kind = match self.ctor_kind {\n-            CtorKind::Const => VariantKind::CLike,\n-            CtorKind::Fn => VariantKind::Tuple(\n+            CtorKind::Const => Variant::CLike,\n+            CtorKind::Fn => Variant::Tuple(\n                 self.fields.iter().map(|f| cx.tcx.type_of(f.did).clean(cx)).collect(),\n             ),\n-            CtorKind::Fictive => VariantKind::Struct(VariantStruct {\n+            CtorKind::Fictive => Variant::Struct(VariantStruct {\n                 struct_type: doctree::Plain,\n                 fields_stripped: false,\n                 fields: self\n@@ -1868,14 +1868,14 @@ impl Clean<Item> for ty::VariantDef {\n     }\n }\n \n-impl Clean<VariantKind> for hir::VariantData<'_> {\n-    fn clean(&self, cx: &DocContext<'_>) -> VariantKind {\n+impl Clean<Variant> for hir::VariantData<'_> {\n+    fn clean(&self, cx: &DocContext<'_>) -> Variant {\n         match self {\n-            hir::VariantData::Struct(..) => VariantKind::Struct(self.clean(cx)),\n+            hir::VariantData::Struct(..) => Variant::Struct(self.clean(cx)),\n             hir::VariantData::Tuple(..) => {\n-                VariantKind::Tuple(self.fields().iter().map(|x| x.ty.clean(cx)).collect())\n+                Variant::Tuple(self.fields().iter().map(|x| x.ty.clean(cx)).collect())\n             }\n-            hir::VariantData::Unit(..) => VariantKind::CLike,\n+            hir::VariantData::Unit(..) => Variant::CLike,\n         }\n     }\n }"}, {"sha": "666b11b5f806dd1f42edde23e96e1b49c620df56", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d11855a8ceb129c25160a7adb995087fdf799102/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d11855a8ceb129c25160a7adb995087fdf799102/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=d11855a8ceb129c25160a7adb995087fdf799102", "patch": "@@ -237,7 +237,7 @@ impl Item {\n         match *self.kind {\n             StructItem(ref _struct) => Some(_struct.fields_stripped),\n             UnionItem(ref union) => Some(union.fields_stripped),\n-            VariantItem(VariantKind::Struct(ref vstruct)) => Some(vstruct.fields_stripped),\n+            VariantItem(Variant::Struct(ref vstruct)) => Some(vstruct.fields_stripped),\n             _ => None,\n         }\n     }\n@@ -323,7 +323,7 @@ crate enum ItemKind {\n     /// A method with a body.\n     MethodItem(Function, Option<hir::Defaultness>),\n     StructFieldItem(Type),\n-    VariantItem(VariantKind),\n+    VariantItem(Variant),\n     /// `fn`s from an extern block\n     ForeignFunctionItem(Function),\n     /// `static`s from an extern block\n@@ -351,7 +351,7 @@ impl ItemKind {\n         match self {\n             StructItem(s) => s.fields.iter(),\n             UnionItem(u) => u.fields.iter(),\n-            VariantItem(VariantKind::Struct(v)) => v.fields.iter(),\n+            VariantItem(Variant::Struct(v)) => v.fields.iter(),\n             EnumItem(e) => e.variants.iter(),\n             TraitItem(t) => t.items.iter(),\n             ImplItem(i) => i.items.iter(),\n@@ -1717,7 +1717,7 @@ crate struct Enum {\n }\n \n #[derive(Clone, Debug)]\n-crate enum VariantKind {\n+crate enum Variant {\n     CLike,\n     Tuple(Vec<Type>),\n     Struct(VariantStruct),"}, {"sha": "b2773a29e29051d6a3423865facc393219b21e6e", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d11855a8ceb129c25160a7adb995087fdf799102/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d11855a8ceb129c25160a7adb995087fdf799102/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=d11855a8ceb129c25160a7adb995087fdf799102", "patch": "@@ -56,12 +56,12 @@ crate trait DocFolder: Sized {\n             VariantItem(i) => {\n                 let i2 = i.clone(); // this clone is small\n                 match i {\n-                    VariantKind::Struct(mut j) => {\n+                    Variant::Struct(mut j) => {\n                         let num_fields = j.fields.len();\n                         j.fields = j.fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n                         j.fields_stripped |= num_fields != j.fields.len()\n                             || j.fields.iter().any(|f| f.is_stripped());\n-                        VariantItem(VariantKind::Struct(j))\n+                        VariantItem(Variant::Struct(j))\n                     }\n                     _ => VariantItem(i2),\n                 }"}, {"sha": "2db89e8a7ca687a27d1ca35d1d8672a5fd325928", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d11855a8ceb129c25160a7adb995087fdf799102/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d11855a8ceb129c25160a7adb995087fdf799102/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=d11855a8ceb129c25160a7adb995087fdf799102", "patch": "@@ -3201,8 +3201,8 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                 let name = v.name.as_ref().unwrap();\n                 match *v.kind {\n                     clean::VariantItem(ref var) => match var {\n-                        clean::VariantKind::CLike => write!(w, \"{}\", name),\n-                        clean::VariantKind::Tuple(ref tys) => {\n+                        clean::Variant::CLike => write!(w, \"{}\", name),\n+                        clean::Variant::Tuple(ref tys) => {\n                             write!(w, \"{}(\", name);\n                             for (i, ty) in tys.iter().enumerate() {\n                                 if i > 0 {\n@@ -3212,7 +3212,7 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                             }\n                             write!(w, \")\");\n                         }\n-                        clean::VariantKind::Struct(ref s) => {\n+                        clean::Variant::Struct(ref s) => {\n                             render_struct(w, v, None, s.struct_type, &s.fields, \"    \", false, cx);\n                         }\n                     },\n@@ -3249,7 +3249,7 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                 id = id,\n                 name = variant.name.as_ref().unwrap()\n             );\n-            if let clean::VariantItem(clean::VariantKind::Tuple(ref tys)) = *variant.kind {\n+            if let clean::VariantItem(clean::Variant::Tuple(ref tys)) = *variant.kind {\n                 write!(w, \"(\");\n                 for (i, ty) in tys.iter().enumerate() {\n                     if i > 0 {\n@@ -3263,8 +3263,8 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n             document(w, cx, variant, Some(it));\n             document_non_exhaustive(w, variant);\n \n-            use crate::clean::VariantKind;\n-            if let clean::VariantItem(VariantKind::Struct(ref s)) = *variant.kind {\n+            use crate::clean::Variant;\n+            if let clean::VariantItem(Variant::Struct(ref s)) = *variant.kind {\n                 let variant_id = cx.derive_id(format!(\n                     \"{}.{}.fields\",\n                     ItemType::Variant,"}, {"sha": "7d05cb016b67c899ccc03b674944b1e9993cb5b8", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d11855a8ceb129c25160a7adb995087fdf799102/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d11855a8ceb129c25160a7adb995087fdf799102/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=d11855a8ceb129c25160a7adb995087fdf799102", "patch": "@@ -480,9 +480,9 @@ impl From<clean::VariantStruct> for Struct {\n     }\n }\n \n-impl From<clean::VariantKind> for Variant {\n-    fn from(variant: clean::VariantKind) -> Self {\n-        use clean::VariantKind::*;\n+impl From<clean::Variant> for Variant {\n+    fn from(variant: clean::Variant) -> Self {\n+        use clean::Variant::*;\n         match variant {\n             CLike => Variant::Plain,\n             Tuple(t) => Variant::Tuple(t.into_iter().map(Into::into).collect()),"}, {"sha": "162b70973b418e25f77855fca860b661c45eba10", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d11855a8ceb129c25160a7adb995087fdf799102/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d11855a8ceb129c25160a7adb995087fdf799102/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=d11855a8ceb129c25160a7adb995087fdf799102", "patch": "@@ -94,7 +94,7 @@ impl<'a> DocFolder for Stripper<'a> {\n             // implementations of traits are always public.\n             clean::ImplItem(ref imp) if imp.trait_.is_some() => true,\n             // Struct variant fields have inherited visibility\n-            clean::VariantItem(clean::VariantKind::Struct(..)) => true,\n+            clean::VariantItem(clean::Variant::Struct(..)) => true,\n             _ => false,\n         };\n "}]}