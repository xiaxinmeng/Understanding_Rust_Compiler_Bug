{"sha": "bb9ce7cb01fba4b34bbebf8a44056016cabfa40e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiOWNlN2NiMDFmYmE0YjM0YmJlYmY4YTQ0MDU2MDE2Y2FiZmE0MGU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-09-11T21:43:37Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-09-11T21:43:37Z"}, "message": "Add missing examples on binary core traits", "tree": {"sha": "f8cdb7a03c72ee4a880cef4d323392fa41ebc7ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8cdb7a03c72ee4a880cef4d323392fa41ebc7ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb9ce7cb01fba4b34bbebf8a44056016cabfa40e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb9ce7cb01fba4b34bbebf8a44056016cabfa40e", "html_url": "https://github.com/rust-lang/rust/commit/bb9ce7cb01fba4b34bbebf8a44056016cabfa40e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb9ce7cb01fba4b34bbebf8a44056016cabfa40e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02fe30971ef397bcff3460a9aaf175e0810c2c90", "url": "https://api.github.com/repos/rust-lang/rust/commits/02fe30971ef397bcff3460a9aaf175e0810c2c90", "html_url": "https://github.com/rust-lang/rust/commit/02fe30971ef397bcff3460a9aaf175e0810c2c90"}], "stats": {"total": 134, "additions": 134, "deletions": 0}, "files": [{"sha": "3d71e0b0002c2da6a7c29eb7a78790e817519d3d", "filename": "library/core/src/ops/bit.rs", "status": "modified", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/bb9ce7cb01fba4b34bbebf8a44056016cabfa40e/library%2Fcore%2Fsrc%2Fops%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb9ce7cb01fba4b34bbebf8a44056016cabfa40e/library%2Fcore%2Fsrc%2Fops%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fbit.rs?ref=bb9ce7cb01fba4b34bbebf8a44056016cabfa40e", "patch": "@@ -36,6 +36,15 @@ pub trait Not {\n     type Output;\n \n     /// Performs the unary `!` operation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(!true, false);\n+    /// assert_eq!(!false, true);\n+    /// assert_eq!(!1u8, 254);\n+    /// assert_eq!(!0u8, 255);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn not(self) -> Self::Output;\n@@ -122,6 +131,15 @@ pub trait BitAnd<Rhs = Self> {\n     type Output;\n \n     /// Performs the `&` operation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(true & false, false);\n+    /// assert_eq!(true & true, true);\n+    /// assert_eq!(5u8 & 1u8, 1);\n+    /// assert_eq!(5u8 & 2u8, 0);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn bitand(self, rhs: Rhs) -> Self::Output;\n@@ -208,6 +226,15 @@ pub trait BitOr<Rhs = Self> {\n     type Output;\n \n     /// Performs the `|` operation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(true | false, true);\n+    /// assert_eq!(false | false, false);\n+    /// assert_eq!(5u8 | 1u8, 5);\n+    /// assert_eq!(5u8 | 2u8, 7);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn bitor(self, rhs: Rhs) -> Self::Output;\n@@ -297,6 +324,15 @@ pub trait BitXor<Rhs = Self> {\n     type Output;\n \n     /// Performs the `^` operation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(true ^ false, true);\n+    /// assert_eq!(true ^ true, false);\n+    /// assert_eq!(5u8 ^ 1u8, 4);\n+    /// assert_eq!(5u8 ^ 2u8, 7);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn bitxor(self, rhs: Rhs) -> Self::Output;\n@@ -387,6 +423,13 @@ pub trait Shl<Rhs = Self> {\n     type Output;\n \n     /// Performs the `<<` operation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(5u8 << 1, 10);\n+    /// assert_eq!(1u8 << 1, 2);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn shl(self, rhs: Rhs) -> Self::Output;\n@@ -498,6 +541,13 @@ pub trait Shr<Rhs = Self> {\n     type Output;\n \n     /// Performs the `>>` operation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(5u8 >> 1, 2);\n+    /// assert_eq!(2u8 >> 1, 1);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn shr(self, rhs: Rhs) -> Self::Output;\n@@ -612,6 +662,26 @@ shr_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n )]\n pub trait BitAndAssign<Rhs = Self> {\n     /// Performs the `&=` operation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let mut x = true;\n+    /// x &= false;\n+    /// assert_eq!(x, false);\n+    ///\n+    /// let mut x = true;\n+    /// x &= true;\n+    /// assert_eq!(x, true);\n+    ///\n+    /// let mut x: u8 = 5;\n+    /// x &= 1;\n+    /// assert_eq!(x, 1);\n+    ///\n+    /// let mut x: u8 = 5;\n+    /// x &= 2;\n+    /// assert_eq!(x, 0);\n+    /// ```\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn bitand_assign(&mut self, rhs: Rhs);\n }\n@@ -663,6 +733,26 @@ bitand_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n )]\n pub trait BitOrAssign<Rhs = Self> {\n     /// Performs the `|=` operation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let mut x = true;\n+    /// x |= false;\n+    /// assert_eq!(x, true);\n+    ///\n+    /// let mut x = false;\n+    /// x |= false;\n+    /// assert_eq!(x, false);\n+    ///\n+    /// let mut x: u8 = 5;\n+    /// x |= 1;\n+    /// assert_eq!(x, 5);\n+    ///\n+    /// let mut x: u8 = 5;\n+    /// x |= 2;\n+    /// assert_eq!(x, 7);\n+    /// ```\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn bitor_assign(&mut self, rhs: Rhs);\n }\n@@ -714,6 +804,26 @@ bitor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n )]\n pub trait BitXorAssign<Rhs = Self> {\n     /// Performs the `^=` operation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let mut x = true;\n+    /// x ^= false;\n+    /// assert_eq!(x, true);\n+    ///\n+    /// let mut x = true;\n+    /// x ^= true;\n+    /// assert_eq!(x, false);\n+    ///\n+    /// let mut x: u8 = 5;\n+    /// x ^= 1;\n+    /// assert_eq!(x, 4);\n+    ///\n+    /// let mut x: u8 = 5;\n+    /// x ^= 2;\n+    /// assert_eq!(x, 7);\n+    /// ```\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn bitxor_assign(&mut self, rhs: Rhs);\n }\n@@ -763,6 +873,18 @@ bitxor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n )]\n pub trait ShlAssign<Rhs = Self> {\n     /// Performs the `<<=` operation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let mut x: u8 = 5;\n+    /// x <<= 1;\n+    /// assert_eq!(x, 10);\n+    ///\n+    /// let mut x: u8 = 1;\n+    /// x <<= 1;\n+    /// assert_eq!(x, 2);\n+    /// ```\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn shl_assign(&mut self, rhs: Rhs);\n }\n@@ -833,6 +955,18 @@ shl_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n )]\n pub trait ShrAssign<Rhs = Self> {\n     /// Performs the `>>=` operation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let mut x: u8 = 5;\n+    /// x >>= 1;\n+    /// assert_eq!(x, 2);\n+    ///\n+    /// let mut x: u8 = 2;\n+    /// x >>= 1;\n+    /// assert_eq!(x, 1);\n+    /// ```\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn shr_assign(&mut self, rhs: Rhs);\n }"}]}