{"sha": "55805ab4735aaaafb7082af238c0b3d98af138c7", "node_id": "C_kwDOAAsO6NoAKDU1ODA1YWI0NzM1YWFhYWZiNzA4MmFmMjM4YzBiM2Q5OGFmMTM4Yzc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-06T01:45:45Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-11T23:38:48Z"}, "message": "Make is_suggestable work on all TypeFoldable", "tree": {"sha": "f90e46a4133f1f28c913d97bba30b6a5b9a4ce0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f90e46a4133f1f28c913d97bba30b6a5b9a4ce0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55805ab4735aaaafb7082af238c0b3d98af138c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55805ab4735aaaafb7082af238c0b3d98af138c7", "html_url": "https://github.com/rust-lang/rust/commit/55805ab4735aaaafb7082af238c0b3d98af138c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55805ab4735aaaafb7082af238c0b3d98af138c7/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c47afe9fac56b71644c91ec91debd9a1f4424b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c47afe9fac56b71644c91ec91debd9a1f4424b1", "html_url": "https://github.com/rust-lang/rust/commit/9c47afe9fac56b71644c91ec91debd9a1f4424b1"}], "stats": {"total": 123, "additions": 73, "deletions": 50}, "files": [{"sha": "ebca8bccefc712cb8f1d50f5c8a9c2f617cd8b73", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55805ab4735aaaafb7082af238c0b3d98af138c7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55805ab4735aaaafb7082af238c0b3d98af138c7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=55805ab4735aaaafb7082af238c0b3d98af138c7", "patch": "@@ -2509,11 +2509,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     labeled_user_string\n                 );\n                 let pred = format!(\"{}: {}\", bound_kind, sub);\n-                let suggestion = format!(\n-                    \"{} {}\",\n-                    generics.add_where_or_trailing_comma(),\n-                    pred,\n-                );\n+                let suggestion = format!(\"{} {}\", generics.add_where_or_trailing_comma(), pred,);\n                 err.span_suggestion(\n                     generics.tail_span_for_predicate_suggestion(),\n                     \"consider adding a where clause\","}, {"sha": "020c5e0ce425833a2ab0e52f8dd9219296dcd1af", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 47, "deletions": 14, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/55805ab4735aaaafb7082af238c0b3d98af138c7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55805ab4735aaaafb7082af238c0b3d98af138c7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=55805ab4735aaaafb7082af238c0b3d98af138c7", "patch": "@@ -3,8 +3,8 @@\n use std::ops::ControlFlow;\n \n use crate::ty::{\n-    fold::TypeFoldable, Const, ConstKind, DefIdTree, ExistentialPredicate, InferTy, Ty, TyCtxt,\n-    TypeVisitor,\n+    fold::TypeFoldable, Const, ConstKind, DefIdTree, ExistentialPredicate, InferTy,\n+    PolyTraitPredicate, Ty, TyCtxt, TypeSuperFoldable, TypeVisitor,\n };\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -73,31 +73,53 @@ impl<'tcx> Ty<'tcx> {\n             _ => self.is_simple_ty(),\n         }\n     }\n+}\n+\n+pub trait IsSuggestable<'tcx> {\n+    fn is_suggestable(self, tcx: TyCtxt<'tcx>) -> bool;\n \n-    /// Whether the type can be safely suggested during error recovery.\n-    pub fn is_suggestable(self, tcx: TyCtxt<'tcx>) -> bool {\n-        self.visit_with(&mut IsSuggestableVisitor { tcx }).is_continue()\n+    fn is_suggestable_modulo_impl_trait(self, tcx: TyCtxt<'tcx>, bound_str: &str) -> bool;\n+}\n+\n+impl<'tcx, T> IsSuggestable<'tcx> for T\n+where\n+    T: TypeFoldable<'tcx>,\n+{\n+    fn is_suggestable(self, tcx: TyCtxt<'tcx>) -> bool {\n+        self.visit_with(&mut IsSuggestableVisitor { tcx, bound_str: None }).is_continue()\n+    }\n+\n+    fn is_suggestable_modulo_impl_trait(self, tcx: TyCtxt<'tcx>, bound_str: &str) -> bool {\n+        self.visit_with(&mut IsSuggestableVisitor { tcx, bound_str: Some(bound_str) }).is_continue()\n     }\n }\n \n-pub fn suggest_arbitrary_trait_bound(\n+pub fn suggest_arbitrary_trait_bound<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n     generics: &hir::Generics<'_>,\n     err: &mut Diagnostic,\n-    param_name: &str,\n-    constraint: &str,\n+    trait_pred: PolyTraitPredicate<'tcx>,\n ) -> bool {\n+    if !trait_pred.is_suggestable(tcx) {\n+        return false;\n+    }\n+\n+    let param_name = trait_pred.skip_binder().self_ty().to_string();\n+    let constraint = trait_pred.print_modifiers_and_trait_path().to_string();\n     let param = generics.params.iter().find(|p| p.name.ident().as_str() == param_name);\n-    match (param, param_name) {\n-        (Some(_), \"Self\") => return false,\n-        _ => {}\n+\n+    // Skip, there is a param named Self\n+    if param.is_some() && param_name == \"Self\" {\n+        return false;\n     }\n+\n     // Suggest a where clause bound for a non-type parameter.\n     err.span_suggestion_verbose(\n         generics.tail_span_for_predicate_suggestion(),\n         &format!(\n             \"consider {} `where` clause, but there might be an alternative better way to express \\\n              this requirement\",\n-             if generics.has_where_clause_token { \"extending the\" } else { \"introducing a\" },\n+            if generics.has_where_clause_token { \"extending the\" } else { \"introducing a\" },\n         ),\n         format!(\"{} {}: {}\", generics.add_where_or_trailing_comma(), param_name, constraint),\n         Applicability::MaybeIncorrect,\n@@ -395,11 +417,12 @@ impl<'v> hir::intravisit::Visitor<'v> for StaticLifetimeVisitor<'v> {\n     }\n }\n \n-pub struct IsSuggestableVisitor<'tcx> {\n+pub struct IsSuggestableVisitor<'tcx, 's> {\n     tcx: TyCtxt<'tcx>,\n+    bound_str: Option<&'s str>,\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for IsSuggestableVisitor<'tcx> {\n+impl<'tcx> TypeVisitor<'tcx> for IsSuggestableVisitor<'tcx, '_> {\n     type BreakTy = ();\n \n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -438,6 +461,16 @@ impl<'tcx> TypeVisitor<'tcx> for IsSuggestableVisitor<'tcx> {\n                 }\n             }\n \n+            Param(param) => {\n+                if let Some(found_bound_str) =\n+                    param.name.as_str().strip_prefix(\"impl \").map(|s| s.trim_start())\n+                {\n+                    if self.bound_str.map_or(true, |bound_str| bound_str != found_bound_str) {\n+                        return ControlFlow::Break(());\n+                    }\n+                }\n+            }\n+\n             _ => {}\n         }\n "}, {"sha": "fbdc72158563adbc3e66b43e1a5d84a054fc2f45", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/55805ab4735aaaafb7082af238c0b3d98af138c7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55805ab4735aaaafb7082af238c0b3d98af138c7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=55805ab4735aaaafb7082af238c0b3d98af138c7", "patch": "@@ -21,11 +21,9 @@ use rustc_hir::lang_items::LangItem;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind, Node};\n use rustc_middle::hir::map;\n use rustc_middle::ty::{\n-    self,\n-    subst::{GenericArgKind, SubstsRef},\n-    suggest_arbitrary_trait_bound, suggest_constraining_type_param, AdtKind, DefIdTree,\n-    GeneratorDiagnosticData, GeneratorInteriorTypeCause, Infer, InferTy, ToPredicate, Ty, TyCtxt,\n-    TypeFoldable,\n+    self, suggest_arbitrary_trait_bound, suggest_constraining_type_param, AdtKind, DefIdTree,\n+    GeneratorDiagnosticData, GeneratorInteriorTypeCause, Infer, InferTy, IsSuggestable,\n+    ToPredicate, Ty, TyCtxt, TypeFoldable,\n };\n use rustc_middle::ty::{TypeAndMut, TypeckResults};\n use rustc_session::Limit;\n@@ -358,11 +356,14 @@ fn suggest_restriction<'tcx>(\n             ty::Param(param) => {\n                 // `fn foo(t: impl Trait)`\n                 //                 ^^^^^ get this string\n-                param.name.as_str().strip_prefix(\"impl\").map(|s| (s.trim_start().to_string(), sig))\n+                param.name.as_str().strip_prefix(\"impl \").map(|s| (s.trim_start().to_string(), sig))\n             }\n             _ => None,\n         })\n     {\n+        if !trait_pred.is_suggestable_modulo_impl_trait(tcx, &bound_str) {\n+            return;\n+        }\n         // We know we have an `impl Trait` that doesn't satisfy a required projection.\n \n         // Find all of the occurrences of `impl Trait` for `Trait` in the function arguments'\n@@ -417,6 +418,9 @@ fn suggest_restriction<'tcx>(\n             Applicability::MaybeIncorrect,\n         );\n     } else {\n+        if !trait_pred.is_suggestable(tcx) {\n+            return;\n+        }\n         // Trivial case: `T` needs an extra bound: `T: Bound`.\n         let (sp, suggestion) = match (\n             generics\n@@ -463,16 +467,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             _ => (false, None),\n         };\n \n-        let generic_args_have_impl_trait = |args: SubstsRef<'tcx>| -> bool {\n-            args.iter().any(|arg| match arg.unpack() {\n-                GenericArgKind::Type(ty) => match ty.kind() {\n-                    ty::Param(param) => param.name.as_str().starts_with(\"impl\"),\n-                    _ => false,\n-                },\n-                _ => false,\n-            })\n-        };\n-\n         // FIXME: Add check for trait bound that is already present, particularly `?Sized` so we\n         //        don't suggest `T: Sized + ?Sized`.\n         let mut hir_id = body_id;\n@@ -574,6 +568,12 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 | hir::Node::ImplItem(hir::ImplItem { generics, .. })\n                     if param_ty =>\n                 {\n+                    if !trait_pred.skip_binder().trait_ref.substs[1..]\n+                        .iter()\n+                        .all(|g| g.is_suggestable(self.tcx))\n+                    {\n+                        return;\n+                    }\n                     // Missing generic type parameter bound.\n                     let param_name = self_ty.to_string();\n                     let constraint = with_no_trimmed_paths!(\n@@ -603,13 +603,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         | hir::ItemKind::TraitAlias(generics, _)\n                         | hir::ItemKind::OpaqueTy(hir::OpaqueTy { generics, .. }),\n                     ..\n-                }) if !param_ty\n-                    && !generic_args_have_impl_trait(trait_pred.skip_binder().trait_ref.substs) =>\n-                {\n+                }) if !param_ty => {\n                     // Missing generic type parameter bound.\n-                    let param_name = self_ty.to_string();\n-                    let constraint = trait_pred.print_modifiers_and_trait_path().to_string();\n-                    if suggest_arbitrary_trait_bound(generics, &mut err, &param_name, &constraint) {\n+                    if suggest_arbitrary_trait_bound(self.tcx, generics, &mut err, trait_pred) {\n                         return;\n                     }\n                 }"}, {"sha": "60682aa3435170215bdc6d6a37ccc4916cdd9d1c", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55805ab4735aaaafb7082af238c0b3d98af138c7/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55805ab4735aaaafb7082af238c0b3d98af138c7/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=55805ab4735aaaafb7082af238c0b3d98af138c7", "patch": "@@ -13,7 +13,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::GenericArg;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::ty::{\n-    self, subst, subst::SubstsRef, GenericParamDef, GenericParamDefKind, Ty, TyCtxt,\n+    self, subst, subst::SubstsRef, GenericParamDef, GenericParamDefKind, IsSuggestable, Ty, TyCtxt,\n };\n use rustc_session::lint::builtin::LATE_BOUND_LIFETIME_ARGUMENTS;\n use rustc_span::{symbol::kw, Span};"}, {"sha": "b5025b794bb0d2c26890887cdd08028ddfbdd106", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55805ab4735aaaafb7082af238c0b3d98af138c7/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55805ab4735aaaafb7082af238c0b3d98af138c7/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=55805ab4735aaaafb7082af238c0b3d98af138c7", "patch": "@@ -27,7 +27,9 @@ use rustc_hir::{GenericArg, GenericArgs, OpaqueTyOrigin};\n use rustc_middle::middle::stability::AllowUnstable;\n use rustc_middle::ty::subst::{self, GenericArgKind, InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n-use rustc_middle::ty::{self, Const, DefIdTree, EarlyBinder, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{\n+    self, Const, DefIdTree, EarlyBinder, IsSuggestable, Ty, TyCtxt, TypeFoldable,\n+};\n use rustc_session::lint::builtin::{AMBIGUOUS_ASSOCIATED_ITEMS, BARE_TRAIT_OBJECTS};\n use rustc_span::edition::Edition;\n use rustc_span::lev_distance::find_best_match_for_name;"}, {"sha": "99c766d54c8aa5cefaafdf48f5221072850e1c2a", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55805ab4735aaaafb7082af238c0b3d98af138c7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55805ab4735aaaafb7082af238c0b3d98af138c7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=55805ab4735aaaafb7082af238c0b3d98af138c7", "patch": "@@ -15,7 +15,7 @@ use rustc_infer::infer::{self, TyCtxtInferExt};\n use rustc_infer::traits;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n-use rustc_middle::ty::{self, Binder, ToPredicate, Ty};\n+use rustc_middle::ty::{self, Binder, IsSuggestable, ToPredicate, Ty};\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;"}, {"sha": "5f6ddc1e1c94a96469b542ad9d2fdd14377b0491", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55805ab4735aaaafb7082af238c0b3d98af138c7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55805ab4735aaaafb7082af238c0b3d98af138c7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=55805ab4735aaaafb7082af238c0b3d98af138c7", "patch": "@@ -817,11 +817,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                  trait bound{s}\",\n                                 s = pluralize!(obligations.len())\n                             ),\n-                            format!(\n-                                \"{} {}\",\n-                                add_where_or_comma,\n-                                obligations.join(\", \")\n-                            ),\n+                            format!(\"{} {}\", add_where_or_comma, obligations.join(\", \")),\n                             Applicability::MaybeIncorrect,\n                         );\n                     }"}, {"sha": "5a70dc1e594a3bc3df2804d8dff5019397057481", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55805ab4735aaaafb7082af238c0b3d98af138c7/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55805ab4735aaaafb7082af238c0b3d98af138c7/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=55805ab4735aaaafb7082af238c0b3d98af138c7", "patch": "@@ -39,7 +39,7 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::Discr;\n use rustc_middle::ty::util::IntTypeExt;\n-use rustc_middle::ty::{self, AdtKind, Const, DefIdTree, Ty, TyCtxt};\n+use rustc_middle::ty::{self, AdtKind, Const, DefIdTree, IsSuggestable, Ty, TyCtxt};\n use rustc_middle::ty::{ReprOptions, ToPredicate};\n use rustc_session::lint;\n use rustc_session::parse::feature_err;"}]}