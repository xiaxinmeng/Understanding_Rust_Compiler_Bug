{"sha": "ba60af3bbdde527c7944e67218bff4c6b283ad3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNjBhZjNiYmRkZTUyN2M3OTQ0ZTY3MjE4YmZmNGM2YjI4M2FkM2I=", "commit": {"author": {"name": "Chris Krycho", "email": "chris@chriskrycho.com", "date": "2016-11-22T01:19:52Z"}, "committer": {"name": "Chris Krycho", "email": "chris@chriskrycho.com", "date": "2017-01-04T00:03:35Z"}, "message": "Document RFC 1623: static lifetime elision.", "tree": {"sha": "98d125ddab860adbc6ff7d25220cf66f66257e8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98d125ddab860adbc6ff7d25220cf66f66257e8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba60af3bbdde527c7944e67218bff4c6b283ad3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba60af3bbdde527c7944e67218bff4c6b283ad3b", "html_url": "https://github.com/rust-lang/rust/commit/ba60af3bbdde527c7944e67218bff4c6b283ad3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba60af3bbdde527c7944e67218bff4c6b283ad3b/comments", "author": {"login": "chriskrycho", "id": 2403023, "node_id": "MDQ6VXNlcjI0MDMwMjM=", "avatar_url": "https://avatars.githubusercontent.com/u/2403023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chriskrycho", "html_url": "https://github.com/chriskrycho", "followers_url": "https://api.github.com/users/chriskrycho/followers", "following_url": "https://api.github.com/users/chriskrycho/following{/other_user}", "gists_url": "https://api.github.com/users/chriskrycho/gists{/gist_id}", "starred_url": "https://api.github.com/users/chriskrycho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chriskrycho/subscriptions", "organizations_url": "https://api.github.com/users/chriskrycho/orgs", "repos_url": "https://api.github.com/users/chriskrycho/repos", "events_url": "https://api.github.com/users/chriskrycho/events{/privacy}", "received_events_url": "https://api.github.com/users/chriskrycho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chriskrycho", "id": 2403023, "node_id": "MDQ6VXNlcjI0MDMwMjM=", "avatar_url": "https://avatars.githubusercontent.com/u/2403023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chriskrycho", "html_url": "https://github.com/chriskrycho", "followers_url": "https://api.github.com/users/chriskrycho/followers", "following_url": "https://api.github.com/users/chriskrycho/following{/other_user}", "gists_url": "https://api.github.com/users/chriskrycho/gists{/gist_id}", "starred_url": "https://api.github.com/users/chriskrycho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chriskrycho/subscriptions", "organizations_url": "https://api.github.com/users/chriskrycho/orgs", "repos_url": "https://api.github.com/users/chriskrycho/repos", "events_url": "https://api.github.com/users/chriskrycho/events{/privacy}", "received_events_url": "https://api.github.com/users/chriskrycho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7766b509b36f8abba7eca3eb4a0d9e3e8ee01a3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7766b509b36f8abba7eca3eb4a0d9e3e8ee01a3f", "html_url": "https://github.com/rust-lang/rust/commit/7766b509b36f8abba7eca3eb4a0d9e3e8ee01a3f"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "713e6f1ab99eb67ba214986eea40a5a5e4386ea4", "filename": "src/doc/reference.md", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ba60af3bbdde527c7944e67218bff4c6b283ad3b/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/ba60af3bbdde527c7944e67218bff4c6b283ad3b/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=ba60af3bbdde527c7944e67218bff4c6b283ad3b", "patch": "@@ -1271,15 +1271,16 @@ guaranteed to refer to the same memory address.\n \n Constant values must not have destructors, and otherwise permit most forms of\n data. Constants may refer to the address of other constants, in which case the\n-address will have the `static` lifetime. The compiler is, however, still at\n+address will have the `static` lifetime. (See below on [static lifetime\n+elision](#static-lifetime-elision).) The compiler is, however, still at \n liberty to translate the constant many times, so the address referred to may not\n be stable.\n \n Constants must be explicitly typed. The type may be `bool`, `char`, a number, or\n a type derived from those primitive types. The derived types are references with\n the `static` lifetime, fixed-size arrays, tuples, enum variants, and structs.\n \n-```\n+```rust\n const BIT1: u32 = 1 << 0;\n const BIT2: u32 = 1 << 1;\n \n@@ -1331,7 +1332,7 @@ running in the same process.\n Mutable statics are still very useful, however. They can be used with C\n libraries and can also be bound from C libraries (in an `extern` block).\n \n-```\n+```rust\n # fn atomic_add(_: &mut u32, _: u32) -> u32 { 2 }\n \n static mut LEVELS: u32 = 0;\n@@ -1355,6 +1356,31 @@ unsafe fn bump_levels_unsafe2() -> u32 {\n Mutable statics have the same restrictions as normal statics, except that the\n type of the value is not required to ascribe to `Sync`.\n \n+#### `'static` lifetime elision\n+\n+Both constant and static declarations of reference types have *implicit*\n+`'static` lifetimes unless an explicit lifetime is specified. As such, the\n+constant declarations involving `'static` above may be written without the\n+lifetimes. Returning to our previous example:\n+\n+```rust\n+const BIT1: u32 = 1 << 0;\n+const BIT2: u32 = 1 << 1;\n+\n+const BITS: [u32; 2] = [BIT1, BIT2];\n+const STRING: &str = \"bitstring\";\n+\n+struct BitsNStrings<'a> {\n+    mybits: [u32; 2],\n+    mystring: &'a str,\n+}\n+\n+const BITS_N_STRINGS: BitsNStrings = BitsNStrings {\n+    mybits: BITS,\n+    mystring: STRING,\n+};\n+```\n+\n ### Traits\n \n A _trait_ describes an abstract interface that types can\n@@ -2458,9 +2484,6 @@ The currently implemented features of the reference compiler are:\n             into a Rust program. This capability, especially the signature for the\n             annotated function, is subject to change.\n \n-* `static_in_const` - Enables lifetime elision with a `'static` default for\n-                      `const` and `static` item declarations.\n-\n * `thread_local` - The usage of the `#[thread_local]` attribute is experimental\n                    and should be seen as unstable. This attribute is used to\n                    declare a `static` as being unique per-thread leveraging"}]}