{"sha": "5d8a3e8724f587c6b2a888087a3643ead5534fde", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkOGEzZTg3MjRmNTg3YzZiMmE4ODgwODdhMzY0M2VhZDU1MzRmZGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-27T02:29:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-27T02:29:49Z"}, "message": "Auto merge of #5506 - ebroto:mismatched_target_os, r=flip1995\n\nImplement mismatched_target_os lint\n\nI've extended the check suggested in the issue to all the currently supported operating systems instead of limiting it to `linux` and `macos`, let me know if we want to do this.\n\nAlso, I've restored the text `There are over XXX lints ...` in the README as it was matched against by `cargo dev new_lint`.\n\nchangelog: Added `mismatched_target_os` lint to warn when an operating system is used in target family position in a #[cfg] attribute\n\nCloses #3949", "tree": {"sha": "b855670a12db4b0c6b8fee1b182508be38e962fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b855670a12db4b0c6b8fee1b182508be38e962fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d8a3e8724f587c6b2a888087a3643ead5534fde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d8a3e8724f587c6b2a888087a3643ead5534fde", "html_url": "https://github.com/rust-lang/rust/commit/5d8a3e8724f587c6b2a888087a3643ead5534fde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d8a3e8724f587c6b2a888087a3643ead5534fde/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87a6f3fc2c3300ee7ea165ff7da7c085f534b142", "url": "https://api.github.com/repos/rust-lang/rust/commits/87a6f3fc2c3300ee7ea165ff7da7c085f534b142", "html_url": "https://github.com/rust-lang/rust/commit/87a6f3fc2c3300ee7ea165ff7da7c085f534b142"}, {"sha": "303e7d1af8f1a2eb0c584e94f4392104227a9392", "url": "https://api.github.com/repos/rust-lang/rust/commits/303e7d1af8f1a2eb0c584e94f4392104227a9392", "html_url": "https://github.com/rust-lang/rust/commit/303e7d1af8f1a2eb0c584e94f4392104227a9392"}], "stats": {"total": 610, "additions": 582, "deletions": 28}, "files": [{"sha": "847a8d86e177ddc1eb89b0cf5a1e2bb47c4002aa", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d8a3e8724f587c6b2a888087a3643ead5534fde/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/5d8a3e8724f587c6b2a888087a3643ead5534fde/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=5d8a3e8724f587c6b2a888087a3643ead5534fde", "patch": "@@ -1444,6 +1444,7 @@ Released 2018-09-13\n [`mem_replace_with_uninit`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_uninit\n [`min_max`]: https://rust-lang.github.io/rust-clippy/master/index.html#min_max\n [`misaligned_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#misaligned_transmute\n+[`mismatched_target_os`]: https://rust-lang.github.io/rust-clippy/master/index.html#mismatched_target_os\n [`misrefactored_assign_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#misrefactored_assign_op\n [`missing_const_for_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn\n [`missing_docs_in_private_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items"}, {"sha": "6431e0d6132b1a2cd4f84cbb96c81094e0c93b3b", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 152, "deletions": 27, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/5d8a3e8724f587c6b2a888087a3643ead5534fde/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d8a3e8724f587c6b2a888087a3643ead5534fde/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=5d8a3e8724f587c6b2a888087a3643ead5534fde", "patch": "@@ -20,6 +20,28 @@ use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n use semver::Version;\n \n+static UNIX_SYSTEMS: &[&str] = &[\n+    \"android\",\n+    \"dragonfly\",\n+    \"emscripten\",\n+    \"freebsd\",\n+    \"fuchsia\",\n+    \"haiku\",\n+    \"illumos\",\n+    \"ios\",\n+    \"l4re\",\n+    \"linux\",\n+    \"macos\",\n+    \"netbsd\",\n+    \"openbsd\",\n+    \"redox\",\n+    \"solaris\",\n+    \"vxworks\",\n+];\n+\n+// NOTE: windows is excluded from the list because it's also a valid target family.\n+static NON_UNIX_SYSTEMS: &[&str] = &[\"cloudabi\", \"hermit\", \"none\", \"wasi\"];\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for items annotated with `#[inline(always)]`,\n     /// unless the annotated function is empty or simply panics.\n@@ -189,6 +211,38 @@ declare_clippy_lint! {\n     \"usage of `cfg_attr(rustfmt)` instead of tool attributes\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for cfg attributes having operating systems used in target family position.\n+    ///\n+    /// **Why is this bad?** The configuration option will not be recognised and the related item will not be included\n+    /// by the conditional compilation engine.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// Bad:\n+    /// ```rust\n+    /// #[cfg(linux)]\n+    /// fn conditional() { }\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust\n+    /// #[cfg(target_os = \"linux\")]\n+    /// fn conditional() { }\n+    /// ```\n+    ///\n+    /// Or:\n+    /// ```rust\n+    /// #[cfg(unix)]\n+    /// fn conditional() { }\n+    /// ```\n+    pub MISMATCHED_TARGET_OS,\n+    correctness,\n+    \"usage of `cfg(operating_system)` instead of `cfg(target_os = \\\"operating_system\\\")`\"\n+}\n+\n declare_lint_pass!(Attributes => [\n     INLINE_ALWAYS,\n     DEPRECATED_SEMVER,\n@@ -496,36 +550,107 @@ fn is_word(nmi: &NestedMetaItem, expected: Symbol) -> bool {\n     }\n }\n \n-declare_lint_pass!(DeprecatedCfgAttribute => [DEPRECATED_CFG_ATTR]);\n+declare_lint_pass!(EarlyAttributes => [DEPRECATED_CFG_ATTR, MISMATCHED_TARGET_OS]);\n \n-impl EarlyLintPass for DeprecatedCfgAttribute {\n+impl EarlyLintPass for EarlyAttributes {\n     fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &Attribute) {\n-        if_chain! {\n-            // check cfg_attr\n-            if attr.check_name(sym!(cfg_attr));\n-            if let Some(items) = attr.meta_item_list();\n-            if items.len() == 2;\n-            // check for `rustfmt`\n-            if let Some(feature_item) = items[0].meta_item();\n-            if feature_item.check_name(sym!(rustfmt));\n-            // check for `rustfmt_skip` and `rustfmt::skip`\n-            if let Some(skip_item) = &items[1].meta_item();\n-            if skip_item.check_name(sym!(rustfmt_skip)) ||\n-                skip_item.path.segments.last().expect(\"empty path in attribute\").ident.name == sym!(skip);\n-            // Only lint outer attributes, because custom inner attributes are unstable\n-            // Tracking issue: https://github.com/rust-lang/rust/issues/54726\n-            if let AttrStyle::Outer = attr.style;\n-            then {\n-                span_lint_and_sugg(\n-                    cx,\n-                    DEPRECATED_CFG_ATTR,\n-                    attr.span,\n-                    \"`cfg_attr` is deprecated for rustfmt and got replaced by tool attributes\",\n-                    \"use\",\n-                    \"#[rustfmt::skip]\".to_string(),\n-                    Applicability::MachineApplicable,\n-                );\n+        check_deprecated_cfg_attr(cx, attr);\n+        check_mismatched_target_os(cx, attr);\n+    }\n+}\n+\n+fn check_deprecated_cfg_attr(cx: &EarlyContext<'_>, attr: &Attribute) {\n+    if_chain! {\n+        // check cfg_attr\n+        if attr.check_name(sym!(cfg_attr));\n+        if let Some(items) = attr.meta_item_list();\n+        if items.len() == 2;\n+        // check for `rustfmt`\n+        if let Some(feature_item) = items[0].meta_item();\n+        if feature_item.check_name(sym!(rustfmt));\n+        // check for `rustfmt_skip` and `rustfmt::skip`\n+        if let Some(skip_item) = &items[1].meta_item();\n+        if skip_item.check_name(sym!(rustfmt_skip)) ||\n+            skip_item.path.segments.last().expect(\"empty path in attribute\").ident.name == sym!(skip);\n+        // Only lint outer attributes, because custom inner attributes are unstable\n+        // Tracking issue: https://github.com/rust-lang/rust/issues/54726\n+        if let AttrStyle::Outer = attr.style;\n+        then {\n+            span_lint_and_sugg(\n+                cx,\n+                DEPRECATED_CFG_ATTR,\n+                attr.span,\n+                \"`cfg_attr` is deprecated for rustfmt and got replaced by tool attributes\",\n+                \"use\",\n+                \"#[rustfmt::skip]\".to_string(),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}\n+\n+fn check_mismatched_target_os(cx: &EarlyContext<'_>, attr: &Attribute) {\n+    fn find_os(name: &str) -> Option<&'static str> {\n+        UNIX_SYSTEMS\n+            .iter()\n+            .chain(NON_UNIX_SYSTEMS.iter())\n+            .find(|&&os| os == name)\n+            .copied()\n+    }\n+\n+    fn is_unix(name: &str) -> bool {\n+        UNIX_SYSTEMS.iter().any(|&os| os == name)\n+    }\n+\n+    fn find_mismatched_target_os(items: &[NestedMetaItem]) -> Vec<(&str, Span)> {\n+        let mut mismatched = Vec::new();\n+\n+        for item in items {\n+            if let NestedMetaItem::MetaItem(meta) = item {\n+                match &meta.kind {\n+                    MetaItemKind::List(list) => {\n+                        mismatched.extend(find_mismatched_target_os(&list));\n+                    },\n+                    MetaItemKind::Word => {\n+                        if_chain! {\n+                            if let Some(ident) = meta.ident();\n+                            if let Some(os) = find_os(&*ident.name.as_str());\n+                            then {\n+                                mismatched.push((os, ident.span));\n+                            }\n+                        }\n+                    },\n+                    _ => {},\n+                }\n             }\n         }\n+\n+        mismatched\n+    }\n+\n+    if_chain! {\n+        if attr.check_name(sym!(cfg));\n+        if let Some(list) = attr.meta_item_list();\n+        let mismatched = find_mismatched_target_os(&list);\n+        if !mismatched.is_empty();\n+        then {\n+            let mess = \"operating system used in target family position\";\n+\n+            span_lint_and_then(cx, MISMATCHED_TARGET_OS, attr.span, &mess, |diag| {\n+                // Avoid showing the unix suggestion multiple times in case\n+                // we have more than one mismatch for unix-like systems\n+                let mut unix_suggested = false;\n+\n+                for (os, span) in mismatched {\n+                    let sugg = format!(\"target_os = \\\"{}\\\"\", os);\n+                    diag.span_suggestion(span, \"try\", sugg, Applicability::MaybeIncorrect);\n+\n+                    if !unix_suggested && is_unix(os) {\n+                        diag.help(\"Did you mean `unix`?\");\n+                        unix_suggested = true;\n+                    }\n+                }\n+            });\n+        }\n     }\n }"}, {"sha": "4daaf9a98208bda5da3e71d002c484268d1912c4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5d8a3e8724f587c6b2a888087a3643ead5534fde/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d8a3e8724f587c6b2a888087a3643ead5534fde/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=5d8a3e8724f587c6b2a888087a3643ead5534fde", "patch": "@@ -350,7 +350,7 @@ pub fn register_pre_expansion_lints(store: &mut rustc_lint::LintStore, conf: &Co\n     store.register_pre_expansion_pass(move || box non_expressive_names::NonExpressiveNames {\n         single_char_binding_names_threshold,\n     });\n-    store.register_pre_expansion_pass(|| box attrs::DeprecatedCfgAttribute);\n+    store.register_pre_expansion_pass(|| box attrs::EarlyAttributes);\n     store.register_pre_expansion_pass(|| box dbg_macro::DbgMacro);\n }\n \n@@ -496,6 +496,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &attrs::DEPRECATED_SEMVER,\n         &attrs::EMPTY_LINE_AFTER_OUTER_ATTR,\n         &attrs::INLINE_ALWAYS,\n+        &attrs::MISMATCHED_TARGET_OS,\n         &attrs::UNKNOWN_CLIPPY_LINTS,\n         &attrs::USELESS_ATTRIBUTE,\n         &await_holding_lock::AWAIT_HOLDING_LOCK,\n@@ -1190,6 +1191,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&atomic_ordering::INVALID_ATOMIC_ORDERING),\n         LintId::of(&attrs::DEPRECATED_CFG_ATTR),\n         LintId::of(&attrs::DEPRECATED_SEMVER),\n+        LintId::of(&attrs::MISMATCHED_TARGET_OS),\n         LintId::of(&attrs::UNKNOWN_CLIPPY_LINTS),\n         LintId::of(&attrs::USELESS_ATTRIBUTE),\n         LintId::of(&bit_mask::BAD_BIT_MASK),\n@@ -1610,6 +1612,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&approx_const::APPROX_CONSTANT),\n         LintId::of(&atomic_ordering::INVALID_ATOMIC_ORDERING),\n         LintId::of(&attrs::DEPRECATED_SEMVER),\n+        LintId::of(&attrs::MISMATCHED_TARGET_OS),\n         LintId::of(&attrs::USELESS_ATTRIBUTE),\n         LintId::of(&bit_mask::BAD_BIT_MASK),\n         LintId::of(&bit_mask::INEFFECTIVE_BIT_MASK),"}, {"sha": "c6c388ee9f086d8ddf06905fd3292874074a1290", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5d8a3e8724f587c6b2a888087a3643ead5534fde/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d8a3e8724f587c6b2a888087a3643ead5534fde/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=5d8a3e8724f587c6b2a888087a3643ead5534fde", "patch": "@@ -1228,6 +1228,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"minmax\",\n     },\n+    Lint {\n+        name: \"mismatched_target_os\",\n+        group: \"correctness\",\n+        desc: \"usage of `cfg(operating_system)` instead of `cfg(target_os = \\\"operating_system\\\")`\",\n+        deprecation: None,\n+        module: \"attrs\",\n+    },\n     Lint {\n         name: \"misrefactored_assign_op\",\n         group: \"complexity\","}, {"sha": "3ee77dcac31a0d6b3658fb4104147ab0a41402ef", "filename": "tests/ui/mismatched_target_os_non_unix.fixed", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5d8a3e8724f587c6b2a888087a3643ead5534fde/tests%2Fui%2Fmismatched_target_os_non_unix.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5d8a3e8724f587c6b2a888087a3643ead5534fde/tests%2Fui%2Fmismatched_target_os_non_unix.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_target_os_non_unix.fixed?ref=5d8a3e8724f587c6b2a888087a3643ead5534fde", "patch": "@@ -0,0 +1,30 @@\n+// run-rustfix\n+\n+#![warn(clippy::mismatched_target_os)]\n+#![allow(unused)]\n+\n+#[cfg(target_os = \"cloudabi\")]\n+fn cloudabi() {}\n+\n+#[cfg(target_os = \"hermit\")]\n+fn hermit() {}\n+\n+#[cfg(target_os = \"wasi\")]\n+fn wasi() {}\n+\n+#[cfg(target_os = \"none\")]\n+fn none() {}\n+\n+// list with conditions\n+#[cfg(all(not(any(windows, target_os = \"cloudabi\")), target_os = \"wasi\"))]\n+fn list() {}\n+\n+// windows is a valid target family, should be ignored\n+#[cfg(windows)]\n+fn windows() {}\n+\n+// correct use, should be ignored\n+#[cfg(target_os = \"hermit\")]\n+fn correct() {}\n+\n+fn main() {}"}, {"sha": "9cc411418e4c4d979ca53f274aab55a803558226", "filename": "tests/ui/mismatched_target_os_non_unix.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5d8a3e8724f587c6b2a888087a3643ead5534fde/tests%2Fui%2Fmismatched_target_os_non_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d8a3e8724f587c6b2a888087a3643ead5534fde/tests%2Fui%2Fmismatched_target_os_non_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_target_os_non_unix.rs?ref=5d8a3e8724f587c6b2a888087a3643ead5534fde", "patch": "@@ -0,0 +1,30 @@\n+// run-rustfix\n+\n+#![warn(clippy::mismatched_target_os)]\n+#![allow(unused)]\n+\n+#[cfg(cloudabi)]\n+fn cloudabi() {}\n+\n+#[cfg(hermit)]\n+fn hermit() {}\n+\n+#[cfg(wasi)]\n+fn wasi() {}\n+\n+#[cfg(none)]\n+fn none() {}\n+\n+// list with conditions\n+#[cfg(all(not(any(windows, cloudabi)), wasi))]\n+fn list() {}\n+\n+// windows is a valid target family, should be ignored\n+#[cfg(windows)]\n+fn windows() {}\n+\n+// correct use, should be ignored\n+#[cfg(target_os = \"hermit\")]\n+fn correct() {}\n+\n+fn main() {}"}, {"sha": "78fc27752d239bcc9d57f2c54139b19503d9bc97", "filename": "tests/ui/mismatched_target_os_non_unix.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5d8a3e8724f587c6b2a888087a3643ead5534fde/tests%2Fui%2Fmismatched_target_os_non_unix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d8a3e8724f587c6b2a888087a3643ead5534fde/tests%2Fui%2Fmismatched_target_os_non_unix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_target_os_non_unix.stderr?ref=5d8a3e8724f587c6b2a888087a3643ead5534fde", "patch": "@@ -0,0 +1,51 @@\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os_non_unix.rs:6:1\n+   |\n+LL | #[cfg(cloudabi)]\n+   | ^^^^^^--------^^\n+   |       |\n+   |       help: try: `target_os = \"cloudabi\"`\n+   |\n+   = note: `-D clippy::mismatched-target-os` implied by `-D warnings`\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os_non_unix.rs:9:1\n+   |\n+LL | #[cfg(hermit)]\n+   | ^^^^^^------^^\n+   |       |\n+   |       help: try: `target_os = \"hermit\"`\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os_non_unix.rs:12:1\n+   |\n+LL | #[cfg(wasi)]\n+   | ^^^^^^----^^\n+   |       |\n+   |       help: try: `target_os = \"wasi\"`\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os_non_unix.rs:15:1\n+   |\n+LL | #[cfg(none)]\n+   | ^^^^^^----^^\n+   |       |\n+   |       help: try: `target_os = \"none\"`\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os_non_unix.rs:19:1\n+   |\n+LL | #[cfg(all(not(any(windows, cloudabi)), wasi))]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |\n+LL | #[cfg(all(not(any(windows, target_os = \"cloudabi\")), wasi))]\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^\n+help: try\n+   |\n+LL | #[cfg(all(not(any(windows, cloudabi)), target_os = \"wasi\"))]\n+   |                                        ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "7d9d406d99dfcabf0828ed6eb5f1b3125f916f7e", "filename": "tests/ui/mismatched_target_os_unix.fixed", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/5d8a3e8724f587c6b2a888087a3643ead5534fde/tests%2Fui%2Fmismatched_target_os_unix.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5d8a3e8724f587c6b2a888087a3643ead5534fde/tests%2Fui%2Fmismatched_target_os_unix.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_target_os_unix.fixed?ref=5d8a3e8724f587c6b2a888087a3643ead5534fde", "patch": "@@ -0,0 +1,62 @@\n+// run-rustfix\n+\n+#![warn(clippy::mismatched_target_os)]\n+#![allow(unused)]\n+\n+#[cfg(target_os = \"linux\")]\n+fn linux() {}\n+\n+#[cfg(target_os = \"freebsd\")]\n+fn freebsd() {}\n+\n+#[cfg(target_os = \"dragonfly\")]\n+fn dragonfly() {}\n+\n+#[cfg(target_os = \"openbsd\")]\n+fn openbsd() {}\n+\n+#[cfg(target_os = \"netbsd\")]\n+fn netbsd() {}\n+\n+#[cfg(target_os = \"macos\")]\n+fn macos() {}\n+\n+#[cfg(target_os = \"ios\")]\n+fn ios() {}\n+\n+#[cfg(target_os = \"android\")]\n+fn android() {}\n+\n+#[cfg(target_os = \"emscripten\")]\n+fn emscripten() {}\n+\n+#[cfg(target_os = \"fuchsia\")]\n+fn fuchsia() {}\n+\n+#[cfg(target_os = \"haiku\")]\n+fn haiku() {}\n+\n+#[cfg(target_os = \"illumos\")]\n+fn illumos() {}\n+\n+#[cfg(target_os = \"l4re\")]\n+fn l4re() {}\n+\n+#[cfg(target_os = \"redox\")]\n+fn redox() {}\n+\n+#[cfg(target_os = \"solaris\")]\n+fn solaris() {}\n+\n+#[cfg(target_os = \"vxworks\")]\n+fn vxworks() {}\n+\n+// list with conditions\n+#[cfg(all(not(any(target_os = \"solaris\", target_os = \"linux\")), target_os = \"freebsd\"))]\n+fn list() {}\n+\n+// correct use, should be ignored\n+#[cfg(target_os = \"freebsd\")]\n+fn correct() {}\n+\n+fn main() {}"}, {"sha": "c1177f1eedc62153ad9eb2c48596fdffc9b346fc", "filename": "tests/ui/mismatched_target_os_unix.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/5d8a3e8724f587c6b2a888087a3643ead5534fde/tests%2Fui%2Fmismatched_target_os_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d8a3e8724f587c6b2a888087a3643ead5534fde/tests%2Fui%2Fmismatched_target_os_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_target_os_unix.rs?ref=5d8a3e8724f587c6b2a888087a3643ead5534fde", "patch": "@@ -0,0 +1,62 @@\n+// run-rustfix\n+\n+#![warn(clippy::mismatched_target_os)]\n+#![allow(unused)]\n+\n+#[cfg(linux)]\n+fn linux() {}\n+\n+#[cfg(freebsd)]\n+fn freebsd() {}\n+\n+#[cfg(dragonfly)]\n+fn dragonfly() {}\n+\n+#[cfg(openbsd)]\n+fn openbsd() {}\n+\n+#[cfg(netbsd)]\n+fn netbsd() {}\n+\n+#[cfg(macos)]\n+fn macos() {}\n+\n+#[cfg(ios)]\n+fn ios() {}\n+\n+#[cfg(android)]\n+fn android() {}\n+\n+#[cfg(emscripten)]\n+fn emscripten() {}\n+\n+#[cfg(fuchsia)]\n+fn fuchsia() {}\n+\n+#[cfg(haiku)]\n+fn haiku() {}\n+\n+#[cfg(illumos)]\n+fn illumos() {}\n+\n+#[cfg(l4re)]\n+fn l4re() {}\n+\n+#[cfg(redox)]\n+fn redox() {}\n+\n+#[cfg(solaris)]\n+fn solaris() {}\n+\n+#[cfg(vxworks)]\n+fn vxworks() {}\n+\n+// list with conditions\n+#[cfg(all(not(any(solaris, linux)), freebsd))]\n+fn list() {}\n+\n+// correct use, should be ignored\n+#[cfg(target_os = \"freebsd\")]\n+fn correct() {}\n+\n+fn main() {}"}, {"sha": "fe9aeedb59c45b80b8b7d3b609e0841363fd98b2", "filename": "tests/ui/mismatched_target_os_unix.stderr", "status": "added", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/5d8a3e8724f587c6b2a888087a3643ead5534fde/tests%2Fui%2Fmismatched_target_os_unix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d8a3e8724f587c6b2a888087a3643ead5534fde/tests%2Fui%2Fmismatched_target_os_unix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_target_os_unix.stderr?ref=5d8a3e8724f587c6b2a888087a3643ead5534fde", "patch": "@@ -0,0 +1,183 @@\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os_unix.rs:6:1\n+   |\n+LL | #[cfg(linux)]\n+   | ^^^^^^-----^^\n+   |       |\n+   |       help: try: `target_os = \"linux\"`\n+   |\n+   = note: `-D clippy::mismatched-target-os` implied by `-D warnings`\n+   = help: Did you mean `unix`?\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os_unix.rs:9:1\n+   |\n+LL | #[cfg(freebsd)]\n+   | ^^^^^^-------^^\n+   |       |\n+   |       help: try: `target_os = \"freebsd\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os_unix.rs:12:1\n+   |\n+LL | #[cfg(dragonfly)]\n+   | ^^^^^^---------^^\n+   |       |\n+   |       help: try: `target_os = \"dragonfly\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os_unix.rs:15:1\n+   |\n+LL | #[cfg(openbsd)]\n+   | ^^^^^^-------^^\n+   |       |\n+   |       help: try: `target_os = \"openbsd\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os_unix.rs:18:1\n+   |\n+LL | #[cfg(netbsd)]\n+   | ^^^^^^------^^\n+   |       |\n+   |       help: try: `target_os = \"netbsd\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os_unix.rs:21:1\n+   |\n+LL | #[cfg(macos)]\n+   | ^^^^^^-----^^\n+   |       |\n+   |       help: try: `target_os = \"macos\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os_unix.rs:24:1\n+   |\n+LL | #[cfg(ios)]\n+   | ^^^^^^---^^\n+   |       |\n+   |       help: try: `target_os = \"ios\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os_unix.rs:27:1\n+   |\n+LL | #[cfg(android)]\n+   | ^^^^^^-------^^\n+   |       |\n+   |       help: try: `target_os = \"android\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os_unix.rs:30:1\n+   |\n+LL | #[cfg(emscripten)]\n+   | ^^^^^^----------^^\n+   |       |\n+   |       help: try: `target_os = \"emscripten\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os_unix.rs:33:1\n+   |\n+LL | #[cfg(fuchsia)]\n+   | ^^^^^^-------^^\n+   |       |\n+   |       help: try: `target_os = \"fuchsia\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os_unix.rs:36:1\n+   |\n+LL | #[cfg(haiku)]\n+   | ^^^^^^-----^^\n+   |       |\n+   |       help: try: `target_os = \"haiku\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os_unix.rs:39:1\n+   |\n+LL | #[cfg(illumos)]\n+   | ^^^^^^-------^^\n+   |       |\n+   |       help: try: `target_os = \"illumos\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os_unix.rs:42:1\n+   |\n+LL | #[cfg(l4re)]\n+   | ^^^^^^----^^\n+   |       |\n+   |       help: try: `target_os = \"l4re\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os_unix.rs:45:1\n+   |\n+LL | #[cfg(redox)]\n+   | ^^^^^^-----^^\n+   |       |\n+   |       help: try: `target_os = \"redox\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os_unix.rs:48:1\n+   |\n+LL | #[cfg(solaris)]\n+   | ^^^^^^-------^^\n+   |       |\n+   |       help: try: `target_os = \"solaris\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os_unix.rs:51:1\n+   |\n+LL | #[cfg(vxworks)]\n+   | ^^^^^^-------^^\n+   |       |\n+   |       help: try: `target_os = \"vxworks\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: operating system used in target family position\n+  --> $DIR/mismatched_target_os_unix.rs:55:1\n+   |\n+LL | #[cfg(all(not(any(solaris, linux)), freebsd))]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Did you mean `unix`?\n+help: try\n+   |\n+LL | #[cfg(all(not(any(target_os = \"solaris\", linux)), freebsd))]\n+   |                   ^^^^^^^^^^^^^^^^^^^^^\n+help: try\n+   |\n+LL | #[cfg(all(not(any(solaris, target_os = \"linux\")), freebsd))]\n+   |                            ^^^^^^^^^^^^^^^^^^^\n+help: try\n+   |\n+LL | #[cfg(all(not(any(solaris, linux)), target_os = \"freebsd\"))]\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 17 previous errors\n+"}]}