{"sha": "bc2f9259e609d6027a651c790ccf76f62ab5cd34", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMmY5MjU5ZTYwOWQ2MDI3YTY1MWM3OTBjY2Y3NmY2MmFiNWNkMzQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-09-08T17:10:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-09-09T09:18:02Z"}, "message": "rustup", "tree": {"sha": "578dd5a7582a8f52c0320c39fcafa522fb5e74ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/578dd5a7582a8f52c0320c39fcafa522fb5e74ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc2f9259e609d6027a651c790ccf76f62ab5cd34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc2f9259e609d6027a651c790ccf76f62ab5cd34", "html_url": "https://github.com/rust-lang/rust/commit/bc2f9259e609d6027a651c790ccf76f62ab5cd34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc2f9259e609d6027a651c790ccf76f62ab5cd34/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c4fcd8d12a0adb4278856377e03180c6c0b7edc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c4fcd8d12a0adb4278856377e03180c6c0b7edc", "html_url": "https://github.com/rust-lang/rust/commit/2c4fcd8d12a0adb4278856377e03180c6c0b7edc"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "9b8790379d8e6e3cffd3f65ef4127d08e437b7be", "filename": "miri/bin/miri.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc2f9259e609d6027a651c790ccf76f62ab5cd34/miri%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc2f9259e609d6027a651c790ccf76f62ab5cd34/miri%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Fbin%2Fmiri.rs?ref=bc2f9259e609d6027a651c790ccf76f62ab5cd34", "patch": "@@ -131,7 +131,7 @@ fn after_analysis<'a, 'tcx>(state: &mut CompileState<'a, 'tcx>) {\n         );\n     } else if let Some((entry_node_id, _)) = *state.session.entry_fn.borrow() {\n         let entry_def_id = tcx.hir.local_def_id(entry_node_id);\n-        let start_wrapper = tcx.lang_items.start_fn().and_then(|start_fn| {\n+        let start_wrapper = tcx.lang_items().start_fn().and_then(|start_fn| {\n             if tcx.is_mir_available(start_fn) {\n                 Some(start_fn)\n             } else {"}, {"sha": "d64b254e7ebb83e15895ea039c070a6380794982", "filename": "miri/fn_call.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bc2f9259e609d6027a651c790ccf76f62ab5cd34/miri%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc2f9259e609d6027a651c790ccf76f62ab5cd34/miri%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Ffn_call.rs?ref=bc2f9259e609d6027a651c790ccf76f62ab5cd34", "patch": "@@ -96,11 +96,11 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n         dest_ty: Ty<'tcx>,\n         dest_block: mir::BasicBlock,\n     ) -> EvalResult<'tcx> {\n-        let name = self.tcx.item_name(def_id);\n         let attrs = self.tcx.get_attrs(def_id);\n-        let link_name = attr::first_attr_value_str_by_name(&attrs, \"link_name\")\n-            .unwrap_or(name)\n-            .as_str();\n+        let link_name = match attr::first_attr_value_str_by_name(&attrs, \"link_name\") {\n+            Some(name) => name.as_str(),\n+            None => self.tcx.item_name(def_id),\n+        };\n \n         match &link_name[..] {\n             \"malloc\" => {\n@@ -477,28 +477,26 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n \n     /// Get an instance for a path.\n     fn resolve_path(&self, path: &[&str]) -> EvalResult<'tcx, ty::Instance<'tcx>> {\n-        let cstore = &self.tcx.sess.cstore;\n-\n-        let crates = cstore.crates();\n-        crates\n+        self.tcx\n+            .crates()\n             .iter()\n-            .find(|&&krate| cstore.crate_name(krate) == path[0])\n+            .find(|&&krate| self.tcx.original_crate_name(krate) == path[0])\n             .and_then(|krate| {\n                 let krate = DefId {\n                     krate: *krate,\n                     index: CRATE_DEF_INDEX,\n                 };\n-                let mut items = cstore.item_children(krate, self.tcx.sess);\n+                let mut items = self.tcx.item_children(krate);\n                 let mut path_it = path.iter().skip(1).peekable();\n \n                 while let Some(segment) = path_it.next() {\n-                    for item in &mem::replace(&mut items, vec![]) {\n+                    for item in mem::replace(&mut items, Default::default()).iter() {\n                         if item.ident.name == *segment {\n                             if path_it.peek().is_none() {\n                                 return Some(ty::Instance::mono(self.tcx, item.def.def_id()));\n                             }\n \n-                            items = cstore.item_children(item.def.def_id(), self.tcx.sess);\n+                            items = self.tcx.item_children(item.def.def_id());\n                             break;\n                         }\n                     }"}, {"sha": "bcff3b4aa99191c9f450f08c1c66e434fb602190", "filename": "miri/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc2f9259e609d6027a651c790ccf76f62ab5cd34/miri%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc2f9259e609d6027a651c790ccf76f62ab5cd34/miri%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Fintrinsic.rs?ref=bc2f9259e609d6027a651c790ccf76f62ab5cd34", "patch": "@@ -32,7 +32,7 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n     ) -> EvalResult<'tcx> {\n         let substs = instance.substs;\n \n-        let intrinsic_name = &self.tcx.item_name(instance.def_id()).as_str()[..];\n+        let intrinsic_name = &self.tcx.item_name(instance.def_id())[..];\n         match intrinsic_name {\n             \"align_offset\" => {\n                 // FIXME: return a real value in case the target allocation has an"}, {"sha": "d1f2f07aaaa66b887a9f6ed9107ec37a3b4eac2b", "filename": "rustc_tests/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc2f9259e609d6027a651c790ccf76f62ab5cd34/rustc_tests%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc2f9259e609d6027a651c790ccf76f62ab5cd34/rustc_tests%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustc_tests%2Fsrc%2Fmain.rs?ref=bc2f9259e609d6027a651c790ccf76f62ab5cd34", "patch": "@@ -100,7 +100,7 @@ fn after_analysis<'a, 'tcx>(state: &mut CompileState<'a, 'tcx>) {\n         state.hir_crate.unwrap().visit_all_item_likes(&mut Visitor(limits, tcx, state));\n     } else if let Some((entry_node_id, _)) = *state.session.entry_fn.borrow() {\n         let entry_def_id = tcx.hir.local_def_id(entry_node_id);\n-        let start_wrapper = tcx.lang_items.start_fn().and_then(|start_fn|\n+        let start_wrapper = tcx.lang_items().start_fn().and_then(|start_fn|\n                                 if tcx.is_mir_available(start_fn) { Some(start_fn) } else { None });\n         miri::eval_main(tcx, entry_def_id, start_wrapper, limits);\n "}, {"sha": "f97132c0b0f54a4c16862379d996ab4db523a566", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bc2f9259e609d6027a651c790ccf76f62ab5cd34/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc2f9259e609d6027a651c790ccf76f62ab5cd34/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=bc2f9259e609d6027a651c790ccf76f62ab5cd34", "patch": "@@ -2267,7 +2267,7 @@ fn fn_once_adapter_instance<'a, 'tcx>(\n     substs: ty::ClosureSubsts<'tcx>,\n ) -> ty::Instance<'tcx> {\n     debug!(\"fn_once_adapter_shim({:?}, {:?})\", closure_did, substs);\n-    let fn_once = tcx.lang_items.fn_once_trait().unwrap();\n+    let fn_once = tcx.lang_items().fn_once_trait().unwrap();\n     let call_once = tcx.associated_items(fn_once)\n         .find(|it| it.kind == ty::AssociatedKind::Method)\n         .unwrap()\n@@ -2346,7 +2346,7 @@ pub fn resolve<'a, 'tcx>(\n                 ty::InstanceDef::Intrinsic(def_id)\n             }\n             _ => {\n-                if Some(def_id) == tcx.lang_items.drop_in_place_fn() {\n+                if Some(def_id) == tcx.lang_items().drop_in_place_fn() {\n                     let ty = substs.type_at(0);\n                     if needs_drop_glue(tcx, ty) {\n                         debug!(\" => nontrivial drop glue\");\n@@ -2440,7 +2440,7 @@ fn resolve_associated_item<'a, 'tcx>(\n             }\n         }\n         ::rustc::traits::VtableClosure(closure_data) => {\n-            let trait_closure_kind = tcx.lang_items.fn_trait_kind(trait_id).unwrap();\n+            let trait_closure_kind = tcx.lang_items().fn_trait_kind(trait_id).unwrap();\n             resolve_closure(\n                 tcx,\n                 closure_data.closure_def_id,\n@@ -2461,7 +2461,7 @@ fn resolve_associated_item<'a, 'tcx>(\n                 substs: rcvr_substs,\n             }\n         }\n-        ::rustc::traits::VtableBuiltin(..) if Some(trait_id) == tcx.lang_items.clone_trait() => {\n+        ::rustc::traits::VtableBuiltin(..) if Some(trait_id) == tcx.lang_items().clone_trait() => {\n             ty::Instance {\n                 def: ty::InstanceDef::CloneShim(def_id, trait_ref.self_ty()),\n                 substs: rcvr_substs"}, {"sha": "490f3b3fbcee08fba9c94e9fcefe2680229215c1", "filename": "src/librustc_mir/interpret/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc2f9259e609d6027a651c790ccf76f62ab5cd34/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc2f9259e609d6027a651c790ccf76f62ab5cd34/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs?ref=bc2f9259e609d6027a651c790ccf76f62ab5cd34", "patch": "@@ -543,7 +543,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 Ok(())\n             }\n             TyAdt(adt, subst) => {\n-                if Some(adt.did) == self.tcx.lang_items.unsafe_cell_type() &&\n+                if Some(adt.did) == self.tcx.lang_items().unsafe_cell_type() &&\n                     query.mutbl == MutImmutable\n                 {\n                     // No locks for shared unsafe cells.  Also no other validation, the only field is private anyway."}]}