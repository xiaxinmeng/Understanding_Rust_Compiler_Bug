{"sha": "fceab9fb348becb62f404d0d9381a49446beac7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZWFiOWZiMzQ4YmVjYjYyZjQwNGQwZDkzODFhNDk0NDZiZWFjN2E=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-08-14T12:06:14Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-08-29T11:09:19Z"}, "message": "make probe priority logic clearer", "tree": {"sha": "10ac364480f065d355305fd41660c4f01099b488", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10ac364480f065d355305fd41660c4f01099b488"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fceab9fb348becb62f404d0d9381a49446beac7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fceab9fb348becb62f404d0d9381a49446beac7a", "html_url": "https://github.com/rust-lang/rust/commit/fceab9fb348becb62f404d0d9381a49446beac7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fceab9fb348becb62f404d0d9381a49446beac7a/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f82dea299e7a8c4aa149196545917043f66af2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f82dea299e7a8c4aa149196545917043f66af2f", "html_url": "https://github.com/rust-lang/rust/commit/6f82dea299e7a8c4aa149196545917043f66af2f"}], "stats": {"total": 66, "additions": 28, "deletions": 38}, "files": [{"sha": "30683eeeba89bd151fb98d828d4a0b30ae847417", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 28, "deletions": 38, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/fceab9fb348becb62f404d0d9381a49446beac7a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fceab9fb348becb62f404d0d9381a49446beac7a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=fceab9fb348becb62f404d0d9381a49446beac7a", "patch": "@@ -1116,21 +1116,17 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         let steps = self.steps.clone();\n \n         // find the first step that works\n-        steps.iter().filter_map(|step| self.pick_step(step)).next()\n-    }\n-\n-    fn pick_step(&mut self, step: &CandidateStep<'tcx>) -> Option<PickResult<'tcx>> {\n-        debug!(\"pick_step: step={:?}\", step);\n-\n-        if step.self_ty.references_error() {\n-            return None;\n-        }\n-\n-        if let Some(result) = self.pick_by_value_method(step) {\n-            return Some(result);\n-        }\n-\n-        self.pick_autorefd_method(step)\n+        steps\n+            .iter()\n+            .filter(|step| {\n+                debug!(\"pick_core: step={:?}\", step);\n+                !step.self_ty.references_error()\n+            }).flat_map(|step| {\n+                self.pick_by_value_method(step).or_else(|| {\n+                self.pick_autorefd_method(step, hir::MutImmutable).or_else(|| {\n+                self.pick_autorefd_method(step, hir::MutMutable)\n+            })})})\n+            .next()\n     }\n \n     fn pick_by_value_method(&mut self, step: &CandidateStep<'tcx>) -> Option<PickResult<'tcx>> {\n@@ -1161,36 +1157,30 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         })\n     }\n \n-    fn pick_autorefd_method(&mut self, step: &CandidateStep<'tcx>) -> Option<PickResult<'tcx>> {\n+    fn pick_autorefd_method(&mut self, step: &CandidateStep<'tcx>, mutbl: hir::Mutability)\n+                            -> Option<PickResult<'tcx>> {\n         let tcx = self.tcx;\n \n         // In general, during probing we erase regions. See\n         // `impl_self_ty()` for an explanation.\n         let region = tcx.types.re_erased;\n \n-        // Search through mutabilities in order to find one where pick works:\n-        [hir::MutImmutable, hir::MutMutable]\n-            .iter()\n-            .filter_map(|&m| {\n-                let autoref_ty = tcx.mk_ref(region,\n-                                            ty::TypeAndMut {\n-                                                ty: step.self_ty,\n-                                                mutbl: m,\n-                                            });\n-                self.pick_method(autoref_ty).map(|r| {\n-                    r.map(|mut pick| {\n-                        pick.autoderefs = step.autoderefs;\n-                        pick.autoref = Some(m);\n-                        pick.unsize = if step.unsize {\n-                            Some(step.self_ty)\n-                        } else {\n-                            None\n-                        };\n-                        pick\n-                    })\n-                })\n+        let autoref_ty = tcx.mk_ref(region,\n+                                    ty::TypeAndMut {\n+                                        ty: step.self_ty, mutbl\n+                                    });\n+        self.pick_method(autoref_ty).map(|r| {\n+            r.map(|mut pick| {\n+                pick.autoderefs = step.autoderefs;\n+                pick.autoref = Some(mutbl);\n+                pick.unsize = if step.unsize {\n+                    Some(step.self_ty)\n+                } else {\n+                    None\n+                };\n+                pick\n             })\n-            .nth(0)\n+        })\n     }\n \n     fn pick_method(&mut self, self_ty: Ty<'tcx>) -> Option<PickResult<'tcx>> {"}]}