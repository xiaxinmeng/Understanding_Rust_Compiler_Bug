{"sha": "41debc365e398b95742d9e6910705495e93c0ec6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxZGViYzM2NWUzOThiOTU3NDJkOWU2OTEwNzA1NDk1ZTkzYzBlYzY=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-05-15T09:17:17Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-05-19T07:14:13Z"}, "message": "Try to optimise char patterns", "tree": {"sha": "d6099c3c636a3b37b64e6287088ccab286897db0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6099c3c636a3b37b64e6287088ccab286897db0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41debc365e398b95742d9e6910705495e93c0ec6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41debc365e398b95742d9e6910705495e93c0ec6", "html_url": "https://github.com/rust-lang/rust/commit/41debc365e398b95742d9e6910705495e93c0ec6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41debc365e398b95742d9e6910705495e93c0ec6/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "386b0b9d39274701f30d31ee6ce31c363c6036ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/386b0b9d39274701f30d31ee6ce31c363c6036ea", "html_url": "https://github.com/rust-lang/rust/commit/386b0b9d39274701f30d31ee6ce31c363c6036ea"}], "stats": {"total": 65, "additions": 58, "deletions": 7}, "files": [{"sha": "fc4063fae927754353d5e736099f0a365b0dd2d7", "filename": "src/libcollections/benches/str.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/41debc365e398b95742d9e6910705495e93c0ec6/src%2Flibcollections%2Fbenches%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41debc365e398b95742d9e6910705495e93c0ec6/src%2Flibcollections%2Fbenches%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbenches%2Fstr.rs?ref=41debc365e398b95742d9e6910705495e93c0ec6", "patch": "@@ -195,30 +195,34 @@ fn bench_contains_equal(b: &mut Bencher) {\n     })\n }\n \n+\n macro_rules! make_test_inner {\n-    ($s:ident, $code:expr, $name:ident, $str:expr) => {\n+    ($s:ident, $code:expr, $name:ident, $str:expr, $iters:expr) => {\n         #[bench]\n         fn $name(bencher: &mut Bencher) {\n             let mut $s = $str;\n             black_box(&mut $s);\n-            bencher.iter(|| $code);\n+            bencher.iter(|| for _ in 0..$iters { black_box($code); });\n         }\n     }\n }\n \n macro_rules! make_test {\n     ($name:ident, $s:ident, $code:expr) => {\n+        make_test!($name, $s, $code, 1);\n+    };\n+    ($name:ident, $s:ident, $code:expr, $iters:expr) => {\n         mod $name {\n             use test::Bencher;\n             use test::black_box;\n \n             // Short strings: 65 bytes each\n             make_test_inner!($s, $code, short_ascii,\n-                \"Mary had a little lamb, Little lamb Mary had a littl lamb, lamb!\");\n+                \"Mary had a little lamb, Little lamb Mary had a littl lamb, lamb!\", $iters);\n             make_test_inner!($s, $code, short_mixed,\n-                \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lam!\");\n+                \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lam!\", $iters);\n             make_test_inner!($s, $code, short_pile_of_poo,\n-                \"\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9!\");\n+                \"\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9!\", $iters);\n             make_test_inner!($s, $code, long_lorem_ipsum,\"\\\n Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse quis lorem sit amet dolor \\\n ultricies condimentum. Praesent iaculis purus elit, ac malesuada quam malesuada in. Duis sed orci \\\n@@ -253,7 +257,7 @@ Nam lectus enim, dapibus non nisi tempor, consectetur convallis massa. Maecenas\n feugiat. Etiam quis mauris vel risus luctus mattis a a nunc. Nullam orci quam, imperdiet id \\\n vehicula in, porttitor ut nibh. Duis sagittis adipiscing nisl vitae congue. Donec mollis risus eu \\\n leo suscipit, varius porttitor nulla porta. Pellentesque ut sem nec nisi euismod vehicula. Nulla \\\n-malesuada sollicitudin quam eu fermentum!\");\n+malesuada sollicitudin quam eu fermentum!\", $iters);\n         }\n     }\n }\n@@ -288,6 +292,13 @@ make_test!(find_zzz_char, s, s.find('\\u{1F4A4}'));\n make_test!(rfind_zzz_char, s, s.rfind('\\u{1F4A4}'));\n make_test!(find_zzz_str, s, s.find(\"\\u{1F4A4}\"));\n \n+make_test!(starts_with_ascii_char, s, s.starts_with('/'), 1024);\n+make_test!(ends_with_ascii_char, s, s.ends_with('/'), 1024);\n+make_test!(starts_with_unichar, s, s.starts_with('\\u{1F4A4}'), 1024);\n+make_test!(ends_with_unichar, s, s.ends_with('\\u{1F4A4}'), 1024);\n+make_test!(starts_with_str, s, s.starts_with(\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\"), 1024);\n+make_test!(ends_with_str, s, s.ends_with(\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\"), 1024);\n+\n make_test!(split_space_char, s, s.split(' ').count());\n make_test!(split_terminator_space_char, s, s.split_terminator(' ').count());\n "}, {"sha": "7e67befb700dbcd16a5039cf6bdb26716417744b", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/41debc365e398b95742d9e6910705495e93c0ec6/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41debc365e398b95742d9e6910705495e93c0ec6/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=41debc365e398b95742d9e6910705495e93c0ec6", "patch": "@@ -813,6 +813,7 @@ impl str {\n     /// assert!(!bananas.contains(\"apples\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn contains<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool {\n         core_str::StrExt::contains(self, pat)\n     }\n@@ -900,6 +901,7 @@ impl str {\n     /// assert_eq!(s.find(x), None);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize> {\n         core_str::StrExt::find(self, pat)\n     }\n@@ -944,6 +946,7 @@ impl str {\n     /// assert_eq!(s.rfind(x), None);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn rfind<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n@@ -1057,6 +1060,7 @@ impl str {\n     ///\n     /// [`split_whitespace`]: #method.split_whitespace\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn split<'a, P: Pattern<'a>>(&'a self, pat: P) -> Split<'a, P> {\n         core_str::StrExt::split(self, pat)\n     }\n@@ -1106,6 +1110,7 @@ impl str {\n     /// assert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn rsplit<'a, P: Pattern<'a>>(&'a self, pat: P) -> RSplit<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n@@ -1152,6 +1157,7 @@ impl str {\n     /// assert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn split_terminator<'a, P: Pattern<'a>>(&'a self, pat: P) -> SplitTerminator<'a, P> {\n         core_str::StrExt::split_terminator(self, pat)\n     }\n@@ -1195,6 +1201,7 @@ impl str {\n     /// assert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn rsplit_terminator<'a, P: Pattern<'a>>(&'a self, pat: P) -> RSplitTerminator<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n@@ -1247,6 +1254,7 @@ impl str {\n     /// assert_eq!(v, [\"abc\", \"defXghi\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn splitn<'a, P: Pattern<'a>>(&'a self, n: usize, pat: P) -> SplitN<'a, P> {\n         core_str::StrExt::splitn(self, n, pat)\n     }\n@@ -1294,6 +1302,7 @@ impl str {\n     /// assert_eq!(v, [\"ghi\", \"abc1def\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn rsplitn<'a, P: Pattern<'a>>(&'a self, n: usize, pat: P) -> RSplitN<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n@@ -1334,6 +1343,7 @@ impl str {\n     /// assert_eq!(v, [\"1\", \"2\", \"3\"]);\n     /// ```\n     #[stable(feature = \"str_matches\", since = \"1.2.0\")]\n+    #[inline]\n     pub fn matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> Matches<'a, P> {\n         core_str::StrExt::matches(self, pat)\n     }\n@@ -1370,6 +1380,7 @@ impl str {\n     /// assert_eq!(v, [\"3\", \"2\", \"1\"]);\n     /// ```\n     #[stable(feature = \"str_matches\", since = \"1.2.0\")]\n+    #[inline]\n     pub fn rmatches<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatches<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n@@ -1415,6 +1426,7 @@ impl str {\n     /// assert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n     /// ```\n     #[stable(feature = \"str_match_indices\", since = \"1.5.0\")]\n+    #[inline]\n     pub fn match_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> MatchIndices<'a, P> {\n         core_str::StrExt::match_indices(self, pat)\n     }\n@@ -1457,6 +1469,7 @@ impl str {\n     /// assert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n     /// ```\n     #[stable(feature = \"str_match_indices\", since = \"1.5.0\")]\n+    #[inline]\n     pub fn rmatch_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatchIndices<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n@@ -1737,6 +1750,7 @@ impl str {\n     /// assert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn replace<'a, P: Pattern<'a>>(&'a self, from: P, to: &str) -> String {\n         let mut result = String::new();\n         let mut last_end = 0;"}, {"sha": "4918e37eb35f08a266122920a2def0a07bb2ea81", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/41debc365e398b95742d9e6910705495e93c0ec6/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41debc365e398b95742d9e6910705495e93c0ec6/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=41debc365e398b95742d9e6910705495e93c0ec6", "patch": "@@ -429,7 +429,33 @@ impl<'a> DoubleEndedSearcher<'a> for CharSearcher<'a> {}\n \n /// Searches for chars that are equal to a given char\n impl<'a> Pattern<'a> for char {\n-    pattern_methods!(CharSearcher<'a>, CharEqPattern, CharSearcher);\n+    type Searcher = CharSearcher<'a>;\n+\n+    #[inline]\n+    fn into_searcher(self, haystack: &'a str) -> Self::Searcher {\n+        CharSearcher(CharEqPattern(self).into_searcher(haystack))\n+    }\n+\n+    #[inline]\n+    fn is_contained_in(self, haystack: &'a str) -> bool {\n+        if (self as u32) < 128 {\n+            haystack.as_bytes().contains(&(self as u8))\n+        } else {\n+            let mut buffer = [0u8; 4];\n+            self.encode_utf8(&mut buffer).is_contained_in(haystack)\n+        }\n+    }\n+\n+    #[inline]\n+    fn is_prefix_of(self, haystack: &'a str) -> bool {\n+        CharEqPattern(self).is_prefix_of(haystack)\n+    }\n+\n+    #[inline]\n+    fn is_suffix_of(self, haystack: &'a str) -> bool where Self::Searcher: ReverseSearcher<'a>\n+    {\n+        CharEqPattern(self).is_suffix_of(haystack)\n+    }\n }\n \n /////////////////////////////////////////////////////////////////////////////"}]}