{"sha": "d683e3ac23a8f8b52cef07b4380845bbd1ef5e8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ODNlM2FjMjNhOGY4YjUyY2VmMDdiNDM4MDg0NWJiZDFlZjVlOGY=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-10-14T16:42:13Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-10-15T10:02:24Z"}, "message": "Remove rustc_session::config::Config\n\nThe wrapper type led to tons of target.target\nacross the compiler. Its ptr_width field isn't\nrequired any more, as target_pointer_width\nis already present in parsed form.", "tree": {"sha": "e29bfbbf1e7538cc22ada967111fa542e73c05a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e29bfbbf1e7538cc22ada967111fa542e73c05a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d683e3ac23a8f8b52cef07b4380845bbd1ef5e8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d683e3ac23a8f8b52cef07b4380845bbd1ef5e8f", "html_url": "https://github.com/rust-lang/rust/commit/d683e3ac23a8f8b52cef07b4380845bbd1ef5e8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d683e3ac23a8f8b52cef07b4380845bbd1ef5e8f/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fa55787745ac71793253c47c4d6cd5ffe96b741", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fa55787745ac71793253c47c4d6cd5ffe96b741", "html_url": "https://github.com/rust-lang/rust/commit/4fa55787745ac71793253c47c4d6cd5ffe96b741"}], "stats": {"total": 36, "additions": 12, "deletions": 24}, "files": [{"sha": "2075c2e19110b3df13b94717a5d12b71cc36046e", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d683e3ac23a8f8b52cef07b4380845bbd1ef5e8f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d683e3ac23a8f8b52cef07b4380845bbd1ef5e8f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=d683e3ac23a8f8b52cef07b4380845bbd1ef5e8f", "patch": "@@ -174,7 +174,6 @@ pub fn llvm_target_features(sess: &Session) -> impl Iterator<Item = &str> {\n         .split(',')\n         .filter(|f| !RUSTC_SPECIFIC_FEATURES.iter().any(|s| f.contains(s)));\n     sess.target\n-        .target\n         .options\n         .features\n         .split(',')"}, {"sha": "63d0a88858ec1d159d344e8e622cbb330c930f90", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d683e3ac23a8f8b52cef07b4380845bbd1ef5e8f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d683e3ac23a8f8b52cef07b4380845bbd1ef5e8f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=d683e3ac23a8f8b52cef07b4380845bbd1ef5e8f", "patch": "@@ -15,7 +15,7 @@ use rustc_session::{filesearch, Session};\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::crt_objects::{CrtObjects, CrtObjectsFallback};\n use rustc_target::spec::{LinkOutputKind, LinkerFlavor, LldFlavor};\n-use rustc_target::spec::{PanicStrategy, RelocModel, RelroLevel};\n+use rustc_target::spec::{PanicStrategy, RelocModel, RelroLevel, Target};\n \n use super::archive::ArchiveBuilder;\n use super::command::Command;\n@@ -1842,12 +1842,8 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n     }\n \n     // Converts a library file-stem into a cc -l argument\n-    fn unlib<'a>(config: &config::Config, stem: &'a str) -> &'a str {\n-        if stem.starts_with(\"lib\") && !config.target.options.is_like_windows {\n-            &stem[3..]\n-        } else {\n-            stem\n-        }\n+    fn unlib<'a>(target: &Target, stem: &'a str) -> &'a str {\n+        if stem.starts_with(\"lib\") && !target.options.is_like_windows { &stem[3..] } else { stem }\n     }\n \n     // Adds the static \"rlib\" versions of all crates to the command line."}, {"sha": "f33bebf99d6e1d62a3aa6668c87da27c216cf448", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d683e3ac23a8f8b52cef07b4380845bbd1ef5e8f/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d683e3ac23a8f8b52cef07b4380845bbd1ef5e8f/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=d683e3ac23a8f8b52cef07b4380845bbd1ef5e8f", "patch": "@@ -34,11 +34,6 @@ use std::iter::{self, FromIterator};\n use std::path::{Path, PathBuf};\n use std::str::{self, FromStr};\n \n-pub struct Config {\n-    pub target: Target,\n-    pub ptr_width: u32,\n-}\n-\n bitflags! {\n     #[derive(Default, Encodable, Decodable)]\n     pub struct SanitizerSet: u8 {\n@@ -831,7 +826,7 @@ pub fn build_configuration(sess: &Session, mut user_cfg: CrateConfig) -> CrateCo\n     user_cfg\n }\n \n-pub fn build_target_config(opts: &Options, target_override: Option<Target>) -> Config {\n+pub fn build_target_config(opts: &Options, target_override: Option<Target>) -> Target {\n     let target_result = target_override.map_or_else(|| Target::search(&opts.target_triple), Ok);\n     let target = target_result.unwrap_or_else(|e| {\n         early_error(\n@@ -855,9 +850,7 @@ pub fn build_target_config(opts: &Options, target_override: Option<Target>) -> C\n         )\n     }\n \n-    let ptr_width = target.pointer_width;\n-\n-    Config { target, ptr_width }\n+    target\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Debug)]"}, {"sha": "8312f89b2714c34c298b30fe174a55f6a7e5e6a7", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d683e3ac23a8f8b52cef07b4380845bbd1ef5e8f/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d683e3ac23a8f8b52cef07b4380845bbd1ef5e8f/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=d683e3ac23a8f8b52cef07b4380845bbd1ef5e8f", "patch": "@@ -102,7 +102,7 @@ impl Mul<usize> for Limit {\n /// Represents the data associated with a compilation\n /// session for a single crate.\n pub struct Session {\n-    pub target: config::Config,\n+    pub target: Target,\n     pub host: Target,\n     pub opts: config::Options,\n     pub host_tlib_path: SearchPath,\n@@ -1258,7 +1258,7 @@ pub fn build_session(\n \n     let loader = file_loader.unwrap_or(Box::new(RealFileLoader));\n     let hash_kind = sopts.debugging_opts.src_hash_algorithm.unwrap_or_else(|| {\n-        if target_cfg.target.options.is_like_msvc {\n+        if target_cfg.options.is_like_msvc {\n             SourceFileHashAlgorithm::Sha1\n         } else {\n             SourceFileHashAlgorithm::Md5\n@@ -1368,8 +1368,8 @@ pub fn build_session(\n         if candidate.join(\"library/std/src/lib.rs\").is_file() { Some(candidate) } else { None }\n     };\n \n-    let asm_arch = if target_cfg.target.options.allow_asm {\n-        InlineAsmArch::from_str(&target_cfg.target.arch).ok()\n+    let asm_arch = if target_cfg.options.allow_asm {\n+        InlineAsmArch::from_str(&target_cfg.arch).ok()\n     } else {\n         None\n     };"}, {"sha": "d92eb86fb2eb6f7788019884fd299b7baf162ffe", "filename": "src/tools/clippy/clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d683e3ac23a8f8b52cef07b4380845bbd1ef5e8f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d683e3ac23a8f8b52cef07b4380845bbd1ef5e8f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=d683e3ac23a8f8b52cef07b4380845bbd1ef5e8f", "patch": "@@ -9,10 +9,10 @@ use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, FnDecl, HirId, ItemKind, MutTy, Mutability, Node};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n-use rustc_session::config::Config as SessionConfig;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n use rustc_target::abi::LayoutOf;\n+use rustc_target::spec::Target;\n use rustc_target::spec::abi::Abi;\n \n declare_clippy_lint! {\n@@ -60,9 +60,9 @@ pub struct TriviallyCopyPassByRef {\n }\n \n impl<'tcx> TriviallyCopyPassByRef {\n-    pub fn new(limit: Option<u64>, target: &SessionConfig) -> Self {\n+    pub fn new(limit: Option<u64>, target: &Target) -> Self {\n         let limit = limit.unwrap_or_else(|| {\n-            let bit_width = u64::from(target.ptr_width);\n+            let bit_width = u64::from(target.pointer_width);\n             // Cap the calculated bit width at 32-bits to reduce\n             // portability problems between 32 and 64-bit targets\n             let bit_width = cmp::min(bit_width, 32);"}]}