{"sha": "146f6f5a45a4bfd98ab0eb54bb30610d784433c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NmY2ZjVhNDVhNGJmZDk4YWIwZWI1NGJiMzA2MTBkNzg0NDMzYzk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-17T11:55:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-17T11:56:42Z"}, "message": "Simplify Diagnostic structure\n\nIt's not entirely clear what subnode ranges should mean in the\npresence of macros, so let's leave them out for now. We are not using\nthem heavily anyway.", "tree": {"sha": "e56f182d50f8863c2535fcd9d736ffb4e3425ae6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e56f182d50f8863c2535fcd9d736ffb4e3425ae6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/146f6f5a45a4bfd98ab0eb54bb30610d784433c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/146f6f5a45a4bfd98ab0eb54bb30610d784433c9", "html_url": "https://github.com/rust-lang/rust/commit/146f6f5a45a4bfd98ab0eb54bb30610d784433c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/146f6f5a45a4bfd98ab0eb54bb30610d784433c9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8196ffe8466aa60dec56e77c2da717793c0debe", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8196ffe8466aa60dec56e77c2da717793c0debe", "html_url": "https://github.com/rust-lang/rust/commit/a8196ffe8466aa60dec56e77c2da717793c0debe"}], "stats": {"total": 59, "additions": 8, "deletions": 51}, "files": [{"sha": "510c5e06483b6dcf3b493a957278d0d293a11876", "filename": "crates/ra_hir_def/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/146f6f5a45a4bfd98ab0eb54bb30610d784433c9/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f6f5a45a4bfd98ab0eb54bb30610d784433c9/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs?ref=146f6f5a45a4bfd98ab0eb54bb30610d784433c9", "patch": "@@ -4,25 +4,21 @@ use std::any::Any;\n \n use hir_expand::diagnostics::Diagnostic;\n use ra_db::RelativePathBuf;\n-use ra_syntax::{ast, AstPtr, SyntaxNodePtr, TextRange};\n+use ra_syntax::{ast, AstPtr, SyntaxNodePtr};\n \n use hir_expand::{HirFileId, InFile};\n \n #[derive(Debug)]\n pub struct UnresolvedModule {\n     pub file: HirFileId,\n     pub decl: AstPtr<ast::Module>,\n-    pub highlight_range: TextRange,\n     pub candidate: RelativePathBuf,\n }\n \n impl Diagnostic for UnresolvedModule {\n     fn message(&self) -> String {\n         \"unresolved module\".to_string()\n     }\n-    fn highlight_range(&self) -> InFile<TextRange> {\n-        InFile::new(self.file, self.highlight_range)\n-    }\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n         InFile::new(self.file, self.decl.clone().into())\n     }"}, {"sha": "f279c2ad4a9d3b3342d9cf75156f9cabe2f03702", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/146f6f5a45a4bfd98ab0eb54bb30610d784433c9/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f6f5a45a4bfd98ab0eb54bb30610d784433c9/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=146f6f5a45a4bfd98ab0eb54bb30610d784433c9", "patch": "@@ -297,7 +297,7 @@ pub enum ModuleSource {\n mod diagnostics {\n     use hir_expand::diagnostics::DiagnosticSink;\n     use ra_db::RelativePathBuf;\n-    use ra_syntax::{ast, AstNode, AstPtr};\n+    use ra_syntax::{ast, AstPtr};\n \n     use crate::{db::DefDatabase, diagnostics::UnresolvedModule, nameres::LocalModuleId, AstId};\n \n@@ -326,7 +326,6 @@ mod diagnostics {\n                     sink.push(UnresolvedModule {\n                         file: declaration.file_id,\n                         decl: AstPtr::new(&decl),\n-                        highlight_range: decl.syntax().text_range(),\n                         candidate: candidate.clone(),\n                     })\n                 }"}, {"sha": "99209c6e8c7262af710a6dfdf81baaf08aadf1da", "filename": "crates/ra_hir_expand/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/146f6f5a45a4bfd98ab0eb54bb30610d784433c9/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f6f5a45a4bfd98ab0eb54bb30610d784433c9/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs?ref=146f6f5a45a4bfd98ab0eb54bb30610d784433c9", "patch": "@@ -16,13 +16,12 @@\n \n use std::{any::Any, fmt};\n \n-use ra_syntax::{SyntaxNode, SyntaxNodePtr, TextRange};\n+use ra_syntax::{SyntaxNode, SyntaxNodePtr};\n \n use crate::{db::AstDatabase, InFile};\n \n pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n     fn message(&self) -> String;\n-    fn highlight_range(&self) -> InFile<TextRange>;\n     fn source(&self) -> InFile<SyntaxNodePtr>;\n     fn as_any(&self) -> &(dyn Any + Send + 'static);\n }"}, {"sha": "c8fd5486159ad58505a9fd4cfac3efad2668d568", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/146f6f5a45a4bfd98ab0eb54bb30610d784433c9/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f6f5a45a4bfd98ab0eb54bb30610d784433c9/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=146f6f5a45a4bfd98ab0eb54bb30610d784433c9", "patch": "@@ -3,7 +3,7 @@\n use std::any::Any;\n \n use hir_expand::{db::AstDatabase, name::Name, HirFileId, InFile};\n-use ra_syntax::{ast, AstNode, AstPtr, SyntaxNodePtr, TextRange};\n+use ra_syntax::{ast, AstNode, AstPtr, SyntaxNodePtr};\n use stdx::format_to;\n \n pub use hir_def::{diagnostics::UnresolvedModule, expr::MatchArm};\n@@ -13,18 +13,13 @@ pub use hir_expand::diagnostics::{AstDiagnostic, Diagnostic, DiagnosticSink};\n pub struct NoSuchField {\n     pub file: HirFileId,\n     pub field: AstPtr<ast::RecordField>,\n-    pub highlight_range: TextRange,\n }\n \n impl Diagnostic for NoSuchField {\n     fn message(&self) -> String {\n         \"no such field\".to_string()\n     }\n \n-    fn highlight_range(&self) -> InFile<TextRange> {\n-        InFile::new(self.file, self.highlight_range)\n-    }\n-\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n         InFile::new(self.file, self.field.clone().into())\n     }\n@@ -38,7 +33,6 @@ impl Diagnostic for NoSuchField {\n pub struct MissingFields {\n     pub file: HirFileId,\n     pub field_list: AstPtr<ast::RecordFieldList>,\n-    pub highlight_range: TextRange,\n     pub missed_fields: Vec<Name>,\n }\n \n@@ -50,10 +44,6 @@ impl Diagnostic for MissingFields {\n         }\n         buf\n     }\n-    fn highlight_range(&self) -> InFile<TextRange> {\n-        InFile::new(self.file, self.highlight_range)\n-    }\n-\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.field_list.clone().into() }\n     }\n@@ -76,7 +66,6 @@ impl AstDiagnostic for MissingFields {\n pub struct MissingPatFields {\n     pub file: HirFileId,\n     pub field_list: AstPtr<ast::RecordFieldPatList>,\n-    pub highlight_range: TextRange,\n     pub missed_fields: Vec<Name>,\n }\n \n@@ -88,9 +77,6 @@ impl Diagnostic for MissingPatFields {\n         }\n         buf\n     }\n-    fn highlight_range(&self) -> InFile<TextRange> {\n-        InFile::new(self.file, self.highlight_range)\n-    }\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.field_list.clone().into() }\n     }\n@@ -104,16 +90,12 @@ pub struct MissingMatchArms {\n     pub file: HirFileId,\n     pub match_expr: AstPtr<ast::Expr>,\n     pub arms: AstPtr<ast::MatchArmList>,\n-    pub highlight_range: TextRange,\n }\n \n impl Diagnostic for MissingMatchArms {\n     fn message(&self) -> String {\n         String::from(\"Missing match arm\")\n     }\n-    fn highlight_range(&self) -> InFile<TextRange> {\n-        InFile::new(self.file, self.highlight_range)\n-    }\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.match_expr.clone().into() }\n     }\n@@ -126,16 +108,12 @@ impl Diagnostic for MissingMatchArms {\n pub struct MissingOkInTailExpr {\n     pub file: HirFileId,\n     pub expr: AstPtr<ast::Expr>,\n-    pub highlight_range: TextRange,\n }\n \n impl Diagnostic for MissingOkInTailExpr {\n     fn message(&self) -> String {\n         \"wrap return expression in Ok\".to_string()\n     }\n-    fn highlight_range(&self) -> InFile<TextRange> {\n-        InFile::new(self.file, self.highlight_range)\n-    }\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.expr.clone().into() }\n     }"}, {"sha": "fd59f43207e428fa448ecdbb10fb76061a2a9051", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/146f6f5a45a4bfd98ab0eb54bb30610d784433c9/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f6f5a45a4bfd98ab0eb54bb30610d784433c9/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=146f6f5a45a4bfd98ab0eb54bb30610d784433c9", "patch": "@@ -4,7 +4,7 @@ use std::sync::Arc;\n \n use hir_def::{path::path, resolver::HasResolver, AdtId, FunctionId};\n use hir_expand::diagnostics::DiagnosticSink;\n-use ra_syntax::{ast, AstNode, AstPtr};\n+use ra_syntax::{ast, AstPtr};\n use rustc_hash::FxHashSet;\n \n use crate::{\n@@ -100,7 +100,6 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n                     self.sink.push(MissingFields {\n                         file: source_ptr.file_id,\n                         field_list: AstPtr::new(&field_list),\n-                        highlight_range: field_list.syntax().text_range(),\n                         missed_fields,\n                     })\n                 }\n@@ -131,7 +130,6 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n                         self.sink.push(MissingPatFields {\n                             file: source_ptr.file_id,\n                             field_list: AstPtr::new(&field_list),\n-                            highlight_range: field_list.syntax().text_range(),\n                             missed_fields,\n                         })\n                     }\n@@ -215,7 +213,6 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n                         file: source_ptr.file_id,\n                         match_expr: AstPtr::new(&match_expr),\n                         arms: AstPtr::new(&arms),\n-                        highlight_range: match_expr.syntax().text_range(),\n                     })\n                 }\n             }\n@@ -247,13 +244,8 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             let (_, source_map) = db.body_with_source_map(self.func.into());\n \n             if let Ok(source_ptr) = source_map.expr_syntax(id) {\n-                let root = source_ptr.file_syntax(db.upcast());\n-                let highlight_range = source_ptr.value.to_node(&root).syntax().text_range();\n-                self.sink.push(MissingOkInTailExpr {\n-                    file: source_ptr.file_id,\n-                    expr: source_ptr.value,\n-                    highlight_range,\n-                });\n+                self.sink\n+                    .push(MissingOkInTailExpr { file: source_ptr.file_id, expr: source_ptr.value });\n             }\n         }\n     }"}, {"sha": "b6d9b3438e7dd391c1b0ea864664d06e9aeb4b24", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/146f6f5a45a4bfd98ab0eb54bb30610d784433c9/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f6f5a45a4bfd98ab0eb54bb30610d784433c9/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=146f6f5a45a4bfd98ab0eb54bb30610d784433c9", "patch": "@@ -665,7 +665,6 @@ impl Expectation {\n mod diagnostics {\n     use hir_def::{expr::ExprId, src::HasSource, FunctionId, Lookup};\n     use hir_expand::diagnostics::DiagnosticSink;\n-    use ra_syntax::AstNode;\n \n     use crate::{db::HirDatabase, diagnostics::NoSuchField};\n \n@@ -686,13 +685,7 @@ mod diagnostics {\n                     let source = owner.lookup(db.upcast()).source(db.upcast());\n                     let (_, source_map) = db.body_with_source_map(owner.into());\n                     let field = source_map.field_syntax(*expr, *field);\n-                    let root = field.file_syntax(db.upcast());\n-                    let highlight_range = field.value.to_node(&root).syntax().text_range();\n-                    sink.push(NoSuchField {\n-                        file: source.file_id,\n-                        field: field.value,\n-                        highlight_range,\n-                    })\n+                    sink.push(NoSuchField { file: source.file_id, field: field.value })\n                 }\n             }\n         }"}]}