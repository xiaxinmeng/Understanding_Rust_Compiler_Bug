{"sha": "ff3d91bb0ce9e40059c7322ce562946b8088d3e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmM2Q5MWJiMGNlOWU0MDA1OWM3MzIyY2U1NjI5NDZiODA4OGQzZTc=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-13T10:36:30Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-13T10:36:30Z"}, "message": "Merge #519\n\n519: support ref-patterns r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "c086e3d9fa0b75f51f924e27ac740cc0679b0be6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c086e3d9fa0b75f51f924e27ac740cc0679b0be6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff3d91bb0ce9e40059c7322ce562946b8088d3e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff3d91bb0ce9e40059c7322ce562946b8088d3e7", "html_url": "https://github.com/rust-lang/rust/commit/ff3d91bb0ce9e40059c7322ce562946b8088d3e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff3d91bb0ce9e40059c7322ce562946b8088d3e7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "a2659abed8417bfb36fb5a448c52b8af1495ec51", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2659abed8417bfb36fb5a448c52b8af1495ec51", "html_url": "https://github.com/rust-lang/rust/commit/a2659abed8417bfb36fb5a448c52b8af1495ec51"}, {"sha": "8e554ea5faa1158e084462162d5e1932db5c81c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e554ea5faa1158e084462162d5e1932db5c81c2", "html_url": "https://github.com/rust-lang/rust/commit/8e554ea5faa1158e084462162d5e1932db5c81c2"}], "stats": {"total": 57, "additions": 46, "deletions": 11}, "files": [{"sha": "afca1e9f8754899152c4ead6ff4dd1de9c389e56", "filename": "crates/ra_hir/src/code_model_impl/function/scope.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ff3d91bb0ce9e40059c7322ce562946b8088d3e7/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff3d91bb0ce9e40059c7322ce562946b8088d3e7/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction%2Fscope.rs?ref=ff3d91bb0ce9e40059c7322ce562946b8088d3e7", "patch": "@@ -422,6 +422,9 @@ mod tests {\n     fn do_check_local_name(code: &str, expected_offset: u32) {\n         let (off, code) = extract_offset(code);\n         let file = SourceFile::parse(&code);\n+        let expected_name = find_node_at_offset::<ast::Name>(file.syntax(), expected_offset.into())\n+            .expect(\"failed to find a name at the target offset\");\n+\n         let fn_def: &ast::FnDef = find_node_at_offset(file.syntax(), off).unwrap();\n         let name_ref: &ast::NameRef = find_node_at_offset(file.syntax(), off).unwrap();\n \n@@ -431,11 +434,8 @@ mod tests {\n             scopes: Arc::new(scopes),\n             syntax_mapping: Arc::new(body_hir),\n         };\n-\n         let local_name_entry = scopes.resolve_local_name(name_ref).unwrap();\n         let local_name = local_name_entry.ptr();\n-        let expected_name =\n-            find_node_at_offset::<ast::Name>(file.syntax(), expected_offset.into()).unwrap();\n         assert_eq!(local_name.range(), expected_name.syntax().range());\n     }\n \n@@ -470,11 +470,26 @@ mod tests {\n     fn test_resolve_local_name_shadow() {\n         do_check_local_name(\n             r\"\n-        fn foo(x: String) {\n-            let x : &str = &x;\n-            x<|>\n-        }\",\n-            46,\n+            fn foo(x: String) {\n+                let x : &str = &x;\n+                x<|>\n+            }\n+            \",\n+            53,\n+        );\n+    }\n+\n+    #[test]\n+    fn ref_patterns_contribute_bindings() {\n+        do_check_local_name(\n+            r\"\n+            fn foo() {\n+                if let Some(&from) = bar() {\n+                    from<|>;\n+                }\n+            }\n+            \",\n+            53,\n         );\n     }\n }"}, {"sha": "593fe15981fc562d26fdef58f87b6158ca42784f", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff3d91bb0ce9e40059c7322ce562946b8088d3e7/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff3d91bb0ce9e40059c7322ce562946b8088d3e7/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=ff3d91bb0ce9e40059c7322ce562946b8088d3e7", "patch": "@@ -315,15 +315,20 @@ pub enum Pat {\n         path: Option<Path>,\n         args: Vec<PatId>,\n     },\n+    Ref {\n+        pat: PatId,\n+        mutability: Mutability,\n+    },\n }\n \n impl Pat {\n-    pub fn walk_child_pats(&self, f: impl FnMut(PatId)) {\n+    pub fn walk_child_pats(&self, mut f: impl FnMut(PatId)) {\n         match self {\n             Pat::Missing | Pat::Bind { .. } => {}\n             Pat::TupleStruct { args, .. } => {\n                 args.iter().map(|pat| *pat).for_each(f);\n             }\n+            Pat::Ref { pat, .. } => f(*pat),\n         }\n     }\n }\n@@ -684,6 +689,11 @@ impl ExprCollector {\n                 let args = p.args().map(|p| self.collect_pat(p)).collect();\n                 self.alloc_pat(Pat::TupleStruct { path, args }, syntax_ptr)\n             }\n+            ast::PatKind::RefPat(p) => {\n+                let pat = self.collect_pat_opt(p.pat());\n+                let mutability = Mutability::from_mutable(p.is_mut());\n+                self.alloc_pat(Pat::Ref { pat, mutability }, syntax_ptr)\n+            }\n             _ => {\n                 // TODO\n                 self.alloc_pat(Pat::Missing, syntax_ptr)"}, {"sha": "8bf439b60f2738dd953d7fb32f2984c88513e37d", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff3d91bb0ce9e40059c7322ce562946b8088d3e7/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff3d91bb0ce9e40059c7322ce562946b8088d3e7/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=ff3d91bb0ce9e40059c7322ce562946b8088d3e7", "patch": "@@ -348,6 +348,12 @@ impl UseTreeList {\n     }\n }\n \n+impl RefPat {\n+    pub fn is_mut(&self) -> bool {\n+        self.syntax().children().any(|n| n.kind() == MUT_KW)\n+    }\n+}\n+\n fn child_opt<P: AstNode, C: AstNode>(parent: &P) -> Option<&C> {\n     children(parent).next()\n }"}, {"sha": "f745cb1cbfe663af6f05209f37f3c3eabd5ef53f", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff3d91bb0ce9e40059c7322ce562946b8088d3e7/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff3d91bb0ce9e40059c7322ce562946b8088d3e7/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=ff3d91bb0ce9e40059c7322ce562946b8088d3e7", "patch": "@@ -2456,7 +2456,11 @@ impl AstNode for RefPat {\n }\n \n \n-impl RefPat {}\n+impl RefPat {\n+    pub fn pat(&self) -> Option<&Pat> {\n+        super::child_opt(self)\n+    }\n+}\n \n // ReferenceType\n #[derive(Debug, PartialEq, Eq, Hash)]"}, {"sha": "bac62fa0478dc5491dd3d6b4d5ebf4344e209b42", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff3d91bb0ce9e40059c7322ce562946b8088d3e7/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/ff3d91bb0ce9e40059c7322ce562946b8088d3e7/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=ff3d91bb0ce9e40059c7322ce562946b8088d3e7", "patch": "@@ -462,7 +462,7 @@ Grammar(\n             ],\n         ),\n \n-        \"RefPat\": (),\n+        \"RefPat\": ( options: [ \"Pat\" ]),\n         \"BindPat\": ( traits: [\"NameOwner\"] ),\n         \"PlaceholderPat\": (),\n         \"PathPat\": (),"}]}