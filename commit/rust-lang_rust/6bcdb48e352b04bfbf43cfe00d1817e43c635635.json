{"sha": "6bcdb48e352b04bfbf43cfe00d1817e43c635635", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiY2RiNDhlMzUyYjA0YmZiZjQzY2ZlMDBkMTgxN2U0M2M2MzU2MzU=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-25T20:42:38Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-25T20:42:38Z"}, "message": "Disallow block as a variable name in preparation for it becoming a keyword.", "tree": {"sha": "e59553d48705b9ea91fae82474ad310afdd1932d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e59553d48705b9ea91fae82474ad310afdd1932d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bcdb48e352b04bfbf43cfe00d1817e43c635635", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bcdb48e352b04bfbf43cfe00d1817e43c635635", "html_url": "https://github.com/rust-lang/rust/commit/6bcdb48e352b04bfbf43cfe00d1817e43c635635", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bcdb48e352b04bfbf43cfe00d1817e43c635635/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01675f34e06f5e59c71d28179dd4f62fe5437403", "url": "https://api.github.com/repos/rust-lang/rust/commits/01675f34e06f5e59c71d28179dd4f62fe5437403", "html_url": "https://github.com/rust-lang/rust/commit/01675f34e06f5e59c71d28179dd4f62fe5437403"}], "stats": {"total": 95, "additions": 48, "deletions": 47}, "files": [{"sha": "a5534b8d5977e88b8f553732819356fbb88722e5", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6bcdb48e352b04bfbf43cfe00d1817e43c635635/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bcdb48e352b04bfbf43cfe00d1817e43c635635/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=6bcdb48e352b04bfbf43cfe00d1817e43c635635", "patch": "@@ -103,11 +103,11 @@ fn visit_expr(&@ctx cx, &@ast::expr ex, &scope sc, &vt[scope] v) {\n                 case (_) { }\n             }\n         }\n-        ast::expr_for_each(?decl, ?call, ?block) {\n-            check_for_each(*cx, decl, call, block, sc, v);\n+        ast::expr_for_each(?decl, ?call, ?blk) {\n+            check_for_each(*cx, decl, call, blk, sc, v);\n         }\n-        ast::expr_for(?decl, ?seq, ?block) {\n-            check_for(*cx, decl, seq, block, sc, v);\n+        ast::expr_for(?decl, ?seq, ?blk) {\n+            check_for(*cx, decl, seq, blk, sc, v);\n         }\n         ast::expr_path(?pt) {\n             check_var(*cx, ex, pt, ex.id, false, sc);\n@@ -326,7 +326,7 @@ fn arm_defnums(&ast::arm arm) -> node_id[] {\n }\n \n fn check_for_each(&ctx cx, &@ast::local local, &@ast::expr call,\n-                  &ast::block block, &scope sc, &vt[scope] v) {\n+                  &ast::block blk, &scope sc, &vt[scope] v) {\n     visit::visit_expr(call, sc, v);\n     alt (call.node) {\n         case (ast::expr_call(?f, ?args)) {\n@@ -339,12 +339,12 @@ fn check_for_each(&ctx cx, &@ast::local local, &@ast::expr call,\n                      tys=data.unsafe_ts,\n                      depends_on=deps(sc, data.root_vars),\n                      mutable ok=valid);\n-            visit::visit_block(block, @(*sc + ~[new_sc]), v);\n+            visit::visit_block(blk, @(*sc + ~[new_sc]), v);\n         }\n     }\n }\n \n-fn check_for(&ctx cx, &@ast::local local, &@ast::expr seq, &ast::block block,\n+fn check_for(&ctx cx, &@ast::local local, &@ast::expr seq, &ast::block blk,\n              &scope sc, &vt[scope] v) {\n     visit::visit_expr(seq, sc, v);\n     auto defnum = local.node.id;\n@@ -374,7 +374,7 @@ fn check_for(&ctx cx, &@ast::local local, &@ast::expr seq, &ast::block block,\n              tys=unsafe,\n              depends_on=deps(sc, root_def),\n              mutable ok=valid);\n-    visit::visit_block(block, @(*sc + ~[new_sc]), v);\n+    visit::visit_block(blk, @(*sc + ~[new_sc]), v);\n }\n \n fn check_var(&ctx cx, &@ast::expr ex, &ast::path p, ast::node_id id,"}, {"sha": "68f4c7eb609bc39cd866eb984ab394ed769f67a8", "filename": "src/comp/middle/trans_dps.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6bcdb48e352b04bfbf43cfe00d1817e43c635635/src%2Fcomp%2Fmiddle%2Ftrans_dps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bcdb48e352b04bfbf43cfe00d1817e43c635635/src%2Fcomp%2Fmiddle%2Ftrans_dps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_dps.rs?ref=6bcdb48e352b04bfbf43cfe00d1817e43c635635", "patch": "@@ -446,22 +446,22 @@ fn trans_recv(&@block_ctxt bcx, &dest dest, &@ast::expr expr) -> @block_ctxt {\n     ret bcx;    // TODO\n }\n \n-fn trans_block(&@block_ctxt cx, &dest dest, &ast::block block)\n+fn trans_block(&@block_ctxt cx, &dest dest, &ast::block blk)\n         -> @block_ctxt {\n     auto bcx = cx;\n-    for each (@ast::local local in trans::block_locals(block)) {\n+    for each (@ast::local local in trans::block_locals(blk)) {\n         bcx = trans::alloc_local(bcx, local).bcx;\n     }\n \n-    for (@ast::stmt stmt in block.node.stmts) {\n+    for (@ast::stmt stmt in blk.node.stmts) {\n         bcx = trans_stmt(bcx, stmt);\n \n         // If we hit a terminator, control won't go any further so\n         // we're in dead-code land. Stop here.\n         if trans::is_terminated(bcx) { ret bcx; }\n     }\n \n-    alt (block.node.expr) {\n+    alt (blk.node.expr) {\n       some(?e) { bcx = trans_expr(bcx, dest, e); }\n       none { /* no-op */ }\n     }"}, {"sha": "5ddd76337d2200db900ddb81b322278e99cb5f46", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6bcdb48e352b04bfbf43cfe00d1817e43c635635/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bcdb48e352b04bfbf43cfe00d1817e43c635635/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=6bcdb48e352b04bfbf43cfe00d1817e43c635635", "patch": "@@ -1147,7 +1147,7 @@ mod writeback {\n     }\n     fn keep_going(@wb_ctxt wbcx) -> bool { !wbcx.ignore && wbcx.success }\n \n-    fn resolve_type_vars_in_block(&@fn_ctxt fcx, &ast::block block) -> bool {\n+    fn resolve_type_vars_in_block(&@fn_ctxt fcx, &ast::block blk) -> bool {\n         auto wbcx = @rec(fcx = fcx,\n                          mutable ignore = false,\n                          mutable success = true);\n@@ -1163,7 +1163,7 @@ mod writeback {\n                 visit_pat_pre=bind visit_pat_pre(wbcx, _),\n                 visit_local_pre=bind visit_local_pre(wbcx, _)\n                 with walk::default_visitor());\n-        walk::walk_block(visit, block);\n+        walk::walk_block(visit, blk);\n         ret wbcx.success;\n     }\n }\n@@ -2598,14 +2598,14 @@ fn check_stmt(&@fn_ctxt fcx, &@ast::stmt stmt) {\n     write::nil_ty(fcx.ccx.tcx, node_id);\n }\n \n-fn check_block(&@fn_ctxt fcx, &ast::block block) {\n-    for (@ast::stmt s in block.node.stmts) { check_stmt(fcx, s); }\n-    alt (block.node.expr) {\n-        case (none) { write::nil_ty(fcx.ccx.tcx, block.node.id); }\n+fn check_block(&@fn_ctxt fcx, &ast::block blk) {\n+    for (@ast::stmt s in blk.node.stmts) { check_stmt(fcx, s); }\n+    alt (blk.node.expr) {\n+        case (none) { write::nil_ty(fcx.ccx.tcx, blk.node.id); }\n         case (some(?e)) {\n             check_expr(fcx, e);\n             auto ety = expr_ty(fcx.ccx.tcx, e);\n-            write::ty_only_fixup(fcx, block.node.id, ety);\n+            write::ty_only_fixup(fcx, blk.node.id, ety);\n         }\n     }\n }"}, {"sha": "ea41aecbadcd1841dfe26ab4b4442628d1e55905", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6bcdb48e352b04bfbf43cfe00d1817e43c635635/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bcdb48e352b04bfbf43cfe00d1817e43c635635/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=6bcdb48e352b04bfbf43cfe00d1817e43c635635", "patch": "@@ -138,8 +138,8 @@ fn fold_mac_(&mac m, ast_fold fld) -> mac {\n                 case (mac_embed_type(?ty)) {\n                     mac_embed_type(fld.fold_ty(ty))\n                 }\n-                case (mac_embed_block(?block)) {\n-                    mac_embed_block(fld.fold_block(block))\n+                case (mac_embed_block(?blk)) {\n+                    mac_embed_block(fld.fold_block(blk))\n                 }\n                 case (mac_ellipsis) { mac_ellipsis }\n             },\n@@ -388,25 +388,25 @@ fn noop_fold_expr(&expr_ e, ast_fold fld) -> expr_ {\n         case (expr_while(?cond, ?body)) {\n             expr_while(fld.fold_expr(cond), fld.fold_block(body))\n                 }\n-        case (expr_for(?decl, ?expr, ?block)) {\n+        case (expr_for(?decl, ?expr, ?blk)) {\n             expr_for(fld.fold_local(decl), fld.fold_expr(expr),\n-                     fld.fold_block(block))\n+                     fld.fold_block(blk))\n                 }\n-        case (expr_for_each(?decl, ?expr, ?block)) {\n+        case (expr_for_each(?decl, ?expr, ?blk)) {\n             expr_for_each(fld.fold_local(decl), fld.fold_expr(expr),\n-                          fld.fold_block(block))\n+                          fld.fold_block(blk))\n                 }\n-        case (expr_do_while(?block, ?expr)) {\n-            expr_do_while(fld.fold_block(block), fld.fold_expr(expr))\n+        case (expr_do_while(?blk, ?expr)) {\n+            expr_do_while(fld.fold_block(blk), fld.fold_expr(expr))\n                 }\n         case (expr_alt(?expr, ?arms)) {\n             expr_alt(fld.fold_expr(expr), ivec::map(fld.fold_arm, arms))\n                 }\n         case (expr_fn(?f)) {\n             expr_fn(fld.fold_fn(f))\n                 }\n-        case (expr_block(?block)) {\n-            expr_block(fld.fold_block(block))\n+        case (expr_block(?blk)) {\n+            expr_block(fld.fold_block(blk))\n                 }\n         case (expr_move(?el, ?er)) {\n             expr_move(fld.fold_expr(el), fld.fold_expr(er))"}, {"sha": "a91a95dd77f0d35e294b3f0a11d07ccd6b253228", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6bcdb48e352b04bfbf43cfe00d1817e43c635635/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bcdb48e352b04bfbf43cfe00d1817e43c635635/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=6bcdb48e352b04bfbf43cfe00d1817e43c635635", "patch": "@@ -174,6 +174,7 @@ fn bad_expr_word_table() -> hashmap[str, ()] {\n     words.insert(\"fn\", ());\n     words.insert(\"pred\", ());\n     words.insert(\"iter\", ());\n+    words.insert(\"block\", ());\n     words.insert(\"import\", ());\n     words.insert(\"export\", ());\n     words.insert(\"let\", ());\n@@ -1407,8 +1408,8 @@ fn parse_alt_expr(&parser p) -> @ast::expr {\n         if (p.peek() == token::LPAREN) { parens = true; p.bump(); }\n         auto pats = parse_pats(p);\n         if (parens) { expect(p, token::RPAREN); }\n-        auto block = parse_block(p);\n-        arms += ~[rec(pats=pats, block=block)];\n+        auto blk = parse_block(p);\n+        arms += ~[rec(pats=pats, block=blk)];\n     }\n     auto hi = p.get_hi_pos();\n     p.bump();"}, {"sha": "b3a915070a010fa0e7bdd4251bf30ffce7d75cc9", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6bcdb48e352b04bfbf43cfe00d1817e43c635635/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bcdb48e352b04bfbf43cfe00d1817e43c635635/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=6bcdb48e352b04bfbf43cfe00d1817e43c635635", "patch": "@@ -601,15 +601,15 @@ fn print_possibly_embedded_block(&ps s, &ast::block blk, bool embedded,\n     s.ann.post(ann_node);\n }\n \n-fn print_if(&ps s, &@ast::expr test, &ast::block block,\n+fn print_if(&ps s, &@ast::expr test, &ast::block blk,\n             &option::t[@ast::expr] elseopt, bool chk) {\n     head(s, \"if\");\n     if (chk) {\n         word_nbsp(s, \"check\");\n     }\n     print_expr(s, test);\n     space(s.s);\n-    print_block(s, block);\n+    print_block(s, blk);\n     fn do_else(&ps s, option::t[@ast::expr] els) {\n         alt (els) {\n             case (some(?_else)) {\n@@ -773,11 +773,11 @@ fn print_expr(&ps s, &@ast::expr expr) {\n             word_space(s, \"as\");\n             print_type(s, *ty);\n         }\n-        case (ast::expr_if(?test, ?block, ?elseopt)) {\n-            print_if(s, test, block, elseopt, false);\n+        case (ast::expr_if(?test, ?blk, ?elseopt)) {\n+            print_if(s, test, blk, elseopt, false);\n         }\n-        case (ast::expr_if_check(?test, ?block, ?elseopt)) {\n-            print_if(s, test, block, elseopt, true);\n+        case (ast::expr_if_check(?test, ?blk, ?elseopt)) {\n+            print_if(s, test, blk, elseopt, true);\n         }\n         case (ast::expr_ternary(?test, ?then, ?els)) {\n             print_expr(s, test);\n@@ -788,13 +788,13 @@ fn print_expr(&ps s, &@ast::expr expr) {\n             word_space(s, \":\");\n             print_expr(s, els);\n         }\n-        case (ast::expr_while(?test, ?block)) {\n+        case (ast::expr_while(?test, ?blk)) {\n             head(s, \"while\");\n             print_expr(s, test);\n             space(s.s);\n-            print_block(s, block);\n+            print_block(s, blk);\n         }\n-        case (ast::expr_for(?decl, ?expr, ?block)) {\n+        case (ast::expr_for(?decl, ?expr, ?blk)) {\n             head(s, \"for\");\n             popen(s);\n             print_for_decl(s, decl);\n@@ -803,9 +803,9 @@ fn print_expr(&ps s, &@ast::expr expr) {\n             print_expr(s, expr);\n             pclose(s);\n             space(s.s);\n-            print_block(s, block);\n+            print_block(s, blk);\n         }\n-        case (ast::expr_for_each(?decl, ?expr, ?block)) {\n+        case (ast::expr_for_each(?decl, ?expr, ?blk)) {\n             head(s, \"for each\");\n             popen(s);\n             print_for_decl(s, decl);\n@@ -814,12 +814,12 @@ fn print_expr(&ps s, &@ast::expr expr) {\n             print_expr(s, expr);\n             pclose(s);\n             space(s.s);\n-            print_block(s, block);\n+            print_block(s, blk);\n         }\n-        case (ast::expr_do_while(?block, ?expr)) {\n+        case (ast::expr_do_while(?blk, ?expr)) {\n             head(s, \"do\");\n             space(s.s);\n-            print_block(s, block);\n+            print_block(s, blk);\n             space(s.s);\n             word_space(s, \"while\");\n             print_expr(s, expr);\n@@ -853,14 +853,14 @@ fn print_expr(&ps s, &@ast::expr expr) {\n             space(s.s);\n             print_block(s, f.body);\n         }\n-        case (ast::expr_block(?block)) {\n+        case (ast::expr_block(?blk)) {\n             // containing cbox, will be closed by print-block at }\n \n             cbox(s, indent_unit);\n             // head-box, will be closed by print-block after {\n \n             ibox(s, 0u);\n-            print_block(s, block);\n+            print_block(s, blk);\n         }\n         case (ast::expr_move(?lhs, ?rhs)) {\n             print_expr(s, lhs);"}]}