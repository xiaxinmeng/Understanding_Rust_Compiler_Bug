{"sha": "ba80c662f448c69cbd184d18630b8824f0169b2e", "node_id": "C_kwDOAAsO6NoAKGJhODBjNjYyZjQ0OGM2OWNiZDE4NGQxODYzMGI4ODI0ZjAxNjliMmU", "commit": {"author": {"name": "Neil Roberts", "email": "bpeeluk@yahoo.co.uk", "date": "2023-01-28T13:19:01Z"}, "committer": {"name": "Neil Roberts", "email": "bpeeluk@yahoo.co.uk", "date": "2023-01-28T19:37:01Z"}, "message": "slice: Add a specialization for clone_into when T is Copy\n\nThe implementation for the ToOwned::clone_into method on [T] is a copy\nof the code for vec::clone_from. In 361398009be6 the code for\nvec::clone_from gained a specialization for when T is Copy. This commit\ncopies that specialization over to the clone_into implementation.", "tree": {"sha": "9204e8b8b73c81e9b386b1a5b4f16144ba1b0a66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9204e8b8b73c81e9b386b1a5b4f16144ba1b0a66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba80c662f448c69cbd184d18630b8824f0169b2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba80c662f448c69cbd184d18630b8824f0169b2e", "html_url": "https://github.com/rust-lang/rust/commit/ba80c662f448c69cbd184d18630b8824f0169b2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba80c662f448c69cbd184d18630b8824f0169b2e/comments", "author": {"login": "bpeel", "id": 12873, "node_id": "MDQ6VXNlcjEyODcz", "avatar_url": "https://avatars.githubusercontent.com/u/12873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpeel", "html_url": "https://github.com/bpeel", "followers_url": "https://api.github.com/users/bpeel/followers", "following_url": "https://api.github.com/users/bpeel/following{/other_user}", "gists_url": "https://api.github.com/users/bpeel/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpeel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpeel/subscriptions", "organizations_url": "https://api.github.com/users/bpeel/orgs", "repos_url": "https://api.github.com/users/bpeel/repos", "events_url": "https://api.github.com/users/bpeel/events{/privacy}", "received_events_url": "https://api.github.com/users/bpeel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bpeel", "id": 12873, "node_id": "MDQ6VXNlcjEyODcz", "avatar_url": "https://avatars.githubusercontent.com/u/12873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpeel", "html_url": "https://github.com/bpeel", "followers_url": "https://api.github.com/users/bpeel/followers", "following_url": "https://api.github.com/users/bpeel/following{/other_user}", "gists_url": "https://api.github.com/users/bpeel/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpeel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpeel/subscriptions", "organizations_url": "https://api.github.com/users/bpeel/orgs", "repos_url": "https://api.github.com/users/bpeel/repos", "events_url": "https://api.github.com/users/bpeel/events{/privacy}", "received_events_url": "https://api.github.com/users/bpeel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6f0642827e21a088b0130c84857d84f5433301d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6f0642827e21a088b0130c84857d84f5433301d", "html_url": "https://github.com/rust-lang/rust/commit/d6f0642827e21a088b0130c84857d84f5433301d"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "093dcbbe8bf775c3b437ee7329527ca7ed5d6da7", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ba80c662f448c69cbd184d18630b8824f0169b2e/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba80c662f448c69cbd184d18630b8824f0169b2e/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=ba80c662f448c69cbd184d18630b8824f0169b2e", "patch": "@@ -782,6 +782,38 @@ impl<T, A: Allocator> BorrowMut<[T]> for Vec<T, A> {\n     }\n }\n \n+// Specializable trait for implementing ToOwned::clone_into. This is\n+// public in the crate and has the Allocator parameter so that\n+// vec::clone_from use it too.\n+#[cfg(not(no_global_oom_handling))]\n+pub(crate) trait SpecCloneIntoVec<T, A: Allocator> {\n+    fn clone_into(&self, target: &mut Vec<T, A>);\n+}\n+\n+#[cfg(not(no_global_oom_handling))]\n+impl<T: Clone, A: Allocator> SpecCloneIntoVec<T, A> for [T] {\n+    default fn clone_into(&self, target: &mut Vec<T, A>) {\n+        // drop anything in target that will not be overwritten\n+        target.truncate(self.len());\n+\n+        // target.len <= self.len due to the truncate above, so the\n+        // slices here are always in-bounds.\n+        let (init, tail) = self.split_at(target.len());\n+\n+        // reuse the contained values' allocations/resources.\n+        target.clone_from_slice(init);\n+        target.extend_from_slice(tail);\n+    }\n+}\n+\n+#[cfg(not(no_global_oom_handling))]\n+impl<T: Copy, A: Allocator> SpecCloneIntoVec<T, A> for [T] {\n+    fn clone_into(&self, target: &mut Vec<T, A>) {\n+        target.clear();\n+        target.extend_from_slice(self);\n+    }\n+}\n+\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Clone> ToOwned for [T] {\n@@ -797,16 +829,7 @@ impl<T: Clone> ToOwned for [T] {\n     }\n \n     fn clone_into(&self, target: &mut Vec<T>) {\n-        // drop anything in target that will not be overwritten\n-        target.truncate(self.len());\n-\n-        // target.len <= self.len due to the truncate above, so the\n-        // slices here are always in-bounds.\n-        let (init, tail) = self.split_at(target.len());\n-\n-        // reuse the contained values' allocations/resources.\n-        target.clone_from_slice(init);\n-        target.extend_from_slice(tail);\n+        SpecCloneIntoVec::clone_into(self, target);\n     }\n }\n "}]}