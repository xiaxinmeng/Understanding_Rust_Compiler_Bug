{"sha": "3fe4dd2dda2826643c4ce4ee7307707a90e08d25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZTRkZDJkZGEyODI2NjQzYzRjZTRlZTczMDc3MDdhOTBlMDhkMjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-11T07:23:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-11T07:23:31Z"}, "message": "Auto merge of #71953 - oli-obk:const_prop_deaggregates, r=wesleywiser\n\nConst prop aggregates even if partially or fully modified\n\nr? @wesleywiser\n\ncc @rust-lang/wg-mir-opt I'm moderately scared of this change, but I'm confident in having reviewed all the cases.", "tree": {"sha": "9a81226aa858ac18140897ddf90e4e6174bdfb6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a81226aa858ac18140897ddf90e4e6174bdfb6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fe4dd2dda2826643c4ce4ee7307707a90e08d25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fe4dd2dda2826643c4ce4ee7307707a90e08d25", "html_url": "https://github.com/rust-lang/rust/commit/3fe4dd2dda2826643c4ce4ee7307707a90e08d25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fe4dd2dda2826643c4ce4ee7307707a90e08d25/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aeb473803d1ead96fab51224ba3e366f44883423", "url": "https://api.github.com/repos/rust-lang/rust/commits/aeb473803d1ead96fab51224ba3e366f44883423", "html_url": "https://github.com/rust-lang/rust/commit/aeb473803d1ead96fab51224ba3e366f44883423"}, {"sha": "a1ebb94775daa63cb105cc1c410022c20002667b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1ebb94775daa63cb105cc1c410022c20002667b", "html_url": "https://github.com/rust-lang/rust/commit/a1ebb94775daa63cb105cc1c410022c20002667b"}], "stats": {"total": 384, "additions": 342, "deletions": 42}, "files": [{"sha": "e898f22ec230dfdb635fed5bf1ff5bd6e9053a12", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 58, "deletions": 42, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/3fe4dd2dda2826643c4ce4ee7307707a90e08d25/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe4dd2dda2826643c4ce4ee7307707a90e08d25/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=3fe4dd2dda2826643c4ce4ee7307707a90e08d25", "patch": "@@ -349,8 +349,8 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n     }\n \n-    fn get_const(&self, local: Local) -> Option<OpTy<'tcx>> {\n-        let op = self.ecx.access_local(self.ecx.frame(), local, None).ok();\n+    fn get_const(&self, place: Place<'tcx>) -> Option<OpTy<'tcx>> {\n+        let op = self.ecx.eval_place_to_op(place, None).ok();\n \n         // Try to read the local as an immediate so that if it is representable as a scalar, we can\n         // handle it as such, but otherwise, just return the value as is.\n@@ -772,13 +772,25 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n     fn visit_local(&mut self, &local: &Local, context: PlaceContext, _: Location) {\n         use rustc_middle::mir::visit::PlaceContext::*;\n         match context {\n-            // Constants must have at most one write\n-            // FIXME(oli-obk): we could be more powerful here, if the multiple writes\n-            // only occur in independent execution paths\n-            MutatingUse(MutatingUseContext::Store) => {\n+            // Projections are fine, because `&mut foo.x` will be caught by\n+            // `MutatingUseContext::Borrow` elsewhere.\n+            MutatingUse(MutatingUseContext::Projection)\n+            | MutatingUse(MutatingUseContext::Store) => {\n                 if !self.found_assignment.insert(local) {\n-                    trace!(\"local {:?} can't be propagated because of multiple assignments\", local);\n-                    self.can_const_prop[local] = ConstPropMode::NoPropagation;\n+                    match &mut self.can_const_prop[local] {\n+                        // If the local can only get propagated in its own block, then we don't have\n+                        // to worry about multiple assignments, as we'll nuke the const state at the\n+                        // end of the block anyway, and inside the block we overwrite previous\n+                        // states as applicable.\n+                        ConstPropMode::OnlyInsideOwnBlock => {}\n+                        other => {\n+                            trace!(\n+                                \"local {:?} can't be propagated because of multiple assignments\",\n+                                local,\n+                            );\n+                            *other = ConstPropMode::NoPropagation;\n+                        }\n+                    }\n                 }\n             }\n             // Reading constants is allowed an arbitrary number of times\n@@ -787,12 +799,6 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n             | NonMutatingUse(NonMutatingUseContext::Inspect)\n             | NonMutatingUse(NonMutatingUseContext::Projection)\n             | NonUse(_) => {}\n-            // FIXME(felix91gr): explain the reasoning behind this\n-            MutatingUse(MutatingUseContext::Projection) => {\n-                if self.local_kinds[local] != LocalKind::Temp {\n-                    self.can_const_prop[local] = ConstPropMode::NoPropagation;\n-                }\n-            }\n             _ => {\n                 trace!(\"local {:?} can't be propagaged because it's used: {:?}\", local, context);\n                 self.can_const_prop[local] = ConstPropMode::NoPropagation;\n@@ -826,40 +832,50 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n         if let StatementKind::Assign(box (place, ref mut rval)) = statement.kind {\n             let place_ty: Ty<'tcx> = place.ty(&self.local_decls, self.tcx).ty;\n             if let Ok(place_layout) = self.tcx.layout_of(self.param_env.and(place_ty)) {\n-                if let Some(local) = place.as_local() {\n-                    let can_const_prop = self.can_const_prop[local];\n-                    if let Some(()) = self.const_prop(rval, place_layout, source_info, place) {\n-                        if can_const_prop != ConstPropMode::NoPropagation {\n-                            // This will return None for Locals that are from other blocks,\n-                            // so it should be okay to propagate from here on down.\n-                            if let Some(value) = self.get_const(local) {\n-                                if self.should_const_prop(value) {\n-                                    trace!(\"replacing {:?} with {:?}\", rval, value);\n-                                    self.replace_with_const(rval, value, statement.source_info);\n-                                    if can_const_prop == ConstPropMode::FullConstProp\n-                                        || can_const_prop == ConstPropMode::OnlyInsideOwnBlock\n-                                    {\n-                                        trace!(\"propagated into {:?}\", local);\n-                                    }\n-                                }\n-                                if can_const_prop == ConstPropMode::OnlyInsideOwnBlock {\n-                                    trace!(\n-                                        \"found local restricted to its block. Will remove it from const-prop after block is finished. Local: {:?}\",\n-                                        local\n-                                    );\n-                                    self.locals_of_current_block.insert(local);\n+                let can_const_prop = self.can_const_prop[place.local];\n+                if let Some(()) = self.const_prop(rval, place_layout, source_info, place) {\n+                    if can_const_prop != ConstPropMode::NoPropagation {\n+                        // This will return None for variables that are from other blocks,\n+                        // so it should be okay to propagate from here on down.\n+                        if let Some(value) = self.get_const(place) {\n+                            if self.should_const_prop(value) {\n+                                trace!(\"replacing {:?} with {:?}\", rval, value);\n+                                self.replace_with_const(rval, value, statement.source_info);\n+                                if can_const_prop == ConstPropMode::FullConstProp\n+                                    || can_const_prop == ConstPropMode::OnlyInsideOwnBlock\n+                                {\n+                                    trace!(\"propagated into {:?}\", place);\n                                 }\n                             }\n+                            if can_const_prop == ConstPropMode::OnlyInsideOwnBlock {\n+                                trace!(\n+                                    \"found local restricted to its block. Will remove it from const-prop after block is finished. Local: {:?}\",\n+                                    place.local\n+                                );\n+                                self.locals_of_current_block.insert(place.local);\n+                            }\n                         }\n                     }\n-                    if self.can_const_prop[local] == ConstPropMode::OnlyPropagateInto\n-                        || self.can_const_prop[local] == ConstPropMode::NoPropagation\n+                    if can_const_prop == ConstPropMode::OnlyPropagateInto\n+                        || can_const_prop == ConstPropMode::NoPropagation\n                     {\n-                        trace!(\"can't propagate into {:?}\", local);\n-                        if local != RETURN_PLACE {\n-                            Self::remove_const(&mut self.ecx, local);\n+                        trace!(\"can't propagate into {:?}\", place);\n+                        if place.local != RETURN_PLACE {\n+                            Self::remove_const(&mut self.ecx, place.local);\n                         }\n                     }\n+                } else {\n+                    // Const prop failed, so erase the destination, ensuring that whatever happens\n+                    // from here on, does not know about the previous value.\n+                    // This is important in case we have\n+                    // ```rust\n+                    // let mut x = 42;\n+                    // x = SOME_MUTABLE_STATIC;\n+                    // // x must now be undefined\n+                    // ```\n+                    // FIXME: we overzealously erase the entire local, because that's easier to\n+                    // implement.\n+                    Self::remove_const(&mut self.ecx, place.local);\n                 }\n             }\n         } else {\n@@ -993,7 +1009,7 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                           arguments are of the variant `Operand::Copy`. This allows us to\n                           simplify our handling of `Operands` in this case.\n                         */\n-                        if let Some(l) = opr.place().and_then(|p| p.as_local()) {\n+                        if let Some(l) = opr.place() {\n                             if let Some(value) = self.get_const(l) {\n                                 if self.should_const_prop(value) {\n                                     // FIXME(felix91gr): this code only handles `Scalar` cases."}, {"sha": "b3a2d80fa950a371b8d22c6523c1c4c535c34274", "filename": "src/test/mir-opt/const_prop/mutable_variable.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3fe4dd2dda2826643c4ce4ee7307707a90e08d25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe4dd2dda2826643c4ce4ee7307707a90e08d25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable.rs?ref=3fe4dd2dda2826643c4ce4ee7307707a90e08d25", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: -O\n+\n+// EMIT_MIR rustc.main.ConstProp.diff\n+fn main() {\n+    let mut x = 42;\n+    x = 99;\n+    let y = x;\n+}"}, {"sha": "c6c5b0cf72635d4247c75ae81ccf8b40dcdc66fb", "filename": "src/test/mir-opt/const_prop/mutable_variable/rustc.main.ConstProp.diff", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3fe4dd2dda2826643c4ce4ee7307707a90e08d25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3fe4dd2dda2826643c4ce4ee7307707a90e08d25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable%2Frustc.main.ConstProp.diff?ref=3fe4dd2dda2826643c4ce4ee7307707a90e08d25", "patch": "@@ -0,0 +1,53 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable.rs:4:11: 4:11\n+      let mut _1: i32;                     // in scope 0 at $DIR/mutable_variable.rs:5:9: 5:14\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/mutable_variable.rs:5:9: 5:14\n+          let _2: i32;                     // in scope 1 at $DIR/mutable_variable.rs:7:9: 7:10\n+          scope 2 {\n+              debug y => _2;               // in scope 2 at $DIR/mutable_variable.rs:7:9: 7:10\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable.rs:5:9: 5:14\n+          _1 = const 42i32;                // scope 0 at $DIR/mutable_variable.rs:5:17: 5:19\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x0000002a))\n+                                           // mir::Constant\n+                                           // + span: $DIR/mutable_variable.rs:5:17: 5:19\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n+          _1 = const 99i32;                // scope 1 at $DIR/mutable_variable.rs:6:5: 6:11\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000063))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/mutable_variable.rs:6:9: 6:11\n++                                          // + span: $DIR/mutable_variable.rs:6:5: 6:11\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000063)) }\n+          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable.rs:7:9: 7:10\n+-         _2 = _1;                         // scope 1 at $DIR/mutable_variable.rs:7:13: 7:14\n++         _2 = const 99i32;                // scope 1 at $DIR/mutable_variable.rs:7:13: 7:14\n++                                          // ty::Const\n++                                          // + ty: i32\n++                                          // + val: Value(Scalar(0x00000063))\n++                                          // mir::Constant\n++                                          // + span: $DIR/mutable_variable.rs:7:13: 7:14\n++                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000063)) }\n+          _0 = const ();                   // scope 0 at $DIR/mutable_variable.rs:4:11: 8:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/mutable_variable.rs:4:11: 8:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable.rs:8:1: 8:2\n+          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable.rs:8:1: 8:2\n+          return;                          // scope 0 at $DIR/mutable_variable.rs:8:2: 8:2\n+      }\n+  }\n+  "}, {"sha": "3c5fb4574b61f2f82af7a8fca8b57f223919f4d3", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3fe4dd2dda2826643c4ce4ee7307707a90e08d25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe4dd2dda2826643c4ce4ee7307707a90e08d25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.rs?ref=3fe4dd2dda2826643c4ce4ee7307707a90e08d25", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: -O\n+\n+// EMIT_MIR rustc.main.ConstProp.diff\n+fn main() {\n+    let mut x = (42, 43);\n+    x.1 = 99;\n+    let y = x;\n+}"}, {"sha": "26f0250d94c0bd97768673a8b50eb445b9177aed", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate/rustc.main.ConstProp.diff", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/3fe4dd2dda2826643c4ce4ee7307707a90e08d25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3fe4dd2dda2826643c4ce4ee7307707a90e08d25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate%2Frustc.main.ConstProp.diff?ref=3fe4dd2dda2826643c4ce4ee7307707a90e08d25", "patch": "@@ -0,0 +1,67 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_aggregate.rs:4:11: 4:11\n+      let mut _1: (i32, i32);              // in scope 0 at $DIR/mutable_variable_aggregate.rs:5:9: 5:14\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_aggregate.rs:5:9: 5:14\n+          let _2: (i32, i32);              // in scope 1 at $DIR/mutable_variable_aggregate.rs:7:9: 7:10\n+          scope 2 {\n+              debug y => _2;               // in scope 2 at $DIR/mutable_variable_aggregate.rs:7:9: 7:10\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:5:9: 5:14\n+          _1 = (const 42i32, const 43i32); // scope 0 at $DIR/mutable_variable_aggregate.rs:5:17: 5:25\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x0000002a))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/mutable_variable_aggregate.rs:5:18: 5:20\n++                                          // + span: $DIR/mutable_variable_aggregate.rs:5:17: 5:25\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x0000002b))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/mutable_variable_aggregate.rs:5:22: 5:24\n++                                          // + span: $DIR/mutable_variable_aggregate.rs:5:17: 5:25\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000002b)) }\n+          (_1.1: i32) = const 99i32;       // scope 1 at $DIR/mutable_variable_aggregate.rs:6:5: 6:13\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000063))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/mutable_variable_aggregate.rs:6:11: 6:13\n++                                          // + span: $DIR/mutable_variable_aggregate.rs:6:5: 6:13\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000063)) }\n+          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:7:9: 7:10\n+-         _2 = _1;                         // scope 1 at $DIR/mutable_variable_aggregate.rs:7:13: 7:14\n++         _2 = (const 42i32, const 99i32); // scope 1 at $DIR/mutable_variable_aggregate.rs:7:13: 7:14\n++                                          // ty::Const\n++                                          // + ty: i32\n++                                          // + val: Value(Scalar(0x0000002a))\n++                                          // mir::Constant\n++                                          // + span: $DIR/mutable_variable_aggregate.rs:7:13: 7:14\n++                                          // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n++                                          // ty::Const\n++                                          // + ty: i32\n++                                          // + val: Value(Scalar(0x00000063))\n++                                          // mir::Constant\n++                                          // + span: $DIR/mutable_variable_aggregate.rs:7:13: 7:14\n++                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000063)) }\n+          _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate.rs:4:11: 8:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/mutable_variable_aggregate.rs:4:11: 8:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:8:1: 8:2\n+          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:8:1: 8:2\n+          return;                          // scope 0 at $DIR/mutable_variable_aggregate.rs:8:2: 8:2\n+      }\n+  }\n+  "}, {"sha": "fc13cbf2abd56abff9fdaad41b87ae596a23e0af", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate_mut_ref.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3fe4dd2dda2826643c4ce4ee7307707a90e08d25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe4dd2dda2826643c4ce4ee7307707a90e08d25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.rs?ref=3fe4dd2dda2826643c4ce4ee7307707a90e08d25", "patch": "@@ -0,0 +1,9 @@\n+// compile-flags: -O\n+\n+// EMIT_MIR rustc.main.ConstProp.diff\n+fn main() {\n+    let mut x = (42, 43);\n+    let z = &mut x;\n+    z.1 = 99;\n+    let y = x;\n+}"}, {"sha": "44203ac327ab194ce0b1e9e8f345202e8fae4be6", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate_mut_ref/rustc.main.ConstProp.diff", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/3fe4dd2dda2826643c4ce4ee7307707a90e08d25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3fe4dd2dda2826643c4ce4ee7307707a90e08d25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref%2Frustc.main.ConstProp.diff?ref=3fe4dd2dda2826643c4ce4ee7307707a90e08d25", "patch": "@@ -0,0 +1,58 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:4:11: 4:11\n+      let mut _1: (i32, i32);              // in scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:9: 5:14\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:9: 5:14\n+          let _2: &mut (i32, i32);         // in scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:6:9: 6:10\n+          scope 2 {\n+              debug z => _2;               // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:6:9: 6:10\n+              let _3: (i32, i32);          // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:8:9: 8:10\n+              scope 3 {\n+                  debug y => _3;           // in scope 3 at $DIR/mutable_variable_aggregate_mut_ref.rs:8:9: 8:10\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:9: 5:14\n+          _1 = (const 42i32, const 43i32); // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:17: 5:25\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x0000002a))\n+                                           // mir::Constant\n+                                           // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:5:18: 5:20\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x0000002b))\n+                                           // mir::Constant\n+                                           // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:5:22: 5:24\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000002b)) }\n+          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:6:9: 6:10\n+          _2 = &mut _1;                    // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:6:13: 6:19\n+          ((*_2).1: i32) = const 99i32;    // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:7:5: 7:13\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000063))\n+                                           // mir::Constant\n+                                           // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:7:11: 7:13\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000063)) }\n+          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:8:9: 8:10\n+          _3 = _1;                         // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:8:13: 8:14\n+          _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:4:11: 9:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:4:11: 9:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:9:1: 9:2\n+          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:9:1: 9:2\n+          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:9:1: 9:2\n+          return;                          // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:9:2: 9:2\n+      }\n+  }\n+  "}, {"sha": "8c9cd00509622c0a624e5c626d47a4b6894685af", "filename": "src/test/mir-opt/const_prop/mutable_variable_no_prop.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3fe4dd2dda2826643c4ce4ee7307707a90e08d25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe4dd2dda2826643c4ce4ee7307707a90e08d25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.rs?ref=3fe4dd2dda2826643c4ce4ee7307707a90e08d25", "patch": "@@ -0,0 +1,12 @@\n+// compile-flags: -O\n+\n+static mut STATIC: u32 = 42;\n+\n+// EMIT_MIR rustc.main.ConstProp.diff\n+fn main() {\n+    let mut x = 42;\n+    unsafe {\n+        x = STATIC;\n+    }\n+    let y = x;\n+}"}, {"sha": "1e9cbe6024c9b06d12e8051808073b80ad9b0b62", "filename": "src/test/mir-opt/const_prop/mutable_variable_no_prop/rustc.main.ConstProp.diff", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/3fe4dd2dda2826643c4ce4ee7307707a90e08d25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3fe4dd2dda2826643c4ce4ee7307707a90e08d25/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop%2Frustc.main.ConstProp.diff?ref=3fe4dd2dda2826643c4ce4ee7307707a90e08d25", "patch": "@@ -0,0 +1,69 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_no_prop.rs:6:11: 6:11\n+      let mut _1: u32;                     // in scope 0 at $DIR/mutable_variable_no_prop.rs:7:9: 7:14\n+      let _2: ();                          // in scope 0 at $DIR/mutable_variable_no_prop.rs:8:5: 10:6\n+      let mut _3: u32;                     // in scope 0 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n+      let mut _4: *mut u32;                // in scope 0 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_no_prop.rs:7:9: 7:14\n+          let _5: u32;                     // in scope 1 at $DIR/mutable_variable_no_prop.rs:11:9: 11:10\n+          scope 2 {\n+          }\n+          scope 3 {\n+              debug y => _5;               // in scope 3 at $DIR/mutable_variable_no_prop.rs:11:9: 11:10\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_no_prop.rs:7:9: 7:14\n+          _1 = const 42u32;                // scope 0 at $DIR/mutable_variable_no_prop.rs:7:17: 7:19\n+                                           // ty::Const\n+                                           // + ty: u32\n+                                           // + val: Value(Scalar(0x0000002a))\n+                                           // mir::Constant\n+                                           // + span: $DIR/mutable_variable_no_prop.rs:7:17: 7:19\n+                                           // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n+          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:8:5: 10:6\n+          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n+          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n+          _4 = const {alloc0+0x0: *mut u32}; // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n+                                           // ty::Const\n+                                           // + ty: *mut u32\n+                                           // + val: Value(Scalar(alloc0+0x0))\n+                                           // mir::Constant\n+                                           // + span: $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n+                                           // + literal: Const { ty: *mut u32, val: Value(Scalar(alloc0+0x0)) }\n+          _3 = (*_4);                      // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n+          _1 = move _3;                    // scope 2 at $DIR/mutable_variable_no_prop.rs:9:9: 9:19\n+          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:9:18: 9:19\n+          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:9:19: 9:20\n+          _2 = const ();                   // scope 2 at $DIR/mutable_variable_no_prop.rs:8:5: 10:6\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/mutable_variable_no_prop.rs:8:5: 10:6\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:10:5: 10:6\n+          StorageLive(_5);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:11:9: 11:10\n+          _5 = _1;                         // scope 1 at $DIR/mutable_variable_no_prop.rs:11:13: 11:14\n+          _0 = const ();                   // scope 0 at $DIR/mutable_variable_no_prop.rs:6:11: 12:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/mutable_variable_no_prop.rs:6:11: 12:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_5);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:12:1: 12:2\n+          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_no_prop.rs:12:1: 12:2\n+          return;                          // scope 0 at $DIR/mutable_variable_no_prop.rs:12:2: 12:2\n+      }\n+  }\n+  \n+  alloc0 (static: STATIC, size: 4, align: 4) {\n+      2a 00 00 00                                     \u2502 *...\n+  }\n+  "}]}