{"sha": "95c4899e55e7aab68f06e67660257d73e6a46eda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1YzQ4OTllNTVlN2FhYjY4ZjA2ZTY3NjYwMjU3ZDczZTZhNDZlZGE=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-07T21:36:07Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-07T21:36:07Z"}, "message": "Added an example where explicitly dropping a lock is necessary/a good idea.", "tree": {"sha": "15096a246e46cebfee806d506b9bf2e478d4a74e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15096a246e46cebfee806d506b9bf2e478d4a74e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95c4899e55e7aab68f06e67660257d73e6a46eda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95c4899e55e7aab68f06e67660257d73e6a46eda", "html_url": "https://github.com/rust-lang/rust/commit/95c4899e55e7aab68f06e67660257d73e6a46eda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95c4899e55e7aab68f06e67660257d73e6a46eda/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9fdf642bab2bfcabe1829a4c82aaf055330661b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9fdf642bab2bfcabe1829a4c82aaf055330661b", "html_url": "https://github.com/rust-lang/rust/commit/f9fdf642bab2bfcabe1829a4c82aaf055330661b"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "6077e1a402965e8837bd032fba5acbbc9f6ffe10", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/95c4899e55e7aab68f06e67660257d73e6a46eda/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c4899e55e7aab68f06e67660257d73e6a46eda/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=95c4899e55e7aab68f06e67660257d73e6a46eda", "patch": "@@ -107,6 +107,67 @@ use crate::sys_common::poison::{self, LockResult, TryLockError, TryLockResult};\n ///\n /// *guard += 1;\n /// ```\n+///\n+/// It is sometimes a good idea (or even necessary) to manually drop the mutex\n+/// to unlock it as soon as possible. If you need the resource until the end of\n+/// the scope, this is not needed.\n+///\n+/// ```\n+/// use std::sync::{Arc, Mutex};\n+/// use std::thread;\n+///\n+/// const N: usize = 3;\n+///\n+/// // Some data to work with in multiple threads.\n+/// let data_mutex = Arc::new(Mutex::new([1, 2, 3, 4]));\n+/// // The result of all the work across all threads.\n+/// let res_mutex = Arc::new(Mutex::new(0));\n+///\n+/// // Threads other than the main thread.\n+/// let mut threads = Vec::with_capacity(N);\n+/// (0..N).for_each(|_| {\n+///     // Getting clones for the mutexes.\n+///     let data_mutex_clone = Arc::clone(&data_mutex);\n+///     let res_mutex_clone = Arc::clone(&res_mutex);\n+///\n+///     threads.push(thread::spawn(move || {\n+///         let data = *data_mutex_clone.lock().unwrap();\n+///         // This is the result of some important and long-ish work.\n+///         let result = data.iter().fold(0, |acc, x| acc + x * 2);\n+///         // We drop the `data` explicitely because it's not necessary anymore\n+///         // and the thread still has work to do. This allow other threads to\n+///         // start working on the data immediately, without waiting\n+///         // for the rest of the unrelated work to be done here.\n+///         std::mem::drop(data);\n+///         *res_mutex_clone.lock().unwrap() += result;\n+///     }));\n+/// });\n+///\n+/// let data = *data_mutex.lock().unwrap();\n+/// // This is the result of some important and long-ish work.\n+/// let result = data.iter().fold(0, |acc, x| acc + x * 2);\n+/// // We drop the `data` explicitely because it's not necessary anymore\n+/// // and the thread still has work to do. This allow other threads to\n+/// // start working on the data immediately, without waiting\n+/// // for the rest of the unrelated work to be done here.\n+/// //\n+/// // It's even more important here because we `.join` the threads after that.\n+/// // If we had not dropped the lock, a thread could be waiting forever for\n+/// // it, causing a deadlock.\n+/// std::mem::drop(data);\n+/// // Here the lock is not assigned to a variable and so, even if the scope\n+/// // does not end after this line, the mutex is still released:\n+/// // there is no deadlock.\n+/// *res_mutex.lock().unwrap() += result;\n+///\n+/// threads.into_iter().for_each(|thread| {\n+///     thread\n+///         .join()\n+///         .expect(\"The thread creating or execution failed !\")\n+/// });\n+///\n+/// assert_eq!(*res_mutex.lock().unwrap(), 80);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"mutex_type\")]\n pub struct Mutex<T: ?Sized> {"}]}