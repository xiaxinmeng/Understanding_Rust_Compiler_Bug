{"sha": "9622cdee1ad9657dd93d67a9ffdbc16e196ee4fa", "node_id": "C_kwDOAAsO6NoAKDk2MjJjZGVlMWFkOTY1N2RkOTNkNjdhOWZmZGJjMTZlMTk2ZWU0ZmE", "commit": {"author": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-12-11T12:01:29Z"}, "committer": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2023-02-16T14:06:45Z"}, "message": "std: replace generic thread parker with explicit no-op parker", "tree": {"sha": "a08769a292bc83be8447f00205172de4dae09072", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a08769a292bc83be8447f00205172de4dae09072"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9622cdee1ad9657dd93d67a9ffdbc16e196ee4fa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEVuz3PwcqDyifNyYbcE4BSbAZSzwFAmPuOHwACgkQcE4BSbAZ\nSzwqPg/6A1Xz1Pqmte9+j9JdLYB8zVtiIM48O0lwmY+N2ZIHlZY5pIFBlwaprdrE\nu3o3HfSshyjsIR7NoKYfKMiKZVPA4NHlNoTMo58VBpPLuiLmhPMZaU9BgMfyQcDo\ng+ww6muShb5TqUcbNhD31NDTniPDO9U2CcuyolPgt+FxRw+ap/+qrzTZiOQi0Xya\n1hhvCwokugoLVp3Esseh/2y3uM3aM2JuQwQx8AlDXOHOHhb7HwI5nx3/rhkuixfp\n5sLmJjKE57pwwihFZbdkaM7yhZlsFY9FMq5eS+Maa/KuwFC37+wML3V1aKMoTJd7\nsr8oAX6ymhv0kWe1FpEaJsnvPC8uk4G7ZlFpJeqmZyO+U9m8WvcjgNKSUwarBIZ2\nA0YVFWjN/6LTWcHb1jXlOrvavqrysmaQqF8SHZrEqW2I8O4eMf6RbQBoMDaQQSSL\nGjjIK07Alra7iHbqqJ4LGNQ5lW33fvT7RH+tlqoP1wN44+LErsijJ/FTYwl8l/eO\nwKCoIAXdk0Es0knAvLgV0zUQi8hwK1ETc8x6Le1n97luro1GpnHSMEJ1gk6753vk\nSGrmm+8I+apMMdfwvjFdm/RH6K/jj9faThZc2RuRjshy8cGsLnlvCS913A6CYCq2\nL6UbxVZPfpLYDojOvPwxBglGumOMZ+iTge1U6/aIiPgS5UYX+ak=\n=LzGM\n-----END PGP SIGNATURE-----", "payload": "tree a08769a292bc83be8447f00205172de4dae09072\nparent 4b34c7b766a3d64d3f2a9bff06d0e53648a11013\nauthor joboet <jonasboettiger@icloud.com> 1670760089 +0100\ncommitter joboet <jonasboettiger@icloud.com> 1676556405 +0100\n\nstd: replace generic thread parker with explicit no-op parker\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9622cdee1ad9657dd93d67a9ffdbc16e196ee4fa", "html_url": "https://github.com/rust-lang/rust/commit/9622cdee1ad9657dd93d67a9ffdbc16e196ee4fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9622cdee1ad9657dd93d67a9ffdbc16e196ee4fa/comments", "author": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b34c7b766a3d64d3f2a9bff06d0e53648a11013", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b34c7b766a3d64d3f2a9bff06d0e53648a11013", "html_url": "https://github.com/rust-lang/rust/commit/4b34c7b766a3d64d3f2a9bff06d0e53648a11013"}], "stats": {"total": 146, "additions": 17, "deletions": 129}, "files": [{"sha": "e1a38de64711697ae347d31bb2b1faa45cef5eca", "filename": "library/std/src/sys/unsupported/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9622cdee1ad9657dd93d67a9ffdbc16e196ee4fa/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9622cdee1ad9657dd93d67a9ffdbc16e196ee4fa/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs?ref=9622cdee1ad9657dd93d67a9ffdbc16e196ee4fa", "patch": "@@ -22,6 +22,7 @@ pub mod thread;\n #[cfg(target_thread_local)]\n pub mod thread_local_dtor;\n pub mod thread_local_key;\n+pub mod thread_parking;\n pub mod time;\n \n mod common;"}, {"sha": "197078bb1867371a9b97a3c8d09de717ae163ee8", "filename": "library/std/src/sys/unsupported/thread_parking.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9622cdee1ad9657dd93d67a9ffdbc16e196ee4fa/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread_parking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9622cdee1ad9657dd93d67a9ffdbc16e196ee4fa/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread_parking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread_parking.rs?ref=9622cdee1ad9657dd93d67a9ffdbc16e196ee4fa", "patch": "@@ -0,0 +1,11 @@\n+use crate::pin::Pin;\n+use crate::time::Duration;\n+\n+pub struct Parker {}\n+\n+impl Parker {\n+    pub unsafe fn new_in_place(_parker: *mut Parker) {}\n+    pub unsafe fn park(self: Pin<&Self>) {}\n+    pub unsafe fn park_timeout(self: Pin<&Self>, _dur: Duration) {}\n+    pub fn unpark(self: Pin<&Self>) {}\n+}"}, {"sha": "c2c2f8a35deb8ede9d44a907449e20ebeaee9099", "filename": "library/std/src/sys/wasi/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9622cdee1ad9657dd93d67a9ffdbc16e196ee4fa/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9622cdee1ad9657dd93d67a9ffdbc16e196ee4fa/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs?ref=9622cdee1ad9657dd93d67a9ffdbc16e196ee4fa", "patch": "@@ -49,6 +49,8 @@ pub mod thread;\n pub mod thread_local_dtor;\n #[path = \"../unsupported/thread_local_key.rs\"]\n pub mod thread_local_key;\n+#[path = \"../unsupported/thread_parking.rs\"]\n+pub mod thread_parking;\n pub mod time;\n \n #[path = \"../unsupported/common.rs\"]"}, {"sha": "6c05b56e1bfc00189e0e712fc8a3f5b6fc606bb2", "filename": "library/std/src/sys/wasm/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9622cdee1ad9657dd93d67a9ffdbc16e196ee4fa/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9622cdee1ad9657dd93d67a9ffdbc16e196ee4fa/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs?ref=9622cdee1ad9657dd93d67a9ffdbc16e196ee4fa", "patch": "@@ -70,6 +70,8 @@ cfg_if::cfg_if! {\n         pub mod once;\n         #[path = \"../unsupported/thread.rs\"]\n         pub mod thread;\n+        #[path = \"../unsupported/thread_parking.rs\"]\n+        pub mod thread_parking;\n     }\n }\n "}, {"sha": "3209bffe353ed81b775a8b7869789824d1a052b1", "filename": "library/std/src/sys_common/thread_parking/generic.rs", "status": "removed", "additions": 0, "deletions": 125, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/4b34c7b766a3d64d3f2a9bff06d0e53648a11013/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b34c7b766a3d64d3f2a9bff06d0e53648a11013/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fgeneric.rs?ref=4b34c7b766a3d64d3f2a9bff06d0e53648a11013", "patch": "@@ -1,125 +0,0 @@\n-//! Parker implementation based on a Mutex and Condvar.\n-\n-use crate::pin::Pin;\n-use crate::sync::atomic::AtomicUsize;\n-use crate::sync::atomic::Ordering::SeqCst;\n-use crate::sync::{Condvar, Mutex};\n-use crate::time::Duration;\n-\n-const EMPTY: usize = 0;\n-const PARKED: usize = 1;\n-const NOTIFIED: usize = 2;\n-\n-pub struct Parker {\n-    state: AtomicUsize,\n-    lock: Mutex<()>,\n-    cvar: Condvar,\n-}\n-\n-impl Parker {\n-    /// Construct the generic parker. The UNIX parker implementation\n-    /// requires this to happen in-place.\n-    pub unsafe fn new_in_place(parker: *mut Parker) {\n-        parker.write(Parker {\n-            state: AtomicUsize::new(EMPTY),\n-            lock: Mutex::new(()),\n-            cvar: Condvar::new(),\n-        });\n-    }\n-\n-    // This implementation doesn't require `unsafe` and `Pin`, but other implementations do.\n-    pub unsafe fn park(self: Pin<&Self>) {\n-        // If we were previously notified then we consume this notification and\n-        // return quickly.\n-        if self.state.compare_exchange(NOTIFIED, EMPTY, SeqCst, SeqCst).is_ok() {\n-            return;\n-        }\n-\n-        // Otherwise we need to coordinate going to sleep\n-        let mut m = self.lock.lock().unwrap();\n-        match self.state.compare_exchange(EMPTY, PARKED, SeqCst, SeqCst) {\n-            Ok(_) => {}\n-            Err(NOTIFIED) => {\n-                // We must read here, even though we know it will be `NOTIFIED`.\n-                // This is because `unpark` may have been called again since we read\n-                // `NOTIFIED` in the `compare_exchange` above. We must perform an\n-                // acquire operation that synchronizes with that `unpark` to observe\n-                // any writes it made before the call to unpark. To do that we must\n-                // read from the write it made to `state`.\n-                let old = self.state.swap(EMPTY, SeqCst);\n-                assert_eq!(old, NOTIFIED, \"park state changed unexpectedly\");\n-                return;\n-            } // should consume this notification, so prohibit spurious wakeups in next park.\n-            Err(_) => panic!(\"inconsistent park state\"),\n-        }\n-        loop {\n-            m = self.cvar.wait(m).unwrap();\n-            match self.state.compare_exchange(NOTIFIED, EMPTY, SeqCst, SeqCst) {\n-                Ok(_) => return, // got a notification\n-                Err(_) => {}     // spurious wakeup, go back to sleep\n-            }\n-        }\n-    }\n-\n-    // This implementation doesn't require `unsafe` and `Pin`, but other implementations do.\n-    pub unsafe fn park_timeout(self: Pin<&Self>, dur: Duration) {\n-        // Like `park` above we have a fast path for an already-notified thread, and\n-        // afterwards we start coordinating for a sleep.\n-        // return quickly.\n-        if self.state.compare_exchange(NOTIFIED, EMPTY, SeqCst, SeqCst).is_ok() {\n-            return;\n-        }\n-        let m = self.lock.lock().unwrap();\n-        match self.state.compare_exchange(EMPTY, PARKED, SeqCst, SeqCst) {\n-            Ok(_) => {}\n-            Err(NOTIFIED) => {\n-                // We must read again here, see `park`.\n-                let old = self.state.swap(EMPTY, SeqCst);\n-                assert_eq!(old, NOTIFIED, \"park state changed unexpectedly\");\n-                return;\n-            } // should consume this notification, so prohibit spurious wakeups in next park.\n-            Err(_) => panic!(\"inconsistent park_timeout state\"),\n-        }\n-\n-        // Wait with a timeout, and if we spuriously wake up or otherwise wake up\n-        // from a notification we just want to unconditionally set the state back to\n-        // empty, either consuming a notification or un-flagging ourselves as\n-        // parked.\n-        let (_m, _result) = self.cvar.wait_timeout(m, dur).unwrap();\n-        match self.state.swap(EMPTY, SeqCst) {\n-            NOTIFIED => {} // got a notification, hurray!\n-            PARKED => {}   // no notification, alas\n-            n => panic!(\"inconsistent park_timeout state: {n}\"),\n-        }\n-    }\n-\n-    // This implementation doesn't require `Pin`, but other implementations do.\n-    pub fn unpark(self: Pin<&Self>) {\n-        // To ensure the unparked thread will observe any writes we made\n-        // before this call, we must perform a release operation that `park`\n-        // can synchronize with. To do that we must write `NOTIFIED` even if\n-        // `state` is already `NOTIFIED`. That is why this must be a swap\n-        // rather than a compare-and-swap that returns if it reads `NOTIFIED`\n-        // on failure.\n-        match self.state.swap(NOTIFIED, SeqCst) {\n-            EMPTY => return,    // no one was waiting\n-            NOTIFIED => return, // already unparked\n-            PARKED => {}        // gotta go wake someone up\n-            _ => panic!(\"inconsistent state in unpark\"),\n-        }\n-\n-        // There is a period between when the parked thread sets `state` to\n-        // `PARKED` (or last checked `state` in the case of a spurious wake\n-        // up) and when it actually waits on `cvar`. If we were to notify\n-        // during this period it would be ignored and then when the parked\n-        // thread went to sleep it would never wake up. Fortunately, it has\n-        // `lock` locked at this stage so we can acquire `lock` to wait until\n-        // it is ready to receive the notification.\n-        //\n-        // Releasing `lock` before the call to `notify_one` means that when the\n-        // parked thread wakes it doesn't get woken only to have to wait for us\n-        // to release `lock`.\n-        drop(self.lock.lock().unwrap());\n-        self.cvar.notify_one()\n-    }\n-}"}, {"sha": "c4d3f9ea2f4272a406dd24197b2145068b118f1c", "filename": "library/std/src/sys_common/thread_parking/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9622cdee1ad9657dd93d67a9ffdbc16e196ee4fa/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9622cdee1ad9657dd93d67a9ffdbc16e196ee4fa/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fmod.rs?ref=9622cdee1ad9657dd93d67a9ffdbc16e196ee4fa", "patch": "@@ -18,10 +18,7 @@ cfg_if::cfg_if! {\n     ))] {\n         mod id;\n         pub use id::Parker;\n-    } else if #[cfg(any(windows, target_family = \"unix\"))] {\n-        pub use crate::sys::thread_parking::Parker;\n     } else {\n-        mod generic;\n-        pub use generic::Parker;\n+        pub use crate::sys::thread_parking::Parker;\n     }\n }"}]}