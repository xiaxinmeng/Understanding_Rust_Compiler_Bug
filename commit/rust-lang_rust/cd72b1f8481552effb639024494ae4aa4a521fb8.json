{"sha": "cd72b1f8481552effb639024494ae4aa4a521fb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNzJiMWY4NDgxNTUyZWZmYjYzOTAyNDQ5NGFlNGFhNGE1MjFmYjg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-12T22:52:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-13T18:07:22Z"}, "message": "Overhaul constructor naming in libs", "tree": {"sha": "13558055e6aa2b362c56ea946a22429bf5069bc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13558055e6aa2b362c56ea946a22429bf5069bc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd72b1f8481552effb639024494ae4aa4a521fb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd72b1f8481552effb639024494ae4aa4a521fb8", "html_url": "https://github.com/rust-lang/rust/commit/cd72b1f8481552effb639024494ae4aa4a521fb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd72b1f8481552effb639024494ae4aa4a521fb8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aea8736129eacd6e6e1ba5ec7c736907a6926ff4", "url": "https://api.github.com/repos/rust-lang/rust/commits/aea8736129eacd6e6e1ba5ec7c736907a6926ff4", "html_url": "https://github.com/rust-lang/rust/commit/aea8736129eacd6e6e1ba5ec7c736907a6926ff4"}], "stats": {"total": 454, "additions": 227, "deletions": 227}, "files": [{"sha": "19cc968ab7e271884bf0ec3a2b90fade52712905", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -226,7 +226,7 @@ fn check_expected_errors(expected_errors: [errors::expected_error],\n                          procres: procres) {\n \n     // true if we found the error in question\n-    let found_flags = vec::to_mut(vec::init_elt(\n+    let found_flags = vec::to_mut(vec::from_elem(\n         vec::len(expected_errors), false));\n \n     if procres.status == 0 {"}, {"sha": "43408fb8f84f4e8c1badfc14e91ea9161d0e81d2", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -385,7 +385,7 @@ mod rt {\n \n     // FIXME: This might be useful in str: but needs to be utf8 safe first\n     fn str_init_elt(n_elts: uint, c: char) -> str {\n-        let svec = vec::init_elt::<u8>(n_elts, c as u8);\n+        let svec = vec::from_elem::<u8>(n_elts, c as u8);\n \n         ret str::from_bytes(svec);\n     }"}, {"sha": "5698fe7bc981193f936a09c5788f82fd0820aafb", "filename": "src/libcore/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -64,7 +64,7 @@ fn as_c_charp<T>(s: str, f: fn(*c_char) -> T) -> T {\n \n fn fill_charp_buf(f: fn(*mutable c_char, size_t) -> bool)\n     -> option<str> {\n-    let buf = vec::to_mut(vec::init_elt(tmpbuf_sz, 0u8 as c_char));\n+    let buf = vec::to_mut(vec::from_elem(tmpbuf_sz, 0u8 as c_char));\n     vec::as_mut_buf(buf) { |b|\n         if f(b, tmpbuf_sz as size_t) {\n             some(str::from_cstr(b as str::sbuf))\n@@ -89,7 +89,7 @@ mod win32 {\n         let mut res = none;\n         let mut done = false;\n         while !done {\n-            let buf = vec::to_mut(vec::init_elt(n, 0u16));\n+            let buf = vec::to_mut(vec::from_elem(n, 0u16));\n             vec::as_mut_buf(buf) {|b|\n                 let k : dword = f(b, tmpbuf_sz as dword);\n                 if k == (0 as dword) {\n@@ -588,7 +588,7 @@ mod tests {\n \n     fn make_rand_name() -> str {\n         import rand;\n-        let rng: rand::rng = rand::mk_rng();\n+        let rng: rand::rng = rand::rng();\n         let n = \"TEST\" + rng.gen_str(10u);\n         assert option::is_none(getenv(n));\n         n"}, {"sha": "938720755d2af50feeed7f71ad2756b4c31d1ac5", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -27,7 +27,7 @@ iface rng {\n resource rand_res(c: *rctx) { rustrt::rand_free(c); }\n \n #[doc = \"Create a random number generator\"]\n-fn mk_rng() -> rng {\n+fn rng() -> rng {\n     impl of rng for @rand_res {\n         fn next() -> u32 { ret rustrt::rand_next(**self); }\n         fn next_float() -> float {\n@@ -70,11 +70,11 @@ mod tests {\n \n     #[test]\n     fn test() {\n-        let r1: rand::rng = rand::mk_rng();\n+        let r1: rand::rng = rand::rng();\n         log(debug, r1.next());\n         log(debug, r1.next());\n         {\n-            let r2 = rand::mk_rng();\n+            let r2 = rand::rng();\n             log(debug, r1.next());\n             log(debug, r2.next());\n             log(debug, r1.next());\n@@ -94,7 +94,7 @@ mod tests {\n \n     #[test]\n     fn genstr() {\n-        let r: rand::rng = rand::mk_rng();\n+        let r: rand::rng = rand::rng();\n         log(debug, r.gen_str(10u));\n         log(debug, r.gen_str(10u));\n         log(debug, r.gen_str(10u));"}, {"sha": "806fd9511899cd8fbdfbe2d2fd8712da6e947f3d", "filename": "src/libcore/task.rs", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -31,7 +31,6 @@ export task_opts;\n export task_builder::{};\n \n export default_task_opts;\n-export mk_task_builder;\n export get_opts;\n export set_opts;\n export add_wrapper;\n@@ -154,11 +153,13 @@ Provides detailed control over the properties and behavior of new tasks.\n // when you try to reuse the builder to spawn a new task. We'll just\n // sidestep that whole issue by making builder's uncopyable and making\n // the run function move them in.\n-enum task_builder = {\n-    mutable opts: task_opts,\n-    mutable gen_body: fn@(+fn~()) -> fn~(),\n-    can_not_copy: option<comm::port<()>>\n-};\n+enum task_builder {\n+    task_builder_({\n+        mutable opts: task_opts,\n+        mutable gen_body: fn@(+fn~()) -> fn~(),\n+        can_not_copy: option<comm::port<()>>\n+    })\n+}\n \n \n /* Task construction */\n@@ -178,12 +179,12 @@ fn default_task_opts() -> task_opts {\n     }\n }\n \n-fn mk_task_builder() -> task_builder {\n+fn task_builder() -> task_builder {\n     #[doc = \"Construct a task_builder\"];\n \n     let body_identity = fn@(+body: fn~()) -> fn~() { body };\n \n-    task_builder({\n+    task_builder_({\n         mutable opts: default_task_opts(),\n         mutable gen_body: body_identity,\n         can_not_copy: none\n@@ -345,10 +346,10 @@ fn spawn(+f: fn~()) {\n     Sets up a new task with its own call stack and schedules it to run\n     the provided unique closure.\n \n-    This function is equivalent to `run(mk_task_builder(), f)`.\n+    This function is equivalent to `run(new_task_builder(), f)`.\n     \"];\n \n-    run(mk_task_builder(), f);\n+    run(task_builder(), f);\n }\n \n fn spawn_listener<A:send>(+f: fn~(comm::port<A>)) -> comm::chan<A> {\n@@ -374,10 +375,10 @@ fn spawn_listener<A:send>(+f: fn~(comm::port<A>)) -> comm::chan<A> {\n         };\n         // Likewise, the parent has both a 'po' and 'ch'\n \n-    This function is equivalent to `run_listener(mk_task_builder(), f)`.\n+    This function is equivalent to `run_listener(new_task_builder(), f)`.\n     \"];\n \n-    run_listener(mk_task_builder(), f)\n+    run_listener(task_builder(), f)\n }\n \n fn spawn_sched(mode: sched_mode, +f: fn~()) {\n@@ -394,7 +395,7 @@ fn spawn_sched(mode: sched_mode, +f: fn~()) {\n     greater than zero.\n     \"];\n \n-    let mut builder = mk_task_builder();\n+    let mut builder = task_builder();\n     set_opts(builder, {\n         sched: some({\n             mode: mode,\n@@ -419,7 +420,7 @@ fn try<T:send>(+f: fn~() -> T) -> result::t<T,()> {\n \n     let po = comm::port();\n     let ch = comm::chan(po);\n-    let mut builder = mk_task_builder();\n+    let mut builder = task_builder();\n     unsupervise(builder);\n     let result = future_result(builder);\n     run(builder) {||\n@@ -612,7 +613,7 @@ fn test_spawn_raw_notify() {\n fn test_run_basic() {\n     let po = comm::port();\n     let ch = comm::chan(po);\n-    let builder = mk_task_builder();\n+    let builder = task_builder();\n     run(builder) {||\n         comm::send(ch, ());\n     }\n@@ -623,7 +624,7 @@ fn test_run_basic() {\n fn test_add_wrapper() {\n     let po = comm::port();\n     let ch = comm::chan(po);\n-    let builder = mk_task_builder();\n+    let builder = task_builder();\n     add_wrapper(builder) {|body|\n         fn~() {\n             body();\n@@ -637,12 +638,12 @@ fn test_add_wrapper() {\n #[test]\n #[ignore(cfg(target_os = \"win32\"))]\n fn test_future_result() {\n-    let builder = mk_task_builder();\n+    let builder = task_builder();\n     let result = future_result(builder);\n     run(builder) {||}\n     assert future::get(result) == success;\n \n-    let builder = mk_task_builder();\n+    let builder = task_builder();\n     let result = future_result(builder);\n     unsupervise(builder);\n     run(builder) {|| fail }\n@@ -653,7 +654,7 @@ fn test_future_result() {\n fn test_future_task() {\n     let po = comm::port();\n     let ch = comm::chan(po);\n-    let builder = mk_task_builder();\n+    let builder = task_builder();\n     let task1 = future_task(builder);\n     run(builder) {|| comm::send(ch, get_task()) }\n     assert future::get(task1) == comm::recv(po);\n@@ -849,7 +850,7 @@ fn test_avoid_copying_the_body_spawn_listener() {\n #[test]\n fn test_avoid_copying_the_body_run() {\n     avoid_copying_the_body {|f|\n-        let builder = mk_task_builder();\n+        let builder = task_builder();\n         run(builder) {||\n             f();\n         }\n@@ -859,7 +860,7 @@ fn test_avoid_copying_the_body_run() {\n #[test]\n fn test_avoid_copying_the_body_run_listener() {\n     avoid_copying_the_body {|f|\n-        let builder = mk_task_builder();\n+        let builder = task_builder();\n         run_listener(builder, fn~[move f](_po: comm::port<int>) {\n             f();\n         });\n@@ -878,7 +879,7 @@ fn test_avoid_copying_the_body_try() {\n #[test]\n fn test_avoid_copying_the_body_future_task() {\n     avoid_copying_the_body {|f|\n-        let builder = mk_task_builder();\n+        let builder = task_builder();\n         future_task(builder);\n         run(builder) {||\n             f();\n@@ -889,7 +890,7 @@ fn test_avoid_copying_the_body_future_task() {\n #[test]\n fn test_avoid_copying_the_body_unsupervise() {\n     avoid_copying_the_body {|f|\n-        let builder = mk_task_builder();\n+        let builder = task_builder();\n         unsupervise(builder);\n         run(builder) {||\n             f();"}, {"sha": "92b22b7850ae4b84e53fe3d20656568e73d51a07", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -8,8 +8,8 @@ export is_not_empty;\n export same_length;\n export reserve;\n export len;\n-export init_fn;\n-export init_elt;\n+export from_fn;\n+export from_elem;\n export to_mut;\n export from_mut;\n export head;\n@@ -129,7 +129,7 @@ Creates and initializes an immutable vector.\n Creates an immutable vector of size `n_elts` and initializes the elements\n to the value returned by the function `op`.\n \"]\n-fn init_fn<T>(n_elts: uint, op: init_op<T>) -> [T] {\n+fn from_fn<T>(n_elts: uint, op: init_op<T>) -> [T] {\n     let mut v = [];\n     reserve(v, n_elts);\n     let mut i: uint = 0u;\n@@ -143,7 +143,7 @@ Creates and initializes an immutable vector.\n Creates an immutable vector of size `n_elts` and initializes the elements\n to the value `t`.\n \"]\n-fn init_elt<T: copy>(n_elts: uint, t: T) -> [T] {\n+fn from_elem<T: copy>(n_elts: uint, t: T) -> [T] {\n     let mut v = [];\n     reserve(v, n_elts);\n     let mut i: uint = 0u;\n@@ -182,7 +182,7 @@ fn tailn<T: copy>(v: [const T], n: uint) -> [T] {\n     slice(v, n, len(v))\n }\n \n-// FIXME: This name is sort of confusing next to init_fn, etc\n+// FIXME: This name is sort of confusing next to from_fn, etc\n // but this is the name haskell uses for this function,\n // along with head/tail/last.\n #[doc = \"Returns all but the last elemnt of a vector\"]\n@@ -999,16 +999,16 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_init_fn() {\n-        // Test on-stack init_fn.\n-        let v = init_fn(3u, square);\n+    fn test_from_fn() {\n+        // Test on-stack from_fn.\n+        let v = from_fn(3u, square);\n         assert (len(v) == 3u);\n         assert (v[0] == 0u);\n         assert (v[1] == 1u);\n         assert (v[2] == 4u);\n \n-        // Test on-heap init_fn.\n-        v = init_fn(5u, square);\n+        // Test on-heap from_fn.\n+        v = from_fn(5u, square);\n         assert (len(v) == 5u);\n         assert (v[0] == 0u);\n         assert (v[1] == 1u);\n@@ -1018,15 +1018,15 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_init_elt() {\n-        // Test on-stack init_elt.\n-        let v = init_elt(2u, 10u);\n+    fn test_from_elem() {\n+        // Test on-stack from_elem.\n+        let v = from_elem(2u, 10u);\n         assert (len(v) == 2u);\n         assert (v[0] == 10u);\n         assert (v[1] == 10u);\n \n-        // Test on-heap init_elt.\n-        v = init_elt(6u, 20u);\n+        // Test on-heap from_elem.\n+        v = from_elem(6u, 20u);\n         assert (v[0] == 20u);\n         assert (v[1] == 20u);\n         assert (v[2] == 20u);"}, {"sha": "ee210780a2692e35f086e7a3252377567d731a88", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -37,7 +37,7 @@ Constructs a bitvector\n \"]\n fn create(nbits: uint, init: bool) -> t {\n     let elt = if init { !0u } else { 0u };\n-    let storage = vec::to_mut(vec::init_elt(nbits / uint_bits + 1u, elt));\n+    let storage = vec::to_mut(vec::from_elem(nbits / uint_bits + 1u, elt));\n     ret @{storage: storage, nbits: nbits};\n }\n \n@@ -84,7 +84,7 @@ fn assign(v0: t, v1: t) -> bool { let sub = right; ret process(v0, v1, sub); }\n \n #[doc = \"Makes a copy of a bitvector\"]\n fn clone(v: t) -> t {\n-    let storage = vec::to_mut(vec::init_elt(v.nbits / uint_bits + 1u, 0u));\n+    let storage = vec::to_mut(vec::from_elem(v.nbits / uint_bits + 1u, 0u));\n     let len = vec::len(v.storage);\n     uint::range(0u, len) {|i| storage[i] = v.storage[i]; };\n     ret @{storage: storage, nbits: v.nbits};\n@@ -190,7 +190,7 @@ Each uint in the resulting vector has either value 0u or 1u.\n \"]\n fn to_vec(v: t) -> [uint] {\n     let sub = bind init_to_vec(v, _);\n-    ret vec::init_fn::<uint>(v.nbits, sub);\n+    ret vec::from_fn::<uint>(v.nbits, sub);\n }\n \n \n@@ -232,7 +232,7 @@ mod tests {\n         let act;\n         let exp;\n         act = create(0u, false);\n-        exp = vec::init_elt::<uint>(0u, 0u);\n+        exp = vec::from_elem::<uint>(0u, 0u);\n         assert (eq_vec(act, exp));\n     }\n "}, {"sha": "532f2903af34c446b4a394bac36034fd832cc5b4", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -26,7 +26,7 @@ taken to ensure that a reference to the c_vec::t is still held if needed.\n \"];\n \n export t;\n-export create, create_with_dtor;\n+export c_vec, c_vec_with_dtor;\n export get, set;\n export len;\n export ptr;\n@@ -60,7 +60,7 @@ Create a c_vec::t from a native buffer with a given length.\n * base - A native pointer to a buffer\n * len - The number of elements in the buffer\n \"]\n-unsafe fn create<T>(base: *mutable T, len: uint) -> t<T> {\n+unsafe fn c_vec<T>(base: *mutable T, len: uint) -> t<T> {\n     ret t({base: base,\n            len: len,\n            rsrc: @dtor_res(option::none)\n@@ -78,7 +78,7 @@ and a function to run upon destruction.\n * dtor - A function to run when the value is destructed, useful\n          for freeing the buffer, etc.\n \"]\n-unsafe fn create_with_dtor<T>(base: *mutable T, len: uint, dtor: fn@())\n+unsafe fn c_vec_with_dtor<T>(base: *mutable T, len: uint, dtor: fn@())\n   -> t<T> {\n     ret t({base: base,\n            len: len,\n@@ -133,8 +133,8 @@ mod tests {\n \n         assert mem as int != 0;\n \n-        ret unsafe { create_with_dtor(mem as *mutable u8, n,\n-                                      bind free(mem)) };\n+        ret unsafe { c_vec_with_dtor(mem as *mutable u8, n,\n+                                     bind free(mem)) };\n     }\n \n     #[test]"}, {"sha": "dfd97978d2a8e5518ce903c7bc7694c63a1f76e0", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -105,7 +105,7 @@ fn create<T: copy>() -> t<T> {\n         mutable nelts: 0u,\n         mutable lo: 0u,\n         mutable hi: 0u,\n-        mutable elts: vec::to_mut(vec::init_elt(initial_capacity, none))\n+        mutable elts: vec::to_mut(vec::from_elem(initial_capacity, none))\n     };\n     repr as t::<T>\n }"}, {"sha": "931ad32551fac33279e095d4889411c63ac4e989", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -25,7 +25,6 @@ export doc_as_i16;\n export doc_as_i32;\n export doc_as_i64;\n export writer;\n-export mk_writer;\n \n type ebml_tag = {id: uint, size: uint};\n \n@@ -177,7 +176,7 @@ fn write_vuint(w: io::writer, n: uint) {\n     fail #fmt(\"vint to write too big: %?\", n);\n }\n \n-fn mk_writer(w: io::writer) -> writer {\n+fn writer(w: io::writer) -> writer {\n     let size_positions: [uint] = [];\n     ret {writer: w, mutable size_positions: size_positions};\n }"}, {"sha": "19d941fe9f82db1ec44c2554fc9f04073676bc86", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -171,7 +171,7 @@ to get an error message.\n fn getopts(args: [str], opts: [opt]) -> result unsafe {\n     let n_opts = vec::len::<opt>(opts);\n     fn f(_x: uint) -> [optval] { ret []; }\n-    let vals = vec::to_mut(vec::init_fn(n_opts, f));\n+    let vals = vec::to_mut(vec::from_fn(n_opts, f));\n     let free: [str] = [];\n     let l = vec::len(args);\n     let i = 0u;"}, {"sha": "517654d1c1595c9a7ba19e2cfe6f8be70082e5df", "filename": "src/libstd/map.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -1,7 +1,7 @@\n #[doc = \"A map type\"];\n \n import chained::hashmap;\n-export hashmap, hashfn, eqfn, set, map, chained, mk_hashmap, new_str_hash;\n+export hashmap, hashfn, eqfn, set, map, chained, new_hashmap, new_str_hash;\n export new_bytes_hash, new_int_hash, new_uint_hash, set_add;\n \n #[doc = \"\n@@ -202,7 +202,7 @@ mod chained {\n     }\n \n     fn chains<K: copy, V: copy>(nchains: uint) -> [mutable chain<K,V>] {\n-        ret vec::to_mut(vec::init_elt(nchains, absent));\n+        ret vec::to_mut(vec::from_elem(nchains, absent));\n     }\n \n     fn foreach_entry<K: copy, V: copy>(chain0: chain<K,V>,\n@@ -288,7 +288,7 @@ mod chained {\n }\n \n /*\n-Function: mk_hashmap\n+Function: new_hashmap\n \n Construct a hashmap.\n \n@@ -297,33 +297,33 @@ Parameters:\n hasher - The hash function for key type K\n eqer - The equality function for key type K\n */\n-fn mk_hashmap<K: copy, V: copy>(hasher: hashfn<K>, eqer: eqfn<K>)\n+fn new_hashmap<K: copy, V: copy>(hasher: hashfn<K>, eqer: eqfn<K>)\n         -> hashmap<K, V> {\n     chained::mk(hasher, eqer)\n }\n \n #[doc = \"Construct a hashmap for string keys\"]\n fn new_str_hash<V: copy>() -> hashmap<str, V> {\n-    ret mk_hashmap(str::hash, str::eq);\n+    ret new_hashmap(str::hash, str::eq);\n }\n \n #[doc = \"Construct a hashmap for byte string keys\"]\n fn new_bytes_hash<V: copy>() -> hashmap<[u8], V> {\n-    ret mk_hashmap(vec::u8::hash, vec::u8::eq);\n+    ret new_hashmap(vec::u8::hash, vec::u8::eq);\n }\n \n #[doc = \"Construct a hashmap for int keys\"]\n fn new_int_hash<V: copy>() -> hashmap<int, V> {\n     fn hash_int(&&x: int) -> uint { int::hash(x) }\n     fn eq_int(&&a: int, &&b: int) -> bool { ret a == b; }\n-    ret mk_hashmap(hash_int, eq_int);\n+    ret new_hashmap(hash_int, eq_int);\n }\n \n #[doc = \"Construct a hashmap for uint keys\"]\n fn new_uint_hash<V: copy>() -> hashmap<uint, V> {\n     fn hash_uint(&&x: uint) -> uint { uint::hash(x) }\n     fn eq_uint(&&a: uint, &&b: uint) -> bool { ret a == b; }\n-    ret mk_hashmap(hash_uint, eq_uint);\n+    ret new_hashmap(hash_uint, eq_uint);\n }\n \n #[doc = \"\n@@ -345,7 +345,7 @@ mod tests {\n         let eqer_str: map::eqfn<str> = str::eq;\n         #debug(\"uint -> uint\");\n         let hm_uu: map::hashmap<uint, uint> =\n-            map::mk_hashmap::<uint, uint>(hasher_uint, eqer_uint);\n+            map::new_hashmap::<uint, uint>(hasher_uint, eqer_uint);\n         assert (hm_uu.insert(10u, 12u));\n         assert (hm_uu.insert(11u, 13u));\n         assert (hm_uu.insert(12u, 14u));\n@@ -361,7 +361,7 @@ mod tests {\n         let twelve: str = \"twelve\";\n         #debug(\"str -> uint\");\n         let hm_su: map::hashmap<str, uint> =\n-            map::mk_hashmap::<str, uint>(hasher_str, eqer_str);\n+            map::new_hashmap::<str, uint>(hasher_str, eqer_str);\n         assert (hm_su.insert(\"ten\", 12u));\n         assert (hm_su.insert(eleven, 13u));\n         assert (hm_su.insert(\"twelve\", 14u));\n@@ -375,7 +375,7 @@ mod tests {\n         assert (hm_su.get(\"twelve\") == 12u);\n         #debug(\"uint -> str\");\n         let hm_us: map::hashmap<uint, str> =\n-            map::mk_hashmap::<uint, str>(hasher_uint, eqer_uint);\n+            map::new_hashmap::<uint, str>(hasher_uint, eqer_uint);\n         assert (hm_us.insert(10u, \"twelve\"));\n         assert (hm_us.insert(11u, \"thirteen\"));\n         assert (hm_us.insert(12u, \"fourteen\"));\n@@ -388,7 +388,7 @@ mod tests {\n         assert (str::eq(hm_us.get(12u), \"twelve\"));\n         #debug(\"str -> str\");\n         let hm_ss: map::hashmap<str, str> =\n-            map::mk_hashmap::<str, str>(hasher_str, eqer_str);\n+            map::new_hashmap::<str, str>(hasher_str, eqer_str);\n         assert (hm_ss.insert(ten, \"twelve\"));\n         assert (hm_ss.insert(eleven, \"thirteen\"));\n         assert (hm_ss.insert(twelve, \"fourteen\"));\n@@ -416,7 +416,7 @@ mod tests {\n         let hasher_uint: map::hashfn<uint> = uint_id;\n         let eqer_uint: map::eqfn<uint> = eq_uint;\n         let hm_uu: map::hashmap<uint, uint> =\n-            map::mk_hashmap::<uint, uint>(hasher_uint, eqer_uint);\n+            map::new_hashmap::<uint, uint>(hasher_uint, eqer_uint);\n         let i: uint = 0u;\n         while i < num_to_insert {\n             assert (hm_uu.insert(i, i * i));\n@@ -443,7 +443,7 @@ mod tests {\n         let hasher_str: map::hashfn<str> = str::hash;\n         let eqer_str: map::eqfn<str> = str::eq;\n         let hm_ss: map::hashmap<str, str> =\n-            map::mk_hashmap::<str, str>(hasher_str, eqer_str);\n+            map::new_hashmap::<str, str>(hasher_str, eqer_str);\n         i = 0u;\n         while i < num_to_insert {\n             assert hm_ss.insert(uint::to_str(i, 2u), uint::to_str(i * i, 2u));\n@@ -496,7 +496,7 @@ mod tests {\n         let hasher: map::hashfn<uint> = hash;\n         let eqer: map::eqfn<uint> = eq;\n         let hm: map::hashmap<uint, uint> =\n-            map::mk_hashmap::<uint, uint>(hasher, eqer);\n+            map::new_hashmap::<uint, uint>(hasher, eqer);\n         let i: uint = 0u;\n         while i < num_to_insert {\n             assert (hm.insert(i, i * i));\n@@ -559,7 +559,7 @@ mod tests {\n     #[test]\n     fn test_contains_key() {\n         let key = \"k\";\n-        let map = map::mk_hashmap::<str, str>(str::hash, str::eq);\n+        let map = map::new_hashmap::<str, str>(str::hash, str::eq);\n         assert (!map.contains_key(key));\n         map.insert(key, \"val\");\n         assert (map.contains_key(key));\n@@ -568,7 +568,7 @@ mod tests {\n     #[test]\n     fn test_find() {\n         let key = \"k\";\n-        let map = map::mk_hashmap::<str, str>(str::hash, str::eq);\n+        let map = map::new_hashmap::<str, str>(str::hash, str::eq);\n         assert (option::is_none(map.find(key)));\n         map.insert(key, \"val\");\n         assert (option::get(map.find(key)) == \"val\");"}, {"sha": "95c532129e7fd1e5e01196cc61d465fa3228bdff", "filename": "src/libstd/md4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Fmd4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Fmd4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmd4.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -30,7 +30,7 @@ fn md4(msg: [u8]) -> {a: u32, b: u32, c: u32, d: u32} {\n     }\n \n     let i = 0u, e = vec::len(msg);\n-    let x = vec::to_mut(vec::init_elt(16u, 0u32));\n+    let x = vec::to_mut(vec::from_elem(16u, 0u32));\n     while i < e {\n         let aa = a, bb = b, cc = c, dd = d;\n "}, {"sha": "e7763050cfa4a58da4b52431b55de2638bb95bee", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -157,7 +157,7 @@ fn concat(v: [rope]) -> rope {\n     //Copy `v` into a mutable vector\n     let len   = vec::len(v);\n     if len == 0u { ret node::empty; }\n-    let ropes = vec::to_mut(vec::init_elt(len, v[0]));\n+    let ropes = vec::to_mut(vec::from_elem(len, v[0]));\n     uint::range(1u, len) {|i|\n        ropes[i] = v[i];\n     }\n@@ -686,7 +686,7 @@ mod node {\n             //Firstly, split `str` in slices of hint_max_leaf_char_len\n             let leaves = uint::div_ceil(char_len, hint_max_leaf_char_len);\n             //Number of leaves\n-            let nodes  = vec::to_mut(vec::init_elt(leaves, candidate));\n+            let nodes  = vec::to_mut(vec::from_elem(leaves, candidate));\n \n             let i = 0u;\n             let offset = byte_start;\n@@ -797,7 +797,7 @@ mod node {\n     }\n \n     fn serialize_node(node: @node) -> str unsafe {\n-        let buf = vec::to_mut(vec::init_elt(byte_len(node), 0u8));\n+        let buf = vec::to_mut(vec::from_elem(byte_len(node), 0u8));\n         let offset = 0u;//Current position in the buffer\n         let it = leaf_iterator::start(node);\n         loop {\n@@ -1126,7 +1126,7 @@ mod node {\n         }\n \n         fn start(node: @node) -> t {\n-            let stack = vec::to_mut(vec::init_elt(height(node)+1u, node));\n+            let stack = vec::to_mut(vec::from_elem(height(node)+1u, node));\n             ret {\n                 stack:             stack,\n                 mutable stackpos:  0\n@@ -1392,7 +1392,7 @@ mod tests {\n         }\n \n         //Same rope, obtained with rope::concat\n-        let r2 = concat(vec::init_elt(10u, chunk));\n+        let r2 = concat(vec::from_elem(10u, chunk));\n \n         assert eq(r, r2);\n     }"}, {"sha": "c446d10b88e77104cdd0bb4440dd8ef208ab0433", "filename": "src/libstd/serialization.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Fserialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Fserialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialization.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -165,7 +165,7 @@ impl of serializer for ebml::writer {\n type ebml_deserializer = {mutable parent: ebml::doc,\n                           mutable pos: uint};\n \n-fn mk_ebml_deserializer(d: ebml::doc) -> ebml_deserializer {\n+fn ebml_deserializer(d: ebml::doc) -> ebml_deserializer {\n     {mutable parent: d, mutable pos: d.start}\n }\n \n@@ -401,10 +401,10 @@ fn test_option_int() {\n     fn test_v(v: option<int>) {\n         #debug[\"v == %?\", v];\n         let mbuf = io::mk_mem_buffer();\n-        let ebml_w = ebml::mk_writer(io::mem_buffer_writer(mbuf));\n+        let ebml_w = ebml::writer(io::mem_buffer_writer(mbuf));\n         serialize_0(ebml_w, v);\n         let ebml_doc = ebml::new_doc(@io::mem_buffer_buf(mbuf));\n-        let deser = mk_ebml_deserializer(ebml_doc);\n+        let deser = ebml_deserializer(ebml_doc);\n         let v1 = deserialize_0(deser);\n         #debug[\"v1 == %?\", v1];\n         assert v == v1;"}, {"sha": "7d4bc705c1a85d1979b6105da4ee4023fa6f953f", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -18,7 +18,6 @@ the `reset` method.\n  * point this will want to be rewritten.\n  */\n export sha1;\n-export mk_sha1;\n \n #[doc = \"The SHA-1 interface\"]\n iface sha1 {\n@@ -51,7 +50,7 @@ const k3: u32 = 0xCA62C1D6u32;\n \n \n #[doc = \"Construct a `sha` object\"]\n-fn mk_sha1() -> sha1 {\n+fn sha1() -> sha1 {\n     type sha1state =\n         {h: [mutable u32],\n          mutable len_low: u32,\n@@ -244,13 +243,13 @@ fn mk_sha1() -> sha1 {\n         }\n     }\n     let st = {\n-        h: vec::to_mut(vec::init_elt(digest_buf_len, 0u32)),\n+        h: vec::to_mut(vec::from_elem(digest_buf_len, 0u32)),\n         mutable len_low: 0u32,\n         mutable len_high: 0u32,\n-        msg_block: vec::to_mut(vec::init_elt(msg_block_len, 0u8)),\n+        msg_block: vec::to_mut(vec::from_elem(msg_block_len, 0u8)),\n         mutable msg_block_idx: 0u,\n         mutable computed: false,\n-        work_buf: vec::to_mut(vec::init_elt(work_buf_len, 0u32))\n+        work_buf: vec::to_mut(vec::from_elem(work_buf_len, 0u32))\n     };\n     let sh = st as sha1;\n     sh.reset();\n@@ -327,7 +326,7 @@ mod tests {\n         }\n         // Test that it works when accepting the message all at once\n \n-        let sh = sha1::mk_sha1();\n+        let sh = sha1::sha1();\n         for t: test in tests {\n             sh.input_str(t.input);\n             let out = sh.result();"}, {"sha": "eb1af5b6dbb10e57a9652cf879845574d3216d2a", "filename": "src/libstd/tempfile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftempfile.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -5,7 +5,7 @@ import option::{none, some};\n import rand;\n \n fn mkdtemp(prefix: str, suffix: str) -> option<str> {\n-    let r = rand::mk_rng();\n+    let r = rand::rng();\n     let i = 0u;\n     while (i < 1000u) {\n         let s = prefix + r.gen_str(16u) + suffix;"}, {"sha": "009da2e440d2754cf5bd21f523dcbbbddfc94750", "filename": "src/libstd/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -357,7 +357,7 @@ fn run_test(+test: test_desc, monitor_ch: comm::chan<monitor_msg>) {\n     task::spawn {||\n \n         let testfn = test.fn;\n-        let builder = task::mk_task_builder();\n+        let builder = task::task_builder();\n         let result_future = task::future_result(builder);\n         task::unsupervise(builder);\n         task::run(builder, testfn);"}, {"sha": "54e38483a97fac98b2493b9af9ec48086947f7b7", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -10,7 +10,7 @@ import core::option::{some, none};\n import option = core::option;\n \n export treemap;\n-export init;\n+export treemap;\n export insert;\n export find;\n export traverse;\n@@ -20,7 +20,7 @@ type treemap<K, V> = @mutable tree_node<K, V>;\n enum tree_node<K, V> { empty, node(@K, @V, treemap<K, V>, treemap<K, V>) }\n \n #[doc = \"Create a treemap\"]\n-fn init<K, V>() -> treemap<K, V> { @mutable empty }\n+fn treemap<K, V>() -> treemap<K, V> { @mutable empty }\n \n #[doc = \"Insert a value into the map\"]\n fn insert<K: copy, V: copy>(m: treemap<K, V>, k: K, v: V) {\n@@ -78,36 +78,36 @@ fn traverse<K, V>(m: treemap<K, V>, f: fn(K, V)) {\n mod tests {\n \n     #[test]\n-    fn init_treemap() { let _m = init::<int, int>(); }\n+    fn init_treemap() { let _m = treemap::<int, int>(); }\n \n     #[test]\n-    fn insert_one() { let m = init(); insert(m, 1, 2); }\n+    fn insert_one() { let m = treemap(); insert(m, 1, 2); }\n \n     #[test]\n-    fn insert_two() { let m = init(); insert(m, 1, 2); insert(m, 3, 4); }\n+    fn insert_two() { let m = treemap(); insert(m, 1, 2); insert(m, 3, 4); }\n \n     #[test]\n     fn insert_find() {\n-        let m = init();\n+        let m = treemap();\n         insert(m, 1, 2);\n         assert (find(m, 1) == some(2));\n     }\n \n     #[test]\n     fn find_empty() {\n-        let m = init::<int, int>(); assert (find(m, 1) == none);\n+        let m = treemap::<int, int>(); assert (find(m, 1) == none);\n     }\n \n     #[test]\n     fn find_not_found() {\n-        let m = init();\n+        let m = treemap();\n         insert(m, 1, 2);\n         assert (find(m, 2) == none);\n     }\n \n     #[test]\n     fn traverse_in_order() {\n-        let m = init();\n+        let m = treemap();\n         insert(m, 3, ());\n         insert(m, 0, ());\n         insert(m, 4, ());\n@@ -123,7 +123,7 @@ mod tests {\n \n     #[test]\n     fn u8_map() {\n-        let m = init();\n+        let m = treemap();\n \n         let k1 = str::bytes(\"foo\");\n         let k2 = str::bytes(\"bar\");"}, {"sha": "fb7a4883c05ede3890d6d11982de27a73dc9f85a", "filename": "src/libstd/uv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Flibstd%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -409,7 +409,7 @@ fn do_send(h: *libc::c_void) {\n     rustrt::rust_uv_async_send(h);\n }\n fn gen_handle_id() -> [u8] {\n-    ret rand::mk_rng().gen_bytes(16u);\n+    ret rand::rng().gen_bytes(16u);\n }\n fn get_handle_id_from(buf: *u8) -> [u8] unsafe {\n     ret vec::unsafe::from_buf(buf, 16u);"}, {"sha": "3dde486d85c33798a80ca1f7f7f39d2a1e368779", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -940,7 +940,7 @@ fn name_has_type(tn: type_names, s: str) -> option<TypeRef> {\n fn mk_type_names() -> type_names {\n     fn hash(&&t: TypeRef) -> uint { ret t as uint; }\n     fn eq(&&a: TypeRef, &&b: TypeRef) -> bool { ret a as uint == b as uint; }\n-    @{type_names: std::map::mk_hashmap(hash, eq),\n+    @{type_names: std::map::new_hashmap(hash, eq),\n       named_types: std::map::new_str_hash()}\n }\n \n@@ -987,7 +987,7 @@ fn type_to_str_inner(names: type_names, outer0: [TypeRef], ty: TypeRef) ->\n         let s = \"fn(\";\n         let out_ty: TypeRef = llvm::LLVMGetReturnType(ty);\n         let n_args = llvm::LLVMCountParamTypes(ty) as uint;\n-        let args: [TypeRef] = vec::init_elt::<TypeRef>(n_args, 0 as TypeRef);\n+        let args: [TypeRef] = vec::from_elem::<TypeRef>(n_args, 0 as TypeRef);\n         unsafe {\n             llvm::LLVMGetParamTypes(ty, vec::unsafe::to_ptr(args));\n         }\n@@ -999,7 +999,7 @@ fn type_to_str_inner(names: type_names, outer0: [TypeRef], ty: TypeRef) ->\n       10 {\n         let s: str = \"{\";\n         let n_elts = llvm::LLVMCountStructElementTypes(ty) as uint;\n-        let elts: [TypeRef] = vec::init_elt::<TypeRef>(n_elts, 0 as TypeRef);\n+        let elts: [TypeRef] = vec::from_elem::<TypeRef>(n_elts, 0 as TypeRef);\n         unsafe {\n             llvm::LLVMGetStructElementTypes(ty, vec::unsafe::to_ptr(elts));\n         }\n@@ -1042,7 +1042,7 @@ fn float_width(llt: TypeRef) -> uint {\n }\n \n fn fn_ty_param_tys(fn_ty: TypeRef) -> [TypeRef] unsafe {\n-    let args = vec::init_elt(llvm::LLVMCountParamTypes(fn_ty) as uint,\n+    let args = vec::from_elem(llvm::LLVMCountParamTypes(fn_ty) as uint,\n                              0 as TypeRef);\n     llvm::LLVMGetParamTypes(fn_ty, vec::unsafe::to_ptr(args));\n     ret args;"}, {"sha": "d9469184d6b2f6d19b2e568f86502c617666e82e", "filename": "src/rustc/metadata/astencode.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fmetadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fmetadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -243,7 +243,7 @@ fn encode_id_range(ebml_w: ebml::writer, id_range: id_range) {\n \n fn decode_id_range(par_doc: ebml::doc) -> id_range {\n     let range_doc = par_doc[c::tag_id_range];\n-    let dsr = serialization::mk_ebml_deserializer(range_doc);\n+    let dsr = serialization::ebml_deserializer(range_doc);\n     dsr.read_tup(2u) {||\n         {min: dsr.read_tup_elt(0u) {|| dsr.read_int() },\n          max: dsr.read_tup_elt(1u) {|| dsr.read_int() }}\n@@ -368,7 +368,7 @@ fn simplify_ast(ii: ast::inlined_item) -> ast::inlined_item {\n \n fn decode_ast(par_doc: ebml::doc) -> ast::inlined_item {\n     let chi_doc = par_doc[c::tag_tree];\n-    let d = serialization::mk_ebml_deserializer(chi_doc);\n+    let d = serialization::ebml_deserializer(chi_doc);\n     astencode_gen::deserialize_syntax_ast_inlined_item(d)\n }\n \n@@ -398,7 +398,7 @@ fn encode_def(ebml_w: ebml::writer, def: ast::def) {\n }\n \n fn decode_def(xcx: extended_decode_ctxt, doc: ebml::doc) -> ast::def {\n-    let dsr = serialization::mk_ebml_deserializer(doc);\n+    let dsr = serialization::ebml_deserializer(doc);\n     let def = astencode_gen::deserialize_syntax_ast_def(dsr);\n     def.tr(xcx)\n }\n@@ -850,7 +850,7 @@ fn decode_side_tables(xcx: extended_decode_ctxt,\n             dcx.maps.copy_map.insert(id, ());\n         } else {\n             let val_doc = entry_doc[c::tag_table_val];\n-            let val_dsr = serialization::mk_ebml_deserializer(val_doc);\n+            let val_dsr = serialization::ebml_deserializer(val_doc);\n             if tag == (c::tag_table_def as uint) {\n                 let def = decode_def(xcx, val_doc);\n                 dcx.tcx.def_map.insert(id, def);\n@@ -903,7 +903,7 @@ fn encode_item_ast(ebml_w: ebml::writer, item: @ast::item) {\n #[cfg(test)]\n fn decode_item_ast(par_doc: ebml::doc) -> @ast::item {\n     let chi_doc = par_doc[c::tag_tree];\n-    let d = serialization::mk_ebml_deserializer(chi_doc);\n+    let d = serialization::ebml_deserializer(chi_doc);\n     @astencode_gen::deserialize_syntax_ast_item(d)\n }\n \n@@ -948,7 +948,7 @@ fn mk_ctxt() -> fake_ext_ctxt {\n fn roundtrip(in_item: @ast::item) {\n     #debug[\"in_item = %s\", pprust::item_to_str(in_item)];\n     let mbuf = io::mk_mem_buffer();\n-    let ebml_w = ebml::mk_writer(io::mem_buffer_writer(mbuf));\n+    let ebml_w = ebml::writer(io::mem_buffer_writer(mbuf));\n     encode_item_ast(ebml_w, in_item);\n     let ebml_doc = ebml::new_doc(@io::mem_buffer_buf(mbuf));\n     let out_item = decode_item_ast(ebml_doc);"}, {"sha": "7b1c2fdf9d998176dabf8f58045623d44542388b", "filename": "src/rustc/metadata/astencode_gen.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fmetadata%2Fastencode_gen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fmetadata%2Fastencode_gen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode_gen.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -4306,7 +4306,7 @@ fn deserialize_8<S: std::serialization::deserializer>(s: S) ->\n \n                /*@syntax::ast::meta_item*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i, {|| deserialize_9(s) })\n                                 })\n@@ -4731,7 +4731,7 @@ fn deserialize_2<S: std::serialization::deserializer>(s: S) ->\n \n                /*syntax::ast::attribute*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i, {|| deserialize_3(s) })\n                                 })\n@@ -4867,7 +4867,7 @@ fn deserialize_36<S: std::serialization::deserializer>(s: S) ->\n \n                /*syntax::ast::ty_field*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i, {|| deserialize_37(s) })\n                                 })\n@@ -4980,7 +4980,7 @@ fn deserialize_41<S: std::serialization::deserializer>(s: S) ->\n \n                /*syntax::ast::arg*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i, {|| deserialize_42(s) })\n                                 })\n@@ -5031,7 +5031,7 @@ fn deserialize_54<S: std::serialization::deserializer>(s: S) ->\n \n                /*syntax::ast::ident*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i, {|| deserialize_1(s) })\n                                 })\n@@ -5044,7 +5044,7 @@ fn deserialize_55<S: std::serialization::deserializer>(s: S) ->\n \n                /*@syntax::ast::ty*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i, {|| deserialize_29(s) })\n                                 })\n@@ -5180,7 +5180,7 @@ fn deserialize_56<S: std::serialization::deserializer>(s: S) ->\n                /*@{node: syntax::ast::constr_arg_general_<uint>,span: syntax::codemap::span}*/\n \n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i, {|| deserialize_57(s) })\n                                 })\n@@ -5249,7 +5249,7 @@ fn deserialize_47<S: std::serialization::deserializer>(s: S) ->\n \n                /*@syntax::ast::constr*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i, {|| deserialize_48(s) })\n                                 })\n@@ -5359,7 +5359,7 @@ fn deserialize_65<S: std::serialization::deserializer>(s: S) ->\n                /*@{node: syntax::ast::constr_arg_general_<@syntax::ast::path>,span: syntax::codemap::span}*/\n \n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i, {|| deserialize_66(s) })\n                                 })\n@@ -5422,7 +5422,7 @@ fn deserialize_61<S: std::serialization::deserializer>(s: S) ->\n \n                /*@syntax::ast::ty_constr*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i, {|| deserialize_62(s) })\n                                 })\n@@ -5435,7 +5435,7 @@ fn deserialize_75<S: std::serialization::deserializer>(s: S) ->\n \n                /*@syntax::ast::expr*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i, {|| deserialize_72(s) })\n                                 })\n@@ -5493,7 +5493,7 @@ fn deserialize_76<S: std::serialization::deserializer>(s: S) ->\n \n                /*syntax::ast::field*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i, {|| deserialize_77(s) })\n                                 })\n@@ -5527,7 +5527,7 @@ fn deserialize_80<S: std::serialization::deserializer>(s: S) ->\n \n                /*core::option::t<@syntax::ast::expr>*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i, {|| deserialize_79(s) })\n                                 })\n@@ -5642,7 +5642,7 @@ fn deserialize_94<S: std::serialization::deserializer>(s: S) ->\n \n                /*syntax::ast::ident*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i, {|| deserialize_1(s) })\n                                 })\n@@ -5699,7 +5699,7 @@ fn deserialize_95<S: std::serialization::deserializer>(s: S) ->\n \n                /*syntax::ast::path_list_ident*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i, {|| deserialize_96(s) })\n                                 })\n@@ -5795,7 +5795,7 @@ fn deserialize_89<S: std::serialization::deserializer>(s: S) ->\n \n                /*@syntax::ast::view_path*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i, {|| deserialize_90(s) })\n                                 })\n@@ -5878,7 +5878,7 @@ fn deserialize_85<S: std::serialization::deserializer>(s: S) ->\n \n                /*@syntax::ast::view_item*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i, {|| deserialize_86(s) })\n                                 })\n@@ -5912,7 +5912,7 @@ fn deserialize_113<S: std::serialization::deserializer>(s: S) ->\n \n                /*@syntax::ast::pat*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i,\n                                                    {|| deserialize_109(s) })\n@@ -5946,7 +5946,7 @@ fn deserialize_114<S: std::serialization::deserializer>(s: S) ->\n \n                /*syntax::ast::field_pat*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i,\n                                                    {|| deserialize_115(s) })\n@@ -6198,7 +6198,7 @@ fn deserialize_105<S: std::serialization::deserializer>(s: S) ->\n \n                /*@syntax::ast::local*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i,\n                                                    {|| deserialize_106(s) })\n@@ -6347,7 +6347,7 @@ fn deserialize_98<S: std::serialization::deserializer>(s: S) ->\n \n                /*@syntax::ast::stmt*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i, {|| deserialize_99(s) })\n                                 })\n@@ -6460,7 +6460,7 @@ fn deserialize_121<S: std::serialization::deserializer>(s: S) ->\n \n                /*syntax::ast::arm*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i,\n                                                    {|| deserialize_122(s) })\n@@ -6526,7 +6526,7 @@ fn deserialize_126<S: std::serialization::deserializer>(s: S) ->\n \n                /*@syntax::ast::capture_item*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i,\n                                                    {|| deserialize_127(s) })\n@@ -7382,7 +7382,7 @@ fn deserialize_136<S: std::serialization::deserializer>(s: S) ->\n \n                /*syntax::ast::ty_param_bound*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i,\n                                                    {|| deserialize_137(s) })\n@@ -7426,7 +7426,7 @@ fn deserialize_133<S: std::serialization::deserializer>(s: S) ->\n \n                /*syntax::ast::ty_param*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i,\n                                                    {|| deserialize_134(s) })\n@@ -7440,7 +7440,7 @@ fn deserialize_139<S: std::serialization::deserializer>(s: S) ->\n \n                /*@syntax::ast::item*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i,\n                                                    {|| deserialize_119(s) })\n@@ -7536,7 +7536,7 @@ fn deserialize_141<S: std::serialization::deserializer>(s: S) ->\n \n                /*@syntax::ast::native_item*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i,\n                                                    {|| deserialize_142(s) })\n@@ -7587,7 +7587,7 @@ fn deserialize_148<S: std::serialization::deserializer>(s: S) ->\n \n                /*syntax::ast::variant_arg*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i,\n                                                    {|| deserialize_149(s) })\n@@ -7654,7 +7654,7 @@ fn deserialize_145<S: std::serialization::deserializer>(s: S) ->\n \n                /*syntax::ast::variant*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i,\n                                                    {|| deserialize_146(s) })\n@@ -7792,7 +7792,7 @@ fn deserialize_150<S: std::serialization::deserializer>(s: S) ->\n \n                /*@syntax::ast::class_item*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i,\n                                                    {|| deserialize_151(s) })\n@@ -7881,7 +7881,7 @@ fn deserialize_159<S: std::serialization::deserializer>(s: S) ->\n \n                /*syntax::ast::ty_method*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i,\n                                                    {|| deserialize_160(s) })\n@@ -7966,7 +7966,7 @@ fn deserialize_162<S: std::serialization::deserializer>(s: S) ->\n \n                /*@syntax::ast::method*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i,\n                                                    {|| deserialize_163(s) })\n@@ -9148,7 +9148,7 @@ fn deserialize_174<S: std::serialization::deserializer>(s: S) ->\n \n                /*syntax::ast::node_id*/\n                {|len|\n-                   vec::init_fn(len,\n+                   vec::from_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i, {|| deserialize_27(s) })\n                                 })"}, {"sha": "27492364866a60105abb63e9db4e04d713b29a97", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -747,7 +747,7 @@ fn encode_metadata(cx: crate_ctxt, crate: @crate) -> [u8] {\n \n     let buf = io::mk_mem_buffer();\n     let buf_w = io::mem_buffer_writer(buf);\n-    let ebml_w = ebml::mk_writer(buf_w);\n+    let ebml_w = ebml::writer(buf_w);\n \n     encode_hash(ebml_w, cx.link_meta.extras_hash);\n "}, {"sha": "74c8250b236812ed01515baa212ee0feb1b05a5e", "filename": "src/rustc/middle/check_alt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_alt.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -89,7 +89,7 @@ fn check_exhaustive(tcx: ty::ctxt, sp: span, pats: [@pat]) {\n         }));\n       }\n       ty::ty_tup(ts) {\n-        let cols = vec::to_mut(vec::init_elt(ts.len(), []));\n+        let cols = vec::to_mut(vec::from_elem(ts.len(), []));\n         for p in pats {\n             alt raw_pat(p).node {\n               pat_tup(sub) {\n@@ -101,7 +101,7 @@ fn check_exhaustive(tcx: ty::ctxt, sp: span, pats: [@pat]) {\n         vec::iter(cols) {|col| check_exhaustive(tcx, sp, col); }\n       }\n       ty::ty_rec(fs) {\n-        let cols = vec::init_elt(fs.len(), {mutable wild: false,\n+        let cols = vec::from_elem(fs.len(), {mutable wild: false,\n                                             mutable pats: []});\n         for p in pats {\n             alt raw_pat(p).node {\n@@ -157,7 +157,7 @@ fn check_exhaustive_enum(tcx: ty::ctxt, enum_id: def_id, sp: span,\n     let variants = enum_variants(tcx, enum_id);\n     let columns_by_variant = vec::map(*variants, {|v|\n         {mutable seen: false,\n-         cols: vec::to_mut(vec::init_elt(v.args.len(), []))}\n+         cols: vec::to_mut(vec::from_elem(v.args.len(), []))}\n     });\n \n     for pat in pats {"}, {"sha": "e38d08dce2dc0f4156d35af0c7b82be2d9031776", "filename": "src/rustc/middle/last_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flast_use.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -58,7 +58,7 @@ fn find_last_uses(c: @crate, def_map: resolve::def_map,\n                            visit_stmt: visit_stmt,\n                            visit_fn: visit_fn\n                            with *visit::default_visitor()});\n-    let cx = {last_uses: std::map::mk_hashmap(hash_use_id, {|a, b| a == b}),\n+    let cx = {last_uses: std::map::new_hashmap(hash_use_id, {|a, b| a == b}),\n               def_map: def_map,\n               ref_map: ref_map,\n               tcx: tcx,"}, {"sha": "0fd4993cad4773ea671be02008f318fc620f6303", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -8,7 +8,7 @@ import front::attr;\n import metadata::{csearch, cstore};\n import driver::session::session;\n import util::common::*;\n-import std::map::{new_int_hash, new_str_hash, mk_hashmap};\n+import std::map::{new_int_hash, new_str_hash, new_hashmap};\n import syntax::codemap::span;\n import syntax::visit;\n import visit::vt;\n@@ -82,7 +82,7 @@ fn new_ext_hash() -> ext_hash {\n         ret util::common::def_eq(v1.did, v2.did) &&\n                 str::eq(v1.ident, v2.ident) && v1.ns == v2.ns;\n     }\n-    ret std::map::mk_hashmap::<key, def>(hash, eq);\n+    ret std::map::new_hashmap::<key, def>(hash, eq);\n }\n \n enum mod_index_entry {"}, {"sha": "fcdaf71acfafa2675411440da7118e25e7d244f6", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -174,7 +174,7 @@ fn enter_opt(tcx: ty::ctxt, m: match, opt: opt, col: uint,\n           ast::pat_range(l1, l2) {\n             if opt_eq(range(l1, l2), opt) { some([]) } else { none }\n           }\n-          _ { some(vec::init_elt(variant_size, dummy)) }\n+          _ { some(vec::from_elem(variant_size, dummy)) }\n         }\n     }\n }\n@@ -195,7 +195,7 @@ fn enter_rec(dm: def_map, m: match, col: uint, fields: [ast::ident],\n             }\n             some(pats)\n           }\n-          _ { some(vec::init_elt(fields.len(), dummy)) }\n+          _ { some(vec::from_elem(fields.len(), dummy)) }\n         }\n     }\n }\n@@ -206,7 +206,7 @@ fn enter_tup(dm: def_map, m: match, col: uint, val: ValueRef,\n     enter_match(dm, m, col, val) {|p|\n         alt p.node {\n           ast::pat_tup(elts) { some(elts) }\n-          _ { some(vec::init_elt(n_elts, dummy)) }\n+          _ { some(vec::from_elem(n_elts, dummy)) }\n         }\n     }\n }\n@@ -334,7 +334,7 @@ fn pick_col(m: match) -> uint {\n           _ { 0u }\n         }\n     }\n-    let scores = vec::to_mut(vec::init_elt(m[0].pats.len(), 0u));\n+    let scores = vec::to_mut(vec::from_elem(m[0].pats.len(), 0u));\n     for br: match_branch in m {\n         let i = 0u;\n         for p: @ast::pat in br.pats { scores[i] += score(p); i += 1u; }"}, {"sha": "e7ab3c39899c553f3867f13dc02f83e24681b8d7", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -208,7 +208,7 @@ fn get_simple_extern_fn(cx: block,\n                         llmod: ModuleRef,\n                         name: str, n_args: int) -> ValueRef {\n     let ccx = cx.fcx.ccx;\n-    let inputs = vec::init_elt(n_args as uint, ccx.int_type);\n+    let inputs = vec::from_elem(n_args as uint, ccx.int_type);\n     let output = ccx.int_type;\n     let t = T_fn(inputs, output);\n     ret get_extern_fn(externs, llmod, name, lib::llvm::CCallConv, t);\n@@ -2547,7 +2547,7 @@ fn lval_maybe_callee_to_lval(c: lval_maybe_callee, ty: ty::t) -> lval_result {\n         alt c.env { self_env(_, _) | dict_env(_, _) { true } _ { false } };\n     if must_bind {\n         let n_args = ty::ty_fn_args(ty).len();\n-        let args = vec::init_elt(n_args, none);\n+        let args = vec::from_elem(n_args, none);\n         let space = alloc_ty(c.bcx, ty);\n         let bcx = closure::trans_bind_1(space.bcx, ty, c, args, ty,\n                                               save_in(space.val));\n@@ -4929,7 +4929,7 @@ fn write_abi_version(ccx: crate_ctxt) {\n fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n                output: str, emap: resolve::exp_map, maps: maps)\n     -> (ModuleRef, link::link_meta) {\n-    let sha = std::sha1::mk_sha1();\n+    let sha = std::sha1::sha1();\n     let link_meta = link::build_link_meta(sess, *crate, output, sha);\n \n     // Append \".rc\" to crate name as LLVM module identifier.\n@@ -4992,9 +4992,9 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n           discrims: ast_util::new_def_id_hash::<ValueRef>(),\n           discrim_symbols: new_int_hash::<str>(),\n           tydescs: ty::new_ty_hash(),\n-          dicts: map::mk_hashmap(hash_dict_id, {|a, b| a == b}),\n+          dicts: map::new_hashmap(hash_dict_id, {|a, b| a == b}),\n           external: util::common::new_def_hash(),\n-          monomorphized: map::mk_hashmap(hash_mono_id, {|a, b| a == b}),\n+          monomorphized: map::new_hashmap(hash_mono_id, {|a, b| a == b}),\n           module_data: new_str_hash::<ValueRef>(),\n           lltypes: ty::new_ty_hash(),\n           names: new_namegen(),"}, {"sha": "155af401ae8ff9134a29fc2576d9feb7956e7b11", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -391,7 +391,7 @@ fn val_str(tn: type_names, v: ValueRef) -> str { ret ty_str(tn, val_ty(v)); }\n fn struct_elt(llstructty: TypeRef, n: uint) -> TypeRef unsafe {\n     let elt_count = llvm::LLVMCountStructElementTypes(llstructty) as uint;\n     assert (n < elt_count);\n-    let elt_tys = vec::init_elt(elt_count, T_nil());\n+    let elt_tys = vec::from_elem(elt_count, T_nil());\n     llvm::LLVMGetStructElementTypes(llstructty, to_ptr(elt_tys));\n     ret llvm::LLVMGetElementType(elt_tys[n]);\n }\n@@ -572,7 +572,7 @@ fn T_tydesc_field(cx: crate_ctxt, field: int) -> TypeRef unsafe {\n     // Bit of a kludge: pick the fn typeref out of the tydesc..\n \n     let tydesc_elts: [TypeRef] =\n-        vec::init_elt::<TypeRef>(abi::n_tydesc_fields as uint,\n+        vec::from_elem::<TypeRef>(abi::n_tydesc_fields as uint,\n                                  T_nil());\n     llvm::LLVMGetStructElementTypes(cx.tydesc_type,\n                                     to_ptr::<TypeRef>(tydesc_elts));\n@@ -724,7 +724,7 @@ fn T_opaque_enum_ptr(cx: crate_ctxt) -> TypeRef {\n }\n \n fn T_captured_tydescs(cx: crate_ctxt, n: uint) -> TypeRef {\n-    ret T_struct(vec::init_elt::<TypeRef>(n, T_ptr(cx.tydesc_type)));\n+    ret T_struct(vec::from_elem::<TypeRef>(n, T_ptr(cx.tydesc_type)));\n }\n \n fn T_opaque_iface(cx: crate_ctxt) -> TypeRef {"}, {"sha": "8d7141f2bb492b6351a0d6475649dd2d2e65aa71", "filename": "src/rustc/middle/trans/impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -202,7 +202,7 @@ fn trans_iface_callee(bcx: block, callee_id: ast::node_id,\n fn llfn_arg_tys(ft: TypeRef) -> {inputs: [TypeRef], output: TypeRef} {\n     let out_ty = llvm::LLVMGetReturnType(ft);\n     let n_args = llvm::LLVMCountParamTypes(ft);\n-    let args = vec::init_elt(n_args as uint, 0 as TypeRef);\n+    let args = vec::from_elem(n_args as uint, 0 as TypeRef);\n     unsafe { llvm::LLVMGetParamTypes(ft, vec::unsafe::to_ptr(args)); }\n     {inputs: args, output: out_ty}\n }"}, {"sha": "8eb815a7a6520fec860c2ba2a5310c74c84009a3", "filename": "src/rustc/middle/tstate/states.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -357,7 +357,7 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n     alt e.node {\n       expr_vec(elts, _) {\n         ret find_pre_post_state_exprs(fcx, pres, e.id,\n-                                      vec::init_elt(vec::len(elts),\n+                                      vec::from_elem(vec::len(elts),\n                                                     init_assign), elts,\n                                       return_val);\n       }\n@@ -401,7 +401,7 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n         let exs = field_exprs(fields);\n         let changed =\n             find_pre_post_state_exprs(fcx, pres, e.id,\n-                                      vec::init_elt(vec::len(fields),\n+                                      vec::from_elem(vec::len(fields),\n                                                     init_assign),\n                                       exs, return_val);\n \n@@ -415,7 +415,7 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n       }\n       expr_tup(elts) {\n         ret find_pre_post_state_exprs(fcx, pres, e.id,\n-                                      vec::init_elt(vec::len(elts),\n+                                      vec::from_elem(vec::len(elts),\n                                                     init_assign), elts,\n                                       return_val);\n       }"}, {"sha": "7e0e94ef494f3fe2891dc20e2f33f4406ac59403", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -322,18 +322,18 @@ fn mk_rcache() -> creader_cache {\n     fn eq_cache_entries(a: val, b: val) -> bool {\n         ret a.cnum == b.cnum && a.pos == b.pos && a.len == b.len;\n     }\n-    ret map::mk_hashmap(hash_cache_entry, eq_cache_entries);\n+    ret map::new_hashmap(hash_cache_entry, eq_cache_entries);\n }\n \n fn new_ty_hash<V: copy>() -> map::hashmap<t, V> {\n-    map::mk_hashmap({|&&t: t| type_id(t)},\n+    map::new_hashmap({|&&t: t| type_id(t)},\n                     {|&&a: t, &&b: t| type_id(a) == type_id(b)})\n }\n \n fn mk_ctxt(s: session::session, dm: resolve::def_map, amap: ast_map::map,\n            freevars: freevars::freevar_map,\n            region_map: @middle::region::region_map) -> ctxt {\n-    let interner = map::mk_hashmap({|&&k: intern_key|\n+    let interner = map::new_hashmap({|&&k: intern_key|\n         hash_type_structure(k.struct) +\n             option::maybe(0u, k.o_def_id, ast_util::hash_def_id)\n     }, {|&&a, &&b| a == b});\n@@ -351,7 +351,8 @@ fn mk_ctxt(s: session::session, dm: resolve::def_map, amap: ast_map::map,\n       short_names_cache: new_ty_hash(),\n       needs_drop_cache: new_ty_hash(),\n       kind_cache: new_ty_hash(),\n-      ast_ty_to_ty_cache: map::mk_hashmap(ast_util::hash_ty, ast_util::eq_ty),\n+      ast_ty_to_ty_cache: map::new_hashmap(\n+          ast_util::hash_ty, ast_util::eq_ty),\n       enum_var_cache: new_def_hash(),\n       iface_method_cache: new_def_hash(),\n       ty_param_bounds: map::new_int_hash(),"}, {"sha": "1b8cd8b7117add68f3bd3081f3ea247b0f75b6b5", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -190,7 +190,7 @@ fn instantiate_path(fcx: @fn_ctxt, pth: @ast::path,\n         });\n         write_ty_substs(fcx.ccx.tcx, id, tpt.ty, substs);\n     } else if ty_param_count > 0u {\n-        let vars = vec::init_fn(ty_param_count, {|_i| next_ty_var(fcx)});\n+        let vars = vec::from_fn(ty_param_count, {|_i| next_ty_var(fcx)});\n         write_ty_substs(fcx.ccx.tcx, id, tpt.ty, vars);\n     } else {\n         write_ty(fcx.ccx.tcx, id, tpt.ty);\n@@ -697,7 +697,7 @@ fn compare_impl_method(tcx: ty::ctxt, sp: span, impl_m: ty::method,\n         });\n         let impl_fty = ty::mk_fn(tcx, {inputs: auto_modes with impl_m.fty});\n         // Add dummy substs for the parameters of the impl method\n-        let substs = substs + vec::init_fn(vec::len(*if_m.tps), {|i|\n+        let substs = substs + vec::from_fn(vec::len(*if_m.tps), {|i|\n             ty::mk_param(tcx, i + impl_tps, {crate: 0, node: 0})\n         });\n         let if_fty = ty::mk_fn(tcx, if_m.fty);\n@@ -1685,7 +1685,7 @@ fn lookup_method(fcx: @fn_ctxt, expr: @ast::expr, node_id: ast::node_id,\n                                      parameters given for this method\");\n \n                 }\n-                substs += vec::init_fn(method_n_tps, {|_i|\n+                substs += vec::from_fn(method_n_tps, {|_i|\n                     ty::mk_var(tcx, next_ty_var_id(fcx))\n                 });\n             } else {\n@@ -1957,7 +1957,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n             // check against\n             let dummy = {mode: ast::expl(ast::by_ref),\n                          ty: ty::mk_bot(fcx.ccx.tcx)};\n-            arg_tys = vec::init_elt(supplied_arg_count, dummy);\n+            arg_tys = vec::from_elem(supplied_arg_count, dummy);\n         }\n \n         // Check the arguments.\n@@ -2682,7 +2682,7 @@ fn next_ty_var(fcx: @fn_ctxt) -> ty::t {\n \n fn bind_params(fcx: @fn_ctxt, tp: ty::t, count: uint)\n     -> {vars: [ty::t], ty: ty::t} {\n-    let vars = vec::init_fn(count, {|_i| next_ty_var(fcx)});\n+    let vars = vec::from_fn(count, {|_i| next_ty_var(fcx)});\n     {vars: vars, ty: ty::substitute_type_params(fcx.ccx.tcx, vars, tp)}\n }\n "}, {"sha": "a6e34f3b24d9bc9ed1c54cc6d642f5035583728b", "filename": "src/rustc/syntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fast_util.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -227,7 +227,7 @@ fn eq_def_id(&&a: def_id, &&b: def_id) -> bool {\n }\n \n fn new_def_id_hash<T: copy>() -> std::map::hashmap<def_id, T> {\n-    std::map::mk_hashmap(hash_def_id, eq_def_id)\n+    std::map::new_hashmap(hash_def_id, eq_def_id)\n }\n \n fn block_from_expr(e: @expr) -> blk {"}, {"sha": "a9d92f12f89b3dbbecd6ae516e94cf1391663adb", "filename": "src/rustc/syntax/print/pp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fprint%2Fpp.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -99,9 +99,9 @@ fn mk_printer(out: io::writer, linewidth: uint) -> printer {\n     // fall behind.\n     let n: uint = 3u * linewidth;\n     #debug(\"mk_printer %u\", linewidth);\n-    let token: [mutable token] = vec::to_mut(vec::init_elt(n, EOF));\n-    let size: [mutable int] = vec::to_mut(vec::init_elt(n, 0));\n-    let scan_stack: [mutable uint] = vec::to_mut(vec::init_elt(n, 0u));\n+    let token: [mutable token] = vec::to_mut(vec::from_elem(n, EOF));\n+    let size: [mutable int] = vec::to_mut(vec::from_elem(n, 0));\n+    let scan_stack: [mutable uint] = vec::to_mut(vec::from_elem(n, 0u));\n     let print_stack: [print_stack_elt] = [];\n     @{out: out,\n       buf_len: n,"}, {"sha": "ff08d88971b5090c09294777d4fc6476e1ddbdf5", "filename": "src/rustc/syntax/util/interner.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Fsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Futil%2Finterner.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -11,7 +11,7 @@ type interner<T> =\n      eqer: eqfn<T>};\n \n fn mk<T: copy>(hasher: hashfn<T>, eqer: eqfn<T>) -> interner<T> {\n-    let m = map::mk_hashmap::<T, uint>(hasher, eqer);\n+    let m = map::new_hashmap::<T, uint>(hasher, eqer);\n     ret {map: m, mutable vect: [], hasher: hasher, eqer: eqer};\n }\n "}, {"sha": "85b694fb9546b3e689df4163f40f988df4983798", "filename": "src/rustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fcommon.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -21,7 +21,7 @@ fn hash_def(d: ast::def_id) -> uint {\n fn new_def_hash<V: copy>() -> std::map::hashmap<ast::def_id, V> {\n     let hasher: std::map::hashfn<ast::def_id> = hash_def;\n     let eqer: std::map::eqfn<ast::def_id> = def_eq;\n-    ret std::map::mk_hashmap::<ast::def_id, V>(hasher, eqer);\n+    ret std::map::new_hashmap::<ast::def_id, V>(hasher, eqer);\n }\n \n fn field_expr(f: ast::field) -> @ast::expr { ret f.node.expr; }"}, {"sha": "ad72e55ba105469295d24c89e125893c33896fb1", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -172,7 +172,7 @@ fn write_header(ctxt: ctxt, lvl: hlvl, doc: doc::itemtag) {\n }\n \n fn write_header_(ctxt: ctxt, lvl: hlvl, title: str) {\n-    let hashes = str::from_chars(vec::init_elt(lvl as uint, '#'));\n+    let hashes = str::from_chars(vec::from_elem(lvl as uint, '#'));\n     ctxt.w.write_line(#fmt(\"%s %s\", hashes, title));\n     ctxt.w.write_line(\"\");\n }"}, {"sha": "b49cd97bb41e92dc106a6f1fa6a7fc0f4354780e", "filename": "src/serializer/serializer.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Fserializer%2Fserializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Fserializer%2Fserializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fserializer%2Fserializer.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -237,7 +237,7 @@ impl serialize_methods for serialize_ctx {\n             fail \"TODO--implement class\";\n           }\n           ty::ty_rec(fields) {\n-            let stmts = vec::init_fn(vec::len(fields)) {|i|\n+            let stmts = vec::from_fn(vec::len(fields)) {|i|\n                 let field = fields[i];\n                 let f_name = field.ident;\n                 let f_ty = field.mt.ty;\n@@ -317,10 +317,10 @@ impl serialize_methods for serialize_ctx {\n     fn serialize_arm(v_path: str, emit_fn: str, args: [ty::t])\n         -> (ast_pat, [ast_stmt]) {\n         let n_args = vec::len(args);\n-        let arg_nms = vec::init_fn(n_args) {|i| #fmt[\"v%u\", i] };\n+        let arg_nms = vec::from_fn(n_args) {|i| #fmt[\"v%u\", i] };\n         let v_pat =\n             #fmt[\"\\n%s(%s)\\n\", v_path, str::connect(arg_nms, \",\")];\n-        let stmts = vec::init_fn(n_args) {|i|\n+        let stmts = vec::from_fn(n_args) {|i|\n             let arg_ty = args[i];\n             let serialize_expr =\n                 self.serialize_ty(arg_ty, arg_nms[i]);\n@@ -402,7 +402,7 @@ impl deserialize_methods for serialize_ctx {\n           ty::ty_vec(mt) {\n             let selem = self.deserialize_ty(mt.ty);\n             #fmt[\"s.read_vec({|len|\\n\\\n-                    vec::init_fn(len, {|i|\\n\\\n+                    vec::from_fn(len, {|i|\\n\\\n                       s.read_vec_elt(i, {||\\n\\\n                         %s\\n\\\n                   })})})\", selem]\n@@ -455,7 +455,7 @@ impl deserialize_methods for serialize_ctx {\n                         tps: [ty::t]) -> ast_expr {\n         let variants = ty::substd_enum_variants(self.tcx, id, tps);\n \n-        let arms = vec::init_fn(vec::len(variants)) {|v_id|\n+        let arms = vec::from_fn(vec::len(variants)) {|v_id|\n             let variant = variants[v_id];\n             let item_path = ty::item_path(self.tcx, variant.id);\n             let v_path = ast_map::path_to_str(item_path);\n@@ -483,7 +483,7 @@ impl deserialize_methods for serialize_ctx {\n \n     fn deserialize_arm(v_path: str, read_fn: str, args: [ty::t])\n         -> ast_expr {\n-        let exprs = vec::init_fn(vec::len(args)) {|i|\n+        let exprs = vec::from_fn(vec::len(args)) {|i|\n             let rexpr = self.deserialize_ty(args[i]);\n             #fmt[\"\\ns.%s(%uu, {||%s})\\n\", read_fn, i, rexpr]\n         };"}, {"sha": "7710c3acfd48a1a05b29a43716abadc89137de7b", "filename": "src/test/bench/msgsend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Fbench%2Fmsgsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Fbench%2Fmsgsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -39,7 +39,7 @@ fn run(args: [str]) {\n     let to_child = to_child;\n     let worker_results = [];\n     uint::range(0u, workers) {|_i|\n-        let builder = task::mk_task_builder();\n+        let builder = task::task_builder();\n         worker_results += [task::future_result(builder)];\n         task::run(builder) {||\n             uint::range(0u, size / workers) {|_i|"}, {"sha": "721436719041b9540afc1f04ee882690ff2589f8", "filename": "src/test/bench/shootout-fannkuchredux.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -6,9 +6,9 @@ import vec;\n fn fannkuch(n: int) -> int {\n     fn perm1init(i: uint) -> int { ret i as int; }\n \n-    let perm = vec::to_mut(vec::init_elt(n as uint, 0));\n-    let perm1 = vec::to_mut(vec::init_fn(n as uint, perm1init));\n-    let count = vec::to_mut(vec::init_elt(n as uint, 0));\n+    let perm = vec::to_mut(vec::from_elem(n as uint, 0));\n+    let perm1 = vec::to_mut(vec::from_fn(n as uint, perm1init));\n+    let count = vec::to_mut(vec::from_elem(n as uint, 0));\n     let f = 0;\n     let i = 0;\n     let k = 0;"}, {"sha": "a496e878efa7d07ee3d7ba47bb4c3343f6bafbb7", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -44,7 +44,7 @@ fn select_random(r: u32, genelist: [aminoacids]) -> char {\n \n fn make_random_fasta(id: str, desc: str, genelist: [aminoacids], n: int) {\n     log(debug, \">\" + id + \" \" + desc);\n-    let rng = @{mutable last: std::rand::mk_rng().next()};\n+    let rng = @{mutable last: std::rand::rng().next()};\n     let op: str = \"\";\n     uint::range(0u, n as uint) {|_i|\n         str::push_char(op, select_random(myrandom_next(rng, 100u32),"}, {"sha": "41ba82853d947e8196d6d7cdb86cd7d8fbbb11d1", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -71,7 +71,7 @@ fn stress_task(&&id: int) {\n fn stress(num_tasks: int) {\n     let results = [];\n     range(0, num_tasks) {|i|\n-        let builder = task::mk_task_builder();\n+        let builder = task::task_builder();\n         results += [task::future_result(builder)];\n         task::run(builder) {|| stress_task(i); }\n     }"}, {"sha": "3efacf079fd76dd1145dc93437369753f8f0e79e", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -35,7 +35,7 @@ fn eval_At_times_u(u: [const float], Au: [mutable float]) {\n }\n \n fn eval_AtA_times_u(u: [const float], AtAu: [mutable float]) {\n-    let v = vec::to_mut(vec::init_elt(vec::len(u), 0.0));\n+    let v = vec::to_mut(vec::from_elem(vec::len(u), 0.0));\n     eval_A_times_u(u, v);\n     eval_At_times_u(v, AtAu);\n }\n@@ -48,8 +48,8 @@ fn main(args: [str]) {\n         1000u\n     };\n \n-    let u = vec::to_mut(vec::init_elt(N, 1.0));\n-    let v = vec::to_mut(vec::init_elt(N, 0.0));\n+    let u = vec::to_mut(vec::from_elem(N, 1.0));\n+    let v = vec::to_mut(vec::from_elem(N, 0.0));\n     let i = 0u;\n     while i < 10u {\n         eval_AtA_times_u(u, v);"}, {"sha": "96deaea3983f3e3d2aa1ed3dd1038301cd9bcdbf", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -31,8 +31,8 @@ enum grid_t { grid_ctor(grid), }\n fn read_grid(f: io::reader) -> grid_t {\n     assert f.read_line() == \"9,9\"; /* assert first line is exactly \"9,9\" */\n \n-    let g = vec::init_fn(10u, {|_i|\n-        vec::to_mut(vec::init_elt(10u, 0 as u8))\n+    let g = vec::from_fn(10u, {|_i|\n+        vec::to_mut(vec::from_elem(10u, 0 as u8))\n     });\n     while !f.eof() {\n         let comps = str::split_char(str::trim(f.read_line()), ',');\n@@ -131,8 +131,8 @@ fn write_grid(f: io::writer, g: grid_t) {\n fn main(args: [str]) {\n     let grid = if vec::len(args) == 1u {\n         // FIXME create sudoku inline since nested vec consts dont work yet\n-        let g = vec::init_fn(10u, {|_i|\n-            vec::to_mut(vec::init_elt(10u, 0 as u8))\n+        let g = vec::from_fn(10u, {|_i|\n+            vec::to_mut(vec::from_elem(10u, 0 as u8))\n         });\n         g[0][1] = 4u8;\n         g[0][3] = 6u8;"}, {"sha": "4000b3aec3841d31e0bd1d60f5d75c09ba65ef7d", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -62,7 +62,7 @@ mod map_reduce {\n        [future::future<task::task_result>] {\n         let results = [];\n         for i: str in inputs {\n-            let builder = task::mk_task_builder();\n+            let builder = task::task_builder();\n             results += [task::future_result(builder)];\n             task::run(builder) {|| map_task(ctrl, i)}\n         }\n@@ -160,7 +160,7 @@ mod map_reduce {\n                     // log(error, \"creating new reducer for \" + k);\n                     let p = port();\n                     let ch = chan(p);\n-                    let builder = task::mk_task_builder();\n+                    let builder = task::task_builder();\n                     results += [task::future_result(builder)];\n                     task::run(builder) {||reduce_task(k, ch)}\n                     c = recv(p);"}, {"sha": "1dfe41e7279e9ec6fc1cd6854cd113d7c7412bdb", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -15,7 +15,7 @@ fn main() {\n         ret s == t;\n     }\n \n-    let map = map::mk_hashmap(hash, eq);\n+    let map = map::new_hashmap(hash, eq);\n     let arr = [];\n     uint::range(0u, 10u) {|i|\n         arr += [@\"key stuff\"];"}, {"sha": "58a6a7321e4f79290b73dc071a78b284b3bd703c", "filename": "src/test/run-pass/import-glob-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -3,7 +3,7 @@ use std;\n import vec::*;\n \n fn main() {\n-    let v = init_elt(0u, 0);\n+    let v = from_elem(0u, 0);\n     v += [4, 2];\n     assert (reversed(v) == [2, 4]);\n }"}, {"sha": "fa17a369f5c2a349ebc7399852536770e8846a5c", "filename": "src/test/run-pass/lots-a-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flots-a-fail.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -14,7 +14,7 @@ fn iloop() {\n \n fn main() {\n     uint::range(0u, 100u) {|_i|\n-        let builder = task::mk_task_builder();\n+        let builder = task::task_builder();\n         task::unsupervise(builder);\n         task::run(builder) {|| iloop(); };\n     }"}, {"sha": "7046f1e3d78360c159318b86076b2460bae7aaf0", "filename": "src/test/run-pass/mod-view-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Fmod-view-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Fmod-view-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod-view-items.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -7,7 +7,7 @@\n mod m {\n     use std;\n     import vec;\n-    fn f() -> [int] { vec::init_elt(1u, 0) }\n+    fn f() -> [int] { vec::from_elem(1u, 0) }\n }\n \n fn main() { let x = m::f(); }"}, {"sha": "ec0edf4eade00248ecca91929e35339413679d10", "filename": "src/test/run-pass/morestack6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack6.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -57,7 +57,7 @@ fn main() {\n         calllink09,\n         calllink10\n     ];\n-    let rng = rand::mk_rng();\n+    let rng = rand::rng();\n     for f in fns {\n         let sz = rng.next() % 256u32 + 256u32;\n         let frame_backoff = rng.next() % 10u32 + 1u32;"}, {"sha": "42c96fbd036323603c3ba1ebf292097eaac97bfd", "filename": "src/test/run-pass/send-iloop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-iloop.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -22,7 +22,7 @@ fn iloop() {\n \n fn main() {\n     uint::range(0u, 16u) {|_i|\n-        let builder = task::mk_task_builder();\n+        let builder = task::task_builder();\n         task::unsupervise(builder);\n         task::run(builder) {|| iloop(); }\n     }"}, {"sha": "417d7b38d38f79c40044d9882b202e62d874227c", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -7,7 +7,7 @@ fn start(&&task_number: int) { #debug(\"Started / Finished task.\"); }\n \n fn test00() {\n     let i: int = 0;\n-    let builder = task::mk_task_builder();\n+    let builder = task::task_builder();\n     let r = task::future_result(builder);\n     task::run(builder) {|| start(i); };\n "}, {"sha": "0785ecf7aa0a38982e69e1e017c2a4218a5bff89", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -32,7 +32,7 @@ fn test00() {\n     // Create and spawn tasks...\n     let results = [];\n     while i < number_of_tasks {\n-        let builder = task::mk_task_builder();\n+        let builder = task::task_builder();\n         results += [task::future_result(builder)];\n         task::run(builder) {||\n             test00_start(ch, i, number_of_messages)"}, {"sha": "ff80b5bd4567bfcfb729cce7e600fb55b107800c", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -16,7 +16,7 @@ fn test00() {\n     let number_of_messages: int = 10;\n     let ch = comm::chan(p);\n \n-    let builder = task::mk_task_builder();\n+    let builder = task::task_builder();\n     let r = task::future_result(builder);\n     task::run(builder) {||\n         test00_start(ch, number_of_messages);"}, {"sha": "925f89ed67dcde8654dcaa9e23fa467290074031", "filename": "src/test/run-pass/task-comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -41,7 +41,7 @@ fn test00() {\n     let results = [];\n     while i < number_of_tasks {\n         i = i + 1;\n-        let builder = task::mk_task_builder();\n+        let builder = task::task_builder();\n         results += [task::future_result(builder)];\n         task::run(builder) {|| test00_start(ch, i, number_of_messages);}\n     }\n@@ -126,7 +126,7 @@ fn test06() {\n     let results = [];\n     while i < number_of_tasks {\n         i = i + 1;\n-        let builder = task::mk_task_builder();\n+        let builder = task::task_builder();\n         results += [task::future_result(builder)];\n         task::run(builder) {|| test06_start(i);};\n     }"}, {"sha": "a4efa4011e32176fe79f39c3b62f61caa6c5d6ec", "filename": "src/test/run-pass/task-killjoin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -24,7 +24,7 @@ fn supervisor() {\n }\n \n fn main() {\n-    let builder = task::mk_task_builder();\n+    let builder = task::task_builder();\n     task::unsupervise(builder);\n     task::run(builder) {|| supervisor(); }\n }"}, {"sha": "0f005658d71ff6f0968616e32c8dc41b8f9d6754", "filename": "src/test/run-pass/too-much-recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Ftoo-much-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Ftoo-much-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftoo-much-recursion.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -5,7 +5,7 @@\n // that it doesn't bring down the whole proc\n \n fn main() {\n-    let builder = task::mk_task_builder();\n+    let builder = task::task_builder();\n     task::unsupervise(builder);\n     task::run(builder) {||\n         fn f() { f() };"}, {"sha": "f32d269925b090c8d3dce68a76c0e2d259ce3b9e", "filename": "src/test/run-pass/unwind-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Funwind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Funwind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-box.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -8,7 +8,7 @@ fn f() {\n }\n \n fn main() {\n-    let builder = task::mk_task_builder();\n+    let builder = task::task_builder();\n     task::unsupervise(builder);\n     task::run(builder) {|| f(); }\n }\n\\ No newline at end of file"}, {"sha": "63250d8f7c0b1c9edfc86eb03df674a08ea6d72b", "filename": "src/test/run-pass/unwind-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -15,7 +15,7 @@ fn f(c: comm::chan<bool>) {\n fn main() {\n     let p = comm::port();\n     let c = comm::chan(p);\n-    let builder = task::mk_task_builder();\n+    let builder = task::task_builder();\n     task::unsupervise(builder);\n     task::run(builder) {|| f(c); }\n     assert comm::recv(p);"}, {"sha": "4dd7313c7f3d7ab3a8de46187a95fb9fadd8978a", "filename": "src/test/run-pass/unwind-resource2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource2.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -12,7 +12,7 @@ fn f() {\n }\n \n fn main() {\n-    let builder = task::mk_task_builder();\n+    let builder = task::task_builder();\n     task::unsupervise(builder);\n     task::run(builder) {|| f(); }\n }\n\\ No newline at end of file"}, {"sha": "df26dfb688d2cea2169a6f105409e0cfc84a9f53", "filename": "src/test/run-pass/unwind-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-unique.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -8,7 +8,7 @@ fn f() {\n }\n \n fn main() {\n-    let builder = task::mk_task_builder();\n+    let builder = task::task_builder();\n     task::unsupervise(builder);\n     task::run(builder) {|| f(); }\n }\n\\ No newline at end of file"}, {"sha": "953f453bdc21c6a3ba4203c45433cde803ee18e2", "filename": "src/test/run-pass/yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Fyield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Fyield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -4,7 +4,7 @@ import task;\n import task::*;\n \n fn main() {\n-    let builder = task::mk_task_builder();\n+    let builder = task::task_builder();\n     let result = task::future_result(builder);\n     task::run(builder) {|| child(); }\n     #error(\"1\");"}, {"sha": "3133aceb8058172eb0cd5856d756c4ac3149c6b6", "filename": "src/test/run-pass/yield1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Fyield1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd72b1f8481552effb639024494ae4aa4a521fb8/src%2Ftest%2Frun-pass%2Fyield1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield1.rs?ref=cd72b1f8481552effb639024494ae4aa4a521fb8", "patch": "@@ -4,7 +4,7 @@ import task;\n import task::*;\n \n fn main() {\n-    let builder = task::mk_task_builder();\n+    let builder = task::task_builder();\n     let result = task::future_result(builder);\n     task::run(builder) {|| child(); }\n     #error(\"1\");"}]}