{"sha": "1a381fa2d257908d0a4c984b1c0e26bdede620d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMzgxZmEyZDI1NzkwOGQwYTRjOTg0YjFjMGUyNmJkZWRlNjIwZDg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-06-10T03:39:20Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-06-10T03:55:38Z"}, "message": "librustc: Use *signed* extension when converting enums to floats.\n\nPreviously, constants used unsigned extension, while non-constants used\nsigned extension. This unifies both paths to use signed extension.\n\nIf this breaks your code, take a deep breath, go for a walk, and\nconsider why you're relying on the sign extension semantics of\nenum-to-float casts.\n\nCloses #8230.\n\n[breaking-change]", "tree": {"sha": "e991c7dd544fd6f4d016c7febc265a36ee426074", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e991c7dd544fd6f4d016c7febc265a36ee426074"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a381fa2d257908d0a4c984b1c0e26bdede620d8", "comment_count": 16, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a381fa2d257908d0a4c984b1c0e26bdede620d8", "html_url": "https://github.com/rust-lang/rust/commit/1a381fa2d257908d0a4c984b1c0e26bdede620d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a381fa2d257908d0a4c984b1c0e26bdede620d8/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "907d96187641d8a018af2b73239723c66b011f71", "url": "https://api.github.com/repos/rust-lang/rust/commits/907d96187641d8a018af2b73239723c66b011f71", "html_url": "https://github.com/rust-lang/rust/commit/907d96187641d8a018af2b73239723c66b011f71"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "eb198511eafaf774e1462eae8e48db6fb83f4a51", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a381fa2d257908d0a4c984b1c0e26bdede620d8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a381fa2d257908d0a4c984b1c0e26bdede620d8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=1a381fa2d257908d0a4c984b1c0e26bdede620d8", "patch": "@@ -503,7 +503,7 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,\n                         let s = ty::type_is_signed(ety) as Bool;\n                         llvm::LLVMConstIntCast(iv, llty.to_ref(), s)\n                     }\n-                    expr::cast_float => llvm::LLVMConstUIToFP(iv, llty.to_ref()),\n+                    expr::cast_float => llvm::LLVMConstSIToFP(iv, llty.to_ref()),\n                     _ => cx.sess().bug(\"enum cast destination is not \\\n                                         integral or float\")\n                 }"}, {"sha": "eb6c078efcdacc0546fe69d979697cab3eea5202", "filename": "src/test/run-pass/enum-to-float-cast.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1a381fa2d257908d0a4c984b1c0e26bdede620d8/src%2Ftest%2Frun-pass%2Fenum-to-float-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a381fa2d257908d0a4c984b1c0e26bdede620d8/src%2Ftest%2Frun-pass%2Fenum-to-float-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-to-float-cast.rs?ref=1a381fa2d257908d0a4c984b1c0e26bdede620d8", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that enum-to-float-casts do *signed* integer-to-float conversion.\n+\n+enum E {\n+    L0 = -1,\n+    H0 = 1\n+}\n+\n+enum F {\n+    L1 = 1,\n+    H1 = 0xFFFFFFFFFFFFFFFF\n+}\n+\n+static C0: f32 = L0 as f32;\n+static C1: f32 = H1 as f32;\n+\n+pub fn main() {\n+    let a = L0 as f32;\n+    let b = C0;\n+    let c = H1 as f32;\n+    let d = C1;\n+    assert_eq!(a, -1.0f32);\n+    assert_eq!(b, -1.0f32);\n+    assert_eq!(c, -1.0f32);\n+    assert_eq!(d, -1.0f32);\n+}"}]}