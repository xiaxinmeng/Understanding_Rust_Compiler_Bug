{"sha": "7bf39fa9d965535f815326e3f1c48799b8077ea6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZjM5ZmE5ZDk2NTUzNWY4MTUzMjZlM2YxYzQ4Nzk5YjgwNzdlYTY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-29T18:14:42Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-22T19:25:54Z"}, "message": "Further tweak wording of E0759 and introduce E0767", "tree": {"sha": "bf62c5f11658dbc1103062ba5743befbea524a27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf62c5f11658dbc1103062ba5743befbea524a27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bf39fa9d965535f815326e3f1c48799b8077ea6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bf39fa9d965535f815326e3f1c48799b8077ea6", "html_url": "https://github.com/rust-lang/rust/commit/7bf39fa9d965535f815326e3f1c48799b8077ea6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bf39fa9d965535f815326e3f1c48799b8077ea6/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bac3dbfc2c34ce1337bc6cdde36aaeb3b6deba5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bac3dbfc2c34ce1337bc6cdde36aaeb3b6deba5", "html_url": "https://github.com/rust-lang/rust/commit/6bac3dbfc2c34ce1337bc6cdde36aaeb3b6deba5"}], "stats": {"total": 447, "additions": 280, "deletions": 167}, "files": [{"sha": "7c762a3415e13d3f0aa677c6ee22d11f1d253fb1", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -633,4 +633,5 @@ E0771: include_str!(\"./error_codes/E0771.md\"),\n     E0755, // `#[ffi_pure]` is only allowed on foreign functions\n     E0756, // `#[ffi_const]` is only allowed on foreign functions\n     E0757, // `#[ffi_const]` functions cannot be `#[ffi_pure]`\n+    E0767, // `'static' obligation coming from `impl dyn Trait {}` or `impl Foo for dyn Bar {}`.\n }"}, {"sha": "9fa905cb5abe98764dadd43f9bd33282139ec496", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 78, "deletions": 29, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -45,13 +45,31 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                     let mut err = struct_span_err!(\n                         tcx.sess,\n                         cause.span,\n-                        E0759,\n-                        \"cannot infer an appropriate lifetime\"\n+                        E0767,\n+                        \"{} has {} but calling `{}` introduces an implicit `'static` lifetime \\\n+                         requirement\",\n+                        param\n+                            .param\n+                            .pat\n+                            .simple_ident()\n+                            .map(|s| format!(\"`{}`\", s))\n+                            .unwrap_or_else(|| \"`fn` parameter\".to_string()),\n+                        lifetime,\n+                        assoc.ident,\n                     );\n                     err.span_label(param.param_ty_span, &format!(\"this data with {}...\", lifetime));\n                     err.span_label(\n                         cause.span,\n-                        \"...is captured and required to live as long as `'static` here\",\n+                        &format!(\n+                            \"...is captured and required to live as long as `'static` here \\\n+                             because of an implicit lifetime bound on the {}\",\n+                            match assoc.container {\n+                                AssocItemContainer::TraitContainer(id) =>\n+                                    format!(\"`impl` of `{}`\", tcx.def_path_str(id)),\n+                                AssocItemContainer::ImplContainer(_) =>\n+                                    \"inherent `impl`\".to_string(),\n+                            },\n+                        ),\n                     );\n                     if self.find_impl_on_dyn_trait(&mut err, param.param_ty, assoc) {\n                         err.emit();\n@@ -78,10 +96,49 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         } else {\n             (\"'_\".to_owned(), \"an anonymous lifetime `'_`\".to_string())\n         };\n-        let mut err = struct_span_err!(tcx.sess, sp, E0759, \"cannot infer an appropriate lifetime\");\n+        let param_name = param\n+            .param\n+            .pat\n+            .simple_ident()\n+            .map(|s| format!(\"`{}`\", s))\n+            .unwrap_or_else(|| \"`fn` parameter\".to_string());\n+        let mut err = struct_span_err!(\n+            tcx.sess,\n+            sp,\n+            E0759,\n+            \"{} has {} but it needs to satisfy a `'static` lifetime requirement\",\n+            param_name,\n+            lifetime,\n+        );\n         err.span_label(param.param_ty_span, &format!(\"this data with {}...\", lifetime));\n         debug!(\"try_report_static_impl_trait: param_info={:?}\", param);\n \n+        let fn_returns = tcx.return_type_impl_or_dyn_traits(anon_reg_sup.def_id);\n+\n+        let mut postfix = String::new();\n+        if let SubregionOrigin::Subtype(box TypeTrace { cause, .. }) = &sup_origin {\n+            if let ObligationCauseCode::UnifyReceiver(assoc) = &cause.code {\n+                if self.find_impl_on_dyn_trait(&mut err, param.param_ty, assoc)\n+                    && fn_returns.is_empty()\n+                {\n+                    err.code(rustc_errors::error_code!(E0767));\n+                    err.set_primary_message(&format!(\n+                        \"{} has {} but calling `{}` introduces an implicit `'static` lifetime \\\n+                         requirement\",\n+                        param_name, lifetime, assoc.ident,\n+                    ));\n+                    postfix = format!(\n+                        \" because of an implicit lifetime on the {}\",\n+                        match assoc.container {\n+                            AssocItemContainer::TraitContainer(id) =>\n+                                format!(\"`impl` of `{}`\", tcx.def_path_str(id)),\n+                            AssocItemContainer::ImplContainer(_) => \"inherent `impl`\".to_string(),\n+                        },\n+                    );\n+                }\n+            }\n+        }\n+\n         // We try to make the output have fewer overlapping spans if possible.\n         if (sp == sup_origin.span() || !return_sp.overlaps(sup_origin.span()))\n             && sup_origin.span() != return_sp\n@@ -108,36 +165,35 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 //    |           ----                               ^\n                 err.span_label(\n                     sup_origin.span(),\n-                    \"...is captured here, requiring it to live as long as `'static`\",\n+                    &format!(\n+                        \"...is captured here, requiring it to live as long as `'static`{}\",\n+                        postfix\n+                    ),\n                 );\n             } else {\n                 err.span_label(sup_origin.span(), \"...is captured here...\");\n                 if return_sp < sup_origin.span() {\n                     err.span_note(\n                         return_sp,\n-                        \"...and is required to live as long as `'static` here\",\n+                        &format!(\"...and is required to live as long as `'static` here{}\", postfix),\n                     );\n                 } else {\n                     err.span_label(\n                         return_sp,\n-                        \"...and is required to live as long as `'static` here\",\n+                        &format!(\"...and is required to live as long as `'static` here{}\", postfix),\n                     );\n                 }\n             }\n         } else {\n             err.span_label(\n                 return_sp,\n-                \"...is captured and required to live as long as `'static` here\",\n+                &format!(\n+                    \"...is captured and required to live as long as `'static` here{}\",\n+                    postfix\n+                ),\n             );\n         }\n \n-        if let SubregionOrigin::Subtype(box TypeTrace { cause, .. }) = &sup_origin {\n-            if let ObligationCauseCode::UnifyReceiver(assoc) = &cause.code {\n-                self.find_impl_on_dyn_trait(&mut err, param.param_ty, assoc);\n-            }\n-        }\n-\n-        let fn_returns = tcx.return_type_impl_or_dyn_traits(anon_reg_sup.def_id);\n         debug!(\"try_report_static_impl_trait: fn_return={:?}\", fn_returns);\n         // FIXME: account for the need of parens in `&(dyn Trait + '_)`\n         let consider = \"consider changing the\";\n@@ -295,20 +351,17 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                             let mut multi_span: MultiSpan = vec![*span].into();\n                             multi_span.push_span_label(\n                                 *span,\n-                                \"this trait object has an implicit `'static` lifetime requirement\"\n-                                    .to_string(),\n+                                \"this has an implicit `'static` lifetime requirement\".to_string(),\n                             );\n                             multi_span.push_span_label(\n                                 assoc.ident.span,\n-                                \"the `'static` requirement is introduced when calling this method\"\n+                                \"`'static` requirement is introduced when calling this method\"\n                                     .to_string(),\n                             );\n                             err.span_note(\n                                 multi_span,\n                                 &format!(\n-                                    \"when using method `{}` on `{}`, an implicit `'static` \\\n-                                     requirement is introduced\",\n-                                    assoc.ident,\n+                                    \"`{}`'s inherent `impl` has a `'static` requirement\",\n                                     tcx.def_path_str(*found_did),\n                                 ),\n                             );\n@@ -363,22 +416,18 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                     let mut multi_span: MultiSpan = vec![*span].into();\n                     multi_span.push_span_label(\n                         *span,\n-                        \"this trait object has an implicit `'static` lifetime requirement\"\n-                            .to_string(),\n+                        \"this has an implicit `'static` lifetime requirement\".to_string(),\n                     );\n                     multi_span.push_span_label(\n                         method.span,\n-                        \"the `'static` requirement is introduced when calling this method\"\n-                            .to_string(),\n+                        \"`'static` requirement is introduced when calling this method\".to_string(),\n                     );\n                     err.span_note(\n                         multi_span,\n                         &format!(\n-                            \"when using method `{}` of trait `{}` on `{}`, an implicit `'static` \\\n-                             requirement is introduced\",\n-                            method,\n-                            tcx.def_path_str(container_id),\n+                            \"`{}`'s `impl` of `{}` has an implicit `'static` requirement\",\n                             tcx.def_path_str(*found_did),\n+                            tcx.def_path_str(container_id),\n                         ),\n                     );\n                     err.span_suggestion_verbose("}, {"sha": "0be9b37263a48bbea3847ef93b55c4fa4b636950", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.transmute.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -1,4 +1,4 @@\n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/project-fn-ret-contravariant.rs:38:8\n    |\n LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {"}, {"sha": "0a44864b249551b3a03d6f5f792e7f49c00c13ab", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -1,4 +1,4 @@\n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/project-fn-ret-invariant.rs:49:9\n    |\n LL | fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {"}, {"sha": "66ebbd83ffa9e4546a0fcfd06b437a658b245dc1", "filename": "src/test/ui/async-await/issues/issue-62097.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.rs?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -9,7 +9,7 @@ where\n struct Struct;\n \n impl Struct {\n-    pub async fn run_dummy_fn(&self) { //~ ERROR cannot infer\n+    pub async fn run_dummy_fn(&self) { //~ ERROR E0759\n         foo(|| self.bar()).await;\n     }\n "}, {"sha": "56a28d904b91d57f29f79c8f6dba321a250422a5", "filename": "src/test/ui/async-await/issues/issue-62097.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -1,4 +1,4 @@\n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/issue-62097.rs:12:31\n    |\n LL |     pub async fn run_dummy_fn(&self) {"}, {"sha": "89210fdf137e0d169203d61f79f1b6ff982686e0", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.rs?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -17,7 +17,7 @@ fn static_val<T: StaticTrait>(_: T) {\n }\n \n fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n-    static_val(x); //~ ERROR cannot infer\n+    static_val(x); //~ ERROR E0759\n }\n \n fn not_static_val<T: NotStaticTrait>(_: T) {"}, {"sha": "b3bef677d19c1c84999b011663277607a8f44ec4", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -1,4 +1,4 @@\n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/dyn-trait.rs:20:16\n    |\n LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {"}, {"sha": "4372de245078fc930be3cb4a27dd1f30e337be7d", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -12,7 +12,7 @@ LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                       ^^^^^^^^^^^^^^\n \n error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:6:32\n+  --> $DIR/must_outlive_least_region_or_bound.rs:5:32\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |             --                 ^^^^^^^^^ opaque type requires that `'a` must outlive `'static`\n@@ -26,7 +26,7 @@ LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                ^^^^^^^^^^^^^^\n \n error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:9:46\n+  --> $DIR/must_outlive_least_region_or_bound.rs:7:46\n    |\n LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n    |               -                              ^ returning this value requires that `'1` must outlive `'static`\n@@ -36,7 +36,7 @@ LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n    = help: consider replacing `'1` with `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:12:55\n+  --> $DIR/must_outlive_least_region_or_bound.rs:9:55\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n    |              -- lifetime `'a` defined here            ^ returning this value requires that `'a` must outlive `'static`\n@@ -45,23 +45,23 @@ LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n    = help: consider replacing `'a` with `'static`\n \n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/must_outlive_least_region_or_bound.rs:15:41\n+  --> $DIR/must_outlive_least_region_or_bound.rs:11:41\n    |\n LL | fn foo<'a>(x: &i32) -> impl Copy + 'a { x }\n    |               ----                      ^ lifetime `'a` required\n    |               |\n    |               help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n \n error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:30:24\n+  --> $DIR/must_outlive_least_region_or_bound.rs:22:24\n    |\n LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n    |               -        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ opaque type requires that `'1` must outlive `'static`\n    |               |\n    |               let's call the lifetime of this reference `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:37:69\n+  --> $DIR/must_outlive_least_region_or_bound.rs:28:69\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |               -- lifetime `'a` defined here                         ^ returning this value requires that `'a` must outlive `'static`\n@@ -70,7 +70,7 @@ LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:42:61\n+  --> $DIR/must_outlive_least_region_or_bound.rs:32:61\n    |\n LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n    |                          --  -- lifetime `'b` defined here  ^^^^^^^^^^^^^^^^ opaque type requires that `'b` must outlive `'a`\n@@ -80,7 +80,7 @@ LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32\n    = help: consider adding the following bound: `'b: 'a`\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:47:51\n+  --> $DIR/must_outlive_least_region_or_bound.rs:37:51\n    |\n LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n    |                                                   ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "51f488e45a6f3d14ce6cea95d318c3f06e126ef0", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -1,41 +1,31 @@\n use std::fmt::Debug;\n \n-fn elided(x: &i32) -> impl Copy { x }\n-//~^ ERROR cannot infer an appropriate lifetime\n+fn elided(x: &i32) -> impl Copy { x } //~ ERROR E0759\n \n-fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n-//~^ ERROR cannot infer an appropriate lifetime\n+fn explicit<'a>(x: &'a i32) -> impl Copy { x } //~ ERROR E0759\n \n-fn elided2(x: &i32) -> impl Copy + 'static { x }\n-//~^ ERROR cannot infer an appropriate lifetime\n+fn elided2(x: &i32) -> impl Copy + 'static { x } //~ ERROR E0759\n \n-fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n-//~^ ERROR cannot infer an appropriate lifetime\n+fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x } //~ ERROR E0759\n \n fn foo<'a>(x: &i32) -> impl Copy + 'a { x }\n //~^ ERROR explicit lifetime required in the type of `x`\n \n-fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n-//~^ ERROR cannot infer an appropriate lifetime\n+fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) } //~ ERROR E0759\n \n-fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n-//~^ ERROR cannot infer an appropriate lifetime\n+fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) } //~ ERROR E0759\n \n-fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-//~^ ERROR cannot infer an appropriate lifetime\n+fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) } //~ ERROR E0759\n \n-fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-//~^ ERROR cannot infer an appropriate lifetime\n+fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) } //~ ERROR E0759\n \n-fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n-//~^ ERROR cannot infer an appropriate lifetime\n-//~| ERROR cannot infer an appropriate lifetime\n+fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) } //~ ERROR E0759\n+//~^ ERROR E0759\n \n trait LifetimeTrait<'a> {}\n impl<'a> LifetimeTrait<'a> for &'a i32 {}\n \n-fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n-//~^ ERROR cannot infer an appropriate lifetime\n+fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x } //~ ERROR E0759\n \n // Tests that a closure type containing 'b cannot be returned from a type where\n // only 'a was expected."}, {"sha": "b040889217e47032e23cfcffbd0b301ce63f31fa", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -1,4 +1,4 @@\n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/must_outlive_least_region_or_bound.rs:3:35\n    |\n LL | fn elided(x: &i32) -> impl Copy { x }\n@@ -16,16 +16,16 @@ help: to declare that the `impl Trait` captures data from argument `x`, you can\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                                 ^^^^\n \n-error[E0759]: cannot infer an appropriate lifetime\n-  --> $DIR/must_outlive_least_region_or_bound.rs:6:44\n+error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/must_outlive_least_region_or_bound.rs:5:44\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |                    -------                 ^ ...is captured here...\n    |                    |\n    |                    this data with lifetime `'a`...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/must_outlive_least_region_or_bound.rs:6:32\n+  --> $DIR/must_outlive_least_region_or_bound.rs:5:32\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |                                ^^^^^^^^^\n@@ -34,16 +34,16 @@ help: to declare that the `impl Trait` captures data from argument `x`, you can\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                          ^^^^\n \n-error[E0759]: cannot infer an appropriate lifetime\n-  --> $DIR/must_outlive_least_region_or_bound.rs:9:46\n+error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/must_outlive_least_region_or_bound.rs:7:46\n    |\n LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n    |               ----                           ^ ...is captured here...\n    |               |\n    |               this data with an anonymous lifetime `'_`...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/must_outlive_least_region_or_bound.rs:9:24\n+  --> $DIR/must_outlive_least_region_or_bound.rs:7:24\n    |\n LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n    |                        ^^^^^^^^^^^^^^^^^^^\n@@ -56,16 +56,16 @@ help: alternatively, add an explicit `'static` bound to this reference\n LL | fn elided2(x: &'static i32) -> impl Copy + 'static { x }\n    |               ^^^^^^^^^^^^\n \n-error[E0759]: cannot infer an appropriate lifetime\n-  --> $DIR/must_outlive_least_region_or_bound.rs:12:55\n+error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/must_outlive_least_region_or_bound.rs:9:55\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n    |                     -------                           ^ ...is captured here...\n    |                     |\n    |                     this data with lifetime `'a`...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/must_outlive_least_region_or_bound.rs:12:33\n+  --> $DIR/must_outlive_least_region_or_bound.rs:9:33\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n    |                                 ^^^^^^^^^^^^^^^^^^^\n@@ -79,15 +79,15 @@ LL | fn explicit2<'a>(x: &'static i32) -> impl Copy + 'static { x }\n    |                     ^^^^^^^^^^^^\n \n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/must_outlive_least_region_or_bound.rs:15:24\n+  --> $DIR/must_outlive_least_region_or_bound.rs:11:24\n    |\n LL | fn foo<'a>(x: &i32) -> impl Copy + 'a { x }\n    |               ----     ^^^^^^^^^^^^^^ lifetime `'a` required\n    |               |\n    |               help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n \n-error[E0759]: cannot infer an appropriate lifetime\n-  --> $DIR/must_outlive_least_region_or_bound.rs:30:65\n+error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/must_outlive_least_region_or_bound.rs:22:65\n    |\n LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n    |               ---- this data with an anonymous lifetime `'_`... ^ ...is captured here, requiring it to live as long as `'static`\n@@ -101,14 +101,14 @@ help: to declare that the `impl Trait` captures data from argument `x`, you can\n LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug + '_) { (Box::new(x), x) }\n    |                                                    ^^^^\n \n-error[E0759]: cannot infer an appropriate lifetime\n-  --> $DIR/must_outlive_least_region_or_bound.rs:30:69\n+error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/must_outlive_least_region_or_bound.rs:22:69\n    |\n LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n    |               ---- this data with an anonymous lifetime `'_`...     ^ ...is captured here...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/must_outlive_least_region_or_bound.rs:30:41\n+  --> $DIR/must_outlive_least_region_or_bound.rs:22:41\n    |\n LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n    |                                         ^^^^^^^^^^\n@@ -121,14 +121,14 @@ help: to declare that the `impl Trait` captures data from argument `x`, you can\n LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug + '_) { (Box::new(x), x) }\n    |                                                    ^^^^\n \n-error[E0759]: cannot infer an appropriate lifetime\n-  --> $DIR/must_outlive_least_region_or_bound.rs:37:69\n+error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/must_outlive_least_region_or_bound.rs:28:69\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |                      ------- this data with lifetime `'a`...        ^ ...is captured here...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/must_outlive_least_region_or_bound.rs:37:34\n+  --> $DIR/must_outlive_least_region_or_bound.rs:28:34\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -142,7 +142,7 @@ LL | fn with_bound<'a>(x: &'static i32) -> impl LifetimeTrait<'a> + 'static { x\n    |                      ^^^^^^^^^^^^\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/must_outlive_least_region_or_bound.rs:42:61\n+  --> $DIR/must_outlive_least_region_or_bound.rs:32:61\n    |\n LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n    |                                                 -------     ^^^^^^^^^^^^^^^^\n@@ -151,15 +151,15 @@ LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32\n    |                                                 this parameter and the return type are declared with different lifetimes...\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:47:51\n+  --> $DIR/must_outlive_least_region_or_bound.rs:37:51\n    |\n LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n    |                                 --                ^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n    |                                 |\n    |                                 help: consider adding an explicit lifetime bound...: `T: 'static +`\n \n-error[E0759]: cannot infer an appropriate lifetime\n-  --> $DIR/must_outlive_least_region_or_bound.rs:18:50\n+error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/must_outlive_least_region_or_bound.rs:14:50\n    |\n LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n    |               ----                               ^ ...is captured here, requiring it to live as long as `'static`\n@@ -171,8 +171,8 @@ help: to declare that the trait object captures data from argument `x`, you can\n LL | fn elided3(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n    |                                      ^^^^\n \n-error[E0759]: cannot infer an appropriate lifetime\n-  --> $DIR/must_outlive_least_region_or_bound.rs:21:59\n+error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/must_outlive_least_region_or_bound.rs:16:59\n    |\n LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n    |                     -------                               ^ ...is captured here, requiring it to live as long as `'static`\n@@ -184,8 +184,8 @@ help: to declare that the trait object captures data from argument `x`, you can\n LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }\n    |                                               ^^^^\n \n-error[E0759]: cannot infer an appropriate lifetime\n-  --> $DIR/must_outlive_least_region_or_bound.rs:24:60\n+error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/must_outlive_least_region_or_bound.rs:18:60\n    |\n LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |               ----                                         ^ ...is captured here, requiring it to live as long as `'static`\n@@ -201,8 +201,8 @@ help: alternatively, add an explicit `'static` bound to this reference\n LL | fn elided4(x: &'static i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |               ^^^^^^^^^^^^\n \n-error[E0759]: cannot infer an appropriate lifetime\n-  --> $DIR/must_outlive_least_region_or_bound.rs:27:69\n+error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/must_outlive_least_region_or_bound.rs:20:69\n    |\n LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |                     ------- this data with lifetime `'a`...         ^ ...is captured here, requiring it to live as long as `'static`"}, {"sha": "65178cc9d24c262f3b186f99310df4a36a8c5330", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -12,7 +12,7 @@ LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: lifetime may not live long enough\n-  --> $DIR/static-return-lifetime-infered.rs:10:37\n+  --> $DIR/static-return-lifetime-infered.rs:9:37\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |                    --               ^^^^^^^^^^^^^^^^^^^^^^^ opaque type requires that `'a` must outlive `'static`"}, {"sha": "518c52f5de4d7bfb3b26ce59a59d6668a7259ced", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.rs?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -4,13 +4,11 @@ struct A {\n \n impl A {\n     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-        self.x.iter().map(|a| a.0)\n+        self.x.iter().map(|a| a.0) //~ ERROR E0759\n     }\n-    //~^^ ERROR cannot infer an appropriate lifetime\n     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-        self.x.iter().map(|a| a.0)\n+        self.x.iter().map(|a| a.0) //~ ERROR E0759\n     }\n-    //~^^ ERROR cannot infer an appropriate lifetime\n }\n \n fn main() {}"}, {"sha": "7c289b388223a4b6ebff083f9f32210745ee7d6c", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -1,4 +1,4 @@\n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/static-return-lifetime-infered.rs:7:16\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n@@ -18,8 +18,8 @@ help: to declare that the `impl Trait` captures data from argument `self`, you c\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n    |                                                           ^^^^\n \n-error[E0759]: cannot infer an appropriate lifetime\n-  --> $DIR/static-return-lifetime-infered.rs:11:16\n+error[E0759]: `self` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/static-return-lifetime-infered.rs:10:16\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |                        -------- this data with lifetime `'a`...\n@@ -29,7 +29,7 @@ LL |         self.x.iter().map(|a| a.0)\n    |         ...is captured here...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/static-return-lifetime-infered.rs:10:37\n+  --> $DIR/static-return-lifetime-infered.rs:9:37\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "f048ccd2427cb052cc465de1b9a3302236334e6e", "filename": "src/test/ui/issues/issue-16922.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fissues%2Fissue-16922.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fissues%2Fissue-16922.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16922.rs?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -1,8 +1,7 @@\n use std::any::Any;\n \n fn foo<T: Any>(value: &T) -> Box<dyn Any> {\n-    Box::new(value) as Box<dyn Any>\n-    //~^ ERROR cannot infer an appropriate lifetime\n+    Box::new(value) as Box<dyn Any> //~ ERROR E0759\n }\n \n fn main() {"}, {"sha": "6decc751321f9abfd3a434d39873dd34af7b6b87", "filename": "src/test/ui/issues/issue-16922.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -1,4 +1,4 @@\n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0759]: `value` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/issue-16922.rs:4:14\n    |\n LL | fn foo<T: Any>(value: &T) -> Box<dyn Any> {"}, {"sha": "1931934a2112a7ded99b5e6ff3dfc08a4f15732d", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -1,4 +1,4 @@\n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0759]: `fn` parameter has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/constant-in-expr-inherent-1.rs:8:5\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {"}, {"sha": "4a2665d8e1694f2d68d04396c83127fe58b875b9", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-box-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.rs?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -15,7 +15,7 @@ fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait> {\n     // `Box<SomeTrait>` defaults to a `'static` bound, so this return\n     // is illegal.\n \n-    ss.r //~ ERROR cannot infer an appropriate lifetime\n+    ss.r //~ ERROR E0759\n }\n \n fn store(ss: &mut SomeStruct, b: Box<dyn SomeTrait>) {"}, {"sha": "70b99ef7869ca8cfab83e016c7463e4eb2ef17d9", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-box-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -1,4 +1,4 @@\n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0759]: `ss` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/object-lifetime-default-from-box-error.rs:18:5\n    |\n LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait> {"}, {"sha": "9d3f485e314385148fd081174954b3faaf1cedb7", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.rs?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -5,18 +5,18 @@ trait Foo {}\n impl<'a> Foo for &'a [u8] {}\n \n fn a(v: &[u8]) -> Box<dyn Foo + 'static> {\n-    let x: Box<dyn Foo + 'static> = Box::new(v); //~ ERROR cannot infer an appropriate lifetime\n+    let x: Box<dyn Foo + 'static> = Box::new(v); //~ ERROR E0759\n     x\n }\n \n fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n-    Box::new(v) //~ ERROR cannot infer an appropriate lifetime\n+    Box::new(v) //~ ERROR E0759\n }\n \n fn c(v: &[u8]) -> Box<dyn Foo> {\n     // same as previous case due to RFC 599\n \n-    Box::new(v) //~ ERROR cannot infer an appropriate lifetime\n+    Box::new(v) //~ ERROR E0759\n }\n \n fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {"}, {"sha": "63fea1f41626d10e22dda55f34b9a949d772d92d", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -1,4 +1,4 @@\n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0759]: `v` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/region-object-lifetime-in-coercion.rs:8:46\n    |\n LL | fn a(v: &[u8]) -> Box<dyn Foo + 'static> {\n@@ -15,7 +15,7 @@ help: alternatively, add an explicit `'static` bound to this reference\n LL | fn a(v: &'static [u8]) -> Box<dyn Foo + 'static> {\n    |         ^^^^^^^^^^^^^\n \n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0759]: `v` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/region-object-lifetime-in-coercion.rs:13:14\n    |\n LL | fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n@@ -32,7 +32,7 @@ help: alternatively, add an explicit `'static` bound to this reference\n LL | fn b(v: &'static [u8]) -> Box<dyn Foo + 'static> {\n    |         ^^^^^^^^^^^^^\n \n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0759]: `v` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/region-object-lifetime-in-coercion.rs:19:14\n    |\n LL | fn c(v: &[u8]) -> Box<dyn Foo> {"}, {"sha": "4eb1b275f163ec77af5f50bb86c28b486e72644f", "filename": "src/test/ui/regions/regions-addr-of-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.rs?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -4,7 +4,7 @@ struct Dog {\n \n impl Dog {\n     pub fn chase_cat(&mut self) {\n-        let p: &'static mut usize = &mut self.cats_chased; //~ ERROR cannot infer\n+        let p: &'static mut usize = &mut self.cats_chased; //~ ERROR E0759\n         *p += 1;\n     }\n "}, {"sha": "738691fd695eb4fe2aa8e05f40fbbe675e108a1b", "filename": "src/test/ui/regions/regions-addr-of-self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.stderr?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -1,4 +1,4 @@\n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/regions-addr-of-self.rs:7:37\n    |\n LL |     pub fn chase_cat(&mut self) {"}, {"sha": "7144ab5a24c51443ec36b8dffda63669e12317a0", "filename": "src/test/ui/regions/regions-close-object-into-object-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.rs?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -7,7 +7,7 @@ trait X { }\n impl<'a, T> X for B<'a, T> {}\n \n fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n-    box B(&*v) as Box<dyn X> //~ ERROR cannot infer\n+    box B(&*v) as Box<dyn X> //~ ERROR E0759\n }\n \n fn main() { }"}, {"sha": "aab7ce993aa3c3861a55018bbfb1b46912c75056", "filename": "src/test/ui/regions/regions-close-object-into-object-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -1,4 +1,4 @@\n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0759]: `v` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/regions-close-object-into-object-2.rs:10:11\n    |\n LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {"}, {"sha": "4c087f264f92b964010c16521d98fd6a97f92889", "filename": "src/test/ui/regions/regions-close-object-into-object-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.rs?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -7,7 +7,7 @@ trait X { }\n impl<'a, T> X for B<'a, T> {}\n \n fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n-    box B(&*v) as Box<dyn X> //~ ERROR cannot infer\n+    box B(&*v) as Box<dyn X> //~ ERROR E0759\n }\n \n fn main() {}"}, {"sha": "90f807a41c5629f07d04aeb0d00a47b1491fa879", "filename": "src/test/ui/regions/regions-close-object-into-object-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -1,4 +1,4 @@\n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0759]: `v` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/regions-close-object-into-object-4.rs:10:11\n    |\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {"}, {"sha": "55d964ac5340569b287a993d650fe88ba70b2f94", "filename": "src/test/ui/regions/regions-proc-bound-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.rs?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -6,7 +6,7 @@ fn borrowed_proc<'a>(x: &'a isize) -> Box<dyn FnMut()->(isize) + 'a> {\n \n fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + 'static> {\n     // This is illegal, because the region bound on `proc` is 'static.\n-    Box::new(move || { *x }) //~ ERROR cannot infer an appropriate lifetime\n+    Box::new(move || { *x }) //~ ERROR E0759\n }\n \n fn main() { }"}, {"sha": "e76073f4f6b13f5b6be54d1179799ef19cd2c63c", "filename": "src/test/ui/regions/regions-proc-bound-capture.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -1,4 +1,4 @@\n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/regions-proc-bound-capture.rs:9:14\n    |\n LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + 'static> {"}, {"sha": "43998ca8c5784478dfca0e18aea561c2aab3ef40", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.rs?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -6,7 +6,7 @@ struct Foo;\n \n impl Foo {\n     async fn f(self: Pin<&Self>) -> impl Clone { self }\n-    //~^ ERROR cannot infer an appropriate lifetime\n+    //~^ ERROR E0759\n }\n \n fn main() {"}, {"sha": "9cd0fd328ffa007a37fda588dbed69e79ce2aca9", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -1,4 +1,4 @@\n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:16\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }"}, {"sha": "04935fc52ab9e31253bb8dce181cacfafdd589ac", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.rs?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -3,7 +3,7 @@ use std::pin::Pin;\n struct Foo;\n \n impl Foo {\n-    fn f(self: Pin<&Self>) -> impl Clone { self } //~ ERROR cannot infer an appropriate lifetime\n+    fn f(self: Pin<&Self>) -> impl Clone { self } //~ ERROR E0759\n }\n \n fn main() {"}, {"sha": "cb9d5b56dbc5cbd585691e8647bf4a224f660776", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -1,4 +1,4 @@\n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:44\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone { self }"}, {"sha": "832b185e619fa412c8df24d45bdc7df0f15f9232", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound.fixed", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.fixed?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -17,7 +17,7 @@ mod foo {\n     impl Irrelevant for dyn ObjectTrait {}\n \n     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n-        val.use_self() //~ ERROR cannot infer an appropriate lifetime\n+        val.use_self() //~ ERROR E0759\n     }\n }\n \n@@ -34,7 +34,7 @@ mod bar {\n     impl Irrelevant for dyn ObjectTrait {}\n \n     fn use_it<'a>(val: &'a dyn ObjectTrait) -> &'a () {\n-        val.use_self() //~ ERROR cannot infer an appropriate lifetime\n+        val.use_self() //~ ERROR E0767\n     }\n }\n \n@@ -51,7 +51,7 @@ mod baz {\n     impl Irrelevant for Box<dyn ObjectTrait> {}\n \n     fn use_it<'a>(val: &'a Box<dyn ObjectTrait + 'a>) -> &'a () {\n-        val.use_self() //~ ERROR cannot infer an appropriate lifetime\n+        val.use_self() //~ ERROR E0767\n     }\n }\n \n@@ -66,8 +66,29 @@ mod bat {\n     }\n \n     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n-        val.use_self() //~ ERROR cannot infer an appropriate lifetime\n+        val.use_self() //~ ERROR E0767\n     }\n }\n \n+mod ban {\n+    trait OtherTrait<'a> {}\n+    impl<'a> OtherTrait<'a> for &'a () {}\n+\n+    trait ObjectTrait {}\n+    trait MyTrait {\n+        fn use_self(&self) -> &();\n+    }\n+    trait Irrelevant {}\n+\n+    impl MyTrait for dyn ObjectTrait + '_ {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+    impl Irrelevant for dyn ObjectTrait {}\n+\n+    fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n+        val.use_self() //~ ERROR E0759\n+    }\n+}\n+\n+\n fn main() {}"}, {"sha": "8765591c4a11476f88f5751ef8f4b76b3b599c6b", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound.nll.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.nll.stderr?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -18,5 +18,15 @@ LL |         val.use_self()\n    |\n    = help: consider replacing `'a` with `'static`\n \n-error: aborting due to 2 previous errors\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:89:9\n+   |\n+LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> {\n+   |                   --- `val` is a reference that is only valid in the function body\n+LL |         val.use_self()\n+   |         ^^^^^^^^^^^^^^ `val` escapes the function body here\n+   |\n+   = help: consider replacing `'a` with `'static`\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "ba26c2d67dfa85f1445f15af0c3d3856bd04039d", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.rs?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -17,7 +17,7 @@ mod foo {\n     impl Irrelevant for dyn ObjectTrait {}\n \n     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n-        val.use_self() //~ ERROR cannot infer an appropriate lifetime\n+        val.use_self() //~ ERROR E0759\n     }\n }\n \n@@ -34,7 +34,7 @@ mod bar {\n     impl Irrelevant for dyn ObjectTrait {}\n \n     fn use_it<'a>(val: &'a dyn ObjectTrait) -> &'a () {\n-        val.use_self() //~ ERROR cannot infer an appropriate lifetime\n+        val.use_self() //~ ERROR E0767\n     }\n }\n \n@@ -51,7 +51,7 @@ mod baz {\n     impl Irrelevant for Box<dyn ObjectTrait> {}\n \n     fn use_it<'a>(val: &'a Box<dyn ObjectTrait + 'a>) -> &'a () {\n-        val.use_self() //~ ERROR cannot infer an appropriate lifetime\n+        val.use_self() //~ ERROR E0767\n     }\n }\n \n@@ -66,8 +66,29 @@ mod bat {\n     }\n \n     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n-        val.use_self() //~ ERROR cannot infer an appropriate lifetime\n+        val.use_self() //~ ERROR E0767\n     }\n }\n \n+mod ban {\n+    trait OtherTrait<'a> {}\n+    impl<'a> OtherTrait<'a> for &'a () {}\n+\n+    trait ObjectTrait {}\n+    trait MyTrait {\n+        fn use_self(&self) -> &();\n+    }\n+    trait Irrelevant {}\n+\n+    impl MyTrait for dyn ObjectTrait {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+    impl Irrelevant for dyn ObjectTrait {}\n+\n+    fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> {\n+        val.use_self() //~ ERROR E0759\n+    }\n+}\n+\n+\n fn main() {}"}, {"sha": "425159edbcd4a02e408b0015cd8c1dcf1054f525", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound.stderr", "status": "modified", "additions": 44, "deletions": 20, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -1,83 +1,107 @@\n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0759]: `val` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:20:13\n    |\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n    |                        ------------------- this data with lifetime `'a`...\n LL |         val.use_self()\n    |             ^^^^^^^^ ...is captured and required to live as long as `'static` here\n    |\n-note: when using method `use_self` of trait `foo::MyTrait` on `foo::ObjectTrait`, an implicit `'static` requirement is introduced\n+note: `foo::ObjectTrait`'s `impl` of `foo::MyTrait` has an implicit `'static` requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:14:26\n    |\n LL |     impl MyTrait for dyn ObjectTrait {\n-   |                          ^^^^^^^^^^^ this trait object has an implicit `'static` lifetime requirement\n+   |                          ^^^^^^^^^^^ this has an implicit `'static` lifetime requirement\n LL |         fn use_self(&self) -> &() { panic!() }\n-   |            -------- the `'static` requirement is introduced when calling this method\n+   |            -------- `'static` requirement is introduced when calling this method\n help: consider relaxing the implicit `'static` requirement\n    |\n LL |     impl MyTrait for dyn ObjectTrait + '_ {\n    |                                      ^^^^\n \n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0767]: `val` has lifetime `'a` but calling `use_self` introduces an implicit `'static` lifetime requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:69:13\n    |\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n    |                        ------------------- this data with lifetime `'a`...\n LL |         val.use_self()\n-   |             ^^^^^^^^ ...is captured and required to live as long as `'static` here\n+   |             ^^^^^^^^ ...is captured and required to live as long as `'static` here because of an implicit lifetime bound on the inherent `impl`\n    |\n-note: when using method `use_self` on `bat::ObjectTrait`, an implicit `'static` requirement is introduced\n+note: `bat::ObjectTrait`'s inherent `impl` has a `'static` requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:64:14\n    |\n LL |     impl dyn ObjectTrait {\n-   |              ^^^^^^^^^^^ this trait object has an implicit `'static` lifetime requirement\n+   |              ^^^^^^^^^^^ this has an implicit `'static` lifetime requirement\n LL |         fn use_self(&self) -> &() { panic!() }\n-   |            -------- the `'static` requirement is introduced when calling this method\n+   |            -------- `'static` requirement is introduced when calling this method\n help: consider relaxing the implicit `'static` requirement\n    |\n LL |     impl dyn ObjectTrait + '_ {\n    |                          ^^^^\n \n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0759]: `val` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:89:13\n+   |\n+LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> {\n+   |                        ------------------- this data with lifetime `'a`...\n+LL |         val.use_self()\n+   |             ^^^^^^^^ ...is captured and required to live as long as `'static` here\n+   |\n+note: `ban::ObjectTrait`'s `impl` of `ban::MyTrait` has an implicit `'static` requirement\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:83:26\n+   |\n+LL |     impl MyTrait for dyn ObjectTrait {\n+   |                          ^^^^^^^^^^^ this has an implicit `'static` lifetime requirement\n+LL |         fn use_self(&self) -> &() { panic!() }\n+   |            -------- `'static` requirement is introduced when calling this method\n+help: consider relaxing the implicit `'static` requirement\n+   |\n+LL |     impl MyTrait for dyn ObjectTrait + '_ {\n+   |                                      ^^^^\n+help: to declare that the `impl Trait` captures data from argument `val`, you can add an explicit `'a` lifetime bound\n+   |\n+LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n+   |                                                                    ^^^^\n+\n+error[E0767]: `val` has lifetime `'a` but calling `use_self` introduces an implicit `'static` lifetime requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:37:13\n    |\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> &'a () {\n    |                        ------------------- this data with lifetime `'a`...\n LL |         val.use_self()\n-   |             ^^^^^^^^ ...is captured and required to live as long as `'static` here\n+   |             ^^^^^^^^ ...is captured and required to live as long as `'static` here because of an implicit lifetime on the `impl` of `bar::MyTrait`\n    |\n-note: when using method `use_self` of trait `bar::MyTrait` on `bar::ObjectTrait`, an implicit `'static` requirement is introduced\n+note: `bar::ObjectTrait`'s `impl` of `bar::MyTrait` has an implicit `'static` requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:31:26\n    |\n LL |     impl MyTrait for dyn ObjectTrait {\n-   |                          ^^^^^^^^^^^ this trait object has an implicit `'static` lifetime requirement\n+   |                          ^^^^^^^^^^^ this has an implicit `'static` lifetime requirement\n LL |         fn use_self(&self) -> &() { panic!() }\n-   |            -------- the `'static` requirement is introduced when calling this method\n+   |            -------- `'static` requirement is introduced when calling this method\n help: consider relaxing the implicit `'static` requirement\n    |\n LL |     impl MyTrait for dyn ObjectTrait + '_ {\n    |                                      ^^^^\n \n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0767]: `val` has lifetime `'a` but calling `use_self` introduces an implicit `'static` lifetime requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:54:13\n    |\n LL |     fn use_it<'a>(val: &'a Box<dyn ObjectTrait + 'a>) -> &'a () {\n    |                        ----------------------------- this data with lifetime `'a`...\n LL |         val.use_self()\n-   |             ^^^^^^^^ ...is captured and required to live as long as `'static` here\n+   |             ^^^^^^^^ ...is captured and required to live as long as `'static` here because of an implicit lifetime on the `impl` of `baz::MyTrait`\n    |\n-note: when using method `use_self` of trait `baz::MyTrait` on `baz::ObjectTrait`, an implicit `'static` requirement is introduced\n+note: `baz::ObjectTrait`'s `impl` of `baz::MyTrait` has an implicit `'static` requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:48:30\n    |\n LL |     impl MyTrait for Box<dyn ObjectTrait> {\n-   |                              ^^^^^^^^^^^ this trait object has an implicit `'static` lifetime requirement\n+   |                              ^^^^^^^^^^^ this has an implicit `'static` lifetime requirement\n LL |         fn use_self(&self) -> &() { panic!() }\n-   |            -------- the `'static` requirement is introduced when calling this method\n+   |            -------- `'static` requirement is introduced when calling this method\n help: consider relaxing the implicit `'static` requirement\n    |\n LL |     impl MyTrait for Box<dyn ObjectTrait + '_> {\n    |                                          ^^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0759`."}, {"sha": "94dd826a15cae71be3d0881f4bbeba350e2c2c38", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.rs?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -16,7 +16,7 @@ fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce()\n where\n     G: Get<T>\n {\n-    move || { //~ ERROR cannot infer an appropriate lifetime\n+    move || { //~ ERROR `dest`\n         *dest = g.get();\n     }\n }"}, {"sha": "d7051515f11029c04401888c11f9407e529b5a60", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -6,7 +6,7 @@ LL | fn baz<G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |        |\n    |        help: consider introducing lifetime `'a` here: `'a,`\n \n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0759]: `dest` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/missing-lifetimes-in-signature.rs:19:5\n    |\n LL |   fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce()"}, {"sha": "d8446e58dbb63eb9e7b593d69e6ae660492a232e", "filename": "src/test/ui/suggestions/lifetimes/trait-object-nested-in-impl-trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.rs?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -27,7 +27,7 @@ impl Bar {\n     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> {\n         Iter {\n             current: None,\n-            remaining: self.0.iter(), //~ ERROR cannot infer an appropriate lifetime\n+            remaining: self.0.iter(), //~ ERROR E0759\n         }\n     }\n }\n@@ -38,7 +38,7 @@ impl Baz {\n     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> + '_ {\n         Iter {\n             current: None,\n-            remaining: self.0.iter(), //~ ERROR cannot infer an appropriate lifetime\n+            remaining: self.0.iter(), //~ ERROR E0759\n         }\n     }\n }\n@@ -49,7 +49,7 @@ impl Bat {\n     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> + 'a {\n         Iter {\n             current: None,\n-            remaining: self.0.iter(), //~ ERROR cannot infer an appropriate lifetime\n+            remaining: self.0.iter(), //~ ERROR E0759\n         }\n     }\n }\n@@ -60,7 +60,7 @@ impl Ban {\n     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> {\n         Iter {\n             current: None,\n-            remaining: self.0.iter(), //~ ERROR cannot infer an appropriate lifetime\n+            remaining: self.0.iter(), //~ ERROR E0759\n         }\n     }\n }"}, {"sha": "9f30787f07cc6d9d9114805811f52a0b0323191a", "filename": "src/test/ui/suggestions/lifetimes/trait-object-nested-in-impl-trait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.stderr?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -1,4 +1,4 @@\n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/trait-object-nested-in-impl-trait.rs:30:31\n    |\n LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> {\n@@ -23,7 +23,7 @@ help: to declare that the trait object captures data from argument `self`, you c\n LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo + '_>> {\n    |                                                        ^^^^\n \n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/trait-object-nested-in-impl-trait.rs:41:31\n    |\n LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> + '_ {\n@@ -44,7 +44,7 @@ help: to declare that the trait object captures data from argument `self`, you c\n LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo + '_>> + '_ {\n    |                                                        ^^^^\n \n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0759]: `self` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/trait-object-nested-in-impl-trait.rs:52:31\n    |\n LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> + 'a {\n@@ -65,7 +65,7 @@ help: to declare that the trait object captures data from argument `self`, you c\n LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo + 'a>> + 'a {\n    |                                                               ^^^^\n \n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0759]: `self` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/trait-object-nested-in-impl-trait.rs:63:31\n    |\n LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> {"}, {"sha": "e951adf030f5c2e9e958b2b45b31839832ec43e1", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.rs?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -5,7 +5,7 @@\n \n fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n-    Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n+    Box::new(items.iter()) //~ ERROR E0759\n }\n \n fn b<T>(items: &[T]) -> Box<dyn Iterator<Item=&T> + '_> {"}, {"sha": "dd804864dab4f59e0eb96f063b2223e50aa21978", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bf39fa9d965535f815326e3f1c48799b8077ea6/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr?ref=7bf39fa9d965535f815326e3f1c48799b8077ea6", "patch": "@@ -1,4 +1,4 @@\n-error[E0759]: cannot infer an appropriate lifetime\n+error[E0759]: `items` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/dyn-trait-underscore.rs:8:20\n    |\n LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {"}]}