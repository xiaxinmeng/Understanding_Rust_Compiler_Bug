{"sha": "657f246812ab2684e3c3954b1c77f98fd59e0b21", "node_id": "C_kwDOAAsO6NoAKDY1N2YyNDY4MTJhYjI2ODRlM2MzOTU0YjFjNzdmOThmZDU5ZTBiMjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-21T12:41:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-21T12:41:09Z"}, "message": "Auto merge of #103344 - Dylan-DPC:rollup-d1rpfvx, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #102287 (Elaborate supertrait bounds when triggering `unused_must_use` on `impl Trait`)\n - #102922 (Filtering spans when emitting json)\n - #103051 (translation: doc comments with derives, subdiagnostic-less enum variants, more derive use)\n - #103111 (Account for hygiene in typo suggestions, and use them to point to shadowed names)\n - #103260 (Fixup a few tests needing asm support)\n - #103321 (rustdoc: improve appearance of source page navigation bar)\n\nFailed merges:\n\n - #103209 (Diagnostic derives: allow specifying multiple alternative suggestions)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "bf288dbe3743087f7cb404d24881103cb137619c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf288dbe3743087f7cb404d24881103cb137619c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/657f246812ab2684e3c3954b1c77f98fd59e0b21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/657f246812ab2684e3c3954b1c77f98fd59e0b21", "html_url": "https://github.com/rust-lang/rust/commit/657f246812ab2684e3c3954b1c77f98fd59e0b21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/657f246812ab2684e3c3954b1c77f98fd59e0b21/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0940040c0486a536be4f8685c7dd9a078f9e87c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0940040c0486a536be4f8685c7dd9a078f9e87c2", "html_url": "https://github.com/rust-lang/rust/commit/0940040c0486a536be4f8685c7dd9a078f9e87c2"}, {"sha": "325e9203bae254ae881d8fb391f0f41e8ab5fd1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/325e9203bae254ae881d8fb391f0f41e8ab5fd1c", "html_url": "https://github.com/rust-lang/rust/commit/325e9203bae254ae881d8fb391f0f41e8ab5fd1c"}], "stats": {"total": 1107, "additions": 617, "deletions": 490}, "files": [{"sha": "17ca1aa7fe1702dc108d993b873353f59fc23d5c", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 18, "deletions": 41, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -1,7 +1,4 @@\n-use rustc_errors::{\n-    fluent, AddToDiagnostic, Applicability, Diagnostic, DiagnosticArgFromDisplay,\n-    SubdiagnosticMessage,\n-};\n+use rustc_errors::DiagnosticArgFromDisplay;\n use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_span::{symbol::Ident, Span, Symbol};\n \n@@ -15,25 +12,15 @@ pub struct GenericTypeWithParentheses {\n     pub sub: Option<UseAngleBrackets>,\n }\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, Subdiagnostic)]\n+#[multipart_suggestion(ast_lowering::use_angle_brackets, applicability = \"maybe-incorrect\")]\n pub struct UseAngleBrackets {\n+    #[suggestion_part(code = \"<\")]\n     pub open_param: Span,\n+    #[suggestion_part(code = \">\")]\n     pub close_param: Span,\n }\n \n-impl AddToDiagnostic for UseAngleBrackets {\n-    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n-    where\n-        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n-    {\n-        diag.multipart_suggestion(\n-            fluent::ast_lowering::use_angle_brackets,\n-            vec![(self.open_param, String::from(\"<\")), (self.close_param, String::from(\">\"))],\n-            Applicability::MaybeIncorrect,\n-        );\n-    }\n-}\n-\n #[derive(Diagnostic)]\n #[diag(ast_lowering::invalid_abi, code = \"E0703\")]\n #[note]\n@@ -68,30 +55,20 @@ pub struct AssocTyParentheses {\n     pub sub: AssocTyParenthesesSub,\n }\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, Subdiagnostic)]\n pub enum AssocTyParenthesesSub {\n-    Empty { parentheses_span: Span },\n-    NotEmpty { open_param: Span, close_param: Span },\n-}\n-\n-impl AddToDiagnostic for AssocTyParenthesesSub {\n-    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n-    where\n-        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n-    {\n-        match self {\n-            Self::Empty { parentheses_span } => diag.multipart_suggestion(\n-                fluent::ast_lowering::remove_parentheses,\n-                vec![(parentheses_span, String::new())],\n-                Applicability::MaybeIncorrect,\n-            ),\n-            Self::NotEmpty { open_param, close_param } => diag.multipart_suggestion(\n-                fluent::ast_lowering::use_angle_brackets,\n-                vec![(open_param, String::from(\"<\")), (close_param, String::from(\">\"))],\n-                Applicability::MaybeIncorrect,\n-            ),\n-        };\n-    }\n+    #[multipart_suggestion(ast_lowering::remove_parentheses)]\n+    Empty {\n+        #[suggestion_part(code = \"\")]\n+        parentheses_span: Span,\n+    },\n+    #[multipart_suggestion(ast_lowering::use_angle_brackets)]\n+    NotEmpty {\n+        #[suggestion_part(code = \"<\")]\n+        open_param: Span,\n+        #[suggestion_part(code = \">\")]\n+        close_param: Span,\n+    },\n }\n \n #[derive(Diagnostic)]"}, {"sha": "7865c523f758c63cd2ec695b6ba5472d5e0c96a4", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -14,6 +14,7 @@ use rustc_ast::*;\n use rustc_ast_pretty::pprust::{self, State};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{error_code, fluent, pluralize, struct_span_err, Applicability};\n+use rustc_macros::Subdiagnostic;\n use rustc_parse::validate_attr;\n use rustc_session::lint::builtin::{\n     DEPRECATED_WHERE_CLAUSE_LOCATION, MISSING_ABI, PATTERNS_IN_FNS_WITHOUT_BODY,\n@@ -1805,15 +1806,17 @@ pub fn check_crate(session: &Session, krate: &Crate, lints: &mut LintBuffer) ->\n }\n \n /// Used to forbid `let` expressions in certain syntactic locations.\n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, Subdiagnostic)]\n pub(crate) enum ForbiddenLetReason {\n     /// `let` is not valid and the source environment is not important\n     GenericForbidden,\n     /// A let chain with the `||` operator\n-    NotSupportedOr(Span),\n+    #[note(ast_passes::not_supported_or)]\n+    NotSupportedOr(#[primary_span] Span),\n     /// A let chain with invalid parentheses\n     ///\n     /// For example, `let 1 = 1 && (expr && expr)` is allowed\n     /// but `(let 1 = 1 && (let 1 = 1 && (let 1 = 1))) && let a = 1` is not\n-    NotSupportedParentheses(Span),\n+    #[note(ast_passes::not_supported_parentheses)]\n+    NotSupportedParentheses(#[primary_span] Span),\n }"}, {"sha": "8319352bd24bdd1491653a4e51d5dfa475ca412e", "filename": "compiler/rustc_ast_passes/src/errors.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -16,23 +16,6 @@ pub struct ForbiddenLet {\n     pub(crate) reason: ForbiddenLetReason,\n }\n \n-impl AddToDiagnostic for ForbiddenLetReason {\n-    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n-    where\n-        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n-    {\n-        match self {\n-            Self::GenericForbidden => {}\n-            Self::NotSupportedOr(span) => {\n-                diag.span_note(span, fluent::ast_passes::not_supported_or);\n-            }\n-            Self::NotSupportedParentheses(span) => {\n-                diag.span_note(span, fluent::ast_passes::not_supported_parentheses);\n-            }\n-        }\n-    }\n-}\n-\n #[derive(Diagnostic)]\n #[diag(ast_passes::forbidden_let_stable)]\n #[note]"}, {"sha": "18b3408b06ab435a75ccead96437e58f08c62378", "filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -164,7 +164,9 @@ infer_region_explanation = {$pref_kind ->\n }\n \n infer_mismatched_static_lifetime = incompatible lifetime on type\n-infer_msl_impl_note = ...does not necessarily outlive the static lifetime introduced by the compatible `impl`\n+infer_does_not_outlive_static_from_impl = ...does not necessarily outlive the static lifetime introduced by the compatible `impl`\n+infer_implicit_static_lifetime_note = this has an implicit `'static` lifetime requirement\n+infer_implicit_static_lifetime_suggestion = consider relaxing the implicit `'static` requirement\n infer_msl_introduces_static = introduces a `'static` lifetime requirement\n infer_msl_unmet_req = because this has an unmet lifetime requirement\n infer_msl_trait_note = this has an implicit `'static` lifetime requirement"}, {"sha": "e2277923072f9b3eca8c5e1dc6c0a94a0fb5ac23", "filename": "compiler/rustc_error_messages/locales/en-US/session.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -54,3 +54,7 @@ session_crate_name_empty = crate name must not be empty\n session_invalid_character_in_create_name = invalid character `{$character}` in crate name: `{$crate_name}`\n \n session_expr_parentheses_needed = parentheses are required to parse this as an expression\n+\n+session_skipping_const_checks = skipping const checks\n+session_unleashed_feature_help_named = skipping check for `{$gate}` feature\n+session_unleashed_feature_help_unnamed = skipping check that does not even have a feature gate"}, {"sha": "a63fc0ca285da41c3a4bcd20cac3e8ae514936d7", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -567,6 +567,11 @@ impl Diagnostic {\n         style: SuggestionStyle,\n     ) -> &mut Self {\n         assert!(!suggestion.is_empty());\n+        debug_assert!(\n+            !(suggestion.iter().any(|(sp, text)| sp.is_empty() && text.is_empty())),\n+            \"Span must not be empty and have no suggestion\"\n+        );\n+\n         self.push_suggestion(CodeSuggestion {\n             substitutions: vec![Substitution {\n                 parts: suggestion\n@@ -644,6 +649,10 @@ impl Diagnostic {\n         applicability: Applicability,\n         style: SuggestionStyle,\n     ) -> &mut Self {\n+        debug_assert!(\n+            !(sp.is_empty() && suggestion.to_string().is_empty()),\n+            \"Span must not be empty and have no suggestion\"\n+        );\n         self.push_suggestion(CodeSuggestion {\n             substitutions: vec![Substitution {\n                 parts: vec![SubstitutionPart { snippet: suggestion.to_string(), span: sp }],\n@@ -684,6 +693,12 @@ impl Diagnostic {\n     ) -> &mut Self {\n         let mut suggestions: Vec<_> = suggestions.collect();\n         suggestions.sort();\n+\n+        debug_assert!(\n+            !(sp.is_empty() && suggestions.iter().any(|suggestion| suggestion.is_empty())),\n+            \"Span must not be empty and have no suggestion\"\n+        );\n+\n         let substitutions = suggestions\n             .into_iter()\n             .map(|snippet| Substitution { parts: vec![SubstitutionPart { snippet, span: sp }] })\n@@ -705,8 +720,18 @@ impl Diagnostic {\n         suggestions: impl Iterator<Item = Vec<(Span, String)>>,\n         applicability: Applicability,\n     ) -> &mut Self {\n+        let suggestions: Vec<_> = suggestions.collect();\n+        debug_assert!(\n+            !(suggestions\n+                .iter()\n+                .flat_map(|suggs| suggs)\n+                .any(|(sp, suggestion)| sp.is_empty() && suggestion.is_empty())),\n+            \"Span must not be empty and have no suggestion\"\n+        );\n+\n         self.push_suggestion(CodeSuggestion {\n             substitutions: suggestions\n+                .into_iter()\n                 .map(|sugg| Substitution {\n                     parts: sugg\n                         .into_iter()"}, {"sha": "571b7dbfd1b04632b0a07cd75dbdb70f2828620e", "filename": "compiler/rustc_errors/src/diagnostic_impls.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -1,14 +1,14 @@\n use crate::{\n     fluent, DiagnosticArgValue, DiagnosticBuilder, Handler, IntoDiagnostic, IntoDiagnosticArg,\n };\n-use rustc_target::abi::TargetDataLayoutErrors;\n-use rustc_target::spec::{PanicStrategy, SplitDebuginfo, StackProtector, TargetTriple};\n-\n use rustc_ast as ast;\n use rustc_ast_pretty::pprust;\n use rustc_hir as hir;\n+use rustc_lint_defs::Level;\n use rustc_span::edition::Edition;\n use rustc_span::symbol::{Ident, MacroRulesNormalizedIdent, Symbol};\n+use rustc_target::abi::TargetDataLayoutErrors;\n+use rustc_target::spec::{PanicStrategy, SplitDebuginfo, StackProtector, TargetTriple};\n use std::borrow::Cow;\n use std::fmt;\n use std::num::ParseIntError;\n@@ -155,6 +155,21 @@ impl IntoDiagnosticArg for ast::token::TokenKind {\n     }\n }\n \n+impl IntoDiagnosticArg for Level {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Borrowed(match self {\n+            Level::Allow => \"-A\",\n+            Level::Warn => \"-W\",\n+            Level::ForceWarn(_) => \"--force-warn\",\n+            Level::Deny => \"-D\",\n+            Level::Forbid => \"-F\",\n+            Level::Expect(_) => {\n+                unreachable!(\"lints with the level of `expect` should not run this code\");\n+            }\n+        }))\n+    }\n+}\n+\n impl IntoDiagnostic<'_, !> for TargetDataLayoutErrors<'_> {\n     fn into_diagnostic(self, handler: &Handler) -> DiagnosticBuilder<'_, !> {\n         let mut diag;"}, {"sha": "052ca229f0127571e9a324f30dcfcd414b25da7a", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -22,7 +22,7 @@ use rustc_span::edition::Edition;\n use rustc_span::hygiene::{AstPass, ExpnData, ExpnKind, LocalExpnId};\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{FileName, Span, DUMMY_SP};\n+use rustc_span::{BytePos, FileName, Span, DUMMY_SP};\n use smallvec::{smallvec, SmallVec};\n \n use std::default::Default;\n@@ -1228,8 +1228,9 @@ pub fn expr_to_spanned_string<'a>(\n             ast::LitKind::Str(s, style) => return Ok((s, style, expr.span)),\n             ast::LitKind::ByteStr(_) => {\n                 let mut err = cx.struct_span_err(l.span, err_msg);\n+                let span = expr.span.shrink_to_lo();\n                 err.span_suggestion(\n-                    expr.span.shrink_to_lo(),\n+                    span.with_hi(span.lo() + BytePos(1)),\n                     \"consider removing the leading `b`\",\n                     \"\",\n                     Applicability::MaybeIncorrect,"}, {"sha": "a0350c26d827cda840016a7f94c8e05f4bf8fb67", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -3051,24 +3051,27 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     .map_or(false, |s| s.trim_end().ends_with('<'));\n \n             let is_global = poly_trait_ref.trait_ref.path.is_global();\n-            let sugg = Vec::from_iter([\n-                (\n-                    self_ty.span.shrink_to_lo(),\n-                    format!(\n-                        \"{}dyn {}\",\n-                        if needs_bracket { \"<\" } else { \"\" },\n-                        if is_global { \"(\" } else { \"\" },\n-                    ),\n+\n+            let mut sugg = Vec::from_iter([(\n+                self_ty.span.shrink_to_lo(),\n+                format!(\n+                    \"{}dyn {}\",\n+                    if needs_bracket { \"<\" } else { \"\" },\n+                    if is_global { \"(\" } else { \"\" },\n                 ),\n-                (\n+            )]);\n+\n+            if is_global || needs_bracket {\n+                sugg.push((\n                     self_ty.span.shrink_to_hi(),\n                     format!(\n                         \"{}{}\",\n                         if is_global { \")\" } else { \"\" },\n                         if needs_bracket { \">\" } else { \"\" },\n                     ),\n-                ),\n-            ]);\n+                ));\n+            }\n+\n             if self_ty.span.edition() >= Edition::Edition2021 {\n                 let msg = \"trait objects must include the `dyn` keyword\";\n                 let label = \"add `dyn` keyword before this trait\";"}, {"sha": "25e8630bf6bd7f3562691915a327e8384e813c45", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 29, "deletions": 42, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -459,47 +459,34 @@ impl AddToDiagnostic for IntroducesStaticBecauseUnmetLifetimeReq {\n     }\n }\n \n-pub struct ImplNote {\n-    pub impl_span: Option<Span>,\n-}\n-\n-impl AddToDiagnostic for ImplNote {\n-    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n-    where\n-        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n-    {\n-        match self.impl_span {\n-            Some(span) => diag.span_note(span, fluent::infer::msl_impl_note),\n-            None => diag.note(fluent::infer::msl_impl_note),\n-        };\n-    }\n-}\n-\n-pub enum TraitSubdiag {\n-    Note { span: Span },\n-    Sugg { span: Span },\n+// FIXME(#100717): replace with a `Option<Span>` when subdiagnostic supports that\n+#[derive(Subdiagnostic)]\n+pub enum DoesNotOutliveStaticFromImpl {\n+    #[note(infer::does_not_outlive_static_from_impl)]\n+    Spanned {\n+        #[primary_span]\n+        span: Span,\n+    },\n+    #[note(infer::does_not_outlive_static_from_impl)]\n+    Unspanned,\n }\n \n-// FIXME(#100717) used in `Vec<TraitSubdiag>` so requires eager translation/list support\n-impl AddToDiagnostic for TraitSubdiag {\n-    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n-    where\n-        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n-    {\n-        match self {\n-            TraitSubdiag::Note { span } => {\n-                diag.span_note(span, \"this has an implicit `'static` lifetime requirement\");\n-            }\n-            TraitSubdiag::Sugg { span } => {\n-                diag.span_suggestion_verbose(\n-                    span,\n-                    \"consider relaxing the implicit `'static` requirement\",\n-                    \" + '_\".to_owned(),\n-                    rustc_errors::Applicability::MaybeIncorrect,\n-                );\n-            }\n-        }\n-    }\n+#[derive(Subdiagnostic)]\n+pub enum ImplicitStaticLifetimeSubdiag {\n+    #[note(infer::implicit_static_lifetime_note)]\n+    Note {\n+        #[primary_span]\n+        span: Span,\n+    },\n+    #[suggestion_verbose(\n+        infer::implicit_static_lifetime_suggestion,\n+        code = \" + '_\",\n+        applicability = \"maybe-incorrect\"\n+    )]\n+    Sugg {\n+        #[primary_span]\n+        span: Span,\n+    },\n }\n \n #[derive(Diagnostic)]\n@@ -512,7 +499,7 @@ pub struct MismatchedStaticLifetime<'a> {\n     #[subdiagnostic]\n     pub expl: Option<note_and_explain::RegionExplanation<'a>>,\n     #[subdiagnostic]\n-    pub impl_note: ImplNote,\n-    #[subdiagnostic]\n-    pub trait_subdiags: Vec<TraitSubdiag>,\n+    pub does_not_outlive_static_from_impl: DoesNotOutliveStaticFromImpl,\n+    #[subdiagnostic(eager)]\n+    pub implicit_static_lifetimes: Vec<ImplicitStaticLifetimeSubdiag>,\n }"}, {"sha": "c5f2a1a3f7dce687ef0f44c2bb334393edef90b9", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mismatched_static_lifetime.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -2,7 +2,9 @@\n //! to hold.\n \n use crate::errors::{note_and_explain, IntroducesStaticBecauseUnmetLifetimeReq};\n-use crate::errors::{ImplNote, MismatchedStaticLifetime, TraitSubdiag};\n+use crate::errors::{\n+    DoesNotOutliveStaticFromImpl, ImplicitStaticLifetimeSubdiag, MismatchedStaticLifetime,\n+};\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::{SubregionOrigin, TypeTrace};\n@@ -56,7 +58,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             note_and_explain::SuffixKind::Continues,\n         );\n         let mut impl_span = None;\n-        let mut trait_subdiags = Vec::new();\n+        let mut implicit_static_lifetimes = Vec::new();\n         if let Some(impl_node) = self.tcx().hir().get_if_local(*impl_def_id) {\n             // If an impl is local, then maybe this isn't what they want. Try to\n             // be as helpful as possible with implicit lifetimes.\n@@ -90,10 +92,12 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 // Otherwise, point at all implicit static lifetimes\n \n                 for span in &traits {\n-                    trait_subdiags.push(TraitSubdiag::Note { span: *span });\n+                    implicit_static_lifetimes\n+                        .push(ImplicitStaticLifetimeSubdiag::Note { span: *span });\n                     // It would be nice to put this immediately under the above note, but they get\n                     // pushed to the end.\n-                    trait_subdiags.push(TraitSubdiag::Sugg { span: span.shrink_to_hi() });\n+                    implicit_static_lifetimes\n+                        .push(ImplicitStaticLifetimeSubdiag::Sugg { span: span.shrink_to_hi() });\n                 }\n             }\n         } else {\n@@ -105,8 +109,10 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             cause_span: cause.span,\n             unmet_lifetime_reqs: multispan_subdiag,\n             expl,\n-            impl_note: ImplNote { impl_span },\n-            trait_subdiags,\n+            does_not_outlive_static_from_impl: impl_span\n+                .map(|span| DoesNotOutliveStaticFromImpl::Spanned { span })\n+                .unwrap_or(DoesNotOutliveStaticFromImpl::Unspanned),\n+            implicit_static_lifetimes,\n         };\n         let reported = self.tcx().sess.emit_err(err);\n         Some(reported)"}, {"sha": "715ba4ca156d441e9313f1f0a85254b8cc25e117", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -3176,6 +3176,7 @@ declare_lint! {\n     /// ### Example\n     ///\n     /// ```rust,compile_fail\n+    /// # #![feature(asm_experimental_arch)]\n     /// use std::arch::asm;\n     ///\n     /// fn main() {"}, {"sha": "34b70030a58286a6d27f54844831dceac5b32696", "filename": "compiler/rustc_lint/src/errors.rs", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -88,34 +88,13 @@ pub struct BuiltinEllpisisInclusiveRangePatterns {\n     pub replace: String,\n }\n \n+#[derive(Subdiagnostic)]\n+#[note(lint::requested_level)]\n pub struct RequestedLevel {\n     pub level: Level,\n     pub lint_name: String,\n }\n \n-impl AddToDiagnostic for RequestedLevel {\n-    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n-    where\n-        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n-    {\n-        diag.note(fluent::lint::requested_level);\n-        diag.set_arg(\n-            \"level\",\n-            match self.level {\n-                Level::Allow => \"-A\",\n-                Level::Warn => \"-W\",\n-                Level::ForceWarn(_) => \"--force-warn\",\n-                Level::Deny => \"-D\",\n-                Level::Forbid => \"-F\",\n-                Level::Expect(_) => {\n-                    unreachable!(\"lints with the level of `expect` should not run this code\");\n-                }\n-            },\n-        );\n-        diag.set_arg(\"lint_name\", self.lint_name);\n-    }\n-}\n-\n #[derive(Diagnostic)]\n #[diag(lint::unsupported_group, code = \"E0602\")]\n pub struct UnsupportedGroup {"}, {"sha": "36657909b19eeedc01ad294d567198108c290281", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -7,6 +7,7 @@ use rustc_errors::{fluent, pluralize, Applicability, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n+use rustc_infer::traits::util::elaborate_predicates_with_span;\n use rustc_middle::ty::adjustment;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::symbol::Symbol;\n@@ -204,10 +205,13 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                 ty::Adt(def, _) => check_must_use_def(cx, def.did(), span, descr_pre, descr_post),\n                 ty::Opaque(def, _) => {\n                     let mut has_emitted = false;\n-                    for &(predicate, _) in cx.tcx.explicit_item_bounds(def) {\n+                    for obligation in elaborate_predicates_with_span(\n+                        cx.tcx,\n+                        cx.tcx.explicit_item_bounds(def).iter().cloned(),\n+                    ) {\n                         // We only look at the `DefId`, so it is safe to skip the binder here.\n                         if let ty::PredicateKind::Trait(ref poly_trait_predicate) =\n-                            predicate.kind().skip_binder()\n+                            obligation.predicate.kind().skip_binder()\n                         {\n                             let def_id = poly_trait_predicate.trait_ref.def_id;\n                             let descr_pre ="}, {"sha": "d6cc31331a3bc3924fbc2ddb7986d9664d7c52ae", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -2878,7 +2878,7 @@ declare_lint! {\n     /// ### Example\n     ///\n     /// ```rust\n-    /// #![feature(naked_functions)]\n+    /// #![feature(asm_experimental_arch, naked_functions)]\n     ///\n     /// use std::arch::asm;\n     ///"}, {"sha": "9f7d2661a3e8b425a0ca0057f828961ab7b71ccd", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic_builder.rs", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -5,7 +5,7 @@ use crate::diagnostics::error::{\n     DiagnosticDeriveError,\n };\n use crate::diagnostics::utils::{\n-    build_field_mapping, report_error_if_not_applied_to_span, report_type_error,\n+    build_field_mapping, is_doc_comment, report_error_if_not_applied_to_span, report_type_error,\n     should_generate_set_arg, type_is_unit, type_matches_path, FieldInfo, FieldInnerTy, FieldMap,\n     HasFieldMap, SetOnce, SpannedOption, SubdiagnosticKind,\n };\n@@ -152,8 +152,12 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n     fn parse_subdiag_attribute(\n         &self,\n         attr: &Attribute,\n-    ) -> Result<(SubdiagnosticKind, Path), DiagnosticDeriveError> {\n-        let (subdiag, slug) = SubdiagnosticKind::from_attr(attr, self)?;\n+    ) -> Result<Option<(SubdiagnosticKind, Path)>, DiagnosticDeriveError> {\n+        let Some((subdiag, slug)) = SubdiagnosticKind::from_attr(attr, self)? else {\n+            // Some attributes aren't errors - like documentation comments - but also aren't\n+            // subdiagnostics.\n+            return Ok(None);\n+        };\n \n         if let SubdiagnosticKind::MultipartSuggestion { .. } = subdiag {\n             let meta = attr.parse_meta()?;\n@@ -170,7 +174,7 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n             SubdiagnosticKind::MultipartSuggestion { .. } => unreachable!(),\n         });\n \n-        Ok((subdiag, slug))\n+        Ok(Some((subdiag, slug)))\n     }\n \n     /// Establishes state in the `DiagnosticDeriveBuilder` resulting from the struct\n@@ -182,6 +186,11 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n     ) -> Result<TokenStream, DiagnosticDeriveError> {\n         let diag = &self.parent.diag;\n \n+        // Always allow documentation comments.\n+        if is_doc_comment(attr) {\n+            return Ok(quote! {});\n+        }\n+\n         let name = attr.path.segments.last().unwrap().ident.to_string();\n         let name = name.as_str();\n         let meta = attr.parse_meta()?;\n@@ -250,7 +259,11 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n             return Ok(tokens);\n         }\n \n-        let (subdiag, slug) = self.parse_subdiag_attribute(attr)?;\n+        let Some((subdiag, slug)) = self.parse_subdiag_attribute(attr)? else {\n+            // Some attributes aren't errors - like documentation comments - but also aren't\n+            // subdiagnostics.\n+            return Ok(quote! {});\n+        };\n         let fn_ident = format_ident!(\"{}\", subdiag);\n         match subdiag {\n             SubdiagnosticKind::Note | SubdiagnosticKind::Help | SubdiagnosticKind::Warn => {\n@@ -291,6 +304,11 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n             .attrs\n             .iter()\n             .map(move |attr| {\n+                // Always allow documentation comments.\n+                if is_doc_comment(attr) {\n+                    return quote! {};\n+                }\n+\n                 let name = attr.path.segments.last().unwrap().ident.to_string();\n                 let needs_clone =\n                     name == \"primary_span\" && matches!(inner_ty, FieldInnerTy::Vec(_));\n@@ -397,8 +415,11 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n             _ => (),\n         }\n \n-        let (subdiag, slug) = self.parse_subdiag_attribute(attr)?;\n-\n+        let Some((subdiag, slug)) = self.parse_subdiag_attribute(attr)? else {\n+            // Some attributes aren't errors - like documentation comments - but also aren't\n+            // subdiagnostics.\n+            return Ok(quote! {});\n+        };\n         let fn_ident = format_ident!(\"{}\", subdiag);\n         match subdiag {\n             SubdiagnosticKind::Label => {"}, {"sha": "d1acb71384220abd1c90a7cdb1885d9db5af3b62", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 37, "deletions": 10, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -5,9 +5,9 @@ use crate::diagnostics::error::{\n     DiagnosticDeriveError,\n };\n use crate::diagnostics::utils::{\n-    build_field_mapping, new_code_ident, report_error_if_not_applied_to_applicability,\n-    report_error_if_not_applied_to_span, FieldInfo, FieldInnerTy, FieldMap, HasFieldMap, SetOnce,\n-    SpannedOption, SubdiagnosticKind,\n+    build_field_mapping, is_doc_comment, new_code_ident,\n+    report_error_if_not_applied_to_applicability, report_error_if_not_applied_to_span, FieldInfo,\n+    FieldInnerTy, FieldMap, HasFieldMap, SetOnce, SpannedOption, SubdiagnosticKind,\n };\n use proc_macro2::TokenStream;\n use quote::{format_ident, quote};\n@@ -41,8 +41,14 @@ impl SubdiagnosticDeriveBuilder {\n                 }\n             }\n \n-            if matches!(ast.data, syn::Data::Enum(..)) {\n+            let is_enum = matches!(ast.data, syn::Data::Enum(..));\n+            if is_enum {\n                 for attr in &ast.attrs {\n+                    // Always allow documentation comments.\n+                    if is_doc_comment(attr) {\n+                        continue;\n+                    }\n+\n                     span_err(\n                         attr.span().unwrap(),\n                         \"unsupported type attribute for subdiagnostic enum\",\n@@ -62,6 +68,7 @@ impl SubdiagnosticDeriveBuilder {\n                     span_field: None,\n                     applicability: None,\n                     has_suggestion_parts: false,\n+                    is_enum,\n                 };\n                 builder.into_tokens().unwrap_or_else(|v| v.to_compile_error())\n             });\n@@ -79,7 +86,7 @@ impl SubdiagnosticDeriveBuilder {\n             gen impl rustc_errors::AddToDiagnostic for @Self {\n                 fn add_to_diagnostic_with<__F>(self, #diag: &mut rustc_errors::Diagnostic, #f: __F)\n                 where\n-                    __F: Fn(\n+                    __F: core::ops::Fn(\n                         &mut rustc_errors::Diagnostic,\n                         rustc_errors::SubdiagnosticMessage\n                     ) -> rustc_errors::SubdiagnosticMessage,\n@@ -122,6 +129,9 @@ struct SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n     /// Set to true when a `#[suggestion_part]` field is encountered, used to generate an error\n     /// during finalization if still `false`.\n     has_suggestion_parts: bool,\n+\n+    /// Set to true when this variant is an enum variant rather than just the body of a struct.\n+    is_enum: bool,\n }\n \n impl<'parent, 'a> HasFieldMap for SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n@@ -173,7 +183,11 @@ impl<'parent, 'a> SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n         let mut kind_slugs = vec![];\n \n         for attr in self.variant.ast().attrs {\n-            let (kind, slug) = SubdiagnosticKind::from_attr(attr, self)?;\n+            let Some((kind, slug)) = SubdiagnosticKind::from_attr(attr, self)? else {\n+                // Some attributes aren't errors - like documentation comments - but also aren't\n+                // subdiagnostics.\n+                continue;\n+            };\n \n             let Some(slug) = slug else {\n                 let name = attr.path.segments.last().unwrap().ident.to_string();\n@@ -227,6 +241,11 @@ impl<'parent, 'a> SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n         ast.attrs\n             .iter()\n             .map(|attr| {\n+                // Always allow documentation comments.\n+                if is_doc_comment(attr) {\n+                    return quote! {};\n+                }\n+\n                 let info = FieldInfo {\n                     binding,\n                     ty: inner_ty.inner_type().unwrap_or(&ast.ty),\n@@ -290,6 +309,8 @@ impl<'parent, 'a> SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n                     report_error_if_not_applied_to_span(attr, &info)?;\n \n                     let binding = info.binding.binding.clone();\n+                    // FIXME(#100717): support `Option<Span>` on `primary_span` like in the\n+                    // diagnostic derive\n                     self.span_field.set_once(binding, span);\n                 }\n \n@@ -443,10 +464,16 @@ impl<'parent, 'a> SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n     pub fn into_tokens(&mut self) -> Result<TokenStream, DiagnosticDeriveError> {\n         let kind_slugs = self.identify_kind()?;\n         if kind_slugs.is_empty() {\n-            throw_span_err!(\n-                self.variant.ast().ident.span().unwrap(),\n-                \"subdiagnostic kind not specified\"\n-            );\n+            if self.is_enum {\n+                // It's okay for a variant to not be a subdiagnostic at all..\n+                return Ok(quote! {});\n+            } else {\n+                // ..but structs should always be _something_.\n+                throw_span_err!(\n+                    self.variant.ast().ident.span().unwrap(),\n+                    \"subdiagnostic kind not specified\"\n+                );\n+            }\n         };\n \n         let kind_stats: KindsStatistics = kind_slugs.iter().map(|(kind, _slug)| kind).collect();"}, {"sha": "61d5007fc30f0a135c7176a56bb355f111c2ce0e", "filename": "compiler/rustc_macros/src/diagnostics/utils.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -477,7 +477,12 @@ impl SubdiagnosticKind {\n     pub(super) fn from_attr(\n         attr: &Attribute,\n         fields: &impl HasFieldMap,\n-    ) -> Result<(SubdiagnosticKind, Option<Path>), DiagnosticDeriveError> {\n+    ) -> Result<Option<(SubdiagnosticKind, Option<Path>)>, DiagnosticDeriveError> {\n+        // Always allow documentation comments.\n+        if is_doc_comment(attr) {\n+            return Ok(None);\n+        }\n+\n         let span = attr.span().unwrap();\n \n         let name = attr.path.segments.last().unwrap().ident.to_string();\n@@ -526,7 +531,9 @@ impl SubdiagnosticKind {\n                     | SubdiagnosticKind::Note\n                     | SubdiagnosticKind::Help\n                     | SubdiagnosticKind::Warn\n-                    | SubdiagnosticKind::MultipartSuggestion { .. } => return Ok((kind, None)),\n+                    | SubdiagnosticKind::MultipartSuggestion { .. } => {\n+                        return Ok(Some((kind, None)));\n+                    }\n                     SubdiagnosticKind::Suggestion { .. } => {\n                         throw_span_err!(span, \"suggestion without `code = \\\"...\\\"`\")\n                     }\n@@ -626,7 +633,7 @@ impl SubdiagnosticKind {\n             | SubdiagnosticKind::MultipartSuggestion { .. } => {}\n         }\n \n-        Ok((kind, slug))\n+        Ok(Some((kind, slug)))\n     }\n }\n \n@@ -654,3 +661,7 @@ impl quote::IdentFragment for SubdiagnosticKind {\n pub(super) fn should_generate_set_arg(field: &Field) -> bool {\n     field.attrs.is_empty()\n }\n+\n+pub(super) fn is_doc_comment(attr: &Attribute) -> bool {\n+    attr.path.segments.last().unwrap().ident.to_string() == \"doc\"\n+}"}, {"sha": "d654d84cdd594b3ba265b8e4dcc4ee7a146b15ac", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -1374,9 +1374,17 @@ impl<'a> Parser<'a> {\n         kind: IncDecRecovery,\n         (pre_span, post_span): (Span, Span),\n     ) -> MultiSugg {\n+        let mut patches = Vec::new();\n+\n+        if !pre_span.is_empty() {\n+            patches.push((pre_span, String::new()));\n+        }\n+\n+        patches.push((post_span, format!(\" {}= 1\", kind.op.chr())));\n+\n         MultiSugg {\n             msg: format!(\"use `{}= 1` instead\", kind.op.chr()),\n-            patches: vec![(pre_span, String::new()), (post_span, format!(\" {}= 1\", kind.op.chr()))],\n+            patches,\n             applicability: Applicability::MachineApplicable,\n         }\n     }"}, {"sha": "5d868ebec94482d0fdfef0d50dc700c41b56f2b4", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -24,7 +24,7 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{BytePos, Span};\n+use rustc_span::{BytePos, Span, SyntaxContext};\n \n use crate::imports::{Import, ImportKind, ImportResolver};\n use crate::late::{PatternSource, Rib};\n@@ -47,13 +47,15 @@ pub(crate) type Suggestion = (Vec<(Span, String)>, String, Applicability);\n /// similarly named label and whether or not it is reachable.\n pub(crate) type LabelSuggestion = (Ident, bool);\n \n+#[derive(Debug)]\n pub(crate) enum SuggestionTarget {\n     /// The target has a similar name as the name used by the programmer (probably a typo)\n     SimilarlyNamed,\n     /// The target is the only valid item that can be used in the corresponding context\n     SingleItem,\n }\n \n+#[derive(Debug)]\n pub(crate) struct TypoSuggestion {\n     pub candidate: Symbol,\n     pub res: Res,\n@@ -482,11 +484,12 @@ impl<'a> Resolver<'a> {\n         module: Module<'a>,\n         names: &mut Vec<TypoSuggestion>,\n         filter_fn: &impl Fn(Res) -> bool,\n+        ctxt: Option<SyntaxContext>,\n     ) {\n         for (key, resolution) in self.resolutions(module).borrow().iter() {\n             if let Some(binding) = resolution.borrow().binding {\n                 let res = binding.res();\n-                if filter_fn(res) {\n+                if filter_fn(res) && ctxt.map_or(true, |ctxt| ctxt == key.ident.span.ctxt()) {\n                     names.push(TypoSuggestion::typo_from_res(key.ident.name, res));\n                 }\n             }\n@@ -1181,10 +1184,10 @@ impl<'a> Resolver<'a> {\n                 Scope::CrateRoot => {\n                     let root_ident = Ident::new(kw::PathRoot, ident.span);\n                     let root_module = this.resolve_crate_root(root_ident);\n-                    this.add_module_candidates(root_module, &mut suggestions, filter_fn);\n+                    this.add_module_candidates(root_module, &mut suggestions, filter_fn, None);\n                 }\n                 Scope::Module(module, _) => {\n-                    this.add_module_candidates(module, &mut suggestions, filter_fn);\n+                    this.add_module_candidates(module, &mut suggestions, filter_fn, None);\n                 }\n                 Scope::MacroUsePrelude => {\n                     suggestions.extend(this.macro_use_prelude.iter().filter_map(\n@@ -1221,7 +1224,7 @@ impl<'a> Resolver<'a> {\n                 Scope::StdLibPrelude => {\n                     if let Some(prelude) = this.prelude {\n                         let mut tmp_suggestions = Vec::new();\n-                        this.add_module_candidates(prelude, &mut tmp_suggestions, filter_fn);\n+                        this.add_module_candidates(prelude, &mut tmp_suggestions, filter_fn, None);\n                         suggestions.extend(\n                             tmp_suggestions\n                                 .into_iter()"}, {"sha": "e3dba2366a40e78cbe00f7f4bd8454c80fbb4cd5", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 61, "deletions": 9, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -131,6 +131,7 @@ pub(super) enum LifetimeElisionCandidate {\n }\n \n /// Only used for diagnostics.\n+#[derive(Debug)]\n struct BaseError {\n     msg: String,\n     fallback_label: String,\n@@ -140,6 +141,22 @@ struct BaseError {\n     suggestion: Option<(Span, &'static str, String)>,\n }\n \n+#[derive(Debug)]\n+enum TypoCandidate {\n+    Typo(TypoSuggestion),\n+    Shadowed(Res),\n+    None,\n+}\n+\n+impl TypoCandidate {\n+    fn to_opt_suggestion(self) -> Option<TypoSuggestion> {\n+        match self {\n+            TypoCandidate::Typo(sugg) => Some(sugg),\n+            TypoCandidate::Shadowed(_) | TypoCandidate::None => None,\n+        }\n+    }\n+}\n+\n impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n     fn def_span(&self, def_id: DefId) -> Option<Span> {\n         match def_id.krate {\n@@ -496,7 +513,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         }\n \n         // Try Levenshtein algorithm.\n-        let typo_sugg = self.lookup_typo_candidate(path, source.namespace(), is_expected);\n+        let typo_sugg =\n+            self.lookup_typo_candidate(path, source.namespace(), is_expected).to_opt_suggestion();\n         if path.len() == 1 && self.self_type_is_available() {\n             if let Some(candidate) = self.lookup_assoc_candidate(ident, ns, is_expected) {\n                 let self_is_available = self.self_value_is_available(path[0].ident.span);\n@@ -660,7 +678,18 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         let is_expected = &|res| source.is_expected(res);\n         let ident_span = path.last().map_or(span, |ident| ident.ident.span);\n         let typo_sugg = self.lookup_typo_candidate(path, source.namespace(), is_expected);\n+        if let TypoCandidate::Shadowed(res) = typo_sugg\n+            && let Some(id) = res.opt_def_id()\n+            && let Some(sugg_span) = self.r.opt_span(id)\n+        {\n+            err.span_label(\n+                sugg_span,\n+                format!(\"you might have meant to refer to this {}\", res.descr()),\n+            );\n+            return true;\n+        }\n         let mut fallback = false;\n+        let typo_sugg = typo_sugg.to_opt_suggestion();\n         if !self.r.add_typo_suggestion(err, typo_sugg, ident_span) {\n             fallback = true;\n             match self.diagnostic_metadata.current_let_binding {\n@@ -1581,22 +1610,38 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         path: &[Segment],\n         ns: Namespace,\n         filter_fn: &impl Fn(Res) -> bool,\n-    ) -> Option<TypoSuggestion> {\n+    ) -> TypoCandidate {\n         let mut names = Vec::new();\n         if path.len() == 1 {\n+            let mut ctxt = path.last().unwrap().ident.span.ctxt();\n+\n             // Search in lexical scope.\n             // Walk backwards up the ribs in scope and collect candidates.\n             for rib in self.ribs[ns].iter().rev() {\n+                let rib_ctxt = if rib.kind.contains_params() {\n+                    ctxt.normalize_to_macros_2_0()\n+                } else {\n+                    ctxt.normalize_to_macro_rules()\n+                };\n+\n                 // Locals and type parameters\n                 for (ident, &res) in &rib.bindings {\n-                    if filter_fn(res) {\n+                    if filter_fn(res) && ident.span.ctxt() == rib_ctxt {\n                         names.push(TypoSuggestion::typo_from_res(ident.name, res));\n                     }\n                 }\n+\n+                if let RibKind::MacroDefinition(def) = rib.kind && def == self.r.macro_def(ctxt) {\n+                    // If an invocation of this macro created `ident`, give up on `ident`\n+                    // and switch to `ident`'s source from the macro definition.\n+                    ctxt.remove_mark();\n+                    continue;\n+                }\n+\n                 // Items in scope\n                 if let RibKind::ModuleRibKind(module) = rib.kind {\n                     // Items from this module\n-                    self.r.add_module_candidates(module, &mut names, &filter_fn);\n+                    self.r.add_module_candidates(module, &mut names, &filter_fn, Some(ctxt));\n \n                     if let ModuleKind::Block = module.kind {\n                         // We can see through blocks\n@@ -1622,7 +1667,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                             }));\n \n                             if let Some(prelude) = self.r.prelude {\n-                                self.r.add_module_candidates(prelude, &mut names, &filter_fn);\n+                                self.r.add_module_candidates(prelude, &mut names, &filter_fn, None);\n                             }\n                         }\n                         break;\n@@ -1641,7 +1686,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             if let PathResult::Module(ModuleOrUniformRoot::Module(module)) =\n                 self.resolve_path(mod_path, Some(TypeNS), None)\n             {\n-                self.r.add_module_candidates(module, &mut names, &filter_fn);\n+                self.r.add_module_candidates(module, &mut names, &filter_fn, None);\n             }\n         }\n \n@@ -1654,10 +1699,17 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             name,\n             None,\n         ) {\n-            Some(found) if found != name => {\n-                names.into_iter().find(|suggestion| suggestion.candidate == found)\n+            Some(found) => {\n+                let Some(sugg) = names.into_iter().find(|suggestion| suggestion.candidate == found) else {\n+                    return TypoCandidate::None;\n+                };\n+                if found == name {\n+                    TypoCandidate::Shadowed(sugg.res)\n+                } else {\n+                    TypoCandidate::Typo(sugg)\n+                }\n             }\n-            _ => None,\n+            _ => TypoCandidate::None,\n         }\n     }\n "}, {"sha": "500ab4a584cab4de9cc247e3a9a849916b68feff", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -1,9 +1,7 @@\n use std::num::NonZeroU32;\n \n use crate::cgu_reuse_tracker::CguReuse;\n-use rustc_errors::{\n-    fluent, DiagnosticBuilder, ErrorGuaranteed, Handler, IntoDiagnostic, MultiSpan,\n-};\n+use rustc_errors::MultiSpan;\n use rustc_macros::Diagnostic;\n use rustc_span::{Span, Symbol};\n use rustc_target::spec::{SplitDebuginfo, StackProtector, TargetTriple};\n@@ -148,24 +146,15 @@ pub struct CrateNameEmpty {\n     pub span: Option<Span>,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(session::invalid_character_in_create_name)]\n pub struct InvalidCharacterInCrateName<'a> {\n+    #[primary_span]\n     pub span: Option<Span>,\n     pub character: char,\n     pub crate_name: &'a str,\n }\n \n-impl IntoDiagnostic<'_> for InvalidCharacterInCrateName<'_> {\n-    fn into_diagnostic(self, sess: &Handler) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n-        let mut diag = sess.struct_err(fluent::session::invalid_character_in_create_name);\n-        if let Some(sp) = self.span {\n-            diag.set_span(sp);\n-        }\n-        diag.set_arg(\"character\", self.character);\n-        diag.set_arg(\"crate_name\", self.crate_name);\n-        diag\n-    }\n-}\n-\n #[derive(Subdiagnostic)]\n #[multipart_suggestion(session::expr_parentheses_needed, applicability = \"machine-applicable\")]\n pub struct ExprParenthesesNeeded {\n@@ -180,3 +169,25 @@ impl ExprParenthesesNeeded {\n         ExprParenthesesNeeded { left: s.shrink_to_lo(), right: s.shrink_to_hi() }\n     }\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(session::skipping_const_checks)]\n+pub struct SkippingConstChecks {\n+    #[subdiagnostic(eager)]\n+    pub unleashed_features: Vec<UnleashedFeatureHelp>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub enum UnleashedFeatureHelp {\n+    #[help(session::unleashed_feature_help_named)]\n+    Named {\n+        #[primary_span]\n+        span: Span,\n+        gate: Symbol,\n+    },\n+    #[help(session::unleashed_feature_help_unnamed)]\n+    Unnamed {\n+        #[primary_span]\n+        span: Span,\n+    },\n+}"}, {"sha": "100c66f63641c6cda1174344062cb72b6d557f2a", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -5,9 +5,10 @@ use crate::config::{self, CrateType, InstrumentCoverage, OptLevel, OutputType, S\n use crate::errors::{\n     CannotEnableCrtStaticLinux, CannotMixAndMatchSanitizers, LinkerPluginToWindowsNotSupported,\n     NotCircumventFeature, ProfileSampleUseFileDoesNotExist, ProfileUseFileDoesNotExist,\n-    SanitizerCfiEnabled, SanitizerNotSupported, SanitizersNotSupported,\n+    SanitizerCfiEnabled, SanitizerNotSupported, SanitizersNotSupported, SkippingConstChecks,\n     SplitDebugInfoUnstablePlatform, StackProtectorNotSupportedForTarget,\n-    TargetRequiresUnwindTables, UnstableVirtualFunctionElimination, UnsupportedDwarfVersion,\n+    TargetRequiresUnwindTables, UnleashedFeatureHelp, UnstableVirtualFunctionElimination,\n+    UnsupportedDwarfVersion,\n };\n use crate::parse::{add_feature_diagnostics, ParseSess};\n use crate::search_paths::{PathKind, SearchPath};\n@@ -232,21 +233,19 @@ impl Session {\n         if !unleashed_features.is_empty() {\n             let mut must_err = false;\n             // Create a diagnostic pointing at where things got unleashed.\n-            // FIXME(#100717): needs eager translation/lists\n-            #[allow(rustc::untranslatable_diagnostic)]\n-            #[allow(rustc::diagnostic_outside_of_impl)]\n-            let mut diag = self.struct_warn(\"skipping const checks\");\n-            for &(span, feature_gate) in unleashed_features.iter() {\n-                // FIXME: `span_label` doesn't do anything, so we use \"help\" as a hack.\n-                if let Some(gate) = feature_gate {\n-                    diag.span_help(span, &format!(\"skipping check for `{gate}` feature\"));\n-                    // The unleash flag must *not* be used to just \"hack around\" feature gates.\n-                    must_err = true;\n-                } else {\n-                    diag.span_help(span, \"skipping check that does not even have a feature gate\");\n-                }\n-            }\n-            diag.emit();\n+            self.emit_warning(SkippingConstChecks {\n+                unleashed_features: unleashed_features\n+                    .iter()\n+                    .map(|(span, gate)| {\n+                        gate.map(|gate| {\n+                            must_err = true;\n+                            UnleashedFeatureHelp::Named { span: *span, gate }\n+                        })\n+                        .unwrap_or(UnleashedFeatureHelp::Unnamed { span: *span })\n+                    })\n+                    .collect(),\n+            });\n+\n             // If we should err, make sure we did.\n             if must_err && self.has_errors().is_none() {\n                 // We have skipped a feature gate, and not run into other errors... reject."}, {"sha": "63b35f5d0df0d2abfd996a8bb927c041db4f0a41", "filename": "src/librustdoc/html/static/css/noscript.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fnoscript.css", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fnoscript.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fnoscript.css?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -14,7 +14,7 @@ rules.\n \tdisplay: none;\n }\n \n-.sub {\n+nav.sub {\n \t/* The search bar and related controls don't work without JS */\n \tdisplay: none;\n }"}, {"sha": "afe1ca5d7e520ea13c6955b210ece8033b126af2", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -365,15 +365,8 @@ img {\n \toverflow: visible;\n }\n \n-.sub-container {\n-\tdisplay: flex;\n-\tflex-direction: row;\n-\tflex-wrap: nowrap;\n-}\n-\n .sub-logo-container {\n-\tdisplay: block;\n-\tmargin-right: 20px;\n+\tline-height: 0;\n }\n \n .sub-logo-container > img {\n@@ -696,14 +689,21 @@ pre, .rustdoc.source .example-wrap {\n }\n \n nav.sub {\n-\tposition: relative;\n \tflex-grow: 1;\n-\tmargin-bottom: 25px;\n+\tflex-flow: row nowrap;\n+\tmargin: 4px 0 25px 0;\n+\tdisplay: flex;\n+\talign-items: center;\n+}\n+nav.sub form {\n+\tflex-grow: 1;\n }\n .source nav.sub {\n+\tmargin: 0 0 15px 0;\n+}\n+.source nav.sub form {\n \tmargin-left: 32px;\n }\n-nav.sub form { display: inline; }\n \n a {\n \ttext-decoration: none;\n@@ -796,7 +796,6 @@ table,\n \tposition: relative;\n \tdisplay: flex;\n \theight: 34px;\n-\tmargin-top: 4px;\n }\n .search-results-title {\n \tmargin-top: 0;\n@@ -1822,10 +1821,6 @@ in storage.js\n \t\tmargin-left: 0px;\n \t}\n \n-\t.source .content {\n-\t\tmargin-top: 10px;\n-\t}\n-\n \t.anchor {\n \t\tdisplay: none !important;\n \t}\n@@ -1934,6 +1929,11 @@ in storage.js\n \t.impl-items > .item-info {\n \t\tmargin-left: 34px;\n \t}\n+\n+\t.source nav.sub {\n+\t\tmargin: 0;\n+\t\tpadding: 8px;\n+\t}\n }\n \n @media print {\n@@ -1962,12 +1962,12 @@ in storage.js\n \t\toverflow-wrap: anywhere;\n \t}\n \n-\t.sub-container {\n+\tnav.sub {\n \t\tflex-direction: column;\n \t}\n \n-\t.sub-logo-container {\n-\t\talign-self: center;\n+\tnav.sub form {\n+\t\talign-self: stretch;\n \t}\n \n \t.sub-logo-container > img {"}, {"sha": "2a111f94e50780eaf1965a71c2131def1ab5245c", "filename": "src/librustdoc/html/templates/page.html", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -102,7 +102,7 @@ <h2></h2> {#- -#}\n     </nav> {#- -#}\n     <main> {#- -#}\n         <div class=\"width-limiter\"> {#- -#}\n-            <div class=\"sub-container\"> {#- -#}\n+            <nav class=\"sub\"> {#- -#}\n                 {%- if page.css_class == \"source\" -%}\n                 <a class=\"sub-logo-container\" href=\"{{page.root_path|safe}}{{krate_with_trailing_slash|safe}}index.html\"> {#- -#}\n                     {%- if !layout.logo.is_empty()  %}\n@@ -112,30 +112,28 @@ <h2></h2> {#- -#}\n                     {%- endif -%}\n                 </a> {#- -#}\n                 {%- endif -%}\n-                <nav class=\"sub\"> {#- -#}\n-                    <form class=\"search-form\"> {#- -#}\n-                        <div class=\"search-container\"> {#- -#}\n-                            <span></span> {#- This empty span is a hacky fix for Safari - See #93184 -#}\n-                            <input {# -#}\n-                                class=\"search-input\" {# -#}\n-                                name=\"search\" {# -#}\n-                                autocomplete=\"off\" {# -#}\n-                                spellcheck=\"false\" {# -#}\n-                                placeholder=\"Click or press \u2018S\u2019 to search, \u2018?\u2019 for more options\u2026\" {# -#}\n-                                type=\"search\"> {#- -#}\n-                            <div id=\"help-button\" title=\"help\" tabindex=\"-1\"> {#- -#}\n-                                <a href=\"{{page.root_path|safe}}help.html\">?</a> {#- -#}\n-                            </div> {#- -#}\n-                            <div id=\"settings-menu\" tabindex=\"-1\"> {#- -#}\n-                                <a href=\"{{page.root_path|safe}}settings.html\" title=\"settings\"> {#- -#}\n-                                    <img width=\"22\" height=\"22\" alt=\"Change settings\" {# -#}\n-                                     src=\"{{static_root_path|safe}}wheel{{page.resource_suffix}}.svg\"> {#- -#}\n-                                </a> {#- -#}\n-                            </div> {#- -#}\n+                <form class=\"search-form\"> {#- -#}\n+                    <div class=\"search-container\"> {#- -#}\n+                        <span></span> {#- This empty span is a hacky fix for Safari - See #93184 -#}\n+                        <input {# -#}\n+                            class=\"search-input\" {# -#}\n+                            name=\"search\" {# -#}\n+                            autocomplete=\"off\" {# -#}\n+                            spellcheck=\"false\" {# -#}\n+                            placeholder=\"Click or press \u2018S\u2019 to search, \u2018?\u2019 for more options\u2026\" {# -#}\n+                            type=\"search\"> {#- -#}\n+                        <div id=\"help-button\" title=\"help\" tabindex=\"-1\"> {#- -#}\n+                            <a href=\"{{page.root_path|safe}}help.html\">?</a> {#- -#}\n                         </div> {#- -#}\n-                    </form> {#- -#}\n-                </nav> {#- -#}\n-            </div> {#- -#}\n+                        <div id=\"settings-menu\" tabindex=\"-1\"> {#- -#}\n+                            <a href=\"{{page.root_path|safe}}settings.html\" title=\"settings\"> {#- -#}\n+                                <img width=\"22\" height=\"22\" alt=\"Change settings\" {# -#}\n+                                 src=\"{{static_root_path|safe}}wheel{{page.resource_suffix}}.svg\"> {#- -#}\n+                            </a> {#- -#}\n+                        </div> {#- -#}\n+                    </div> {#- -#}\n+                </form> {#- -#}\n+            </nav> {#- -#}\n             <section id=\"main-content\" class=\"content\">{{- content|safe -}}</section> {#- -#}\n         </div> {#- -#}\n     </main> {#- -#}"}, {"sha": "12440b5ae6ed5e37567d682f20f63b1d445a0b90", "filename": "src/test/pretty/raw-str-nonexpr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fpretty%2Fraw-str-nonexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fpretty%2Fraw-str-nonexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fraw-str-nonexpr.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -1,3 +1,4 @@\n+// needs-asm-support\n // pp-exact\n \n #[cfg(foo = r#\"just parse this\"#)]"}, {"sha": "ff9cc57098c6bff2d203170fdd3fdafa2057f77e", "filename": "src/test/run-make-fulldeps/intrinsic-unreachable/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2FMakefile?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -1,5 +1,6 @@\n include ../tools.mk\n \n+# needs-asm-support\n # ignore-windows-msvc\n #\n # Because of Windows exception handling, the code is not necessarily any shorter."}, {"sha": "521e14748af12bd431ed5de839657a3a9e5bca99", "filename": "src/test/rustdoc-gui/help-page.goml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Frustdoc-gui%2Fhelp-page.goml", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Frustdoc-gui%2Fhelp-page.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fhelp-page.goml?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -5,12 +5,12 @@ wait-for: \"#help\"\n assert-css: (\"#help\", {\"display\": \"block\"})\n click: \"#help-button > a\"\n assert-css: (\"#help\", {\"display\": \"block\"})\n-compare-elements-property: (\".sub-container\", \"#help\", [\"offsetWidth\"])\n-compare-elements-position: (\".sub-container\", \"#help\", (\"x\"))\n+compare-elements-property: (\".sub\", \"#help\", [\"offsetWidth\"])\n+compare-elements-position: (\".sub\", \"#help\", (\"x\"))\n size: (500, 1000) // Try mobile next.\n assert-css: (\"#help\", {\"display\": \"block\"})\n-compare-elements-property: (\".sub-container\", \"#help\", [\"offsetWidth\"])\n-compare-elements-position: (\".sub-container\", \"#help\", (\"x\"))\n+compare-elements-property: (\".sub\", \"#help\", [\"offsetWidth\"])\n+compare-elements-position: (\".sub\", \"#help\", (\"x\"))\n \n // This test ensures that opening the help popover without switching pages works.\n goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n@@ -20,5 +20,5 @@ click: \"#help-button > a\"\n assert-css: (\"#help\", {\"display\": \"block\"})\n click: \"#help-button > a\"\n assert-css: (\"#help\", {\"display\": \"none\"})\n-compare-elements-property-false: (\".sub-container\", \"#help\", [\"offsetWidth\"])\n-compare-elements-position-false: (\".sub-container\", \"#help\", (\"x\"))\n+compare-elements-property-false: (\".sub\", \"#help\", [\"offsetWidth\"])\n+compare-elements-position-false: (\".sub\", \"#help\", (\"x\"))"}, {"sha": "f258f4d2a838e12fd7588256f3d662c04f46fdf7", "filename": "src/test/rustdoc-gui/settings.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Frustdoc-gui%2Fsettings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Frustdoc-gui%2Fsettings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsettings.goml?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -147,7 +147,7 @@ assert-css: (\n )\n \n assert-attribute-false: (\"#settings\", {\"class\": \"popover\"}, CONTAINS)\n-compare-elements-position: (\".sub-container\", \"#settings\", (\"x\"))\n+compare-elements-position: (\".sub form\", \"#settings\", (\"x\"))\n \n // We now check the display with JS disabled.\n assert-false: \"noscript section\""}, {"sha": "29d65fc7ebc7a6f1aa373ee186956fe380f1b70b", "filename": "src/test/rustdoc-gui/source-code-page.goml", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -23,7 +23,7 @@ assert-css: (\".src-line-numbers\", {\"text-align\": \"right\"})\n show-text: true\n goto: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"\n // We use this assert-position to know where we will click.\n-assert-position: (\"//*[@id='1']\", {\"x\": 104, \"y\": 103})\n+assert-position: (\"//*[@id='1']\", {\"x\": 104, \"y\": 112})\n // We click on the left of the \"1\" span but still in the \"src-line-number\" `<pre>`.\n click: (103, 103)\n assert-document-property: ({\"URL\": \"/lib.rs.html\"}, ENDS_WITH)\n@@ -47,3 +47,25 @@ assert-property: (\"#source-sidebar details:first-of-type\", {\"open\": \"false\"})\n \n // Check the spacing.\n assert-css: (\"#source-sidebar > details.dir-entry\", {\"padding-left\": \"4px\"})\n+\n+// Check the search form\n+assert-css: (\"nav.sub\", {\"flex-direction\": \"row\"})\n+// The goal of this test is to ensure the search input is perfectly centered\n+// between the top of the page and the top of the gray code block.\n+// To check this, we maintain the invariant:\n+//\n+// offsetTop[nav.sub form] = offsetTop[#main-content] - offsetHeight[nav.sub form] - offsetTop[nav.sub form]\n+assert-property: (\"nav.sub form\", {\"offsetTop\": 28, \"offsetHeight\": 34})\n+assert-property: (\"#main-content\", {\"offsetTop\": 90})\n+// 28 = 90 - 34 - 28\n+\n+// Now do the same check on moderately-sized mobile.\n+size: (700, 700)\n+assert-css: (\"nav.sub\", {\"flex-direction\": \"row\"})\n+assert-property: (\"nav.sub form\", {\"offsetTop\": 21, \"offsetHeight\": 34})\n+assert-property: (\"#main-content\", {\"offsetTop\": 76})\n+// 21 = 76 - 34 - 21\n+\n+// Tiny mobile gets a different display where the logo is stacked on top.\n+size: (450, 700)\n+assert-css: (\"nav.sub\", {\"flex-direction\": \"column\"})"}, {"sha": "b8deb48d49adde4fc41529dc64a2dabdc965e8fd", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -749,3 +749,12 @@ struct SubdiagnosticEagerSuggestion {\n     #[subdiagnostic(eager)]\n     sub: SubdiagnosticWithSuggestion,\n }\n+\n+/// with a doc comment on the type..\n+#[derive(Diagnostic)]\n+#[diag(compiletest::example, code = \"E0123\")]\n+struct WithDocComment {\n+    /// ..and the field\n+    #[primary_span]\n+    span: Span,\n+}"}, {"sha": "2fe93d46d0ac073357b34016c84827de76385d49", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -237,7 +237,6 @@ enum V {\n         var: String,\n     },\n     B {\n-    //~^ ERROR subdiagnostic kind not specified\n         #[primary_span]\n         span: Span,\n         var: String,\n@@ -641,3 +640,24 @@ struct BJ {\n     span: Span,\n     r#type: String,\n }\n+\n+/// with a doc comment on the type..\n+#[derive(Subdiagnostic)]\n+#[label(parser::add_paren)]\n+struct BK {\n+    /// ..and the field\n+    #[primary_span]\n+    span: Span,\n+}\n+\n+/// with a doc comment on the type..\n+#[derive(Subdiagnostic)]\n+enum BL {\n+    /// ..and the variant..\n+    #[label(parser::add_paren)]\n+    Foo {\n+        /// ..and the field\n+        #[primary_span]\n+        span: Span,\n+    }\n+}"}, {"sha": "1173d24248bc4480f8436d3ebd8e6395051fc7d4", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.stderr", "status": "modified", "additions": 43, "deletions": 49, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -134,20 +134,14 @@ error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n LL |     #[label(code = \"...\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: subdiagnostic kind not specified\n-  --> $DIR/subdiagnostic-derive.rs:239:5\n-   |\n-LL |     B {\n-   |     ^\n-\n error: the `#[primary_span]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/subdiagnostic-derive.rs:251:5\n+  --> $DIR/subdiagnostic-derive.rs:250:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n \n error: label without `#[primary_span]` field\n-  --> $DIR/subdiagnostic-derive.rs:248:1\n+  --> $DIR/subdiagnostic-derive.rs:247:1\n    |\n LL | / #[label(parser::add_paren)]\n LL | |\n@@ -159,35 +153,35 @@ LL | | }\n    | |_^\n \n error: `#[applicability]` is only valid on suggestions\n-  --> $DIR/subdiagnostic-derive.rs:261:5\n+  --> $DIR/subdiagnostic-derive.rs:260:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: `#[bar]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:271:5\n+  --> $DIR/subdiagnostic-derive.rs:270:5\n    |\n LL |     #[bar]\n    |     ^^^^^^\n    |\n    = help: only `primary_span`, `applicability` and `skip_arg` are valid field attributes\n \n error: `#[bar = ...]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:282:5\n+  --> $DIR/subdiagnostic-derive.rs:281:5\n    |\n LL |     #[bar = \"...\"]\n    |     ^^^^^^^^^^^^^^\n \n error: `#[bar(...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:293:5\n+  --> $DIR/subdiagnostic-derive.rs:292:5\n    |\n LL |     #[bar(\"...\")]\n    |     ^^^^^^^^^^^^^\n    |\n    = help: only `primary_span`, `applicability` and `skip_arg` are valid field attributes\n \n error: unexpected unsupported untagged union\n-  --> $DIR/subdiagnostic-derive.rs:309:1\n+  --> $DIR/subdiagnostic-derive.rs:308:1\n    |\n LL | / union AC {\n LL | |\n@@ -197,75 +191,75 @@ LL | | }\n    | |_^\n \n error: `#[label(parser::add_paren)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:324:28\n+  --> $DIR/subdiagnostic-derive.rs:323:28\n    |\n LL | #[label(parser::add_paren, parser::add_paren)]\n    |                            ^^^^^^^^^^^^^^^^^\n    |\n    = help: a diagnostic slug must be the first argument to the attribute\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:337:5\n+  --> $DIR/subdiagnostic-derive.rs:336:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:334:5\n+  --> $DIR/subdiagnostic-derive.rs:333:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n \n error: subdiagnostic kind not specified\n-  --> $DIR/subdiagnostic-derive.rs:343:8\n+  --> $DIR/subdiagnostic-derive.rs:342:8\n    |\n LL | struct AG {\n    |        ^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:380:47\n+  --> $DIR/subdiagnostic-derive.rs:379:47\n    |\n LL | #[suggestion(parser::add_paren, code = \"...\", code = \"...\")]\n    |                                               ^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:380:33\n+  --> $DIR/subdiagnostic-derive.rs:379:33\n    |\n LL | #[suggestion(parser::add_paren, code = \"...\", code = \"...\")]\n    |                                 ^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:398:5\n+  --> $DIR/subdiagnostic-derive.rs:397:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:395:5\n+  --> $DIR/subdiagnostic-derive.rs:394:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: the `#[applicability]` attribute can only be applied to fields of type `Applicability`\n-  --> $DIR/subdiagnostic-derive.rs:408:5\n+  --> $DIR/subdiagnostic-derive.rs:407:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:421:1\n+  --> $DIR/subdiagnostic-derive.rs:420:1\n    |\n LL | #[suggestion(parser::add_paren)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: invalid applicability\n-  --> $DIR/subdiagnostic-derive.rs:431:46\n+  --> $DIR/subdiagnostic-derive.rs:430:46\n    |\n LL | #[suggestion(parser::add_paren, code =\"...\", applicability = \"foo\")]\n    |                                              ^^^^^^^^^^^^^^^^^^^^^\n \n error: suggestion without `#[primary_span]` field\n-  --> $DIR/subdiagnostic-derive.rs:449:1\n+  --> $DIR/subdiagnostic-derive.rs:448:1\n    |\n LL | / #[suggestion(parser::add_paren, code = \"...\")]\n LL | |\n@@ -275,41 +269,41 @@ LL | | }\n    | |_^\n \n error: unsupported type attribute for subdiagnostic enum\n-  --> $DIR/subdiagnostic-derive.rs:463:1\n+  --> $DIR/subdiagnostic-derive.rs:462:1\n    |\n LL | #[label]\n    | ^^^^^^^^\n \n error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:483:39\n+  --> $DIR/subdiagnostic-derive.rs:482:39\n    |\n LL | #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n    |                                       ^^^^^^^\n \n error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:502:43\n+  --> $DIR/subdiagnostic-derive.rs:501:43\n    |\n LL |     #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n    |                                           ^^^^^^^\n \n error: `#[suggestion_part]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:525:5\n+  --> $DIR/subdiagnostic-derive.rs:524:5\n    |\n LL |     #[suggestion_part]\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: `#[suggestion_part(...)]` is only valid in multipart suggestions, use `#[primary_span]` instead\n \n error: `#[suggestion_part(...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:528:5\n+  --> $DIR/subdiagnostic-derive.rs:527:5\n    |\n LL |     #[suggestion_part(code = \"...\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: `#[suggestion_part(...)]` is only valid in multipart suggestions\n \n error: suggestion without `#[primary_span]` field\n-  --> $DIR/subdiagnostic-derive.rs:522:1\n+  --> $DIR/subdiagnostic-derive.rs:521:1\n    |\n LL | / #[suggestion(parser::add_paren, code = \"...\")]\n LL | |\n@@ -321,15 +315,15 @@ LL | | }\n    | |_^\n \n error: `#[multipart_suggestion(code = ...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:537:43\n+  --> $DIR/subdiagnostic-derive.rs:536:43\n    |\n LL | #[multipart_suggestion(parser::add_paren, code = \"...\", applicability = \"machine-applicable\")]\n    |                                           ^^^^^^^^^^^^\n    |\n    = help: only `applicability` is a valid nested attributes\n \n error: multipart suggestion without any `#[suggestion_part(...)]` fields\n-  --> $DIR/subdiagnostic-derive.rs:537:1\n+  --> $DIR/subdiagnostic-derive.rs:536:1\n    |\n LL | / #[multipart_suggestion(parser::add_paren, code = \"...\", applicability = \"machine-applicable\")]\n LL | |\n@@ -340,27 +334,27 @@ LL | | }\n    | |_^\n \n error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:547:5\n+  --> $DIR/subdiagnostic-derive.rs:546:5\n    |\n LL |     #[suggestion_part]\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:555:5\n+  --> $DIR/subdiagnostic-derive.rs:554:5\n    |\n LL |     #[suggestion_part()]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: `#[primary_span]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:564:5\n+  --> $DIR/subdiagnostic-derive.rs:563:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: multipart suggestions use one or more `#[suggestion_part]`s rather than one `#[primary_span]`\n \n error: multipart suggestion without any `#[suggestion_part(...)]` fields\n-  --> $DIR/subdiagnostic-derive.rs:561:1\n+  --> $DIR/subdiagnostic-derive.rs:560:1\n    |\n LL | / #[multipart_suggestion(parser::add_paren)]\n LL | |\n@@ -372,51 +366,51 @@ LL | | }\n    | |_^\n \n error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:572:5\n+  --> $DIR/subdiagnostic-derive.rs:571:5\n    |\n LL |     #[suggestion_part]\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:575:5\n+  --> $DIR/subdiagnostic-derive.rs:574:5\n    |\n LL |     #[suggestion_part()]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion_part(foo = ...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:578:23\n+  --> $DIR/subdiagnostic-derive.rs:577:23\n    |\n LL |     #[suggestion_part(foo = \"bar\")]\n    |                       ^^^^^^^^^^^\n    |\n    = help: `code` is the only valid nested attribute\n \n error: the `#[suggestion_part(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/subdiagnostic-derive.rs:581:5\n+  --> $DIR/subdiagnostic-derive.rs:580:5\n    |\n LL |     #[suggestion_part(code = \"...\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the `#[suggestion_part(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/subdiagnostic-derive.rs:584:5\n+  --> $DIR/subdiagnostic-derive.rs:583:5\n    |\n LL |     #[suggestion_part()]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:592:37\n+  --> $DIR/subdiagnostic-derive.rs:591:37\n    |\n LL |     #[suggestion_part(code = \"...\", code = \",,,\")]\n    |                                     ^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:592:23\n+  --> $DIR/subdiagnostic-derive.rs:591:23\n    |\n LL |     #[suggestion_part(code = \"...\", code = \",,,\")]\n    |                       ^^^^^^^^^^^^\n \n error: `#[applicability]` has no effect if all `#[suggestion]`/`#[multipart_suggestion]` attributes have a static `applicability = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:621:5\n+  --> $DIR/subdiagnostic-derive.rs:620:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n@@ -458,19 +452,19 @@ LL |     #[bar(\"...\")]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:271:7\n+  --> $DIR/subdiagnostic-derive.rs:270:7\n    |\n LL |     #[bar]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:282:7\n+  --> $DIR/subdiagnostic-derive.rs:281:7\n    |\n LL |     #[bar = \"...\"]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:293:7\n+  --> $DIR/subdiagnostic-derive.rs:292:7\n    |\n LL |     #[bar(\"...\")]\n    |       ^^^\n@@ -481,6 +475,6 @@ error[E0425]: cannot find value `slug` in module `rustc_errors::fluent`\n LL | #[label(slug)]\n    |         ^^^^ not found in `rustc_errors::fluent`\n \n-error: aborting due to 68 previous errors\n+error: aborting due to 67 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}, {"sha": "25cf1c3d730ebae65bee81f350f29f7aca7f36a2", "filename": "src/test/ui/asm/unpretty-expanded.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui%2Fasm%2Funpretty-expanded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui%2Fasm%2Funpretty-expanded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Funpretty-expanded.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -1,3 +1,4 @@\n+// needs-asm-support\n // check-pass\n // compile-flags: -Zunpretty=expanded\n core::arch::global_asm!(\"x: .byte 42\");"}, {"sha": "ab1b5f45e5c8ad2cb954115abb7c3f08e41fa19c", "filename": "src/test/ui/asm/unpretty-expanded.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui%2Fasm%2Funpretty-expanded.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui%2Fasm%2Funpretty-expanded.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Funpretty-expanded.stdout?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -4,6 +4,7 @@\n use ::std::prelude::rust_2015::*;\n #[macro_use]\n extern crate std;\n+// needs-asm-support\n // check-pass\n // compile-flags: -Zunpretty=expanded\n global_asm! (\"x: .byte 42\");"}, {"sha": "af13762d11857b70caab83496bbfbb798b9dfe90", "filename": "src/test/ui/empty_global_asm.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui%2Fempty_global_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui%2Fempty_global_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty_global_asm.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -1,21 +1,8 @@\n+// needs-asm-support\n // run-pass\n \n-#[allow(unused_imports)]\n use std::arch::global_asm;\n \n-#[cfg(target_arch = \"x86\")]\n-global_asm!(\"\");\n-\n-#[cfg(target_arch = \"x86_64\")]\n-global_asm!(\"\");\n-\n-#[cfg(target_arch = \"arm\")]\n-global_asm!(\"\");\n-\n-#[cfg(target_arch = \"aarch64\")]\n-global_asm!(\"\");\n-\n-#[cfg(target_arch = \"mips\")]\n global_asm!(\"\");\n \n fn main() {}"}, {"sha": "1f2a96a4c411a62bb1c016d41bf478da67cdf201", "filename": "src/test/ui/hygiene/globs.stderr", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -1,9 +1,16 @@\n error[E0425]: cannot find function `f` in this scope\n   --> $DIR/globs.rs:22:9\n    |\n+LL |     pub fn g() {}\n+   |     ---------- similarly named function `g` defined here\n+...\n LL |         f();\n-   |         ^ not found in this scope\n+   |         ^\n+   |\n+help: a function with a similar name exists\n    |\n+LL |         g();\n+   |         ~\n help: consider importing this function\n    |\n LL | use foo::f;\n@@ -12,8 +19,11 @@ LL | use foo::f;\n error[E0425]: cannot find function `g` in this scope\n   --> $DIR/globs.rs:15:5\n    |\n+LL |       pub fn f() {}\n+   |       ---------- similarly named function `f` defined here\n+...\n LL |       g();\n-   |       ^ not found in this scope\n+   |       ^\n ...\n LL | /     m! {\n LL | |         use bar::*;\n@@ -23,6 +33,10 @@ LL | |     }\n    | |_____- in this macro invocation\n    |\n    = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: a function with a similar name exists\n+   |\n+LL |     f();\n+   |     ~\n help: consider importing this function\n    |\n LL | use bar::g;"}, {"sha": "1d2a1e1249864041dd6141a4c70b261bd309f1d6", "filename": "src/test/ui/hygiene/rustc-macro-transparency.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -19,14 +19,8 @@ LL |     semitransparent;\n error[E0423]: expected value, found macro `opaque`\n   --> $DIR/rustc-macro-transparency.rs:30:5\n    |\n-LL |     struct Opaque;\n-   |     -------------- similarly named unit struct `Opaque` defined here\n-...\n LL |     opaque;\n-   |     ^^^^^^\n-   |     |\n-   |     not a value\n-   |     help: a unit struct with a similar name exists (notice the capitalization): `Opaque`\n+   |     ^^^^^^ not a value\n \n error: aborting due to 3 previous errors\n "}, {"sha": "535985452232d4fa74058c1b8fd4d92fd60f19a4", "filename": "src/test/ui/lexical-scopes.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui%2Flexical-scopes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui%2Flexical-scopes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexical-scopes.stderr?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -1,6 +1,8 @@\n error[E0574]: expected struct, variant or union type, found type parameter `T`\n   --> $DIR/lexical-scopes.rs:3:13\n    |\n+LL | struct T { i: i32 }\n+   | ------------------- you might have meant to refer to this struct\n LL | fn f<T>() {\n    |      - found this type parameter\n LL |     let t = T { i: 0 };"}, {"sha": "64a8e5204579c679605994794cff50038ab58db1", "filename": "src/test/ui/lint/unused/unused-supertrait.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui%2Flint%2Funused%2Funused-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui%2Flint%2Funused%2Funused-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-supertrait.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -0,0 +1,11 @@\n+#![deny(unused_must_use)]\n+\n+fn it() -> impl ExactSizeIterator<Item = ()> {\n+    let x: Box<dyn ExactSizeIterator<Item = ()>> = todo!();\n+    x\n+}\n+\n+fn main() {\n+    it();\n+    //~^ ERROR unused implementer of `Iterator` that must be used\n+}"}, {"sha": "d2f8c0078481772043877e24c2d25be388e30c3f", "filename": "src/test/ui/lint/unused/unused-supertrait.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui%2Flint%2Funused%2Funused-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui%2Flint%2Funused%2Funused-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-supertrait.stderr?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -0,0 +1,15 @@\n+error: unused implementer of `Iterator` that must be used\n+  --> $DIR/unused-supertrait.rs:9:5\n+   |\n+LL |     it();\n+   |     ^^^^^\n+   |\n+   = note: iterators are lazy and do nothing unless consumed\n+note: the lint level is defined here\n+  --> $DIR/unused-supertrait.rs:1:9\n+   |\n+LL | #![deny(unused_must_use)]\n+   |         ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "f597c398b7c17f87d5ba9dcc7cfe1a16abb9dc31", "filename": "src/test/ui/macros/macro-context.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -57,7 +57,7 @@ error[E0425]: cannot find value `i` in this scope\n   --> $DIR/macro-context.rs:3:13\n    |\n LL |     () => ( i ; typeof );\n-   |             ^ help: a local variable with a similar name exists: `a`\n+   |             ^ not found in this scope\n ...\n LL |     let i = m!();\n    |             ---- in this macro invocation"}, {"sha": "df7c4f72eb0b63b863a6e3c97dd44b1eb11d666f", "filename": "src/test/ui/proc-macro/gen-macro-rules-hygiene.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui%2Fproc-macro%2Fgen-macro-rules-hygiene.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui%2Fproc-macro%2Fgen-macro-rules-hygiene.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgen-macro-rules-hygiene.stderr?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -13,7 +13,7 @@ error[E0425]: cannot find value `local_use` in this scope\n   --> $DIR/gen-macro-rules-hygiene.rs:12:1\n    |\n LL | gen_macro_rules!();\n-   | ^^^^^^^^^^^^^^^^^^ not found in this scope\n+   | ^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `local_def`\n ...\n LL |         generated!();\n    |         ------------ in this macro invocation\n@@ -24,7 +24,7 @@ error[E0425]: cannot find value `local_def` in this scope\n   --> $DIR/gen-macro-rules-hygiene.rs:21:9\n    |\n LL |         local_def;\n-   |         ^^^^^^^^^ not found in this scope\n+   |         ^^^^^^^^^ help: a local variable with a similar name exists: `local_use`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "13786080124645079e0bf251350a2a27b0210932", "filename": "src/test/ui/proc-macro/mixed-site-span.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -10,15 +10,15 @@ error[E0425]: cannot find value `local_use` in this scope\n   --> $DIR/mixed-site-span.rs:13:9\n    |\n LL |         proc_macro_rules!();\n-   |         ^^^^^^^^^^^^^^^^^^^ not found in this scope\n+   |         ^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `local_def`\n    |\n    = note: this error originates in the macro `proc_macro_rules` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `local_def` in this scope\n   --> $DIR/mixed-site-span.rs:17:9\n    |\n LL |         local_def;\n-   |         ^^^^^^^^^ not found in this scope\n+   |         ^^^^^^^^^ help: a local variable with a similar name exists: `local_use`\n \n error[E0412]: cannot find type `ItemUse` in crate `$crate`\n   --> $DIR/mixed-site-span.rs:24:1"}, {"sha": "eb26cd9cabb8241b72a1d4061fce5b24185fe12c", "filename": "src/test/ui/resolve/point-at-type-parameter-shadowing-another-type.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.stderr?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -1,11 +1,16 @@\n error[E0574]: expected struct, variant or union type, found type parameter `Baz`\n   --> $DIR/point-at-type-parameter-shadowing-another-type.rs:16:13\n    |\n-LL | impl<Baz> Foo<Baz> for Bar {\n-   |      --- found this type parameter\n+LL | / struct Baz {\n+LL | |     num: usize,\n+LL | | }\n+   | |_- you might have meant to refer to this struct\n+LL |\n+LL |   impl<Baz> Foo<Baz> for Bar {\n+   |        --- found this type parameter\n ...\n-LL |             Baz { num } => num,\n-   |             ^^^ not a struct, variant or union type\n+LL |               Baz { num } => num,\n+   |               ^^^ not a struct, variant or union type\n \n error: aborting due to previous error\n "}, {"sha": "b8ed9b9ec18f718b0cc56160b0966a9e0cf220a5", "filename": "src/tools/clippy/clippy_lints/src/manual_assert.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_assert.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -69,11 +69,13 @@ impl<'tcx> LateLintPass<'tcx> for ManualAssert {\n                     \"only a `panic!` in `if`-then statement\",\n                     |diag| {\n                         // comments can be noisy, do not show them to the user\n-                        diag.tool_only_span_suggestion(\n-                                    expr.span.shrink_to_lo(),\n-                                    \"add comments back\",\n-                                    comments,\n-                                    applicability);\n+                        if !comments.is_empty() {\n+                            diag.tool_only_span_suggestion(\n+                                        expr.span.shrink_to_lo(),\n+                                        \"add comments back\",\n+                                        comments,\n+                                        applicability);\n+                        }\n                         diag.span_suggestion(\n                                     expr.span,\n                                     \"try instead\","}, {"sha": "67debe7e08af6008c7ddf474c37a3c7a59e02614", "filename": "src/tools/clippy/clippy_lints/src/needless_late_init.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_late_init.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -180,10 +180,13 @@ fn assignment_suggestions<'tcx>(\n     let suggestions = assignments\n         .iter()\n         .flat_map(|assignment| {\n-            [\n-                assignment.span.until(assignment.rhs_span),\n-                assignment.rhs_span.shrink_to_hi().with_hi(assignment.span.hi()),\n-            ]\n+            let mut spans = vec![assignment.span.until(assignment.rhs_span)];\n+\n+            if assignment.rhs_span.hi() != assignment.span.hi() {\n+                spans.push(assignment.rhs_span.shrink_to_hi().with_hi(assignment.span.hi()));\n+            }\n+\n+            spans\n         })\n         .map(|span| (span, String::new()))\n         .collect::<Vec<(Span, String)>>();"}, {"sha": "79c29c04e05962f941499320b6feeb51724d6c60", "filename": "src/tools/clippy/tests/ui/entry.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fentry.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fentry.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fentry.fixed?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -1,3 +1,4 @@\n+// needs-asm-support\n // run-rustfix\n \n #![allow(unused, clippy::needless_pass_by_value, clippy::collapsible_if)]"}, {"sha": "2d7985457d8b4e6705f45066a5cc1647a37d4452", "filename": "src/tools/clippy/tests/ui/entry.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fentry.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -1,3 +1,4 @@\n+// needs-asm-support\n // run-rustfix\n \n #![allow(unused, clippy::needless_pass_by_value, clippy::collapsible_if)]"}, {"sha": "2c4c49d2522ca926db9adcc788a48b803e3cce1e", "filename": "src/tools/clippy/tests/ui/entry.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fentry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fentry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fentry.stderr?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -1,5 +1,5 @@\n error: usage of `contains_key` followed by `insert` on a `HashMap`\n-  --> $DIR/entry.rs:24:5\n+  --> $DIR/entry.rs:25:5\n    |\n LL | /     if !m.contains_key(&k) {\n LL | |         m.insert(k, v);\n@@ -9,7 +9,7 @@ LL | |     }\n    = note: `-D clippy::map-entry` implied by `-D warnings`\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n-  --> $DIR/entry.rs:29:5\n+  --> $DIR/entry.rs:30:5\n    |\n LL | /     if !m.contains_key(&k) {\n LL | |         if true {\n@@ -32,7 +32,7 @@ LL +     });\n    |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n-  --> $DIR/entry.rs:38:5\n+  --> $DIR/entry.rs:39:5\n    |\n LL | /     if !m.contains_key(&k) {\n LL | |         if true {\n@@ -55,7 +55,7 @@ LL +     });\n    |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n-  --> $DIR/entry.rs:47:5\n+  --> $DIR/entry.rs:48:5\n    |\n LL | /     if !m.contains_key(&k) {\n LL | |         if true {\n@@ -79,7 +79,7 @@ LL +     }\n    |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n-  --> $DIR/entry.rs:57:5\n+  --> $DIR/entry.rs:58:5\n    |\n LL | /     if !m.contains_key(&k) {\n LL | |         foo();\n@@ -96,7 +96,7 @@ LL +     });\n    |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n-  --> $DIR/entry.rs:63:5\n+  --> $DIR/entry.rs:64:5\n    |\n LL | /     if !m.contains_key(&k) {\n LL | |         match 0 {\n@@ -122,7 +122,7 @@ LL +     });\n    |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n-  --> $DIR/entry.rs:75:5\n+  --> $DIR/entry.rs:76:5\n    |\n LL | /     if !m.contains_key(&k) {\n LL | |         match 0 {\n@@ -146,7 +146,7 @@ LL +     }\n    |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n-  --> $DIR/entry.rs:85:5\n+  --> $DIR/entry.rs:86:5\n    |\n LL | /     if !m.contains_key(&k) {\n LL | |         foo();\n@@ -187,15 +187,15 @@ LL +     });\n    |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n-  --> $DIR/entry.rs:119:5\n+  --> $DIR/entry.rs:120:5\n    |\n LL | /     if !m.contains_key(&m!(k)) {\n LL | |         m.insert(m!(k), m!(v));\n LL | |     }\n    | |_____^ help: try this: `m.entry(m!(k)).or_insert_with(|| m!(v));`\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n-  --> $DIR/entry.rs:151:5\n+  --> $DIR/entry.rs:152:5\n    |\n LL | /     if !m.contains_key(&k) {\n LL | |         let x = (String::new(), String::new());"}, {"sha": "237638ee1344c60274bb31c1accbcf7f7456cee3", "filename": "src/tools/clippy/tests/ui/manual_assert.edition2018.stderr", "status": "modified", "additions": 8, "deletions": 47, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_assert.edition2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_assert.edition2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_assert.edition2018.stderr?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -4,104 +4,65 @@ error: only a `panic!` in `if`-then statement\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qaqaq{:?}\", a);\n LL | |     }\n-   | |_____^\n+   | |_____^ help: try instead: `assert!(a.is_empty(), \"qaqaq{:?}\", a);`\n    |\n    = note: `-D clippy::manual-assert` implied by `-D warnings`\n-help: try instead\n-   |\n-LL |     assert!(a.is_empty(), \"qaqaq{:?}\", a);\n-   |\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:34:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qwqwq\");\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(a.is_empty(), \"qwqwq\");\n-   |\n+   | |_____^ help: try instead: `assert!(a.is_empty(), \"qwqwq\");`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:51:5\n    |\n LL | /     if b.is_empty() {\n LL | |         panic!(\"panic1\");\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(!b.is_empty(), \"panic1\");\n-   |\n+   | |_____^ help: try instead: `assert!(!b.is_empty(), \"panic1\");`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:54:5\n    |\n LL | /     if b.is_empty() && a.is_empty() {\n LL | |         panic!(\"panic2\");\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(!(b.is_empty() && a.is_empty()), \"panic2\");\n-   |\n+   | |_____^ help: try instead: `assert!(!(b.is_empty() && a.is_empty()), \"panic2\");`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:57:5\n    |\n LL | /     if a.is_empty() && !b.is_empty() {\n LL | |         panic!(\"panic3\");\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");\n-   |\n+   | |_____^ help: try instead: `assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:60:5\n    |\n LL | /     if b.is_empty() || a.is_empty() {\n LL | |         panic!(\"panic4\");\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(!(b.is_empty() || a.is_empty()), \"panic4\");\n-   |\n+   | |_____^ help: try instead: `assert!(!(b.is_empty() || a.is_empty()), \"panic4\");`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:63:5\n    |\n LL | /     if a.is_empty() || !b.is_empty() {\n LL | |         panic!(\"panic5\");\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");\n-   |\n+   | |_____^ help: try instead: `assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:66:5\n    |\n LL | /     if a.is_empty() {\n LL | |         panic!(\"with expansion {}\", one!())\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(!a.is_empty(), \"with expansion {}\", one!());\n-   |\n+   | |_____^ help: try instead: `assert!(!a.is_empty(), \"with expansion {}\", one!());`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:73:5"}, {"sha": "237638ee1344c60274bb31c1accbcf7f7456cee3", "filename": "src/tools/clippy/tests/ui/manual_assert.edition2021.stderr", "status": "modified", "additions": 8, "deletions": 47, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_assert.edition2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_assert.edition2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_assert.edition2021.stderr?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -4,104 +4,65 @@ error: only a `panic!` in `if`-then statement\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qaqaq{:?}\", a);\n LL | |     }\n-   | |_____^\n+   | |_____^ help: try instead: `assert!(a.is_empty(), \"qaqaq{:?}\", a);`\n    |\n    = note: `-D clippy::manual-assert` implied by `-D warnings`\n-help: try instead\n-   |\n-LL |     assert!(a.is_empty(), \"qaqaq{:?}\", a);\n-   |\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:34:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qwqwq\");\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(a.is_empty(), \"qwqwq\");\n-   |\n+   | |_____^ help: try instead: `assert!(a.is_empty(), \"qwqwq\");`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:51:5\n    |\n LL | /     if b.is_empty() {\n LL | |         panic!(\"panic1\");\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(!b.is_empty(), \"panic1\");\n-   |\n+   | |_____^ help: try instead: `assert!(!b.is_empty(), \"panic1\");`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:54:5\n    |\n LL | /     if b.is_empty() && a.is_empty() {\n LL | |         panic!(\"panic2\");\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(!(b.is_empty() && a.is_empty()), \"panic2\");\n-   |\n+   | |_____^ help: try instead: `assert!(!(b.is_empty() && a.is_empty()), \"panic2\");`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:57:5\n    |\n LL | /     if a.is_empty() && !b.is_empty() {\n LL | |         panic!(\"panic3\");\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");\n-   |\n+   | |_____^ help: try instead: `assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:60:5\n    |\n LL | /     if b.is_empty() || a.is_empty() {\n LL | |         panic!(\"panic4\");\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(!(b.is_empty() || a.is_empty()), \"panic4\");\n-   |\n+   | |_____^ help: try instead: `assert!(!(b.is_empty() || a.is_empty()), \"panic4\");`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:63:5\n    |\n LL | /     if a.is_empty() || !b.is_empty() {\n LL | |         panic!(\"panic5\");\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");\n-   |\n+   | |_____^ help: try instead: `assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:66:5\n    |\n LL | /     if a.is_empty() {\n LL | |         panic!(\"with expansion {}\", one!())\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(!a.is_empty(), \"with expansion {}\", one!());\n-   |\n+   | |_____^ help: try instead: `assert!(!a.is_empty(), \"with expansion {}\", one!());`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:73:5"}, {"sha": "590ad63c90be3a8972c0cd6568ec59f5f1623a22", "filename": "src/tools/clippy/tests/ui/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_doc.rs?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -1,3 +1,4 @@\n+// needs-asm-support\n // aux-build: proc_macro_with_span.rs\n \n #![warn(clippy::missing_docs_in_private_items)]"}, {"sha": "d3bef28bf64c6707fffeb0b7ef853d49517742f2", "filename": "src/tools/clippy/tests/ui/missing_doc.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/657f246812ab2684e3c3954b1c77f98fd59e0b21/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_doc.stderr?ref=657f246812ab2684e3c3954b1c77f98fd59e0b21", "patch": "@@ -1,43 +1,43 @@\n error: missing documentation for a type alias\n-  --> $DIR/missing_doc.rs:15:1\n+  --> $DIR/missing_doc.rs:16:1\n    |\n LL | type Typedef = String;\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::missing-docs-in-private-items` implied by `-D warnings`\n \n error: missing documentation for a type alias\n-  --> $DIR/missing_doc.rs:16:1\n+  --> $DIR/missing_doc.rs:17:1\n    |\n LL | pub type PubTypedef = String;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a module\n-  --> $DIR/missing_doc.rs:18:1\n+  --> $DIR/missing_doc.rs:19:1\n    |\n LL | mod module_no_dox {}\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a module\n-  --> $DIR/missing_doc.rs:19:1\n+  --> $DIR/missing_doc.rs:20:1\n    |\n LL | pub mod pub_module_no_dox {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/missing_doc.rs:23:1\n+  --> $DIR/missing_doc.rs:24:1\n    |\n LL | pub fn foo2() {}\n    | ^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/missing_doc.rs:24:1\n+  --> $DIR/missing_doc.rs:25:1\n    |\n LL | fn foo3() {}\n    | ^^^^^^^^^^^^\n \n error: missing documentation for an enum\n-  --> $DIR/missing_doc.rs:38:1\n+  --> $DIR/missing_doc.rs:39:1\n    |\n LL | / enum Baz {\n LL | |     BazA { a: isize, b: isize },\n@@ -46,75 +46,75 @@ LL | | }\n    | |_^\n \n error: missing documentation for a variant\n-  --> $DIR/missing_doc.rs:39:5\n+  --> $DIR/missing_doc.rs:40:5\n    |\n LL |     BazA { a: isize, b: isize },\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a struct field\n-  --> $DIR/missing_doc.rs:39:12\n+  --> $DIR/missing_doc.rs:40:12\n    |\n LL |     BazA { a: isize, b: isize },\n    |            ^^^^^^^^\n \n error: missing documentation for a struct field\n-  --> $DIR/missing_doc.rs:39:22\n+  --> $DIR/missing_doc.rs:40:22\n    |\n LL |     BazA { a: isize, b: isize },\n    |                      ^^^^^^^^\n \n error: missing documentation for a variant\n-  --> $DIR/missing_doc.rs:40:5\n+  --> $DIR/missing_doc.rs:41:5\n    |\n LL |     BarB,\n    |     ^^^^\n \n error: missing documentation for an enum\n-  --> $DIR/missing_doc.rs:43:1\n+  --> $DIR/missing_doc.rs:44:1\n    |\n LL | / pub enum PubBaz {\n LL | |     PubBazA { a: isize },\n LL | | }\n    | |_^\n \n error: missing documentation for a variant\n-  --> $DIR/missing_doc.rs:44:5\n+  --> $DIR/missing_doc.rs:45:5\n    |\n LL |     PubBazA { a: isize },\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a struct field\n-  --> $DIR/missing_doc.rs:44:15\n+  --> $DIR/missing_doc.rs:45:15\n    |\n LL |     PubBazA { a: isize },\n    |               ^^^^^^^^\n \n error: missing documentation for a constant\n-  --> $DIR/missing_doc.rs:64:1\n+  --> $DIR/missing_doc.rs:65:1\n    |\n LL | const FOO: u32 = 0;\n    | ^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a constant\n-  --> $DIR/missing_doc.rs:71:1\n+  --> $DIR/missing_doc.rs:72:1\n    |\n LL | pub const FOO4: u32 = 0;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a static\n-  --> $DIR/missing_doc.rs:73:1\n+  --> $DIR/missing_doc.rs:74:1\n    |\n LL | static BAR: u32 = 0;\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a static\n-  --> $DIR/missing_doc.rs:80:1\n+  --> $DIR/missing_doc.rs:81:1\n    |\n LL | pub static BAR4: u32 = 0;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a module\n-  --> $DIR/missing_doc.rs:82:1\n+  --> $DIR/missing_doc.rs:83:1\n    |\n LL | / mod internal_impl {\n LL | |     /// dox\n@@ -126,31 +126,31 @@ LL | | }\n    | |_^\n \n error: missing documentation for a function\n-  --> $DIR/missing_doc.rs:85:5\n+  --> $DIR/missing_doc.rs:86:5\n    |\n LL |     pub fn undocumented1() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/missing_doc.rs:86:5\n+  --> $DIR/missing_doc.rs:87:5\n    |\n LL |     pub fn undocumented2() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/missing_doc.rs:87:5\n+  --> $DIR/missing_doc.rs:88:5\n    |\n LL |     fn undocumented3() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/missing_doc.rs:92:9\n+  --> $DIR/missing_doc.rs:93:9\n    |\n LL |         pub fn also_undocumented1() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/missing_doc.rs:93:9\n+  --> $DIR/missing_doc.rs:94:9\n    |\n LL |         fn also_undocumented2() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}