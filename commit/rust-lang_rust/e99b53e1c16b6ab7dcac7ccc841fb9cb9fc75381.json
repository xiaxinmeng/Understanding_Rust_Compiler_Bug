{"sha": "e99b53e1c16b6ab7dcac7ccc841fb9cb9fc75381", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5OWI1M2UxYzE2YjZhYjdkY2FjN2NjYzg0MWZiOWNiOWZjNzUzODE=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-07-26T08:36:03Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-07-26T08:36:03Z"}, "message": "use a HashSet instead of a Vec for breadcrumbs", "tree": {"sha": "3502f6fd3c689635131ea6ba1aff3a2061cf9fc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3502f6fd3c689635131ea6ba1aff3a2061cf9fc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e99b53e1c16b6ab7dcac7ccc841fb9cb9fc75381", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e99b53e1c16b6ab7dcac7ccc841fb9cb9fc75381", "html_url": "https://github.com/rust-lang/rust/commit/e99b53e1c16b6ab7dcac7ccc841fb9cb9fc75381", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e99b53e1c16b6ab7dcac7ccc841fb9cb9fc75381/comments", "author": null, "committer": null, "parents": [{"sha": "7f9953b9745dec2d67ed735dff461795bd48863a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f9953b9745dec2d67ed735dff461795bd48863a", "html_url": "https://github.com/rust-lang/rust/commit/7f9953b9745dec2d67ed735dff461795bd48863a"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "24e67860998d5a4bea2002966bb11f87b94f49d6", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e99b53e1c16b6ab7dcac7ccc841fb9cb9fc75381/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99b53e1c16b6ab7dcac7ccc841fb9cb9fc75381/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=e99b53e1c16b6ab7dcac7ccc841fb9cb9fc75381", "patch": "@@ -14,6 +14,7 @@ use middle::infer;\n use middle::region;\n use middle::subst::{self, Subst};\n use middle::ty::{self, Ty};\n+use util::nodemap::FnvHashSet;\n \n use syntax::ast;\n use syntax::codemap::{self, Span};\n@@ -268,7 +269,7 @@ pub fn check_safety_of_destructor_if_necessary<'a, 'tcx>(rcx: &mut Rcx<'a, 'tcx>\n             rcx: rcx,\n             span: span,\n             parent_scope: parent_scope,\n-            breadcrumbs: vec![]\n+            breadcrumbs: FnvHashSet()\n         },\n         TypeContext::Root,\n         typ,\n@@ -331,7 +332,7 @@ enum TypeContext {\n struct DropckContext<'a, 'b: 'a, 'tcx: 'b> {\n     rcx: &'a mut Rcx<'b, 'tcx>,\n     /// types that have already been traversed\n-    breadcrumbs: Vec<Ty<'tcx>>,\n+    breadcrumbs: FnvHashSet<Ty<'tcx>>,\n     /// span for error reporting\n     span: Span,\n     /// the scope reachable dtorck types must outlive\n@@ -358,15 +359,13 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'b, 'tcx>(\n \n     let opt_phantom_data_def_id = tcx.lang_items.phantom_data();\n \n-    // FIXME(arielb1): don't be O(n^2)\n-    if cx.breadcrumbs.contains(&ty) {\n+    if !cx.breadcrumbs.insert(ty) {\n         debug!(\"iterate_over_potentially_unsafe_regions_in_type \\\n                {}ty: {} scope: {:?} - cached\",\n                (0..depth).map(|_| ' ').collect::<String>(),\n                ty, cx.parent_scope);\n         return Ok(()); // we already visited this type\n     }\n-    cx.breadcrumbs.push(ty);\n     debug!(\"iterate_over_potentially_unsafe_regions_in_type \\\n            {}ty: {} scope: {:?}\",\n            (0..depth).map(|_| ' ').collect::<String>(),"}]}