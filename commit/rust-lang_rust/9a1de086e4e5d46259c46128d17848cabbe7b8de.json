{"sha": "9a1de086e4e5d46259c46128d17848cabbe7b8de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMWRlMDg2ZTRlNWQ0NjI1OWM0NjEyOGQxNzg0OGNhYmJlN2I4ZGU=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-12T12:14:03Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-13T08:09:40Z"}, "message": "rustc/driver: improve/remove allocations", "tree": {"sha": "2f2db8f0f889bd6bfc803ce296506ec3d2f15ea4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f2db8f0f889bd6bfc803ce296506ec3d2f15ea4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a1de086e4e5d46259c46128d17848cabbe7b8de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a1de086e4e5d46259c46128d17848cabbe7b8de", "html_url": "https://github.com/rust-lang/rust/commit/9a1de086e4e5d46259c46128d17848cabbe7b8de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a1de086e4e5d46259c46128d17848cabbe7b8de/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39753c89737265a15497b496e621bd9f5bed2f3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/39753c89737265a15497b496e621bd9f5bed2f3e", "html_url": "https://github.com/rust-lang/rust/commit/39753c89737265a15497b496e621bd9f5bed2f3e"}], "stats": {"total": 62, "additions": 30, "deletions": 32}, "files": [{"sha": "248cf549d81e6fece663dfafa480fb20d5b750e9", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a1de086e4e5d46259c46128d17848cabbe7b8de/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a1de086e4e5d46259c46128d17848cabbe7b8de/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=9a1de086e4e5d46259c46128d17848cabbe7b8de", "patch": "@@ -1586,9 +1586,8 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<c\n         base.dedup();\n     }\n \n-    base.into_iter()\n-        .filter(|crate_type| {\n-            let res = !::rustc_codegen_utils::link::invalid_output_for_target(session, *crate_type);\n+    base.retain(|crate_type| {\n+        let res = !::rustc_codegen_utils::link::invalid_output_for_target(session, *crate_type);\n \n             if !res {\n                 session.warn(&format!(\n@@ -1597,9 +1596,10 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<c\n                 ));\n             }\n \n-            res\n-        })\n-        .collect()\n+        res\n+    });\n+\n+    base\n }\n \n pub fn compute_crate_disambiguator(session: &Session) -> CrateDisambiguator {"}, {"sha": "8d886d8c040bb748fc864302a9a68df8834e3353", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9a1de086e4e5d46259c46128d17848cabbe7b8de/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a1de086e4e5d46259c46128d17848cabbe7b8de/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=9a1de086e4e5d46259c46128d17848cabbe7b8de", "patch": "@@ -137,9 +137,7 @@ pub mod target_features {\n                              codegen_backend: &dyn CodegenBackend) {\n         let tf = Symbol::intern(\"target_feature\");\n \n-        for feat in codegen_backend.target_features(sess) {\n-            cfg.insert((tf, Some(feat)));\n-        }\n+        cfg.extend(codegen_backend.target_features(sess).into_iter().map(|feat| (tf, Some(feat))));\n \n         if sess.crt_static_feature() {\n             cfg.insert((tf, Some(Symbol::intern(\"crt-static\"))));\n@@ -997,7 +995,7 @@ impl RustcDefaultCalls {\n                          input: &Input)\n                          -> Compilation {\n         let r = matches.opt_strs(\"Z\");\n-        if r.contains(&(\"ls\".to_string())) {\n+        if r.iter().any(|s| *s == \"ls\") {\n             match input {\n                 &Input::File(ref ifile) => {\n                     let path = &(*ifile);\n@@ -1085,8 +1083,7 @@ impl RustcDefaultCalls {\n                     let allow_unstable_cfg = UnstableFeatures::from_environment()\n                         .is_nightly_build();\n \n-                    let mut cfgs = Vec::new();\n-                    for &(name, ref value) in sess.parse_sess.config.iter() {\n+                    let mut cfgs = sess.parse_sess.config.iter().filter_map(|&(name, ref value)| {\n                         let gated_cfg = GatedCfg::gate(&ast::MetaItem {\n                             ident: ast::Path::from_ident(ast::Ident::with_empty_ctxt(name)),\n                             node: ast::MetaItemKind::Word,\n@@ -1105,16 +1102,16 @@ impl RustcDefaultCalls {\n                         let value = value.as_ref().map(|s| s.as_ref());\n                         if name != \"target_feature\" || value != Some(\"crt-static\") {\n                             if !allow_unstable_cfg && gated_cfg.is_some() {\n-                                continue;\n+                                return None\n                             }\n                         }\n \n-                        cfgs.push(if let Some(value) = value {\n-                            format!(\"{}=\\\"{}\\\"\", name, value)\n+                        if let Some(value) = value {\n+                            Some(format!(\"{}=\\\"{}\\\"\", name, value))\n                         } else {\n-                            name.to_string()\n-                        });\n-                    }\n+                            Some(name.to_string())\n+                        }\n+                    }).collect::<Vec<String>>();\n \n                     cfgs.sort();\n                     for cfg in cfgs {\n@@ -1177,7 +1174,7 @@ fn usage(verbose: bool, include_unstable_options: bool) {\n     for option in groups.iter().filter(|x| include_unstable_options || x.is_stable()) {\n         (option.apply)(&mut options);\n     }\n-    let message = \"Usage: rustc [OPTIONS] INPUT\".to_string();\n+    let message = \"Usage: rustc [OPTIONS] INPUT\";\n     let nightly_help = if nightly_options::is_nightly_build() {\n         \"\\n    -Z help             Print internal options for debugging rustc\"\n     } else {\n@@ -1192,7 +1189,7 @@ fn usage(verbose: bool, include_unstable_options: bool) {\n     -C help             Print codegen options\n     -W help             \\\n               Print 'lint' options and default settings{}{}\\n\",\n-             options.usage(&message),\n+             options.usage(message),\n              nightly_help,\n              verbose_help);\n }\n@@ -1463,7 +1460,7 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n                    \"the --no-stack-check flag is deprecated and does nothing\");\n     }\n \n-    if cg_flags.contains(&\"passes=list\".to_string()) {\n+    if cg_flags.iter().any(|x| *x == \"passes=list\") {\n         get_codegen_sysroot(\"llvm\")().print_passes();\n         return None;\n     }"}, {"sha": "8c065038d4b69f3bf2676c81aef4f6fd836d200a", "filename": "src/librustc_driver/profile/trace.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9a1de086e4e5d46259c46128d17848cabbe7b8de/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a1de086e4e5d46259c46128d17848cabbe7b8de/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs?ref=9a1de086e4e5d46259c46128d17848cabbe7b8de", "patch": "@@ -89,18 +89,18 @@ fn html_of_duration(_start: &Instant, dur: &Duration) -> (String, String) {\n     )\n }\n \n-fn html_of_fraction(frac: f64) -> (String, String) {\n+fn html_of_fraction(frac: f64) -> (String, &'static str) {\n     let css = {\n-        if       frac > 0.50  { \"frac-50\".to_string() }\n-        else if  frac > 0.40  { \"frac-40\".to_string() }\n-        else if  frac > 0.30  { \"frac-30\".to_string() }\n-        else if  frac > 0.20  { \"frac-20\".to_string() }\n-        else if  frac > 0.10  { \"frac-10\".to_string() }\n-        else if  frac > 0.05  { \"frac-05\".to_string() }\n-        else if  frac > 0.02  { \"frac-02\".to_string() }\n-        else if  frac > 0.01  { \"frac-01\".to_string() }\n-        else if  frac > 0.001 { \"frac-001\".to_string() }\n-        else                  { \"frac-0\".to_string() }\n+        if       frac > 0.50  { \"frac-50\" }\n+        else if  frac > 0.40  { \"frac-40\" }\n+        else if  frac > 0.30  { \"frac-30\" }\n+        else if  frac > 0.20  { \"frac-20\" }\n+        else if  frac > 0.10  { \"frac-10\" }\n+        else if  frac > 0.05  { \"frac-05\" }\n+        else if  frac > 0.02  { \"frac-02\" }\n+        else if  frac > 0.01  { \"frac-01\" }\n+        else if  frac > 0.001 { \"frac-001\" }\n+        else                  { \"frac-0\" }\n     };\n     let percent = frac * 100.0;\n     if percent > 0.1 { (format!(\"{:.1}%\", percent), css) }\n@@ -148,6 +148,7 @@ fn write_traces_rec(file: &mut File, traces: &[Rec], total: Duration, depth: usi\n }\n \n fn compute_counts_rec(counts: &mut FxHashMap<String,QueryMetric>, traces: &[Rec]) {\n+    counts.reserve(traces.len());\n     for t in traces.iter() {\n         match t.effect {\n             Effect::TimeBegin(ref msg) => {"}]}