{"sha": "28a13ec8d76ba9a4f9645991e1260882a3b7dc68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4YTEzZWM4ZDc2YmE5YTRmOTY0NTk5MWUxMjYwODgyYTNiN2RjNjg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-13T22:23:52Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-15T19:19:16Z"}, "message": "core::rt: Make push_bytes raise read_error on EOF", "tree": {"sha": "56f71c53cd8f478c2be4f6b663645b8b834c8a8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56f71c53cd8f478c2be4f6b663645b8b834c8a8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28a13ec8d76ba9a4f9645991e1260882a3b7dc68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28a13ec8d76ba9a4f9645991e1260882a3b7dc68", "html_url": "https://github.com/rust-lang/rust/commit/28a13ec8d76ba9a4f9645991e1260882a3b7dc68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28a13ec8d76ba9a4f9645991e1260882a3b7dc68/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c1f11e649c52135435f6ea747426568edac56a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c1f11e649c52135435f6ea747426568edac56a2", "html_url": "https://github.com/rust-lang/rust/commit/1c1f11e649c52135435f6ea747426568edac56a2"}], "stats": {"total": 64, "additions": 45, "deletions": 19}, "files": [{"sha": "addafcf1d99c1fd7a2926c42711e64be387f7148", "filename": "src/libcore/rt/io/extensions.rs", "status": "modified", "additions": 32, "deletions": 18, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/28a13ec8d76ba9a4f9645991e1260882a3b7dc68/src%2Flibcore%2Frt%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a13ec8d76ba9a4f9645991e1260882a3b7dc68/src%2Flibcore%2Frt%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fextensions.rs?ref=28a13ec8d76ba9a4f9645991e1260882a3b7dc68", "patch": "@@ -14,7 +14,7 @@\n // XXX: Iteration should probably be considered separately\n \n use vec;\n-use rt::io::Reader;\n+use rt::io::{Reader, read_error, standard_error, EndOfFile};\n use option::{Option, Some, None};\n use unstable::finally::Finally;\n use util;\n@@ -36,16 +36,19 @@ pub trait ReaderUtil {\n     ///\n     /// # Failure\n     ///\n-    /// Raises the same conditions as `read`. Returns `false` if\n-    /// the condition is handled.\n-    fn push_bytes(&mut self, buf: &mut ~[u8], len: uint) -> bool;\n+    /// Raises the same conditions as `read`. Additionally raises `read_error`\n+    /// on EOF. If `read_error` is handled then `push_bytes` returns without\n+    /// pushing any bytes onto `buf` - that is, `buf` has the same length\n+    /// upon exit as it did on entry.\n+    fn push_bytes(&mut self, buf: &mut ~[u8], len: uint);\n \n-    /// Reads `len` bytes and gives you back a new vector\n+    /// Reads `len` bytes and gives you back a new vector of length `len`\n     ///\n     /// # Failure\n     ///\n-    /// Raises the same conditions as the `read` method. May return\n-    /// less than the requested number of bytes on error or EOF.\n+    /// Raises the same conditions as `read`. Additionally raises `read_error`\n+    /// on EOF. If `read_error` is handled then the returned vector has\n+    /// length 0.\n     fn read_bytes(&mut self, len: uint) -> ~[u8];\n \n     /// Reads all remaining bytes from the stream.\n@@ -71,11 +74,10 @@ impl<T: Reader> ReaderUtil for T {\n         }\n     }\n \n-    fn push_bytes(&mut self, buf: &mut ~[u8], len: uint) -> bool {\n+    fn push_bytes(&mut self, buf: &mut ~[u8], len: uint) {\n         unsafe {\n             let start_len = buf.len();\n             let mut total_read = 0;\n-            let mut eof = false;\n \n             vec::reserve_at_least(buf, start_len + len);\n             vec::raw::set_len(buf, start_len + len);\n@@ -88,16 +90,16 @@ impl<T: Reader> ReaderUtil for T {\n                             total_read += nread;\n                         }\n                         None => {\n-                            eof = true;\n+                            read_error::cond.raise(standard_error(EndOfFile));\n+                            // Reset the vector length as though we didn't read anything\n+                            total_read = 0;\n                             break;\n                         }\n                     }\n                 }\n             }).finally {\n                 vec::raw::set_len(buf, start_len + total_read);\n             }\n-\n-            return !eof;\n         }\n     }\n \n@@ -407,11 +409,20 @@ mod test {\n         assert!(bytes == ~[10, 11, 12, 13]);\n     }\n \n+    #[test]\n+    fn read_bytes_eof() {\n+        let mut reader = MemReader::new(~[10, 11]);\n+        do read_error::cond.trap(|_| {\n+        }).in {\n+            assert!(reader.read_bytes(4) == ~[]);\n+        }\n+    }\n+\n     #[test]\n     fn push_bytes() {\n         let mut reader = MemReader::new(~[10, 11, 12, 13]);\n         let mut buf = ~[8, 9];\n-        assert!(reader.push_bytes(&mut buf, 4));\n+        reader.push_bytes(&mut buf, 4);\n         assert!(buf == ~[8, 9, 10, 11, 12, 13]);\n     }\n \n@@ -434,16 +445,19 @@ mod test {\n             }\n         };\n         let mut buf = ~[8, 9];\n-        assert!(reader.push_bytes(&mut buf, 4));\n+        reader.push_bytes(&mut buf, 4);\n         assert!(buf == ~[8, 9, 10, 11, 12, 13]);\n     }\n \n     #[test]\n     fn push_bytes_eof() {\n         let mut reader = MemReader::new(~[10, 11]);\n         let mut buf = ~[8, 9];\n-        assert!(!reader.push_bytes(&mut buf, 4));\n-        assert!(buf == ~[8, 9, 10, 11]);\n+        do read_error::cond.trap(|_| {\n+        }).in {\n+            reader.push_bytes(&mut buf, 4);\n+            assert!(buf == ~[8, 9]);\n+        }\n     }\n \n     #[test]\n@@ -464,9 +478,9 @@ mod test {\n         };\n         let mut buf = ~[8, 9];\n         do read_error::cond.trap(|_| { } ).in {\n-            assert!(!reader.push_bytes(&mut buf, 4));\n+            reader.push_bytes(&mut buf, 4);\n         }\n-        assert!(buf == ~[8, 9, 10]);\n+        assert!(buf == ~[8, 9]);\n     }\n \n     #[test]"}, {"sha": "7e611a0b8bc91221ea0f3ca04384c04896fb1565", "filename": "src/libcore/rt/io/mod.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/28a13ec8d76ba9a4f9645991e1260882a3b7dc68/src%2Flibcore%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a13ec8d76ba9a4f9645991e1260882a3b7dc68/src%2Flibcore%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fmod.rs?ref=28a13ec8d76ba9a4f9645991e1260882a3b7dc68", "patch": "@@ -260,8 +260,11 @@ pub use self::net::tcp::TcpStream;\n pub use self::net::udp::UdpStream;\n \n // Some extension traits that all Readers and Writers get.\n+#[cfg(not(stage0))] // Requires condition! fixes\n pub use self::extensions::ReaderUtil;\n+#[cfg(not(stage0))] // Requires condition! fixes\n pub use self::extensions::ReaderByteConversions;\n+#[cfg(not(stage0))] // Requires condition! fixes\n pub use self::extensions::WriterByteConversions;\n \n /// Synchronous, non-blocking file I/O.\n@@ -295,6 +298,7 @@ pub mod flate;\n pub mod comm_adapters;\n \n /// Extension traits\n+#[cfg(not(stage0))] // Requires condition! fixes\n mod extensions;\n \n /// Non-I/O things needed by the I/O module\n@@ -373,7 +377,8 @@ pub trait Reader {\n     ///\n     /// * Should raise error on eof\n     /// * If the condition is handled it should still return the bytes read,\n-    ///   in which case there's no need to return Option\n+    ///   in which case there's no need to return Option - but then you *have*\n+    ///   to install a handler to detect eof.\n     ///\n     /// This doesn't take a `len` argument like the old `read`.\n     /// Will people often need to slice their vectors to call this\n@@ -482,6 +487,13 @@ pub fn standard_error(kind: IoErrorKind) -> IoError {\n                 detail: None\n             }\n         }\n+        EndOfFile => {\n+            IoError {\n+                kind: EndOfFile,\n+                desc: \"End of file\",\n+                detail: None\n+            }\n+        }\n         _ => fail!()\n     }\n }"}]}