{"sha": "a81804b4d5f222f94758139b504aa2570528f9f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MTgwNGI0ZDVmMjIyZjk0NzU4MTM5YjUwNGFhMjU3MDUyOGY5ZjE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-30T23:25:32Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-12-02T18:56:34Z"}, "message": "syntax: Introduce a struct `MacArgs` for macro arguments", "tree": {"sha": "74b1326371f305dfe4e1ca85a559623740266ed6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74b1326371f305dfe4e1ca85a559623740266ed6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a81804b4d5f222f94758139b504aa2570528f9f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a81804b4d5f222f94758139b504aa2570528f9f1", "html_url": "https://github.com/rust-lang/rust/commit/a81804b4d5f222f94758139b504aa2570528f9f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a81804b4d5f222f94758139b504aa2570528f9f1/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdc0011561c6365c596dfd8fa1ef388162bc89c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdc0011561c6365c596dfd8fa1ef388162bc89c7", "html_url": "https://github.com/rust-lang/rust/commit/fdc0011561c6365c596dfd8fa1ef388162bc89c7"}], "stats": {"total": 304, "additions": 192, "deletions": 112}, "files": [{"sha": "6cfc6cf226fa55681cfffd16ca6d26b74d928e8c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=a81804b4d5f222f94758139b504aa2570528f9f1", "patch": "@@ -1453,7 +1453,7 @@ impl EarlyLintPass for KeywordIdents {\n         self.check_tokens(cx, mac_def.stream());\n     }\n     fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &ast::Mac) {\n-        self.check_tokens(cx, mac.tts.clone().into());\n+        self.check_tokens(cx, mac.args.inner_tokens());\n     }\n     fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: ast::Ident) {\n         self.check_ident_token(cx, UnderMacro(false), ident);"}, {"sha": "a0f535a4b954d8cbd3a8cacdf2a3af6a5c39c5a5", "filename": "src/librustc_parse/parser/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fattr.rs?ref=a81804b4d5f222f94758139b504aa2570528f9f1", "patch": "@@ -244,7 +244,7 @@ impl<'a> Parser<'a> {\n         Ok(attrs)\n     }\n \n-    fn parse_unsuffixed_lit(&mut self) -> PResult<'a, ast::Lit> {\n+    pub(super) fn parse_unsuffixed_lit(&mut self) -> PResult<'a, ast::Lit> {\n         let lit = self.parse_lit()?;\n         debug!(\"checking if {:?} is unusuffixed\", lit);\n "}, {"sha": "a6629aef1eeff0bfb7d48b9906e4983b83293215", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=a81804b4d5f222f94758139b504aa2570528f9f1", "patch": "@@ -922,12 +922,11 @@ impl<'a> Parser<'a> {\n                     // `!`, as an operator, is prefix, so we know this isn't that.\n                     if self.eat(&token::Not) {\n                         // MACRO INVOCATION expression\n-                        let (delim, tts) = self.expect_delimited_token_tree()?;\n+                        let args = self.parse_mac_args()?;\n                         hi = self.prev_span;\n                         ex = ExprKind::Mac(Mac {\n                             path,\n-                            tts,\n-                            delim,\n+                            args,\n                             span: lo.to(hi),\n                             prior_type_ascription: self.last_type_ascription,\n                         });"}, {"sha": "9bf5ae3cc5af00dac809edb54de2961509ed6864", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=a81804b4d5f222f94758139b504aa2570528f9f1", "patch": "@@ -8,7 +8,7 @@ use syntax::ast::{ItemKind, ImplItem, ImplItemKind, TraitItem, TraitItemKind, Us\n use syntax::ast::{PathSegment, IsAuto, Constness, IsAsync, Unsafety, Defaultness, Extern, StrLit};\n use syntax::ast::{Visibility, VisibilityKind, Mutability, FnHeader, ForeignItem, ForeignItemKind};\n use syntax::ast::{Ty, TyKind, Generics, TraitRef, EnumDef, Variant, VariantData, StructField};\n-use syntax::ast::{Mac, MacDelimiter, Block, BindingMode, FnDecl, FnSig, SelfKind, Param};\n+use syntax::ast::{Mac, Block, BindingMode, FnDecl, FnSig, SelfKind, Param};\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::ThinVec;\n@@ -437,16 +437,15 @@ impl<'a> Parser<'a> {\n             // Item macro\n             let path = self.parse_path(PathStyle::Mod)?;\n             self.expect(&token::Not)?;\n-            let (delim, tts) = self.expect_delimited_token_tree()?;\n-            if delim != MacDelimiter::Brace && !self.eat(&token::Semi) {\n+            let args = self.parse_mac_args()?;\n+            if args.need_semicolon() && !self.eat(&token::Semi) {\n                 self.report_invalid_macro_expansion_item();\n             }\n \n             let hi = self.prev_span;\n             let mac = Mac {\n                 path,\n-                tts,\n-                delim,\n+                args,\n                 span: mac_lo.to(hi),\n                 prior_type_ascription: self.last_type_ascription,\n             };\n@@ -518,15 +517,14 @@ impl<'a> Parser<'a> {\n             *at_end = true;\n \n             // eat a matched-delimiter token tree:\n-            let (delim, tts) = self.expect_delimited_token_tree()?;\n-            if delim != MacDelimiter::Brace {\n+            let args = self.parse_mac_args()?;\n+            if args.need_semicolon() {\n                 self.expect_semi()?;\n             }\n \n             Ok(Some(Mac {\n                 path,\n-                tts,\n-                delim,\n+                args,\n                 span: lo.to(self.prev_span),\n                 prior_type_ascription: self.last_type_ascription,\n             }))\n@@ -1660,12 +1658,12 @@ impl<'a> Parser<'a> {\n             self.bump();\n \n             let ident = self.parse_ident()?;\n-            let (delim, tokens) = self.expect_delimited_token_tree()?;\n-            if delim != MacDelimiter::Brace && !self.eat(&token::Semi) {\n+            let args = self.parse_mac_args()?;\n+            if args.need_semicolon() && !self.eat(&token::Semi) {\n                 self.report_invalid_macro_expansion_item();\n             }\n \n-            (ident, ast::MacroDef { tokens, legacy: true })\n+            (ident, ast::MacroDef { tokens: args.inner_tokens(), legacy: true })\n         } else {\n             return Ok(None);\n         };"}, {"sha": "77bbf8bb941f8ea51b5106c149764087a6ea9ba3", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 43, "deletions": 21, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=a81804b4d5f222f94758139b504aa2570528f9f1", "patch": "@@ -16,7 +16,7 @@ use crate::lexer::UnmatchedBrace;\n \n use syntax::ast::{\n     self, DUMMY_NODE_ID, AttrStyle, Attribute, CrateSugar, Extern, Ident, StrLit,\n-    IsAsync, MacDelimiter, Mutability, Visibility, VisibilityKind, Unsafety,\n+    IsAsync, MacArgs, MacDelimiter, Mutability, Visibility, VisibilityKind, Unsafety,\n };\n \n use syntax::print::pprust;\n@@ -1010,27 +1010,49 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    fn expect_delimited_token_tree(&mut self) -> PResult<'a, (MacDelimiter, TokenStream)> {\n-        let delim = match self.token.kind {\n-            token::OpenDelim(delim) => delim,\n-            _ => {\n-                let msg = \"expected open delimiter\";\n-                let mut err = self.fatal(msg);\n-                err.span_label(self.token.span, msg);\n-                return Err(err)\n+    fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {\n+        self.parse_mac_args_common(true)\n+    }\n+\n+    #[allow(dead_code)]\n+    fn parse_attr_args(&mut self) -> PResult<'a, P<MacArgs>> {\n+        self.parse_mac_args_common(false)\n+    }\n+\n+    fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, P<MacArgs>> {\n+        Ok(P(if self.check(&token::OpenDelim(DelimToken::Paren)) ||\n+                       self.check(&token::OpenDelim(DelimToken::Bracket)) ||\n+                       self.check(&token::OpenDelim(DelimToken::Brace)) {\n+            match self.parse_token_tree() {\n+                TokenTree::Delimited(dspan, delim, tokens) =>\n+                    MacArgs::Delimited(dspan, MacDelimiter::from_token(delim), tokens),\n+                _ => unreachable!(),\n             }\n-        };\n-        let tts = match self.parse_token_tree() {\n-            TokenTree::Delimited(_, _, tts) => tts,\n-            _ => unreachable!(),\n-        };\n-        let delim = match delim {\n-            token::Paren => MacDelimiter::Parenthesis,\n-            token::Bracket => MacDelimiter::Bracket,\n-            token::Brace => MacDelimiter::Brace,\n-            token::NoDelim => self.bug(\"unexpected no delimiter\"),\n-        };\n-        Ok((delim, tts.into()))\n+        } else if !delimited_only {\n+            if self.eat(&token::Eq) {\n+                let eq_span = self.prev_span;\n+                let mut is_interpolated_expr = false;\n+                if let token::Interpolated(nt) = &self.token.kind {\n+                    if let token::NtExpr(..) = **nt {\n+                        is_interpolated_expr = true;\n+                    }\n+                }\n+                let token_tree = if is_interpolated_expr {\n+                    // We need to accept arbitrary interpolated expressions to continue\n+                    // supporting things like `doc = $expr` that work on stable.\n+                    // Non-literal interpolated expressions are rejected after expansion.\n+                    self.parse_token_tree()\n+                } else {\n+                    self.parse_unsuffixed_lit()?.token_tree()\n+                };\n+\n+                MacArgs::Eq(eq_span, token_tree.into())\n+            } else {\n+                MacArgs::Empty\n+            }\n+        } else {\n+            return self.unexpected();\n+        }))\n     }\n \n     fn parse_or_use_outer_attributes("}, {"sha": "c16b5f5574afcef634811627015a674f951eb83d", "filename": "src/librustc_parse/parser/pat.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpat.rs?ref=a81804b4d5f222f94758139b504aa2570528f9f1", "patch": "@@ -595,11 +595,10 @@ impl<'a> Parser<'a> {\n     /// Parse macro invocation\n     fn parse_pat_mac_invoc(&mut self, lo: Span, path: Path) -> PResult<'a, PatKind> {\n         self.bump();\n-        let (delim, tts) = self.expect_delimited_token_tree()?;\n+        let args = self.parse_mac_args()?;\n         let mac = Mac {\n             path,\n-            tts,\n-            delim,\n+            args,\n             span: lo.to(self.prev_span),\n             prior_type_ascription: self.last_type_ascription,\n         };"}, {"sha": "68c85ad8abfb3f9c136e8b1ea9ab2d7408edc241", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=a81804b4d5f222f94758139b504aa2570528f9f1", "patch": "@@ -10,7 +10,7 @@ use syntax::ThinVec;\n use syntax::ptr::P;\n use syntax::ast;\n use syntax::ast::{DUMMY_NODE_ID, Stmt, StmtKind, Local, Block, BlockCheckMode, Expr, ExprKind};\n-use syntax::ast::{Attribute, AttrStyle, VisibilityKind, MacStmtStyle, Mac, MacDelimiter};\n+use syntax::ast::{Attribute, AttrStyle, VisibilityKind, MacStmtStyle, Mac};\n use syntax::util::classify;\n use syntax::token;\n use syntax::source_map::{respan, Span};\n@@ -93,23 +93,23 @@ impl<'a> Parser<'a> {\n                 }));\n             }\n \n-            let (delim, tts) = self.expect_delimited_token_tree()?;\n+            let args = self.parse_mac_args()?;\n+            let delim = args.delim();\n             let hi = self.prev_span;\n \n-            let style = if delim == MacDelimiter::Brace {\n+            let style = if delim == token::Brace {\n                 MacStmtStyle::Braces\n             } else {\n                 MacStmtStyle::NoBraces\n             };\n \n             let mac = Mac {\n                 path,\n-                tts,\n-                delim,\n+                args,\n                 span: lo.to(hi),\n                 prior_type_ascription: self.last_type_ascription,\n             };\n-            let kind = if delim == MacDelimiter::Brace ||\n+            let kind = if delim == token::Brace ||\n                           self.token == token::Semi || self.token == token::Eof {\n                 StmtKind::Mac(P((mac, style, attrs.into())))\n             }"}, {"sha": "802bef525dbaa2dff12ed2a5ed210931f2cc23c0", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=a81804b4d5f222f94758139b504aa2570528f9f1", "patch": "@@ -177,11 +177,10 @@ impl<'a> Parser<'a> {\n             let path = self.parse_path(PathStyle::Type)?;\n             if self.eat(&token::Not) {\n                 // Macro invocation in type position\n-                let (delim, tts) = self.expect_delimited_token_tree()?;\n+                let args = self.parse_mac_args()?;\n                 let mac = Mac {\n                     path,\n-                    tts,\n-                    delim,\n+                    args,\n                     span: lo.to(self.prev_span),\n                     prior_type_ascription: self.last_type_ascription,\n                 };"}, {"sha": "21126f8301a2a49501c0e83af1865f7b6fdb3d07", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 69, "deletions": 15, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=a81804b4d5f222f94758139b504aa2570528f9f1", "patch": "@@ -27,7 +27,7 @@ pub use syntax_pos::symbol::{Ident, Symbol as Name};\n use crate::ptr::P;\n use crate::source_map::{dummy_spanned, respan, Spanned};\n use crate::token::{self, DelimToken};\n-use crate::tokenstream::TokenStream;\n+use crate::tokenstream::{TokenStream, TokenTree, DelimSpan};\n \n use syntax_pos::symbol::{kw, sym, Symbol};\n use syntax_pos::{Span, DUMMY_SP, ExpnId};\n@@ -40,6 +40,7 @@ use rustc_index::vec::Idx;\n use rustc_serialize::{self, Decoder, Encoder};\n use rustc_macros::HashStable_Generic;\n \n+use std::iter;\n use std::fmt;\n \n #[cfg(test)]\n@@ -1372,34 +1373,78 @@ pub enum Movability {\n     Movable,\n }\n \n-/// Represents a macro invocation. The `Path` indicates which macro\n-/// is being invoked, and the vector of token-trees contains the source\n-/// of the macro invocation.\n-///\n-/// N.B., the additional ident for a `macro_rules`-style macro is actually\n-/// stored in the enclosing item.\n+/// Represents a macro invocation. The `path` indicates which macro\n+/// is being invoked, and the `args` are arguments passed to it.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Mac {\n     pub path: Path,\n-    pub delim: MacDelimiter,\n-    pub tts: TokenStream,\n+    pub args: P<MacArgs>,\n     pub span: Span,\n     pub prior_type_ascription: Option<(Span, bool)>,\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug)]\n-pub enum MacDelimiter {\n-    Parenthesis,\n-    Bracket,\n-    Brace,\n+/// Arguments passed to an attribute or a function-like macro.\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+pub enum MacArgs {\n+    /// No arguments - `#[attr]`.\n+    Empty,\n+    /// Delimited arguments - `#[attr()/[]/{}]` or `mac!()/[]/{}`.\n+    Delimited(DelimSpan, MacDelimiter, TokenStream),\n+    /// Arguments of a key-value attribute - `#[attr = \"value\"]`.\n+    /// Span belongs to the `=` token, token stream is the \"value\".\n+    Eq(Span, TokenStream),\n+}\n+\n+impl MacArgs {\n+    pub fn delim(&self) -> DelimToken {\n+        match self {\n+            MacArgs::Delimited(_, delim, _) => delim.to_token(),\n+            MacArgs::Empty | MacArgs::Eq(..) => token::NoDelim,\n+        }\n+    }\n+\n+    /// Tokens inside the delimiters or after `=`.\n+    /// Proc macros see these tokens, for example.\n+    pub fn inner_tokens(&self) -> TokenStream {\n+        match self {\n+            MacArgs::Empty => TokenStream::default(),\n+            MacArgs::Delimited(.., tokens) => tokens.clone(),\n+            MacArgs::Eq(.., tokens) => tokens.clone(),\n+        }\n+    }\n+\n+    /// Tokens together with the delimiters or `=`.\n+    /// Use of this functions generally means that something suspicious or hacky is happening.\n+    pub fn outer_tokens(&self) -> TokenStream {\n+        match *self {\n+            MacArgs::Empty => TokenStream::default(),\n+            MacArgs::Delimited(dspan, delim, ref tokens) =>\n+                TokenTree::Delimited(dspan, delim.to_token(), tokens.clone()).into(),\n+            MacArgs::Eq(eq_span, ref tokens) => iter::once(TokenTree::token(token::Eq, eq_span))\n+                                                .chain(tokens.trees()).collect(),\n+        }\n+    }\n+\n+    /// Whether a macro with these arguments needs a semicolon\n+    /// when used as a standalone item or statement.\n+    pub fn need_semicolon(&self) -> bool {\n+        !matches!(self, MacArgs::Delimited(_, MacDelimiter::Brace ,_))\n+    }\n }\n \n impl Mac {\n     pub fn stream(&self) -> TokenStream {\n-        self.tts.clone()\n+        self.args.inner_tokens()\n     }\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug)]\n+pub enum MacDelimiter {\n+    Parenthesis,\n+    Bracket,\n+    Brace,\n+}\n+\n impl MacDelimiter {\n     crate fn to_token(self) -> DelimToken {\n         match self {\n@@ -1408,6 +1453,15 @@ impl MacDelimiter {\n             MacDelimiter::Brace => DelimToken::Brace,\n         }\n     }\n+\n+    pub fn from_token(delim: DelimToken) -> MacDelimiter {\n+        match delim {\n+            token::Paren => MacDelimiter::Parenthesis,\n+            token::Bracket => MacDelimiter::Bracket,\n+            token::Brace => MacDelimiter::Brace,\n+            token::NoDelim => panic!(\"expected a delimiter\"),\n+        }\n+    }\n }\n \n /// Represents a macro definition."}, {"sha": "3dcdd4db6377a2b8173f5d7a2e5c5e68026c80f5", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=a81804b4d5f222f94758139b504aa2570528f9f1", "patch": "@@ -12,6 +12,7 @@\n #![feature(const_transmute)]\n #![feature(crate_visibility_modifier)]\n #![feature(label_break_value)]\n+#![feature(matches_macro)]\n #![feature(nll)]\n #![feature(try_trait)]\n #![feature(slice_patterns)]"}, {"sha": "7c86fc5cba599a88c628444cc091b48b655870a1", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=a81804b4d5f222f94758139b504aa2570528f9f1", "patch": "@@ -359,6 +359,26 @@ pub fn visit_fn_sig<T: MutVisitor>(FnSig { header, decl }: &mut FnSig, vis: &mut\n     vis.visit_fn_decl(decl);\n }\n \n+// No `noop_` prefix because there isn't a corresponding method in `MutVisitor`.\n+pub fn visit_mac_args<T: MutVisitor>(args: &mut MacArgs, vis: &mut T) {\n+    match args {\n+        MacArgs::Empty => {}\n+        MacArgs::Delimited(dspan, _delim, tokens) => {\n+            visit_delim_span(dspan, vis);\n+            vis.visit_tts(tokens);\n+        }\n+        MacArgs::Eq(eq_span, tokens) => {\n+            vis.visit_span(eq_span);\n+            vis.visit_tts(tokens);\n+        }\n+    }\n+}\n+\n+pub fn visit_delim_span<T: MutVisitor>(dspan: &mut DelimSpan, vis: &mut T) {\n+    vis.visit_span(&mut dspan.open);\n+    vis.visit_span(&mut dspan.close);\n+}\n+\n pub fn noop_flat_map_field_pattern<T: MutVisitor>(\n     mut fp: FieldPat,\n     vis: &mut T,\n@@ -560,9 +580,9 @@ pub fn noop_visit_attribute<T: MutVisitor>(attr: &mut Attribute, vis: &mut T) {\n }\n \n pub fn noop_visit_mac<T: MutVisitor>(mac: &mut Mac, vis: &mut T) {\n-    let Mac { path, delim: _, tts, span, prior_type_ascription: _ } = mac;\n+    let Mac { path, args, span, prior_type_ascription: _ } = mac;\n     vis.visit_path(path);\n-    vis.visit_tts(tts);\n+    visit_mac_args(args, vis);\n     vis.visit_span(span);\n }\n "}, {"sha": "416704e255eac83867c0a9a1dd2fc17da54c1cb0", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=a81804b4d5f222f94758139b504aa2570528f9f1", "patch": "@@ -1,6 +1,6 @@\n use crate::ast::{self, BlockCheckMode, PatKind, RangeEnd, RangeSyntax};\n use crate::ast::{SelfKind, GenericBound, TraitBoundModifier};\n-use crate::ast::{Attribute, MacDelimiter, GenericArg};\n+use crate::ast::{Attribute, GenericArg};\n use crate::util::parser::{self, AssocOp, Fixity};\n use crate::util::comments;\n use crate::attr;\n@@ -1097,9 +1097,8 @@ impl<'a> State<'a> {\n             }\n             ast::ForeignItemKind::Macro(ref m) => {\n                 self.print_mac(m);\n-                match m.delim {\n-                    MacDelimiter::Brace => {},\n-                    _ => self.s.word(\";\")\n+                if m.args.need_semicolon() {\n+                    self.s.word(\";\");\n                 }\n             }\n         }\n@@ -1361,9 +1360,8 @@ impl<'a> State<'a> {\n             }\n             ast::ItemKind::Mac(ref mac) => {\n                 self.print_mac(mac);\n-                match mac.delim {\n-                    MacDelimiter::Brace => {}\n-                    _ => self.s.word(\";\"),\n+                if mac.args.need_semicolon() {\n+                    self.s.word(\";\");\n                 }\n             }\n             ast::ItemKind::MacroDef(ref macro_def) => {\n@@ -1578,9 +1576,8 @@ impl<'a> State<'a> {\n             }\n             ast::TraitItemKind::Macro(ref mac) => {\n                 self.print_mac(mac);\n-                match mac.delim {\n-                    MacDelimiter::Brace => {}\n-                    _ => self.s.word(\";\"),\n+                if mac.args.need_semicolon() {\n+                    self.s.word(\";\");\n                 }\n             }\n         }\n@@ -1608,9 +1605,8 @@ impl<'a> State<'a> {\n             }\n             ast::ImplItemKind::Macro(ref mac) => {\n                 self.print_mac(mac);\n-                match mac.delim {\n-                    MacDelimiter::Brace => {}\n-                    _ => self.s.word(\";\"),\n+                if mac.args.need_semicolon() {\n+                    self.s.word(\";\");\n                 }\n             }\n         }\n@@ -1775,7 +1771,7 @@ impl<'a> State<'a> {\n             Some(MacHeader::Path(&m.path)),\n             true,\n             None,\n-            m.delim.to_token(),\n+            m.args.delim(),\n             m.stream(),\n             true,\n             m.span,"}, {"sha": "a1157667df1b438fd192bc47a0efaf58023ee570", "filename": "src/libsyntax_expand/mbe/transcribe.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibsyntax_expand%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibsyntax_expand%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Ftranscribe.rs?ref=a81804b4d5f222f94758139b504aa2570528f9f1", "patch": "@@ -30,13 +30,6 @@ impl MutVisitor for Marker {\n     }\n }\n \n-impl Marker {\n-    fn visit_delim_span(&mut self, dspan: &mut DelimSpan) {\n-        self.visit_span(&mut dspan.open);\n-        self.visit_span(&mut dspan.close);\n-    }\n-}\n-\n /// An iterator over the token trees in a delimited token tree (`{ ... }`) or a sequence (`$(...)`).\n enum Frame {\n     Delimited { forest: Lrc<mbe::Delimited>, idx: usize, span: DelimSpan },\n@@ -271,7 +264,7 @@ pub(super) fn transcribe(\n             // jump back out of the Delimited, pop the result_stack and add the new results back to\n             // the previous results (from outside the Delimited).\n             mbe::TokenTree::Delimited(mut span, delimited) => {\n-                marker.visit_delim_span(&mut span);\n+                mut_visit::visit_delim_span(&mut span, &mut marker);\n                 stack.push(Frame::Delimited { forest: delimited, idx: 0, span });\n                 result_stack.push(mem::take(&mut result));\n             }"}, {"sha": "11fe860fc810268b4bce3916e8df8d5a5231bae6", "filename": "src/libsyntax_expand/placeholders.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibsyntax_expand%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibsyntax_expand%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fplaceholders.rs?ref=a81804b4d5f222f94758139b504aa2570528f9f1", "patch": "@@ -3,7 +3,6 @@ use crate::expand::{AstFragment, AstFragmentKind};\n \n use syntax::ast;\n use syntax::source_map::{DUMMY_SP, dummy_spanned};\n-use syntax::tokenstream::TokenStream;\n use syntax::mut_visit::*;\n use syntax::ptr::P;\n use syntax::ThinVec;\n@@ -17,8 +16,7 @@ pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId, vis: Option<ast::Visi\n     fn mac_placeholder() -> ast::Mac {\n         ast::Mac {\n             path: ast::Path { span: DUMMY_SP, segments: Vec::new() },\n-            tts: TokenStream::default().into(),\n-            delim: ast::MacDelimiter::Brace,\n+            args: P(ast::MacArgs::Empty),\n             span: DUMMY_SP,\n             prior_type_ascription: None,\n         }"}, {"sha": "9b9b7fd386f362e49115f352c288d3c3f34b2922", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=a81804b4d5f222f94758139b504aa2570528f9f1", "patch": "@@ -6,7 +6,7 @@ use syntax::token::{self, TokenKind};\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::symbol::{sym, Symbol};\n-use syntax::tokenstream::{TokenStream, TokenTree};\n+use syntax::tokenstream::{DelimSpan, TokenStream, TokenTree};\n use syntax_expand::base::*;\n use syntax_pos::{Span, DUMMY_SP};\n \n@@ -26,18 +26,19 @@ pub fn expand_assert<'cx>(\n     // `core::panic` and `std::panic` are different macros, so we use call-site\n     // context to pick up whichever is currently in scope.\n     let sp = cx.with_call_site_ctxt(sp);\n+    let tokens = custom_message.unwrap_or_else(|| {\n+        TokenStream::from(TokenTree::token(\n+            TokenKind::lit(token::Str, Symbol::intern(&format!(\n+                \"assertion failed: {}\",\n+                pprust::expr_to_string(&cond_expr).escape_debug()\n+            )), None),\n+            DUMMY_SP,\n+        ))\n+    });\n+    let args = P(MacArgs::Delimited(DelimSpan::from_single(sp), MacDelimiter::Parenthesis, tokens));\n     let panic_call = Mac {\n         path: Path::from_ident(Ident::new(sym::panic, sp)),\n-        tts: custom_message.unwrap_or_else(|| {\n-            TokenStream::from(TokenTree::token(\n-                TokenKind::lit(token::Str, Symbol::intern(&format!(\n-                    \"assertion failed: {}\",\n-                    pprust::expr_to_string(&cond_expr).escape_debug()\n-                )), None),\n-                DUMMY_SP,\n-            ))\n-        }).into(),\n-        delim: MacDelimiter::Parenthesis,\n+        args,\n         span: sp,\n         prior_type_ascription: None,\n     };"}, {"sha": "f536d8f940a93871936a4b9172cb0ea5d38b6710", "filename": "src/test/ui/issues/issue-10536.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Ftest%2Fui%2Fissues%2Fissue-10536.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Ftest%2Fui%2Fissues%2Fissue-10536.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10536.rs?ref=a81804b4d5f222f94758139b504aa2570528f9f1", "patch": "@@ -11,9 +11,9 @@ macro_rules! foo{\n pub fn main() {\n     foo!();\n \n-    assert!({one! two()}); //~ ERROR expected open delimiter\n+    assert!({one! two()}); //~ ERROR expected one of `(`, `[`, or `{`, found `two`\n \n     // regardless of whether nested macro_rules works, the following should at\n     // least throw a conventional error.\n-    assert!({one! two}); //~ ERROR expected open delimiter\n+    assert!({one! two}); //~ ERROR expected one of `(`, `[`, or `{`, found `two`\n }"}, {"sha": "cc048445871a4bb0a8624250ed5cdaddf8e7755b", "filename": "src/test/ui/issues/issue-10536.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Ftest%2Fui%2Fissues%2Fissue-10536.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Ftest%2Fui%2Fissues%2Fissue-10536.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10536.stderr?ref=a81804b4d5f222f94758139b504aa2570528f9f1", "patch": "@@ -1,14 +1,14 @@\n-error: expected open delimiter\n+error: expected one of `(`, `[`, or `{`, found `two`\n   --> $DIR/issue-10536.rs:14:19\n    |\n LL |     assert!({one! two()});\n-   |                   ^^^ expected open delimiter\n+   |                   ^^^ expected one of `(`, `[`, or `{`\n \n-error: expected open delimiter\n+error: expected one of `(`, `[`, or `{`, found `two`\n   --> $DIR/issue-10536.rs:18:19\n    |\n LL |     assert!({one! two});\n-   |                   ^^^ expected open delimiter\n+   |                   ^^^ expected one of `(`, `[`, or `{`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f461f06b4dca6d9ff15cf5039f6207cb99ecaf63", "filename": "src/test/ui/parser/macro-bad-delimiter-ident.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Ftest%2Fui%2Fparser%2Fmacro-bad-delimiter-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Ftest%2Fui%2Fparser%2Fmacro-bad-delimiter-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro-bad-delimiter-ident.rs?ref=a81804b4d5f222f94758139b504aa2570528f9f1", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    foo! bar < //~ ERROR expected open delimiter\n+    foo! bar < //~ ERROR expected one of `(`, `[`, or `{`, found `bar`\n }"}, {"sha": "f2365fed273b19dbaab6e7e9e91422350302c65d", "filename": "src/test/ui/parser/macro-bad-delimiter-ident.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Ftest%2Fui%2Fparser%2Fmacro-bad-delimiter-ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a81804b4d5f222f94758139b504aa2570528f9f1/src%2Ftest%2Fui%2Fparser%2Fmacro-bad-delimiter-ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro-bad-delimiter-ident.stderr?ref=a81804b4d5f222f94758139b504aa2570528f9f1", "patch": "@@ -1,8 +1,8 @@\n-error: expected open delimiter\n+error: expected one of `(`, `[`, or `{`, found `bar`\n   --> $DIR/macro-bad-delimiter-ident.rs:2:10\n    |\n LL |     foo! bar <\n-   |          ^^^ expected open delimiter\n+   |          ^^^ expected one of `(`, `[`, or `{`\n \n error: aborting due to previous error\n "}]}