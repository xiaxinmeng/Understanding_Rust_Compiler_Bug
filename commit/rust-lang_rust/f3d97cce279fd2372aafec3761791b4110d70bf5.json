{"sha": "f3d97cce279fd2372aafec3761791b4110d70bf5", "node_id": "C_kwDOAAsO6NoAKGYzZDk3Y2NlMjc5ZmQyMzcyYWFmZWMzNzYxNzkxYjQxMTBkNzBiZjU", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-25T18:17:19Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-25T18:32:14Z"}, "message": "Fix saturating float casts test\n\nFixes #737", "tree": {"sha": "00101f6e59b07d1b0d8605b5123ece3c82b2da60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00101f6e59b07d1b0d8605b5123ece3c82b2da60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3d97cce279fd2372aafec3761791b4110d70bf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3d97cce279fd2372aafec3761791b4110d70bf5", "html_url": "https://github.com/rust-lang/rust/commit/f3d97cce279fd2372aafec3761791b4110d70bf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3d97cce279fd2372aafec3761791b4110d70bf5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e336e1bccf3831097283469243b0228accea85d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e336e1bccf3831097283469243b0228accea85d4", "html_url": "https://github.com/rust-lang/rust/commit/e336e1bccf3831097283469243b0228accea85d4"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "0a2bce2621d963f1e6d68e173c5f65522c108a89", "filename": "example/std_example.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3d97cce279fd2372aafec3761791b4110d70bf5/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d97cce279fd2372aafec3761791b4110d70bf5/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=f3d97cce279fd2372aafec3761791b4110d70bf5", "patch": "@@ -1,7 +1,8 @@\n-#![feature(core_intrinsics, generators, generator_trait, is_sorted)]\n+#![feature(core_intrinsics, generators, generator_trait, is_sorted, bench_black_box)]\n \n #[cfg(target_arch = \"x86_64\")]\n use std::arch::x86_64::*;\n+use std::hint::black_box;\n use std::io::Write;\n use std::ops::Generator;\n \n@@ -86,6 +87,9 @@ fn main() {\n     assert_eq!(houndred_f64 as i128, 100);\n     assert_eq!(1u128.rotate_left(2), 4);\n \n+    assert_eq!(black_box(f32::NAN) as i128, 0);\n+    assert_eq!(black_box(f32::NAN) as u128, 0);\n+\n     // Test signed 128bit comparing\n     let max = usize::MAX as i128;\n     if 100i128 < 0i128 || 100i128 > max {"}, {"sha": "5f47e7204ea881a24198d7b1e38ca40a3a05ffd8", "filename": "scripts/test_rustc_tests.sh", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3d97cce279fd2372aafec3761791b4110d70bf5/scripts%2Ftest_rustc_tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/f3d97cce279fd2372aafec3761791b4110d70bf5/scripts%2Ftest_rustc_tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ftest_rustc_tests.sh?ref=f3d97cce279fd2372aafec3761791b4110d70bf5", "patch": "@@ -79,7 +79,6 @@ rm src/test/ui/abi/stack-protector.rs # requires stack protector support\n \n # giving different but possibly correct results\n # =============================================\n-rm src/test/ui/numbers-arithmetic/saturating-float-casts.rs # intrinsic gives different but valid result\n rm src/test/ui/simd/intrinsic/float-minmax-pass.rs # same\n rm src/test/ui/mir/mir_misc_casts.rs # depends on deduplication of constants\n rm src/test/ui/mir/mir_raw_fat_ptr.rs # same"}, {"sha": "e19070774c6e0c246662f55ed06e4cf5a53f17e0", "filename": "src/cast.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f3d97cce279fd2372aafec3761791b4110d70bf5/src%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d97cce279fd2372aafec3761791b4110d70bf5/src%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcast.rs?ref=f3d97cce279fd2372aafec3761791b4110d70bf5", "patch": "@@ -84,7 +84,7 @@ pub(crate) fn clif_int_or_float_cast(\n             fx.bcx.ins().fcvt_from_uint(to_ty, from)\n         }\n     } else if from_ty.is_float() && to_ty.is_int() {\n-        if to_ty == types::I128 {\n+        let val = if to_ty == types::I128 {\n             // _____sssf___\n             // __fix   sfti: f32 -> i128\n             // __fix   dfti: f64 -> i128\n@@ -109,13 +109,9 @@ pub(crate) fn clif_int_or_float_cast(\n \n             let to_rust_ty = if to_signed { fx.tcx.types.i128 } else { fx.tcx.types.u128 };\n \n-            return fx\n-                .easy_call(&name, &[CValue::by_val(from, fx.layout_of(from_rust_ty))], to_rust_ty)\n-                .load_scalar(fx);\n-        }\n-\n-        // float -> int-like\n-        if to_ty == types::I8 || to_ty == types::I16 {\n+            fx.easy_call(&name, &[CValue::by_val(from, fx.layout_of(from_rust_ty))], to_rust_ty)\n+                .load_scalar(fx)\n+        } else if to_ty == types::I8 || to_ty == types::I16 {\n             // FIXME implement fcvt_to_*int_sat.i8/i16\n             let val = if to_signed {\n                 fx.bcx.ins().fcvt_to_sint_sat(types::I32, from)\n@@ -146,6 +142,23 @@ pub(crate) fn clif_int_or_float_cast(\n             fx.bcx.ins().fcvt_to_sint_sat(to_ty, from)\n         } else {\n             fx.bcx.ins().fcvt_to_uint_sat(to_ty, from)\n+        };\n+\n+        if let Some(false) = fx.tcx.sess.opts.debugging_opts.saturating_float_casts {\n+            return val;\n+        }\n+\n+        let is_not_nan = fx.bcx.ins().fcmp(FloatCC::Equal, from, from);\n+        if to_ty == types::I128 {\n+            // FIXME(bytecodealliance/wasmtime#3963): select.i128 on fcmp eq miscompiles\n+            let (lsb, msb) = fx.bcx.ins().isplit(val);\n+            let zero = fx.bcx.ins().iconst(types::I64, 0);\n+            let lsb = fx.bcx.ins().select(is_not_nan, lsb, zero);\n+            let msb = fx.bcx.ins().select(is_not_nan, msb, zero);\n+            fx.bcx.ins().iconcat(lsb, msb)\n+        } else {\n+            let zero = fx.bcx.ins().iconst(to_ty, 0);\n+            fx.bcx.ins().select(is_not_nan, val, zero)\n         }\n     } else if from_ty.is_float() && to_ty.is_float() {\n         // float -> float"}]}