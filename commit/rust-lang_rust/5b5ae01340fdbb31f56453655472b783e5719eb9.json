{"sha": "5b5ae01340fdbb31f56453655472b783e5719eb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNWFlMDEzNDBmZGJiMzFmNTY0NTM2NTU0NzJiNzgzZTU3MTllYjk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-13T08:11:09Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-13T08:11:09Z"}, "message": "expand docs", "tree": {"sha": "8d934563db6bb4846feab3dfee1b735aa35f128c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d934563db6bb4846feab3dfee1b735aa35f128c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b5ae01340fdbb31f56453655472b783e5719eb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b5ae01340fdbb31f56453655472b783e5719eb9", "html_url": "https://github.com/rust-lang/rust/commit/5b5ae01340fdbb31f56453655472b783e5719eb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b5ae01340fdbb31f56453655472b783e5719eb9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19ebe2fb6d7de19de155e70938fafcca6f9b5003", "url": "https://api.github.com/repos/rust-lang/rust/commits/19ebe2fb6d7de19de155e70938fafcca6f9b5003", "html_url": "https://github.com/rust-lang/rust/commit/19ebe2fb6d7de19de155e70938fafcca6f9b5003"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "7b7be8f3d2ff6b98f24cb05940a266b96957500b", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b5ae01340fdbb31f56453655472b783e5719eb9/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5ae01340fdbb31f56453655472b783e5719eb9/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=5b5ae01340fdbb31f56453655472b783e5719eb9", "patch": "@@ -1551,15 +1551,20 @@ impl<T: ?Sized> UnsafeCell<T> {\n     }\n \n     /// Gets a mutable pointer to the wrapped value.\n+    /// The difference to [`get`] is that this function accepts a raw pointer,\n+    /// which is useful to avoid the creation of temporary references.\n     ///\n-    /// This can be cast to a pointer of any kind.\n+    /// The result can be cast to a pointer of any kind.\n     /// Ensure that the access is unique (no active references, mutable or not)\n     /// when casting to `&mut T`, and ensure that there are no mutations\n     /// or mutable aliases going on when casting to `&T`.\n     ///\n+    /// [`get`]: #method.get\n+    ///\n     /// # Examples\n     ///\n-    /// Gradual initialization of an `UnsafeCell`:\n+    /// Gradual initialization of an `UnsafeCell` requires `raw_get`, as\n+    /// calling `get` would require creating a reference to uninitialized data:\n     ///\n     /// ```\n     /// #![feature(unsafe_cell_raw_get)]"}]}