{"sha": "2f17c31fa4c61172cb7cb3298509d973a58f6475", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMTdjMzFmYTRjNjExNzJjYjdjYjMyOTg1MDlkOTczYTU4ZjY0NzU=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-15T14:27:53Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-15T22:36:31Z"}, "message": "Wrap closure with a single control flow expr with multi line condition", "tree": {"sha": "7023c1045bb717a1a9f1bcef0cebe8f103038943", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7023c1045bb717a1a9f1bcef0cebe8f103038943"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f17c31fa4c61172cb7cb3298509d973a58f6475", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f17c31fa4c61172cb7cb3298509d973a58f6475", "html_url": "https://github.com/rust-lang/rust/commit/2f17c31fa4c61172cb7cb3298509d973a58f6475", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f17c31fa4c61172cb7cb3298509d973a58f6475/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e22fd0ce594105aeb59594a4012cea2061719784", "url": "https://api.github.com/repos/rust-lang/rust/commits/e22fd0ce594105aeb59594a4012cea2061719784", "html_url": "https://github.com/rust-lang/rust/commit/e22fd0ce594105aeb59594a4012cea2061719784"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "61cd9ad0cfca530b2c978c96af5dfb782ad3806f", "filename": "src/expr.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2f17c31fa4c61172cb7cb3298509d973a58f6475/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f17c31fa4c61172cb7cb3298509d973a58f6475/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=2f17c31fa4c61172cb7cb3298509d973a58f6475", "patch": "@@ -2212,7 +2212,35 @@ fn rewrite_last_arg_with_overflow<'a, T>(\n where\n     T: Rewrite + Spanned + ToExpr + 'a,\n {\n-    let rewrite = last_arg.rewrite(context, shape);\n+    let rewrite = if let Some(expr) = last_arg.to_expr() {\n+        match expr.node {\n+            // When overflowing the closure which consists of a single control flow expression,\n+            // force to use block if its condition uses multi line.\n+            ast::ExprKind::Closure(capture, ref fn_decl, ref body, _) => {\n+                if rewrite_cond(context, body, shape).map_or(false, |cond| cond.contains('\\n')) {\n+                    rewrite_closure_fn_decl(capture, fn_decl, body, expr.span, context, shape)\n+                        .and_then(|(prefix, extra_offset)| {\n+                            // 1 = space between `|...|` and body.\n+                            shape.offset_left(extra_offset).and_then(|body_shape| {\n+                                let body = match body.node {\n+                                    ast::ExprKind::Block(ref block) => {\n+                                        stmt_expr(&block.stmts[0]).unwrap()\n+                                    }\n+                                    _ => body,\n+                                };\n+                                rewrite_closure_with_block(context, body_shape, &prefix, body)\n+                            })\n+                        })\n+                        .or_else(|| expr.rewrite(context, shape))\n+                } else {\n+                    expr.rewrite(context, shape)\n+                }\n+            }\n+            _ => expr.rewrite(context, shape),\n+        }\n+    } else {\n+        last_arg.rewrite(context, shape)\n+    };\n     let orig_last = last_item.item.clone();\n \n     if let Some(rewrite) = rewrite {"}]}