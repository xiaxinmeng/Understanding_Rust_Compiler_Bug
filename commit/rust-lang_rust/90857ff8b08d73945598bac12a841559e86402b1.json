{"sha": "90857ff8b08d73945598bac12a841559e86402b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwODU3ZmY4YjA4ZDczOTQ1NTk4YmFjMTJhODQxNTU5ZTg2NDAyYjE=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-08-07T11:25:55Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-08-07T11:25:55Z"}, "message": "Add an AnalysisConfig structure and use it to configure diagnostics run", "tree": {"sha": "8e98c8d7a1b50d55dbbbf788cda94b11eb3e3395", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e98c8d7a1b50d55dbbbf788cda94b11eb3e3395"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90857ff8b08d73945598bac12a841559e86402b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90857ff8b08d73945598bac12a841559e86402b1", "html_url": "https://github.com/rust-lang/rust/commit/90857ff8b08d73945598bac12a841559e86402b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90857ff8b08d73945598bac12a841559e86402b1/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c463d217a1e001abe6a812f309d93527e28a70c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c463d217a1e001abe6a812f309d93527e28a70c6", "html_url": "https://github.com/rust-lang/rust/commit/c463d217a1e001abe6a812f309d93527e28a70c6"}], "stats": {"total": 83, "additions": 57, "deletions": 26}, "files": [{"sha": "ef1d61144ebe871385b01ae3504d301685e06280", "filename": "crates/ra_hir_expand/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/90857ff8b08d73945598bac12a841559e86402b1/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90857ff8b08d73945598bac12a841559e86402b1/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs?ref=90857ff8b08d73945598bac12a841559e86402b1", "patch": "@@ -14,7 +14,7 @@\n //! subsystem provides a separate, non-query-based API which can walk all stored\n //! values and transform them into instances of `Diagnostic`.\n \n-use std::{any::Any, collections::HashSet, fmt};\n+use std::{any::Any, fmt};\n \n use ra_syntax::{SyntaxNode, SyntaxNodePtr};\n \n@@ -50,16 +50,10 @@ pub struct DiagnosticSink<'a> {\n     callbacks: Vec<Box<dyn FnMut(&dyn Diagnostic) -> Result<(), ()> + 'a>>,\n     filters: Vec<Box<dyn FnMut(&dyn Diagnostic) -> bool + 'a>>,\n     default_callback: Box<dyn FnMut(&dyn Diagnostic) + 'a>,\n-    disabled_diagnostics: HashSet<String>,\n }\n \n impl<'a> DiagnosticSink<'a> {\n     pub fn push(&mut self, d: impl Diagnostic) {\n-        if self.disabled_diagnostics.contains(&d.name()) {\n-            // This diagnostic is disabled, ignore it completely.\n-            return;\n-        }\n-\n         let d: &dyn Diagnostic = &d;\n         self._push(d);\n     }\n@@ -83,12 +77,11 @@ impl<'a> DiagnosticSink<'a> {\n pub struct DiagnosticSinkBuilder<'a> {\n     callbacks: Vec<Box<dyn FnMut(&dyn Diagnostic) -> Result<(), ()> + 'a>>,\n     filters: Vec<Box<dyn FnMut(&dyn Diagnostic) -> bool + 'a>>,\n-    disabled_diagnostics: HashSet<String>,\n }\n \n impl<'a> DiagnosticSinkBuilder<'a> {\n     pub fn new() -> Self {\n-        Self { callbacks: Vec::new(), filters: Vec::new(), disabled_diagnostics: HashSet::new() }\n+        Self { callbacks: Vec::new(), filters: Vec::new() }\n     }\n \n     pub fn filter<F: FnMut(&dyn Diagnostic) -> bool + 'a>(mut self, cb: F) -> Self {\n@@ -108,17 +101,11 @@ impl<'a> DiagnosticSinkBuilder<'a> {\n         self\n     }\n \n-    pub fn disable_diagnostic(mut self, diagnostic: impl Into<String>) -> Self {\n-        self.disabled_diagnostics.insert(diagnostic.into());\n-        self\n-    }\n-\n     pub fn build<F: FnMut(&dyn Diagnostic) + 'a>(self, default_callback: F) -> DiagnosticSink<'a> {\n         DiagnosticSink {\n             callbacks: self.callbacks,\n             filters: self.filters,\n             default_callback: Box::new(default_callback),\n-            disabled_diagnostics: self.disabled_diagnostics,\n         }\n     }\n }"}, {"sha": "33e4f17437ec105deb2f177f4d91a9d5034ce9ff", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/90857ff8b08d73945598bac12a841559e86402b1/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90857ff8b08d73945598bac12a841559e86402b1/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=90857ff8b08d73945598bac12a841559e86402b1", "patch": "@@ -21,7 +21,7 @@ use ra_syntax::{\n };\n use ra_text_edit::{TextEdit, TextEditBuilder};\n \n-use crate::{Diagnostic, FileId, FileSystemEdit, Fix, SourceFileEdit};\n+use crate::{AnalysisConfig, Diagnostic, FileId, FileSystemEdit, Fix, SourceFileEdit};\n \n #[derive(Debug, Copy, Clone)]\n pub enum Severity {\n@@ -33,6 +33,7 @@ pub(crate) fn diagnostics(\n     db: &RootDatabase,\n     file_id: FileId,\n     enable_experimental: bool,\n+    analysis_config: &AnalysisConfig,\n ) -> Vec<Diagnostic> {\n     let _p = profile(\"diagnostics\");\n     let sema = Semantics::new(db);\n@@ -41,6 +42,7 @@ pub(crate) fn diagnostics(\n \n     // [#34344] Only take first 128 errors to prevent slowing down editor/ide, the number 128 is chosen arbitrarily.\n     res.extend(parse.errors().iter().take(128).map(|err| Diagnostic {\n+        name: None,\n         range: err.range(),\n         message: format!(\"Syntax Error: {}\", err),\n         severity: Severity::Error,\n@@ -52,7 +54,7 @@ pub(crate) fn diagnostics(\n         check_struct_shorthand_initialization(&mut res, file_id, &node);\n     }\n     let res = RefCell::new(res);\n-    let mut sink = DiagnosticSinkBuilder::new()\n+    let mut sink_builder = DiagnosticSinkBuilder::new()\n         .on::<hir::diagnostics::UnresolvedModule, _>(|d| {\n             let original_file = d.source().file_id.original_file(db);\n             let fix = Fix::new(\n@@ -61,6 +63,7 @@ pub(crate) fn diagnostics(\n                     .into(),\n             );\n             res.borrow_mut().push(Diagnostic {\n+                name: Some(d.name()),\n                 range: sema.diagnostics_range(d).range,\n                 message: d.message(),\n                 severity: Severity::Error,\n@@ -95,6 +98,7 @@ pub(crate) fn diagnostics(\n             };\n \n             res.borrow_mut().push(Diagnostic {\n+                name: Some(d.name()),\n                 range: sema.diagnostics_range(d).range,\n                 message: d.message(),\n                 severity: Severity::Error,\n@@ -108,6 +112,7 @@ pub(crate) fn diagnostics(\n             let source_change = SourceFileEdit { file_id, edit }.into();\n             let fix = Fix::new(\"Wrap with ok\", source_change);\n             res.borrow_mut().push(Diagnostic {\n+                name: Some(d.name()),\n                 range: sema.diagnostics_range(d).range,\n                 message: d.message(),\n                 severity: Severity::Error,\n@@ -116,17 +121,28 @@ pub(crate) fn diagnostics(\n         })\n         .on::<hir::diagnostics::NoSuchField, _>(|d| {\n             res.borrow_mut().push(Diagnostic {\n+                name: Some(d.name()),\n                 range: sema.diagnostics_range(d).range,\n                 message: d.message(),\n                 severity: Severity::Error,\n                 fix: missing_struct_field_fix(&sema, file_id, d),\n             })\n         })\n         // Only collect experimental diagnostics when they're enabled.\n-        .filter(|diag| !diag.is_experimental() || enable_experimental)\n+        .filter(|diag| !diag.is_experimental() || enable_experimental);\n+\n+    if !analysis_config.disabled_diagnostics.is_empty() {\n+        // Do not collect disabled diagnostics.\n+        sink_builder = sink_builder\n+            .filter(|diag| !analysis_config.disabled_diagnostics.contains(&diag.name()));\n+    }\n+\n+    // Finalize the `DiagnosticSink` building process.\n+    let mut sink = sink_builder\n         // Diagnostics not handled above get no fix and default treatment.\n         .build(|d| {\n             res.borrow_mut().push(Diagnostic {\n+                name: Some(d.name()),\n                 message: d.message(),\n                 range: sema.diagnostics_range(d).range,\n                 severity: Severity::Error,\n@@ -234,6 +250,7 @@ fn check_unnecessary_braces_in_use_statement(\n                 });\n \n         acc.push(Diagnostic {\n+            name: None,\n             range,\n             message: \"Unnecessary braces in use statement\".to_string(),\n             severity: Severity::WeakWarning,\n@@ -279,6 +296,7 @@ fn check_struct_shorthand_initialization(\n                 let edit = edit_builder.finish();\n \n                 acc.push(Diagnostic {\n+                    name: None,\n                     range: record_field.syntax().text_range(),\n                     message: \"Shorthand struct initialization\".to_string(),\n                     severity: Severity::WeakWarning,"}, {"sha": "3822b9409daab7980027295463292f9f53403d20", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/90857ff8b08d73945598bac12a841559e86402b1/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90857ff8b08d73945598bac12a841559e86402b1/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=90857ff8b08d73945598bac12a841559e86402b1", "patch": "@@ -45,7 +45,7 @@ mod syntax_highlighting;\n mod syntax_tree;\n mod typing;\n \n-use std::sync::Arc;\n+use std::{collections::HashSet, sync::Arc};\n \n use ra_cfg::CfgOptions;\n use ra_db::{\n@@ -100,8 +100,15 @@ pub use ra_text_edit::{Indel, TextEdit};\n \n pub type Cancelable<T> = Result<T, Canceled>;\n \n+/// Configuration parameters for the analysis run.\n+#[derive(Debug, Default, Clone)]\n+pub struct AnalysisConfig {\n+    pub disabled_diagnostics: HashSet<String>,\n+}\n+\n #[derive(Debug)]\n pub struct Diagnostic {\n+    pub name: Option<String>,\n     pub message: String,\n     pub range: TextRange,\n     pub severity: Severity,\n@@ -139,11 +146,16 @@ impl<T> RangeInfo<T> {\n #[derive(Debug)]\n pub struct AnalysisHost {\n     db: RootDatabase,\n+    config: AnalysisConfig,\n }\n \n impl AnalysisHost {\n-    pub fn new(lru_capacity: Option<usize>) -> AnalysisHost {\n-        AnalysisHost { db: RootDatabase::new(lru_capacity) }\n+    pub fn new(lru_capacity: Option<usize>) -> Self {\n+        Self::with_config(lru_capacity, AnalysisConfig::default())\n+    }\n+\n+    pub fn with_config(lru_capacity: Option<usize>, config: AnalysisConfig) -> Self {\n+        AnalysisHost { db: RootDatabase::new(lru_capacity), config }\n     }\n \n     pub fn update_lru_capacity(&mut self, lru_capacity: Option<usize>) {\n@@ -153,7 +165,7 @@ impl AnalysisHost {\n     /// Returns a snapshot of the current state, which you can query for\n     /// semantic information.\n     pub fn analysis(&self) -> Analysis {\n-        Analysis { db: self.db.snapshot() }\n+        Analysis { db: self.db.snapshot(), config: self.config.clone() }\n     }\n \n     /// Applies changes to the current state of the world. If there are\n@@ -197,6 +209,7 @@ impl Default for AnalysisHost {\n #[derive(Debug)]\n pub struct Analysis {\n     db: salsa::Snapshot<RootDatabase>,\n+    config: AnalysisConfig,\n }\n \n // As a general design guideline, `Analysis` API are intended to be independent\n@@ -492,7 +505,7 @@ impl Analysis {\n         file_id: FileId,\n         enable_experimental: bool,\n     ) -> Cancelable<Vec<Diagnostic>> {\n-        self.with_db(|db| diagnostics::diagnostics(db, file_id, enable_experimental))\n+        self.with_db(|db| diagnostics::diagnostics(db, file_id, enable_experimental, &self.config))\n     }\n \n     /// Returns the edit required to rename reference at the position to the new\n@@ -518,6 +531,11 @@ impl Analysis {\n         })\n     }\n \n+    /// Sets the provided config.\n+    pub fn set_config(&mut self, config: AnalysisConfig) {\n+        self.config = config;\n+    }\n+\n     /// Performs an operation on that may be Canceled.\n     fn with_db<F: FnOnce(&RootDatabase) -> T + std::panic::UnwindSafe, T>(\n         &self,"}, {"sha": "2c1db95461533b4ef477f7a1f00933bf1a95d507", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/90857ff8b08d73945598bac12a841559e86402b1/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90857ff8b08d73945598bac12a841559e86402b1/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=90857ff8b08d73945598bac12a841559e86402b1", "patch": "@@ -7,11 +7,11 @@\n //! configure the server itself, feature flags are passed into analysis, and\n //! tweak things like automatic insertion of `()` in completions.\n \n-use std::{ffi::OsString, path::PathBuf};\n+use std::{collections::HashSet, ffi::OsString, path::PathBuf};\n \n use flycheck::FlycheckConfig;\n use lsp_types::ClientCapabilities;\n-use ra_ide::{AssistConfig, CompletionConfig, HoverConfig, InlayHintsConfig};\n+use ra_ide::{AnalysisConfig, AssistConfig, CompletionConfig, HoverConfig, InlayHintsConfig};\n use ra_project_model::{CargoConfig, ProjectJson, ProjectJsonData, ProjectManifest};\n use serde::Deserialize;\n use vfs::AbsPathBuf;\n@@ -45,6 +45,8 @@ pub struct Config {\n     pub with_sysroot: bool,\n     pub linked_projects: Vec<LinkedProject>,\n     pub root_path: AbsPathBuf,\n+\n+    pub analysis: AnalysisConfig,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -176,6 +178,8 @@ impl Config {\n             hover: HoverConfig::default(),\n             linked_projects: Vec::new(),\n             root_path,\n+\n+            analysis: AnalysisConfig::default(),\n         }\n     }\n \n@@ -293,6 +297,8 @@ impl Config {\n             goto_type_def: data.hoverActions_enable && data.hoverActions_gotoTypeDef,\n         };\n \n+        self.analysis = AnalysisConfig { disabled_diagnostics: data.analysis_disabledDiagnostics };\n+\n         log::info!(\"Config::update() = {:#?}\", self);\n     }\n \n@@ -444,5 +450,7 @@ config_data! {\n         rustfmt_overrideCommand: Option<Vec<String>> = None,\n \n         withSysroot: bool = true,\n+\n+        analysis_disabledDiagnostics: HashSet<String> = HashSet::new(),\n     }\n }"}, {"sha": "46cb7ebe2e5b1a1baf6a9d1a1da8f16415872202", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90857ff8b08d73945598bac12a841559e86402b1/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90857ff8b08d73945598bac12a841559e86402b1/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=90857ff8b08d73945598bac12a841559e86402b1", "patch": "@@ -108,7 +108,7 @@ impl GlobalState {\n             Handle { handle, receiver }\n         };\n \n-        let analysis_host = AnalysisHost::new(config.lru_capacity);\n+        let analysis_host = AnalysisHost::with_config(config.lru_capacity, config.analysis.clone());\n         let (flycheck_sender, flycheck_receiver) = unbounded();\n         GlobalState {\n             sender,"}]}