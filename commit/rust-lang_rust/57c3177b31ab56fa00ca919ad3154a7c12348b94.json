{"sha": "57c3177b31ab56fa00ca919ad3154a7c12348b94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YzMxNzdiMzFhYjU2ZmEwMGNhOTE5YWQzMTU0YTdjMTIzNDhiOTQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-08T18:42:11Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-26T08:22:44Z"}, "message": "Make QueryDescription parameter a type.", "tree": {"sha": "fb7ecbe8c7eff18f5f3a1877da9cd5afd9df2107", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb7ecbe8c7eff18f5f3a1877da9cd5afd9df2107"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57c3177b31ab56fa00ca919ad3154a7c12348b94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57c3177b31ab56fa00ca919ad3154a7c12348b94", "html_url": "https://github.com/rust-lang/rust/commit/57c3177b31ab56fa00ca919ad3154a7c12348b94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57c3177b31ab56fa00ca919ad3154a7c12348b94/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f74fd03999bed3686195a1a7d42259ae11331e32", "url": "https://api.github.com/repos/rust-lang/rust/commits/f74fd03999bed3686195a1a7d42259ae11331e32", "html_url": "https://github.com/rust-lang/rust/commit/f74fd03999bed3686195a1a7d42259ae11331e32"}], "stats": {"total": 67, "additions": 40, "deletions": 27}, "files": [{"sha": "e65f3094820466c3d2bee65c637bbebfe099347d", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/57c3177b31ab56fa00ca919ad3154a7c12348b94/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c3177b31ab56fa00ca919ad3154a7c12348b94/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=57c3177b31ab56fa00ca919ad3154a7c12348b94", "patch": "@@ -5,12 +5,12 @@ use crate::dep_graph::{DepKind, DepNode};\n use crate::ty::query::caches::QueryCache;\n use crate::ty::query::plumbing::CycleError;\n use crate::ty::query::QueryState;\n-use crate::ty::TyCtxt;\n use rustc_data_structures::profiling::ProfileCategory;\n use rustc_hir::def_id::DefId;\n \n use crate::ich::StableHashingContext;\n use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_session::Session;\n use std::borrow::Cow;\n use std::fmt::Debug;\n use std::hash::Hash;\n@@ -25,6 +25,12 @@ pub trait QueryConfig<CTX> {\n \n pub trait QueryContext: Copy {\n     type Query;\n+\n+    /// Access the session.\n+    fn session(&self) -> &Session;\n+\n+    /// Get string representation from DefPath.\n+    fn def_path_str(&self, def_id: DefId) -> String;\n }\n \n pub(crate) trait QueryAccessors<CTX: QueryContext>: QueryConfig<CTX> {\n@@ -48,41 +54,37 @@ pub(crate) trait QueryAccessors<CTX: QueryContext>: QueryConfig<CTX> {\n     fn handle_cycle_error(tcx: CTX, error: CycleError<CTX>) -> Self::Value;\n }\n \n-pub(crate) trait QueryDescription<'tcx>: QueryAccessors<TyCtxt<'tcx>> {\n-    fn describe(tcx: TyCtxt<'_>, key: Self::Key) -> Cow<'static, str>;\n+pub(crate) trait QueryDescription<CTX: QueryContext>: QueryAccessors<CTX> {\n+    fn describe(tcx: CTX, key: Self::Key) -> Cow<'static, str>;\n \n     #[inline]\n-    fn cache_on_disk(_: TyCtxt<'tcx>, _: Self::Key, _: Option<&Self::Value>) -> bool {\n+    fn cache_on_disk(_: CTX, _: Self::Key, _: Option<&Self::Value>) -> bool {\n         false\n     }\n \n-    fn try_load_from_disk(_: TyCtxt<'tcx>, _: SerializedDepNodeIndex) -> Option<Self::Value> {\n+    fn try_load_from_disk(_: CTX, _: SerializedDepNodeIndex) -> Option<Self::Value> {\n         bug!(\"QueryDescription::load_from_disk() called for an unsupported query.\")\n     }\n }\n \n-impl<'tcx, M> QueryDescription<'tcx> for M\n+impl<CTX: QueryContext, M> QueryDescription<CTX> for M\n where\n-    M: QueryAccessors<TyCtxt<'tcx>, Key = DefId>,\n-    //M::Cache: QueryCache<DefId, M::Value>,\n+    M: QueryAccessors<CTX, Key = DefId>,\n {\n-    default fn describe(tcx: TyCtxt<'_>, def_id: DefId) -> Cow<'static, str> {\n-        if !tcx.sess.verbose() {\n+    default fn describe(tcx: CTX, def_id: DefId) -> Cow<'static, str> {\n+        if !tcx.session().verbose() {\n             format!(\"processing `{}`\", tcx.def_path_str(def_id)).into()\n         } else {\n             let name = ::std::any::type_name::<M>();\n             format!(\"processing {:?} with query `{}`\", def_id, name).into()\n         }\n     }\n \n-    default fn cache_on_disk(_: TyCtxt<'tcx>, _: Self::Key, _: Option<&Self::Value>) -> bool {\n+    default fn cache_on_disk(_: CTX, _: Self::Key, _: Option<&Self::Value>) -> bool {\n         false\n     }\n \n-    default fn try_load_from_disk(\n-        _: TyCtxt<'tcx>,\n-        _: SerializedDepNodeIndex,\n-    ) -> Option<Self::Value> {\n+    default fn try_load_from_disk(_: CTX, _: SerializedDepNodeIndex) -> Option<Self::Value> {\n         bug!(\"QueryDescription::load_from_disk() called for an unsupported query.\")\n     }\n }"}, {"sha": "14839e6ad5000ff4f2168e3cba29c3db4e03393a", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57c3177b31ab56fa00ca919ad3154a7c12348b94/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c3177b31ab56fa00ca919ad3154a7c12348b94/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=57c3177b31ab56fa00ca919ad3154a7c12348b94", "patch": "@@ -994,7 +994,8 @@ fn encode_query_results<'a, 'tcx, Q, E>(\n     query_result_index: &mut EncodedQueryResultIndex,\n ) -> Result<(), E::Error>\n where\n-    Q: super::config::QueryDescription<'tcx, Value: Encodable>,\n+    Q: super::config::QueryDescription<TyCtxt<'tcx>>,\n+    Q::Value: Encodable,\n     E: 'a + TyEncoder,\n {\n     let _timer = tcx"}, {"sha": "c0f2c4a11bc2fd308a8fbed0f742beba6d74070c", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/57c3177b31ab56fa00ca919ad3154a7c12348b94/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c3177b31ab56fa00ca919ad3154a7c12348b94/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=57c3177b31ab56fa00ca919ad3154a7c12348b94", "patch": "@@ -17,6 +17,8 @@ use rustc_data_structures::sharded::Sharded;\n use rustc_data_structures::sync::{Lock, LockGuard};\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_errors::{struct_span_err, Diagnostic, DiagnosticBuilder, FatalError, Handler, Level};\n+use rustc_session::Session;\n+use rustc_span::def_id::DefId;\n use rustc_span::source_map::DUMMY_SP;\n use rustc_span::Span;\n use std::collections::hash_map::Entry;\n@@ -181,7 +183,7 @@ where\n         mut lookup: QueryLookup<'tcx, TyCtxt<'tcx>, C::Key, C::Sharded>,\n     ) -> TryGetJob<'tcx, C>\n     where\n-        Q: QueryDescription<'tcx, Key = C::Key, Value = C::Value, Cache = C>,\n+        Q: QueryDescription<TyCtxt<'tcx>, Key = C::Key, Value = C::Value, Cache = C>,\n     {\n         let lock = &mut *lookup.lock;\n \n@@ -356,6 +358,14 @@ where\n \n impl QueryContext for TyCtxt<'tcx> {\n     type Query = Query<'tcx>;\n+\n+    fn session(&self) -> &Session {\n+        &self.sess\n+    }\n+\n+    fn def_path_str(&self, def_id: DefId) -> String {\n+        TyCtxt::def_path_str(*self, def_id)\n+    }\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n@@ -517,7 +527,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline(never)]\n-    pub(super) fn get_query<Q: QueryDescription<'tcx> + 'tcx>(\n+    pub(super) fn get_query<Q: QueryDescription<TyCtxt<'tcx>> + 'tcx>(\n         self,\n         span: Span,\n         key: Q::Key,\n@@ -536,7 +546,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline(always)]\n-    fn try_execute_query<Q: QueryDescription<'tcx> + 'tcx>(\n+    fn try_execute_query<Q: QueryDescription<TyCtxt<'tcx>> + 'tcx>(\n         self,\n         span: Span,\n         key: Q::Key,\n@@ -614,7 +624,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         result\n     }\n \n-    fn load_from_disk_and_cache_in_memory<Q: QueryDescription<'tcx>>(\n+    fn load_from_disk_and_cache_in_memory<Q: QueryDescription<TyCtxt<'tcx>>>(\n         self,\n         key: Q::Key,\n         prev_dep_node_index: SerializedDepNodeIndex,\n@@ -671,7 +681,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline(never)]\n     #[cold]\n-    fn incremental_verify_ich<Q: QueryDescription<'tcx>>(\n+    fn incremental_verify_ich<Q: QueryDescription<TyCtxt<'tcx>>>(\n         self,\n         result: &Q::Value,\n         dep_node: &DepNode,\n@@ -698,7 +708,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline(always)]\n-    fn force_query_with_job<Q: QueryDescription<'tcx> + 'tcx>(\n+    fn force_query_with_job<Q: QueryDescription<TyCtxt<'tcx>> + 'tcx>(\n         self,\n         key: Q::Key,\n         job: JobOwner<'tcx, TyCtxt<'tcx>, Q::Cache>,\n@@ -756,7 +766,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// side-effects -- e.g., in order to report errors for erroneous programs.\n     ///\n     /// Note: The optimization is only available during incr. comp.\n-    pub(super) fn ensure_query<Q: QueryDescription<'tcx> + 'tcx>(self, key: Q::Key) {\n+    pub(super) fn ensure_query<Q: QueryDescription<TyCtxt<'tcx>> + 'tcx>(self, key: Q::Key) {\n         if Q::EVAL_ALWAYS {\n             let _ = self.get_query::<Q>(DUMMY_SP, key);\n             return;\n@@ -784,7 +794,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[allow(dead_code)]\n-    pub(super) fn force_query<Q: QueryDescription<'tcx> + 'tcx>(\n+    pub(super) fn force_query<Q: QueryDescription<TyCtxt<'tcx>> + 'tcx>(\n         self,\n         key: Q::Key,\n         span: Span,\n@@ -920,7 +930,7 @@ macro_rules! define_queries_inner {\n                 }\n             }\n \n-            pub fn describe(&self, tcx: TyCtxt<'_>) -> Cow<'static, str> {\n+            pub fn describe(&self, tcx: TyCtxt<$tcx>) -> Cow<'static, str> {\n                 let (r, name) = match *self {\n                     $(Query::$name(key) => {\n                         (queries::$name::describe(tcx, key), stringify!($name))"}, {"sha": "57fe8ede9d197026822b5706bbe3d70d58b4ad5b", "filename": "src/librustc_macros/src/query.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c3177b31ab56fa00ca919ad3154a7c12348b94/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c3177b31ab56fa00ca919ad3154a7c12348b94/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fquery.rs?ref=57c3177b31ab56fa00ca919ad3154a7c12348b94", "patch": "@@ -380,7 +380,7 @@ fn add_query_description_impl(\n         quote! {\n             #[allow(unused_variables)]\n             fn describe(\n-                #tcx: TyCtxt<'_>,\n+                #tcx: TyCtxt<'tcx>,\n                 #key: #arg,\n             ) -> Cow<'static, str> {\n                 format!(#desc).into()\n@@ -393,7 +393,7 @@ fn add_query_description_impl(\n         let desc = desc.unwrap_or(quote! {});\n \n         impls.extend(quote! {\n-            impl<'tcx> QueryDescription<'tcx> for queries::#name<'tcx> {\n+            impl<'tcx> QueryDescription<TyCtxt<'tcx>> for queries::#name<'tcx> {\n                 #desc\n                 #cache\n             }"}]}