{"sha": "aed73e0122e538375e6ef827e90c6d1a191c5fff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZDczZTAxMjJlNTM4Mzc1ZTZlZjgyN2U5MGM2ZDFhMTkxYzVmZmY=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-09-25T19:33:31Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-09-25T19:33:31Z"}, "message": "Rollup merge of #28588 - critiqjo:trpl-closure, r=steveklabnik\n\nr? @steveklabnik", "tree": {"sha": "0d9a4417d8909ceb7d587a06d10cba18ec45c461", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d9a4417d8909ceb7d587a06d10cba18ec45c461"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aed73e0122e538375e6ef827e90c6d1a191c5fff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aed73e0122e538375e6ef827e90c6d1a191c5fff", "html_url": "https://github.com/rust-lang/rust/commit/aed73e0122e538375e6ef827e90c6d1a191c5fff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aed73e0122e538375e6ef827e90c6d1a191c5fff/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de2792faa08943699377f782e86098dda599829a", "url": "https://api.github.com/repos/rust-lang/rust/commits/de2792faa08943699377f782e86098dda599829a", "html_url": "https://github.com/rust-lang/rust/commit/de2792faa08943699377f782e86098dda599829a"}, {"sha": "09d4deef5b3f84548c0b9f6e1f70b0f5818eba2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/09d4deef5b3f84548c0b9f6e1f70b0f5818eba2d", "html_url": "https://github.com/rust-lang/rust/commit/09d4deef5b3f84548c0b9f6e1f70b0f5818eba2d"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "983af4a0efe7fb9613a9def0feafc4b1b9f95a58", "filename": "src/doc/trpl/closures.md", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/aed73e0122e538375e6ef827e90c6d1a191c5fff/src%2Fdoc%2Ftrpl%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/aed73e0122e538375e6ef827e90c6d1a191c5fff/src%2Fdoc%2Ftrpl%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fclosures.md?ref=aed73e0122e538375e6ef827e90c6d1a191c5fff", "patch": "@@ -411,8 +411,9 @@ fn factory() -> &(Fn(i32) -> i32) {\n ```\n \n Right. Because we have a reference, we need to give it a lifetime. But\n-our `factory()` function takes no arguments, so elision doesn\u2019t kick in\n-here. What lifetime can we choose? `'static`:\n+our `factory()` function takes no arguments, so\n+[elision](lifetimes.html#lifetime-elision) doesn\u2019t kick in here. Then what\n+choices do we have? Try `'static`:\n \n ```rust,ignore\n fn factory() -> &'static (Fn(i32) -> i32) {\n@@ -432,7 +433,7 @@ But we get another error:\n ```text\n error: mismatched types:\n  expected `&'static core::ops::Fn(i32) -> i32`,\n-    found `[closure <anon>:7:9: 7:20]`\n+    found `[closure@<anon>:7:9: 7:20]`\n (expected &-ptr,\n     found closure) [E0308]\n          |x| x + num\n@@ -441,21 +442,17 @@ error: mismatched types:\n ```\n \n This error is letting us know that we don\u2019t have a `&'static Fn(i32) -> i32`,\n-we have a `[closure <anon>:7:9: 7:20]`. Wait, what?\n+we have a `[closure@<anon>:7:9: 7:20]`. Wait, what?\n \n Because each closure generates its own environment `struct` and implementation\n of `Fn` and friends, these types are anonymous. They exist just solely for\n-this closure. So Rust shows them as `closure <anon>`, rather than some\n+this closure. So Rust shows them as `closure@<anon>`, rather than some\n autogenerated name.\n \n-But why doesn\u2019t our closure implement `&'static Fn`? Well, as we discussed before,\n-closures borrow their environment. And in this case, our environment is based\n-on a stack-allocated `5`, the `num` variable binding. So the borrow has a lifetime\n-of the stack frame. So if we returned this closure, the function call would be\n-over, the stack frame would go away, and our closure is capturing an environment\n-of garbage memory!\n-\n-So what to do? This _almost_ works:\n+The error also points out that the return type is expected to be a reference,\n+but what we are trying to return is not. Further, we cannot directly assign a\n+`'static` lifetime to an object. So we'll take a different approach and return\n+a \"trait object\" by `Box`ing up the `Fn`. This _almost_ works:\n \n ```rust,ignore\n fn factory() -> Box<Fn(i32) -> i32> {\n@@ -471,7 +468,7 @@ assert_eq!(6, answer);\n # }\n ```\n \n-We use a trait object, by `Box`ing up the `Fn`. There\u2019s just one last problem:\n+There\u2019s just one last problem:\n \n ```text\n error: closure may outlive the current function, but it borrows `num`,\n@@ -480,8 +477,12 @@ Box::new(|x| x + num)\n          ^~~~~~~~~~~\n ```\n \n-We still have a reference to the parent stack frame. With one last fix, we can\n-make this work:\n+Well, as we discussed before, closures borrow their environment. And in this\n+case, our environment is based on a stack-allocated `5`, the `num` variable\n+binding. So the borrow has a lifetime of the stack frame. So if we returned\n+this closure, the function call would be over, the stack frame would go away,\n+and our closure is capturing an environment of garbage memory! With one last\n+fix, we can make this work:\n \n ```rust\n fn factory() -> Box<Fn(i32) -> i32> {"}]}