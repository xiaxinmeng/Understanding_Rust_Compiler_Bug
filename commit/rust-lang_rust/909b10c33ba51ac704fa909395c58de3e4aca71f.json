{"sha": "909b10c33ba51ac704fa909395c58de3e4aca71f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwOWIxMGMzM2JhNTFhYzcwNGZhOTA5Mzk1YzU4ZGUzZTRhY2E3MWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-06T13:09:28Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-26T14:31:49Z"}, "message": "introduce `type_op`", "tree": {"sha": "e5378c62075b211be4eb2f905d65188ded5d2732", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5378c62075b211be4eb2f905d65188ded5d2732"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/909b10c33ba51ac704fa909395c58de3e4aca71f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/909b10c33ba51ac704fa909395c58de3e4aca71f", "html_url": "https://github.com/rust-lang/rust/commit/909b10c33ba51ac704fa909395c58de3e4aca71f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/909b10c33ba51ac704fa909395c58de3e4aca71f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "764232cb2a8407c72b9fea68835e686240e30ef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/764232cb2a8407c72b9fea68835e686240e30ef3", "html_url": "https://github.com/rust-lang/rust/commit/764232cb2a8407c72b9fea68835e686240e30ef3"}], "stats": {"total": 83, "additions": 65, "deletions": 18}, "files": [{"sha": "be0a2494b04fc0a53091b2ef959d0e611b679d36", "filename": "src/librustc_mir/borrow_check/nll/type_check/input_output.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/909b10c33ba51ac704fa909395c58de3e4aca71f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909b10c33ba51ac704fa909395c58de3e4aca71f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs?ref=909b10c33ba51ac704fa909395c58de3e4aca71f", "patch": "@@ -18,6 +18,7 @@\n //! contain revealed `impl Trait` values).\n \n use borrow_check::nll::renumber;\n+use borrow_check::nll::type_check::type_op::CustomTypeOp;\n use borrow_check::nll::universal_regions::UniversalRegions;\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferOk;\n@@ -80,7 +81,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             self.fully_perform_op(\n                 Locations::All,\n                 || format!(\"input_output\"),\n-                |cx| {\n+                CustomTypeOp::new(|cx| {\n                     let mut obligations = ObligationAccumulator::default();\n \n                     let dummy_body_id = ObligationCause::dummy().body_id;\n@@ -135,7 +136,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                         value: Some(anon_type_map),\n                         obligations: obligations.into_vec(),\n                     })\n-                },\n+                }),\n             ).unwrap_or_else(|terr| {\n                 span_mirbug!(\n                     self,\n@@ -156,13 +157,13 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             self.fully_perform_op(\n                 Locations::All,\n                 || format!(\"anon_type_map\"),\n-                |_cx| {\n+                CustomTypeOp::new(|_cx| {\n                     infcx.constrain_anon_types(&anon_type_map, universal_regions);\n                     Ok(InferOk {\n                         value: (),\n                         obligations: vec![],\n                     })\n-                },\n+                }),\n             ).unwrap();\n         }\n     }"}, {"sha": "d58dc1a601a7fd9e2f78ca787feaae78262aec76", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/909b10c33ba51ac704fa909395c58de3e4aca71f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909b10c33ba51ac704fa909395c58de3e4aca71f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs?ref=909b10c33ba51ac704fa909395c58de3e4aca71f", "patch": "@@ -10,6 +10,7 @@\n \n use borrow_check::nll::region_infer::Cause;\n use borrow_check::nll::type_check::AtLocation;\n+use borrow_check::nll::type_check::type_op::CustomTypeOp;\n use dataflow::move_paths::{HasMoveData, MoveData};\n use dataflow::MaybeInitializedPlaces;\n use dataflow::{FlowAtLocation, FlowsAtLocation};\n@@ -220,12 +221,12 @@ impl<'gen, 'typeck, 'flow, 'gcx, 'tcx> TypeLivenessGenerator<'gen, 'typeck, 'flo\n         let (dropped_kinds, region_constraint_data) =\n             cx.fully_perform_op_and_get_region_constraint_data(\n                 || format!(\"compute_drop_data(dropped_ty={:?})\", dropped_ty),\n-                |cx| {\n+                CustomTypeOp::new(|cx| {\n                     Ok(cx\n                         .infcx\n                         .at(&ObligationCause::dummy(), cx.param_env)\n                         .dropck_outlives(dropped_ty))\n-                },\n+                }),\n             ).unwrap();\n \n         DropData {"}, {"sha": "5d06513e2a858baf6eeb255608551c8abc2cd1b8", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/909b10c33ba51ac704fa909395c58de3e4aca71f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909b10c33ba51ac704fa909395c58de3e4aca71f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=909b10c33ba51ac704fa909395c58de3e4aca71f", "patch": "@@ -15,13 +15,14 @@ use borrow_check::location::LocationTable;\n use borrow_check::nll::facts::AllFacts;\n use borrow_check::nll::region_infer::Cause;\n use borrow_check::nll::region_infer::{ClosureRegionRequirementsExt, OutlivesConstraint, TypeTest};\n+use borrow_check::nll::type_check::type_op::{CustomTypeOp, TypeOp};\n use borrow_check::nll::universal_regions::UniversalRegions;\n use dataflow::move_paths::MoveData;\n use dataflow::FlowAtLocation;\n use dataflow::MaybeInitializedPlaces;\n use rustc::hir::def_id::DefId;\n use rustc::infer::region_constraints::{GenericKind, RegionConstraintData};\n-use rustc::infer::{InferCtxt, InferOk, InferResult, LateBoundRegionConversionTime, UnitResult};\n+use rustc::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime, UnitResult};\n use rustc::mir::interpret::EvalErrorKind::BoundsCheck;\n use rustc::mir::tcx::PlaceTy;\n use rustc::mir::visit::{PlaceContext, Visitor};\n@@ -67,6 +68,7 @@ macro_rules! span_mirbug_and_err {\n mod constraint_conversion;\n mod input_output;\n mod liveness;\n+mod type_op;\n \n /// Type checks the given `mir` in the context of the inference\n /// context `infcx`. Returns any region constraints that have yet to\n@@ -732,7 +734,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         &mut self,\n         locations: Locations,\n         describe_op: impl Fn() -> String,\n-        op: impl FnOnce(&mut Self) -> InferResult<'tcx, R>,\n+        op: impl TypeOp<'gcx, 'tcx, Output = R>,\n     ) -> Result<R, TypeError<'tcx>> {\n         let (r, opt_data) = self.fully_perform_op_and_get_region_constraint_data(\n             || format!(\"{} at {:?}\", describe_op(), locations),\n@@ -777,7 +779,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     fn fully_perform_op_and_get_region_constraint_data<R>(\n         &mut self,\n         describe_op: impl Fn() -> String,\n-        op: impl FnOnce(&mut Self) -> InferResult<'tcx, R>,\n+        op: impl TypeOp<'gcx, 'tcx, Output = R>,\n     ) -> Result<(R, Option<Rc<RegionConstraintData<'tcx>>>), TypeError<'tcx>> {\n         if cfg!(debug_assertions) {\n             info!(\n@@ -788,7 +790,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n \n         let mut fulfill_cx = TraitEngine::new(self.infcx.tcx);\n         let dummy_body_id = ObligationCause::dummy().body_id;\n-        let InferOk { value, obligations } = self.infcx.commit_if_ok(|_| op(self))?;\n+        let InferOk { value, obligations } = self.infcx.commit_if_ok(|_| op.perform(self))?;\n         debug_assert!(obligations.iter().all(|o| o.cause.body_id == dummy_body_id));\n         fulfill_cx.register_predicate_obligations(self.infcx, obligations);\n         if let Err(e) = fulfill_cx.select_all_or_error(self.infcx) {\n@@ -824,11 +826,11 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         self.fully_perform_op(\n             locations,\n             || format!(\"sub_types({:?} <: {:?})\", sub, sup),\n-            |this| {\n+            CustomTypeOp::new(|this| {\n                 this.infcx\n                     .at(&ObligationCause::dummy(), this.param_env)\n                     .sup(sup, sub)\n-            },\n+            }),\n         )\n     }\n \n@@ -841,11 +843,11 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         self.fully_perform_op(\n             locations,\n             || format!(\"eq_types({:?} = {:?})\", a, b),\n-            |this| {\n+            CustomTypeOp::new(|this| {\n                 this.infcx\n                     .at(&ObligationCause::dummy(), this.param_env)\n                     .eq(b, a)\n-            },\n+            }),\n         )\n     }\n \n@@ -1635,12 +1637,12 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         self.fully_perform_op(\n             location.at_self(),\n             || format!(\"prove_predicates({:?})\", predicates_vec),\n-            |_this| {\n+            CustomTypeOp::new(|_this| {\n                 Ok(InferOk {\n                     value: (),\n                     obligations,\n                 })\n-            },\n+            }),\n         ).unwrap()\n     }\n \n@@ -1683,7 +1685,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         self.fully_perform_op(\n             location.to_locations(),\n             || format!(\"normalize(value={:?})\", value),\n-            |this| {\n+            CustomTypeOp::new(|this| {\n                 let Normalized { value, obligations } = this\n                     .infcx\n                     .at(&ObligationCause::dummy(), this.param_env)\n@@ -1697,7 +1699,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                         );\n                     });\n                 Ok(InferOk { value, obligations })\n-            },\n+            }),\n         ).unwrap()\n     }\n }"}, {"sha": "b4c71344cfc8e9975dfcb93af81c0ae5490a9e03", "filename": "src/librustc_mir/borrow_check/nll/type_check/type_op.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/909b10c33ba51ac704fa909395c58de3e4aca71f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909b10c33ba51ac704fa909395c58de3e4aca71f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op.rs?ref=909b10c33ba51ac704fa909395c58de3e4aca71f", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use borrow_check::nll::type_check::TypeChecker;\n+use rustc::infer::InferResult;\n+\n+pub(super) trait TypeOp<'gcx, 'tcx> {\n+    type Output;\n+\n+    fn perform(self, type_checker: &mut TypeChecker<'_, 'gcx, 'tcx>) -> InferResult<'tcx, Self::Output>;\n+}\n+\n+pub(super) struct CustomTypeOp<F> {\n+    closure: F\n+}\n+\n+impl<F> CustomTypeOp<F>\n+{\n+    pub(super) fn new<'gcx, 'tcx, R>(closure: F) -> Self\n+    where\n+        F: FnOnce(&mut TypeChecker<'_, 'gcx, 'tcx>) -> InferResult<'tcx, R>,\n+    {\n+        CustomTypeOp { closure }\n+    }\n+}\n+\n+impl<'gcx, 'tcx, F, R> TypeOp<'gcx, 'tcx> for CustomTypeOp<F>\n+where\n+    F: FnOnce(&mut TypeChecker<'_, 'gcx, 'tcx>) -> InferResult<'tcx, R>,\n+{\n+    type Output = R;\n+\n+    fn perform(self, type_checker: &mut TypeChecker<'_, 'gcx, 'tcx>) -> InferResult<'tcx, R> {\n+        (self.closure)(type_checker)\n+    }\n+}"}]}