{"sha": "1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMDNmMGQwYmE0ZmVlNTRiN2FhNDU4ZjRkM2FkOTg5ZDhiZjdiMzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-17T06:47:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-17T06:47:35Z"}, "message": "Auto merge of #89037 - JohnTitor:rollup-rd9btbs, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #86382 (Make diagnostics clearer for `?` operators)\n - #87529 (Fix ICE in `improper_ctypes_definitions` lint with all-ZST transparent types)\n - #88339 (Add TcpListener::into_incoming and IntoIncoming)\n - #88735 (Don't lint about missing code examples in derived traits)\n - #88751 (Couple of changes to FileSearch and SearchPath)\n - #88883 (Move some tests to more reasonable directories - 7)\n - #88887 (Const Deref)\n - #88911 (Improve error message for type mismatch in generator arguments)\n - #89014 (PassWrapper: handle separate Module*SanitizerPass)\n - #89033 (Set the library path in sysroot-crates-are-unstable)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "535fc47baf233bb1a844d22916a3c086d6daab11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/535fc47baf233bb1a844d22916a3c086d6daab11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "html_url": "https://github.com/rust-lang/rust/commit/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38e576423dc56a006ccf0b72e106f09bdea6efc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/38e576423dc56a006ccf0b72e106f09bdea6efc2", "html_url": "https://github.com/rust-lang/rust/commit/38e576423dc56a006ccf0b72e106f09bdea6efc2"}, {"sha": "4d5bcbe957fa2f9b47aba81484d47206de742f3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d5bcbe957fa2f9b47aba81484d47206de742f3d", "html_url": "https://github.com/rust-lang/rust/commit/4d5bcbe957fa2f9b47aba81484d47206de742f3d"}], "stats": {"total": 394, "additions": 283, "deletions": 111}, "files": [{"sha": "826c09cd948f649e0edf10d9cf26b6e835b06ae9", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -637,7 +637,7 @@ fn link_dwarf_object<'a>(sess: &'a Session, executable_out_filename: &Path) {\n     cmd.arg(\"-o\");\n     cmd.arg(&dwp_out_filename);\n \n-    let mut new_path = sess.host_filesearch(PathKind::All).get_tools_search_paths(false);\n+    let mut new_path = sess.get_tools_search_paths(false);\n     if let Some(path) = env::var_os(\"PATH\") {\n         new_path.extend(env::split_paths(&path));\n     }\n@@ -2555,8 +2555,7 @@ fn add_gcc_ld_path(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n             match ld_impl {\n                 LdImpl::Lld => {\n                     if sess.target.lld_flavor == LldFlavor::Ld64 {\n-                        let tools_path =\n-                            sess.host_filesearch(PathKind::All).get_tools_search_paths(false);\n+                        let tools_path = sess.get_tools_search_paths(false);\n                         let ld64_exe = tools_path\n                             .into_iter()\n                             .map(|p| p.join(\"gcc-ld\"))\n@@ -2571,8 +2570,7 @@ fn add_gcc_ld_path(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n                             arg\n                         });\n                     } else {\n-                        let tools_path =\n-                            sess.host_filesearch(PathKind::All).get_tools_search_paths(false);\n+                        let tools_path = sess.get_tools_search_paths(false);\n                         let lld_path = tools_path\n                             .into_iter()\n                             .map(|p| p.join(\"gcc-ld\"))"}, {"sha": "e3b0eea0d89c70ac0dd0988731bc6352852efa72", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -15,7 +15,6 @@ use rustc_middle::middle::dependency_format::Linkage;\n use rustc_middle::ty::TyCtxt;\n use rustc_serialize::{json, Encoder};\n use rustc_session::config::{self, CrateType, DebugInfo, LinkerPluginLto, Lto, OptLevel, Strip};\n-use rustc_session::search_paths::PathKind;\n use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::{LinkOutputKind, LinkerFlavor, LldFlavor};\n@@ -101,7 +100,7 @@ pub fn get_linker<'a>(\n \n     // The compiler's sysroot often has some bundled tools, so add it to the\n     // PATH for the child.\n-    let mut new_path = sess.host_filesearch(PathKind::All).get_tools_search_paths(self_contained);\n+    let mut new_path = sess.get_tools_search_paths(self_contained);\n     let mut msvc_changed_path = false;\n     if sess.target.is_like_msvc {\n         if let Some(ref tool) = msvc_tool {"}, {"sha": "4c6a2baaef1e512972460433edf13ae172d8b5fd", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -677,10 +677,7 @@ impl RustcDefaultCalls {\n                     println!(\"{}\", targets.join(\"\\n\"));\n                 }\n                 Sysroot => println!(\"{}\", sess.sysroot.display()),\n-                TargetLibdir => println!(\n-                    \"{}\",\n-                    sess.target_tlib_path.as_ref().unwrap_or(&sess.host_tlib_path).dir.display()\n-                ),\n+                TargetLibdir => println!(\"{}\", sess.target_tlib_path.dir.display()),\n                 TargetSpec => println!(\"{}\", sess.target.to_json().pretty()),\n                 FileNames | CrateName => {\n                     let input = input.unwrap_or_else(|| {"}, {"sha": "41a73268f467345df99ff6b6e57fb967fd2aada6", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -74,6 +74,10 @@ impl DiagnosticStyledString {\n     pub fn highlighted<S: Into<String>>(t: S) -> DiagnosticStyledString {\n         DiagnosticStyledString(vec![StringPart::Highlighted(t.into())])\n     }\n+\n+    pub fn content(&self) -> String {\n+        self.0.iter().map(|x| x.content()).collect::<String>()\n+    }\n }\n \n #[derive(Debug, PartialEq, Eq)]\n@@ -82,6 +86,14 @@ pub enum StringPart {\n     Highlighted(String),\n }\n \n+impl StringPart {\n+    pub fn content(&self) -> &str {\n+        match self {\n+            &StringPart::Normal(ref s) | &StringPart::Highlighted(ref s) => s,\n+        }\n+    }\n+}\n+\n impl Diagnostic {\n     pub fn new(level: Level, message: &str) -> Self {\n         Diagnostic::new_with_code(level, None, message)"}, {"sha": "b8089b2499b66524bef2f6ef2da45291c4e6af9c", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -1971,6 +1971,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         trace: TypeTrace<'tcx>,\n         terr: &TypeError<'tcx>,\n     ) -> DiagnosticBuilder<'tcx> {\n+        use crate::traits::ObligationCauseCode::MatchExpressionArm;\n+\n         debug!(\"report_and_explain_type_error(trace={:?}, terr={:?})\", trace, terr);\n \n         let span = trace.cause.span(self.tcx);\n@@ -2013,6 +2015,19 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         _ => {}\n                     }\n                 }\n+                if let MatchExpressionArm(box MatchExpressionArmCause { source, .. }) =\n+                    trace.cause.code\n+                {\n+                    if let hir::MatchSource::TryDesugar = source {\n+                        if let Some((expected_ty, found_ty)) = self.values_str(trace.values) {\n+                            err.note(&format!(\n+                                \"`?` operator cannot convert from `{}` to `{}`\",\n+                                found_ty.content(),\n+                                expected_ty.content(),\n+                            ));\n+                        }\n+                    }\n+                }\n                 err\n             }\n             FailureCode::Error0644(failure_str) => {\n@@ -2585,9 +2600,7 @@ impl<'tcx> ObligationCauseExt<'tcx> for ObligationCause<'tcx> {\n             CompareImplTypeObligation { .. } => Error0308(\"type not compatible with trait\"),\n             MatchExpressionArm(box MatchExpressionArmCause { source, .. }) => {\n                 Error0308(match source {\n-                    hir::MatchSource::TryDesugar => {\n-                        \"try expression alternatives have incompatible types\"\n-                    }\n+                    hir::MatchSource::TryDesugar => \"`?` operator has incompatible types\",\n                     _ => \"`match` arms have incompatible types\",\n                 })\n             }"}, {"sha": "d35497c1b381a5460b359e76eb1e43e01eaffd2d", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -851,12 +851,18 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         use FfiResult::*;\n \n         if def.repr.transparent() {\n-            // Can assume that only one field is not a ZST, so only check\n+            // Can assume that at most one field is not a ZST, so only check\n             // that field's type for FFI-safety.\n             if let Some(field) = transparent_newtype_field(self.cx.tcx, variant) {\n                 self.check_field_type_for_ffi(cache, field, substs)\n             } else {\n-                bug!(\"malformed transparent type\");\n+                // All fields are ZSTs; this means that the type should behave\n+                // like (), which is FFI-unsafe\n+                FfiUnsafe {\n+                    ty,\n+                    reason: \"this struct contains only zero-sized fields\".into(),\n+                    help: None,\n+                }\n             }\n         } else {\n             // We can't completely trust repr(C) markings; make sure the fields are"}, {"sha": "b7cad1c3ba6d9367cd57bc247dcdc444a8553193", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -875,7 +875,11 @@ LLVMRustOptimizeWithNewPassManager(\n #if LLVM_VERSION_GE(11, 0)\n       OptimizerLastEPCallbacks.push_back(\n         [Options](ModulePassManager &MPM, OptimizationLevel Level) {\n+#if LLVM_VERSION_GE(14, 0)\n+          MPM.addPass(ModuleMemorySanitizerPass(Options));\n+#else\n           MPM.addPass(MemorySanitizerPass(Options));\n+#endif\n           MPM.addPass(createModuleToFunctionPassAdaptor(MemorySanitizerPass(Options)));\n         }\n       );\n@@ -897,7 +901,11 @@ LLVMRustOptimizeWithNewPassManager(\n #if LLVM_VERSION_GE(11, 0)\n       OptimizerLastEPCallbacks.push_back(\n         [](ModulePassManager &MPM, OptimizationLevel Level) {\n+#if LLVM_VERSION_GE(14, 0)\n+          MPM.addPass(ModuleThreadSanitizerPass());\n+#else\n           MPM.addPass(ThreadSanitizerPass());\n+#endif\n           MPM.addPass(createModuleToFunctionPassAdaptor(ThreadSanitizerPass()));\n         }\n       );"}, {"sha": "9359a55e55a9c74845c6a539f30abb43b3016056", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -1,3 +1,5 @@\n+//! A module for searching for libraries\n+\n pub use self::FileMatch::*;\n \n use std::env;\n@@ -14,8 +16,6 @@ pub enum FileMatch {\n     FileDoesntMatch,\n }\n \n-// A module for searching for libraries\n-\n #[derive(Clone)]\n pub struct FileSearch<'a> {\n     sysroot: &'a Path,\n@@ -83,22 +83,10 @@ impl<'a> FileSearch<'a> {\n         FileSearch { sysroot, triple, search_paths, tlib_path, kind }\n     }\n \n-    // Returns just the directories within the search paths.\n+    /// Returns just the directories within the search paths.\n     pub fn search_path_dirs(&self) -> Vec<PathBuf> {\n         self.search_paths().map(|sp| sp.dir.to_path_buf()).collect()\n     }\n-\n-    // Returns a list of directories where target-specific tool binaries are located.\n-    pub fn get_tools_search_paths(&self, self_contained: bool) -> Vec<PathBuf> {\n-        let rustlib_path = rustc_target::target_rustlib_path(self.sysroot, &self.triple);\n-        let p = std::array::IntoIter::new([\n-            Path::new(&self.sysroot),\n-            Path::new(&rustlib_path),\n-            Path::new(\"bin\"),\n-        ])\n-        .collect::<PathBuf>();\n-        if self_contained { vec![p.clone(), p.join(\"self-contained\")] } else { vec![p] }\n-    }\n }\n \n pub fn make_target_lib_path(sysroot: &Path, target_triple: &str) -> PathBuf {\n@@ -107,8 +95,8 @@ pub fn make_target_lib_path(sysroot: &Path, target_triple: &str) -> PathBuf {\n         .collect::<PathBuf>()\n }\n \n-// This function checks if sysroot is found using env::args().next(), and if it\n-// is not found, uses env::current_exe() to imply sysroot.\n+/// This function checks if sysroot is found using env::args().next(), and if it\n+/// is not found, uses env::current_exe() to imply sysroot.\n pub fn get_or_default_sysroot() -> PathBuf {\n     // Follow symlinks.  If the resolved path is relative, make it absolute.\n     fn canonicalize(path: PathBuf) -> PathBuf {"}, {"sha": "acb6c735e051ebc2cfb90b5310e07c7bc8208533", "filename": "compiler/rustc_session/src/search_paths.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/compiler%2Frustc_session%2Fsrc%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/compiler%2Frustc_session%2Fsrc%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsearch_paths.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -9,17 +9,17 @@ pub struct SearchPath {\n     pub files: Vec<SearchPathFile>,\n }\n \n-// The obvious implementation of `SearchPath::files` is a `Vec<PathBuf>`. But\n-// it is searched repeatedly by `find_library_crate`, and the searches involve\n-// checking the prefix and suffix of the filename of each `PathBuf`. This is\n-// doable, but very slow, because it involves calls to `file_name` and\n-// `extension` that are themselves slow.\n-//\n-// This type augments the `PathBuf` with an `Option<String>` containing the\n-// `PathBuf`'s filename. The prefix and suffix checking is much faster on the\n-// `Option<String>` than the `PathBuf`. (It's an `Option` because\n-// `Path::file_name` can fail; if that happens then all subsequent checking\n-// will also fail, which is fine.)\n+/// The obvious implementation of `SearchPath::files` is a `Vec<PathBuf>`. But\n+/// it is searched repeatedly by `find_library_crate`, and the searches involve\n+/// checking the prefix and suffix of the filename of each `PathBuf`. This is\n+/// doable, but very slow, because it involves calls to `file_name` and\n+/// `extension` that are themselves slow.\n+///\n+/// This type augments the `PathBuf` with an `Option<String>` containing the\n+/// `PathBuf`'s filename. The prefix and suffix checking is much faster on the\n+/// `Option<String>` than the `PathBuf`. (It's an `Option` because\n+/// `Path::file_name` can fail; if that happens then all subsequent checking\n+/// will also fail, which is fine.)\n #[derive(Clone, Debug)]\n pub struct SearchPathFile {\n     pub path: PathBuf,"}, {"sha": "d6f4a3ae4f121f76a8594e7662a224f7d057ce79", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -36,7 +36,7 @@ use std::fmt;\n use std::io::Write;\n use std::num::NonZeroU32;\n use std::ops::{Div, Mul};\n-use std::path::PathBuf;\n+use std::path::{Path, PathBuf};\n use std::str::FromStr;\n use std::sync::Arc;\n use std::time::Duration;\n@@ -131,9 +131,8 @@ pub struct Session {\n     pub target: Target,\n     pub host: Target,\n     pub opts: config::Options,\n-    pub host_tlib_path: SearchPath,\n-    /// `None` if the host and target are the same.\n-    pub target_tlib_path: Option<SearchPath>,\n+    pub host_tlib_path: Lrc<SearchPath>,\n+    pub target_tlib_path: Lrc<SearchPath>,\n     pub parse_sess: ParseSess,\n     pub sysroot: PathBuf,\n     /// The name of the root source file of the crate, in the local file system.\n@@ -787,8 +786,7 @@ impl Session {\n             &self.sysroot,\n             self.opts.target_triple.triple(),\n             &self.opts.search_paths,\n-            // `target_tlib_path == None` means it's the same as `host_tlib_path`.\n-            self.target_tlib_path.as_ref().unwrap_or(&self.host_tlib_path),\n+            &self.target_tlib_path,\n             kind,\n         )\n     }\n@@ -802,6 +800,18 @@ impl Session {\n         )\n     }\n \n+    /// Returns a list of directories where target-specific tool binaries are located.\n+    pub fn get_tools_search_paths(&self, self_contained: bool) -> Vec<PathBuf> {\n+        let rustlib_path = rustc_target::target_rustlib_path(&self.sysroot, &config::host_triple());\n+        let p = std::array::IntoIter::new([\n+            Path::new(&self.sysroot),\n+            Path::new(&rustlib_path),\n+            Path::new(\"bin\"),\n+        ])\n+        .collect::<PathBuf>();\n+        if self_contained { vec![p.clone(), p.join(\"self-contained\")] } else { vec![p] }\n+    }\n+\n     pub fn init_incr_comp_session(\n         &self,\n         session_dir: PathBuf,\n@@ -1245,11 +1255,13 @@ pub fn build_session(\n \n     let host_triple = config::host_triple();\n     let target_triple = sopts.target_triple.triple();\n-    let host_tlib_path = SearchPath::from_sysroot_and_triple(&sysroot, host_triple);\n+    let host_tlib_path = Lrc::new(SearchPath::from_sysroot_and_triple(&sysroot, host_triple));\n     let target_tlib_path = if host_triple == target_triple {\n-        None\n+        // Use the same `SearchPath` if host and target triple are identical to avoid unnecessary\n+        // rescanning of the target lib path and an unnecessary allocation.\n+        host_tlib_path.clone()\n     } else {\n-        Some(SearchPath::from_sysroot_and_triple(&sysroot, target_triple))\n+        Lrc::new(SearchPath::from_sysroot_and_triple(&sysroot, target_triple))\n     };\n \n     let file_path_mapping = sopts.file_path_mapping();"}, {"sha": "e435154d9318e7b087a7bc98c84097b4f3e51b64", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -722,7 +722,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 };\n \n                 let found_did = match *found_trait_ty.kind() {\n-                    ty::Closure(did, _) | ty::Foreign(did) | ty::FnDef(did, _) => Some(did),\n+                    ty::Closure(did, _)\n+                    | ty::Foreign(did)\n+                    | ty::FnDef(did, _)\n+                    | ty::Generator(did, ..) => Some(did),\n                     ty::Adt(def, _) => Some(def.did),\n                     _ => None,\n                 };"}, {"sha": "ae61988928f78e6ba2f317016718c2cf1df01c3f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -1256,33 +1256,40 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             trait_ref: ty::PolyTraitRef<'tcx>,\n         ) -> String {\n             let inputs = trait_ref.skip_binder().substs.type_at(1);\n-            let sig = if let ty::Tuple(inputs) = inputs.kind() {\n-                tcx.mk_fn_sig(\n-                    inputs.iter().map(|k| k.expect_ty()),\n-                    tcx.mk_ty_infer(ty::TyVar(ty::TyVid::from_u32(0))),\n-                    false,\n-                    hir::Unsafety::Normal,\n-                    abi::Abi::Rust,\n-                )\n-            } else {\n-                tcx.mk_fn_sig(\n+            let sig = match inputs.kind() {\n+                ty::Tuple(inputs)\n+                    if tcx.fn_trait_kind_from_lang_item(trait_ref.def_id()).is_some() =>\n+                {\n+                    tcx.mk_fn_sig(\n+                        inputs.iter().map(|k| k.expect_ty()),\n+                        tcx.mk_ty_infer(ty::TyVar(ty::TyVid::from_u32(0))),\n+                        false,\n+                        hir::Unsafety::Normal,\n+                        abi::Abi::Rust,\n+                    )\n+                }\n+                _ => tcx.mk_fn_sig(\n                     std::iter::once(inputs),\n                     tcx.mk_ty_infer(ty::TyVar(ty::TyVid::from_u32(0))),\n                     false,\n                     hir::Unsafety::Normal,\n                     abi::Abi::Rust,\n-                )\n+                ),\n             };\n             trait_ref.rebind(sig).to_string()\n         }\n \n-        let argument_is_closure = expected_ref.skip_binder().substs.type_at(0).is_closure();\n+        let argument_kind = match expected_ref.skip_binder().substs.type_at(0) {\n+            t if t.is_closure() => \"closure\",\n+            t if t.is_generator() => \"generator\",\n+            _ => \"function\",\n+        };\n         let mut err = struct_span_err!(\n             self.tcx.sess,\n             span,\n             E0631,\n             \"type mismatch in {} arguments\",\n-            if argument_is_closure { \"closure\" } else { \"function\" }\n+            argument_kind\n         );\n \n         let found_str = format!(\"expected signature of `{}`\", build_fn_sig_string(self.tcx, found));"}, {"sha": "9ecbf0582319e845febdf4cca95e4d822c0bd7c6", "filename": "library/alloc/src/borrow.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/library%2Falloc%2Fsrc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/library%2Falloc%2Fsrc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fborrow.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -330,7 +330,11 @@ impl<B: ?Sized + ToOwned> Cow<'_, B> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<B: ?Sized + ToOwned> Deref for Cow<'_, B> {\n+#[rustc_const_unstable(feature = \"const_deref\", issue = \"88955\")]\n+impl<B: ?Sized + ToOwned> const Deref for Cow<'_, B>\n+where\n+    B::Owned: ~const Borrow<B>,\n+{\n     type Target = B;\n \n     fn deref(&self) -> &B {"}, {"sha": "20b6453990d7519ce7199d49733b59fa0c899dd4", "filename": "library/core/src/mem/manually_drop.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -145,7 +145,8 @@ impl<T: ?Sized> ManuallyDrop<T> {\n }\n \n #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n-impl<T: ?Sized> Deref for ManuallyDrop<T> {\n+#[rustc_const_unstable(feature = \"const_deref\", issue = \"88955\")]\n+impl<T: ?Sized> const Deref for ManuallyDrop<T> {\n     type Target = T;\n     #[inline(always)]\n     fn deref(&self) -> &T {\n@@ -154,7 +155,8 @@ impl<T: ?Sized> Deref for ManuallyDrop<T> {\n }\n \n #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n-impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n+#[rustc_const_unstable(feature = \"const_deref\", issue = \"88955\")]\n+impl<T: ?Sized> const DerefMut for ManuallyDrop<T> {\n     #[inline(always)]\n     fn deref_mut(&mut self) -> &mut T {\n         &mut self.value"}, {"sha": "fb4ec83bc287e7d42a4ccbf132365d8f910f3951", "filename": "library/core/src/ops/deref.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/library%2Fcore%2Fsrc%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/library%2Fcore%2Fsrc%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fderef.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -76,7 +76,8 @@ pub trait Deref {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: ?Sized> Deref for &T {\n+#[rustc_const_unstable(feature = \"const_deref\", issue = \"88955\")]\n+impl<T: ?Sized> const Deref for &T {\n     type Target = T;\n \n     #[rustc_diagnostic_item = \"noop_method_deref\"]\n@@ -89,7 +90,8 @@ impl<T: ?Sized> Deref for &T {\n impl<T: ?Sized> !DerefMut for &T {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: ?Sized> Deref for &mut T {\n+#[rustc_const_unstable(feature = \"const_deref\", issue = \"88955\")]\n+impl<T: ?Sized> const Deref for &mut T {\n     type Target = T;\n \n     fn deref(&self) -> &T {"}, {"sha": "223726d45d72a4ffe7ee2ad5897c7e97575cbbda", "filename": "library/std/src/net/tcp.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -96,6 +96,18 @@ pub struct Incoming<'a> {\n     listener: &'a TcpListener,\n }\n \n+/// An iterator that infinitely [`accept`]s connections on a [`TcpListener`].\n+///\n+/// This `struct` is created by the [`TcpListener::into_incoming`] method.\n+/// See its documentation for more.\n+///\n+/// [`accept`]: TcpListener::accept\n+#[derive(Debug)]\n+#[unstable(feature = \"tcplistener_into_incoming\", issue = \"88339\")]\n+pub struct IntoIncoming {\n+    listener: TcpListener,\n+}\n+\n impl TcpStream {\n     /// Opens a TCP connection to a remote host.\n     ///\n@@ -845,6 +857,37 @@ impl TcpListener {\n         Incoming { listener: self }\n     }\n \n+    /// Turn this into an iterator over the connections being received on this\n+    /// listener.\n+    ///\n+    /// The returned iterator will never return [`None`] and will also not yield\n+    /// the peer's [`SocketAddr`] structure. Iterating over it is equivalent to\n+    /// calling [`TcpListener::accept`] in a loop.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(tcplistener_into_incoming)]\n+    /// use std::net::{TcpListener, TcpStream};\n+    ///\n+    /// fn listen_on(port: u16) -> impl Iterator<Item = TcpStream> {\n+    ///     let listener = TcpListener::bind(\"127.0.0.1:80\").unwrap();\n+    ///     listener.into_incoming()\n+    ///         .filter_map(Result::ok) /* Ignore failed connections */\n+    /// }\n+    ///\n+    /// fn main() -> std::io::Result<()> {\n+    ///     for stream in listen_on(80) {\n+    ///         /* handle the connection here */\n+    ///     }\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"tcplistener_into_incoming\", issue = \"88339\")]\n+    pub fn into_incoming(self) -> IntoIncoming {\n+        IntoIncoming { listener: self }\n+    }\n+\n     /// Sets the value for the `IP_TTL` option on this socket.\n     ///\n     /// This value sets the time-to-live field that is used in every packet sent\n@@ -982,6 +1025,14 @@ impl<'a> Iterator for Incoming<'a> {\n     }\n }\n \n+#[unstable(feature = \"tcplistener_into_incoming\", issue = \"88339\")]\n+impl Iterator for IntoIncoming {\n+    type Item = io::Result<TcpStream>;\n+    fn next(&mut self) -> Option<io::Result<TcpStream>> {\n+        Some(self.listener.accept().map(|p| p.0))\n+    }\n+}\n+\n impl AsInner<net_imp::TcpListener> for TcpListener {\n     fn as_inner(&self) -> &net_imp::TcpListener {\n         &self.0"}, {"sha": "279d0dbda82ee7b45378181870f882768106c245", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -96,6 +96,7 @@ crate fn should_have_doc_example(cx: &DocContext<'_>, item: &clean::Item) -> boo\n \n     if cx.tcx.hir().attrs(hir_id).lists(sym::doc).has_word(sym::hidden)\n         || inherits_doc_hidden(cx.tcx, hir_id)\n+        || cx.tcx.hir().span(hir_id).in_derive_expansion()\n     {\n         return false;\n     }"}, {"sha": "cb77eb34fef08d77246fe41bdf4eec42d9be6b78", "filename": "src/test/run-make-fulldeps/sysroot-crates-are-unstable/test.py", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Frun-make-fulldeps%2Fsysroot-crates-are-unstable%2Ftest.py", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Frun-make-fulldeps%2Fsysroot-crates-are-unstable%2Ftest.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsysroot-crates-are-unstable%2Ftest.py?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -17,6 +17,17 @@ def convert_to_string(s):\n     return s\n \n \n+def set_ld_lib_path():\n+    var = os.environ.get(\"LD_LIB_PATH_ENVVAR\")\n+    rpath = os.environ.get(\"HOST_RPATH_DIR\")\n+    if var and rpath:\n+        path = os.environ.get(var)\n+        if path:\n+            os.environ[var] = rpath + os.pathsep + path\n+        else:\n+            os.environ[var] = rpath\n+\n+\n def exec_command(command, to_input=None):\n     child = None\n     if to_input is None:\n@@ -50,7 +61,9 @@ def get_all_libs(dir_path):\n             if isfile(join(dir_path, f)) and f.endswith('.rlib') and f not in STABLE_CRATES]\n \n \n+set_ld_lib_path()\n sysroot = exec_command([os.environ['RUSTC'], '--print', 'sysroot'])[0].replace('\\n', '')\n+assert sysroot, \"Could not read the rustc sysroot!\"\n libs = get_all_libs(join(sysroot, 'lib/rustlib/{}/lib'.format(os.environ['TARGET'])))\n \n ret = 0"}, {"sha": "fac6342cd24b9e86da8152b50c1e574e7d9b4973", "filename": "src/test/rustdoc-ui/lint-missing-doc-code-example.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -78,6 +78,15 @@ impl Clone for Struct {\n }\n \n \n+\n+/// doc\n+///\n+/// ```\n+/// println!(\"hello\");\n+/// ```\n+#[derive(Clone)]\n+pub struct NiceStruct;\n+\n #[doc(hidden)]\n pub mod foo {\n     pub fn bar() {}"}, {"sha": "5cf422043a5850734c5574558d3665c2c07a7474", "filename": "src/test/ui/associated-types/issue-19883.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fassociated-types%2Fissue-19883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fassociated-types%2Fissue-19883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-19883.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-19883.rs"}, {"sha": "bd6a86b74208919176a7adf96794fe6628e7814d", "filename": "src/test/ui/associated-types/issue-19883.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fassociated-types%2Fissue-19883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fassociated-types%2Fissue-19883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-19883.stderr?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-19883.stderr"}, {"sha": "acc28cb430b273bb0dbcc75be44e23b0dacf4579", "filename": "src/test/ui/associated-types/issue-21363.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fassociated-types%2Fissue-21363.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fassociated-types%2Fissue-21363.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-21363.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-21363.rs"}, {"sha": "8383eba89124a50b934cb3d3e0556e5b8461c96d", "filename": "src/test/ui/async-await/auxiliary/issue-72470-lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fasync-await%2Fauxiliary%2Fissue-72470-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fasync-await%2Fauxiliary%2Fissue-72470-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fauxiliary%2Fissue-72470-lib.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/auxiliary/issue-72470-lib.rs"}, {"sha": "5bb69a0730525f3d69de586daae62f467a9793df", "filename": "src/test/ui/async-await/issue-72470-llvm-dominate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fasync-await%2Fissue-72470-llvm-dominate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fasync-await%2Fissue-72470-llvm-dominate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-72470-llvm-dominate.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issue-72470-llvm-dominate.rs"}, {"sha": "4cdb9f491130c56c4b16de31d78de8009d85956b", "filename": "src/test/ui/closures/issue-78720.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fclosures%2Fissue-78720.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fclosures%2Fissue-78720.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-78720.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-78720.rs"}, {"sha": "3dd1387729833fc6c318f9f104d3135b306ddfa9", "filename": "src/test/ui/closures/issue-78720.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fclosures%2Fissue-78720.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fclosures%2Fissue-78720.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-78720.stderr?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-78720.stderr"}, {"sha": "d4128fa54e3daf2059e1cebaffc8465a753243c9", "filename": "src/test/ui/consts/issue-23833.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fconsts%2Fissue-23833.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fconsts%2Fissue-23833.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-23833.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-23833.rs"}, {"sha": "98d943470a7f9ac05aa3e31abd1997fca5e3b7a5", "filename": "src/test/ui/consts/issue-34784.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fconsts%2Fissue-34784.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fconsts%2Fissue-34784.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-34784.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-34784.rs"}, {"sha": "e98d68e0eb2039c3efff4b53b0d278cbd7c647e7", "filename": "src/test/ui/deriving/issue-3935.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fderiving%2Fissue-3935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fderiving%2Fissue-3935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fissue-3935.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-3935.rs"}, {"sha": "ce9159b53e0f0a5b147e1e5f87df731e217e10ef", "filename": "src/test/ui/generator/issue-88653.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -0,0 +1,19 @@\n+// Regression test for #88653, where a confusing warning about a\n+// type mismatch in generator arguments was issued.\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::Generator;\n+\n+fn foo(bar: bool) -> impl Generator<(bool,)> {\n+//~^ ERROR: type mismatch in generator arguments [E0631]\n+//~| NOTE: expected signature of `fn((bool,)) -> _`\n+    |bar| {\n+    //~^ NOTE: found signature of `fn(bool) -> _`\n+        if bar {\n+            yield bar;\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "5bd8ad129fef908d874662b5f04500e772afe288", "filename": "src/test/ui/generator/issue-88653.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.stderr?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -0,0 +1,12 @@\n+error[E0631]: type mismatch in generator arguments\n+  --> $DIR/issue-88653.rs:8:22\n+   |\n+LL | fn foo(bar: bool) -> impl Generator<(bool,)> {\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^ expected signature of `fn((bool,)) -> _`\n+...\n+LL |     |bar| {\n+   |     ----- found signature of `fn(bool) -> _`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0631`."}, {"sha": "a8128207c808ca17ce879e2eec8dc7af8bcf1533", "filename": "src/test/ui/generics/mid-path-type-params.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fgenerics%2Fmid-path-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fgenerics%2Fmid-path-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fmid-path-type-params.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/mid-path-type-params.rs"}, {"sha": "ecfa5c69e2f038ed19bbc6264e017d0d839c4739", "filename": "src/test/ui/impl-trait/type-arg-mismatch-due-to-impl-trait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-arg-mismatch-due-to-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-arg-mismatch-due-to-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-arg-mismatch-due-to-impl-trait.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/type-arg-mismatch-due-to-impl-trait.rs"}, {"sha": "30322f88cca42aa6020b8d84c665b06d86ad508e", "filename": "src/test/ui/impl-trait/type-arg-mismatch-due-to-impl-trait.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-arg-mismatch-due-to-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-arg-mismatch-due-to-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-arg-mismatch-due-to-impl-trait.stderr?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/type-arg-mismatch-due-to-impl-trait.stderr"}, {"sha": "c31107d8fed0525e45d6e81445a0528a9f290692", "filename": "src/test/ui/inference/issue-71309.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Finference%2Fissue-71309.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Finference%2Fissue-71309.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-71309.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -0,0 +1,7 @@\n+fn foo(x: Result<i32, ()>) -> Result<(), ()> {\n+    let y: u32 = x?;\n+    //~^ ERROR: `?` operator has incompatible types\n+    Ok(())\n+}\n+\n+fn main() {}"}, {"sha": "af8714f1c808303ac02d10194a669c3fd3851f62", "filename": "src/test/ui/inference/issue-71309.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Finference%2Fissue-71309.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Finference%2Fissue-71309.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-71309.stderr?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: `?` operator has incompatible types\n+  --> $DIR/issue-71309.rs:2:18\n+   |\n+LL |     let y: u32 = x?;\n+   |                  ^^ expected `u32`, found `i32`\n+   |\n+   = note: `?` operator cannot convert from `i32` to `u32`\n+help: you can convert an `i32` to a `u32` and panic if the converted value doesn't fit\n+   |\n+LL |     let y: u32 = x?.try_into().unwrap();\n+   |                    ++++++++++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "35402dff675534f769bfe47a343d58b254ce7fb1", "filename": "src/test/ui/issues/issue-51632-try-desugar-incompatible-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -6,7 +6,7 @@ fn missing_discourses() -> Result<isize, ()> {\n \n fn forbidden_narratives() -> Result<isize, ()> {\n     missing_discourses()?\n-    //~^ ERROR try expression alternatives have incompatible types\n+    //~^ ERROR: `?` operator has incompatible types\n }\n \n fn main() {}"}, {"sha": "0f61e03c3b58fb522d4d34d44407b74703719a54", "filename": "src/test/ui/issues/issue-51632-try-desugar-incompatible-types.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -1,9 +1,10 @@\n-error[E0308]: try expression alternatives have incompatible types\n+error[E0308]: `?` operator has incompatible types\n   --> $DIR/issue-51632-try-desugar-incompatible-types.rs:8:5\n    |\n LL |     missing_discourses()?\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected enum `Result`, found `isize`\n    |\n+   = note: `?` operator cannot convert from `isize` to `Result<isize, ()>`\n    = note: expected enum `Result<isize, ()>`\n               found type `isize`\n help: try removing this `?`"}, {"sha": "3544160f094e56be68554ebdb09e7c6e66017dbb", "filename": "src/test/ui/issues/issue-5791.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38e576423dc56a006ccf0b72e106f09bdea6efc2/src%2Ftest%2Fui%2Fissues%2Fissue-5791.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e576423dc56a006ccf0b72e106f09bdea6efc2/src%2Ftest%2Fui%2Fissues%2Fissue-5791.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5791.rs?ref=38e576423dc56a006ccf0b72e106f09bdea6efc2", "patch": "@@ -1,14 +0,0 @@\n-// run-pass\n-#![allow(dead_code)]\n-#![warn(clashing_extern_declarations)]\n-// pretty-expanded FIXME #23616\n-\n-extern \"C\" {\n-    #[link_name = \"malloc\"]\n-    fn malloc1(len: i32) -> *const u8;\n-    #[link_name = \"malloc\"]\n-    //~^ WARN `malloc2` redeclares `malloc` with a different signature\n-    fn malloc2(len: i32, foo: i32) -> *const u8;\n-}\n-\n-pub fn main() {}"}, {"sha": "cf60e609deb318e241757cbb885dd5175eac89f8", "filename": "src/test/ui/issues/issue-5791.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/38e576423dc56a006ccf0b72e106f09bdea6efc2/src%2Ftest%2Fui%2Fissues%2Fissue-5791.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38e576423dc56a006ccf0b72e106f09bdea6efc2/src%2Ftest%2Fui%2Fissues%2Fissue-5791.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5791.stderr?ref=38e576423dc56a006ccf0b72e106f09bdea6efc2", "patch": "@@ -1,21 +0,0 @@\n-warning: `malloc2` redeclares `malloc` with a different signature\n-  --> $DIR/issue-5791.rs:9:5\n-   |\n-LL | /     #[link_name = \"malloc\"]\n-LL | |     fn malloc1(len: i32) -> *const u8;\n-   | |______________________________________- `malloc` previously declared here\n-LL | /     #[link_name = \"malloc\"]\n-LL | |\n-LL | |     fn malloc2(len: i32, foo: i32) -> *const u8;\n-   | |________________________________________________^ this signature doesn't match the previous declaration\n-   |\n-note: the lint level is defined here\n-  --> $DIR/issue-5791.rs:3:9\n-   |\n-LL | #![warn(clashing_extern_declarations)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected `unsafe extern \"C\" fn(i32) -> *const u8`\n-              found `unsafe extern \"C\" fn(i32, i32) -> *const u8`\n-\n-warning: 1 warning emitted\n-"}, {"sha": "aa6a973d7bd85709e62bfd02ff55d3a8ebac2b24", "filename": "src/test/ui/lint/enable-unstable-lib-feature.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Flint%2Fenable-unstable-lib-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Flint%2Fenable-unstable-lib-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fenable-unstable-lib-feature.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/enable-unstable-lib-feature.rs"}, {"sha": "bb4e928ad1583a66c7629942b08717b889b47a01", "filename": "src/test/ui/lint/enable-unstable-lib-feature.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Flint%2Fenable-unstable-lib-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Flint%2Fenable-unstable-lib-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fenable-unstable-lib-feature.stderr?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/enable-unstable-lib-feature.stderr"}, {"sha": "0cf4b8068e46b857e789e773293b4ded4b68da6a", "filename": "src/test/ui/lint/issue-57410.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Flint%2Fissue-57410.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Flint%2Fissue-57410.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-57410.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-57410.rs"}, {"sha": "e9725a027d379fce2ef3304e11ab7c772e7543d3", "filename": "src/test/ui/lint/issue-79744.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Flint%2Fissue-79744.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Flint%2Fissue-79744.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-79744.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-79744.rs"}, {"sha": "6f6dd44d2369e644c957e9d86c583561294c6248", "filename": "src/test/ui/lint/issue-79744.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Flint%2Fissue-79744.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Flint%2Fissue-79744.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-79744.stderr?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-79744.stderr"}, {"sha": "1c362e8aba058e621b081270e8ee209fe84dd20f", "filename": "src/test/ui/llvm-asm/issue-37433.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-37433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-37433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-37433.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-37433.rs"}, {"sha": "44a8eb32b7ccbf6f301eb03137ad20e62c43b97f", "filename": "src/test/ui/llvm-asm/issue-37433.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-37433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-37433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-37433.stderr?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-37433.stderr"}, {"sha": "4956907c55ea906fa5343305f5e7d3a253f17953", "filename": "src/test/ui/macros/auxiliary/define-macro.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fdefine-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fdefine-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fdefine-macro.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/auxiliary/define-macro.rs"}, {"sha": "a0d1a973764ada09c7dfb4e16de005001d4e1730", "filename": "src/test/ui/macros/out-of-order-shadowing.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fmacros%2Fout-of-order-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fmacros%2Fout-of-order-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fout-of-order-shadowing.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/out-of-order-shadowing.rs"}, {"sha": "1db31e0272c91d794b82f31118c4a7b79ee96ee0", "filename": "src/test/ui/macros/out-of-order-shadowing.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fmacros%2Fout-of-order-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fmacros%2Fout-of-order-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fout-of-order-shadowing.stderr?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/out-of-order-shadowing.stderr"}, {"sha": "10a4bb6738781681e4d9e9b995379d9f4e75a116", "filename": "src/test/ui/match/guards.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fmatch%2Fguards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fmatch%2Fguards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fguards.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/guards.rs"}, {"sha": "9c8a97e7e6b2b2867a80d688dc502f7774c78076", "filename": "src/test/ui/match/issue-33498.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fmatch%2Fissue-33498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fmatch%2Fissue-33498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-33498.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-33498.rs"}, {"sha": "9d7072f1665d1520985eabbfbde2df995efa76e6", "filename": "src/test/ui/match/issue-41255.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fmatch%2Fissue-41255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fmatch%2Fissue-41255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-41255.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-41255.rs"}, {"sha": "bf81c8d371c0b985fda0901b87964e78e242023f", "filename": "src/test/ui/match/issue-41255.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fmatch%2Fissue-41255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fmatch%2Fissue-41255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-41255.stderr?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-41255.stderr"}, {"sha": "f320c99ed15d10c4507dbfd1f47b73a607aef192", "filename": "src/test/ui/match/issue-56685.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fmatch%2Fissue-56685.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fmatch%2Fissue-56685.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-56685.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-56685.rs"}, {"sha": "ccf357d4aa00e493e8fff4678b86709c1f3226c1", "filename": "src/test/ui/match/issue-56685.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fmatch%2Fissue-56685.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fmatch%2Fissue-56685.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-56685.stderr?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-56685.stderr"}, {"sha": "ce8ffaf94d063e53d72d1b426442dc6b544797b3", "filename": "src/test/ui/never_type/expr-empty-ret.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fnever_type%2Fexpr-empty-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fnever_type%2Fexpr-empty-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fexpr-empty-ret.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/expr-empty-ret.rs"}, {"sha": "8b0c00b13551909f14a7733677532d54b4458942", "filename": "src/test/ui/polymorphization/issue-74614.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fpolymorphization%2Fissue-74614.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fpolymorphization%2Fissue-74614.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fissue-74614.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-74614.rs"}, {"sha": "b94278bfdd2216b8bf5e3575d3fc44a868b60950", "filename": "src/test/ui/privacy/issue-79593.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-79593.rs"}, {"sha": "b8c7d4f23a28f4b6c2f01c660f943b6b9fe78c8e", "filename": "src/test/ui/privacy/issue-79593.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.stderr?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-79593.stderr"}, {"sha": "a4dd45c63f5648c2d931b4a8949a58e0a6900f84", "filename": "src/test/ui/repr/repr-transparent-issue-87496.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-issue-87496.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-issue-87496.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-issue-87496.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -0,0 +1,12 @@\n+// Regression test for the ICE described in #87496.\n+\n+// check-pass\n+\n+#[repr(transparent)]\n+struct TransparentCustomZst(());\n+extern \"C\" {\n+    fn good17(p: TransparentCustomZst);\n+    //~^ WARNING: `extern` block uses type `TransparentCustomZst`, which is not FFI-safe\n+}\n+\n+fn main() {}"}, {"sha": "c488755cc242c389db7744bf35d0b685d0b6c4ce", "filename": "src/test/ui/repr/repr-transparent-issue-87496.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-issue-87496.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-issue-87496.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-issue-87496.stderr?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -0,0 +1,16 @@\n+warning: `extern` block uses type `TransparentCustomZst`, which is not FFI-safe\n+  --> $DIR/repr-transparent-issue-87496.rs:8:18\n+   |\n+LL |     fn good17(p: TransparentCustomZst);\n+   |                  ^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: `#[warn(improper_ctypes)]` on by default\n+   = note: this struct contains only zero-sized fields\n+note: the type is defined here\n+  --> $DIR/repr-transparent-issue-87496.rs:6:1\n+   |\n+LL | struct TransparentCustomZst(());\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: 1 warning emitted\n+"}, {"sha": "a4404857a56af3dce60446293e32d6d5cae919f3", "filename": "src/test/ui/resolve/issue-42944.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fresolve%2Fissue-42944.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fresolve%2Fissue-42944.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-42944.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-42944.rs"}, {"sha": "008492529d18c9de7d6ce66ba46542402b287955", "filename": "src/test/ui/resolve/issue-42944.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fresolve%2Fissue-42944.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fresolve%2Fissue-42944.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-42944.stderr?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-42944.stderr"}, {"sha": "eccb315feb1e2e126701dc1ef48344a60e6f6fc5", "filename": "src/test/ui/resolve/use-self-in-inner-fn.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fresolve%2Fuse-self-in-inner-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fresolve%2Fuse-self-in-inner-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fuse-self-in-inner-fn.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/use-self-in-inner-fn.rs"}, {"sha": "966093499241dfacbcb0664f2cb695bee48f9942", "filename": "src/test/ui/resolve/use-self-in-inner-fn.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fresolve%2Fuse-self-in-inner-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fresolve%2Fuse-self-in-inner-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fuse-self-in-inner-fn.stderr?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/use-self-in-inner-fn.stderr"}, {"sha": "cc35213b93d686aec69d958fe88c640ac3c5972e", "filename": "src/test/ui/specialization/issue-35376.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fspecialization%2Fissue-35376.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fspecialization%2Fissue-35376.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-35376.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-35376.rs"}, {"sha": "835277d408ef25de730918f83e3c054055680df4", "filename": "src/test/ui/specialization/issue-35376.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fspecialization%2Fissue-35376.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fspecialization%2Fissue-35376.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-35376.stderr?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-35376.stderr"}, {"sha": "6dce556e9e3849c0488e5e03bf88cac052d9c4ca", "filename": "src/test/ui/static/issue-34194.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fstatic%2Fissue-34194.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fstatic%2Fissue-34194.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fissue-34194.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-34194.rs"}, {"sha": "fdb31fc44a19a927a8220c570944ca0137adc6a9", "filename": "src/test/ui/structs-enums/issue-38002.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fstructs-enums%2Fissue-38002.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fstructs-enums%2Fissue-38002.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Fissue-38002.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-38002.rs"}, {"sha": "65b6825a832544cf8eed5d24c4eb46766fcaa212", "filename": "src/test/ui/symbol-names/issue-53912.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-53912.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-53912.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-53912.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-53912.rs"}, {"sha": "f671cbc82050589513b719b84bf213f706254185", "filename": "src/test/ui/test-attrs/issue-36768.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Ftest-attrs%2Fissue-36768.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Ftest-attrs%2Fissue-36768.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Fissue-36768.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-36768.rs"}, {"sha": "fbd3413885f8f98651e05c82d5f1d43462dd5154", "filename": "src/test/ui/thread-local/tls.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fthread-local%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Fthread-local%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthread-local%2Ftls.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/tls.rs"}, {"sha": "f53a1736127432c3802de76ea7495bbe25f5452d", "filename": "src/test/ui/traits/bug-7183-generics.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Ftraits%2Fbug-7183-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Ftraits%2Fbug-7183-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbug-7183-generics.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/bug-7183-generics.rs"}, {"sha": "1cb2d8c7302a08f2a1c609ca5496e8b6e54808fa", "filename": "src/test/ui/traits/issue-20692.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Ftraits%2Fissue-20692.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Ftraits%2Fissue-20692.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-20692.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-20692.rs"}, {"sha": "1d7f252e5566ddc1d5475dbf60e27653bd95a605", "filename": "src/test/ui/traits/issue-20692.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Ftraits%2Fissue-20692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Ftraits%2Fissue-20692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-20692.stderr?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-20692.stderr"}, {"sha": "a9f0095d2e245d0f5ae5da6932f769f43dfaef86", "filename": "src/test/ui/traits/issue-23825.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Ftraits%2Fissue-23825.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Ftraits%2Fissue-23825.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-23825.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-23825.rs"}, {"sha": "9e9cbcf33ae17a8ae52056360d4d608190c84260", "filename": "src/test/ui/unsafe/issue-45107-unnecessary-unsafe-in-closure.mir.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Funsafe%2Fissue-45107-unnecessary-unsafe-in-closure.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Funsafe%2Fissue-45107-unnecessary-unsafe-in-closure.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Fissue-45107-unnecessary-unsafe-in-closure.mir.stderr?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-45107-unnecessary-unsafe-in-closure.mir.stderr"}, {"sha": "ac1cfd62a05687238f72c36a3ccbcb2697d63bb1", "filename": "src/test/ui/unsafe/issue-45107-unnecessary-unsafe-in-closure.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Funsafe%2Fissue-45107-unnecessary-unsafe-in-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Funsafe%2Fissue-45107-unnecessary-unsafe-in-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Fissue-45107-unnecessary-unsafe-in-closure.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-45107-unnecessary-unsafe-in-closure.rs"}, {"sha": "9e9cbcf33ae17a8ae52056360d4d608190c84260", "filename": "src/test/ui/unsafe/issue-45107-unnecessary-unsafe-in-closure.thir.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Funsafe%2Fissue-45107-unnecessary-unsafe-in-closure.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftest%2Fui%2Funsafe%2Fissue-45107-unnecessary-unsafe-in-closure.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Fissue-45107-unnecessary-unsafe-in-closure.thir.stderr?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "previous_filename": "src/test/ui/issues/issue-45107-unnecessary-unsafe-in-closure.thir.stderr"}, {"sha": "a341527c84cf065d3b6774cc63b3b21a8a7acf8f", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=1c03f0d0ba4fee54b7aa458f4d3ad989d8bf7b34", "patch": "@@ -7,8 +7,8 @@ use std::path::Path;\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n-const ROOT_ENTRY_LIMIT: usize = 1345;\n-const ISSUES_ENTRY_LIMIT: usize = 2525;\n+const ROOT_ENTRY_LIMIT: usize = 1330;\n+const ISSUES_ENTRY_LIMIT: usize = 2488;\n \n fn check_entries(path: &Path, bad: &mut bool) {\n     let dirs = walkdir::WalkDir::new(&path.join(\"test/ui\"))"}]}