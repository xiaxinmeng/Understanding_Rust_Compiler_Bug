{"sha": "ec666a597743ad57f514d8f271291a8a1f5a0ff0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNjY2YTU5Nzc0M2FkNTdmNTE0ZDhmMjcxMjkxYThhMWY1YTBmZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-29T21:43:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-29T21:43:51Z"}, "message": "Auto merge of #32571 - eddyb:llvm-back-to-back, r=alexcrichton\n\nWeed out dependencies on librustc_llvm and librustc.\n\nFound while working on #32570. cc @nikomatsakis", "tree": {"sha": "b37d1a7b3824cbdcbc4e33b033cf7ef918f3b31e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b37d1a7b3824cbdcbc4e33b033cf7ef918f3b31e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec666a597743ad57f514d8f271291a8a1f5a0ff0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec666a597743ad57f514d8f271291a8a1f5a0ff0", "html_url": "https://github.com/rust-lang/rust/commit/ec666a597743ad57f514d8f271291a8a1f5a0ff0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec666a597743ad57f514d8f271291a8a1f5a0ff0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c", "html_url": "https://github.com/rust-lang/rust/commit/8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c"}, {"sha": "f22ec2992b698a1fe75eb49e331257c36e2ed1c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f22ec2992b698a1fe75eb49e331257c36e2ed1c2", "html_url": "https://github.com/rust-lang/rust/commit/f22ec2992b698a1fe75eb49e331257c36e2ed1c2"}], "stats": {"total": 66, "additions": 22, "deletions": 44}, "files": [{"sha": "ba959d2778e78ed9ca0d79c60156067235663203", "filename": "mk/crates.mk", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ec666a597743ad57f514d8f271291a8a1f5a0ff0/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ec666a597743ad57f514d8f271291a8a1f5a0ff0/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=ec666a597743ad57f514d8f271291a8a1f5a0ff0", "patch": "@@ -53,11 +53,12 @@ TARGET_CRATES := libc std term \\\n                  getopts collections test rand \\\n                  core alloc \\\n                  rustc_unicode rustc_bitflags \\\n-\t\t alloc_system alloc_jemalloc rustc_const_eval\n+\t\t alloc_system alloc_jemalloc\n RUSTC_CRATES := rustc rustc_typeck rustc_mir rustc_borrowck rustc_resolve rustc_driver \\\n                 rustc_trans rustc_back rustc_llvm rustc_privacy rustc_lint \\\n                 rustc_data_structures rustc_front rustc_platform_intrinsics \\\n-                rustc_plugin rustc_metadata rustc_passes rustc_save_analysis\n+                rustc_plugin rustc_metadata rustc_passes rustc_save_analysis \\\n+                rustc_const_eval\n HOST_CRATES := syntax syntax_ext $(RUSTC_CRATES) rustdoc fmt_macros \\\n \t\tflate arena graphviz rbml log serialize\n TOOLS := compiletest rustdoc rustc rustbook error_index_generator\n@@ -94,9 +95,9 @@ DEPS_syntax_ext := syntax fmt_macros\n DEPS_rustc_const_eval := std syntax\n \n DEPS_rustc := syntax fmt_macros flate arena serialize getopts rbml rustc_front\\\n-              log graphviz rustc_llvm rustc_back rustc_data_structures\\\n+              log graphviz rustc_back rustc_data_structures\\\n \t\t  \t  rustc_const_eval\n-DEPS_rustc_back := std syntax rustc_llvm rustc_front flate log libc\n+DEPS_rustc_back := std syntax rustc_front flate log libc\n DEPS_rustc_borrowck := rustc rustc_front rustc_mir log graphviz syntax\n DEPS_rustc_data_structures := std log serialize\n DEPS_rustc_driver := arena flate getopts graphviz libc rustc rustc_back rustc_borrowck \\\n@@ -110,7 +111,7 @@ DEPS_rustc_metadata := rustc rustc_front syntax rbml rustc_const_eval\n DEPS_rustc_passes := syntax rustc core rustc_front\n DEPS_rustc_mir := rustc rustc_front syntax rustc_const_eval\n DEPS_rustc_resolve := arena rustc rustc_front log syntax\n-DEPS_rustc_platform_intrinsics := rustc rustc_llvm\n+DEPS_rustc_platform_intrinsics := std\n DEPS_rustc_plugin := rustc rustc_metadata syntax rustc_mir\n DEPS_rustc_privacy := rustc rustc_front log syntax\n DEPS_rustc_trans := arena flate getopts graphviz libc rustc rustc_back rustc_mir \\"}, {"sha": "a21194962f9b061663203c969ce6c115b4bc097b", "filename": "src/etc/platform-intrinsics/generator.py", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py", "raw_url": "https://github.com/rust-lang/rust/raw/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py?ref=ec666a597743ad57f514d8f271291a8a1f5a0ff0", "patch": "@@ -759,12 +759,11 @@ def open(self, platform):\n \n use {{Intrinsic, Type}};\n use IntrinsicDef::Named;\n-use rustc::middle::ty::TyCtxt;\n \n // The default inlining settings trigger a pathological behaviour in\n // LLVM, which causes makes compilation very slow. See #28273.\n #[inline(never)]\n-pub fn find<'tcx>(_tcx: &TyCtxt<'tcx>, name: &str) -> Option<Intrinsic> {{\n+pub fn find(name: &str) -> Option<Intrinsic> {{\n     if !name.starts_with(\"{0}\") {{ return None }}\n     Some(match &name[\"{0}\".len()..] {{'''.format(platform.intrinsic_prefix())\n "}, {"sha": "d2dc5f1ed93e08c4a1edf87efca5d091e74fc49a", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=ec666a597743ad57f514d8f271291a8a1f5a0ff0", "patch": "@@ -21,6 +21,5 @@ rustc_bitflags = { path = \"../librustc_bitflags\" }\n rustc_const_eval = { path = \"../librustc_const_eval\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_front = { path = \"../librustc_front\" }\n-rustc_llvm = { path = \"../librustc_llvm\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "6b5f889fcfb8582e49d77316a4aeb0dbf08235c8", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=ec666a597743ad57f514d8f271291a8a1f5a0ff0", "patch": "@@ -50,7 +50,6 @@ extern crate getopts;\n extern crate graphviz;\n extern crate libc;\n extern crate rbml;\n-pub extern crate rustc_llvm as llvm;\n extern crate rustc_back;\n extern crate rustc_front;\n extern crate rustc_data_structures;\n@@ -140,10 +139,6 @@ pub mod util {\n     pub mod fs;\n }\n \n-pub mod lib {\n-    pub use llvm;\n-}\n-\n // A private module so that macro-expanded idents like\n // `::rustc::lint::Lint` will also work in `rustc` itself.\n //"}, {"sha": "0eef4b5221aa5b0202298b3f82233e4947b3fbd1", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=ec666a597743ad57f514d8f271291a8a1f5a0ff0", "patch": "@@ -38,8 +38,6 @@ use std::env;\n use std::fmt;\n use std::path::PathBuf;\n \n-use llvm;\n-\n pub struct Config {\n     pub target: Target,\n     pub int_type: IntTy,\n@@ -1052,10 +1050,6 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let dump_dep_graph = debugging_opts.dump_dep_graph;\n     let no_analysis = debugging_opts.no_analysis;\n \n-    if debugging_opts.debug_llvm {\n-        unsafe { llvm::LLVMSetDebug(1); }\n-    }\n-\n     let mut output_types = HashMap::new();\n     if !debugging_opts.parse_only && !no_trans {\n         for list in matches.opt_strs(\"emit\") {"}, {"sha": "2cf6cbc4bcfa1780626bc4675cffbed4aa0ac39e", "filename": "src/librustc_back/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Flibrustc_back%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Flibrustc_back%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2FCargo.toml?ref=ec666a597743ad57f514d8f271291a8a1f5a0ff0", "patch": "@@ -11,7 +11,6 @@ crate-type = [\"dylib\"]\n [dependencies]\n syntax = { path = \"../libsyntax\" }\n serialize = { path = \"../libserialize\" }\n-rustc_llvm = { path = \"../librustc_llvm\" }\n rustc_front = { path = \"../librustc_front\" }\n log = { path = \"../liblog\" }\n "}, {"sha": "80dec2cd28153c23e7f7f4ce6ff6e87eb6207389", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=ec666a597743ad57f514d8f271291a8a1f5a0ff0", "patch": "@@ -45,7 +45,6 @@\n extern crate syntax;\n extern crate libc;\n extern crate serialize;\n-extern crate rustc_llvm;\n extern crate rustc_front;\n #[macro_use] extern crate log;\n "}, {"sha": "057a34c27b1c7f434d41bb06cf4a98c1de65e877", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=ec666a597743ad57f514d8f271291a8a1f5a0ff0", "patch": "@@ -166,6 +166,10 @@ pub fn run_compiler<'a>(args: &[String],\n \n     let sopts = config::build_session_options(&matches);\n \n+    if sopts.debugging_opts.debug_llvm {\n+        unsafe { llvm::LLVMSetDebug(1); }\n+    }\n+\n     let descriptions = diagnostics_registry();\n \n     do_or_return!(callbacks.early_callback(&matches,"}, {"sha": "92f37f974efdccf5ea0623e692149da48779a95c", "filename": "src/librustc_platform_intrinsics/Cargo.toml", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Flibrustc_platform_intrinsics%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Flibrustc_platform_intrinsics%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2FCargo.toml?ref=ec666a597743ad57f514d8f271291a8a1f5a0ff0", "patch": "@@ -7,7 +7,3 @@ version = \"0.0.0\"\n name = \"rustc_platform_intrinsics\"\n path = \"lib.rs\"\n crate-type = [\"dylib\"]\n-\n-[dependencies]\n-rustc_llvm = { path = \"../librustc_llvm\" }\n-rustc = { path = \"../librustc\" }"}, {"sha": "0fb8513e138f3d9ee8fde83369bb4acbce4a0280", "filename": "src/librustc_platform_intrinsics/aarch64.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Flibrustc_platform_intrinsics%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Flibrustc_platform_intrinsics%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Faarch64.rs?ref=ec666a597743ad57f514d8f271291a8a1f5a0ff0", "patch": "@@ -15,12 +15,11 @@\n \n use {Intrinsic, Type};\n use IntrinsicDef::Named;\n-use rustc::ty::TyCtxt;\n \n // The default inlining settings trigger a pathological behaviour in\n // LLVM, which causes makes compilation very slow. See #28273.\n #[inline(never)]\n-pub fn find<'tcx>(_tcx: &TyCtxt<'tcx>, name: &str) -> Option<Intrinsic> {\n+pub fn find(name: &str) -> Option<Intrinsic> {\n     if !name.starts_with(\"aarch64_v\") { return None }\n     Some(match &name[\"aarch64_v\".len()..] {\n         \"hadd_s8\" => Intrinsic {"}, {"sha": "834528aaaa314ccf0f3c5eb697e65bbc431c11d7", "filename": "src/librustc_platform_intrinsics/arm.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Flibrustc_platform_intrinsics%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Flibrustc_platform_intrinsics%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Farm.rs?ref=ec666a597743ad57f514d8f271291a8a1f5a0ff0", "patch": "@@ -15,12 +15,11 @@\n \n use {Intrinsic, Type};\n use IntrinsicDef::Named;\n-use rustc::ty::TyCtxt;\n \n // The default inlining settings trigger a pathological behaviour in\n // LLVM, which causes makes compilation very slow. See #28273.\n #[inline(never)]\n-pub fn find<'tcx>(_tcx: &TyCtxt<'tcx>, name: &str) -> Option<Intrinsic> {\n+pub fn find(name: &str) -> Option<Intrinsic> {\n     if !name.starts_with(\"arm_v\") { return None }\n     Some(match &name[\"arm_v\".len()..] {\n         \"hadd_s8\" => Intrinsic {"}, {"sha": "6fe1f0c2b9cc6ca08d83d58424c0e2ed8f2baace", "filename": "src/librustc_platform_intrinsics/lib.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Flibrustc_platform_intrinsics%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Flibrustc_platform_intrinsics%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Flib.rs?ref=ec666a597743ad57f514d8f271291a8a1f5a0ff0", "patch": "@@ -12,15 +12,10 @@\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n-#![feature(staged_api, rustc_private)]\n+#![feature(staged_api)]\n #![cfg_attr(not(stage0), deny(warnings))]\n #![allow(bad_style)]\n \n-extern crate rustc_llvm as llvm;\n-extern crate rustc;\n-\n-use rustc::ty::TyCtxt;\n-\n pub struct Intrinsic {\n     pub inputs: &'static [&'static Type],\n     pub output: &'static Type,\n@@ -102,13 +97,13 @@ mod arm;\n mod aarch64;\n \n impl Intrinsic {\n-    pub fn find<'tcx>(tcx: &TyCtxt<'tcx>, name: &str) -> Option<Intrinsic> {\n+    pub fn find(name: &str) -> Option<Intrinsic> {\n         if name.starts_with(\"x86_\") {\n-            x86::find(tcx, name)\n+            x86::find(name)\n         } else if name.starts_with(\"arm_\") {\n-            arm::find(tcx, name)\n+            arm::find(name)\n         } else if name.starts_with(\"aarch64_\") {\n-            aarch64::find(tcx, name)\n+            aarch64::find(name)\n         } else {\n             None\n         }"}, {"sha": "54e2cb929b87a38ebab56d1aa1285941ee3199b5", "filename": "src/librustc_platform_intrinsics/x86.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fx86.rs?ref=ec666a597743ad57f514d8f271291a8a1f5a0ff0", "patch": "@@ -15,12 +15,11 @@\n \n use {Intrinsic, Type};\n use IntrinsicDef::Named;\n-use rustc::ty::TyCtxt;\n \n // The default inlining settings trigger a pathological behaviour in\n // LLVM, which causes makes compilation very slow. See #28273.\n #[inline(never)]\n-pub fn find<'tcx>(_tcx: &TyCtxt<'tcx>, name: &str) -> Option<Intrinsic> {\n+pub fn find(name: &str) -> Option<Intrinsic> {\n     if !name.starts_with(\"x86_mm\") { return None }\n     Some(match &name[\"x86_mm\".len()..] {\n         \"_movemask_ps\" => Intrinsic {"}, {"sha": "130a864f5e6ec7e129e1a2743e8a3ea06a8b45a3", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=ec666a597743ad57f514d8f271291a8a1f5a0ff0", "patch": "@@ -818,7 +818,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         }\n \n         (_, _) => {\n-            let intr = match Intrinsic::find(tcx, &name) {\n+            let intr = match Intrinsic::find(&name) {\n                 Some(intr) => intr,\n                 None => unreachable!(\"unknown intrinsic '{}'\", name),\n             };"}, {"sha": "3c43e0d521743ce471cf3dcf1d018660399a3883", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=ec666a597743ad57f514d8f271291a8a1f5a0ff0", "patch": "@@ -360,7 +360,7 @@ pub fn check_platform_intrinsic_type(ccx: &CrateCtxt,\n             }\n         }\n         _ => {\n-            match intrinsics::Intrinsic::find(tcx, &name) {\n+            match intrinsics::Intrinsic::find(&name) {\n                 Some(intr) => {\n                     // this function is a platform specific intrinsic\n                     if i_n_tps != 0 {"}, {"sha": "81ad276ca6874727c2604b91d9bfc890c4ab09ea", "filename": "src/test/run-make/execution-engine/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec666a597743ad57f514d8f271291a8a1f5a0ff0/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs?ref=ec666a597743ad57f514d8f271291a8a1f5a0ff0", "patch": "@@ -16,6 +16,7 @@ extern crate rustc;\n extern crate rustc_driver;\n extern crate rustc_front;\n extern crate rustc_lint;\n+extern crate rustc_llvm as llvm;\n extern crate rustc_metadata;\n extern crate rustc_resolve;\n #[macro_use] extern crate syntax;\n@@ -28,7 +29,6 @@ use std::thread::Builder;\n \n use rustc::dep_graph::DepGraph;\n use rustc::front::map as ast_map;\n-use rustc::llvm;\n use rustc::middle::cstore::{CrateStore, LinkagePreference};\n use rustc::ty;\n use rustc::session::config::{self, basic_options, build_configuration, Input, Options};"}]}