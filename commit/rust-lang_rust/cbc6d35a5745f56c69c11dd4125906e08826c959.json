{"sha": "cbc6d35a5745f56c69c11dd4125906e08826c959", "node_id": "C_kwDOAAsO6NoAKGNiYzZkMzVhNTc0NWY1NmM2OWMxMWRkNDEyNTkwNmUwODgyNmM5NTk", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-01-10T09:59:26Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-01-18T11:23:43Z"}, "message": "privacy: update `visit_infer`", "tree": {"sha": "43967c955480e1b6bf7f911564f9f1f9b4d1ad1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43967c955480e1b6bf7f911564f9f1f9b4d1ad1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbc6d35a5745f56c69c11dd4125906e08826c959", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc6d35a5745f56c69c11dd4125906e08826c959", "html_url": "https://github.com/rust-lang/rust/commit/cbc6d35a5745f56c69c11dd4125906e08826c959", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbc6d35a5745f56c69c11dd4125906e08826c959/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2d8f0c77db87cc84551598ceba3f4e8615eb66c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2d8f0c77db87cc84551598ceba3f4e8615eb66c", "html_url": "https://github.com/rust-lang/rust/commit/b2d8f0c77db87cc84551598ceba3f4e8615eb66c"}], "stats": {"total": 14, "additions": 3, "deletions": 11}, "files": [{"sha": "d10f85b1bed542d524e330e37763aae3fdeea5a5", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cbc6d35a5745f56c69c11dd4125906e08826c959/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc6d35a5745f56c69c11dd4125906e08826c959/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=cbc6d35a5745f56c69c11dd4125906e08826c959", "patch": "@@ -1148,19 +1148,11 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n                 if self.visit(ty).is_break() {\n                     return;\n                 }\n+            } else {\n+                // We don't do anything for const infers here.\n             }\n         } else {\n-            let local_id = self.tcx.hir().local_def_id(inf.hir_id);\n-            if let Some(did) = self.tcx.opt_const_param_of(local_id) {\n-                if self.visit_def_id(did, \"inferred\", &\"\").is_break() {\n-                    return;\n-                }\n-            }\n-\n-            // FIXME see above note for same issue.\n-            if self.visit(rustc_typeck::hir_ty_to_ty(self.tcx, &inf.to_ty())).is_break() {\n-                return;\n-            }\n+            bug!(\"visit_infer without typeck_results\");\n         }\n         intravisit::walk_inf(self, inf);\n     }"}]}