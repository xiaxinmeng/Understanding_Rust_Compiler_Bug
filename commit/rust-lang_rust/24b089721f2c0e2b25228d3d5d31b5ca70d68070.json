{"sha": "24b089721f2c0e2b25228d3d5d31b5ca70d68070", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YjA4OTcyMWYyYzBlMmIyNTIyOGQzZDVkMzFiNWNhNzBkNjgwNzA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-08-20T16:12:16Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-08-20T20:16:12Z"}, "message": "librustc: Fix bogus logic for static calls to unboxed closures in the\nexpression use visitor.\n\nCloses #16166.", "tree": {"sha": "e8c429cf6f18640dbc6b74a7c7f7ad60c4b77aac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8c429cf6f18640dbc6b74a7c7f7ad60c4b77aac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24b089721f2c0e2b25228d3d5d31b5ca70d68070", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24b089721f2c0e2b25228d3d5d31b5ca70d68070", "html_url": "https://github.com/rust-lang/rust/commit/24b089721f2c0e2b25228d3d5d31b5ca70d68070", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24b089721f2c0e2b25228d3d5d31b5ca70d68070/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f5d0b5b6cd4994c719d57a778697124348a4c1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f5d0b5b6cd4994c719d57a778697124348a4c1c", "html_url": "https://github.com/rust-lang/rust/commit/3f5d0b5b6cd4994c719d57a778697124348a4c1c"}], "stats": {"total": 68, "additions": 56, "deletions": 12}, "files": [{"sha": "20ea2b1fba543c8c0c0e1fd1a651761395ba96f9", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/24b089721f2c0e2b25228d3d5d31b5ca70d68070/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24b089721f2c0e2b25228d3d5d31b5ca70d68070/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=24b089721f2c0e2b25228d3d5d31b5ca70d68070", "patch": "@@ -130,16 +130,11 @@ impl OverloadedCallType {\n \n     fn from_method_id(tcx: &ty::ctxt, method_id: ast::DefId)\n                       -> OverloadedCallType {\n-        let method_descriptor =\n-            match tcx.impl_or_trait_items.borrow_mut().find(&method_id) {\n-                Some(&ty::MethodTraitItem(ref method_descriptor)) => {\n-                    (*method_descriptor).clone()\n-                }\n-                None => {\n-                    tcx.sess.bug(\"overloaded call method wasn't in method \\\n-                                  map\")\n-                }\n-            };\n+        let method_descriptor = match ty::impl_or_trait_item(tcx, method_id) {\n+            ty::MethodTraitItem(ref method_descriptor) => {\n+                (*method_descriptor).clone()\n+            }\n+        };\n         let impl_id = match method_descriptor.container {\n             ty::TraitContainer(_) => {\n                 tcx.sess.bug(\"statically resolved overloaded call method \\\n@@ -157,14 +152,27 @@ impl OverloadedCallType {\n         OverloadedCallType::from_trait_id(tcx, trait_ref.def_id)\n     }\n \n+    fn from_unboxed_closure(tcx: &ty::ctxt, closure_did: ast::DefId)\n+                            -> OverloadedCallType {\n+        let trait_did =\n+            tcx.unboxed_closures\n+               .borrow()\n+               .find(&closure_did)\n+               .expect(\"OverloadedCallType::from_unboxed_closure: didn't \\\n+                        find closure id\")\n+               .kind\n+               .trait_did(tcx);\n+        OverloadedCallType::from_trait_id(tcx, trait_did)\n+    }\n+\n     fn from_method_origin(tcx: &ty::ctxt, origin: &MethodOrigin)\n                           -> OverloadedCallType {\n         match *origin {\n             MethodStatic(def_id) => {\n                 OverloadedCallType::from_method_id(tcx, def_id)\n             }\n             MethodStaticUnboxedClosure(def_id) => {\n-                OverloadedCallType::from_method_id(tcx, def_id)\n+                OverloadedCallType::from_unboxed_closure(tcx, def_id)\n             }\n             MethodParam(ref method_param) => {\n                 OverloadedCallType::from_trait_id(tcx, method_param.trait_id)"}, {"sha": "4772f6a4ddb39dc1029a438be351b73b5b4cad58", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/24b089721f2c0e2b25228d3d5d31b5ca70d68070/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24b089721f2c0e2b25228d3d5d31b5ca70d68070/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=24b089721f2c0e2b25228d3d5d31b5ca70d68070", "patch": "@@ -19,7 +19,8 @@ use middle::def;\n use middle::dependency_format;\n use middle::freevars::CaptureModeMap;\n use middle::freevars;\n-use middle::lang_items::{FnMutTraitLangItem, OpaqueStructLangItem};\n+use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem};\n+use middle::lang_items::{FnOnceTraitLangItem, OpaqueStructLangItem};\n use middle::lang_items::{TyDescStructLangItem, TyVisitorTraitLangItem};\n use middle::mem_categorization as mc;\n use middle::resolve;\n@@ -1205,6 +1206,24 @@ pub enum UnboxedClosureKind {\n     FnOnceUnboxedClosureKind,\n }\n \n+impl UnboxedClosureKind {\n+    pub fn trait_did(&self, cx: &ctxt) -> ast::DefId {\n+        let result = match *self {\n+            FnUnboxedClosureKind => cx.lang_items.require(FnTraitLangItem),\n+            FnMutUnboxedClosureKind => {\n+                cx.lang_items.require(FnMutTraitLangItem)\n+            }\n+            FnOnceUnboxedClosureKind => {\n+                cx.lang_items.require(FnOnceTraitLangItem)\n+            }\n+        };\n+        match result {\n+            Ok(trait_did) => trait_did,\n+            Err(err) => cx.sess.fatal(err.as_slice()),\n+        }\n+    }\n+}\n+\n pub fn mk_ctxt(s: Session,\n                dm: resolve::DefMap,\n                named_region_map: resolve_lifetime::NamedRegionMap,"}, {"sha": "c77ee9914ef2eafd0782d8581264ac3eb13fecd5", "filename": "src/test/run-pass/unboxed-closures-direct-sugary-call.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/24b089721f2c0e2b25228d3d5d31b5ca70d68070/src%2Ftest%2Frun-pass%2Funboxed-closures-direct-sugary-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24b089721f2c0e2b25228d3d5d31b5ca70d68070/src%2Ftest%2Frun-pass%2Funboxed-closures-direct-sugary-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-direct-sugary-call.rs?ref=24b089721f2c0e2b25228d3d5d31b5ca70d68070", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unboxed_closures, overloaded_calls)]\n+\n+fn main() {\n+    let mut unboxed = |&mut:| {};\n+    unboxed();\n+}\n+"}]}