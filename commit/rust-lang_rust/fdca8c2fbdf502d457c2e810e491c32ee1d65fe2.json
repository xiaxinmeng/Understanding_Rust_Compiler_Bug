{"sha": "fdca8c2fbdf502d457c2e810e491c32ee1d65fe2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkY2E4YzJmYmRmNTAyZDQ1N2MyZTgxMGU0OTFjMzJlZTFkNjVmZTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-09T02:07:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-09T02:07:45Z"}, "message": "Auto merge of #34700 - inejge:ai-hints, r=alexcrichton\n\nUse hints with getaddrinfo() in std::net::lookup_host()\n\nAs noted in #24250, `std::net::lookup_host()` repeats each IPv[46] address in the result set. The number of repetitions is OS-dependent; e.g., Linux and FreeBSD give three copies, OpenBSD gives two. Filtering the duplicates can be done by the user if `lookup_host()` is used explicitly, but not with functions like `TcpStream::connect()`. What happens with the latter is that any unsuccessful connection attempt will be repeated as many times as there are duplicates of the address.\n\nThe program:\n\n```rust\nuse std::net::TcpStream;\n\nfn main() {\n    let _stream = TcpStream::connect(\"localhost:4444\").unwrap();\n}\n```\n\nresults in the following capture:\n\n[capture-before.txt](https://github.com/rust-lang/rust/files/352004/capture-before.txt)\n\nassuming that \"localhost\" resolves both to ::1 and 127.0.0.1, and that the listening program opens just an IPv4 socket (e.g., `nc -l 127.0.0.1 4444`.) The reason for this behavior is explained in [this comment](https://github.com/rust-lang/rust/issues/24250#issuecomment-92240152): `getaddrinfo()` is not constrained.\n\nVarious OSS projects (I checked out Postfix, OpenLDAP, Apache HTTPD and BIND) which use `getaddrinfo()` generally constrain the result set by using a non-NULL `hints` parameter and setting at least `ai_socktype` to `SOCK_STREAM`. `SOCK_DGRAM` would also work. Other parameters are unnecessary for pure name resolution.\n\nThe patch in this PR initializes a `hints` struct and passes it to `getaddrinfo()`, which eliminates the duplicates. The same test program as above with this change produces:\n\n[capture-after.txt](https://github.com/rust-lang/rust/files/352042/capture-after.txt)\n\nAll `libstd` tests pass with this patch.", "tree": {"sha": "e65d6061ba8b0b205b7aaa92668d61d9dcd88a7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e65d6061ba8b0b205b7aaa92668d61d9dcd88a7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdca8c2fbdf502d457c2e810e491c32ee1d65fe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdca8c2fbdf502d457c2e810e491c32ee1d65fe2", "html_url": "https://github.com/rust-lang/rust/commit/fdca8c2fbdf502d457c2e810e491c32ee1d65fe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdca8c2fbdf502d457c2e810e491c32ee1d65fe2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e18b4bad8450622aef8e077d3470f5626403588", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e18b4bad8450622aef8e077d3470f5626403588", "html_url": "https://github.com/rust-lang/rust/commit/5e18b4bad8450622aef8e077d3470f5626403588"}, {"sha": "66bf1092a58fb50279d263ba9e831435ace8e844", "url": "https://api.github.com/repos/rust-lang/rust/commits/66bf1092a58fb50279d263ba9e831435ace8e844", "html_url": "https://github.com/rust-lang/rust/commit/66bf1092a58fb50279d263ba9e831435ace8e844"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "8b7af17f92b85b8a0038728827e7c1390abd9c4c", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fdca8c2fbdf502d457c2e810e491c32ee1d65fe2/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdca8c2fbdf502d457c2e810e491c32ee1d65fe2/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=fdca8c2fbdf502d457c2e810e491c32ee1d65fe2", "patch": "@@ -601,3 +601,22 @@ impl fmt::Debug for UdpSocket {\n             .finish()\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use prelude::v1::*;\n+\n+    use super::*;\n+    use collections::HashMap;\n+\n+    #[test]\n+    fn no_lookup_host_duplicates() {\n+        let mut addrs = HashMap::new();\n+        let lh = match lookup_host(\"localhost\") {\n+            Ok(lh) => lh,\n+            Err(e) => panic!(\"couldn't resolve `localhost': {}\", e)\n+        };\n+        let _na = lh.map(|sa| *addrs.entry(sa).or_insert(0) += 1).count();\n+        assert!(addrs.values().filter(|&&v| v > 1).count() == 0);\n+    }\n+}"}]}