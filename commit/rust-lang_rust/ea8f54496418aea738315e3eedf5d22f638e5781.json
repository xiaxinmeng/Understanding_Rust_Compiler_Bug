{"sha": "ea8f54496418aea738315e3eedf5d22f638e5781", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhOGY1NDQ5NjQxOGFlYTczODMxNWUzZWVkZjVkMjJmNjM4ZTU3ODE=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-22T14:18:00Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-24T18:49:37Z"}, "message": "Rebase fallout", "tree": {"sha": "731ae2a7dff05b0bb73caba4081e03484ee88ea9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/731ae2a7dff05b0bb73caba4081e03484ee88ea9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea8f54496418aea738315e3eedf5d22f638e5781", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea8f54496418aea738315e3eedf5d22f638e5781", "html_url": "https://github.com/rust-lang/rust/commit/ea8f54496418aea738315e3eedf5d22f638e5781", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea8f54496418aea738315e3eedf5d22f638e5781/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9456ba66bf34af9578904564e5c025388f4f20c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9456ba66bf34af9578904564e5c025388f4f20c8", "html_url": "https://github.com/rust-lang/rust/commit/9456ba66bf34af9578904564e5c025388f4f20c8"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "afa324ce860e9ca5fb9338bd31d8c64e4bc72ef7", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ea8f54496418aea738315e3eedf5d22f638e5781/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea8f54496418aea738315e3eedf5d22f638e5781/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=ea8f54496418aea738315e3eedf5d22f638e5781", "patch": "@@ -1087,24 +1087,24 @@ pub fn compare_const_vals<'a, 'tcx>(\n                         Scalar::Ptr(ptr_a),\n                         Scalar::Bits {\n                             bits: size_a,\n-                            defined: tcx.data_layout.pointer_size.bits() as u8,\n+                            defined: defined_a,\n                         },\n                     )),\n                     Some(Value::ScalarPair(\n                         Scalar::Ptr(ptr_b),\n                         Scalar::Bits {\n                             bits: size_b,\n-                            defined: tcx.data_layout.pointer_size.bits() as u8,\n+                            defined: defined_b,\n                         },\n                     ))\n-                ) if size_a == size_b => {\n-                    if ptr_a.offset == Size::from_bytes(0) && ptr_b.offset == Size::from_bytes(0) {\n-                        let map = tcx.alloc_map.lock();\n-                        let alloc_a = map.unwrap_memory(ptr_a.alloc_id);\n-                        let alloc_b = map.unwrap_memory(ptr_b.alloc_id);\n-                        if alloc_a.bytes.len() as u64 == size_a as u64 {\n-                            return from_bool(alloc_a == alloc_b);\n-                        }\n+                ) if size_a == size_b && defined_a == defined_b &&\n+                     ptr_a.offset.bytes() == 0 && ptr_b.offset.bytes() == 0 &&\n+                     tcx.data_layout.pointer_size.bits() == defined_a.into() => {\n+                    let map = tcx.alloc_map.lock();\n+                    let alloc_a = map.unwrap_memory(ptr_a.alloc_id);\n+                    let alloc_b = map.unwrap_memory(ptr_b.alloc_id);\n+                    if alloc_a.bytes.len() as u64 == size_a as u64 {\n+                        return from_bool(alloc_a == alloc_b);\n                     }\n                 }\n                 _ => (),"}]}