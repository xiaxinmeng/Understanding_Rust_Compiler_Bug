{"sha": "7682e87c6d29520dfdea6a2a772c31150dbfa7d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ODJlODdjNmQyOTUyMGRmZGVhNmEyYTc3MmMzMTE1MGRiZmE3ZDQ=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-06-26T14:05:53Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-06-26T14:05:53Z"}, "message": "Fix ICE with `-Zunpretty=hir,typed` when an expression occurs in a function signature", "tree": {"sha": "f4f1f18d7e3afd7ec294370a830c90c579fd2994", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4f1f18d7e3afd7ec294370a830c90c579fd2994"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7682e87c6d29520dfdea6a2a772c31150dbfa7d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7682e87c6d29520dfdea6a2a772c31150dbfa7d4", "html_url": "https://github.com/rust-lang/rust/commit/7682e87c6d29520dfdea6a2a772c31150dbfa7d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7682e87c6d29520dfdea6a2a772c31150dbfa7d4/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "481971978fda83aa7cf1f1f3c80cfad822377cf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/481971978fda83aa7cf1f1f3c80cfad822377cf2", "html_url": "https://github.com/rust-lang/rust/commit/481971978fda83aa7cf1f1f3c80cfad822377cf2"}], "stats": {"total": 64, "additions": 48, "deletions": 16}, "files": [{"sha": "2a11d62ac15f215e8e19bb0507754f155a74d052", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7682e87c6d29520dfdea6a2a772c31150dbfa7d4/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7682e87c6d29520dfdea6a2a772c31150dbfa7d4/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=7682e87c6d29520dfdea6a2a772c31150dbfa7d4", "patch": "@@ -293,18 +293,6 @@ struct TypedAnnotation<'tcx> {\n     maybe_typeck_results: Cell<Option<&'tcx ty::TypeckResults<'tcx>>>,\n }\n \n-impl<'tcx> TypedAnnotation<'tcx> {\n-    /// Gets the type-checking results for the current body.\n-    /// As this will ICE if called outside bodies, only call when working with\n-    /// `Expr` or `Pat` nodes (they are guaranteed to be found only in bodies).\n-    #[track_caller]\n-    fn typeck_results(&self) -> &'tcx ty::TypeckResults<'tcx> {\n-        self.maybe_typeck_results\n-            .get()\n-            .expect(\"`TypedAnnotation::typeck_results` called outside of body\")\n-    }\n-}\n-\n impl<'tcx> HirPrinterSupport<'tcx> for TypedAnnotation<'tcx> {\n     fn sess(&self) -> &Session {\n         &self.tcx.sess\n@@ -336,10 +324,24 @@ impl<'tcx> pprust_hir::PpAnn for TypedAnnotation<'tcx> {\n     }\n     fn post(&self, s: &mut pprust_hir::State<'_>, node: pprust_hir::AnnNode<'_>) {\n         if let pprust_hir::AnnNode::Expr(expr) = node {\n-            s.s.space();\n-            s.s.word(\"as\");\n-            s.s.space();\n-            s.s.word(self.typeck_results().expr_ty(expr).to_string());\n+            let typeck_results =\n+                self.maybe_typeck_results.get().or_else(|| {\n+                    if let Some(body_id) = self.tcx.hir().maybe_body_owned_by(\n+                        self.tcx.hir().local_def_id_to_hir_id(expr.hir_id.owner),\n+                    ) {\n+                        Some(self.tcx.typeck_body(body_id))\n+                    } else {\n+                        None\n+                    }\n+                });\n+\n+            if let Some(typeck_results) = typeck_results {\n+                s.s.space();\n+                s.s.word(\"as\");\n+                s.s.space();\n+                s.s.word(typeck_results.expr_ty(expr).to_string());\n+            }\n+\n             s.pclose();\n         }\n     }"}, {"sha": "fd8eee44a9f6b868da3631b958e26b76983970b5", "filename": "src/test/ui/unpretty-expr-fn-arg.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7682e87c6d29520dfdea6a2a772c31150dbfa7d4/src%2Ftest%2Fui%2Funpretty-expr-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7682e87c6d29520dfdea6a2a772c31150dbfa7d4/src%2Ftest%2Fui%2Funpretty-expr-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funpretty-expr-fn-arg.rs?ref=7682e87c6d29520dfdea6a2a772c31150dbfa7d4", "patch": "@@ -0,0 +1,13 @@\n+// Regression test for the ICE described in #82328. The pretty-printer for\n+// compile-flags: -Zunpretty=hir,typed\n+// would previously retrieve type-checking results when entering a body,\n+// which means that type information was not available for expressions\n+// occurring in function signatures, as in the `foo` example below, leading\n+// to an ICE.\n+\n+// check-pass\n+#![allow(dead_code)]\n+\n+fn main() {}\n+\n+fn foo(-128..=127: i8) {}"}, {"sha": "aa6ea4a8f975934f35702a046da5b9b34ce9833e", "filename": "src/test/ui/unpretty-expr-fn-arg.stdout", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7682e87c6d29520dfdea6a2a772c31150dbfa7d4/src%2Ftest%2Fui%2Funpretty-expr-fn-arg.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/7682e87c6d29520dfdea6a2a772c31150dbfa7d4/src%2Ftest%2Fui%2Funpretty-expr-fn-arg.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funpretty-expr-fn-arg.stdout?ref=7682e87c6d29520dfdea6a2a772c31150dbfa7d4", "patch": "@@ -0,0 +1,17 @@\n+// Regression test for the ICE described in #82328. The pretty-printer for\n+// compile-flags: -Zunpretty=hir,typed\n+// would previously retrieve type-checking results when entering a body,\n+// which means that type information was not available for expressions\n+// occurring in function signatures, as in the `foo` example below, leading\n+// to an ICE.\n+\n+// check-pass\n+#![allow(dead_code)]\n+#[prelude_import]\n+use ::std::prelude::rust_2015::*;\n+#[macro_use]\n+extern crate std;\n+\n+fn main() ({ } as ())\n+\n+fn foo((-(128 as i8) as i8) ...(127 as i8): i8) ({ } as ())"}]}