{"sha": "fede1a3beb17ae65194bf000586a062724bf47cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlZGUxYTNiZWIxN2FlNjUxOTRiZjAwMDU4NmEwNjI3MjRiZjQ3Y2Y=", "commit": {"author": {"name": "longfangsong", "email": "longfangsong@icloud.com", "date": "2021-09-11T18:30:56Z"}, "committer": {"name": "longfangsong", "email": "longfangsong@icloud.com", "date": "2021-09-12T02:45:14Z"}, "message": "Add promote_mod_file assist", "tree": {"sha": "e476da8779654b443c2a406479f6403dcdc1962c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e476da8779654b443c2a406479f6403dcdc1962c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fede1a3beb17ae65194bf000586a062724bf47cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fede1a3beb17ae65194bf000586a062724bf47cf", "html_url": "https://github.com/rust-lang/rust/commit/fede1a3beb17ae65194bf000586a062724bf47cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fede1a3beb17ae65194bf000586a062724bf47cf/comments", "author": {"login": "longfangsong", "id": 13777628, "node_id": "MDQ6VXNlcjEzNzc3NjI4", "avatar_url": "https://avatars.githubusercontent.com/u/13777628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/longfangsong", "html_url": "https://github.com/longfangsong", "followers_url": "https://api.github.com/users/longfangsong/followers", "following_url": "https://api.github.com/users/longfangsong/following{/other_user}", "gists_url": "https://api.github.com/users/longfangsong/gists{/gist_id}", "starred_url": "https://api.github.com/users/longfangsong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/longfangsong/subscriptions", "organizations_url": "https://api.github.com/users/longfangsong/orgs", "repos_url": "https://api.github.com/users/longfangsong/repos", "events_url": "https://api.github.com/users/longfangsong/events{/privacy}", "received_events_url": "https://api.github.com/users/longfangsong/received_events", "type": "User", "site_admin": false}, "committer": {"login": "longfangsong", "id": 13777628, "node_id": "MDQ6VXNlcjEzNzc3NjI4", "avatar_url": "https://avatars.githubusercontent.com/u/13777628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/longfangsong", "html_url": "https://github.com/longfangsong", "followers_url": "https://api.github.com/users/longfangsong/followers", "following_url": "https://api.github.com/users/longfangsong/following{/other_user}", "gists_url": "https://api.github.com/users/longfangsong/gists{/gist_id}", "starred_url": "https://api.github.com/users/longfangsong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/longfangsong/subscriptions", "organizations_url": "https://api.github.com/users/longfangsong/orgs", "repos_url": "https://api.github.com/users/longfangsong/repos", "events_url": "https://api.github.com/users/longfangsong/events{/privacy}", "received_events_url": "https://api.github.com/users/longfangsong/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d270679997eb3aaf85de5173ff3276bc3c48fa41", "url": "https://api.github.com/repos/rust-lang/rust/commits/d270679997eb3aaf85de5173ff3276bc3c48fa41", "html_url": "https://github.com/rust-lang/rust/commit/d270679997eb3aaf85de5173ff3276bc3c48fa41"}], "stats": {"total": 177, "additions": 167, "deletions": 10}, "files": [{"sha": "11e19304f1e06032a84dd5c897efceebb3516b22", "filename": "crates/ide_assists/src/assist_context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fede1a3beb17ae65194bf000586a062724bf47cf/crates%2Fide_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fede1a3beb17ae65194bf000586a062724bf47cf/crates%2Fide_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fassist_context.rs?ref=fede1a3beb17ae65194bf000586a062724bf47cf", "patch": "@@ -294,6 +294,10 @@ impl AssistBuilder {\n         let file_system_edit = FileSystemEdit::CreateFile { dst, initial_contents: content.into() };\n         self.source_change.push_file_system_edit(file_system_edit);\n     }\n+    pub(crate) fn move_file(&mut self, src: FileId, dst: AnchoredPathBuf) {\n+        let file_system_edit = FileSystemEdit::MoveFile { src, dst };\n+        self.source_change.push_file_system_edit(file_system_edit);\n+    }\n \n     fn finish(mut self) -> SourceChange {\n         self.commit();"}, {"sha": "c5c37def0791b537968c99c37d548a9c52aff48b", "filename": "crates/ide_assists/src/handlers/promote_mod_file.rs", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/fede1a3beb17ae65194bf000586a062724bf47cf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpromote_mod_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fede1a3beb17ae65194bf000586a062724bf47cf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpromote_mod_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpromote_mod_file.rs?ref=fede1a3beb17ae65194bf000586a062724bf47cf", "patch": "@@ -0,0 +1,148 @@\n+use ide_db::{\n+    assists::{AssistId, AssistKind},\n+    base_db::AnchoredPathBuf,\n+};\n+use syntax::{\n+    ast::{self},\n+    AstNode, TextRange,\n+};\n+\n+use crate::assist_context::{AssistContext, Assists};\n+\n+pub(crate) fn promote_mod_file(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let source_file = ctx.find_node_at_offset::<ast::SourceFile>()?;\n+    let module = ctx.sema.to_module_def(ctx.frange.file_id)?;\n+    if module.is_mod_rs(ctx.db()) {\n+        return None;\n+    }\n+    let target = TextRange::new(\n+        source_file.syntax().text_range().start(),\n+        source_file.syntax().text_range().end(),\n+    );\n+    let path = format!(\"./{}/mod.rs\", module.name(ctx.db())?.to_string());\n+    let dst = AnchoredPathBuf { anchor: ctx.frange.file_id, path };\n+    acc.add(\n+        AssistId(\"promote_mod_file\", AssistKind::Refactor),\n+        \"Promote Module to directory\",\n+        target,\n+        |builder| {\n+            builder.move_file(ctx.frange.file_id, dst);\n+        },\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn trivial() {\n+        check_assist(\n+            promote_mod_file,\n+            r#\"\n+//- /main.rs\n+mod a;\n+//- /a.rs\n+$0fn t() {}\n+\"#,\n+            r#\"\n+//- /a/mod.rs\n+fn t() {}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn cursor_can_be_putted_anywhere() {\n+        check_assist(\n+            promote_mod_file,\n+            r#\"\n+//- /main.rs\n+mod a;\n+//- /a.rs\n+fn t() {}$0\n+\"#,\n+            r#\"\n+//- /a/mod.rs\n+fn t() {}\n+\"#,\n+        );\n+        check_assist(\n+            promote_mod_file,\n+            r#\"\n+//- /main.rs\n+mod a;\n+//- /a.rs\n+fn t()$0 {}\n+\"#,\n+            r#\"\n+//- /a/mod.rs\n+fn t() {}\n+\"#,\n+        );\n+        check_assist(\n+            promote_mod_file,\n+            r#\"\n+//- /main.rs\n+mod a;\n+//- /a.rs\n+fn t($0) {}\n+\"#,\n+            r#\"\n+//- /a/mod.rs\n+fn t() {}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn cannot_promote_mod_rs() {\n+        check_assist_not_applicable(\n+            promote_mod_file,\n+            r#\"//- /main.rs\n+mod a;\n+//- /a/mod.rs\n+$0fn t() {}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn cannot_promote_main_and_lib_rs() {\n+        check_assist_not_applicable(\n+            promote_mod_file,\n+            r#\"//- /main.rs\n+$0fn t() {}\n+\"#,\n+        );\n+        check_assist_not_applicable(\n+            promote_mod_file,\n+            r#\"//- /lib.rs\n+$0fn t() {}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn works_in_mod() {\n+        // note: /a/b.rs remains untouched\n+        check_assist(\n+            promote_mod_file,\n+            r#\"//- /main.rs\n+mod a;\n+//- /a.rs\n+mod b;\n+$0fn t() {}\n+//- /a/b.rs\n+fn t1() {}\n+\"#,\n+            r#\"\n+//- /a/mod.rs\n+mod b;\n+fn t() {}\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "57007691b5e6d5b636e196a9739fb75033917b07", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fede1a3beb17ae65194bf000586a062724bf47cf/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fede1a3beb17ae65194bf000586a062724bf47cf/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=fede1a3beb17ae65194bf000586a062724bf47cf", "patch": "@@ -96,6 +96,7 @@ mod handlers {\n     mod move_bounds;\n     mod move_guard;\n     mod move_module_to_file;\n+    mod promote_mod_file;\n     mod pull_assignment_up;\n     mod qualify_path;\n     mod raw_string;\n@@ -167,6 +168,7 @@ mod handlers {\n             move_guard::move_arm_cond_to_match_guard,\n             move_guard::move_guard_to_arm_body,\n             move_module_to_file::move_module_to_file,\n+            promote_mod_file::promote_mod_file,\n             pull_assignment_up::pull_assignment_up,\n             qualify_path::qualify_path,\n             raw_string::add_hash,"}, {"sha": "e211b09987b0f460af4f24d87cd6b823691ce9af", "filename": "crates/ide_assists/src/tests.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fede1a3beb17ae65194bf000586a062724bf47cf/crates%2Fide_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fede1a3beb17ae65194bf000586a062724bf47cf/crates%2Fide_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests.rs?ref=fede1a3beb17ae65194bf000586a062724bf47cf", "patch": "@@ -142,7 +142,6 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult, assist_label:\n         (Some(assist), ExpectedResult::After(after)) => {\n             let source_change =\n                 assist.source_change.expect(\"Assist did not contain any source changes\");\n-            assert!(!source_change.source_file_edits.is_empty());\n             let skip_header = source_change.source_file_edits.len() == 1\n                 && source_change.file_system_edits.len() == 0;\n \n@@ -160,15 +159,19 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult, assist_label:\n             }\n \n             for file_system_edit in source_change.file_system_edits {\n-                if let FileSystemEdit::CreateFile { dst, initial_contents } = file_system_edit {\n-                    let sr = db.file_source_root(dst.anchor);\n-                    let sr = db.source_root(sr);\n-                    let mut base = sr.path_for_file(&dst.anchor).unwrap().clone();\n-                    base.pop();\n-                    let created_file_path = format!(\"{}{}\", base.to_string(), &dst.path[1..]);\n-                    format_to!(buf, \"//- {}\\n\", created_file_path);\n-                    buf.push_str(&initial_contents);\n-                }\n+                let (dst, contents) = match file_system_edit {\n+                    FileSystemEdit::CreateFile { dst, initial_contents } => (dst, initial_contents),\n+                    FileSystemEdit::MoveFile { src, dst } => {\n+                        (dst, db.file_text(src).as_ref().to_owned())\n+                    }\n+                };\n+                let sr = db.file_source_root(dst.anchor);\n+                let sr = db.source_root(sr);\n+                let mut base = sr.path_for_file(&dst.anchor).unwrap().clone();\n+                base.pop();\n+                let created_file_path = format!(\"{}{}\", base.to_string(), &dst.path[1..]);\n+                format_to!(buf, \"//- {}\\n\", created_file_path);\n+                buf.push_str(&contents);\n             }\n \n             assert_eq_text!(after, &buf);"}]}