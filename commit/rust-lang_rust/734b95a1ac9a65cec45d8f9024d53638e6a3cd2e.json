{"sha": "734b95a1ac9a65cec45d8f9024d53638e6a3cd2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNGI5NWExYWM5YTY1Y2VjNDVkOGY5MDI0ZDUzNjM4ZTZhM2NkMmU=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-05-03T19:58:53Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-05-03T20:24:36Z"}, "message": "Code review fixes", "tree": {"sha": "d83781f8de23f3183a943c7771ca86f157e20927", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d83781f8de23f3183a943c7771ca86f157e20927"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/734b95a1ac9a65cec45d8f9024d53638e6a3cd2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/734b95a1ac9a65cec45d8f9024d53638e6a3cd2e", "html_url": "https://github.com/rust-lang/rust/commit/734b95a1ac9a65cec45d8f9024d53638e6a3cd2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/734b95a1ac9a65cec45d8f9024d53638e6a3cd2e/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90fc32937785b3f17899f14d8cb2f7b3738a9850", "url": "https://api.github.com/repos/rust-lang/rust/commits/90fc32937785b3f17899f14d8cb2f7b3738a9850", "html_url": "https://github.com/rust-lang/rust/commit/90fc32937785b3f17899f14d8cb2f7b3738a9850"}], "stats": {"total": 47, "additions": 29, "deletions": 18}, "files": [{"sha": "f6e40f872228d646140ebf6eaf914304367da942", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/734b95a1ac9a65cec45d8f9024d53638e6a3cd2e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734b95a1ac9a65cec45d8f9024d53638e6a3cd2e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=734b95a1ac9a65cec45d8f9024d53638e6a3cd2e", "patch": "@@ -1058,41 +1058,44 @@ pub(crate) fn handle_code_action_resolve(\n         .only\n         .map(|it| it.into_iter().filter_map(from_proto::assist_kind).collect());\n \n-    let assist_kind: AssistKind = match params.kind.parse() {\n-        Ok(kind) => kind,\n+    let (assist_index, assist_resolve) = match parse_action_id(&params.id) {\n+        Ok(parsed_data) => parsed_data,\n         Err(e) => {\n             return Err(LspError::new(\n                 ErrorCode::InvalidParams as i32,\n-                format!(\"For the assist to resolve, failed to parse the kind: {}\", e),\n+                format!(\"Failed to parse action id string '{}': {}\", params.id, e),\n             )\n             .into())\n         }\n     };\n \n+    let expected_assist_id = assist_resolve.assist_id.clone();\n+    let expected_kind = assist_resolve.assist_kind;\n+\n     let assists = snap.analysis.assists_with_fixes(\n         &assists_config,\n         &snap.config.diagnostics(),\n-        AssistResolveStrategy::Single(SingleResolve { assist_id: params.id.clone(), assist_kind }),\n+        AssistResolveStrategy::Single(assist_resolve),\n         frange,\n     )?;\n \n-    let assist = match assists.get(params.index) {\n+    let assist = match assists.get(assist_index) {\n         Some(assist) => assist,\n         None => return Err(LspError::new(\n             ErrorCode::InvalidParams as i32,\n             format!(\n-                \"Failed to find the assist for index {} provided by the resolve request. Expected assist id: {:?}\",\n-                params.index, params.id,\n+                \"Failed to find the assist for index {} provided by the resolve request. Resolve request assist id: {}\",\n+                assist_index, params.id,\n             ),\n         )\n         .into())\n     };\n-    if assist.id.0 != params.id || assist.id.1 != assist_kind {\n+    if assist.id.0 != expected_assist_id || assist.id.1 != expected_kind {\n         return Err(LspError::new(\n             ErrorCode::InvalidParams as i32,\n             format!(\n-                \"Failed to find exactly the same assist at index {} for the resolve parameters given. Expected id and kind: {}, {:?}, actual id: {:?}.\",\n-                params.index, params.id, assist_kind, assist.id\n+                \"Mismatching assist at index {} for the resolve parameters given. Resolve request assist id: {}, actual id: {:?}.\",\n+                assist_index, params.id, assist.id\n             ),\n         )\n         .into());\n@@ -1102,6 +1105,21 @@ pub(crate) fn handle_code_action_resolve(\n     Ok(code_action)\n }\n \n+fn parse_action_id(action_id: &str) -> Result<(usize, SingleResolve), String> {\n+    let id_parts = action_id.split(':').collect_vec();\n+    match id_parts.as_slice() {\n+        &[assist_id_string, assist_kind_string, index_string] => {\n+            let assist_kind: AssistKind = assist_kind_string.parse()?;\n+            let index: usize = match index_string.parse() {\n+                Ok(index) => index,\n+                Err(e) => return Err(format!(\"Incorrect index string: {}\", e)),\n+            };\n+            Ok((index, SingleResolve { assist_id: assist_id_string.to_string(), assist_kind }))\n+        }\n+        _ => Err(\"Action id contains incorrect number of segments\".to_string()),\n+    }\n+}\n+\n pub(crate) fn handle_code_lens(\n     snap: GlobalStateSnapshot,\n     params: lsp_types::CodeLensParams,"}, {"sha": "b8835a5349be8f49b91d524859b9a3afff315d18", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/734b95a1ac9a65cec45d8f9024d53638e6a3cd2e/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734b95a1ac9a65cec45d8f9024d53638e6a3cd2e/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=734b95a1ac9a65cec45d8f9024d53638e6a3cd2e", "patch": "@@ -303,8 +303,6 @@ pub struct CodeAction {\n pub struct CodeActionData {\n     pub code_action_params: lsp_types::CodeActionParams,\n     pub id: String,\n-    pub kind: String,\n-    pub index: usize,\n }\n \n #[derive(Debug, Eq, PartialEq, Clone, Default, Deserialize, Serialize)]"}, {"sha": "1d27aa7b37366351b0695fd75b7cdc1e3ee6b733", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/734b95a1ac9a65cec45d8f9024d53638e6a3cd2e/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734b95a1ac9a65cec45d8f9024d53638e6a3cd2e/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=734b95a1ac9a65cec45d8f9024d53638e6a3cd2e", "patch": "@@ -897,10 +897,8 @@ pub(crate) fn code_action(\n         (Some(it), _) => res.edit = Some(snippet_workspace_edit(snap, it)?),\n         (None, Some((index, code_action_params))) => {\n             res.data = Some(lsp_ext::CodeActionData {\n-                id: assist.id.0.to_string(),\n+                id: format!(\"{}:{}:{}\", assist.id.0, assist.id.1.name(), index),\n                 code_action_params,\n-                kind: assist.id.1.name().to_string(),\n-                index,\n             });\n         }\n         (None, None) => {"}, {"sha": "f0f981802ef241fa577cfbb2c89901b1241129f4", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/734b95a1ac9a65cec45d8f9024d53638e6a3cd2e/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/734b95a1ac9a65cec45d8f9024d53638e6a3cd2e/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=734b95a1ac9a65cec45d8f9024d53638e6a3cd2e", "patch": "@@ -81,7 +81,6 @@ If this capability is set, `CodeAction` returned from the server contain an addi\n interface CodeAction {\n     title: string;\n     group?: string;\n-    data?: string;\n     ...\n }\n ```\n@@ -102,8 +101,6 @@ The set of actions `[ { title: \"foo\" }, { group: \"frobnicate\", title: \"bar\" }, {\n \n Alternatively, selecting `frobnicate` could present a user with an additional menu to choose between `bar` and `baz`.\n \n-`data` field contains optional json data for deferred resolve of the action data that's slow to compute in the original request.\n-\n ### Example\n \n ```rust"}]}