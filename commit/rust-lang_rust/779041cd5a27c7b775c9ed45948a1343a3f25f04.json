{"sha": "779041cd5a27c7b775c9ed45948a1343a3f25f04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3OTA0MWNkNWEyN2M3Yjc3NWM5ZWQ0NTk0OGExMzQzYTNmMjVmMDQ=", "commit": {"author": {"name": "Samuel Holland", "email": "samuel@sholland.org", "date": "2017-09-02T23:15:57Z"}, "committer": {"name": "Samuel Holland", "email": "samuel@sholland.org", "date": "2017-09-19T03:31:57Z"}, "message": "Require rlibs for dependent crates when linking static executables\n\nThis handles the case for `CrateTypeExecutable` and `+crt_static`. I\nreworked the match block to avoid duplicating the `attempt_static` and\nerror checking code again (this case would have been a copy of the\n`CrateTypeCdylib`/`CrateTypeStaticlib` case).\n\nOn `linux-musl` targets where `std` was built with `crt_static = false`\nin `config.toml`, this change brings the test suite from entirely\nfailing to mostly passing.\n\nThis change should not affect behavior for other crate types, or for\ntargets which do not respect `+crt_static`.", "tree": {"sha": "668811806b75912feedcfff697085979f7906d16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/668811806b75912feedcfff697085979f7906d16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/779041cd5a27c7b775c9ed45948a1343a3f25f04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/779041cd5a27c7b775c9ed45948a1343a3f25f04", "html_url": "https://github.com/rust-lang/rust/commit/779041cd5a27c7b775c9ed45948a1343a3f25f04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/779041cd5a27c7b775c9ed45948a1343a3f25f04/comments", "author": {"login": "smaeul", "id": 5846453, "node_id": "MDQ6VXNlcjU4NDY0NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5846453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smaeul", "html_url": "https://github.com/smaeul", "followers_url": "https://api.github.com/users/smaeul/followers", "following_url": "https://api.github.com/users/smaeul/following{/other_user}", "gists_url": "https://api.github.com/users/smaeul/gists{/gist_id}", "starred_url": "https://api.github.com/users/smaeul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smaeul/subscriptions", "organizations_url": "https://api.github.com/users/smaeul/orgs", "repos_url": "https://api.github.com/users/smaeul/repos", "events_url": "https://api.github.com/users/smaeul/events{/privacy}", "received_events_url": "https://api.github.com/users/smaeul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smaeul", "id": 5846453, "node_id": "MDQ6VXNlcjU4NDY0NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5846453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smaeul", "html_url": "https://github.com/smaeul", "followers_url": "https://api.github.com/users/smaeul/followers", "following_url": "https://api.github.com/users/smaeul/following{/other_user}", "gists_url": "https://api.github.com/users/smaeul/gists{/gist_id}", "starred_url": "https://api.github.com/users/smaeul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smaeul/subscriptions", "organizations_url": "https://api.github.com/users/smaeul/orgs", "repos_url": "https://api.github.com/users/smaeul/repos", "events_url": "https://api.github.com/users/smaeul/events{/privacy}", "received_events_url": "https://api.github.com/users/smaeul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0701b37d97d08da7074ece7a7dcb4449498f4bfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/0701b37d97d08da7074ece7a7dcb4449498f4bfa", "html_url": "https://github.com/rust-lang/rust/commit/0701b37d97d08da7074ece7a7dcb4449498f4bfa"}], "stats": {"total": 76, "additions": 42, "deletions": 34}, "files": [{"sha": "41fcce27bc5d937da12da3eed37da34e8af5caf3", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 42, "deletions": 34, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/779041cd5a27c7b775c9ed45948a1343a3f25f04/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/779041cd5a27c7b775c9ed45948a1343a3f25f04/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=779041cd5a27c7b775c9ed45948a1343a3f25f04", "patch": "@@ -112,26 +112,51 @@ fn calculate_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         return Vec::new();\n     }\n \n-    match ty {\n-        // If the global prefer_dynamic switch is turned off, first attempt\n-        // static linkage (this can fail).\n-        config::CrateTypeExecutable if !sess.opts.cg.prefer_dynamic => {\n-            if let Some(v) = attempt_static(tcx) {\n-                return v;\n-            }\n-        }\n+    let preferred_linkage = match ty {\n+        // cdylibs must have all static dependencies.\n+        config::CrateTypeCdylib => Linkage::Static,\n+\n+        // Generating a dylib without `-C prefer-dynamic` means that we're going\n+        // to try to eagerly statically link all dependencies. This is normally\n+        // done for end-product dylibs, not intermediate products.\n+        config::CrateTypeDylib if !sess.opts.cg.prefer_dynamic => Linkage::Static,\n+        config::CrateTypeDylib => Linkage::Dynamic,\n+\n+        // If the global prefer_dynamic switch is turned off, or the final\n+        // executable will be statically linked, prefer static crate linkage.\n+        config::CrateTypeExecutable if !sess.opts.cg.prefer_dynamic ||\n+            sess.crt_static() => Linkage::Static,\n+        config::CrateTypeExecutable => Linkage::Dynamic,\n+\n+        // proc-macro crates are required to be dylibs, and they're currently\n+        // required to link to libsyntax as well.\n+        config::CrateTypeProcMacro => Linkage::Dynamic,\n \n         // No linkage happens with rlibs, we just needed the metadata (which we\n         // got long ago), so don't bother with anything.\n-        config::CrateTypeRlib => return Vec::new(),\n-\n-        // Staticlibs and cdylibs must have all static dependencies. If any fail\n-        // to be found, we generate some nice pretty errors.\n-        config::CrateTypeStaticlib |\n-        config::CrateTypeCdylib => {\n-            if let Some(v) = attempt_static(tcx) {\n-                return v;\n-            }\n+        config::CrateTypeRlib => Linkage::NotLinked,\n+\n+        // staticlibs must have all static dependencies.\n+        config::CrateTypeStaticlib => Linkage::Static,\n+    };\n+\n+    if preferred_linkage == Linkage::NotLinked {\n+        // If the crate is not linked, there are no link-time dependencies.\n+        return Vec::new();\n+    }\n+\n+    if preferred_linkage == Linkage::Static {\n+        // Attempt static linkage first. For dylibs and executables, we may be\n+        // able to retry below with dynamic linkage.\n+        if let Some(v) = attempt_static(tcx) {\n+            return v;\n+        }\n+\n+        // Staticlibs, cdylibs, and static executables must have all static\n+        // dependencies. If any are not found, generate some nice pretty errors.\n+        if ty == config::CrateTypeCdylib || ty == config::CrateTypeStaticlib ||\n+                (ty == config::CrateTypeExecutable && sess.crt_static() &&\n+                !sess.target.target.options.crt_static_allows_dylibs) {\n             for &cnum in tcx.crates().iter() {\n                 if tcx.dep_kind(cnum).macros_only() { continue }\n                 let src = tcx.used_crate_source(cnum);\n@@ -141,23 +166,6 @@ fn calculate_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             }\n             return Vec::new();\n         }\n-\n-        // Generating a dylib without `-C prefer-dynamic` means that we're going\n-        // to try to eagerly statically link all dependencies. This is normally\n-        // done for end-product dylibs, not intermediate products.\n-        config::CrateTypeDylib if !sess.opts.cg.prefer_dynamic => {\n-            if let Some(v) = attempt_static(tcx) {\n-                return v;\n-            }\n-        }\n-\n-        // Everything else falls through below. This will happen either with the\n-        // `-C prefer-dynamic` or because we're a proc-macro crate. Note that\n-        // proc-macro crates are required to be dylibs, and they're currently\n-        // required to link to libsyntax as well.\n-        config::CrateTypeExecutable |\n-        config::CrateTypeDylib |\n-        config::CrateTypeProcMacro => {},\n     }\n \n     let mut formats = FxHashMap();"}]}