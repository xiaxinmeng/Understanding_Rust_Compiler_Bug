{"sha": "d28560e660168b30af3b58167094aeb299bc2b58", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyODU2MGU2NjAxNjhiMzBhZjNiNTgxNjcwOTRhZWIyOTliYzJiNTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-27T04:51:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-27T04:51:34Z"}, "message": "Auto merge of #67332 - matthewjasper:drop-in-place-cgus, r=michaelwoerister\n\nDon't instantiate so many copies of drop_in_place\n\nSplit out from #66703.\n\nr? @ghost", "tree": {"sha": "1069e81fa52193fb5b0499c0d07d3f6864ff387a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1069e81fa52193fb5b0499c0d07d3f6864ff387a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d28560e660168b30af3b58167094aeb299bc2b58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d28560e660168b30af3b58167094aeb299bc2b58", "html_url": "https://github.com/rust-lang/rust/commit/d28560e660168b30af3b58167094aeb299bc2b58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d28560e660168b30af3b58167094aeb299bc2b58/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c15adc5308b92919580e98f2fd77cdd448f24a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c15adc5308b92919580e98f2fd77cdd448f24a0", "html_url": "https://github.com/rust-lang/rust/commit/0c15adc5308b92919580e98f2fd77cdd448f24a0"}, {"sha": "b9445311462549fdc22e5ca0732be60c1b2a5d32", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9445311462549fdc22e5ca0732be60c1b2a5d32", "html_url": "https://github.com/rust-lang/rust/commit/b9445311462549fdc22e5ca0732be60c1b2a5d32"}], "stats": {"total": 94, "additions": 54, "deletions": 40}, "files": [{"sha": "66888cdb55210d8135492c7290bae386a7d67754", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d28560e660168b30af3b58167094aeb299bc2b58/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28560e660168b30af3b58167094aeb299bc2b58/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=d28560e660168b30af3b58167094aeb299bc2b58", "patch": "@@ -53,7 +53,10 @@ pub enum InstanceDef<'tcx> {\n         call_once: DefId,\n     },\n \n-    /// `drop_in_place::<T>; None` for empty drop glue.\n+    /// `core::ptr::drop_in_place::<T>`.\n+    /// The `DefId` is for `core::ptr::drop_in_place`.\n+    /// The `Option<Ty<'tcx>>` is either `Some(T)`, or `None` for empty drop\n+    /// glue.\n     DropGlue(DefId, Option<Ty<'tcx>>),\n \n     ///`<T as Clone>::clone` shim.\n@@ -176,11 +179,25 @@ impl<'tcx> InstanceDef<'tcx> {\n         if self.requires_inline(tcx) {\n             return true;\n         }\n-        if let ty::InstanceDef::DropGlue(..) = *self {\n-            // Drop glue wants to be instantiated at every codegen\n+        if let ty::InstanceDef::DropGlue(.., Some(ty)) = *self {\n+            // Drop glue generally wants to be instantiated at every codegen\n             // unit, but without an #[inline] hint. We should make this\n             // available to normal end-users.\n-            return true;\n+            if tcx.sess.opts.incremental.is_none() {\n+                return true;\n+            }\n+            // When compiling with incremental, we can generate a *lot* of\n+            // codegen units. Including drop glue into all of them has a\n+            // considerable compile time cost.\n+            //\n+            // We include enums without destructors to allow, say, optimizing\n+            // drops of `Option::None` before LTO. We also respect the intent of\n+            // `#[inline]` on `Drop::drop` implementations.\n+            return ty.ty_adt_def().map_or(true, |adt_def| {\n+                adt_def.destructor(tcx).map_or(adt_def.is_enum(), |dtor| {\n+                    tcx.codegen_fn_attrs(dtor.did).requests_inline()\n+                })\n+            });\n         }\n         tcx.codegen_fn_attrs(self.def_id()).requests_inline()\n     }"}, {"sha": "9b81d69ce694c9120559c3976f6194a44062fe37", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d28560e660168b30af3b58167094aeb299bc2b58/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28560e660168b30af3b58167094aeb299bc2b58/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=d28560e660168b30af3b58167094aeb299bc2b58", "patch": "@@ -680,13 +680,20 @@ fn characteristic_def_id_of_mono_item<'tcx>(\n \n             if tcx.trait_of_item(def_id).is_some() {\n                 let self_ty = instance.substs.type_at(0);\n-                // This is an implementation of a trait method.\n+                // This is a default implementation of a trait method.\n                 return characteristic_def_id_of_type(self_ty).or(Some(def_id));\n             }\n \n             if let Some(impl_def_id) = tcx.impl_of_method(def_id) {\n-                // This is a method within an inherent impl, find out what the\n-                // self-type is:\n+                if tcx.sess.opts.incremental.is_some()\n+                    && tcx.trait_id_of_impl(impl_def_id) == tcx.lang_items().drop_trait()\n+                {\n+                    // Put `Drop::drop` into the same cgu as `drop_in_place`\n+                    // since `drop_in_place` is the only thing that can\n+                    // call it.\n+                    return None;\n+                }\n+                // This is a method within an impl, find out what the self-type is:\n                 let impl_self_ty = tcx.subst_and_normalize_erasing_regions(\n                     instance.substs,\n                     ty::ParamEnv::reveal_all(),"}, {"sha": "662519067d78e77cb1923dcbc10805c4156ce72a", "filename": "src/test/codegen-units/partitioning/extern-drop-glue.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d28560e660168b30af3b58167094aeb299bc2b58/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28560e660168b30af3b58167094aeb299bc2b58/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs?ref=d28560e660168b30af3b58167094aeb299bc2b58", "patch": "@@ -2,23 +2,23 @@\n \n // We specify -Z incremental here because we want to test the partitioning for\n // incremental compilation\n+// We specify opt-level=0 because `drop_in_place` is `Internal` when optimizing\n // compile-flags:-Zprint-mono-items=lazy -Zincremental=tmp/partitioning-tests/extern-drop-glue\n-// compile-flags:-Zinline-in-all-cgus\n+// compile-flags:-Zinline-in-all-cgus -Copt-level=0\n \n #![allow(dead_code)]\n-#![crate_type=\"rlib\"]\n+#![crate_type = \"rlib\"]\n \n // aux-build:cgu_extern_drop_glue.rs\n extern crate cgu_extern_drop_glue;\n \n-//~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<cgu_extern_drop_glue::Struct[0]> @@ extern_drop_glue[Internal] extern_drop_glue-mod1[Internal]\n+//~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<cgu_extern_drop_glue::Struct[0]> @@ extern_drop_glue-fallback.cgu[External]\n \n struct LocalStruct(cgu_extern_drop_glue::Struct);\n \n //~ MONO_ITEM fn extern_drop_glue::user[0] @@ extern_drop_glue[External]\n-pub fn user()\n-{\n-    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<extern_drop_glue::LocalStruct[0]> @@ extern_drop_glue[Internal]\n+pub fn user() {\n+    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<extern_drop_glue::LocalStruct[0]> @@ extern_drop_glue-fallback.cgu[External]\n     let _ = LocalStruct(cgu_extern_drop_glue::Struct(0));\n }\n \n@@ -28,9 +28,8 @@ pub mod mod1 {\n     struct LocalStruct(cgu_extern_drop_glue::Struct);\n \n     //~ MONO_ITEM fn extern_drop_glue::mod1[0]::user[0] @@ extern_drop_glue-mod1[External]\n-    pub fn user()\n-    {\n-        //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<extern_drop_glue::mod1[0]::LocalStruct[0]> @@ extern_drop_glue-mod1[Internal]\n+    pub fn user() {\n+        //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<extern_drop_glue::mod1[0]::LocalStruct[0]> @@ extern_drop_glue-fallback.cgu[External]\n         let _ = LocalStruct(cgu_extern_drop_glue::Struct(0));\n     }\n }"}, {"sha": "14a50bf579806ffde6101c713d6e057a7e2dbcf4", "filename": "src/test/codegen-units/partitioning/local-drop-glue.rs", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d28560e660168b30af3b58167094aeb299bc2b58/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28560e660168b30af3b58167094aeb299bc2b58/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs?ref=d28560e660168b30af3b58167094aeb299bc2b58", "patch": "@@ -1,54 +1,45 @@\n // ignore-tidy-linelength\n // We specify -Z incremental here because we want to test the partitioning for\n // incremental compilation\n+// We specify opt-level=0 because `drop_in_place` is `Internal` when optimizing\n // compile-flags:-Zprint-mono-items=lazy -Zincremental=tmp/partitioning-tests/local-drop-glue\n-// compile-flags:-Zinline-in-all-cgus\n+// compile-flags:-Zinline-in-all-cgus -Copt-level=0\n \n #![allow(dead_code)]\n-#![crate_type=\"rlib\"]\n+#![crate_type = \"rlib\"]\n \n-//~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<local_drop_glue::Struct[0]> @@ local_drop_glue[Internal] local_drop_glue-mod1[Internal]\n+//~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<local_drop_glue::Struct[0]> @@ local_drop_glue-fallback.cgu[External]\n struct Struct {\n-    _a: u32\n+    _a: u32,\n }\n \n impl Drop for Struct {\n-    //~ MONO_ITEM fn local_drop_glue::{{impl}}[0]::drop[0] @@ local_drop_glue[External]\n+    //~ MONO_ITEM fn local_drop_glue::{{impl}}[0]::drop[0] @@ local_drop_glue-fallback.cgu[External]\n     fn drop(&mut self) {}\n }\n \n-//~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<local_drop_glue::Outer[0]> @@ local_drop_glue[Internal]\n+//~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<local_drop_glue::Outer[0]> @@ local_drop_glue-fallback.cgu[External]\n struct Outer {\n-    _a: Struct\n+    _a: Struct,\n }\n \n //~ MONO_ITEM fn local_drop_glue::user[0] @@ local_drop_glue[External]\n-pub fn user()\n-{\n-    let _ = Outer {\n-        _a: Struct {\n-            _a: 0\n-        }\n-    };\n+pub fn user() {\n+    let _ = Outer { _a: Struct { _a: 0 } };\n }\n \n-pub mod mod1\n-{\n+pub mod mod1 {\n     use super::Struct;\n \n-    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<local_drop_glue::mod1[0]::Struct2[0]> @@ local_drop_glue-mod1[Internal]\n+    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<local_drop_glue::mod1[0]::Struct2[0]> @@ local_drop_glue-fallback.cgu[External]\n     struct Struct2 {\n         _a: Struct,\n-        //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<(u32, local_drop_glue::Struct[0])> @@ local_drop_glue-mod1[Internal]\n+        //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<(u32, local_drop_glue::Struct[0])> @@ local_drop_glue-fallback.cgu[Internal]\n         _b: (u32, Struct),\n     }\n \n     //~ MONO_ITEM fn local_drop_glue::mod1[0]::user[0] @@ local_drop_glue-mod1[External]\n-    pub fn user()\n-    {\n-        let _ = Struct2 {\n-            _a: Struct { _a: 0 },\n-            _b: (0, Struct { _a: 0 }),\n-        };\n+    pub fn user() {\n+        let _ = Struct2 { _a: Struct { _a: 0 }, _b: (0, Struct { _a: 0 }) };\n     }\n }"}]}