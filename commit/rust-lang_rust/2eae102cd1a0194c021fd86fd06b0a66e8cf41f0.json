{"sha": "2eae102cd1a0194c021fd86fd06b0a66e8cf41f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYWUxMDJjZDFhMDE5NGMwMjFmZDg2ZmQwNmIwYTY2ZThjZjQxZjA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-04-11T12:29:58Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-04-11T12:29:58Z"}, "message": "Don't lint lifetimes after trait objects", "tree": {"sha": "fbcaf8437b2f4d01158f616238d598518e81a219", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbcaf8437b2f4d01158f616238d598518e81a219"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2eae102cd1a0194c021fd86fd06b0a66e8cf41f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2eae102cd1a0194c021fd86fd06b0a66e8cf41f0", "html_url": "https://github.com/rust-lang/rust/commit/2eae102cd1a0194c021fd86fd06b0a66e8cf41f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2eae102cd1a0194c021fd86fd06b0a66e8cf41f0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bb0a4d667a41cce80fc2d04e0ed2e47982aa2a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bb0a4d667a41cce80fc2d04e0ed2e47982aa2a4", "html_url": "https://github.com/rust-lang/rust/commit/8bb0a4d667a41cce80fc2d04e0ed2e47982aa2a4"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "88285cac037038ac9115d4a6afc17e07d1252648", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2eae102cd1a0194c021fd86fd06b0a66e8cf41f0/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eae102cd1a0194c021fd86fd06b0a66e8cf41f0/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=2eae102cd1a0194c021fd86fd06b0a66e8cf41f0", "patch": "@@ -150,8 +150,14 @@ fn could_use_elision<'a, 'tcx: 'a, T: Iterator<Item = &'tcx Lifetime>>(\n         output_visitor.visit_ty(ty);\n     }\n \n-    let input_lts = lts_from_bounds(input_visitor.into_vec(), bounds_lts);\n-    let output_lts = output_visitor.into_vec();\n+    let input_lts = match input_visitor.into_vec() {\n+        Some(lts) => lts_from_bounds(lts, bounds_lts),\n+        None => return false,\n+    };\n+    let output_lts = match output_visitor.into_vec() {\n+        Some(val) => val,\n+        None => return false,\n+    };\n \n     if let Some(body_id) = body {\n         let mut checker = BodyLifetimeChecker { lifetimes_used_in_body: false };\n@@ -230,13 +236,15 @@ fn unique_lifetimes(lts: &[RefLt]) -> usize {\n struct RefVisitor<'a, 'tcx: 'a> {\n     cx: &'a LateContext<'a, 'tcx>,\n     lts: Vec<RefLt>,\n+    abort: bool,\n }\n \n impl<'v, 't> RefVisitor<'v, 't> {\n     fn new(cx: &'v LateContext<'v, 't>) -> RefVisitor<'v, 't> {\n         RefVisitor {\n             cx: cx,\n             lts: Vec::new(),\n+            abort: false,\n         }\n     }\n \n@@ -254,8 +262,12 @@ impl<'v, 't> RefVisitor<'v, 't> {\n         }\n     }\n \n-    fn into_vec(self) -> Vec<RefLt> {\n-        self.lts\n+    fn into_vec(self) -> Option<Vec<RefLt>> {\n+        if self.abort {\n+            None\n+        } else {\n+            Some(self.lts)\n+        }\n     }\n \n     fn collect_anonymous_lifetimes(&mut self, qpath: &QPath, ty: &Ty) {\n@@ -306,7 +318,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n             },\n             TyTraitObject(ref bounds, ref lt) => {\n                 if !lt.is_elided() {\n-                    self.record(&Some(*lt));\n+                    self.abort = true;\n                 }\n                 for bound in bounds {\n                     self.visit_poly_trait_ref(bound, TraitBoundModifier::None);\n@@ -343,10 +355,13 @@ fn has_where_lifetimes<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, where_clause: &\n                     walk_ty_param_bound(&mut visitor, bound);\n                 }\n                 // and check that all lifetimes are allowed\n-                for lt in visitor.into_vec() {\n-                    if !allowed_lts.contains(&lt) {\n-                        return true;\n-                    }\n+                match visitor.into_vec() {\n+                    None => return false,\n+                    Some(lts) => for lt in lts {\n+                        if !allowed_lts.contains(&lt) {\n+                            return true;\n+                        }\n+                    },\n                 }\n             },\n             WherePredicate::EqPredicate(ref pred) => {"}, {"sha": "0a201222910c53421e116ffcbe571b3f0bc14a35", "filename": "tests/ui/lifetimes.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2eae102cd1a0194c021fd86fd06b0a66e8cf41f0/tests%2Fui%2Flifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2eae102cd1a0194c021fd86fd06b0a66e8cf41f0/tests%2Fui%2Flifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes.stderr?ref=2eae102cd1a0194c021fd86fd06b0a66e8cf41f0", "patch": "@@ -97,15 +97,6 @@ error: explicit lifetimes given in parameter types where they could be elided\n 132 | fn trait_bound_bug<'a, T: WithLifetime<'a>>() { unimplemented!() }\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided\n-   --> $DIR/lifetimes.rs:140:5\n-    |\n-140 |       fn iter<'a>(&'a self) -> Box<Iterator<Item = usize> + 'a> {\n-    |  _____^ starting here...\n-141 | |         unimplemented!()\n-142 | |     }\n-    | |_____^ ...ending here\n-\n warning: unused variable: `cx`\n    --> $DIR/lifetimes.rs:148:30\n     |\n@@ -114,5 +105,5 @@ warning: unused variable: `cx`\n     |\n     = note: #[warn(unused_variables)] on by default\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 15 previous errors\n "}]}