{"sha": "40f434b8c5a0bbea8e87aeb2bc3a81b99fcb7a64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZjQzNGI4YzVhMGJiZWE4ZTg3YWViMmJjM2E4MWI5OWZjYjdhNjQ=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-03T19:04:01Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-04T16:43:24Z"}, "message": "Reuse `adt_defined_here`", "tree": {"sha": "2843ad4fa78cfb006b0fb7c16f740a4715d4d82e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2843ad4fa78cfb006b0fb7c16f740a4715d4d82e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40f434b8c5a0bbea8e87aeb2bc3a81b99fcb7a64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40f434b8c5a0bbea8e87aeb2bc3a81b99fcb7a64", "html_url": "https://github.com/rust-lang/rust/commit/40f434b8c5a0bbea8e87aeb2bc3a81b99fcb7a64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40f434b8c5a0bbea8e87aeb2bc3a81b99fcb7a64/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d289f55b0c8e4b97a85d18109183b73e78f67db6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d289f55b0c8e4b97a85d18109183b73e78f67db6", "html_url": "https://github.com/rust-lang/rust/commit/d289f55b0c8e4b97a85d18109183b73e78f67db6"}], "stats": {"total": 65, "additions": 47, "deletions": 18}, "files": [{"sha": "451e259ca7aed65dc9a6d06b86c4dbef9d828eae", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/40f434b8c5a0bbea8e87aeb2bc3a81b99fcb7a64/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40f434b8c5a0bbea8e87aeb2bc3a81b99fcb7a64/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=40f434b8c5a0bbea8e87aeb2bc3a81b99fcb7a64", "patch": "@@ -459,11 +459,9 @@ fn check_exhaustive<'p, 'tcx>(\n             return;\n         } else {\n             // We know the type is inhabited, so this must be wrong\n-            let (def_span, non_empty_enum) = match scrut_ty.kind {\n-                ty::Adt(def, _) if def.is_enum() => {\n-                    (cx.tcx.hir().span_if_local(def.did), !def.variants.is_empty())\n-                }\n-                _ => (None, false),\n+            let non_empty_enum = match scrut_ty.kind {\n+                ty::Adt(def, _) => def.is_enum() && !def.variants.is_empty(),\n+                _ => false,\n             };\n \n             if non_empty_enum {\n@@ -478,9 +476,7 @@ fn check_exhaustive<'p, 'tcx>(\n                     \"ensure that all possible cases are being handled, \\\n                      possibly by adding wildcards or more match arms\",\n                 );\n-                if let Some(sp) = def_span {\n-                    err.span_label(sp, format!(\"`{}` defined here\", scrut_ty));\n-                }\n+                adt_defined_here(cx, &mut err, scrut_ty, &[]);\n                 err.emit();\n                 return;\n             }"}, {"sha": "1b1096c977ad4e915641319ca048c79a9bb57a27", "filename": "src/test/ui/pattern/usefulness/always-inhabited-union-ref.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/40f434b8c5a0bbea8e87aeb2bc3a81b99fcb7a64/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40f434b8c5a0bbea8e87aeb2bc3a81b99fcb7a64/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr?ref=40f434b8c5a0bbea8e87aeb2bc3a81b99fcb7a64", "patch": "@@ -9,8 +9,13 @@ LL |     match uninhab_ref() {\n error[E0004]: non-exhaustive patterns: type `Foo` is non-empty\n   --> $DIR/always-inhabited-union-ref.rs:27:11\n    |\n-LL |     match uninhab_union() {\n-   |           ^^^^^^^^^^^^^^^\n+LL | / pub union Foo {\n+LL | |     foo: !,\n+LL | | }\n+   | |_- `Foo` defined here\n+...\n+LL |       match uninhab_union() {\n+   |             ^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}, {"sha": "b125718ae2ccf7fe544d1e178922998661e159b7", "filename": "src/test/ui/pattern/usefulness/match-empty-exhaustive_patterns.stderr", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/40f434b8c5a0bbea8e87aeb2bc3a81b99fcb7a64/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40f434b8c5a0bbea8e87aeb2bc3a81b99fcb7a64/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr?ref=40f434b8c5a0bbea8e87aeb2bc3a81b99fcb7a64", "patch": "@@ -39,6 +39,9 @@ LL |     match_empty!(0u8);\n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct` is non-empty\n   --> $DIR/match-empty-exhaustive_patterns.rs:66:18\n    |\n+LL | struct NonEmptyStruct(bool);\n+   | ---------------------------- `NonEmptyStruct` defined here\n+...\n LL |     match_empty!(NonEmptyStruct(true));\n    |                  ^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -47,16 +50,27 @@ LL |     match_empty!(NonEmptyStruct(true));\n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion1` is non-empty\n   --> $DIR/match-empty-exhaustive_patterns.rs:68:18\n    |\n-LL |     match_empty!((NonEmptyUnion1 { foo: () }));\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / union NonEmptyUnion1 {\n+LL | |     foo: (),\n+LL | | }\n+   | |_- `NonEmptyUnion1` defined here\n+...\n+LL |       match_empty!((NonEmptyUnion1 { foo: () }));\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion2` is non-empty\n   --> $DIR/match-empty-exhaustive_patterns.rs:70:18\n    |\n-LL |     match_empty!((NonEmptyUnion2 { foo: () }));\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / union NonEmptyUnion2 {\n+LL | |     foo: (),\n+LL | |     bar: (),\n+LL | | }\n+   | |_- `NonEmptyUnion2` defined here\n+...\n+LL |       match_empty!((NonEmptyUnion2 { foo: () }));\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}, {"sha": "a4e143b6782eb93e1f8d20d4d4d7dcf063288f89", "filename": "src/test/ui/pattern/usefulness/match-empty.stderr", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/40f434b8c5a0bbea8e87aeb2bc3a81b99fcb7a64/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40f434b8c5a0bbea8e87aeb2bc3a81b99fcb7a64/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr?ref=40f434b8c5a0bbea8e87aeb2bc3a81b99fcb7a64", "patch": "@@ -20,6 +20,9 @@ LL |     match_empty!(0u8);\n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct` is non-empty\n   --> $DIR/match-empty.rs:65:18\n    |\n+LL | struct NonEmptyStruct(bool);\n+   | ---------------------------- `NonEmptyStruct` defined here\n+...\n LL |     match_empty!(NonEmptyStruct(true));\n    |                  ^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -28,16 +31,27 @@ LL |     match_empty!(NonEmptyStruct(true));\n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion1` is non-empty\n   --> $DIR/match-empty.rs:67:18\n    |\n-LL |     match_empty!((NonEmptyUnion1 { foo: () }));\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / union NonEmptyUnion1 {\n+LL | |     foo: (),\n+LL | | }\n+   | |_- `NonEmptyUnion1` defined here\n+...\n+LL |       match_empty!((NonEmptyUnion1 { foo: () }));\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion2` is non-empty\n   --> $DIR/match-empty.rs:69:18\n    |\n-LL |     match_empty!((NonEmptyUnion2 { foo: () }));\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / union NonEmptyUnion2 {\n+LL | |     foo: (),\n+LL | |     bar: (),\n+LL | | }\n+   | |_- `NonEmptyUnion2` defined here\n+...\n+LL |       match_empty!((NonEmptyUnion2 { foo: () }));\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}]}