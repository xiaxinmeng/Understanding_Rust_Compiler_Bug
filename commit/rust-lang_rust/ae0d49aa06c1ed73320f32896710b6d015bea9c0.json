{"sha": "ae0d49aa06c1ed73320f32896710b6d015bea9c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMGQ0OWFhMDZjMWVkNzMzMjBmMzI4OTY3MTBiNmQwMTViZWE5YzA=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-01T12:36:33Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-02T05:56:53Z"}, "message": "Rename str::char_slice -> str::slice", "tree": {"sha": "4ad8d7f965133e400fcb322695d3cf9508f45014", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ad8d7f965133e400fcb322695d3cf9508f45014"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae0d49aa06c1ed73320f32896710b6d015bea9c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae0d49aa06c1ed73320f32896710b6d015bea9c0", "html_url": "https://github.com/rust-lang/rust/commit/ae0d49aa06c1ed73320f32896710b6d015bea9c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae0d49aa06c1ed73320f32896710b6d015bea9c0/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc9169f09c8999040bc2bdb313dd44fbb70472f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc9169f09c8999040bc2bdb313dd44fbb70472f8", "html_url": "https://github.com/rust-lang/rust/commit/fc9169f09c8999040bc2bdb313dd44fbb70472f8"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "0acd3e4f1c8e57eceb861efd5feed22747b9e3e4", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae0d49aa06c1ed73320f32896710b6d015bea9c0/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae0d49aa06c1ed73320f32896710b6d015bea9c0/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=ae0d49aa06c1ed73320f32896710b6d015bea9c0", "patch": "@@ -162,7 +162,7 @@ fn rest(s: str, start: uint) -> str {\n     if (start >= str::char_len(s)) {\n         \"\"\n     } else {\n-        str::char_slice(s, start, str::char_len(s))\n+        str::slice(s, start, str::char_len(s))\n     }\n }\n "}, {"sha": "f632e58eea7f1a83fd6948d11321f70b068baf7b", "filename": "src/libcore/str.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ae0d49aa06c1ed73320f32896710b6d015bea9c0/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae0d49aa06c1ed73320f32896710b6d015bea9c0/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=ae0d49aa06c1ed73320f32896710b6d015bea9c0", "patch": "@@ -37,7 +37,7 @@ export\n    bytes,\n    chars,\n    substr,\n-   char_slice,\n+   slice,\n    split,\n    splitn,\n    split_str,\n@@ -427,7 +427,7 @@ fn substr(s: str, begin: uint, len: uint) -> str unsafe {\n }\n \n /*\n-Function: char_slice\n+Function: slice\n \n Unicode-safe slice. Returns a slice of the given string containing\n the characters in the range [`begin`..`end`). `begin` and `end` are\n@@ -438,9 +438,9 @@ Failure:\n - If begin is greater than end\n - If end is greater than the character length of the string\n \n-FIXME: rename to slice(), make faster by avoiding char conversion\n+FIXME: make faster by avoiding char conversion\n */\n-fn char_slice(s: str, begin: uint, end: uint) -> str {\n+fn slice(s: str, begin: uint, end: uint) -> str {\n     from_chars(vec::slice(chars(s), begin, end))\n }\n \n@@ -620,7 +620,7 @@ fn windowed(nn: uint, ss: str) -> [str] {\n \n     let ii = 0u;\n     while ii+nn <= len {\n-        let w = char_slice( ss, ii, ii+nn );\n+        let w = slice( ss, ii, ii+nn );\n         vec::push(ww,w);\n         ii += 1u;\n     }\n@@ -675,8 +675,8 @@ fn replace(s: str, from: str, to: str) : is_not_empty(from) -> str unsafe {\n         if idx == -1 {\n             ret s;\n         }\n-        ret char_slice(s, 0u, idx as uint) + to +\n-            replace(char_slice(s, idx as uint + char_len(from), char_len(s)),\n+        ret slice(s, 0u, idx as uint) + to +\n+            replace(slice(s, idx as uint + char_len(from), char_len(s)),\n                     from, to);\n     }\n }\n@@ -1658,17 +1658,17 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_char_slice() {\n-        assert (eq(\"ab\", char_slice(\"abc\", 0u, 2u)));\n-        assert (eq(\"bc\", char_slice(\"abc\", 1u, 3u)));\n-        assert (eq(\"\", char_slice(\"abc\", 1u, 1u)));\n-        assert (eq(\"\\u65e5\", char_slice(\"\\u65e5\\u672c\", 0u, 1u)));\n+    fn test_slice() {\n+        assert (eq(\"ab\", slice(\"abc\", 0u, 2u)));\n+        assert (eq(\"bc\", slice(\"abc\", 1u, 3u)));\n+        assert (eq(\"\", slice(\"abc\", 1u, 1u)));\n+        assert (eq(\"\\u65e5\", slice(\"\\u65e5\\u672c\", 0u, 1u)));\n \n         let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\";\n-        assert (eq(\"\u0e1b\", char_slice(data, 0u, 1u)));\n-        assert (eq(\"\u0e23\", char_slice(data, 1u, 2u)));\n-        assert (eq(\"\u534e\", char_slice(data, 10u, 11u)));\n-        assert (eq(\"\", char_slice(data, 1u, 1u)));\n+        assert (eq(\"\u0e1b\", slice(data, 0u, 1u)));\n+        assert (eq(\"\u0e23\", slice(data, 1u, 2u)));\n+        assert (eq(\"\u534e\", slice(data, 10u, 11u)));\n+        assert (eq(\"\", slice(data, 1u, 1u)));\n \n         fn a_million_letter_X() -> str {\n             let i = 0;\n@@ -1683,7 +1683,7 @@ mod tests {\n             ret rs;\n         }\n         assert (eq(half_a_million_letter_X(),\n-                        char_slice(a_million_letter_X(), 0u, 500000u)));\n+                        slice(a_million_letter_X(), 0u, 500000u)));\n     }\n \n     #[test]"}, {"sha": "bb1d0fb64b6b214b660898848a77452ad0f11696", "filename": "src/libstd/json.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ae0d49aa06c1ed73320f32896710b6d015bea9c0/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae0d49aa06c1ed73320f32896710b6d015bea9c0/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=ae0d49aa06c1ed73320f32896710b6d015bea9c0", "patch": "@@ -71,7 +71,7 @@ fn to_str(j: json) -> str {\n \n fn rest(s: str) -> str {\n     assert(str::char_len(s) >= 1u);\n-    str::char_slice(s, 1u, str::char_len(s))\n+    str::slice(s, 1u, str::char_len(s))\n }\n \n fn from_str_str(s: str) -> (option<json>, str) {\n@@ -99,7 +99,7 @@ fn from_str_str(s: str) -> (option<json>, str) {\n             cont;\n         } else if (c == '\"') {\n             ret (some(string(res)),\n-                 str::char_slice(s, pos, str::char_len(s)));\n+                 str::slice(s, pos, str::char_len(s)));\n         }\n         res = res + str::from_char(c);\n     }\n@@ -200,12 +200,12 @@ fn from_str_float(s: str) -> (option<json>, str) {\n             }\n             '.' { break; }\n             _ { ret (some(num(neg * res)),\n-                     str::char_slice(s, opos, str::char_len(s))); }\n+                     str::slice(s, opos, str::char_len(s))); }\n         }\n     }\n \n     if pos == len {\n-        ret (some(num(neg * res)), str::char_slice(s, pos, str::char_len(s)));\n+        ret (some(num(neg * res)), str::slice(s, pos, str::char_len(s)));\n     }\n \n     let dec = 1f;\n@@ -220,25 +220,25 @@ fn from_str_float(s: str) -> (option<json>, str) {\n                 res += (((c as int) - ('0' as int)) as float) * dec;\n             }\n             _ { ret (some(num(neg * res)),\n-                     str::char_slice(s, opos, str::char_len(s))); }\n+                     str::slice(s, opos, str::char_len(s))); }\n         }\n     }\n-    ret (some(num(neg * res)), str::char_slice(s, pos, str::char_len(s)));\n+    ret (some(num(neg * res)), str::slice(s, pos, str::char_len(s)));\n }\n \n fn from_str_bool(s: str) -> (option<json>, str) {\n     if (str::starts_with(s, \"true\")) {\n-        (some(boolean(true)), str::char_slice(s, 4u, str::char_len(s)))\n+        (some(boolean(true)), str::slice(s, 4u, str::char_len(s)))\n     } else if (str::starts_with(s, \"false\")) {\n-        (some(boolean(false)), str::char_slice(s, 5u, str::char_len(s)))\n+        (some(boolean(false)), str::slice(s, 5u, str::char_len(s)))\n     } else {\n         (none, s)\n     }\n }\n \n fn from_str_null(s: str) -> (option<json>, str) {\n     if (str::starts_with(s, \"null\")) {\n-        (some(null), str::char_slice(s, 4u, str::char_len(s)))\n+        (some(null), str::slice(s, 4u, str::char_len(s)))\n     } else {\n         (none, s)\n     }"}, {"sha": "9c43ce4486414f68220b7fd80293a47894af28be", "filename": "src/rustdoc/unindent_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae0d49aa06c1ed73320f32896710b6d015bea9c0/src%2Frustdoc%2Funindent_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae0d49aa06c1ed73320f32896710b6d015bea9c0/src%2Frustdoc%2Funindent_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Funindent_pass.rs?ref=ae0d49aa06c1ed73320f32896710b6d015bea9c0", "patch": "@@ -68,7 +68,7 @@ fn unindent(s: str) -> str {\n                 line\n             } else {\n                 assert str::byte_len(line) >= min_indent;\n-                str::char_slice(line, min_indent, str::char_len(line))\n+                str::slice(line, min_indent, str::char_len(line))\n             }\n         };\n         str::connect(unindented, \"\\n\")"}]}