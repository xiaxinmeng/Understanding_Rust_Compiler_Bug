{"sha": "2ceebf10707d695497fa9b47b17ebdf7d1cc3c47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZWViZjEwNzA3ZDY5NTQ5N2ZhOWI0N2IxN2ViZGY3ZDFjYzNjNDc=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-09-25T08:58:40Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-09-25T08:58:40Z"}, "message": "Fold context into TransItemVisitor.", "tree": {"sha": "5471a8098382280b1c39639e13784eaf4fe6726d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5471a8098382280b1c39639e13784eaf4fe6726d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ceebf10707d695497fa9b47b17ebdf7d1cc3c47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ceebf10707d695497fa9b47b17ebdf7d1cc3c47", "html_url": "https://github.com/rust-lang/rust/commit/2ceebf10707d695497fa9b47b17ebdf7d1cc3c47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ceebf10707d695497fa9b47b17ebdf7d1cc3c47/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "411dce85eadd4ef8abac9b538c8907ca20865bdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/411dce85eadd4ef8abac9b538c8907ca20865bdd", "html_url": "https://github.com/rust-lang/rust/commit/411dce85eadd4ef8abac9b538c8907ca20865bdd"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "3095aa075331651fc52edee0f24f560a781ead6e", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2ceebf10707d695497fa9b47b17ebdf7d1cc3c47/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ceebf10707d695497fa9b47b17ebdf7d1cc3c47/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=2ceebf10707d695497fa9b47b17ebdf7d1cc3c47", "patch": "@@ -2194,11 +2194,13 @@ pub fn trans_enum_def(ccx: @mut CrateContext, enum_definition: &ast::enum_def,\n     }\n }\n \n-pub struct TransItemVisitor;\n+pub struct TransItemVisitor {\n+    ccx: @mut CrateContext,\n+}\n \n-impl Visitor<@mut CrateContext> for TransItemVisitor {\n-    fn visit_item(&mut self, i: @ast::item, ccx: @mut CrateContext) {\n-        trans_item(ccx, i);\n+impl Visitor<()> for TransItemVisitor {\n+    fn visit_item(&mut self, i: @ast::item, _:()) {\n+        trans_item(self.ccx, i);\n     }\n }\n \n@@ -2235,8 +2237,8 @@ pub fn trans_item(ccx: @mut CrateContext, item: &ast::item) {\n         } else {\n             // Be sure to travel more than just one layer deep to catch nested\n             // items in blocks and such.\n-            let mut v = TransItemVisitor;\n-            v.visit_block(body, ccx);\n+            let mut v = TransItemVisitor{ ccx: ccx };\n+            v.visit_block(body, ());\n         }\n       }\n       ast::item_impl(ref generics, _, _, ref ms) => {\n@@ -2288,8 +2290,8 @@ pub fn trans_item(ccx: @mut CrateContext, item: &ast::item) {\n         // functions, but the trait still needs to be walked. Otherwise default\n         // methods with items will not get translated and will cause ICE's when\n         // metadata time comes around.\n-        let mut v = TransItemVisitor;\n-        visit::walk_item(&mut v, item, ccx);\n+        let mut v = TransItemVisitor{ ccx: ccx };\n+        visit::walk_item(&mut v, item, ());\n       }\n       _ => {/* fall through */ }\n     }"}, {"sha": "fd35d05f0fde770e3e4e63624bbfceec09b0f5bd", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ceebf10707d695497fa9b47b17ebdf7d1cc3c47/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ceebf10707d695497fa9b47b17ebdf7d1cc3c47/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=2ceebf10707d695497fa9b47b17ebdf7d1cc3c47", "patch": "@@ -61,9 +61,9 @@ pub fn trans_impl(ccx: @mut CrateContext,\n     // Both here and below with generic methods, be sure to recurse and look for\n     // items that we need to translate.\n     if !generics.ty_params.is_empty() {\n-        let mut v = TransItemVisitor;\n+        let mut v = TransItemVisitor{ ccx: ccx };\n         for method in methods.iter() {\n-            visit::walk_method_helper(&mut v, *method, ccx);\n+            visit::walk_method_helper(&mut v, *method, ());\n         }\n         return;\n     }\n@@ -80,8 +80,8 @@ pub fn trans_impl(ccx: @mut CrateContext,\n                          None,\n                          llfn);\n         } else {\n-            let mut v = TransItemVisitor;\n-            visit::walk_method_helper(&mut v, *method, ccx);\n+            let mut v = TransItemVisitor{ ccx: ccx };\n+            visit::walk_method_helper(&mut v, *method, ());\n         }\n     }\n }"}]}