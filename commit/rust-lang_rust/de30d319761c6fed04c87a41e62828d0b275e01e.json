{"sha": "de30d319761c6fed04c87a41e62828d0b275e01e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMzBkMzE5NzYxYzZmZWQwNGM4N2E0MWU2MjgyOGQwYjI3NWUwMWU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-29T23:13:47Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-29T23:13:47Z"}, "message": "rustc: fix ty::Const::eval's handling of inference variables.", "tree": {"sha": "c0225bb79417fde81e9b812621e68027694ee275", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0225bb79417fde81e9b812621e68027694ee275"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de30d319761c6fed04c87a41e62828d0b275e01e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de30d319761c6fed04c87a41e62828d0b275e01e", "html_url": "https://github.com/rust-lang/rust/commit/de30d319761c6fed04c87a41e62828d0b275e01e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de30d319761c6fed04c87a41e62828d0b275e01e/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25d8a9494ca6d77361e47c1505ecf640b168819e", "url": "https://api.github.com/repos/rust-lang/rust/commits/25d8a9494ca6d77361e47c1505ecf640b168819e", "html_url": "https://github.com/rust-lang/rust/commit/25d8a9494ca6d77361e47c1505ecf640b168819e"}], "stats": {"total": 49, "additions": 35, "deletions": 14}, "files": [{"sha": "aa5b1c7315a4ba3261ed24a0e5d9ccce272f7b41", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/de30d319761c6fed04c87a41e62828d0b275e01e/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de30d319761c6fed04c87a41e62828d0b275e01e/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=de30d319761c6fed04c87a41e62828d0b275e01e", "patch": "@@ -2330,22 +2330,43 @@ impl<'tcx> Const<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         param_env: ParamEnv<'tcx>,\n     ) -> &Const<'tcx> {\n-        // FIXME(const_generics): this doesn't work right now,\n-        // because it tries to relate an `Infer` to a `Param`.\n+        let try_const_eval = |did, param_env: ParamEnv<'tcx>, substs| {\n+            let param_env_and_substs = param_env.with_reveal_all().and(substs);\n+\n+            // Avoid querying `tcx.const_eval(...)` with any e.g. inference vars.\n+            if param_env_and_substs.has_local_value() {\n+                return None;\n+            }\n+\n+            let (param_env, substs) = param_env_and_substs.into_parts();\n+\n+            // try to resolve e.g. associated constants to their definition on an impl\n+            let instance = ty::Instance::resolve(tcx, param_env, did, substs)?;\n+            let gid = GlobalId {\n+                instance,\n+                promoted: None,\n+            };\n+            tcx.const_eval(param_env.and(gid)).ok()\n+        };\n+\n         match self.val {\n             ConstKind::Unevaluated(did, substs) => {\n-                // if `substs` has no unresolved components, use and empty param_env\n-                let (param_env, substs) = param_env.with_reveal_all().and(substs).into_parts();\n-                // try to resolve e.g. associated constants to their definition on an impl\n-                let instance = match ty::Instance::resolve(tcx, param_env, did, substs) {\n-                    Some(instance) => instance,\n-                    None => return self,\n-                };\n-                let gid = GlobalId {\n-                    instance,\n-                    promoted: None,\n-                };\n-                tcx.const_eval(param_env.and(gid)).unwrap_or(self)\n+                // HACK(eddyb) when substs contain e.g. inference variables,\n+                // attempt using identity substs instead, that will succeed\n+                // when the expression doesn't depend on any parameters.\n+                // FIXME(eddyb) make `const_eval` a canonical query instead,\n+                // that would properly handle inference variables in `substs`.\n+                if substs.has_local_value() {\n+                    let identity_substs = InternalSubsts::identity_for_item(tcx, did);\n+                    // The `ParamEnv` needs to match the `identity_substs`.\n+                    let identity_param_env = tcx.param_env(did);\n+                    match try_const_eval(did, identity_param_env, identity_substs) {\n+                        Some(ct) => ct.subst(tcx, substs),\n+                        None => self,\n+                    }\n+                } else {\n+                    try_const_eval(did, param_env, substs).unwrap_or(self)\n+                }\n             },\n             _ => self,\n         }"}]}