{"sha": "43bfbb10bf52d1cf6bd90ae2e19bcd357d38be4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYmZiYjEwYmY1MmQxY2Y2YmQ5MGFlMmUxOWJjZDM1N2QzOGJlNGQ=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-11-12T20:46:54Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-11-15T12:09:56Z"}, "message": "Add column number support to Backtrace\n\nBacktrace frames might include column numbers.\nPrint them if they are included.", "tree": {"sha": "a0898b0b9b77896d5ad05644a69e895ec38e66cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0898b0b9b77896d5ad05644a69e895ec38e66cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43bfbb10bf52d1cf6bd90ae2e19bcd357d38be4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43bfbb10bf52d1cf6bd90ae2e19bcd357d38be4d", "html_url": "https://github.com/rust-lang/rust/commit/43bfbb10bf52d1cf6bd90ae2e19bcd357d38be4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43bfbb10bf52d1cf6bd90ae2e19bcd357d38be4d/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75042566d1c90d912f22e4db43b6d3af98447986", "url": "https://api.github.com/repos/rust-lang/rust/commits/75042566d1c90d912f22e4db43b6d3af98447986", "html_url": "https://github.com/rust-lang/rust/commit/75042566d1c90d912f22e4db43b6d3af98447986"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "7e8e0a621e31cf45bf8f8e68c4de6c11cb68887b", "filename": "library/std/src/backtrace.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/43bfbb10bf52d1cf6bd90ae2e19bcd357d38be4d/library%2Fstd%2Fsrc%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43bfbb10bf52d1cf6bd90ae2e19bcd357d38be4d/library%2Fstd%2Fsrc%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace.rs?ref=43bfbb10bf52d1cf6bd90ae2e19bcd357d38be4d", "patch": "@@ -161,6 +161,7 @@ struct BacktraceSymbol {\n     name: Option<Vec<u8>>,\n     filename: Option<BytesOrWide>,\n     lineno: Option<u32>,\n+    colno: Option<u32>,\n }\n \n enum BytesOrWide {\n@@ -197,6 +198,10 @@ impl fmt::Debug for Backtrace {\n \n impl fmt::Debug for BacktraceSymbol {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        // FIXME: improve formatting: https://github.com/rust-lang/rust/issues/65280\n+        // FIXME: Also, include column numbers into the debug format as Display already has them.\n+        // Until there are stable per-frame accessors, the format shouldn't be changed:\n+        // https://github.com/rust-lang/rust/issues/65280#issuecomment-638966585\n         write!(fmt, \"{{ \")?;\n \n         if let Some(fn_name) = self.name.as_ref().map(|b| backtrace_rs::SymbolName::new(b)) {\n@@ -209,7 +214,7 @@ impl fmt::Debug for BacktraceSymbol {\n             write!(fmt, \", file: \\\"{:?}\\\"\", fname)?;\n         }\n \n-        if let Some(line) = self.lineno.as_ref() {\n+        if let Some(line) = self.lineno {\n             write!(fmt, \", line: {:?}\", line)?;\n         }\n \n@@ -381,14 +386,15 @@ impl fmt::Display for Backtrace {\n                 f.print_raw(frame.frame.ip(), None, None, None)?;\n             } else {\n                 for symbol in frame.symbols.iter() {\n-                    f.print_raw(\n+                    f.print_raw_with_column(\n                         frame.frame.ip(),\n                         symbol.name.as_ref().map(|b| backtrace_rs::SymbolName::new(b)),\n                         symbol.filename.as_ref().map(|b| match b {\n                             BytesOrWide::Bytes(w) => BytesOrWideString::Bytes(w),\n                             BytesOrWide::Wide(w) => BytesOrWideString::Wide(w),\n                         }),\n                         symbol.lineno,\n+                        symbol.colno,\n                     )?;\n                 }\n             }\n@@ -427,6 +433,7 @@ impl Capture {\n                             BytesOrWideString::Wide(b) => BytesOrWide::Wide(b.to_owned()),\n                         }),\n                         lineno: symbol.lineno(),\n+                        colno: symbol.colno(),\n                     });\n                 });\n             }"}, {"sha": "f5f74d1eb9ae61a20a4d7536f0916eddd0d990e3", "filename": "library/std/src/backtrace/tests.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43bfbb10bf52d1cf6bd90ae2e19bcd357d38be4d/library%2Fstd%2Fsrc%2Fbacktrace%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43bfbb10bf52d1cf6bd90ae2e19bcd357d38be4d/library%2Fstd%2Fsrc%2Fbacktrace%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace%2Ftests.rs?ref=43bfbb10bf52d1cf6bd90ae2e19bcd357d38be4d", "patch": "@@ -13,6 +13,7 @@ fn test_debug() {\n                         name: Some(b\"std::backtrace::Backtrace::create\".to_vec()),\n                         filename: Some(BytesOrWide::Bytes(b\"rust/backtrace.rs\".to_vec())),\n                         lineno: Some(100),\n+                        colno: None,\n                     }],\n                 },\n                 BacktraceFrame {\n@@ -21,6 +22,7 @@ fn test_debug() {\n                         name: Some(b\"__rust_maybe_catch_panic\".to_vec()),\n                         filename: None,\n                         lineno: None,\n+                        colno: None,\n                     }],\n                 },\n                 BacktraceFrame {\n@@ -30,11 +32,13 @@ fn test_debug() {\n                             name: Some(b\"std::rt::lang_start_internal\".to_vec()),\n                             filename: Some(BytesOrWide::Bytes(b\"rust/rt.rs\".to_vec())),\n                             lineno: Some(300),\n+                            colno: Some(5),\n                         },\n                         BacktraceSymbol {\n                             name: Some(b\"std::rt::lang_start\".to_vec()),\n                             filename: Some(BytesOrWide::Bytes(b\"rust/rt.rs\".to_vec())),\n                             lineno: Some(400),\n+                            colno: None,\n                         },\n                     ],\n                 },"}]}