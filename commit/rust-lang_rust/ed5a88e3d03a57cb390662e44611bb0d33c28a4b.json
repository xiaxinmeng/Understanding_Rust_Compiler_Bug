{"sha": "ed5a88e3d03a57cb390662e44611bb0d33c28a4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNWE4OGUzZDAzYTU3Y2IzOTA2NjJlNDQ2MTFiYjBkMzNjMjhhNGI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-16T17:51:36Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-17T00:14:16Z"}, "message": "definitions: Store DefPath data in separate table in metadata", "tree": {"sha": "d310f4b984651c340c88ae03c2e00de642fb2d21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d310f4b984651c340c88ae03c2e00de642fb2d21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed5a88e3d03a57cb390662e44611bb0d33c28a4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed5a88e3d03a57cb390662e44611bb0d33c28a4b", "html_url": "https://github.com/rust-lang/rust/commit/ed5a88e3d03a57cb390662e44611bb0d33c28a4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed5a88e3d03a57cb390662e44611bb0d33c28a4b/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aed0cdbfd21984b144d685131e0070cfa811fb49", "url": "https://api.github.com/repos/rust-lang/rust/commits/aed0cdbfd21984b144d685131e0070cfa811fb49", "html_url": "https://github.com/rust-lang/rust/commit/aed0cdbfd21984b144d685131e0070cfa811fb49"}], "stats": {"total": 103, "additions": 41, "deletions": 62}, "files": [{"sha": "ef574b61aa7e9cedd9b98931e247a2beaa46282d", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed5a88e3d03a57cb390662e44611bb0d33c28a4b/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5a88e3d03a57cb390662e44611bb0d33c28a4b/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=ed5a88e3d03a57cb390662e44611bb0d33c28a4b", "patch": "@@ -193,7 +193,7 @@ pub enum DefPathData {\n     // they are treated specially by the `def_path` function.\n     /// The crate root (marker)\n     CrateRoot,\n-    \n+\n     // Catch-all for random DefId things like DUMMY_NODE_ID\n     Misc,\n \n@@ -243,6 +243,10 @@ impl Definitions {\n         }\n     }\n \n+    pub fn def_path_table(&self) -> &DefPathTable {\n+        &self.table\n+    }\n+\n     /// Get the number of definitions.\n     pub fn len(&self) -> usize {\n         self.def_index_to_node.len()"}, {"sha": "e5c5b430811672f939575df19e893444512f9e0a", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed5a88e3d03a57cb390662e44611bb0d33c28a4b/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5a88e3d03a57cb390662e44611bb0d33c28a4b/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=ed5a88e3d03a57cb390662e44611bb0d33c28a4b", "patch": "@@ -29,7 +29,7 @@ use hir::*;\n use hir::print as pprust;\n \n use arena::TypedArena;\n-use std::cell::RefCell;\n+use std::cell::{RefCell, Ref};\n use std::io;\n use std::mem;\n \n@@ -395,6 +395,10 @@ impl<'ast> Map<'ast> {\n         self.definitions.borrow().len()\n     }\n \n+    pub fn definitions(&self) -> Ref<Definitions> {\n+        self.definitions.borrow()\n+    }\n+\n     pub fn def_key(&self, def_id: DefId) -> DefKey {\n         assert!(def_id.is_local());\n         self.definitions.borrow().def_key(def_id.index)"}, {"sha": "9eed5cb8fe8c4eb6a1c5a963d5fe65e09361bd4a", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed5a88e3d03a57cb390662e44611bb0d33c28a4b/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5a88e3d03a57cb390662e44611bb0d33c28a4b/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=ed5a88e3d03a57cb390662e44611bb0d33c28a4b", "patch": "@@ -300,7 +300,7 @@ impl<'a> CrateLoader<'a> {\n         let mut cmeta = cstore::CrateMetadata {\n             name: name,\n             extern_crate: Cell::new(None),\n-            key_map: metadata.load_key_map(crate_root.index),\n+            def_path_table: crate_root.def_path_table.decode(&metadata),\n             proc_macros: crate_root.macro_derive_registrar.map(|_| {\n                 self.load_derive_macros(&crate_root, dylib.clone().map(|p| p.0), span)\n             }),"}, {"sha": "7ec847d24cfa3fc73823ce1a427550454ef172ba", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed5a88e3d03a57cb390662e44611bb0d33c28a4b/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5a88e3d03a57cb390662e44611bb0d33c28a4b/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=ed5a88e3d03a57cb390662e44611bb0d33c28a4b", "patch": "@@ -16,7 +16,7 @@ use schema;\n \n use rustc::dep_graph::DepGraph;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, CrateNum, DefIndex, DefId};\n-use rustc::hir::map::DefKey;\n+use rustc::hir::map::definitions::DefPathTable;\n use rustc::hir::svh::Svh;\n use rustc::middle::cstore::{DepKind, ExternCrate};\n use rustc_back::PanicStrategy;\n@@ -78,7 +78,7 @@ pub struct CrateMetadata {\n     /// hashmap, which gives the reverse mapping.  This allows us to\n     /// quickly retrace a `DefPath`, which is needed for incremental\n     /// compilation support.\n-    pub key_map: FxHashMap<DefKey, DefIndex>,\n+    pub def_path_table: DefPathTable,\n \n     pub dep_kind: Cell<DepKind>,\n     pub source: CrateSource,"}, {"sha": "7305b23951590795928d319096ccf8cab3829022", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed5a88e3d03a57cb390662e44611bb0d33c28a4b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5a88e3d03a57cb390662e44611bb0d33c28a4b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=ed5a88e3d03a57cb390662e44611bb0d33c28a4b", "patch": "@@ -341,7 +341,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n                              def: DefKey)\n                              -> Option<DefIndex> {\n         let cdata = self.get_crate_data(cnum);\n-        cdata.key_map.get(&def).cloned()\n+        cdata.def_path_table.def_index_for_def_key(&def)\n     }\n \n     /// Returns the `DefKey` for a given `DefId`. This indicates the"}, {"sha": "cf550f03d8eb839f1a2ac729743d9f0e6ea8430a", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 13, "deletions": 36, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ed5a88e3d03a57cb390662e44611bb0d33c28a4b/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5a88e3d03a57cb390662e44611bb0d33c28a4b/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=ed5a88e3d03a57cb390662e44611bb0d33c28a4b", "patch": "@@ -12,12 +12,10 @@\n \n use astencode::decode_inlined_item;\n use cstore::{self, CrateMetadata, MetadataBlob, NativeLibrary};\n-use index::Index;\n use schema::*;\n \n use rustc::hir::map as hir_map;\n use rustc::hir::map::{DefKey, DefPathData};\n-use rustc::util::nodemap::FxHashMap;\n use rustc::hir;\n use rustc::hir::intravisit::IdRange;\n \n@@ -456,14 +454,6 @@ impl<'a, 'tcx> MetadataBlob {\n         Lazy::with_position(pos).decode(self)\n     }\n \n-    /// Go through each item in the metadata and create a map from that\n-    /// item's def-key to the item's DefIndex.\n-    pub fn load_key_map(&self, index: LazySeq<Index>) -> FxHashMap<DefKey, DefIndex> {\n-        index.iter_enumerated(self.raw_bytes())\n-            .map(|(index, item)| (item.decode(self).def_key.decode(self), index))\n-            .collect()\n-    }\n-\n     pub fn list_crate_metadata(&self, out: &mut io::Write) -> io::Result<()> {\n         write!(out, \"=External Dependencies=\\n\")?;\n         let root = self.get_root();\n@@ -543,9 +533,8 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    fn item_name(&self, item: &Entry<'tcx>) -> ast::Name {\n-        item.def_key\n-            .decode(self)\n+    fn item_name(&self, item_index: DefIndex) -> ast::Name {\n+        self.def_key(item_index)\n             .disambiguated_data\n             .data\n             .get_opt_name()\n@@ -594,12 +583,12 @@ impl<'a, 'tcx> CrateMetadata {\n \n         (ty::VariantDef {\n             did: self.local_def_id(data.struct_ctor.unwrap_or(index)),\n-            name: self.item_name(item),\n+            name: self.item_name(index),\n             fields: item.children.decode(self).map(|index| {\n                 let f = self.entry(index);\n                 ty::FieldDef {\n                     did: self.local_def_id(index),\n-                    name: self.item_name(&f),\n+                    name: self.item_name(index),\n                     vis: f.visibility\n                 }\n             }).collect(),\n@@ -771,7 +760,7 @@ impl<'a, 'tcx> CrateMetadata {\n                             if let Some(def) = self.get_def(child_index) {\n                                 callback(def::Export {\n                                     def: def,\n-                                    name: self.item_name(&self.entry(child_index)),\n+                                    name: self.item_name(child_index),\n                                 });\n                             }\n                         }\n@@ -783,7 +772,7 @@ impl<'a, 'tcx> CrateMetadata {\n                     _ => {}\n                 }\n \n-                let def_key = child.def_key.decode(self);\n+                let def_key = self.def_key(child_index);\n                 if let (Some(def), Some(name)) =\n                     (self.get_def(child_index), def_key.disambiguated_data.data.get_opt_name()) {\n                     callback(def::Export {\n@@ -886,7 +875,7 @@ impl<'a, 'tcx> CrateMetadata {\n     pub fn get_associated_item(&self, id: DefIndex) -> Option<ty::AssociatedItem> {\n         let item = self.entry(id);\n         let parent_and_name = || {\n-            let def_key = item.def_key.decode(self);\n+            let def_key = self.def_key(id);\n             (self.local_def_id(def_key.parent.unwrap()),\n              def_key.disambiguated_data.data.get_opt_name().unwrap())\n         };\n@@ -963,7 +952,7 @@ impl<'a, 'tcx> CrateMetadata {\n         // we assume that someone passing in a tuple struct ctor is actually wanting to\n         // look at the definition\n         let mut item = self.entry(node_id);\n-        let def_key = item.def_key.decode(self);\n+        let def_key = self.def_key(node_id);\n         if def_key.disambiguated_data.data == DefPathData::StructCtor {\n             item = self.entry(def_key.parent.unwrap());\n         }\n@@ -974,7 +963,7 @@ impl<'a, 'tcx> CrateMetadata {\n         self.entry(id)\n             .children\n             .decode(self)\n-            .map(|index| self.item_name(&self.entry(index)))\n+            .map(|index| self.item_name(index))\n             .collect()\n     }\n \n@@ -1036,7 +1025,7 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     pub fn get_trait_of_item(&self, id: DefIndex) -> Option<DefId> {\n-        self.entry(id).def_key.decode(self).parent.and_then(|parent_index| {\n+        self.def_key(id).parent.and_then(|parent_index| {\n             match self.entry(parent_index).kind {\n                 EntryKind::Trait(_) => Some(self.local_def_id(parent_index)),\n                 _ => None,\n@@ -1082,7 +1071,7 @@ impl<'a, 'tcx> CrateMetadata {\n     pub fn get_macro(&self, id: DefIndex) -> (ast::Name, MacroDef) {\n         let entry = self.entry(id);\n         match entry.kind {\n-            EntryKind::MacroDef(macro_def) => (self.item_name(&entry), macro_def.decode(self)),\n+            EntryKind::MacroDef(macro_def) => (self.item_name(id), macro_def.decode(self)),\n             _ => bug!(),\n         }\n     }\n@@ -1135,20 +1124,8 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    pub fn def_key(&self, id: DefIndex) -> hir_map::DefKey {\n-        debug!(\"def_key: id={:?}\", id);\n-        if self.is_proc_macro(id) {\n-            let name = self.proc_macros.as_ref().unwrap()[id.as_usize() - 1].0;\n-            hir_map::DefKey {\n-                parent: Some(CRATE_DEF_INDEX),\n-                disambiguated_data: hir_map::DisambiguatedDefPathData {\n-                    data: hir_map::DefPathData::MacroDef(name.as_str()),\n-                    disambiguator: 0,\n-                },\n-            }\n-        } else {\n-            self.entry(id).def_key.decode(self)\n-        }\n+    pub fn def_key(&self, index: DefIndex) -> DefKey {\n+        self.def_path_table.def_key(index)\n     }\n \n     // Returns the path leading to the thing with this `id`. Note that"}, {"sha": "cf032013ac962976117a497cd3f9f0c41cd391ab", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ed5a88e3d03a57cb390662e44611bb0d33c28a4b/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5a88e3d03a57cb390662e44611bb0d33c28a4b/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=ed5a88e3d03a57cb390662e44611bb0d33c28a4b", "patch": "@@ -16,6 +16,7 @@ use rustc::middle::cstore::{InlinedItemRef, LinkMeta};\n use rustc::middle::cstore::{LinkagePreference, NativeLibrary};\n use rustc::hir::def;\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefIndex, DefId};\n+use rustc::hir::map::definitions::DefPathTable;\n use rustc::middle::dependency_format::Linkage;\n use rustc::middle::lang_items;\n use rustc::mir;\n@@ -233,13 +234,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         Ok(())\n     }\n \n-    /// For every DefId that we create a metadata item for, we include a\n-    /// serialized copy of its DefKey, which allows us to recreate a path.\n-    fn encode_def_key(&mut self, def_id: DefId) -> Lazy<hir::map::DefKey> {\n-        let tcx = self.tcx;\n-        self.lazy(&tcx.map.def_key(def_id))\n-    }\n-\n     fn encode_item_variances(&mut self, def_id: DefId) -> LazySeq<ty::Variance> {\n         let tcx = self.tcx;\n         self.lazy_seq(tcx.item_variances(def_id).iter().cloned())\n@@ -276,7 +270,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             kind: EntryKind::Variant(self.lazy(&data)),\n             visibility: enum_vis.simplify(),\n             span: self.lazy(&tcx.def_span(def_id)),\n-            def_key: self.encode_def_key(def_id),\n             attributes: self.encode_attributes(&tcx.get_attrs(def_id)),\n             children: self.lazy_seq(variant.fields.iter().map(|f| {\n                 assert!(f.did.is_local());\n@@ -315,7 +308,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             kind: EntryKind::Mod(self.lazy(&data)),\n             visibility: vis.simplify(),\n             span: self.lazy(&md.inner),\n-            def_key: self.encode_def_key(def_id),\n             attributes: self.encode_attributes(attrs),\n             children: self.lazy_seq(md.item_ids.iter().map(|item_id| {\n                 tcx.map.local_def_id(item_id.id).index\n@@ -396,7 +388,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             kind: EntryKind::Field,\n             visibility: field.vis.simplify(),\n             span: self.lazy(&tcx.def_span(def_id)),\n-            def_key: self.encode_def_key(def_id),\n             attributes: self.encode_attributes(&variant_data.fields()[field_index].attrs),\n             children: LazySeq::empty(),\n             stability: self.encode_stability(def_id),\n@@ -430,7 +421,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             kind: EntryKind::Struct(self.lazy(&data)),\n             visibility: struct_vis.simplify(),\n             span: self.lazy(&tcx.def_span(def_id)),\n-            def_key: self.encode_def_key(def_id),\n             attributes: LazySeq::empty(),\n             children: LazySeq::empty(),\n             stability: self.encode_stability(def_id),\n@@ -497,7 +487,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             kind: kind,\n             visibility: trait_item.vis.simplify(),\n             span: self.lazy(&ast_item.span),\n-            def_key: self.encode_def_key(def_id),\n             attributes: self.encode_attributes(&ast_item.attrs),\n             children: LazySeq::empty(),\n             stability: self.encode_stability(def_id),\n@@ -587,7 +576,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             kind: kind,\n             visibility: impl_item.vis.simplify(),\n             span: self.lazy(&ast_item.span),\n-            def_key: self.encode_def_key(def_id),\n             attributes: self.encode_attributes(&ast_item.attrs),\n             children: LazySeq::empty(),\n             stability: self.encode_stability(def_id),\n@@ -750,7 +738,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             kind: kind,\n             visibility: item.vis.simplify(),\n             span: self.lazy(&item.span),\n-            def_key: self.encode_def_key(def_id),\n             attributes: self.encode_attributes(&item.attrs),\n             children: match item.node {\n                 hir::ItemForeignMod(ref fm) => {\n@@ -858,14 +845,12 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n     /// Serialize the text of exported macros\n     fn encode_info_for_macro_def(&mut self, macro_def: &hir::MacroDef) -> Entry<'tcx> {\n-        let def_id = self.tcx.map.local_def_id(macro_def.id);\n         Entry {\n             kind: EntryKind::MacroDef(self.lazy(&MacroDef {\n                 body: ::syntax::print::pprust::tts_to_string(&macro_def.body)\n             })),\n             visibility: ty::Visibility::Public,\n             span: self.lazy(&macro_def.span),\n-            def_key: self.encode_def_key(def_id),\n \n             attributes: self.encode_attributes(&macro_def.attrs),\n             children: LazySeq::empty(),\n@@ -967,7 +952,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             kind: kind,\n             visibility: nitem.vis.simplify(),\n             span: self.lazy(&nitem.span),\n-            def_key: self.encode_def_key(def_id),\n             attributes: self.encode_attributes(&nitem.attrs),\n             children: LazySeq::empty(),\n             stability: self.encode_stability(def_id),\n@@ -1050,7 +1034,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             kind: EntryKind::Type,\n             visibility: ty::Visibility::Public,\n             span: self.lazy(&tcx.def_span(def_id)),\n-            def_key: self.encode_def_key(def_id),\n             attributes: LazySeq::empty(),\n             children: LazySeq::empty(),\n             stability: None,\n@@ -1079,7 +1062,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             kind: EntryKind::Closure(self.lazy(&data)),\n             visibility: ty::Visibility::Public,\n             span: self.lazy(&tcx.def_span(def_id)),\n-            def_key: self.encode_def_key(def_id),\n             attributes: self.encode_attributes(&tcx.get_attrs(def_id)),\n             children: LazySeq::empty(),\n             stability: None,\n@@ -1179,6 +1161,11 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             })\n             .map(|filemap| &**filemap))\n     }\n+\n+    fn encode_def_path_table(&mut self) -> Lazy<DefPathTable> {\n+        let definitions = self.tcx.map.definitions();\n+        self.lazy(definitions.def_path_table())\n+    }\n }\n \n struct ImplVisitor<'a, 'tcx: 'a> {\n@@ -1276,6 +1263,11 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let codemap = self.encode_codemap();\n         let codemap_bytes = self.position() - i;\n \n+        // Encode DefPathTable\n+        i = self.position();\n+        let def_path_table = self.encode_def_path_table();\n+        let def_path_table_bytes = self.position() - i;\n+\n         // Encode the def IDs of impls, for coherence checking.\n         i = self.position();\n         let impls = self.encode_impls();\n@@ -1321,6 +1313,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             lang_items_missing: lang_items_missing,\n             native_libraries: native_libraries,\n             codemap: codemap,\n+            def_path_table: def_path_table,\n             impls: impls,\n             exported_symbols: exported_symbols,\n             index: index,\n@@ -1343,6 +1336,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             println!(\"         codemap bytes: {}\", codemap_bytes);\n             println!(\"            impl bytes: {}\", impl_bytes);\n             println!(\"    exp. symbols bytes: {}\", exported_symbols_bytes);\n+            println!(\"  def-path table bytes: {}\", def_path_table_bytes);\n             println!(\"            item bytes: {}\", item_bytes);\n             println!(\"           index bytes: {}\", index_bytes);\n             println!(\"            zero bytes: {}\", zero_bytes);"}, {"sha": "0b6606a00d3c041174759b55f50f5f27c036be39", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed5a88e3d03a57cb390662e44611bb0d33c28a4b/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5a88e3d03a57cb390662e44611bb0d33c28a4b/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=ed5a88e3d03a57cb390662e44611bb0d33c28a4b", "patch": "@@ -179,6 +179,7 @@ pub struct CrateRoot {\n     pub lang_items_missing: LazySeq<lang_items::LangItem>,\n     pub native_libraries: LazySeq<NativeLibrary>,\n     pub codemap: LazySeq<syntax_pos::FileMap>,\n+    pub def_path_table: Lazy<hir::map::definitions::DefPathTable>,\n     pub impls: LazySeq<TraitImpls>,\n     pub exported_symbols: LazySeq<DefIndex>,\n     pub index: LazySeq<index::Index>,\n@@ -202,7 +203,6 @@ pub struct Entry<'tcx> {\n     pub kind: EntryKind<'tcx>,\n     pub visibility: ty::Visibility,\n     pub span: Lazy<Span>,\n-    pub def_key: Lazy<hir::map::DefKey>,\n     pub attributes: LazySeq<ast::Attribute>,\n     pub children: LazySeq<DefIndex>,\n     pub stability: Option<Lazy<attr::Stability>>,"}]}