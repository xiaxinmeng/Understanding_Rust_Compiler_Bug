{"sha": "23f3b0dfd04812b03da0df4d5dfad0fef39c6862", "node_id": "C_kwDOAAsO6NoAKDIzZjNiMGRmZDA0ODEyYjAzZGEwZGY0ZDVkZmFkMGZlZjM5YzY4NjI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-29T02:32:12Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-29T02:42:41Z"}, "message": "Don't point at another arg if we're already pointing at one", "tree": {"sha": "f815708e85ec55a89f304ee673b4d18874f46670", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f815708e85ec55a89f304ee673b4d18874f46670"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23f3b0dfd04812b03da0df4d5dfad0fef39c6862", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23f3b0dfd04812b03da0df4d5dfad0fef39c6862", "html_url": "https://github.com/rust-lang/rust/commit/23f3b0dfd04812b03da0df4d5dfad0fef39c6862", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23f3b0dfd04812b03da0df4d5dfad0fef39c6862/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75337775f776250a3a29c951344186e698c11c75", "url": "https://api.github.com/repos/rust-lang/rust/commits/75337775f776250a3a29c951344186e698c11c75", "html_url": "https://github.com/rust-lang/rust/commit/75337775f776250a3a29c951344186e698c11c75"}], "stats": {"total": 95, "additions": 77, "deletions": 18}, "files": [{"sha": "dc49ff90f34b0035dd77a4a5ead4c66c8641aa99", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/23f3b0dfd04812b03da0df4d5dfad0fef39c6862/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23f3b0dfd04812b03da0df4d5dfad0fef39c6862/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=23f3b0dfd04812b03da0df4d5dfad0fef39c6862", "patch": "@@ -1629,7 +1629,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return;\n         }\n \n-        for error in errors {\n+        'outer: for error in errors {\n             // Only if the cause is somewhere inside the expression we want try to point at arg.\n             // Otherwise, it means that the cause is somewhere else and we should not change\n             // anything because we can break the correct span.\n@@ -1671,10 +1671,32 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     _ => continue,\n                 };\n             let self_ = self.resolve_vars_if_possible(self_);\n+            let ty_matches_self = |ty: Ty<'tcx>| ty.walk().any(|arg| arg == self_);\n+\n+            let typeck_results = self.typeck_results.borrow();\n+\n+            for (idx, arg) in args.iter().enumerate() {\n+                // Don't adjust the span if we already have a more precise span\n+                // within one of the args.\n+                if arg.span.contains(error.obligation.cause.span) {\n+                    let references_arg =\n+                        typeck_results.expr_ty_opt(arg).map_or(false, &ty_matches_self)\n+                            || expected_tys.get(idx).copied().map_or(false, &ty_matches_self);\n+                    if references_arg && !arg.span.from_expansion() {\n+                        error.obligation.cause.map_code(|parent_code| {\n+                            ObligationCauseCode::FunctionArgumentObligation {\n+                                arg_hir_id: args[idx].hir_id,\n+                                call_hir_id: expr.hir_id,\n+                                parent_code,\n+                            }\n+                        })\n+                    }\n+                    continue 'outer;\n+                }\n+            }\n \n             // Collect the argument position for all arguments that could have caused this\n             // `FulfillmentError`.\n-            let typeck_results = self.typeck_results.borrow();\n             let mut referenced_in: Vec<_> = std::iter::zip(expected_tys, args)\n                 .enumerate()\n                 .flat_map(|(idx, (expected_ty, arg))| {\n@@ -1688,7 +1710,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let ty = self.resolve_vars_if_possible(ty);\n                     // We walk the argument type because the argument's type could have\n                     // been `Option<T>`, but the `FulfillmentError` references `T`.\n-                    if ty.walk().any(|arg| arg == self_) { Some(i) } else { None }\n+                    if ty_matches_self(ty) { Some(i) } else { None }\n                 })\n                 .collect();\n \n@@ -1699,18 +1721,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             referenced_in.sort_unstable();\n             referenced_in.dedup();\n \n-            if let (Some(ref_in), None) = (referenced_in.pop(), referenced_in.pop()) {\n+            if let &[idx] = &referenced_in[..] {\n                 // Do not point at the inside of a macro.\n                 // That would often result in poor error messages.\n-                if args[ref_in].span.from_expansion() {\n-                    return;\n+                if args[idx].span.from_expansion() {\n+                    continue;\n                 }\n                 // We make sure that only *one* argument matches the obligation failure\n                 // and we assign the obligation's span to its expression's.\n-                error.obligation.cause.span = args[ref_in].span;\n+                error.obligation.cause.span = args[idx].span;\n                 error.obligation.cause.map_code(|parent_code| {\n                     ObligationCauseCode::FunctionArgumentObligation {\n-                        arg_hir_id: args[ref_in].hir_id,\n+                        arg_hir_id: args[idx].hir_id,\n                         call_hir_id: expr.hir_id,\n                         parent_code,\n                     }"}, {"sha": "a6bd98ddb1977881ceb3a7d5d6ca5476e6a0258a", "filename": "src/test/ui/proc-macro/signature.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/23f3b0dfd04812b03da0df4d5dfad0fef39c6862/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23f3b0dfd04812b03da0df4d5dfad0fef39c6862/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr?ref=23f3b0dfd04812b03da0df4d5dfad0fef39c6862", "patch": "@@ -5,10 +5,7 @@ LL | / pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n LL | |\n LL | |     loop {}\n LL | | }\n-   | | ^\n-   | | |\n-   | |_call the function in a closure: `|| unsafe { /* code */ }`\n-   |   required by a bound introduced by this call\n+   | |_^ call the function in a closure: `|| unsafe { /* code */ }`\n    |\n    = help: the trait `Fn<(proc_macro::TokenStream,)>` is not implemented for `unsafe extern \"C\" fn(i32, u32) -> u32 {foo}`\n    = note: unsafe function cannot be called generically without an unsafe block"}, {"sha": "edf0b8959653607a21fc61ecd5269732e9062455", "filename": "src/test/ui/unsized/unsized-fn-param.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/23f3b0dfd04812b03da0df4d5dfad0fef39c6862/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23f3b0dfd04812b03da0df4d5dfad0fef39c6862/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr?ref=23f3b0dfd04812b03da0df4d5dfad0fef39c6862", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n   --> $DIR/unsized-fn-param.rs:11:11\n    |\n LL |     foo11(\"bar\", &\"baz\");\n-   |           ^^^^^ doesn't have a size known at compile-time\n+   |     ----- ^^^^^ doesn't have a size known at compile-time\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = note: required for the cast to the object type `dyn AsRef<Path>`\n@@ -15,7 +17,9 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n   --> $DIR/unsized-fn-param.rs:13:19\n    |\n LL |     foo12(&\"bar\", \"baz\");\n-   |                   ^^^^^ doesn't have a size known at compile-time\n+   |     -----         ^^^^^ doesn't have a size known at compile-time\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = note: required for the cast to the object type `dyn AsRef<Path>`\n@@ -28,7 +32,9 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n   --> $DIR/unsized-fn-param.rs:16:11\n    |\n LL |     foo21(\"bar\", &\"baz\");\n-   |           ^^^^^ doesn't have a size known at compile-time\n+   |     ----- ^^^^^ doesn't have a size known at compile-time\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = note: required for the cast to the object type `dyn AsRef<str>`\n@@ -41,7 +47,9 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n   --> $DIR/unsized-fn-param.rs:18:19\n    |\n LL |     foo22(&\"bar\", \"baz\");\n-   |                   ^^^^^ doesn't have a size known at compile-time\n+   |     -----         ^^^^^ doesn't have a size known at compile-time\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = note: required for the cast to the object type `dyn AsRef<str>`"}, {"sha": "af76aca2c295803a25e0ab072dfd67f837a3ed62", "filename": "src/test/ui/unsized/unsized3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23f3b0dfd04812b03da0df4d5dfad0fef39c6862/src%2Ftest%2Fui%2Funsized%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23f3b0dfd04812b03da0df4d5dfad0fef39c6862/src%2Ftest%2Fui%2Funsized%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized3.rs?ref=23f3b0dfd04812b03da0df4d5dfad0fef39c6862", "patch": "@@ -44,6 +44,7 @@ fn f9<X: ?Sized>(x1: Box<S<X>>) {\n fn f10<X: ?Sized>(x1: Box<S<X>>) {\n     f5(&(32, *x1));\n     //~^ ERROR the size for values of type\n+    //~| ERROR the size for values of type\n }\n \n pub fn main() {}"}, {"sha": "d64091b15eb1fc2c747980353ca77551e9d41dea", "filename": "src/test/ui/unsized/unsized3.stderr", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/23f3b0dfd04812b03da0df4d5dfad0fef39c6862/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23f3b0dfd04812b03da0df4d5dfad0fef39c6862/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr?ref=23f3b0dfd04812b03da0df4d5dfad0fef39c6862", "patch": "@@ -100,6 +100,29 @@ LL - fn f9<X: ?Sized>(x1: Box<S<X>>) {\n LL + fn f9<X>(x1: Box<S<X>>) {\n    |\n \n+error[E0277]: the size for values of type `X` cannot be known at compilation time\n+  --> $DIR/unsized3.rs:45:9\n+   |\n+LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n+   |        - this type parameter needs to be `std::marker::Sized`\n+LL |     f5(&(32, *x1));\n+   |     --  ^^^^^^^^^ doesn't have a size known at compile-time\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required because it appears within the type `S<X>`\n+  --> $DIR/unsized3.rs:28:8\n+   |\n+LL | struct S<X: ?Sized> {\n+   |        ^\n+   = note: required because it appears within the type `({integer}, S<X>)`\n+   = note: tuples must have a statically known size to be initialized\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL - fn f10<X: ?Sized>(x1: Box<S<X>>) {\n+LL + fn f10<X>(x1: Box<S<X>>) {\n+   |\n+\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:45:8\n    |\n@@ -116,13 +139,21 @@ note: required because it appears within the type `S<X>`\n LL | struct S<X: ?Sized> {\n    |        ^\n    = note: required because it appears within the type `({integer}, S<X>)`\n-   = note: tuples must have a statically known size to be initialized\n+note: required by a bound in `f5`\n+  --> $DIR/unsized3.rs:24:7\n+   |\n+LL | fn f5<Y>(x: &Y) {}\n+   |       ^ required by this bound in `f5`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn f10<X: ?Sized>(x1: Box<S<X>>) {\n LL + fn f10<X>(x1: Box<S<X>>) {\n    |\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | fn f5<Y: ?Sized>(x: &Y) {}\n+   |        ++++++++\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}