{"sha": "e8ee00a6493b8cde09f5497f430d46a978ae865f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZWUwMGE2NDkzYjhjZGUwOWY1NDk3ZjQzMGQ0NmE5NzhhZTg2NWY=", "commit": {"author": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2019-02-13T11:19:58Z"}, "committer": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2019-03-10T17:06:49Z"}, "message": "Add provided methods `Seek::{stream_len, stream_position}`\n\nThese two methods are defined in terms of `Seek::seek` and are\nadded for convenience. Tests are included.", "tree": {"sha": "007e8431f6ade1eaf27f5915e7ae14924d98a11e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/007e8431f6ade1eaf27f5915e7ae14924d98a11e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8ee00a6493b8cde09f5497f430d46a978ae865f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENwctvZ5TgcKYXim8PLr0FT+BhicFAlyFRCsACgkQPLr0FT+B\nhicxmxAAos5H8/biJRN7mhcs4bHVJwSQoy/KEDvECmZxnKQXt6IgNg4YmrP3BWdM\nAEbNPgBSku7ewc7MXp8Vk/4hJyPQ0EZwILosn1L9cVRedmSfCWyIOt8pVmoc/Oq3\nt4WNo0diU6333MER0iY9L+ZvwAD6e1lnEae0sD0G/Gy3lJ7d6qdihWTQ5s9z4Wkd\naXBsSa2OPRA1y0dz92Pxhv3jP+MRw24WFOw3uWaNQzRmapn0eyN1WI5EWrE4d+eC\n0+aqKpfxSXoXBbj+oJLV8YrmZX3MLRU0PMhHlt84RZna0KndWjsFcG8IZ0JrqZGx\ntzMvWYb4CsiwByLT2APnbeAqUZlNXPmI1WJY5KS1uE8ybbO01LP8ji6BWAvU/5DP\n96TNHaErvMEp+xXPToX2rBdI9JIpIzeKewre3l9DEf7v8CJpbcFLVoRb6DEb106h\nkID4CFHUfxWBNUFDC75a20mcItwN2iPozwo5ipbYM9Wq1V/4p1YTW3E04AL7dCZo\nVewsvU1hcyt4tFywoPKbSXEMzOYPyrGvMXNJc2X0SkZn8gnTWC/n88gnavu2ierM\n2o8N1qQU4NDu9r9qGvCi6CxDjFfQK5TynUQEDytCvRaqYRMz9aGDj/mhVpWTsyIc\n/amK6Ib+jRFLJgU4ydXsSa9xIO9zmDSmygTky8oEjVnmHa12WDY=\n=+Dc/\n-----END PGP SIGNATURE-----", "payload": "tree 007e8431f6ade1eaf27f5915e7ae14924d98a11e\nparent 913ad6d1f092c70049934ba538d342d295d35997\nauthor Lukas Kalbertodt <lukas.kalbertodt@gmail.com> 1550056798 +0100\ncommitter Lukas Kalbertodt <lukas.kalbertodt@gmail.com> 1552237609 +0100\n\nAdd provided methods `Seek::{stream_len, stream_position}`\n\nThese two methods are defined in terms of `Seek::seek` and are\nadded for convenience. Tests are included.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8ee00a6493b8cde09f5497f430d46a978ae865f", "html_url": "https://github.com/rust-lang/rust/commit/e8ee00a6493b8cde09f5497f430d46a978ae865f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8ee00a6493b8cde09f5497f430d46a978ae865f/comments", "author": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "913ad6d1f092c70049934ba538d342d295d35997", "url": "https://api.github.com/repos/rust-lang/rust/commits/913ad6d1f092c70049934ba538d342d295d35997", "html_url": "https://github.com/rust-lang/rust/commit/913ad6d1f092c70049934ba538d342d295d35997"}], "stats": {"total": 121, "additions": 119, "deletions": 2}, "files": [{"sha": "99bb24f54dd41f0c44cb165fa9cb1754f31d3075", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 119, "deletions": 2, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/e8ee00a6493b8cde09f5497f430d46a978ae865f/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8ee00a6493b8cde09f5497f430d46a978ae865f/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=e8ee00a6493b8cde09f5497f430d46a978ae865f", "patch": "@@ -1329,6 +1329,78 @@ pub trait Seek {\n     /// [`SeekFrom::Start`]: enum.SeekFrom.html#variant.Start\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn seek(&mut self, pos: SeekFrom) -> Result<u64>;\n+\n+    /// Returns the length of this stream (in bytes).\n+    ///\n+    /// This method is implemented using three seek operations. If this method\n+    /// returns successfully, the seek position is unchanged (i.e. the position\n+    /// before calling this method is the same as afterwards). However, if this\n+    /// method returns an error, the seek position is undefined.\n+    ///\n+    /// If you need to obtain the length of *many* streams and you don't care\n+    /// about the seek position afterwards, you can reduce the number of seek\n+    /// operations by simply calling `seek(SeekFrom::End(0))` and use its\n+    /// return value (it is also the stream length).\n+    ///\n+    /// Note that length of a stream can change over time (for example, when\n+    /// data is appended to a file). So calling this method multiply times does\n+    /// not necessarily return the same length each time.\n+    ///\n+    ///\n+    /// # Example\n+    ///\n+    /// ```no_run\n+    /// #![feature(seek_convenience)]\n+    /// use std::{\n+    ///     io::{self, Seek},\n+    ///     fs::File,\n+    /// };\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let mut f = File::open(\"foo.txt\")?;\n+    ///\n+    ///     let len = f.stream_len()?;\n+    ///     println!(\"The file is currently {} bytes long\", len);\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"seek_convenience\", issue = \"0\")]\n+    fn stream_len(&mut self) -> Result<u64> {\n+        let old_pos = self.stream_position()?;\n+        let len = self.seek(SeekFrom::End(0))?;\n+        self.seek(SeekFrom::Start(old_pos))?;\n+        Ok(len)\n+    }\n+\n+    /// Returns the current seek position from the start of the stream.\n+    ///\n+    /// This is equivalent to `self.seek(SeekFrom::Current(0))`.\n+    ///\n+    ///\n+    /// # Example\n+    ///\n+    /// ```no_run\n+    /// #![feature(seek_convenience)]\n+    /// use std::{\n+    ///     io::{self, BufRead, BufReader, Seek},\n+    ///     fs::File,\n+    /// };\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let mut f = BufReader::new(File::open(\"foo.txt\")?);\n+    ///\n+    ///     let before = f.stream_position()?;\n+    ///     f.read_line(&mut String::new())?;\n+    ///     let after = f.stream_position()?;\n+    ///\n+    ///     println!(\"The first line was {} bytes long\", after - before);\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"seek_convenience\", issue = \"0\")]\n+    fn stream_position(&mut self) -> Result<u64> {\n+        self.seek(SeekFrom::Current(0))\n+    }\n }\n \n /// Enumeration of possible methods to seek within an I/O object.\n@@ -2157,8 +2229,7 @@ impl<B: BufRead> Iterator for Lines<B> {\n mod tests {\n     use crate::io::prelude::*;\n     use crate::io;\n-    use super::Cursor;\n-    use super::repeat;\n+    use super::{Cursor, SeekFrom, repeat};\n \n     #[test]\n     #[cfg_attr(target_os = \"emscripten\", ignore)]\n@@ -2380,4 +2451,50 @@ mod tests {\n             super::read_to_end(&mut lr, &mut vec)\n         });\n     }\n+\n+    #[test]\n+    fn seek_len() -> io::Result<()> {\n+        let mut c = Cursor::new(vec![0; 15]);\n+        assert_eq!(c.stream_len()?, 15);\n+\n+        c.seek(SeekFrom::End(0))?;\n+        let old_pos = c.stream_position()?;\n+        assert_eq!(c.stream_len()?, 15);\n+        assert_eq!(c.stream_position()?, old_pos);\n+\n+        c.seek(SeekFrom::Start(7))?;\n+        c.seek(SeekFrom::Current(2))?;\n+        let old_pos = c.stream_position()?;\n+        assert_eq!(c.stream_len()?, 15);\n+        assert_eq!(c.stream_position()?, old_pos);\n+\n+        Ok(())\n+    }\n+\n+    #[test]\n+    fn seek_position() -> io::Result<()> {\n+        // All `asserts` are duplicated here to make sure the method does not\n+        // change anything about the seek state.\n+        let mut c = Cursor::new(vec![0; 15]);\n+        assert_eq!(c.stream_position()?, 0);\n+        assert_eq!(c.stream_position()?, 0);\n+\n+        c.seek(SeekFrom::End(0))?;\n+        assert_eq!(c.stream_position()?, 15);\n+        assert_eq!(c.stream_position()?, 15);\n+\n+\n+        c.seek(SeekFrom::Start(7))?;\n+        c.seek(SeekFrom::Current(2))?;\n+        assert_eq!(c.stream_position()?, 9);\n+        assert_eq!(c.stream_position()?, 9);\n+\n+        c.seek(SeekFrom::End(-3))?;\n+        c.seek(SeekFrom::Current(1))?;\n+        c.seek(SeekFrom::Current(-5))?;\n+        assert_eq!(c.stream_position()?, 8);\n+        assert_eq!(c.stream_position()?, 8);\n+\n+        Ok(())\n+    }\n }"}]}