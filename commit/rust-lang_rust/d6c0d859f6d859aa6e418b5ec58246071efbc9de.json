{"sha": "d6c0d859f6d859aa6e418b5ec58246071efbc9de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YzBkODU5ZjZkODU5YWE2ZTQxOGI1ZWM1ODI0NjA3MWVmYmM5ZGU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-11-26T19:05:10Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-02-06T20:56:14Z"}, "message": "Add the asmjs-unknown-emscripten triple. Add cfgs to libs.\n\nBacktraces, and the compilation of libbacktrace for asmjs, are disabled.\n\nThis port doesn't use jemalloc so, like pnacl, it disables jemalloc *for all targets*\nin the configure file.\n\nIt disables stack protection.", "tree": {"sha": "0faba720f79f5047f27173e7173501b104503903", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0faba720f79f5047f27173e7173501b104503903"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6c0d859f6d859aa6e418b5ec58246071efbc9de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6c0d859f6d859aa6e418b5ec58246071efbc9de", "html_url": "https://github.com/rust-lang/rust/commit/d6c0d859f6d859aa6e418b5ec58246071efbc9de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6c0d859f6d859aa6e418b5ec58246071efbc9de/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34af2de4096b3b1c5d3a5b70171c6e27822aaefb", "url": "https://api.github.com/repos/rust-lang/rust/commits/34af2de4096b3b1c5d3a5b70171c6e27822aaefb", "html_url": "https://github.com/rust-lang/rust/commit/34af2de4096b3b1c5d3a5b70171c6e27822aaefb"}], "stats": {"total": 200, "additions": 181, "deletions": 19}, "files": [{"sha": "dde17e76d8a865123fc128a0dd94d9a483553464", "filename": "configure", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6c0d859f6d859aa6e418b5ec58246071efbc9de/configure", "raw_url": "https://github.com/rust-lang/rust/raw/d6c0d859f6d859aa6e418b5ec58246071efbc9de/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=d6c0d859f6d859aa6e418b5ec58246071efbc9de", "patch": "@@ -1305,6 +1305,12 @@ $ pacman -R cmake && pacman -S mingw-w64-x86_64-cmake\n             putvar CFG_DISABLE_JEMALLOC\n             ;;\n \n+        *-emscripten)\n+            step_msg \"targeting emscripten, disabling jemalloc\"\n+            CFG_DISABLE_JEMALLOC=1\n+            putvar CFG_DISABLE_JEMALLOC\n+            ;;\n+\n         *)\n             ;;\n     esac"}, {"sha": "66ab0c9bf9383a8d3319caa091db94c812ebe0c7", "filename": "mk/cfg/asmjs-unknown-emscripten.mk", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d6c0d859f6d859aa6e418b5ec58246071efbc9de/mk%2Fcfg%2Fasmjs-unknown-emscripten.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d6c0d859f6d859aa6e418b5ec58246071efbc9de/mk%2Fcfg%2Fasmjs-unknown-emscripten.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fasmjs-unknown-emscripten.mk?ref=d6c0d859f6d859aa6e418b5ec58246071efbc9de", "patch": "@@ -0,0 +1,23 @@\n+# asmjs-unknown-emscripten configuration\n+CC_asmjs-unknown-emscripten=emcc\n+CXX_asmjs-unknown-emscripten=em++\n+CPP_asmjs-unknown-emscripten=$(CPP)\n+AR_asmjs-unknown-emscripten=emar\n+CFG_LIB_NAME_asmjs-unknown-emscripten=lib$(1).so\n+CFG_STATIC_LIB_NAME_asmjs-unknown-emscripten=lib$(1).a\n+CFG_LIB_GLOB_asmjs-unknown-emscripten=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_asmjs-unknown-emscripten=lib$(1)-*.dylib.dSYM\n+CFG_JEMALLOC_CFLAGS_asmjs-unknown-emscripten := -m32 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_asmjs-unknown-emscripten := -Wall -Werror -g -fPIC -m32 $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_asmjs-unknown-emscripten := -fno-rtti $(CXXFLAGS)\n+CFG_GCCISH_LINK_FLAGS_asmjs-unknown-emscripten := -shared -fPIC -ldl -pthread  -lrt -g -m32\n+CFG_GCCISH_DEF_FLAG_asmjs-unknown-emscripten := -Wl,--export-dynamic,--dynamic-list=\n+CFG_LLC_FLAGS_asmjs-unknown-emscripten :=\n+CFG_INSTALL_NAME_asmjs-unknown-emscripten =\n+CFG_EXE_SUFFIX_asmjs-unknown-emscripten =\n+CFG_WINDOWSY_asmjs-unknown-emscripten :=\n+CFG_UNIXY_asmjs-unknown-emscripten := 1\n+CFG_LDPATH_asmjs-unknown-emscripten :=\n+CFG_RUN_asmjs-unknown-emscripten=$(2)\n+CFG_RUN_TARG_asmjs-unknown-emscripten=$(call CFG_RUN_asmjs-unknown-emscripten,,$(2))\n+CFG_GNU_TRIPLE_asmjs-unknown-emscripten := asmjs-unknown-emscripten"}, {"sha": "cfb210952bcfb419abe7d3c2c7b815969d2017e9", "filename": "mk/rt.mk", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d6c0d859f6d859aa6e418b5ec58246071efbc9de/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d6c0d859f6d859aa6e418b5ec58246071efbc9de/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=d6c0d859f6d859aa6e418b5ec58246071efbc9de", "patch": "@@ -254,6 +254,15 @@ ifeq ($$(findstring freebsd,$(1)),freebsd)\n \tCOMPRT_CFLAGS_$(1) += -I/usr/include/c++/v1\n endif\n \n+ifeq ($$(findstring emscripten,$(1)),emscripten)\n+\n+# FIXME: emscripten doesn't use compiler-rt and can't build it without\n+# further hacks\n+$$(COMPRT_LIB_$(1)):\n+\ttouch $$@\n+\n+else\n+\n $$(COMPRT_LIB_$(1)): $$(COMPRT_DEPS) $$(MKFILE_DEPS)\n \t@$$(call E, make: compiler-rt)\n \t$$(Q)$$(MAKE) -C \"$(S)src/compiler-rt\" \\\n@@ -266,7 +275,10 @@ $$(COMPRT_LIB_$(1)): $$(COMPRT_DEPS) $$(MKFILE_DEPS)\n \t\tTargetTriple=$(1) \\\n \t\ttriple-builtins\n \t$$(Q)cp $$(COMPRT_BUILD_DIR_$(1))/triple/builtins/libcompiler_rt.a $$@\n+\n+endif # if emscripten\n endif\n+\n ################################################################################\n # libbacktrace\n #\n@@ -301,6 +313,12 @@ $$(BACKTRACE_LIB_$(1)):\n \ttouch $$@\n else\n \n+ifeq ($$(findstring emscripten,$(1)),emscripten)\n+# FIXME: libbacktrace doesn't understand the emscripten triple\n+$$(BACKTRACE_LIB_$(1)):\n+\ttouch $$@\n+else\n+\n ifdef CFG_ENABLE_FAST_MAKE\n BACKTRACE_DEPS := $(S)/.gitmodules\n else\n@@ -348,6 +366,7 @@ $$(BACKTRACE_LIB_$(1)): $$(BACKTRACE_BUILD_DIR_$(1))/Makefile $$(MKFILE_DEPS)\n \t\tINCDIR=$(S)src/libbacktrace\n \t$$(Q)cp $$(BACKTRACE_BUILD_DIR_$(1))/.libs/libbacktrace.a $$@\n \n+endif # endif for emscripten\n endif # endif for msvc\n endif # endif for ios\n endif # endif for darwin"}, {"sha": "6a62e00d311692dbafa6f5dd1dd1acd85e2fe7dc", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=d6c0d859f6d859aa6e418b5ec58246071efbc9de", "patch": "@@ -30,7 +30,8 @@ extern crate libc;\n               target_arch = \"arm\",\n               target_arch = \"mips\",\n               target_arch = \"powerpc\",\n-              target_arch = \"powerpc64\")))]\n+              target_arch = \"powerpc64\",\n+              target_arch = \"asmjs\")))]\n const MIN_ALIGN: usize = 8;\n #[cfg(all(any(target_arch = \"x86_64\",\n               target_arch = \"aarch64\")))]"}, {"sha": "4197ae7c661a84b392cf3d46c98595e48d2d55c3", "filename": "src/librustc_back/target/asmjs_unknown_emscripten.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs?ref=d6c0d859f6d859aa6e418b5ec58246071efbc9de", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use super::{Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    let opts = TargetOptions {\n+        linker: \"emcc\".to_string(),\n+        ar: \"emar\".to_string(),\n+\n+        dynamic_linking: false,\n+        executables: true,\n+        exe_suffix: \".js\".to_string(),\n+        no_compiler_rt: true,\n+        linker_is_gnu: true,\n+        allow_asm: false,\n+        archive_format: \"gnu\".to_string(),\n+        .. Default::default()\n+    };\n+    Target {\n+        llvm_target: \"asmjs-unknown-emscripten\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_os: \"emscripten\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        arch: \"asmjs\".to_string(),\n+        options: opts,\n+    }\n+}"}, {"sha": "443be6729ba5e080f1dffbd1c6ff29da8a3bf5bb", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=d6c0d859f6d859aa6e418b5ec58246071efbc9de", "patch": "@@ -461,7 +461,8 @@ impl Target {\n             x86_64_pc_windows_msvc,\n             i686_pc_windows_msvc,\n \n-            le32_unknown_nacl\n+            le32_unknown_nacl,\n+            asmjs_unknown_emscripten\n         );\n \n "}, {"sha": "8c10be44ffde335b5605bd590d2865e74b1c2509", "filename": "src/librustc_trans/trans/cabi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs?ref=d6c0d859f6d859aa6e418b5ec58246071efbc9de", "patch": "@@ -21,6 +21,7 @@ use trans::cabi_aarch64;\n use trans::cabi_powerpc;\n use trans::cabi_powerpc64;\n use trans::cabi_mips;\n+use trans::cabi_asmjs;\n use trans::type_::Type;\n \n #[derive(Clone, Copy, PartialEq)]\n@@ -129,6 +130,7 @@ pub fn compute_abi_info(ccx: &CrateContext,\n         \"mips\" => cabi_mips::compute_abi_info(ccx, atys, rty, ret_def),\n         \"powerpc\" => cabi_powerpc::compute_abi_info(ccx, atys, rty, ret_def),\n         \"powerpc64\" => cabi_powerpc64::compute_abi_info(ccx, atys, rty, ret_def),\n+        \"asmjs\" => cabi_asmjs::compute_abi_info(ccx, atys, rty, ret_def),\n         a => ccx.sess().fatal(&format!(\"unrecognized arch \\\"{}\\\" in target specification\", a)\n                               ),\n     }"}, {"sha": "823f333f3317b77469f242958dd0088ceb62796c", "filename": "src/librustc_trans/trans/cabi_asmjs.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibrustc_trans%2Ftrans%2Fcabi_asmjs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibrustc_trans%2Ftrans%2Fcabi_asmjs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_asmjs.rs?ref=d6c0d859f6d859aa6e418b5ec58246071efbc9de", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use trans::cabi::FnType;\n+use trans::cabi_arm;\n+use trans::context::CrateContext;\n+use trans::type_::Type;\n+\n+pub fn compute_abi_info(ccx: &CrateContext,\n+                        atys: &[Type],\n+                        rty: Type,\n+                        ret_def: bool) -> FnType {\n+    cabi_arm::compute_abi_info(ccx, atys, rty, ret_def,\n+                               cabi_arm::Flavor::General)\n+}"}, {"sha": "1b8bab7a4ee7035b522672adb2e591999491c862", "filename": "src/librustc_trans/trans/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmod.rs?ref=d6c0d859f6d859aa6e418b5ec58246071efbc9de", "patch": "@@ -30,6 +30,7 @@ mod builder;\n mod cabi;\n mod cabi_aarch64;\n mod cabi_arm;\n+mod cabi_asmjs;\n mod cabi_mips;\n mod cabi_powerpc;\n mod cabi_powerpc64;"}, {"sha": "08e33fad40e0dafdee27437e387c5b7adcbe3d45", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=d6c0d859f6d859aa6e418b5ec58246071efbc9de", "patch": "@@ -197,7 +197,8 @@ mod tests {\n           target_os = \"bitrig\",\n           target_os = \"netbsd\",\n           target_os = \"openbsd\",\n-          target_os = \"solaris\"))]\n+          target_os = \"solaris\",\n+          target_os = \"emscripten\"))]\n mod dl {\n     use prelude::v1::*;\n "}, {"sha": "fa48efb27881b3f5b5a4f8d1303176870c3cad9e", "filename": "src/libstd/env.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=d6c0d859f6d859aa6e418b5ec58246071efbc9de", "patch": "@@ -844,6 +844,17 @@ mod os {\n     pub const EXE_EXTENSION: &'static str = \"pexe\";\n }\n \n+#[cfg(target_os = \"emscripten\")]\n+mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"emscripten\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+    pub const EXE_SUFFIX: &'static str = \".js\";\n+    pub const EXE_EXTENSION: &'static str = \"js\";\n+}\n+\n #[cfg(target_arch = \"x86\")]\n mod arch {\n     pub const ARCH: &'static str = \"x86\";\n@@ -884,6 +895,11 @@ mod arch {\n     pub const ARCH: &'static str = \"le32\";\n }\n \n+#[cfg(target_arch = \"asmjs\")]\n+mod arch {\n+    pub const ARCH: &'static str = \"asmjs\";\n+}\n+\n #[cfg(test)]\n mod tests {\n     use prelude::v1::*;"}, {"sha": "10d37f9f59779461f7a9ce030131c7214b8e40c5", "filename": "src/libstd/os/linux/raw.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Fraw.rs?ref=d6c0d859f6d859aa6e418b5ec58246071efbc9de", "patch": "@@ -26,15 +26,23 @@ pub use self::arch::{off_t, ino_t, nlink_t, blksize_t, blkcnt_t, stat, time_t};\n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"le32\",\n           target_arch = \"powerpc\",\n-          target_arch = \"arm\"))]\n+          target_arch = \"arm\",\n+          target_arch = \"asmjs\"))]\n mod arch {\n     use super::{dev_t, mode_t};\n     use os::raw::{c_long, c_short};\n     use os::unix::raw::{gid_t, uid_t};\n \n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i32;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i32;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u32;\n+\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    #[cfg(not(any(target_env = \"musl\", target_arch = \"asmjs\")))]\n+    pub type ino_t = u32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    #[cfg(any(target_env = \"musl\", target_arch = \"asmjs\"))]\n+    pub type ino_t = u64;\n+\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u32;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i32;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i32;"}, {"sha": "e15c8d67a8a6c7638fed251a420f649b3d3a5023", "filename": "src/libstd/os/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmod.rs?ref=d6c0d859f6d859aa6e418b5ec58246071efbc9de", "patch": "@@ -32,4 +32,9 @@ pub use sys::ext as windows;\n #[cfg(target_os = \"openbsd\")]   pub mod openbsd;\n #[cfg(target_os = \"solaris\")]   pub mod solaris;\n \n+// Emscripten is just like linux\n+#[cfg(target_os = \"emscripten\")]\n+#[path = \"linux/mod.rs\"]\n+pub mod emscripten;\n+\n pub mod raw;"}, {"sha": "4200e105ceaad43cb39809e5df43c6f95a9b94e0", "filename": "src/libstd/os/raw.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw.rs?ref=d6c0d859f6d859aa6e418b5ec58246071efbc9de", "patch": "@@ -13,12 +13,14 @@\n #![stable(feature = \"raw_os\", since = \"1.1.0\")]\n \n #[cfg(any(target_os = \"android\",\n+          target_os = \"emscripten\",\n           all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                        target_arch = \"arm\",\n                                        target_arch = \"powerpc\",\n                                        target_arch = \"powerpc64\"))))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = u8;\n #[cfg(not(any(target_os = \"android\",\n+              target_os = \"emscripten\",\n               all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                            target_arch = \"arm\",\n                                            target_arch = \"powerpc\","}, {"sha": "584175406645103804ca32eef87ddd2370d90375", "filename": "src/libstd/sys/common/args.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fsys%2Fcommon%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fsys%2Fcommon%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fargs.rs?ref=d6c0d859f6d859aa6e418b5ec58246071efbc9de", "patch": "@@ -39,7 +39,8 @@ pub fn clone() -> Option<Vec<Vec<u8>>> { imp::clone() }\n           target_os = \"bitrig\",\n           target_os = \"netbsd\",\n           target_os = \"openbsd\",\n-          target_os = \"solaris\"))]\n+          target_os = \"solaris\",\n+          target_os = \"emscripten\"))]\n mod imp {\n     use prelude::v1::*;\n "}, {"sha": "3f70afe6ad76e9f7164a9ee8443de01b503519af", "filename": "src/libstd/sys/common/libunwind.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs?ref=d6c0d859f6d859aa6e418b5ec58246071efbc9de", "patch": "@@ -86,6 +86,10 @@ pub const unwinder_private_data_size: usize = 2;\n #[cfg(any(target_arch = \"powerpc\", target_arch = \"powerpc64\"))]\n pub const unwinder_private_data_size: usize = 2;\n \n+#[cfg(target_arch = \"asmjs\")]\n+// FIXME: Copied from arm. Need to confirm.\n+pub const unwinder_private_data_size: usize = 20;\n+\n #[repr(C)]\n pub struct _Unwind_Exception {\n     pub exception_class: _Unwind_Exception_Class,"}, {"sha": "56628a4c7545e8f26af27b71562d9a322d180d33", "filename": "src/libstd/sys/common/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs?ref=d6c0d859f6d859aa6e418b5ec58246071efbc9de", "patch": "@@ -45,7 +45,7 @@ pub mod unwind;\n pub mod util;\n pub mod wtf8;\n \n-#[cfg(any(all(unix, not(any(target_os = \"macos\", target_os = \"ios\"))),\n+#[cfg(any(all(unix, not(any(target_os = \"macos\", target_os = \"ios\", target_os = \"emscripten\"))),\n           all(windows, target_env = \"gnu\")))]\n pub mod gnu;\n "}, {"sha": "02e53854727f7dc25a470cab20742c473fea961a", "filename": "src/libstd/sys/unix/backtrace/printing/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fmod.rs?ref=d6c0d859f6d859aa6e418b5ec58246071efbc9de", "patch": "@@ -10,10 +10,12 @@\n \n pub use self::imp::print;\n \n-#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n+#[cfg(any(target_os = \"macos\", target_os = \"ios\",\n+          target_os = \"emscripten\"))]\n #[path = \"dladdr.rs\"]\n mod imp;\n \n-#[cfg(not(any(target_os = \"macos\", target_os = \"ios\")))]\n+#[cfg(not(any(target_os = \"macos\", target_os = \"ios\",\n+              target_os = \"emscripten\")))]\n #[path = \"gnu.rs\"]\n mod imp;"}, {"sha": "79cf48413007b38fb9fa64ce251a63c03b7c7f54", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=d6c0d859f6d859aa6e418b5ec58246071efbc9de", "patch": "@@ -293,7 +293,8 @@ impl DirEntry {\n     #[cfg(any(target_os = \"macos\",\n               target_os = \"ios\",\n               target_os = \"linux\",\n-              target_os = \"solaris\"))]\n+              target_os = \"solaris\",\n+              target_os = \"emscripten\"))]\n     pub fn ino(&self) -> raw::ino_t {\n         self.entry.d_ino\n     }\n@@ -326,7 +327,8 @@ impl DirEntry {\n         }\n     }\n     #[cfg(any(target_os = \"android\",\n-              target_os = \"linux\"))]\n+              target_os = \"linux\",\n+              target_os = \"emscripten\"))]\n     fn name_bytes(&self) -> &[u8] {\n         unsafe {\n             CStr::from_ptr(self.entry.d_name.as_ptr()).to_bytes()"}, {"sha": "ac24cdb4d1c6e553d3a14f3c92fde4f3cec5857b", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=d6c0d859f6d859aa6e418b5ec58246071efbc9de", "patch": "@@ -26,6 +26,7 @@ use ops::Neg;\n #[cfg(target_os = \"netbsd\")]    pub use os::netbsd as platform;\n #[cfg(target_os = \"openbsd\")]   pub use os::openbsd as platform;\n #[cfg(target_os = \"solaris\")]   pub use os::solaris as platform;\n+#[cfg(target_os = \"emscripten\")] pub use os::emscripten as platform;\n \n pub mod backtrace;\n pub mod condvar;"}, {"sha": "9def3adc303435a16d2bba07fa5cbc851c4ddba1", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=d6c0d859f6d859aa6e418b5ec58246071efbc9de", "patch": "@@ -38,7 +38,8 @@ static ENV_LOCK: StaticMutex = StaticMutex::new();\n /// Returns the platform-specific value of errno\n pub fn errno() -> i32 {\n     extern {\n-        #[cfg_attr(any(target_os = \"linux\"), link_name = \"__errno_location\")]\n+        #[cfg_attr(any(target_os = \"linux\", target_os = \"emscripten\"),\n+                   link_name = \"__errno_location\")]\n         #[cfg_attr(any(target_os = \"bitrig\",\n                        target_os = \"netbsd\",\n                        target_os = \"openbsd\",\n@@ -235,7 +236,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     }\n }\n \n-#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+#[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"emscripten\"))]\n pub fn current_exe() -> io::Result<PathBuf> {\n     ::fs::read_link(\"/proc/self/exe\")\n }\n@@ -385,7 +386,8 @@ pub fn args() -> Args {\n           target_os = \"netbsd\",\n           target_os = \"openbsd\",\n           target_os = \"solaris\",\n-          target_os = \"nacl\"))]\n+          target_os = \"nacl\",\n+          target_os = \"emscripten\"))]\n pub fn args() -> Args {\n     use sys_common;\n     let bytes = sys_common::args::clone().unwrap_or(Vec::new());"}, {"sha": "f881070d241439274f60fe6d35e0b0519e2c3efc", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=d6c0d859f6d859aa6e418b5ec58246071efbc9de", "patch": "@@ -131,7 +131,8 @@ impl fmt::Debug for Command {\n pub struct ExitStatus(c_int);\n \n #[cfg(any(target_os = \"linux\", target_os = \"android\",\n-          target_os = \"nacl\", target_os = \"solaris\"))]\n+          target_os = \"nacl\", target_os = \"solaris\",\n+          target_os = \"emscripten\"))]\n mod status_imp {\n     pub fn WIFEXITED(status: i32) -> bool { (status & 0xff) == 0 }\n     pub fn WEXITSTATUS(status: i32) -> i32 { (status >> 8) & 0xff }"}, {"sha": "883aae8120e752a1ac28d350f0fa4e9d3a1f2e82", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=d6c0d859f6d859aa6e418b5ec58246071efbc9de", "patch": "@@ -81,7 +81,9 @@ impl Thread {\n         debug_assert_eq!(ret, 0);\n     }\n \n-    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+    #[cfg(any(target_os = \"linux\",\n+              target_os = \"android\",\n+              target_os = \"emscripten\"))]\n     pub fn set_name(name: &str) {\n         const PR_SET_NAME: libc::c_int = 15;\n         let cname = CString::new(name).unwrap_or_else(|_| {"}, {"sha": "5693cc10a0f72437a38bc21f6debf5f1727b171d", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c0d859f6d859aa6e418b5ec58246071efbc9de/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=d6c0d859f6d859aa6e418b5ec58246071efbc9de", "patch": "@@ -928,7 +928,8 @@ fn get_concurrency() -> usize {\n               target_os = \"macos\",\n               target_os = \"ios\",\n               target_os = \"android\",\n-              target_os = \"solaris\"))]\n+              target_os = \"solaris\",\n+              target_os = \"emscripten\"))]\n     fn num_cpus() -> usize {\n         unsafe { libc::sysconf(libc::_SC_NPROCESSORS_ONLN) as usize }\n     }\n@@ -1174,14 +1175,16 @@ impl MetricMap {\n /// elimination.\n ///\n /// This function is a no-op, and does not even read from `dummy`.\n-#[cfg(not(all(target_os = \"nacl\", target_arch = \"le32\")))]\n+#[cfg(not(any(all(target_os = \"nacl\", target_arch = \"le32\"),\n+              target_arch = \"asmjs\")))]\n pub fn black_box<T>(dummy: T) -> T {\n     // we need to \"use\" the argument in some way LLVM can't\n     // introspect.\n     unsafe { asm!(\"\" : : \"r\"(&dummy)) }\n     dummy\n }\n-#[cfg(all(target_os = \"nacl\", target_arch = \"le32\"))]\n+#[cfg(any(all(target_os = \"nacl\", target_arch = \"le32\"),\n+          target_arch = \"asmjs\"))]\n #[inline(never)]\n pub fn black_box<T>(dummy: T) -> T {\n     dummy"}]}