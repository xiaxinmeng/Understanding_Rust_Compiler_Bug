{"sha": "276293af7c0fb901c8344e88562ce635f26f47a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NjI5M2FmN2MwZmI5MDFjODM0NGU4ODU2MmNlNjM1ZjI2ZjQ3YTk=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-04-18T08:01:23Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-04-20T20:51:55Z"}, "message": "Cleaned up case related functions a bit", "tree": {"sha": "753f1a06ed53dc07068e58823b629f389ee21f37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/753f1a06ed53dc07068e58823b629f389ee21f37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/276293af7c0fb901c8344e88562ce635f26f47a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/276293af7c0fb901c8344e88562ce635f26f47a9", "html_url": "https://github.com/rust-lang/rust/commit/276293af7c0fb901c8344e88562ce635f26f47a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/276293af7c0fb901c8344e88562ce635f26f47a9/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae3b8690c1e9c4debf20b4455ad50a79d5859ee9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae3b8690c1e9c4debf20b4455ad50a79d5859ee9", "html_url": "https://github.com/rust-lang/rust/commit/ae3b8690c1e9c4debf20b4455ad50a79d5859ee9"}], "stats": {"total": 59, "additions": 35, "deletions": 24}, "files": [{"sha": "c07a31490c34673643fb11130c92a4bdeed4b71c", "filename": "src/libcore/char.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/276293af7c0fb901c8344e88562ce635f26f47a9/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276293af7c0fb901c8344e88562ce635f26f47a9/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=276293af7c0fb901c8344e88562ce635f26f47a9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -234,6 +234,21 @@ pub fn escape_default(c: char) -> ~str {\n     }\n }\n \n+/// Returns the amount of bytes this character would need if encoded in utf8\n+pub fn len_utf8_bytes(c: char) -> uint {\n+    static max_one_b: uint = 128u;\n+    static max_two_b: uint = 2048u;\n+    static max_three_b: uint = 65536u;\n+    static max_four_b: uint = 2097152u;\n+\n+    let code = c as uint;\n+    if code < max_one_b { 1u }\n+    else if code < max_two_b { 2u }\n+    else if code < max_three_b { 3u }\n+    else if code < max_four_b { 4u }\n+    else { fail!(~\"invalid character!\") }\n+}\n+\n /**\n  * Compare two chars\n  *\n@@ -334,7 +349,6 @@ fn test_escape_default() {\n     assert_eq!(escape_default('\\U0001d4b6'), ~\"\\\\U0001d4b6\");\n }\n \n-\n #[test]\n fn test_escape_unicode() {\n     assert_eq!(escape_unicode('\\x00'), ~\"\\\\x00\");"}, {"sha": "cbdd145195304803fb13a08b0b88431c9e4e762f", "filename": "src/libcore/str.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/276293af7c0fb901c8344e88562ce635f26f47a9/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276293af7c0fb901c8344e88562ce635f26f47a9/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=276293af7c0fb901c8344e88562ce635f26f47a9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -789,16 +789,18 @@ pub fn each_split_within<'a>(ss: &'a str,\n \n /// Convert a string to lowercase. ASCII only\n pub fn to_lower(s: &str) -> ~str {\n-    map(s,\n-        |c| unsafe{(libc::tolower(c as libc::c_char)) as char}\n-    )\n+    do map(s) |c| {\n+        assert!(char::is_ascii(c));\n+        (unsafe{libc::tolower(c as libc::c_char)}) as char\n+    }\n }\n \n /// Convert a string to uppercase. ASCII only\n pub fn to_upper(s: &str) -> ~str {\n-    map(s,\n-        |c| unsafe{(libc::toupper(c as libc::c_char)) as char}\n-    )\n+    do map(s) |c| {\n+        assert!(char::is_ascii(c));\n+        (unsafe{libc::toupper(c as libc::c_char)}) as char\n+    }\n }\n \n /**\n@@ -3096,12 +3098,11 @@ mod tests {\n \n     #[test]\n     fn test_to_lower() {\n-        unsafe {\n-            assert!(~\"\" == map(~\"\",\n-                |c| libc::tolower(c as c_char) as char));\n-            assert!(~\"ymca\" == map(~\"YMCA\",\n-                |c| libc::tolower(c as c_char) as char));\n-        }\n+        // libc::tolower, and hence str::to_lower\n+        // are culturally insensitive: they only work for ASCII\n+        // (see Issue #1347)\n+        assert!(~\"\" == to_lower(\"\"));\n+        assert!(~\"ymca\" == to_lower(\"YMCA\"));\n     }\n \n     #[test]\n@@ -3666,12 +3667,8 @@ mod tests {\n \n     #[test]\n     fn test_map() {\n-        unsafe {\n-            assert!(~\"\" == map(~\"\", |c|\n-                libc::toupper(c as c_char) as char));\n-            assert!(~\"YMCA\" == map(~\"ymca\",\n-                                  |c| libc::toupper(c as c_char) as char));\n-        }\n+        assert!(~\"\" == map(~\"\", |c| unsafe {libc::toupper(c as c_char)} as char));\n+        assert!(~\"YMCA\" == map(~\"ymca\", |c| unsafe {libc::toupper(c as c_char)} as char));\n     }\n \n     #[test]\n@@ -3685,11 +3682,11 @@ mod tests {\n \n     #[test]\n     fn test_any() {\n-        assert!(false  == any(~\"\", char::is_uppercase));\n+        assert!(false == any(~\"\", char::is_uppercase));\n         assert!(false == any(~\"ymca\", char::is_uppercase));\n         assert!(true  == any(~\"YMCA\", char::is_uppercase));\n-        assert!(true == any(~\"yMCA\", char::is_uppercase));\n-        assert!(true == any(~\"Ymcy\", char::is_uppercase));\n+        assert!(true  == any(~\"yMCA\", char::is_uppercase));\n+        assert!(true  == any(~\"Ymcy\", char::is_uppercase));\n     }\n \n     #[test]"}]}