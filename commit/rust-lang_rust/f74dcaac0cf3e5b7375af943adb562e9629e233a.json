{"sha": "f74dcaac0cf3e5b7375af943adb562e9629e233a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NGRjYWFjMGNmM2U1YjczNzVhZjk0M2FkYjU2MmU5NjI5ZTIzM2E=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-09-19T15:59:12Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-09-19T15:59:12Z"}, "message": "Fix wrong suggestion in `TRANSMUTE_PTR_TO_REF` with lts", "tree": {"sha": "0c9d7038d1434149c482c6edf5eb41f50f12b7ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c9d7038d1434149c482c6edf5eb41f50f12b7ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f74dcaac0cf3e5b7375af943adb562e9629e233a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIbBAABCAAGBQJX4AubAAoJEF5CfHlMukXoeuEP+LAGU8Jqi7HiFNnWfyxComMM\nSNhtEuoAyQ8zm6KZejzE0mpIUZXlQzGUx+BANoPclv9/izBupfQFHjkT6TFxJmYE\ngQHfdHbD+6S7Jy989QGeXtTlK2BRpUVt8qIkl6fTh4tn7UPwqmf+CXQnStDeMCaf\nHfOzdVPaUR10LHNUvb/hdRVWlnuPxlOUrlkbPA78dyKtcUChMVLwriZdct5+ZOMX\nS4ETUkePwPQzxhR6TSAvDj5HILdHIhfeIqMPJMAx/fWVPsF1rB6V5fiuG7KfXTpy\n6gqD648+x/crNjt3Ti7W+lfeZK2EzajV/JBq9B1ExP/EZ14GVceUknO1e5gdi88i\nyO0UmK6obeGu8OQMi4RWiB+G8QLkGpctP4vbpx7drAf1Kp/iV6d2VyTvgxf/EUKj\npbfQOYFxhTgYr4nGOvVBCv9h9XQ3QnBE1fmmwAap9Vkj5X/NKofJZmNMIk9HvvDu\nZJSUy9tgytm8cckvfP/qg/smU7aeRbR5Tvt9HFjNSwV/rDKEw+6rXkH/i6Pw5LhT\nzuzOJv1s9tlABToVTz4PQ09Nr3X7T7fHkKwV4VVP7xmyIVAguGmwjKM+Xal5xsk8\neZfN7R2wza8ZbLQE9LkM+CwO++nsaXu9Ex7hS5mHGjEKbAa/KUMU0gDIkaSWNOJh\n2FjfyD25gjj3qmMtI9Q=\n=aoHr\n-----END PGP SIGNATURE-----", "payload": "tree 0c9d7038d1434149c482c6edf5eb41f50f12b7ab\nparent 5f1120b3460eff614bb08623cb0be2365a07f8c5\nauthor mcarton <cartonmartin+git@gmail.com> 1474300752 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1474300752 +0200\n\nFix wrong suggestion in `TRANSMUTE_PTR_TO_REF` with lts\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f74dcaac0cf3e5b7375af943adb562e9629e233a", "html_url": "https://github.com/rust-lang/rust/commit/f74dcaac0cf3e5b7375af943adb562e9629e233a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f74dcaac0cf3e5b7375af943adb562e9629e233a/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f1120b3460eff614bb08623cb0be2365a07f8c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f1120b3460eff614bb08623cb0be2365a07f8c5", "html_url": "https://github.com/rust-lang/rust/commit/5f1120b3460eff614bb08623cb0be2365a07f8c5"}], "stats": {"total": 55, "additions": 47, "deletions": 8}, "files": [{"sha": "5e9931c3bd2dbc5edb3a484940770c3e4c483ee2", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f74dcaac0cf3e5b7375af943adb562e9629e233a/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74dcaac0cf3e5b7375af943adb562e9629e233a/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=f74dcaac0cf3e5b7375af943adb562e9629e233a", "patch": "@@ -2,7 +2,7 @@ use rustc::lint::*;\n use rustc::ty::TypeVariants::{TyRawPtr, TyRef};\n use rustc::ty;\n use rustc::hir::*;\n-use utils::{match_def_path, paths, span_lint, span_lint_and_then};\n+use utils::{match_def_path, paths, span_lint, span_lint_and_then, snippet};\n use utils::sugg;\n \n /// **What it does:** Checks for transmutes that can't ever be correct on any\n@@ -87,7 +87,7 @@ impl LintPass for Transmute {\n impl LateLintPass for Transmute {\n     fn check_expr(&mut self, cx: &LateContext, e: &Expr) {\n         if let ExprCall(ref path_expr, ref args) = e.node {\n-            if let ExprPath(None, _) = path_expr.node {\n+            if let ExprPath(None, ref path) = path_expr.node {\n                 let def_id = cx.tcx.expect_def(path_expr.id).def_id();\n \n                 if match_def_path(cx, def_id, &paths::TRANSMUTE) {\n@@ -170,11 +170,10 @@ impl LateLintPass for Transmute {\n                                     (\"&*\", \"*const\")\n                                 };\n \n-\n                                 let arg = if from_pty.ty == to_rty.ty {\n                                     arg\n                                 } else {\n-                                    arg.as_ty(&format!(\"{} {}\", cast, to_rty.ty))\n+                                    arg.as_ty(&format!(\"{} {}\", cast, get_type_snippet(cx, path, to_rty.ty)))\n                                 };\n \n                                 db.span_suggestion(e.span, \"try\", sugg::make_unop(deref, arg).to_string());\n@@ -187,3 +186,19 @@ impl LateLintPass for Transmute {\n         }\n     }\n }\n+\n+/// Get the snippet of `Bar` in `\u2026::transmute<Foo, &Bar>`. If that snippet is not available , use\n+/// the type's `ToString` implementation. In weird cases it could lead to types with invalid `'_`\n+/// lifetime, but it should be rare.\n+fn get_type_snippet(cx: &LateContext, path: &Path, to_rty: ty::Ty) -> String {\n+    if_let_chain!{[\n+        let Some(seg) = path.segments.last(),\n+        let PathParameters::AngleBracketedParameters(ref ang) = seg.parameters,\n+        let Some(to_ty) = ang.types.get(1),\n+        let TyRptr(_, ref to_ty) = to_ty.node,\n+    ], {\n+        return snippet(cx, to_ty.ty.span, &to_rty.to_string()).to_string();\n+    }}\n+\n+    to_rty.to_string()\n+}"}, {"sha": "c5ab854b05ae6c28ad6dd890341a48258993cd38", "filename": "tests/compile-fail/transmute.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f74dcaac0cf3e5b7375af943adb562e9629e233a/tests%2Fcompile-fail%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74dcaac0cf3e5b7375af943adb562e9629e233a/tests%2Fcompile-fail%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute.rs?ref=f74dcaac0cf3e5b7375af943adb562e9629e233a", "patch": "@@ -1,6 +1,8 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n+#![allow(dead_code)]\n+\n extern crate core;\n \n use std::mem::transmute as my_transmute;\n@@ -83,6 +85,31 @@ unsafe fn _ptr_to_ref<T, U>(p: *const T, m: *mut T, o: *const U, om: *mut U) {\n     let _: &T = &*(om as *const T);\n }\n \n+#[deny(transmute_ptr_to_ref)]\n+fn issue1231() {\n+    struct Foo<'a, T: 'a> {\n+        bar: &'a T,\n+    }\n+\n+    let raw = 0 as *const i32;\n+    let _: &Foo<u8> = unsafe { std::mem::transmute::<_, &Foo<_>>(raw) };\n+    //~^ ERROR transmute from a pointer type\n+    //~| HELP try\n+    //~| SUGGESTION unsafe { &*(raw as *const Foo<_>) };\n+\n+    let _: &Foo<&u8> = unsafe { std::mem::transmute::<_, &Foo<&_>>(raw) };\n+    //~^ ERROR transmute from a pointer type\n+    //~| HELP try\n+    //~| SUGGESTION unsafe { &*(raw as *const Foo<&_>) };\n+\n+    type Bar<'a> = &'a u8;\n+    let raw = 0 as *const i32;\n+    unsafe { std::mem::transmute::<_, Bar>(raw) };\n+    //~^ ERROR transmute from a pointer type\n+    //~| HELP try\n+    //~| SUGGESTION unsafe { &*(raw as *const u8) };\n+}\n+\n #[deny(useless_transmute)]\n fn useless() {\n     unsafe {\n@@ -144,7 +171,4 @@ fn crosspointer() {\n     }\n }\n \n-fn main() {\n-    useless();\n-    crosspointer();\n-}\n+fn main() { }"}]}