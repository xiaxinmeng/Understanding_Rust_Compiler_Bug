{"sha": "068807a5b8072349363c33918c41f4d7ddfde600", "node_id": "C_kwDOAAsO6NoAKDA2ODgwN2E1YjgwNzIzNDkzNjNjMzM5MThjNDFmNGQ3ZGRmZGU2MDA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-03T18:47:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-03T18:47:22Z"}, "message": "Rollup merge of #107978 - ChrisDenton:nt-to-win32, r=m-ou-se\n\nCorrectly convert an NT path to a Win32 path in `read_link`\n\nThis can be done by simply changing the `\\??\\` prefix to `\\\\?\\`.\n\nCurrently it strips off the prefix which could lead to the wrong path being returned (e.g. if it's not a drive path or if the path contains trailing spaces, etc).\n\nr? libs", "tree": {"sha": "5c2d914ad7eb1b61b654b9acc5069774a879c34f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c2d914ad7eb1b61b654b9acc5069774a879c34f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/068807a5b8072349363c33918c41f4d7ddfde600", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkUqw6CRBK7hj4Ov3rIwAAWDcIAGv5HiLldox+QQUGg8fmxkA6\nZK7Qvm0GGpgl0/0Gb4p22ys4zfmrOdur2LJne1Ts3jLQCVdFTqYn2L68owxcDEf/\n3IPuJlXrfYmLsYxBBiaG7pyp/+nvWJLFKostfjkPIHggoQlSRvR84M2LqFlT4KGC\nbpGiwFKLVJT+yyseCIzgyrpBUWokJwjxm5faqvr6+f9zu+Dl1EzpRWXOjWNUQgih\nxUyYpQvj4xNwJ3PnSAHdYtzmJfzo9uuWCWacWxMskUFo5QzPP0cOrAhWBKzZ82AN\nlKMUVVu4iI9SIiRBUikf1l+b1puYovDPjEFkmb1Sw6Jzv9d1uibAUqJBIH6lb1Y=\n=KlIh\n-----END PGP SIGNATURE-----\n", "payload": "tree 5c2d914ad7eb1b61b654b9acc5069774a879c34f\nparent 9b99ff76b28605ad2e2c49e369721ae400e6a665\nparent 109a47fc9d63a5e093bd36423e290fe8bc18ae25\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1683139642 +0530\ncommitter GitHub <noreply@github.com> 1683139642 +0530\n\nRollup merge of #107978 - ChrisDenton:nt-to-win32, r=m-ou-se\n\nCorrectly convert an NT path to a Win32 path in `read_link`\n\nThis can be done by simply changing the `\\??\\` prefix to `\\\\?\\`.\n\nCurrently it strips off the prefix which could lead to the wrong path being returned (e.g. if it's not a drive path or if the path contains trailing spaces, etc).\n\nr? libs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/068807a5b8072349363c33918c41f4d7ddfde600", "html_url": "https://github.com/rust-lang/rust/commit/068807a5b8072349363c33918c41f4d7ddfde600", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/068807a5b8072349363c33918c41f4d7ddfde600/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b99ff76b28605ad2e2c49e369721ae400e6a665", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b99ff76b28605ad2e2c49e369721ae400e6a665", "html_url": "https://github.com/rust-lang/rust/commit/9b99ff76b28605ad2e2c49e369721ae400e6a665"}, {"sha": "109a47fc9d63a5e093bd36423e290fe8bc18ae25", "url": "https://api.github.com/repos/rust-lang/rust/commits/109a47fc9d63a5e093bd36423e290fe8bc18ae25", "html_url": "https://github.com/rust-lang/rust/commit/109a47fc9d63a5e093bd36423e290fe8bc18ae25"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "a8a0b9f122d66ac60d99fbe1bf082b7eea36612e", "filename": "library/std/src/fs/tests.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/068807a5b8072349363c33918c41f4d7ddfde600/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068807a5b8072349363c33918c41f4d7ddfde600/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs?ref=068807a5b8072349363c33918c41f4d7ddfde600", "patch": "@@ -919,6 +919,7 @@ fn symlink_noexist() {\n \n #[test]\n fn read_link() {\n+    let tmpdir = tmpdir();\n     if cfg!(windows) {\n         // directory symlink\n         assert_eq!(check!(fs::read_link(r\"C:\\Users\\All Users\")), Path::new(r\"C:\\ProgramData\"));\n@@ -933,8 +934,11 @@ fn read_link() {\n                 Path::new(r\"C:\\Users\")\n             );\n         }\n+        // Check that readlink works with non-drive paths on Windows.\n+        let link = tmpdir.join(\"link_unc\");\n+        check!(symlink_dir(r\"\\\\localhost\\c$\\\", &link));\n+        assert_eq!(check!(fs::read_link(&link)), Path::new(r\"\\\\localhost\\c$\\\"));\n     }\n-    let tmpdir = tmpdir();\n     let link = tmpdir.join(\"link\");\n     if !got_symlink_permission(&tmpdir) {\n         return;"}, {"sha": "5bfd8b52ed08dbc7fa24d1f52d60f1dccb441d73", "filename": "library/std/src/sys/windows/args.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/068807a5b8072349363c33918c41f4d7ddfde600/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068807a5b8072349363c33918c41f4d7ddfde600/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs?ref=068807a5b8072349363c33918c41f4d7ddfde600", "patch": "@@ -313,6 +313,9 @@ pub(crate) fn make_bat_command_line(\n ///\n /// This is necessary because cmd.exe does not support verbatim paths.\n pub(crate) fn to_user_path(path: &Path) -> io::Result<Vec<u16>> {\n+    from_wide_to_user_path(to_u16s(path)?)\n+}\n+pub(crate) fn from_wide_to_user_path(mut path: Vec<u16>) -> io::Result<Vec<u16>> {\n     use crate::ptr;\n     use crate::sys::windows::fill_utf16_buf;\n \n@@ -325,8 +328,6 @@ pub(crate) fn to_user_path(path: &Path) -> io::Result<Vec<u16>> {\n     const N: u16 = b'N' as _;\n     const C: u16 = b'C' as _;\n \n-    let mut path = to_u16s(path)?;\n-\n     // Early return if the path is too long to remove the verbatim prefix.\n     const LEGACY_MAX_PATH: usize = 260;\n     if path.len() > LEGACY_MAX_PATH {"}, {"sha": "fe052c8281b504723acfd02b5e034bf33d4a4024", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/068807a5b8072349363c33918c41f4d7ddfde600/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068807a5b8072349363c33918c41f4d7ddfde600/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=068807a5b8072349363c33918c41f4d7ddfde600", "patch": "@@ -477,7 +477,7 @@ impl File {\n     fn reparse_point(\n         &self,\n         space: &mut Align8<[MaybeUninit<u8>]>,\n-    ) -> io::Result<(c::DWORD, *const c::REPARSE_DATA_BUFFER)> {\n+    ) -> io::Result<(c::DWORD, *mut c::REPARSE_DATA_BUFFER)> {\n         unsafe {\n             let mut bytes = 0;\n             cvt({\n@@ -496,7 +496,7 @@ impl File {\n                 )\n             })?;\n             const _: () = assert!(core::mem::align_of::<c::REPARSE_DATA_BUFFER>() <= 8);\n-            Ok((bytes, space.0.as_ptr().cast::<c::REPARSE_DATA_BUFFER>()))\n+            Ok((bytes, space.0.as_mut_ptr().cast::<c::REPARSE_DATA_BUFFER>()))\n         }\n     }\n \n@@ -506,22 +506,22 @@ impl File {\n         unsafe {\n             let (path_buffer, subst_off, subst_len, relative) = match (*buf).ReparseTag {\n                 c::IO_REPARSE_TAG_SYMLINK => {\n-                    let info: *const c::SYMBOLIC_LINK_REPARSE_BUFFER =\n-                        ptr::addr_of!((*buf).rest).cast();\n+                    let info: *mut c::SYMBOLIC_LINK_REPARSE_BUFFER =\n+                        ptr::addr_of_mut!((*buf).rest).cast();\n                     assert!(info.is_aligned());\n                     (\n-                        ptr::addr_of!((*info).PathBuffer).cast::<u16>(),\n+                        ptr::addr_of_mut!((*info).PathBuffer).cast::<u16>(),\n                         (*info).SubstituteNameOffset / 2,\n                         (*info).SubstituteNameLength / 2,\n                         (*info).Flags & c::SYMLINK_FLAG_RELATIVE != 0,\n                     )\n                 }\n                 c::IO_REPARSE_TAG_MOUNT_POINT => {\n-                    let info: *const c::MOUNT_POINT_REPARSE_BUFFER =\n-                        ptr::addr_of!((*buf).rest).cast();\n+                    let info: *mut c::MOUNT_POINT_REPARSE_BUFFER =\n+                        ptr::addr_of_mut!((*buf).rest).cast();\n                     assert!(info.is_aligned());\n                     (\n-                        ptr::addr_of!((*info).PathBuffer).cast::<u16>(),\n+                        ptr::addr_of_mut!((*info).PathBuffer).cast::<u16>(),\n                         (*info).SubstituteNameOffset / 2,\n                         (*info).SubstituteNameLength / 2,\n                         false,\n@@ -535,13 +535,20 @@ impl File {\n                 }\n             };\n             let subst_ptr = path_buffer.add(subst_off.into());\n-            let mut subst = slice::from_raw_parts(subst_ptr, subst_len as usize);\n+            let subst = slice::from_raw_parts_mut(subst_ptr, subst_len as usize);\n             // Absolute paths start with an NT internal namespace prefix `\\??\\`\n             // We should not let it leak through.\n             if !relative && subst.starts_with(&[92u16, 63u16, 63u16, 92u16]) {\n-                subst = &subst[4..];\n+                // Turn `\\??\\` into `\\\\?\\` (a verbatim path).\n+                subst[1] = b'\\\\' as u16;\n+                // Attempt to convert to a more user-friendly path.\n+                let user = super::args::from_wide_to_user_path(\n+                    subst.iter().copied().chain([0]).collect(),\n+                )?;\n+                Ok(PathBuf::from(OsString::from_wide(&user.strip_suffix(&[0]).unwrap_or(&user))))\n+            } else {\n+                Ok(PathBuf::from(OsString::from_wide(subst)))\n             }\n-            Ok(PathBuf::from(OsString::from_wide(subst)))\n         }\n     }\n "}]}