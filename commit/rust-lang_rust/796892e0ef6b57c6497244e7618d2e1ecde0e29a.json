{"sha": "796892e0ef6b57c6497244e7618d2e1ecde0e29a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5Njg5MmUwZWY2YjU3YzY0OTcyNDRlNzYxOGQyZTFlY2RlMGUyOWE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-11-29T12:10:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-29T12:10:39Z"}, "message": "Rollup merge of #56220 - estebank:suggest-lifetime-move, r=nikomatsakis\n\nSuggest appropriate place for lifetime when declared after type arguments", "tree": {"sha": "1d0f0931dd5ede18421d87d122a27138d3a87913", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d0f0931dd5ede18421d87d122a27138d3a87913"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/796892e0ef6b57c6497244e7618d2e1ecde0e29a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb/9c/CRBK7hj4Ov3rIwAAdHIIAGBZmCcHkI5KdKgGWHNhJvuv\nOPHkAibnJzSo2DH6vI4b9lnVvtfo+Ma6R3SQeRFThWH1svtrAsa/lCCwUJtMFIcx\n8tcoBfuW2VxblETEB9RoTqxUJBt01huC3iij/z7e23ijCovyu8oOyOW6a+jX2Pcj\nMRLBA/mnZlUYPP8B88xuUk8peA19fGolAlSJvB/MXI+qe/Hp+J9mWJHk+oTfiRlU\nLRyua4AZNixaF6DTqfbdMvL5/9jqPe1NLKuDplDM3EvimllHWQE/QQsqZxnJwweV\nzUvOppG+8EBNxc3MQra7AAnfw/fCo9ox3d/gzePyhYyrosQnueQN+bMcSoEG7SY=\n=a6MS\n-----END PGP SIGNATURE-----\n", "payload": "tree 1d0f0931dd5ede18421d87d122a27138d3a87913\nparent 40ec10988847ccac9cdadcecdb93131cbe052e61\nparent 6f028fe8e0db8c1251f24d694fc001aa933cf0ea\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1543493439 +0100\ncommitter GitHub <noreply@github.com> 1543493439 +0100\n\nRollup merge of #56220 - estebank:suggest-lifetime-move, r=nikomatsakis\n\nSuggest appropriate place for lifetime when declared after type arguments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/796892e0ef6b57c6497244e7618d2e1ecde0e29a", "html_url": "https://github.com/rust-lang/rust/commit/796892e0ef6b57c6497244e7618d2e1ecde0e29a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/796892e0ef6b57c6497244e7618d2e1ecde0e29a/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40ec10988847ccac9cdadcecdb93131cbe052e61", "url": "https://api.github.com/repos/rust-lang/rust/commits/40ec10988847ccac9cdadcecdb93131cbe052e61", "html_url": "https://github.com/rust-lang/rust/commit/40ec10988847ccac9cdadcecdb93131cbe052e61"}, {"sha": "6f028fe8e0db8c1251f24d694fc001aa933cf0ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f028fe8e0db8c1251f24d694fc001aa933cf0ea", "html_url": "https://github.com/rust-lang/rust/commit/6f028fe8e0db8c1251f24d694fc001aa933cf0ea"}], "stats": {"total": 136, "additions": 128, "deletions": 8}, "files": [{"sha": "e0436cc7380abb6bf61b6e2faa75307021601bae", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 45, "deletions": 8, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/796892e0ef6b57c6497244e7618d2e1ecde0e29a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796892e0ef6b57c6497244e7618d2e1ecde0e29a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=796892e0ef6b57c6497244e7618d2e1ecde0e29a", "patch": "@@ -5172,8 +5172,12 @@ impl<'a> Parser<'a> {\n     /// Parses (possibly empty) list of lifetime and type parameters, possibly including\n     /// trailing comma and erroneous trailing attributes.\n     crate fn parse_generic_params(&mut self) -> PResult<'a, Vec<ast::GenericParam>> {\n+        let mut lifetimes = Vec::new();\n         let mut params = Vec::new();\n-        let mut seen_ty_param = false;\n+        let mut seen_ty_param: Option<Span> = None;\n+        let mut last_comma_span = None;\n+        let mut bad_lifetime_pos = vec![];\n+        let mut suggestions = vec![];\n         loop {\n             let attrs = self.parse_outer_attributes()?;\n             if self.check_lifetime() {\n@@ -5184,25 +5188,42 @@ impl<'a> Parser<'a> {\n                 } else {\n                     Vec::new()\n                 };\n-                params.push(ast::GenericParam {\n+                lifetimes.push(ast::GenericParam {\n                     ident: lifetime.ident,\n                     id: lifetime.id,\n                     attrs: attrs.into(),\n                     bounds,\n                     kind: ast::GenericParamKind::Lifetime,\n                 });\n-                if seen_ty_param {\n-                    self.span_err(self.prev_span,\n-                        \"lifetime parameters must be declared prior to type parameters\");\n+                if let Some(sp) = seen_ty_param {\n+                    let param_span = self.prev_span;\n+                    let ate_comma = self.eat(&token::Comma);\n+                    let remove_sp = if ate_comma {\n+                        param_span.until(self.span)\n+                    } else {\n+                        last_comma_span.unwrap_or(param_span).to(param_span)\n+                    };\n+                    bad_lifetime_pos.push(param_span);\n+\n+                    if let Ok(snippet) = self.sess.source_map().span_to_snippet(param_span) {\n+                        suggestions.push((remove_sp, String::new()));\n+                        suggestions.push((sp.shrink_to_lo(), format!(\"{}, \", snippet)));\n+                    }\n+                    if ate_comma {\n+                        last_comma_span = Some(self.prev_span);\n+                        continue\n+                    }\n                 }\n             } else if self.check_ident() {\n                 // Parse type parameter.\n                 params.push(self.parse_ty_param(attrs)?);\n-                seen_ty_param = true;\n+                if seen_ty_param.is_none() {\n+                    seen_ty_param = Some(self.prev_span);\n+                }\n             } else {\n                 // Check for trailing attributes and stop parsing.\n                 if !attrs.is_empty() {\n-                    let param_kind = if seen_ty_param { \"type\" } else { \"lifetime\" };\n+                    let param_kind = if seen_ty_param.is_some() { \"type\" } else { \"lifetime\" };\n                     self.span_err(attrs[0].span,\n                         &format!(\"trailing attribute after {} parameters\", param_kind));\n                 }\n@@ -5212,8 +5233,24 @@ impl<'a> Parser<'a> {\n             if !self.eat(&token::Comma) {\n                 break\n             }\n+            last_comma_span = Some(self.prev_span);\n+        }\n+        if !bad_lifetime_pos.is_empty() {\n+            let mut err = self.struct_span_err(\n+                bad_lifetime_pos,\n+                \"lifetime parameters must be declared prior to type parameters\",\n+            );\n+            if !suggestions.is_empty() {\n+                err.multipart_suggestion_with_applicability(\n+                    \"move the lifetime parameter prior to the first type parameter\",\n+                    suggestions,\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+            err.emit();\n         }\n-        Ok(params)\n+        lifetimes.extend(params);  // ensure the correct order of lifetimes and type params\n+        Ok(lifetimes)\n     }\n \n     /// Parse a set of optional generic type parameter declarations. Where"}, {"sha": "622066a94f80a1562486882d570619102f8bfa14", "filename": "src/test/ui/parser/issue-14303-enum.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/796892e0ef6b57c6497244e7618d2e1ecde0e29a/src%2Ftest%2Fui%2Fparser%2Fissue-14303-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/796892e0ef6b57c6497244e7618d2e1ecde0e29a/src%2Ftest%2Fui%2Fparser%2Fissue-14303-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-enum.stderr?ref=796892e0ef6b57c6497244e7618d2e1ecde0e29a", "patch": "@@ -3,6 +3,10 @@ error: lifetime parameters must be declared prior to type parameters\n    |\n LL | enum X<'a, T, 'b> {\n    |               ^^\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL | enum X<'a, 'b, T> {\n+   |            ^^^ --\n \n error: aborting due to previous error\n "}, {"sha": "630c9cb40de37aa452dbef5c90a3bdf08e891e23", "filename": "src/test/ui/parser/issue-14303-fn-def.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/796892e0ef6b57c6497244e7618d2e1ecde0e29a/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fn-def.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/796892e0ef6b57c6497244e7618d2e1ecde0e29a/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fn-def.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fn-def.stderr?ref=796892e0ef6b57c6497244e7618d2e1ecde0e29a", "patch": "@@ -3,6 +3,10 @@ error: lifetime parameters must be declared prior to type parameters\n    |\n LL | fn foo<'a, T, 'b>(x: &'a T) {}\n    |               ^^\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL | fn foo<'a, 'b, T>(x: &'a T) {}\n+   |            ^^^ --\n \n error: aborting due to previous error\n "}, {"sha": "2e3181de902758c3207b98e741716ace89776c76", "filename": "src/test/ui/parser/issue-14303-impl.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/796892e0ef6b57c6497244e7618d2e1ecde0e29a/src%2Ftest%2Fui%2Fparser%2Fissue-14303-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/796892e0ef6b57c6497244e7618d2e1ecde0e29a/src%2Ftest%2Fui%2Fparser%2Fissue-14303-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-impl.stderr?ref=796892e0ef6b57c6497244e7618d2e1ecde0e29a", "patch": "@@ -3,6 +3,10 @@ error: lifetime parameters must be declared prior to type parameters\n    |\n LL | impl<'a, T, 'b> X {}\n    |             ^^\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL | impl<'a, 'b, T> X {}\n+   |          ^^^ --\n \n error: aborting due to previous error\n "}, {"sha": "c6b33120c18f046094b9501c4140c3871fd4c3cd", "filename": "src/test/ui/parser/issue-14303-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/796892e0ef6b57c6497244e7618d2e1ecde0e29a/src%2Ftest%2Fui%2Fparser%2Fissue-14303-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/796892e0ef6b57c6497244e7618d2e1ecde0e29a/src%2Ftest%2Fui%2Fparser%2Fissue-14303-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-struct.stderr?ref=796892e0ef6b57c6497244e7618d2e1ecde0e29a", "patch": "@@ -3,6 +3,10 @@ error: lifetime parameters must be declared prior to type parameters\n    |\n LL | struct X<'a, T, 'b> {\n    |                 ^^\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL | struct X<'a, 'b, T> {\n+   |              ^^^ --\n \n error: aborting due to previous error\n "}, {"sha": "6d00f284bbbe741b75bac61292248964a7e4d2db", "filename": "src/test/ui/parser/issue-14303-trait.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/796892e0ef6b57c6497244e7618d2e1ecde0e29a/src%2Ftest%2Fui%2Fparser%2Fissue-14303-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/796892e0ef6b57c6497244e7618d2e1ecde0e29a/src%2Ftest%2Fui%2Fparser%2Fissue-14303-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-trait.stderr?ref=796892e0ef6b57c6497244e7618d2e1ecde0e29a", "patch": "@@ -3,6 +3,10 @@ error: lifetime parameters must be declared prior to type parameters\n    |\n LL | trait Foo<'a, T, 'b> {}\n    |                  ^^\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL | trait Foo<'a, 'b, T> {}\n+   |               ^^^ --\n \n error: aborting due to previous error\n "}, {"sha": "5051a406078aa74eb6961d01e65e84147674cacb", "filename": "src/test/ui/suggestions/suggest-move-lifetimes.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/796892e0ef6b57c6497244e7618d2e1ecde0e29a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796892e0ef6b57c6497244e7618d2e1ecde0e29a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.rs?ref=796892e0ef6b57c6497244e7618d2e1ecde0e29a", "patch": "@@ -0,0 +1,21 @@\n+struct A<T, 'a> {\n+    t: &'a T,\n+}\n+\n+struct B<T, 'a, U> {\n+    t: &'a T,\n+    u: U,\n+}\n+\n+struct C<T, U, 'a> {\n+    t: &'a T,\n+    u: U,\n+}\n+\n+struct D<T, U, 'a, 'b, V, 'c> {\n+    t: &'a T,\n+    u: &'b U,\n+    v: &'c V,\n+}\n+\n+fn main() {}"}, {"sha": "f3d6469b5125501752128afcd05a02aed2f3c7d7", "filename": "src/test/ui/suggestions/suggest-move-lifetimes.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/796892e0ef6b57c6497244e7618d2e1ecde0e29a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/796892e0ef6b57c6497244e7618d2e1ecde0e29a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr?ref=796892e0ef6b57c6497244e7618d2e1ecde0e29a", "patch": "@@ -0,0 +1,42 @@\n+error: lifetime parameters must be declared prior to type parameters\n+  --> $DIR/suggest-move-lifetimes.rs:1:13\n+   |\n+LL | struct A<T, 'a> {\n+   |             ^^\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL | struct A<'a, T> {\n+   |          ^^^ --\n+\n+error: lifetime parameters must be declared prior to type parameters\n+  --> $DIR/suggest-move-lifetimes.rs:5:13\n+   |\n+LL | struct B<T, 'a, U> {\n+   |             ^^\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL | struct B<'a, T, U> {\n+   |          ^^^   --\n+\n+error: lifetime parameters must be declared prior to type parameters\n+  --> $DIR/suggest-move-lifetimes.rs:10:16\n+   |\n+LL | struct C<T, U, 'a> {\n+   |                ^^\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL | struct C<'a, T, U> {\n+   |          ^^^    --\n+\n+error: lifetime parameters must be declared prior to type parameters\n+  --> $DIR/suggest-move-lifetimes.rs:15:16\n+   |\n+LL | struct D<T, U, 'a, 'b, V, 'c> {\n+   |                ^^  ^^     ^^\n+help: move the lifetime parameter prior to the first type parameter\n+   |\n+LL | struct D<'a, 'b, 'c, T, U, V> {\n+   |          ^^^ ^^^ ^^^      ---\n+\n+error: aborting due to 4 previous errors\n+"}]}