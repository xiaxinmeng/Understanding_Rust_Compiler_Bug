{"sha": "183dfac1f31cc16975bb1f598779df5689d1e729", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4M2RmYWMxZjMxY2MxNjk3NWJiMWY1OTg3NzlkZjU2ODlkMWU3Mjk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-27T19:26:06Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-05T18:32:01Z"}, "message": "Account for HKTB when suggesting introduction of named lifetime", "tree": {"sha": "759378b9028e6eeb3c12586afd8b009bbfc3e779", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/759378b9028e6eeb3c12586afd8b009bbfc3e779"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/183dfac1f31cc16975bb1f598779df5689d1e729", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/183dfac1f31cc16975bb1f598779df5689d1e729", "html_url": "https://github.com/rust-lang/rust/commit/183dfac1f31cc16975bb1f598779df5689d1e729", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/183dfac1f31cc16975bb1f598779df5689d1e729/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eda1a7adfcf6de70afa4ca0a6f709ed0e507516a", "url": "https://api.github.com/repos/rust-lang/rust/commits/eda1a7adfcf6de70afa4ca0a6f709ed0e507516a", "html_url": "https://github.com/rust-lang/rust/commit/eda1a7adfcf6de70afa4ca0a6f709ed0e507516a"}], "stats": {"total": 191, "additions": 153, "deletions": 38}, "files": [{"sha": "86252203f1d4563ba5fe76160b63ae2c56c419f5", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/183dfac1f31cc16975bb1f598779df5689d1e729/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183dfac1f31cc16975bb1f598779df5689d1e729/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=183dfac1f31cc16975bb1f598779df5689d1e729", "patch": "@@ -2260,10 +2260,10 @@ impl TraitRef<'_> {\n \n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct PolyTraitRef<'hir> {\n-    /// The `'a` in `<'a> Foo<&'a T>`.\n+    /// The `'a` in `for<'a> Foo<&'a T>`.\n     pub bound_generic_params: &'hir [GenericParam<'hir>],\n \n-    /// The `Foo<&'a T>` in `<'a> Foo<&'a T>`.\n+    /// The `Foo<&'a T>` in `for <'a> Foo<&'a T>`.\n     pub trait_ref: TraitRef<'hir>,\n \n     pub span: Span,"}, {"sha": "fafceb1f97cee6b2f6fc6067958112b5eab57a66", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 36, "deletions": 16, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/183dfac1f31cc16975bb1f598779df5689d1e729/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183dfac1f31cc16975bb1f598779df5689d1e729/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=183dfac1f31cc16975bb1f598779df5689d1e729", "patch": "@@ -8,7 +8,6 @@ use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_feature::BUILTIN_ATTRIBUTES;\n-use rustc_hir as hir;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind, NonMacroAttrKind};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n@@ -20,6 +19,7 @@ use syntax::ast::{self, Ident, Path};\n use syntax::util::lev_distance::find_best_match_for_name;\n \n use crate::imports::{ImportDirective, ImportDirectiveSubclass, ImportResolver};\n+use crate::lifetimes::{HRLTSpanType, MissingLifetimeSpot};\n use crate::path_names_to_string;\n use crate::{AmbiguityError, AmbiguityErrorMisc, AmbiguityKind};\n use crate::{BindingError, CrateLint, HasGenericParams, LegacyScope, Module, ModuleOrUniformRoot};\n@@ -1471,7 +1471,7 @@ crate fn add_missing_lifetime_specifiers_label(\n     count: usize,\n     lifetime_names: &FxHashSet<ast::Ident>,\n     snippet: Option<&str>,\n-    missing_named_lifetime_spots: &[&hir::Generics<'_>],\n+    missing_named_lifetime_spots: &[MissingLifetimeSpot<'_>],\n ) {\n     if count > 1 {\n         err.span_label(span, format!(\"expected {} lifetime parameters\", count));\n@@ -1484,21 +1484,41 @@ crate fn add_missing_lifetime_specifiers_label(\n                 Applicability::MaybeIncorrect,\n             );\n         };\n-        let suggest_new = |err: &mut DiagnosticBuilder<'_>, sugg| {\n+        let suggest_new = |err: &mut DiagnosticBuilder<'_>, sugg: &str| {\n             err.span_label(span, \"expected named lifetime parameter\");\n \n-            if let Some(generics) = missing_named_lifetime_spots.iter().last() {\n+            for missing in missing_named_lifetime_spots.iter().rev() {\n                 let mut introduce_suggestion = vec![];\n-                introduce_suggestion.push(match &generics.params {\n-                    [] => (generics.span, \"<'lifetime>\".to_string()),\n-                    [param, ..] => (param.span.shrink_to_lo(), \"'lifetime, \".to_string()),\n+                let msg;\n+                let should_break;\n+                introduce_suggestion.push(match missing {\n+                    MissingLifetimeSpot::Generics(generics) => {\n+                        msg = \"consider introducing a named lifetime parameter\";\n+                        should_break = true;\n+                        match &generics.params {\n+                            [] => (generics.span, \"<'lifetime>\".to_string()),\n+                            [param, ..] => (param.span.shrink_to_lo(), \"'lifetime, \".to_string()),\n+                        }\n+                    }\n+                    MissingLifetimeSpot::HRLT { span, span_type } => {\n+                        msg = \"consider introducing a Higher-Ranked lifetime\";\n+                        should_break = false;\n+                        err.note(\n+                            \"for more information on Higher-Ranked lifetimes, visit \\\n+                             https://doc.rust-lang.org/nomicon/hrtb.html\",\n+                        );\n+                        let suggestion = match span_type {\n+                            HRLTSpanType::Empty => \"for<'lifetime> \",\n+                            HRLTSpanType::Tail => \", 'lifetime\",\n+                        };\n+                        (*span, suggestion.to_string())\n+                    }\n                 });\n-                introduce_suggestion.push((span, sugg));\n-                err.multipart_suggestion(\n-                    \"consider introducing a named lifetime parameter\",\n-                    introduce_suggestion,\n-                    Applicability::MaybeIncorrect,\n-                );\n+                introduce_suggestion.push((span, sugg.to_string()));\n+                err.multipart_suggestion(msg, introduce_suggestion, Applicability::MaybeIncorrect);\n+                if should_break {\n+                    break;\n+                }\n             }\n         };\n \n@@ -1513,13 +1533,13 @@ crate fn add_missing_lifetime_specifiers_label(\n                 suggest_existing(err, format!(\"{}<{}>\", snippet, name));\n             }\n             (0, _, Some(\"&\")) => {\n-                suggest_new(err, \"&'lifetime \".to_string());\n+                suggest_new(err, \"&'lifetime \");\n             }\n             (0, _, Some(\"'_\")) => {\n-                suggest_new(err, \"'lifetime\".to_string());\n+                suggest_new(err, \"'lifetime\");\n             }\n             (0, _, Some(snippet)) if !snippet.ends_with(\">\") => {\n-                suggest_new(err, format!(\"{}<'lifetime>\", snippet));\n+                suggest_new(err, &format!(\"{}<'lifetime>\", snippet));\n             }\n             _ => {\n                 err.span_label(span, \"expected lifetime parameter\");"}, {"sha": "a8d6afa0e55be48c2c2b16dd00d9fcb657545f93", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 84, "deletions": 19, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/183dfac1f31cc16975bb1f598779df5689d1e729/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183dfac1f31cc16975bb1f598779df5689d1e729/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=183dfac1f31cc16975bb1f598779df5689d1e729", "patch": "@@ -153,6 +153,22 @@ struct NamedRegionMap {\n     object_lifetime_defaults: HirIdMap<Vec<ObjectLifetimeDefault>>,\n }\n \n+crate enum MissingLifetimeSpot<'tcx> {\n+    Generics(&'tcx hir::Generics<'tcx>),\n+    HRLT { span: Span, span_type: HRLTSpanType },\n+}\n+\n+crate enum HRLTSpanType {\n+    Empty,\n+    Tail,\n+}\n+\n+impl<'tcx> Into<MissingLifetimeSpot<'tcx>> for &'tcx hir::Generics<'tcx> {\n+    fn into(self) -> MissingLifetimeSpot<'tcx> {\n+        MissingLifetimeSpot::Generics(self)\n+    }\n+}\n+\n struct LifetimeContext<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     map: &'a mut NamedRegionMap,\n@@ -186,7 +202,7 @@ struct LifetimeContext<'a, 'tcx> {\n \n     /// When encountering an undefined named lifetime, we will suggest introducing it in these\n     /// places.\n-    missing_named_lifetime_spots: Vec<&'tcx hir::Generics<'tcx>>,\n+    missing_named_lifetime_spots: Vec<MissingLifetimeSpot<'tcx>>,\n }\n \n #[derive(Debug)]\n@@ -389,7 +405,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         match item.kind {\n             hir::ItemKind::Fn(ref sig, ref generics, _) => {\n-                self.missing_named_lifetime_spots.push(generics);\n+                self.missing_named_lifetime_spots.push(generics.into());\n                 self.visit_early_late(None, &sig.decl, generics, |this| {\n                     intravisit::walk_item(this, item);\n                 });\n@@ -424,7 +440,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             | hir::ItemKind::Trait(_, _, ref generics, ..)\n             | hir::ItemKind::TraitAlias(ref generics, ..)\n             | hir::ItemKind::Impl { ref generics, .. } => {\n-                self.missing_named_lifetime_spots.push(generics);\n+                self.missing_named_lifetime_spots.push(generics.into());\n \n                 // Impls permit `'_` to be used and it is equivalent to \"some fresh lifetime name\".\n                 // This is not true for other kinds of items.x\n@@ -696,7 +712,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n         use self::hir::TraitItemKind::*;\n-        self.missing_named_lifetime_spots.push(&trait_item.generics);\n+        self.missing_named_lifetime_spots.push((&trait_item.generics).into());\n         match trait_item.kind {\n             Method(ref sig, _) => {\n                 let tcx = self.tcx;\n@@ -753,7 +769,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         use self::hir::ImplItemKind::*;\n-        self.missing_named_lifetime_spots.push(&impl_item.generics);\n+        self.missing_named_lifetime_spots.push((&impl_item.generics).into());\n         match impl_item.kind {\n             Method(ref sig, _) => {\n                 let tcx = self.tcx;\n@@ -953,6 +969,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     ) {\n         debug!(\"visit_poly_trait_ref(trait_ref={:?})\", trait_ref);\n \n+        let should_pop_missing_lt = self.is_trait_ref_fn_scope(trait_ref);\n         if !self.trait_ref_hack\n             || trait_ref.bound_generic_params.iter().any(|param| match param.kind {\n                 GenericParamKind::Lifetime { .. } => true,\n@@ -988,10 +1005,13 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             self.with(scope, |old_scope, this| {\n                 this.check_lifetime_params(old_scope, &trait_ref.bound_generic_params);\n                 walk_list!(this, visit_generic_param, trait_ref.bound_generic_params);\n-                this.visit_trait_ref(&trait_ref.trait_ref)\n+                this.visit_trait_ref(&trait_ref.trait_ref);\n             })\n         } else {\n-            self.visit_trait_ref(&trait_ref.trait_ref)\n+            self.visit_trait_ref(&trait_ref.trait_ref);\n+        }\n+        if should_pop_missing_lt {\n+            self.missing_named_lifetime_spots.pop();\n         }\n     }\n }\n@@ -1832,18 +1852,41 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 lifetime_ref\n             );\n             err.span_label(lifetime_ref.span, \"undeclared lifetime\");\n-            if !self.is_in_fn_syntax {\n-                for generics in &self.missing_named_lifetime_spots {\n-                    let (span, sugg) = match &generics.params {\n-                        [] => (generics.span, format!(\"<{}>\", lifetime_ref)),\n-                        [param, ..] => (param.span.shrink_to_lo(), format!(\"{}, \", lifetime_ref)),\n-                    };\n-                    err.span_suggestion(\n-                        span,\n-                        &format!(\"consider introducing lifetime `{}` here\", lifetime_ref),\n-                        sugg,\n-                        Applicability::MaybeIncorrect,\n-                    );\n+            for missing in &self.missing_named_lifetime_spots {\n+                match missing {\n+                    MissingLifetimeSpot::Generics(generics) => {\n+                        let (span, sugg) = match &generics.params {\n+                            [] => (generics.span, format!(\"<{}>\", lifetime_ref)),\n+                            [param, ..] => {\n+                                (param.span.shrink_to_lo(), format!(\"{}, \", lifetime_ref))\n+                            }\n+                        };\n+                        err.span_suggestion(\n+                            span,\n+                            &format!(\"consider introducing lifetime `{}` here\", lifetime_ref),\n+                            sugg,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                    MissingLifetimeSpot::HRLT { span, span_type } => {\n+                        err.span_suggestion(\n+                            *span,\n+                            &format!(\n+                                \"consider introducing a Higher-Ranked lifetime `{}` here\",\n+                                lifetime_ref\n+                            ),\n+                            match span_type {\n+                                HRLTSpanType::Empty => format!(\"for<{}> \", lifetime_ref),\n+                                HRLTSpanType::Tail => format!(\", {}\", lifetime_ref),\n+                            }\n+                            .to_string(),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                        err.note(\n+                            \"for more information on Higher-Ranked lifetimes, visit \\\n+                             https://doc.rust-lang.org/nomicon/hrtb.html\",\n+                        );\n+                    }\n                 }\n             }\n             err.emit();\n@@ -2441,6 +2484,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n         let elided_len = elided_params.len();\n \n+        // FIXME: collect spans of the input params when appropriate to use in the diagnostic.\n         for (i, info) in elided_params.into_iter().enumerate() {\n             let ElisionFailureInfo { parent, index, lifetime_count: n, have_bound_regions } = info;\n \n@@ -2747,6 +2791,27 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let old_value = self.map.defs.remove(&lifetime_ref.hir_id);\n         assert_eq!(old_value, Some(bad_def));\n     }\n+\n+    fn is_trait_ref_fn_scope(&mut self, trait_ref: &'tcx hir::PolyTraitRef<'tcx>) -> bool {\n+        if let Res::Def(_, did) = trait_ref.trait_ref.path.res {\n+            if [\n+                self.tcx.lang_items().fn_once_trait(),\n+                self.tcx.lang_items().fn_trait(),\n+                self.tcx.lang_items().fn_mut_trait(),\n+            ]\n+            .contains(&Some(did))\n+            {\n+                let (span, span_type) = match &trait_ref.bound_generic_params {\n+                    [] => (trait_ref.span.shrink_to_lo(), HRLTSpanType::Empty),\n+                    [.., bound] => (bound.span.shrink_to_hi(), HRLTSpanType::Tail),\n+                };\n+                self.missing_named_lifetime_spots\n+                    .push(MissingLifetimeSpot::HRLT { span, span_type });\n+                return true;\n+            }\n+        };\n+        false\n+    }\n }\n \n /// Detects late-bound lifetimes and inserts them into"}, {"sha": "6bd120d818d0949b0550c8afd18944c9f902e6c4", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/183dfac1f31cc16975bb1f598779df5689d1e729/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183dfac1f31cc16975bb1f598779df5689d1e729/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=183dfac1f31cc16975bb1f598779df5689d1e729", "patch": "@@ -1307,12 +1307,15 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             );\n                         }\n                     };\n+                    // FIXME: point at the type params that don't have appropriate lifetimes:\n+                    // struct S1<F: for<'a> Fn(&i32, &i32) -> &'a i32>(F);\n+                    //                         ----  ----     ^^^^^^^\n                     struct_span_err!(\n                         tcx.sess,\n                         binding.span,\n                         E0582,\n                         \"binding for associated type `{}` references lifetime `{}`, \\\n-                                     which does not appear in the trait input types\",\n+                         which does not appear in the trait input types\",\n                         binding.item_name,\n                         br_name\n                     )"}, {"sha": "7d71230e162101166178e4f5ba68fc92d8d89b6a", "filename": "src/test/ui/in-band-lifetimes/no_introducing_in_band_in_locals.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/183dfac1f31cc16975bb1f598779df5689d1e729/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/183dfac1f31cc16975bb1f598779df5689d1e729/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.stderr?ref=183dfac1f31cc16975bb1f598779df5689d1e729", "patch": "@@ -9,6 +9,8 @@ LL |     let y: &'test u32 = x;\n error[E0261]: use of undeclared lifetime name `'test`\n   --> $DIR/no_introducing_in_band_in_locals.rs:10:16\n    |\n+LL | fn bar() {\n+   |       - help: consider introducing lifetime `'test` here: `<'test>`\n LL |     let y: fn(&'test u32) = foo2;\n    |                ^^^^^ undeclared lifetime\n "}, {"sha": "c5129152aa58190253dbca44721f2663a7b0c6e2", "filename": "src/test/ui/issues/issue-19707.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/183dfac1f31cc16975bb1f598779df5689d1e729/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/183dfac1f31cc16975bb1f598779df5689d1e729/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr?ref=183dfac1f31cc16975bb1f598779df5689d1e729", "patch": "@@ -17,6 +17,11 @@ LL | fn bar<F: Fn(&u8, &u8) -> &u8>(f: &F) {}\n    |                           ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+   = note: for more information on Higher-Ranked lifetimes, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider introducing a Higher-Ranked lifetime\n+   |\n+LL | fn bar<F: for<'lifetime> Fn(&u8, &u8) -> &'lifetime u8>(f: &F) {}\n+   |           ^^^^^^^^^^^^^^                 ^^^^^^^^^^\n help: consider introducing a named lifetime parameter\n    |\n LL | fn bar<'lifetime, F: Fn(&u8, &u8) -> &'lifetime u8>(f: &F) {}"}, {"sha": "cb72d1ec9bc7160bbecd4b2305537d53b407b5a7", "filename": "src/test/ui/regions/regions-name-undeclared.stderr", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/183dfac1f31cc16975bb1f598779df5689d1e729/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/183dfac1f31cc16975bb1f598779df5689d1e729/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr?ref=183dfac1f31cc16975bb1f598779df5689d1e729", "patch": "@@ -88,12 +88,32 @@ error[E0261]: use of undeclared lifetime name `'b`\n    |\n LL | ...                   &'b isize,\n    |                        ^^ undeclared lifetime\n+   |\n+   = note: for more information on Higher-Ranked lifetimes, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | fn fn_types<'b>(a: &'a isize,\n+   |            ^^^^\n+help: consider introducing a Higher-Ranked lifetime `'b` here\n+   |\n+LL |             b: Box<dyn for<'a, 'b> FnOnce(&'a isize,\n+   |                              ^^^^\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/regions-name-undeclared.rs:45:36\n    |\n LL | ...                   &'b isize)>,\n    |                        ^^ undeclared lifetime\n+   |\n+   = note: for more information on Higher-Ranked lifetimes, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | fn fn_types<'b>(a: &'a isize,\n+   |            ^^^^\n+help: consider introducing a Higher-Ranked lifetime `'b` here\n+   |\n+LL |             b: Box<dyn for<'a, 'b> FnOnce(&'a isize,\n+   |                              ^^^^\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-name-undeclared.rs:46:17"}]}