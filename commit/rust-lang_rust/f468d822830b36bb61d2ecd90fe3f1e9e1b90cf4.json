{"sha": "f468d822830b36bb61d2ecd90fe3f1e9e1b90cf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NjhkODIyODMwYjM2YmI2MWQyZWNkOTBmZTNmMWU5ZTFiOTBjZjQ=", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-03-05T20:57:37Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-03-17T16:57:42Z"}, "message": "Fix `manual_map` suggestion for `if let.. else ... if let.. else` chain", "tree": {"sha": "9d21a0777c57f5ca4825f30ebdd513143f052d5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d21a0777c57f5ca4825f30ebdd513143f052d5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f468d822830b36bb61d2ecd90fe3f1e9e1b90cf4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nComment: Created with Krypton\n\niF4EABYKAAYFAmBSNQkACgkQ2lnoZDo37QZuGAD/ZFK21CXXTMt8c7kRrUav+fa4\nf2xkA/NcgfOIRU/By6kBAMPbz47Z3T61JyaIJs8E7kt5+JAKZPCkOYw1wGE4WLgN\n=Mt9K\n-----END PGP SIGNATURE-----", "payload": "tree 9d21a0777c57f5ca4825f30ebdd513143f052d5e\nparent 6595d5571b4c498ca18ffc1fdca17b3815271df0\nauthor Jason Newcomb <jsnewcomb@pm.me> 1614977857 -0500\ncommitter Jason Newcomb <jsnewcomb@pm.me> 1616000262 -0400\n\nFix `manual_map` suggestion for `if let.. else ... if let.. else` chain\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f468d822830b36bb61d2ecd90fe3f1e9e1b90cf4", "html_url": "https://github.com/rust-lang/rust/commit/f468d822830b36bb61d2ecd90fe3f1e9e1b90cf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f468d822830b36bb61d2ecd90fe3f1e9e1b90cf4/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6595d5571b4c498ca18ffc1fdca17b3815271df0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6595d5571b4c498ca18ffc1fdca17b3815271df0", "html_url": "https://github.com/rust-lang/rust/commit/6595d5571b4c498ca18ffc1fdca17b3815271df0"}], "stats": {"total": 73, "additions": 67, "deletions": 6}, "files": [{"sha": "ed157783b723f7e7e40e0566c4a785096689680e", "filename": "clippy_lints/src/manual_map.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f468d822830b36bb61d2ecd90fe3f1e9e1b90cf4/clippy_lints%2Fsrc%2Fmanual_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f468d822830b36bb61d2ecd90fe3f1e9e1b90cf4/clippy_lints%2Fsrc%2Fmanual_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_map.rs?ref=f468d822830b36bb61d2ecd90fe3f1e9e1b90cf4", "patch": "@@ -2,13 +2,13 @@ use crate::{map_unit_fn::OPTION_MAP_UNIT_FN, matches::MATCH_AS_REF};\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::{snippet_with_applicability, snippet_with_context};\n use clippy_utils::ty::{can_partially_move_ty, is_type_diagnostic_item, peel_mid_ty_refs_is_mutable};\n-use clippy_utils::{is_allowed, match_def_path, match_var, paths, peel_hir_expr_refs};\n+use clippy_utils::{is_allowed, is_else_clause_of_if_let_else, match_def_path, match_var, paths, peel_hir_expr_refs};\n use rustc_ast::util::parser::PREC_POSTFIX;\n use rustc_errors::Applicability;\n use rustc_hir::{\n     def::Res,\n     intravisit::{walk_expr, ErasedMap, NestedVisitorMap, Visitor},\n-    Arm, BindingAnnotation, Block, Expr, ExprKind, Mutability, Pat, PatKind, Path, QPath,\n+    Arm, BindingAnnotation, Block, Expr, ExprKind, MatchSource, Mutability, Pat, PatKind, Path, QPath,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n@@ -51,8 +51,11 @@ impl LateLintPass<'_> for ManualMap {\n             return;\n         }\n \n-        if let ExprKind::Match(scrutinee, [arm1 @ Arm { guard: None, .. }, arm2 @ Arm { guard: None, .. }], _) =\n-            expr.kind\n+        if let ExprKind::Match(\n+            scrutinee,\n+            [arm1 @ Arm { guard: None, .. }, arm2 @ Arm { guard: None, .. }],\n+            match_kind,\n+        ) = expr.kind\n         {\n             let (scrutinee_ty, ty_ref_count, ty_mutability) =\n                 peel_mid_ty_refs_is_mutable(cx.typeck_results().expr_ty(scrutinee));\n@@ -178,7 +181,12 @@ impl LateLintPass<'_> for ManualMap {\n                 expr.span,\n                 \"manual implementation of `Option::map`\",\n                 \"try this\",\n-                format!(\"{}{}.map({})\", scrutinee_str, as_ref_str, body_str),\n+                if matches!(match_kind, MatchSource::IfLetDesugar { .. }) && is_else_clause_of_if_let_else(cx.tcx, expr)\n+                {\n+                    format!(\"{{ {}{}.map({}) }}\", scrutinee_str, as_ref_str, body_str)\n+                } else {\n+                    format!(\"{}{}.map({})\", scrutinee_str, as_ref_str, body_str)\n+                },\n                 app,\n             );\n         }"}, {"sha": "d5a5430546db73dea8f9c9fb162d97fdcc590e00", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f468d822830b36bb61d2ecd90fe3f1e9e1b90cf4/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f468d822830b36bb61d2ecd90fe3f1e9e1b90cf4/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=f468d822830b36bb61d2ecd90fe3f1e9e1b90cf4", "patch": "@@ -798,6 +798,26 @@ pub fn get_parent_as_impl(tcx: TyCtxt<'_>, id: HirId) -> Option<&Impl<'_>> {\n     }\n }\n \n+/// Checks if the given expression is the else clause in the expression `if let .. {} else {}`\n+pub fn is_else_clause_of_if_let_else(tcx: TyCtxt<'_>, expr: &Expr<'_>) -> bool {\n+    let map = tcx.hir();\n+    let mut iter = map.parent_iter(expr.hir_id);\n+    let arm_id = match iter.next() {\n+        Some((id, Node::Arm(..))) => id,\n+        _ => return false,\n+    };\n+    match iter.next() {\n+        Some((\n+            _,\n+            Node::Expr(Expr {\n+                kind: ExprKind::Match(_, [_, else_arm], kind),\n+                ..\n+            }),\n+        )) => else_arm.hir_id == arm_id && matches!(kind, MatchSource::IfLetDesugar { .. }),\n+        _ => false,\n+    }\n+}\n+\n /// Checks whether the given expression is a constant integer of the given value.\n /// unlike `is_integer_literal`, this version does const folding\n pub fn is_integer_const(cx: &LateContext<'_>, e: &Expr<'_>, value: u128) -> bool {"}, {"sha": "acb6a580cebd7d5e0fb9c8ab12623a4efd0f49d8", "filename": "tests/ui/manual_map_option.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f468d822830b36bb61d2ecd90fe3f1e9e1b90cf4/tests%2Fui%2Fmanual_map_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f468d822830b36bb61d2ecd90fe3f1e9e1b90cf4/tests%2Fui%2Fmanual_map_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_map_option.fixed?ref=f468d822830b36bb61d2ecd90fe3f1e9e1b90cf4", "patch": "@@ -128,4 +128,9 @@ fn main() {\n             None => None,\n         };\n     }\n+\n+    // #6847\n+    if Some(0).is_some() {\n+        Some(0)\n+    } else { Some(0).map(|x| x + 1) };\n }"}, {"sha": "3299e6177074c7cdefbb3c804ea7ef13a0043956", "filename": "tests/ui/manual_map_option.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f468d822830b36bb61d2ecd90fe3f1e9e1b90cf4/tests%2Fui%2Fmanual_map_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f468d822830b36bb61d2ecd90fe3f1e9e1b90cf4/tests%2Fui%2Fmanual_map_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_map_option.rs?ref=f468d822830b36bb61d2ecd90fe3f1e9e1b90cf4", "patch": "@@ -186,4 +186,13 @@ fn main() {\n             None => None,\n         };\n     }\n+\n+    // #6847\n+    if let Some(_) = Some(0) {\n+        Some(0)\n+    } else if let Some(x) = Some(0) {\n+        Some(x + 1)\n+    } else {\n+        None\n+    };\n }"}, {"sha": "048ccfb9582424f81b3201e8f4a590cd22f1cf0a", "filename": "tests/ui/manual_map_option.stderr", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f468d822830b36bb61d2ecd90fe3f1e9e1b90cf4/tests%2Fui%2Fmanual_map_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f468d822830b36bb61d2ecd90fe3f1e9e1b90cf4/tests%2Fui%2Fmanual_map_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_map_option.stderr?ref=f468d822830b36bb61d2ecd90fe3f1e9e1b90cf4", "patch": "@@ -172,5 +172,24 @@ LL | |         None => None,\n LL | |     };\n    | |_____^ help: try this: `option_env!(\"\").map(String::from)`\n \n-error: aborting due to 19 previous errors\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/manual_map_option.rs:191:12\n+   |\n+LL |     if let Some(_) = Some(0) {\n+   |     -------^^^^^^^---------- help: try this: `if Some(0).is_some()`\n+   |\n+   = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n+\n+error: manual implementation of `Option::map`\n+  --> $DIR/manual_map_option.rs:193:12\n+   |\n+LL |       } else if let Some(x) = Some(0) {\n+   |  ____________^\n+LL | |         Some(x + 1)\n+LL | |     } else {\n+LL | |         None\n+LL | |     };\n+   | |_____^ help: try this: `{ Some(0).map(|x| x + 1) }`\n+\n+error: aborting due to 21 previous errors\n "}]}