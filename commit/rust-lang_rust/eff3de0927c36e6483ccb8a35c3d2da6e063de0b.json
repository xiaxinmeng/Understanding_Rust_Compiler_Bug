{"sha": "eff3de0927c36e6483ccb8a35c3d2da6e063de0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZjNkZTA5MjdjMzZlNjQ4M2NjYjhhMzVjM2QyZGE2ZTA2M2RlMGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-21T13:34:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-21T13:34:09Z"}, "message": "Auto merge of #46904 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 5 pull requests\n\n- Successful merges: #46827, #46853, #46860, #46861, #46887\n- Failed merges:", "tree": {"sha": "cee7a79c7aa3c865552efc2838844519e14d5101", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cee7a79c7aa3c865552efc2838844519e14d5101"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eff3de0927c36e6483ccb8a35c3d2da6e063de0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eff3de0927c36e6483ccb8a35c3d2da6e063de0b", "html_url": "https://github.com/rust-lang/rust/commit/eff3de0927c36e6483ccb8a35c3d2da6e063de0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de38f49528b537414385d42a66dda711c8c8a309", "url": "https://api.github.com/repos/rust-lang/rust/commits/de38f49528b537414385d42a66dda711c8c8a309", "html_url": "https://github.com/rust-lang/rust/commit/de38f49528b537414385d42a66dda711c8c8a309"}, {"sha": "bdd3f5b240bac62e6e49c12313ebf9ebbc1dfea4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdd3f5b240bac62e6e49c12313ebf9ebbc1dfea4", "html_url": "https://github.com/rust-lang/rust/commit/bdd3f5b240bac62e6e49c12313ebf9ebbc1dfea4"}], "stats": {"total": 347, "additions": 248, "deletions": 99}, "files": [{"sha": "8083c1debb8ae69a5c204c8c0673a13f4f0b62ff", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=eff3de0927c36e6483ccb8a35c3d2da6e063de0b", "patch": "@@ -361,7 +361,7 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            mir::StatementKind::Assign(_, ref rhs) => {\n+            mir::StatementKind::Assign(ref lhs, ref rhs) => {\n                 // NOTE: if/when the Assign case is revised to inspect\n                 // the assigned_place here, make sure to also\n                 // re-consider the current implementations of the\n@@ -382,6 +382,22 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n                         panic!(\"could not find BorrowIndexs for region {:?}\", region);\n                     }).contains(&index));\n                     sets.gen(&ReserveOrActivateIndex::reserved(*index));\n+\n+                    if is_activations {\n+                        // Issue #46746: Two-phase borrows handles\n+                        // stmts of form `Tmp = &mut Borrow` ...\n+                        match lhs {\n+                            Place::Local(..) => {} // okay\n+                            Place::Static(..) => unreachable!(), // (filtered by is_unsafe_place)\n+                            Place::Projection(..) => {\n+                                // ... can assign into projections,\n+                                // e.g. `box (&mut _)`. Current\n+                                // conservative solution: force\n+                                // immediate activation here.\n+                                sets.gen(&ReserveOrActivateIndex::active(*index));\n+                            }\n+                        }\n+                    }\n                 }\n             }\n "}, {"sha": "f29009c1973a274e017c6850718bd78379f763be", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=eff3de0927c36e6483ccb8a35c3d2da6e063de0b", "patch": "@@ -122,7 +122,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                impl_ty);\n                         if let Some(note_span) = note_span {\n                             // We have a span pointing to the method. Show note with snippet.\n-                            err.span_note(note_span, &note_str);\n+                            err.span_note(self.tcx.sess.codemap().def_span(note_span), &note_str);\n                         } else {\n                             err.note(&note_str);\n                         }\n@@ -131,7 +131,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         let item = self\n                             .associated_item(trait_did, item_name, Namespace::Value)\n                             .unwrap();\n-                        let item_span = self.tcx.def_span(item.def_id);\n+                        let item_span = self.tcx.sess.codemap()\n+                            .def_span(self.tcx.def_span(item.def_id));\n                         span_note!(err,\n                                    item_span,\n                                    \"candidate #{} is defined in the trait `{}`\","}, {"sha": "559f8494fc3c0a4d863022f1c14698fbc15e8876", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=eff3de0927c36e6483ccb8a35c3d2da6e063de0b", "patch": "@@ -109,24 +109,32 @@\n     function showSidebar() {\n         var elems = document.getElementsByClassName(\"sidebar-elems\")[0];\n         if (elems) {\n-            elems.style.display = \"block\";\n+            addClass(elems, \"show-it\");\n         }\n         var sidebar = document.getElementsByClassName('sidebar')[0];\n-        sidebar.style.position = 'fixed';\n-        sidebar.style.width = '100%';\n-        sidebar.style.marginLeft = '0';\n+        if (sidebar) {\n+            addClass(sidebar, 'mobile');\n+            var filler = document.getElementById(\"sidebar-filler\");\n+            if (!filler) {\n+                var div = document.createElement(\"div\");\n+                div.id = \"sidebar-filler\";\n+                sidebar.appendChild(div);\n+            }\n+        }\n         document.getElementsByTagName(\"body\")[0].style.marginTop = '45px';\n     }\n \n     function hideSidebar() {\n         var elems = document.getElementsByClassName(\"sidebar-elems\")[0];\n         if (elems) {\n-            elems.style.display = \"\";\n+            removeClass(elems, \"show-it\");\n         }\n         var sidebar = document.getElementsByClassName('sidebar')[0];\n-        sidebar.style.position = '';\n-        sidebar.style.width = '';\n-        sidebar.style.marginLeft = '';\n+        removeClass(sidebar, 'mobile');\n+        var filler = document.getElementById(\"sidebar-filler\");\n+        if (filler) {\n+            filler.remove();\n+        }\n         document.getElementsByTagName(\"body\")[0].style.marginTop = '';\n     }\n \n@@ -1859,7 +1867,7 @@\n     if (sidebar_menu) {\n         sidebar_menu.onclick = function() {\n             var sidebar = document.getElementsByClassName('sidebar')[0];\n-            if (sidebar.style.position === \"fixed\") {\n+            if (hasClass(sidebar, \"mobile\") === true) {\n                 hideSidebar();\n             } else {\n                 showSidebar();"}, {"sha": "b41874a56b8e722e357fb3dc67769f8c9cf3aee4", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=eff3de0927c36e6483ccb8a35c3d2da6e063de0b", "patch": "@@ -1020,6 +1020,33 @@ h4 > .important-traits {\n \t#titles {\n \t\theight: 50px;\n \t}\n+\n+\t.sidebar.mobile {\n+\t\tposition: fixed;\n+\t\twidth: 100%;\n+\t\tmargin-left: 0;\n+\t\tbackground-color: rgba(0,0,0,0);\n+\t\theight: 100%;\n+\t}\n+\n+\t.show-it {\n+\t\tdisplay: block;\n+\t}\n+\n+\t/* Because of ios, we need to actually have a full height sidebar title so the\n+\t * actual sidebar can show up. But then we need to make it transparent so we don't\n+\t * hide content. The filler just allows to create the background for the sidebar\n+\t * title. But because of the absolute position, I had to lower the z-index.\n+\t */\n+\t#sidebar-filler {\n+\t\tposition: fixed;\n+\t\tleft: 45px;\n+\t\twidth: calc(100% - 45px);\n+\t\ttop: 0;\n+\t\theight: 45px;\n+\t\tz-index: -1;\n+\t\tborder-bottom: 1px solid;\n+\t}\n }\n \n "}, {"sha": "c79413c0852cec3de8c876fd2361790c4db10ecd", "filename": "src/librustdoc/html/static/styles/main.css", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css?ref=eff3de0927c36e6483ccb8a35c3d2da6e063de0b", "patch": "@@ -191,7 +191,7 @@ a.test-arrow {\n \n #help > div {\n \tbackground: #e9e9e9;\n-\tborder-color: #bfbfbf;;\n+\tborder-color: #bfbfbf;\n }\n \n #help dt {\n@@ -342,4 +342,9 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \t\tbackground-color: #F1F1F1;\n \t\tborder-right-color: #000;\n \t}\n+\n+\t#sidebar-filler {\n+\t\tbackground-color: #F1F1F1;\n+\t\tborder-bottom-color: #e0e0e0;\n+\t}\n }"}, {"sha": "e9b707c57ebbf57a6f043d9873b26ef4e521a916", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=eff3de0927c36e6483ccb8a35c3d2da6e063de0b", "patch": "@@ -441,7 +441,7 @@ fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize>\n /// # }\n /// ```\n ///\n-/// Read from `&str` because [`&[u8]`] implements `Read`:\n+/// Read from [`&str`] because [`&[u8]`][slice] implements `Read`:\n ///\n /// ```\n /// # use std::io;\n@@ -464,7 +464,8 @@ fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize>\n /// [`File`]: ../fs/struct.File.html\n /// [`BufRead`]: trait.BufRead.html\n /// [`BufReader`]: struct.BufReader.html\n-/// [`&[u8]`]: primitive.slice.html\n+/// [`&str`]: ../../std/primitive.str.html\n+/// [slice]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(spotlight)]\n pub trait Read {"}, {"sha": "1d399f159c8153a01d18993cac6922fcd52635e9", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 25, "deletions": 56, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=eff3de0927c36e6483ccb8a35c3d2da6e063de0b", "patch": "@@ -20,7 +20,6 @@ use syntax_pos::{Span, DUMMY_SP};\n use codemap::{respan, Spanned};\n use abi::Abi;\n use ext::hygiene::{Mark, SyntaxContext};\n-use parse::parser::{RecoverQPath, PathStyle};\n use print::pprust;\n use ptr::P;\n use rustc_data_structures::indexed_vec;\n@@ -485,6 +484,30 @@ impl fmt::Debug for Pat {\n }\n \n impl Pat {\n+    pub(super) fn to_ty(&self) -> Option<P<Ty>> {\n+        let node = match &self.node {\n+            PatKind::Wild => TyKind::Infer,\n+            PatKind::Ident(BindingMode::ByValue(Mutability::Immutable), ident, None) =>\n+                TyKind::Path(None, Path::from_ident(ident.span, ident.node)),\n+            PatKind::Path(qself, path) => TyKind::Path(qself.clone(), path.clone()),\n+            PatKind::Mac(mac) => TyKind::Mac(mac.clone()),\n+            PatKind::Ref(pat, mutbl) =>\n+                pat.to_ty().map(|ty| TyKind::Rptr(None, MutTy { ty, mutbl: *mutbl }))?,\n+            PatKind::Slice(pats, None, _) if pats.len() == 1 =>\n+                pats[0].to_ty().map(TyKind::Slice)?,\n+            PatKind::Tuple(pats, None) => {\n+                let mut tys = Vec::new();\n+                for pat in pats {\n+                    tys.push(pat.to_ty()?);\n+                }\n+                TyKind::Tup(tys)\n+            }\n+            _ => return None,\n+        };\n+\n+        Some(P(Ty { node, id: self.id, span: self.span }))\n+    }\n+\n     pub fn walk<F>(&self, it: &mut F) -> bool\n         where F: FnMut(&Pat) -> bool\n     {\n@@ -520,38 +543,6 @@ impl Pat {\n     }\n }\n \n-impl RecoverQPath for Pat {\n-    fn to_ty(&self) -> Option<P<Ty>> {\n-        let node = match &self.node {\n-            PatKind::Wild => TyKind::Infer,\n-            PatKind::Ident(BindingMode::ByValue(Mutability::Immutable), ident, None) =>\n-                TyKind::Path(None, Path::from_ident(ident.span, ident.node)),\n-            PatKind::Path(qself, path) => TyKind::Path(qself.clone(), path.clone()),\n-            PatKind::Mac(mac) => TyKind::Mac(mac.clone()),\n-            PatKind::Ref(pat, mutbl) =>\n-                pat.to_ty().map(|ty| TyKind::Rptr(None, MutTy { ty, mutbl: *mutbl }))?,\n-            PatKind::Slice(pats, None, _) if pats.len() == 1 =>\n-                pats[0].to_ty().map(TyKind::Slice)?,\n-            PatKind::Tuple(pats, None) => {\n-                let mut tys = Vec::new();\n-                for pat in pats {\n-                    tys.push(pat.to_ty()?);\n-                }\n-                TyKind::Tup(tys)\n-            }\n-            _ => return None,\n-        };\n-\n-        Some(P(Ty { node, id: self.id, span: self.span }))\n-    }\n-    fn to_recovered(&self, qself: Option<QSelf>, path: Path) -> Self {\n-        Self { span: path.span, node: PatKind::Path(qself, path), id: self.id }\n-    }\n-    fn to_string(&self) -> String {\n-        pprust::pat_to_string(self)\n-    }\n-}\n-\n /// A single field in a struct pattern\n ///\n /// Patterns like the fields of Foo `{ x, ref y, ref mut z }`\n@@ -919,10 +910,8 @@ impl Expr {\n             _ => None,\n         }\n     }\n-}\n \n-impl RecoverQPath for Expr {\n-    fn to_ty(&self) -> Option<P<Ty>> {\n+    pub(super) fn to_ty(&self) -> Option<P<Ty>> {\n         let node = match &self.node {\n             ExprKind::Path(qself, path) => TyKind::Path(qself.clone(), path.clone()),\n             ExprKind::Mac(mac) => TyKind::Mac(mac.clone()),\n@@ -951,13 +940,6 @@ impl RecoverQPath for Expr {\n \n         Some(P(Ty { node, id: self.id, span: self.span }))\n     }\n-    fn to_recovered(&self, qself: Option<QSelf>, path: Path) -> Self {\n-        Self { span: path.span, node: ExprKind::Path(qself, path),\n-               id: self.id, attrs: self.attrs.clone() }\n-    }\n-    fn to_string(&self) -> String {\n-        pprust::expr_to_string(self)\n-    }\n }\n \n impl fmt::Debug for Expr {\n@@ -1469,19 +1451,6 @@ pub struct Ty {\n     pub span: Span,\n }\n \n-impl RecoverQPath for Ty {\n-    fn to_ty(&self) -> Option<P<Ty>> {\n-        Some(P(self.clone()))\n-    }\n-    fn to_recovered(&self, qself: Option<QSelf>, path: Path) -> Self {\n-        Self { span: path.span, node: TyKind::Path(qself, path), id: self.id }\n-    }\n-    fn to_string(&self) -> String {\n-        pprust::ty_to_string(self)\n-    }\n-    const PATH_STYLE: PathStyle = PathStyle::Type;\n-}\n-\n impl fmt::Debug for Ty {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"type({})\", pprust::ty_to_string(self))"}, {"sha": "d943453924689f502788520f5f224c057a7a97cc", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 51, "deletions": 11, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=eff3de0927c36e6483ccb8a35c3d2da6e063de0b", "patch": "@@ -169,11 +169,49 @@ enum PrevTokenKind {\n     Other,\n }\n \n-pub(crate) trait RecoverQPath: Sized {\n+trait RecoverQPath: Sized {\n+    const PATH_STYLE: PathStyle = PathStyle::Expr;\n     fn to_ty(&self) -> Option<P<Ty>>;\n     fn to_recovered(&self, qself: Option<QSelf>, path: ast::Path) -> Self;\n     fn to_string(&self) -> String;\n-    const PATH_STYLE: PathStyle = PathStyle::Expr;\n+}\n+\n+impl RecoverQPath for Ty {\n+    const PATH_STYLE: PathStyle = PathStyle::Type;\n+    fn to_ty(&self) -> Option<P<Ty>> {\n+        Some(P(self.clone()))\n+    }\n+    fn to_recovered(&self, qself: Option<QSelf>, path: ast::Path) -> Self {\n+        Self { span: path.span, node: TyKind::Path(qself, path), id: self.id }\n+    }\n+    fn to_string(&self) -> String {\n+        pprust::ty_to_string(self)\n+    }\n+}\n+\n+impl RecoverQPath for Pat {\n+    fn to_ty(&self) -> Option<P<Ty>> {\n+        self.to_ty()\n+    }\n+    fn to_recovered(&self, qself: Option<QSelf>, path: ast::Path) -> Self {\n+        Self { span: path.span, node: PatKind::Path(qself, path), id: self.id }\n+    }\n+    fn to_string(&self) -> String {\n+        pprust::pat_to_string(self)\n+    }\n+}\n+\n+impl RecoverQPath for Expr {\n+    fn to_ty(&self) -> Option<P<Ty>> {\n+        self.to_ty()\n+    }\n+    fn to_recovered(&self, qself: Option<QSelf>, path: ast::Path) -> Self {\n+        Self { span: path.span, node: ExprKind::Path(qself, path),\n+               id: self.id, attrs: self.attrs.clone() }\n+    }\n+    fn to_string(&self) -> String {\n+        pprust::expr_to_string(self)\n+    }\n }\n \n /* ident is handled by common.rs */\n@@ -1432,7 +1470,7 @@ impl<'a> Parser<'a> {\n \n     // Parse a type\n     pub fn parse_ty(&mut self) -> PResult<'a, P<Ty>> {\n-        self.parse_ty_common(true)\n+        self.parse_ty_common(true, true)\n     }\n \n     /// Parse a type in restricted contexts where `+` is not permitted.\n@@ -1441,10 +1479,11 @@ impl<'a> Parser<'a> {\n     /// Example 2: `value1 as TYPE + value2`\n     ///     `+` is prohibited to avoid interactions with expression grammar.\n     fn parse_ty_no_plus(&mut self) -> PResult<'a, P<Ty>> {\n-        self.parse_ty_common(false)\n+        self.parse_ty_common(false, true)\n     }\n \n-    fn parse_ty_common(&mut self, allow_plus: bool) -> PResult<'a, P<Ty>> {\n+    fn parse_ty_common(&mut self, allow_plus: bool, allow_qpath_recovery: bool)\n+                       -> PResult<'a, P<Ty>> {\n         maybe_whole!(self, NtTy, |x| x);\n \n         let lo = self.span;\n@@ -1577,7 +1616,7 @@ impl<'a> Parser<'a> {\n \n         // Try to recover from use of `+` with incorrect priority.\n         self.maybe_recover_from_bad_type_plus(allow_plus, &ty)?;\n-        let ty = self.maybe_recover_from_bad_qpath(ty)?;\n+        let ty = self.maybe_recover_from_bad_qpath(ty, allow_qpath_recovery)?;\n \n         Ok(P(ty))\n     }\n@@ -1633,9 +1672,10 @@ impl<'a> Parser<'a> {\n     }\n \n     // Try to recover from associated item paths like `[T]::AssocItem`/`(T, U)::AssocItem`.\n-    fn maybe_recover_from_bad_qpath<T: RecoverQPath>(&mut self, base: T) -> PResult<'a, T> {\n+    fn maybe_recover_from_bad_qpath<T: RecoverQPath>(&mut self, base: T, allow_recovery: bool)\n+                                                     -> PResult<'a, T> {\n         // Do not add `::` to expected tokens.\n-        if self.token != token::ModSep {\n+        if !allow_recovery || self.token != token::ModSep {\n             return Ok(base);\n         }\n         let ty = match base.to_ty() {\n@@ -1969,7 +2009,7 @@ impl<'a> Parser<'a> {\n                     |p| p.parse_ty())?;\n                 self.bump(); // `)`\n                 let output = if self.eat(&token::RArrow) {\n-                    Some(self.parse_ty_no_plus()?)\n+                    Some(self.parse_ty_common(false, false)?)\n                 } else {\n                     None\n                 };\n@@ -2376,7 +2416,7 @@ impl<'a> Parser<'a> {\n         }\n \n         let expr = Expr { node: ex, span: lo.to(hi), id: ast::DUMMY_NODE_ID, attrs };\n-        let expr = self.maybe_recover_from_bad_qpath(expr)?;\n+        let expr = self.maybe_recover_from_bad_qpath(expr, true)?;\n \n         return Ok(P(expr));\n     }\n@@ -3743,7 +3783,7 @@ impl<'a> Parser<'a> {\n         }\n \n         let pat = Pat { node: pat, span: lo.to(self.prev_span), id: ast::DUMMY_NODE_ID };\n-        let pat = self.maybe_recover_from_bad_qpath(pat)?;\n+        let pat = self.maybe_recover_from_bad_qpath(pat, true)?;\n \n         Ok(P(pat))\n     }"}, {"sha": "779aa952c81b9d0848c34355f8aa4aebfcb2e399", "filename": "src/test/ui/did_you_mean/bad-assoc-expr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.rs?ref=eff3de0927c36e6483ccb8a35c3d2da6e063de0b", "patch": "@@ -21,4 +21,10 @@ fn main() {\n \n     (u8, u8)::clone(&(0, 0));\n     //~^ ERROR missing angle brackets in associated item path\n+\n+    &(u8)::clone(&0);\n+    //~^ ERROR missing angle brackets in associated item path\n+\n+    10 + (u8)::clone(&0);\n+    //~^ ERROR missing angle brackets in associated item path\n }"}, {"sha": "1affdc5fda208965baab0b33f5fcc0a9874c5d17", "filename": "src/test/ui/did_you_mean/bad-assoc-expr.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.stderr?ref=eff3de0927c36e6483ccb8a35c3d2da6e063de0b", "patch": "@@ -22,5 +22,17 @@ error: missing angle brackets in associated item path\n 22 |     (u8, u8)::clone(&(0, 0));\n    |     ^^^^^^^^^^^^^^^ help: try: `<(u8, u8)>::clone`\n \n-error: aborting due to 4 previous errors\n+error: missing angle brackets in associated item path\n+  --> $DIR/bad-assoc-expr.rs:25:6\n+   |\n+25 |     &(u8)::clone(&0);\n+   |      ^^^^^^^^^^^ help: try: `<(u8)>::clone`\n+\n+error: missing angle brackets in associated item path\n+  --> $DIR/bad-assoc-expr.rs:28:10\n+   |\n+28 |     10 + (u8)::clone(&0);\n+   |          ^^^^^^^^^^^ help: try: `<(u8)>::clone`\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "bf6be0ee98545c9749672222438346791ecb9fb2", "filename": "src/test/ui/did_you_mean/bad-assoc-pat.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.rs?ref=eff3de0927c36e6483ccb8a35c3d2da6e063de0b", "patch": "@@ -20,4 +20,9 @@ fn main() {\n         //~^ ERROR missing angle brackets in associated item path\n         //~| ERROR no associated item named `AssocItem` found for type `_` in the current scope\n     }\n+    match &0u8 {\n+        &(u8,)::AssocItem => {}\n+        //~^ ERROR missing angle brackets in associated item path\n+        //~| ERROR no associated item named `AssocItem` found for type `(u8,)` in the current scope\n+    }\n }"}, {"sha": "1ca4576d88f609203ec8359d0a0bbfdd2708074f", "filename": "src/test/ui/did_you_mean/bad-assoc-pat.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr?ref=eff3de0927c36e6483ccb8a35c3d2da6e063de0b", "patch": "@@ -16,6 +16,12 @@ error: missing angle brackets in associated item path\n 19 |         _::AssocItem => {}\n    |         ^^^^^^^^^^^^ help: try: `<_>::AssocItem`\n \n+error: missing angle brackets in associated item path\n+  --> $DIR/bad-assoc-pat.rs:24:10\n+   |\n+24 |         &(u8,)::AssocItem => {}\n+   |          ^^^^^^^^^^^^^^^^ help: try: `<(u8,)>::AssocItem`\n+\n error[E0599]: no associated item named `AssocItem` found for type `[u8]` in the current scope\n   --> $DIR/bad-assoc-pat.rs:13:9\n    |\n@@ -34,5 +40,11 @@ error[E0599]: no associated item named `AssocItem` found for type `_` in the cur\n 19 |         _::AssocItem => {}\n    |         ^^^^^^^^^^^^ associated item not found in `_`\n \n-error: aborting due to 6 previous errors\n+error[E0599]: no associated item named `AssocItem` found for type `(u8,)` in the current scope\n+  --> $DIR/bad-assoc-pat.rs:24:10\n+   |\n+24 |         &(u8,)::AssocItem => {}\n+   |          ^^^^^^^^^^^^^^^^ associated item not found in `(u8,)`\n+\n+error: aborting due to 8 previous errors\n "}, {"sha": "b4a59904ee4b56198e9ce8664db3577463e8fbf5", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs?ref=eff3de0927c36e6483ccb8a35c3d2da6e063de0b", "patch": "@@ -28,4 +28,19 @@ type E = _::AssocTy;\n //~^ ERROR missing angle brackets in associated item path\n //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n \n+type F = &'static (u8)::AssocTy;\n+//~^ ERROR missing angle brackets in associated item path\n+//~| ERROR ambiguous associated type\n+\n+// Qualified paths cannot appear in bounds, so the recovery\n+// should apply to the whole sum and not `(Send)`.\n+type G = 'static + (Send)::AssocTy;\n+//~^ ERROR missing angle brackets in associated item path\n+//~| ERROR ambiguous associated type\n+\n+// This is actually a legal path with fn-like generic arguments in the middle!\n+// Recovery should not apply in this context.\n+type H = Fn(u8) -> (u8)::Output;\n+//~^ ERROR ambiguous associated type\n+\n fn main() {}"}, {"sha": "c44dc5a0468809a0496c0fb3a433c1b7107d9db5", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=eff3de0927c36e6483ccb8a35c3d2da6e063de0b", "patch": "@@ -28,6 +28,18 @@ error: missing angle brackets in associated item path\n 27 | type E = _::AssocTy;\n    |          ^^^^^^^^^^ help: try: `<_>::AssocTy`\n \n+error: missing angle brackets in associated item path\n+  --> $DIR/bad-assoc-ty.rs:31:19\n+   |\n+31 | type F = &'static (u8)::AssocTy;\n+   |                   ^^^^^^^^^^^^^ help: try: `<(u8)>::AssocTy`\n+\n+error: missing angle brackets in associated item path\n+  --> $DIR/bad-assoc-ty.rs:37:10\n+   |\n+37 | type G = 'static + (Send)::AssocTy;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `<'static + Send>::AssocTy`\n+\n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:11:10\n    |\n@@ -66,5 +78,29 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n 27 | type E = _::AssocTy;\n    |          ^ not allowed in type signatures\n \n-error: aborting due to 10 previous errors\n+error[E0223]: ambiguous associated type\n+  --> $DIR/bad-assoc-ty.rs:31:19\n+   |\n+31 | type F = &'static (u8)::AssocTy;\n+   |                   ^^^^^^^^^^^^^ ambiguous associated type\n+   |\n+   = note: specify the type using the syntax `<u8 as Trait>::AssocTy`\n+\n+error[E0223]: ambiguous associated type\n+  --> $DIR/bad-assoc-ty.rs:37:10\n+   |\n+37 | type G = 'static + (Send)::AssocTy;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n+   |\n+   = note: specify the type using the syntax `<std::marker::Send + 'static as Trait>::AssocTy`\n+\n+error[E0223]: ambiguous associated type\n+  --> $DIR/bad-assoc-ty.rs:43:10\n+   |\n+43 | type H = Fn(u8) -> (u8)::Output;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n+   |\n+   = note: specify the type using the syntax `<std::ops::Fn(u8) -> u8 + 'static as Trait>::Output`\n+\n+error: aborting due to 15 previous errors\n "}, {"sha": "e9a1fe82f142aeafffeb467364181365a8d08c70", "filename": "src/test/ui/span/issue-37767.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Ftest%2Fui%2Fspan%2Fissue-37767.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Ftest%2Fui%2Fspan%2Fissue-37767.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-37767.stderr?ref=eff3de0927c36e6483ccb8a35c3d2da6e063de0b", "patch": "@@ -8,13 +8,13 @@ note: candidate #1 is defined in the trait `A`\n   --> $DIR/issue-37767.rs:12:5\n    |\n 12 |     fn foo(&mut self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^\n    = help: to disambiguate the method call, write `A::foo(&a)` instead\n note: candidate #2 is defined in the trait `B`\n   --> $DIR/issue-37767.rs:16:5\n    |\n 16 |     fn foo(&mut self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^\n    = help: to disambiguate the method call, write `B::foo(&a)` instead\n \n error[E0034]: multiple applicable items in scope\n@@ -27,13 +27,13 @@ note: candidate #1 is defined in the trait `C`\n   --> $DIR/issue-37767.rs:24:5\n    |\n 24 |     fn foo(&self) {}\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^\n    = help: to disambiguate the method call, write `C::foo(&a)` instead\n note: candidate #2 is defined in the trait `D`\n   --> $DIR/issue-37767.rs:28:5\n    |\n 28 |     fn foo(&self) {}\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^\n    = help: to disambiguate the method call, write `D::foo(&a)` instead\n \n error[E0034]: multiple applicable items in scope\n@@ -46,13 +46,13 @@ note: candidate #1 is defined in the trait `E`\n   --> $DIR/issue-37767.rs:36:5\n    |\n 36 |     fn foo(self) {}\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^\n    = help: to disambiguate the method call, write `E::foo(a)` instead\n note: candidate #2 is defined in the trait `F`\n   --> $DIR/issue-37767.rs:40:5\n    |\n 40 |     fn foo(self) {}\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^\n    = help: to disambiguate the method call, write `F::foo(a)` instead\n \n error: aborting due to 3 previous errors"}, {"sha": "aeb98e4cabc26d97493c23a1e933891aa2ab4f8a", "filename": "src/test/ui/span/issue-7575.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eff3de0927c36e6483ccb8a35c3d2da6e063de0b/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr?ref=eff3de0927c36e6483ccb8a35c3d2da6e063de0b", "patch": "@@ -44,10 +44,8 @@ error[E0599]: no method named `fff` found for type `Myisize` in the current scop\n note: candidate #1 is defined in an impl for the type `Myisize`\n   --> $DIR/issue-7575.rs:51:5\n    |\n-51 | /     fn fff(i: isize) -> isize {\n-52 | |         i\n-53 | |     }\n-   | |_____^\n+51 |     fn fff(i: isize) -> isize {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0599]: no method named `is_str` found for type `T` in the current scope\n   --> $DIR/issue-7575.rs:82:7\n@@ -60,10 +58,8 @@ error[E0599]: no method named `is_str` found for type `T` in the current scope\n note: candidate #1 is defined in the trait `ManyImplTrait`\n   --> $DIR/issue-7575.rs:57:5\n    |\n-57 | /     fn is_str() -> bool {\n-58 | |         false\n-59 | |     }\n-   | |_____^\n+57 |     fn is_str() -> bool {\n+   |     ^^^^^^^^^^^^^^^^^^^\n    = help: to disambiguate the method call, write `ManyImplTrait::is_str(t)` instead\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `is_str`, perhaps you need to implement it:"}]}