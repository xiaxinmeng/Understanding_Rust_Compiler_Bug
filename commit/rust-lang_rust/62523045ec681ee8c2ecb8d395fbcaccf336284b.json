{"sha": "62523045ec681ee8c2ecb8d395fbcaccf336284b", "node_id": "C_kwDOAAsO6NoAKDYyNTIzMDQ1ZWM2ODFlZThjMmVjYjhkMzk1ZmJjYWNjZjMzNjI4NGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-27T21:36:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-27T21:36:42Z"}, "message": "Auto merge of #95382 - Dylan-DPC:rollup-bebyfd1, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #94939 (diagnostics: suggest missing comma in bad FRU syntax)\n - #95120 (Implement `apply_switch_int_edge_effects` for backward analyses)\n - #95364 (Add long error explanation for E0667)\n - #95366 (Remove test files with duplicated checksums)\n - #95368 (Fix typo in `String::try_reserve_exact` docs)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "70b78bc300ece7730925ac2914c0660d69395d38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70b78bc300ece7730925ac2914c0660d69395d38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62523045ec681ee8c2ecb8d395fbcaccf336284b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62523045ec681ee8c2ecb8d395fbcaccf336284b", "html_url": "https://github.com/rust-lang/rust/commit/62523045ec681ee8c2ecb8d395fbcaccf336284b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62523045ec681ee8c2ecb8d395fbcaccf336284b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab0c2e18dceb7140626a158affb983ae81039bd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab0c2e18dceb7140626a158affb983ae81039bd0", "html_url": "https://github.com/rust-lang/rust/commit/ab0c2e18dceb7140626a158affb983ae81039bd0"}, {"sha": "eca25311558ed55825189afb2af6a7ea47e3a564", "url": "https://api.github.com/repos/rust-lang/rust/commits/eca25311558ed55825189afb2af6a7ea47e3a564", "html_url": "https://github.com/rust-lang/rust/commit/eca25311558ed55825189afb2af6a7ea47e3a564"}], "stats": {"total": 367, "additions": 287, "deletions": 80}, "files": [{"sha": "61a177f291ba0e71245a8b6d6c5f290757f3f26a", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62523045ec681ee8c2ecb8d395fbcaccf336284b/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62523045ec681ee8c2ecb8d395fbcaccf336284b/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=62523045ec681ee8c2ecb8d395fbcaccf336284b", "patch": "@@ -394,6 +394,7 @@ E0663: include_str!(\"./error_codes/E0663.md\"),\n E0664: include_str!(\"./error_codes/E0664.md\"),\n E0665: include_str!(\"./error_codes/E0665.md\"),\n E0666: include_str!(\"./error_codes/E0666.md\"),\n+E0667: include_str!(\"./error_codes/E0667.md\"),\n E0668: include_str!(\"./error_codes/E0668.md\"),\n E0669: include_str!(\"./error_codes/E0669.md\"),\n E0670: include_str!(\"./error_codes/E0670.md\"),\n@@ -633,7 +634,6 @@ E0787: include_str!(\"./error_codes/E0787.md\"),\n            // attribute\n     E0640, // infer outlives requirements\n //  E0645, // trait aliases not finished\n-    E0667, // `impl Trait` in projections\n //  E0694, // an unknown tool name found in scoped attributes\n //  E0702, // replaced with a generic attribute input check\n //  E0707, // multiple elided lifetimes used in arguments of `async fn`"}, {"sha": "0709a24c4331242bab2461f4241ea8920221201b", "filename": "compiler/rustc_error_codes/src/error_codes/E0667.md", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/62523045ec681ee8c2ecb8d395fbcaccf336284b/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0667.md", "raw_url": "https://github.com/rust-lang/rust/raw/62523045ec681ee8c2ecb8d395fbcaccf336284b/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0667.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0667.md?ref=62523045ec681ee8c2ecb8d395fbcaccf336284b", "patch": "@@ -0,0 +1,18 @@\n+`impl Trait` is not allowed in path parameters.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0667\n+fn some_fn(mut x: impl Iterator) -> <impl Iterator>::Item { // error!\n+    x.next().unwrap()\n+}\n+```\n+\n+You cannot use `impl Trait` in path parameters. If you want something\n+equivalent, you can do this instead:\n+\n+```\n+fn some_fn<T: Iterator>(mut x: T) -> T::Item { // ok!\n+    x.next().unwrap()\n+}\n+```"}, {"sha": "eec6eed311bc3e4030010461465a8ff504f7ec86", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/62523045ec681ee8c2ecb8d395fbcaccf336284b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62523045ec681ee8c2ecb8d395fbcaccf336284b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=62523045ec681ee8c2ecb8d395fbcaccf336284b", "patch": "@@ -45,6 +45,7 @@ use std::{iter, mem, option};\n use self::graph_cyclic_cache::GraphIsCyclicCache;\n use self::predecessors::{PredecessorCache, Predecessors};\n pub use self::query::*;\n+use self::switch_sources::{SwitchSourceCache, SwitchSources};\n \n pub mod coverage;\n mod generic_graph;\n@@ -58,6 +59,7 @@ mod predecessors;\n pub mod pretty;\n mod query;\n pub mod spanview;\n+mod switch_sources;\n pub mod tcx;\n pub mod terminator;\n pub use terminator::*;\n@@ -296,6 +298,7 @@ pub struct Body<'tcx> {\n     pub is_polymorphic: bool,\n \n     predecessor_cache: PredecessorCache,\n+    switch_source_cache: SwitchSourceCache,\n     is_cyclic: GraphIsCyclicCache,\n \n     pub tainted_by_errors: Option<ErrorGuaranteed>,\n@@ -344,6 +347,7 @@ impl<'tcx> Body<'tcx> {\n             required_consts: Vec::new(),\n             is_polymorphic: false,\n             predecessor_cache: PredecessorCache::new(),\n+            switch_source_cache: SwitchSourceCache::new(),\n             is_cyclic: GraphIsCyclicCache::new(),\n             tainted_by_errors,\n         };\n@@ -372,6 +376,7 @@ impl<'tcx> Body<'tcx> {\n             var_debug_info: Vec::new(),\n             is_polymorphic: false,\n             predecessor_cache: PredecessorCache::new(),\n+            switch_source_cache: SwitchSourceCache::new(),\n             is_cyclic: GraphIsCyclicCache::new(),\n             tainted_by_errors: None,\n         };\n@@ -392,6 +397,7 @@ impl<'tcx> Body<'tcx> {\n         // FIXME: Use a finer-grained API for this, so only transformations that alter terminators\n         // invalidate the caches.\n         self.predecessor_cache.invalidate();\n+        self.switch_source_cache.invalidate();\n         self.is_cyclic.invalidate();\n         &mut self.basic_blocks\n     }\n@@ -401,6 +407,7 @@ impl<'tcx> Body<'tcx> {\n         &mut self,\n     ) -> (&mut IndexVec<BasicBlock, BasicBlockData<'tcx>>, &mut LocalDecls<'tcx>) {\n         self.predecessor_cache.invalidate();\n+        self.switch_source_cache.invalidate();\n         self.is_cyclic.invalidate();\n         (&mut self.basic_blocks, &mut self.local_decls)\n     }\n@@ -414,6 +421,7 @@ impl<'tcx> Body<'tcx> {\n         &mut Vec<VarDebugInfo<'tcx>>,\n     ) {\n         self.predecessor_cache.invalidate();\n+        self.switch_source_cache.invalidate();\n         self.is_cyclic.invalidate();\n         (&mut self.basic_blocks, &mut self.local_decls, &mut self.var_debug_info)\n     }\n@@ -541,6 +549,11 @@ impl<'tcx> Body<'tcx> {\n         self.predecessor_cache.compute(&self.basic_blocks)\n     }\n \n+    #[inline]\n+    pub fn switch_sources(&self) -> &SwitchSources {\n+        self.switch_source_cache.compute(&self.basic_blocks)\n+    }\n+\n     #[inline]\n     pub fn dominators(&self) -> Dominators<BasicBlock> {\n         dominators(self)"}, {"sha": "7f62b4d0dbab947efe98704f35f870ba18f96feb", "filename": "compiler/rustc_middle/src/mir/switch_sources.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/62523045ec681ee8c2ecb8d395fbcaccf336284b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62523045ec681ee8c2ecb8d395fbcaccf336284b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs?ref=62523045ec681ee8c2ecb8d395fbcaccf336284b", "patch": "@@ -0,0 +1,82 @@\n+//! Lazily compute the inverse of each `SwitchInt`'s switch targets. Modeled after\n+//! `Predecessors`/`PredecessorCache`.\n+\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::sync::OnceCell;\n+use rustc_index::vec::IndexVec;\n+use rustc_serialize as serialize;\n+use smallvec::SmallVec;\n+\n+use crate::mir::{BasicBlock, BasicBlockData, Terminator, TerminatorKind};\n+\n+pub type SwitchSources = IndexVec<BasicBlock, IndexVec<BasicBlock, SmallVec<[Option<u128>; 1]>>>;\n+\n+#[derive(Clone, Debug)]\n+pub(super) struct SwitchSourceCache {\n+    cache: OnceCell<SwitchSources>,\n+}\n+\n+impl SwitchSourceCache {\n+    #[inline]\n+    pub(super) fn new() -> Self {\n+        SwitchSourceCache { cache: OnceCell::new() }\n+    }\n+\n+    /// Invalidates the switch source cache.\n+    #[inline]\n+    pub(super) fn invalidate(&mut self) {\n+        self.cache = OnceCell::new();\n+    }\n+\n+    /// Returns the switch sources for this MIR.\n+    #[inline]\n+    pub(super) fn compute(\n+        &self,\n+        basic_blocks: &IndexVec<BasicBlock, BasicBlockData<'_>>,\n+    ) -> &SwitchSources {\n+        self.cache.get_or_init(|| {\n+            let mut switch_sources = IndexVec::from_elem(\n+                IndexVec::from_elem(SmallVec::new(), basic_blocks),\n+                basic_blocks,\n+            );\n+            for (bb, data) in basic_blocks.iter_enumerated() {\n+                if let Some(Terminator {\n+                    kind: TerminatorKind::SwitchInt { targets, .. }, ..\n+                }) = &data.terminator\n+                {\n+                    for (value, target) in targets.iter() {\n+                        switch_sources[target][bb].push(Some(value));\n+                    }\n+                    switch_sources[targets.otherwise()][bb].push(None);\n+                }\n+            }\n+\n+            switch_sources\n+        })\n+    }\n+}\n+\n+impl<S: serialize::Encoder> serialize::Encodable<S> for SwitchSourceCache {\n+    #[inline]\n+    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n+        s.emit_unit()\n+    }\n+}\n+\n+impl<D: serialize::Decoder> serialize::Decodable<D> for SwitchSourceCache {\n+    #[inline]\n+    fn decode(_: &mut D) -> Self {\n+        Self::new()\n+    }\n+}\n+\n+impl<CTX> HashStable<CTX> for SwitchSourceCache {\n+    #[inline]\n+    fn hash_stable(&self, _: &mut CTX, _: &mut StableHasher) {\n+        // do nothing\n+    }\n+}\n+\n+TrivialTypeFoldableAndLiftImpls! {\n+    SwitchSourceCache,\n+}"}, {"sha": "93118dfeb7737f1623009f9b2549591303e2cff1", "filename": "compiler/rustc_mir_dataflow/src/framework/direction.rs", "status": "modified", "additions": 57, "deletions": 5, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/62523045ec681ee8c2ecb8d395fbcaccf336284b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62523045ec681ee8c2ecb8d395fbcaccf336284b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs?ref=62523045ec681ee8c2ecb8d395fbcaccf336284b", "patch": "@@ -248,6 +248,7 @@ impl Direction for Backward {\n                     );\n                     propagate(pred, &tmp);\n                 }\n+\n                 mir::TerminatorKind::InlineAsm {\n                     destination: Some(dest), ref operands, ..\n                 } if dest == bb => {\n@@ -266,6 +267,23 @@ impl Direction for Backward {\n                     propagate(pred, &tmp);\n                 }\n \n+                mir::TerminatorKind::SwitchInt { targets: _, ref discr, switch_ty: _ } => {\n+                    let mut applier = BackwardSwitchIntEdgeEffectsApplier {\n+                        pred,\n+                        exit_state,\n+                        values: &body.switch_sources()[bb][pred],\n+                        bb,\n+                        propagate: &mut propagate,\n+                        effects_applied: false,\n+                    };\n+\n+                    analysis.apply_switch_int_edge_effects(pred, discr, &mut applier);\n+\n+                    if !applier.effects_applied {\n+                        propagate(pred, exit_state)\n+                    }\n+                }\n+\n                 // Ignore dead unwinds.\n                 mir::TerminatorKind::Call { cleanup: Some(unwind), .. }\n                 | mir::TerminatorKind::Assert { cleanup: Some(unwind), .. }\n@@ -286,6 +304,37 @@ impl Direction for Backward {\n     }\n }\n \n+struct BackwardSwitchIntEdgeEffectsApplier<'a, D, F> {\n+    pred: BasicBlock,\n+    exit_state: &'a mut D,\n+    values: &'a [Option<u128>],\n+    bb: BasicBlock,\n+    propagate: &'a mut F,\n+\n+    effects_applied: bool,\n+}\n+\n+impl<D, F> super::SwitchIntEdgeEffects<D> for BackwardSwitchIntEdgeEffectsApplier<'_, D, F>\n+where\n+    D: Clone,\n+    F: FnMut(BasicBlock, &D),\n+{\n+    fn apply(&mut self, mut apply_edge_effect: impl FnMut(&mut D, SwitchIntTarget)) {\n+        assert!(!self.effects_applied);\n+\n+        let targets = self.values.iter().map(|&value| SwitchIntTarget { value, target: self.bb });\n+\n+        let mut tmp = None;\n+        for target in targets {\n+            let tmp = opt_clone_from_or_clone(&mut tmp, self.exit_state);\n+            apply_edge_effect(tmp, target);\n+            (self.propagate)(self.pred, tmp);\n+        }\n+\n+        self.effects_applied = true;\n+    }\n+}\n+\n /// Dataflow that runs from the entry of a block (the first statement), to its exit (terminator).\n pub struct Forward;\n \n@@ -528,7 +577,7 @@ impl Direction for Forward {\n             }\n \n             SwitchInt { ref targets, ref discr, switch_ty: _ } => {\n-                let mut applier = SwitchIntEdgeEffectApplier {\n+                let mut applier = ForwardSwitchIntEdgeEffectsApplier {\n                     exit_state,\n                     targets,\n                     propagate,\n@@ -537,8 +586,11 @@ impl Direction for Forward {\n \n                 analysis.apply_switch_int_edge_effects(bb, discr, &mut applier);\n \n-                let SwitchIntEdgeEffectApplier {\n-                    exit_state, mut propagate, effects_applied, ..\n+                let ForwardSwitchIntEdgeEffectsApplier {\n+                    exit_state,\n+                    mut propagate,\n+                    effects_applied,\n+                    ..\n                 } = applier;\n \n                 if !effects_applied {\n@@ -551,15 +603,15 @@ impl Direction for Forward {\n     }\n }\n \n-struct SwitchIntEdgeEffectApplier<'a, D, F> {\n+struct ForwardSwitchIntEdgeEffectsApplier<'a, D, F> {\n     exit_state: &'a mut D,\n     targets: &'a SwitchTargets,\n     propagate: F,\n \n     effects_applied: bool,\n }\n \n-impl<D, F> super::SwitchIntEdgeEffects<D> for SwitchIntEdgeEffectApplier<'_, D, F>\n+impl<D, F> super::SwitchIntEdgeEffects<D> for ForwardSwitchIntEdgeEffectsApplier<'_, D, F>\n where\n     D: Clone,\n     F: FnMut(BasicBlock, &D),"}, {"sha": "67c16e6c0849d422754fbcbaabff4b3674f592c8", "filename": "compiler/rustc_mir_dataflow/src/framework/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62523045ec681ee8c2ecb8d395fbcaccf336284b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62523045ec681ee8c2ecb8d395fbcaccf336284b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs?ref=62523045ec681ee8c2ecb8d395fbcaccf336284b", "patch": "@@ -234,8 +234,6 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n     /// about a given `SwitchInt` terminator for each one of its edges\u2014and more efficient\u2014the\n     /// engine doesn't need to clone the exit state for a block unless\n     /// `SwitchIntEdgeEffects::apply` is actually called.\n-    ///\n-    /// FIXME: This class of effects is not supported for backward dataflow analyses.\n     fn apply_switch_int_edge_effects(\n         &self,\n         _block: BasicBlock,"}, {"sha": "c221b35867082716117f157dff9a11f78d54f65f", "filename": "compiler/rustc_mir_dataflow/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62523045ec681ee8c2ecb8d395fbcaccf336284b/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62523045ec681ee8c2ecb8d395fbcaccf336284b/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs?ref=62523045ec681ee8c2ecb8d395fbcaccf336284b", "patch": "@@ -28,7 +28,7 @@ pub use self::drop_flag_effects::{\n pub use self::framework::{\n     fmt, graphviz, lattice, visit_results, Analysis, AnalysisDomain, Backward, CallReturnPlaces,\n     Direction, Engine, Forward, GenKill, GenKillAnalysis, JoinSemiLattice, Results, ResultsCursor,\n-    ResultsRefCursor, ResultsVisitable, ResultsVisitor,\n+    ResultsRefCursor, ResultsVisitable, ResultsVisitor, SwitchIntEdgeEffects,\n };\n \n use self::move_paths::MoveData;"}, {"sha": "e5784259ce8750357d224648966a19bd7c4c6bf2", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 55, "deletions": 5, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/62523045ec681ee8c2ecb8d395fbcaccf336284b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62523045ec681ee8c2ecb8d395fbcaccf336284b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=62523045ec681ee8c2ecb8d395fbcaccf336284b", "patch": "@@ -32,6 +32,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n+use rustc_hir::lang_items::LangItem;\n use rustc_hir::{ExprKind, HirId, QPath};\n use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -1556,7 +1557,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if inaccessible_remaining_fields {\n                 self.report_inaccessible_fields(adt_ty, span);\n             } else {\n-                self.report_missing_fields(adt_ty, span, remaining_fields);\n+                self.report_missing_fields(\n+                    adt_ty,\n+                    span,\n+                    remaining_fields,\n+                    variant,\n+                    ast_fields,\n+                    substs,\n+                );\n             }\n         }\n     }\n@@ -1590,6 +1598,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         adt_ty: Ty<'tcx>,\n         span: Span,\n         remaining_fields: FxHashMap<Ident, (usize, &ty::FieldDef)>,\n+        variant: &'tcx ty::VariantDef,\n+        ast_fields: &'tcx [hir::ExprField<'tcx>],\n+        substs: SubstsRef<'tcx>,\n     ) {\n         let len = remaining_fields.len();\n \n@@ -1615,7 +1626,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         };\n \n-        struct_span_err!(\n+        let mut err = struct_span_err!(\n             self.tcx.sess,\n             span,\n             E0063,\n@@ -1624,9 +1635,48 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             remaining_fields_names,\n             truncated_fields_error,\n             adt_ty\n-        )\n-        .span_label(span, format!(\"missing {}{}\", remaining_fields_names, truncated_fields_error))\n-        .emit();\n+        );\n+        err.span_label(\n+            span,\n+            format!(\"missing {}{}\", remaining_fields_names, truncated_fields_error),\n+        );\n+\n+        // If the last field is a range literal, but it isn't supposed to be, then they probably\n+        // meant to use functional update syntax.\n+        //\n+        // I don't use 'is_range_literal' because only double-sided, half-open ranges count.\n+        if let Some((\n+            last,\n+            ExprKind::Struct(\n+                QPath::LangItem(LangItem::Range, ..),\n+                &[ref range_start, ref range_end],\n+                _,\n+            ),\n+        )) = ast_fields.last().map(|last| (last, &last.expr.kind)) &&\n+        let variant_field =\n+            variant.fields.iter().find(|field| field.ident(self.tcx) == last.ident) &&\n+        let range_def_id = self.tcx.lang_items().range_struct() &&\n+        variant_field\n+            .and_then(|field| field.ty(self.tcx, substs).ty_adt_def())\n+            .map(|adt| adt.did())\n+            != range_def_id\n+        {\n+            let instead = self\n+                .tcx\n+                .sess\n+                .source_map()\n+                .span_to_snippet(range_end.expr.span)\n+                .map(|s| format!(\" from `{s}`\"))\n+                .unwrap_or(String::new());\n+            err.span_suggestion(\n+                range_start.span.shrink_to_hi(),\n+                &format!(\"to set the remaining fields{instead}, separate the last named field with a comma\"),\n+                \",\".to_string(),\n+                Applicability::MaybeIncorrect,\n+            );\n+        }\n+\n+        err.emit();\n     }\n \n     /// Report an error for a struct field expression when there are invisible fields."}, {"sha": "71b6b9b41f5c58997eda35e0aeaa305f6639fb37", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62523045ec681ee8c2ecb8d395fbcaccf336284b/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62523045ec681ee8c2ecb8d395fbcaccf336284b/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=62523045ec681ee8c2ecb8d395fbcaccf336284b", "patch": "@@ -1038,7 +1038,7 @@ impl String {\n     }\n \n     /// Tries to reserve the minimum capacity for exactly `additional` more elements to\n-    /// be inserted in the given `String`. After calling `reserve_exact`,\n+    /// be inserted in the given `String`. After calling `try_reserve_exact`,\n     /// capacity will be greater than or equal to `self.len() + additional`.\n     /// Does nothing if the capacity is already sufficient.\n     ///"}, {"sha": "5cbf8093c5c3cbe05191a07731f54c9b78423efc", "filename": "src/test/ui/abi/auxiliary/anon-extern-mod-cross-crate-1.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ab0c2e18dceb7140626a158affb983ae81039bd0/src%2Ftest%2Fui%2Fabi%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0c2e18dceb7140626a158affb983ae81039bd0/src%2Ftest%2Fui%2Fabi%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs?ref=ab0c2e18dceb7140626a158affb983ae81039bd0", "patch": "@@ -1,9 +0,0 @@\n-#![crate_name = \"anonexternmod\"]\n-#![feature(rustc_private)]\n-\n-extern crate libc;\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern \"C\" {\n-    pub fn rust_get_test_int() -> libc::intptr_t;\n-}"}, {"sha": "3c649b778bd1a47813b1a1f0f3737022dc74c2a9", "filename": "src/test/ui/abi/auxiliary/foreign_lib.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ab0c2e18dceb7140626a158affb983ae81039bd0/src%2Ftest%2Fui%2Fabi%2Fauxiliary%2Fforeign_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0c2e18dceb7140626a158affb983ae81039bd0/src%2Ftest%2Fui%2Fabi%2Fauxiliary%2Fforeign_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fauxiliary%2Fforeign_lib.rs?ref=ab0c2e18dceb7140626a158affb983ae81039bd0", "patch": "@@ -1,37 +0,0 @@\n-#![crate_name = \"foreign_lib\"]\n-#![feature(rustc_private)]\n-\n-pub mod rustrt {\n-    extern crate libc;\n-\n-    #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-    extern \"C\" {\n-        pub fn rust_get_test_int() -> libc::intptr_t;\n-    }\n-}\n-\n-pub mod rustrt2 {\n-    extern crate libc;\n-\n-    extern \"C\" {\n-        pub fn rust_get_test_int() -> libc::intptr_t;\n-    }\n-}\n-\n-pub mod rustrt3 {\n-    // Different type, but same ABI (on all supported platforms).\n-    // Ensures that we don't ICE or trigger LLVM asserts when\n-    // importing the same symbol under different types.\n-    // See https://github.com/rust-lang/rust/issues/32740.\n-    extern \"C\" {\n-        pub fn rust_get_test_int() -> *const u8;\n-    }\n-}\n-\n-pub fn local_uses() {\n-    unsafe {\n-        let x = rustrt::rust_get_test_int();\n-        assert_eq!(x, rustrt2::rust_get_test_int());\n-        assert_eq!(x as *const _, rustrt3::rust_get_test_int());\n-    }\n-}"}, {"sha": "5cbf8093c5c3cbe05191a07731f54c9b78423efc", "filename": "src/test/ui/abi/consts/auxiliary/anon-extern-mod-cross-crate-1.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ab0c2e18dceb7140626a158affb983ae81039bd0/src%2Ftest%2Fui%2Fabi%2Fconsts%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0c2e18dceb7140626a158affb983ae81039bd0/src%2Ftest%2Fui%2Fabi%2Fconsts%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fconsts%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs?ref=ab0c2e18dceb7140626a158affb983ae81039bd0", "patch": "@@ -1,9 +0,0 @@\n-#![crate_name = \"anonexternmod\"]\n-#![feature(rustc_private)]\n-\n-extern crate libc;\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern \"C\" {\n-    pub fn rust_get_test_int() -> libc::intptr_t;\n-}"}, {"sha": "05a279a3014ba75558713371e750f4e25d34dac7", "filename": "src/test/ui/abi/cross-crate/duplicated-external-mods.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/62523045ec681ee8c2ecb8d395fbcaccf336284b/src%2Ftest%2Fui%2Fabi%2Fcross-crate%2Fduplicated-external-mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62523045ec681ee8c2ecb8d395fbcaccf336284b/src%2Ftest%2Fui%2Fabi%2Fcross-crate%2Fduplicated-external-mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fcross-crate%2Fduplicated-external-mods.rs?ref=62523045ec681ee8c2ecb8d395fbcaccf336284b", "previous_filename": "src/test/ui/abi/duplicated-external-mods.rs"}, {"sha": "dbd2b4ad8655ed133ea9061064d08bcce235dd04", "filename": "src/test/ui/abi/foreign/invoke-external-foreign.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/62523045ec681ee8c2ecb8d395fbcaccf336284b/src%2Ftest%2Fui%2Fabi%2Fforeign%2Finvoke-external-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62523045ec681ee8c2ecb8d395fbcaccf336284b/src%2Ftest%2Fui%2Fabi%2Fforeign%2Finvoke-external-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fforeign%2Finvoke-external-foreign.rs?ref=62523045ec681ee8c2ecb8d395fbcaccf336284b", "previous_filename": "src/test/ui/abi/invoke-external-foreign.rs"}, {"sha": "7c57a1c6678a57fc01e01b7efbbeed48b8a4088a", "filename": "src/test/ui/consts/auxiliary/cci_borrow_lib.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab0c2e18dceb7140626a158affb983ae81039bd0/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fcci_borrow_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0c2e18dceb7140626a158affb983ae81039bd0/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fcci_borrow_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fcci_borrow_lib.rs?ref=ab0c2e18dceb7140626a158affb983ae81039bd0", "patch": "@@ -1,3 +0,0 @@\n-pub fn foo(x: &usize) -> usize {\n-    *x\n-}"}, {"sha": "c83b3f4a5bbf0908fbd72c6188ef18a2d356d64d", "filename": "src/test/ui/consts/auxiliary/cci_const.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab0c2e18dceb7140626a158affb983ae81039bd0/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fcci_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0c2e18dceb7140626a158affb983ae81039bd0/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fcci_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fcci_const.rs?ref=ab0c2e18dceb7140626a158affb983ae81039bd0", "patch": "@@ -1,6 +0,0 @@\n-pub extern \"C\" fn bar() {\n-}\n-\n-pub const foopy: &'static str = \"hi there\";\n-pub const uint_val: usize = 12;\n-pub const uint_expr: usize = (1 << uint_val) - 1;"}, {"sha": "92020417ff5ac05ca26a2b8757c28988e534ebbf", "filename": "src/test/ui/cross-crate/const-cross-crate-const.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/62523045ec681ee8c2ecb8d395fbcaccf336284b/src%2Ftest%2Fui%2Fcross-crate%2Fconst-cross-crate-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62523045ec681ee8c2ecb8d395fbcaccf336284b/src%2Ftest%2Fui%2Fcross-crate%2Fconst-cross-crate-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-crate%2Fconst-cross-crate-const.rs?ref=62523045ec681ee8c2ecb8d395fbcaccf336284b", "previous_filename": "src/test/ui/consts/const-cross-crate-const.rs"}, {"sha": "3c61afd5becd44cd2931970eee13e5566d5e3e11", "filename": "src/test/ui/cross-crate/const-cross-crate-extern.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/62523045ec681ee8c2ecb8d395fbcaccf336284b/src%2Ftest%2Fui%2Fcross-crate%2Fconst-cross-crate-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62523045ec681ee8c2ecb8d395fbcaccf336284b/src%2Ftest%2Fui%2Fcross-crate%2Fconst-cross-crate-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-crate%2Fconst-cross-crate-extern.rs?ref=62523045ec681ee8c2ecb8d395fbcaccf336284b", "previous_filename": "src/test/ui/consts/const-cross-crate-extern.rs"}, {"sha": "82d2422c40779a49c89569243328a8cd29c42f92", "filename": "src/test/ui/impl-trait/impl_trait_projections.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62523045ec681ee8c2ecb8d395fbcaccf336284b/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl_trait_projections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62523045ec681ee8c2ecb8d395fbcaccf336284b/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl_trait_projections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl_trait_projections.stderr?ref=62523045ec681ee8c2ecb8d395fbcaccf336284b", "patch": "@@ -30,4 +30,5 @@ LL | fn projection_is_disallowed(x: impl Iterator) -> <impl Iterator>::Item {\n \n error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0223`.\n+Some errors have detailed explanations: E0223, E0667.\n+For more information about an error, try `rustc --explain E0223`."}, {"sha": "e31393181d734e1b88f07d8538844c17b483488b", "filename": "src/test/ui/impl-trait/issues/issue-57979-impl-trait-in-path.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62523045ec681ee8c2ecb8d395fbcaccf336284b/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-impl-trait-in-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62523045ec681ee8c2ecb8d395fbcaccf336284b/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-impl-trait-in-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-impl-trait-in-path.stderr?ref=62523045ec681ee8c2ecb8d395fbcaccf336284b", "patch": "@@ -6,3 +6,4 @@ LL | pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0667`."}, {"sha": "48144cd1ce2d1c97f06a261b9a7315e4b0d92d92", "filename": "src/test/ui/structs/struct-record-suggestion.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/62523045ec681ee8c2ecb8d395fbcaccf336284b/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/62523045ec681ee8c2ecb8d395fbcaccf336284b/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.fixed?ref=62523045ec681ee8c2ecb8d395fbcaccf336284b", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+#[derive(Debug, Default, Eq, PartialEq)]\n+struct A {\n+    b: u32,\n+    c: u64,\n+    d: usize,\n+}\n+\n+fn main() {\n+    let q = A { c: 5, .. Default::default() };\n+    //~^ ERROR mismatched types\n+    //~| ERROR missing fields\n+    //~| HELP separate the last named field with a comma\n+    let r = A { c: 5, .. Default::default() };\n+    assert_eq!(q, r);\n+}"}, {"sha": "6d169d5c6dbfd08c1e1a9e9725fb0c761a1f2ca6", "filename": "src/test/ui/structs/struct-record-suggestion.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/62523045ec681ee8c2ecb8d395fbcaccf336284b/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62523045ec681ee8c2ecb8d395fbcaccf336284b/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.rs?ref=62523045ec681ee8c2ecb8d395fbcaccf336284b", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+#[derive(Debug, Default, Eq, PartialEq)]\n+struct A {\n+    b: u32,\n+    c: u64,\n+    d: usize,\n+}\n+\n+fn main() {\n+    let q = A { c: 5 .. Default::default() };\n+    //~^ ERROR mismatched types\n+    //~| ERROR missing fields\n+    //~| HELP separate the last named field with a comma\n+    let r = A { c: 5, .. Default::default() };\n+    assert_eq!(q, r);\n+}"}, {"sha": "e5bd03117b9feabca58119c0ef34beef3c3f23ff", "filename": "src/test/ui/structs/struct-record-suggestion.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/62523045ec681ee8c2ecb8d395fbcaccf336284b/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62523045ec681ee8c2ecb8d395fbcaccf336284b/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.stderr?ref=62523045ec681ee8c2ecb8d395fbcaccf336284b", "patch": "@@ -0,0 +1,24 @@\n+error[E0308]: mismatched types\n+  --> $DIR/struct-record-suggestion.rs:10:20\n+   |\n+LL |     let q = A { c: 5 .. Default::default() };\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found struct `std::ops::Range`\n+   |\n+   = note: expected type `u64`\n+            found struct `std::ops::Range<{integer}>`\n+\n+error[E0063]: missing fields `b` and `d` in initializer of `A`\n+  --> $DIR/struct-record-suggestion.rs:10:13\n+   |\n+LL |     let q = A { c: 5 .. Default::default() };\n+   |             ^ missing `b` and `d`\n+   |\n+help: to set the remaining fields from `Default::default()`, separate the last named field with a comma\n+   |\n+LL |     let q = A { c: 5, .. Default::default() };\n+   |                     +\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0063, E0308.\n+For more information about an error, try `rustc --explain E0063`."}]}