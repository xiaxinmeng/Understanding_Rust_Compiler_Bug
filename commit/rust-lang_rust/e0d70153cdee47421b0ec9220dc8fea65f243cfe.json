{"sha": "e0d70153cdee47421b0ec9220dc8fea65f243cfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZDcwMTUzY2RlZTQ3NDIxYjBlYzkyMjBkYzhmZWE2NWYyNDNjZmU=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-06-21T19:29:43Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-06-22T17:06:55Z"}, "message": "Add comments around code where ordering is important due for panic-safety\n\nIterators contain arbitrary code which may panic. Unsafe code has to be\ncareful to do its state updates at the right point between calls\nthat may panic.", "tree": {"sha": "6a5310f4f3ea2d90c40a5b1366fbc4ab67ad8abe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a5310f4f3ea2d90c40a5b1366fbc4ab67ad8abe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0d70153cdee47421b0ec9220dc8fea65f243cfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0d70153cdee47421b0ec9220dc8fea65f243cfe", "html_url": "https://github.com/rust-lang/rust/commit/e0d70153cdee47421b0ec9220dc8fea65f243cfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0d70153cdee47421b0ec9220dc8fea65f243cfe/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a5b97adb4da4b0f913d19765e91d4322ef6542e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a5b97adb4da4b0f913d19765e91d4322ef6542e", "html_url": "https://github.com/rust-lang/rust/commit/6a5b97adb4da4b0f913d19765e91d4322ef6542e"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "f3a47cba759e6bb9d4d0a1e53e61c97d643108d8", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0d70153cdee47421b0ec9220dc8fea65f243cfe/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0d70153cdee47421b0ec9220dc8fea65f243cfe/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=e0d70153cdee47421b0ec9220dc8fea65f243cfe", "patch": "@@ -2568,6 +2568,8 @@ impl<T, A: Allocator> Vec<T, A> {\n             }\n             unsafe {\n                 ptr::write(self.as_mut_ptr().add(len), element);\n+                // Since next() executes user code which can panic we have to bump the length\n+                // after each step.\n                 // NB can't overflow since we would have had to alloc the address space\n                 self.set_len(len + 1);\n             }"}, {"sha": "d814d4ae355b0496eb08f08400aeb8a3bf35df83", "filename": "library/alloc/src/vec/source_iter_marker.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0d70153cdee47421b0ec9220dc8fea65f243cfe/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0d70153cdee47421b0ec9220dc8fea65f243cfe/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs?ref=e0d70153cdee47421b0ec9220dc8fea65f243cfe", "patch": "@@ -89,6 +89,8 @@ fn write_in_place_with_drop<T>(\n             // all we can do is check if it's still in range\n             debug_assert!(sink.dst as *const _ <= src_end, \"InPlaceIterable contract violation\");\n             ptr::write(sink.dst, item);\n+            // Since this executes user code which can panic we have to bump the pointer\n+            // after each step.\n             sink.dst = sink.dst.add(1);\n         }\n         Ok(sink)\n@@ -136,6 +138,8 @@ where\n                 let dst = dst_buf.offset(i as isize);\n                 debug_assert!(dst as *const _ <= end, \"InPlaceIterable contract violation\");\n                 ptr::write(dst, self.__iterator_get_unchecked(i));\n+                // Since this executes user code which can panic we have to bump the pointer\n+                // after each step.\n                 drop_guard.dst = dst.add(1);\n             }\n         }"}, {"sha": "c3b4534096de5f1c5a7171db69fd46f5f4bd7922", "filename": "library/alloc/src/vec/spec_extend.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0d70153cdee47421b0ec9220dc8fea65f243cfe/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0d70153cdee47421b0ec9220dc8fea65f243cfe/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs?ref=e0d70153cdee47421b0ec9220dc8fea65f243cfe", "patch": "@@ -40,6 +40,8 @@ where\n                 iterator.for_each(move |element| {\n                     ptr::write(ptr, element);\n                     ptr = ptr.offset(1);\n+                    // Since the loop executes user code which can panic we have to bump the pointer\n+                    // after each step.\n                     // NB can't overflow since we would have had to alloc the address space\n                     local_len.increment_len(1);\n                 });"}, {"sha": "3d0401cbebcf72a0fa0ec3a45f3f891897cb0215", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e0d70153cdee47421b0ec9220dc8fea65f243cfe/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0d70153cdee47421b0ec9220dc8fea65f243cfe/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=e0d70153cdee47421b0ec9220dc8fea65f243cfe", "patch": "@@ -227,13 +227,16 @@ where\n     fn next(&mut self) -> Option<(A::Item, B::Item)> {\n         if self.index < self.len {\n             let i = self.index;\n+            // since get_unchecked executes code which can panic we increment the counters beforehand\n+            // so that the same index won't be accessed twice, as required by TrustedRandomAccess\n             self.index += 1;\n             // SAFETY: `i` is smaller than `self.len`, thus smaller than `self.a.len()` and `self.b.len()`\n             unsafe {\n                 Some((self.a.__iterator_get_unchecked(i), self.b.__iterator_get_unchecked(i)))\n             }\n         } else if A::MAY_HAVE_SIDE_EFFECT && self.index < self.a_len {\n             let i = self.index;\n+            // as above, increment before executing code that may panic\n             self.index += 1;\n             self.len += 1;\n             // match the base implementation's potential side effects\n@@ -259,6 +262,8 @@ where\n         let end = self.index + delta;\n         while self.index < end {\n             let i = self.index;\n+            // since get_unchecked executes code which can panic we increment the counters beforehand\n+            // so that the same index won't be accessed twice, as required by TrustedRandomAccess\n             self.index += 1;\n             if A::MAY_HAVE_SIDE_EFFECT {\n                 // SAFETY: the usage of `cmp::min` to calculate `delta`\n@@ -295,6 +300,8 @@ where\n                 let sz_a = self.a.size();\n                 if A::MAY_HAVE_SIDE_EFFECT && sz_a > self.len {\n                     for _ in 0..sz_a - self.len {\n+                        // since next_back() may panic we increment the counters beforehand\n+                        // to keep Zip's state in sync with the underlying iterator source\n                         self.a_len -= 1;\n                         self.a.next_back();\n                     }\n@@ -309,6 +316,8 @@ where\n             }\n         }\n         if self.index < self.len {\n+            // since get_unchecked executes code which can panic we increment the counters beforehand\n+            // so that the same index won't be accessed twice, as required by TrustedRandomAccess\n             self.len -= 1;\n             self.a_len -= 1;\n             let i = self.len;"}]}