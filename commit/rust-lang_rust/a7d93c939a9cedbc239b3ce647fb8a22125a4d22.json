{"sha": "a7d93c939a9cedbc239b3ce647fb8a22125a4d22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZDkzYzkzOWE5Y2VkYmMyMzliM2NlNjQ3ZmI4YTIyMTI1YTRkMjI=", "commit": {"author": {"name": "Richard Diamond", "email": "wichard@vitalitystudios.com", "date": "2015-10-25T01:51:34Z"}, "committer": {"name": "Richard Diamond", "email": "wichard@vitalitystudios.com", "date": "2015-10-28T22:23:28Z"}, "message": "Port the standard crates to PNaCl/NaCl.", "tree": {"sha": "c21ab99f1eb5dc33d46121bb5912dc691e73530d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c21ab99f1eb5dc33d46121bb5912dc691e73530d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7d93c939a9cedbc239b3ce647fb8a22125a4d22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7d93c939a9cedbc239b3ce647fb8a22125a4d22", "html_url": "https://github.com/rust-lang/rust/commit/a7d93c939a9cedbc239b3ce647fb8a22125a4d22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/comments", "author": {"login": "DiamondLovesYou", "id": 650357, "node_id": "MDQ6VXNlcjY1MDM1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/650357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DiamondLovesYou", "html_url": "https://github.com/DiamondLovesYou", "followers_url": "https://api.github.com/users/DiamondLovesYou/followers", "following_url": "https://api.github.com/users/DiamondLovesYou/following{/other_user}", "gists_url": "https://api.github.com/users/DiamondLovesYou/gists{/gist_id}", "starred_url": "https://api.github.com/users/DiamondLovesYou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DiamondLovesYou/subscriptions", "organizations_url": "https://api.github.com/users/DiamondLovesYou/orgs", "repos_url": "https://api.github.com/users/DiamondLovesYou/repos", "events_url": "https://api.github.com/users/DiamondLovesYou/events{/privacy}", "received_events_url": "https://api.github.com/users/DiamondLovesYou/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DiamondLovesYou", "id": 650357, "node_id": "MDQ6VXNlcjY1MDM1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/650357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DiamondLovesYou", "html_url": "https://github.com/DiamondLovesYou", "followers_url": "https://api.github.com/users/DiamondLovesYou/followers", "following_url": "https://api.github.com/users/DiamondLovesYou/following{/other_user}", "gists_url": "https://api.github.com/users/DiamondLovesYou/gists{/gist_id}", "starred_url": "https://api.github.com/users/DiamondLovesYou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DiamondLovesYou/subscriptions", "organizations_url": "https://api.github.com/users/DiamondLovesYou/orgs", "repos_url": "https://api.github.com/users/DiamondLovesYou/repos", "events_url": "https://api.github.com/users/DiamondLovesYou/events{/privacy}", "received_events_url": "https://api.github.com/users/DiamondLovesYou/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d86d1a4e17239361ecebced0d5dd246efa95512", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d86d1a4e17239361ecebced0d5dd246efa95512", "html_url": "https://github.com/rust-lang/rust/commit/8d86d1a4e17239361ecebced0d5dd246efa95512"}], "stats": {"total": 572, "additions": 273, "deletions": 299}, "files": [{"sha": "8e942a116b16ec7100e6ec8494f2a2bc69b227bd", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=a7d93c939a9cedbc239b3ce647fb8a22125a4d22", "patch": "@@ -118,7 +118,7 @@ impl DynamicLibrary {\n     }\n }\n \n-#[cfg(all(test, not(target_os = \"ios\")))]\n+#[cfg(all(test, not(target_os = \"ios\"), not(target_os = \"nacl\")))]\n mod tests {\n     use super::*;\n     use prelude::v1::*;\n@@ -372,3 +372,30 @@ mod dl {\n         fn SetErrorMode(uMode: libc::c_uint) -> libc::c_uint;\n     }\n }\n+\n+#[cfg(target_os = \"nacl\")]\n+pub mod dl {\n+    use ffi::OsStr;\n+    use ptr;\n+    use result::Result;\n+    use result::Result::Err;\n+    use libc;\n+    use string::String;\n+    use ops::FnOnce;\n+    use option::Option;\n+\n+    pub fn open(_filename: Option<&OsStr>) -> Result<*mut u8, String> {\n+        Err(format!(\"NaCl + Newlib doesn't impl loading shared objects\"))\n+    }\n+\n+    pub fn check_for_errors_in<T, F>(_f: F) -> Result<T, String>\n+        where F: FnOnce() -> T,\n+    {\n+        Err(format!(\"NaCl doesn't support shared objects\"))\n+    }\n+\n+    pub unsafe fn symbol(_handle: *mut u8, _symbol: *const libc::c_char) -> *mut u8 {\n+        ptr::null_mut()\n+    }\n+    pub unsafe fn close(_handle: *mut u8) { }\n+}"}, {"sha": "495f37e123848ed0b6aa4984115e9ea5830afcf9", "filename": "src/libstd/env.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=a7d93c939a9cedbc239b3ce647fb8a22125a4d22", "patch": "@@ -795,6 +795,27 @@ mod os {\n     pub const EXE_EXTENSION: &'static str = \"exe\";\n }\n \n+#[cfg(all(target_os = \"nacl\", not(target_arch = \"le32\")))]\n+mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"nacl\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+    pub const EXE_SUFFIX: &'static str = \".nexe\";\n+    pub const EXE_EXTENSION: &'static str = \"nexe\";\n+}\n+#[cfg(all(target_os = \"nacl\", target_arch = \"le32\"))]\n+mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"pnacl\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".pso\";\n+    pub const DLL_EXTENSION: &'static str = \"pso\";\n+    pub const EXE_SUFFIX: &'static str = \".pexe\";\n+    pub const EXE_EXTENSION: &'static str = \"pexe\";\n+}\n+\n #[cfg(target_arch = \"x86\")]\n mod arch {\n     pub const ARCH: &'static str = \"x86\";\n@@ -830,6 +851,11 @@ mod arch {\n     pub const ARCH: &'static str = \"powerpc\";\n }\n \n+#[cfg(target_arch = \"le32\")]\n+mod arch {\n+    pub const ARCH: &'static str = \"le32\";\n+}\n+\n #[cfg(test)]\n mod tests {\n     use prelude::v1::*;"}, {"sha": "36f8a5fb5c923264a2b0c100d0c06a9b2dc62b9c", "filename": "src/libstd/os/nacl/raw.rs", "status": "modified", "additions": 30, "deletions": 239, "changes": 269, "blob_url": "https://github.com/rust-lang/rust/blob/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Fos%2Fnacl%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Fos%2Fnacl%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fnacl%2Fraw.rs?ref=a7d93c939a9cedbc239b3ce647fb8a22125a4d22", "patch": "@@ -12,245 +12,36 @@\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i32;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type pid_t = i32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type uid_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type gid_t = u32;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n-\n-pub use self::arch::{off_t, ino_t, nlink_t, blksize_t, blkcnt_t, stat, time_t};\n-\n-#[cfg(any(target_arch = \"x86\",\n-          target_arch = \"le32\",\n-          target_arch = \"powerpc\",\n-          target_arch = \"arm\"))]\n-mod arch {\n-    use super::{dev_t, mode_t};\n-    use os::raw::{c_long, c_short};\n-    use os::unix::raw::{gid_t, uid_t};\n-\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i32;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i32;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u32;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u32;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i32;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i32;\n-\n-    #[repr(C)]\n-    #[derive(Clone)]\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub struct stat {\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_dev: dev_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub __pad1: c_short,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ino: ino_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mode: mode_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_nlink: nlink_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_uid: uid_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_gid: gid_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_rdev: dev_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub __pad2: c_short,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_size: off_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_blksize: blksize_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_blocks: blkcnt_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_atime: time_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_atime_nsec: c_long,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mtime: time_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mtime_nsec: c_long,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ctime: time_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ctime_nsec: c_long,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub __unused4: c_long,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub __unused5: c_long,\n-    }\n-}\n-\n-#[cfg(any(target_arch = \"mips\",\n-          target_arch = \"mipsel\"))]\n-mod arch {\n-    use super::{dev_t, mode_t};\n-    use os::raw::c_long;\n-    use os::unix::raw::{gid_t, uid_t};\n-\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i32;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i32;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u32;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u32;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i32;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i32;\n-\n-    #[repr(C)]\n-    #[derive(Clone)]\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub struct stat {\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_dev: c_ulong,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_pad1: [c_long; 3],\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ino: ino_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mode: mode_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_nlink: nlink_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_uid: uid_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_gid: gid_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_rdev: c_ulong,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_pad2: [c_long; 2],\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_size: off_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_pad3: c_long,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_atime: time_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_atime_nsec: c_long,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mtime: time_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mtime_nsec: c_long,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ctime: time_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ctime_nsec: c_long,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_blksize: blksize_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_blocks: blkcnt_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_pad5: [c_long; 14],\n-    }\n-}\n-\n-#[cfg(target_arch = \"aarch64\")]\n-mod arch {\n-    use super::{dev_t, mode_t};\n-    use os::raw::{c_long, c_int};\n-    use os::unix::raw::{gid_t, uid_t};\n-\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i32;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u32;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n-\n-    #[repr(C)]\n-    #[derive(Clone)]\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub struct stat {\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_dev: dev_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ino: ino_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mode: mode_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_nlink: nlink_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_uid: uid_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_gid: gid_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_rdev: dev_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub __pad1: dev_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_size: off_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_blksize: blksize_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub __pad2: c_int,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_blocks: blkcnt_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_atime: time_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_atime_nsec: c_long,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mtime: time_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mtime_nsec: c_long,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ctime: time_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ctime_nsec: c_long,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub __unused: [c_int; 2],\n-    }\n-}\n-\n-#[cfg(target_arch = \"x86_64\")]\n-mod arch {\n-    use super::{dev_t, mode_t};\n-    use os::raw::{c_long, c_int};\n-    use os::unix::raw::{gid_t, uid_t};\n-\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i64;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n-\n-    #[repr(C)]\n-    #[derive(Clone)]\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub struct stat {\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_dev: dev_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ino: ino_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_nlink: nlink_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mode: mode_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_uid: uid_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_gid: gid_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub __pad0: c_int,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_rdev: dev_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_size: off_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_blksize: blksize_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_blocks: blkcnt_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_atime: time_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_atime_nsec: c_long,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mtime: time_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mtime_nsec: c_long,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ctime: time_t,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ctime_nsec: c_long,\n-        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub __unused: [c_long; 3],\n-    }\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i32;\n+\n+#[repr(C)]\n+#[derive(Copy, Clone)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub struct stat {\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_dev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_ino: ino_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_mode: mode_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_nlink: nlink_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_uid: uid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_gid: gid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_rdev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_size: off_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_blksize: blksize_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_blocks: blkcnt_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_atime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_atime_nsec: i64,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_mtime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_mtime_nsec: i64,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_ctime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_ctime_nsec: i64,\n }"}, {"sha": "8383b3ec18972e0e0d3296cd542dff1ad352c940", "filename": "src/libstd/rtdeps.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Frtdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Frtdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frtdeps.rs?ref=a7d93c939a9cedbc239b3ce647fb8a22125a4d22", "patch": "@@ -44,6 +44,14 @@ extern {}\n #[link(name = \"pthread\")]\n extern {}\n \n+// For PNaCl targets, nacl_io is a Pepper wrapper for some IO functions\n+// missing (ie always error) in Newlib.\n+#[cfg(all(target_os = \"nacl\", not(test)))]\n+#[link(name = \"nacl_io\", kind = \"static\")]\n+#[link(name = \"c++\", kind = \"static\")] // for `nacl_io` and EH.\n+#[link(name = \"pthread\", kind = \"static\")]\n+extern {}\n+\n #[cfg(target_os = \"macos\")]\n #[link(name = \"System\")]\n extern {}"}, {"sha": "3c84783d215eca8b696a178024945766bf09a29e", "filename": "src/libstd/sys/common/backtrace.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs?ref=a7d93c939a9cedbc239b3ce647fb8a22125a4d22", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![cfg_attr(target_os = \"nacl\", allow(dead_code))]\n+\n use env;\n use io::prelude::*;\n use io;"}, {"sha": "fc6af6447d2fd316a82d8057335263c55f70770d", "filename": "src/libstd/sys/unix/c.rs", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fc.rs?ref=a7d93c939a9cedbc239b3ce647fb8a22125a4d22", "patch": "@@ -24,9 +24,7 @@\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n \n-pub use self::signal_os::{sigaction, siginfo, sigset_t, sigaltstack};\n-pub use self::signal_os::{SA_ONSTACK, SA_SIGINFO, SIGBUS, SIGSTKSZ, SIG_SETMASK};\n-\n+pub use self::signal_os::*;\n use libc;\n \n #[cfg(any(target_os = \"macos\",\n@@ -52,6 +50,13 @@ pub const FIOCLEX: libc::c_ulong = 0x5451;\n               target_arch = \"powerpc\")))]\n pub const FIOCLEX: libc::c_ulong = 0x6601;\n \n+#[cfg(target_env = \"newlib\")]\n+pub const FD_CLOEXEC: libc::c_int = 1;\n+#[cfg(target_env = \"newlib\")]\n+pub const F_GETFD: libc::c_int = 1;\n+#[cfg(target_env = \"newlib\")]\n+pub const F_SETFD: libc::c_int = 2;\n+\n pub const WNOHANG: libc::c_int = 1;\n \n #[cfg(target_os = \"linux\")]\n@@ -79,6 +84,18 @@ pub struct passwd {\n     pub pw_dir: *mut libc::c_char,\n     pub pw_shell: *mut libc::c_char,\n }\n+#[repr(C)]\n+#[cfg(target_env = \"newlib\")]\n+pub struct passwd {\n+    pub pw_name: *mut libc::c_char,\n+    pub pw_passwd: *mut libc::c_char,\n+    pub pw_uid: libc::uid_t,\n+    pub pw_gid: libc::gid_t,\n+    pub pw_comment: *mut libc::c_char,\n+    pub pw_gecos: *mut libc::c_char,\n+    pub pw_dir: *mut libc::c_char,\n+    pub pw_shell: *mut libc::c_char,\n+}\n \n #[repr(C)]\n #[cfg(any(target_os = \"macos\",\n@@ -124,7 +141,10 @@ extern {\n                       optname: libc::c_int,\n                       optval: *mut libc::c_void,\n                       optlen: *mut libc::socklen_t) -> libc::c_int;\n+    #[cfg(not(target_env = \"newlib\"))]\n     pub fn ioctl(fd: libc::c_int, req: libc::c_ulong, ...) -> libc::c_int;\n+    #[cfg(target_env = \"newlib\")]\n+    pub fn fnctl(fd: libc::c_int, req: libc::c_int, ...) -> libc::c_int;\n \n \n     pub fn waitpid(pid: libc::pid_t, status: *mut libc::c_int,\n@@ -138,6 +158,7 @@ extern {\n                      oldact: *mut sigaction) -> libc::c_int;\n \n     #[cfg_attr(target_os = \"netbsd\", link_name = \"__sigaltstack14\")]\n+    #[cfg(not(target_env = \"newlib\"))]\n     pub fn sigaltstack(ss: *const sigaltstack,\n                        oss: *mut sigaltstack) -> libc::c_int;\n \n@@ -160,6 +181,8 @@ extern {\n     pub fn utimes(filename: *const libc::c_char,\n                   times: *const libc::timeval) -> libc::c_int;\n     pub fn gai_strerror(errcode: libc::c_int) -> *const libc::c_char;\n+    /// Newlib has this, but only for Cygwin.\n+    #[cfg(not(target_os = \"nacl\"))]\n     pub fn setgroups(ngroups: libc::c_int,\n                      ptr: *const libc::c_void) -> libc::c_int;\n     pub fn realpath(pathname: *const libc::c_char, resolved: *mut libc::c_char)\n@@ -325,6 +348,25 @@ mod signal_os {\n     }\n }\n \n+/// Note: Although the signal functions are defined on NaCl, they always fail.\n+/// Also, this could be cfg-ed on newlib instead of nacl, but these structures\n+/// can differ depending on the platform, so I've played it safe here.\n+#[cfg(target_os = \"nacl\")]\n+mod signal_os {\n+    use libc;\n+\n+    pub static SA_NOCLDSTOP: libc::c_ulong = 1;\n+    pub static SA_SIGINFO:   libc::c_ulong = 2;\n+\n+    pub type sigset_t = libc::c_ulong;\n+    #[repr(C)]\n+    pub struct sigaction {\n+        pub sa_flags: libc::c_int,\n+        pub sa_mask:  sigset_t,\n+        pub handler:  extern fn(libc::c_int),\n+    }\n+}\n+\n #[cfg(any(target_os = \"macos\",\n           target_os = \"ios\",\n           target_os = \"freebsd\","}, {"sha": "e9f442a22ccee3959ba0400f31bf2971986687e5", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=a7d93c939a9cedbc239b3ce647fb8a22125a4d22", "patch": "@@ -51,12 +51,21 @@ impl FileDesc {\n         Ok(ret as usize)\n     }\n \n+    #[cfg(not(target_env = \"newlib\"))]\n     pub fn set_cloexec(&self) {\n         unsafe {\n             let ret = c::ioctl(self.fd, c::FIOCLEX);\n             debug_assert_eq!(ret, 0);\n         }\n     }\n+    #[cfg(target_env = \"newlib\")]\n+    pub fn set_cloexec(&self) {\n+        unsafe {\n+            let previous = c::fnctl(self.fd, c::F_GETFD);\n+            let ret = c::fnctl(self.fd, c::F_SETFD, previous | c::FD_CLOEXEC);\n+            debug_assert_eq!(ret, 0);\n+        }\n+    }\n }\n \n impl AsInner<c_int> for FileDesc {"}, {"sha": "26b6b17cbe41ac9af89bfb466ef0c9d4262baab6", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=a7d93c939a9cedbc239b3ce647fb8a22125a4d22", "patch": "@@ -12,7 +12,6 @@\n #![allow(non_camel_case_types)]\n \n use io::{self, ErrorKind};\n-use libc::funcs::posix01::signal::signal;\n use libc;\n use num::One;\n use ops::Neg;\n@@ -48,7 +47,9 @@ pub mod thread_local;\n pub mod time;\n pub mod stdio;\n \n+#[cfg(not(target_os = \"nacl\"))]\n pub fn init() {\n+    use libc::funcs::posix01::signal::signal;\n     // By default, some platforms will send a *signal* when an EPIPE error\n     // would otherwise be delivered. This runtime doesn't install a SIGPIPE\n     // handler, causing it to kill the program, which isn't exactly what we\n@@ -60,6 +61,8 @@ pub fn init() {\n         assert!(signal(libc::SIGPIPE, libc::SIG_IGN) != !0);\n     }\n }\n+#[cfg(target_os = \"nacl\")]\n+pub fn init() { }\n \n pub fn decode_error_kind(errno: i32) -> ErrorKind {\n     match errno as libc::c_int {"}, {"sha": "c328c84f62ae586b8d4ad1eae51f2ec842aec506", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 17, "deletions": 34, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=a7d93c939a9cedbc239b3ce647fb8a22125a4d22", "patch": "@@ -34,30 +34,15 @@ const TMPBUF_SZ: usize = 128;\n \n /// Returns the platform-specific value of errno\n pub fn errno() -> i32 {\n-    #[cfg(any(target_os = \"macos\",\n-              target_os = \"ios\",\n-              target_os = \"freebsd\"))]\n-    unsafe fn errno_location() -> *const c_int {\n-        extern { fn __error() -> *const c_int; }\n-        __error()\n-    }\n-\n-    #[cfg(target_os = \"dragonfly\")]\n-    unsafe fn errno_location() -> *const c_int {\n-        extern { fn __dfly_error() -> *const c_int; }\n-        __dfly_error()\n-    }\n-\n-    #[cfg(any(target_os = \"bitrig\", target_os = \"netbsd\", target_os = \"openbsd\"))]\n-    unsafe fn errno_location() -> *const c_int {\n-        extern { fn __errno() -> *const c_int; }\n-        __errno()\n-    }\n-\n-    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-    unsafe fn errno_location() -> *const c_int {\n-        extern { fn __errno_location() -> *const c_int; }\n-        __errno_location()\n+    extern {\n+        #[cfg_attr(any(target_os = \"linux\", target_os = \"android\"), link_name = \"__errno_location\")]\n+        #[cfg_attr(any(target_os = \"bitrig\", target_os = \"netbsd\", target_os = \"openbsd\",\n+                       target_env = \"newlib\"),\n+                   link_name = \"__errno\")]\n+        #[cfg_attr(target_os = \"dragonfly\", link_name = \"__dfly_error\")]\n+        #[cfg_attr(any(target_os = \"macos\", target_os = \"ios\", target_os = \"freebsd\"),\n+                   link_name = \"__error\")]\n+        fn errno_location() -> *const c_int;\n     }\n \n     unsafe {\n@@ -67,14 +52,9 @@ pub fn errno() -> i32 {\n \n /// Gets a detailed string description for the given error number.\n pub fn error_string(errno: i32) -> String {\n-    #[cfg(target_os = \"linux\")]\n-    extern {\n-        #[link_name = \"__xpg_strerror_r\"]\n-        fn strerror_r(errnum: c_int, buf: *mut c_char,\n-                      buflen: libc::size_t) -> c_int;\n-    }\n-    #[cfg(not(target_os = \"linux\"))]\n     extern {\n+        #[cfg_attr(any(target_os = \"linux\", target_env = \"newlib\"),\n+                   link_name = \"__xpg_strerror_r\")]\n         fn strerror_r(errnum: c_int, buf: *mut c_char,\n                       buflen: libc::size_t) -> c_int;\n     }\n@@ -361,7 +341,8 @@ pub fn args() -> Args {\n           target_os = \"dragonfly\",\n           target_os = \"bitrig\",\n           target_os = \"netbsd\",\n-          target_os = \"openbsd\"))]\n+          target_os = \"openbsd\",\n+          target_os = \"nacl\"))]\n pub fn args() -> Args {\n     use sys_common;\n     let bytes = sys_common::args::clone().unwrap_or(Vec::new());\n@@ -473,10 +454,12 @@ pub fn home_dir() -> Option<PathBuf> {\n     }).map(PathBuf::from);\n \n     #[cfg(any(target_os = \"android\",\n-              target_os = \"ios\"))]\n+              target_os = \"ios\",\n+              target_os = \"nacl\"))]\n     unsafe fn fallback() -> Option<OsString> { None }\n     #[cfg(not(any(target_os = \"android\",\n-                  target_os = \"ios\")))]\n+                  target_os = \"ios\",\n+                  target_os = \"nacl\")))]\n     unsafe fn fallback() -> Option<OsString> {\n         let amt = match libc::sysconf(c::_SC_GETPW_R_SIZE_MAX) {\n             n if n < 0 => 512 as usize,"}, {"sha": "75ae9310b21bad4e251ed588c1114573c973554b", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=a7d93c939a9cedbc239b3ce647fb8a22125a4d22", "patch": "@@ -17,7 +17,6 @@ use ffi::{OsString, OsStr, CString, CStr};\n use fmt;\n use io::{self, Error, ErrorKind};\n use libc::{self, pid_t, c_void, c_int, gid_t, uid_t};\n-use mem;\n use ptr;\n use sys::fd::FileDesc;\n use sys::fs::{File, OpenOptions};\n@@ -315,21 +314,31 @@ impl Process {\n             *sys::os::environ() = envp as *const _;\n         }\n \n-        // Reset signal handling so the child process starts in a\n-        // standardized state. libstd ignores SIGPIPE, and signal-handling\n-        // libraries often set a mask. Child processes inherit ignored\n-        // signals and the signal mask from their parent, but most\n-        // UNIX programs do not reset these things on their own, so we\n-        // need to clean things up now to avoid confusing the program\n-        // we're about to run.\n-        let mut set: c::sigset_t = mem::uninitialized();\n-        if c::sigemptyset(&mut set) != 0 ||\n-           c::pthread_sigmask(c::SIG_SETMASK, &set, ptr::null_mut()) != 0 ||\n-           libc::funcs::posix01::signal::signal(\n-               libc::SIGPIPE, mem::transmute(c::SIG_DFL)\n-           ) == mem::transmute(c::SIG_ERR) {\n-            fail(&mut output);\n+        #[cfg(not(target_os = \"nacl\"))]\n+        unsafe fn reset_signal_handling(output: &mut AnonPipe) {\n+            use mem;\n+            // Reset signal handling so the child process starts in a\n+            // standardized state. libstd ignores SIGPIPE, and signal-handling\n+            // libraries often set a mask. Child processes inherit ignored\n+            // signals and the signal mask from their parent, but most\n+            // UNIX programs do not reset these things on their own, so we\n+            // need to clean things up now to avoid confusing the program\n+            // we're about to run.\n+            let mut set: c::sigset_t = mem::uninitialized();\n+            if c::sigemptyset(&mut set) != 0 ||\n+                c::pthread_sigmask(c::SIG_SETMASK, &set, ptr::null_mut()) != 0 ||\n+                libc::funcs::posix01::signal::signal(\n+                    libc::SIGPIPE, mem::transmute(c::SIG_DFL)\n+                        ) == mem::transmute(c::SIG_ERR)\n+            {\n+                fail(output);\n+            }\n+        }\n+        #[cfg(target_os = \"nacl\")]\n+        unsafe fn reset_signal_handling(_output: &mut AnonPipe) {\n+            // NaCl has no signal support.\n         }\n+        reset_signal_handling(&mut output);\n \n         let _ = libc::execvp(*argv, argv);\n         fail(&mut output)\n@@ -411,7 +420,8 @@ fn make_envp(env: Option<&HashMap<OsString, OsString>>)\n \n fn translate_status(status: c_int) -> ExitStatus {\n     #![allow(non_snake_case)]\n-    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\",\n+              target_os = \"nacl\"))]\n     mod imp {\n         pub fn WIFEXITED(status: i32) -> bool { (status & 0xff) == 0 }\n         pub fn WEXITSTATUS(status: i32) -> i32 { (status >> 8) & 0xff }\n@@ -478,6 +488,7 @@ mod tests {\n     // test from being flaky we ignore it on OSX.\n     #[test]\n     #[cfg_attr(target_os = \"macos\", ignore)]\n+    #[cfg_attr(target_os = \"nacl\", ignore)] // no signals on NaCl.\n     fn test_process_mask() {\n         unsafe {\n             // Test to make sure that a signal mask does not get inherited."}, {"sha": "6f6acc2560e0cb0a9c6c761f8c6bb6fccb0b472d", "filename": "src/libstd/sys/unix/sync.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Fsys%2Funix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Fsys%2Funix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fsync.rs?ref=a7d93c939a9cedbc239b3ce647fb8a22125a4d22", "patch": "@@ -34,6 +34,7 @@ extern {\n     // cvars\n     pub fn pthread_cond_wait(cond: *mut pthread_cond_t,\n                              lock: *mut pthread_mutex_t) -> libc::c_int;\n+    #[cfg_attr(target_os = \"nacl\", link_name = \"pthread_cond_timedwait_abs\")]\n     pub fn pthread_cond_timedwait(cond: *mut pthread_cond_t,\n                               lock: *mut pthread_mutex_t,\n                               abstime: *const libc::timespec) -> libc::c_int;\n@@ -313,3 +314,61 @@ mod os {\n \n     pub const PTHREAD_MUTEX_RECURSIVE: libc::c_int = 2;\n }\n+#[cfg(target_os = \"nacl\")]\n+mod os {\n+    use libc;\n+\n+    pub type __nc_basic_thread_data = libc::c_void;\n+\n+    #[repr(C)]\n+    pub struct pthread_mutex_t {\n+        mutex_state: libc::c_int,\n+        mutex_type: libc::c_int,\n+        owner_thread_id: *mut __nc_basic_thread_data,\n+        recursion_counter: libc::uint32_t,\n+        _unused: libc::c_int,\n+    }\n+    #[repr(C)]\n+    pub struct pthread_mutexattr_t {\n+        kind: libc::c_int,\n+    }\n+    #[repr(C)]\n+    pub struct pthread_cond_t {\n+        sequence_number: libc::c_int,\n+        _unused: libc::c_int,\n+    }\n+    #[repr(C)]\n+    pub struct pthread_rwlock_t {\n+        mutex: pthread_mutex_t,\n+        reader_count: libc::c_int,\n+        writers_waiting: libc::c_int,\n+        writer_thread_id: *mut __nc_basic_thread_data,\n+        read_possible: pthread_cond_t,\n+        write_possible: pthread_cond_t,\n+    }\n+\n+    const NC_INVALID_HANDLE: libc::c_int = -1;\n+    const NACL_PTHREAD_ILLEGAL_THREAD_ID: *mut __nc_basic_thread_data\n+        = 0 as *mut __nc_basic_thread_data;\n+\n+    pub const PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = pthread_mutex_t {\n+        mutex_state:       0,\n+        mutex_type:        0,\n+        owner_thread_id:   NACL_PTHREAD_ILLEGAL_THREAD_ID,\n+        recursion_counter: 0,\n+        _unused:           NC_INVALID_HANDLE,\n+    };\n+    pub const PTHREAD_COND_INITIALIZER: pthread_cond_t = pthread_cond_t {\n+        sequence_number: 0,\n+        _unused: NC_INVALID_HANDLE,\n+    };\n+    pub const PTHREAD_RWLOCK_INITIALIZER: pthread_rwlock_t = pthread_rwlock_t {\n+        mutex: PTHREAD_MUTEX_INITIALIZER,\n+        reader_count: 0,\n+        writers_waiting: 0,\n+        writer_thread_id: NACL_PTHREAD_ILLEGAL_THREAD_ID,\n+        read_possible: PTHREAD_COND_INITIALIZER,\n+        write_possible: PTHREAD_COND_INITIALIZER,\n+    };\n+    pub const PTHREAD_MUTEX_RECURSIVE: libc::c_int = 1;\n+}"}, {"sha": "88ff427293580d9c31cc9354bf2615943d929b82", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=a7d93c939a9cedbc239b3ce647fb8a22125a4d22", "patch": "@@ -14,6 +14,7 @@ use prelude::v1::*;\n \n use alloc::boxed::FnBox;\n use cmp;\n+#[cfg(not(target_env = \"newlib\"))]\n use ffi::CString;\n use io;\n use libc::consts::os::posix01::PTHREAD_STACK_MIN;\n@@ -139,6 +140,10 @@ impl Thread {\n                                carg.as_ptr() as *mut libc::c_void);\n         }\n     }\n+    #[cfg(target_env = \"newlib\")]\n+    pub unsafe fn set_name(_name: &str) {\n+        // Newlib has no way to set a thread name.\n+    }\n \n     pub fn sleep(dur: Duration) {\n         let mut ts = libc::timespec {"}, {"sha": "e9bf214e8161c214016eef75b43d6952c656976d", "filename": "src/libstd/sys/unix/thread_local.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Fsys%2Funix%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Fsys%2Funix%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread_local.rs?ref=a7d93c939a9cedbc239b3ce647fb8a22125a4d22", "patch": "@@ -46,7 +46,8 @@ type pthread_key_t = ::libc::c_ulong;\n           target_os = \"dragonfly\",\n           target_os = \"bitrig\",\n           target_os = \"netbsd\",\n-          target_os = \"openbsd\"))]\n+          target_os = \"openbsd\",\n+          target_os = \"nacl\"))]\n type pthread_key_t = ::libc::c_int;\n \n #[cfg(not(any(target_os = \"macos\",\n@@ -55,7 +56,8 @@ type pthread_key_t = ::libc::c_int;\n               target_os = \"dragonfly\",\n               target_os = \"bitrig\",\n               target_os = \"netbsd\",\n-              target_os = \"openbsd\")))]\n+              target_os = \"openbsd\",\n+              target_os = \"nacl\")))]\n type pthread_key_t = ::libc::c_uint;\n \n extern {"}, {"sha": "35d55902f9c8b06db8cbae0302bd1615e7c55647", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=a7d93c939a9cedbc239b3ce647fb8a22125a4d22", "patch": "@@ -77,16 +77,16 @@ mod inner {\n \n     // Apparently android provides this in some other library?\n     // Bitrig's RT extensions are in the C library, not a separate librt\n-    // OpenBSD provide it via libc\n+    // OpenBSD and NaCl provide it via libc\n     #[cfg(not(any(target_os = \"android\",\n                   target_os = \"bitrig\",\n                   target_os = \"netbsd\",\n                   target_os = \"openbsd\",\n-                  target_env = \"musl\")))]\n+                  target_env = \"musl\",\n+                  target_os = \"nacl\")))]\n     #[link(name = \"rt\")]\n     extern {}\n \n-\n     extern {\n         #[cfg_attr(target_os = \"netbsd\", link_name = \"__clock_gettime50\")]\n         fn clock_gettime(clk_id: libc::c_int, tp: *mut libc::timespec) -> libc::c_int;"}, {"sha": "ca44dec627e37177e0475436510c3fc4ecd693d0", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=a7d93c939a9cedbc239b3ce647fb8a22125a4d22", "patch": "@@ -27,6 +27,7 @@ pub enum Os {\n     OsBitrig,\n     OsNetbsd,\n     OsOpenbsd,\n+    OsNaCl,\n }\n \n #[derive(PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Clone, Copy, Debug)]\n@@ -143,6 +144,7 @@ impl fmt::Display for Os {\n             OsBitrig => \"bitrig\".fmt(f),\n             OsNetbsd => \"netbsd\".fmt(f),\n             OsOpenbsd => \"openbsd\".fmt(f),\n+            OsNaCl => \"nacl\".fmt(f),\n         }\n     }\n }"}, {"sha": "12541dc010bcf97efd45b9749900f964d97edef2", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d93c939a9cedbc239b3ce647fb8a22125a4d22/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=a7d93c939a9cedbc239b3ce647fb8a22125a4d22", "patch": "@@ -1084,12 +1084,16 @@ impl MetricMap {\n /// elimination.\n ///\n /// This function is a no-op, and does not even read from `dummy`.\n+#[cfg(not(all(target_os = \"nacl\", target_arch = \"le32\")))]\n pub fn black_box<T>(dummy: T) -> T {\n     // we need to \"use\" the argument in some way LLVM can't\n     // introspect.\n     unsafe {asm!(\"\" : : \"r\"(&dummy))}\n     dummy\n }\n+#[cfg(all(target_os = \"nacl\", target_arch = \"le32\"))]\n+#[inline(never)]\n+pub fn black_box<T>(dummy: T) -> T { dummy }\n \n \n impl Bencher {"}]}