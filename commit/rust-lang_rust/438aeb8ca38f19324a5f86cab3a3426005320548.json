{"sha": "438aeb8ca38f19324a5f86cab3a3426005320548", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzOGFlYjhjYTM4ZjE5MzI0YTVmODZjYWIzYTM0MjYwMDUzMjA1NDg=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-02T18:29:45Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-20T03:08:38Z"}, "message": "Avoid cloning Place in codegen_place", "tree": {"sha": "65851cdb44bb2636a96ac8c4c82eabe30168cf65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65851cdb44bb2636a96ac8c4c82eabe30168cf65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/438aeb8ca38f19324a5f86cab3a3426005320548", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/438aeb8ca38f19324a5f86cab3a3426005320548", "html_url": "https://github.com/rust-lang/rust/commit/438aeb8ca38f19324a5f86cab3a3426005320548", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/438aeb8ca38f19324a5f86cab3a3426005320548/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e11adb13b6944836e703ec5e9c5f0fa0bb5b4927", "url": "https://api.github.com/repos/rust-lang/rust/commits/e11adb13b6944836e703ec5e9c5f0fa0bb5b4927", "html_url": "https://github.com/rust-lang/rust/commit/e11adb13b6944836e703ec5e9c5f0fa0bb5b4927"}], "stats": {"total": 91, "additions": 51, "deletions": 40}, "files": [{"sha": "f27cc632c1f9a7cc8eaf4700f02d56e3db09f069", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/438aeb8ca38f19324a5f86cab3a3426005320548/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438aeb8ca38f19324a5f86cab3a3426005320548/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=438aeb8ca38f19324a5f86cab3a3426005320548", "patch": "@@ -1954,6 +1954,15 @@ impl From<Local> for PlaceBase<'_> {\n     }\n }\n \n+impl<'a, 'tcx> PlaceRef<'a, 'tcx> {\n+    pub fn iterate<R>(\n+        &self,\n+        op: impl FnOnce(&PlaceBase<'tcx>, ProjectionsIter<'_, 'tcx>) -> R,\n+    ) -> R {\n+        Place::iterate_over(self.base, self.projection, op)\n+    }\n+}\n+\n /// A linked list of projections running up the stack; begins with the\n /// innermost projection and extends to the outermost (e.g., `a.b.c`\n /// would have the place `b` with a \"next\" pointer to `b.c`)."}, {"sha": "d4b434ffe809c217b8807f546991a407bab43c4c", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/438aeb8ca38f19324a5f86cab3a3426005320548/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438aeb8ca38f19324a5f86cab3a3426005320548/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=438aeb8ca38f19324a5f86cab3a3426005320548", "patch": "@@ -253,7 +253,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n             PassMode::Direct(_) | PassMode::Pair(..) => {\n                 let op =\n-                    self.codegen_consume(&mut bx, &mir::Place::RETURN_PLACE);\n+                    self.codegen_consume(&mut bx, &mir::Place::RETURN_PLACE.as_place_ref());\n                 if let Ref(llval, _, align) = op.val {\n                     bx.load(llval, align)\n                 } else {\n@@ -314,7 +314,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             return\n         }\n \n-        let place = self.codegen_place(&mut bx, location);\n+        let place = self.codegen_place(&mut bx, &location.as_place_ref());\n         let (args1, args2);\n         let mut args = if let Some(llextra) = place.llextra {\n             args2 = [place.llval, llextra];\n@@ -1135,7 +1135,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 }\n             }\n         } else {\n-            self.codegen_place(bx, dest)\n+            self.codegen_place(bx, &mir::PlaceRef {\n+                base: &dest.base,\n+                projection: &dest.projection,\n+            })\n         };\n         if fn_ret.is_indirect() {\n             if dest.align < dest.layout.align.abi {\n@@ -1168,7 +1171,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 LocalRef::Place(place) => self.codegen_transmute_into(bx, src, place),\n                 LocalRef::UnsizedPlace(_) => bug!(\"transmute must not involve unsized locals\"),\n                 LocalRef::Operand(None) => {\n-                    let dst_layout = bx.layout_of(self.monomorphized_place_ty(dst));\n+                    let dst_layout = bx.layout_of(self.monomorphized_place_ty(&dst.as_place_ref()));\n                     assert!(!dst_layout.ty.has_erasable_regions());\n                     let place = PlaceRef::alloca(bx, dst_layout, \"transmute_temp\");\n                     place.storage_live(bx);\n@@ -1183,7 +1186,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 }\n             }\n         } else {\n-            let dst = self.codegen_place(bx, dst);\n+            let dst = self.codegen_place(bx, &dst.as_place_ref());\n             self.codegen_transmute_into(bx, src, dst);\n         }\n     }"}, {"sha": "0f6a95c1968b8cc0da05db2d0ceab443ced761cf", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/438aeb8ca38f19324a5f86cab3a3426005320548/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438aeb8ca38f19324a5f86cab3a3426005320548/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=438aeb8ca38f19324a5f86cab3a3426005320548", "patch": "@@ -380,11 +380,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     fn maybe_codegen_consume_direct(\n         &mut self,\n         bx: &mut Bx,\n-        place: &mir::Place<'tcx>\n+        place_ref: &mir::PlaceRef<'_, 'tcx>\n     ) -> Option<OperandRef<'tcx, Bx::Value>> {\n-        debug!(\"maybe_codegen_consume_direct(place={:?})\", place);\n+        debug!(\"maybe_codegen_consume_direct(place_ref={:?})\", place_ref);\n \n-        place.iterate(|place_base, place_projection| {\n+        place_ref.iterate(|place_base, place_projection| {\n             if let mir::PlaceBase::Local(index) = place_base {\n                 match self.locals[*index] {\n                     LocalRef::Operand(Some(mut o)) => {\n@@ -413,7 +413,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         Some(o)\n                     }\n                     LocalRef::Operand(None) => {\n-                        bug!(\"use of {:?} before def\", place);\n+                        bug!(\"use of {:?} before def\", place_ref);\n                     }\n                     LocalRef::Place(..) | LocalRef::UnsizedPlace(..) => {\n                         // watch out for locals that do not have an\n@@ -430,25 +430,25 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn codegen_consume(\n         &mut self,\n         bx: &mut Bx,\n-        place: &mir::Place<'tcx>\n+        place_ref: &mir::PlaceRef<'_, 'tcx>\n     ) -> OperandRef<'tcx, Bx::Value> {\n-        debug!(\"codegen_consume(place={:?})\", place);\n+        debug!(\"codegen_consume(place_ref={:?})\", place_ref);\n \n-        let ty = self.monomorphized_place_ty(place);\n+        let ty = self.monomorphized_place_ty(place_ref);\n         let layout = bx.cx().layout_of(ty);\n \n         // ZSTs don't require any actual memory access.\n         if layout.is_zst() {\n             return OperandRef::new_zst(bx, layout);\n         }\n \n-        if let Some(o) = self.maybe_codegen_consume_direct(bx, place) {\n+        if let Some(o) = self.maybe_codegen_consume_direct(bx, place_ref) {\n             return o;\n         }\n \n         // for most places, to consume them we just load them\n         // out from their home\n-        let place = self.codegen_place(bx, place);\n+        let place = self.codegen_place(bx, place_ref);\n         bx.load_operand(place)\n     }\n \n@@ -462,7 +462,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         match *operand {\n             mir::Operand::Copy(ref place) |\n             mir::Operand::Move(ref place) => {\n-                self.codegen_consume(bx, place)\n+                self.codegen_consume(bx, &place.as_place_ref())\n             }\n \n             mir::Operand::Constant(ref constant) => {"}, {"sha": "b38e58baaf6a4982c4df030d0d821b50900dcf44", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/438aeb8ca38f19324a5f86cab3a3426005320548/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438aeb8ca38f19324a5f86cab3a3426005320548/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=438aeb8ca38f19324a5f86cab3a3426005320548", "patch": "@@ -428,15 +428,14 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn codegen_place(\n         &mut self,\n         bx: &mut Bx,\n-        place: &mir::Place<'tcx>\n+        place_ref: &mir::PlaceRef<'_, 'tcx>\n     ) -> PlaceRef<'tcx, Bx::Value> {\n-        debug!(\"codegen_place(place={:?})\", place);\n-\n+        debug!(\"codegen_place(place_ref={:?})\", place_ref);\n         let cx = self.cx;\n         let tcx = self.cx.tcx();\n \n-        let result = match place {\n-            mir::Place {\n+        let result = match &place_ref {\n+            mir::PlaceRef {\n                 base: mir::PlaceBase::Local(index),\n                 projection: None,\n             } => {\n@@ -448,11 +447,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         return bx.load_operand(place).deref(cx);\n                     }\n                     LocalRef::Operand(..) => {\n-                        bug!(\"using operand local {:?} as place\", place);\n+                        bug!(\"using operand local {:?} as place\", place_ref);\n                     }\n                 }\n             }\n-            mir::Place {\n+            mir::PlaceRef {\n                 base: mir::PlaceBase::Static(box mir::Static {\n                     ty,\n                     kind: mir::StaticKind::Promoted(promoted),\n@@ -485,7 +484,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     }\n                 }\n             }\n-            mir::Place {\n+            mir::PlaceRef {\n                 base: mir::PlaceBase::Static(box mir::Static {\n                     ty,\n                     kind: mir::StaticKind::Static(def_id),\n@@ -498,27 +497,27 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let static_ = bx.get_static(*def_id);\n                 PlaceRef::new_thin_place(bx, static_, layout, layout.align.abi)\n             },\n-            mir::Place {\n+            mir::PlaceRef {\n                 base,\n                 projection: Some(box mir::Projection {\n                     base: proj_base,\n                     elem: mir::ProjectionElem::Deref,\n                 }),\n             } => {\n                 // Load the pointer from its location.\n-                self.codegen_consume(bx, &mir::Place {\n-                    base: base.clone(),\n-                    projection: proj_base.clone(),\n+                self.codegen_consume(bx, &mir::PlaceRef {\n+                    base,\n+                    projection: proj_base,\n                 }).deref(bx.cx())\n             }\n-            mir::Place {\n+            mir::PlaceRef {\n                 base,\n                 projection: Some(projection),\n             } => {\n                 // FIXME turn this recursion into iteration\n-                let cg_base = self.codegen_place(bx, &mir::Place {\n-                    base: base.clone(),\n-                    projection: projection.base.clone(),\n+                let cg_base = self.codegen_place(bx, &mir::PlaceRef {\n+                    base,\n+                    projection: &projection.base,\n                 });\n \n                 match projection.elem {\n@@ -573,13 +572,13 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 }\n             }\n         };\n-        debug!(\"codegen_place(place={:?}) => {:?}\", place, result);\n+        debug!(\"codegen_place(place={:?}) => {:?}\", place_ref, result);\n         result\n     }\n \n-    pub fn monomorphized_place_ty(&self, place: &mir::Place<'tcx>) -> Ty<'tcx> {\n+    pub fn monomorphized_place_ty(&self, place_ref: &mir::PlaceRef<'_, 'tcx>) -> Ty<'tcx> {\n         let tcx = self.cx.tcx();\n-        let place_ty = place.ty(self.mir, tcx);\n+        let place_ty = mir::Place::ty_from(place_ref.base, place_ref.projection, self.mir, tcx);\n         self.monomorphize(&place_ty.ty)\n     }\n }"}, {"sha": "34ecf39a540e74b18e2c69d650fae0171f69a923", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/438aeb8ca38f19324a5f86cab3a3426005320548/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438aeb8ca38f19324a5f86cab3a3426005320548/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=438aeb8ca38f19324a5f86cab3a3426005320548", "patch": "@@ -355,7 +355,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n \n             mir::Rvalue::Ref(_, bk, ref place) => {\n-                let cg_place = self.codegen_place(&mut bx, place);\n+                let cg_place = self.codegen_place(&mut bx, &place.as_place_ref());\n \n                 let ty = cg_place.layout.ty;\n \n@@ -446,7 +446,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n             mir::Rvalue::Discriminant(ref place) => {\n                 let discr_ty = rvalue.ty(&*self.mir, bx.tcx());\n-                let discr =  self.codegen_place(&mut bx, place)\n+                let discr =  self.codegen_place(&mut bx, &place.as_place_ref())\n                     .codegen_get_discr(&mut bx, discr_ty);\n                 (bx, OperandRef {\n                     val: OperandValue::Immediate(discr),\n@@ -527,7 +527,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n         }\n         // use common size calculation for non zero-sized types\n-        let cg_value = self.codegen_place(bx, place);\n+        let cg_value = self.codegen_place(bx, &place.as_place_ref());\n         return cg_value.len(bx.cx());\n     }\n "}, {"sha": "499cda1cf8449b02e0cc359755490cf3ea4e4f41", "filename": "src/librustc_codegen_ssa/mir/statement.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/438aeb8ca38f19324a5f86cab3a3426005320548/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438aeb8ca38f19324a5f86cab3a3426005320548/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs?ref=438aeb8ca38f19324a5f86cab3a3426005320548", "patch": "@@ -46,12 +46,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         }\n                     }\n                 } else {\n-                    let cg_dest = self.codegen_place(&mut bx, place);\n+                    let cg_dest = self.codegen_place(&mut bx, &place.as_place_ref());\n                     self.codegen_rvalue(bx, cg_dest, rvalue)\n                 }\n             }\n             mir::StatementKind::SetDiscriminant{ref place, variant_index} => {\n-                self.codegen_place(&mut bx, place)\n+                self.codegen_place(&mut bx, &place.as_place_ref())\n                     .codegen_set_discr(&mut bx, variant_index);\n                 bx\n             }\n@@ -73,7 +73,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n             mir::StatementKind::InlineAsm(ref asm) => {\n                 let outputs = asm.outputs.iter().map(|output| {\n-                    self.codegen_place(&mut bx, output)\n+                    self.codegen_place(&mut bx, &output.as_place_ref())\n                 }).collect();\n \n                 let input_vals = asm.inputs.iter()"}]}