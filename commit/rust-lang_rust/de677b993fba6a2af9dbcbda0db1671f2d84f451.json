{"sha": "de677b993fba6a2af9dbcbda0db1671f2d84f451", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNjc3Yjk5M2ZiYTZhMmFmOWRiY2JkYTBkYjE2NzFmMmQ4NGY0NTE=", "commit": {"author": {"name": "Kenny Goodin", "email": "kennethbgoodin@gmail.com", "date": "2019-05-29T22:58:54Z"}, "committer": {"name": "Kenny Goodin", "email": "kennethbgoodin@gmail.com", "date": "2019-06-04T17:31:40Z"}, "message": "Remove asterisk suggestion for move errors in borrowck\n\nAs per issue #54985 removes the not useful suggestion to remove asterisk in\nmove errors. Includes minor changes to tests in the `ui` suite to account\nfor the removed suggestion.", "tree": {"sha": "d5b37be5544fd37db75be887dd217552ac78d5f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5b37be5544fd37db75be887dd217552ac78d5f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de677b993fba6a2af9dbcbda0db1671f2d84f451", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de677b993fba6a2af9dbcbda0db1671f2d84f451", "html_url": "https://github.com/rust-lang/rust/commit/de677b993fba6a2af9dbcbda0db1671f2d84f451", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de677b993fba6a2af9dbcbda0db1671f2d84f451/comments", "author": {"login": "kungfukennyg", "id": 6355483, "node_id": "MDQ6VXNlcjYzNTU0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/6355483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kungfukennyg", "html_url": "https://github.com/kungfukennyg", "followers_url": "https://api.github.com/users/kungfukennyg/followers", "following_url": "https://api.github.com/users/kungfukennyg/following{/other_user}", "gists_url": "https://api.github.com/users/kungfukennyg/gists{/gist_id}", "starred_url": "https://api.github.com/users/kungfukennyg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kungfukennyg/subscriptions", "organizations_url": "https://api.github.com/users/kungfukennyg/orgs", "repos_url": "https://api.github.com/users/kungfukennyg/repos", "events_url": "https://api.github.com/users/kungfukennyg/events{/privacy}", "received_events_url": "https://api.github.com/users/kungfukennyg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kungfukennyg", "id": 6355483, "node_id": "MDQ6VXNlcjYzNTU0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/6355483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kungfukennyg", "html_url": "https://github.com/kungfukennyg", "followers_url": "https://api.github.com/users/kungfukennyg/followers", "following_url": "https://api.github.com/users/kungfukennyg/following{/other_user}", "gists_url": "https://api.github.com/users/kungfukennyg/gists{/gist_id}", "starred_url": "https://api.github.com/users/kungfukennyg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kungfukennyg/subscriptions", "organizations_url": "https://api.github.com/users/kungfukennyg/orgs", "repos_url": "https://api.github.com/users/kungfukennyg/repos", "events_url": "https://api.github.com/users/kungfukennyg/events{/privacy}", "received_events_url": "https://api.github.com/users/kungfukennyg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acda261de83475cf6cbc607d570153bb864ee7be", "url": "https://api.github.com/repos/rust-lang/rust/commits/acda261de83475cf6cbc607d570153bb864ee7be", "html_url": "https://github.com/rust-lang/rust/commit/acda261de83475cf6cbc607d570153bb864ee7be"}], "stats": {"total": 126, "additions": 53, "deletions": 73}, "files": [{"sha": "c421839513c012de4ce0eb91c8ca75257733a601", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 6, "deletions": 26, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/de677b993fba6a2af9dbcbda0db1671f2d84f451/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de677b993fba6a2af9dbcbda0db1671f2d84f451/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=de677b993fba6a2af9dbcbda0db1671f2d84f451", "patch": "@@ -503,32 +503,12 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 move_from,\n                 ..\n             } => {\n-                let try_remove_deref = match move_from {\n-                    Place::Projection(box Projection {\n-                        elem: ProjectionElem::Deref,\n-                        ..\n-                    }) => true,\n-                    _ => false,\n-                };\n-                if try_remove_deref && snippet.starts_with('*') {\n-                    // The snippet doesn't start with `*` in (e.g.) index\n-                    // expressions `a[b]`, which roughly desugar to\n-                    // `*Index::index(&a, b)` or\n-                    // `*IndexMut::index_mut(&mut a, b)`.\n-                    err.span_suggestion(\n-                        span,\n-                        \"consider removing the `*`\",\n-                        snippet[1..].to_owned(),\n-                        Applicability::Unspecified,\n-                    );\n-                } else {\n-                    err.span_suggestion(\n-                        span,\n-                        \"consider borrowing here\",\n-                        format!(\"&{}\", snippet),\n-                        Applicability::Unspecified,\n-                    );\n-                }\n+                err.span_suggestion(\n+                    span,\n+                    \"consider borrowing here\",\n+                    format!(\"&{}\", snippet),\n+                    Applicability::Unspecified,\n+                );\n \n                 if binds_to.is_empty() {\n                     let place_ty = move_from.ty(self.mir, self.infcx.tcx).ty;"}, {"sha": "349e3f4a836a0bbf5cf1bb67a7f9072333590cb4", "filename": "src/test/ui/access-mode-in-closures.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de677b993fba6a2af9dbcbda0db1671f2d84f451/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de677b993fba6a2af9dbcbda0db1671f2d84f451/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr?ref=de677b993fba6a2af9dbcbda0db1671f2d84f451", "patch": "@@ -6,7 +6,7 @@ LL |         match *s { S(v) => v }\n    |               |      |\n    |               |      data moved here\n    |               |      move occurs because `v` has type `std::vec::Vec<isize>`, which does not implement the `Copy` trait\n-   |               help: consider removing the `*`: `s`\n+   |               help: consider borrowing here: `&*s`\n \n error: aborting due to previous error\n "}, {"sha": "5880a1abb818ca384749f2d98c81c6e97e371606", "filename": "src/test/ui/borrowck/borrowck-issue-2657-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de677b993fba6a2af9dbcbda0db1671f2d84f451/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de677b993fba6a2af9dbcbda0db1671f2d84f451/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr?ref=de677b993fba6a2af9dbcbda0db1671f2d84f451", "patch": "@@ -5,7 +5,7 @@ LL |         let _b = *y;\n    |                  ^^\n    |                  |\n    |                  move occurs because `*y` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n-   |                  help: consider removing the `*`: `y`\n+   |                  help: consider borrowing here: `&*y`\n \n error: aborting due to previous error\n "}, {"sha": "d56b9f562c932dfc5c51feb38a4916298a01ca1a", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de677b993fba6a2af9dbcbda0db1671f2d84f451/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de677b993fba6a2af9dbcbda0db1671f2d84f451/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr?ref=de677b993fba6a2af9dbcbda0db1671f2d84f451", "patch": "@@ -2,7 +2,7 @@ error[E0507]: cannot move out of `f.0` which is behind a shared reference\n   --> $DIR/borrowck-move-error-with-note.rs:11:11\n    |\n LL |     match *f {\n-   |           ^^ help: consider removing the `*`: `f`\n+   |           ^^ help: consider borrowing here: `&*f`\n LL |         Foo::Foo1(num1,\n    |                   ---- data moved here\n LL |                   num2) => (),"}, {"sha": "7dfae33920e1cd146e420df19fefc1d7ce986745", "filename": "src/test/ui/borrowck/borrowck-move-from-unsafe-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de677b993fba6a2af9dbcbda0db1671f2d84f451/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de677b993fba6a2af9dbcbda0db1671f2d84f451/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr?ref=de677b993fba6a2af9dbcbda0db1671f2d84f451", "patch": "@@ -5,7 +5,7 @@ LL |     let y = *x;\n    |             ^^\n    |             |\n    |             move occurs because `*x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-   |             help: consider removing the `*`: `x`\n+   |             help: consider borrowing here: `&*x`\n \n error: aborting due to previous error\n "}, {"sha": "1501644fac758e1ef9024d09056ae258fc872dac", "filename": "src/test/ui/borrowck/borrowck-move-out-of-overloaded-deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de677b993fba6a2af9dbcbda0db1671f2d84f451/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de677b993fba6a2af9dbcbda0db1671f2d84f451/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.stderr?ref=de677b993fba6a2af9dbcbda0db1671f2d84f451", "patch": "@@ -5,7 +5,7 @@ LL |     let _x = *Rc::new(\"hi\".to_string());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n    |              move occurs because value has type `std::string::String`, which does not implement the `Copy` trait\n-   |              help: consider removing the `*`: `Rc::new(\"hi\".to_string())`\n+   |              help: consider borrowing here: `&*Rc::new(\"hi\".to_string())`\n \n error: aborting due to previous error\n "}, {"sha": "78d44f320619973ec26a63cde793d65224c31a2a", "filename": "src/test/ui/borrowck/issue-54597-reject-move-out-of-borrow-via-pat.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de677b993fba6a2af9dbcbda0db1671f2d84f451/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de677b993fba6a2af9dbcbda0db1671f2d84f451/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr?ref=de677b993fba6a2af9dbcbda0db1671f2d84f451", "patch": "@@ -5,7 +5,7 @@ LL |             *array\n    |             ^^^^^^\n    |             |\n    |             move occurs because `*array` has type `std::vec::Vec<Value>`, which does not implement the `Copy` trait\n-   |             help: consider removing the `*`: `array`\n+   |             help: consider borrowing here: `&*array`\n \n error: aborting due to previous error\n "}, {"sha": "d276231dc0c967103b894dff7784ed953f5daa48", "filename": "src/test/ui/issues/issue-20801.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de677b993fba6a2af9dbcbda0db1671f2d84f451/src%2Ftest%2Fui%2Fissues%2Fissue-20801.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de677b993fba6a2af9dbcbda0db1671f2d84f451/src%2Ftest%2Fui%2Fissues%2Fissue-20801.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20801.stderr?ref=de677b993fba6a2af9dbcbda0db1671f2d84f451", "patch": "@@ -5,7 +5,7 @@ LL |     let a = unsafe { *mut_ref() };\n    |                      ^^^^^^^^^^\n    |                      |\n    |                      move occurs because value has type `T`, which does not implement the `Copy` trait\n-   |                      help: consider removing the `*`: `mut_ref()`\n+   |                      help: consider borrowing here: `&*mut_ref()`\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/issue-20801.rs:29:22\n@@ -14,7 +14,7 @@ LL |     let b = unsafe { *imm_ref() };\n    |                      ^^^^^^^^^^\n    |                      |\n    |                      move occurs because value has type `T`, which does not implement the `Copy` trait\n-   |                      help: consider removing the `*`: `imm_ref()`\n+   |                      help: consider borrowing here: `&*imm_ref()`\n \n error[E0507]: cannot move out of a raw pointer\n   --> $DIR/issue-20801.rs:32:22\n@@ -23,7 +23,7 @@ LL |     let c = unsafe { *mut_ptr() };\n    |                      ^^^^^^^^^^\n    |                      |\n    |                      move occurs because value has type `T`, which does not implement the `Copy` trait\n-   |                      help: consider removing the `*`: `mut_ptr()`\n+   |                      help: consider borrowing here: `&*mut_ptr()`\n \n error[E0507]: cannot move out of a raw pointer\n   --> $DIR/issue-20801.rs:35:22\n@@ -32,7 +32,7 @@ LL |     let d = unsafe { *const_ptr() };\n    |                      ^^^^^^^^^^^^\n    |                      |\n    |                      move occurs because value has type `T`, which does not implement the `Copy` trait\n-   |                      help: consider removing the `*`: `const_ptr()`\n+   |                      help: consider borrowing here: `&*const_ptr()`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "7db5d731acd17baa49079f5113f688cf7e14c142", "filename": "src/test/ui/nll/cannot-move-block-spans.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/de677b993fba6a2af9dbcbda0db1671f2d84f451/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de677b993fba6a2af9dbcbda0db1671f2d84f451/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.stderr?ref=de677b993fba6a2af9dbcbda0db1671f2d84f451", "patch": "@@ -5,7 +5,7 @@ LL |     let x = { *r };\n    |               ^^\n    |               |\n    |               move occurs because `*r` has type `std::string::String`, which does not implement the `Copy` trait\n-   |               help: consider removing the `*`: `r`\n+   |               help: consider borrowing here: `&*r`\n \n error[E0507]: cannot move out of `*r` which is behind a shared reference\n   --> $DIR/cannot-move-block-spans.rs:6:22\n@@ -14,7 +14,7 @@ LL |     let y = unsafe { *r };\n    |                      ^^\n    |                      |\n    |                      move occurs because `*r` has type `std::string::String`, which does not implement the `Copy` trait\n-   |                      help: consider removing the `*`: `r`\n+   |                      help: consider borrowing here: `&*r`\n \n error[E0507]: cannot move out of `*r` which is behind a shared reference\n   --> $DIR/cannot-move-block-spans.rs:7:26\n@@ -23,7 +23,7 @@ LL |     let z = loop { break *r; };\n    |                          ^^\n    |                          |\n    |                          move occurs because `*r` has type `std::string::String`, which does not implement the `Copy` trait\n-   |                          help: consider removing the `*`: `r`\n+   |                          help: consider borrowing here: `&*r`\n \n error[E0508]: cannot move out of type `[std::string::String; 2]`, a non-copy array\n   --> $DIR/cannot-move-block-spans.rs:11:15\n@@ -62,7 +62,7 @@ LL |     let x = { let mut u = 0; u += 1; *r };\n    |                                      ^^\n    |                                      |\n    |                                      move occurs because `*r` has type `std::string::String`, which does not implement the `Copy` trait\n-   |                                      help: consider removing the `*`: `r`\n+   |                                      help: consider borrowing here: `&*r`\n \n error[E0507]: cannot move out of `*r` which is behind a shared reference\n   --> $DIR/cannot-move-block-spans.rs:18:45\n@@ -71,7 +71,7 @@ LL |     let y = unsafe { let mut u = 0; u += 1; *r };\n    |                                             ^^\n    |                                             |\n    |                                             move occurs because `*r` has type `std::string::String`, which does not implement the `Copy` trait\n-   |                                             help: consider removing the `*`: `r`\n+   |                                             help: consider borrowing here: `&*r`\n \n error[E0507]: cannot move out of `*r` which is behind a shared reference\n   --> $DIR/cannot-move-block-spans.rs:19:49\n@@ -80,7 +80,7 @@ LL |     let z = loop { let mut u = 0; u += 1; break *r; u += 2; };\n    |                                                 ^^\n    |                                                 |\n    |                                                 move occurs because `*r` has type `std::string::String`, which does not implement the `Copy` trait\n-   |                                                 help: consider removing the `*`: `r`\n+   |                                                 help: consider borrowing here: `&*r`\n \n error: aborting due to 9 previous errors\n "}, {"sha": "7139617a97a4fe8e0c3cf312ce67a0b035e1addd", "filename": "src/test/ui/nll/move-errors.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/de677b993fba6a2af9dbcbda0db1671f2d84f451/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de677b993fba6a2af9dbcbda0db1671f2d84f451/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr?ref=de677b993fba6a2af9dbcbda0db1671f2d84f451", "patch": "@@ -5,7 +5,7 @@ LL |     let b = *a;\n    |             ^^\n    |             |\n    |             move occurs because `*a` has type `A`, which does not implement the `Copy` trait\n-   |             help: consider removing the `*`: `a`\n+   |             help: consider borrowing here: `&*a`\n \n error[E0508]: cannot move out of type `[A; 1]`, a non-copy array\n   --> $DIR/move-errors.rs:12:13\n@@ -24,7 +24,7 @@ LL |     let s = **r;\n    |             ^^^\n    |             |\n    |             move occurs because `**r` has type `A`, which does not implement the `Copy` trait\n-   |             help: consider removing the `*`: `*r`\n+   |             help: consider borrowing here: `&**r`\n \n error[E0507]: cannot move out of an `Rc`\n   --> $DIR/move-errors.rs:27:13\n@@ -33,7 +33,7 @@ LL |     let s = *r;\n    |             ^^\n    |             |\n    |             move occurs because value has type `A`, which does not implement the `Copy` trait\n-   |             help: consider removing the `*`: `r`\n+   |             help: consider borrowing here: `&*r`\n \n error[E0508]: cannot move out of type `[A; 1]`, a non-copy array\n   --> $DIR/move-errors.rs:32:13\n@@ -49,7 +49,7 @@ error[E0507]: cannot move out of `a.0` which is behind a shared reference\n   --> $DIR/move-errors.rs:38:16\n    |\n LL |     let A(s) = *a;\n-   |           -    ^^ help: consider removing the `*`: `a`\n+   |           -    ^^ help: consider borrowing here: `&*a`\n    |           |\n    |           data moved here\n    |           move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n@@ -148,7 +148,7 @@ error[E0507]: cannot move out of `x.0` which is behind a shared reference\n   --> $DIR/move-errors.rs:110:11\n    |\n LL |     match *x {\n-   |           ^^ help: consider removing the `*`: `x`\n+   |           ^^ help: consider borrowing here: `&*x`\n LL |\n LL |         Ok(s) | Err(s) => (),\n    |            -"}, {"sha": "9db9fcf40f82c0d34bddd0eb2d2322eff055090f", "filename": "src/test/ui/std-uncopyable-atomics.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de677b993fba6a2af9dbcbda0db1671f2d84f451/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de677b993fba6a2af9dbcbda0db1671f2d84f451/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.stderr?ref=de677b993fba6a2af9dbcbda0db1671f2d84f451", "patch": "@@ -5,7 +5,7 @@ LL |     let x = *&x;\n    |             ^^^\n    |             |\n    |             move occurs because value has type `std::sync::atomic::AtomicBool`, which does not implement the `Copy` trait\n-   |             help: consider removing the `*`: `&x`\n+   |             help: consider borrowing here: `&*&x`\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/std-uncopyable-atomics.rs:11:13\n@@ -14,7 +14,7 @@ LL |     let x = *&x;\n    |             ^^^\n    |             |\n    |             move occurs because value has type `std::sync::atomic::AtomicIsize`, which does not implement the `Copy` trait\n-   |             help: consider removing the `*`: `&x`\n+   |             help: consider borrowing here: `&*&x`\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/std-uncopyable-atomics.rs:13:13\n@@ -23,7 +23,7 @@ LL |     let x = *&x;\n    |             ^^^\n    |             |\n    |             move occurs because value has type `std::sync::atomic::AtomicUsize`, which does not implement the `Copy` trait\n-   |             help: consider removing the `*`: `&x`\n+   |             help: consider borrowing here: `&*&x`\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/std-uncopyable-atomics.rs:15:13\n@@ -32,7 +32,7 @@ LL |     let x = *&x;\n    |             ^^^\n    |             |\n    |             move occurs because value has type `std::sync::atomic::AtomicPtr<usize>`, which does not implement the `Copy` trait\n-   |             help: consider removing the `*`: `&x`\n+   |             help: consider borrowing here: `&*&x`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "69b303a66237ebf8184d8737a78551c2a1990340", "filename": "src/test/ui/suggestions/dont-suggest-ref/simple.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/de677b993fba6a2af9dbcbda0db1671f2d84f451/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de677b993fba6a2af9dbcbda0db1671f2d84f451/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs?ref=de677b993fba6a2af9dbcbda0db1671f2d84f451", "patch": "@@ -37,26 +37,26 @@ pub fn main() {\n \n     let X(_t) = *s;\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `*`\n+    //~| HELP consider borrowing here\n     //~| SUGGESTION s\n     if let Either::One(_t) = *r { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `*`\n+    //~| HELP consider borrowing here\n     //~| SUGGESTION r\n     while let Either::One(_t) = *r { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `*`\n+    //~| HELP consider borrowing here\n     //~| SUGGESTION r\n     match *r {\n         //~^ ERROR cannot move\n-        //~| HELP consider removing the `*`\n+        //~| HELP consider borrowing here\n         //~| SUGGESTION r\n         Either::One(_t)\n         | Either::Two(_t) => (),\n     }\n     match *r {\n         //~^ ERROR cannot move\n-        //~| HELP consider removing the `*`\n+        //~| HELP consider borrowing here\n         //~| SUGGESTION r\n         Either::One(_t) => (),\n         Either::Two(ref _t) => (),\n@@ -65,34 +65,34 @@ pub fn main() {\n \n     let X(_t) = *sm;\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `*`\n+    //~| HELP consider borrowing here\n     //~| SUGGESTION sm\n     if let Either::One(_t) = *rm { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `*`\n+    //~| HELP consider borrowing here\n     //~| SUGGESTION rm\n     while let Either::One(_t) = *rm { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `*`\n+    //~| HELP consider borrowing here\n     //~| SUGGESTION rm\n     match *rm {\n         //~^ ERROR cannot move\n-        //~| HELP consider removing the `*`\n+        //~| HELP consider borrowing here\n         //~| SUGGESTION rm\n         Either::One(_t)\n         | Either::Two(_t) => (),\n     }\n     match *rm {\n         //~^ ERROR cannot move\n-        //~| HELP consider removing the `*`\n+        //~| HELP consider borrowing here\n         //~| SUGGESTION rm\n         Either::One(_t) => (),\n         Either::Two(ref _t) => (),\n         // FIXME: should suggest removing `ref` too\n     }\n     match *rm {\n         //~^ ERROR cannot move\n-        //~| HELP consider removing the `*`\n+        //~| HELP consider borrowing here\n         //~| SUGGESTION rm\n         Either::One(_t) => (),\n         Either::Two(ref mut _t) => (),"}, {"sha": "cb3ce5991aeeeeca5e103c6c846e935994d1a544", "filename": "src/test/ui/suggestions/dont-suggest-ref/simple.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/de677b993fba6a2af9dbcbda0db1671f2d84f451/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de677b993fba6a2af9dbcbda0db1671f2d84f451/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr?ref=de677b993fba6a2af9dbcbda0db1671f2d84f451", "patch": "@@ -2,7 +2,7 @@ error[E0507]: cannot move out of `s.0` which is behind a shared reference\n   --> $DIR/simple.rs:38:17\n    |\n LL |     let X(_t) = *s;\n-   |           --    ^^ help: consider removing the `*`: `s`\n+   |           --    ^^ help: consider borrowing here: `&*s`\n    |           |\n    |           data moved here\n    |           move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n@@ -11,7 +11,7 @@ error[E0507]: cannot move out of `r.0` which is behind a shared reference\n   --> $DIR/simple.rs:42:30\n    |\n LL |     if let Either::One(_t) = *r { }\n-   |                        --    ^^ help: consider removing the `*`: `r`\n+   |                        --    ^^ help: consider borrowing here: `&*r`\n    |                        |\n    |                        data moved here\n    |                        move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n@@ -20,7 +20,7 @@ error[E0507]: cannot move out of `r.0` which is behind a shared reference\n   --> $DIR/simple.rs:46:33\n    |\n LL |     while let Either::One(_t) = *r { }\n-   |                           --    ^^ help: consider removing the `*`: `r`\n+   |                           --    ^^ help: consider borrowing here: `&*r`\n    |                           |\n    |                           data moved here\n    |                           move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n@@ -29,7 +29,7 @@ error[E0507]: cannot move out of `r.0` which is behind a shared reference\n   --> $DIR/simple.rs:50:11\n    |\n LL |     match *r {\n-   |           ^^ help: consider removing the `*`: `r`\n+   |           ^^ help: consider borrowing here: `&*r`\n ...\n LL |         Either::One(_t)\n    |                     --\n@@ -41,7 +41,7 @@ error[E0507]: cannot move out of `r.0` which is behind a shared reference\n   --> $DIR/simple.rs:57:11\n    |\n LL |     match *r {\n-   |           ^^ help: consider removing the `*`: `r`\n+   |           ^^ help: consider borrowing here: `&*r`\n ...\n LL |         Either::One(_t) => (),\n    |                     --\n@@ -53,7 +53,7 @@ error[E0507]: cannot move out of `sm.0` which is behind a mutable reference\n   --> $DIR/simple.rs:66:17\n    |\n LL |     let X(_t) = *sm;\n-   |           --    ^^^ help: consider removing the `*`: `sm`\n+   |           --    ^^^ help: consider borrowing here: `&*sm`\n    |           |\n    |           data moved here\n    |           move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n@@ -62,7 +62,7 @@ error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n   --> $DIR/simple.rs:70:30\n    |\n LL |     if let Either::One(_t) = *rm { }\n-   |                        --    ^^^ help: consider removing the `*`: `rm`\n+   |                        --    ^^^ help: consider borrowing here: `&*rm`\n    |                        |\n    |                        data moved here\n    |                        move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n@@ -71,7 +71,7 @@ error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n   --> $DIR/simple.rs:74:33\n    |\n LL |     while let Either::One(_t) = *rm { }\n-   |                           --    ^^^ help: consider removing the `*`: `rm`\n+   |                           --    ^^^ help: consider borrowing here: `&*rm`\n    |                           |\n    |                           data moved here\n    |                           move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n@@ -80,7 +80,7 @@ error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n   --> $DIR/simple.rs:78:11\n    |\n LL |     match *rm {\n-   |           ^^^ help: consider removing the `*`: `rm`\n+   |           ^^^ help: consider borrowing here: `&*rm`\n ...\n LL |         Either::One(_t)\n    |                     --\n@@ -92,7 +92,7 @@ error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n   --> $DIR/simple.rs:85:11\n    |\n LL |     match *rm {\n-   |           ^^^ help: consider removing the `*`: `rm`\n+   |           ^^^ help: consider borrowing here: `&*rm`\n ...\n LL |         Either::One(_t) => (),\n    |                     --\n@@ -104,7 +104,7 @@ error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n   --> $DIR/simple.rs:93:11\n    |\n LL |     match *rm {\n-   |           ^^^ help: consider removing the `*`: `rm`\n+   |           ^^^ help: consider borrowing here: `&*rm`\n ...\n LL |         Either::One(_t) => (),\n    |                     --"}]}