{"sha": "cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNDhlNjFjNWQ4ZjgzZmJmYmZjMjhkYjBiMGJjZTEzNTRkMGNlZDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-03T01:42:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-03T01:42:06Z"}, "message": "Auto merge of #86795 - JohnTitor:fix-bind, r=jackh726\n\nFix const-generics ICE related to binding\n\nFixes #83765, fixes #85848\nr? `@jackh726` as you're familiar with `Binding`. I'd like to get some views if the current approach is right path.", "tree": {"sha": "fa2742d26eae638d47bae349b0b6a831879af62c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa2742d26eae638d47bae349b0b6a831879af62c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1", "html_url": "https://github.com/rust-lang/rust/commit/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "798baebde1fe77e5a660490ec64e727a5d79970d", "url": "https://api.github.com/repos/rust-lang/rust/commits/798baebde1fe77e5a660490ec64e727a5d79970d", "html_url": "https://github.com/rust-lang/rust/commit/798baebde1fe77e5a660490ec64e727a5d79970d"}, {"sha": "58f6cb4557b2d63d311420bbf6bc63aa119f8306", "url": "https://api.github.com/repos/rust-lang/rust/commits/58f6cb4557b2d63d311420bbf6bc63aa119f8306", "html_url": "https://github.com/rust-lang/rust/commit/58f6cb4557b2d63d311420bbf6bc63aa119f8306"}], "stats": {"total": 405, "additions": 280, "deletions": 125}, "files": [{"sha": "a40210d5a3622c29f7033abfbae18cc676038252", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1", "patch": "@@ -754,88 +754,6 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n-pub struct BoundVarsCollector<'tcx> {\n-    binder_index: ty::DebruijnIndex,\n-    vars: BTreeMap<u32, ty::BoundVariableKind>,\n-    // We may encounter the same variable at different levels of binding, so\n-    // this can't just be `Ty`\n-    visited: SsoHashSet<(ty::DebruijnIndex, Ty<'tcx>)>,\n-}\n-\n-impl<'tcx> BoundVarsCollector<'tcx> {\n-    pub fn new() -> Self {\n-        BoundVarsCollector {\n-            binder_index: ty::INNERMOST,\n-            vars: BTreeMap::new(),\n-            visited: SsoHashSet::default(),\n-        }\n-    }\n-\n-    pub fn into_vars(self, tcx: TyCtxt<'tcx>) -> &'tcx ty::List<ty::BoundVariableKind> {\n-        let max = self.vars.iter().map(|(k, _)| *k).max().unwrap_or_else(|| 0);\n-        for i in 0..max {\n-            if let None = self.vars.get(&i) {\n-                panic!(\"Unknown variable: {:?}\", i);\n-            }\n-        }\n-\n-        tcx.mk_bound_variable_kinds(self.vars.into_iter().map(|(_, v)| v))\n-    }\n-}\n-\n-impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n-    type BreakTy = ();\n-\n-    fn visit_binder<T: TypeFoldable<'tcx>>(\n-        &mut self,\n-        t: &Binder<'tcx, T>,\n-    ) -> ControlFlow<Self::BreakTy> {\n-        self.binder_index.shift_in(1);\n-        let result = t.super_visit_with(self);\n-        self.binder_index.shift_out(1);\n-        result\n-    }\n-\n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if t.outer_exclusive_binder < self.binder_index\n-            || !self.visited.insert((self.binder_index, t))\n-        {\n-            return ControlFlow::CONTINUE;\n-        }\n-        use std::collections::btree_map::Entry;\n-        match *t.kind() {\n-            ty::Bound(debruijn, bound_ty) if debruijn == self.binder_index => {\n-                match self.vars.entry(bound_ty.var.as_u32()) {\n-                    Entry::Vacant(entry) => {\n-                        entry.insert(ty::BoundVariableKind::Ty(bound_ty.kind));\n-                    }\n-                    Entry::Occupied(entry) => match entry.get() {\n-                        ty::BoundVariableKind::Ty(_) => {}\n-                        _ => bug!(\"Conflicting bound vars\"),\n-                    },\n-                }\n-            }\n-\n-            _ => (),\n-        };\n-\n-        t.super_visit_with(self)\n-    }\n-\n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        match r {\n-            ty::ReLateBound(index, _br) if *index == self.binder_index => {\n-                // If you hit this, you should be using `Binder::bind_with_vars` or `Binder::rebind`\n-                bug!(\"Trying to collect bound vars with a bound region: {:?} {:?}\", index, _br)\n-            }\n-\n-            _ => (),\n-        };\n-\n-        r.super_visit_with(self)\n-    }\n-}\n-\n pub struct ValidateBoundVars<'tcx> {\n     bound_vars: &'tcx ty::List<ty::BoundVariableKind>,\n     binder_index: ty::DebruijnIndex,"}, {"sha": "73f0811a5042999e7ba7e7c4e76ac543613cee29", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1", "patch": "@@ -5,7 +5,6 @@\n use self::TyKind::*;\n \n use crate::infer::canonical::Canonical;\n-use crate::ty::fold::BoundVarsCollector;\n use crate::ty::fold::ValidateBoundVars;\n use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n use crate::ty::InferTy::{self, *};\n@@ -970,13 +969,6 @@ where\n         Binder(value, ty::List::empty())\n     }\n \n-    /// Wraps `value` in a binder, binding higher-ranked vars (if any).\n-    pub fn bind(value: T, tcx: TyCtxt<'tcx>) -> Binder<'tcx, T> {\n-        let mut collector = BoundVarsCollector::new();\n-        value.visit_with(&mut collector);\n-        Binder(value, collector.into_vars(tcx))\n-    }\n-\n     pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {\n         if cfg!(debug_assertions) {\n             let mut validator = ValidateBoundVars::new(vars);"}, {"sha": "24a9cea6d2187a876f0c9ba5d4afc424501eeea7", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1", "patch": "@@ -7,7 +7,7 @@ use crate::ty::layout::IntegerExt;\n use crate::ty::query::TyCtxtAt;\n use crate::ty::subst::{GenericArgKind, Subst, SubstsRef};\n use crate::ty::TyKind::*;\n-use crate::ty::{self, DefIdTree, List, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{self, DebruijnIndex, DefIdTree, List, Ty, TyCtxt, TypeFoldable};\n use rustc_apfloat::Float as _;\n use rustc_ast as ast;\n use rustc_attr::{self as attr, SignedInt, UnsignedInt};\n@@ -905,6 +905,10 @@ impl<'tcx> ty::TyS<'tcx> {\n         }\n         ty\n     }\n+\n+    pub fn outer_exclusive_binder(&'tcx self) -> DebruijnIndex {\n+        self.outer_exclusive_binder\n+    }\n }\n \n pub enum ExplicitSelf<'tcx> {"}, {"sha": "6216ff6656e28f0a193125e4456c59bb5e7575cd", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1", "patch": "@@ -822,12 +822,7 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                     let obligation = Obligation::new(\n                         ObligationCause::dummy(),\n                         param_env,\n-                        Binder::bind(\n-                            TraitPredicate {\n-                                trait_ref: TraitRef::from_method(tcx, trait_id, substs),\n-                            },\n-                            tcx,\n-                        ),\n+                        Binder::dummy(TraitPredicate { trait_ref }),\n                     );\n \n                     let implsrc = tcx.infer_ctxt().enter(|infcx| {"}, {"sha": "352829234a41a2c25037fd4711bb34359ffe8b9c", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1", "patch": "@@ -1301,7 +1301,7 @@ fn confirm_pointee_candidate<'cx, 'tcx>(\n         ty: self_ty.ptr_metadata_ty(tcx),\n     };\n \n-    confirm_param_env_candidate(selcx, obligation, ty::Binder::bind(predicate, tcx), false)\n+    confirm_param_env_candidate(selcx, obligation, ty::Binder::dummy(predicate), false)\n }\n \n fn confirm_fn_pointer_candidate<'cx, 'tcx>("}, {"sha": "469ac04e54515158fc9fff91fb8a245a0690fb8a", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 107, "deletions": 2, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1", "patch": "@@ -2,14 +2,114 @@ use rustc_errors::ErrorReported;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, Instance, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, Binder, Instance, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n use rustc_span::{sym, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n use traits::{translate_substs, Reveal};\n \n+use rustc_data_structures::sso::SsoHashSet;\n+use std::collections::btree_map::Entry;\n+use std::collections::BTreeMap;\n+use std::ops::ControlFlow;\n+\n use tracing::debug;\n \n+// FIXME(#86795): `BoundVarsCollector` here should **NOT** be used\n+// outside of `resolve_associated_item`. It's just to address #64494,\n+// #83765, and #85848 which are creating bound types/regions that lose\n+// their `Binder` *unintentionally*.\n+// It's ideal to remove `BoundVarsCollector` and just use\n+// `ty::Binder::*` methods but we use this stopgap until we figure out\n+// the \"real\" fix.\n+struct BoundVarsCollector<'tcx> {\n+    binder_index: ty::DebruijnIndex,\n+    vars: BTreeMap<u32, ty::BoundVariableKind>,\n+    // We may encounter the same variable at different levels of binding, so\n+    // this can't just be `Ty`\n+    visited: SsoHashSet<(ty::DebruijnIndex, Ty<'tcx>)>,\n+}\n+\n+impl<'tcx> BoundVarsCollector<'tcx> {\n+    fn new() -> Self {\n+        BoundVarsCollector {\n+            binder_index: ty::INNERMOST,\n+            vars: BTreeMap::new(),\n+            visited: SsoHashSet::default(),\n+        }\n+    }\n+\n+    fn into_vars(self, tcx: TyCtxt<'tcx>) -> &'tcx ty::List<ty::BoundVariableKind> {\n+        let max = self.vars.iter().map(|(k, _)| *k).max().unwrap_or(0);\n+        for i in 0..max {\n+            if let None = self.vars.get(&i) {\n+                panic!(\"Unknown variable: {:?}\", i);\n+            }\n+        }\n+\n+        tcx.mk_bound_variable_kinds(self.vars.into_iter().map(|(_, v)| v))\n+    }\n+}\n+\n+impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n+    type BreakTy = ();\n+\n+    fn visit_binder<T: TypeFoldable<'tcx>>(\n+        &mut self,\n+        t: &Binder<'tcx, T>,\n+    ) -> ControlFlow<Self::BreakTy> {\n+        self.binder_index.shift_in(1);\n+        let result = t.super_visit_with(self);\n+        self.binder_index.shift_out(1);\n+        result\n+    }\n+\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        if t.outer_exclusive_binder() < self.binder_index\n+            || !self.visited.insert((self.binder_index, t))\n+        {\n+            return ControlFlow::CONTINUE;\n+        }\n+        match *t.kind() {\n+            ty::Bound(debruijn, bound_ty) if debruijn == self.binder_index => {\n+                match self.vars.entry(bound_ty.var.as_u32()) {\n+                    Entry::Vacant(entry) => {\n+                        entry.insert(ty::BoundVariableKind::Ty(bound_ty.kind));\n+                    }\n+                    Entry::Occupied(entry) => match entry.get() {\n+                        ty::BoundVariableKind::Ty(_) => {}\n+                        _ => bug!(\"Conflicting bound vars\"),\n+                    },\n+                }\n+            }\n+\n+            _ => (),\n+        };\n+\n+        t.super_visit_with(self)\n+    }\n+\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        match r {\n+            ty::ReLateBound(index, br) if *index == self.binder_index => {\n+                match self.vars.entry(br.var.as_u32()) {\n+                    Entry::Vacant(entry) => {\n+                        entry.insert(ty::BoundVariableKind::Region(br.kind));\n+                    }\n+                    Entry::Occupied(entry) => match entry.get() {\n+                        ty::BoundVariableKind::Region(_) => {}\n+                        _ => bug!(\"Conflicting bound vars\"),\n+                    },\n+                }\n+            }\n+\n+            _ => (),\n+        };\n+\n+        r.super_visit_with(self)\n+    }\n+}\n+\n #[instrument(level = \"debug\", skip(tcx))]\n fn resolve_instance<'tcx>(\n     tcx: TyCtxt<'tcx>,\n@@ -115,7 +215,12 @@ fn resolve_associated_item<'tcx>(\n     );\n \n     let trait_ref = ty::TraitRef::from_method(tcx, trait_id, rcvr_substs);\n-    let vtbl = tcx.codegen_fulfill_obligation((param_env, ty::Binder::bind(trait_ref, tcx)))?;\n+\n+    // See FIXME on `BoundVarsCollector`.\n+    let mut bound_vars_collector = BoundVarsCollector::new();\n+    trait_ref.visit_with(&mut bound_vars_collector);\n+    let trait_binder = ty::Binder::bind_with_vars(trait_ref, bound_vars_collector.into_vars(tcx));\n+    let vtbl = tcx.codegen_fulfill_obligation((param_env, trait_binder))?;\n \n     // Now that we know which impl is being used, we can dispatch to\n     // the actual function:"}, {"sha": "313571274c3de7e54a6e34ae455df21658cf8f56", "filename": "compiler/rustc_ty_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs?ref=cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1", "patch": "@@ -5,6 +5,7 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(control_flow_enum)]\n #![feature(half_open_range_patterns)]\n #![feature(exclusive_range_pattern)]\n #![feature(nll)]"}, {"sha": "2e42d65cce29bef8d80f1c8663f8fd4cedda107a", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1", "patch": "@@ -1694,7 +1694,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 };\n \n                 self.one_bound_for_assoc_type(\n-                    || traits::supertraits(tcx, ty::Binder::bind(trait_ref, tcx)),\n+                    || traits::supertraits(tcx, ty::Binder::dummy(trait_ref)),\n                     || \"Self\".to_string(),\n                     assoc_ident,\n                     span,"}, {"sha": "12d0c14a3d51ab0aabf043da72d51eac6098d8ef", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1", "patch": "@@ -222,12 +222,7 @@ fn compare_predicate_entailment<'tcx>(\n         let mut selcx = traits::SelectionContext::new(&infcx);\n \n         let impl_m_own_bounds = impl_m_predicates.instantiate_own(tcx, impl_to_placeholder_substs);\n-        let (impl_m_own_bounds, _) = infcx.replace_bound_vars_with_fresh_vars(\n-            impl_m_span,\n-            infer::HigherRankedType,\n-            ty::Binder::bind(impl_m_own_bounds.predicates, tcx),\n-        );\n-        for predicate in impl_m_own_bounds {\n+        for predicate in impl_m_own_bounds.predicates {\n             let traits::Normalized { value: predicate, obligations } =\n                 traits::normalize(&mut selcx, param_env, normalize_cause.clone(), predicate);\n \n@@ -258,14 +253,14 @@ fn compare_predicate_entailment<'tcx>(\n         );\n         let impl_sig =\n             inh.normalize_associated_types_in(impl_m_span, impl_m_hir_id, param_env, impl_sig);\n-        let impl_fty = tcx.mk_fn_ptr(ty::Binder::bind(impl_sig, tcx));\n+        let impl_fty = tcx.mk_fn_ptr(ty::Binder::dummy(impl_sig));\n         debug!(\"compare_impl_method: impl_fty={:?}\", impl_fty);\n \n         let trait_sig = tcx.liberate_late_bound_regions(impl_m.def_id, tcx.fn_sig(trait_m.def_id));\n         let trait_sig = trait_sig.subst(tcx, trait_to_placeholder_substs);\n         let trait_sig =\n             inh.normalize_associated_types_in(impl_m_span, impl_m_hir_id, param_env, trait_sig);\n-        let trait_fty = tcx.mk_fn_ptr(ty::Binder::bind(trait_sig, tcx));\n+        let trait_fty = tcx.mk_fn_ptr(ty::Binder::dummy(trait_sig));\n \n         debug!(\"compare_impl_method: trait_fty={:?}\", trait_fty);\n "}, {"sha": "75299bae5ddfd01b64f5c521f944ce383831d5f3", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1", "patch": "@@ -101,6 +101,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n \n         let (method_sig, method_predicates) =\n             self.normalize_associated_types_in(self.span, (method_sig, method_predicates));\n+        let method_sig = ty::Binder::dummy(method_sig);\n \n         // Make sure nobody calls `drop()` explicitly.\n         self.enforce_illegal_method_limitations(&pick);\n@@ -119,12 +120,15 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         // We won't add these if we encountered an illegal sized bound, so that we can use\n         // a custom error in that case.\n         if illegal_sized_bound.is_none() {\n-            let method_ty = self.tcx.mk_fn_ptr(ty::Binder::bind(method_sig, self.tcx));\n-            self.add_obligations(method_ty, all_substs, method_predicates);\n+            self.add_obligations(self.tcx.mk_fn_ptr(method_sig), all_substs, method_predicates);\n         }\n \n         // Create the final `MethodCallee`.\n-        let callee = MethodCallee { def_id: pick.item.def_id, substs: all_substs, sig: method_sig };\n+        let callee = MethodCallee {\n+            def_id: pick.item.def_id,\n+            substs: all_substs,\n+            sig: method_sig.skip_binder(),\n+        };\n         ConfirmResult { callee, illegal_sized_bound }\n     }\n "}, {"sha": "2136d925423b912df2543b47aab578bd8de45022", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1", "patch": "@@ -404,7 +404,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         obligations.extend(traits::predicates_for_generics(cause.clone(), self.param_env, bounds));\n \n         // Also add an obligation for the method type being well-formed.\n-        let method_ty = tcx.mk_fn_ptr(ty::Binder::bind(fn_sig, tcx));\n+        let method_ty = tcx.mk_fn_ptr(ty::Binder::dummy(fn_sig));\n         debug!(\n             \"lookup_in_trait_adjusted: matched method method_ty={:?} obligation={:?}\",\n             method_ty, obligation"}, {"sha": "0e063c86f2f4eb208aab39215388a5eb81570140", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1", "patch": "@@ -1087,14 +1087,9 @@ fn check_method_receiver<'fcx, 'tcx>(\n     debug!(\"check_method_receiver: sig={:?}\", sig);\n \n     let self_ty = fcx.normalize_associated_types_in(span, self_ty);\n-    let self_ty =\n-        fcx.tcx.liberate_late_bound_regions(method.def_id, ty::Binder::bind(self_ty, fcx.tcx));\n \n     let receiver_ty = sig.inputs()[0];\n-\n     let receiver_ty = fcx.normalize_associated_types_in(span, receiver_ty);\n-    let receiver_ty =\n-        fcx.tcx.liberate_late_bound_regions(method.def_id, ty::Binder::bind(receiver_ty, fcx.tcx));\n \n     if fcx.tcx.features().arbitrary_self_types {\n         if !receiver_is_valid(fcx, span, receiver_ty, self_ty, true) {"}, {"sha": "b0e5453b7db924079e1c2f4dcb77d307faf42505", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1", "patch": "@@ -1737,11 +1737,12 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n                         ty::ReErased => tcx.lifetimes.re_static,\n                         _ => r,\n                     });\n+                    let fn_sig = ty::Binder::dummy(fn_sig);\n \n                     let mut visitor = PlaceholderHirTyCollector::default();\n                     visitor.visit_ty(ty);\n                     let mut diag = bad_placeholder_type(tcx, visitor.0, \"return type\");\n-                    let ret_ty = fn_sig.output();\n+                    let ret_ty = fn_sig.skip_binder().output();\n                     if ret_ty != tcx.ty_error() {\n                         if !ret_ty.is_closure() {\n                             let ret_ty_str = match ret_ty.kind() {\n@@ -1767,7 +1768,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n                     }\n                     diag.emit();\n \n-                    ty::Binder::bind(fn_sig, tcx)\n+                    fn_sig\n                 }\n                 None => <dyn AstConv<'_>>::ty_of_fn(\n                     &icx,\n@@ -1811,10 +1812,13 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n             let ty = tcx.type_of(tcx.hir().get_parent_did(hir_id).to_def_id());\n             let inputs =\n                 data.fields().iter().map(|f| tcx.type_of(tcx.hir().local_def_id(f.hir_id)));\n-            ty::Binder::bind(\n-                tcx.mk_fn_sig(inputs, ty, false, hir::Unsafety::Normal, abi::Abi::Rust),\n-                tcx,\n-            )\n+            ty::Binder::dummy(tcx.mk_fn_sig(\n+                inputs,\n+                ty,\n+                false,\n+                hir::Unsafety::Normal,\n+                abi::Abi::Rust,\n+            ))\n         }\n \n         Expr(&hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => {\n@@ -2098,7 +2102,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                 param.bounds.iter().for_each(|bound| match bound {\n                     hir::GenericBound::Outlives(lt) => {\n                         let bound = <dyn AstConv<'_>>::ast_region_to_region(&icx, &lt, None);\n-                        let outlives = ty::Binder::bind(ty::OutlivesPredicate(region, bound), tcx);\n+                        let outlives = ty::Binder::dummy(ty::OutlivesPredicate(region, bound));\n                         predicates.insert((outlives.to_predicate(tcx), lt.span));\n                     }\n                     _ => bug!(),"}, {"sha": "f34badc693e76e175c2579f1c3a058a25809b1a5", "filename": "src/test/ui/const-generics/issues/issue-83765.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.rs?ref=cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1", "patch": "@@ -0,0 +1,38 @@\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+trait TensorDimension {\n+    const DIM: usize;\n+}\n+\n+trait TensorSize: TensorDimension {\n+    fn size(&self) -> [usize; Self::DIM];\n+}\n+\n+trait Broadcastable: TensorSize + Sized {\n+    type Element;\n+    fn lazy_updim<const NEWDIM: usize>(&self, size: [usize; NEWDIM]) {}\n+}\n+\n+struct BMap<'a, R, T: Broadcastable, F: Fn(T::Element) -> R, const DIM: usize> {\n+    reference: &'a T,\n+    closure: F,\n+}\n+\n+impl<'a, R, T: Broadcastable, F: Fn(T::Element) -> R, const DIM: usize> TensorDimension\n+    for BMap<'a, R, T, F, DIM>\n+{\n+    const DIM: usize = DIM;\n+}\n+impl<'a, R, T: Broadcastable, F: Fn(T::Element) -> R, const DIM: usize> TensorSize\n+    for BMap<'a, R, T, F, DIM>\n+{\n+    fn size(&self) -> [usize; DIM] {\n+        //~^ ERROR: method not compatible with trait [E0308]\n+        self.reference.size()\n+        //~^ ERROR: unconstrained generic constant\n+        //~| ERROR: mismatched types\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "ef785bf07ebbfce44fd8765d10bd1fdef2be76c4", "filename": "src/test/ui/const-generics/issues/issue-83765.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr?ref=cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1", "patch": "@@ -0,0 +1,29 @@\n+error[E0308]: method not compatible with trait\n+  --> $DIR/issue-83765.rs:30:5\n+   |\n+LL |     fn size(&self) -> [usize; DIM] {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Self::DIM`, found `DIM`\n+   |\n+   = note: expected type `Self::DIM`\n+              found type `DIM`\n+\n+error: unconstrained generic constant\n+  --> $DIR/issue-83765.rs:32:24\n+   |\n+LL |         self.reference.size()\n+   |                        ^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); Self::DIM]:`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-83765.rs:32:9\n+   |\n+LL |         self.reference.size()\n+   |         ^^^^^^^^^^^^^^^^^^^^^ expected `DIM`, found `Self::DIM`\n+   |\n+   = note: expected type `DIM`\n+              found type `Self::DIM`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "478719869b2c46b4a4a4e4115fde8693d44e262e", "filename": "src/test/ui/const-generics/issues/issue-85848.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-85848.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-85848.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-85848.rs?ref=cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1", "patch": "@@ -0,0 +1,31 @@\n+#![feature(const_generics, const_fn_trait_bound, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+trait _Contains<T> {\n+    const does_contain: bool;\n+}\n+\n+trait Contains<T, const Satisfied: bool> {}\n+\n+trait Delegates<T> {}\n+\n+impl<T, U> Delegates<U> for T where T: Contains<U, true> {}\n+\n+const fn contains<A, B>() -> bool\n+where\n+    A: _Contains<B>,\n+{\n+    A::does_contain\n+}\n+\n+impl<T, U> Contains<T, { contains::<T, U>() }> for U where T: _Contains<U> {}\n+\n+fn writes_to_path<C>(cap: &C) {\n+    writes_to_specific_path(&cap);\n+    //~^ ERROR: the trait bound `(): _Contains<&C>` is not satisfied [E0277]\n+    //~| ERROR: unconstrained generic constant\n+}\n+\n+fn writes_to_specific_path<C: Delegates<()>>(cap: &C) {}\n+\n+fn main() {}"}, {"sha": "5e65136a6bc20736e1b11ddc181bac3000e5d262", "filename": "src/test/ui/const-generics/issues/issue-85848.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-85848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-85848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-85848.stderr?ref=cd48e61c5d8f83fbfbfc28db0b0bce1354d0ced1", "patch": "@@ -0,0 +1,44 @@\n+error[E0277]: the trait bound `(): _Contains<&C>` is not satisfied\n+  --> $DIR/issue-85848.rs:24:5\n+   |\n+LL |     writes_to_specific_path(&cap);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `_Contains<&C>` is not implemented for `()`\n+...\n+LL | fn writes_to_specific_path<C: Delegates<()>>(cap: &C) {}\n+   |                               ------------- required by this bound in `writes_to_specific_path`\n+   |\n+note: required because of the requirements on the impl of `Contains<(), true>` for `&C`\n+  --> $DIR/issue-85848.rs:21:12\n+   |\n+LL | impl<T, U> Contains<T, { contains::<T, U>() }> for U where T: _Contains<U> {}\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^\n+note: required because of the requirements on the impl of `Delegates<()>` for `&C`\n+  --> $DIR/issue-85848.rs:12:12\n+   |\n+LL | impl<T, U> Delegates<U> for T where T: Contains<U, true> {}\n+   |            ^^^^^^^^^^^^     ^\n+\n+error: unconstrained generic constant\n+  --> $DIR/issue-85848.rs:24:5\n+   |\n+LL |     writes_to_specific_path(&cap);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | fn writes_to_specific_path<C: Delegates<()>>(cap: &C) {}\n+   |                               ------------- required by this bound in `writes_to_specific_path`\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { contains::<T, U>() }]:`\n+note: required because of the requirements on the impl of `Contains<(), true>` for `&C`\n+  --> $DIR/issue-85848.rs:21:12\n+   |\n+LL | impl<T, U> Contains<T, { contains::<T, U>() }> for U where T: _Contains<U> {}\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^\n+note: required because of the requirements on the impl of `Delegates<()>` for `&C`\n+  --> $DIR/issue-85848.rs:12:12\n+   |\n+LL | impl<T, U> Delegates<U> for T where T: Contains<U, true> {}\n+   |            ^^^^^^^^^^^^     ^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}