{"sha": "0de7568e417ae001a45ae0a85b8bc2067a5f9c46", "node_id": "C_kwDOAAsO6NoAKDBkZTc1NjhlNDE3YWUwMDFhNDVhZTBhODViOGJjMjA2N2E1ZjljNDY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-04-25T04:07:46Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-05-18T04:34:03Z"}, "message": "Mention traits being upcasted, types being coerced", "tree": {"sha": "4b8d6ec7aa96abef8e68079ca1778c1fffcd05cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b8d6ec7aa96abef8e68079ca1778c1fffcd05cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0de7568e417ae001a45ae0a85b8bc2067a5f9c46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0de7568e417ae001a45ae0a85b8bc2067a5f9c46", "html_url": "https://github.com/rust-lang/rust/commit/0de7568e417ae001a45ae0a85b8bc2067a5f9c46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0de7568e417ae001a45ae0a85b8bc2067a5f9c46/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c5f6e6277b89e47d73a192078697f7a5f3dc0ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c5f6e6277b89e47d73a192078697f7a5f3dc0ac", "html_url": "https://github.com/rust-lang/rust/commit/4c5f6e6277b89e47d73a192078697f7a5f3dc0ac"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "9790a42102837606cbb831fa806e33dc4595e8d7", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0de7568e417ae001a45ae0a85b8bc2067a5f9c46/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de7568e417ae001a45ae0a85b8bc2067a5f9c46/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=0de7568e417ae001a45ae0a85b8bc2067a5f9c46", "patch": "@@ -615,7 +615,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         )];\n \n         let mut has_unsized_tuple_coercion = false;\n-        let mut has_trait_upcasting_coercion = false;\n+        let mut has_trait_upcasting_coercion = None;\n \n         // Keep resolving `CoerceUnsized` and `Unsize` predicates to avoid\n         // emitting a coercion in cases like `Foo<$1>` -> `Foo<$2>`, where\n@@ -635,7 +635,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                             && data_a.principal_def_id() != data_b.principal_def_id()\n                         {\n                             debug!(\"coerce_unsized: found trait upcasting coercion\");\n-                            has_trait_upcasting_coercion = true;\n+                            has_trait_upcasting_coercion = Some((self_ty, unsize_ty));\n                         }\n                         if let ty::Tuple(..) = unsize_ty.kind() {\n                             debug!(\"coerce_unsized: found unsized tuple coercion\");\n@@ -706,14 +706,19 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             .emit();\n         }\n \n-        if has_trait_upcasting_coercion && !self.tcx().features().trait_upcasting {\n-            feature_err(\n+        if let Some((sub, sup)) = has_trait_upcasting_coercion\n+            && !self.tcx().features().trait_upcasting\n+        {\n+            // Renders better when we erase regions, since they're not really the point here.\n+            let (sub, sup) = self.tcx.erase_regions((sub, sup));\n+            let mut err = feature_err(\n                 &self.tcx.sess.parse_sess,\n                 sym::trait_upcasting,\n                 self.cause.span,\n-                \"trait upcasting coercion is experimental\",\n-            )\n-            .emit();\n+                &format!(\"cannot cast `{sub}` to `{sup}`, trait upcasting coercion is experimental\"),\n+            );\n+            err.note(&format!(\"required when coercing `{source}` into `{target}`\"));\n+            err.emit();\n         }\n \n         Ok(coercion)"}, {"sha": "93afa78459d3da72ca90891af547f6f47523ff9b", "filename": "src/test/ui/feature-gates/feature-gate-trait_upcasting.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0de7568e417ae001a45ae0a85b8bc2067a5f9c46/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trait_upcasting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0de7568e417ae001a45ae0a85b8bc2067a5f9c46/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trait_upcasting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trait_upcasting.stderr?ref=0de7568e417ae001a45ae0a85b8bc2067a5f9c46", "patch": "@@ -1,11 +1,12 @@\n-error[E0658]: trait upcasting coercion is experimental\n+error[E0658]: cannot cast `dyn Bar` to `dyn Foo`, trait upcasting coercion is experimental\n   --> $DIR/feature-gate-trait_upcasting.rs:11:25\n    |\n LL |     let foo: &dyn Foo = bar;\n    |                         ^^^\n    |\n    = note: see issue #65991 <https://github.com/rust-lang/rust/issues/65991> for more information\n    = help: add `#![feature(trait_upcasting)]` to the crate attributes to enable\n+   = note: required when coercing `&dyn Bar` into `&dyn Foo`\n \n error: aborting due to previous error\n "}, {"sha": "17bfae2a4e46bdd33fa983a2d29f512a92579916", "filename": "src/test/ui/issues/issue-11515.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0de7568e417ae001a45ae0a85b8bc2067a5f9c46/src%2Ftest%2Fui%2Fissues%2Fissue-11515.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0de7568e417ae001a45ae0a85b8bc2067a5f9c46/src%2Ftest%2Fui%2Fissues%2Fissue-11515.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11515.stderr?ref=0de7568e417ae001a45ae0a85b8bc2067a5f9c46", "patch": "@@ -1,11 +1,12 @@\n-error[E0658]: trait upcasting coercion is experimental\n+error[E0658]: cannot cast `dyn Fn()` to `dyn FnMut()`, trait upcasting coercion is experimental\n   --> $DIR/issue-11515.rs:9:33\n    |\n LL |     let test = box Test { func: closure };\n    |                                 ^^^^^^^\n    |\n    = note: see issue #65991 <https://github.com/rust-lang/rust/issues/65991> for more information\n    = help: add `#![feature(trait_upcasting)]` to the crate attributes to enable\n+   = note: required when coercing `Box<(dyn Fn() + 'static)>` into `Box<(dyn FnMut() + 'static)>`\n \n error: aborting due to previous error\n "}]}