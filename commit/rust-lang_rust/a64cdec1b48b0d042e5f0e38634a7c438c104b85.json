{"sha": "a64cdec1b48b0d042e5f0e38634a7c438c104b85", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NGNkZWMxYjQ4YjBkMDQyZTVmMGUzODYzNGE3YzQzOGMxMDRiODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-12T08:18:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-12T08:18:13Z"}, "message": "Auto merge of #56010 - euclio:intra-doc-spans, r=QuietMisdreavus\n\nfix intra-link resolution spans in block comments\n\nThis commit improves the calculation of code spans for intra-doc\nresolution failures. All sugared doc comments should now have the\ncorrect spans, including those where the comment is longer than the\ndocs.\n\nIt also fixes an issue where the spans were calculated incorrectly for\ncertain unsugared doc comments. The diagnostic will now always use the\nspan of the attributes, as originally intended.\n\nFixes #55964.\n\nr? @QuietMisdreavus", "tree": {"sha": "5d275c1b5a5c1bd9df4ed1d514f3d3ce75a11f02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d275c1b5a5c1bd9df4ed1d514f3d3ce75a11f02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a64cdec1b48b0d042e5f0e38634a7c438c104b85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a64cdec1b48b0d042e5f0e38634a7c438c104b85", "html_url": "https://github.com/rust-lang/rust/commit/a64cdec1b48b0d042e5f0e38634a7c438c104b85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a64cdec1b48b0d042e5f0e38634a7c438c104b85/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8375ab4ff43474c73e3572c2b226560f8cc8e695", "url": "https://api.github.com/repos/rust-lang/rust/commits/8375ab4ff43474c73e3572c2b226560f8cc8e695", "html_url": "https://github.com/rust-lang/rust/commit/8375ab4ff43474c73e3572c2b226560f8cc8e695"}, {"sha": "56413ecffc22b9932f3c3893aa98a36e18818b42", "url": "https://api.github.com/repos/rust-lang/rust/commits/56413ecffc22b9932f3c3893aa98a36e18818b42", "html_url": "https://github.com/rust-lang/rust/commit/56413ecffc22b9932f3c3893aa98a36e18818b42"}], "stats": {"total": 298, "additions": 238, "deletions": 60}, "files": [{"sha": "1e33ec8c37661bada8686f3d07e6658f790d6dfc", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a64cdec1b48b0d042e5f0e38634a7c438c104b85/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64cdec1b48b0d042e5f0e38634a7c438c104b85/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a64cdec1b48b0d042e5f0e38634a7c438c104b85", "patch": "@@ -707,8 +707,6 @@ impl<I: IntoIterator<Item=ast::NestedMetaItem>> NestedAttributesExt for I {\n /// kept separate because of issue #42760.\n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n pub enum DocFragment {\n-    // FIXME #44229 (misdreavus): sugared and raw doc comments can be brought back together once\n-    // hoedown is completely removed from rustdoc.\n     /// A doc fragment created from a `///` or `//!` doc comment.\n     SugaredDoc(usize, syntax_pos::Span, String),\n     /// A doc fragment created from a \"raw\" `#[doc=\"\"]` attribute."}, {"sha": "29062ba58c2e75cf1a8c879261d1523273b9a306", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 75, "deletions": 34, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/a64cdec1b48b0d042e5f0e38634a7c438c104b85/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64cdec1b48b0d042e5f0e38634a7c438c104b85/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=a64cdec1b48b0d042e5f0e38634a7c438c104b85", "patch": "@@ -459,6 +459,19 @@ pub fn span_of_attrs(attrs: &Attributes) -> syntax_pos::Span {\n     start.to(end)\n }\n \n+/// Reports a resolution failure diagnostic.\n+///\n+/// Ideally we can report the diagnostic with the actual span in the source where the link failure\n+/// occurred. However, there's a mismatch between the span in the source code and the span in the\n+/// markdown, so we have to do a bit of work to figure out the correspondence.\n+///\n+/// It's not too hard to find the span for sugared doc comments (`///` and `/**`), because the\n+/// source will match the markdown exactly, excluding the comment markers. However, it's much more\n+/// difficult to calculate the spans for unsugared docs, because we have to deal with escaping and\n+/// other source features. So, we attempt to find the exact source span of the resolution failure\n+/// in sugared docs, but use the span of the documentation attributes themselves for unsugared\n+/// docs. Because this span might be overly large, we display the markdown line containing the\n+/// failure as a note.\n fn resolution_failure(\n     cx: &DocContext,\n     attrs: &Attributes,\n@@ -469,47 +482,75 @@ fn resolution_failure(\n     let sp = span_of_attrs(attrs);\n     let msg = format!(\"`[{}]` cannot be resolved, ignoring it...\", path_str);\n \n-    let code_dox = sp.to_src(cx);\n-\n-    let doc_comment_padding = 3;\n     let mut diag = if let Some(link_range) = link_range {\n-        // blah blah blah\\nblah\\nblah [blah] blah blah\\nblah blah\n-        //                       ^    ~~~~~~\n-        //                       |    link_range\n-        //                       last_new_line_offset\n-\n-        let mut diag;\n-        if dox.lines().count() == code_dox.lines().count() {\n-            let line_offset = dox[..link_range.start].lines().count();\n-            // The span starts in the `///`, so we don't have to account for the leading whitespace.\n-            let code_dox_len = if line_offset <= 1 {\n-                doc_comment_padding\n-            } else {\n-                // The first `///`.\n-                doc_comment_padding +\n-                    // Each subsequent leading whitespace and `///`.\n-                    code_dox.lines().skip(1).take(line_offset - 1).fold(0, |sum, line| {\n-                        sum + doc_comment_padding + line.len() - line.trim_start().len()\n-                    })\n-            };\n+        let src = cx.sess().source_map().span_to_snippet(sp);\n+        let is_all_sugared_doc = attrs.doc_strings.iter().all(|frag| match frag {\n+            DocFragment::SugaredDoc(..) => true,\n+            _ => false,\n+        });\n+\n+        if let (Ok(src), true) = (src, is_all_sugared_doc) {\n+            // The number of markdown lines up to and including the resolution failure.\n+            let num_lines = dox[..link_range.start].lines().count();\n+\n+            // We use `split_terminator('\\n')` instead of `lines()` when counting bytes to ensure\n+            // that DOS-style line endings do not cause the spans to be calculated incorrectly.\n+            let mut src_lines = src.split_terminator('\\n');\n+            let mut md_lines = dox.split_terminator('\\n').take(num_lines).peekable();\n+\n+            // The number of bytes from the start of the source span to the resolution failure that\n+            // are *not* part of the markdown, like comment markers.\n+            let mut extra_src_bytes = 0;\n+\n+            while let Some(md_line) = md_lines.next() {\n+                loop {\n+                    let source_line = src_lines\n+                        .next()\n+                        .expect(\"could not find markdown line in source\");\n+\n+                    match source_line.find(md_line) {\n+                        Some(offset) => {\n+                            extra_src_bytes += if md_lines.peek().is_some() {\n+                                source_line.len() - md_line.len()\n+                            } else {\n+                                offset\n+                            };\n+                            break;\n+                        }\n+                        None => {\n+                            // Since this is a source line that doesn't include a markdown line,\n+                            // we have to count the newline that we split from earlier.\n+                            extra_src_bytes += source_line.len() + 1;\n+                        }\n+                    }\n+                }\n+            }\n \n-            // Extract the specific span.\n             let sp = sp.from_inner_byte_pos(\n-                link_range.start + code_dox_len,\n-                link_range.end + code_dox_len,\n+                link_range.start + extra_src_bytes,\n+                link_range.end + extra_src_bytes,\n             );\n \n-            diag = cx.tcx.struct_span_lint_node(lint::builtin::INTRA_DOC_LINK_RESOLUTION_FAILURE,\n-                                                NodeId::from_u32(0),\n-                                                sp,\n-                                                &msg);\n+            let mut diag = cx.tcx.struct_span_lint_node(\n+                lint::builtin::INTRA_DOC_LINK_RESOLUTION_FAILURE,\n+                NodeId::from_u32(0),\n+                sp,\n+                &msg,\n+            );\n             diag.span_label(sp, \"cannot be resolved, ignoring\");\n+            diag\n         } else {\n-            diag = cx.tcx.struct_span_lint_node(lint::builtin::INTRA_DOC_LINK_RESOLUTION_FAILURE,\n-                                                NodeId::from_u32(0),\n-                                                sp,\n-                                                &msg);\n+            let mut diag = cx.tcx.struct_span_lint_node(\n+                lint::builtin::INTRA_DOC_LINK_RESOLUTION_FAILURE,\n+                NodeId::from_u32(0),\n+                sp,\n+                &msg,\n+            );\n \n+            // blah blah blah\\nblah\\nblah [blah] blah blah\\nblah blah\n+            //                       ^     ~~~~\n+            //                       |     link_range\n+            //                       last_new_line_offset\n             let last_new_line_offset = dox[..link_range.start].rfind('\\n').map_or(0, |n| n + 1);\n             let line = dox[last_new_line_offset..].lines().next().unwrap_or(\"\");\n \n@@ -522,8 +563,8 @@ fn resolution_failure(\n                 before=link_range.start - last_new_line_offset,\n                 found=link_range.len(),\n             ));\n+            diag\n         }\n-        diag\n     } else {\n         cx.tcx.struct_span_lint_node(lint::builtin::INTRA_DOC_LINK_RESOLUTION_FAILURE,\n                                      NodeId::from_u32(0),"}, {"sha": "2bcabdffb3d93dfef806d4f55e8ca87de97a1fa7", "filename": "src/test/rustdoc-ui/.gitattributes", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a64cdec1b48b0d042e5f0e38634a7c438c104b85/src%2Ftest%2Frustdoc-ui%2F.gitattributes", "raw_url": "https://github.com/rust-lang/rust/raw/a64cdec1b48b0d042e5f0e38634a7c438c104b85/src%2Ftest%2Frustdoc-ui%2F.gitattributes", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2F.gitattributes?ref=a64cdec1b48b0d042e5f0e38634a7c438c104b85", "patch": "@@ -0,0 +1 @@\n+intra-links-warning-crlf.rs eol=crlf"}, {"sha": "20f761fcf4f3b97a84a266fb6b35a171d3f53171", "filename": "src/test/rustdoc-ui/intra-links-warning-crlf.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a64cdec1b48b0d042e5f0e38634a7c438c104b85/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64cdec1b48b0d042e5f0e38634a7c438c104b85/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.rs?ref=a64cdec1b48b0d042e5f0e38634a7c438c104b85", "patch": "@@ -0,0 +1,23 @@\n+// ignore-tidy-cr\n+\n+// compile-pass\n+\n+// This file checks the spans of intra-link warnings in a file with CRLF line endings. The\n+// .gitattributes file in this directory should enforce it.\n+\n+/// [error]\n+pub struct A;\n+\n+///\n+/// docs [error1]\n+\n+/// docs [error2]\n+///\n+pub struct B;\n+\n+/**\n+ * This is a multi-line comment.\n+ *\n+ * It also has an [error].\n+ */\n+pub struct C;"}, {"sha": "62537f2ce2dc95993e44726931186a4c2fd9af41", "filename": "src/test/rustdoc-ui/intra-links-warning-crlf.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a64cdec1b48b0d042e5f0e38634a7c438c104b85/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a64cdec1b48b0d042e5f0e38634a7c438c104b85/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.stderr?ref=a64cdec1b48b0d042e5f0e38634a7c438c104b85", "patch": "@@ -0,0 +1,33 @@\n+warning: `[error]` cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning-crlf.rs:8:6\n+   |\n+LL | /// [error]\n+   |      ^^^^^ cannot be resolved, ignoring\n+   |\n+   = note: #[warn(intra_doc_link_resolution_failure)] on by default\n+   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+\n+warning: `[error1]` cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning-crlf.rs:12:11\n+   |\n+LL | /// docs [error1]\n+   |           ^^^^^^ cannot be resolved, ignoring\n+   |\n+   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+\n+warning: `[error2]` cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning-crlf.rs:14:11\n+   |\n+LL | /// docs [error2]\n+   |           ^^^^^^ cannot be resolved, ignoring\n+   |\n+   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+\n+warning: `[error]` cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning-crlf.rs:21:20\n+   |\n+LL |  * It also has an [error].\n+   |                    ^^^^^ cannot be resolved, ignoring\n+   |\n+   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+"}, {"sha": "db2fd3211f8710408fa6d7c98249dfff898bfd6c", "filename": "src/test/rustdoc-ui/intra-links-warning.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a64cdec1b48b0d042e5f0e38634a7c438c104b85/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64cdec1b48b0d042e5f0e38634a7c438c104b85/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs?ref=a64cdec1b48b0d042e5f0e38634a7c438c104b85", "patch": "@@ -55,3 +55,33 @@ macro_rules! f {\n     }\n }\n f!(\"Foo\\nbar [BarF] bar\\nbaz\");\n+\n+/** # for example,\n+ *\n+ * time to introduce a link [error]*/\n+pub struct A;\n+\n+/**\n+ * # for example,\n+ *\n+ * time to introduce a link [error]\n+ */\n+pub struct B;\n+\n+#[doc = \"single line [error]\"]\n+pub struct C;\n+\n+#[doc = \"single line with \\\"escaping\\\" [error]\"]\n+pub struct D;\n+\n+/// Item docs.\n+#[doc=\"Hello there!\"]\n+/// [error]\n+pub struct E;\n+\n+///\n+/// docs [error1]\n+\n+/// docs [error2]\n+///\n+pub struct F;"}, {"sha": "ed31421851bed4d1602188f1decebbf9664f1c8b", "filename": "src/test/rustdoc-ui/intra-links-warning.stderr", "status": "modified", "additions": 76, "deletions": 24, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/a64cdec1b48b0d042e5f0e38634a7c438c104b85/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a64cdec1b48b0d042e5f0e38634a7c438c104b85/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr?ref=a64cdec1b48b0d042e5f0e38634a7c438c104b85", "patch": "@@ -55,6 +55,76 @@ LL |        /// [Qux:Y]\n    |\n    = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n \n+warning: `[error]` cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning.rs:61:30\n+   |\n+LL |  * time to introduce a link [error]*/\n+   |                              ^^^^^ cannot be resolved, ignoring\n+   |\n+   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+\n+warning: `[error]` cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning.rs:67:30\n+   |\n+LL |  * time to introduce a link [error]\n+   |                              ^^^^^ cannot be resolved, ignoring\n+   |\n+   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+\n+warning: `[error]` cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning.rs:71:1\n+   |\n+LL | #[doc = \"single line [error]\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the link appears in this line:\n+           \n+           single line [error]\n+                        ^^^^^\n+   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+\n+warning: `[error]` cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning.rs:74:1\n+   |\n+LL | #[doc = \"single line with /\"escaping/\" [error]\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the link appears in this line:\n+           \n+           single line with \"escaping\" [error]\n+                                        ^^^^^\n+   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+\n+warning: `[error]` cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning.rs:77:1\n+   |\n+LL | / /// Item docs.\n+LL | | #[doc=\"Hello there!\"]\n+LL | | /// [error]\n+   | |___________^\n+   |\n+   = note: the link appears in this line:\n+           \n+            [error]\n+             ^^^^^\n+   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+\n+warning: `[error1]` cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning.rs:83:11\n+   |\n+LL | /// docs [error1]\n+   |           ^^^^^^ cannot be resolved, ignoring\n+   |\n+   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+\n+warning: `[error2]` cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning.rs:85:11\n+   |\n+LL | /// docs [error2]\n+   |           ^^^^^^ cannot be resolved, ignoring\n+   |\n+   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+\n warning: `[BarA]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:24:10\n    |\n@@ -64,37 +134,19 @@ LL | /// bar [BarA] bar\n    = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n \n warning: `[BarB]` cannot be resolved, ignoring it...\n-  --> $DIR/intra-links-warning.rs:28:1\n+  --> $DIR/intra-links-warning.rs:30:9\n    |\n-LL | / /**\n-LL | |  * Foo\n-LL | |  * bar [BarB] bar\n-LL | |  * baz\n-LL | |  */\n-   | |___^\n+LL |  * bar [BarB] bar\n+   |         ^^^^ cannot be resolved, ignoring\n    |\n-   = note: the link appears in this line:\n-           \n-            bar [BarB] bar\n-                 ^^^^\n    = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n \n warning: `[BarC]` cannot be resolved, ignoring it...\n-  --> $DIR/intra-links-warning.rs:35:1\n+  --> $DIR/intra-links-warning.rs:37:6\n    |\n-LL | / /** Foo\n-LL | |\n-LL | | bar [BarC] bar\n-LL | | baz\n-...  |\n-LL | |\n-LL | | */\n-   | |__^\n+LL | bar [BarC] bar\n+   |      ^^^^ cannot be resolved, ignoring\n    |\n-   = note: the link appears in this line:\n-           \n-           bar [BarC] bar\n-                ^^^^\n    = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n \n warning: `[BarD]` cannot be resolved, ignoring it..."}]}