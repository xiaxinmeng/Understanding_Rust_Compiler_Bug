{"sha": "419cbcbe2fa365a3251fd4361fa04eaae09dba89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxOWNiY2JlMmZhMzY1YTMyNTFmZDQzNjFmYTA0ZWFhZTA5ZGJhODk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-11T10:34:46Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-11T10:37:50Z"}, "message": "Refactor abi.rs to make it easier to change the abi", "tree": {"sha": "f6e413a210d1241bbd43e4fe085b9a99d8e5cd68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6e413a210d1241bbd43e4fe085b9a99d8e5cd68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/419cbcbe2fa365a3251fd4361fa04eaae09dba89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/419cbcbe2fa365a3251fd4361fa04eaae09dba89", "html_url": "https://github.com/rust-lang/rust/commit/419cbcbe2fa365a3251fd4361fa04eaae09dba89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/419cbcbe2fa365a3251fd4361fa04eaae09dba89/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc323d7ffa9a5563f8c4f891992ac988db1f96fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc323d7ffa9a5563f8c4f891992ac988db1f96fd", "html_url": "https://github.com/rust-lang/rust/commit/dc323d7ffa9a5563f8c4f891992ac988db1f96fd"}], "stats": {"total": 215, "additions": 163, "deletions": 52}, "files": [{"sha": "ccb55a45ab7ce35e3c172f1ac450611f8ec48203", "filename": "src/abi.rs", "status": "modified", "additions": 163, "deletions": 52, "changes": 215, "blob_url": "https://github.com/rust-lang/rust/blob/419cbcbe2fa365a3251fd4361fa04eaae09dba89/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419cbcbe2fa365a3251fd4361fa04eaae09dba89/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=419cbcbe2fa365a3251fd4361fa04eaae09dba89", "patch": "@@ -5,13 +5,53 @@ use rustc_target::spec::abi::Abi;\n \n use crate::prelude::*;\n \n+#[derive(Debug)]\n+enum PassMode {\n+    NoPass,\n+    ByVal(Type),\n+    ByRef,\n+}\n+\n+impl PassMode {\n+    fn get_param_ty(self, _fx: &FunctionCx) -> Type {\n+        match self {\n+            PassMode::NoPass => unimplemented!(\"pass mode nopass\"),\n+            PassMode::ByVal(cton_type) => cton_type,\n+            PassMode::ByRef => types::I64,\n+        }\n+    }\n+}\n+\n+fn get_pass_mode<'a, 'tcx: 'a>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    abi: Abi,\n+    ty: Ty<'tcx>,\n+    is_return: bool,\n+) -> PassMode {\n+    if ty.sty == tcx.mk_nil().sty {\n+        if is_return {\n+        //if false {\n+            PassMode::NoPass\n+        } else {\n+            PassMode::ByRef\n+        }\n+    } else if let Some(ret_ty) = crate::common::cton_type_from_ty(tcx, ty) {\n+        PassMode::ByVal(ret_ty)\n+    } else {\n+        if abi == Abi::C {\n+            unimplemented!(\"Non scalars are not yet supported for \\\"C\\\" abi\");\n+        }\n+        PassMode::ByRef\n+    }\n+}\n+\n pub fn cton_sig_from_fn_ty<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     fn_ty: Ty<'tcx>,\n ) -> Signature {\n     let sig = ty_fn_sig(tcx, fn_ty);\n     assert!(!sig.variadic, \"Variadic function are not yet supported\");\n-    let (call_conv, inputs, _output): (CallConv, Vec<Ty>, Ty) = match sig.abi {\n+    let (call_conv, inputs, output): (CallConv, Vec<Ty>, Ty) = match sig.abi {\n         Abi::Rust => (CallConv::Fast, sig.inputs().to_vec(), sig.output()),\n         Abi::C => (CallConv::SystemV, sig.inputs().to_vec(), sig.output()),\n         Abi::RustCall => {\n@@ -34,21 +74,35 @@ pub fn cton_sig_from_fn_ty<'a, 'tcx: 'a>(\n         Abi::RustIntrinsic => (CallConv::SystemV, sig.inputs().to_vec(), sig.output()),\n         _ => unimplemented!(\"unsupported abi {:?}\", sig.abi),\n     };\n+\n+    let inputs = inputs\n+        .into_iter()\n+        .filter_map(|ty| match get_pass_mode(tcx, sig.abi, ty, false) {\n+            PassMode::ByVal(cton_ty) => Some(cton_ty),\n+            PassMode::NoPass => unimplemented!(\"pass mode nopass\"),\n+            PassMode::ByRef => Some(types::I64),\n+        });\n+\n+    let (params, returns) = match get_pass_mode(tcx, sig.abi, output, true) {\n+        PassMode::NoPass => (inputs.map(AbiParam::new).collect(), vec![]),\n+        PassMode::ByVal(ret_ty) => (\n+            inputs.map(AbiParam::new).collect(),\n+            vec![AbiParam::new(ret_ty)],\n+        ),\n+        PassMode::ByRef => {\n+            (\n+                Some(types::I64).into_iter() // First param is place to put return val\n+                    .chain(inputs)\n+                    .map(AbiParam::new)\n+                    .collect(),\n+                vec![],\n+            )\n+        }\n+    };\n+\n     Signature {\n-        params: Some(types::I64).into_iter() // First param is place to put return val\n-            .chain(inputs.into_iter().map(|ty| {\n-                let cton_ty = cton_type_from_ty(tcx, ty);\n-                if let Some(cton_ty) = cton_ty {\n-                    cton_ty\n-                } else {\n-                    if sig.abi == Abi::C {\n-                        unimplemented!(\"Non scalars are not yet supported for \\\"C\\\" abi\");\n-                    }\n-                    types::I64\n-                }\n-            }))\n-            .map(AbiParam::new).collect(),\n-        returns: vec![],\n+        params,\n+        returns,\n         call_conv,\n         argument_bytes: None,\n     }\n@@ -194,7 +248,19 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, start_ebb\n         _ => unimplemented!(\"declared function with non \\\"rust\\\" or \\\"rust-call\\\" abi\"),\n     }\n \n-    let ret_param = fx.bcx.append_ebb_param(start_ebb, types::I64);\n+    let ret_layout = fx.layout_of(fx.return_type());\n+    let output_pass_mode = get_pass_mode(fx.tcx, fx.self_sig().abi, fx.return_type(), true);\n+    let ret_param = match output_pass_mode {\n+        PassMode::NoPass => {\n+            None\n+        }\n+        PassMode::ByVal(ret_ty) => {\n+            None\n+        }\n+        PassMode::ByRef => {\n+            Some(fx.bcx.append_ebb_param(start_ebb, types::I64))\n+        }\n+    };\n \n     enum ArgKind {\n         Normal(Value),\n@@ -218,20 +284,34 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, start_ebb\n \n             let mut ebb_params = Vec::new();\n             for arg_ty in tupled_arg_tys.iter() {\n-                let cton_type = fx.cton_type(arg_ty).unwrap_or(types::I64);\n+                let cton_type = get_pass_mode(fx.tcx, fx.self_sig().abi, arg_ty, false).get_param_ty(fx);\n                 ebb_params.push(fx.bcx.append_ebb_param(start_ebb, cton_type));\n             }\n \n             (local, ArgKind::Spread(ebb_params), arg_ty)\n         } else {\n-            let cton_type = fx.cton_type(arg_ty).unwrap_or(types::I64);\n+            let cton_type = get_pass_mode(fx.tcx, fx.self_sig().abi, arg_ty, false).get_param_ty(fx);\n             (local, ArgKind::Normal(fx.bcx.append_ebb_param(start_ebb, cton_type)), arg_ty)\n         }\n     }).collect::<Vec<(Local, ArgKind, Ty)>>();\n \n-    let ret_layout = fx.layout_of(fx.return_type());\n-    fx.local_map\n-        .insert(RETURN_PLACE, CPlace::Addr(ret_param, ret_layout));\n+    match output_pass_mode {\n+        PassMode::NoPass => {\n+            let null = fx.bcx.ins().iconst(types::I64, 0);\n+            //unimplemented!(\"pass mode nopass\");\n+            fx.local_map.insert(RETURN_PLACE, CPlace::Addr(null, fx.layout_of(fx.return_type())));\n+        }\n+        PassMode::ByVal(ret_ty) => {\n+            let var = Variable(RETURN_PLACE);\n+            fx.bcx.declare_var(var, ret_ty);\n+            fx.local_map\n+                .insert(RETURN_PLACE, CPlace::Var(var, ret_layout));\n+        }\n+        PassMode::ByRef => {\n+            fx.local_map\n+                .insert(RETURN_PLACE, CPlace::Addr(ret_param.unwrap(), ret_layout));\n+        }\n+    }\n \n     for (local, arg_kind, ty) in func_params {\n         let layout = fx.layout_of(ty);\n@@ -244,7 +324,14 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, start_ebb\n             {\n                 let var = Variable(local);\n                 fx.bcx.declare_var(var, fx.cton_type(ty).unwrap());\n-                fx.bcx.def_var(var, ebb_param);\n+                match get_pass_mode(fx.tcx, fx.self_sig().abi, ty, false) {\n+                    PassMode::NoPass => unimplemented!(\"pass mode nopass\"),\n+                    PassMode::ByVal(_) => fx.bcx.def_var(var, ebb_param),\n+                    PassMode::ByRef => {\n+                        let val = CValue::ByRef(ebb_param, fx.layout_of(ty)).load_value(fx);\n+                        fx.bcx.def_var(var, val);\n+                    }\n+                }\n                 fx.local_map.insert(local, CPlace::Var(var, layout));\n                 continue;\n             }\n@@ -260,19 +347,19 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, start_ebb\n \n         match arg_kind {\n             ArgKind::Normal(ebb_param) => {\n-                if fx.cton_type(ty).is_some() {\n-                    place.write_cvalue(fx, CValue::ByVal(ebb_param, place.layout()));\n-                } else {\n-                    place.write_cvalue(fx, CValue::ByRef(ebb_param, place.layout()));\n+                match get_pass_mode(fx.tcx, fx.self_sig().abi, ty, false) {\n+                    PassMode::NoPass => unimplemented!(\"pass mode nopass\"),\n+                    PassMode::ByVal(_) => place.write_cvalue(fx, CValue::ByVal(ebb_param, place.layout())),\n+                    PassMode::ByRef => place.write_cvalue(fx, CValue::ByRef(ebb_param, place.layout())),\n                 }\n             }\n             ArgKind::Spread(ebb_params) => {\n                 for (i, ebb_param) in ebb_params.into_iter().enumerate() {\n                     let sub_place = place.place_field(fx, mir::Field::new(i));\n-                    if fx.cton_type(sub_place.layout().ty).is_some() {\n-                        sub_place.write_cvalue(fx, CValue::ByVal(ebb_param, sub_place.layout()));\n-                    } else {\n-                        sub_place.write_cvalue(fx, CValue::ByRef(ebb_param, sub_place.layout()));\n+                    match get_pass_mode(fx.tcx, fx.self_sig().abi, sub_place.layout().ty, false) {\n+                        PassMode::NoPass => unimplemented!(\"pass mode nopass\"),\n+                        PassMode::ByVal(_) => sub_place.write_cvalue(fx, CValue::ByVal(ebb_param, sub_place.layout())),\n+                        PassMode::ByRef => sub_place.write_cvalue(fx, CValue::ByRef(ebb_param, sub_place.layout())),\n                     }\n                 }\n             }\n@@ -350,33 +437,48 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n         return;\n     }\n \n-    let return_ptr = match destination {\n-        Some((place, _)) => place.expect_addr(),\n-        None => fx.bcx.ins().iconst(types::I64, 0),\n+    let ret_layout = fx.layout_of(sig.output());\n+\n+    let output_pass_mode = get_pass_mode(fx.tcx, sig.abi, sig.output(), true);\n+    println!(\"{:?}\", output_pass_mode);\n+    let return_ptr = match output_pass_mode {\n+        PassMode::NoPass => None,\n+        PassMode::ByRef => match destination {\n+            Some((place, _)) => Some(place.expect_addr()),\n+            None => Some(fx.bcx.ins().iconst(types::I64, 0)),\n+        },\n+        PassMode::ByVal(_) => None,\n     };\n \n-    let call_args = Some(return_ptr)\n+    let call_args: Vec<Value> = return_ptr\n         .into_iter()\n-        .chain(args.into_iter().map(|arg| {\n-            if fx.cton_type(arg.layout().ty).is_some() {\n-                arg.load_value(fx)\n-            } else {\n-                arg.force_stack(fx)\n-            }\n-        })).collect::<Vec<_>>();\n-\n-    match func {\n-        CValue::Func(func, _) => {\n-            fx.bcx.ins().call(func, &call_args);\n-        }\n+        .chain(\n+            args.into_iter()\n+                .map(|arg| match get_pass_mode(fx.tcx, sig.abi, arg.layout().ty, false) {\n+                    PassMode::NoPass => unimplemented!(\"pass mode nopass\"),\n+                    PassMode::ByVal(_) => arg.load_value(fx),\n+                    PassMode::ByRef => arg.force_stack(fx),\n+                }),\n+        ).collect::<Vec<_>>();\n+\n+    let inst = match func {\n+        CValue::Func(func, _) => fx.bcx.ins().call(func, &call_args),\n         func => {\n-            let func_ty = func.layout().ty;\n             let func = func.load_value(fx);\n-            let sig = fx\n-                .bcx\n-                .import_signature(cton_sig_from_fn_ty(fx.tcx, func_ty));\n-            fx.bcx.ins().call_indirect(sig, func, &call_args);\n+            let sig = fx.bcx.import_signature(cton_sig_from_fn_ty(fx.tcx, fn_ty));\n+            fx.bcx.ins().call_indirect(sig, func, &call_args)\n         }\n+    };\n+\n+    match output_pass_mode {\n+        PassMode::NoPass => {}\n+        PassMode::ByVal(_) => {\n+            if let Some((ret_place, _)) = destination {\n+                let results = fx.bcx.inst_results(inst);\n+                ret_place.write_cvalue(fx, CValue::ByVal(results[0], ret_layout));\n+            }\n+        }\n+        PassMode::ByRef => {}\n     }\n     if let Some((_, dest)) = destination {\n         let ret_ebb = fx.get_ebb(dest);\n@@ -387,7 +489,16 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n }\n \n pub fn codegen_return(fx: &mut FunctionCx) {\n-    fx.bcx.ins().return_(&[]);\n+    match get_pass_mode(fx.tcx, fx.self_sig().abi, fx.return_type(), true) {\n+        PassMode::NoPass | PassMode::ByRef => {\n+            fx.bcx.ins().return_(&[]);\n+        },\n+        PassMode::ByVal(_) => {\n+            let place = fx.get_local_place(RETURN_PLACE);\n+            let ret_val = place.to_cvalue(fx).load_value(fx);\n+            fx.bcx.ins().return_(&[ret_val]);\n+        }\n+    }\n }\n \n fn codegen_intrinsic_call<'a, 'tcx: 'a>("}]}