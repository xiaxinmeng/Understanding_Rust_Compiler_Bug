{"sha": "fe62c6e2958abfe54a9410a24a5750baf4c157e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNjJjNmUyOTU4YWJmZTU0YTk0MTBhMjRhNTc1MGJhZjRjMTU3ZTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-11T05:03:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-11T05:03:18Z"}, "message": "Auto merge of #80300 - LeSeulArtichaut:80275-doc-inline, r=Manishearth\n\nEmit errors/warns on some wrong uses of rustdoc attributes\n\nThis PR adds a few diagnostics:\n- error if conflicting `#[doc(inline)]`/`#[doc(no_inline)]` are found\n- introduce the `invalid_doc_attributes` lint (warn-by-default) which triggers:\n  - if a crate-level attribute is used on a non-`crate` item\n  - if `#[doc(inline)]`/`#[doc(no_inline)]` is used on a non-`use` item\n\nThe code could probably be improved but I wanted to get feedback first. Also, some of those changes could be considered breaking changes, so I don't know what the procedure would be? ~~And finally, for the warnings, they are currently hard warnings, maybe it would be better to introduce a lint?~~ (EDIT: introduced the `invalid_doc_attributes` lint)\n\nCloses #80275.\nr? `@jyn514`", "tree": {"sha": "7bd5f1fce30e81bb712a90d0718447d568669aaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bd5f1fce30e81bb712a90d0718447d568669aaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe62c6e2958abfe54a9410a24a5750baf4c157e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe62c6e2958abfe54a9410a24a5750baf4c157e0", "html_url": "https://github.com/rust-lang/rust/commit/fe62c6e2958abfe54a9410a24a5750baf4c157e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe62c6e2958abfe54a9410a24a5750baf4c157e0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "455c5e061cbae0ec7da3d14713a8f3cb18caf023", "url": "https://api.github.com/repos/rust-lang/rust/commits/455c5e061cbae0ec7da3d14713a8f3cb18caf023", "html_url": "https://github.com/rust-lang/rust/commit/455c5e061cbae0ec7da3d14713a8f3cb18caf023"}, {"sha": "804ab9f78e6a0daf01ad106f16c844d5c24cdd04", "url": "https://api.github.com/repos/rust-lang/rust/commits/804ab9f78e6a0daf01ad106f16c844d5c24cdd04", "html_url": "https://github.com/rust-lang/rust/commit/804ab9f78e6a0daf01ad106f16c844d5c24cdd04"}], "stats": {"total": 461, "additions": 367, "deletions": 94}, "files": [{"sha": "cb06cbfcc7be02c517cbd9285e7bf12517b02c60", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 147, "deletions": 19, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/fe62c6e2958abfe54a9410a24a5750baf4c157e0/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe62c6e2958abfe54a9410a24a5750baf4c157e0/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=fe62c6e2958abfe54a9410a24a5750baf4c157e0", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n \n-use rustc_ast::{Attribute, Lit, LitKind, NestedMetaItem};\n+use rustc_ast::{AttrStyle, Attribute, Lit, LitKind, NestedMetaItem};\n use rustc_errors::{pluralize, struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n@@ -22,7 +22,7 @@ use rustc_session::lint::builtin::{\n };\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::{MultiSpan, Span, DUMMY_SP};\n \n pub(crate) fn target_from_impl_item<'tcx>(\n     tcx: TyCtxt<'tcx>,\n@@ -67,6 +67,7 @@ impl CheckAttrVisitor<'tcx> {\n         item: Option<ItemLike<'_>>,\n     ) {\n         let mut is_valid = true;\n+        let mut specified_inline = None;\n         let attrs = self.tcx.hir().attrs(hir_id);\n         for attr in attrs {\n             is_valid &= match attr.name_or_empty() {\n@@ -77,7 +78,7 @@ impl CheckAttrVisitor<'tcx> {\n                 sym::track_caller => {\n                     self.check_track_caller(hir_id, &attr.span, attrs, span, target)\n                 }\n-                sym::doc => self.check_doc_attrs(attr, hir_id, target),\n+                sym::doc => self.check_doc_attrs(attr, hir_id, target, &mut specified_inline),\n                 sym::no_link => self.check_no_link(hir_id, &attr, span, target),\n                 sym::export_name => self.check_export_name(hir_id, &attr, span, target),\n                 sym::rustc_args_required_const => {\n@@ -564,7 +565,71 @@ impl CheckAttrVisitor<'tcx> {\n         true\n     }\n \n-    fn check_attr_crate_level(\n+    /// Checks `#[doc(inline)]`/`#[doc(no_inline)]` attributes. Returns `true` if valid.\n+    ///\n+    /// A doc inlining attribute is invalid if it is applied to a non-`use` item, or\n+    /// if there are conflicting attributes for one item.\n+    ///\n+    /// `specified_inline` is used to keep track of whether we have\n+    /// already seen an inlining attribute for this item.\n+    /// If so, `specified_inline` holds the value and the span of\n+    /// the first `inline`/`no_inline` attribute.\n+    fn check_doc_inline(\n+        &self,\n+        attr: &Attribute,\n+        meta: &NestedMetaItem,\n+        hir_id: HirId,\n+        target: Target,\n+        specified_inline: &mut Option<(bool, Span)>,\n+    ) -> bool {\n+        if target == Target::Use {\n+            let do_inline = meta.name_or_empty() == sym::inline;\n+            if let Some((prev_inline, prev_span)) = *specified_inline {\n+                if do_inline != prev_inline {\n+                    let mut spans = MultiSpan::from_spans(vec![prev_span, meta.span()]);\n+                    spans.push_span_label(prev_span, String::from(\"this attribute...\"));\n+                    spans.push_span_label(\n+                        meta.span(),\n+                        String::from(\"...conflicts with this attribute\"),\n+                    );\n+                    self.tcx\n+                        .sess\n+                        .struct_span_err(spans, \"conflicting doc inlining attributes\")\n+                        .help(\"remove one of the conflicting attributes\")\n+                        .emit();\n+                    return false;\n+                }\n+                true\n+            } else {\n+                *specified_inline = Some((do_inline, meta.span()));\n+                true\n+            }\n+        } else {\n+            self.tcx.struct_span_lint_hir(\n+                INVALID_DOC_ATTRIBUTES,\n+                hir_id,\n+                meta.span(),\n+                |lint| {\n+                    let mut err = lint.build(\n+                        \"this attribute can only be applied to a `use` item\",\n+                    );\n+                    err.span_label(meta.span(), \"only applicable on `use` items\");\n+                    if attr.style == AttrStyle::Outer {\n+                        err.span_label(\n+                            self.tcx.hir().span(hir_id),\n+                            \"not a `use` item\",\n+                        );\n+                    }\n+                    err.note(\"read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#docno_inlinedocinline for more information\")\n+                        .emit();\n+                },\n+            );\n+            false\n+        }\n+    }\n+\n+    /// Checks that an attribute is *not* used at the crate level. Returns `true` if valid.\n+    fn check_attr_not_crate_level(\n         &self,\n         meta: &NestedMetaItem,\n         hir_id: HirId,\n@@ -586,40 +651,103 @@ impl CheckAttrVisitor<'tcx> {\n         true\n     }\n \n-    fn check_doc_attrs(&self, attr: &Attribute, hir_id: HirId, target: Target) -> bool {\n+    /// Checks that an attribute is used at the crate level. Returns `true` if valid.\n+    fn check_attr_crate_level(\n+        &self,\n+        attr: &Attribute,\n+        meta: &NestedMetaItem,\n+        hir_id: HirId,\n+    ) -> bool {\n+        if hir_id != CRATE_HIR_ID {\n+            self.tcx.struct_span_lint_hir(\n+                INVALID_DOC_ATTRIBUTES,\n+                hir_id,\n+                meta.span(),\n+                |lint| {\n+                    let mut err = lint.build(\n+                        \"this attribute can only be applied at the crate level\",\n+                    );\n+                    if attr.style == AttrStyle::Outer && self.tcx.hir().get_parent_item(hir_id) == CRATE_HIR_ID {\n+                        if let Ok(mut src) =\n+                            self.tcx.sess.source_map().span_to_snippet(attr.span)\n+                        {\n+                            src.insert(1, '!');\n+                            err.span_suggestion_verbose(\n+                                attr.span,\n+                                \"to apply to the crate, use an inner attribute\",\n+                                src,\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        } else {\n+                            err.span_help(\n+                                attr.span,\n+                                \"to apply to the crate, use an inner attribute\",\n+                            );\n+                        }\n+                    }\n+                    err.note(\"read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#at-the-crate-level for more information\")\n+                        .emit();\n+                },\n+            );\n+            return false;\n+        }\n+        true\n+    }\n+\n+    /// Runs various checks on `#[doc]` attributes. Returns `true` if valid.\n+    ///\n+    /// `specified_inline` should be initialized to `None` and kept for the scope\n+    /// of one item. Read the documentation of [`check_doc_inline`] for more information.\n+    ///\n+    /// [`check_doc_inline`]: Self::check_doc_inline\n+    fn check_doc_attrs(\n+        &self,\n+        attr: &Attribute,\n+        hir_id: HirId,\n+        target: Target,\n+        specified_inline: &mut Option<(bool, Span)>,\n+    ) -> bool {\n         let mut is_valid = true;\n \n         if let Some(list) = attr.meta().and_then(|mi| mi.meta_item_list().map(|l| l.to_vec())) {\n             for meta in list {\n                 if let Some(i_meta) = meta.meta_item() {\n                     match i_meta.name_or_empty() {\n                         sym::alias\n-                            if !self.check_attr_crate_level(&meta, hir_id, \"alias\")\n+                            if !self.check_attr_not_crate_level(&meta, hir_id, \"alias\")\n                                 || !self.check_doc_alias(&meta, hir_id, target) =>\n                         {\n                             is_valid = false\n                         }\n \n                         sym::keyword\n-                            if !self.check_attr_crate_level(&meta, hir_id, \"keyword\")\n+                            if !self.check_attr_not_crate_level(&meta, hir_id, \"keyword\")\n                                 || !self.check_doc_keyword(&meta, hir_id) =>\n                         {\n                             is_valid = false\n                         }\n \n-                        sym::test if CRATE_HIR_ID != hir_id => {\n-                            self.tcx.struct_span_lint_hir(\n-                                INVALID_DOC_ATTRIBUTES,\n+                        sym::html_favicon_url\n+                        | sym::html_logo_url\n+                        | sym::html_playground_url\n+                        | sym::issue_tracker_base_url\n+                        | sym::html_root_url\n+                        | sym::html_no_source\n+                        | sym::test\n+                            if !self.check_attr_crate_level(&attr, &meta, hir_id) =>\n+                        {\n+                            is_valid = false;\n+                        }\n+\n+                        sym::inline | sym::no_inline\n+                            if !self.check_doc_inline(\n+                                &attr,\n+                                &meta,\n                                 hir_id,\n-                                meta.span(),\n-                                |lint| {\n-                                    lint.build(\n-                                        \"`#![doc(test(...)]` is only allowed \\\n-                                         as a crate-level attribute\",\n-                                    )\n-                                    .emit();\n-                                },\n-                            );\n+                                target,\n+                                specified_inline,\n+                            ) =>\n+                        {\n                             is_valid = false;\n                         }\n "}, {"sha": "503645c08ce36568815682962f39117eef6a95db", "filename": "library/std/src/os/emscripten/raw.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe62c6e2958abfe54a9410a24a5750baf4c157e0/library%2Fstd%2Fsrc%2Fos%2Femscripten%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe62c6e2958abfe54a9410a24a5750baf4c157e0/library%2Fstd%2Fsrc%2Fos%2Femscripten%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Femscripten%2Fraw.rs?ref=fe62c6e2958abfe54a9410a24a5750baf4c157e0", "patch": "@@ -22,7 +22,6 @@ pub type mode_t = u32;\n #[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n pub type pthread_t = c_ulong;\n \n-#[doc(inline)]\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub type blkcnt_t = u64;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")]"}, {"sha": "3fb484644d7fa1b643186398a22cc57ecc5cc23d", "filename": "src/test/rustdoc-ui/doc-attr2.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/455c5e061cbae0ec7da3d14713a8f3cb18caf023/src%2Ftest%2Frustdoc-ui%2Fdoc-attr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455c5e061cbae0ec7da3d14713a8f3cb18caf023/src%2Ftest%2Frustdoc-ui%2Fdoc-attr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-attr2.rs?ref=455c5e061cbae0ec7da3d14713a8f3cb18caf023", "patch": "@@ -1,11 +0,0 @@\n-#![crate_type = \"lib\"]\n-#![deny(warnings)]\n-\n-#[doc(test(no_crate_inject))] //~ ERROR\n-//~^ WARN\n-pub fn foo() {}\n-\n-pub mod bar {\n-    #![doc(test(no_crate_inject))] //~ ERROR\n-    //~^ WARN\n-}"}, {"sha": "643107318b9799f371828e3bf9441c8053b5cca1", "filename": "src/test/rustdoc-ui/doc-attr2.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/455c5e061cbae0ec7da3d14713a8f3cb18caf023/src%2Ftest%2Frustdoc-ui%2Fdoc-attr2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/455c5e061cbae0ec7da3d14713a8f3cb18caf023/src%2Ftest%2Frustdoc-ui%2Fdoc-attr2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-attr2.stderr?ref=455c5e061cbae0ec7da3d14713a8f3cb18caf023", "patch": "@@ -1,26 +0,0 @@\n-error: `#![doc(test(...)]` is only allowed as a crate-level attribute\n-  --> $DIR/doc-attr2.rs:4:7\n-   |\n-LL | #[doc(test(no_crate_inject))]\n-   |       ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/doc-attr2.rs:2:9\n-   |\n-LL | #![deny(warnings)]\n-   |         ^^^^^^^^\n-   = note: `#[deny(invalid_doc_attributes)]` implied by `#[deny(warnings)]`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n-\n-error: `#![doc(test(...)]` is only allowed as a crate-level attribute\n-  --> $DIR/doc-attr2.rs:9:12\n-   |\n-LL |     #![doc(test(no_crate_inject))]\n-   |            ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "de004b41e27bc8fcd15b10e2b7d027b1c732b72b", "filename": "src/test/rustdoc-ui/invalid-doc-attr.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fe62c6e2958abfe54a9410a24a5750baf4c157e0/src%2Ftest%2Frustdoc-ui%2Finvalid-doc-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe62c6e2958abfe54a9410a24a5750baf4c157e0/src%2Ftest%2Frustdoc-ui%2Finvalid-doc-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-doc-attr.rs?ref=fe62c6e2958abfe54a9410a24a5750baf4c157e0", "patch": "@@ -0,0 +1,32 @@\n+#![crate_type = \"lib\"]\n+#![deny(warnings)]\n+\n+#[doc(test(no_crate_inject))]\n+//~^ ERROR can only be applied at the crate level\n+//~| WARN is being phased out\n+//~| HELP to apply to the crate, use an inner attribute\n+//~| SUGGESTION #![doc(test(no_crate_inject))]\n+#[doc(inline)]\n+//~^ ERROR can only be applied to a `use` item\n+//~| WARN is being phased out\n+pub fn foo() {}\n+\n+pub mod bar {\n+    #![doc(test(no_crate_inject))]\n+    //~^ ERROR can only be applied at the crate level\n+    //~| WARN is being phased out\n+\n+    #[doc(test(no_crate_inject))]\n+    //~^ ERROR can only be applied at the crate level\n+    //~| WARN is being phased out\n+    #[doc(inline)]\n+    //~^ ERROR can only be applied to a `use` item\n+    //~| WARN is being phased out\n+    pub fn baz() {}\n+}\n+\n+#[doc(inline)]\n+#[doc(no_inline)]\n+//~^^ ERROR conflicting doc inlining attributes\n+//~|  HELP remove one of the conflicting attributes\n+pub use bar::baz;"}, {"sha": "595ece2ea724707527b41ec419903c8182c90b5e", "filename": "src/test/rustdoc-ui/invalid-doc-attr.stderr", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/fe62c6e2958abfe54a9410a24a5750baf4c157e0/src%2Ftest%2Frustdoc-ui%2Finvalid-doc-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe62c6e2958abfe54a9410a24a5750baf4c157e0/src%2Ftest%2Frustdoc-ui%2Finvalid-doc-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-doc-attr.stderr?ref=fe62c6e2958abfe54a9410a24a5750baf4c157e0", "patch": "@@ -0,0 +1,78 @@\n+error: this attribute can only be applied at the crate level\n+  --> $DIR/invalid-doc-attr.rs:4:7\n+   |\n+LL | #[doc(test(no_crate_inject))]\n+   |       ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/invalid-doc-attr.rs:2:9\n+   |\n+LL | #![deny(warnings)]\n+   |         ^^^^^^^^\n+   = note: `#[deny(invalid_doc_attributes)]` implied by `#[deny(warnings)]`\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+   = note: read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#at-the-crate-level for more information\n+help: to apply to the crate, use an inner attribute\n+   |\n+LL | #![doc(test(no_crate_inject))]\n+   |\n+\n+error: this attribute can only be applied to a `use` item\n+  --> $DIR/invalid-doc-attr.rs:9:7\n+   |\n+LL | #[doc(inline)]\n+   |       ^^^^^^ only applicable on `use` items\n+...\n+LL | pub fn foo() {}\n+   | ------------ not a `use` item\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+   = note: read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#docno_inlinedocinline for more information\n+\n+error: this attribute can only be applied at the crate level\n+  --> $DIR/invalid-doc-attr.rs:15:12\n+   |\n+LL |     #![doc(test(no_crate_inject))]\n+   |            ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+   = note: read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#at-the-crate-level for more information\n+\n+error: conflicting doc inlining attributes\n+  --> $DIR/invalid-doc-attr.rs:28:7\n+   |\n+LL | #[doc(inline)]\n+   |       ^^^^^^ this attribute...\n+LL | #[doc(no_inline)]\n+   |       ^^^^^^^^^ ...conflicts with this attribute\n+   |\n+   = help: remove one of the conflicting attributes\n+\n+error: this attribute can only be applied at the crate level\n+  --> $DIR/invalid-doc-attr.rs:19:11\n+   |\n+LL |     #[doc(test(no_crate_inject))]\n+   |           ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+   = note: read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#at-the-crate-level for more information\n+\n+error: this attribute can only be applied to a `use` item\n+  --> $DIR/invalid-doc-attr.rs:22:11\n+   |\n+LL |     #[doc(inline)]\n+   |           ^^^^^^ only applicable on `use` items\n+...\n+LL |     pub fn baz() {}\n+   |     ------------ not a `use` item\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+   = note: read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#docno_inlinedocinline for more information\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "3fb484644d7fa1b643186398a22cc57ecc5cc23d", "filename": "src/test/ui/attributes/doc-attr2.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/455c5e061cbae0ec7da3d14713a8f3cb18caf023/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455c5e061cbae0ec7da3d14713a8f3cb18caf023/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr2.rs?ref=455c5e061cbae0ec7da3d14713a8f3cb18caf023", "patch": "@@ -1,11 +0,0 @@\n-#![crate_type = \"lib\"]\n-#![deny(warnings)]\n-\n-#[doc(test(no_crate_inject))] //~ ERROR\n-//~^ WARN\n-pub fn foo() {}\n-\n-pub mod bar {\n-    #![doc(test(no_crate_inject))] //~ ERROR\n-    //~^ WARN\n-}"}, {"sha": "643107318b9799f371828e3bf9441c8053b5cca1", "filename": "src/test/ui/attributes/doc-attr2.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/455c5e061cbae0ec7da3d14713a8f3cb18caf023/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/455c5e061cbae0ec7da3d14713a8f3cb18caf023/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr2.stderr?ref=455c5e061cbae0ec7da3d14713a8f3cb18caf023", "patch": "@@ -1,26 +0,0 @@\n-error: `#![doc(test(...)]` is only allowed as a crate-level attribute\n-  --> $DIR/doc-attr2.rs:4:7\n-   |\n-LL | #[doc(test(no_crate_inject))]\n-   |       ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/doc-attr2.rs:2:9\n-   |\n-LL | #![deny(warnings)]\n-   |         ^^^^^^^^\n-   = note: `#[deny(invalid_doc_attributes)]` implied by `#[deny(warnings)]`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n-\n-error: `#![doc(test(...)]` is only allowed as a crate-level attribute\n-  --> $DIR/doc-attr2.rs:9:12\n-   |\n-LL |     #![doc(test(no_crate_inject))]\n-   |            ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "de004b41e27bc8fcd15b10e2b7d027b1c732b72b", "filename": "src/test/ui/attributes/invalid-doc-attr.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fe62c6e2958abfe54a9410a24a5750baf4c157e0/src%2Ftest%2Fui%2Fattributes%2Finvalid-doc-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe62c6e2958abfe54a9410a24a5750baf4c157e0/src%2Ftest%2Fui%2Fattributes%2Finvalid-doc-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Finvalid-doc-attr.rs?ref=fe62c6e2958abfe54a9410a24a5750baf4c157e0", "patch": "@@ -0,0 +1,32 @@\n+#![crate_type = \"lib\"]\n+#![deny(warnings)]\n+\n+#[doc(test(no_crate_inject))]\n+//~^ ERROR can only be applied at the crate level\n+//~| WARN is being phased out\n+//~| HELP to apply to the crate, use an inner attribute\n+//~| SUGGESTION #![doc(test(no_crate_inject))]\n+#[doc(inline)]\n+//~^ ERROR can only be applied to a `use` item\n+//~| WARN is being phased out\n+pub fn foo() {}\n+\n+pub mod bar {\n+    #![doc(test(no_crate_inject))]\n+    //~^ ERROR can only be applied at the crate level\n+    //~| WARN is being phased out\n+\n+    #[doc(test(no_crate_inject))]\n+    //~^ ERROR can only be applied at the crate level\n+    //~| WARN is being phased out\n+    #[doc(inline)]\n+    //~^ ERROR can only be applied to a `use` item\n+    //~| WARN is being phased out\n+    pub fn baz() {}\n+}\n+\n+#[doc(inline)]\n+#[doc(no_inline)]\n+//~^^ ERROR conflicting doc inlining attributes\n+//~|  HELP remove one of the conflicting attributes\n+pub use bar::baz;"}, {"sha": "595ece2ea724707527b41ec419903c8182c90b5e", "filename": "src/test/ui/attributes/invalid-doc-attr.stderr", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/fe62c6e2958abfe54a9410a24a5750baf4c157e0/src%2Ftest%2Fui%2Fattributes%2Finvalid-doc-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe62c6e2958abfe54a9410a24a5750baf4c157e0/src%2Ftest%2Fui%2Fattributes%2Finvalid-doc-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Finvalid-doc-attr.stderr?ref=fe62c6e2958abfe54a9410a24a5750baf4c157e0", "patch": "@@ -0,0 +1,78 @@\n+error: this attribute can only be applied at the crate level\n+  --> $DIR/invalid-doc-attr.rs:4:7\n+   |\n+LL | #[doc(test(no_crate_inject))]\n+   |       ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/invalid-doc-attr.rs:2:9\n+   |\n+LL | #![deny(warnings)]\n+   |         ^^^^^^^^\n+   = note: `#[deny(invalid_doc_attributes)]` implied by `#[deny(warnings)]`\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+   = note: read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#at-the-crate-level for more information\n+help: to apply to the crate, use an inner attribute\n+   |\n+LL | #![doc(test(no_crate_inject))]\n+   |\n+\n+error: this attribute can only be applied to a `use` item\n+  --> $DIR/invalid-doc-attr.rs:9:7\n+   |\n+LL | #[doc(inline)]\n+   |       ^^^^^^ only applicable on `use` items\n+...\n+LL | pub fn foo() {}\n+   | ------------ not a `use` item\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+   = note: read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#docno_inlinedocinline for more information\n+\n+error: this attribute can only be applied at the crate level\n+  --> $DIR/invalid-doc-attr.rs:15:12\n+   |\n+LL |     #![doc(test(no_crate_inject))]\n+   |            ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+   = note: read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#at-the-crate-level for more information\n+\n+error: conflicting doc inlining attributes\n+  --> $DIR/invalid-doc-attr.rs:28:7\n+   |\n+LL | #[doc(inline)]\n+   |       ^^^^^^ this attribute...\n+LL | #[doc(no_inline)]\n+   |       ^^^^^^^^^ ...conflicts with this attribute\n+   |\n+   = help: remove one of the conflicting attributes\n+\n+error: this attribute can only be applied at the crate level\n+  --> $DIR/invalid-doc-attr.rs:19:11\n+   |\n+LL |     #[doc(test(no_crate_inject))]\n+   |           ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+   = note: read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#at-the-crate-level for more information\n+\n+error: this attribute can only be applied to a `use` item\n+  --> $DIR/invalid-doc-attr.rs:22:11\n+   |\n+LL |     #[doc(inline)]\n+   |           ^^^^^^ only applicable on `use` items\n+...\n+LL |     pub fn baz() {}\n+   |     ------------ not a `use` item\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+   = note: read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#docno_inlinedocinline for more information\n+\n+error: aborting due to 6 previous errors\n+"}]}