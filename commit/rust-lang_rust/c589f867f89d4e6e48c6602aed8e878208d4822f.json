{"sha": "c589f867f89d4e6e48c6602aed8e878208d4822f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ODlmODY3Zjg5ZDRlNmU0OGM2NjAyYWVkOGU4NzgyMDhkNDgyMmY=", "commit": {"author": {"name": "Jacob Kiesel", "email": "kieseljake@gmail.com", "date": "2017-08-26T06:06:13Z"}, "committer": {"name": "Jacob Kiesel", "email": "kieseljake@gmail.com", "date": "2017-08-26T16:21:17Z"}, "message": "Add clamp functions", "tree": {"sha": "e75a84d4876d5286b95a04f1b3419656fd873537", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e75a84d4876d5286b95a04f1b3419656fd873537"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c589f867f89d4e6e48c6602aed8e878208d4822f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c589f867f89d4e6e48c6602aed8e878208d4822f", "html_url": "https://github.com/rust-lang/rust/commit/c589f867f89d4e6e48c6602aed8e878208d4822f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c589f867f89d4e6e48c6602aed8e878208d4822f/comments", "author": {"login": "Xaeroxe", "id": 6182002, "node_id": "MDQ6VXNlcjYxODIwMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6182002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xaeroxe", "html_url": "https://github.com/Xaeroxe", "followers_url": "https://api.github.com/users/Xaeroxe/followers", "following_url": "https://api.github.com/users/Xaeroxe/following{/other_user}", "gists_url": "https://api.github.com/users/Xaeroxe/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xaeroxe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xaeroxe/subscriptions", "organizations_url": "https://api.github.com/users/Xaeroxe/orgs", "repos_url": "https://api.github.com/users/Xaeroxe/repos", "events_url": "https://api.github.com/users/Xaeroxe/events{/privacy}", "received_events_url": "https://api.github.com/users/Xaeroxe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xaeroxe", "id": 6182002, "node_id": "MDQ6VXNlcjYxODIwMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6182002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xaeroxe", "html_url": "https://github.com/Xaeroxe", "followers_url": "https://api.github.com/users/Xaeroxe/followers", "following_url": "https://api.github.com/users/Xaeroxe/following{/other_user}", "gists_url": "https://api.github.com/users/Xaeroxe/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xaeroxe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xaeroxe/subscriptions", "organizations_url": "https://api.github.com/users/Xaeroxe/orgs", "repos_url": "https://api.github.com/users/Xaeroxe/repos", "events_url": "https://api.github.com/users/Xaeroxe/events{/privacy}", "received_events_url": "https://api.github.com/users/Xaeroxe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "398aaffc94367ed59420f5ac0b0238c04c9e4fa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/398aaffc94367ed59420f5ac0b0238c04c9e4fa5", "html_url": "https://github.com/rust-lang/rust/commit/398aaffc94367ed59420f5ac0b0238c04c9e4fa5"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "174ceb6b8a7e65f9c3fee773b2a634ca61330677", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c589f867f89d4e6e48c6602aed8e878208d4822f/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c589f867f89d4e6e48c6602aed8e878208d4822f/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=c589f867f89d4e6e48c6602aed8e878208d4822f", "patch": "@@ -481,6 +481,32 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     where Self: Sized {\n         if self <= other { self } else { other }\n     }\n+\n+    /// Returns max if self is greater than max, and min if self is less than min.\n+    /// Otherwise this will return self.  Panics if min > max.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(clamp)]\n+    ///\n+    /// assert!((-3).clamp(-2, 1) == -2);\n+    /// assert!(0.clamp(-2, 1) == 0);\n+    /// assert!(2.clamp(-2, 1) == 1);\n+    /// ```\n+    #[unstable(feature = \"clamp\", issue = \"44095\")]\n+    fn clamp(self, min: Self, max: Self) -> Self\n+    where Self: Sized {\n+        assert!(min <= max);\n+        if self < min {\n+            min\n+        }\n+        else if self > max {\n+            max\n+        } else {\n+            self\n+        }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "18bc27faa822735a624d1ee8d76119e802f8acd0", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c589f867f89d4e6e48c6602aed8e878208d4822f/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c589f867f89d4e6e48c6602aed8e878208d4822f/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=c589f867f89d4e6e48c6602aed8e878208d4822f", "patch": "@@ -1080,6 +1080,26 @@ impl f32 {\n         0.5 * ((2.0 * self) / (1.0 - self)).ln_1p()\n     }\n \n+    /// Returns max if self is greater than max, and min if self is less than min.\n+    /// Otherwise this returns self.  Panics if min > max, min equals NaN, or max equals NaN.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert!((-3.0f32).clamp(-2.0f32, 1.0f32) == -2.0f32);\n+    /// assert!((0.0f32).clamp(-2.0f32, 1.0f32) == 0.0f32);\n+    /// assert!((2.0f32).clamp(-2.0f32, 1.0f32) == 1.0f32);\n+    /// ```\n+    #[unstable(feature = \"clamp\", issue = \"44095\")]\n+    #[inline]\n+    pub fn clamp(self, min: f32, max: f32) -> f32 {\n+        assert!(min <= max);\n+        let mut x = self;\n+        if x < min { x = min; }\n+        if x > max { x = max; }\n+        x\n+    }\n+\n     /// Raw transmutation to `u32`.\n     ///\n     /// Converts the `f32` into its raw memory representation,"}, {"sha": "b04ba9eabdbb3f8bc40fe018a195785b4394c9cc", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c589f867f89d4e6e48c6602aed8e878208d4822f/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c589f867f89d4e6e48c6602aed8e878208d4822f/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=c589f867f89d4e6e48c6602aed8e878208d4822f", "patch": "@@ -970,6 +970,26 @@ impl f64 {\n         0.5 * ((2.0 * self) / (1.0 - self)).ln_1p()\n     }\n \n+    /// Returns max if self is greater than max, and min if self is less than min.\n+    /// Otherwise this returns self.  Panics if min > max, min equals NaN, or max equals NaN.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert!((-3.0f64).clamp(-2.0f64, 1.0f64) == -2.0f64);\n+    /// assert!((0.0f64).clamp(-2.0f64, 1.0f64) == 0.0f64);\n+    /// assert!((2.0f64).clamp(-2.0f64, 1.0f64) == 1.0f64);\n+    /// ```\n+    #[unstable(feature = \"clamp\", issue = \"44095\")]\n+    #[inline]\n+    pub fn clamp(self, min: f64, max: f64) -> f64 {\n+        assert!(min <= max);\n+        let mut x = self;\n+        if x < min { x = min; }\n+        if x > max { x = max; }\n+        x\n+    }\n+\n     // Solaris/Illumos requires a wrapper around log, log2, and log10 functions\n     // because of their non-standard behavior (e.g. log(-n) returns -Inf instead\n     // of expected NaN)."}]}