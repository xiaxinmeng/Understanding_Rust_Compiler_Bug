{"sha": "7683d1c3aa73a544e0f1a1690815219313ab679f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ODNkMWMzYWE3M2E1NDRlMGYxYTE2OTA4MTUyMTkzMTNhYjY3OWY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-08-11T15:34:31Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-09-28T14:39:00Z"}, "message": "rustc: don't store a lifetime in hir::TyKind::CVarArgs.", "tree": {"sha": "551d5625f71b68aaf85c652c6814614b851a0ec7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/551d5625f71b68aaf85c652c6814614b851a0ec7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7683d1c3aa73a544e0f1a1690815219313ab679f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7683d1c3aa73a544e0f1a1690815219313ab679f", "html_url": "https://github.com/rust-lang/rust/commit/7683d1c3aa73a544e0f1a1690815219313ab679f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7683d1c3aa73a544e0f1a1690815219313ab679f/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a9d775888f6d413c10a823751bc14794a5a0c6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a9d775888f6d413c10a823751bc14794a5a0c6d", "html_url": "https://github.com/rust-lang/rust/commit/8a9d775888f6d413c10a823751bc14794a5a0c6d"}], "stats": {"total": 48, "additions": 18, "deletions": 30}, "files": [{"sha": "d7b5462da275ba69a8c9547fdd82baec694151aa", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7683d1c3aa73a544e0f1a1690815219313ab679f/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7683d1c3aa73a544e0f1a1690815219313ab679f/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=7683d1c3aa73a544e0f1a1690815219313ab679f", "patch": "@@ -633,9 +633,7 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n         TyKind::Typeof(ref expression) => {\n             visitor.visit_anon_const(expression)\n         }\n-        TyKind::CVarArgs(ref lt) => {\n-            visitor.visit_lifetime(lt)\n-        }\n+        TyKind::CVarArgs |\n         TyKind::Infer | TyKind::Err => {}\n     }\n }"}, {"sha": "d9b444f52281b12db9b340248dbe7bcc0abf7ec9", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7683d1c3aa73a544e0f1a1690815219313ab679f/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7683d1c3aa73a544e0f1a1690815219313ab679f/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=7683d1c3aa73a544e0f1a1690815219313ab679f", "patch": "@@ -1336,12 +1336,7 @@ impl<'a> LoweringContext<'a> {\n                 }\n             }\n             TyKind::Mac(_) => bug!(\"`TyMac` should have been expanded by now\"),\n-            TyKind::CVarArgs => {\n-                // Create the implicit lifetime of the \"spoofed\" `VaListImpl`.\n-                let span = self.sess.source_map().next_point(t.span.shrink_to_lo());\n-                let lt = self.new_implicit_lifetime(span);\n-                hir::TyKind::CVarArgs(lt)\n-            },\n+            TyKind::CVarArgs => hir::TyKind::CVarArgs,\n         };\n \n         hir::Ty {"}, {"sha": "0331d2be1a389a0b5b854f178abc28ef7817ae85", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7683d1c3aa73a544e0f1a1690815219313ab679f/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7683d1c3aa73a544e0f1a1690815219313ab679f/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=7683d1c3aa73a544e0f1a1690815219313ab679f", "patch": "@@ -2018,7 +2018,7 @@ pub enum TyKind {\n     Err,\n     /// Placeholder for C-variadic arguments. We \"spoof\" the `VaListImpl` created\n     /// from the variadic arguments. This type is only valid up to typeck.\n-    CVarArgs(Lifetime),\n+    CVarArgs,\n }\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]"}, {"sha": "45cce24381b0b34fc4d00ded6140f2d52daab601", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7683d1c3aa73a544e0f1a1690815219313ab679f/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7683d1c3aa73a544e0f1a1690815219313ab679f/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=7683d1c3aa73a544e0f1a1690815219313ab679f", "patch": "@@ -361,7 +361,7 @@ impl<'a> State<'a> {\n                 self.s.word(\"/*ERROR*/\");\n                 self.pclose();\n             }\n-            hir::TyKind::CVarArgs(_) => {\n+            hir::TyKind::CVarArgs => {\n                 self.s.word(\"...\");\n             }\n         }"}, {"sha": "31d250fa08215e59503d3326c524a0859a4b21c3", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7683d1c3aa73a544e0f1a1690815219313ab679f/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7683d1c3aa73a544e0f1a1690815219313ab679f/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=7683d1c3aa73a544e0f1a1690815219313ab679f", "patch": "@@ -764,13 +764,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     });\n                 }\n             }\n-            hir::TyKind::CVarArgs(ref lt) => {\n-                // Resolve the generated lifetime for the C-variadic arguments.\n-                // The lifetime is generated in AST -> HIR lowering.\n-                if lt.name.is_elided() {\n-                    self.resolve_elided_lifetimes(vec![lt])\n-                }\n-            }\n             _ => intravisit::walk_ty(self, ty),\n         }\n     }\n@@ -2378,7 +2371,6 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                             self.visit_lifetime(lifetime);\n                         }\n                     }\n-                    hir::TyKind::CVarArgs(_) => {}\n                     _ => {\n                         intravisit::walk_ty(self, ty);\n                     }"}, {"sha": "06f51e972c9931200d3d237675039436cbfc5b3f", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7683d1c3aa73a544e0f1a1690815219313ab679f/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7683d1c3aa73a544e0f1a1690815219313ab679f/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=7683d1c3aa73a544e0f1a1690815219313ab679f", "patch": "@@ -2148,13 +2148,16 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // handled specially and will not descend into this routine.\n                 self.ty_infer(None, ast_ty.span)\n             }\n-            hir::TyKind::CVarArgs(lt) => {\n+            hir::TyKind::CVarArgs => {\n                 let va_list_did = match tcx.lang_items().va_list() {\n                     Some(did) => did,\n                     None => span_bug!(ast_ty.span,\n                                       \"`va_list` lang item required for variadics\"),\n                 };\n-                let region = self.ast_region_to_region(&lt, None);\n+                // FIXME(eddyb) compute this in the body and don't let it reach the signature.\n+                // HACK(eddyb) the `123` anon index is only temporary, to keep tests passing.\n+                // Ideally this would use `ReScope` or similar.\n+                let region = tcx.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BrAnon(123)));\n                 tcx.type_of(va_list_did).subst(tcx, &[region.into()])\n             }\n             hir::TyKind::Err => {"}, {"sha": "24d017147e4c6ec48c83721d4c49687b31a3ad82", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7683d1c3aa73a544e0f1a1690815219313ab679f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7683d1c3aa73a544e0f1a1690815219313ab679f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7683d1c3aa73a544e0f1a1690815219313ab679f", "patch": "@@ -3032,7 +3032,7 @@ impl Clean<Type> for hir::Ty {\n             TyKind::BareFn(ref barefn) => BareFunction(box barefn.clean(cx)),\n             TyKind::Infer | TyKind::Err => Infer,\n             TyKind::Typeof(..) => panic!(\"unimplemented type {:?}\", self.kind),\n-            TyKind::CVarArgs(_) => CVarArgs,\n+            TyKind::CVarArgs => CVarArgs,\n         }\n     }\n }"}, {"sha": "3b7eb26c0732e67bf2ccbda1fd766866c3b26fc5", "filename": "src/test/ui/c-variadic/variadic-ffi-4.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7683d1c3aa73a544e0f1a1690815219313ab679f/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7683d1c3aa73a544e0f1a1690815219313ab679f/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr?ref=7683d1c3aa73a544e0f1a1690815219313ab679f", "patch": "@@ -47,7 +47,7 @@ LL |     *ap0 = ap1;\n    |\n    = note: expected type `core::ffi::VaListImpl<'_>`\n               found type `core::ffi::VaListImpl<'_>`\n-note: the anonymous lifetime #3 defined on the function body at 19:1...\n+note: the anonymous lifetime #124 defined on the function body at 19:1...\n   --> $DIR/variadic-ffi-4.rs:19:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n@@ -80,7 +80,7 @@ LL | |     *ap0 = ap1;\n LL | |\n LL | | }\n    | |_^\n-note: ...does not necessarily outlive the anonymous lifetime #3 defined on the function body at 19:1\n+note: ...does not necessarily outlive the anonymous lifetime #124 defined on the function body at 19:1\n   --> $DIR/variadic-ffi-4.rs:19:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n@@ -106,7 +106,7 @@ LL | |\n LL | |\n LL | | }\n    | |_^\n-note: but the borrow lasts for the anonymous lifetime #3 defined on the function body at 24:1\n+note: but the borrow lasts for the anonymous lifetime #124 defined on the function body at 24:1\n   --> $DIR/variadic-ffi-4.rs:24:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n@@ -126,7 +126,7 @@ LL |     ap0 = &mut ap1;\n    |\n    = note: expected type `&mut core::ffi::VaListImpl<'_>`\n               found type `&mut core::ffi::VaListImpl<'_>`\n-note: the anonymous lifetime #3 defined on the function body at 24:1...\n+note: the anonymous lifetime #124 defined on the function body at 24:1...\n   --> $DIR/variadic-ffi-4.rs:24:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n@@ -168,7 +168,7 @@ LL | |\n LL | |\n LL | | }\n    | |_^\n-note: ...does not necessarily outlive the anonymous lifetime #3 defined on the function body at 24:1\n+note: ...does not necessarily outlive the anonymous lifetime #124 defined on the function body at 24:1\n   --> $DIR/variadic-ffi-4.rs:24:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n@@ -186,7 +186,7 @@ error[E0495]: cannot infer an appropriate lifetime for borrow expression due to\n LL |     ap0 = &mut ap1;\n    |           ^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #3 defined on the function body at 24:1...\n+note: first, the lifetime cannot outlive the anonymous lifetime #124 defined on the function body at 24:1...\n   --> $DIR/variadic-ffi-4.rs:24:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n@@ -227,7 +227,7 @@ LL |     *ap0 = ap1.clone();\n    |\n    = note: expected type `core::ffi::VaListImpl<'_>`\n               found type `core::ffi::VaListImpl<'_>`\n-note: the anonymous lifetime #3 defined on the function body at 32:1...\n+note: the anonymous lifetime #124 defined on the function body at 32:1...\n   --> $DIR/variadic-ffi-4.rs:32:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n@@ -260,7 +260,7 @@ LL | |     *ap0 = ap1.clone();\n LL | |\n LL | | }\n    | |_^\n-note: ...does not necessarily outlive the anonymous lifetime #3 defined on the function body at 32:1\n+note: ...does not necessarily outlive the anonymous lifetime #124 defined on the function body at 32:1\n   --> $DIR/variadic-ffi-4.rs:32:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {"}]}