{"sha": "807592e99f6da30b44d75db459f5e4ab6a8958e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNzU5MmU5OWY2ZGEzMGI0NGQ3NWRiNDU5ZjVlNGFiNmE4OTU4ZTU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-11T12:27:46Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-11T19:33:44Z"}, "message": "Switch run_program over to ifaces", "tree": {"sha": "25a38febe1ecbba33e8323a691783863381898d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25a38febe1ecbba33e8323a691783863381898d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/807592e99f6da30b44d75db459f5e4ab6a8958e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/807592e99f6da30b44d75db459f5e4ab6a8958e5", "html_url": "https://github.com/rust-lang/rust/commit/807592e99f6da30b44d75db459f5e4ab6a8958e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/807592e99f6da30b44d75db459f5e4ab6a8958e5/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f76db43e65c6f500b0024be59510814912a0943", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f76db43e65c6f500b0024be59510814912a0943", "html_url": "https://github.com/rust-lang/rust/commit/4f76db43e65c6f500b0024be59510814912a0943"}], "stats": {"total": 95, "additions": 48, "deletions": 47}, "files": [{"sha": "3721e0ad62f1a4a620c23b3dd1cc08d3a32a17d6", "filename": "src/libstd/run_program.rs", "status": "modified", "additions": 48, "deletions": 47, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/807592e99f6da30b44d75db459f5e4ab6a8958e5/src%2Flibstd%2Frun_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/807592e99f6da30b44d75db459f5e4ab6a8958e5/src%2Flibstd%2Frun_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun_program.rs?ref=807592e99f6da30b44d75db459f5e4ab6a8958e5", "patch": "@@ -3,7 +3,7 @@ Module: run\n \n Process spawning\n */\n-import core::option;\n+import option::{some, none};\n import str::sbuf;\n import ctypes::{fd_t, pid_t};\n \n@@ -23,21 +23,11 @@ native mod rustrt {\n /* Section: Types */\n \n /*\n-Resource: program_res\n+Iface: program\n \n-A resource that manages the destruction of a <program> object\n-\n-program_res ensures that the destroy method is called on a\n-program object in order to close open file descriptors.\n-*/\n-resource program_res(p: program) { p.destroy(); }\n-\n-/*\n-Obj: program\n-\n-An object representing a child process\n+A value representing a child process\n */\n-type program = obj {\n+iface program {\n     /*\n     Method: get_id\n \n@@ -87,7 +77,7 @@ type program = obj {\n     Closes open handles\n     */\n     fn destroy();\n-};\n+}\n \n \n /* Section: Operations */\n@@ -151,7 +141,7 @@ fn run_program(prog: str, args: [str]) -> int {\n /*\n Function: start_program\n \n-Spawns a process and returns a boxed <program_res>\n+Spawns a process and returns a program\n \n The returned value is a boxed resource containing a <program> object that can\n be used for sending and recieving data over the standard file descriptors.\n@@ -166,7 +156,7 @@ Returns:\n \n A boxed resource of <program>\n */\n-fn start_program(prog: str, args: [str]) -> @program_res {\n+fn start_program(prog: str, args: [str]) -> program {\n     let pipe_input = os::pipe();\n     let pipe_output = os::pipe();\n     let pipe_err = os::pipe();\n@@ -178,43 +168,54 @@ fn start_program(prog: str, args: [str]) -> @program_res {\n     os::libc::close(pipe_input.in);\n     os::libc::close(pipe_output.out);\n     os::libc::close(pipe_err.out);\n-    obj new_program(pid: pid_t,\n-                    mutable in_fd: fd_t,\n-                    out_file: os::libc::FILE,\n-                    err_file: os::libc::FILE,\n-                    mutable finished: bool) {\n-        fn get_id() -> pid_t { ret pid; }\n+\n+    type prog_repr = {pid: pid_t,\n+                      mutable in_fd: fd_t,\n+                      out_file: os::libc::FILE,\n+                      err_file: os::libc::FILE,\n+                      mutable finished: bool};\n+\n+    fn close_repr_input(r: prog_repr) {\n+        let invalid_fd = -1i32;\n+        if r.in_fd != invalid_fd {\n+            os::libc::close(r.in_fd);\n+            r.in_fd = invalid_fd;\n+        }\n+    }\n+    fn finish_repr(r: prog_repr) -> int {\n+        if r.finished { ret 0; }\n+        r.finished = true;\n+        close_repr_input(r);\n+        ret waitpid(r.pid);\n+    }\n+    fn destroy_repr(r: prog_repr) {\n+        finish_repr(r);\n+        os::libc::fclose(r.out_file);\n+        os::libc::fclose(r.err_file);\n+    }\n+    resource prog_res(r: prog_repr) { destroy_repr(r); }\n+\n+    impl of program for prog_res {\n+        fn get_id() -> pid_t { ret self.pid; }\n         fn input() -> io::writer {\n-            ret io::new_writer(io::fd_buf_writer(in_fd, option::none));\n+            ret io::new_writer(io::fd_buf_writer(self.in_fd, none));\n         }\n         fn output() -> io::reader {\n-            ret io::new_reader(io::FILE_buf_reader(out_file, option::none));\n+            ret io::new_reader(io::FILE_buf_reader(self.out_file, none));\n         }\n         fn err() -> io::reader {\n-            ret io::new_reader(io::FILE_buf_reader(err_file, option::none));\n-        }\n-        fn close_input() {\n-            let invalid_fd = -1i32;\n-            if in_fd != invalid_fd {\n-                os::libc::close(in_fd);\n-                in_fd = invalid_fd;\n-            }\n-        }\n-        fn finish() -> int {\n-            if finished { ret 0; }\n-            finished = true;\n-            self.close_input();\n-            ret waitpid(pid);\n-        }\n-        fn destroy() {\n-            self.finish();\n-            os::libc::fclose(out_file);\n-            os::libc::fclose(err_file);\n+            ret io::new_reader(io::FILE_buf_reader(self.err_file, none));\n         }\n+        fn close_input() { close_repr_input(*self); }\n+        fn finish() -> int { finish_repr(*self) }\n+        fn destroy() { destroy_repr(*self); }\n     }\n-    ret @program_res(new_program(pid, pipe_input.out,\n-                                 os::fd_FILE(pipe_output.in),\n-                                 os::fd_FILE(pipe_err.in), false));\n+    let repr = {pid: pid,\n+                mutable in_fd: pipe_input.out,\n+                out_file: os::fd_FILE(pipe_output.in),\n+                err_file: os::fd_FILE(pipe_err.in),\n+                mutable finished: false};\n+    ret prog_res(repr) as program;\n }\n \n fn read_all(rd: io::reader) -> str {"}]}