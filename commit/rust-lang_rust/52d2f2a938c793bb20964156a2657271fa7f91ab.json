{"sha": "52d2f2a938c793bb20964156a2657271fa7f91ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZDJmMmE5MzhjNzkzYmIyMDk2NDE1NmEyNjU3MjcxZmE3ZjkxYWI=", "commit": {"author": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-10-02T19:52:06Z"}, "committer": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-10-02T20:21:50Z"}, "message": "Add tests for a few resolved issues", "tree": {"sha": "6d8169b5b7ca70bda7faef60227035447f79187c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d8169b5b7ca70bda7faef60227035447f79187c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52d2f2a938c793bb20964156a2657271fa7f91ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52d2f2a938c793bb20964156a2657271fa7f91ab", "html_url": "https://github.com/rust-lang/rust/commit/52d2f2a938c793bb20964156a2657271fa7f91ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52d2f2a938c793bb20964156a2657271fa7f91ab/comments", "author": null, "committer": null, "parents": [{"sha": "b224dfe1a6ff1b392fd68004cf7a0a04dfec9975", "url": "https://api.github.com/repos/rust-lang/rust/commits/b224dfe1a6ff1b392fd68004cf7a0a04dfec9975", "html_url": "https://github.com/rust-lang/rust/commit/b224dfe1a6ff1b392fd68004cf7a0a04dfec9975"}], "stats": {"total": 339, "additions": 339, "deletions": 0}, "files": [{"sha": "c7a8c87bb23c7efe206f29451af6e9615405ee65", "filename": "src/test/compile-fail/issue-13497-2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/52d2f2a938c793bb20964156a2657271fa7f91ab/src%2Ftest%2Fcompile-fail%2Fissue-13497-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d2f2a938c793bb20964156a2657271fa7f91ab/src%2Ftest%2Fcompile-fail%2Fissue-13497-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13497-2.rs?ref=52d2f2a938c793bb20964156a2657271fa7f91ab", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn read_lines_borrowed<'a>() -> Vec<&'a str> {\n+    let rawLines: Vec<String> = vec![\"foo  \".to_string(), \"  bar\".to_string()];\n+    rawLines //~ ERROR `rawLines` does not live long enough\n+        .iter().map(|l| l.as_slice().trim()).collect()\n+}\n+\n+fn main() {}"}, {"sha": "da8b93e3c93e96ef3a017315f7287a54c8420ae0", "filename": "src/test/compile-fail/issue-13497.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/52d2f2a938c793bb20964156a2657271fa7f91ab/src%2Ftest%2Fcompile-fail%2Fissue-13497.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d2f2a938c793bb20964156a2657271fa7f91ab/src%2Ftest%2Fcompile-fail%2Fissue-13497.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13497.rs?ref=52d2f2a938c793bb20964156a2657271fa7f91ab", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn read_lines_borrowed1() -> Vec<\n+    &str //~ ERROR missing lifetime specifier\n+> {\n+    let rawLines: Vec<String> = vec![\"foo  \".to_string(), \"  bar\".to_string()];\n+    rawLines.iter().map(|l| l.as_slice().trim()).collect()\n+}\n+\n+fn main() {}"}, {"sha": "ceb6daac65ed1c3114432098cc068f87e14feea7", "filename": "src/test/compile-fail/issue-14366.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/52d2f2a938c793bb20964156a2657271fa7f91ab/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d2f2a938c793bb20964156a2657271fa7f91ab/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs?ref=52d2f2a938c793bb20964156a2657271fa7f91ab", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let _x = \"test\" as &::std::any::Any;\n+//~^ ERROR the trait `core::kinds::Sized` is not implemented for the type `str`\n+//~^^ NOTE the trait `core::kinds::Sized` must be implemented for the cast to the object type\n+//~^^^ ERROR the trait `core::kinds::Sized` is not implemented for the type `str`\n+//~^^^^ NOTE the trait `core::kinds::Sized` must be implemented for the cast to the object type\n+}"}, {"sha": "4243b98e0dde5f93d01a3ce613b56145070ca8b0", "filename": "src/test/compile-fail/issue-14853.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/52d2f2a938c793bb20964156a2657271fa7f91ab/src%2Ftest%2Fcompile-fail%2Fissue-14853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d2f2a938c793bb20964156a2657271fa7f91ab/src%2Ftest%2Fcompile-fail%2Fissue-14853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14853.rs?ref=52d2f2a938c793bb20964156a2657271fa7f91ab", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt::Show;\n+\n+trait Something {\n+    fn yay<T: Show>(_: Option<Self>, thing: &[T]) -> String {\n+    }\n+}\n+\n+struct X { data: u32 }\n+\n+impl Something for X {\n+    fn yay<T: Str>(_:Option<X>, thing: &[T]) -> String {\n+//~^ ERROR in method `yay`, type parameter 0 requires bound `core::str::Str`, which is not required\n+        format!(\"{:s}\", thing[0])\n+    }\n+}\n+\n+fn main() {\n+    let arr = &[\"one\", \"two\", \"three\"];\n+    println!(\"{}\", Something::yay(None::<X>, arr));\n+}"}, {"sha": "c75d02c632863413966e3cb493e4e2695a98b13a", "filename": "src/test/run-pass/issue-11869.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/52d2f2a938c793bb20964156a2657271fa7f91ab/src%2Ftest%2Frun-pass%2Fissue-11869.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d2f2a938c793bb20964156a2657271fa7f91ab/src%2Ftest%2Frun-pass%2Fissue-11869.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11869.rs?ref=52d2f2a938c793bb20964156a2657271fa7f91ab", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct A {\n+    a: String\n+}\n+\n+fn borrow<'a>(binding: &'a A) -> &'a str {\n+    match binding.a.as_slice() {\n+        \"in\" => \"in_\",\n+        \"ref\" => \"ref_\",\n+        ident => ident\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "1a58a6842d401104aa50544c7ceb6fdc7840e50b", "filename": "src/test/run-pass/issue-13167.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/52d2f2a938c793bb20964156a2657271fa7f91ab/src%2Ftest%2Frun-pass%2Fissue-13167.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d2f2a938c793bb20964156a2657271fa7f91ab/src%2Ftest%2Frun-pass%2Fissue-13167.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13167.rs?ref=52d2f2a938c793bb20964156a2657271fa7f91ab", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::slice;\n+\n+pub struct PhfMapEntries<'a, T> {\n+    iter: slice::Items<'a, (&'static str, T)>,\n+}\n+\n+impl<'a, T> Iterator<(&'static str, &'a T)> for PhfMapEntries<'a, T> {\n+    fn next(&mut self) -> Option<(&'static str, &'a T)> {\n+        self.iter.by_ref().map(|&(key, ref value)| (key, value)).next()\n+    }\n+\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        self.iter.size_hint()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "05943943d9533391aeab2afc783414819ebef044", "filename": "src/test/run-pass/issue-13405.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/52d2f2a938c793bb20964156a2657271fa7f91ab/src%2Ftest%2Frun-pass%2Fissue-13405.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d2f2a938c793bb20964156a2657271fa7f91ab/src%2Ftest%2Frun-pass%2Fissue-13405.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13405.rs?ref=52d2f2a938c793bb20964156a2657271fa7f91ab", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo<'a> {\n+    i: &'a bool,\n+    j: Option<&'a int>,\n+}\n+\n+impl<'a> Foo<'a> {\n+    fn bar(&mut self, j: &int) {\n+        let child = Foo {\n+            i: self.i,\n+            j: Some(j)\n+        };\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "25b53bb3a53e3969f7bb439999ef8e8bfbed6263", "filename": "src/test/run-pass/issue-13434.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/52d2f2a938c793bb20964156a2657271fa7f91ab/src%2Ftest%2Frun-pass%2Fissue-13434.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d2f2a938c793bb20964156a2657271fa7f91ab/src%2Ftest%2Frun-pass%2Fissue-13434.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13434.rs?ref=52d2f2a938c793bb20964156a2657271fa7f91ab", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate debug;\n+\n+struct MyStruct;\n+\n+trait Repro {\n+  fn repro(self, s: MyStruct) -> String;\n+}\n+\n+impl Repro for |MyStruct|:'static -> String {\n+  fn repro(self, s: MyStruct) -> String {\n+    self(s)\n+  }\n+}\n+\n+fn do_stuff<R: Repro>(r: R) -> String {\n+  r.repro(MyStruct)\n+}\n+\n+pub fn main() {\n+  assert_eq!(\"MyStruct\".to_string(), do_stuff(|s: MyStruct| format!(\"{:?}\", s)));\n+}"}, {"sha": "c9c78f6408bac74473da9ef3b2b1736c6ec7394d", "filename": "src/test/run-pass/issue-13703.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/52d2f2a938c793bb20964156a2657271fa7f91ab/src%2Ftest%2Frun-pass%2Fissue-13703.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d2f2a938c793bb20964156a2657271fa7f91ab/src%2Ftest%2Frun-pass%2Fissue-13703.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13703.rs?ref=52d2f2a938c793bb20964156a2657271fa7f91ab", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct Foo<'a, 'b: 'a> { foo: &'a &'b int }\n+pub fn foo<'a, 'b>(x: Foo<'a, 'b>, _o: Option<&   &   ()>) { let _y = x.foo; }\n+fn main() {}"}, {"sha": "db29eb314bd70455492702b273b18600197f107a", "filename": "src/test/run-pass/issue-14919.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/52d2f2a938c793bb20964156a2657271fa7f91ab/src%2Ftest%2Frun-pass%2Fissue-14919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d2f2a938c793bb20964156a2657271fa7f91ab/src%2Ftest%2Frun-pass%2Fissue-14919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14919.rs?ref=52d2f2a938c793bb20964156a2657271fa7f91ab", "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Matcher {\n+    fn next_match(&mut self) -> Option<(uint, uint)>;\n+}\n+\n+struct CharPredMatcher<'a, 'b> {\n+    str: &'a str,\n+    pred: |char|:'b -> bool\n+}\n+\n+impl<'a, 'b> Matcher for CharPredMatcher<'a, 'b> {\n+    fn next_match(&mut self) -> Option<(uint, uint)> {\n+        None\n+    }\n+}\n+\n+trait IntoMatcher<'a, T> {\n+    fn into_matcher(self, &'a str) -> T;\n+}\n+\n+impl<'a, 'b> IntoMatcher<'a, CharPredMatcher<'a, 'b>> for |char|:'b -> bool {\n+    fn into_matcher(self, s: &'a str) -> CharPredMatcher<'a, 'b> {\n+        CharPredMatcher {\n+            str: s,\n+            pred: self\n+        }\n+    }\n+}\n+\n+struct MatchIndices<M> {\n+    matcher: M\n+}\n+\n+impl<M: Matcher> Iterator<(uint, uint)> for MatchIndices<M> {\n+    fn next(&mut self) -> Option<(uint, uint)> {\n+        self.matcher.next_match()\n+    }\n+}\n+\n+fn match_indices<'a, M, T: IntoMatcher<'a, M>>(s: &'a str, from: T) -> MatchIndices<M> {\n+    let string_matcher = from.into_matcher(s);\n+    MatchIndices { matcher: string_matcher }\n+}\n+\n+fn main() {\n+    let s = \"abcbdef\";\n+    match_indices(s, |c: char| c == 'b')\n+        .collect::<Vec<(uint, uint)>>();\n+}"}, {"sha": "051d98aa1d89b93381c5dae415e3b92d3e3c1ff7", "filename": "src/test/run-pass/issue-15673.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/52d2f2a938c793bb20964156a2657271fa7f91ab/src%2Ftest%2Frun-pass%2Fissue-15673.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d2f2a938c793bb20964156a2657271fa7f91ab/src%2Ftest%2Frun-pass%2Fissue-15673.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15673.rs?ref=52d2f2a938c793bb20964156a2657271fa7f91ab", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::iter::AdditiveIterator;\n+fn main() {\n+    let x: [u64, ..3] = [1, 2, 3];\n+    assert_eq!(6, range(0, 3).map(|i| x[i]).sum());\n+}"}, {"sha": "8d5b928964dae8e936023be8aa13f56a2e06e115", "filename": "src/test/run-pass/issue-15924.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/52d2f2a938c793bb20964156a2657271fa7f91ab/src%2Ftest%2Frun-pass%2Fissue-15924.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d2f2a938c793bb20964156a2657271fa7f91ab/src%2Ftest%2Frun-pass%2Fissue-15924.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15924.rs?ref=52d2f2a938c793bb20964156a2657271fa7f91ab", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unsafe_destructor)]\n+\n+extern crate serialize;\n+\n+use std::io::IoError;\n+use serialize::{Encoder, Encodable};\n+use serialize::json;\n+\n+struct Foo<T> {\n+    v: T,\n+}\n+\n+#[unsafe_destructor]\n+impl<'a, T: Encodable<json::Encoder<'a>, IoError>> Drop for Foo<T> {\n+    fn drop(&mut self) {\n+        json::encode(&self.v);\n+    }\n+}\n+\n+fn main() {\n+    let _ = Foo { v: 10i };\n+}"}, {"sha": "f2167da31fc2bebea2cf860bb51e9133f9e86bdd", "filename": "src/test/run-pass/issue-5718.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/52d2f2a938c793bb20964156a2657271fa7f91ab/src%2Ftest%2Frun-pass%2Fissue-5718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d2f2a938c793bb20964156a2657271fa7f91ab/src%2Ftest%2Frun-pass%2Fissue-5718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5718.rs?ref=52d2f2a938c793bb20964156a2657271fa7f91ab", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(macro_rules)]\n+\n+struct Element;\n+\n+macro_rules! foo {\n+    ($tag: expr, $string: expr) => {\n+        if $tag == $string {\n+            let element = box Element;\n+            unsafe {\n+                return std::mem::transmute::<_, uint>(element);\n+            }\n+        }\n+    }\n+}\n+\n+fn bar() -> uint {\n+    foo!(\"a\", \"b\");\n+    0\n+}\n+\n+fn main() {\n+    bar();\n+}"}]}