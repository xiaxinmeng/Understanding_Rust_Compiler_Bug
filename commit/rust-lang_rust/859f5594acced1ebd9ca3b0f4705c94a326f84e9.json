{"sha": "859f5594acced1ebd9ca3b0f4705c94a326f84e9", "node_id": "C_kwDOAAsO6NoAKDg1OWY1NTk0YWNjZWQxZWJkOWNhM2IwZjQ3MDVjOTRhMzI2Zjg0ZTk", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-10-23T16:01:35Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-10-23T16:01:35Z"}, "message": "Handle multiple projects sharing dependency correctly in `once` strategy", "tree": {"sha": "e22db256e628b52044945a95a3db9f58f79ee714", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e22db256e628b52044945a95a3db9f58f79ee714"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/859f5594acced1ebd9ca3b0f4705c94a326f84e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/859f5594acced1ebd9ca3b0f4705c94a326f84e9", "html_url": "https://github.com/rust-lang/rust/commit/859f5594acced1ebd9ca3b0f4705c94a326f84e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/859f5594acced1ebd9ca3b0f4705c94a326f84e9/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b25f65739afe7b89cf9fdfdda52adef256bb0159", "url": "https://api.github.com/repos/rust-lang/rust/commits/b25f65739afe7b89cf9fdfdda52adef256bb0159", "html_url": "https://github.com/rust-lang/rust/commit/b25f65739afe7b89cf9fdfdda52adef256bb0159"}], "stats": {"total": 41, "additions": 30, "deletions": 11}, "files": [{"sha": "a26a7c57acfce7541617ea48b6f7704ed30dbf5f", "filename": "crates/project-model/src/build_scripts.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/859f5594acced1ebd9ca3b0f4705c94a326f84e9/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859f5594acced1ebd9ca3b0f4705c94a326f84e9/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs?ref=859f5594acced1ebd9ca3b0f4705c94a326f84e9", "patch": "@@ -56,7 +56,7 @@ impl BuildScriptOutput {\n }\n \n impl WorkspaceBuildScripts {\n-    fn build_command(config: &CargoConfig, current_dir: &path::Path) -> io::Result<Command> {\n+    fn build_command(config: &CargoConfig) -> io::Result<Command> {\n         let mut cmd = match config.run_build_script_command.as_deref() {\n             Some([program, args @ ..]) => {\n                 let mut cmd = Command::new(program);\n@@ -96,7 +96,6 @@ impl WorkspaceBuildScripts {\n             }\n         };\n \n-        cmd.current_dir(current_dir);\n         cmd.envs(&config.extra_env);\n         if config.wrap_rustc_in_build_scripts {\n             // Setup RUSTC_WRAPPER to point to `rust-analyzer` binary itself. We use\n@@ -127,15 +126,15 @@ impl WorkspaceBuildScripts {\n         }\n         .as_ref();\n \n-        match Self::run_per_ws(Self::build_command(config, current_dir)?, workspace, progress) {\n+        match Self::run_per_ws(Self::build_command(config)?, workspace, current_dir, progress) {\n             Ok(WorkspaceBuildScripts { error: Some(error), .. })\n                 if toolchain.as_ref().map_or(false, |it| *it >= RUST_1_62) =>\n             {\n                 // building build scripts failed, attempt to build with --keep-going so\n                 // that we potentially get more build data\n-                let mut cmd = Self::build_command(config, current_dir)?;\n+                let mut cmd = Self::build_command(config)?;\n                 cmd.args(&[\"-Z\", \"unstable-options\", \"--keep-going\"]).env(\"RUSTC_BOOTSTRAP\", \"1\");\n-                let mut res = Self::run_per_ws(cmd, workspace, progress)?;\n+                let mut res = Self::run_per_ws(cmd, workspace, current_dir, progress)?;\n                 res.error = Some(error);\n                 Ok(res)\n             }\n@@ -161,26 +160,34 @@ impl WorkspaceBuildScripts {\n                 ))\n             }\n         };\n-        let cmd = Self::build_command(config, current_dir.as_path().as_ref())?;\n+        let cmd = Self::build_command(config)?;\n         // NB: Cargo.toml could have been modified between `cargo metadata` and\n         // `cargo check`. We shouldn't assume that package ids we see here are\n         // exactly those from `config`.\n         let mut by_id = FxHashMap::default();\n+        // some workspaces might depend on the same crates, so we need to duplicate the outputs\n+        // to those collisions\n+        let mut collisions = Vec::new();\n         let mut res: Vec<_> = workspaces\n             .iter()\n             .enumerate()\n             .map(|(idx, workspace)| {\n                 let mut res = WorkspaceBuildScripts::default();\n                 for package in workspace.packages() {\n                     res.outputs.insert(package, BuildScriptOutput::default());\n-                    by_id.insert(workspace[package].id.clone(), (package, idx));\n+                    if by_id.contains_key(&workspace[package].id) {\n+                        collisions.push((&workspace[package].id, idx, package));\n+                    } else {\n+                        by_id.insert(workspace[package].id.clone(), (package, idx));\n+                    }\n                 }\n                 res\n             })\n             .collect();\n \n         let errors = Self::run_command(\n             cmd,\n+            current_dir.as_path().as_ref(),\n             |package, cb| {\n                 if let Some(&(package, workspace)) = by_id.get(package) {\n                     cb(&workspaces[workspace][package].name, &mut res[workspace].outputs[package]);\n@@ -189,6 +196,11 @@ impl WorkspaceBuildScripts {\n             progress,\n         )?;\n         res.iter_mut().for_each(|it| it.error = errors.clone());\n+        collisions.into_iter().for_each(|(id, workspace, package)| {\n+            if let Some(&(p, w)) = by_id.get(id) {\n+                res[workspace].outputs[package] = res[w].outputs[p].clone();\n+            }\n+        });\n \n         if tracing::enabled!(tracing::Level::INFO) {\n             for (idx, workspace) in workspaces.iter().enumerate() {\n@@ -211,6 +223,7 @@ impl WorkspaceBuildScripts {\n     fn run_per_ws(\n         cmd: Command,\n         workspace: &CargoWorkspace,\n+        current_dir: &path::Path,\n         progress: &dyn Fn(String),\n     ) -> io::Result<WorkspaceBuildScripts> {\n         let mut res = WorkspaceBuildScripts::default();\n@@ -226,6 +239,7 @@ impl WorkspaceBuildScripts {\n \n         res.error = Self::run_command(\n             cmd,\n+            current_dir,\n             |package, cb| {\n                 if let Some(&package) = by_id.get(package) {\n                     cb(&workspace[package].name, &mut outputs[package]);\n@@ -251,7 +265,8 @@ impl WorkspaceBuildScripts {\n     }\n \n     fn run_command(\n-        cmd: Command,\n+        mut cmd: Command,\n+        current_dir: &path::Path,\n         // ideally this would be something like:\n         // with_output_for: impl FnMut(&str, dyn FnOnce(&mut BuildScriptOutput)),\n         // but owned trait objects aren't a thing\n@@ -265,7 +280,8 @@ impl WorkspaceBuildScripts {\n             e.push('\\n');\n         };\n \n-        tracing::info!(\"Running build scripts: {:?}\", cmd);\n+        tracing::info!(\"Running build scripts in {}: {:?}\", current_dir.display(), cmd);\n+        cmd.current_dir(current_dir);\n         let output = stdx::process::spawn_with_streaming_output(\n             cmd,\n             &mut |line| {"}, {"sha": "2780c62ed118afd022829408b3167148ea65e2f5", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/859f5594acced1ebd9ca3b0f4705c94a326f84e9/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859f5594acced1ebd9ca3b0f4705c94a326f84e9/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=859f5594acced1ebd9ca3b0f4705c94a326f84e9", "patch": "@@ -333,7 +333,7 @@ impl ProjectWorkspace {\n         progress: &dyn Fn(String),\n     ) -> Vec<Result<WorkspaceBuildScripts>> {\n         if matches!(config.invocation_strategy, InvocationStrategy::PerWorkspace)\n-            || config.run_build_script_command.is_some()\n+            || config.run_build_script_command.is_none()\n         {\n             return workspaces.iter().map(|it| it.run_build_scripts(config, progress)).collect();\n         }"}, {"sha": "2c928a580405c04c107851f2abb6185feeb171c5", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/859f5594acced1ebd9ca3b0f4705c94a326f84e9/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859f5594acced1ebd9ca3b0f4705c94a326f84e9/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=859f5594acced1ebd9ca3b0f4705c94a326f84e9", "patch": "@@ -543,7 +543,10 @@ impl GlobalState {\n                             diag.fix,\n                         ),\n                         Err(err) => {\n-                            tracing::error!(\"File with cargo diagnostic not found in VFS: {}\", err);\n+                            tracing::error!(\n+                                \"flycheck {id}: File with cargo diagnostic not found in VFS: {}\",\n+                                err\n+                            );\n                         }\n                     };\n                 }"}]}