{"sha": "1b9620d75f75aad6629bb8815344a1a2f14a2081", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiOTYyMGQ3NWY3NWFhZDY2MjliYjg4MTUzNDRhMWEyZjE0YTIwODE=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-04-02T01:33:11Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-04-02T01:33:11Z"}, "message": "Make the diagnostic message more readable", "tree": {"sha": "c8c51931507867742292f5370264371a0bad975d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8c51931507867742292f5370264371a0bad975d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b9620d75f75aad6629bb8815344a1a2f14a2081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b9620d75f75aad6629bb8815344a1a2f14a2081", "html_url": "https://github.com/rust-lang/rust/commit/1b9620d75f75aad6629bb8815344a1a2f14a2081", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b9620d75f75aad6629bb8815344a1a2f14a2081/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a721957a3d019f26e709546f27a4048eb8b9621b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a721957a3d019f26e709546f27a4048eb8b9621b", "html_url": "https://github.com/rust-lang/rust/commit/a721957a3d019f26e709546f27a4048eb8b9621b"}], "stats": {"total": 112, "additions": 56, "deletions": 56}, "files": [{"sha": "6f8dd39958c04f020153fc8c0653a7efa3711f55", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b9620d75f75aad6629bb8815344a1a2f14a2081/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9620d75f75aad6629bb8815344a1a2f14a2081/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=1b9620d75f75aad6629bb8815344a1a2f14a2081", "patch": "@@ -511,8 +511,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         };\n \n                     let diagnostic_msg = format!(\n-                        \"`{}` causes {} to be fully captured\",\n-                        migration_string, migrated_variables_concat\n+                        \"add a dummy let to cause {} to be fully captured\",\n+                        migrated_variables_concat\n                     );\n \n                     diagnostics_builder.span_suggestion("}, {"sha": "300f67e8b1e811db3e101a203eabf51a517132e3", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.fixed", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b9620d75f75aad6629bb8815344a1a2f14a2081/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1b9620d75f75aad6629bb8815344a1a2f14a2081/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed?ref=1b9620d75f75aad6629bb8815344a1a2f14a2081", "patch": "@@ -14,7 +14,7 @@ fn test1_all_need_migration() {\n \n     let c = || { let _ = (&t, &t1, &t2); \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP:` let _ = (&t, &t1, &t2)` causes `t`, `t1`, `t2` to be fully captured\n+    //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n \n         let _t = t.0;\n         let _t1 = t1.0;\n@@ -33,7 +33,7 @@ fn test2_only_precise_paths_need_migration() {\n \n     let c = || { let _ = (&t, &t1); \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP:` let _ = (&t, &t1)` causes `t`, `t1` to be fully captured\n+    //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n         let _t2 = t2;\n@@ -49,7 +49,7 @@ fn test3_only_by_value_need_migration() {\n     let t1 = (String::new(), String::new());\n     let c = || { let _ = &t; \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP: `let _ = &t` causes `t` to be fully captured\n+    //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         println!(\"{}\", t1.1);\n     };\n@@ -67,7 +67,7 @@ fn test4_only_non_copy_types_need_migration() {\n \n     let c = || { let _ = &t; \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP: `let _ = &t` causes `t` to be fully captured\n+    //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n     };\n@@ -85,7 +85,7 @@ fn test5_only_drop_types_need_migration() {\n \n     let c = || { let _ = &t; \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP: `let _ = &t` causes `t` to be fully captured\n+    //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _s = s.0;\n     };\n@@ -100,7 +100,7 @@ fn test6_move_closures_non_copy_types_might_need_migration() {\n     let t1 = (String::new(), String::new());\n     let c = move || { let _ = (&t1, &t); \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP: `let _ = (&t1, &t)` causes `t1`, `t` to be fully captured\n+    //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{} {}\", t1.1, t.1);\n     };\n \n@@ -115,7 +115,7 @@ fn test7_drop_non_drop_aggregate_need_migration() {\n \n     let c = || { let _ = &t; \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP: `let _ = &t` causes `t` to be fully captured\n+    //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n "}, {"sha": "a17c70d3e287780e0355a17c072cc11ff708f5c3", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b9620d75f75aad6629bb8815344a1a2f14a2081/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9620d75f75aad6629bb8815344a1a2f14a2081/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs?ref=1b9620d75f75aad6629bb8815344a1a2f14a2081", "patch": "@@ -14,7 +14,7 @@ fn test1_all_need_migration() {\n \n     let c = || {\n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP:` let _ = (&t, &t1, &t2)` causes `t`, `t1`, `t2` to be fully captured\n+    //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n \n         let _t = t.0;\n         let _t1 = t1.0;\n@@ -33,7 +33,7 @@ fn test2_only_precise_paths_need_migration() {\n \n     let c = || {\n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP:` let _ = (&t, &t1)` causes `t`, `t1` to be fully captured\n+    //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n         let _t2 = t2;\n@@ -49,7 +49,7 @@ fn test3_only_by_value_need_migration() {\n     let t1 = (String::new(), String::new());\n     let c = || {\n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP: `let _ = &t` causes `t` to be fully captured\n+    //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         println!(\"{}\", t1.1);\n     };\n@@ -67,7 +67,7 @@ fn test4_only_non_copy_types_need_migration() {\n \n     let c = || {\n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP: `let _ = &t` causes `t` to be fully captured\n+    //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n     };\n@@ -85,7 +85,7 @@ fn test5_only_drop_types_need_migration() {\n \n     let c = || {\n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP: `let _ = &t` causes `t` to be fully captured\n+    //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _s = s.0;\n     };\n@@ -100,7 +100,7 @@ fn test6_move_closures_non_copy_types_might_need_migration() {\n     let t1 = (String::new(), String::new());\n     let c = move || {\n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP: `let _ = (&t1, &t)` causes `t1`, `t` to be fully captured\n+    //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{} {}\", t1.1, t.1);\n     };\n \n@@ -115,7 +115,7 @@ fn test7_drop_non_drop_aggregate_need_migration() {\n \n     let c = || {\n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP: `let _ = &t` causes `t` to be fully captured\n+    //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n "}, {"sha": "69c12d2bb56c0f914eba16073767067714c9e0d0", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b9620d75f75aad6629bb8815344a1a2f14a2081/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b9620d75f75aad6629bb8815344a1a2f14a2081/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr?ref=1b9620d75f75aad6629bb8815344a1a2f14a2081", "patch": "@@ -16,7 +16,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(disjoint_capture_drop_reorder)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: `let _ = (&t, &t1, &t2)` causes `t`, `t1`, `t2` to be fully captured\n+help: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n    |\n LL |     let c = || { let _ = (&t, &t1, &t2); \n LL |\n@@ -39,7 +39,7 @@ LL | |         let _t2 = t2;\n LL | |     };\n    | |_____^\n    |\n-help: `let _ = (&t, &t1)` causes `t`, `t1` to be fully captured\n+help: add a dummy let to cause `t`, `t1` to be fully captured\n    |\n LL |     let c = || { let _ = (&t, &t1); \n LL |\n@@ -61,7 +61,7 @@ LL | |         println!(\"{}\", t1.1);\n LL | |     };\n    | |_____^\n    |\n-help: `let _ = &t` causes `t` to be fully captured\n+help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n@@ -83,7 +83,7 @@ LL | |         let _t1 = t1.0;\n LL | |     };\n    | |_____^\n    |\n-help: `let _ = &t` causes `t` to be fully captured\n+help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n@@ -105,7 +105,7 @@ LL | |         let _s = s.0;\n LL | |     };\n    | |_____^\n    |\n-help: `let _ = &t` causes `t` to be fully captured\n+help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n@@ -126,7 +126,7 @@ LL | |         println!(\"{} {}\", t1.1, t.1);\n LL | |     };\n    | |_____^\n    |\n-help: `let _ = (&t1, &t)` causes `t1`, `t` to be fully captured\n+help: add a dummy let to cause `t1`, `t` to be fully captured\n    |\n LL |     let c = move || { let _ = (&t1, &t); \n LL |\n@@ -146,7 +146,7 @@ LL | |         let _t = t.0;\n LL | |     };\n    | |_____^\n    |\n-help: `let _ = &t` causes `t` to be fully captured\n+help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |"}, {"sha": "a3e51a2b8e91af1c264f196dc7f19ddceb7e1c40", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b9620d75f75aad6629bb8815344a1a2f14a2081/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1b9620d75f75aad6629bb8815344a1a2f14a2081/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed?ref=1b9620d75f75aad6629bb8815344a1a2f14a2081", "patch": "@@ -18,7 +18,7 @@ fn closure_contains_block() {\n     let t = (Foo(0), Foo(0));\n     let c = || { let _ = &t; \n         //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-        //~| HELP: `let _ = &t` causes `t` to be fully captured\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n \n@@ -29,7 +29,7 @@ fn closure_doesnt_contain_block() {\n     let t = (Foo(0), Foo(0));\n     let c = || { let _ = &t; t.0 };\n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP: `let _ = &t` causes `t` to be fully captured\n+    //~| HELP: add a dummy let to cause `t` to be fully captured\n \n     c();\n }"}, {"sha": "0eb837b6888350413e5d74a7d3bf7680a1ccb016", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b9620d75f75aad6629bb8815344a1a2f14a2081/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9620d75f75aad6629bb8815344a1a2f14a2081/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs?ref=1b9620d75f75aad6629bb8815344a1a2f14a2081", "patch": "@@ -18,7 +18,7 @@ fn closure_contains_block() {\n     let t = (Foo(0), Foo(0));\n     let c = || {\n         //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-        //~| HELP: `let _ = &t` causes `t` to be fully captured\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n \n@@ -29,7 +29,7 @@ fn closure_doesnt_contain_block() {\n     let t = (Foo(0), Foo(0));\n     let c = || t.0;\n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP: `let _ = &t` causes `t` to be fully captured\n+    //~| HELP: add a dummy let to cause `t` to be fully captured\n \n     c();\n }"}, {"sha": "e6173217edc2fb9b95cb4b46ddb626e4136a3773", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b9620d75f75aad6629bb8815344a1a2f14a2081/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b9620d75f75aad6629bb8815344a1a2f14a2081/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr?ref=1b9620d75f75aad6629bb8815344a1a2f14a2081", "patch": "@@ -14,7 +14,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(disjoint_capture_drop_reorder)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: `let _ = &t` causes `t` to be fully captured\n+help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n@@ -29,7 +29,7 @@ error: drop order affected for closure because of `capture_disjoint_fields`\n LL |     let c = || t.0;\n    |             ^^^^^^\n    |\n-help: `let _ = &t` causes `t` to be fully captured\n+help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; t.0 };\n    |                ^^^^^^^^^^^^^^^^^^^"}, {"sha": "b739035c784223ffd5d5ba38f89b5b677deea308", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b9620d75f75aad6629bb8815344a1a2f14a2081/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1b9620d75f75aad6629bb8815344a1a2f14a2081/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed?ref=1b9620d75f75aad6629bb8815344a1a2f14a2081", "patch": "@@ -18,7 +18,7 @@ fn test_precise_analysis_drop_paths_not_captured_by_move() {\n \n     let c = || { let _ = &t; \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP: `let _ = &t` causes `t` to be fully captured\n+    //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _t = &t.1;\n     };\n@@ -41,7 +41,7 @@ fn test_precise_analysis_long_path_missing() {\n \n     let c = || { let _ = &u; \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP: `let _ = &u` causes `u` to be fully captured\n+    //~| HELP: add a dummy let to cause `u` to be fully captured\n         let _x = u.0.0;\n         let _x = u.0.1;\n         let _x = u.1.0;"}, {"sha": "e1f29c9d0e9d8cb9544bb6712fbf3e7d112709b7", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b9620d75f75aad6629bb8815344a1a2f14a2081/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9620d75f75aad6629bb8815344a1a2f14a2081/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.rs?ref=1b9620d75f75aad6629bb8815344a1a2f14a2081", "patch": "@@ -18,7 +18,7 @@ fn test_precise_analysis_drop_paths_not_captured_by_move() {\n \n     let c = || {\n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP: `let _ = &t` causes `t` to be fully captured\n+    //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _t = &t.1;\n     };\n@@ -41,7 +41,7 @@ fn test_precise_analysis_long_path_missing() {\n \n     let c = || {\n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP: `let _ = &u` causes `u` to be fully captured\n+    //~| HELP: add a dummy let to cause `u` to be fully captured\n         let _x = u.0.0;\n         let _x = u.0.1;\n         let _x = u.1.0;"}, {"sha": "7135ded13c2563a6d104c7f6d30f643d7b3c5986", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b9620d75f75aad6629bb8815344a1a2f14a2081/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b9620d75f75aad6629bb8815344a1a2f14a2081/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr?ref=1b9620d75f75aad6629bb8815344a1a2f14a2081", "patch": "@@ -15,7 +15,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(disjoint_capture_drop_reorder)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: `let _ = &t` causes `t` to be fully captured\n+help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n@@ -38,7 +38,7 @@ LL | |         let _x = u.1.0;\n LL | |     };\n    | |_____^\n    |\n-help: `let _ = &u` causes `u` to be fully captured\n+help: add a dummy let to cause `u` to be fully captured\n    |\n LL |     let c = || { let _ = &u; \n LL |"}, {"sha": "e1b212153f431053fb8ce06ddd176a021a589bb1", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.fixed", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b9620d75f75aad6629bb8815344a1a2f14a2081/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1b9620d75f75aad6629bb8815344a1a2f14a2081/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed?ref=1b9620d75f75aad6629bb8815344a1a2f14a2081", "patch": "@@ -24,7 +24,7 @@ fn test1_all_need_migration() {\n \n     let c = || { let _ = (&t, &t1, &t2); \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP:` let _ = (&t, &t1, &t2)` causes `t`, `t1`, `t2` to be fully captured\n+    //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n         let _t2 = t2.0;\n@@ -42,7 +42,7 @@ fn test2_only_precise_paths_need_migration() {\n \n     let c = || { let _ = (&t, &t1); \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP:` let _ = (&t, &t1)` causes `t`, `t1` to be fully captured\n+    //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n         let _t2 = t2;\n@@ -58,7 +58,7 @@ fn test3_only_by_value_need_migration() {\n     let t1 = (Foo(0), Foo(0));\n     let c = || { let _ = &t; \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP: `let _ = &t` causes `t` to be fully captured\n+    //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         println!(\"{:?}\", t1.1);\n     };\n@@ -75,7 +75,7 @@ fn test4_type_contains_drop_need_migration() {\n \n     let c = || { let _ = &t; \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP: `let _ = &t` causes `t` to be fully captured\n+    //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n \n@@ -90,7 +90,7 @@ fn test5_drop_non_drop_aggregate_need_migration() {\n \n     let c = || { let _ = &t; \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP: `let _ = &t` causes `t` to be fully captured\n+    //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n \n@@ -103,7 +103,7 @@ fn test6_significant_insignificant_drop_aggregate_need_migration() {\n \n     let c = || { let _ = &t; \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP: `let _ = &t` causes `t` to be fully captured\n+    //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.1;\n     };\n \n@@ -118,7 +118,7 @@ fn test7_move_closures_non_copy_types_might_need_migration() {\n \n     let c = move || { let _ = (&t1, &t); \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP: `let _ = (&t1, &t)` causes `t1`, `t` to be fully captured\n+    //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{:?} {:?}\", t1.1, t.1);\n     };\n "}, {"sha": "106b2933515156249b2946595722b10504d115d8", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b9620d75f75aad6629bb8815344a1a2f14a2081/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9620d75f75aad6629bb8815344a1a2f14a2081/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs?ref=1b9620d75f75aad6629bb8815344a1a2f14a2081", "patch": "@@ -24,7 +24,7 @@ fn test1_all_need_migration() {\n \n     let c = || {\n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP:` let _ = (&t, &t1, &t2)` causes `t`, `t1`, `t2` to be fully captured\n+    //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n         let _t2 = t2.0;\n@@ -42,7 +42,7 @@ fn test2_only_precise_paths_need_migration() {\n \n     let c = || {\n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP:` let _ = (&t, &t1)` causes `t`, `t1` to be fully captured\n+    //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n         let _t2 = t2;\n@@ -58,7 +58,7 @@ fn test3_only_by_value_need_migration() {\n     let t1 = (Foo(0), Foo(0));\n     let c = || {\n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP: `let _ = &t` causes `t` to be fully captured\n+    //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         println!(\"{:?}\", t1.1);\n     };\n@@ -75,7 +75,7 @@ fn test4_type_contains_drop_need_migration() {\n \n     let c = || {\n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP: `let _ = &t` causes `t` to be fully captured\n+    //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n \n@@ -90,7 +90,7 @@ fn test5_drop_non_drop_aggregate_need_migration() {\n \n     let c = || {\n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP: `let _ = &t` causes `t` to be fully captured\n+    //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n \n@@ -103,7 +103,7 @@ fn test6_significant_insignificant_drop_aggregate_need_migration() {\n \n     let c = || {\n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP: `let _ = &t` causes `t` to be fully captured\n+    //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.1;\n     };\n \n@@ -118,7 +118,7 @@ fn test7_move_closures_non_copy_types_might_need_migration() {\n \n     let c = move || {\n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n-    //~| HELP: `let _ = (&t1, &t)` causes `t1`, `t` to be fully captured\n+    //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{:?} {:?}\", t1.1, t.1);\n     };\n "}, {"sha": "ee29fe1306059377efa3d28209282d9fd2bb92c5", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b9620d75f75aad6629bb8815344a1a2f14a2081/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b9620d75f75aad6629bb8815344a1a2f14a2081/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr?ref=1b9620d75f75aad6629bb8815344a1a2f14a2081", "patch": "@@ -16,7 +16,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(disjoint_capture_drop_reorder)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: `let _ = (&t, &t1, &t2)` causes `t`, `t1`, `t2` to be fully captured\n+help: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n    |\n LL |     let c = || { let _ = (&t, &t1, &t2); \n LL |\n@@ -39,7 +39,7 @@ LL | |         let _t2 = t2;\n LL | |     };\n    | |_____^\n    |\n-help: `let _ = (&t, &t1)` causes `t`, `t1` to be fully captured\n+help: add a dummy let to cause `t`, `t1` to be fully captured\n    |\n LL |     let c = || { let _ = (&t, &t1); \n LL |\n@@ -61,7 +61,7 @@ LL | |         println!(\"{:?}\", t1.1);\n LL | |     };\n    | |_____^\n    |\n-help: `let _ = &t` causes `t` to be fully captured\n+help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n@@ -82,7 +82,7 @@ LL | |         let _t = t.0;\n LL | |     };\n    | |_____^\n    |\n-help: `let _ = &t` causes `t` to be fully captured\n+help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n@@ -102,7 +102,7 @@ LL | |         let _t = t.0;\n LL | |     };\n    | |_____^\n    |\n-help: `let _ = &t` causes `t` to be fully captured\n+help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n@@ -122,7 +122,7 @@ LL | |         let _t = t.1;\n LL | |     };\n    | |_____^\n    |\n-help: `let _ = &t` causes `t` to be fully captured\n+help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n@@ -142,7 +142,7 @@ LL | |         println!(\"{:?} {:?}\", t1.1, t.1);\n LL | |     };\n    | |_____^\n    |\n-help: `let _ = (&t1, &t)` causes `t1`, `t` to be fully captured\n+help: add a dummy let to cause `t1`, `t` to be fully captured\n    |\n LL |     let c = move || { let _ = (&t1, &t); \n LL |"}]}