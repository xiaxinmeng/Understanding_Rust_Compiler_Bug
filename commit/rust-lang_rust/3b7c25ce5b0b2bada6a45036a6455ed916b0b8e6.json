{"sha": "3b7c25ce5b0b2bada6a45036a6455ed916b0b8e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiN2MyNWNlNWIwYjJiYWRhNmE0NTAzNmE2NDU1ZWQ5MTZiMGI4ZTY=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-07-27T22:11:02Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-07-29T22:51:03Z"}, "message": "syntax: add some more extension helper methods", "tree": {"sha": "ad5c885088922d5b2dc6fe807dced6faa850c87f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad5c885088922d5b2dc6fe807dced6faa850c87f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b7c25ce5b0b2bada6a45036a6455ed916b0b8e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b7c25ce5b0b2bada6a45036a6455ed916b0b8e6", "html_url": "https://github.com/rust-lang/rust/commit/3b7c25ce5b0b2bada6a45036a6455ed916b0b8e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b7c25ce5b0b2bada6a45036a6455ed916b0b8e6/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87c78fd7e307e0be0eeb17df2d2ff1b1b4057254", "url": "https://api.github.com/repos/rust-lang/rust/commits/87c78fd7e307e0be0eeb17df2d2ff1b1b4057254", "html_url": "https://github.com/rust-lang/rust/commit/87c78fd7e307e0be0eeb17df2d2ff1b1b4057254"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "6c9e113f41a4c5f2514cfe671b5df77353fe65a9", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3b7c25ce5b0b2bada6a45036a6455ed916b0b8e6/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7c25ce5b0b2bada6a45036a6455ed916b0b8e6/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=3b7c25ce5b0b2bada6a45036a6455ed916b0b8e6", "patch": "@@ -170,6 +170,13 @@ pub trait AstBuilder {\n                 subpats: Vec<Gc<ast::Pat>>) -> Gc<ast::Pat>;\n     fn pat_struct(&self, span: Span,\n                   path: ast::Path, field_pats: Vec<ast::FieldPat> ) -> Gc<ast::Pat>;\n+    fn pat_tuple(&self, span: Span, pats: Vec<Gc<ast::Pat>>) -> Gc<ast::Pat>;\n+\n+    fn pat_some(&self, span: Span, pat: Gc<ast::Pat>) -> Gc<ast::Pat>;\n+    fn pat_none(&self, span: Span) -> Gc<ast::Pat>;\n+\n+    fn pat_ok(&self, span: Span, pat: Gc<ast::Pat>) -> Gc<ast::Pat>;\n+    fn pat_err(&self, span: Span, pat: Gc<ast::Pat>) -> Gc<ast::Pat>;\n \n     fn arm(&self, span: Span, pats: Vec<Gc<ast::Pat>> , expr: Gc<ast::Expr>) -> ast::Arm;\n     fn arm_unreachable(&self, span: Span) -> ast::Arm;\n@@ -178,6 +185,7 @@ pub trait AstBuilder {\n     fn expr_if(&self, span: Span,\n                cond: Gc<ast::Expr>, then: Gc<ast::Expr>,\n                els: Option<Gc<ast::Expr>>) -> Gc<ast::Expr>;\n+    fn expr_loop(&self, span: Span, block: P<ast::Block>) -> Gc<ast::Expr>;\n \n     fn lambda_fn_decl(&self, span: Span,\n                       fn_decl: P<ast::FnDecl>, blk: P<ast::Block>) -> Gc<ast::Expr>;\n@@ -777,6 +785,46 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         let pat = ast::PatStruct(path, field_pats, false);\n         self.pat(span, pat)\n     }\n+    fn pat_tuple(&self, span: Span, pats: Vec<Gc<ast::Pat>>) -> Gc<ast::Pat> {\n+        let pat = ast::PatTup(pats);\n+        self.pat(span, pat)\n+    }\n+\n+    fn pat_some(&self, span: Span, pat: Gc<ast::Pat>) -> Gc<ast::Pat> {\n+        let some = vec!(\n+            self.ident_of(\"std\"),\n+            self.ident_of(\"option\"),\n+            self.ident_of(\"Some\"));\n+        let path = self.path_global(span, some);\n+        self.pat_enum(span, path, vec!(pat))\n+    }\n+\n+    fn pat_none(&self, span: Span) -> Gc<ast::Pat> {\n+        let some = vec!(\n+            self.ident_of(\"std\"),\n+            self.ident_of(\"option\"),\n+            self.ident_of(\"None\"));\n+        let path = self.path_global(span, some);\n+        self.pat_enum(span, path, vec!())\n+    }\n+\n+    fn pat_ok(&self, span: Span, pat: Gc<ast::Pat>) -> Gc<ast::Pat> {\n+        let some = vec!(\n+            self.ident_of(\"std\"),\n+            self.ident_of(\"result\"),\n+            self.ident_of(\"Ok\"));\n+        let path = self.path_global(span, some);\n+        self.pat_enum(span, path, vec!(pat))\n+    }\n+\n+    fn pat_err(&self, span: Span, pat: Gc<ast::Pat>) -> Gc<ast::Pat> {\n+        let some = vec!(\n+            self.ident_of(\"std\"),\n+            self.ident_of(\"result\"),\n+            self.ident_of(\"Err\"));\n+        let path = self.path_global(span, some);\n+        self.pat_enum(span, path, vec!(pat))\n+    }\n \n     fn arm(&self, _span: Span, pats: Vec<Gc<ast::Pat>> , expr: Gc<ast::Expr>) -> ast::Arm {\n         ast::Arm {\n@@ -803,6 +851,10 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr(span, ast::ExprIf(cond, self.block_expr(then), els))\n     }\n \n+    fn expr_loop(&self, span: Span, block: P<ast::Block>) -> Gc<ast::Expr> {\n+        self.expr(span, ast::ExprLoop(block, None))\n+    }\n+\n     fn lambda_fn_decl(&self, span: Span,\n                       fn_decl: P<ast::FnDecl>, blk: P<ast::Block>) -> Gc<ast::Expr> {\n         self.expr(span, ast::ExprFnBlock(fn_decl, blk))"}]}