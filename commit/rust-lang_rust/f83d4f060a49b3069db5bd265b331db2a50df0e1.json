{"sha": "f83d4f060a49b3069db5bd265b331db2a50df0e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4M2Q0ZjA2MGE0OWIzMDY5ZGI1YmQyNjViMzMxZGIyYTUwZGYwZTE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-08T08:45:08Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-08T08:45:08Z"}, "message": "std: Mark timeout methods experimental\n\nThis was intended as part of the I/O timeouts commit, but it was mistakenly\nforgotten. The type of the timeout argument is not guaranteed to remain constant\ninto the future.", "tree": {"sha": "ad45cea11e5dc3ac0bddb70b8528b75cefcd24c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad45cea11e5dc3ac0bddb70b8528b75cefcd24c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f83d4f060a49b3069db5bd265b331db2a50df0e1", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f83d4f060a49b3069db5bd265b331db2a50df0e1", "html_url": "https://github.com/rust-lang/rust/commit/f83d4f060a49b3069db5bd265b331db2a50df0e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f83d4f060a49b3069db5bd265b331db2a50df0e1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c39b1cb1bed78d989b1011f54f6febb7e9e46d94", "url": "https://api.github.com/repos/rust-lang/rust/commits/c39b1cb1bed78d989b1011f54f6febb7e9e46d94", "html_url": "https://github.com/rust-lang/rust/commit/c39b1cb1bed78d989b1011f54f6febb7e9e46d94"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "09b88ccaa7e2f53302828777597055d0c932e303", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f83d4f060a49b3069db5bd265b331db2a50df0e1/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83d4f060a49b3069db5bd265b331db2a50df0e1/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=f83d4f060a49b3069db5bd265b331db2a50df0e1", "patch": "@@ -169,6 +169,7 @@ impl TcpStream {\n     ///\n     /// For clarification on the semantics of interrupting a read and a write,\n     /// take a look at `set_read_timeout` and `set_write_timeout`.\n+    #[experimental = \"the timeout argument may change in type and value\"]\n     pub fn set_timeout(&mut self, timeout_ms: Option<u64>) {\n         self.obj.set_timeout(timeout_ms)\n     }\n@@ -185,6 +186,7 @@ impl TcpStream {\n     /// action is taken. Otherwise, the read operation will be scheduled to\n     /// promptly return. If a timeout error is returned, then no data was read\n     /// during the timeout period.\n+    #[experimental = \"the timeout argument may change in type and value\"]\n     pub fn set_read_timeout(&mut self, timeout_ms: Option<u64>) {\n         self.obj.set_read_timeout(timeout_ms)\n     }\n@@ -211,6 +213,7 @@ impl TcpStream {\n     /// does not know how many bytes were written as part of the timeout\n     /// operation. It may be the case that bytes continue to be written in an\n     /// asynchronous fashion after the call to write returns.\n+    #[experimental = \"the timeout argument may change in type and value\"]\n     pub fn set_write_timeout(&mut self, timeout_ms: Option<u64>) {\n         self.obj.set_write_timeout(timeout_ms)\n     }"}, {"sha": "e66b2107bb107ce2d1bd4263cf639008a6bbee47", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f83d4f060a49b3069db5bd265b331db2a50df0e1/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83d4f060a49b3069db5bd265b331db2a50df0e1/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=f83d4f060a49b3069db5bd265b331db2a50df0e1", "patch": "@@ -147,20 +147,23 @@ impl UdpSocket {\n     /// Sets the read/write timeout for this socket.\n     ///\n     /// For more information, see `TcpStream::set_timeout`\n+    #[experimental = \"the timeout argument may change in type and value\"]\n     pub fn set_timeout(&mut self, timeout_ms: Option<u64>) {\n         self.obj.set_timeout(timeout_ms)\n     }\n \n     /// Sets the read timeout for this socket.\n     ///\n     /// For more information, see `TcpStream::set_timeout`\n+    #[experimental = \"the timeout argument may change in type and value\"]\n     pub fn set_read_timeout(&mut self, timeout_ms: Option<u64>) {\n         self.obj.set_read_timeout(timeout_ms)\n     }\n \n     /// Sets the write timeout for this socket.\n     ///\n     /// For more information, see `TcpStream::set_timeout`\n+    #[experimental = \"the timeout argument may change in type and value\"]\n     pub fn set_write_timeout(&mut self, timeout_ms: Option<u64>) {\n         self.obj.set_write_timeout(timeout_ms)\n     }"}, {"sha": "1e320fe1aaed467f115733b9a1327d45d9e7a16e", "filename": "src/libstd/io/net/unix.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f83d4f060a49b3069db5bd265b331db2a50df0e1/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83d4f060a49b3069db5bd265b331db2a50df0e1/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Funix.rs?ref=f83d4f060a49b3069db5bd265b331db2a50df0e1", "patch": "@@ -97,20 +97,23 @@ impl UnixStream {\n     /// Sets the read/write timeout for this socket.\n     ///\n     /// For more information, see `TcpStream::set_timeout`\n+    #[experimental = \"the timeout argument may change in type and value\"]\n     pub fn set_timeout(&mut self, timeout_ms: Option<u64>) {\n         self.obj.set_timeout(timeout_ms)\n     }\n \n     /// Sets the read timeout for this socket.\n     ///\n     /// For more information, see `TcpStream::set_timeout`\n+    #[experimental = \"the timeout argument may change in type and value\"]\n     pub fn set_read_timeout(&mut self, timeout_ms: Option<u64>) {\n         self.obj.set_read_timeout(timeout_ms)\n     }\n \n     /// Sets the write timeout for this socket.\n     ///\n     /// For more information, see `TcpStream::set_timeout`\n+    #[experimental = \"the timeout argument may change in type and value\"]\n     pub fn set_write_timeout(&mut self, timeout_ms: Option<u64>) {\n         self.obj.set_write_timeout(timeout_ms)\n     }"}]}