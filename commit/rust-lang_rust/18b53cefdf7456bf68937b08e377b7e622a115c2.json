{"sha": "18b53cefdf7456bf68937b08e377b7e622a115c2", "node_id": "C_kwDOAAsO6NoAKDE4YjUzY2VmZGY3NDU2YmY2ODkzN2IwOGUzNzdiN2U2MjJhMTE1YzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-25T16:14:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-25T16:14:54Z"}, "message": "Auto merge of #95604 - nbdd0121:used2, r=petrochenkov\n\nGenerate synthetic object file to ensure all exported and used symbols participate in the linking\n\nFix #50007 and #47384\n\nThis is the synthetic object file approach that I described in https://github.com/rust-lang/rust/pull/95363#issuecomment-1079932354, allowing all exported and used symbols to be linked while still allowing them to be GCed.\n\nRelated #93791, #95363\n\nr? `@petrochenkov`\ncc `@carbotaniuman`", "tree": {"sha": "ec10fca90b5abb40360870b999e9151715e5a2ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec10fca90b5abb40360870b999e9151715e5a2ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18b53cefdf7456bf68937b08e377b7e622a115c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18b53cefdf7456bf68937b08e377b7e622a115c2", "html_url": "https://github.com/rust-lang/rust/commit/18b53cefdf7456bf68937b08e377b7e622a115c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18b53cefdf7456bf68937b08e377b7e622a115c2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7417110cefda899a685a77557ac2bd7d7ee07e54", "url": "https://api.github.com/repos/rust-lang/rust/commits/7417110cefda899a685a77557ac2bd7d7ee07e54", "html_url": "https://github.com/rust-lang/rust/commit/7417110cefda899a685a77557ac2bd7d7ee07e54"}, {"sha": "6f9b2b32476dbd3453e296bea54726d469e471c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f9b2b32476dbd3453e296bea54726d469e471c0", "html_url": "https://github.com/rust-lang/rust/commit/6f9b2b32476dbd3453e296bea54726d469e471c0"}], "stats": {"total": 395, "additions": 322, "deletions": 73}, "files": [{"sha": "5c63bd8c1bd8dcff95494050e9da3d96f4ec49bf", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=18b53cefdf7456bf68937b08e377b7e622a115c2", "patch": "@@ -16,7 +16,7 @@ use rustc_errors::{FatalError, Handler};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_middle::bug;\n use rustc_middle::dep_graph::WorkProduct;\n-use rustc_middle::middle::exported_symbols::SymbolExportLevel;\n+use rustc_middle::middle::exported_symbols::{SymbolExportInfo, SymbolExportLevel};\n use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc_session::config::{self, CrateType, Lto};\n use tracing::{debug, info};\n@@ -55,8 +55,8 @@ fn prepare_lto(\n         Lto::No => panic!(\"didn't request LTO but we're doing LTO\"),\n     };\n \n-    let symbol_filter = &|&(ref name, level): &(String, SymbolExportLevel)| {\n-        if level.is_below_threshold(export_threshold) {\n+    let symbol_filter = &|&(ref name, info): &(String, SymbolExportInfo)| {\n+        if info.level.is_below_threshold(export_threshold) || info.used {\n             Some(CString::new(name.as_str()).unwrap())\n         } else {\n             None"}, {"sha": "743f6c0e5703db5c5f6293f47e68f434b418c555", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=18b53cefdf7456bf68937b08e377b7e622a115c2", "patch": "@@ -7,6 +7,7 @@ use rustc_errors::{ErrorGuaranteed, Handler};\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc_hir::def_id::CrateNum;\n use rustc_middle::middle::dependency_format::Linkage;\n+use rustc_middle::middle::exported_symbols::SymbolExportKind;\n use rustc_session::config::{self, CFGuard, CrateType, DebugInfo, LdImpl, Strip};\n use rustc_session::config::{OutputFilenames, OutputType, PrintRequest, SplitDwarfKind};\n use rustc_session::cstore::DllImport;\n@@ -1655,6 +1656,73 @@ fn add_post_link_args(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor\n     }\n }\n \n+/// Add a synthetic object file that contains reference to all symbols that we want to expose to\n+/// the linker.\n+///\n+/// Background: we implement rlibs as static library (archives). Linkers treat archives\n+/// differently from object files: all object files participate in linking, while archives will\n+/// only participate in linking if they can satisfy at least one undefined reference (version\n+/// scripts doesn't count). This causes `#[no_mangle]` or `#[used]` items to be ignored by the\n+/// linker, and since they never participate in the linking, using `KEEP` in the linker scripts\n+/// can't keep them either. This causes #47384.\n+///\n+/// To keep them around, we could use `--whole-archive` and equivalents to force rlib to\n+/// participate in linking like object files, but this proves to be expensive (#93791). Therefore\n+/// we instead just introduce an undefined reference to them. This could be done by `-u` command\n+/// line option to the linker or `EXTERN(...)` in linker scripts, however they does not only\n+/// introduce an undefined reference, but also make them the GC roots, preventing `--gc-sections`\n+/// from removing them, and this is especially problematic for embedded programming where every\n+/// byte counts.\n+///\n+/// This method creates a synthetic object file, which contains undefined references to all symbols\n+/// that are necessary for the linking. They are only present in symbol table but not actually\n+/// used in any sections, so the linker will therefore pick relevant rlibs for linking, but\n+/// unused `#[no_mangle]` or `#[used]` can still be discard by GC sections.\n+fn add_linked_symbol_object(\n+    cmd: &mut dyn Linker,\n+    sess: &Session,\n+    tmpdir: &Path,\n+    symbols: &[(String, SymbolExportKind)],\n+) {\n+    if symbols.is_empty() {\n+        return;\n+    }\n+\n+    let Some(mut file) = super::metadata::create_object_file(sess) else {\n+        return;\n+    };\n+\n+    // NOTE(nbdd0121): MSVC will hang if the input object file contains no sections,\n+    // so add an empty section.\n+    if file.format() == object::BinaryFormat::Coff {\n+        file.add_section(Vec::new(), \".text\".into(), object::SectionKind::Text);\n+    }\n+\n+    for (sym, kind) in symbols.iter() {\n+        file.add_symbol(object::write::Symbol {\n+            name: sym.clone().into(),\n+            value: 0,\n+            size: 0,\n+            kind: match kind {\n+                SymbolExportKind::Text => object::SymbolKind::Text,\n+                SymbolExportKind::Data => object::SymbolKind::Data,\n+                SymbolExportKind::Tls => object::SymbolKind::Tls,\n+            },\n+            scope: object::SymbolScope::Unknown,\n+            weak: false,\n+            section: object::write::SymbolSection::Undefined,\n+            flags: object::SymbolFlags::None,\n+        });\n+    }\n+\n+    let path = tmpdir.join(\"symbols.o\");\n+    let result = std::fs::write(&path, file.write().unwrap());\n+    if let Err(e) = result {\n+        sess.fatal(&format!(\"failed to write {}: {}\", path.display(), e));\n+    }\n+    cmd.add_object(&path);\n+}\n+\n /// Add object files containing code from the current crate.\n fn add_local_crate_regular_objects(cmd: &mut dyn Linker, codegen_results: &CodegenResults) {\n     for obj in codegen_results.modules.iter().filter_map(|m| m.object.as_ref()) {\n@@ -1795,6 +1863,13 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     // Pre-link CRT objects.\n     add_pre_link_objects(cmd, sess, link_output_kind, crt_objects_fallback);\n \n+    add_linked_symbol_object(\n+        cmd,\n+        sess,\n+        tmpdir,\n+        &codegen_results.crate_info.linked_symbols[&crate_type],\n+    );\n+\n     // Sanitizer libraries.\n     add_sanitizer_libraries(sess, crate_type, cmd);\n "}, {"sha": "6e13e0d0e43b1fd42d4b0a888db5584ab2e6a3c3", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 50, "deletions": 22, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=18b53cefdf7456bf68937b08e377b7e622a115c2", "patch": "@@ -12,6 +12,7 @@ use std::{env, mem, str};\n \n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_middle::middle::dependency_format::Linkage;\n+use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo, SymbolExportKind};\n use rustc_middle::ty::TyCtxt;\n use rustc_serialize::{json, Encoder};\n use rustc_session::config::{self, CrateType, DebugInfo, LinkerPluginLto, Lto, OptLevel, Strip};\n@@ -1518,6 +1519,29 @@ impl<'a> L4Bender<'a> {\n     }\n }\n \n+fn for_each_exported_symbols_include_dep<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    crate_type: CrateType,\n+    mut callback: impl FnMut(ExportedSymbol<'tcx>, SymbolExportInfo, CrateNum),\n+) {\n+    for &(symbol, info) in tcx.exported_symbols(LOCAL_CRATE).iter() {\n+        callback(symbol, info, LOCAL_CRATE);\n+    }\n+\n+    let formats = tcx.dependency_formats(());\n+    let deps = formats.iter().find_map(|(t, list)| (*t == crate_type).then_some(list)).unwrap();\n+\n+    for (index, dep_format) in deps.iter().enumerate() {\n+        let cnum = CrateNum::new(index + 1);\n+        // For each dependency that we are linking to statically ...\n+        if *dep_format == Linkage::Static {\n+            for &(symbol, info) in tcx.exported_symbols(cnum).iter() {\n+                callback(symbol, info, cnum);\n+            }\n+        }\n+    }\n+}\n+\n pub(crate) fn exported_symbols(tcx: TyCtxt<'_>, crate_type: CrateType) -> Vec<String> {\n     if let Some(ref exports) = tcx.sess.target.override_export_symbols {\n         return exports.iter().map(ToString::to_string).collect();\n@@ -1526,34 +1550,38 @@ pub(crate) fn exported_symbols(tcx: TyCtxt<'_>, crate_type: CrateType) -> Vec<St\n     let mut symbols = Vec::new();\n \n     let export_threshold = symbol_export::crates_export_threshold(&[crate_type]);\n-    for &(symbol, level) in tcx.exported_symbols(LOCAL_CRATE).iter() {\n-        if level.is_below_threshold(export_threshold) {\n-            symbols.push(symbol_export::symbol_name_for_instance_in_crate(\n-                tcx,\n-                symbol,\n-                LOCAL_CRATE,\n-            ));\n+    for_each_exported_symbols_include_dep(tcx, crate_type, |symbol, info, cnum| {\n+        if info.level.is_below_threshold(export_threshold) {\n+            symbols.push(symbol_export::symbol_name_for_instance_in_crate(tcx, symbol, cnum));\n         }\n-    }\n+    });\n \n-    let formats = tcx.dependency_formats(());\n-    let deps = formats.iter().find_map(|(t, list)| (*t == crate_type).then_some(list)).unwrap();\n-\n-    for (index, dep_format) in deps.iter().enumerate() {\n-        let cnum = CrateNum::new(index + 1);\n-        // For each dependency that we are linking to statically ...\n-        if *dep_format == Linkage::Static {\n-            // ... we add its symbol list to our export list.\n-            for &(symbol, level) in tcx.exported_symbols(cnum).iter() {\n-                if !level.is_below_threshold(export_threshold) {\n-                    continue;\n-                }\n+    symbols\n+}\n \n-                symbols.push(symbol_export::symbol_name_for_instance_in_crate(tcx, symbol, cnum));\n-            }\n+pub(crate) fn linked_symbols(\n+    tcx: TyCtxt<'_>,\n+    crate_type: CrateType,\n+) -> Vec<(String, SymbolExportKind)> {\n+    match crate_type {\n+        CrateType::Executable | CrateType::Cdylib => (),\n+        CrateType::Staticlib | CrateType::ProcMacro | CrateType::Rlib | CrateType::Dylib => {\n+            return Vec::new();\n         }\n     }\n \n+    let mut symbols = Vec::new();\n+\n+    let export_threshold = symbol_export::crates_export_threshold(&[crate_type]);\n+    for_each_exported_symbols_include_dep(tcx, crate_type, |symbol, info, cnum| {\n+        if info.level.is_below_threshold(export_threshold) || info.used {\n+            symbols.push((\n+                symbol_export::symbol_name_for_instance_in_crate(tcx, symbol, cnum),\n+                info.kind,\n+            ));\n+        }\n+    });\n+\n     symbols\n }\n "}, {"sha": "2e42272805682ec71881c2fc07162ac265f1872b", "filename": "compiler/rustc_codegen_ssa/src/back/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs?ref=18b53cefdf7456bf68937b08e377b7e622a115c2", "patch": "@@ -94,7 +94,7 @@ fn search_for_metadata<'a>(\n         .map_err(|e| format!(\"failed to read {} section in '{}': {}\", section, path.display(), e))\n }\n \n-fn create_object_file(sess: &Session) -> Option<write::Object<'static>> {\n+pub(crate) fn create_object_file(sess: &Session) -> Option<write::Object<'static>> {\n     let endianness = match sess.target.options.endian {\n         Endian::Little => Endianness::Little,\n         Endian::Big => Endianness::Big,"}, {"sha": "3a416c8a2b54b47ef327359a5dca32165ef69fc9", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 103, "deletions": 31, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=18b53cefdf7456bf68937b08e377b7e622a115c2", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n use rustc_hir::Node;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::middle::exported_symbols::{\n-    metadata_symbol_name, ExportedSymbol, SymbolExportLevel,\n+    metadata_symbol_name, ExportedSymbol, SymbolExportInfo, SymbolExportKind, SymbolExportLevel,\n };\n use rustc_middle::ty::query::{ExternProviders, Providers};\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n@@ -40,7 +40,7 @@ pub fn crates_export_threshold(crate_types: &[CrateType]) -> SymbolExportLevel {\n     }\n }\n \n-fn reachable_non_generics_provider(tcx: TyCtxt<'_>, cnum: CrateNum) -> DefIdMap<SymbolExportLevel> {\n+fn reachable_non_generics_provider(tcx: TyCtxt<'_>, cnum: CrateNum) -> DefIdMap<SymbolExportInfo> {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     if !tcx.sess.opts.output_types.should_codegen() {\n@@ -103,36 +103,51 @@ fn reachable_non_generics_provider(tcx: TyCtxt<'_>, cnum: CrateNum) -> DefIdMap<\n             }\n         })\n         .map(|def_id| {\n-            let export_level = if special_runtime_crate {\n+            let (export_level, used) = if special_runtime_crate {\n                 let name = tcx.symbol_name(Instance::mono(tcx, def_id.to_def_id())).name;\n-                // We can probably do better here by just ensuring that\n-                // it has hidden visibility rather than public\n-                // visibility, as this is primarily here to ensure it's\n-                // not stripped during LTO.\n-                //\n-                // In general though we won't link right if these\n-                // symbols are stripped, and LTO currently strips them.\n-                match name {\n+                // We won't link right if these symbols are stripped during LTO.\n+                let used = match name {\n                     \"rust_eh_personality\"\n                     | \"rust_eh_register_frames\"\n-                    | \"rust_eh_unregister_frames\" =>\n-                        SymbolExportLevel::C,\n-                    _ => SymbolExportLevel::Rust,\n-                }\n+                    | \"rust_eh_unregister_frames\" => true,\n+                    _ => false,\n+                };\n+                (SymbolExportLevel::Rust, used)\n             } else {\n-                symbol_export_level(tcx, def_id.to_def_id())\n+                (symbol_export_level(tcx, def_id.to_def_id()), false)\n             };\n+            let codegen_attrs = tcx.codegen_fn_attrs(def_id.to_def_id());\n             debug!(\n                 \"EXPORTED SYMBOL (local): {} ({:?})\",\n                 tcx.symbol_name(Instance::mono(tcx, def_id.to_def_id())),\n                 export_level\n             );\n-            (def_id.to_def_id(), export_level)\n+            (def_id.to_def_id(), SymbolExportInfo {\n+                level: export_level,\n+                kind: if tcx.is_static(def_id.to_def_id()) {\n+                    if codegen_attrs.flags.contains(CodegenFnAttrFlags::THREAD_LOCAL) {\n+                        SymbolExportKind::Tls\n+                    } else {\n+                        SymbolExportKind::Data\n+                    }\n+                } else {\n+                    SymbolExportKind::Text\n+                },\n+                used: codegen_attrs.flags.contains(CodegenFnAttrFlags::USED)\n+                    || codegen_attrs.flags.contains(CodegenFnAttrFlags::USED_LINKER) || used,\n+            })\n         })\n         .collect();\n \n     if let Some(id) = tcx.proc_macro_decls_static(()) {\n-        reachable_non_generics.insert(id.to_def_id(), SymbolExportLevel::C);\n+        reachable_non_generics.insert(\n+            id.to_def_id(),\n+            SymbolExportInfo {\n+                level: SymbolExportLevel::C,\n+                kind: SymbolExportKind::Data,\n+                used: false,\n+            },\n+        );\n     }\n \n     reachable_non_generics\n@@ -141,8 +156,8 @@ fn reachable_non_generics_provider(tcx: TyCtxt<'_>, cnum: CrateNum) -> DefIdMap<\n fn is_reachable_non_generic_provider_local(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     let export_threshold = threshold(tcx);\n \n-    if let Some(&level) = tcx.reachable_non_generics(def_id.krate).get(&def_id) {\n-        level.is_below_threshold(export_threshold)\n+    if let Some(&info) = tcx.reachable_non_generics(def_id.krate).get(&def_id) {\n+        info.level.is_below_threshold(export_threshold)\n     } else {\n         false\n     }\n@@ -155,7 +170,7 @@ fn is_reachable_non_generic_provider_extern(tcx: TyCtxt<'_>, def_id: DefId) -> b\n fn exported_symbols_provider_local<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     cnum: CrateNum,\n-) -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportLevel)] {\n+) -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportInfo)] {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     if !tcx.sess.opts.output_types.should_codegen() {\n@@ -165,21 +180,35 @@ fn exported_symbols_provider_local<'tcx>(\n     let mut symbols: Vec<_> = tcx\n         .reachable_non_generics(LOCAL_CRATE)\n         .iter()\n-        .map(|(&def_id, &level)| (ExportedSymbol::NonGeneric(def_id), level))\n+        .map(|(&def_id, &info)| (ExportedSymbol::NonGeneric(def_id), info))\n         .collect();\n \n     if tcx.entry_fn(()).is_some() {\n         let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, \"main\"));\n \n-        symbols.push((exported_symbol, SymbolExportLevel::C));\n+        symbols.push((\n+            exported_symbol,\n+            SymbolExportInfo {\n+                level: SymbolExportLevel::C,\n+                kind: SymbolExportKind::Text,\n+                used: false,\n+            },\n+        ));\n     }\n \n     if tcx.allocator_kind(()).is_some() {\n         for method in ALLOCATOR_METHODS {\n             let symbol_name = format!(\"__rust_{}\", method.name);\n             let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, &symbol_name));\n \n-            symbols.push((exported_symbol, SymbolExportLevel::Rust));\n+            symbols.push((\n+                exported_symbol,\n+                SymbolExportInfo {\n+                    level: SymbolExportLevel::Rust,\n+                    kind: SymbolExportKind::Text,\n+                    used: false,\n+                },\n+            ));\n         }\n     }\n \n@@ -192,25 +221,54 @@ fn exported_symbols_provider_local<'tcx>(\n \n         symbols.extend(PROFILER_WEAK_SYMBOLS.iter().map(|sym| {\n             let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, sym));\n-            (exported_symbol, SymbolExportLevel::C)\n+            (\n+                exported_symbol,\n+                SymbolExportInfo {\n+                    level: SymbolExportLevel::C,\n+                    kind: SymbolExportKind::Data,\n+                    used: false,\n+                },\n+            )\n         }));\n     }\n \n     if tcx.sess.opts.debugging_opts.sanitizer.contains(SanitizerSet::MEMORY) {\n+        let mut msan_weak_symbols = Vec::new();\n+\n         // Similar to profiling, preserve weak msan symbol during LTO.\n-        const MSAN_WEAK_SYMBOLS: [&str; 2] = [\"__msan_track_origins\", \"__msan_keep_going\"];\n+        if tcx.sess.opts.debugging_opts.sanitizer_recover.contains(SanitizerSet::MEMORY) {\n+            msan_weak_symbols.push(\"__msan_keep_going\");\n+        }\n+\n+        if tcx.sess.opts.debugging_opts.sanitizer_memory_track_origins != 0 {\n+            msan_weak_symbols.push(\"__msan_track_origins\");\n+        }\n \n-        symbols.extend(MSAN_WEAK_SYMBOLS.iter().map(|sym| {\n+        symbols.extend(msan_weak_symbols.into_iter().map(|sym| {\n             let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, sym));\n-            (exported_symbol, SymbolExportLevel::C)\n+            (\n+                exported_symbol,\n+                SymbolExportInfo {\n+                    level: SymbolExportLevel::C,\n+                    kind: SymbolExportKind::Data,\n+                    used: false,\n+                },\n+            )\n         }));\n     }\n \n     if tcx.sess.crate_types().contains(&CrateType::Dylib) {\n         let symbol_name = metadata_symbol_name(tcx);\n         let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, &symbol_name));\n \n-        symbols.push((exported_symbol, SymbolExportLevel::Rust));\n+        symbols.push((\n+            exported_symbol,\n+            SymbolExportInfo {\n+                level: SymbolExportLevel::Rust,\n+                kind: SymbolExportKind::Data,\n+                used: false,\n+            },\n+        ));\n     }\n \n     if tcx.sess.opts.share_generics() && tcx.local_crate_exports_generics() {\n@@ -243,7 +301,14 @@ fn exported_symbols_provider_local<'tcx>(\n                 MonoItem::Fn(Instance { def: InstanceDef::Item(def), substs }) => {\n                     if substs.non_erasable_generics().next().is_some() {\n                         let symbol = ExportedSymbol::Generic(def.did, substs);\n-                        symbols.push((symbol, SymbolExportLevel::Rust));\n+                        symbols.push((\n+                            symbol,\n+                            SymbolExportInfo {\n+                                level: SymbolExportLevel::Rust,\n+                                kind: SymbolExportKind::Text,\n+                                used: false,\n+                            },\n+                        ));\n                     }\n                 }\n                 MonoItem::Fn(Instance { def: InstanceDef::DropGlue(_, Some(ty)), substs }) => {\n@@ -252,7 +317,14 @@ fn exported_symbols_provider_local<'tcx>(\n                         substs.non_erasable_generics().next(),\n                         Some(GenericArgKind::Type(ty))\n                     );\n-                    symbols.push((ExportedSymbol::DropGlue(ty), SymbolExportLevel::Rust));\n+                    symbols.push((\n+                        ExportedSymbol::DropGlue(ty),\n+                        SymbolExportInfo {\n+                            level: SymbolExportLevel::Rust,\n+                            kind: SymbolExportKind::Text,\n+                            used: false,\n+                        },\n+                    ));\n                 }\n                 _ => {\n                     // Any other symbols don't qualify for sharing"}, {"sha": "98dc5fe8d642436b74d797beb345f53c72bbcbdc", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=18b53cefdf7456bf68937b08e377b7e622a115c2", "patch": "@@ -23,7 +23,7 @@ use rustc_incremental::{\n };\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n-use rustc_middle::middle::exported_symbols::SymbolExportLevel;\n+use rustc_middle::middle::exported_symbols::SymbolExportInfo;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::cgu_reuse_tracker::CguReuseTracker;\n use rustc_session::config::{self, CrateType, Lto, OutputFilenames, OutputType};\n@@ -304,7 +304,7 @@ pub type TargetMachineFactoryFn<B> = Arc<\n         + Sync,\n >;\n \n-pub type ExportedSymbols = FxHashMap<CrateNum, Arc<Vec<(String, SymbolExportLevel)>>>;\n+pub type ExportedSymbols = FxHashMap<CrateNum, Arc<Vec<(String, SymbolExportInfo)>>>;\n \n /// Additional resources used by optimize_and_codegen (not module specific)\n #[derive(Clone)]"}, {"sha": "019c9c179d8e1b88d59a7d5ffa1117ee039e1127", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=18b53cefdf7456bf68937b08e377b7e622a115c2", "patch": "@@ -801,6 +801,12 @@ impl CrateInfo {\n             .iter()\n             .map(|&c| (c, crate::back::linker::exported_symbols(tcx, c)))\n             .collect();\n+        let linked_symbols = tcx\n+            .sess\n+            .crate_types()\n+            .iter()\n+            .map(|&c| (c, crate::back::linker::linked_symbols(tcx, c)))\n+            .collect();\n         let local_crate_name = tcx.crate_name(LOCAL_CRATE);\n         let crate_attrs = tcx.hir().attrs(rustc_hir::CRATE_HIR_ID);\n         let subsystem = tcx.sess.first_attr_value_str_by_name(crate_attrs, sym::windows_subsystem);\n@@ -834,6 +840,7 @@ impl CrateInfo {\n         let mut info = CrateInfo {\n             target_cpu,\n             exported_symbols,\n+            linked_symbols,\n             local_crate_name,\n             compiler_builtins: None,\n             profiler_runtime: None,"}, {"sha": "d4308002209309adee767c8bb1f369bfe44f89a0", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=18b53cefdf7456bf68937b08e377b7e622a115c2", "patch": "@@ -28,6 +28,7 @@ use rustc_hir::def_id::CrateNum;\n use rustc_hir::LangItem;\n use rustc_middle::dep_graph::WorkProduct;\n use rustc_middle::middle::dependency_format::Dependencies;\n+use rustc_middle::middle::exported_symbols::SymbolExportKind;\n use rustc_middle::ty::query::{ExternProviders, Providers};\n use rustc_serialize::{opaque, Decodable, Decoder, Encoder};\n use rustc_session::config::{CrateType, OutputFilenames, OutputType, RUST_CGU_EXT};\n@@ -141,6 +142,7 @@ impl From<&cstore::NativeLib> for NativeLib {\n pub struct CrateInfo {\n     pub target_cpu: String,\n     pub exported_symbols: FxHashMap<CrateType, Vec<String>>,\n+    pub linked_symbols: FxHashMap<CrateType, Vec<(String, SymbolExportKind)>>,\n     pub local_crate_name: Symbol,\n     pub compiler_builtins: Option<CrateNum>,\n     pub profiler_runtime: Option<CrateNum>,"}, {"sha": "1edb62e189f9768c3b8dbc16b8dfbee25621ccb4", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=18b53cefdf7456bf68937b08e377b7e622a115c2", "patch": "@@ -22,7 +22,7 @@ use rustc_hir::lang_items;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::arena::ArenaAllocatable;\n use rustc_middle::metadata::ModChild;\n-use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n+use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo};\n use rustc_middle::middle::stability::DeprecationEntry;\n use rustc_middle::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc_middle::thir;\n@@ -1429,7 +1429,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     fn exported_symbols(\n         self,\n         tcx: TyCtxt<'tcx>,\n-    ) -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportLevel)] {\n+    ) -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportInfo)] {\n         tcx.arena.alloc_from_iter(self.root.exported_symbols.decode((self, tcx)))\n     }\n "}, {"sha": "da1dd6af65a5dd72a27ec00a1d00a5324882119f", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=18b53cefdf7456bf68937b08e377b7e622a115c2", "patch": "@@ -190,9 +190,9 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         let reachable_non_generics = tcx\n             .exported_symbols(cdata.cnum)\n             .iter()\n-            .filter_map(|&(exported_symbol, export_level)| {\n+            .filter_map(|&(exported_symbol, export_info)| {\n                 if let ExportedSymbol::NonGeneric(def_id) = exported_symbol {\n-                    Some((def_id, export_level))\n+                    Some((def_id, export_info))\n                 } else {\n                     None\n                 }"}, {"sha": "ed49eebd16d9ce0898712198e652cfc1ed2c7510", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=18b53cefdf7456bf68937b08e377b7e622a115c2", "patch": "@@ -22,7 +22,7 @@ use rustc_index::vec::Idx;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_middle::middle::exported_symbols::{\n-    metadata_symbol_name, ExportedSymbol, SymbolExportLevel,\n+    metadata_symbol_name, ExportedSymbol, SymbolExportInfo,\n };\n use rustc_middle::mir::interpret;\n use rustc_middle::thir;\n@@ -1874,8 +1874,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     // definition (as that's not defined in this crate).\n     fn encode_exported_symbols(\n         &mut self,\n-        exported_symbols: &[(ExportedSymbol<'tcx>, SymbolExportLevel)],\n-    ) -> Lazy<[(ExportedSymbol<'tcx>, SymbolExportLevel)]> {\n+        exported_symbols: &[(ExportedSymbol<'tcx>, SymbolExportInfo)],\n+    ) -> Lazy<[(ExportedSymbol<'tcx>, SymbolExportInfo)]> {\n         empty_proc_macro!(self);\n         // The metadata symbol name is special. It should not show up in\n         // downstream crates."}, {"sha": "cdbed90e6b98e8623bf4a2a9e25f7998b64ea2a5", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=18b53cefdf7456bf68937b08e377b7e622a115c2", "patch": "@@ -14,7 +14,7 @@ use rustc_hir::definitions::DefKey;\n use rustc_hir::lang_items;\n use rustc_index::{bit_set::FiniteBitSet, vec::IndexVec};\n use rustc_middle::metadata::ModChild;\n-use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n+use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo};\n use rustc_middle::mir;\n use rustc_middle::thir;\n use rustc_middle::ty::fast_reject::SimplifiedType;\n@@ -220,7 +220,7 @@ crate struct CrateRoot<'tcx> {\n \n     tables: LazyTables<'tcx>,\n \n-    exported_symbols: Lazy!([(ExportedSymbol<'tcx>, SymbolExportLevel)]),\n+    exported_symbols: Lazy!([(ExportedSymbol<'tcx>, SymbolExportInfo)]),\n \n     syntax_contexts: SyntaxContextTable,\n     expn_data: ExpnDataTable,"}, {"sha": "631fd09ec4cf6e10916ec9a5a589bee48ebf046b", "filename": "compiler/rustc_middle/src/middle/exported_symbols.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs?ref=18b53cefdf7456bf68937b08e377b7e622a115c2", "patch": "@@ -21,6 +21,23 @@ impl SymbolExportLevel {\n     }\n }\n \n+/// Kind of exported symbols.\n+#[derive(Eq, PartialEq, Debug, Copy, Clone, Encodable, Decodable, HashStable)]\n+pub enum SymbolExportKind {\n+    Text,\n+    Data,\n+    Tls,\n+}\n+\n+/// The `SymbolExportInfo` of a symbols specifies symbol-related information\n+/// that is relevant to code generation and linking.\n+#[derive(Eq, PartialEq, Debug, Copy, Clone, TyEncodable, TyDecodable, HashStable)]\n+pub struct SymbolExportInfo {\n+    pub level: SymbolExportLevel,\n+    pub kind: SymbolExportKind,\n+    pub used: bool,\n+}\n+\n #[derive(Eq, PartialEq, Debug, Copy, Clone, TyEncodable, TyDecodable, HashStable)]\n pub enum ExportedSymbol<'tcx> {\n     NonGeneric(DefId),"}, {"sha": "d8586a8a77df62075ce2bc11a66afe43b6f1fdd6", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=18b53cefdf7456bf68937b08e377b7e622a115c2", "patch": "@@ -1359,7 +1359,7 @@ rustc_queries! {\n     // Does not include external symbols that don't have a corresponding DefId,\n     // like the compiler-generated `main` function and so on.\n     query reachable_non_generics(_: CrateNum)\n-        -> DefIdMap<SymbolExportLevel> {\n+        -> DefIdMap<SymbolExportInfo> {\n         storage(ArenaCacheSelector<'tcx>)\n         desc { \"looking up the exported symbols of a crate\" }\n         separate_provide_extern\n@@ -1675,7 +1675,7 @@ rustc_queries! {\n     ///   correspond to a publicly visible symbol in `cnum` machine code.\n     /// - The `exported_symbols` sets of different crates do not intersect.\n     query exported_symbols(_: CrateNum)\n-        -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportLevel)] {\n+        -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportInfo)] {\n         desc { \"exported_symbols\" }\n         separate_provide_extern\n     }"}, {"sha": "fb937ded65af12d43ae2d29813f139df4dad83a4", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=18b53cefdf7456bf68937b08e377b7e622a115c2", "patch": "@@ -3,7 +3,7 @@ use crate::infer::canonical::{self, Canonical};\n use crate::lint::LintLevelMap;\n use crate::metadata::ModChild;\n use crate::middle::codegen_fn_attrs::CodegenFnAttrs;\n-use crate::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n+use crate::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo};\n use crate::middle::lib_features::LibFeatures;\n use crate::middle::privacy::AccessLevels;\n use crate::middle::region;"}, {"sha": "bf99cd6e42426035d65d2cbc7a15529dc58b2e6b", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=18b53cefdf7456bf68937b08e377b7e622a115c2", "patch": "@@ -5,7 +5,7 @@ use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::definitions::DefPathDataName;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n-use rustc_middle::middle::exported_symbols::SymbolExportLevel;\n+use rustc_middle::middle::exported_symbols::{SymbolExportInfo, SymbolExportLevel};\n use rustc_middle::mir::mono::{CodegenUnit, CodegenUnitNameBuilder, Linkage, Visibility};\n use rustc_middle::mir::mono::{InstantiationMode, MonoItem};\n use rustc_middle::ty::print::characteristic_def_id_of_type;\n@@ -554,7 +554,7 @@ fn default_visibility(tcx: TyCtxt<'_>, id: DefId, is_generic: bool) -> Visibilit\n     // C-export level items remain at `Default`, all other internal\n     // items become `Hidden`.\n     match tcx.reachable_non_generics(id.krate).get(&id) {\n-        Some(SymbolExportLevel::C) => Visibility::Default,\n+        Some(SymbolExportInfo { level: SymbolExportLevel::C, .. }) => Visibility::Default,\n         _ => Visibility::Hidden,\n     }\n }"}, {"sha": "b65e334261325166abbe12c850b77872bc540356", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b53cefdf7456bf68937b08e377b7e622a115c2/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=18b53cefdf7456bf68937b08e377b7e622a115c2", "patch": "@@ -333,6 +333,11 @@ impl CollectPrivateImplItemsVisitor<'_, '_> {\n         let codegen_attrs = self.tcx.codegen_fn_attrs(def_id);\n         if codegen_attrs.contains_extern_indicator()\n             || codegen_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL)\n+            // FIXME(nbdd0121): `#[used]` are marked as reachable here so it's picked up by\n+            // `linked_symbols` in cg_ssa. They won't be exported in binary or cdylib due to their\n+            // `SymbolExportLevel::Rust` export level but may end up being exported in dylibs.\n+            || codegen_attrs.flags.contains(CodegenFnAttrFlags::USED)\n+            || codegen_attrs.flags.contains(CodegenFnAttrFlags::USED_LINKER)\n         {\n             self.worklist.push(def_id);\n         }"}, {"sha": "3dda6f190e448ae6c513d0f31e27e4e94a574673", "filename": "src/test/run-make-fulldeps/reproducible-build/linker.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18b53cefdf7456bf68937b08e377b7e622a115c2/src%2Ftest%2Frun-make-fulldeps%2Freproducible-build%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b53cefdf7456bf68937b08e377b7e622a115c2/src%2Ftest%2Frun-make-fulldeps%2Freproducible-build%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Freproducible-build%2Flinker.rs?ref=18b53cefdf7456bf68937b08e377b7e622a115c2", "patch": "@@ -25,6 +25,12 @@ fn main() {\n         let mut contents = Vec::new();\n         File::open(path).unwrap().read_to_end(&mut contents).unwrap();\n \n+        // This file is produced during linking in a temporary directory.\n+        let arg = if arg.ends_with(\"/symbols.o\") || arg.ends_with(\"\\\\symbols.o\") {\n+            \"symbols.o\"\n+        } else {\n+            &*arg\n+        };\n         out.push_str(&format!(\"{}: {}\\n\", arg, hash(&contents)));\n     }\n "}, {"sha": "4bb35f33ad3e92e82bb2530c284d24aed4325f0b", "filename": "src/test/run-make-fulldeps/symbol-visibility/Makefile", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/18b53cefdf7456bf68937b08e377b7e622a115c2/src%2Ftest%2Frun-make-fulldeps%2Fsymbol-visibility%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/18b53cefdf7456bf68937b08e377b7e622a115c2/src%2Ftest%2Frun-make-fulldeps%2Fsymbol-visibility%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsymbol-visibility%2FMakefile?ref=18b53cefdf7456bf68937b08e377b7e622a115c2", "patch": "@@ -54,9 +54,12 @@ all:\n \t# Check that a Rust dylib does not export generics if -Zshare-generics=no\n \t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -v __imp_ | grep -c public_generic_function_from_rlib)\" -eq \"0\" ]\n \n+# FIXME(nbdd0121): This is broken in MinGW, see https://github.com/rust-lang/rust/pull/95604#issuecomment-1101564032\n+ifndef IS_WINDOWS\n \t# Check that an executable does not export any dynamic symbols\n \t[ \"$$($(NM) $(TMPDIR)/$(EXE_NAME) | grep -v __imp_ | grep -c public_c_function_from_rlib)\" -eq \"0\" ]\n \t[ \"$$($(NM) $(TMPDIR)/$(EXE_NAME) | grep -v __imp_ | grep -c public_rust_function_from_exe)\" -eq \"0\" ]\n+endif\n \n \n \t# Check the combined case, where we generate a cdylib and an rlib in the same\n@@ -91,6 +94,8 @@ all:\n \t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -v __imp_ | grep -c public_rust_function_from_rlib)\" -eq \"1\" ]\n \t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -v __imp_ | grep -c public_generic_function_from_rlib)\" -eq \"1\" ]\n \n+ifndef IS_WINDOWS\n \t# Check that an executable does not export any dynamic symbols\n \t[ \"$$($(NM) $(TMPDIR)/$(EXE_NAME) | grep -v __imp_ | grep -c public_c_function_from_rlib)\" -eq \"0\" ]\n \t[ \"$$($(NM) $(TMPDIR)/$(EXE_NAME) | grep -v __imp_ | grep -c public_rust_function_from_exe)\" -eq \"0\" ]\n+endif"}, {"sha": "f10365f8c88118f571b3331f765b1172933ab8ad", "filename": "src/test/run-make/issue-47384/Makefile", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/18b53cefdf7456bf68937b08e377b7e622a115c2/src%2Ftest%2Frun-make%2Fissue-47384%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/18b53cefdf7456bf68937b08e377b7e622a115c2/src%2Ftest%2Frun-make%2Fissue-47384%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-47384%2FMakefile?ref=18b53cefdf7456bf68937b08e377b7e622a115c2", "patch": "@@ -0,0 +1,12 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+# only-linux\n+# ignore-cross-compile\n+\n+all: main.rs\n+\t$(RUSTC) --crate-type lib lib.rs\n+\t$(RUSTC) --crate-type cdylib -Clink-args=\"-Tlinker.ld\" main.rs\n+\t# Ensure `#[used]` and `KEEP`-ed section is there\n+\tobjdump -s -j\".static\" $(TMPDIR)/libmain.so\n+\t# Ensure `#[no_mangle]` symbol is there\n+\tnm $(TMPDIR)/libmain.so | $(CGREP) bar"}, {"sha": "99508bcdaf314b7a890c8ae94d07e590536039fd", "filename": "src/test/run-make/issue-47384/lib.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/18b53cefdf7456bf68937b08e377b7e622a115c2/src%2Ftest%2Frun-make%2Fissue-47384%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b53cefdf7456bf68937b08e377b7e622a115c2/src%2Ftest%2Frun-make%2Fissue-47384%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-47384%2Flib.rs?ref=18b53cefdf7456bf68937b08e377b7e622a115c2", "patch": "@@ -0,0 +1,12 @@\n+mod foo {\n+    #[link_section = \".rodata.STATIC\"]\n+    #[used]\n+    static STATIC: [u32; 10] = [1; 10];\n+}\n+\n+mod bar {\n+    #[no_mangle]\n+    extern \"C\" fn bar() -> i32 {\n+        0\n+    }\n+}"}, {"sha": "2e70acab3f4968d105ee0fdd45d3b341779172b4", "filename": "src/test/run-make/issue-47384/linker.ld", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/18b53cefdf7456bf68937b08e377b7e622a115c2/src%2Ftest%2Frun-make%2Fissue-47384%2Flinker.ld", "raw_url": "https://github.com/rust-lang/rust/raw/18b53cefdf7456bf68937b08e377b7e622a115c2/src%2Ftest%2Frun-make%2Fissue-47384%2Flinker.ld", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-47384%2Flinker.ld?ref=18b53cefdf7456bf68937b08e377b7e622a115c2", "patch": "@@ -0,0 +1,7 @@\n+SECTIONS\n+{\n+    .static : ALIGN(4)\n+    {\n+        KEEP(*(.rodata.STATIC));\n+    }\n+}"}, {"sha": "02572632517ec69512cf75ecabda974c1647a007", "filename": "src/test/run-make/issue-47384/main.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18b53cefdf7456bf68937b08e377b7e622a115c2/src%2Ftest%2Frun-make%2Fissue-47384%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b53cefdf7456bf68937b08e377b7e622a115c2/src%2Ftest%2Frun-make%2Fissue-47384%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-47384%2Fmain.rs?ref=18b53cefdf7456bf68937b08e377b7e622a115c2", "patch": "@@ -0,0 +1 @@\n+extern crate lib;"}]}