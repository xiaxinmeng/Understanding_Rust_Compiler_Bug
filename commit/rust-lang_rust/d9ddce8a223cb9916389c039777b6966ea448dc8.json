{"sha": "d9ddce8a223cb9916389c039777b6966ea448dc8", "node_id": "C_kwDOAAsO6NoAKGQ5ZGRjZThhMjIzY2I5OTE2Mzg5YzAzOTc3N2I2OTY2ZWE0NDhkYzg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-04T10:55:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-04T10:55:48Z"}, "message": "Auto merge of #8942 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "cc8d493e7c3ac8985b90b0d87dd0a431d90b4c1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc8d493e7c3ac8985b90b0d87dd0a431d90b4c1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9ddce8a223cb9916389c039777b6966ea448dc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9ddce8a223cb9916389c039777b6966ea448dc8", "html_url": "https://github.com/rust-lang/rust/commit/d9ddce8a223cb9916389c039777b6966ea448dc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9ddce8a223cb9916389c039777b6966ea448dc8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ef490871c0cc0a3aff00976c6f00c7eab6d90c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ef490871c0cc0a3aff00976c6f00c7eab6d90c7", "html_url": "https://github.com/rust-lang/rust/commit/8ef490871c0cc0a3aff00976c6f00c7eab6d90c7"}, {"sha": "36b18924a7aef4f901af177ef54971d610297bdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/36b18924a7aef4f901af177ef54971d610297bdd", "html_url": "https://github.com/rust-lang/rust/commit/36b18924a7aef4f901af177ef54971d610297bdd"}], "stats": {"total": 203, "additions": 123, "deletions": 80}, "files": [{"sha": "fff7da8e33f2fff24aca3a5760557b58f893ac4a", "filename": "clippy_lints/src/casts/unnecessary_cast.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs?ref=d9ddce8a223cb9916389c039777b6966ea448dc8", "patch": "@@ -12,12 +12,12 @@ use rustc_middle::ty::{self, FloatTy, InferTy, Ty};\n \n use super::UNNECESSARY_CAST;\n \n-pub(super) fn check(\n-    cx: &LateContext<'_>,\n-    expr: &Expr<'_>,\n-    cast_expr: &Expr<'_>,\n-    cast_from: Ty<'_>,\n-    cast_to: Ty<'_>,\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &Expr<'tcx>,\n+    cast_expr: &Expr<'tcx>,\n+    cast_from: Ty<'tcx>,\n+    cast_to: Ty<'tcx>,\n ) -> bool {\n     // skip non-primitive type cast\n     if_chain! {"}, {"sha": "9b8a481b6eab796157268e671ca3ebcfabbd0cd6", "filename": "clippy_lints/src/crate_in_macro_def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Fcrate_in_macro_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Fcrate_in_macro_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcrate_in_macro_def.rs?ref=d9ddce8a223cb9916389c039777b6966ea448dc8", "patch": "@@ -90,7 +90,7 @@ fn contains_unhygienic_crate_reference(tts: &TokenStream) -> Option<Span> {\n     while let Some(curr) = cursor.next() {\n         if_chain! {\n             if !prev_is_dollar;\n-            if let Some(span) = is_crate_keyword(&curr);\n+            if let Some(span) = is_crate_keyword(curr);\n             if let Some(next) = cursor.look_ahead(0);\n             if is_token(next, &TokenKind::ModSep);\n             then {\n@@ -103,7 +103,7 @@ fn contains_unhygienic_crate_reference(tts: &TokenStream) -> Option<Span> {\n                 return span;\n             }\n         }\n-        prev_is_dollar = is_token(&curr, &TokenKind::Dollar);\n+        prev_is_dollar = is_token(curr, &TokenKind::Dollar);\n     }\n     None\n }"}, {"sha": "8288f7a8b9b623732e98f401f0f1bf1c2e82886c", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=d9ddce8a223cb9916389c039777b6966ea448dc8", "patch": "@@ -446,7 +446,7 @@ fn try_parse_ref_op<'tcx>(\n \n // Checks whether the type for a deref call actually changed the type, not just the mutability of\n // the reference.\n-fn deref_method_same_type(result_ty: Ty<'_>, arg_ty: Ty<'_>) -> bool {\n+fn deref_method_same_type<'tcx>(result_ty: Ty<'tcx>, arg_ty: Ty<'tcx>) -> bool {\n     match (result_ty.kind(), arg_ty.kind()) {\n         (ty::Ref(_, result_ty, _), ty::Ref(_, arg_ty, _)) => result_ty == arg_ty,\n \n@@ -541,8 +541,8 @@ fn is_auto_borrow_position(parent: Option<Node<'_>>, child_id: HirId) -> bool {\n /// Adjustments are sometimes made in the parent block rather than the expression itself.\n fn find_adjustments<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    typeck: &'tcx TypeckResults<'_>,\n-    expr: &'tcx Expr<'_>,\n+    typeck: &'tcx TypeckResults<'tcx>,\n+    expr: &'tcx Expr<'tcx>,\n ) -> &'tcx [Adjustment<'tcx>] {\n     let map = tcx.hir();\n     let mut iter = map.parent_iter(expr.hir_id);\n@@ -581,7 +581,7 @@ fn find_adjustments<'tcx>(\n }\n \n #[expect(clippy::needless_pass_by_value)]\n-fn report(cx: &LateContext<'_>, expr: &Expr<'_>, state: State, data: StateData) {\n+fn report<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, state: State, data: StateData) {\n     match state {\n         State::DerefMethod {\n             ty_changed_count,\n@@ -656,7 +656,7 @@ fn report(cx: &LateContext<'_>, expr: &Expr<'_>, state: State, data: StateData)\n }\n \n impl Dereferencing {\n-    fn check_local_usage(&mut self, cx: &LateContext<'_>, e: &Expr<'_>, local: HirId) {\n+    fn check_local_usage<'tcx>(&mut self, cx: &LateContext<'tcx>, e: &Expr<'tcx>, local: HirId) {\n         if let Some(outer_pat) = self.ref_locals.get_mut(&local) {\n             if let Some(pat) = outer_pat {\n                 // Check for auto-deref"}, {"sha": "9d21dd71e0e8dd7c8edd8da762e8fd30df18baa6", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=d9ddce8a223cb9916389c039777b6966ea448dc8", "patch": "@@ -189,7 +189,7 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n         }\n     }\n \n-    fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _: HirId) {}\n+    fn fake_read(&mut self, _: &rustc_typeck::expr_use_visitor::PlaceWithHirId<'tcx>, _: FakeReadCause, _: HirId) {}\n }\n \n impl<'a, 'tcx> EscapeDelegate<'a, 'tcx> {"}, {"sha": "12d636cf41014853a919632681531c216423b327", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=d9ddce8a223cb9916389c039777b6966ea448dc8", "patch": "@@ -4,7 +4,8 @@ use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::{is_expn_of, match_function_call, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind};\n+use rustc_hir::def::Res;\n+use rustc_hir::{BindingAnnotation, Block, BlockCheckMode, Expr, ExprKind, Node, PatKind, QPath, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n@@ -47,7 +48,7 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitWrite {\n             if let ExprKind::MethodCall(unwrap_fun, [write_call], _) = expr.kind;\n             if unwrap_fun.ident.name == sym::unwrap;\n             // match call to write_fmt\n-            if let ExprKind::MethodCall(write_fun, [write_recv, write_arg], _) = write_call.kind;\n+            if let ExprKind::MethodCall(write_fun, [write_recv, write_arg], _) = look_in_block(cx, &write_call.kind);\n             if write_fun.ident.name == sym!(write_fmt);\n             // match calls to std::io::stdout() / std::io::stderr ()\n             if let Some(dest_name) = if match_function_call(cx, write_recv, &paths::STDOUT).is_some() {\n@@ -108,3 +109,34 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitWrite {\n         }\n     }\n }\n+\n+/// If `kind` is a block that looks like `{ let result = $expr; result }` then\n+/// returns $expr. Otherwise returns `kind`.\n+fn look_in_block<'tcx, 'hir>(cx: &LateContext<'tcx>, kind: &'tcx ExprKind<'hir>) -> &'tcx ExprKind<'hir> {\n+    if_chain! {\n+        if let ExprKind::Block(block, _label @ None) = kind;\n+        if let Block {\n+            stmts: [Stmt { kind: StmtKind::Local(local), .. }],\n+            expr: Some(expr_end_of_block),\n+            rules: BlockCheckMode::DefaultBlock,\n+            ..\n+        } = block;\n+\n+        // Find id of the local that expr_end_of_block resolves to\n+        if let ExprKind::Path(QPath::Resolved(None, expr_path)) = expr_end_of_block.kind;\n+        if let Res::Local(expr_res) = expr_path.res;\n+        if let Some(Node::Binding(res_pat)) = cx.tcx.hir().find(expr_res);\n+\n+        // Find id of the local we found in the block\n+        if let PatKind::Binding(BindingAnnotation::Unannotated, local_hir_id, _ident, None) = local.pat.kind;\n+\n+        // If those two are the same hir id\n+        if res_pat.hir_id == local_hir_id;\n+\n+        if let Some(init) = local.init;\n+        then {\n+            return &init.kind;\n+        }\n+    }\n+    kind\n+}"}, {"sha": "246f5aad8fbadec7deba6693828df65932744188", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=d9ddce8a223cb9916389c039777b6966ea448dc8", "patch": "@@ -259,8 +259,8 @@ fn parse_len_output<'tcx>(cx: &LateContext<'_>, sig: FnSig<'tcx>) -> Option<LenO\n     }\n }\n \n-impl LenOutput<'_> {\n-    fn matches_is_empty_output(self, ty: Ty<'_>) -> bool {\n+impl<'tcx> LenOutput<'tcx> {\n+    fn matches_is_empty_output(self, ty: Ty<'tcx>) -> bool {\n         match (self, ty.kind()) {\n             (_, &ty::Bool) => true,\n             (Self::Option(id), &ty::Adt(adt, subs)) if id == adt.did() => subs.type_at(0).is_bool(),\n@@ -292,7 +292,7 @@ impl LenOutput<'_> {\n }\n \n /// Checks if the given signature matches the expectations for `is_empty`\n-fn check_is_empty_sig(sig: FnSig<'_>, self_kind: ImplicitSelfKind, len_output: LenOutput<'_>) -> bool {\n+fn check_is_empty_sig<'tcx>(sig: FnSig<'tcx>, self_kind: ImplicitSelfKind, len_output: LenOutput<'tcx>) -> bool {\n     match &**sig.inputs_and_output {\n         [arg, res] if len_output.matches_is_empty_output(*res) => {\n             matches!(\n@@ -306,11 +306,11 @@ fn check_is_empty_sig(sig: FnSig<'_>, self_kind: ImplicitSelfKind, len_output: L\n }\n \n /// Checks if the given type has an `is_empty` method with the appropriate signature.\n-fn check_for_is_empty(\n-    cx: &LateContext<'_>,\n+fn check_for_is_empty<'tcx>(\n+    cx: &LateContext<'tcx>,\n     span: Span,\n     self_kind: ImplicitSelfKind,\n-    output: LenOutput<'_>,\n+    output: LenOutput<'tcx>,\n     impl_ty: DefId,\n     item_name: Symbol,\n     item_kind: &str,"}, {"sha": "070c7e591420d49128fea3160076391425d2c615", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=d9ddce8a223cb9916389c039777b6966ea448dc8", "patch": "@@ -371,7 +371,7 @@ impl<'a, 'tcx> RefVisitor<'a, 'tcx> {\n         if let Some(ref lt) = *lifetime {\n             if lt.name == LifetimeName::Static {\n                 self.lts.push(RefLt::Static);\n-            } else if let LifetimeName::Param(ParamName::Fresh(_)) = lt.name {\n+            } else if let LifetimeName::Param(_, ParamName::Fresh) = lt.name {\n                 // Fresh lifetimes generated should be ignored.\n             } else if lt.is_elided() {\n                 self.lts.push(RefLt::Unnamed);"}, {"sha": "d20df83045589e024e3e2905344fb287c2fb82d0", "filename": "clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=d9ddce8a223cb9916389c039777b6966ea448dc8", "patch": "@@ -114,7 +114,7 @@ impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n         }\n     }\n \n-    fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _: HirId) {}\n+    fn fake_read(&mut self, _: &rustc_typeck::expr_use_visitor::PlaceWithHirId<'tcx>, _: FakeReadCause, _: HirId) {}\n }\n \n impl MutatePairDelegate<'_, '_> {"}, {"sha": "a348bb465c8844f32a8164759f594ff16616051f", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=d9ddce8a223cb9916389c039777b6966ea448dc8", "patch": "@@ -117,7 +117,9 @@ pub(super) fn check<'tcx>(\n                                 let take_expr = sugg::Sugg::hir(cx, take_expr, \"<count>\");\n                                 format!(\".take({})\", take_expr + sugg::ONE)\n                             },\n-                            ast::RangeLimits::HalfOpen => format!(\".take({})\", snippet(cx, take_expr.span, \"..\")),\n+                            ast::RangeLimits::HalfOpen => {\n+                                format!(\".take({})\", snippet(cx, take_expr.span, \"..\"))\n+                            },\n                         }\n                     }\n                 } else {\n@@ -262,7 +264,11 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n                 match res {\n                     Res::Local(hir_id) => {\n                         let parent_def_id = self.cx.tcx.hir().get_parent_item(expr.hir_id);\n-                        let extent = self.cx.tcx.region_scope_tree(parent_def_id).var_scope(hir_id.local_id).unwrap();\n+                        let extent = self.cx\n+                            .tcx\n+                            .region_scope_tree(parent_def_id)\n+                            .var_scope(hir_id.local_id)\n+                            .unwrap();\n                         if index_used_directly {\n                             self.indexed_directly.insert(\n                                 seqvar.segments[0].ident.name,"}, {"sha": "14f5faafd7cb9da8198f020ecfbf212bacccef0c", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=d9ddce8a223cb9916389c039777b6966ea448dc8", "patch": "@@ -113,7 +113,7 @@ impl EarlyLintPass for ManualNonExhaustiveStruct {\n             let mut iter = fields.iter().filter_map(|f| match f.vis.kind {\n                 VisibilityKind::Public => None,\n                 VisibilityKind::Inherited => Some(Ok(f)),\n-                _ => Some(Err(())),\n+                VisibilityKind::Restricted { .. } => Some(Err(())),\n             });\n             if let Some(Ok(field)) = iter.next()\n                 && iter.next().is_none()"}, {"sha": "7308e74c323e3d542bcbe52fab2641695e230495", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=d9ddce8a223cb9916389c039777b6966ea448dc8", "patch": "@@ -2882,7 +2882,7 @@ enum SelfKind {\n \n impl SelfKind {\n     fn matches<'a>(self, cx: &LateContext<'a>, parent_ty: Ty<'a>, ty: Ty<'a>) -> bool {\n-        fn matches_value<'a>(cx: &LateContext<'a>, parent_ty: Ty<'_>, ty: Ty<'_>) -> bool {\n+        fn matches_value<'a>(cx: &LateContext<'a>, parent_ty: Ty<'a>, ty: Ty<'a>) -> bool {\n             if ty == parent_ty {\n                 true\n             } else if ty.is_box() {"}, {"sha": "f423be4b67a611ee38fd40065541005f3f98766e", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=d9ddce8a223cb9916389c039777b6966ea448dc8", "patch": "@@ -343,5 +343,5 @@ impl<'tcx> euv::Delegate<'tcx> for MovedVariablesCtxt {\n \n     fn mutate(&mut self, _: &euv::PlaceWithHirId<'tcx>, _: HirId) {}\n \n-    fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _: HirId) {}\n+    fn fake_read(&mut self, _: &rustc_typeck::expr_use_visitor::PlaceWithHirId<'tcx>, _: FakeReadCause, _: HirId) {}\n }"}, {"sha": "0b96f6ff6835800aec2f42ec9614c88319c8425a", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=d9ddce8a223cb9916389c039777b6966ea448dc8", "patch": "@@ -343,7 +343,7 @@ impl fmt::Display for RefPrefix {\n         use fmt::Write;\n         f.write_char('&')?;\n         match self.lt {\n-            LifetimeName::Param(ParamName::Plain(name)) => {\n+            LifetimeName::Param(_, ParamName::Plain(name)) => {\n                 name.fmt(f)?;\n                 f.write_char(' ')?;\n             },\n@@ -395,9 +395,9 @@ impl<'tcx> DerefTy<'tcx> {\n \n fn check_fn_args<'cx, 'tcx: 'cx>(\n     cx: &'cx LateContext<'tcx>,\n-    tys: &'tcx [Ty<'_>],\n-    hir_tys: &'tcx [hir::Ty<'_>],\n-    params: &'tcx [Param<'_>],\n+    tys: &'tcx [Ty<'tcx>],\n+    hir_tys: &'tcx [hir::Ty<'tcx>],\n+    params: &'tcx [Param<'tcx>],\n ) -> impl Iterator<Item = PtrArg<'tcx>> + 'cx {\n     tys.iter()\n         .zip(hir_tys.iter())"}, {"sha": "249f11f985082f7c55f7b6d3f37c28f15732661b", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=d9ddce8a223cb9916389c039777b6966ea448dc8", "patch": "@@ -292,7 +292,7 @@ fn is_call_with_ref_arg<'tcx>(\n         if let (inner_ty, 1) = walk_ptrs_ty_depth(args[0].ty(mir, cx.tcx));\n         if !is_copy(cx, inner_ty);\n         then {\n-            Some((def_id, *local, inner_ty, destination.as_ref().map(|(dest, _)| dest)?.as_local()?))\n+            Some((def_id, *local, inner_ty, destination.as_local()?))\n         } else {\n             None\n         }\n@@ -584,7 +584,7 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n     fn visit_terminator(&mut self, terminator: &mir::Terminator<'_>, _loc: mir::Location) {\n         if let mir::TerminatorKind::Call {\n             args,\n-            destination: Some((mir::Place { local: dest, .. }, _)),\n+            destination: mir::Place { local: dest, .. },\n             ..\n         } = &terminator.kind\n         {"}, {"sha": "20b348fc14f7b12f71823d410cd9f5ae2913c250", "filename": "clippy_lints/src/transmute/transmute_undefined_repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs?ref=d9ddce8a223cb9916389c039777b6966ea448dc8", "patch": "@@ -358,7 +358,7 @@ fn is_size_pair(ty: Ty<'_>) -> bool {\n     }\n }\n \n-fn same_except_params(subs1: SubstsRef<'_>, subs2: SubstsRef<'_>) -> bool {\n+fn same_except_params<'tcx>(subs1: SubstsRef<'tcx>, subs2: SubstsRef<'tcx>) -> bool {\n     // TODO: check const parameters as well. Currently this will consider `Array<5>` the same as\n     // `Array<6>`\n     for (ty1, ty2) in subs1.types().zip(subs2.types()).filter(|(ty1, ty2)| ty1 != ty2) {"}, {"sha": "025dd57e83aa59ccfe8e7da39f19ef6521597c4b", "filename": "clippy_lints/src/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs?ref=d9ddce8a223cb9916389c039777b6966ea448dc8", "patch": "@@ -187,11 +187,13 @@ fn item_has_safety_comment(cx: &LateContext<'_>, item: &hir::Item<'_>) -> bool {\n                 && Lrc::ptr_eq(&unsafe_line.sf, &comment_start_line.sf)\n                 && let Some(src) = unsafe_line.sf.src.as_deref()\n             {\n-                comment_start_line.line < unsafe_line.line && text_has_safety_comment(\n-                    src,\n-                    &unsafe_line.sf.lines[comment_start_line.line + 1..=unsafe_line.line],\n-                    unsafe_line.sf.start_pos.to_usize(),\n-                )\n+                unsafe_line.sf.lines(|lines| {\n+                    comment_start_line.line < unsafe_line.line && text_has_safety_comment(\n+                        src,\n+                        &lines[comment_start_line.line + 1..=unsafe_line.line],\n+                        unsafe_line.sf.start_pos.to_usize(),\n+                    )\n+                })\n             } else {\n                 // Problem getting source text. Pretend a comment was found.\n                 true\n@@ -249,11 +251,13 @@ fn span_from_macro_expansion_has_safety_comment(cx: &LateContext<'_>, span: Span\n             && Lrc::ptr_eq(&unsafe_line.sf, &macro_line.sf)\n             && let Some(src) = unsafe_line.sf.src.as_deref()\n         {\n-            macro_line.line < unsafe_line.line && text_has_safety_comment(\n-                src,\n-                &unsafe_line.sf.lines[macro_line.line + 1..=unsafe_line.line],\n-                unsafe_line.sf.start_pos.to_usize(),\n-            )\n+            unsafe_line.sf.lines(|lines| {\n+                macro_line.line < unsafe_line.line && text_has_safety_comment(\n+                    src,\n+                    &lines[macro_line.line + 1..=unsafe_line.line],\n+                    unsafe_line.sf.start_pos.to_usize(),\n+                )\n+            })\n         } else {\n             // Problem getting source text. Pretend a comment was found.\n             true\n@@ -276,11 +280,13 @@ fn span_in_body_has_safety_comment(cx: &LateContext<'_>, span: Span) -> bool {\n             // Get the text from the start of function body to the unsafe block.\n             //     fn foo() { some_stuff; unsafe { stuff }; other_stuff; }\n             //              ^-------------^\n-            body_line.line < unsafe_line.line && text_has_safety_comment(\n-                src,\n-                &unsafe_line.sf.lines[body_line.line + 1..=unsafe_line.line],\n-                unsafe_line.sf.start_pos.to_usize(),\n-            )\n+            unsafe_line.sf.lines(|lines| {\n+                body_line.line < unsafe_line.line && text_has_safety_comment(\n+                    src,\n+                    &lines[body_line.line + 1..=unsafe_line.line],\n+                    unsafe_line.sf.start_pos.to_usize(),\n+                )\n+            })\n         } else {\n             // Problem getting source text. Pretend a comment was found.\n             true"}, {"sha": "6487199172e0939faf520c2b473fb88e6309efdb", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=d9ddce8a223cb9916389c039777b6966ea448dc8", "patch": "@@ -545,7 +545,7 @@ pub fn eq_defaultness(l: Defaultness, r: Defaultness) -> bool {\n pub fn eq_vis(l: &Visibility, r: &Visibility) -> bool {\n     use VisibilityKind::*;\n     match (&l.kind, &r.kind) {\n-        (Public, Public) | (Inherited, Inherited) | (Crate(_), Crate(_)) => true,\n+        (Public, Public) | (Inherited, Inherited) => true,\n         (Restricted { path: l, .. }, Restricted { path: r, .. }) => eq_path(l, r),\n         _ => false,\n     }"}, {"sha": "0f8e9ab0cd96cfac4309014f4d326f1475d203b5", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=d9ddce8a223cb9916389c039777b6966ea448dc8", "patch": "@@ -274,8 +274,11 @@ pub fn span_lint_and_sugg_for_edges(\n             let sm = cx.sess().source_map();\n             if let (Ok(line_upper), Ok(line_bottom)) = (sm.lookup_line(sp.lo()), sm.lookup_line(sp.hi())) {\n                 let split_idx = MAX_SUGGESTION_HIGHLIGHT_LINES / 2;\n-                let span_upper = sm.span_until_char(sp.with_hi(line_upper.sf.lines[line_upper.line + split_idx]), '\\n');\n-                let span_bottom = sp.with_lo(line_bottom.sf.lines[line_bottom.line - split_idx]);\n+                let span_upper = sm.span_until_char(\n+                    sp.with_hi(line_upper.sf.lines(|lines| lines[line_upper.line + split_idx])),\n+                    '\\n',\n+                );\n+                let span_bottom = sp.with_lo(line_bottom.sf.lines(|lines| lines[line_bottom.line - split_idx]));\n \n                 let sugg_lines_vec = sugg.lines().collect::<Vec<&str>>();\n                 let sugg_upper = sugg_lines_vec[..split_idx].join(\"\\n\");"}, {"sha": "0603471c3431be2750b086d459c9b3a24dadce20", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=d9ddce8a223cb9916389c039777b6966ea448dc8", "patch": "@@ -902,16 +902,14 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n \n     pub fn hash_lifetime(&mut self, lifetime: Lifetime) {\n         std::mem::discriminant(&lifetime.name).hash(&mut self.s);\n-        if let LifetimeName::Param(ref name) = lifetime.name {\n+        if let LifetimeName::Param(param_id, ref name) = lifetime.name {\n             std::mem::discriminant(name).hash(&mut self.s);\n+            param_id.hash(&mut self.s);\n             match name {\n                 ParamName::Plain(ref ident) => {\n                     ident.name.hash(&mut self.s);\n                 },\n-                ParamName::Fresh(ref size) => {\n-                    size.hash(&mut self.s);\n-                },\n-                ParamName::Error => {},\n+                ParamName::Fresh | ParamName::Error => {},\n             }\n         }\n     }"}, {"sha": "5f051e3f444c0eac2906760ae8729241c6e47f94", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=d9ddce8a223cb9916389c039777b6966ea448dc8", "patch": "@@ -1149,7 +1149,7 @@ fn line_span<T: LintContext>(cx: &T, span: Span) -> Span {\n     let span = original_sp(span, DUMMY_SP);\n     let source_map_and_line = cx.sess().source_map().lookup_line(span.lo()).unwrap();\n     let line_no = source_map_and_line.line;\n-    let line_start = source_map_and_line.sf.lines[line_no];\n+    let line_start = source_map_and_line.sf.lines(|lines| lines[line_no]);\n     span.with_lo(line_start)\n }\n "}, {"sha": "498dcbb89006d3fae3a62607e30e80f95bfc00ce", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=d9ddce8a223cb9916389c039777b6966ea448dc8", "patch": "@@ -121,24 +121,18 @@ fn check_rvalue<'tcx>(\n ) -> McfResult {\n     match rvalue {\n         Rvalue::ThreadLocalRef(_) => Err((span, \"cannot access thread local storage in const fn\".into())),\n-        Rvalue::Repeat(operand, _) | Rvalue::Use(operand) => check_operand(tcx, operand, span, body),\n         Rvalue::Len(place) | Rvalue::Discriminant(place) | Rvalue::Ref(_, _, place) | Rvalue::AddressOf(_, place) => {\n             check_place(tcx, *place, span, body)\n         },\n-        Rvalue::Cast(CastKind::Misc, operand, cast_ty) => {\n-            use rustc_middle::ty::cast::CastTy;\n-            let cast_in = CastTy::from_ty(operand.ty(body, tcx)).expect(\"bad input type for cast\");\n-            let cast_out = CastTy::from_ty(*cast_ty).expect(\"bad output type for cast\");\n-            match (cast_in, cast_out) {\n-                (CastTy::Ptr(_) | CastTy::FnPtr, CastTy::Int(_)) => {\n-                    Err((span, \"casting pointers to ints is unstable in const fn\".into()))\n-                },\n-                _ => check_operand(tcx, operand, span, body),\n-            }\n-        },\n-        Rvalue::Cast(CastKind::Pointer(PointerCast::MutToConstPointer | PointerCast::ArrayToPointer), operand, _) => {\n-            check_operand(tcx, operand, span, body)\n-        },\n+        Rvalue::Repeat(operand, _)\n+        | Rvalue::Use(operand)\n+        | Rvalue::Cast(\n+            CastKind::PointerFromExposedAddress\n+            | CastKind::Misc\n+            | CastKind::Pointer(PointerCast::MutToConstPointer | PointerCast::ArrayToPointer),\n+            operand,\n+            _,\n+        ) => check_operand(tcx, operand, span, body),\n         Rvalue::Cast(\n             CastKind::Pointer(\n                 PointerCast::UnsafeFnPointer | PointerCast::ClosureFnPointer(_) | PointerCast::ReifyFnPointer,\n@@ -163,6 +157,9 @@ fn check_rvalue<'tcx>(\n                 Err((span, \"unsizing casts are not allowed in const fn\".into()))\n             }\n         },\n+        Rvalue::Cast(CastKind::PointerExposeAddress, _, _) => {\n+            Err((span, \"casting pointers to ints is unstable in const fn\".into()))\n+        },\n         // binops are fine on integers\n         Rvalue::BinaryOp(_, box (lhs, rhs)) | Rvalue::CheckedBinaryOp(_, box (lhs, rhs)) => {\n             check_operand(tcx, lhs, span, body)?;\n@@ -301,6 +298,7 @@ fn check_terminator<'a, 'tcx>(\n             args,\n             from_hir_call: _,\n             destination: _,\n+            target: _,\n             cleanup: _,\n             fn_span: _,\n         } => {"}, {"sha": "4f3757f1ec673ad1410614325cf6f1c0f262c0b3", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=d9ddce8a223cb9916389c039777b6966ea448dc8", "patch": "@@ -1030,7 +1030,7 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n \n     fn mutate(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId) {}\n \n-    fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _: HirId) {}\n+    fn fake_read(&mut self, _: &rustc_typeck::expr_use_visitor::PlaceWithHirId<'tcx>, _: FakeReadCause, _: HirId) {}\n }\n \n #[cfg(test)]"}, {"sha": "a10515d2fec635f70471ad01107081cb9eb43b22", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=d9ddce8a223cb9916389c039777b6966ea448dc8", "patch": "@@ -43,7 +43,7 @@ pub fn can_partially_move_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool\n }\n \n /// Walks into `ty` and returns `true` if any inner type is the same as `other_ty`\n-pub fn contains_ty(ty: Ty<'_>, other_ty: Ty<'_>) -> bool {\n+pub fn contains_ty<'tcx>(ty: Ty<'tcx>, other_ty: Ty<'tcx>) -> bool {\n     ty.walk().any(|inner| match inner.unpack() {\n         GenericArgKind::Type(inner_ty) => other_ty == inner_ty,\n         GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n@@ -52,7 +52,7 @@ pub fn contains_ty(ty: Ty<'_>, other_ty: Ty<'_>) -> bool {\n \n /// Walks into `ty` and returns `true` if any inner type is an instance of the given adt\n /// constructor.\n-pub fn contains_adt_constructor(ty: Ty<'_>, adt: AdtDef<'_>) -> bool {\n+pub fn contains_adt_constructor<'tcx>(ty: Ty<'tcx>, adt: AdtDef<'tcx>) -> bool {\n     ty.walk().any(|inner| match inner.unpack() {\n         GenericArgKind::Type(inner_ty) => inner_ty.ty_adt_def() == Some(adt),\n         GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,"}, {"sha": "9819778540cc942002c994c9b2e6a8dfa4c8fefb", "filename": "clippy_utils/src/usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddce8a223cb9916389c039777b6966ea448dc8/clippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fusage.rs?ref=d9ddce8a223cb9916389c039777b6966ea448dc8", "patch": "@@ -73,7 +73,7 @@ impl<'tcx> Delegate<'tcx> for MutVarsDelegate {\n         self.update(cmt);\n     }\n \n-    fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _: HirId) {}\n+    fn fake_read(&mut self, _: &rustc_typeck::expr_use_visitor::PlaceWithHirId<'tcx>, _: FakeReadCause, _: HirId) {}\n }\n \n pub struct ParamBindingIdCollector {"}, {"sha": "2386a751f04f6cefdf3aaa055d4d857093fbba09", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9ddce8a223cb9916389c039777b6966ea448dc8/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/d9ddce8a223cb9916389c039777b6966ea448dc8/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=d9ddce8a223cb9916389c039777b6966ea448dc8", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-05-19\"\n+channel = \"nightly-2022-06-04\"\n components = [\"cargo\", \"llvm-tools-preview\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}]}