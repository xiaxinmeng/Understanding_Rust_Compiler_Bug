{"sha": "14b217c43e5ad90d881af2957be4fcb0049902a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0YjIxN2M0M2U1YWQ5MGQ4ODFhZjI5NTdiZTRmY2IwMDQ5OTAyYTA=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-02-13T07:36:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-13T07:36:46Z"}, "message": "Rollup merge of #81995 - 0yoyoyo:fix-issue-81650-explicit-lifetime-error, r=estebank\n\nFix suggestion to introduce explicit lifetime\n\nAddresses #81650\n\nError message after fix:\n\n```\nerror[E0311]: the parameter type `T` may not live long enough\n  --> src/main.rs:25:11\n   |\n24 | fn play_with<T: Animal + Send>(scope: &Scope, animal: T) {\n   |              -- help: consider adding an explicit lifetime bound...: `T: 'a +`\n25 |     scope.spawn(move |_| {\n   |           ^^^^^\n   |\nnote: the parameter type `T` must be valid for the anonymous lifetime #2 defined on the function body at 24:1...\n  --> src/main.rs:24:1\n   |\n24 | fn play_with<T: Animal + Send>(scope: &Scope, animal: T) {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: ...so that the type `[closure@src/main.rs:25:17: 27:6]` will meet its required lifetime bounds\n  --> src/main.rs:25:11\n   |\n25 |     scope.spawn(move |_| {\n   |           ^^^^^\n```", "tree": {"sha": "0fb073e928fefd8c9798c038fa35badfb3ae1b59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fb073e928fefd8c9798c038fa35badfb3ae1b59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14b217c43e5ad90d881af2957be4fcb0049902a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgJ4GPCRBK7hj4Ov3rIwAAdHIIAB3n2mA9MarWUFg3KQ83Wmpv\nuleCnjShjWCvAoNDcDhc7RhYjG2OQ7k+LWvhMAYLWNkU+HZ8ogmmSyt9I3EKSE+U\nqItuVZ5WrqPqC21lk1jnQq4Pm4snCKFSB4FvqNJ6rF3ZPN7+NGszVjTSwSd/39hR\njS938aJBA+AOcgcG7L0IBhblOfnm94ugHUDRamjGZ2JKbjas75LStZr6Ffryxrf7\nZU34YPatIginCCilAuwknocxOQP1N54OPOJ9BPeNS56QOEZc9y4/3pPmkZ+5eBBs\nCRlFASWBmz94yu4eCbiKFt7epfZyO+E4sXjdKLozU8Y9DKSqb1mcvuzBdXWaZUI=\n=HvLl\n-----END PGP SIGNATURE-----\n", "payload": "tree 0fb073e928fefd8c9798c038fa35badfb3ae1b59\nparent a3902069ba3977174c538f4274531d3ac25eb377\nparent fcce998d564678d7736f8382861f0fbb5e549dd2\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1613201806 +0900\ncommitter GitHub <noreply@github.com> 1613201806 +0900\n\nRollup merge of #81995 - 0yoyoyo:fix-issue-81650-explicit-lifetime-error, r=estebank\n\nFix suggestion to introduce explicit lifetime\n\nAddresses #81650\n\nError message after fix:\n\n```\nerror[E0311]: the parameter type `T` may not live long enough\n  --> src/main.rs:25:11\n   |\n24 | fn play_with<T: Animal + Send>(scope: &Scope, animal: T) {\n   |              -- help: consider adding an explicit lifetime bound...: `T: 'a +`\n25 |     scope.spawn(move |_| {\n   |           ^^^^^\n   |\nnote: the parameter type `T` must be valid for the anonymous lifetime #2 defined on the function body at 24:1...\n  --> src/main.rs:24:1\n   |\n24 | fn play_with<T: Animal + Send>(scope: &Scope, animal: T) {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: ...so that the type `[closure@src/main.rs:25:17: 27:6]` will meet its required lifetime bounds\n  --> src/main.rs:25:11\n   |\n25 |     scope.spawn(move |_| {\n   |           ^^^^^\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14b217c43e5ad90d881af2957be4fcb0049902a0", "html_url": "https://github.com/rust-lang/rust/commit/14b217c43e5ad90d881af2957be4fcb0049902a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14b217c43e5ad90d881af2957be4fcb0049902a0/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3902069ba3977174c538f4274531d3ac25eb377", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3902069ba3977174c538f4274531d3ac25eb377", "html_url": "https://github.com/rust-lang/rust/commit/a3902069ba3977174c538f4274531d3ac25eb377"}, {"sha": "fcce998d564678d7736f8382861f0fbb5e549dd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcce998d564678d7736f8382861f0fbb5e549dd2", "html_url": "https://github.com/rust-lang/rust/commit/fcce998d564678d7736f8382861f0fbb5e549dd2"}], "stats": {"total": 71, "additions": 70, "deletions": 1}, "files": [{"sha": "63f8a7293d899d020687dc5ee69ae00af930f4d1", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14b217c43e5ad90d881af2957be4fcb0049902a0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b217c43e5ad90d881af2957be4fcb0049902a0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=14b217c43e5ad90d881af2957be4fcb0049902a0", "patch": "@@ -2248,13 +2248,18 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     \"...\",\n                 );\n                 if let Some(infer::RelateParamBound(_, t)) = origin {\n+                    let return_impl_trait = self\n+                        .in_progress_typeck_results\n+                        .map(|typeck_results| typeck_results.borrow().hir_owner)\n+                        .and_then(|owner| self.tcx.return_type_impl_trait(owner))\n+                        .is_some();\n                     let t = self.resolve_vars_if_possible(t);\n                     match t.kind() {\n                         // We've got:\n                         // fn get_later<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n                         // suggest:\n                         // fn get_later<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n-                        ty::Closure(_, _substs) | ty::Opaque(_, _substs) => {\n+                        ty::Closure(_, _substs) | ty::Opaque(_, _substs) if return_impl_trait => {\n                             new_binding_suggestion(&mut err, type_param_span, bound_kind);\n                         }\n                         _ => {"}, {"sha": "b359826cb4ae460cb5e0824f1b198b3e2cf690a8", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/14b217c43e5ad90d881af2957be4fcb0049902a0/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b217c43e5ad90d881af2957be4fcb0049902a0/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr?ref=14b217c43e5ad90d881af2957be4fcb0049902a0", "patch": "@@ -0,0 +1,17 @@\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:20:5\n+   |\n+LL | /     foo.bar(move |_| {\n+LL | |\n+LL | |         t.test();\n+LL | |     });\n+   | |______^\n+   |\n+note: the parameter type `T` must be valid for the anonymous lifetime #2 defined on the function body at 19:1...\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:19:1\n+   |\n+LL | fn func<T: Test>(foo: &Foo, t: T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "c6802ac6cc704e0a2839947f628d97e7d0c20dfa", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/14b217c43e5ad90d881af2957be4fcb0049902a0/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b217c43e5ad90d881af2957be4fcb0049902a0/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.rs?ref=14b217c43e5ad90d881af2957be4fcb0049902a0", "patch": "@@ -0,0 +1,26 @@\n+// Regression test for #81650\n+\n+struct Foo<'a> {\n+    x: &'a mut &'a i32,\n+}\n+\n+impl<'a> Foo<'a> {\n+    fn bar<F, T>(&self, f: F)\n+    where\n+        F: FnOnce(&Foo<'a>) -> T,\n+        F: 'a,\n+    {}\n+}\n+\n+trait Test {\n+    fn test(&self);\n+}\n+\n+fn func<T: Test>(foo: &Foo, t: T) {\n+    foo.bar(move |_| {\n+    //~^ ERROR the parameter type `T` may not live long enough\n+        t.test();\n+    });\n+}\n+\n+fn main() {}"}, {"sha": "c7def9b668d9c4ae5a471ed96da243714a2608f5", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/14b217c43e5ad90d881af2957be4fcb0049902a0/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14b217c43e5ad90d881af2957be4fcb0049902a0/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr?ref=14b217c43e5ad90d881af2957be4fcb0049902a0", "patch": "@@ -0,0 +1,21 @@\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:20:9\n+   |\n+LL | fn func<T: Test>(foo: &Foo, t: T) {\n+   |         -- help: consider adding an explicit lifetime bound...: `T: 'a +`\n+LL |     foo.bar(move |_| {\n+   |         ^^^\n+   |\n+note: the parameter type `T` must be valid for the anonymous lifetime #2 defined on the function body at 19:1...\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:19:1\n+   |\n+LL | fn func<T: Test>(foo: &Foo, t: T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature-2.rs:20:13: 23:6]` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:20:9\n+   |\n+LL |     foo.bar(move |_| {\n+   |         ^^^\n+\n+error: aborting due to previous error\n+"}]}