{"sha": "0cf2d00f0e034c8844bc9899b7e1df8c5eced60e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZjJkMDBmMGUwMzRjODg0NGJjOTg5OWI3ZTFkZjhjNWVjZWQ2MGU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-17T21:56:06Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-17T21:56:06Z"}, "message": "rustc: Track stability of trait implementations\n\nPreviously an implementation of a stable trait allows implementations of\nunstable methods. This updates the stability pass to ensure that all items of an\nimpl block of a trait are indeed stable on the trait itself.", "tree": {"sha": "504481ac7224bf0cc7fdccd2c2d154f3ddd5c5d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/504481ac7224bf0cc7fdccd2c2d154f3ddd5c5d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cf2d00f0e034c8844bc9899b7e1df8c5eced60e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cf2d00f0e034c8844bc9899b7e1df8c5eced60e", "html_url": "https://github.com/rust-lang/rust/commit/0cf2d00f0e034c8844bc9899b7e1df8c5eced60e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cf2d00f0e034c8844bc9899b7e1df8c5eced60e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1bb6c2f46f08c1d7b6d695f5b3cf93142cb8860", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1bb6c2f46f08c1d7b6d695f5b3cf93142cb8860", "html_url": "https://github.com/rust-lang/rust/commit/f1bb6c2f46f08c1d7b6d695f5b3cf93142cb8860"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "9d28ee7b6c63d60af6a12d1b45daffb6950101d1", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf2d00f0e034c8844bc9899b7e1df8c5eced60e/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf2d00f0e034c8844bc9899b7e1df8c5eced60e/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=0cf2d00f0e034c8844bc9899b7e1df8c5eced60e", "patch": "@@ -1761,7 +1761,7 @@ impl LintPass for Stability {\n     }\n \n     fn check_item(&mut self, cx: &Context, item: &ast::Item) {\n-        stability::check_item(cx.tcx, item,\n+        stability::check_item(cx.tcx, item, false,\n                               &mut |id, sp, stab| self.lint(cx, id, sp, stab));\n     }\n "}, {"sha": "36bdca8c8e9aa56c84ec740d2df3612f5c28528d", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0cf2d00f0e034c8844bc9899b7e1df8c5eced60e/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf2d00f0e034c8844bc9899b7e1df8c5eced60e/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=0cf2d00f0e034c8844bc9899b7e1df8c5eced60e", "patch": "@@ -283,7 +283,7 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Checker<'a, 'tcx> {\n         // name `__test`\n         if item.span == DUMMY_SP && item.ident.as_str() == \"__test\" { return }\n \n-        check_item(self.tcx, item,\n+        check_item(self.tcx, item, true,\n                    &mut |id, sp, stab| self.check(id, sp, stab));\n         visit::walk_item(self, item);\n     }\n@@ -302,7 +302,7 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Checker<'a, 'tcx> {\n }\n \n /// Helper for discovering nodes to check for stability\n-pub fn check_item(tcx: &ty::ctxt, item: &ast::Item,\n+pub fn check_item(tcx: &ty::ctxt, item: &ast::Item, warn_about_defns: bool,\n                   cb: &mut FnMut(ast::DefId, Span, &Option<Stability>)) {\n     match item.node {\n         ast::ItemExternCrate(_) => {\n@@ -316,6 +316,35 @@ pub fn check_item(tcx: &ty::ctxt, item: &ast::Item,\n             let id = ast::DefId { krate: cnum, node: ast::CRATE_NODE_ID };\n             maybe_do_stability_check(tcx, id, item.span, cb);\n         }\n+\n+        // For implementations of traits, check the stability of each item\n+        // individually as it's possible to have a stable trait with unstable\n+        // items.\n+        ast::ItemImpl(_, _, _, Some(ref t), _, ref impl_items) => {\n+            let trait_did = tcx.def_map.borrow()[t.ref_id].def_id();\n+            let trait_items = ty::trait_items(tcx, trait_did);\n+\n+            for impl_item in impl_items {\n+                let (ident, span) = match *impl_item {\n+                    ast::MethodImplItem(ref method) => {\n+                        (match method.node {\n+                            ast::MethDecl(ident, _, _, _, _, _, _, _) => ident,\n+                            ast::MethMac(..) => unreachable!(),\n+                        }, method.span)\n+                    }\n+                    ast::TypeImplItem(ref typedef) => {\n+                        (typedef.ident, typedef.span)\n+                    }\n+                };\n+                let item = trait_items.iter().find(|item| {\n+                    item.name() == ident.name\n+                }).unwrap();\n+                if warn_about_defns {\n+                    maybe_do_stability_check(tcx, item.def_id(), span, cb);\n+                }\n+            }\n+        }\n+\n         _ => (/* pass */)\n     }\n }"}, {"sha": "f9cdfa4f7d685356f7b7d14f17494f796c7ca26b", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0cf2d00f0e034c8844bc9899b7e1df8c5eced60e/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf2d00f0e034c8844bc9899b7e1df8c5eced60e/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=0cf2d00f0e034c8844bc9899b7e1df8c5eced60e", "patch": "@@ -133,6 +133,11 @@ mod cross_crate {\n     impl UnstableTrait for S { } //~ WARNING use of unstable library feature\n \n     trait LocalTrait : UnstableTrait { } //~ WARNING use of unstable library feature\n+\n+    impl Trait for S {\n+        fn trait_stable(&self) {}\n+        fn trait_unstable(&self) {} //~ WARNING use of unstable library feature\n+    }\n }\n \n mod inheritance {"}]}