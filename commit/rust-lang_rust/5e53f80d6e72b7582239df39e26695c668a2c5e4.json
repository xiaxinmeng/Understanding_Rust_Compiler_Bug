{"sha": "5e53f80d6e72b7582239df39e26695c668a2c5e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNTNmODBkNmU3MmI3NTgyMjM5ZGYzOWUyNjY5NWM2NjhhMmM1ZTQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-30T18:15:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-30T18:15:24Z"}, "message": "Rollup merge of #71449 - ecstatic-morse:free-region-cleanup, r=Mark-Simulacrum\n\nMove `{Free,}RegionRelations` and `FreeRegionMap` to `rustc_infer`\n\n...and out of `rustc_middle`. This is to further #65031, albeit in a very minor way\n\nr? @Mark-Simulacrum", "tree": {"sha": "f64b006e16401293daa89f8e09fc9de6aaf2f3f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f64b006e16401293daa89f8e09fc9de6aaf2f3f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e53f80d6e72b7582239df39e26695c668a2c5e4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeqxW8CRBK7hj4Ov3rIwAAdHIIALGj3BGCDIuQQt3KgL6uO4ts\n4L/Bk7x1IngE4K8g6c0LVNt1yL/0gHUUM6GwBhyxwnrXHEkPU2u0YbknfMKQQLyL\nPCo60ka8gj+YrUkyfWeVkPBG1XurFvJYMoFTIbSOUmhFq7JFsmhHxkXJiu0apK8O\nNQbxUdnniBQNThh/Xg57PmUb8Pt4T/cx2Zn2mpy0VdGiRVEbKB3eOHBQCxB1xDIe\nQbQZukEG8UWd6ENUGR17HlqDrMLMuqwupO/FfDzgfEpbP2phWa0MOowjGEHo3DBA\n6q2gr67pmQbewP3OP5fwqd2AMy/A6XlsD/c1Hcf5mpwlQ7e/qeHMVU072d1BiUY=\n=yQo3\n-----END PGP SIGNATURE-----\n", "payload": "tree f64b006e16401293daa89f8e09fc9de6aaf2f3f7\nparent be3faf3f3012f952460240c6b322ab82f244896c\nparent 46154f28bd69b92e74199f476590e70336329bda\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588270524 +0200\ncommitter GitHub <noreply@github.com> 1588270524 +0200\n\nRollup merge of #71449 - ecstatic-morse:free-region-cleanup, r=Mark-Simulacrum\n\nMove `{Free,}RegionRelations` and `FreeRegionMap` to `rustc_infer`\n\n...and out of `rustc_middle`. This is to further #65031, albeit in a very minor way\n\nr? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e53f80d6e72b7582239df39e26695c668a2c5e4", "html_url": "https://github.com/rust-lang/rust/commit/5e53f80d6e72b7582239df39e26695c668a2c5e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e53f80d6e72b7582239df39e26695c668a2c5e4/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be3faf3f3012f952460240c6b322ab82f244896c", "url": "https://api.github.com/repos/rust-lang/rust/commits/be3faf3f3012f952460240c6b322ab82f244896c", "html_url": "https://github.com/rust-lang/rust/commit/be3faf3f3012f952460240c6b322ab82f244896c"}, {"sha": "46154f28bd69b92e74199f476590e70336329bda", "url": "https://api.github.com/repos/rust-lang/rust/commits/46154f28bd69b92e74199f476590e70336329bda", "html_url": "https://github.com/rust-lang/rust/commit/46154f28bd69b92e74199f476590e70336329bda"}], "stats": {"total": 105, "additions": 52, "deletions": 53}, "files": [{"sha": "3decf5846879bb6a67d5cde4d0e20e7a18087f3f", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e53f80d6e72b7582239df39e26695c668a2c5e4/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5e53f80d6e72b7582239df39e26695c668a2c5e4/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5e53f80d6e72b7582239df39e26695c668a2c5e4", "patch": "@@ -3852,6 +3852,7 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n+ \"serialize\",\n  \"smallvec 1.0.0\",\n ]\n "}, {"sha": "fa8e5a2ab78b47a439e04b346284c9f535dcaeba", "filename": "src/librustc_infer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e53f80d6e72b7582239df39e26695c668a2c5e4/src%2Flibrustc_infer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5e53f80d6e72b7582239df39e26695c668a2c5e4/src%2Flibrustc_infer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2FCargo.toml?ref=5e53f80d6e72b7582239df39e26695c668a2c5e4", "patch": "@@ -19,6 +19,7 @@ rustc_hir = { path = \"../librustc_hir\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_session = { path = \"../librustc_session\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "e31c524c19710886a5925441713e928cffb60b46", "filename": "src/librustc_infer/infer/free_regions.rs", "status": "renamed", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5e53f80d6e72b7582239df39e26695c668a2c5e4/src%2Flibrustc_infer%2Finfer%2Ffree_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e53f80d6e72b7582239df39e26695c668a2c5e4/src%2Flibrustc_infer%2Finfer%2Ffree_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ffree_regions.rs?ref=5e53f80d6e72b7582239df39e26695c668a2c5e4", "patch": "@@ -1,5 +1,47 @@\n-use crate::ty::{self, Lift, Region, TyCtxt};\n+//! This module handles the relationships between \"free regions\", i.e., lifetime parameters.\n+//! Ordinarily, free regions are unrelated to one another, but they can be related via implied\n+//! or explicit bounds. In that case, we track the bounds using the `TransitiveRelation` type,\n+//! and use that to decide when one free region outlives another, and so forth.\n+\n use rustc_data_structures::transitive_relation::TransitiveRelation;\n+use rustc_hir::def_id::DefId;\n+use rustc_middle::middle::region;\n+use rustc_middle::ty::{self, Lift, Region, TyCtxt};\n+\n+/// Combines a `region::ScopeTree` (which governs relationships between\n+/// scopes) and a `FreeRegionMap` (which governs relationships between\n+/// free regions) to yield a complete relation between concrete\n+/// regions.\n+///\n+/// This stuff is a bit convoluted and should be refactored, but as we\n+/// transition to NLL, it'll all go away anyhow.\n+pub struct RegionRelations<'a, 'tcx> {\n+    pub tcx: TyCtxt<'tcx>,\n+\n+    /// The context used to fetch the region maps.\n+    pub context: DefId,\n+\n+    /// The region maps for the given context.\n+    pub region_scope_tree: &'a region::ScopeTree,\n+\n+    /// Free-region relationships.\n+    pub free_regions: &'a FreeRegionMap<'tcx>,\n+}\n+\n+impl<'a, 'tcx> RegionRelations<'a, 'tcx> {\n+    pub fn new(\n+        tcx: TyCtxt<'tcx>,\n+        context: DefId,\n+        region_scope_tree: &'a region::ScopeTree,\n+        free_regions: &'a FreeRegionMap<'tcx>,\n+    ) -> Self {\n+        Self { tcx, context, region_scope_tree, free_regions }\n+    }\n+\n+    pub fn lub_free_regions(&self, r_a: Region<'tcx>, r_b: Region<'tcx>) -> Region<'tcx> {\n+        self.free_regions.lub_free_regions(self.tcx, r_a, r_b)\n+    }\n+}\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, Default, HashStable)]\n pub struct FreeRegionMap<'tcx> {", "previous_filename": "src/librustc_middle/ty/free_region_map.rs"}, {"sha": "5d3e8f440d6fd6fd44785b99c6907f6a20f45fd4", "filename": "src/librustc_infer/infer/lexical_region_resolve/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e53f80d6e72b7582239df39e26695c668a2c5e4/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e53f80d6e72b7582239df39e26695c668a2c5e4/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs?ref=5e53f80d6e72b7582239df39e26695c668a2c5e4", "patch": "@@ -10,10 +10,10 @@ use graphviz as dot;\n \n use super::Constraint;\n use crate::infer::region_constraints::RegionConstraintData;\n+use crate::infer::RegionRelations;\n use crate::infer::SubregionOrigin;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def_id::DefIndex;\n-use rustc_middle::middle::free_region::RegionRelations;\n use rustc_middle::middle::region;\n use rustc_middle::ty;\n "}, {"sha": "3ff0e26a4dc38bc31335824a3ebe511445bec926", "filename": "src/librustc_infer/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e53f80d6e72b7582239df39e26695c668a2c5e4/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e53f80d6e72b7582239df39e26695c668a2c5e4/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=5e53f80d6e72b7582239df39e26695c668a2c5e4", "patch": "@@ -6,6 +6,7 @@ use crate::infer::region_constraints::MemberConstraint;\n use crate::infer::region_constraints::RegionConstraintData;\n use crate::infer::region_constraints::VarInfos;\n use crate::infer::region_constraints::VerifyBound;\n+use crate::infer::RegionRelations;\n use crate::infer::RegionVariableOrigin;\n use crate::infer::RegionckMode;\n use crate::infer::SubregionOrigin;\n@@ -14,7 +15,6 @@ use rustc_data_structures::graph::implementation::{\n     Direction, Graph, NodeIndex, INCOMING, OUTGOING,\n };\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_middle::middle::free_region::RegionRelations;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::ty::{ReEarlyBound, ReEmpty, ReErased, ReFree, ReStatic};"}, {"sha": "267f1e7e2dc892406049804c7afa95aeee736802", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e53f80d6e72b7582239df39e26695c668a2c5e4/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e53f80d6e72b7582239df39e26695c668a2c5e4/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=5e53f80d6e72b7582239df39e26695c668a2c5e4", "patch": "@@ -18,7 +18,6 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::infer::canonical::{Canonical, CanonicalVarValues};\n use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind, ToType};\n-use rustc_middle::middle::free_region::RegionRelations;\n use rustc_middle::middle::region;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::ConstEvalResult;\n@@ -39,6 +38,7 @@ use std::collections::BTreeMap;\n use std::fmt;\n \n use self::combine::CombineFields;\n+use self::free_regions::RegionRelations;\n use self::lexical_region_resolve::LexicalRegionResolutions;\n use self::outlives::env::OutlivesEnvironment;\n use self::region_constraints::{GenericKind, RegionConstraintData, VarInfos, VerifyBound};\n@@ -50,6 +50,7 @@ pub mod canonical;\n mod combine;\n mod equate;\n pub mod error_reporting;\n+pub mod free_regions;\n mod freshen;\n mod fudge;\n mod glb;"}, {"sha": "1a9e20e79fe1ed0ed9a455138d7d77a145c257c9", "filename": "src/librustc_infer/infer/outlives/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e53f80d6e72b7582239df39e26695c668a2c5e4/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e53f80d6e72b7582239df39e26695c668a2c5e4/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fenv.rs?ref=5e53f80d6e72b7582239df39e26695c668a2c5e4", "patch": "@@ -1,9 +1,9 @@\n+use crate::infer::free_regions::FreeRegionMap;\n use crate::infer::{GenericKind, InferCtxt};\n use crate::traits::query::OutlivesBound;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_middle::ty;\n-use rustc_middle::ty::free_region_map::FreeRegionMap;\n \n use super::explicit_outlives_bounds;\n "}, {"sha": "62ccd94674488277ac66f6b3a405a8394e3fb50d", "filename": "src/librustc_middle/middle/free_region.rs", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/be3faf3f3012f952460240c6b322ab82f244896c/src%2Flibrustc_middle%2Fmiddle%2Ffree_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be3faf3f3012f952460240c6b322ab82f244896c/src%2Flibrustc_middle%2Fmiddle%2Ffree_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmiddle%2Ffree_region.rs?ref=be3faf3f3012f952460240c6b322ab82f244896c", "patch": "@@ -1,44 +0,0 @@\n-//! This module handles the relationships between \"free regions\", i.e., lifetime parameters.\n-//! Ordinarily, free regions are unrelated to one another, but they can be related via implied\n-//! or explicit bounds. In that case, we track the bounds using the `TransitiveRelation` type,\n-//! and use that to decide when one free region outlives another, and so forth.\n-\n-use crate::middle::region;\n-use crate::ty::free_region_map::FreeRegionMap;\n-use crate::ty::{Region, TyCtxt};\n-use rustc_hir::def_id::DefId;\n-\n-/// Combines a `region::ScopeTree` (which governs relationships between\n-/// scopes) and a `FreeRegionMap` (which governs relationships between\n-/// free regions) to yield a complete relation between concrete\n-/// regions.\n-///\n-/// This stuff is a bit convoluted and should be refactored, but as we\n-/// transition to NLL, it'll all go away anyhow.\n-pub struct RegionRelations<'a, 'tcx> {\n-    pub tcx: TyCtxt<'tcx>,\n-\n-    /// The context used to fetch the region maps.\n-    pub context: DefId,\n-\n-    /// The region maps for the given context.\n-    pub region_scope_tree: &'a region::ScopeTree,\n-\n-    /// Free-region relationships.\n-    pub free_regions: &'a FreeRegionMap<'tcx>,\n-}\n-\n-impl<'a, 'tcx> RegionRelations<'a, 'tcx> {\n-    pub fn new(\n-        tcx: TyCtxt<'tcx>,\n-        context: DefId,\n-        region_scope_tree: &'a region::ScopeTree,\n-        free_regions: &'a FreeRegionMap<'tcx>,\n-    ) -> Self {\n-        Self { tcx, context, region_scope_tree, free_regions }\n-    }\n-\n-    pub fn lub_free_regions(&self, r_a: Region<'tcx>, r_b: Region<'tcx>) -> Region<'tcx> {\n-        self.free_regions.lub_free_regions(self.tcx, r_a, r_b)\n-    }\n-}"}, {"sha": "9bc9ca6707afe4d729e34964b1cbe351db9f8f3e", "filename": "src/librustc_middle/middle/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e53f80d6e72b7582239df39e26695c668a2c5e4/src%2Flibrustc_middle%2Fmiddle%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e53f80d6e72b7582239df39e26695c668a2c5e4/src%2Flibrustc_middle%2Fmiddle%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmiddle%2Fmod.rs?ref=5e53f80d6e72b7582239df39e26695c668a2c5e4", "patch": "@@ -2,7 +2,6 @@ pub mod codegen_fn_attrs;\n pub mod cstore;\n pub mod dependency_format;\n pub mod exported_symbols;\n-pub mod free_region;\n pub mod lang_items;\n pub mod lib_features {\n     use rustc_data_structures::fx::{FxHashMap, FxHashSet};"}, {"sha": "af278f9000ec06007a75c22fe5884177c484aad4", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e53f80d6e72b7582239df39e26695c668a2c5e4/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e53f80d6e72b7582239df39e26695c668a2c5e4/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=5e53f80d6e72b7582239df39e26695c668a2c5e4", "patch": "@@ -96,7 +96,6 @@ pub mod error;\n pub mod fast_reject;\n pub mod flags;\n pub mod fold;\n-pub mod free_region_map;\n pub mod inhabitedness;\n pub mod layout;\n pub mod normalize_erasing_regions;"}, {"sha": "f97dff146450c5b68af75bb2381c02f0c5312178", "filename": "src/librustc_mir/borrow_check/type_check/free_region_relations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e53f80d6e72b7582239df39e26695c668a2c5e4/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e53f80d6e72b7582239df39e26695c668a2c5e4/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs?ref=5e53f80d6e72b7582239df39e26695c668a2c5e4", "patch": "@@ -1,12 +1,12 @@\n use rustc_data_structures::frozen::Frozen;\n use rustc_data_structures::transitive_relation::TransitiveRelation;\n use rustc_infer::infer::canonical::QueryRegionConstraints;\n+use rustc_infer::infer::free_regions::FreeRegionRelations;\n use rustc_infer::infer::outlives;\n use rustc_infer::infer::region_constraints::GenericKind;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::traits::query::OutlivesBound;\n-use rustc_middle::ty::free_region_map::FreeRegionRelations;\n use rustc_middle::ty::{self, RegionVid, Ty, TyCtxt};\n use rustc_span::DUMMY_SP;\n use rustc_trait_selection::traits::query::type_op::{self, TypeOp};"}, {"sha": "4f8075b0171d33f32f163ce08a92def4c2126b61", "filename": "src/librustc_trait_selection/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e53f80d6e72b7582239df39e26695c668a2c5e4/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e53f80d6e72b7582239df39e26695c668a2c5e4/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Fopaque_types.rs?ref=5e53f80d6e72b7582239df39e26695c668a2c5e4", "patch": "@@ -6,10 +6,10 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId};\n use rustc_hir::Node;\n use rustc_infer::infer::error_reporting::unexpected_hidden_region_diagnostic;\n+use rustc_infer::infer::free_regions::FreeRegionRelations;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{self, InferCtxt, InferOk};\n use rustc_middle::ty::fold::{BottomUpFolder, TypeFoldable, TypeFolder, TypeVisitor};\n-use rustc_middle::ty::free_region_map::FreeRegionRelations;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef};\n use rustc_middle::ty::{self, GenericParamDefKind, Ty, TyCtxt};\n use rustc_session::config::nightly_options;"}]}