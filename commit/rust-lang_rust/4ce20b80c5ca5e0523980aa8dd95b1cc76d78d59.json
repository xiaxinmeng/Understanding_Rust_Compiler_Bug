{"sha": "4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZTIwYjgwYzVjYTVlMDUyMzk4MGFhOGRkOTViMWNjNzZkNzhkNTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-01T18:12:44Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-01T19:12:43Z"}, "message": "Use cli parser with auto-generated help", "tree": {"sha": "cdd4c3c2b0406548415315ccafb6312860ffa402", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdd4c3c2b0406548415315ccafb6312860ffa402"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59", "html_url": "https://github.com/rust-lang/rust/commit/4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9860a396035f61a5cc9265c1104a640547bded51", "url": "https://api.github.com/repos/rust-lang/rust/commits/9860a396035f61a5cc9265c1104a640547bded51", "html_url": "https://github.com/rust-lang/rust/commit/9860a396035f61a5cc9265c1104a640547bded51"}], "stats": {"total": 329, "additions": 195, "deletions": 134}, "files": [{"sha": "e4468ae01897673ad61afbf8e9d4fad26156aa57", "filename": "Cargo.lock", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59", "patch": "@@ -1921,6 +1921,24 @@ version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"06069a848f95fceae3e5e03c0ddc8cb78452b56654ee0c8e68f938cf790fb9e3\"\n \n+[[package]]\n+name = \"xflags\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1a6292b9528efc06cb25a41b8a0814dd3a9590c0fe2cd95341fe41bbe034fafb\"\n+dependencies = [\n+ \"xflags-macros\",\n+]\n+\n+[[package]]\n+name = \"xflags-macros\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ba2108d40e49a0653f2ee4eda59f51447e0cab5cc2cc197a5abd96525c6bd89e\"\n+dependencies = [\n+ \"proc-macro2\",\n+]\n+\n [[package]]\n name = \"xshell\"\n version = \"0.1.8\"\n@@ -1942,11 +1960,11 @@ version = \"0.1.0\"\n dependencies = [\n  \"anyhow\",\n  \"flate2\",\n- \"pico-args\",\n  \"proc-macro2\",\n  \"quote\",\n  \"ungrammar\",\n  \"walkdir\",\n  \"write-json\",\n+ \"xflags\",\n  \"xshell\",\n ]"}, {"sha": "b17dde598b01322407d800a9ebd73b14e9d99971", "filename": "xtask/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59/xtask%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59/xtask%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2FCargo.toml?ref=4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59", "patch": "@@ -9,11 +9,11 @@ license = \"MIT OR Apache-2.0\"\n [dependencies]\n anyhow = \"1.0.26\"\n flate2 = \"1.0\"\n-pico-args = \"0.4.0\"\n proc-macro2 = \"1.0.8\"\n quote = \"1.0.2\"\n ungrammar = \"=1.11\"\n walkdir = \"2.3.1\"\n write-json = \"0.1.0\"\n xshell = \"0.1\"\n+xflags = \"0.1.2\"\n # Avoid adding more dependencies to this crate"}, {"sha": "2f56c5ad0c649a2c73a88594eb086fc83994668f", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59", "patch": "@@ -18,7 +18,7 @@ use std::{\n };\n use xshell::{cmd, pushenv, read_file, write_file};\n \n-use crate::{ensure_rustfmt, project_root, Result};\n+use crate::{ensure_rustfmt, flags, project_root, Result};\n \n pub(crate) use self::{\n     gen_assists_docs::{generate_assists_docs, generate_assists_tests},\n@@ -35,11 +35,7 @@ pub(crate) enum Mode {\n     Verify,\n }\n \n-pub(crate) struct CodegenCmd {\n-    pub(crate) features: bool,\n-}\n-\n-impl CodegenCmd {\n+impl flags::Codegen {\n     pub(crate) fn run(self) -> Result<()> {\n         if self.features {\n             generate_lint_completions(Mode::Overwrite)?;"}, {"sha": "ce72879a122024543b69fbe27a40ef705ab84ea9", "filename": "xtask/src/flags.rs", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59/xtask%2Fsrc%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59/xtask%2Fsrc%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fflags.rs?ref=4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59", "patch": "@@ -0,0 +1,139 @@\n+#![allow(unreachable_pub)]\n+\n+xflags::args_parser! {\n+    /// Run custom build command.\n+    cmd xtask {\n+        default cmd help {\n+            /// Print help information.\n+            optional -h, --help\n+        }\n+\n+        /// Install rust-analyzer server or editor plugin.\n+        cmd install {\n+            /// Install only VS Code plugin.\n+            optional --client\n+            /// One of 'code', 'code-exploration', 'code-insiders', 'codium', or 'code-oss'.\n+            optional --code-bin name: String\n+\n+            /// Install only the language server.\n+            optional --server\n+            /// Use mimalloc allocator for server\n+            optional --mimalloc\n+            /// Use jemalloc allocator for server\n+            optional --jemalloc\n+        }\n+\n+        cmd codegen {\n+            optional --features\n+        }\n+\n+        cmd lint {}\n+        cmd fuzz-tests {}\n+        cmd pre-cache {}\n+\n+        cmd release {\n+            optional --dry-run\n+        }\n+        cmd promote {\n+            optional --dry-run\n+        }\n+        cmd dist {\n+            optional --nightly\n+            optional --client version: String\n+        }\n+        cmd metrics {\n+            optional --dry-run\n+        }\n+        /// Builds a benchmark version of rust-analyzer and puts it into `./target`.\n+        cmd bb\n+            required suffix : String\n+        {}\n+    }\n+}\n+\n+// generated start\n+// The following code is generated by `xflags` macro.\n+// Run `env XFLAGS_DUMP= cargo build` to regenerate.\n+#[derive(Debug)]\n+pub struct Xtask {\n+    pub subcommand: XtaskCmd,\n+}\n+\n+#[derive(Debug)]\n+pub enum XtaskCmd {\n+    Help(Help),\n+    Install(Install),\n+    Codegen(Codegen),\n+    Lint(Lint),\n+    FuzzTests(FuzzTests),\n+    PreCache(PreCache),\n+    Release(Release),\n+    Promote(Promote),\n+    Dist(Dist),\n+    Metrics(Metrics),\n+    Bb(Bb),\n+}\n+\n+#[derive(Debug)]\n+pub struct Help {\n+    pub help: bool,\n+}\n+\n+#[derive(Debug)]\n+pub struct Install {\n+    pub client: bool,\n+    pub code_bin: Option<String>,\n+    pub server: bool,\n+    pub mimalloc: bool,\n+    pub jemalloc: bool,\n+}\n+\n+#[derive(Debug)]\n+pub struct Codegen {\n+    pub features: bool,\n+}\n+\n+#[derive(Debug)]\n+pub struct Lint {}\n+\n+#[derive(Debug)]\n+pub struct FuzzTests {}\n+\n+#[derive(Debug)]\n+pub struct PreCache {}\n+\n+#[derive(Debug)]\n+pub struct Release {\n+    pub dry_run: bool,\n+}\n+\n+#[derive(Debug)]\n+pub struct Promote {\n+    pub dry_run: bool,\n+}\n+\n+#[derive(Debug)]\n+pub struct Dist {\n+    pub nightly: bool,\n+    pub client: Option<String>,\n+}\n+\n+#[derive(Debug)]\n+pub struct Metrics {\n+    pub dry_run: bool,\n+}\n+\n+#[derive(Debug)]\n+pub struct Bb {\n+    pub suffix: String,\n+}\n+\n+impl Xtask {\n+    pub const HELP: &'static str = Self::_HELP;\n+\n+    pub fn from_env() -> xflags::Result<Self> {\n+        let mut p = xflags::rt::Parser::new_from_env();\n+        Self::_parse(&mut p)\n+    }\n+}\n+// generated end"}, {"sha": "e419db7a717f94dabd1ca7a3556fe39050678a6d", "filename": "xtask/src/main.rs", "status": "modified", "additions": 26, "deletions": 108, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59", "patch": "@@ -7,6 +7,8 @@\n //!\n //! This binary is integrated into the `cargo` command line by using an alias in\n //! `.cargo/config`.\n+mod flags;\n+\n mod codegen;\n mod ast_src;\n #[cfg(test)]\n@@ -19,8 +21,6 @@ mod metrics;\n mod pre_cache;\n \n use anyhow::{bail, Result};\n-use codegen::CodegenCmd;\n-use pico_args::Arguments;\n use std::{\n     env,\n     path::{Path, PathBuf},\n@@ -32,145 +32,63 @@ use crate::{\n     codegen::Mode,\n     dist::DistCmd,\n     install::{InstallCmd, Malloc, ServerOpt},\n-    metrics::MetricsCmd,\n-    pre_cache::PreCacheCmd,\n-    release::{PromoteCmd, ReleaseCmd},\n };\n \n fn main() -> Result<()> {\n     let _d = pushd(project_root())?;\n \n-    let mut args = Arguments::from_env();\n-    let subcommand = args.subcommand()?.unwrap_or_default();\n-\n-    match subcommand.as_str() {\n-        \"install\" => {\n-            if args.contains([\"-h\", \"--help\"]) {\n-                eprintln!(\n-                    \"\\\n-cargo xtask install\n-Install rust-analyzer server or editor plugin.\n-\n-USAGE:\n-    cargo xtask install [FLAGS]\n-\n-FLAGS:\n-        --client[=CLIENT] Install only VS Code plugin.\n-                          CLIENT is one of 'code', 'code-exploration', 'code-insiders', 'codium', or 'code-oss'\n-        --server          Install only the language server\n-        --mimalloc        Use mimalloc allocator for server\n-        --jemalloc        Use jemalloc allocator for server\n-    -h, --help            Prints help information\n-        \"\n-                );\n-                return Ok(());\n-            }\n-            let server = args.contains(\"--server\");\n-            let client_code = args.contains(\"--client\");\n-            if server && client_code {\n+    let flags = flags::Xtask::from_env()?;\n+    match flags.subcommand {\n+        flags::XtaskCmd::Help(_) => {\n+            println!(\"{}\", flags::Xtask::HELP);\n+            return Ok(());\n+        }\n+        flags::XtaskCmd::Install(flags) => {\n+            if flags.server && flags.client {\n                 eprintln!(\n                     \"error: The argument `--server` cannot be used with `--client`\\n\\n\\\n                      For more information try --help\"\n                 );\n                 return Ok(());\n             }\n \n-            let malloc = if args.contains(\"--mimalloc\") {\n+            let malloc = if flags.mimalloc {\n                 Malloc::Mimalloc\n-            } else if args.contains(\"--jemalloc\") {\n+            } else if flags.jemalloc {\n                 Malloc::Jemalloc\n             } else {\n                 Malloc::System\n             };\n \n-            let client_opt = args.opt_value_from_str(\"--client\")?;\n-\n-            finish_args(args)?;\n+            let client_bin = flags.code_bin.map(|it| it.parse()).transpose()?;\n \n             InstallCmd {\n-                client: if server { None } else { Some(client_opt.unwrap_or_default()) },\n-                server: if client_code { None } else { Some(ServerOpt { malloc }) },\n+                client: if flags.server { None } else { client_bin },\n+                server: if flags.client { None } else { Some(ServerOpt { malloc }) },\n             }\n             .run()\n         }\n-        \"codegen\" => {\n-            let features = args.contains(\"--features\");\n-            finish_args(args)?;\n-            CodegenCmd { features }.run()\n-        }\n-        \"lint\" => {\n-            finish_args(args)?;\n-            run_clippy()\n-        }\n-        \"fuzz-tests\" => {\n-            finish_args(args)?;\n-            run_fuzzer()\n-        }\n-        \"pre-cache\" => {\n-            finish_args(args)?;\n-            PreCacheCmd.run()\n+        flags::XtaskCmd::Codegen(cmd) => cmd.run(),\n+        flags::XtaskCmd::Lint(_) => run_clippy(),\n+        flags::XtaskCmd::FuzzTests(_) => run_fuzzer(),\n+        flags::XtaskCmd::PreCache(cmd) => cmd.run(),\n+        flags::XtaskCmd::Release(cmd) => cmd.run(),\n+        flags::XtaskCmd::Promote(cmd) => cmd.run(),\n+        flags::XtaskCmd::Dist(flags) => {\n+            DistCmd { nightly: flags.nightly, client_version: flags.client }.run()\n         }\n-        \"release\" => {\n-            let dry_run = args.contains(\"--dry-run\");\n-            finish_args(args)?;\n-            ReleaseCmd { dry_run }.run()\n-        }\n-        \"promote\" => {\n-            let dry_run = args.contains(\"--dry-run\");\n-            finish_args(args)?;\n-            PromoteCmd { dry_run }.run()\n-        }\n-        \"dist\" => {\n-            let nightly = args.contains(\"--nightly\");\n-            let client_version: Option<String> = args.opt_value_from_str(\"--client\")?;\n-            finish_args(args)?;\n-            DistCmd { nightly, client_version }.run()\n-        }\n-        \"metrics\" => {\n-            let dry_run = args.contains(\"--dry-run\");\n-            finish_args(args)?;\n-            MetricsCmd { dry_run }.run()\n-        }\n-        \"bb\" => {\n-            let suffix: String = args.free_from_str()?;\n-            finish_args(args)?;\n+        flags::XtaskCmd::Metrics(cmd) => cmd.run(),\n+        flags::XtaskCmd::Bb(cmd) => {\n             {\n                 let _d = pushd(\"./crates/rust-analyzer\")?;\n                 cmd!(\"cargo build --release --features jemalloc\").run()?;\n             }\n-            cp(\"./target/release/rust-analyzer\", format!(\"./target/rust-analyzer-{}\", suffix))?;\n-            Ok(())\n-        }\n-        _ => {\n-            eprintln!(\n-                \"\\\n-cargo xtask\n-Run custom build command.\n-\n-USAGE:\n-    cargo xtask <SUBCOMMAND>\n-\n-SUBCOMMANDS:\n-    fuzz-tests\n-    codegen\n-    install\n-    lint\n-    dist\n-    promote\n-    bb\"\n-            );\n+            cp(\"./target/release/rust-analyzer\", format!(\"./target/rust-analyzer-{}\", cmd.suffix))?;\n             Ok(())\n         }\n     }\n }\n \n-fn finish_args(args: Arguments) -> Result<()> {\n-    if !args.finish().is_empty() {\n-        bail!(\"Unused arguments.\");\n-    }\n-    Ok(())\n-}\n-\n fn project_root() -> PathBuf {\n     Path::new(\n         &env::var(\"CARGO_MANIFEST_DIR\").unwrap_or_else(|_| env!(\"CARGO_MANIFEST_DIR\").to_owned()),"}, {"sha": "eb58b327452eb5551499adf97062874a435f3de0", "filename": "xtask/src/metrics.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59/xtask%2Fsrc%2Fmetrics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59/xtask%2Fsrc%2Fmetrics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmetrics.rs?ref=4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59", "patch": "@@ -9,13 +9,11 @@ use std::{\n use anyhow::{bail, format_err, Result};\n use xshell::{cmd, mkdir_p, pushd, pushenv, read_file, rm_rf};\n \n-type Unit = String;\n+use crate::flags;\n \n-pub(crate) struct MetricsCmd {\n-    pub(crate) dry_run: bool,\n-}\n+type Unit = String;\n \n-impl MetricsCmd {\n+impl flags::Metrics {\n     pub(crate) fn run(self) -> Result<()> {\n         let mut metrics = Metrics::new()?;\n         if !self.dry_run {"}, {"sha": "b456224fd692c4a5d9791b7236b1d6a055c59f56", "filename": "xtask/src/pre_cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59/xtask%2Fsrc%2Fpre_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59/xtask%2Fsrc%2Fpre_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fpre_cache.rs?ref=4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59", "patch": "@@ -6,9 +6,9 @@ use std::{\n use anyhow::Result;\n use xshell::rm_rf;\n \n-pub(crate) struct PreCacheCmd;\n+use crate::flags;\n \n-impl PreCacheCmd {\n+impl flags::PreCache {\n     /// Cleans the `./target` dir after the build such that only\n     /// dependencies are cached on CI.\n     pub(crate) fn run(self) -> Result<()> {"}, {"sha": "d8d86fd63ed804affc74f6b668f6fe051f6ca03a", "filename": "xtask/src/release.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59/xtask%2Fsrc%2Frelease.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59/xtask%2Fsrc%2Frelease.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Frelease.rs?ref=4ce20b80c5ca5e0523980aa8dd95b1cc76d78d59", "patch": "@@ -2,13 +2,9 @@ use std::fmt::Write;\n \n use xshell::{cmd, cp, pushd, read_dir, write_file};\n \n-use crate::{codegen, date_iso, is_release_tag, project_root, Mode, Result};\n+use crate::{codegen, date_iso, flags, is_release_tag, project_root, Mode, Result};\n \n-pub(crate) struct ReleaseCmd {\n-    pub(crate) dry_run: bool,\n-}\n-\n-impl ReleaseCmd {\n+impl flags::Release {\n     pub(crate) fn run(self) -> Result<()> {\n         if !self.dry_run {\n             cmd!(\"git switch release\").run()?;\n@@ -86,11 +82,7 @@ https://github.com/sponsors/rust-analyzer[GitHub Sponsors].\n     }\n }\n \n-pub(crate) struct PromoteCmd {\n-    pub(crate) dry_run: bool,\n-}\n-\n-impl PromoteCmd {\n+impl flags::Promote {\n     pub(crate) fn run(self) -> Result<()> {\n         let _dir = pushd(\"../rust-rust-analyzer\")?;\n         cmd!(\"git switch master\").run()?;"}]}