{"sha": "d9885c41de48145c6177ed4dd7d24a10e350f1d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ODg1YzQxZGU0ODE0NWM2MTc3ZWQ0ZGQ3ZDI0YTEwZTM1MGYxZDE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-01-05T15:57:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-05T15:57:06Z"}, "message": "Rollup merge of #57343 - Xanewok:querify-access-levels, r=nikomatsakis\n\nCalculate privacy access only via query\n\nInitially converted to query in https://github.com/rust-lang/rust/commit/a9f6babcda1479f4e5566d1aadbf9a0d99aa3182 and then changed to respect dependencies https://github.com/rust-lang/rust/commit/8281e883dd12260f00ce650aa8824507d9c447af.\n\nI did this as an effort to prune `CrateAnalysis` from librustc_save_analysis, with the only thing remaining being the glob map (`name` is unused, existing `crate_name` is exposed in the compiler passes, instead).\n\nSince calculating the glob map is opt-in, it'd be great if we could calculate that on-demand. However, it seems that it'd require converting resolution to queries, which I'm not sure how to do yet.\n\nIn an effort to get rid of `CrateAnalysis` altogether, could we try unconditionally calculating the glob_map in the resolver, thus completely removing `CrateAnalysis` struct, and doing a perf run?\n\nr? @nikomatsakis\n\ncc @petrochenkov do you have any idea how/if at all could we querify the resolver? I've stumbled upon a comment that's ~3? years old at the moment, so I'm guessing things might have changed and it actually may be feasible now. https://github.com/rust-lang/rust/blob/fe0c10019d7ee96909cc42cc265ef999a6b5dd70/src/librustc_driver/driver.rs#L589-L593", "tree": {"sha": "6a91654cfc5fcfb437a6ac147a391caf2d2ca5a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a91654cfc5fcfb437a6ac147a391caf2d2ca5a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9885c41de48145c6177ed4dd7d24a10e350f1d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcMNPSCRBK7hj4Ov3rIwAAdHIIAC18rvzmDmUdYrVXwuqAK8N4\nqb7SY6+lqtSiAu9sXuy7ihq0DUiclYisnajk+rrT5uLqqXOrievm0QEoYtaBrDRt\n4/qWDKUEjpabZgDLTofTQkjFYk1GQEddNMyXTgFayPVvo85U9G8rPvrKrQDkqbNp\nVc1gE/qot98FEtXnE6XS01s1X0jIpIyOiuhmTV9UMhJyfMRSUWr/rxu/eRhG42EV\nktLmvqhQbnUSbccck6lwQloCZdeZdA92vdpogiJTN/9IwR1TcCPdfEA18xWimPYp\nKeQPPZoAz2PcL821cJAllw7izA2zfp/0Q7wLPjYM9k5HJ/vjyx6VaMauC1sBIGg=\n=7m/N\n-----END PGP SIGNATURE-----\n", "payload": "tree 6a91654cfc5fcfb437a6ac147a391caf2d2ca5a1\nparent 06c07f93c023ac619bd09fb9d76625705eadfeb7\nparent 480d0f3a317f8bd4404bfe4df220300372a110c8\nauthor kennytm <kennytm@gmail.com> 1546703826 +0800\ncommitter GitHub <noreply@github.com> 1546703826 +0800\n\nRollup merge of #57343 - Xanewok:querify-access-levels, r=nikomatsakis\n\nCalculate privacy access only via query\n\nInitially converted to query in https://github.com/rust-lang/rust/commit/a9f6babcda1479f4e5566d1aadbf9a0d99aa3182 and then changed to respect dependencies https://github.com/rust-lang/rust/commit/8281e883dd12260f00ce650aa8824507d9c447af.\n\nI did this as an effort to prune `CrateAnalysis` from librustc_save_analysis, with the only thing remaining being the glob map (`name` is unused, existing `crate_name` is exposed in the compiler passes, instead).\n\nSince calculating the glob map is opt-in, it'd be great if we could calculate that on-demand. However, it seems that it'd require converting resolution to queries, which I'm not sure how to do yet.\n\nIn an effort to get rid of `CrateAnalysis` altogether, could we try unconditionally calculating the glob_map in the resolver, thus completely removing `CrateAnalysis` struct, and doing a perf run?\n\nr? @nikomatsakis\n\ncc @petrochenkov do you have any idea how/if at all could we querify the resolver? I've stumbled upon a comment that's ~3? years old at the moment, so I'm guessing things might have changed and it actually may be feasible now. https://github.com/rust-lang/rust/blob/fe0c10019d7ee96909cc42cc265ef999a6b5dd70/src/librustc_driver/driver.rs#L589-L593\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9885c41de48145c6177ed4dd7d24a10e350f1d1", "html_url": "https://github.com/rust-lang/rust/commit/d9885c41de48145c6177ed4dd7d24a10e350f1d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9885c41de48145c6177ed4dd7d24a10e350f1d1/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06c07f93c023ac619bd09fb9d76625705eadfeb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/06c07f93c023ac619bd09fb9d76625705eadfeb7", "html_url": "https://github.com/rust-lang/rust/commit/06c07f93c023ac619bd09fb9d76625705eadfeb7"}, {"sha": "480d0f3a317f8bd4404bfe4df220300372a110c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/480d0f3a317f8bd4404bfe4df220300372a110c8", "html_url": "https://github.com/rust-lang/rust/commit/480d0f3a317f8bd4404bfe4df220300372a110c8"}], "stats": {"total": 27, "additions": 10, "deletions": 17}, "files": [{"sha": "dffc70edd1dd477dc7ee4e8a2bd60e8d449494e5", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9885c41de48145c6177ed4dd7d24a10e350f1d1/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9885c41de48145c6177ed4dd7d24a10e350f1d1/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=d9885c41de48145c6177ed4dd7d24a10e350f1d1", "patch": "@@ -14,7 +14,6 @@ use ich::Fingerprint;\n use ich::StableHashingContext;\n use infer::canonical::Canonical;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n-use middle::privacy::AccessLevels;\n use middle::resolve_lifetime::ObjectLifetimeDefault;\n use mir::Mir;\n use mir::interpret::{GlobalId, ErrorHandled};\n@@ -123,8 +122,6 @@ mod sty;\n /// *on-demand* infrastructure.\n #[derive(Clone)]\n pub struct CrateAnalysis {\n-    pub access_levels: Lrc<AccessLevels>,\n-    pub name: String,\n     pub glob_map: Option<hir::GlobMap>,\n }\n "}, {"sha": "a9b32df801c96d663b1337680834ff59eefc96d2", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d9885c41de48145c6177ed4dd7d24a10e350f1d1/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9885c41de48145c6177ed4dd7d24a10e350f1d1/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=d9885c41de48145c6177ed4dd7d24a10e350f1d1", "patch": "@@ -4,7 +4,6 @@ use rustc::hir::lowering::lower_crate;\n use rustc::hir::map as hir_map;\n use rustc::lint;\n use rustc::middle::{self, reachable, resolve_lifetime, stability};\n-use rustc::middle::privacy::AccessLevels;\n use rustc::ty::{self, AllArenas, Resolutions, TyCtxt};\n use rustc::traits;\n use rustc::util::common::{install_panic_hook, time, ErrorReported};\n@@ -18,7 +17,7 @@ use rustc_borrowck as borrowck;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::StableHasher;\n-use rustc_data_structures::sync::{self, Lrc, Lock};\n+use rustc_data_structures::sync::{self, Lock};\n use rustc_incremental;\n use rustc_metadata::creader::CrateLoader;\n use rustc_metadata::cstore::{self, CStore};\n@@ -785,8 +784,6 @@ where\n             },\n \n             analysis: ty::CrateAnalysis {\n-                access_levels: Lrc::new(AccessLevels::default()),\n-                name: crate_name.to_string(),\n                 glob_map: if resolver.make_glob_map {\n                     Some(resolver.glob_map)\n                 } else {\n@@ -1193,7 +1190,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(\n     sess: &'tcx Session,\n     cstore: &'tcx CStore,\n     hir_map: hir_map::Map<'tcx>,\n-    mut analysis: ty::CrateAnalysis,\n+    analysis: ty::CrateAnalysis,\n     resolutions: Resolutions,\n     arenas: &'tcx mut AllArenas<'tcx>,\n     name: &str,\n@@ -1275,8 +1272,9 @@ where\n                 rvalue_promotion::check_crate(tcx)\n             });\n \n-            analysis.access_levels =\n-                time(sess, \"privacy checking\", || rustc_privacy::check_crate(tcx));\n+            time(sess, \"privacy checking\", || {\n+                rustc_privacy::check_crate(tcx)\n+            });\n \n             time(sess, \"intrinsic checking\", || {\n                 middle::intrinsicck::check_crate(tcx)"}, {"sha": "891537309177e5d611d9d77ce0b3113f8c04d1dc", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9885c41de48145c6177ed4dd7d24a10e350f1d1/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9885c41de48145c6177ed4dd7d24a10e350f1d1/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=d9885c41de48145c6177ed4dd7d24a10e350f1d1", "patch": "@@ -14,7 +14,7 @@\n //! recording the output.\n \n use rustc::hir::def::Def as HirDef;\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::session::config::Input;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n@@ -56,14 +56,14 @@ macro_rules! access_from {\n     ($save_ctxt:expr, $vis:expr, $id:expr) => {\n         Access {\n             public: $vis.node.is_pub(),\n-            reachable: $save_ctxt.analysis.access_levels.is_reachable($id),\n+            reachable: $save_ctxt.tcx.privacy_access_levels(LOCAL_CRATE).is_reachable($id),\n         }\n     };\n \n     ($save_ctxt:expr, $item:expr) => {\n         Access {\n             public: $item.vis.node.is_pub(),\n-            reachable: $save_ctxt.analysis.access_levels.is_reachable($item.id),\n+            reachable: $save_ctxt.tcx.privacy_access_levels(LOCAL_CRATE).is_reachable($item.id),\n         }\n     };\n }"}, {"sha": "8bb0dc9daa6a2065f5e574fda1dfb3b2b0035a23", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9885c41de48145c6177ed4dd7d24a10e350f1d1/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9885c41de48145c6177ed4dd7d24a10e350f1d1/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=d9885c41de48145c6177ed4dd7d24a10e350f1d1", "patch": "@@ -476,8 +476,6 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n             }).collect(),\n         };\n         let analysis = ty::CrateAnalysis {\n-            access_levels: Lrc::new(AccessLevels::default()),\n-            name: name.to_string(),\n             glob_map: if resolver.make_glob_map { Some(resolver.glob_map.clone()) } else { None },\n         };\n \n@@ -500,12 +498,12 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                                                         &mut arenas,\n                                                         &name,\n                                                         &output_filenames,\n-                                                        |tcx, analysis, _, result| {\n+                                                        |tcx, _, _, result| {\n             if result.is_err() {\n                 sess.fatal(\"Compilation failed, aborting rustdoc\");\n             }\n \n-            let ty::CrateAnalysis { access_levels, .. } = analysis;\n+            let access_levels = tcx.privacy_access_levels(LOCAL_CRATE);\n \n             // Convert from a NodeId set to a DefId set since we don't always have easy access\n             // to the map from defid -> nodeid"}]}