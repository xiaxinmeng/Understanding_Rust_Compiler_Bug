{"sha": "b03a82cfca27c11fabc19e4146d6583b3cd320ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwM2E4MmNmY2EyN2MxMWZhYmMxOWU0MTQ2ZDY1ODNiM2NkMzIwYWU=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-12T12:36:10Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-13T08:15:46Z"}, "message": "rustc/driver: whitespace & formatting fixes", "tree": {"sha": "2126ce372ccd9e4b86f72d9833520ace5982feb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2126ce372ccd9e4b86f72d9833520ace5982feb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b03a82cfca27c11fabc19e4146d6583b3cd320ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b03a82cfca27c11fabc19e4146d6583b3cd320ae", "html_url": "https://github.com/rust-lang/rust/commit/b03a82cfca27c11fabc19e4146d6583b3cd320ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b03a82cfca27c11fabc19e4146d6583b3cd320ae/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d838a7fcca93034dcb50914ca242a6973a7c3ac2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d838a7fcca93034dcb50914ca242a6973a7c3ac2", "html_url": "https://github.com/rust-lang/rust/commit/d838a7fcca93034dcb50914ca242a6973a7c3ac2"}], "stats": {"total": 173, "additions": 87, "deletions": 86}, "files": [{"sha": "b4f95b915eb8d26817de3f7aa17d861832889bd7", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b03a82cfca27c11fabc19e4146d6583b3cd320ae/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03a82cfca27c11fabc19e4146d6583b3cd320ae/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=b03a82cfca27c11fabc19e4146d6583b3cd320ae", "patch": "@@ -1021,6 +1021,7 @@ where\n             .cloned()\n             .collect();\n         missing_fragment_specifiers.sort();\n+\n         for span in missing_fragment_specifiers {\n             let lint = lint::builtin::MISSING_FRAGMENT_SPECIFIER;\n             let msg = \"missing fragment specifier\";\n@@ -1517,6 +1518,7 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<c\n                             Symbol::intern(\"proc-macro\"),\n                             Symbol::intern(\"bin\")\n                         ];\n+\n                         if let ast::MetaItemKind::NameValue(spanned) = a.meta().unwrap().node {\n                             let span = spanned.span;\n                             let lev_candidate = find_best_match_for_name(\n@@ -1587,12 +1589,12 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<c\n     base.retain(|crate_type| {\n         let res = !::rustc_codegen_utils::link::invalid_output_for_target(session, *crate_type);\n \n-            if !res {\n-                session.warn(&format!(\n-                    \"dropping unsupported crate type `{}` for target `{}`\",\n-                    *crate_type, session.opts.target_triple\n-                ));\n-            }\n+        if !res {\n+            session.warn(&format!(\n+                \"dropping unsupported crate type `{}` for target `{}`\",\n+                *crate_type, session.opts.target_triple\n+            ));\n+        }\n \n         res\n     });"}, {"sha": "8c945ccbe9503f492c251882fc5f05d43a189f39", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b03a82cfca27c11fabc19e4146d6583b3cd320ae/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03a82cfca27c11fabc19e4146d6583b3cd320ae/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=b03a82cfca27c11fabc19e4146d6583b3cd320ae", "patch": "@@ -188,14 +188,16 @@ pub fn run<F>(run_compiler: F) -> isize\n                     }\n                     None => {\n                         let emitter =\n-                            errors::emitter::EmitterWriter::stderr(errors::ColorConfig::Auto,\n-                                                                None,\n-                                                                true,\n-                                                                false);\n+                            errors::emitter::EmitterWriter::stderr(\n+                                errors::ColorConfig::Auto,\n+                                None,\n+                                true,\n+                                false\n+                            );\n                         let handler = errors::Handler::with_emitter(true, false, Box::new(emitter));\n                         handler.emit(&MultiSpan::new(),\n-                                    \"aborting due to previous error(s)\",\n-                                    errors::Level::Fatal);\n+                                     \"aborting due to previous error(s)\",\n+                                     errors::Level::Fatal);\n                         panic::resume_unwind(Box::new(errors::FatalErrorMarker));\n                     }\n                 }\n@@ -316,9 +318,8 @@ fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<dyn CodegenBackend> {\n     let sysroot = sysroot_candidates.iter()\n         .map(|sysroot| {\n             let libdir = filesearch::relative_target_lib_path(&sysroot, &target);\n-            sysroot.join(libdir)\n-                .with_file_name(option_env!(\"CFG_CODEGEN_BACKENDS_DIR\")\n-                                .unwrap_or(\"codegen-backends\"))\n+            sysroot.join(libdir).with_file_name(\n+                option_env!(\"CFG_CODEGEN_BACKENDS_DIR\").unwrap_or(\"codegen-backends\"))\n         })\n         .filter(|f| {\n             info!(\"codegen backend candidate: {}\", f.display());\n@@ -360,8 +361,8 @@ fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<dyn CodegenBackend> {\n         }\n         if let Some(ref prev) = file {\n             let err = format!(\"duplicate codegen backends found\\n\\\n-                first:  {}\\n\\\n-                second: {}\\n\\\n+                               first:  {}\\n\\\n+                               second: {}\\n\\\n             \", prev.display(), path.display());\n             early_error(ErrorOutputType::default(), &err);\n         }\n@@ -373,7 +374,7 @@ fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<dyn CodegenBackend> {\n         None => {\n             let err = format!(\"failed to load default codegen backend for `{}`, \\\n                                no appropriate codegen dylib found in `{}`\",\n-                               backend_name, sysroot.display());\n+                              backend_name, sysroot.display());\n             early_error(ErrorOutputType::default(), &err);\n         }\n     }\n@@ -1010,7 +1011,7 @@ impl RustcDefaultCalls {\n         use rustc::session::config::PrintRequest::*;\n         // PrintRequest::NativeStaticLibs is special - printed during linking\n         // (empty iterator returns true)\n-        if sess.opts.prints.iter().all(|&p| p==PrintRequest::NativeStaticLibs) {\n+        if sess.opts.prints.iter().all(|&p| p == PrintRequest::NativeStaticLibs) {\n             return Compilation::Continue;\n         }\n \n@@ -1054,10 +1055,7 @@ impl RustcDefaultCalls {\n                             &id,\n                             &t_outputs\n                         );\n-                        println!(\"{}\",\n-                                 fname.file_name()\n-                                      .unwrap()\n-                                      .to_string_lossy());\n+                        println!(\"{}\", fname.file_name().unwrap().to_string_lossy());\n                     }\n                 }\n                 Cfg => {\n@@ -1129,9 +1127,8 @@ fn commit_date_str() -> Option<&'static str> {\n pub fn version(binary: &str, matches: &getopts::Matches) {\n     let verbose = matches.opt_present(\"verbose\");\n \n-    println!(\"{} {}\",\n-             binary,\n-             option_env!(\"CFG_VERSION\").unwrap_or(\"unknown version\"));\n+    println!(\"{} {}\", binary, option_env!(\"CFG_VERSION\").unwrap_or(\"unknown version\"));\n+\n     if verbose {\n         fn unw(x: Option<&str>) -> &str {\n             x.unwrap_or(\"unknown\")\n@@ -1252,8 +1249,6 @@ Available lint options:\n \n     print_lints(builtin);\n \n-\n-\n     let max_name_len = max(\"warnings\".len(),\n                            plugin_groups.iter()\n                                         .chain(&builtin_groups)\n@@ -1429,6 +1424,7 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n     }\n \n     let cg_flags = matches.opt_strs(\"C\");\n+\n     if cg_flags.iter().any(|x| *x == \"help\") {\n         describe_codegen_flags();\n         return None;\n@@ -1477,7 +1473,7 @@ pub fn in_named_rustc_thread<F, R>(name: String, f: F) -> Result<R, Box<dyn Any\n     // Temporarily have stack size set to 16MB to deal with nom-using crates failing\n     const STACK_SIZE: usize = 16 * 1024 * 1024; // 16MB\n \n-    #[cfg(all(unix,not(target_os = \"haiku\")))]\n+    #[cfg(all(unix, not(target_os = \"haiku\")))]\n     let spawn_thread = unsafe {\n         // Fetch the current resource limits\n         let mut rlim = libc::rlimit {\n@@ -1531,7 +1527,7 @@ pub fn in_named_rustc_thread<F, R>(name: String, f: F) -> Result<R, Box<dyn Any\n         }\n     };\n \n-    #[cfg(not(any(windows,unix)))]\n+    #[cfg(not(any(windows, unix)))]\n     let spawn_thread = true;\n \n     // The or condition is added from backward compatibility."}, {"sha": "b4f6d10b1f829f91f96004b13b60429b7ff643a9", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b03a82cfca27c11fabc19e4146d6583b3cd320ae/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03a82cfca27c11fabc19e4146d6583b3cd320ae/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=b03a82cfca27c11fabc19e4146d6583b3cd320ae", "patch": "@@ -167,10 +167,10 @@ pub fn parse_pretty(sess: &Session,\n impl PpSourceMode {\n     /// Constructs a `PrinterSupport` object and passes it to `f`.\n     fn call_with_pp_support<'tcx, A, F>(&self,\n-                                           sess: &'tcx Session,\n-                                           hir_map: Option<&hir_map::Map<'tcx>>,\n-                                           f: F)\n-                                           -> A\n+                                        sess: &'tcx Session,\n+                                        hir_map: Option<&hir_map::Map<'tcx>>,\n+                                        f: F)\n+                                        -> A\n         where F: FnOnce(&dyn PrinterSupport) -> A\n     {\n         match *self {\n@@ -198,17 +198,18 @@ impl PpSourceMode {\n             _ => panic!(\"Should use call_with_pp_support_hir\"),\n         }\n     }\n-    fn call_with_pp_support_hir<'tcx, A, F>(&self,\n-                                               sess: &'tcx Session,\n-                                               cstore: &'tcx CStore,\n-                                               hir_map: &hir_map::Map<'tcx>,\n-                                               analysis: &ty::CrateAnalysis,\n-                                               resolutions: &Resolutions,\n-                                               arenas: &'tcx AllArenas<'tcx>,\n-                                               output_filenames: &OutputFilenames,\n-                                               id: &str,\n-                                               f: F)\n-                                               -> A\n+    fn call_with_pp_support_hir<'tcx, A, F>(\n+        &self,\n+        sess: &'tcx Session,\n+        cstore: &'tcx CStore,\n+        hir_map: &hir_map::Map<'tcx>,\n+        analysis: &ty::CrateAnalysis,\n+        resolutions: &Resolutions,\n+        arenas: &'tcx AllArenas<'tcx>,\n+        output_filenames: &OutputFilenames,\n+        id: &str,\n+        f: F\n+    ) -> A\n         where F: FnOnce(&dyn HirPrinterSupport, &hir::Crate) -> A\n     {\n         match *self {\n@@ -952,18 +953,17 @@ pub fn print_after_parsing(sess: &Session,\n         // Silently ignores an identified node.\n         let out: &mut dyn Write = &mut out;\n         s.call_with_pp_support(sess, None, move |annotation| {\n-                debug!(\"pretty printing source code {:?}\", s);\n-                let sess = annotation.sess();\n-                pprust::print_crate(sess.source_map(),\n-                                    &sess.parse_sess,\n-                                    krate,\n-                                    src_name,\n-                                    &mut rdr,\n-                                    box out,\n-                                    annotation.pp_ann(),\n-                                    false)\n-            })\n-            .unwrap()\n+            debug!(\"pretty printing source code {:?}\", s);\n+            let sess = annotation.sess();\n+            pprust::print_crate(sess.source_map(),\n+                                &sess.parse_sess,\n+                                krate,\n+                                src_name,\n+                                &mut rdr,\n+                                box out,\n+                                annotation.pp_ann(),\n+                                false)\n+        }).unwrap()\n     } else {\n         unreachable!();\n     };"}, {"sha": "d334a9476ce249d0d2f271fc5706b68ce0bb688c", "filename": "src/librustc_driver/profile/mod.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b03a82cfca27c11fabc19e4146d6583b3cd320ae/src%2Flibrustc_driver%2Fprofile%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03a82cfca27c11fabc19e4146d6583b3cd320ae/src%2Flibrustc_driver%2Fprofile%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Fmod.rs?ref=b03a82cfca27c11fabc19e4146d6583b3cd320ae", "patch": "@@ -23,7 +23,7 @@ pub fn begin(sess: &Session) {\n     use std::sync::mpsc::{channel};\n     let (tx, rx) = channel();\n     if profq_set_chan(sess, tx) {\n-        thread::spawn(move||profile_queries_thread(rx));\n+        thread::spawn(move || profile_queries_thread(rx));\n     }\n }\n \n@@ -34,11 +34,12 @@ pub fn begin(sess: &Session) {\n pub fn dump(sess: &Session, path: String) {\n     use std::sync::mpsc::{channel};\n     let (tx, rx) = channel();\n-    let params = ProfQDumpParams{\n-        path, ack:tx,\n+    let params = ProfQDumpParams {\n+        path,\n+        ack: tx,\n         // FIXME: Add another compiler flag to toggle whether this log\n         // is written; false for now\n-        dump_profq_msg_log:true,\n+        dump_profq_msg_log: true,\n     };\n     profq_msg(sess, ProfileQueriesMsg::Dump(params));\n     let _ = rx.recv().unwrap();\n@@ -63,20 +64,20 @@ struct StackFrame {\n }\n \n fn total_duration(traces: &[trace::Rec]) -> Duration {\n-    let mut sum : Duration = Duration::new(0,0);\n+    let mut sum : Duration = Duration::new(0, 0);\n     for t in traces.iter() { sum += t.dur_total; }\n     return sum\n }\n \n // profiling thread; retains state (in local variables) and dump traces, upon request.\n-fn profile_queries_thread(r:Receiver<ProfileQueriesMsg>) {\n+fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n     use self::trace::*;\n     use std::fs::File;\n     use std::time::{Instant};\n \n-    let mut profq_msgs : Vec<ProfileQueriesMsg> = vec![];\n-    let mut frame : StackFrame = StackFrame{ parse_st:ParseState::Clear, traces:vec![] };\n-    let mut stack : Vec<StackFrame> = vec![];\n+    let mut profq_msgs: Vec<ProfileQueriesMsg> = vec![];\n+    let mut frame: StackFrame = StackFrame { parse_st: ParseState::Clear, traces: vec![] };\n+    let mut stack: Vec<StackFrame> = vec![];\n     loop {\n         let msg = r.recv();\n         if let Err(_recv_err) = msg {\n@@ -138,7 +139,7 @@ fn profile_queries_thread(r:Receiver<ProfileQueriesMsg>) {\n \n                     // Parse State: Clear\n                     (ParseState::Clear,\n-                     ProfileQueriesMsg::QueryBegin(span,querymsg)) => {\n+                     ProfileQueriesMsg::QueryBegin(span, querymsg)) => {\n                         let start = Instant::now();\n                         frame.parse_st = ParseState::HaveQuery\n                             (Query { span, msg: querymsg }, start)\n@@ -284,8 +285,6 @@ fn profile_queries_thread(r:Receiver<ProfileQueriesMsg>) {\n                         frame = StackFrame{parse_st:ParseState::Clear, traces:vec![]};\n                     },\n \n-                    //\n-                    //\n                     // Parse errors:\n \n                     (ParseState::HaveQuery(q,_),\n@@ -307,7 +306,6 @@ fn profile_queries_thread(r:Receiver<ProfileQueriesMsg>) {\n                         unreachable!()\n                     },\n                 }\n-\n             }\n         }\n     }"}, {"sha": "9589ae2a8dbe0032848633a6b04342987109a3cf", "filename": "src/librustc_driver/profile/trace.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b03a82cfca27c11fabc19e4146d6583b3cd320ae/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03a82cfca27c11fabc19e4146d6583b3cd320ae/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs?ref=b03a82cfca27c11fabc19e4146d6583b3cd320ae", "patch": "@@ -84,9 +84,7 @@ pub fn html_of_effect(eff: &Effect) -> (String, String) {\n // First return value is text; second return value is a CSS class\n fn html_of_duration(_start: &Instant, dur: &Duration) -> (String, String) {\n     use rustc::util::common::duration_to_secs_str;\n-    (duration_to_secs_str(dur.clone()),\n-     String::new()\n-    )\n+    (duration_to_secs_str(dur.clone()), String::new())\n }\n \n fn html_of_fraction(frac: f64) -> (String, &'static str) {\n@@ -103,8 +101,12 @@ fn html_of_fraction(frac: f64) -> (String, &'static str) {\n         else                  { \"frac-0\" }\n     };\n     let percent = frac * 100.0;\n-    if percent > 0.1 { (format!(\"{:.1}%\", percent), css) }\n-    else { (\"< 0.1%\".to_string(), css) }\n+\n+    if percent > 0.1 {\n+        (format!(\"{:.1}%\", percent), css)\n+    } else {\n+        (\"< 0.1%\".to_string(), css)\n+    }\n }\n \n fn total_duration(traces: &[Rec]) -> Duration {\n@@ -149,40 +151,42 @@ fn compute_counts_rec(counts: &mut FxHashMap<String,QueryMetric>, traces: &[Rec]\n         match t.effect {\n             Effect::TimeBegin(ref msg) => {\n                 let qm = match counts.get(msg) {\n-                    Some(_qm) => { panic!(\"TimeBegin with non-unique, repeat message\") }\n-                    None => QueryMetric{\n+                    Some(_qm) => panic!(\"TimeBegin with non-unique, repeat message\"),\n+                    None => QueryMetric {\n                         count: 1,\n                         dur_self: t.dur_self,\n                         dur_total: t.dur_total,\n-                    }};\n+                    }\n+                };\n                 counts.insert(msg.clone(), qm);\n             },\n             Effect::TaskBegin(ref key) => {\n                 let cons = cons_of_key(key);\n                 let qm = match counts.get(&cons) {\n                     Some(qm) =>\n-                        QueryMetric{\n+                        QueryMetric {\n                             count: qm.count + 1,\n                             dur_self: qm.dur_self + t.dur_self,\n                             dur_total: qm.dur_total + t.dur_total,\n                         },\n-                    None => QueryMetric{\n+                    None => QueryMetric {\n                         count: 1,\n                         dur_self: t.dur_self,\n                         dur_total: t.dur_total,\n-                    }};\n+                    }\n+                };\n                 counts.insert(cons, qm);\n             },\n             Effect::QueryBegin(ref qmsg, ref _cc) => {\n                 let qcons = cons_of_query_msg(qmsg);\n                 let qm = match counts.get(&qcons) {\n                     Some(qm) =>\n-                        QueryMetric{\n+                        QueryMetric {\n                             count: qm.count + 1,\n                             dur_total: qm.dur_total + t.dur_total,\n                             dur_self: qm.dur_self + t.dur_self\n                         },\n-                    None => QueryMetric{\n+                    None => QueryMetric {\n                         count: 1,\n                         dur_total: t.dur_total,\n                         dur_self: t.dur_self,\n@@ -195,13 +199,14 @@ fn compute_counts_rec(counts: &mut FxHashMap<String,QueryMetric>, traces: &[Rec]\n     }\n }\n \n-pub fn write_counts(count_file: &mut File, counts: &mut FxHashMap<String,QueryMetric>) {\n+pub fn write_counts(count_file: &mut File, counts: &mut FxHashMap<String, QueryMetric>) {\n     use rustc::util::common::duration_to_secs_str;\n     use std::cmp::Reverse;\n \n     let mut data = counts.iter().map(|(ref cons, ref qm)|\n         (cons.clone(), qm.count.clone(), qm.dur_total.clone(), qm.dur_self.clone())\n     ).collect::<Vec<_>>();\n+\n     data.sort_by_key(|k| Reverse(k.3));\n     for (cons, count, dur_total, dur_self) in data {\n         writeln!(count_file, \"{}, {}, {}, {}\",\n@@ -218,12 +223,12 @@ pub fn write_traces(html_file: &mut File, counts_file: &mut File, traces: &[Rec]\n     compute_counts_rec(&mut counts, traces);\n     write_counts(counts_file, &mut counts);\n \n-    let total : Duration = total_duration(traces);\n+    let total: Duration = total_duration(traces);\n     write_traces_rec(html_file, traces, total, 0)\n }\n \n pub fn write_style(html_file: &mut File) {\n-    write!(html_file,\"{}\", \"\n+    write!(html_file, \"{}\", \"\n body {\n     font-family: sans-serif;\n     background: black;"}]}