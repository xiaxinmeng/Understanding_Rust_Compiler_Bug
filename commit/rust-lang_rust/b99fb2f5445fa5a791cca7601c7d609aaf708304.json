{"sha": "b99fb2f5445fa5a791cca7601c7d609aaf708304", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5OWZiMmY1NDQ1ZmE1YTc5MWNjYTc2MDFjN2Q2MDlhYWY3MDgzMDQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-20T00:57:48Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-27T12:51:36Z"}, "message": "Fix `trace_macros` and `log_syntax`", "tree": {"sha": "431e30bdb8062266c0730928fce00e42f84dc064", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/431e30bdb8062266c0730928fce00e42f84dc064"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b99fb2f5445fa5a791cca7601c7d609aaf708304", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b99fb2f5445fa5a791cca7601c7d609aaf708304", "html_url": "https://github.com/rust-lang/rust/commit/b99fb2f5445fa5a791cca7601c7d609aaf708304", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b99fb2f5445fa5a791cca7601c7d609aaf708304/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ac592516f0627778ac4aaee52acd7d7591e5cb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac592516f0627778ac4aaee52acd7d7591e5cb3", "html_url": "https://github.com/rust-lang/rust/commit/4ac592516f0627778ac4aaee52acd7d7591e5cb3"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "1efe0b3478db7f1f6ed7830e72c965e277d20206", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b99fb2f5445fa5a791cca7601c7d609aaf708304/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99fb2f5445fa5a791cca7601c7d609aaf708304/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=b99fb2f5445fa5a791cca7601c7d609aaf708304", "patch": "@@ -456,32 +456,38 @@ impl MacResult for MacEager {\n #[derive(Copy, Clone)]\n pub struct DummyResult {\n     expr_only: bool,\n-    span: Span\n+    is_error: bool,\n+    span: Span,\n }\n \n impl DummyResult {\n     /// Create a default MacResult that can be anything.\n     ///\n     /// Use this as a return value after hitting any errors and\n     /// calling `span_err`.\n-    pub fn any(sp: Span) -> Box<dyn MacResult+'static> {\n-        Box::new(DummyResult { expr_only: false, span: sp })\n+    pub fn any(span: Span) -> Box<dyn MacResult+'static> {\n+        Box::new(DummyResult { expr_only: false, is_error: true, span })\n+    }\n+\n+    /// Same as `any`, but must be a valid fragment, not error.\n+    pub fn any_valid(span: Span) -> Box<dyn MacResult+'static> {\n+        Box::new(DummyResult { expr_only: false, is_error: false, span })\n     }\n \n     /// Create a default MacResult that can only be an expression.\n     ///\n     /// Use this for macros that must expand to an expression, so even\n     /// if an error is encountered internally, the user will receive\n     /// an error that they also used it in the wrong place.\n-    pub fn expr(sp: Span) -> Box<dyn MacResult+'static> {\n-        Box::new(DummyResult { expr_only: true, span: sp })\n+    pub fn expr(span: Span) -> Box<dyn MacResult+'static> {\n+        Box::new(DummyResult { expr_only: true, is_error: true, span })\n     }\n \n     /// A plain dummy expression.\n-    pub fn raw_expr(sp: Span) -> P<ast::Expr> {\n+    pub fn raw_expr(sp: Span, is_error: bool) -> P<ast::Expr> {\n         P(ast::Expr {\n             id: ast::DUMMY_NODE_ID,\n-            node: ast::ExprKind::Err,\n+            node: if is_error { ast::ExprKind::Err } else { ast::ExprKind::Tup(Vec::new()) },\n             span: sp,\n             attrs: ThinVec::new(),\n         })\n@@ -497,18 +503,18 @@ impl DummyResult {\n     }\n \n     /// A plain dummy type.\n-    pub fn raw_ty(sp: Span) -> P<ast::Ty> {\n+    pub fn raw_ty(sp: Span, is_error: bool) -> P<ast::Ty> {\n         P(ast::Ty {\n             id: ast::DUMMY_NODE_ID,\n-            node: ast::TyKind::Err,\n+            node: if is_error { ast::TyKind::Err } else { ast::TyKind::Tup(Vec::new()) },\n             span: sp\n         })\n     }\n }\n \n impl MacResult for DummyResult {\n     fn make_expr(self: Box<DummyResult>) -> Option<P<ast::Expr>> {\n-        Some(DummyResult::raw_expr(self.span))\n+        Some(DummyResult::raw_expr(self.span, self.is_error))\n     }\n \n     fn make_pat(self: Box<DummyResult>) -> Option<P<ast::Pat>> {\n@@ -551,13 +557,13 @@ impl MacResult for DummyResult {\n     fn make_stmts(self: Box<DummyResult>) -> Option<SmallVec<[ast::Stmt; 1]>> {\n         Some(smallvec![ast::Stmt {\n             id: ast::DUMMY_NODE_ID,\n-            node: ast::StmtKind::Expr(DummyResult::raw_expr(self.span)),\n+            node: ast::StmtKind::Expr(DummyResult::raw_expr(self.span, self.is_error)),\n             span: self.span,\n         }])\n     }\n \n     fn make_ty(self: Box<DummyResult>) -> Option<P<ast::Ty>> {\n-        Some(DummyResult::raw_ty(self.span))\n+        Some(DummyResult::raw_ty(self.span, self.is_error))\n     }\n }\n "}, {"sha": "11d570072cd6387ba92f3032fec021bd1e1572bb", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99fb2f5445fa5a791cca7601c7d609aaf708304/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99fb2f5445fa5a791cca7601c7d609aaf708304/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b99fb2f5445fa5a791cca7601c7d609aaf708304", "patch": "@@ -4974,7 +4974,7 @@ impl<'a> Parser<'a> {\n                     self.recover_stmt_(SemiColonMode::Ignore, BlockMode::Ignore);\n                     Some(Stmt {\n                         id: ast::DUMMY_NODE_ID,\n-                        node: StmtKind::Expr(DummyResult::raw_expr(self.span)),\n+                        node: StmtKind::Expr(DummyResult::raw_expr(self.span, true)),\n                         span: self.span,\n                     })\n                 }"}, {"sha": "32d02bec7989b90137e3d788230f1c33467d3964", "filename": "src/libsyntax_ext/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99fb2f5445fa5a791cca7601c7d609aaf708304/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99fb2f5445fa5a791cca7601c7d609aaf708304/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs?ref=b99fb2f5445fa5a791cca7601c7d609aaf708304", "patch": "@@ -69,7 +69,7 @@ fn default_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructur\n             span_err!(cx, trait_span, E0665,\n                       \"`Default` cannot be derived for enums, only structs\");\n             // let compilation continue\n-            DummyResult::raw_expr(trait_span)\n+            DummyResult::raw_expr(trait_span, true)\n         }\n         _ => cx.span_bug(trait_span, \"Non-static method in `derive(Default)`\"),\n     };"}, {"sha": "10516503480373e72a08555b2ef4786710fe52ee", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b99fb2f5445fa5a791cca7601c7d609aaf708304/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99fb2f5445fa5a791cca7601c7d609aaf708304/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=b99fb2f5445fa5a791cca7601c7d609aaf708304", "patch": "@@ -666,7 +666,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                     \"X\" => \"UpperHex\",\n                     _ => {\n                         ecx.span_err(sp, &format!(\"unknown format trait `{}`\", *tyname));\n-                        return DummyResult::raw_expr(sp);\n+                        return DummyResult::raw_expr(sp, true);\n                     }\n                 }\n             }\n@@ -761,7 +761,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n                 Applicability::MaybeIncorrect,\n             );\n             err.emit();\n-            return DummyResult::raw_expr(sp);\n+            return DummyResult::raw_expr(sp, true);\n         }\n     };\n \n@@ -857,7 +857,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n             e.span_label(sp, label);\n         }\n         e.emit();\n-        return DummyResult::raw_expr(sp);\n+        return DummyResult::raw_expr(sp, true);\n     }\n \n     let arg_spans = parser.arg_places.iter()"}, {"sha": "f6bb1285c535310059e7c76385a2079601810c14", "filename": "src/libsyntax_ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99fb2f5445fa5a791cca7601c7d609aaf708304/src%2Flibsyntax_ext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99fb2f5445fa5a791cca7601c7d609aaf708304/src%2Flibsyntax_ext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flog_syntax.rs?ref=b99fb2f5445fa5a791cca7601c7d609aaf708304", "patch": "@@ -20,5 +20,5 @@ pub fn expand_syntax_ext<'cx>(cx: &'cx mut base::ExtCtxt,\n     println!(\"{}\", print::pprust::tts_to_string(tts));\n \n     // any so that `log_syntax` can be invoked as an expression and item.\n-    base::DummyResult::any(sp)\n+    base::DummyResult::any_valid(sp)\n }"}, {"sha": "b20da5af09a8208936a7bb08f82a94f7177b8bc2", "filename": "src/libsyntax_ext/trace_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99fb2f5445fa5a791cca7601c7d609aaf708304/src%2Flibsyntax_ext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99fb2f5445fa5a791cca7601c7d609aaf708304/src%2Flibsyntax_ext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftrace_macros.rs?ref=b99fb2f5445fa5a791cca7601c7d609aaf708304", "patch": "@@ -28,5 +28,5 @@ pub fn expand_trace_macros(cx: &mut ExtCtxt,\n         _ => cx.span_err(sp, \"trace_macros! accepts only `true` or `false`\"),\n     }\n \n-    base::DummyResult::any(sp)\n+    base::DummyResult::any_valid(sp)\n }"}]}