{"sha": "b2a45f064514e06908564153014f8860b8b206d2", "node_id": "C_kwDOAAsO6NoAKGIyYTQ1ZjA2NDUxNGUwNjkwODU2NDE1MzAxNGY4ODYwYjhiMjA2ZDI", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-01-21T14:02:52Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-01-21T21:20:58Z"}, "message": "Extract stable_disjoint fn", "tree": {"sha": "b95de86e786d935a987f0532de87da45b3020a1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b95de86e786d935a987f0532de87da45b3020a1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2a45f064514e06908564153014f8860b8b206d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmHrI7sACgkQgTGiTgx5\n76/V3w/+PY33NOyqKZJJypUZIZrvlHSJZDP0qF4EZca9c+pgEk59tSu4N6ZjGm46\nROcVi/Rl6HgDElw8YEunHCQERpp2teQd807rxV2wAcreYOXuteEMEyDCUUnFpt/D\nEqRYUL3b66kKbntfauz8jdDioBkLLMvaDAvRFSB0FVe9mmhY57mdse/Qb2ypwqz/\nO9172PmtmYVm3eZ7qpcNEBmd6uqLSTHR23OaShu5y8bipah/ST6EHigAtwUD6twp\n9NXI5h6X5FNT1433lomg81bDIDecCrp+AjF1dTGAqLJLUdKX60n9GnBsRWhJuFKA\nyAWlGntXc90/N/YMykSb2+46WFz9ymIA7Kh0OxrrVL/MuHz+jizj9ZJBYmzG1shw\nD2QLfRcSO8PjW8vX2K/LBmwHWA46podiEX+CXF1ZeIuCByLQWmgUJXwZCVztfpF4\n4pQIjoUus/mXN4THsl1jhp6MKp4+uM3LT/OrT1x9M4jpBPMyMR53QO24ff9Rd6n+\nic6ieyUymN6aEb1Kr9Kqw/Exql3DD1ZAGJAxqu8WibMW6sgPG4j4M4IQuq0kFZZG\nB/ZA9vI89wwXDlG7vE0ePs5Rtmz+LAlMXU7VkIVO4y7VpbPiSPEZqxwqbmmWdDSa\nIkmPjLaBG8vTn657el5sp6fGVDs6PGSzgIyYkcOxZ9wcV7+XvmM=\n=lCN2\n-----END PGP SIGNATURE-----", "payload": "tree b95de86e786d935a987f0532de87da45b3020a1b\nparent 052b31b5874a509a642a28cae0e20fe6031e766a\nauthor Santiago Pastorino <spastorino@gmail.com> 1642773772 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1642800058 -0300\n\nExtract stable_disjoint fn\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2a45f064514e06908564153014f8860b8b206d2", "html_url": "https://github.com/rust-lang/rust/commit/b2a45f064514e06908564153014f8860b8b206d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2a45f064514e06908564153014f8860b8b206d2/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "052b31b5874a509a642a28cae0e20fe6031e766a", "url": "https://api.github.com/repos/rust-lang/rust/commits/052b31b5874a509a642a28cae0e20fe6031e766a", "html_url": "https://github.com/rust-lang/rust/commit/052b31b5874a509a642a28cae0e20fe6031e766a"}], "stats": {"total": 62, "additions": 41, "deletions": 21}, "files": [{"sha": "84b934c19f9d3ca235d10f6650fb8e880f10c1b2", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 41, "deletions": 21, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b2a45f064514e06908564153014f8860b8b206d2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2a45f064514e06908564153014f8860b8b206d2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=b2a45f064514e06908564153014f8860b8b206d2", "patch": "@@ -157,6 +157,9 @@ fn overlap_within_probe<'cx, 'tcx>(\n     impl2_def_id: DefId,\n     snapshot: &CombinedSnapshot<'_, 'tcx>,\n ) -> Option<OverlapResult<'tcx>> {\n+    let infcx = selcx.infcx();\n+    let tcx = infcx.tcx;\n+\n     // For the purposes of this check, we don't bring any placeholder\n     // types into scope; instead, we replace the generic types with\n     // fresh type variables, and hence we do our evaluations in an\n@@ -166,6 +169,39 @@ fn overlap_within_probe<'cx, 'tcx>(\n     let impl1_header = with_fresh_ty_vars(selcx, param_env, impl1_def_id);\n     let impl2_header = with_fresh_ty_vars(selcx, param_env, impl2_def_id);\n \n+    let strict_coherence = tcx.has_attr(impl1_def_id, sym::rustc_strict_coherence)\n+        && tcx.has_attr(impl2_def_id, sym::rustc_strict_coherence);\n+\n+    if stable_disjoint(selcx, param_env, &impl1_header, impl2_header, strict_coherence) {\n+        return None;\n+    }\n+\n+    if !skip_leak_check.is_yes() {\n+        if infcx.leak_check(true, snapshot).is_err() {\n+            debug!(\"overlap: leak check failed\");\n+            return None;\n+        }\n+    }\n+\n+    let intercrate_ambiguity_causes = selcx.take_intercrate_ambiguity_causes();\n+    debug!(\"overlap: intercrate_ambiguity_causes={:#?}\", intercrate_ambiguity_causes);\n+\n+    let involves_placeholder =\n+        matches!(selcx.infcx().region_constraints_added_in_snapshot(snapshot), Some(true));\n+\n+    let impl_header = selcx.infcx().resolve_vars_if_possible(impl1_header);\n+    Some(OverlapResult { impl_header, intercrate_ambiguity_causes, involves_placeholder })\n+}\n+\n+/// Given impl1 and impl2 check if both impls can be satisfied by a common type (including\n+/// where-clauses) If so, return false, otherwise return true, they are disjoint.\n+fn stable_disjoint<'cx, 'tcx>(\n+    selcx: &mut SelectionContext<'cx, 'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    impl1_header: &ty::ImplHeader<'tcx>,\n+    impl2_header: ty::ImplHeader<'tcx>,\n+    strict_coherence: bool,\n+) -> bool {\n     debug!(\"overlap: impl1_header={:?}\", impl1_header);\n     debug!(\"overlap: impl2_header={:?}\", impl2_header);\n \n@@ -177,7 +213,7 @@ fn overlap_within_probe<'cx, 'tcx>(\n     {\n         Ok(InferOk { obligations, value: () }) => obligations,\n         Err(_) => {\n-            return None;\n+            return true;\n         }\n     };\n \n@@ -222,9 +258,7 @@ fn overlap_within_probe<'cx, 'tcx>(\n         .find(|o| {\n             // if both impl headers are set to strict coherence it means that this will be accepted\n             // only if it's stated that T: !Trait. So only prove that the negated obligation holds.\n-            if tcx.has_attr(impl1_def_id, sym::rustc_strict_coherence)\n-                && tcx.has_attr(impl2_def_id, sym::rustc_strict_coherence)\n-            {\n+            if strict_coherence {\n                 strict_check(selcx, o)\n             } else {\n                 loose_check(selcx, o) || tcx.features().negative_impls && strict_check(selcx, o)\n@@ -236,24 +270,10 @@ fn overlap_within_probe<'cx, 'tcx>(\n \n     if let Some(failing_obligation) = opt_failing_obligation {\n         debug!(\"overlap: obligation unsatisfiable {:?}\", failing_obligation);\n-        return None;\n-    }\n-\n-    if !skip_leak_check.is_yes() {\n-        if infcx.leak_check(true, snapshot).is_err() {\n-            debug!(\"overlap: leak check failed\");\n-            return None;\n-        }\n+        true\n+    } else {\n+        false\n     }\n-\n-    let impl_header = selcx.infcx().resolve_vars_if_possible(impl1_header);\n-    let intercrate_ambiguity_causes = selcx.take_intercrate_ambiguity_causes();\n-    debug!(\"overlap: intercrate_ambiguity_causes={:#?}\", intercrate_ambiguity_causes);\n-\n-    let involves_placeholder =\n-        matches!(selcx.infcx().region_constraints_added_in_snapshot(snapshot), Some(true));\n-\n-    Some(OverlapResult { impl_header, intercrate_ambiguity_causes, involves_placeholder })\n }\n \n fn loose_check<'cx, 'tcx>("}]}