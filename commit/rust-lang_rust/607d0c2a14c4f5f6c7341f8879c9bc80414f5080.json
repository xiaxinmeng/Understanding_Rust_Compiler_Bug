{"sha": "607d0c2a14c4f5f6c7341f8879c9bc80414f5080", "node_id": "C_kwDOAAsO6NoAKDYwN2QwYzJhMTRjNGY1ZjZjNzM0MWY4ODc5YzliYzgwNDE0ZjUwODA", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-06T19:17:57Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-13T14:06:11Z"}, "message": "Store a LocalDefId in hir::AnonConst.", "tree": {"sha": "3c211e2115359243fbdcfa2f5e69a4cb0263a43d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c211e2115359243fbdcfa2f5e69a4cb0263a43d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/607d0c2a14c4f5f6c7341f8879c9bc80414f5080", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/607d0c2a14c4f5f6c7341f8879c9bc80414f5080", "html_url": "https://github.com/rust-lang/rust/commit/607d0c2a14c4f5f6c7341f8879c9bc80414f5080", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/607d0c2a14c4f5f6c7341f8879c9bc80414f5080/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18482f7b2341fcabdbb854e3d4fe9a724726aa97", "url": "https://api.github.com/repos/rust-lang/rust/commits/18482f7b2341fcabdbb854e3d4fe9a724726aa97", "html_url": "https://github.com/rust-lang/rust/commit/18482f7b2341fcabdbb854e3d4fe9a724726aa97"}], "stats": {"total": 105, "additions": 49, "deletions": 56}, "files": [{"sha": "0182147683aa37f3ba2d93fa66a7b133e0b58ea7", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/607d0c2a14c4f5f6c7341f8879c9bc80414f5080/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607d0c2a14c4f5f6c7341f8879c9bc80414f5080/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=607d0c2a14c4f5f6c7341f8879c9bc80414f5080", "patch": "@@ -1160,7 +1160,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                 let node_id = self.next_node_id();\n \n                                 // Add a definition for the in-band const def.\n-                                self.create_def(\n+                                let def_id = self.create_def(\n                                     parent_def_id.def_id,\n                                     node_id,\n                                     DefPathData::AnonConst,\n@@ -1176,6 +1176,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                 };\n \n                                 let ct = self.with_new_scopes(|this| hir::AnonConst {\n+                                    def_id,\n                                     hir_id: this.lower_node_id(node_id),\n                                     body: this.lower_const_body(path_expr.span, Some(&path_expr)),\n                                 });\n@@ -2346,6 +2347,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n     fn lower_anon_const(&mut self, c: &AnonConst) -> hir::AnonConst {\n         self.with_new_scopes(|this| hir::AnonConst {\n+            def_id: this.local_def_id(c.id),\n             hir_id: this.lower_node_id(c.id),\n             body: this.lower_const_body(c.value.span, Some(&c.value)),\n         })"}, {"sha": "27da33581a1a9d33b2d64db12e13addb63bdc391", "filename": "compiler/rustc_codegen_ssa/src/mono_item.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/607d0c2a14c4f5f6c7341f8879c9bc80414f5080/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607d0c2a14c4f5f6c7341f8879c9bc80414f5080/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmono_item.rs?ref=607d0c2a14c4f5f6c7341f8879c9bc80414f5080", "patch": "@@ -40,12 +40,12 @@ impl<'a, 'tcx: 'a> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {\n                         .iter()\n                         .map(|(op, op_sp)| match *op {\n                             hir::InlineAsmOperand::Const { ref anon_const } => {\n-                                let anon_const_def_id =\n-                                    cx.tcx().hir().local_def_id(anon_const.hir_id).to_def_id();\n-                                let const_value =\n-                                    cx.tcx().const_eval_poly(anon_const_def_id).unwrap_or_else(\n-                                        |_| span_bug!(*op_sp, \"asm const cannot be resolved\"),\n-                                    );\n+                                let const_value = cx\n+                                    .tcx()\n+                                    .const_eval_poly(anon_const.def_id.to_def_id())\n+                                    .unwrap_or_else(|_| {\n+                                        span_bug!(*op_sp, \"asm const cannot be resolved\")\n+                                    });\n                                 let ty = cx\n                                     .tcx()\n                                     .typeck_body(anon_const.body)"}, {"sha": "f87254b96c916420aaafac0d0849653798a57d97", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/607d0c2a14c4f5f6c7341f8879c9bc80414f5080/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607d0c2a14c4f5f6c7341f8879c9bc80414f5080/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=607d0c2a14c4f5f6c7341f8879c9bc80414f5080", "patch": "@@ -1617,7 +1617,7 @@ pub enum ArrayLen {\n impl ArrayLen {\n     pub fn hir_id(&self) -> HirId {\n         match self {\n-            &ArrayLen::Infer(hir_id, _) | &ArrayLen::Body(AnonConst { hir_id, body: _ }) => hir_id,\n+            &ArrayLen::Infer(hir_id, _) | &ArrayLen::Body(AnonConst { hir_id, .. }) => hir_id,\n         }\n     }\n }\n@@ -1633,6 +1633,7 @@ impl ArrayLen {\n #[derive(Copy, Clone, PartialEq, Eq, Encodable, Debug, HashStable_Generic)]\n pub struct AnonConst {\n     pub hir_id: HirId,\n+    pub def_id: LocalDefId,\n     pub body: BodyId,\n }\n \n@@ -3550,7 +3551,7 @@ mod size_asserts {\n     static_assert_size!(FnDecl<'_>, 40);\n     static_assert_size!(ForeignItem<'_>, 72);\n     static_assert_size!(ForeignItemKind<'_>, 40);\n-    static_assert_size!(GenericArg<'_>, 24);\n+    static_assert_size!(GenericArg<'_>, 32);\n     static_assert_size!(GenericBound<'_>, 48);\n     static_assert_size!(Generics<'_>, 56);\n     static_assert_size!(Impl<'_>, 80);"}, {"sha": "449093df616149d68174f1c5e4f4f44baaba6ffb", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/607d0c2a14c4f5f6c7341f8879c9bc80414f5080/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607d0c2a14c4f5f6c7341f8879c9bc80414f5080/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=607d0c2a14c4f5f6c7341f8879c9bc80414f5080", "patch": "@@ -432,7 +432,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         ty::Const::from_opt_const_arg_anon_const(\n                             tcx,\n                             ty::WithOptConstParam {\n-                                did: tcx.hir().local_def_id(ct.value.hir_id),\n+                                did: ct.value.def_id,\n                                 const_param_did: Some(param.def_id),\n                             },\n                         )\n@@ -570,8 +570,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             ConvertedBindingKind::Equality(self.ast_ty_to_ty(ty).into())\n                         }\n                         hir::Term::Const(ref c) => {\n-                            let local_did = self.tcx().hir().local_def_id(c.hir_id);\n-                            let c = Const::from_anon_const(self.tcx(), local_did);\n+                            let c = Const::from_anon_const(self.tcx(), c.def_id);\n                             ConvertedBindingKind::Equality(c.into())\n                         }\n                     },\n@@ -2712,16 +2711,15 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 let length = match length {\n                     &hir::ArrayLen::Infer(_, span) => self.ct_infer(tcx.types.usize, None, span),\n                     hir::ArrayLen::Body(constant) => {\n-                        let length_def_id = tcx.hir().local_def_id(constant.hir_id);\n-                        ty::Const::from_anon_const(tcx, length_def_id)\n+                        ty::Const::from_anon_const(tcx, constant.def_id)\n                     }\n                 };\n \n                 let array_ty = tcx.mk_ty(ty::Array(self.ast_ty_to_ty(ty), length));\n                 self.normalize_ty(ast_ty.span, array_ty)\n             }\n             hir::TyKind::Typeof(ref e) => {\n-                let ty_erased = tcx.type_of(tcx.hir().local_def_id(e.hir_id));\n+                let ty_erased = tcx.type_of(e.def_id);\n                 let ty = tcx.fold_regions(ty_erased, |r, _| {\n                     if r.is_erased() { tcx.lifetimes.re_static } else { r }\n                 });"}, {"sha": "a9b2ea1d894bf17df8df979e624752709a22552b", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/607d0c2a14c4f5f6c7341f8879c9bc80414f5080/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607d0c2a14c4f5f6c7341f8879c9bc80414f5080/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=607d0c2a14c4f5f6c7341f8879c9bc80414f5080", "patch": "@@ -297,9 +297,8 @@ impl<'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n                 hir::GenericParamKind::Const { default, .. } => {\n                     self.tcx.ensure().type_of(param.def_id);\n                     if let Some(default) = default {\n-                        let default_def_id = self.tcx.hir().local_def_id(default.hir_id);\n                         // need to store default and type of default\n-                        self.tcx.ensure().type_of(default_def_id);\n+                        self.tcx.ensure().type_of(default.def_id);\n                         self.tcx.ensure().const_param_default(param.def_id);\n                     }\n                 }\n@@ -877,7 +876,7 @@ fn adt_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> ty::AdtDef<'tcx> {\n \n                     let discr = if let Some(ref e) = v.disr_expr {\n                         distance_from_explicit = 0;\n-                        ty::VariantDiscr::Explicit(tcx.hir().local_def_id(e.hir_id).to_def_id())\n+                        ty::VariantDiscr::Explicit(e.def_id.to_def_id())\n                     } else {\n                         ty::VariantDiscr::Relative(distance_from_explicit)\n                     };"}, {"sha": "e2da580de0c664ea885410952eb7571beacfcf07", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/607d0c2a14c4f5f6c7341f8879c9bc80414f5080/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607d0c2a14c4f5f6c7341f8879c9bc80414f5080/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=607d0c2a14c4f5f6c7341f8879c9bc80414f5080", "patch": "@@ -316,10 +316,9 @@ fn const_evaluatable_predicates_of<'tcx>(\n \n     impl<'tcx> intravisit::Visitor<'tcx> for ConstCollector<'tcx> {\n         fn visit_anon_const(&mut self, c: &'tcx hir::AnonConst) {\n-            let def_id = self.tcx.hir().local_def_id(c.hir_id);\n-            let ct = ty::Const::from_anon_const(self.tcx, def_id);\n+            let ct = ty::Const::from_anon_const(self.tcx, c.def_id);\n             if let ty::ConstKind::Unevaluated(_) = ct.kind() {\n-                let span = self.tcx.hir().span(c.hir_id);\n+                let span = self.tcx.def_span(c.def_id);\n                 self.preds.insert((\n                     ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(ct))\n                         .to_predicate(self.tcx),"}, {"sha": "97d05b4f95c4c855ebd58fd94f84cdf290337e41", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/607d0c2a14c4f5f6c7341f8879c9bc80414f5080/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607d0c2a14c4f5f6c7341f8879c9bc80414f5080/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=607d0c2a14c4f5f6c7341f8879c9bc80414f5080", "patch": "@@ -488,9 +488,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         match length {\n             &hir::ArrayLen::Infer(_, span) => self.ct_infer(self.tcx.types.usize, None, span),\n             hir::ArrayLen::Body(anon_const) => {\n-                let const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);\n-                let span = self.tcx.hir().span(anon_const.hir_id);\n-                let c = ty::Const::from_anon_const(self.tcx, const_def_id);\n+                let span = self.tcx.def_span(anon_const.def_id);\n+                let c = ty::Const::from_anon_const(self.tcx, anon_const.def_id);\n                 self.register_wf_obligation(c.into(), span, ObligationCauseCode::WellFormed(None));\n                 self.normalize_associated_types_in(span, c)\n             }\n@@ -502,10 +501,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ast_c: &hir::AnonConst,\n         param_def_id: DefId,\n     ) -> ty::Const<'tcx> {\n-        let const_def = ty::WithOptConstParam {\n-            did: self.tcx.hir().local_def_id(ast_c.hir_id),\n-            const_param_did: Some(param_def_id),\n-        };\n+        let const_def =\n+            ty::WithOptConstParam { did: ast_c.def_id, const_param_did: Some(param_def_id) };\n         let c = ty::Const::from_opt_const_arg_anon_const(self.tcx, const_def);\n         self.register_wf_obligation(\n             c.into(),"}, {"sha": "19ae3176795cc5d5cf51f33d1db4a049a9466888", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607d0c2a14c4f5f6c7341f8879c9bc80414f5080/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607d0c2a14c4f5f6c7341f8879c9bc80414f5080/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=607d0c2a14c4f5f6c7341f8879c9bc80414f5080", "patch": "@@ -1407,7 +1407,7 @@ impl<'hir> Visitor<'hir> for ItemCollector<'hir> {\n     }\n \n     fn visit_anon_const(&mut self, c: &'hir AnonConst) {\n-        self.body_owners.push(self.tcx.hir().local_def_id(c.hir_id));\n+        self.body_owners.push(c.def_id);\n         intravisit::walk_anon_const(self, c)\n     }\n "}, {"sha": "37153a639440575569f96fc00e8b2a57c8540173", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/607d0c2a14c4f5f6c7341f8879c9bc80414f5080/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607d0c2a14c4f5f6c7341f8879c9bc80414f5080/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=607d0c2a14c4f5f6c7341f8879c9bc80414f5080", "patch": "@@ -266,9 +266,9 @@ impl<'tcx> Const<'tcx> {\n pub fn const_param_default<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Const<'tcx> {\n     let default_def_id = match tcx.hir().get_by_def_id(def_id.expect_local()) {\n         hir::Node::GenericParam(hir::GenericParam {\n-            kind: hir::GenericParamKind::Const { ty: _, default: Some(ac) },\n+            kind: hir::GenericParamKind::Const { default: Some(ac), .. },\n             ..\n-        }) => tcx.hir().local_def_id(ac.hir_id),\n+        }) => ac.def_id,\n         _ => span_bug!(\n             tcx.def_span(def_id),\n             \"`const_param_default` expected a generic parameter with a constant\""}, {"sha": "57382f5e1bdb2c4f6faf9683766d49a0320f0c68", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/607d0c2a14c4f5f6c7341f8879c9bc80414f5080/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607d0c2a14c4f5f6c7341f8879c9bc80414f5080/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=607d0c2a14c4f5f6c7341f8879c9bc80414f5080", "patch": "@@ -608,24 +608,22 @@ impl<'tcx> Cx<'tcx> {\n                             out_expr: out_expr.as_ref().map(|expr| self.mirror_expr(expr)),\n                         },\n                         hir::InlineAsmOperand::Const { ref anon_const } => {\n-                            let anon_const_def_id = tcx.hir().local_def_id(anon_const.hir_id);\n                             let value = mir::ConstantKind::from_anon_const(\n                                 tcx,\n-                                anon_const_def_id,\n+                                anon_const.def_id,\n                                 self.param_env,\n                             );\n-                            let span = tcx.hir().span(anon_const.hir_id);\n+                            let span = tcx.def_span(anon_const.def_id);\n \n                             InlineAsmOperand::Const { value, span }\n                         }\n                         hir::InlineAsmOperand::SymFn { ref anon_const } => {\n-                            let anon_const_def_id = tcx.hir().local_def_id(anon_const.hir_id);\n                             let value = mir::ConstantKind::from_anon_const(\n                                 tcx,\n-                                anon_const_def_id,\n+                                anon_const.def_id,\n                                 self.param_env,\n                             );\n-                            let span = tcx.hir().span(anon_const.hir_id);\n+                            let span = tcx.def_span(anon_const.def_id);\n \n                             InlineAsmOperand::SymFn { value, span }\n                         }\n@@ -640,7 +638,7 @@ impl<'tcx> Cx<'tcx> {\n \n             hir::ExprKind::ConstBlock(ref anon_const) => {\n                 let ty = self.typeck_results().node_type(anon_const.hir_id);\n-                let did = tcx.hir().local_def_id(anon_const.hir_id).to_def_id();\n+                let did = anon_const.def_id.to_def_id();\n                 let typeck_root_def_id = tcx.typeck_root_def_id(did);\n                 let parent_substs =\n                     tcx.erase_regions(InternalSubsts::identity_for_item(tcx, typeck_root_def_id));"}, {"sha": "c8e58b9cef732f327108694eb83a202e96289818", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/607d0c2a14c4f5f6c7341f8879c9bc80414f5080/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607d0c2a14c4f5f6c7341f8879c9bc80414f5080/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=607d0c2a14c4f5f6c7341f8879c9bc80414f5080", "patch": "@@ -565,8 +565,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         id: hir::HirId,\n         span: Span,\n     ) -> PatKind<'tcx> {\n-        let anon_const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);\n-        let value = mir::ConstantKind::from_inline_const(self.tcx, anon_const_def_id);\n+        let value = mir::ConstantKind::from_inline_const(self.tcx, anon_const.def_id);\n \n         // Evaluate early like we do in `lower_path`.\n         let value = value.eval(self.tcx, self.param_env);"}, {"sha": "d50f5cd0018b4bb13999d8bfaaf385afe14b25f6", "filename": "src/test/ui/stats/hir-stats.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/607d0c2a14c4f5f6c7341f8879c9bc80414f5080/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/607d0c2a14c4f5f6c7341f8879c9bc80414f5080/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr?ref=607d0c2a14c4f5f6c7341f8879c9bc80414f5080", "patch": "@@ -119,33 +119,33 @@ hir-stats HIR STATS\n hir-stats Name                Accumulated Size         Count     Item Size\n hir-stats ----------------------------------------------------------------\n hir-stats ForeignItemRef            24 ( 0.3%)             1            24\n-hir-stats Lifetime                  32 ( 0.4%)             1            32\n-hir-stats Mod                       32 ( 0.4%)             1            32\n+hir-stats Lifetime                  32 ( 0.3%)             1            32\n+hir-stats Mod                       32 ( 0.3%)             1            32\n hir-stats ExprField                 40 ( 0.4%)             1            40\n hir-stats TraitItemRef              56 ( 0.6%)             2            28\n hir-stats Local                     64 ( 0.7%)             1            64\n hir-stats Param                     64 ( 0.7%)             2            32\n hir-stats InlineAsm                 72 ( 0.8%)             1            72\n hir-stats ImplItemRef               72 ( 0.8%)             2            36\n-hir-stats Body                      96 ( 1.1%)             3            32\n-hir-stats GenericArg                96 ( 1.1%)             4            24\n-hir-stats - Type                      24 ( 0.3%)             1\n-hir-stats - Lifetime                  72 ( 0.8%)             3\n-hir-stats FieldDef                  96 ( 1.1%)             2            48\n-hir-stats Arm                       96 ( 1.1%)             2            48\n-hir-stats Stmt                      96 ( 1.1%)             3            32\n-hir-stats - Local                     32 ( 0.4%)             1\n-hir-stats - Semi                      32 ( 0.4%)             1\n-hir-stats - Expr                      32 ( 0.4%)             1\n+hir-stats Body                      96 ( 1.0%)             3            32\n+hir-stats FieldDef                  96 ( 1.0%)             2            48\n+hir-stats Arm                       96 ( 1.0%)             2            48\n+hir-stats Stmt                      96 ( 1.0%)             3            32\n+hir-stats - Local                     32 ( 0.3%)             1\n+hir-stats - Semi                      32 ( 0.3%)             1\n+hir-stats - Expr                      32 ( 0.3%)             1\n hir-stats FnDecl                   120 ( 1.3%)             3            40\n hir-stats Attribute                128 ( 1.4%)             4            32\n+hir-stats GenericArg               128 ( 1.4%)             4            32\n+hir-stats - Type                      32 ( 0.3%)             1\n+hir-stats - Lifetime                  96 ( 1.0%)             3\n hir-stats GenericArgs              144 ( 1.6%)             3            48\n-hir-stats Variant                  160 ( 1.8%)             2            80\n+hir-stats Variant                  160 ( 1.7%)             2            80\n hir-stats GenericBound             192 ( 2.1%)             4            48\n hir-stats - Trait                    192 ( 2.1%)             4\n hir-stats WherePredicate           192 ( 2.1%)             3            64\n hir-stats - BoundPredicate           192 ( 2.1%)             3\n-hir-stats Block                    288 ( 3.2%)             6            48\n+hir-stats Block                    288 ( 3.1%)             6            48\n hir-stats Pat                      360 ( 3.9%)             5            72\n hir-stats - Wild                      72 ( 0.8%)             1\n hir-stats - Struct                    72 ( 0.8%)             1\n@@ -169,10 +169,10 @@ hir-stats - Enum                      80 ( 0.9%)             1\n hir-stats - ExternCrate               80 ( 0.9%)             1\n hir-stats - ForeignMod                80 ( 0.9%)             1\n hir-stats - Impl                      80 ( 0.9%)             1\n-hir-stats - Fn                       160 ( 1.8%)             2\n+hir-stats - Fn                       160 ( 1.7%)             2\n hir-stats - Use                      400 ( 4.4%)             5\n hir-stats Path                   1_280 (14.0%)            32            40\n hir-stats PathSegment            1_920 (21.0%)            40            48\n hir-stats ----------------------------------------------------------------\n-hir-stats Total                  9_128\n+hir-stats Total                  9_160\n hir-stats"}]}