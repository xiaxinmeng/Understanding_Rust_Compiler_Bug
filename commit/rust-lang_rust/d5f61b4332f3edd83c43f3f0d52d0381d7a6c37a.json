{"sha": "d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ZjYxYjQzMzJmM2VkZDgzYzQzZjNmMGQ1MmQwMzgxZDdhNmMzN2E=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-02-01T01:02:00Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-02-02T18:40:18Z"}, "message": "`for x in xs.iter_mut()` -> `for x in &mut xs`\n\nAlso `for x in option.iter_mut()` -> `if let Some(ref mut x) = option`", "tree": {"sha": "5dd02b3ea2b96cfd984f9b9a795ee65d4690c5af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dd02b3ea2b96cfd984f9b9a795ee65d4690c5af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "html_url": "https://github.com/rust-lang/rust/commit/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/comments", "author": null, "committer": null, "parents": [{"sha": "d5d7e6565a4034b93d19be1edafd20730a4276bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5d7e6565a4034b93d19be1edafd20730a4276bc", "html_url": "https://github.com/rust-lang/rust/commit/d5d7e6565a4034b93d19be1edafd20730a4276bc"}], "stats": {"total": 108, "additions": 54, "deletions": 54}, "files": [{"sha": "da00b25bbbc3ad34ad049728d433a80c73f847d5", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -431,7 +431,7 @@ impl Bitv {\n     /// ```\n     #[inline]\n     pub fn set_all(&mut self) {\n-        for w in self.storage.iter_mut() { *w = !0u32; }\n+        for w in &mut self.storage { *w = !0u32; }\n         self.fix_last_block();\n     }\n \n@@ -451,7 +451,7 @@ impl Bitv {\n     /// ```\n     #[inline]\n     pub fn negate(&mut self) {\n-        for w in self.storage.iter_mut() { *w = !*w; }\n+        for w in &mut self.storage { *w = !*w; }\n         self.fix_last_block();\n     }\n \n@@ -912,7 +912,7 @@ impl Bitv {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn clear(&mut self) {\n-        for w in self.storage.iter_mut() { *w = 0u32; }\n+        for w in &mut self.storage { *w = 0u32; }\n     }\n }\n "}, {"sha": "b7d16b864fd052a8993044accfdfaf633038ce59", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -1869,7 +1869,7 @@ mod tests {\n \n         b.iter(|| {\n             let mut sum = 0;\n-            for i in ring.iter_mut() {\n+            for i in &mut ring {\n                 sum += *i;\n             }\n             test::black_box(sum);"}, {"sha": "3830ab9ee7b17f15af3ba1be136c1b867bbc2f3e", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -1228,7 +1228,7 @@ impl Iterator for ElementSwaps {\n                 self.sdir.swap(i, j);\n \n                 // Swap the direction of each larger SizeDirection\n-                for x in self.sdir.iter_mut() {\n+                for x in &mut self.sdir {\n                     if x.size > sd.size {\n                         x.dir = match x.dir { Pos => Neg, Neg => Pos };\n                     }\n@@ -2356,7 +2356,7 @@ mod tests {\n     #[test]\n     fn test_mut_iterator() {\n         let mut xs = [1, 2, 3, 4, 5];\n-        for x in xs.iter_mut() {\n+        for x in &mut xs {\n             *x += 1;\n         }\n         assert!(xs == [2, 3, 4, 5, 6])\n@@ -2656,15 +2656,15 @@ mod tests {\n                 let left: &[_] = left;\n                 assert!(left[..left.len()] == [1, 2][]);\n             }\n-            for p in left.iter_mut() {\n+            for p in left {\n                 *p += 1;\n             }\n \n             {\n                 let right: &[_] = right;\n                 assert!(right[..right.len()] == [3, 4, 5][]);\n             }\n-            for p in right.iter_mut() {\n+            for p in right {\n                 *p += 2;\n             }\n         }\n@@ -2693,7 +2693,7 @@ mod tests {\n         }\n         assert_eq!(cnt, 5);\n \n-        for f in v.iter_mut() {\n+        for f in &mut v {\n             assert!(*f == Foo);\n             cnt += 1;\n         }\n@@ -2796,7 +2796,7 @@ mod tests {\n         let mut v = [0u8, 1, 2, 3, 4, 5, 6];\n         assert_eq!(v.chunks_mut(2).len(), 4);\n         for (i, chunk) in v.chunks_mut(3).enumerate() {\n-            for x in chunk.iter_mut() {\n+            for x in chunk {\n                 *x = i as u8;\n             }\n         }\n@@ -2808,7 +2808,7 @@ mod tests {\n     fn test_mut_chunks_rev() {\n         let mut v = [0u8, 1, 2, 3, 4, 5, 6];\n         for (i, chunk) in v.chunks_mut(3).rev().enumerate() {\n-            for x in chunk.iter_mut() {\n+            for x in chunk {\n                 *x = i as u8;\n             }\n         }\n@@ -2872,7 +2872,7 @@ mod bench {\n \n         b.iter(|| {\n             let mut i = 0;\n-            for x in v.iter_mut() {\n+            for x in &mut v {\n                 *x = i;\n                 i += 1;\n             }\n@@ -3006,7 +3006,7 @@ mod bench {\n             unsafe {\n                 v.set_len(1024);\n             }\n-            for x in v.iter_mut() {\n+            for x in &mut v {\n                 *x = 0;\n             }\n             v"}, {"sha": "acf4b480dfb5539632aa20a7c847b91baeef4ba7", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -2022,7 +2022,7 @@ mod tests {\n         {\n             let slice = &mut values[2 ..];\n             assert!(slice == [3, 4, 5]);\n-            for p in slice.iter_mut() {\n+            for p in slice {\n                 *p += 2;\n             }\n         }\n@@ -2036,7 +2036,7 @@ mod tests {\n         {\n             let slice = &mut values[.. 2];\n             assert!(slice == [1, 2]);\n-            for p in slice.iter_mut() {\n+            for p in slice {\n                 *p += 1;\n             }\n         }\n@@ -2053,15 +2053,15 @@ mod tests {\n                 let left: &[_] = left;\n                 assert!(&left[..left.len()] == &[1, 2][]);\n             }\n-            for p in left.iter_mut() {\n+            for p in left {\n                 *p += 1;\n             }\n \n             {\n                 let right: &[_] = right;\n                 assert!(&right[..right.len()] == &[3, 4, 5][]);\n             }\n-            for p in right.iter_mut() {\n+            for p in right {\n                 *p += 2;\n             }\n         }\n@@ -2137,7 +2137,7 @@ mod tests {\n         v.push(());\n         assert_eq!(v.iter_mut().count(), 4);\n \n-        for &mut () in v.iter_mut() {}\n+        for &mut () in &mut v {}\n         unsafe { v.set_len(0); }\n         assert_eq!(v.iter_mut().count(), 0);\n     }"}, {"sha": "b07e172079e5774ec1da4ba89c4ee1f840f6e24c", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -924,7 +924,7 @@ mod test_map {\n         assert!(m.insert(6, 10).is_none());\n         assert!(m.insert(10, 11).is_none());\n \n-        for (k, v) in m.iter_mut() {\n+        for (k, v) in &mut m {\n             *v += k as int;\n         }\n "}, {"sha": "b6b6c52d56802db6a3395413276254c2ba9a65db", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -2205,7 +2205,7 @@ impl<A, B, I, U, F> Iterator for FlatMap<A, B, I, U, F> where\n     #[inline]\n     fn next(&mut self) -> Option<B> {\n         loop {\n-            for inner in self.frontiter.iter_mut() {\n+            if let Some(ref mut inner) = self.frontiter {\n                 for x in inner.by_ref() {\n                     return Some(x)\n                 }\n@@ -2238,7 +2238,7 @@ impl<A, B, I, U, F> DoubleEndedIterator for FlatMap<A, B, I, U, F> where\n     #[inline]\n     fn next_back(&mut self) -> Option<B> {\n         loop {\n-            for inner in self.backiter.iter_mut() {\n+            if let Some(ref mut inner) = self.backiter {\n                 match inner.next_back() {\n                     None => (),\n                     y => return y"}, {"sha": "aef6301dad7782db6903df2a11fe851a5fa366f8", "filename": "src/librand/chacha.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrand%2Fchacha.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrand%2Fchacha.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fchacha.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -194,7 +194,7 @@ impl<'a> SeedableRng<&'a [u32]> for ChaChaRng {\n impl Rand for ChaChaRng {\n     fn rand<R: Rng>(other: &mut R) -> ChaChaRng {\n         let mut key : [u32; KEY_WORDS] = [0; KEY_WORDS];\n-        for word in key.iter_mut() {\n+        for word in &mut key {\n             *word = other.gen();\n         }\n         SeedableRng::from_seed(key.as_slice())"}, {"sha": "4958784f614503cd031ff6e658d73a14e6cc7ca2", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -123,7 +123,7 @@ impl<'a, T: Clone> WeightedChoice<'a, T> {\n         // we convert the list from individual weights to cumulative\n         // weights so we can binary search. This *could* drop elements\n         // with weight == 0 as an optimisation.\n-        for item in items.iter_mut() {\n+        for item in &mut *items {\n             running_total = match running_total.checked_add(item.weight) {\n                 Some(n) => n,\n                 None => panic!(\"WeightedChoice::new called with a total weight \\"}, {"sha": "5290e68033306c0da9423e99fb49dd4452d216b9", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -154,7 +154,7 @@ pub trait Rng : Sized {\n         // optimisations are on.\n         let mut count = 0;\n         let mut num = 0;\n-        for byte in dest.iter_mut() {\n+        for byte in dest {\n             if count == 0 {\n                 // we could micro-optimise here by generating a u32 if\n                 // we only need a few more bytes to fill the vector"}, {"sha": "2bc29e61d0d2b2493e753f3bd5ba6ffdece21eee", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -329,7 +329,7 @@ macro_rules! run_lints { ($cx:expr, $f:ident, $($args:expr),*) => ({\n     // Move the vector of passes out of `$cx` so that we can\n     // iterate over it mutably while passing `$cx` to the methods.\n     let mut passes = $cx.lints.passes.take().unwrap();\n-    for obj in passes.iter_mut() {\n+    for obj in &mut passes {\n         obj.$f($cx, $($args),*);\n     }\n     $cx.lints.passes = Some(passes);"}, {"sha": "8f5906db589003dd27aaa7292e796b6c258e6921", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -501,7 +501,7 @@ impl<'a, 'b, 'tcx, O:DataFlowOperator> PropagationContext<'a, 'b, 'tcx, O> {\n \n     fn reset(&mut self, bits: &mut [uint]) {\n         let e = if self.dfcx.oper.initial_value() {uint::MAX} else {0};\n-        for b in bits.iter_mut() {\n+        for b in bits {\n             *b = e;\n         }\n     }"}, {"sha": "17b62e463dae3d17ec2d3428707e7f9bbdd8fa88", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -335,7 +335,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                                   same_frs: &FreeRegionsFromSameFn) {\n             let scope_id = same_frs.scope_id;\n             let (sub_fr, sup_fr) = (same_frs.sub_fr, same_frs.sup_fr);\n-            for sr in same_regions.iter_mut() {\n+            for sr in &mut *same_regions {\n                 if sr.contains(&sup_fr.bound_region)\n                    && scope_id == sr.scope_id {\n                     sr.push(sub_fr.bound_region);"}, {"sha": "d9e86bd4b6d68d466c0a8cf147efb16405b0577a", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -95,7 +95,7 @@ fn group_errors_with_same_origin<'tcx>(errors: &Vec<MoveError<'tcx>>)\n         } else {\n             Vec::new()\n         };\n-        for ge in grouped_errors.iter_mut() {\n+        for ge in &mut *grouped_errors {\n             if move_from_id == ge.move_from.id && error.move_to.is_some() {\n                 debug!(\"appending move_to to list\");\n                 ge.move_to_places.extend(move_to.into_iter());"}, {"sha": "2484e74e19349a9f2aa30398d255ba1432a09fa3", "filename": "src/librustc_trans/trans/cabi_x86_64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -151,7 +151,7 @@ fn classify_ty(ty: Type) -> Vec<RegClass> {\n     }\n \n     fn all_mem(cls: &mut [RegClass]) {\n-        for elt in cls.iter_mut() {\n+        for elt in cls {\n             *elt = Memory;\n         }\n     }"}, {"sha": "291a88d17c1b82d2c6cc3d2149ed0d43053943d3", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -2050,7 +2050,7 @@ fn prepare_struct_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n     // The `Ty` values returned by `ty::struct_fields` can still contain\n     // `ty_projection` variants, so normalize those away.\n-    for field in fields.iter_mut() {\n+    for field in &mut fields {\n         field.mt.ty = monomorphize::normalize_associated_type(cx.tcx(), &field.mt.ty);\n     }\n "}, {"sha": "3bf34dfcd7013b37cf8ef7f3a6f01fe942d1cc0c", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -733,7 +733,7 @@ fn ast_type_binding_to_projection_predicate<'tcx>(\n     // If converting for an object type, then remove the dummy-ty from `Self` now.\n     // Yuckety yuck.\n     if self_ty.is_none() {\n-        for candidate in candidates.iter_mut() {\n+        for candidate in &mut candidates {\n             let mut dummy_substs = candidate.0.substs.clone();\n             assert!(dummy_substs.self_ty() == Some(dummy_self_ty));\n             dummy_substs.types.pop(SelfSpace);"}, {"sha": "d80b8791c2655dfec0eb9abdcfeb312d0c022e77", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -1341,7 +1341,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// ! gets replaced with (), unconstrained ints with i32, and unconstrained floats with f64.\n     pub fn default_type_parameters(&self) {\n         use middle::ty::UnconstrainedNumeric::{UnconstrainedInt, UnconstrainedFloat, Neither};\n-        for (_, &mut ref ty) in self.inh.node_types.borrow_mut().iter_mut() {\n+        for (_, &mut ref ty) in &mut *self.inh.node_types.borrow_mut() {\n             let resolved = self.infcx().resolve_type_vars_if_possible(ty);\n             if self.infcx().type_var_diverges(resolved) {\n                 demand::eqtype(self, codemap::DUMMY_SP, *ty, ty::mk_nil(self.tcx()));"}, {"sha": "ddb485d9776d14d244d643494aed017142b0295c", "filename": "src/librustc_typeck/rscope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrustc_typeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrustc_typeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Frscope.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -165,7 +165,7 @@ impl<'r> RegionScope for ShiftedRscope<'r> {\n     {\n         match self.base_scope.anon_regions(span, count) {\n             Ok(mut v) => {\n-                for r in v.iter_mut() {\n+                for r in &mut v {\n                     *r = ty_fold::shift_region(*r, 1);\n                 }\n                 Ok(v)"}, {"sha": "07679480bfb39ef6f6f2702070d99df4c98cdf09", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -166,7 +166,7 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n                 _ => unreachable!(),\n             };\n             let mut tmp = Vec::new();\n-            for child in m.items.iter_mut() {\n+            for child in &mut m.items {\n                 match child.inner {\n                     ModuleItem(..) => {}\n                     _ => continue,"}, {"sha": "80e72777f9381856a16517233ae53e45ee752bee", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -1270,7 +1270,7 @@ impl Context {\n             v.push(NameDoc(myname, Some(shorter_line(item.doc_value()))));\n         }\n \n-        for (_, items) in map.iter_mut() {\n+        for (_, items) in &mut map {\n             items.sort();\n         }\n         return map;"}, {"sha": "274c669d8dfc2ce902dafc027b35275a7006a6fd", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -134,15 +134,15 @@ impl AsciiExt<Vec<u8>> for [u8] {\n impl OwnedAsciiExt for Vec<u8> {\n     #[inline]\n     fn into_ascii_uppercase(mut self) -> Vec<u8> {\n-        for byte in self.iter_mut() {\n+        for byte in &mut self {\n             *byte = byte.to_ascii_uppercase();\n         }\n         self\n     }\n \n     #[inline]\n     fn into_ascii_lowercase(mut self) -> Vec<u8> {\n-        for byte in self.iter_mut() {\n+        for byte in &mut self {\n             *byte = byte.to_ascii_lowercase();\n         }\n         self"}, {"sha": "d85251795c887d254af8c696f8e57f9a2c9e5fb4", "filename": "src/libstd/old_io/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -125,7 +125,7 @@ impl<'a> Parser<'a> {\n     // Return result of first successful parser\n     fn read_or<T>(&mut self, parsers: &mut [Box<FnMut(&mut Parser) -> Option<T>>])\n                -> Option<T> {\n-        for pf in parsers.iter_mut() {\n+        for pf in parsers {\n             match self.read_atomically(|p: &mut Parser| pf.call_mut((p,))) {\n                 Some(r) => return Some(r),\n                 None => {}"}, {"sha": "f78e3ac1f14dad01c1a2a4583b01026c70cf8b9d", "filename": "src/libstd/old_io/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibstd%2Fold_io%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibstd%2Fold_io%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Futil.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -144,15 +144,15 @@ impl<W> MultiWriter<W> where W: Writer {\n impl<W> Writer for MultiWriter<W> where W: Writer {\n     #[inline]\n     fn write_all(&mut self, buf: &[u8]) -> old_io::IoResult<()> {\n-        for writer in self.writers.iter_mut() {\n+        for writer in &mut self.writers {\n             try!(writer.write_all(buf));\n         }\n         Ok(())\n     }\n \n     #[inline]\n     fn flush(&mut self) -> old_io::IoResult<()> {\n-        for writer in self.writers.iter_mut() {\n+        for writer in &mut self.writers {\n             try!(writer.flush());\n         }\n         Ok(())"}, {"sha": "0eec182e0fc66d5fbcd4b662a5277839b4333a7c", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -444,7 +444,7 @@ pub fn parse(sess: &ParseSess,\n         if token_name_eq(&tok, &token::Eof) {\n             if eof_eis.len() == 1us {\n                 let mut v = Vec::new();\n-                for dv in (&mut eof_eis[0]).matches.iter_mut() {\n+                for dv in &mut (&mut eof_eis[0]).matches {\n                     v.push(dv.pop().unwrap());\n                 }\n                 return Success(nameize(sess, ms, &v[]));"}, {"sha": "9012ec2114d07462f6b3783183ba3dea8953df6c", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -37,7 +37,7 @@ pub trait MoveMap<T> {\n \n impl<T> MoveMap<T> for Vec<T> {\n     fn move_map<F>(mut self, mut f: F) -> Vec<T> where F: FnMut(T) -> T {\n-        for p in self.iter_mut() {\n+        for p in &mut self {\n             unsafe {\n                 // FIXME(#5016) this shouldn't need to zero to be safe.\n                 ptr::write(p, f(ptr::read_and_zero(p)));\n@@ -1117,7 +1117,7 @@ pub fn noop_fold_crate<T: Folder>(Crate {module, attrs, config, mut exported_mac\n         }, vec![], span)\n     };\n \n-    for def in exported_macros.iter_mut() {\n+    for def in &mut exported_macros {\n         def.id = folder.new_id(def.id);\n     }\n "}, {"sha": "63969e996d3164b66742341320ec9ab235a4d9fe", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -1060,15 +1060,15 @@ impl Bencher {\n \n             let loop_run = Duration::span(|| {\n \n-                for p in samples.iter_mut() {\n+                for p in &mut *samples {\n                     self.bench_n(n, |x| f(x));\n                     *p = self.ns_per_iter() as f64;\n                 };\n \n                 stats::winsorize(samples, 5.0);\n                 summ = Some(stats::Summary::new(samples));\n \n-                for p in samples.iter_mut() {\n+                for p in &mut *samples {\n                     self.bench_n(5 * n, |x| f(x));\n                     *p = self.ns_per_iter() as f64;\n                 };"}, {"sha": "0ce115a0c1f3e3fdb6ed2ded8776bbf8e4340c18", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -321,7 +321,7 @@ pub fn winsorize<T: Float + FromPrimitive>(samples: &mut [T], pct: T) {\n     let lo = percentile_of_sorted(tmp.as_slice(), pct);\n     let hundred: T = FromPrimitive::from_uint(100).unwrap();\n     let hi = percentile_of_sorted(tmp.as_slice(), hundred-pct);\n-    for samp in samples.iter_mut() {\n+    for samp in samples {\n         if *samp > hi {\n             *samp = hi\n         } else if *samp < lo {"}, {"sha": "5d17e3a460c4902b706db91e68c335edd9f31011", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -99,7 +99,7 @@ fn main() {\n         thread_ring(0, msg_per_task, num_chan, num_port);\n \n         // synchronize\n-        for f in futures.iter_mut() {\n+        for f in &mut futures {\n             f.get()\n         }\n     });"}, {"sha": "dc5b2f4596ebd7fe2617dce26d057a7bd702f2b5", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -45,7 +45,7 @@ impl Noise2DContext {\n         let mut rng = StdRng::new().unwrap();\n \n         let mut rgradients = [Vec2 { x: 0.0, y: 0.0 }; 256];\n-        for x in rgradients.iter_mut() {\n+        for x in &mut rgradients[] {\n             *x = random_gradient(&mut rng);\n         }\n "}, {"sha": "d061403d5901d175828fb86ad8b82c180020b14a", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -116,9 +116,9 @@ fn transform(piece: Vec<(i32, i32)> , all: bool) -> Vec<Vec<(i32, i32)>> {\n         }).collect();\n \n     // translating to (0, 0) as minimum coordinates.\n-    for cur_piece in res.iter_mut() {\n+    for cur_piece in &mut res {\n         let (dy, dx) = *cur_piece.iter().min_by(|e| *e).unwrap();\n-        for &mut (ref mut y, ref mut x) in cur_piece.iter_mut() {\n+        for &mut (ref mut y, ref mut x) in cur_piece {\n             *y -= dy; *x -= dx;\n         }\n     }"}, {"sha": "a8de1469456cb18d1fb89d3b2557e0c19d20d968", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -109,7 +109,7 @@ fn advance(bodies: &mut [Planet;N_BODIES], dt: f64, steps: int) {\n                 Some(bi) => bi,\n                 None => break\n             };\n-            for bj in b_slice.iter_mut() {\n+            for bj in &mut *b_slice {\n                 let dx = bi.x - bj.x;\n                 let dy = bi.y - bj.y;\n                 let dz = bi.z - bj.z;"}, {"sha": "023ef72c453bb5a2d9580ccc5e84b4e84074000e", "filename": "src/test/compile-fail/vec-mut-iter-borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Ftest%2Fcompile-fail%2Fvec-mut-iter-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Ftest%2Fcompile-fail%2Fvec-mut-iter-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-mut-iter-borrow.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -11,7 +11,7 @@\n fn main() {\n     let mut xs: Vec<isize> = vec!();\n \n-    for x in xs.iter_mut() {\n+    for x in &mut xs {\n         xs.push(1) //~ ERROR cannot borrow `xs`\n     }\n }"}, {"sha": "4b07b1d3b076e72c226422ebf5e11eb97a6ff3a2", "filename": "src/test/run-pass/const-vec-of-fns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -23,7 +23,7 @@ static mut closures: &'static mut [S<fn()>] = &mut [S(f as fn()), S(f as fn())];\n pub fn main() {\n     unsafe {\n         for &bare_fn in bare_fns { bare_fn() }\n-        for closure in closures.iter_mut() {\n+        for closure in &mut *closures {\n             let S(ref mut closure) = *closure;\n             (*closure)()\n         }"}, {"sha": "e074c3fb3d7834fe262f97db131cdad8dd752a1f", "filename": "src/test/run-pass/mutability-inherits-through-fixed-length-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Ftest%2Frun-pass%2Fmutability-inherits-through-fixed-length-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a/src%2Ftest%2Frun-pass%2Fmutability-inherits-through-fixed-length-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutability-inherits-through-fixed-length-vec.rs?ref=d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "patch": "@@ -16,7 +16,7 @@ fn test1() {\n \n fn test2() {\n     let mut ints = [0; 32];\n-    for i in ints.iter_mut() { *i += 22; }\n+    for i in &mut ints { *i += 22; }\n     for i in &ints { assert!(*i == 22); }\n }\n "}]}