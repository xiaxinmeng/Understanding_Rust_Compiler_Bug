{"sha": "9f710530a7c0be1acaa099b12163ec1af8b8cf30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNzEwNTMwYTdjMGJlMWFjYWEwOTliMTIxNjNlYzFhZjhiOGNmMzA=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2017-06-12T04:16:26Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2017-06-14T06:10:59Z"}, "message": "On-demand is_const_fn", "tree": {"sha": "9436a2b30746e14a32545a03fdf37be8a26aeee2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9436a2b30746e14a32545a03fdf37be8a26aeee2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f710530a7c0be1acaa099b12163ec1af8b8cf30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f710530a7c0be1acaa099b12163ec1af8b8cf30", "html_url": "https://github.com/rust-lang/rust/commit/9f710530a7c0be1acaa099b12163ec1af8b8cf30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f710530a7c0be1acaa099b12163ec1af8b8cf30/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e40ef964fe491b19c22dfb8dd36d1eab14223c36", "url": "https://api.github.com/repos/rust-lang/rust/commits/e40ef964fe491b19c22dfb8dd36d1eab14223c36", "html_url": "https://github.com/rust-lang/rust/commit/e40ef964fe491b19c22dfb8dd36d1eab14223c36"}], "stats": {"total": 69, "additions": 39, "deletions": 30}, "files": [{"sha": "c987a37c420d80c84b471805c31110276130da1e", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f710530a7c0be1acaa099b12163ec1af8b8cf30/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f710530a7c0be1acaa099b12163ec1af8b8cf30/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=9f710530a7c0be1acaa099b12163ec1af8b8cf30", "patch": "@@ -339,6 +339,7 @@ define_dep_nodes!(\n     ItemSignature(DefId),\n     ItemVarianceConstraints(DefId),\n     ItemVariances(DefId),\n+    IsConstFn(DefId),\n     IsForeignItem(DefId),\n     TypeParamPredicates { item_id: DefId, param_id: DefId },\n     SizedConstraint(DefId),"}, {"sha": "735da5ca380cef7d85115f46b4a7ef66972ca1d3", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f710530a7c0be1acaa099b12163ec1af8b8cf30/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f710530a7c0be1acaa099b12163ec1af8b8cf30/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=9f710530a7c0be1acaa099b12163ec1af8b8cf30", "patch": "@@ -243,7 +243,6 @@ pub trait CrateStore {\n     fn associated_item_cloned(&self, def: DefId) -> ty::AssociatedItem;\n \n     // flags\n-    fn is_const_fn(&self, did: DefId) -> bool;\n     fn is_dllimport_foreign_item(&self, def: DefId) -> bool;\n     fn is_statically_included_foreign_item(&self, def_id: DefId) -> bool;\n \n@@ -364,7 +363,6 @@ impl CrateStore for DummyCrateStore {\n         { bug!(\"associated_item_cloned\") }\n \n     // flags\n-    fn is_const_fn(&self, did: DefId) -> bool { bug!(\"is_const_fn\") }\n     fn is_dllimport_foreign_item(&self, id: DefId) -> bool { false }\n     fn is_statically_included_foreign_item(&self, def_id: DefId) -> bool { false }\n "}, {"sha": "6ee5bf1392fc6aba0451c0f7e4ceee816c64e0c0", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f710530a7c0be1acaa099b12163ec1af8b8cf30/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f710530a7c0be1acaa099b12163ec1af8b8cf30/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=9f710530a7c0be1acaa099b12163ec1af8b8cf30", "patch": "@@ -476,6 +476,12 @@ impl<'tcx> QueryDescription for queries::is_object_safe<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::is_const_fn<'tcx> {\n+    fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n+        format!(\"checking if item is const fn: `{}`\", tcx.item_path_str(def_id))\n+    }\n+}\n+\n macro_rules! define_maps {\n     (<$tcx:tt>\n      $($(#[$attr:meta])*\n@@ -791,6 +797,9 @@ define_maps! { <'tcx>\n     [] adt_sized_constraint: SizedConstraint(DefId) -> &'tcx [Ty<'tcx>],\n     [] adt_dtorck_constraint: DtorckConstraint(DefId) -> ty::DtorckConstraint<'tcx>,\n \n+    /// True if this is a const fn\n+    [] is_const_fn: IsConstFn(DefId) -> bool,\n+\n     /// True if this is a foreign item (i.e., linked via `extern { ... }`).\n     [] is_foreign_item: IsForeignItem(DefId) -> bool,\n "}, {"sha": "4ce985568ce23adaf9bcfcf4f1d04819566712d5", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f710530a7c0be1acaa099b12163ec1af8b8cf30/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f710530a7c0be1acaa099b12163ec1af8b8cf30/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=9f710530a7c0be1acaa099b12163ec1af8b8cf30", "patch": "@@ -351,7 +351,7 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n                 signal!(e, TypeckError)\n             }\n           } else {\n-            if tcx.sess.cstore.is_const_fn(def_id) {\n+            if tcx.is_const_fn(def_id) {\n                 tcx.sess.cstore.item_body(tcx, def_id)\n             } else {\n                 signal!(e, TypeckError)"}, {"sha": "ac26b04cb7a3c72fa30105bc4c82a1eeec9b1b61", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f710530a7c0be1acaa099b12163ec1af8b8cf30/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f710530a7c0be1acaa099b12163ec1af8b8cf30/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=9f710530a7c0be1acaa099b12163ec1af8b8cf30", "patch": "@@ -899,6 +899,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     reachable::provide(&mut local_providers);\n     rustc_const_eval::provide(&mut local_providers);\n     middle::region::provide(&mut local_providers);\n+    cstore::provide_local(&mut local_providers);\n \n     let mut extern_providers = ty::maps::Providers::default();\n     cstore::provide(&mut extern_providers);"}, {"sha": "4e05244e2d563a36f4557d62de106c5a134e61e1", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f710530a7c0be1acaa099b12163ec1af8b8cf30/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f710530a7c0be1acaa099b12163ec1af8b8cf30/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=9f710530a7c0be1acaa099b12163ec1af8b8cf30", "patch": "@@ -34,7 +34,7 @@ pub use rustc::middle::cstore::{NativeLibrary, NativeLibraryKind, LinkagePrefere\n pub use rustc::middle::cstore::NativeLibraryKind::*;\n pub use rustc::middle::cstore::{CrateSource, LinkMeta, LibSource};\n \n-pub use cstore_impl::provide;\n+pub use cstore_impl::{provide, provide_local};\n \n // A map from external crate numbers (as decoded from some crate file) to\n // local crate numbers (as generated during this session). Each external"}, {"sha": "00c1fdb177db6a981e3053a4097d64712848245c", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9f710530a7c0be1acaa099b12163ec1af8b8cf30/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f710530a7c0be1acaa099b12163ec1af8b8cf30/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=9f710530a7c0be1acaa099b12163ec1af8b8cf30", "patch": "@@ -23,6 +23,7 @@ use rustc::ty::{self, TyCtxt};\n use rustc::ty::maps::Providers;\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::hir::map::{DefKey, DefPath, DisambiguatedDefPathData, DefPathHash};\n+use rustc::hir::map::blocks::FnLikeNode;\n use rustc::hir::map::definitions::{DefPathTable, GlobalMetaDataKind};\n use rustc::util::nodemap::{NodeSet, DefIdMap};\n use rustc_back::PanicStrategy;\n@@ -106,6 +107,7 @@ provide! { <'tcx> tcx, def_id, cdata\n     closure_kind => { cdata.closure_kind(def_id.index) }\n     closure_type => { cdata.closure_ty(def_id.index, tcx) }\n     inherent_impls => { Rc::new(cdata.get_inherent_implementations_for_type(def_id.index)) }\n+    is_const_fn => { cdata.is_const_fn(def_id.index) }\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n     is_default_impl => { cdata.is_default_impl(def_id.index) }\n     describe_def => { cdata.get_def(def_id.index) }\n@@ -131,6 +133,24 @@ provide! { <'tcx> tcx, def_id, cdata\n     is_mir_available => { cdata.is_item_mir_available(def_id.index) }\n }\n \n+pub fn provide_local<'tcx>(providers: &mut Providers<'tcx>) {\n+    fn is_const_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool {\n+        let node_id = tcx.hir.as_local_node_id(def_id)\n+                             .expect(\"Non-local call to local provider is_const_fn\");\n+\n+        if let Some(fn_like) = FnLikeNode::from_node(tcx.hir.get(node_id)) {\n+            fn_like.constness() == hir::Constness::Const\n+        } else {\n+            false\n+        }\n+    }\n+\n+    *providers = Providers {\n+        is_const_fn,\n+        ..*providers\n+    };\n+}\n+\n impl CrateStore for cstore::CStore {\n     fn crate_data_as_rc_any(&self, krate: CrateNum) -> Rc<Any> {\n         self.get_crate_data(krate)\n@@ -172,12 +192,6 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(def.krate).get_associated_item(def.index)\n     }\n \n-    fn is_const_fn(&self, did: DefId) -> bool\n-    {\n-        self.read_dep_node(did);\n-        self.get_crate_data(did.krate).is_const_fn(did.index)\n-    }\n-\n     fn is_statically_included_foreign_item(&self, def_id: DefId) -> bool\n     {\n         self.do_is_statically_included_foreign_item(def_id)"}, {"sha": "dec0717e9e38355454b4f12311cd79cfdfd92ece", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f710530a7c0be1acaa099b12163ec1af8b8cf30/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f710530a7c0be1acaa099b12163ec1af8b8cf30/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=9f710530a7c0be1acaa099b12163ec1af8b8cf30", "patch": "@@ -34,7 +34,6 @@ use rustc::mir::transform::{MirPass, MirSource};\n use rustc::mir::visit::MutVisitor;\n use rustc::ty::TyCtxt;\n use util::def_use::DefUseAnalysis;\n-use transform::qualify_consts;\n \n pub struct CopyPropagation;\n \n@@ -55,7 +54,7 @@ impl MirPass for CopyPropagation {\n                 return\n             }\n             MirSource::Fn(function_node_id) => {\n-                if qualify_consts::is_const_fn(tcx, tcx.hir.local_def_id(function_node_id)) {\n+                if tcx.is_const_fn(tcx.hir.local_def_id(function_node_id)) {\n                     // Don't run on const functions, as, again, trans might not be able to evaluate\n                     // the optimized IR.\n                     return"}, {"sha": "8342d0ff491ec58bfc0b8d4e7c81227279df379d", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9f710530a7c0be1acaa099b12163ec1af8b8cf30/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f710530a7c0be1acaa099b12163ec1af8b8cf30/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=9f710530a7c0be1acaa099b12163ec1af8b8cf30", "patch": "@@ -19,7 +19,6 @@ use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc::hir;\n use rustc::hir::map as hir_map;\n use rustc::hir::def_id::DefId;\n-use rustc::hir::map::blocks::FnLikeNode;\n use rustc::traits::{self, Reveal};\n use rustc::ty::{self, TyCtxt, Ty, TypeFoldable};\n use rustc::ty::cast::CastTy;\n@@ -109,18 +108,6 @@ impl fmt::Display for Mode {\n     }\n }\n \n-pub fn is_const_fn(tcx: TyCtxt, def_id: DefId) -> bool {\n-    if let Some(node_id) = tcx.hir.as_local_node_id(def_id) {\n-        if let Some(fn_like) = FnLikeNode::from_node(tcx.hir.get(node_id)) {\n-            fn_like.constness() == hir::Constness::Const\n-        } else {\n-            false\n-        }\n-    } else {\n-        tcx.sess.cstore.is_const_fn(def_id)\n-    }\n-}\n-\n struct Qualifier<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     mode: Mode,\n     span: Span,\n@@ -766,7 +753,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 ty::TyFnDef(def_id, _, f) => {\n                     (f.abi() == Abi::PlatformIntrinsic &&\n                      self.tcx.item_name(def_id).as_str().starts_with(\"simd_shuffle\"),\n-                     is_const_fn(self.tcx, def_id))\n+                     self.tcx.is_const_fn(def_id))\n                 }\n                 _ => (false, false)\n             };\n@@ -957,7 +944,7 @@ impl MirPass for QualifyAndPromoteConstants {\n         let def_id = tcx.hir.local_def_id(id);\n         let mode = match src {\n             MirSource::Fn(_) => {\n-                if is_const_fn(tcx, def_id) {\n+                if tcx.is_const_fn(def_id) {\n                     Mode::ConstFn\n                 } else {\n                     Mode::Fn"}, {"sha": "bec4c083905a9c0144431a1a21eeb93d3eb9b89f", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f710530a7c0be1acaa099b12163ec1af8b8cf30/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f710530a7c0be1acaa099b12163ec1af8b8cf30/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=9f710530a7c0be1acaa099b12163ec1af8b8cf30", "patch": "@@ -101,7 +101,7 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n                 fn_like.constness() == hir::Constness::Const\n             })\n         } else {\n-            self.tcx.sess.cstore.is_const_fn(def_id)\n+            self.tcx.is_const_fn(def_id)\n         };\n     }\n }"}, {"sha": "aeade47048223bef2b88e0c0a5781f789f50f646", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f710530a7c0be1acaa099b12163ec1af8b8cf30/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f710530a7c0be1acaa099b12163ec1af8b8cf30/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=9f710530a7c0be1acaa099b12163ec1af8b8cf30", "patch": "@@ -151,7 +151,7 @@ pub fn build_external_trait(cx: &DocContext, did: DefId) -> clean::Trait {\n fn build_external_function(cx: &DocContext, did: DefId) -> clean::Function {\n     let sig = cx.tcx.type_of(did).fn_sig();\n \n-    let constness = if cx.tcx.sess.cstore.is_const_fn(did) {\n+    let constness = if cx.tcx.is_const_fn(did) {\n         hir::Constness::Const\n     } else {\n         hir::Constness::NotConst\n@@ -352,7 +352,7 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n                     clean::TyMethodItem(clean::TyMethod {\n                         unsafety, decl, generics, abi\n                     }) => {\n-                        let constness = if tcx.sess.cstore.is_const_fn(item.def_id) {\n+                        let constness = if tcx.is_const_fn(item.def_id) {\n                             hir::Constness::Const\n                         } else {\n                             hir::Constness::NotConst"}]}