{"sha": "f4afb9d9ec4a8b787acd477c9f3984d0db82087b", "node_id": "C_kwDOAAsO6NoAKGY0YWZiOWQ5ZWM0YThiNzg3YWNkNDc3YzlmMzk4NGQwZGI4MjA4N2I", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-19T08:35:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-19T08:35:52Z"}, "message": "Rollup merge of #103127 - SUPERCILEX:inline-const-uninit, r=scottmcm\n\nMake transpose const and inline\n\nr? `@scottmcm`\n\n- These should have been const from the beginning since we're never going to do more than a transmute.\n- Inline these always because that's what every other method in MaybeUninit which simply casts does. :) Ok, but a stronger justification is that because we're taking in arrays by `self`, not inlining would defeat the whole purpose of using `MaybeUninit` due to the copying.", "tree": {"sha": "9dd3e5ff3ee8d50ea7a5dc7d4813da332ad7e264", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dd3e5ff3ee8d50ea7a5dc7d4813da332ad7e264"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4afb9d9ec4a8b787acd477c9f3984d0db82087b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjT7boCRBK7hj4Ov3rIwAAXsUIAJswMld2TMbCZnnmwwiozuHg\nn2UK5wom6gz1hlyLXz+1p7X3NHPogSjDHXCGZjR136tYFzs5lMF6GyGjk1NsWVK+\nYx+vN4p6WStZKR8L+Ed/qdv57KTAHW4FgsoslSt1dzibv8yR+hR0OETk4v32axqO\niwXpDduSOMpcddyYaDRQf2GldIMJqlOY6dRQ6qEwBJSP8p1O+381z85QDnNWFYCg\nx7iFIzH8Nuqis/pD0XA95gFzio7n1EuWyLbt+8JGo6rtuLw0yXBeUb3qhaa+XSCK\n+iBVhfHweEE7hsQxfBiaJDfOyFibfvObn5wy+MIhkEkgUq6q66S6RusrPNXUMX8=\n=+6OU\n-----END PGP SIGNATURE-----\n", "payload": "tree 9dd3e5ff3ee8d50ea7a5dc7d4813da332ad7e264\nparent 48c5e0c262c4b454ec1c4528b5a9d81d3fc6bde6\nparent 1a1ebb080f181cef75533dc829ec571745b1f174\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1666168552 +0530\ncommitter GitHub <noreply@github.com> 1666168552 +0530\n\nRollup merge of #103127 - SUPERCILEX:inline-const-uninit, r=scottmcm\n\nMake transpose const and inline\n\nr? `@scottmcm`\n\n- These should have been const from the beginning since we're never going to do more than a transmute.\n- Inline these always because that's what every other method in MaybeUninit which simply casts does. :) Ok, but a stronger justification is that because we're taking in arrays by `self`, not inlining would defeat the whole purpose of using `MaybeUninit` due to the copying.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4afb9d9ec4a8b787acd477c9f3984d0db82087b", "html_url": "https://github.com/rust-lang/rust/commit/f4afb9d9ec4a8b787acd477c9f3984d0db82087b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4afb9d9ec4a8b787acd477c9f3984d0db82087b/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48c5e0c262c4b454ec1c4528b5a9d81d3fc6bde6", "url": "https://api.github.com/repos/rust-lang/rust/commits/48c5e0c262c4b454ec1c4528b5a9d81d3fc6bde6", "html_url": "https://github.com/rust-lang/rust/commit/48c5e0c262c4b454ec1c4528b5a9d81d3fc6bde6"}, {"sha": "1a1ebb080f181cef75533dc829ec571745b1f174", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a1ebb080f181cef75533dc829ec571745b1f174", "html_url": "https://github.com/rust-lang/rust/commit/1a1ebb080f181cef75533dc829ec571745b1f174"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "2fd8180f8b2a29a829c028a03dfe02fad512b1f4", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4afb9d9ec4a8b787acd477c9f3984d0db82087b/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4afb9d9ec4a8b787acd477c9f3984d0db82087b/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=f4afb9d9ec4a8b787acd477c9f3984d0db82087b", "patch": "@@ -217,6 +217,7 @@\n #![feature(unboxed_closures)]\n #![feature(unsized_fn_params)]\n #![feature(asm_const)]\n+#![feature(const_transmute_copy)]\n //\n // Target features:\n #![feature(arm_target_feature)]"}, {"sha": "efad9a9391b4c1713679a1360bf5cdee72a2b2c8", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4afb9d9ec4a8b787acd477c9f3984d0db82087b/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4afb9d9ec4a8b787acd477c9f3984d0db82087b/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=f4afb9d9ec4a8b787acd477c9f3984d0db82087b", "patch": "@@ -1297,7 +1297,8 @@ impl<T, const N: usize> MaybeUninit<[T; N]> {\n     /// let data: [MaybeUninit<u8>; 1000] = MaybeUninit::uninit().transpose();\n     /// ```\n     #[unstable(feature = \"maybe_uninit_uninit_array_transpose\", issue = \"96097\")]\n-    pub fn transpose(self) -> [MaybeUninit<T>; N] {\n+    #[inline]\n+    pub const fn transpose(self) -> [MaybeUninit<T>; N] {\n         // SAFETY: T and MaybeUninit<T> have the same layout\n         unsafe { super::transmute_copy(&ManuallyDrop::new(self)) }\n     }\n@@ -1316,7 +1317,8 @@ impl<T, const N: usize> [MaybeUninit<T>; N] {\n     /// let data: MaybeUninit<[u8; 1000]> = data.transpose();\n     /// ```\n     #[unstable(feature = \"maybe_uninit_uninit_array_transpose\", issue = \"96097\")]\n-    pub fn transpose(self) -> MaybeUninit<[T; N]> {\n+    #[inline]\n+    pub const fn transpose(self) -> MaybeUninit<[T; N]> {\n         // SAFETY: T and MaybeUninit<T> have the same layout\n         unsafe { super::transmute_copy(&ManuallyDrop::new(self)) }\n     }"}]}