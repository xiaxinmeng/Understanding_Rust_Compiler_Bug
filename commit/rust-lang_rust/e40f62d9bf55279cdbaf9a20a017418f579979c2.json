{"sha": "e40f62d9bf55279cdbaf9a20a017418f579979c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MGY2MmQ5YmY1NTI3OWNkYmFmOWEyMGEwMTc0MThmNTc5OTc5YzI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T17:22:03Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T17:22:03Z"}, "message": "rollup merge of #20738: brson/feature-staging2\n\nThis gets rid of the 'experimental' level, removes the non-staged_api\ncase (i.e. stability levels for out-of-tree crates), and lets the\nstaged_api attributes use 'unstable' and 'deprecated' lints.\n\nThis makes the transition period to the full feature staging design\na bit nicer.", "tree": {"sha": "fe1a02bfc86982bd68e9a74fcb00df2deec5b7cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe1a02bfc86982bd68e9a74fcb00df2deec5b7cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e40f62d9bf55279cdbaf9a20a017418f579979c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e40f62d9bf55279cdbaf9a20a017418f579979c2", "html_url": "https://github.com/rust-lang/rust/commit/e40f62d9bf55279cdbaf9a20a017418f579979c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e40f62d9bf55279cdbaf9a20a017418f579979c2/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a48b181bd0f1c01ad3d29f75a5c858d023990b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a48b181bd0f1c01ad3d29f75a5c858d023990b4", "html_url": "https://github.com/rust-lang/rust/commit/6a48b181bd0f1c01ad3d29f75a5c858d023990b4"}, {"sha": "1f70acbf4c4f345265a7626bd927187d3bfed91f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f70acbf4c4f345265a7626bd927187d3bfed91f", "html_url": "https://github.com/rust-lang/rust/commit/1f70acbf4c4f345265a7626bd927187d3bfed91f"}], "stats": {"total": 778, "additions": 386, "deletions": 392}, "files": [{"sha": "290dd21d666a40a36775edd0b882646848fa7bd6", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -126,7 +126,7 @@ unsafe impl<T: Sync + Send> Sync for Arc<T> { }\n /// Weak pointers will not keep the data inside of the `Arc` alive, and can be used to break cycles\n /// between `Arc` pointers.\n #[unsafe_no_drop_flag]\n-#[experimental = \"Weak pointers may not belong in this module.\"]\n+#[unstable = \"Weak pointers may not belong in this module.\"]\n pub struct Weak<T> {\n     // FIXME #12808: strange name to try to avoid interfering with\n     // field accesses of the contained type via Deref\n@@ -179,7 +179,7 @@ impl<T> Arc<T> {\n     ///\n     /// let weak_five = five.downgrade();\n     /// ```\n-    #[experimental = \"Weak pointers may not belong in this module.\"]\n+    #[unstable = \"Weak pointers may not belong in this module.\"]\n     pub fn downgrade(&self) -> Weak<T> {\n         // See the clone() impl for why this is relaxed\n         self.inner().weak.fetch_add(1, Relaxed);\n@@ -200,12 +200,12 @@ impl<T> Arc<T> {\n \n /// Get the number of weak references to this value.\n #[inline]\n-#[experimental]\n+#[unstable]\n pub fn weak_count<T>(this: &Arc<T>) -> uint { this.inner().weak.load(SeqCst) - 1 }\n \n /// Get the number of strong references to this value.\n #[inline]\n-#[experimental]\n+#[unstable]\n pub fn strong_count<T>(this: &Arc<T>) -> uint { this.inner().strong.load(SeqCst) }\n \n #[stable]\n@@ -271,7 +271,7 @@ impl<T: Send + Sync + Clone> Arc<T> {\n     /// let mut_five = five.make_unique();\n     /// ```\n     #[inline]\n-    #[experimental]\n+    #[unstable]\n     pub fn make_unique(&mut self) -> &mut T {\n         // Note that we hold a strong reference, which also counts as a weak reference, so we only\n         // clone if there is an additional reference of either kind.\n@@ -355,7 +355,7 @@ impl<T: Sync + Send> Drop for Arc<T> {\n     }\n }\n \n-#[experimental = \"Weak pointers may not belong in this module.\"]\n+#[unstable = \"Weak pointers may not belong in this module.\"]\n impl<T: Sync + Send> Weak<T> {\n     /// Upgrades a weak reference to a strong reference.\n     ///\n@@ -393,7 +393,7 @@ impl<T: Sync + Send> Weak<T> {\n     }\n }\n \n-#[experimental = \"Weak pointers may not belong in this module.\"]\n+#[unstable = \"Weak pointers may not belong in this module.\"]\n impl<T: Sync + Send> Clone for Weak<T> {\n     /// Makes a clone of the `Weak<T>`.\n     ///\n@@ -604,7 +604,7 @@ impl<H: Hasher, T: Hash<H>> Hash<H> for Arc<T> {\n }\n \n #[cfg(test)]\n-#[allow(experimental)]\n+#[allow(unstable)]\n mod tests {\n     use std::clone::Clone;\n     use std::sync::mpsc::channel;"}, {"sha": "458eb3dce57a80f5bcf48fa06e601f6ceaa79181", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -44,7 +44,7 @@ use core::ops::{Deref, DerefMut};\n /// }\n /// ```\n #[lang = \"exchange_heap\"]\n-#[experimental = \"may be renamed; uncertain about custom allocator design\"]\n+#[unstable = \"may be renamed; uncertain about custom allocator design\"]\n pub static HEAP: () = ();\n \n /// A type that represents a uniquely-owned value."}, {"sha": "916015539a03bd8683401591f04383461f9da806", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -57,7 +57,7 @@\n //! default global allocator. It is not compatible with the libc allocator API.\n \n #![crate_name = \"alloc\"]\n-#![experimental]\n+#![unstable]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "f42c6dbdc15a592721d2f7422e53bc2c8e3cb68e", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -221,7 +221,7 @@ impl<T> Rc<T> {\n     ///\n     /// let weak_five = five.downgrade();\n     /// ```\n-    #[experimental = \"Weak pointers may not belong in this module\"]\n+    #[unstable = \"Weak pointers may not belong in this module\"]\n     pub fn downgrade(&self) -> Weak<T> {\n         self.inc_weak();\n         Weak {\n@@ -234,12 +234,12 @@ impl<T> Rc<T> {\n \n /// Get the number of weak references to this value.\n #[inline]\n-#[experimental]\n+#[unstable]\n pub fn weak_count<T>(this: &Rc<T>) -> uint { this.weak() - 1 }\n \n /// Get the number of strong references to this value.\n #[inline]\n-#[experimental]\n+#[unstable]\n pub fn strong_count<T>(this: &Rc<T>) -> uint { this.strong() }\n \n /// Returns true if there are no other `Rc` or `Weak<T>` values that share the same inner value.\n@@ -255,7 +255,7 @@ pub fn strong_count<T>(this: &Rc<T>) -> uint { this.strong() }\n /// rc::is_unique(&five);\n /// ```\n #[inline]\n-#[experimental]\n+#[unstable]\n pub fn is_unique<T>(rc: &Rc<T>) -> bool {\n     weak_count(rc) == 0 && strong_count(rc) == 1\n }\n@@ -277,7 +277,7 @@ pub fn is_unique<T>(rc: &Rc<T>) -> bool {\n /// assert_eq!(rc::try_unwrap(x), Err(Rc::new(4u)));\n /// ```\n #[inline]\n-#[experimental]\n+#[unstable]\n pub fn try_unwrap<T>(rc: Rc<T>) -> Result<T, Rc<T>> {\n     if is_unique(&rc) {\n         unsafe {\n@@ -311,7 +311,7 @@ pub fn try_unwrap<T>(rc: Rc<T>) -> Result<T, Rc<T>> {\n /// assert!(rc::get_mut(&mut x).is_none());\n /// ```\n #[inline]\n-#[experimental]\n+#[unstable]\n pub fn get_mut<'a, T>(rc: &'a mut Rc<T>) -> Option<&'a mut T> {\n     if is_unique(rc) {\n         let inner = unsafe { &mut **rc._ptr };\n@@ -337,7 +337,7 @@ impl<T: Clone> Rc<T> {\n     /// let mut_five = five.make_unique();\n     /// ```\n     #[inline]\n-    #[experimental]\n+    #[unstable]\n     pub fn make_unique(&mut self) -> &mut T {\n         if !is_unique(self) {\n             *self = Rc::new((**self).clone())\n@@ -615,7 +615,7 @@ impl<S: hash::Hasher, T: Hash<S>> Hash<S> for Rc<T> {\n     }\n }\n \n-#[experimental = \"Show is experimental.\"]\n+#[unstable = \"Show is experimental.\"]\n impl<T: fmt::Show> fmt::Show for Rc<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"Rc({:?})\", **self)\n@@ -635,7 +635,7 @@ impl<T: fmt::String> fmt::String for Rc<T> {\n ///\n /// See the [module level documentation](../index.html) for more.\n #[unsafe_no_drop_flag]\n-#[experimental = \"Weak pointers may not belong in this module.\"]\n+#[unstable = \"Weak pointers may not belong in this module.\"]\n pub struct Weak<T> {\n     // FIXME #12808: strange names to try to avoid interfering with\n     // field accesses of the contained type via Deref\n@@ -644,7 +644,7 @@ pub struct Weak<T> {\n     _noshare: marker::NoSync\n }\n \n-#[experimental = \"Weak pointers may not belong in this module.\"]\n+#[unstable = \"Weak pointers may not belong in this module.\"]\n impl<T> Weak<T> {\n     /// Upgrades a weak reference to a strong reference.\n     ///\n@@ -717,7 +717,7 @@ impl<T> Drop for Weak<T> {\n     }\n }\n \n-#[experimental = \"Weak pointers may not belong in this module.\"]\n+#[unstable = \"Weak pointers may not belong in this module.\"]\n impl<T> Clone for Weak<T> {\n     /// Makes a clone of the `Weak<T>`.\n     ///\n@@ -739,7 +739,7 @@ impl<T> Clone for Weak<T> {\n     }\n }\n \n-#[experimental = \"Show is experimental.\"]\n+#[unstable = \"Show is experimental.\"]\n impl<T: fmt::Show> fmt::Show for Weak<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"(Weak)\")\n@@ -780,7 +780,7 @@ impl<T> RcBoxPtr<T> for Weak<T> {\n }\n \n #[cfg(test)]\n-#[allow(experimental)]\n+#[allow(unstable)]\n mod tests {\n     use super::{Rc, Weak, weak_count, strong_count};\n     use std::cell::RefCell;"}, {"sha": "2456d70e65e5d735fcf413129cef7c1e527f529c", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -20,7 +20,7 @@\n //! more complex, slower arena which can hold objects of any type.\n \n #![crate_name = \"arena\"]\n-#![experimental]\n+#![unstable]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]"}, {"sha": "8d57cfb6a5d24b2650d3effa4969276810f6e8d7", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -14,7 +14,7 @@\n \n \n #![crate_name = \"collections\"]\n-#![experimental]\n+#![unstable]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "9a1f22ef7a643067ae4314c9fe77fbbf01c21775", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -166,7 +166,7 @@ pub trait SliceExt {\n     /// assert_eq!(num_moved, 3);\n     /// assert!(a == [6i, 7, 8, 4, 5]);\n     /// ```\n-    #[experimental = \"uncertain about this API approach\"]\n+    #[unstable = \"uncertain about this API approach\"]\n     fn move_from(&mut self, src: Vec<Self::Item>, start: uint, end: uint) -> uint;\n \n     /// Returns a subslice spanning the interval [`start`, `end`).\n@@ -175,23 +175,23 @@ pub trait SliceExt {\n     /// original slice (i.e. when `end > self.len()`) or when `start > end`.\n     ///\n     /// Slicing with `start` equal to `end` yields an empty slice.\n-    #[experimental = \"will be replaced by slice syntax\"]\n+    #[unstable = \"will be replaced by slice syntax\"]\n     fn slice(&self, start: uint, end: uint) -> &[Self::Item];\n \n     /// Returns a subslice from `start` to the end of the slice.\n     ///\n     /// Panics when `start` is strictly greater than the length of the original slice.\n     ///\n     /// Slicing from `self.len()` yields an empty slice.\n-    #[experimental = \"will be replaced by slice syntax\"]\n+    #[unstable = \"will be replaced by slice syntax\"]\n     fn slice_from(&self, start: uint) -> &[Self::Item];\n \n     /// Returns a subslice from the start of the slice to `end`.\n     ///\n     /// Panics when `end` is strictly greater than the length of the original slice.\n     ///\n     /// Slicing to `0` yields an empty slice.\n-    #[experimental = \"will be replaced by slice syntax\"]\n+    #[unstable = \"will be replaced by slice syntax\"]\n     fn slice_to(&self, end: uint) -> &[Self::Item];\n \n     /// Divides one slice into two at an index.\n@@ -284,11 +284,11 @@ pub trait SliceExt {\n     fn first(&self) -> Option<&Self::Item>;\n \n     /// Returns all but the first element of a slice.\n-    #[experimental = \"likely to be renamed\"]\n+    #[unstable = \"likely to be renamed\"]\n     fn tail(&self) -> &[Self::Item];\n \n     /// Returns all but the last element of a slice.\n-    #[experimental = \"likely to be renamed\"]\n+    #[unstable = \"likely to be renamed\"]\n     fn init(&self) -> &[Self::Item];\n \n     /// Returns the last element of a slice, or `None` if it is empty.\n@@ -384,23 +384,23 @@ pub trait SliceExt {\n     /// original slice (i.e. when `end > self.len()`) or when `start > end`.\n     ///\n     /// Slicing with `start` equal to `end` yields an empty slice.\n-    #[experimental = \"will be replaced by slice syntax\"]\n+    #[unstable = \"will be replaced by slice syntax\"]\n     fn slice_mut(&mut self, start: uint, end: uint) -> &mut [Self::Item];\n \n     /// Returns a mutable subslice from `start` to the end of the slice.\n     ///\n     /// Panics when `start` is strictly greater than the length of the original slice.\n     ///\n     /// Slicing from `self.len()` yields an empty slice.\n-    #[experimental = \"will be replaced by slice syntax\"]\n+    #[unstable = \"will be replaced by slice syntax\"]\n     fn slice_from_mut(&mut self, start: uint) -> &mut [Self::Item];\n \n     /// Returns a mutable subslice from the start of the slice to `end`.\n     ///\n     /// Panics when `end` is strictly greater than the length of the original slice.\n     ///\n     /// Slicing to `0` yields an empty slice.\n-    #[experimental = \"will be replaced by slice syntax\"]\n+    #[unstable = \"will be replaced by slice syntax\"]\n     fn slice_to_mut(&mut self, end: uint) -> &mut [Self::Item];\n \n     /// Returns an iterator that allows modifying each value\n@@ -412,11 +412,11 @@ pub trait SliceExt {\n     fn first_mut(&mut self) -> Option<&mut Self::Item>;\n \n     /// Returns all but the first element of a mutable slice\n-    #[experimental = \"likely to be renamed or removed\"]\n+    #[unstable = \"likely to be renamed or removed\"]\n     fn tail_mut(&mut self) -> &mut [Self::Item];\n \n     /// Returns all but the last element of a mutable slice\n-    #[experimental = \"likely to be renamed or removed\"]\n+    #[unstable = \"likely to be renamed or removed\"]\n     fn init_mut(&mut self) -> &mut [Self::Item];\n \n     /// Returns a mutable pointer to the last item in the slice.\n@@ -588,7 +588,7 @@ pub trait SliceExt {\n     /// assert!(dst.clone_from_slice(&src2) == 3);\n     /// assert!(dst == [3i, 4, 5]);\n     /// ```\n-    #[experimental]\n+    #[unstable]\n     fn clone_from_slice(&mut self, &[Self::Item]) -> uint where Self::Item: Clone;\n \n     /// Sorts the slice, in place.\n@@ -677,11 +677,11 @@ pub trait SliceExt {\n     fn prev_permutation(&mut self) -> bool where Self::Item: Ord;\n \n     /// Find the first index containing a matching value.\n-    #[experimental]\n+    #[unstable]\n     fn position_elem(&self, t: &Self::Item) -> Option<uint> where Self::Item: PartialEq;\n \n     /// Find the last index containing a matching value.\n-    #[experimental]\n+    #[unstable]\n     fn rposition_elem(&self, t: &Self::Item) -> Option<uint> where Self::Item: PartialEq;\n \n     /// Return true if the slice contains an element with the given value.\n@@ -697,7 +697,7 @@ pub trait SliceExt {\n     fn ends_with(&self, needle: &[Self::Item]) -> bool where Self::Item: PartialEq;\n \n     /// Convert `self` into a vector without clones or allocation.\n-    #[experimental]\n+    #[unstable]\n     fn into_vec(self: Box<Self>) -> Vec<Self::Item>;\n }\n \n@@ -1034,7 +1034,7 @@ impl<T: Clone, V: AsSlice<T>> SliceConcatExt<T, Vec<T>> for [V] {\n ///\n /// The last generated swap is always (0, 1), and it returns the\n /// sequence to its initial order.\n-#[experimental]\n+#[unstable]\n #[derive(Clone)]\n pub struct ElementSwaps {\n     sdir: Vec<SizeDirection>,\n@@ -1046,7 +1046,7 @@ pub struct ElementSwaps {\n \n impl ElementSwaps {\n     /// Creates an `ElementSwaps` iterator for a sequence of `length` elements.\n-    #[experimental]\n+    #[unstable]\n     pub fn new(length: uint) -> ElementSwaps {\n         // Initialize `sdir` with a direction that position should move in\n         // (all negative at the beginning) and the `size` of the"}, {"sha": "5991fc832e9686d890087d67636b975df8b3837d", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -92,7 +92,7 @@ impl String {\n     /// assert_eq!(s.as_slice(), \"hello\");\n     /// ```\n     #[inline]\n-    #[experimental = \"needs investigation to see if to_string() can match perf\"]\n+    #[unstable = \"needs investigation to see if to_string() can match perf\"]\n     pub fn from_str(string: &str) -> String {\n         String { vec: ::slice::SliceExt::to_vec(string.as_bytes()) }\n     }\n@@ -719,7 +719,7 @@ impl<'a> FromIterator<&'a str> for String {\n     }\n }\n \n-#[experimental = \"waiting on Extend stabilization\"]\n+#[unstable = \"waiting on Extend stabilization\"]\n impl Extend<char> for String {\n     fn extend<I:Iterator<Item=char>>(&mut self, mut iterator: I) {\n         let (lower_bound, _) = iterator.size_hint();\n@@ -730,7 +730,7 @@ impl Extend<char> for String {\n     }\n }\n \n-#[experimental = \"waiting on Extend stabilization\"]\n+#[unstable = \"waiting on Extend stabilization\"]\n impl<'a> Extend<&'a str> for String {\n     fn extend<I: Iterator<Item=&'a str>>(&mut self, mut iterator: I) {\n         // A guess that at least one byte per iterator element will be needed.\n@@ -790,7 +790,7 @@ impl<'a, 'b> PartialEq<CowString<'a>> for &'b str {\n     fn ne(&self, other: &CowString<'a>) -> bool { PartialEq::ne(&**self, &**other) }\n }\n \n-#[experimental = \"waiting on Str stabilization\"]\n+#[unstable = \"waiting on Str stabilization\"]\n impl Str for String {\n     #[inline]\n     #[stable]\n@@ -814,22 +814,22 @@ impl fmt::String for String {\n     }\n }\n \n-#[experimental = \"waiting on fmt stabilization\"]\n+#[unstable = \"waiting on fmt stabilization\"]\n impl fmt::Show for String {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Show::fmt(&**self, f)\n     }\n }\n \n-#[experimental = \"waiting on Hash stabilization\"]\n+#[unstable = \"waiting on Hash stabilization\"]\n #[cfg(stage0)]\n impl<H: hash::Writer> hash::Hash<H> for String {\n     #[inline]\n     fn hash(&self, hasher: &mut H) {\n         (**self).hash(hasher)\n     }\n }\n-#[experimental = \"waiting on Hash stabilization\"]\n+#[unstable = \"waiting on Hash stabilization\"]\n #[cfg(not(stage0))]\n impl<H: hash::Writer + hash::Hasher> hash::Hash<H> for String {\n     #[inline]\n@@ -887,7 +887,7 @@ impl ops::Deref for String {\n }\n \n /// Wrapper type providing a `&String` reference via `Deref`.\n-#[experimental]\n+#[unstable]\n pub struct DerefString<'a> {\n     x: DerefVec<'a, u8>\n }\n@@ -914,7 +914,7 @@ impl<'a> Deref for DerefString<'a> {\n /// let string = as_string(\"foo\").clone();\n /// string_consumer(string);\n /// ```\n-#[experimental]\n+#[unstable]\n pub fn as_string<'a>(x: &'a str) -> DerefString<'a> {\n     DerefString { x: as_vec(x.as_bytes()) }\n }"}, {"sha": "47afc78bc1213b13ab8496085fa33e660e4ec5a3", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -376,7 +376,7 @@ impl<T> Vec<T> {\n     /// Note that this will drop any excess capacity. Calling this and\n     /// converting back to a vector with `into_vec()` is equivalent to calling\n     /// `shrink_to_fit()`.\n-    #[experimental]\n+    #[unstable]\n     pub fn into_boxed_slice(mut self) -> Box<[T]> {\n         self.shrink_to_fit();\n         unsafe {\n@@ -777,7 +777,7 @@ impl<T> Vec<T> {\n     /// let newtyped_bytes = bytes.map_in_place(|x| Newtype(x));\n     /// assert_eq!(newtyped_bytes.as_slice(), [Newtype(0x11), Newtype(0x22)].as_slice());\n     /// ```\n-    #[experimental = \"API may change to provide stronger guarantees\"]\n+    #[unstable = \"API may change to provide stronger guarantees\"]\n     pub fn map_in_place<U, F>(self, mut f: F) -> Vec<U> where F: FnMut(T) -> U {\n         // FIXME: Assert statically that the types `T` and `U` have the same\n         // size.\n@@ -995,7 +995,7 @@ impl<T: Clone> Vec<T> {\n     /// assert_eq!(vec, vec![1, 2, 3, 4]);\n     /// ```\n     #[inline]\n-    #[experimental = \"likely to be replaced by a more optimized extend\"]\n+    #[unstable = \"likely to be replaced by a more optimized extend\"]\n     pub fn push_all(&mut self, other: &[T]) {\n         self.reserve(other.len());\n \n@@ -1200,7 +1200,7 @@ impl<S: hash::Writer + hash::Hasher, T: Hash<S>> Hash<S> for Vec<T> {\n     }\n }\n \n-#[experimental = \"waiting on Index stability\"]\n+#[unstable = \"waiting on Index stability\"]\n impl<T> Index<uint> for Vec<T> {\n     type Output = T;\n \n@@ -1304,7 +1304,7 @@ impl<T> FromIterator<T> for Vec<T> {\n     }\n }\n \n-#[experimental = \"waiting on Extend stability\"]\n+#[unstable = \"waiting on Extend stability\"]\n impl<T> Extend<T> for Vec<T> {\n     #[inline]\n     fn extend<I: Iterator<Item=T>>(&mut self, mut iterator: I) {\n@@ -1457,7 +1457,7 @@ impl<T> Default for Vec<T> {\n     }\n }\n \n-#[experimental = \"waiting on Show stability\"]\n+#[unstable = \"waiting on Show stability\"]\n impl<T: fmt::Show> fmt::Show for Vec<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Show::fmt(self.as_slice(), f)\n@@ -1475,7 +1475,7 @@ impl<'a> fmt::Writer for Vec<u8> {\n // Clone-on-write\n ////////////////////////////////////////////////////////////////////////////////\n \n-#[experimental = \"unclear how valuable this alias is\"]\n+#[unstable = \"unclear how valuable this alias is\"]\n /// A clone-on-write vector\n pub type CowVec<'a, T> = Cow<'a, Vec<T>, [T]>;\n \n@@ -1693,13 +1693,13 @@ impl<'a, T> Drop for Drain<'a, T> {\n ////////////////////////////////////////////////////////////////////////////////\n \n /// Wrapper type providing a `&Vec<T>` reference via `Deref`.\n-#[experimental]\n+#[unstable]\n pub struct DerefVec<'a, T> {\n     x: Vec<T>,\n     l: ContravariantLifetime<'a>\n }\n \n-#[experimental]\n+#[unstable]\n impl<'a, T> Deref for DerefVec<'a, T> {\n     type Target = Vec<T>;\n \n@@ -1719,7 +1719,7 @@ impl<'a, T> Drop for DerefVec<'a, T> {\n }\n \n /// Convert a slice to a wrapper type providing a `&Vec<T>` reference.\n-#[experimental]\n+#[unstable]\n pub fn as_vec<'a, T>(x: &'a [T]) -> DerefVec<'a, T> {\n     unsafe {\n         DerefVec {"}, {"sha": "797687a9ad96ee6efc577f94ab158995438e84aa", "filename": "src/libcore/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -89,7 +89,7 @@ use intrinsics::TypeId;\n #[stable]\n pub trait Any: 'static {\n     /// Get the `TypeId` of `self`\n-    #[experimental = \"this method will likely be replaced by an associated static\"]\n+    #[unstable = \"this method will likely be replaced by an associated static\"]\n     fn get_type_id(&self) -> TypeId;\n }\n "}, {"sha": "c07fac108d6f390a95fd7a8f8a14d1176bac3792", "filename": "src/libcore/array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -12,7 +12,7 @@\n //! up to a certain length. Eventually we should able to generalize\n //! to all lengths.\n \n-#![experimental] // not yet reviewed\n+#![unstable] // not yet reviewed\n \n use clone::Clone;\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};"}, {"sha": "6db01b7cb7afe67d6d26b12f4f9c0881092ff967", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -202,7 +202,7 @@ impl<T:Copy> Cell<T> {\n     ///\n     /// This function is `unsafe` because `UnsafeCell`'s field is public.\n     #[inline]\n-    #[experimental]\n+    #[unstable]\n     pub unsafe fn as_unsafe_cell<'a>(&'a self) -> &'a UnsafeCell<T> {\n         &self.value\n     }\n@@ -332,7 +332,7 @@ impl<T> RefCell<T> {\n     ///\n     /// This function is `unsafe` because `UnsafeCell`'s field is public.\n     #[inline]\n-    #[experimental]\n+    #[unstable]\n     pub unsafe fn as_unsafe_cell<'a>(&'a self) -> &'a UnsafeCell<T> {\n         &self.value\n     }\n@@ -424,7 +424,7 @@ impl<'b, T> Deref for Ref<'b, T> {\n ///\n /// A `Clone` implementation would interfere with the widespread\n /// use of `r.borrow().clone()` to clone the contents of a `RefCell`.\n-#[experimental = \"likely to be moved to a method, pending language changes\"]\n+#[unstable = \"likely to be moved to a method, pending language changes\"]\n pub fn clone_ref<'b, T:Clone>(orig: &Ref<'b, T>) -> Ref<'b, T> {\n     Ref {\n         _value: orig._value,"}, {"sha": "ffa6d0855435e2b854f8178d7d507380a88cf029", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -81,7 +81,7 @@ clone_impl! { char }\n \n macro_rules! extern_fn_clone {\n     ($($A:ident),*) => (\n-        #[experimental = \"this may not be sufficient for fns with region parameters\"]\n+        #[unstable = \"this may not be sufficient for fns with region parameters\"]\n         impl<$($A,)* ReturnType> Clone for extern \"Rust\" fn($($A),*) -> ReturnType {\n             /// Return a copy of a function pointer\n             #[inline]"}, {"sha": "c1f1997df740ea7a2d4061f4979e231c2813c792", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -290,7 +290,7 @@ pub fn max<T: Ord>(v1: T, v2: T) -> T {\n ///\n /// Returns the first argument if the comparison determines them to be equal.\n #[inline]\n-#[experimental]\n+#[unstable]\n pub fn partial_min<T: PartialOrd>(v1: T, v2: T) -> Option<T> {\n     match v1.partial_cmp(&v2) {\n         Some(Less) | Some(Equal) => Some(v1),\n@@ -303,7 +303,7 @@ pub fn partial_min<T: PartialOrd>(v1: T, v2: T) -> Option<T> {\n ///\n /// Returns the first argument if the comparison determines them to be equal.\n #[inline]\n-#[experimental]\n+#[unstable]\n pub fn partial_max<T: PartialOrd>(v1: T, v2: T) -> Option<T> {\n     match v1.partial_cmp(&v2) {\n         Some(Less) => Some(v2),"}, {"sha": "a21ec892dd77a64abfc60a564c3268f04ecb6a1c", "filename": "src/libcore/finally.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffinally.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -32,7 +32,7 @@\n //! # }\n //! ```\n \n-#![experimental]\n+#![unstable]\n \n use ops::{Drop, FnMut, FnOnce};\n "}, {"sha": "67d5482898ee5f87f9bbfdf08fc4c01e49cdd4aa", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -36,7 +36,7 @@ mod num;\n mod float;\n pub mod rt;\n \n-#[experimental = \"core and I/O reconciliation may alter this definition\"]\n+#[unstable = \"core and I/O reconciliation may alter this definition\"]\n /// The type returned by formatter methods.\n pub type Result = result::Result<(), Error>;\n \n@@ -45,7 +45,7 @@ pub type Result = result::Result<(), Error>;\n /// This type does not support transmission of an error other than that an error\n /// occurred. Any extra information must be arranged to be transmitted through\n /// some other means.\n-#[experimental = \"core and I/O reconciliation may alter this definition\"]\n+#[unstable = \"core and I/O reconciliation may alter this definition\"]\n #[derive(Copy)]\n pub struct Error;\n \n@@ -58,7 +58,7 @@ pub struct Error;\n /// This trait should generally not be implemented by consumers of the standard\n /// library. The `write!` macro accepts an instance of `io::Writer`, and the\n /// `io::Writer` trait is favored over implementing this trait.\n-#[experimental = \"waiting for core and I/O reconciliation\"]\n+#[unstable = \"waiting for core and I/O reconciliation\"]\n pub trait Writer {\n     /// Writes a slice of bytes into this writer, returning whether the write\n     /// succeeded.\n@@ -123,7 +123,7 @@ enum Void {}\n /// family of functions. It contains a function to format the given value. At\n /// compile time it is ensured that the function and the value have the correct\n /// types, and then this struct is used to canonicalize arguments to one type.\n-#[experimental = \"implementation detail of the `format_args!` macro\"]\n+#[unstable = \"implementation detail of the `format_args!` macro\"]\n #[derive(Copy)]\n pub struct Argument<'a> {\n     value: &'a Void,\n@@ -162,7 +162,7 @@ impl<'a> Arguments<'a> {\n     /// When using the format_args!() macro, this function is used to generate the\n     /// Arguments structure.\n     #[doc(hidden)] #[inline]\n-    #[experimental = \"implementation detail of the `format_args!` macro\"]\n+    #[unstable = \"implementation detail of the `format_args!` macro\"]\n     pub fn new(pieces: &'a [&'a str],\n                args: &'a [Argument<'a>]) -> Arguments<'a> {\n         Arguments {\n@@ -179,7 +179,7 @@ impl<'a> Arguments<'a> {\n     /// created with `argumentuint`. However, failing to do so doesn't cause\n     /// unsafety, but will ignore invalid .\n     #[doc(hidden)] #[inline]\n-    #[experimental = \"implementation detail of the `format_args!` macro\"]\n+    #[unstable = \"implementation detail of the `format_args!` macro\"]\n     pub fn with_placeholders(pieces: &'a [&'a str],\n                              fmt: &'a [rt::Argument<'a>],\n                              args: &'a [Argument<'a>]) -> Arguments<'a> {\n@@ -301,7 +301,7 @@ pub trait UpperExp {\n ///\n ///   * output - the buffer to write output to\n ///   * args - the precompiled arguments generated by `format_args!`\n-#[experimental = \"libcore and I/O have yet to be reconciled, and this is an \\\n+#[unstable = \"libcore and I/O have yet to be reconciled, and this is an \\\n                   implementation detail which should not otherwise be exported\"]\n pub fn write(output: &mut Writer, args: Arguments) -> Result {\n     let mut formatter = Formatter {\n@@ -563,7 +563,7 @@ impl<'a> Formatter<'a> {\n     }\n \n     /// Flags for formatting (packed version of rt::Flag)\n-    #[experimental = \"return type may change and method was just created\"]\n+    #[unstable = \"return type may change and method was just created\"]\n     pub fn flags(&self) -> uint { self.flags }\n \n     /// Character used as 'fill' whenever there is alignment\n@@ -592,7 +592,7 @@ impl Show for Error {\n /// This is a function which calls are emitted to by the compiler itself to\n /// create the Argument structures that are passed into the `format` function.\n #[doc(hidden)] #[inline]\n-#[experimental = \"implementation detail of the `format_args!` macro\"]\n+#[unstable = \"implementation detail of the `format_args!` macro\"]\n pub fn argument<'a, T>(f: fn(&T, &mut Formatter) -> Result,\n                        t: &'a T) -> Argument<'a> {\n     Argument::new(t, f)\n@@ -601,7 +601,7 @@ pub fn argument<'a, T>(f: fn(&T, &mut Formatter) -> Result,\n /// When the compiler determines that the type of an argument *must* be a uint\n /// (such as for width and precision), then it invokes this method.\n #[doc(hidden)] #[inline]\n-#[experimental = \"implementation detail of the `format_args!` macro\"]\n+#[unstable = \"implementation detail of the `format_args!` macro\"]\n pub fn argumentuint<'a>(s: &'a uint) -> Argument<'a> {\n     Argument::from_uint(s)\n }"}, {"sha": "8d8e8c4b703032b34e0d607ac1ee2580ef11b526", "filename": "src/libcore/fmt/rt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Ffmt%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Ffmt%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Frt.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -14,7 +14,7 @@\n //! These definitions are similar to their `ct` equivalents, but differ in that\n //! these can be statically allocated and are slightly optimized for the runtime\n \n-#![experimental = \"implementation detail of the `format_args!` macro\"]\n+#![unstable = \"implementation detail of the `format_args!` macro\"]\n \n pub use self::Alignment::*;\n pub use self::Count::*;"}, {"sha": "5924d515dda595c5e785608d110108e5aeae1e97", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -39,7 +39,7 @@\n //!   guaranteed to happen in order. This is the standard mode for working\n //!   with atomic types and is equivalent to Java's `volatile`.\n \n-#![experimental]\n+#![unstable]\n #![allow(missing_docs)]\n \n #[cfg(not(stage0))]\n@@ -333,7 +333,7 @@ extern \"rust-intrinsic\" {\n \n     /// Invokes memset on the specified pointer, setting `count * size_of::<T>()`\n     /// bytes of memory starting at `dst` to `c`.\n-    #[experimental = \"uncertain about naming and semantics\"]\n+    #[unstable = \"uncertain about naming and semantics\"]\n     pub fn set_memory<T>(dst: *mut T, val: u8, count: uint);\n \n     /// Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with"}, {"sha": "d4aa4c99a76bd48f20c5d1cc8e97a1e2047f5781", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -942,7 +942,7 @@ pub trait IteratorExt: Iterator + Sized {\n     }\n \n     /// Use an iterator to reverse a container in place.\n-    #[experimental = \"uncertain about placement or widespread use\"]\n+    #[unstable = \"uncertain about placement or widespread use\"]\n     fn reverse_in_place<'a, T: 'a>(&mut self) where\n         Self: Iterator<Item=&'a mut T> + DoubleEndedIterator\n     {\n@@ -974,7 +974,7 @@ pub trait DoubleEndedIterator: Iterator {\n /// Calling `next()` or `next_back()` on a `RandomAccessIterator`\n /// reduces the indexable range accordingly. That is, `it.idx(1)` will become `it.idx(0)`\n /// after `it.next()` is called.\n-#[experimental = \"not widely used, may be better decomposed into Index and ExactSizeIterator\"]\n+#[unstable = \"not widely used, may be better decomposed into Index and ExactSizeIterator\"]\n pub trait RandomAccessIterator: Iterator {\n     /// Return the number of indexable elements. At most `std::uint::MAX`\n     /// elements are indexable, even if the iterator represents a longer range.\n@@ -1049,7 +1049,7 @@ impl<I> DoubleEndedIterator for Rev<I> where I: DoubleEndedIterator {\n     fn next_back(&mut self) -> Option<<I as Iterator>::Item> { self.iter.next() }\n }\n \n-#[experimental = \"trait is experimental\"]\n+#[unstable = \"trait is experimental\"]\n impl<I> RandomAccessIterator for Rev<I> where I: DoubleEndedIterator + RandomAccessIterator {\n     #[inline]\n     fn indexable(&self) -> uint { self.iter.indexable() }\n@@ -1084,7 +1084,7 @@ impl<'a, I> DoubleEndedIterator for ByRef<'a, I> where I: 'a + DoubleEndedIterat\n }\n \n /// A trait for iterators over elements which can be added together\n-#[experimental = \"needs to be re-evaluated as part of numerics reform\"]\n+#[unstable = \"needs to be re-evaluated as part of numerics reform\"]\n pub trait AdditiveIterator<A> {\n     /// Iterates over the entire iterator, summing up all the elements\n     ///\n@@ -1102,7 +1102,7 @@ pub trait AdditiveIterator<A> {\n \n macro_rules! impl_additive {\n     ($A:ty, $init:expr) => {\n-        #[experimental = \"trait is experimental\"]\n+        #[unstable = \"trait is experimental\"]\n         impl<T: Iterator<Item=$A>> AdditiveIterator<$A> for T {\n             #[inline]\n             fn sum(self) -> $A {\n@@ -1125,7 +1125,7 @@ impl_additive! { f32,  0.0 }\n impl_additive! { f64,  0.0 }\n \n /// A trait for iterators over elements which can be multiplied together.\n-#[experimental = \"needs to be re-evaluated as part of numerics reform\"]\n+#[unstable = \"needs to be re-evaluated as part of numerics reform\"]\n pub trait MultiplicativeIterator<A> {\n     /// Iterates over the entire iterator, multiplying all the elements\n     ///\n@@ -1146,7 +1146,7 @@ pub trait MultiplicativeIterator<A> {\n \n macro_rules! impl_multiplicative {\n     ($A:ty, $init:expr) => {\n-        #[experimental = \"trait is experimental\"]\n+        #[unstable = \"trait is experimental\"]\n         impl<T: Iterator<Item=$A>> MultiplicativeIterator<$A> for T {\n             #[inline]\n             fn product(self) -> $A {\n@@ -1287,7 +1287,7 @@ impl<I> Iterator for Cycle<I> where I: Clone + Iterator {\n     }\n }\n \n-#[experimental = \"trait is experimental\"]\n+#[unstable = \"trait is experimental\"]\n impl<I> RandomAccessIterator for Cycle<I> where\n     I: Clone + RandomAccessIterator,\n {\n@@ -1372,7 +1372,7 @@ impl<T, A, B> DoubleEndedIterator for Chain<A, B> where\n     }\n }\n \n-#[experimental = \"trait is experimental\"]\n+#[unstable = \"trait is experimental\"]\n impl<T, A, B> RandomAccessIterator for Chain<A, B> where\n     A: RandomAccessIterator<Item=T>,\n     B: RandomAccessIterator<Item=T>,\n@@ -1464,7 +1464,7 @@ impl<T, U, A, B> DoubleEndedIterator for Zip<A, B> where\n     }\n }\n \n-#[experimental = \"trait is experimental\"]\n+#[unstable = \"trait is experimental\"]\n impl<T, U, A, B> RandomAccessIterator for Zip<A, B> where\n     A: RandomAccessIterator<Item=T>,\n     B: RandomAccessIterator<Item=U>,\n@@ -1546,7 +1546,7 @@ impl<A, B, I, F> DoubleEndedIterator for Map<A, B, I, F> where\n     }\n }\n \n-#[experimental = \"trait is experimental\"]\n+#[unstable = \"trait is experimental\"]\n impl<A, B, I, F> RandomAccessIterator for Map<A, B, I, F> where\n     I: RandomAccessIterator<Item=A>,\n     F: FnMut(A) -> B,\n@@ -1735,7 +1735,7 @@ impl<I> DoubleEndedIterator for Enumerate<I> where\n     }\n }\n \n-#[experimental = \"trait is experimental\"]\n+#[unstable = \"trait is experimental\"]\n impl<I> RandomAccessIterator for Enumerate<I> where I: RandomAccessIterator {\n     #[inline]\n     fn indexable(&self) -> uint {\n@@ -1961,7 +1961,7 @@ impl<I> Iterator for Skip<I> where I: Iterator {\n     }\n }\n \n-#[experimental = \"trait is experimental\"]\n+#[unstable = \"trait is experimental\"]\n impl<I> RandomAccessIterator for Skip<I> where I: RandomAccessIterator{\n     #[inline]\n     fn indexable(&self) -> uint {\n@@ -2016,7 +2016,7 @@ impl<I> Iterator for Take<I> where I: Iterator{\n     }\n }\n \n-#[experimental = \"trait is experimental\"]\n+#[unstable = \"trait is experimental\"]\n impl<I> RandomAccessIterator for Take<I> where I: RandomAccessIterator{\n     #[inline]\n     fn indexable(&self) -> uint {\n@@ -2229,7 +2229,7 @@ impl<I> DoubleEndedIterator for Fuse<I> where I: DoubleEndedIterator {\n }\n \n // Allow RandomAccessIterators to be fused without affecting random-access behavior\n-#[experimental = \"trait is experimental\"]\n+#[unstable = \"trait is experimental\"]\n impl<I> RandomAccessIterator for Fuse<I> where I: RandomAccessIterator {\n     #[inline]\n     fn indexable(&self) -> uint {\n@@ -2246,7 +2246,7 @@ impl<I> Fuse<I> {\n     /// Resets the fuse such that the next call to .next() or .next_back() will\n     /// call the underlying iterator again even if it previously returned None.\n     #[inline]\n-    #[experimental = \"seems marginal\"]\n+    #[unstable = \"seems marginal\"]\n     pub fn reset_fuse(&mut self) {\n         self.done = false\n     }\n@@ -2315,7 +2315,7 @@ impl<A, I, F> DoubleEndedIterator for Inspect<A, I, F> where\n     }\n }\n \n-#[experimental = \"trait is experimental\"]\n+#[unstable = \"trait is experimental\"]\n impl<A, I, F> RandomAccessIterator for Inspect<A, I, F> where\n     I: RandomAccessIterator<Item=A>,\n     F: FnMut(&A),\n@@ -2364,7 +2364,7 @@ impl<A, I, F> RandomAccessIterator for Inspect<A, I, F> where\n ///     println!(\"{}\", i);\n /// }\n /// ```\n-#[experimental]\n+#[unstable]\n pub struct Unfold<A, St, F> where F: FnMut(&mut St) -> Option<A> {\n     f: F,\n     /// Internal state that will be passed to the closure on the next iteration\n@@ -2385,7 +2385,7 @@ impl<A, St, F> Clone for Unfold<A, St, F> where\n     }\n }\n \n-#[experimental]\n+#[unstable]\n impl<A, St, F> Unfold<A, St, F> where F: FnMut(&mut St) -> Option<A> {\n     /// Creates a new iterator with the specified closure as the \"iterator\n     /// function\" and an initial state to eventually pass to the closure\n@@ -2778,7 +2778,7 @@ impl<A: Clone> DoubleEndedIterator for Repeat<A> {\n     fn next_back(&mut self) -> Option<A> { self.idx(0) }\n }\n \n-#[experimental = \"trait is experimental\"]\n+#[unstable = \"trait is experimental\"]\n impl<A: Clone> RandomAccessIterator for Repeat<A> {\n     #[inline]\n     fn indexable(&self) -> uint { uint::MAX }\n@@ -2790,12 +2790,12 @@ type IterateState<T, F> = (F, Option<T>, bool);\n \n /// An iterator that repeatedly applies a given function, starting\n /// from a given seed value.\n-#[experimental]\n+#[unstable]\n pub type Iterate<T, F> = Unfold<T, IterateState<T, F>, fn(&mut IterateState<T, F>) -> Option<T>>;\n \n /// Create a new iterator that produces an infinite sequence of\n /// repeated applications of the given function `f`.\n-#[experimental]\n+#[unstable]\n pub fn iterate<T, F>(seed: T, f: F) -> Iterate<T, F> where\n     T: Clone,\n     F: FnMut(T) -> T,"}, {"sha": "8c4c8a0e78efa2f5ca6f407fadd61d5308e00ea7", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -48,7 +48,7 @@\n // separate crate, libcoretest, to avoid bizarre issues.\n \n #![crate_name = \"core\"]\n-#![experimental]\n+#![unstable]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "abaf252932300a0023a77ac665c6fb3ca080da9b", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -32,7 +32,7 @@ unsafe impl Zeroable for u64 {}\n /// NULL or 0 that might allow certain optimizations.\n #[lang=\"non_zero\"]\n #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Show)]\n-#[experimental]\n+#[unstable]\n pub struct NonZero<T: Zeroable>(T);\n \n impl<T: Zeroable> NonZero<T> {"}, {"sha": "57415f4331d6d87394d7a5eae66379a9e2f0e8ed", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -726,7 +726,7 @@ impl UnsignedInt for u32 {}\n impl UnsignedInt for u64 {}\n \n /// A generic trait for converting a value to a number.\n-#[experimental = \"trait is likely to be removed\"]\n+#[unstable = \"trait is likely to be removed\"]\n pub trait ToPrimitive {\n     /// Converts the value of `self` to an `int`.\n     #[inline]\n@@ -991,7 +991,7 @@ impl_to_primitive_float! { f32 }\n impl_to_primitive_float! { f64 }\n \n /// A generic trait for converting a number to a value.\n-#[experimental = \"trait is likely to be removed\"]\n+#[unstable = \"trait is likely to be removed\"]\n pub trait FromPrimitive : ::marker::Sized {\n     /// Convert an `int` to return an optional value of this type. If the\n     /// value cannot be represented by this value, the `None` is returned.\n@@ -1073,73 +1073,73 @@ pub trait FromPrimitive : ::marker::Sized {\n }\n \n /// A utility function that just calls `FromPrimitive::from_int`.\n-#[experimental = \"likely to be removed\"]\n+#[unstable = \"likely to be removed\"]\n pub fn from_int<A: FromPrimitive>(n: int) -> Option<A> {\n     FromPrimitive::from_int(n)\n }\n \n /// A utility function that just calls `FromPrimitive::from_i8`.\n-#[experimental = \"likely to be removed\"]\n+#[unstable = \"likely to be removed\"]\n pub fn from_i8<A: FromPrimitive>(n: i8) -> Option<A> {\n     FromPrimitive::from_i8(n)\n }\n \n /// A utility function that just calls `FromPrimitive::from_i16`.\n-#[experimental = \"likely to be removed\"]\n+#[unstable = \"likely to be removed\"]\n pub fn from_i16<A: FromPrimitive>(n: i16) -> Option<A> {\n     FromPrimitive::from_i16(n)\n }\n \n /// A utility function that just calls `FromPrimitive::from_i32`.\n-#[experimental = \"likely to be removed\"]\n+#[unstable = \"likely to be removed\"]\n pub fn from_i32<A: FromPrimitive>(n: i32) -> Option<A> {\n     FromPrimitive::from_i32(n)\n }\n \n /// A utility function that just calls `FromPrimitive::from_i64`.\n-#[experimental = \"likely to be removed\"]\n+#[unstable = \"likely to be removed\"]\n pub fn from_i64<A: FromPrimitive>(n: i64) -> Option<A> {\n     FromPrimitive::from_i64(n)\n }\n \n /// A utility function that just calls `FromPrimitive::from_uint`.\n-#[experimental = \"likely to be removed\"]\n+#[unstable = \"likely to be removed\"]\n pub fn from_uint<A: FromPrimitive>(n: uint) -> Option<A> {\n     FromPrimitive::from_uint(n)\n }\n \n /// A utility function that just calls `FromPrimitive::from_u8`.\n-#[experimental = \"likely to be removed\"]\n+#[unstable = \"likely to be removed\"]\n pub fn from_u8<A: FromPrimitive>(n: u8) -> Option<A> {\n     FromPrimitive::from_u8(n)\n }\n \n /// A utility function that just calls `FromPrimitive::from_u16`.\n-#[experimental = \"likely to be removed\"]\n+#[unstable = \"likely to be removed\"]\n pub fn from_u16<A: FromPrimitive>(n: u16) -> Option<A> {\n     FromPrimitive::from_u16(n)\n }\n \n /// A utility function that just calls `FromPrimitive::from_u32`.\n-#[experimental = \"likely to be removed\"]\n+#[unstable = \"likely to be removed\"]\n pub fn from_u32<A: FromPrimitive>(n: u32) -> Option<A> {\n     FromPrimitive::from_u32(n)\n }\n \n /// A utility function that just calls `FromPrimitive::from_u64`.\n-#[experimental = \"likely to be removed\"]\n+#[unstable = \"likely to be removed\"]\n pub fn from_u64<A: FromPrimitive>(n: u64) -> Option<A> {\n     FromPrimitive::from_u64(n)\n }\n \n /// A utility function that just calls `FromPrimitive::from_f32`.\n-#[experimental = \"likely to be removed\"]\n+#[unstable = \"likely to be removed\"]\n pub fn from_f32<A: FromPrimitive>(n: f32) -> Option<A> {\n     FromPrimitive::from_f32(n)\n }\n \n /// A utility function that just calls `FromPrimitive::from_f64`.\n-#[experimental = \"likely to be removed\"]\n+#[unstable = \"likely to be removed\"]\n pub fn from_f64<A: FromPrimitive>(n: f64) -> Option<A> {\n     FromPrimitive::from_f64(n)\n }\n@@ -1190,13 +1190,13 @@ impl_from_primitive! { f64, to_f64 }\n /// ```\n ///\n #[inline]\n-#[experimental = \"likely to be removed\"]\n+#[unstable = \"likely to be removed\"]\n pub fn cast<T: NumCast,U: NumCast>(n: T) -> Option<U> {\n     NumCast::from(n)\n }\n \n /// An interface for casting between machine scalars.\n-#[experimental = \"trait is likely to be removed\"]\n+#[unstable = \"trait is likely to be removed\"]\n pub trait NumCast: ToPrimitive {\n     /// Creates a number from another value that can be converted into a primitive via the\n     /// `ToPrimitive` trait.\n@@ -1394,20 +1394,20 @@ pub trait Float\n }\n \n /// A generic trait for converting a string with a radix (base) to a value\n-#[experimental = \"might need to return Result\"]\n+#[unstable = \"might need to return Result\"]\n pub trait FromStrRadix {\n     fn from_str_radix(str: &str, radix: uint) -> Option<Self>;\n }\n \n /// A utility function that just calls FromStrRadix::from_str_radix.\n-#[experimental = \"might need to return Result\"]\n+#[unstable = \"might need to return Result\"]\n pub fn from_str_radix<T: FromStrRadix>(str: &str, radix: uint) -> Option<T> {\n     FromStrRadix::from_str_radix(str, radix)\n }\n \n macro_rules! from_str_radix_float_impl {\n     ($T:ty) => {\n-        #[experimental = \"might need to return Result\"]\n+        #[unstable = \"might need to return Result\"]\n         impl FromStr for $T {\n             /// Convert a string in base 10 to a float.\n             /// Accepts an optional decimal exponent.\n@@ -1440,7 +1440,7 @@ macro_rules! from_str_radix_float_impl {\n             }\n         }\n \n-        #[experimental = \"might need to return Result\"]\n+        #[unstable = \"might need to return Result\"]\n         impl FromStrRadix for $T {\n             /// Convert a string in a given base to a float.\n             ///\n@@ -1604,15 +1604,15 @@ from_str_radix_float_impl! { f64 }\n \n macro_rules! from_str_radix_int_impl {\n     ($T:ty) => {\n-        #[experimental = \"might need to return Result\"]\n+        #[unstable = \"might need to return Result\"]\n         impl FromStr for $T {\n             #[inline]\n             fn from_str(src: &str) -> Option<$T> {\n                 from_str_radix(src, 10)\n             }\n         }\n \n-        #[experimental = \"might need to return Result\"]\n+        #[unstable = \"might need to return Result\"]\n         impl FromStrRadix for $T {\n             fn from_str_radix(src: &str, radix: uint) -> Option<$T> {\n                 assert!(radix >= 2 && radix <= 36,"}, {"sha": "41eecb4649d97decab6b9961dd61fd3e61d7f9fc", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -477,7 +477,7 @@ impl<T> Option<T> {\n     /// assert_eq!(x.ok_or(0i), Err(0i));\n     /// ```\n     #[inline]\n-    #[experimental]\n+    #[unstable]\n     pub fn ok_or<E>(self, err: E) -> Result<T, E> {\n         match self {\n             Some(v) => Ok(v),\n@@ -498,7 +498,7 @@ impl<T> Option<T> {\n     /// assert_eq!(x.ok_or_else(|| 0i), Err(0i));\n     /// ```\n     #[inline]\n-    #[experimental]\n+    #[unstable]\n     pub fn ok_or_else<E, F: FnOnce() -> E>(self, err: F) -> Result<T, E> {\n         match self {\n             Some(v) => Ok(v),"}, {"sha": "ab1e69f0060644d5f3d7525ca9574c5c669fcd8f", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -106,7 +106,7 @@ pub use intrinsics::copy_nonoverlapping_memory;\n #[unstable]\n pub use intrinsics::copy_memory;\n \n-#[experimental = \"uncertain about naming and semantics\"]\n+#[unstable = \"uncertain about naming and semantics\"]\n pub use intrinsics::set_memory;\n \n "}, {"sha": "13a387c7cb0ed6c49580605c2fe7ed443729f642", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![allow(missing_docs)]\n-#![experimental]\n+#![unstable]\n \n //! Contains struct definitions for the layout of compiler built-in types.\n //!"}, {"sha": "f7421203336c3571e2b55a686ebbea52eac22577", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -953,7 +953,7 @@ impl<A, E, V: FromIterator<A>> FromIterator<Result<A, E>> for Result<V, E> {\n /// If an `Err` is encountered, it is immediately returned.\n /// Otherwise, the folded value is returned.\n #[inline]\n-#[experimental]\n+#[unstable]\n pub fn fold<T,\n             V,\n             E,"}, {"sha": "b73910d7c068c2e6afb216b53d985e859ff9607e", "filename": "src/libcore/simd.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsimd.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -19,7 +19,7 @@\n //! provided beyond this module.\n //!\n //! ```rust\n-//! #[allow(experimental)];\n+//! #[allow(unstable)];\n //!\n //! fn main() {\n //!     use std::simd::f32x4;\n@@ -37,7 +37,7 @@\n #![allow(non_camel_case_types)]\n #![allow(missing_docs)]\n \n-#[experimental]\n+#[unstable]\n #[simd]\n #[derive(Copy, Show)]\n #[repr(C)]\n@@ -46,26 +46,26 @@ pub struct i8x16(pub i8, pub i8, pub i8, pub i8,\n                  pub i8, pub i8, pub i8, pub i8,\n                  pub i8, pub i8, pub i8, pub i8);\n \n-#[experimental]\n+#[unstable]\n #[simd]\n #[derive(Copy, Show)]\n #[repr(C)]\n pub struct i16x8(pub i16, pub i16, pub i16, pub i16,\n                  pub i16, pub i16, pub i16, pub i16);\n \n-#[experimental]\n+#[unstable]\n #[simd]\n #[derive(Copy, Show)]\n #[repr(C)]\n pub struct i32x4(pub i32, pub i32, pub i32, pub i32);\n \n-#[experimental]\n+#[unstable]\n #[simd]\n #[derive(Copy, Show)]\n #[repr(C)]\n pub struct i64x2(pub i64, pub i64);\n \n-#[experimental]\n+#[unstable]\n #[simd]\n #[derive(Copy, Show)]\n #[repr(C)]\n@@ -74,32 +74,32 @@ pub struct u8x16(pub u8, pub u8, pub u8, pub u8,\n                  pub u8, pub u8, pub u8, pub u8,\n                  pub u8, pub u8, pub u8, pub u8);\n \n-#[experimental]\n+#[unstable]\n #[simd]\n #[derive(Copy, Show)]\n #[repr(C)]\n pub struct u16x8(pub u16, pub u16, pub u16, pub u16,\n                  pub u16, pub u16, pub u16, pub u16);\n \n-#[experimental]\n+#[unstable]\n #[simd]\n #[derive(Copy, Show)]\n #[repr(C)]\n pub struct u32x4(pub u32, pub u32, pub u32, pub u32);\n \n-#[experimental]\n+#[unstable]\n #[simd]\n #[derive(Copy, Show)]\n #[repr(C)]\n pub struct u64x2(pub u64, pub u64);\n \n-#[experimental]\n+#[unstable]\n #[simd]\n #[derive(Copy, Show)]\n #[repr(C)]\n pub struct f32x4(pub f32, pub f32, pub f32, pub f32);\n \n-#[experimental]\n+#[unstable]\n #[simd]\n #[derive(Copy, Show)]\n #[repr(C)]"}, {"sha": "7e47c5257a344942cfab44a2f0465dce27712f5f", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -457,7 +457,7 @@ impl<T> SliceExt for [T] {\n         self.binary_search_by(|p| p.cmp(x))\n     }\n \n-    #[experimental]\n+    #[unstable]\n     fn next_permutation(&mut self) -> bool where T: Ord {\n         // These cases only have 1 permutation each, so we can't do anything.\n         if self.len() < 2 { return false; }\n@@ -488,7 +488,7 @@ impl<T> SliceExt for [T] {\n         true\n     }\n \n-    #[experimental]\n+    #[unstable]\n     fn prev_permutation(&mut self) -> bool where T: Ord {\n         // These cases only have 1 permutation each, so we can't do anything.\n         if self.len() < 2 { return false; }\n@@ -630,25 +630,25 @@ impl<T> ops::IndexMut<ops::FullRange> for [T] {\n ////////////////////////////////////////////////////////////////////////////////\n \n /// Data that is viewable as a slice.\n-#[experimental = \"will be replaced by slice syntax\"]\n+#[unstable = \"will be replaced by slice syntax\"]\n pub trait AsSlice<T> {\n     /// Work with `self` as a slice.\n     fn as_slice<'a>(&'a self) -> &'a [T];\n }\n \n-#[experimental = \"trait is experimental\"]\n+#[unstable = \"trait is experimental\"]\n impl<T> AsSlice<T> for [T] {\n     #[inline(always)]\n     fn as_slice<'a>(&'a self) -> &'a [T] { self }\n }\n \n-#[experimental = \"trait is experimental\"]\n+#[unstable = \"trait is experimental\"]\n impl<'a, T, U: ?Sized + AsSlice<T>> AsSlice<T> for &'a U {\n     #[inline(always)]\n     fn as_slice(&self) -> &[T] { AsSlice::as_slice(*self) }\n }\n \n-#[experimental = \"trait is experimental\"]\n+#[unstable = \"trait is experimental\"]\n impl<'a, T, U: ?Sized + AsSlice<T>> AsSlice<T> for &'a mut U {\n     #[inline(always)]\n     fn as_slice(&self) -> &[T] { AsSlice::as_slice(*self) }\n@@ -754,7 +754,7 @@ pub struct Iter<'a, T: 'a> {\n     marker: marker::ContravariantLifetime<'a>\n }\n \n-#[experimental]\n+#[unstable]\n impl<'a, T> ops::Index<ops::Range<uint>> for Iter<'a, T> {\n     type Output = [T];\n     #[inline]\n@@ -763,7 +763,7 @@ impl<'a, T> ops::Index<ops::Range<uint>> for Iter<'a, T> {\n     }\n }\n \n-#[experimental]\n+#[unstable]\n impl<'a, T> ops::Index<ops::RangeTo<uint>> for Iter<'a, T> {\n     type Output = [T];\n     #[inline]\n@@ -772,7 +772,7 @@ impl<'a, T> ops::Index<ops::RangeTo<uint>> for Iter<'a, T> {\n     }\n }\n \n-#[experimental]\n+#[unstable]\n impl<'a, T> ops::Index<ops::RangeFrom<uint>> for Iter<'a, T> {\n     type Output = [T];\n     #[inline]\n@@ -781,7 +781,7 @@ impl<'a, T> ops::Index<ops::RangeFrom<uint>> for Iter<'a, T> {\n     }\n }\n \n-#[experimental]\n+#[unstable]\n impl<'a, T> ops::Index<ops::FullRange> for Iter<'a, T> {\n     type Output = [T];\n     #[inline]\n@@ -795,7 +795,7 @@ impl<'a, T> Iter<'a, T> {\n     ///\n     /// This has the same lifetime as the original slice, and so the\n     /// iterator can continue to be used while this exists.\n-    #[experimental]\n+    #[unstable]\n     pub fn as_slice(&self) -> &'a [T] {\n         make_slice!(T => &'a [T]: self.ptr, self.end)\n     }\n@@ -813,7 +813,7 @@ impl<'a, T> Clone for Iter<'a, T> {\n     fn clone(&self) -> Iter<'a, T> { *self }\n }\n \n-#[experimental = \"trait is experimental\"]\n+#[unstable = \"trait is experimental\"]\n impl<'a, T> RandomAccessIterator for Iter<'a, T> {\n     #[inline]\n     fn indexable(&self) -> uint {\n@@ -847,31 +847,31 @@ pub struct IterMut<'a, T: 'a> {\n }\n \n \n-#[experimental]\n+#[unstable]\n impl<'a, T> ops::Index<ops::Range<uint>> for IterMut<'a, T> {\n     type Output = [T];\n     #[inline]\n     fn index(&self, index: &ops::Range<uint>) -> &[T] {\n         self.index(&ops::FullRange).index(index)\n     }\n }\n-#[experimental]\n+#[unstable]\n impl<'a, T> ops::Index<ops::RangeTo<uint>> for IterMut<'a, T> {\n     type Output = [T];\n     #[inline]\n     fn index(&self, index: &ops::RangeTo<uint>) -> &[T] {\n         self.index(&ops::FullRange).index(index)\n     }\n }\n-#[experimental]\n+#[unstable]\n impl<'a, T> ops::Index<ops::RangeFrom<uint>> for IterMut<'a, T> {\n     type Output = [T];\n     #[inline]\n     fn index(&self, index: &ops::RangeFrom<uint>) -> &[T] {\n         self.index(&ops::FullRange).index(index)\n     }\n }\n-#[experimental]\n+#[unstable]\n impl<'a, T> ops::Index<ops::FullRange> for IterMut<'a, T> {\n     type Output = [T];\n     #[inline]\n@@ -880,31 +880,31 @@ impl<'a, T> ops::Index<ops::FullRange> for IterMut<'a, T> {\n     }\n }\n \n-#[experimental]\n+#[unstable]\n impl<'a, T> ops::IndexMut<ops::Range<uint>> for IterMut<'a, T> {\n     type Output = [T];\n     #[inline]\n     fn index_mut(&mut self, index: &ops::Range<uint>) -> &mut [T] {\n         self.index_mut(&ops::FullRange).index_mut(index)\n     }\n }\n-#[experimental]\n+#[unstable]\n impl<'a, T> ops::IndexMut<ops::RangeTo<uint>> for IterMut<'a, T> {\n     type Output = [T];\n     #[inline]\n     fn index_mut(&mut self, index: &ops::RangeTo<uint>) -> &mut [T] {\n         self.index_mut(&ops::FullRange).index_mut(index)\n     }\n }\n-#[experimental]\n+#[unstable]\n impl<'a, T> ops::IndexMut<ops::RangeFrom<uint>> for IterMut<'a, T> {\n     type Output = [T];\n     #[inline]\n     fn index_mut(&mut self, index: &ops::RangeFrom<uint>) -> &mut [T] {\n         self.index_mut(&ops::FullRange).index_mut(index)\n     }\n }\n-#[experimental]\n+#[unstable]\n impl<'a, T> ops::IndexMut<ops::FullRange> for IterMut<'a, T> {\n     type Output = [T];\n     #[inline]\n@@ -921,7 +921,7 @@ impl<'a, T> IterMut<'a, T> {\n     /// to consume the iterator. Consider using the `Slice` and\n     /// `SliceMut` implementations for obtaining slices with more\n     /// restricted lifetimes that do not consume the iterator.\n-    #[experimental]\n+    #[unstable]\n     pub fn into_slice(self) -> &'a mut [T] {\n         make_slice!(T => &'a mut [T]: self.ptr, self.end)\n     }\n@@ -1269,7 +1269,7 @@ impl<'a, T> DoubleEndedIterator for Chunks<'a, T> {\n     }\n }\n \n-#[experimental = \"trait is experimental\"]\n+#[unstable = \"trait is experimental\"]\n impl<'a, T> RandomAccessIterator for Chunks<'a, T> {\n     #[inline]\n     fn indexable(&self) -> uint {\n@@ -1417,7 +1417,7 @@ pub unsafe fn from_raw_mut_buf<'a, T>(p: &'a *mut T, len: uint) -> &'a mut [T] {\n //\n \n /// Operations on `[u8]`.\n-#[experimental = \"needs review\"]\n+#[unstable = \"needs review\"]\n pub mod bytes {\n     use ptr;\n     use slice::SliceExt;\n@@ -1430,7 +1430,7 @@ pub mod bytes {\n \n     impl MutableByteVector for [u8] {\n         #[inline]\n-        #[allow(experimental)]\n+        #[allow(unstable)]\n         fn set_memory(&mut self, value: u8) {\n             unsafe { ptr::set_memory(self.as_mut_ptr(), value, self.len()) };\n         }\n@@ -1506,7 +1506,7 @@ impl<T: PartialOrd> PartialOrd for [T] {\n }\n \n /// Extension methods for slices containing integers.\n-#[experimental]\n+#[unstable]\n pub trait IntSliceExt<U, S> {\n     /// Converts the slice to an immutable slice of unsigned integers with the same width.\n     fn as_unsigned<'a>(&'a self) -> &'a [U];\n@@ -1521,7 +1521,7 @@ pub trait IntSliceExt<U, S> {\n \n macro_rules! impl_int_slice {\n     ($u:ty, $s:ty, $t:ty) => {\n-        #[experimental]\n+        #[unstable]\n         impl IntSliceExt<$u, $s> for [$t] {\n             #[inline]\n             fn as_unsigned(&self) -> &[$u] { unsafe { transmute(self) } }"}, {"sha": "a808593ffbd7d61f1cd39515c69adba34799e27a", "filename": "src/libcoretest/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcoretest%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibcoretest%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fcell.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -114,7 +114,7 @@ fn discard_doesnt_unborrow() {\n }\n \n #[test]\n-#[allow(experimental)]\n+#[allow(unstable)]\n fn clone_ref_updates_flag() {\n     let x = RefCell::new(0i);\n     {"}, {"sha": "e7e1ead664cbcb2d3f405e3a2a0801e7c80a766d", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -15,7 +15,7 @@\n //! [mz]: https://code.google.com/p/miniz/\n \n #![crate_name = \"flate\"]\n-#![experimental]\n+#![unstable]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]"}, {"sha": "a16fc88d58a38013ac81ae16e67b4a0aa373f853", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -15,7 +15,7 @@\n //! generated instead.\n \n #![crate_name = \"fmt_macros\"]\n-#![experimental]\n+#![unstable]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]"}, {"sha": "a85c8eed5e24175d950c6005ce48f2c9df2672ab", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -78,7 +78,7 @@\n //! ```\n \n #![crate_name = \"getopts\"]\n-#![experimental = \"use the crates.io `getopts` library instead\"]\n+#![unstable = \"use the crates.io `getopts` library instead\"]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]"}, {"sha": "d6d76b986e4bd6e6c7d8fda5651b75a03768c228", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -265,7 +265,7 @@\n //! * [DOT language](http://www.graphviz.org/doc/info/lang.html)\n \n #![crate_name = \"graphviz\"]\n-#![experimental]\n+#![unstable]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]"}, {"sha": "be630995e24a0c944a0da4a936e212a722b9d28d", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -10,7 +10,7 @@\n \n #![crate_name = \"libc\"]\n #![crate_type = \"rlib\"]\n-#![cfg_attr(not(feature = \"cargo-build\"), experimental)]\n+#![cfg_attr(not(feature = \"cargo-build\"), unstable)]\n #![cfg_attr(not(feature = \"cargo-build\"), staged_api)]\n #![no_std]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "96d31444eee942591d1acb831d939b52eece6488", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -156,7 +156,7 @@\n //! if logging is disabled, none of the components of the log will be executed.\n \n #![crate_name = \"log\"]\n-#![experimental = \"use the crates.io `log` library instead\"]\n+#![unstable = \"use the crates.io `log` library instead\"]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]"}, {"sha": "e248de10df4965c2a9a9856ba7120ba304a566be", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -17,7 +17,7 @@\n //! internally. The `IndependentSample` trait is for generating values\n //! that do not need to record state.\n \n-#![experimental]\n+#![unstable]\n \n use core::prelude::*;\n use core::num::{Float, Int};"}, {"sha": "a533739ee3b92f6a8ce473d934a371dfa23c23d5", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -24,7 +24,7 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n #![no_std]\n-#![experimental]\n+#![unstable]\n #![staged_api]\n \n #[macro_use]"}, {"sha": "19cbead5489e901a81ef3e2b12e1c1b2398818dc", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -16,7 +16,7 @@\n //!     http://www.matroska.org/technical/specs/rfc/index.html\n \n #![crate_name = \"rbml\"]\n-#![experimental]\n+#![unstable]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]"}, {"sha": "bbc2e315409e2e3f08afe55261b26c180832637e", "filename": "src/libregex/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibregex%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibregex%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Flib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -16,7 +16,7 @@\n #![crate_name = \"regex\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n-#![experimental = \"use the crates.io `regex` library instead\"]\n+#![unstable = \"use the crates.io `regex` library instead\"]\n #![staged_api]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\","}, {"sha": "abc51d6240409511fba2615d017ad27abf0ea839", "filename": "src/libregex/re.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibregex%2Fre.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibregex%2Fre.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fre.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -255,7 +255,7 @@ impl Regex {\n     }\n \n     #[doc(hidden)]\n-    #[experimental]\n+    #[unstable]\n     pub fn names_iter<'a>(&'a self) -> NamesIter<'a> {\n         match *self {\n             Native(ref n) => NamesIterNative(n.names.iter()),\n@@ -410,7 +410,7 @@ pub struct Captures<'t> {\n }\n \n impl<'t> Captures<'t> {\n-    #[allow(experimental)]\n+    #[allow(unstable)]\n     fn new(re: &Regex, search: &'t str, locs: CaptureLocs)\n           -> Option<Captures<'t>> {\n         if !has_match(&locs) {"}, {"sha": "138a49d09557a0ffa84ef628b16fba18bb186621", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -15,7 +15,7 @@\n //! This API is completely unstable and subject to change.\n \n #![crate_name = \"rustc\"]\n-#![experimental]\n+#![unstable]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]"}, {"sha": "7df2de32182356e09cf8282e2623f6aeca866631", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 11, "deletions": 26, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -1630,36 +1630,29 @@ declare_lint! {\n     Warn,\n     \"detects use of #[deprecated] items\"\n }\n-// FIXME #6875: Change to Warn after std library stabilization is complete\n-declare_lint! {\n-    EXPERIMENTAL,\n-    Allow,\n-    \"detects use of #[experimental] items\"\n-}\n \n declare_lint! {\n     UNSTABLE,\n-    Allow,\n+    Warn,\n     \"detects use of #[unstable] items (incl. items with no stability attribute)\"\n }\n \n-declare_lint!(STAGED_EXPERIMENTAL, Warn,\n-              \"detects use of #[experimental] items in staged builds\");\n-\n-declare_lint!(STAGED_UNSTABLE, Warn,\n-              \"detects use of #[unstable] items (incl. items with no stability attribute) \\\n-               in staged builds\");\n-\n-/// Checks for use of items with `#[deprecated]`, `#[experimental]` and\n+/// Checks for use of items with `#[deprecated]`, `#[unstable]` and\n /// `#[unstable]` attributes, or no stability attribute.\n #[derive(Copy)]\n-pub struct Stability;\n+pub struct Stability { this_crate_staged: bool }\n \n impl Stability {\n+    pub fn new() -> Stability { Stability { this_crate_staged: false } }\n+\n     fn lint(&self, cx: &Context, id: ast::DefId, span: Span) {\n \n         let ref stability = stability::lookup(cx.tcx, id);\n         let cross_crate = !ast_util::is_local(id);\n+        let staged = (!cross_crate && self.this_crate_staged)\n+            || (cross_crate && stability::is_staged_api(cx.tcx, id));\n+\n+        if !staged { return }\n \n         // stability attributes are promises made across crates; only\n         // check DEPRECATED for crate-local usage.\n@@ -1668,21 +1661,12 @@ impl Stability {\n             None if cross_crate => (UNSTABLE, \"unmarked\"),\n             Some(attr::Stability { level: attr::Unstable, .. }) if cross_crate =>\n                 (UNSTABLE, \"unstable\"),\n-            Some(attr::Stability { level: attr::Experimental, .. }) if cross_crate =>\n-                (EXPERIMENTAL, \"experimental\"),\n             Some(attr::Stability { level: attr::Deprecated, .. }) =>\n                 (DEPRECATED, \"deprecated\"),\n             _ => return\n         };\n \n         output(cx, span, stability, lint, label);\n-        if cross_crate && stability::is_staged_api(cx.tcx, id) {\n-            if lint.name == UNSTABLE.name {\n-                output(cx, span, stability, STAGED_UNSTABLE, label);\n-            } else if lint.name == EXPERIMENTAL.name {\n-                output(cx, span, stability, STAGED_EXPERIMENTAL, label);\n-            }\n-        }\n \n         fn output(cx: &Context, span: Span, stability: &Option<attr::Stability>,\n                   lint: &'static Lint, label: &'static str) {\n@@ -1706,7 +1690,7 @@ impl Stability {\n \n impl LintPass for Stability {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(DEPRECATED, EXPERIMENTAL, UNSTABLE, STAGED_EXPERIMENTAL, STAGED_UNSTABLE)\n+        lint_array!(DEPRECATED, UNSTABLE)\n     }\n \n     fn check_crate(&mut self, _: &Context, c: &ast::Crate) {\n@@ -1717,6 +1701,7 @@ impl LintPass for Stability {\n                 match attr.node.value.node {\n                     ast::MetaWord(_) => {\n                         attr::mark_used(attr);\n+                        self.this_crate_staged = true;\n                     }\n                     _ => (/*pass*/)\n                 }"}, {"sha": "95e1e8d44bfc5044aec739ec98f5c89ec5aaeb7e", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -209,7 +209,6 @@ impl LintStore {\n                      UnsafeBlocks,\n                      UnusedMut,\n                      UnusedAllocation,\n-                     Stability,\n                      MissingCopyImplementations,\n                      UnstableFeatures,\n         );\n@@ -218,6 +217,7 @@ impl LintStore {\n                               TypeLimits,\n                               RawPointerDerive,\n                               MissingDoc,\n+                              Stability,\n         );\n \n         add_lint_group!(sess, \"bad_style\",\n@@ -308,18 +308,21 @@ impl LintStore {\n             UnstableFeatures::Cheat => Allow\n         };\n         match self.by_name.get(\"unstable_features\") {\n-            Some(&Id(lint_id)) => self.set_level(lint_id, (lvl, ReleaseChannel)),\n-            Some(&Renamed(_, lint_id)) => self.set_level(lint_id, (lvl, ReleaseChannel)),\n-            None => unreachable!()\n-        }\n-        match self.by_name.get(\"staged_unstable\") {\n-            Some(&Id(lint_id)) => self.set_level(lint_id, (lvl, ReleaseChannel)),\n-            Some(&Renamed(_, lint_id)) => self.set_level(lint_id, (lvl, ReleaseChannel)),\n+            Some(&Id(lint_id)) => if self.get_level_source(lint_id).0 != Forbid {\n+                self.set_level(lint_id, (lvl, ReleaseChannel))\n+            },\n+            Some(&Renamed(_, lint_id)) => if self.get_level_source(lint_id).0 != Forbid {\n+                self.set_level(lint_id, (lvl, ReleaseChannel))\n+            },\n             None => unreachable!()\n         }\n-        match self.by_name.get(\"staged_experimental\") {\n-            Some(&Id(lint_id)) => self.set_level(lint_id, (lvl, ReleaseChannel)),\n-            Some(&Renamed(_, lint_id)) => self.set_level(lint_id, (lvl, ReleaseChannel)),\n+        match self.by_name.get(\"unstable\") {\n+            Some(&Id(lint_id)) => if self.get_level_source(lint_id).0 != Forbid {\n+                self.set_level(lint_id, (lvl, ReleaseChannel))\n+            },\n+            Some(&Renamed(_, lint_id)) => if self.get_level_source(lint_id).0 != Forbid {\n+                self.set_level(lint_id, (lvl, ReleaseChannel))\n+            },\n             None => unreachable!()\n         }\n     }"}, {"sha": "826a35e3bb529b9229f5cea1ffbe7b284f475b18", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -40,7 +40,7 @@ use syntax::ast;\n pub use lint::context::{Context, LintStore, raw_emit_lint, check_crate, gather_attrs};\n \n /// Specification of a single lint.\n-#[derive(Copy)]\n+#[derive(Copy, Show)]\n pub struct Lint {\n     /// A string identifier for the lint.\n     ///\n@@ -208,7 +208,7 @@ impl LintId {\n }\n \n /// Setting for how to handle a lint.\n-#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord)]\n+#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Show)]\n pub enum Level {\n     Allow, Warn, Deny, Forbid\n }"}, {"sha": "7aac6446597108fd126d7f01efe103dcc3b688a8", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -22,7 +22,7 @@\n //! build speedups.\n \n #![crate_name = \"rustc_back\"]\n-#![experimental]\n+#![unstable]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]"}, {"sha": "162880d1856916f1cad12c5f963264d02a744ac3", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![crate_name = \"rustc_borrowck\"]\n-#![experimental]\n+#![unstable]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]"}, {"sha": "26790bfcde022eb142ff8912af150f966bc6f7db", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -15,7 +15,7 @@\n //! This API is completely unstable and subject to change.\n \n #![crate_name = \"rustc_driver\"]\n-#![experimental]\n+#![unstable]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]"}, {"sha": "61363e5423b6653fffa3330e763d4f782d3d4eb5", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -14,7 +14,7 @@\n #![allow(dead_code)]\n \n #![crate_name = \"rustc_llvm\"]\n-#![experimental]\n+#![unstable]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]"}, {"sha": "65075745ee0d9933904d76942059f19b753520f0", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![crate_name = \"rustc_resolve\"]\n-#![experimental]\n+#![unstable]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]"}, {"sha": "97b3dc12f4c4d2f212ffcd8e9c9b8a36eb6f2c79", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -15,7 +15,7 @@\n //! This API is completely unstable and subject to change.\n \n #![crate_name = \"rustc_trans\"]\n-#![experimental]\n+#![unstable]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]"}, {"sha": "5824fb776bb85412a3101b8023c79a592da89a02", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -64,7 +64,7 @@ This API is completely unstable and subject to change.\n */\n \n #![crate_name = \"rustc_typeck\"]\n-#![experimental]\n+#![unstable]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]"}, {"sha": "1bbbcfb3838bdde461dfd775c966129e01d38c54", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![crate_name = \"rustdoc\"]\n-#![experimental]\n+#![unstable]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]"}, {"sha": "77c2315194bb4e26aeb8fc78f208317992c5e757", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -22,7 +22,7 @@ use string::String;\n use vec::Vec;\n \n /// Extension methods for ASCII-subset only operations on owned strings\n-#[experimental = \"would prefer to do this in a more general way\"]\n+#[unstable = \"would prefer to do this in a more general way\"]\n pub trait OwnedAsciiExt {\n     /// Convert the string to ASCII upper case:\n     /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n@@ -36,7 +36,7 @@ pub trait OwnedAsciiExt {\n }\n \n /// Extension methods for ASCII-subset only operations on string slices\n-#[experimental = \"would prefer to do this in a more general way\"]\n+#[unstable = \"would prefer to do this in a more general way\"]\n pub trait AsciiExt<T = Self> {\n     /// Check if within the ASCII range.\n     fn is_ascii(&self) -> bool;\n@@ -57,7 +57,7 @@ pub trait AsciiExt<T = Self> {\n     fn eq_ignore_ascii_case(&self, other: &Self) -> bool;\n }\n \n-#[experimental = \"would prefer to do this in a more general way\"]\n+#[unstable = \"would prefer to do this in a more general way\"]\n impl AsciiExt<String> for str {\n     #[inline]\n     fn is_ascii(&self) -> bool {\n@@ -82,7 +82,7 @@ impl AsciiExt<String> for str {\n     }\n }\n \n-#[experimental = \"would prefer to do this in a more general way\"]\n+#[unstable = \"would prefer to do this in a more general way\"]\n impl OwnedAsciiExt for String {\n     #[inline]\n     fn into_ascii_uppercase(self) -> String {\n@@ -97,7 +97,7 @@ impl OwnedAsciiExt for String {\n     }\n }\n \n-#[experimental = \"would prefer to do this in a more general way\"]\n+#[unstable = \"would prefer to do this in a more general way\"]\n impl AsciiExt<Vec<u8>> for [u8] {\n     #[inline]\n     fn is_ascii(&self) -> bool {\n@@ -123,7 +123,7 @@ impl AsciiExt<Vec<u8>> for [u8] {\n     }\n }\n \n-#[experimental = \"would prefer to do this in a more general way\"]\n+#[unstable = \"would prefer to do this in a more general way\"]\n impl OwnedAsciiExt for Vec<u8> {\n     #[inline]\n     fn into_ascii_uppercase(mut self) -> Vec<u8> {\n@@ -142,7 +142,7 @@ impl OwnedAsciiExt for Vec<u8> {\n     }\n }\n \n-#[experimental = \"would prefer to do this in a more general way\"]\n+#[unstable = \"would prefer to do this in a more general way\"]\n impl AsciiExt for u8 {\n     #[inline]\n     fn is_ascii(&self) -> bool {\n@@ -165,7 +165,7 @@ impl AsciiExt for u8 {\n     }\n }\n \n-#[experimental = \"would prefer to do this in a more general way\"]\n+#[unstable = \"would prefer to do this in a more general way\"]\n impl AsciiExt for char {\n     #[inline]\n     fn is_ascii(&self) -> bool {"}, {"sha": "3a059766fef8e24f95f8bf6a8dced8714320ab0c", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![experimental]\n+#![unstable]\n \n //! A typesafe bitmask flag generator.\n "}, {"sha": "456f3763b39162d523fe1ab646715fa6c1a2ded7", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -632,7 +632,7 @@ impl<K, V> RawTable<K, V> {\n \n     /// Creates a new raw table from a given capacity. All buckets are\n     /// initially empty.\n-    #[allow(experimental)]\n+    #[allow(unstable)]\n     pub fn new(capacity: uint) -> RawTable<K, V> {\n         unsafe {\n             let ret = RawTable::new_uninitialized(capacity);"}, {"sha": "3eeb09b79dab23904539f68eec00317e540a303a", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -12,7 +12,7 @@\n //!\n //! A simple wrapper over the platform's dynamic library facilities\n \n-#![experimental]\n+#![unstable]\n #![allow(missing_docs)]\n \n use prelude::v1::*;"}, {"sha": "54191cf24040e743eff746b2b3e4d1d07cf66203", "filename": "src/libstd/failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Ffailure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Ffailure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffailure.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![experimental]\n+#![unstable]\n \n use prelude::v1::*;\n "}, {"sha": "907925e93d3999145b8a3aa470c9e3e75ad64c61", "filename": "src/libstd/fmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -410,7 +410,7 @@\n //! them with the same character. For example, the `{` character is escaped with\n //! `{{` and the `}` character is escaped with `}}`.\n \n-#![experimental]\n+#![unstable]\n \n use string;\n \n@@ -439,7 +439,7 @@ pub use core::fmt::{argument, argumentuint};\n /// let s = fmt::format(format_args!(\"Hello, {}!\", \"world\"));\n /// assert_eq!(s, \"Hello, world!\".to_string());\n /// ```\n-#[experimental = \"this is an implementation detail of format! and should not \\\n+#[unstable = \"this is an implementation detail of format! and should not \\\n                   be called directly\"]\n pub fn format(args: Arguments) -> string::String {\n     let mut output = string::String::new();"}, {"sha": "3968dda2a82026051a4687abf6a487314a63fa1b", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -219,7 +219,7 @@\n //! concerned with error handling; instead its caller is responsible for\n //! responding to errors that may occur while attempting to read the numbers.\n \n-#![experimental]\n+#![unstable]\n #![deny(unused_must_use)]\n \n pub use self::SeekStyle::*;"}, {"sha": "42d9fff6d151da84989f9626880067cf7a5e54c4", "filename": "src/libstd/io/net/pipe.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -68,7 +68,7 @@ impl UnixStream {\n     ///\n     /// If a `timeout` with zero or negative duration is specified then\n     /// the function returns `Err`, with the error kind set to `TimedOut`.\n-    #[experimental = \"the timeout argument is likely to change types\"]\n+    #[unstable = \"the timeout argument is likely to change types\"]\n     pub fn connect_timeout<P>(path: P, timeout: Duration)\n                               -> IoResult<UnixStream>\n                               where P: BytesContainer {\n@@ -107,23 +107,23 @@ impl UnixStream {\n     /// Sets the read/write timeout for this socket.\n     ///\n     /// For more information, see `TcpStream::set_timeout`\n-    #[experimental = \"the timeout argument may change in type and value\"]\n+    #[unstable = \"the timeout argument may change in type and value\"]\n     pub fn set_timeout(&mut self, timeout_ms: Option<u64>) {\n         self.inner.set_timeout(timeout_ms)\n     }\n \n     /// Sets the read timeout for this socket.\n     ///\n     /// For more information, see `TcpStream::set_timeout`\n-    #[experimental = \"the timeout argument may change in type and value\"]\n+    #[unstable = \"the timeout argument may change in type and value\"]\n     pub fn set_read_timeout(&mut self, timeout_ms: Option<u64>) {\n         self.inner.set_read_timeout(timeout_ms)\n     }\n \n     /// Sets the write timeout for this socket.\n     ///\n     /// For more information, see `TcpStream::set_timeout`\n-    #[experimental = \"the timeout argument may change in type and value\"]\n+    #[unstable = \"the timeout argument may change in type and value\"]\n     pub fn set_write_timeout(&mut self, timeout_ms: Option<u64>) {\n         self.inner.set_write_timeout(timeout_ms)\n     }\n@@ -219,7 +219,7 @@ impl UnixAcceptor {\n     /// When using this method, it is likely necessary to reset the timeout as\n     /// appropriate, the timeout specified is specific to this object, not\n     /// specific to the next request.\n-    #[experimental = \"the name and arguments to this function are likely \\\n+    #[unstable = \"the name and arguments to this function are likely \\\n                       to change\"]\n     pub fn set_timeout(&mut self, timeout_ms: Option<u64>) {\n         self.inner.set_timeout(timeout_ms)\n@@ -229,7 +229,7 @@ impl UnixAcceptor {\n     ///\n     /// This function has the same semantics as `TcpAcceptor::close_accept`, and\n     /// more information can be found in that documentation.\n-    #[experimental]\n+    #[unstable]\n     pub fn close_accept(&mut self) -> IoResult<()> {\n         self.inner.close_accept()\n     }"}, {"sha": "6a3f5fcb2c69902d43b01c0afa8d23796c9c1307", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -85,7 +85,7 @@ impl TcpStream {\n     ///\n     /// If a `timeout` with zero or negative duration is specified then\n     /// the function returns `Err`, with the error kind set to `TimedOut`.\n-    #[experimental = \"the timeout argument may eventually change types\"]\n+    #[unstable = \"the timeout argument may eventually change types\"]\n     pub fn connect_timeout<A: ToSocketAddr>(addr: A,\n                                             timeout: Duration) -> IoResult<TcpStream> {\n         if timeout <= Duration::milliseconds(0) {\n@@ -109,7 +109,7 @@ impl TcpStream {\n     }\n \n     /// Sets the nodelay flag on this connection to the boolean specified\n-    #[experimental]\n+    #[unstable]\n     pub fn set_nodelay(&mut self, nodelay: bool) -> IoResult<()> {\n         self.inner.set_nodelay(nodelay)\n     }\n@@ -119,7 +119,7 @@ impl TcpStream {\n     /// If the value specified is `None`, then the keepalive flag is cleared on\n     /// this connection. Otherwise, the keepalive timeout will be set to the\n     /// specified time, in seconds.\n-    #[experimental]\n+    #[unstable]\n     pub fn set_keepalive(&mut self, delay_in_seconds: Option<uint>) -> IoResult<()> {\n         self.inner.set_keepalive(delay_in_seconds)\n     }\n@@ -187,7 +187,7 @@ impl TcpStream {\n     ///\n     /// For clarification on the semantics of interrupting a read and a write,\n     /// take a look at `set_read_timeout` and `set_write_timeout`.\n-    #[experimental = \"the timeout argument may change in type and value\"]\n+    #[unstable = \"the timeout argument may change in type and value\"]\n     pub fn set_timeout(&mut self, timeout_ms: Option<u64>) {\n         self.inner.set_timeout(timeout_ms)\n     }\n@@ -204,7 +204,7 @@ impl TcpStream {\n     /// action is taken. Otherwise, the read operation will be scheduled to\n     /// promptly return. If a timeout error is returned, then no data was read\n     /// during the timeout period.\n-    #[experimental = \"the timeout argument may change in type and value\"]\n+    #[unstable = \"the timeout argument may change in type and value\"]\n     pub fn set_read_timeout(&mut self, timeout_ms: Option<u64>) {\n         self.inner.set_read_timeout(timeout_ms)\n     }\n@@ -231,7 +231,7 @@ impl TcpStream {\n     /// does not know how many bytes were written as part of the timeout\n     /// operation. It may be the case that bytes continue to be written in an\n     /// asynchronous fashion after the call to write returns.\n-    #[experimental = \"the timeout argument may change in type and value\"]\n+    #[unstable = \"the timeout argument may change in type and value\"]\n     pub fn set_write_timeout(&mut self, timeout_ms: Option<u64>) {\n         self.inner.set_write_timeout(timeout_ms)\n     }\n@@ -374,7 +374,7 @@ impl TcpAcceptor {\n     /// # Example\n     ///\n     /// ```no_run\n-    /// # #![allow(experimental)]\n+    /// # #![allow(unstable)]\n     /// use std::io::TcpListener;\n     /// use std::io::{Listener, Acceptor, TimedOut};\n     ///\n@@ -397,7 +397,7 @@ impl TcpAcceptor {\n     /// a.set_timeout(None);\n     /// let socket = a.accept();\n     /// ```\n-    #[experimental = \"the type of the argument and name of this function are \\\n+    #[unstable = \"the type of the argument and name of this function are \\\n                       subject to change\"]\n     pub fn set_timeout(&mut self, ms: Option<u64>) { self.inner.set_timeout(ms); }\n \n@@ -418,7 +418,7 @@ impl TcpAcceptor {\n     /// # Example\n     ///\n     /// ```\n-    /// # #![allow(experimental)]\n+    /// # #![allow(unstable)]\n     /// use std::io::{TcpListener, Listener, Acceptor, EndOfFile};\n     /// use std::thread::Thread;\n     ///\n@@ -444,7 +444,7 @@ impl TcpAcceptor {\n     /// // Signal our accept loop to exit\n     /// assert!(a.close_accept().is_ok());\n     /// ```\n-    #[experimental]\n+    #[unstable]\n     pub fn close_accept(&mut self) -> IoResult<()> {\n         self.inner.close_accept()\n     }\n@@ -482,7 +482,7 @@ impl sys_common::AsInner<TcpAcceptorImp> for TcpAcceptor {\n }\n \n #[cfg(test)]\n-#[allow(experimental)]\n+#[allow(unstable)]\n mod test {\n     use prelude::v1::*;\n "}, {"sha": "8cdad3f528a4856fcfa8b760a7010d2e17e9c62e", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -92,63 +92,63 @@ impl UdpSocket {\n     }\n \n     /// Joins a multicast IP address (becomes a member of it)\n-    #[experimental]\n+    #[unstable]\n     pub fn join_multicast(&mut self, multi: IpAddr) -> IoResult<()> {\n         self.inner.join_multicast(multi)\n     }\n \n     /// Leaves a multicast IP address (drops membership from it)\n-    #[experimental]\n+    #[unstable]\n     pub fn leave_multicast(&mut self, multi: IpAddr) -> IoResult<()> {\n         self.inner.leave_multicast(multi)\n     }\n \n     /// Set the multicast loop flag to the specified value\n     ///\n     /// This lets multicast packets loop back to local sockets (if enabled)\n-    #[experimental]\n+    #[unstable]\n     pub fn set_multicast_loop(&mut self, on: bool) -> IoResult<()> {\n         self.inner.set_multicast_loop(on)\n     }\n \n     /// Sets the multicast TTL\n-    #[experimental]\n+    #[unstable]\n     pub fn set_multicast_ttl(&mut self, ttl: int) -> IoResult<()> {\n         self.inner.multicast_time_to_live(ttl)\n     }\n \n     /// Sets this socket's TTL\n-    #[experimental]\n+    #[unstable]\n     pub fn set_ttl(&mut self, ttl: int) -> IoResult<()> {\n         self.inner.time_to_live(ttl)\n     }\n \n     /// Sets the broadcast flag on or off\n-    #[experimental]\n+    #[unstable]\n     pub fn set_broadcast(&mut self, broadcast: bool) -> IoResult<()> {\n         self.inner.set_broadcast(broadcast)\n     }\n \n     /// Sets the read/write timeout for this socket.\n     ///\n     /// For more information, see `TcpStream::set_timeout`\n-    #[experimental = \"the timeout argument may change in type and value\"]\n+    #[unstable = \"the timeout argument may change in type and value\"]\n     pub fn set_timeout(&mut self, timeout_ms: Option<u64>) {\n         self.inner.set_timeout(timeout_ms)\n     }\n \n     /// Sets the read timeout for this socket.\n     ///\n     /// For more information, see `TcpStream::set_timeout`\n-    #[experimental = \"the timeout argument may change in type and value\"]\n+    #[unstable = \"the timeout argument may change in type and value\"]\n     pub fn set_read_timeout(&mut self, timeout_ms: Option<u64>) {\n         self.inner.set_read_timeout(timeout_ms)\n     }\n \n     /// Sets the write timeout for this socket.\n     ///\n     /// For more information, see `TcpStream::set_timeout`\n-    #[experimental = \"the timeout argument may change in type and value\"]\n+    #[unstable = \"the timeout argument may change in type and value\"]\n     pub fn set_write_timeout(&mut self, timeout_ms: Option<u64>) {\n         self.inner.set_write_timeout(timeout_ms)\n     }\n@@ -176,7 +176,7 @@ impl sys_common::AsInner<UdpSocketImp> for UdpSocket {\n }\n \n #[cfg(test)]\n-#[allow(experimental)]\n+#[allow(unstable)]\n mod test {\n     use prelude::v1::*;\n "}, {"sha": "a093e748d573653a80f5cd01ff392fef1289c72a", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -10,7 +10,7 @@\n \n //! Bindings for executing child processes\n \n-#![allow(experimental)]\n+#![allow(unstable)]\n #![allow(non_upper_case_globals)]\n \n pub use self::StdioContainer::*;\n@@ -661,7 +661,7 @@ impl Process {\n     /// # Example\n     ///\n     /// ```no_run\n-    /// # #![allow(experimental)]\n+    /// # #![allow(unstable)]\n     /// use std::io::{Command, IoResult};\n     /// use std::io::process::ProcessExit;\n     ///\n@@ -689,7 +689,7 @@ impl Process {\n     ///     p.wait()\n     /// }\n     /// ```\n-    #[experimental = \"the type of the timeout is likely to change\"]\n+    #[unstable = \"the type of the timeout is likely to change\"]\n     pub fn set_timeout(&mut self, timeout_ms: Option<u64>) {\n         self.deadline = timeout_ms.map(|i| i + sys::timer::now()).unwrap_or(0);\n     }"}, {"sha": "0f293d789ab0abfcb5d605c3fad2ebd4032bf56b", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -14,7 +14,7 @@\n //! library. Each macro is available for use when linking against the standard\n //! library.\n \n-#![experimental]\n+#![unstable]\n \n /// The entry point for panic of Rust tasks.\n ///\n@@ -324,7 +324,7 @@ macro_rules! try {\n ///\n /// For more information about select, see the `std::sync::mpsc::Select` structure.\n #[macro_export]\n-#[experimental]\n+#[unstable]\n macro_rules! select {\n     (\n         $($name:pat = $rx:ident.$meth:ident() => $code:expr),+"}, {"sha": "adbce893887709912904e4cca5d9879c55d00031", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -366,7 +366,7 @@ impl Float for f32 {\n ///\n /// * num - The float value\n #[inline]\n-#[experimental = \"may be removed or relocated\"]\n+#[unstable = \"may be removed or relocated\"]\n pub fn to_string(num: f32) -> String {\n     let (r, _) = strconv::float_to_str_common(\n         num, 10u, true, SignNeg, DigAll, ExpNone, false);\n@@ -379,7 +379,7 @@ pub fn to_string(num: f32) -> String {\n ///\n /// * num - The float value\n #[inline]\n-#[experimental = \"may be removed or relocated\"]\n+#[unstable = \"may be removed or relocated\"]\n pub fn to_str_hex(num: f32) -> String {\n     let (r, _) = strconv::float_to_str_common(\n         num, 16u, true, SignNeg, DigAll, ExpNone, false);\n@@ -394,7 +394,7 @@ pub fn to_str_hex(num: f32) -> String {\n /// * num - The float value\n /// * radix - The base to use\n #[inline]\n-#[experimental = \"may be removed or relocated\"]\n+#[unstable = \"may be removed or relocated\"]\n pub fn to_str_radix_special(num: f32, rdx: uint) -> (String, bool) {\n     strconv::float_to_str_common(num, rdx, true, SignNeg, DigAll, ExpNone, false)\n }\n@@ -407,7 +407,7 @@ pub fn to_str_radix_special(num: f32, rdx: uint) -> (String, bool) {\n /// * num - The float value\n /// * digits - The number of significant digits\n #[inline]\n-#[experimental = \"may be removed or relocated\"]\n+#[unstable = \"may be removed or relocated\"]\n pub fn to_str_exact(num: f32, dig: uint) -> String {\n     let (r, _) = strconv::float_to_str_common(\n         num, 10u, true, SignNeg, DigExact(dig), ExpNone, false);\n@@ -422,7 +422,7 @@ pub fn to_str_exact(num: f32, dig: uint) -> String {\n /// * num - The float value\n /// * digits - The number of significant digits\n #[inline]\n-#[experimental = \"may be removed or relocated\"]\n+#[unstable = \"may be removed or relocated\"]\n pub fn to_str_digits(num: f32, dig: uint) -> String {\n     let (r, _) = strconv::float_to_str_common(\n         num, 10u, true, SignNeg, DigMax(dig), ExpNone, false);\n@@ -438,7 +438,7 @@ pub fn to_str_digits(num: f32, dig: uint) -> String {\n /// * digits - The number of digits after the decimal point\n /// * upper - Use `E` instead of `e` for the exponent sign\n #[inline]\n-#[experimental = \"may be removed or relocated\"]\n+#[unstable = \"may be removed or relocated\"]\n pub fn to_str_exp_exact(num: f32, dig: uint, upper: bool) -> String {\n     let (r, _) = strconv::float_to_str_common(\n         num, 10u, true, SignNeg, DigExact(dig), ExpDec, upper);\n@@ -454,7 +454,7 @@ pub fn to_str_exp_exact(num: f32, dig: uint, upper: bool) -> String {\n /// * digits - The number of digits after the decimal point\n /// * upper - Use `E` instead of `e` for the exponent sign\n #[inline]\n-#[experimental = \"may be removed or relocated\"]\n+#[unstable = \"may be removed or relocated\"]\n pub fn to_str_exp_digits(num: f32, dig: uint, upper: bool) -> String {\n     let (r, _) = strconv::float_to_str_common(\n         num, 10u, true, SignNeg, DigMax(dig), ExpDec, upper);"}, {"sha": "baff14125ee17120c9e778cf5e2e17d4a4e13a6e", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -375,7 +375,7 @@ impl Float for f64 {\n ///\n /// * num - The float value\n #[inline]\n-#[experimental = \"may be removed or relocated\"]\n+#[unstable = \"may be removed or relocated\"]\n pub fn to_string(num: f64) -> String {\n     let (r, _) = strconv::float_to_str_common(\n         num, 10u, true, SignNeg, DigAll, ExpNone, false);\n@@ -388,7 +388,7 @@ pub fn to_string(num: f64) -> String {\n ///\n /// * num - The float value\n #[inline]\n-#[experimental = \"may be removed or relocated\"]\n+#[unstable = \"may be removed or relocated\"]\n pub fn to_str_hex(num: f64) -> String {\n     let (r, _) = strconv::float_to_str_common(\n         num, 16u, true, SignNeg, DigAll, ExpNone, false);\n@@ -403,7 +403,7 @@ pub fn to_str_hex(num: f64) -> String {\n /// * num - The float value\n /// * radix - The base to use\n #[inline]\n-#[experimental = \"may be removed or relocated\"]\n+#[unstable = \"may be removed or relocated\"]\n pub fn to_str_radix_special(num: f64, rdx: uint) -> (String, bool) {\n     strconv::float_to_str_common(num, rdx, true, SignNeg, DigAll, ExpNone, false)\n }\n@@ -416,7 +416,7 @@ pub fn to_str_radix_special(num: f64, rdx: uint) -> (String, bool) {\n /// * num - The float value\n /// * digits - The number of significant digits\n #[inline]\n-#[experimental = \"may be removed or relocated\"]\n+#[unstable = \"may be removed or relocated\"]\n pub fn to_str_exact(num: f64, dig: uint) -> String {\n     let (r, _) = strconv::float_to_str_common(\n         num, 10u, true, SignNeg, DigExact(dig), ExpNone, false);\n@@ -431,7 +431,7 @@ pub fn to_str_exact(num: f64, dig: uint) -> String {\n /// * num - The float value\n /// * digits - The number of significant digits\n #[inline]\n-#[experimental = \"may be removed or relocated\"]\n+#[unstable = \"may be removed or relocated\"]\n pub fn to_str_digits(num: f64, dig: uint) -> String {\n     let (r, _) = strconv::float_to_str_common(\n         num, 10u, true, SignNeg, DigMax(dig), ExpNone, false);\n@@ -447,7 +447,7 @@ pub fn to_str_digits(num: f64, dig: uint) -> String {\n /// * digits - The number of digits after the decimal point\n /// * upper - Use `E` instead of `e` for the exponent sign\n #[inline]\n-#[experimental = \"may be removed or relocated\"]\n+#[unstable = \"may be removed or relocated\"]\n pub fn to_str_exp_exact(num: f64, dig: uint, upper: bool) -> String {\n     let (r, _) = strconv::float_to_str_common(\n         num, 10u, true, SignNeg, DigExact(dig), ExpDec, upper);\n@@ -463,7 +463,7 @@ pub fn to_str_exp_exact(num: f64, dig: uint, upper: bool) -> String {\n /// * digits - The number of digits after the decimal point\n /// * upper - Use `E` instead of `e` for the exponent sign\n #[inline]\n-#[experimental = \"may be removed or relocated\"]\n+#[unstable = \"may be removed or relocated\"]\n pub fn to_str_exp_digits(num: f64, dig: uint, upper: bool) -> String {\n     let (r, _) = strconv::float_to_str_common(\n         num, 10u, true, SignNeg, DigMax(dig), ExpDec, upper);"}, {"sha": "ec168eaaa9de65952be8f390c22dcce43ed18391", "filename": "src/libstd/num/float_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fnum%2Ffloat_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fnum%2Ffloat_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ffloat_macros.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![experimental]\n+#![unstable]\n #![doc(hidden)]\n \n macro_rules! assert_approx_eq {"}, {"sha": "5bc5415287497b99905a1eac21a0ee482fe1aa15", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![experimental]\n+#![unstable]\n #![doc(hidden)]\n \n macro_rules! int_module { ($T:ty) => ("}, {"sha": "e804408b4d0e258ca2acd7cf22f808e95a3cc0b3", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -33,7 +33,7 @@ pub use core::num::{FpCategory};\n \n use option::Option;\n \n-#[experimental = \"may be removed or relocated\"]\n+#[unstable = \"may be removed or relocated\"]\n pub mod strconv;\n \n /// Mathematical operations on primitive floating point numbers."}, {"sha": "f480a3b420f54a1dae7cbb523cbad186ea531dce", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![experimental]\n+#![unstable]\n #![doc(hidden)]\n #![allow(unsigned_negation)]\n "}, {"sha": "6e3949b9e22d0efe26678e21fd01935bcc920214", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -22,7 +22,7 @@\n //! so we will not _hide_ the facts of which OS the user is on -- they should be given the\n //! opportunity to write OS-ignorant code by default.\n \n-#![experimental]\n+#![unstable]\n \n #![allow(missing_docs)]\n #![allow(non_snake_case)]"}, {"sha": "1ec7b6b3edcbbd4c351c0d4b4eb1870246314ef2", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -59,7 +59,7 @@\n //! println!(\"path exists: {}\", path.exists());\n //! ```\n \n-#![experimental]\n+#![unstable]\n \n use core::marker::Sized;\n use ffi::CString;"}, {"sha": "60d490982db7ea284bb0c250c3a14baddff309c4", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -219,7 +219,7 @@\n //! }\n //! ```\n \n-#![experimental]\n+#![unstable]\n \n use cell::RefCell;\n use clone::Clone;"}, {"sha": "e3e4e132b8172925c265ed8a44263beea85fc608", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -16,7 +16,7 @@\n //! and should be considered as private implementation details for the\n //! time being.\n \n-#![experimental]\n+#![unstable]\n \n // FIXME: this should not be here.\n #![allow(missing_docs)]"}, {"sha": "4cd0b29688a708c1af3f67689a992b39c4f3e995", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -582,7 +582,7 @@ fn begin_unwind_inner(msg: Box<Any + Send>, file_line: &(&'static str, uint)) ->\n /// Only a limited number of callbacks can be registered, and this function\n /// returns whether the callback was successfully registered or not. It is not\n /// currently possible to unregister a callback once it has been registered.\n-#[experimental]\n+#[unstable]\n pub unsafe fn register(f: Callback) -> bool {\n     match CALLBACK_CNT.fetch_add(1, Ordering::SeqCst) {\n         // The invocation code has knowledge of this window where the count has"}, {"sha": "f4fbd378899e093035001f6b64949433a946d0ad", "filename": "src/libstd/rtdeps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Frtdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Frtdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frtdeps.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -12,7 +12,7 @@\n //! the standard library This varies per-platform, but these libraries are\n //! necessary for running libstd.\n \n-#![experimental]\n+#![unstable]\n \n // All platforms need to link to rustrt\n #[cfg(not(test))]"}, {"sha": "83de98fdbffee87b396f0d2e12230c1e0ec83734", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -35,7 +35,7 @@\n //! method, and see the method for more information about it. Due to this\n //! caveat, this queue may not be appropriate for all use-cases.\n \n-#![experimental]\n+#![unstable]\n \n // http://www.1024cores.net/home/lock-free-algorithms\n //                         /queues/non-intrusive-mpsc-node-based-queue"}, {"sha": "0da458a51f10848b9988bf1b202c9d4569e08496", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -46,7 +46,7 @@\n //! ```\n \n #![allow(dead_code)]\n-#![experimental = \"This implementation, while likely sufficient, is unsafe and \\\n+#![unstable = \"This implementation, while likely sufficient, is unsafe and \\\n                    likely to be error prone. At some point in the future this \\\n                    module will likely be replaced, and it is currently \\\n                    unknown how much API breakage that will cause. The ability \\"}, {"sha": "46c69f6f5478927b2713374b10d4a1e276af509e", "filename": "src/libstd/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -33,7 +33,7 @@\n //! concurrently between two tasks. This data structure is safe to use and\n //! enforces the semantics that there is one pusher and one popper.\n \n-#![experimental]\n+#![unstable]\n \n use core::prelude::*;\n "}, {"sha": "0e4a9d1b307f7636e26e722c13d91f7c113b7993", "filename": "src/libstd/sys/unix/ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fsys%2Funix%2Fext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fsys%2Funix%2Fext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -29,7 +29,7 @@\n //! }\n //! ```\n \n-#![experimental]\n+#![unstable]\n \n use sys_common::AsInner;\n use libc;"}, {"sha": "87ff31ab73cda64236b8f4262506a2797f6bac5d", "filename": "src/libstd/sys/windows/ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -14,7 +14,7 @@\n //! descriptors, and sockets, but its functionality will grow over\n //! time.\n \n-#![experimental]\n+#![unstable]\n \n use sys_common::AsInner;\n use libc;"}, {"sha": "932556fe1a65d39c15a45d0b3c12a33d73ae622b", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -207,14 +207,14 @@ impl Builder {\n     }\n \n     /// Redirect thread-local stdout.\n-    #[experimental = \"Will likely go away after proc removal\"]\n+    #[unstable = \"Will likely go away after proc removal\"]\n     pub fn stdout(mut self, stdout: Box<Writer + Send>) -> Builder {\n         self.stdout = Some(stdout);\n         self\n     }\n \n     /// Redirect thread-local stderr.\n-    #[experimental = \"Will likely go away after proc removal\"]\n+    #[unstable = \"Will likely go away after proc removal\"]\n     pub fn stderr(mut self, stderr: Box<Writer + Send>) -> Builder {\n         self.stderr = Some(stderr);\n         self\n@@ -483,7 +483,7 @@ impl<'a, T: Send + 'a> JoinGuard<'a, T> {\n \n impl<T: Send> JoinGuard<'static, T> {\n     /// Detaches the child thread, allowing it to outlive its parent.\n-    #[experimental = \"unsure whether this API imposes limitations elsewhere\"]\n+    #[unstable = \"unsure whether this API imposes limitations elsewhere\"]\n     pub fn detach(mut self) {\n         unsafe { imp::detach(self.native) };\n         self.joined = true; // avoid joining in the destructor"}, {"sha": "162c3677168f806ff12dbb97444a7fe751fdb5c8", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -10,7 +10,7 @@\n \n //! Temporal quantification\n \n-#![experimental]\n+#![unstable]\n \n use {fmt, i64};\n use ops::{Add, Sub, Mul, Div, Neg, FnOnce};"}, {"sha": "eb6a2a43d431f40ab02c2d9722c19bfeb0fce270", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -15,7 +15,7 @@\n //! This API is completely unstable and subject to change.\n \n #![crate_name = \"syntax\"]\n-#![experimental]\n+#![unstable]\n #![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]"}, {"sha": "7a161241ed682abc6b435eaecd4c69c9e1340889", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -39,7 +39,7 @@\n //! [ti]: https://en.wikipedia.org/wiki/Terminfo\n \n #![crate_name = \"term\"]\n-#![experimental = \"use the crates.io `term` library instead\"]\n+#![unstable = \"use the crates.io `term` library instead\"]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]"}, {"sha": "cb6405be7ee2f82b8329f257a54ec5c67946d472", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -24,7 +24,7 @@\n // build off of.\n \n #![crate_name = \"test\"]\n-#![experimental]\n+#![unstable]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]"}, {"sha": "ee508572adbd8b11dcb63364777000bba2d30f1b", "filename": "src/libunicode/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibunicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibunicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Flib.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -21,7 +21,7 @@\n //! (yet) aim to provide a full set of Unicode tables.\n \n #![crate_name = \"unicode\"]\n-#![experimental]\n+#![unstable]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "4142a62ba66644bc52acfdc42a9834dd49eeb132", "filename": "src/libunicode/u_char.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibunicode%2Fu_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Flibunicode%2Fu_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_char.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -112,7 +112,7 @@ pub trait CharExt {\n     /// 'XID_Start' is a Unicode Derived Property specified in\n     /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n     /// mostly similar to ID_Start but modified for closure under NFKx.\n-    #[experimental = \"mainly needed for compiler internals\"]\n+    #[unstable = \"mainly needed for compiler internals\"]\n     fn is_xid_start(self) -> bool;\n \n     /// Returns whether the specified `char` satisfies the 'XID_Continue'\n@@ -121,7 +121,7 @@ pub trait CharExt {\n     /// 'XID_Continue' is a Unicode Derived Property specified in\n     /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n     /// mostly similar to 'ID_Continue' but modified for closure under NFKx.\n-    #[experimental = \"mainly needed for compiler internals\"]\n+    #[unstable = \"mainly needed for compiler internals\"]\n     fn is_xid_continue(self) -> bool;\n \n     /// Indicates whether a character is in lowercase.\n@@ -171,7 +171,7 @@ pub trait CharExt {\n     ///\n     /// Returns the lowercase equivalent of the character, or the character\n     /// itself if no conversion is possible.\n-    #[experimental = \"pending case transformation decisions\"]\n+    #[unstable = \"pending case transformation decisions\"]\n     fn to_lowercase(self) -> char;\n \n     /// Converts a character to its uppercase equivalent.\n@@ -194,7 +194,7 @@ pub trait CharExt {\n     /// [`SpecialCasing`.txt`]: ftp://ftp.unicode.org/Public/UNIDATA/SpecialCasing.txt\n     ///\n     /// [2]: http://www.unicode.org/versions/Unicode4.0.0/ch03.pdf#G33992\n-    #[experimental = \"pending case transformation decisions\"]\n+    #[unstable = \"pending case transformation decisions\"]\n     fn to_uppercase(self) -> char;\n \n     /// Returns this character's displayed width in columns, or `None` if it is a\n@@ -206,7 +206,7 @@ pub trait CharExt {\n     /// [Unicode Standard Annex #11](http://www.unicode.org/reports/tr11/)\n     /// recommends that these characters be treated as 1 column (i.e.,\n     /// `is_cjk` = `false`) if the context cannot be reliably determined.\n-    #[experimental = \"needs expert opinion. is_cjk flag stands out as ugly\"]\n+    #[unstable = \"needs expert opinion. is_cjk flag stands out as ugly\"]\n     fn width(self, is_cjk: bool) -> Option<uint>;\n }\n \n@@ -238,10 +238,10 @@ impl CharExt for char {\n         }\n     }\n \n-    #[experimental = \"mainly needed for compiler internals\"]\n+    #[unstable = \"mainly needed for compiler internals\"]\n     fn is_xid_start(self) -> bool { derived_property::XID_Start(self) }\n \n-    #[experimental = \"mainly needed for compiler internals\"]\n+    #[unstable = \"mainly needed for compiler internals\"]\n     fn is_xid_continue(self) -> bool { derived_property::XID_Continue(self) }\n \n     #[stable]\n@@ -288,12 +288,12 @@ impl CharExt for char {\n         }\n     }\n \n-    #[experimental = \"pending case transformation decisions\"]\n+    #[unstable = \"pending case transformation decisions\"]\n     fn to_lowercase(self) -> char { conversions::to_lower(self) }\n \n-    #[experimental = \"pending case transformation decisions\"]\n+    #[unstable = \"pending case transformation decisions\"]\n     fn to_uppercase(self) -> char { conversions::to_upper(self) }\n \n-    #[experimental = \"needs expert opinion. is_cjk flag stands out as ugly\"]\n+    #[unstable = \"needs expert opinion. is_cjk flag stands out as ugly\"]\n     fn width(self, is_cjk: bool) -> Option<uint> { charwidth::width(self, is_cjk) }\n }"}, {"sha": "7a01ce3de0bcfea37dd1615d2f1ec54fdb72779f", "filename": "src/test/auxiliary/inherited_stability.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fauxiliary%2Finherited_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fauxiliary%2Finherited_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Finherited_stability.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n #![crate_name=\"inherited_stability\"]\n #![crate_type = \"lib\"]\n-#![experimental]\n+#![unstable]\n+#![staged_api]\n \n pub fn experimental() {}\n \n@@ -26,7 +27,7 @@ pub mod stable_mod {\n \n #[unstable]\n pub mod unstable_mod {\n-    #[experimental]\n+    #[unstable]\n     pub fn experimental() {}\n \n     pub fn unstable() {}"}, {"sha": "adbb90fe6c8246a58e9e47f01849b643e8bbb525", "filename": "src/test/auxiliary/lint_output_format.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fauxiliary%2Flint_output_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fauxiliary%2Flint_output_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_output_format.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -10,13 +10,14 @@\n \n #![crate_name=\"lint_output_format\"]\n #![crate_type = \"lib\"]\n+#![staged_api]\n \n #[deprecated]\n pub fn foo() -> uint {\n     20\n }\n \n-#[experimental]\n+#[unstable]\n pub fn bar() -> uint {\n     40\n }"}, {"sha": "73724713b21c4f41d15968ae86f19dba230f407c", "filename": "src/test/auxiliary/lint_stability.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_stability.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -9,15 +9,16 @@\n // except according to those terms.\n #![crate_name=\"lint_stability\"]\n #![crate_type = \"lib\"]\n+#![staged_api]\n \n #[deprecated]\n pub fn deprecated() {}\n #[deprecated=\"text\"]\n pub fn deprecated_text() {}\n \n-#[experimental]\n+#[unstable]\n pub fn experimental() {}\n-#[experimental=\"text\"]\n+#[unstable=\"text\"]\n pub fn experimental_text() {}\n \n #[unstable]\n@@ -51,9 +52,9 @@ impl MethodTester {\n     #[deprecated=\"text\"]\n     pub fn method_deprecated_text(&self) {}\n \n-    #[experimental]\n+    #[unstable]\n     pub fn method_experimental(&self) {}\n-    #[experimental=\"text\"]\n+    #[unstable=\"text\"]\n     pub fn method_experimental_text(&self) {}\n \n     #[unstable]\n@@ -85,9 +86,9 @@ pub trait Trait {\n     #[deprecated=\"text\"]\n     fn trait_deprecated_text(&self) {}\n \n-    #[experimental]\n+    #[unstable]\n     fn trait_experimental(&self) {}\n-    #[experimental=\"text\"]\n+    #[unstable=\"text\"]\n     fn trait_experimental_text(&self) {}\n \n     #[unstable]\n@@ -115,12 +116,12 @@ pub trait Trait {\n \n impl Trait for MethodTester {}\n \n-#[experimental]\n+#[unstable]\n pub trait ExperimentalTrait {}\n \n #[deprecated]\n pub struct DeprecatedStruct { pub i: int }\n-#[experimental]\n+#[unstable]\n pub struct ExperimentalStruct { pub i: int }\n #[unstable]\n pub struct UnstableStruct { pub i: int }\n@@ -134,7 +135,7 @@ pub struct LockedStruct { pub i: int }\n \n #[deprecated]\n pub struct DeprecatedUnitStruct;\n-#[experimental]\n+#[unstable]\n pub struct ExperimentalUnitStruct;\n #[unstable]\n pub struct UnstableUnitStruct;\n@@ -149,7 +150,7 @@ pub struct LockedUnitStruct;\n pub enum Enum {\n     #[deprecated]\n     DeprecatedVariant,\n-    #[experimental]\n+    #[unstable]\n     ExperimentalVariant,\n     #[unstable]\n     UnstableVariant,\n@@ -165,7 +166,7 @@ pub enum Enum {\n \n #[deprecated]\n pub struct DeprecatedTupleStruct(pub int);\n-#[experimental]\n+#[unstable]\n pub struct ExperimentalTupleStruct(pub int);\n #[unstable]\n pub struct UnstableTupleStruct(pub int);"}, {"sha": "de806c65bebc293761cff832bae724acaabd0012", "filename": "src/test/auxiliary/stability_cfg1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fauxiliary%2Fstability_cfg1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fauxiliary%2Fstability_cfg1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstability_cfg1.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -10,3 +10,4 @@\n \n #![cfg_attr(foo, experimental)]\n #![cfg_attr(not(foo), stable)]\n+#![staged_api]"}, {"sha": "842f35b08aec3a04cc460a0fd491baf777c297f1", "filename": "src/test/auxiliary/stability_cfg2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fauxiliary%2Fstability_cfg2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fauxiliary%2Fstability_cfg2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstability_cfg2.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -10,6 +10,6 @@\n \n // compile-flags:--cfg foo\n \n-#![cfg_attr(foo, experimental)]\n+#![cfg_attr(foo, unstable)]\n #![cfg_attr(not(foo), stable)]\n-\n+#![staged_api]"}, {"sha": "cf1264ff5d675e54d4b393169fb3e121dcd88a10", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -39,7 +39,7 @@\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n #![feature(simd)]\n-#![allow(experimental)]\n+#![allow(unstable)]\n \n // ignore-pretty very bad with line comments\n "}, {"sha": "24425e5eeecb513e6d766df82ef02f8afc903573", "filename": "src/test/compile-fail/issue-17337.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fcompile-fail%2Fissue-17337.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fcompile-fail%2Fissue-17337.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17337.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![staged_api]\n #![deny(deprecated)]\n \n struct Foo;"}, {"sha": "d1fcf62115b209cc70aeb44e91fc394afed927e0", "filename": "src/test/compile-fail/lint-forbid-attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fcompile-fail%2Flint-forbid-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fcompile-fail%2Flint-forbid-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-forbid-attr.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![forbid(experimental)]\n+#![forbid(unstable)]\n \n-#[allow(experimental)] //~ ERROR allow(experimental) overruled by outer forbid(experimental)\n+#[allow(unstable)] //~ ERROR allow(unstable) overruled by outer forbid(unstable)\n fn main() {\n }"}, {"sha": "e3be0d06a350f6ae1fbb20e1ecec9abc8e4dcfb0", "filename": "src/test/compile-fail/lint-forbid-cmdline.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fcompile-fail%2Flint-forbid-cmdline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fcompile-fail%2Flint-forbid-cmdline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-forbid-cmdline.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -F experimental\n+// compile-flags: -F unstable\n \n-#[allow(experimental)] //~ ERROR allow(experimental) overruled by outer forbid(experimental)\n+#![staged_api]\n+#[allow(unstable)] //~ ERROR allow(unstable) overruled by outer forbid(unstable)\n fn main() {\n }"}, {"sha": "10217481bf38af87036592ded82654ccf94b8744", "filename": "src/test/compile-fail/lint-output-format.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fcompile-fail%2Flint-output-format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fcompile-fail%2Flint-output-format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-output-format.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -8,14 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags:-F experimental -D unstable\n+// compile-flags:-F unstable\n // aux-build:lint_output_format.rs\n \n extern crate lint_output_format; //~ ERROR: use of unmarked item\n-use lint_output_format::{foo, bar, baz};\n+use lint_output_format::{foo, bar};\n \n fn main() {\n     let _x = foo(); //~ WARNING #[warn(deprecated)] on by default\n-    let _y = bar(); //~ ERROR [-F experimental]\n-    let _z = baz(); //~ ERROR [-D unstable]\n+    let _y = bar(); //~ ERROR [-F unstable]\n }"}, {"sha": "1762285c28103ddd14af07bf56fa73a01530c245", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 36, "deletions": 35, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -15,15 +15,16 @@\n \n #![deny(unstable)]\n #![deny(deprecated)]\n-#![deny(experimental)]\n+#![deny(unstable)]\n #![allow(dead_code)]\n+#![staged_api]\n \n #[macro_use]\n extern crate lint_stability; //~ ERROR: use of unmarked item\n \n mod cross_crate {\n     extern crate stability_cfg1;\n-    extern crate stability_cfg2; //~ ERROR: use of experimental item\n+    extern crate stability_cfg2; //~ ERROR: use of unstable item\n \n     use lint_stability::*;\n \n@@ -38,13 +39,13 @@ mod cross_crate {\n         foo.method_deprecated_text(); //~ ERROR use of deprecated item: text\n         foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n \n-        experimental(); //~ ERROR use of experimental item\n-        foo.method_experimental(); //~ ERROR use of experimental item\n-        foo.trait_experimental(); //~ ERROR use of experimental item\n+        experimental(); //~ ERROR use of unstable item\n+        foo.method_experimental(); //~ ERROR use of unstable item\n+        foo.trait_experimental(); //~ ERROR use of unstable item\n \n-        experimental_text(); //~ ERROR use of experimental item: text\n-        foo.method_experimental_text(); //~ ERROR use of experimental item: text\n-        foo.trait_experimental_text(); //~ ERROR use of experimental item: text\n+        experimental_text(); //~ ERROR use of unstable item: text\n+        foo.method_experimental_text(); //~ ERROR use of unstable item: text\n+        foo.trait_experimental_text(); //~ ERROR use of unstable item: text\n \n         unstable(); //~ ERROR use of unstable item\n         foo.method_unstable(); //~ ERROR use of unstable item\n@@ -83,31 +84,31 @@ mod cross_crate {\n         foo.trait_locked_text();\n \n         let _ = DeprecatedStruct { i: 0 }; //~ ERROR use of deprecated item\n-        let _ = ExperimentalStruct { i: 0 }; //~ ERROR use of experimental item\n+        let _ = ExperimentalStruct { i: 0 }; //~ ERROR use of unstable item\n         let _ = UnstableStruct { i: 0 }; //~ ERROR use of unstable item\n         let _ = UnmarkedStruct { i: 0 }; //~ ERROR use of unmarked item\n         let _ = StableStruct { i: 0 };\n         let _ = FrozenStruct { i: 0 };\n         let _ = LockedStruct { i: 0 };\n \n         let _ = DeprecatedUnitStruct; //~ ERROR use of deprecated item\n-        let _ = ExperimentalUnitStruct; //~ ERROR use of experimental item\n+        let _ = ExperimentalUnitStruct; //~ ERROR use of unstable item\n         let _ = UnstableUnitStruct; //~ ERROR use of unstable item\n         let _ = UnmarkedUnitStruct; //~ ERROR use of unmarked item\n         let _ = StableUnitStruct;\n         let _ = FrozenUnitStruct;\n         let _ = LockedUnitStruct;\n \n         let _ = Enum::DeprecatedVariant; //~ ERROR use of deprecated item\n-        let _ = Enum::ExperimentalVariant; //~ ERROR use of experimental item\n+        let _ = Enum::ExperimentalVariant; //~ ERROR use of unstable item\n         let _ = Enum::UnstableVariant; //~ ERROR use of unstable item\n         let _ = Enum::UnmarkedVariant; //~ ERROR use of unmarked item\n         let _ = Enum::StableVariant;\n         let _ = Enum::FrozenVariant;\n         let _ = Enum::LockedVariant;\n \n         let _ = DeprecatedTupleStruct (1); //~ ERROR use of deprecated item\n-        let _ = ExperimentalTupleStruct (1); //~ ERROR use of experimental item\n+        let _ = ExperimentalTupleStruct (1); //~ ERROR use of unstable item\n         let _ = UnstableTupleStruct (1); //~ ERROR use of unstable item\n         let _ = UnmarkedTupleStruct (1); //~ ERROR use of unmarked item\n         let _ = StableTupleStruct (1);\n@@ -128,8 +129,8 @@ mod cross_crate {\n     fn test_method_param<F: Trait>(foo: F) {\n         foo.trait_deprecated(); //~ ERROR use of deprecated item\n         foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n-        foo.trait_experimental(); //~ ERROR use of experimental item\n-        foo.trait_experimental_text(); //~ ERROR use of experimental item: text\n+        foo.trait_experimental(); //~ ERROR use of unstable item\n+        foo.trait_experimental_text(); //~ ERROR use of unstable item: text\n         foo.trait_unstable(); //~ ERROR use of unstable item\n         foo.trait_unstable_text(); //~ ERROR use of unstable item: text\n         foo.trait_unmarked(); //~ ERROR use of unmarked item\n@@ -139,8 +140,8 @@ mod cross_crate {\n     fn test_method_object(foo: &Trait) {\n         foo.trait_deprecated(); //~ ERROR use of deprecated item\n         foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n-        foo.trait_experimental(); //~ ERROR use of experimental item\n-        foo.trait_experimental_text(); //~ ERROR use of experimental item: text\n+        foo.trait_experimental(); //~ ERROR use of unstable item\n+        foo.trait_experimental_text(); //~ ERROR use of unstable item: text\n         foo.trait_unstable(); //~ ERROR use of unstable item\n         foo.trait_unstable_text(); //~ ERROR use of unstable item: text\n         foo.trait_unmarked(); //~ ERROR use of unmarked item\n@@ -149,33 +150,33 @@ mod cross_crate {\n \n     struct S;\n \n-    impl ExperimentalTrait for S { } //~ ERROR use of experimental item\n+    impl ExperimentalTrait for S { } //~ ERROR use of unstable item\n \n-    trait LocalTrait : ExperimentalTrait { } //~ ERROR use of experimental item\n+    trait LocalTrait : ExperimentalTrait { } //~ ERROR use of unstable item\n }\n \n mod inheritance {\n-    extern crate inherited_stability; //~ ERROR: use of experimental item\n+    extern crate inherited_stability; //~ ERROR: use of unstable item\n     use self::inherited_stability::*;\n \n     fn test_inheritance() {\n-        experimental(); //~ ERROR use of experimental item\n+        experimental(); //~ ERROR use of unstable item\n         stable();\n \n-        stable_mod::experimental(); //~ ERROR use of experimental item\n+        stable_mod::experimental(); //~ ERROR use of unstable item\n         stable_mod::stable();\n \n-        unstable_mod::experimental(); //~ ERROR use of experimental item\n+        unstable_mod::experimental(); //~ ERROR use of unstable item\n         unstable_mod::unstable(); //~ ERROR use of unstable item\n \n-        experimental_mod::experimental(); //~ ERROR use of experimental item\n+        experimental_mod::experimental(); //~ ERROR use of unstable item\n         experimental_mod::stable();\n \n-        let _ = Experimental::ExperimentalVariant; //~ ERROR use of experimental item\n+        let _ = Experimental::ExperimentalVariant; //~ ERROR use of unstable item\n         let _ = Experimental::StableVariant;\n \n         let x: uint = 0;\n-        x.experimental(); //~ ERROR use of experimental item\n+        x.experimental(); //~ ERROR use of unstable item\n         x.stable();\n     }\n }\n@@ -186,9 +187,9 @@ mod this_crate {\n     #[deprecated=\"text\"]\n     pub fn deprecated_text() {}\n \n-    #[experimental]\n+    #[unstable]\n     pub fn experimental() {}\n-    #[experimental=\"text\"]\n+    #[unstable=\"text\"]\n     pub fn experimental_text() {}\n \n     #[unstable]\n@@ -222,9 +223,9 @@ mod this_crate {\n         #[deprecated=\"text\"]\n         pub fn method_deprecated_text(&self) {}\n \n-        #[experimental]\n+        #[unstable]\n         pub fn method_experimental(&self) {}\n-        #[experimental=\"text\"]\n+        #[unstable=\"text\"]\n         pub fn method_experimental_text(&self) {}\n \n         #[unstable]\n@@ -256,9 +257,9 @@ mod this_crate {\n         #[deprecated=\"text\"]\n         fn trait_deprecated_text(&self) {}\n \n-        #[experimental]\n+        #[unstable]\n         fn trait_experimental(&self) {}\n-        #[experimental=\"text\"]\n+        #[unstable=\"text\"]\n         fn trait_experimental_text(&self) {}\n \n         #[unstable]\n@@ -288,7 +289,7 @@ mod this_crate {\n \n     #[deprecated]\n     pub struct DeprecatedStruct { i: int }\n-    #[experimental]\n+    #[unstable]\n     pub struct ExperimentalStruct { i: int }\n     #[unstable]\n     pub struct UnstableStruct { i: int }\n@@ -302,7 +303,7 @@ mod this_crate {\n \n     #[deprecated]\n     pub struct DeprecatedUnitStruct;\n-    #[experimental]\n+    #[unstable]\n     pub struct ExperimentalUnitStruct;\n     #[unstable]\n     pub struct UnstableUnitStruct;\n@@ -317,7 +318,7 @@ mod this_crate {\n     pub enum Enum {\n         #[deprecated]\n         DeprecatedVariant,\n-        #[experimental]\n+        #[unstable]\n         ExperimentalVariant,\n         #[unstable]\n         UnstableVariant,\n@@ -333,7 +334,7 @@ mod this_crate {\n \n     #[deprecated]\n     pub struct DeprecatedTupleStruct(int);\n-    #[experimental]\n+    #[unstable]\n     pub struct ExperimentalTupleStruct(int);\n     #[unstable]\n     pub struct UnstableTupleStruct(int);"}, {"sha": "0c2d8972ce7aec2dd25f149daf5618fae003f749", "filename": "src/test/compile-fail/simd-binop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fcompile-fail%2Fsimd-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fcompile-fail%2Fsimd-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsimd-binop.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-tidy-linelength\n \n-#![allow(experimental)]\n+#![allow(unstable)]\n \n use std::simd::f32x4;\n "}, {"sha": "aea970f90b2c3e3ec6cfc9994bd8e5baa8dbb098", "filename": "src/test/compile-fail/simd-experimental.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fcompile-fail%2Fsimd-experimental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fcompile-fail%2Fsimd-experimental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsimd-experimental.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(experimental)]\n+#![deny(unstable)]\n \n use std::simd;\n "}, {"sha": "4aaa3e0b75f31ef0d425ca52646ece23015cbc8f", "filename": "src/test/debuginfo/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimd.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -41,7 +41,7 @@\n \n // gdb-command:continue\n \n-#![allow(experimental)]\n+#![allow(unstable)]\n #![allow(unused_variables)]\n #![omit_gdb_pretty_printer_section]\n "}, {"sha": "690ad351247099e8b9a8e1c05620b1ab15825ea6", "filename": "src/test/run-pass/simd-binop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Frun-pass%2Fsimd-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Frun-pass%2Fsimd-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-binop.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(experimental)]\n+#![allow(unstable)]\n \n use std::simd::{i32x4, f32x4, u32x4};\n "}, {"sha": "6f0db23e2a6213311e3d2361de3ef2134a5fdcd6", "filename": "src/test/run-pass/simd-issue-10604.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Frun-pass%2Fsimd-issue-10604.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Frun-pass%2Fsimd-issue-10604.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-issue-10604.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-#![allow(experimental)]\n+#![allow(unstable)]\n #![feature(simd)]\n \n pub fn main() {"}, {"sha": "56044289fba3a6c3bce7c4cd8e28443150b2ac75", "filename": "src/test/run-pass/tcp-connect-timeouts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40f62d9bf55279cdbaf9a20a017418f579979c2/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs?ref=e40f62d9bf55279cdbaf9a20a017418f579979c2", "patch": "@@ -16,7 +16,7 @@\n // one test task to ensure that errors are timeouts, not file descriptor\n // exhaustion.\n \n-#![allow(experimental)]\n+#![allow(unstable)]\n #![reexport_test_harness_main = \"test_main\"]\n \n #![allow(unused_imports)]"}]}