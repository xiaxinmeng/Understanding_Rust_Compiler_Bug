{"sha": "aaec60836761da35a8d0cf6179769eb9bc9f63c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhZWM2MDgzNjc2MWRhMzVhOGQwY2Y2MTc5NzY5ZWI5YmM5ZjYzYzM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-02-01T19:51:49Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-02-01T19:51:49Z"}, "message": "Minimize weird spans involving macro context\n\nSometimes the parser attempts to synthesize spans from within a macro\ncontext with the span for the captured argument, leading to non-sensical\nspans with very bad output. Given that an incorrect span is worse than\na partially incomplete span, when detecting this situation return only\none of the spans without mergin them.", "tree": {"sha": "ba16a12cb639464d40d9a97470ee6afe1bf297b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba16a12cb639464d40d9a97470ee6afe1bf297b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaec60836761da35a8d0cf6179769eb9bc9f63c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaec60836761da35a8d0cf6179769eb9bc9f63c3", "html_url": "https://github.com/rust-lang/rust/commit/aaec60836761da35a8d0cf6179769eb9bc9f63c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaec60836761da35a8d0cf6179769eb9bc9f63c3/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bacb5c58dfdde7c35e99b2b0d8171238cc33cf6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bacb5c58dfdde7c35e99b2b0d8171238cc33cf6c", "html_url": "https://github.com/rust-lang/rust/commit/bacb5c58dfdde7c35e99b2b0d8171238cc33cf6c"}], "stats": {"total": 63, "additions": 55, "deletions": 8}, "files": [{"sha": "09e2677eed618d014090244903bf8fa4cda02b8b", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aaec60836761da35a8d0cf6179769eb9bc9f63c3/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaec60836761da35a8d0cf6179769eb9bc9f63c3/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=aaec60836761da35a8d0cf6179769eb9bc9f63c3", "patch": "@@ -361,13 +361,24 @@ impl Span {\n \n     /// Return a `Span` that would enclose both `self` and `end`.\n     pub fn to(self, end: Span) -> Span {\n-        let span = self.data();\n-        let end = end.data();\n+        let span_data = self.data();\n+        let end_data = end.data();\n+        // FIXME(jseyfried): self.ctxt should always equal end.ctxt here (c.f. issue #23480)\n+        // Return the macro span on its own to avoid weird diagnostic output. It is preferable to\n+        // have an incomplete span than a completely nonsensical one.\n+        if span_data.ctxt != end_data.ctxt {\n+            if span_data.ctxt == SyntaxContext::empty() {\n+                return end;\n+            } else if end_data.ctxt == SyntaxContext::empty() {\n+                return self;\n+            }\n+            // both span fall within a macro\n+            // FIXME(estebank) check if it is the *same* macro\n+        }\n         Span::new(\n-            cmp::min(span.lo, end.lo),\n-            cmp::max(span.hi, end.hi),\n-            // FIXME(jseyfried): self.ctxt should always equal end.ctxt here (c.f. issue #23480)\n-            if span.ctxt == SyntaxContext::empty() { end.ctxt } else { span.ctxt },\n+            cmp::min(span_data.lo, end_data.lo),\n+            cmp::max(span_data.hi, end_data.hi),\n+            if span_data.ctxt == SyntaxContext::empty() { end_data.ctxt } else { span_data.ctxt },\n         )\n     }\n "}, {"sha": "bfc137fc7b26d3cccf9f18fa4b9cfbd9c6d693ef", "filename": "src/test/ui/macros/span-covering-argument-1.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aaec60836761da35a8d0cf6179769eb9bc9f63c3/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaec60836761da35a8d0cf6179769eb9bc9f63c3/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.rs?ref=aaec60836761da35a8d0cf6179769eb9bc9f63c3", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! bad {\n+    ($s:ident whatever) => {\n+        {\n+            let $s = 0;\n+            *&mut $s = 0;\n+            //~^ ERROR cannot borrow immutable local variable `foo` as mutable [E0596]\n+        }\n+    }\n+}\n+\n+fn main() {\n+    bad!(foo whatever);\n+}"}, {"sha": "677d2f10fd6c9dfdcdca2330526be0a1514a6875", "filename": "src/test/ui/macros/span-covering-argument-1.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aaec60836761da35a8d0cf6179769eb9bc9f63c3/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaec60836761da35a8d0cf6179769eb9bc9f63c3/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.stderr?ref=aaec60836761da35a8d0cf6179769eb9bc9f63c3", "patch": "@@ -0,0 +1,13 @@\n+error[E0596]: cannot borrow immutable local variable `foo` as mutable\n+  --> $DIR/span-covering-argument-1.rs:15:19\n+   |\n+14 |             let $s = 0;\n+   |                 -- consider changing this to `mut $s`\n+15 |             *&mut $s = 0;\n+   |                   ^^ cannot borrow mutably\n+...\n+22 |     bad!(foo whatever);\n+   |     ------------------- in this macro invocation\n+\n+error: aborting due to previous error\n+"}, {"sha": "728cd12e2c6855c8648e8592244db856a4ffc5f7", "filename": "src/test/ui/span/macro-span-replacement.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aaec60836761da35a8d0cf6179769eb9bc9f63c3/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaec60836761da35a8d0cf6179769eb9bc9f63c3/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr?ref=aaec60836761da35a8d0cf6179769eb9bc9f63c3", "patch": "@@ -1,8 +1,8 @@\n warning: struct is never used: `S`\n-  --> $DIR/macro-span-replacement.rs:17:9\n+  --> $DIR/macro-span-replacement.rs:17:14\n    |\n 17 |         $b $a; //~ WARN struct is never used\n-   |         ^^^^^^\n+   |              ^\n ...\n 22 |     m!(S struct);\n    |     ------------- in this macro invocation"}]}