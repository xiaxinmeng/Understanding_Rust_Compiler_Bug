{"sha": "3971b520bcdd556ff78120c77ffd13785e1c3695", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NzFiNTIwYmNkZDU1NmZmNzgxMjBjNzdmZmQxMzc4NWUxYzM2OTU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-04T21:12:43Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-04T21:12:48Z"}, "message": "Use the right types for methods in trans_impl\n\nThis prevents misalignment between function and argument\ntypes in corner cases.", "tree": {"sha": "d56e13460747f0afb29d294a253c21b6c1f7b330", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d56e13460747f0afb29d294a253c21b6c1f7b330"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3971b520bcdd556ff78120c77ffd13785e1c3695", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3971b520bcdd556ff78120c77ffd13785e1c3695", "html_url": "https://github.com/rust-lang/rust/commit/3971b520bcdd556ff78120c77ffd13785e1c3695", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3971b520bcdd556ff78120c77ffd13785e1c3695/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71c1c1580596e888f4bf0941f13f14c8bb109c23", "url": "https://api.github.com/repos/rust-lang/rust/commits/71c1c1580596e888f4bf0941f13f14c8bb109c23", "html_url": "https://github.com/rust-lang/rust/commit/71c1c1580596e888f4bf0941f13f14c8bb109c23"}], "stats": {"total": 17, "additions": 5, "deletions": 12}, "files": [{"sha": "c279c0a9b49d60c252cb8c48fa6cdfac5ba917e5", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3971b520bcdd556ff78120c77ffd13785e1c3695/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971b520bcdd556ff78120c77ffd13785e1c3695/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=3971b520bcdd556ff78120c77ffd13785e1c3695", "patch": "@@ -115,8 +115,7 @@ fn type_of_fn(cx: @crate_ctxt, sp: span, is_method: bool, inputs: [ty::arg],\n \n // Given a function type and a count of ty params, construct an llvm type\n fn type_of_fn_from_ty(cx: @crate_ctxt, sp: span, fty: ty::t,\n-                      param_bounds: [ty::param_bounds])\n-    : returns_non_ty_var(cx, fty) -> TypeRef {\n+                      param_bounds: [ty::param_bounds]) -> TypeRef {\n     // FIXME: Check should be unnecessary, b/c it's implied\n     // by returns_non_ty_var(t). Make that a postcondition\n     // (see Issue #586)\n@@ -173,8 +172,6 @@ fn type_of_inner(cx: @crate_ctxt, sp: span, t: ty::t)\n         T_struct(tys)\n       }\n       ty::ty_fn(_) {\n-        // FIXME: could be a constraint on ty_fn\n-        check returns_non_ty_var(cx, t);\n         T_fn_pair(cx, type_of_fn_from_ty(cx, sp, t, []))\n       }\n       ty::ty_native_fn(args, out) {\n@@ -242,7 +239,6 @@ fn type_of_ty_param_bounds_and_ty(lcx: @local_ctxt, sp: span,\n     let t = tpt.ty;\n     alt ty::struct(cx.tcx, t) {\n       ty::ty_fn(_) | ty::ty_native_fn(_, _) {\n-        check returns_non_ty_var(cx, t);\n         ret type_of_fn_from_ty(cx, sp, t, *tpt.bounds);\n       }\n       _ {\n@@ -5300,7 +5296,6 @@ fn collect_native_item(ccx: @crate_ctxt,\n           ast::native_abi_rust_intrinsic. {\n             // For intrinsics: link the function directly to the intrinsic\n             // function itself.\n-            check returns_non_ty_var(ccx, node_type);\n             let fn_type = type_of_fn_from_ty(\n                 ccx, sp, node_type,\n                 vec::map(tps, {|p| param_bounds(ccx, p)}));"}, {"sha": "7759072f0288486b15b168cb9057344ac768213b", "filename": "src/comp/middle/trans_closure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3971b520bcdd556ff78120c77ffd13785e1c3695/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971b520bcdd556ff78120c77ffd13785e1c3695/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs?ref=3971b520bcdd556ff78120c77ffd13785e1c3695", "patch": "@@ -405,7 +405,6 @@ fn trans_expr_fn(bcx: @block_ctxt,\n     if dest == ignore { ret bcx; }\n     let ccx = bcx_ccx(bcx), bcx = bcx;\n     let fty = node_id_type(ccx, id);\n-    check returns_non_ty_var(ccx, fty);\n     let llfnty = type_of_fn_from_ty(ccx, sp, fty, []);\n     let sub_cx = extend_path(bcx.fcx.lcx, ccx.names.next(\"anon\"));\n     let s = mangle_internal_name_by_path(ccx, sub_cx.path);\n@@ -779,7 +778,6 @@ fn trans_bind_thunk(cx: @local_ctxt,\n     // needs to take.\n     let ccx = bcx_ccx(bcx);\n \n-    check returns_non_ty_var(ccx, outgoing_fty);\n     let lltargetty =\n         type_of_fn_from_ty(ccx, sp, outgoing_fty, param_bounds);\n     lltargetfn = PointerCast(bcx, lltargetfn, T_ptr(lltargetty));"}, {"sha": "04bff49877f7194168172056e1284bf265cfc487", "filename": "src/comp/middle/trans_impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3971b520bcdd556ff78120c77ffd13785e1c3695/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971b520bcdd556ff78120c77ffd13785e1c3695/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs?ref=3971b520bcdd556ff78120c77ffd13785e1c3695", "patch": "@@ -44,9 +44,9 @@ fn trans_dict_callee(bcx: @block_ctxt, e: @ast::expr, base: @ast::expr,\n     let {bcx, val} = trans_self_arg(bcx, base);\n     let dict = option::get(bcx.fcx.lltyparams[n_param].dicts)[n_bound];\n     let method = ty::iface_methods(tcx, iface_id)[n_method];\n-    let bare_fn_ty = type_of_fn(bcx_ccx(bcx), ast_util::dummy_sp(),\n-                                false, method.fty.inputs, method.fty.output,\n-                                *method.tps);\n+    let fty = ty::expr_ty(tcx, e);\n+    let bare_fn_ty = type_of_fn_from_ty(bcx_ccx(bcx), ast_util::dummy_sp(),\n+                                        fty, *method.tps);\n     let {inputs: bare_inputs, output} = llfn_arg_tys(bare_fn_ty);\n     let fn_ty = T_fn([val_ty(dict)] + bare_inputs, output);\n     let vtable = PointerCast(bcx, Load(bcx, GEPi(bcx, dict, [0, 0])),\n@@ -63,7 +63,7 @@ fn trans_dict_callee(bcx: @block_ctxt, e: @ast::expr, base: @ast::expr,\n             tydescs += [td.val];\n             bcx = td.bcx;\n         }\n-        generic = some({item_type: ty::mk_fn(tcx, method.fty),\n+        generic = some({item_type: fty,\n                         static_tis: tis,\n                         tydescs: tydescs,\n                         param_bounds: method.tps,"}]}