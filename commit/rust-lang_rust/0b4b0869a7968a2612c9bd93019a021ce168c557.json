{"sha": "0b4b0869a7968a2612c9bd93019a021ce168c557", "node_id": "C_kwDOAAsO6NoAKDBiNGIwODY5YTc5NjhhMjYxMmM5YmQ5MzAxOWEwMjFjZTE2OGM1NTc", "commit": {"author": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2023-06-14T20:00:23Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2023-06-14T23:01:36Z"}, "message": "make `traversal::postorder` traverse RPO cache backwards", "tree": {"sha": "a24bb47f52b32279152058dfd84d813eb58c28c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a24bb47f52b32279152058dfd84d813eb58c28c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b4b0869a7968a2612c9bd93019a021ce168c557", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b4b0869a7968a2612c9bd93019a021ce168c557", "html_url": "https://github.com/rust-lang/rust/commit/0b4b0869a7968a2612c9bd93019a021ce168c557", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b4b0869a7968a2612c9bd93019a021ce168c557/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0eec39b67d12d121095a1da4e24109ce4dc41054", "url": "https://api.github.com/repos/rust-lang/rust/commits/0eec39b67d12d121095a1da4e24109ce4dc41054", "html_url": "https://github.com/rust-lang/rust/commit/0eec39b67d12d121095a1da4e24109ce4dc41054"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "6d44234d11f2c45d5ad325b5cee13fabe9d19990", "filename": "compiler/rustc_middle/src/mir/traversal.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0b4b0869a7968a2612c9bd93019a021ce168c557/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4b0869a7968a2612c9bd93019a021ce168c557/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs?ref=0b4b0869a7968a2612c9bd93019a021ce168c557", "patch": "@@ -188,10 +188,6 @@ impl<'a, 'tcx> Postorder<'a, 'tcx> {\n     }\n }\n \n-pub fn postorder<'a, 'tcx>(body: &'a Body<'tcx>) -> Postorder<'a, 'tcx> {\n-    Postorder::new(&body.basic_blocks, START_BLOCK)\n-}\n-\n impl<'a, 'tcx> Iterator for Postorder<'a, 'tcx> {\n     type Item = (BasicBlock, &'a BasicBlockData<'tcx>);\n \n@@ -219,6 +215,42 @@ impl<'a, 'tcx> Iterator for Postorder<'a, 'tcx> {\n     }\n }\n \n+/// Creates an iterator over the `Body`'s basic blocks, that:\n+/// - returns basic blocks in a postorder,\n+/// - traverses the `BasicBlocks` CFG cache's reverse postorder backwards, and does not cache the\n+///   postorder itself.\n+pub fn postorder<'a, 'tcx>(body: &'a Body<'tcx>) -> PostorderIter<'a, 'tcx> {\n+    let blocks = body.basic_blocks.reverse_postorder();\n+    let len = blocks.len();\n+    PostorderIter { body, blocks, idx: len }\n+}\n+\n+#[derive(Clone)]\n+pub struct PostorderIter<'a, 'tcx> {\n+    body: &'a Body<'tcx>,\n+    blocks: &'a [BasicBlock],\n+    idx: usize,\n+}\n+\n+impl<'a, 'tcx> Iterator for PostorderIter<'a, 'tcx> {\n+    type Item = (BasicBlock, &'a BasicBlockData<'tcx>);\n+\n+    fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {\n+        if self.idx == 0 {\n+            return None;\n+        }\n+        self.idx -= 1;\n+\n+        self.blocks.get(self.idx).map(|&bb| (bb, &self.body[bb]))\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        (self.idx, Some(self.idx))\n+    }\n+}\n+\n+impl<'a, 'tcx> ExactSizeIterator for PostorderIter<'a, 'tcx> {}\n+\n /// Reverse postorder traversal of a graph\n ///\n /// Reverse postorder is the reverse order of a postorder traversal."}]}