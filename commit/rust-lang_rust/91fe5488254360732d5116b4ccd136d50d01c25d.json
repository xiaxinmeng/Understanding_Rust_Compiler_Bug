{"sha": "91fe5488254360732d5116b4ccd136d50d01c25d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZmU1NDg4MjU0MzYwNzMyZDUxMTZiNGNjZDEzNmQ1MGQwMWMyNWQ=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-11-27T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-12-06T19:48:08Z"}, "message": "Retain assembly operands span when lowering AST to HIR", "tree": {"sha": "bb5aa04a1ea875ef6bd4e806094f73bb4016677a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb5aa04a1ea875ef6bd4e806094f73bb4016677a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91fe5488254360732d5116b4ccd136d50d01c25d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91fe5488254360732d5116b4ccd136d50d01c25d", "html_url": "https://github.com/rust-lang/rust/commit/91fe5488254360732d5116b4ccd136d50d01c25d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91fe5488254360732d5116b4ccd136d50d01c25d/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f6f2d681b39c5f95459cd09cb936b6ceb27cd82", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f6f2d681b39c5f95459cd09cb936b6ceb27cd82", "html_url": "https://github.com/rust-lang/rust/commit/0f6f2d681b39c5f95459cd09cb936b6ceb27cd82"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "6ad6e664316f40421aafa2934171619e6adc7fe6", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/91fe5488254360732d5116b4ccd136d50d01c25d/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fe5488254360732d5116b4ccd136d50d01c25d/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=91fe5488254360732d5116b4ccd136d50d01c25d", "patch": "@@ -1307,7 +1307,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         hir::InlineAsmOperand::Sym { expr: self.lower_expr_mut(expr) }\n                     }\n                 };\n-                Some(op)\n+                Some((op, *op_sp))\n             })\n             .collect();\n \n@@ -1326,7 +1326,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             } = *p\n             {\n                 let op_sp = asm.operands[operand_idx].1;\n-                match &operands[operand_idx] {\n+                match &operands[operand_idx].0 {\n                     hir::InlineAsmOperand::In { reg, .. }\n                     | hir::InlineAsmOperand::Out { reg, .. }\n                     | hir::InlineAsmOperand::InOut { reg, .. }\n@@ -1385,8 +1385,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let mut used_input_regs = FxHashMap::default();\n         let mut used_output_regs = FxHashMap::default();\n         let mut required_features: Vec<&str> = vec![];\n-        for (idx, op) in operands.iter().enumerate() {\n-            let op_sp = asm.operands[idx].1;\n+        for (idx, &(ref op, op_sp)) in operands.iter().enumerate() {\n             if let Some(reg) = op.reg() {\n                 // Make sure we don't accidentally carry features from the\n                 // previous iteration.\n@@ -1458,8 +1457,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                                     skip = true;\n \n                                     let idx2 = *o.get();\n-                                    let op2 = &operands[idx2];\n-                                    let op_sp2 = asm.operands[idx2].1;\n+                                    let &(ref op2, op_sp2) = &operands[idx2];\n                                     let reg2 = match op2.reg() {\n                                         Some(asm::InlineAsmRegOrRegClass::Reg(r)) => r,\n                                         _ => unreachable!(),"}, {"sha": "c7dc66b70fef1107e4451500331f14db3406f105", "filename": "compiler/rustc_hir/src/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91fe5488254360732d5116b4ccd136d50d01c25d/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fe5488254360732d5116b4ccd136d50d01c25d/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Farena.rs?ref=91fe5488254360732d5116b4ccd136d50d01c25d", "patch": "@@ -14,7 +14,7 @@ macro_rules! arena_types {\n             // HIR types\n             [few] hir_krate: rustc_hir::Crate<$tcx>,\n             [] arm: rustc_hir::Arm<$tcx>,\n-            [] asm_operand: rustc_hir::InlineAsmOperand<$tcx>,\n+            [] asm_operand: (rustc_hir::InlineAsmOperand<$tcx>, Span),\n             [] asm_template: rustc_ast::InlineAsmTemplatePiece,\n             [] attribute: rustc_ast::Attribute,\n             [] block: rustc_hir::Block<$tcx>,"}, {"sha": "280e863d4744d02578e6d45523c04d350f3fbfc0", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91fe5488254360732d5116b4ccd136d50d01c25d/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fe5488254360732d5116b4ccd136d50d01c25d/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=91fe5488254360732d5116b4ccd136d50d01c25d", "patch": "@@ -2143,7 +2143,7 @@ impl<'hir> InlineAsmOperand<'hir> {\n #[derive(Debug, HashStable_Generic)]\n pub struct InlineAsm<'hir> {\n     pub template: &'hir [InlineAsmTemplatePiece],\n-    pub operands: &'hir [InlineAsmOperand<'hir>],\n+    pub operands: &'hir [(InlineAsmOperand<'hir>, Span)],\n     pub options: InlineAsmOptions,\n     pub line_spans: &'hir [Span],\n }"}, {"sha": "3c330c5d6c5288b2ffdc11f05c9a4cba334ef152", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91fe5488254360732d5116b4ccd136d50d01c25d/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fe5488254360732d5116b4ccd136d50d01c25d/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=91fe5488254360732d5116b4ccd136d50d01c25d", "patch": "@@ -1191,7 +1191,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n             walk_list!(visitor, visit_expr, optional_expression);\n         }\n         ExprKind::InlineAsm(ref asm) => {\n-            for op in asm.operands {\n+            for (op, _op_sp) in asm.operands {\n                 match op {\n                     InlineAsmOperand::In { expr, .. }\n                     | InlineAsmOperand::InOut { expr, .. }"}, {"sha": "597c55b4bd7f3237cc4de0191773bb7e1744e692", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91fe5488254360732d5116b4ccd136d50d01c25d/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fe5488254360732d5116b4ccd136d50d01c25d/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=91fe5488254360732d5116b4ccd136d50d01c25d", "patch": "@@ -1462,7 +1462,7 @@ impl<'a> State<'a> {\n \n                 let mut args = vec![];\n                 args.push(AsmArg::Template(ast::InlineAsmTemplatePiece::to_string(&a.template)));\n-                args.extend(a.operands.iter().map(|o| AsmArg::Operand(o)));\n+                args.extend(a.operands.iter().map(|(o, _)| AsmArg::Operand(o)));\n                 if !a.options.is_empty() {\n                     args.push(AsmArg::Options(a.options));\n                 }"}, {"sha": "e934d8ed9da5f9a18643254a53dbd46dff156cd2", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91fe5488254360732d5116b4ccd136d50d01c25d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fe5488254360732d5116b4ccd136d50d01c25d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=91fe5488254360732d5116b4ccd136d50d01c25d", "patch": "@@ -408,7 +408,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n             operands: asm\n                 .operands\n                 .iter()\n-                .map(|op| {\n+                .map(|(op, _op_sp)| {\n                     match *op {\n                         hir::InlineAsmOperand::In { reg, ref expr } => {\n                             InlineAsmOperand::In { reg, expr: expr.to_ref() }"}, {"sha": "711e8e87c6c6e7d70133e7b24c7a305b752ab7ab", "filename": "compiler/rustc_passes/src/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91fe5488254360732d5116b4ccd136d50d01c25d/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fe5488254360732d5116b4ccd136d50d01c25d/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs?ref=91fe5488254360732d5116b4ccd136d50d01c25d", "patch": "@@ -347,7 +347,7 @@ impl ExprVisitor<'tcx> {\n     }\n \n     fn check_asm(&self, asm: &hir::InlineAsm<'tcx>) {\n-        for (idx, op) in asm.operands.iter().enumerate() {\n+        for (idx, (op, _op_sp)) in asm.operands.iter().enumerate() {\n             match *op {\n                 hir::InlineAsmOperand::In { reg, ref expr } => {\n                     self.check_asm_operand_type(idx, reg, expr, asm.template, None);"}, {"sha": "a64c6fa319ca98f3874d0c8afa55e8bceada7676", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91fe5488254360732d5116b4ccd136d50d01c25d/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fe5488254360732d5116b4ccd136d50d01c25d/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=91fe5488254360732d5116b4ccd136d50d01c25d", "patch": "@@ -1174,7 +1174,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 };\n \n                 // Do a first pass for writing outputs only\n-                for op in asm.operands.iter().rev() {\n+                for (op, _op_sp) in asm.operands.iter().rev() {\n                     match op {\n                         hir::InlineAsmOperand::In { .. }\n                         | hir::InlineAsmOperand::Const { .. }\n@@ -1197,7 +1197,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n                 // Then do a second pass for inputs\n                 let mut succ = succ;\n-                for op in asm.operands.iter().rev() {\n+                for (op, _op_sp) in asm.operands.iter().rev() {\n                     match op {\n                         hir::InlineAsmOperand::In { expr, .. }\n                         | hir::InlineAsmOperand::Const { expr, .. }\n@@ -1454,7 +1454,7 @@ fn check_expr<'tcx>(this: &mut Liveness<'_, 'tcx>, expr: &'tcx Expr<'tcx>) {\n         }\n \n         hir::ExprKind::InlineAsm(ref asm) => {\n-            for op in asm.operands {\n+            for (op, _op_sp) in asm.operands {\n                 match op {\n                     hir::InlineAsmOperand::Out { expr, .. } => {\n                         if let Some(expr) = expr {"}, {"sha": "b8a2a4779d9853aa357b9ed6eea2fff9b74ae69c", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91fe5488254360732d5116b4ccd136d50d01c25d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fe5488254360732d5116b4ccd136d50d01c25d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=91fe5488254360732d5116b4ccd136d50d01c25d", "patch": "@@ -1929,7 +1929,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     fn check_expr_asm(&self, asm: &'tcx hir::InlineAsm<'tcx>) -> Ty<'tcx> {\n-        for op in asm.operands {\n+        for (op, _op_sp) in asm.operands {\n             match op {\n                 hir::InlineAsmOperand::In { expr, .. } | hir::InlineAsmOperand::Const { expr } => {\n                     self.check_expr_asm_operand(expr, true);"}, {"sha": "95848ac2c076794dcc846168765f4a3046dc1edc", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91fe5488254360732d5116b4ccd136d50d01c25d/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fe5488254360732d5116b4ccd136d50d01c25d/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=91fe5488254360732d5116b4ccd136d50d01c25d", "patch": "@@ -243,7 +243,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n             }\n \n             hir::ExprKind::InlineAsm(ref asm) => {\n-                for op in asm.operands {\n+                for (op, _op_sp) in asm.operands {\n                     match op {\n                         hir::InlineAsmOperand::In { expr, .. }\n                         | hir::InlineAsmOperand::Const { expr, .. }"}, {"sha": "1bd96b2b4c89beb3e433a3d8b416ac498cd42d6e", "filename": "src/tools/clippy/clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91fe5488254360732d5116b4ccd136d50d01c25d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fe5488254360732d5116b4ccd136d50d01c25d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs?ref=91fe5488254360732d5116b4ccd136d50d01c25d", "patch": "@@ -768,7 +768,7 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n         ExprKind::InlineAsm(ref asm) => asm\n             .operands\n             .iter()\n-            .map(|o| match o {\n+            .map(|(o, _)| match o {\n                 InlineAsmOperand::In { expr, .. }\n                 | InlineAsmOperand::InOut { expr, .. }\n                 | InlineAsmOperand::Const { expr }"}, {"sha": "d942d4e12b10629518cf54d5fac19c97281e1e37", "filename": "src/tools/clippy/clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91fe5488254360732d5116b4ccd136d50d01c25d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fe5488254360732d5116b4ccd136d50d01c25d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=91fe5488254360732d5116b4ccd136d50d01c25d", "patch": "@@ -517,7 +517,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     }\n                 }\n                 asm.options.hash(&mut self.s);\n-                for op in asm.operands {\n+                for (op, _op_sp) in asm.operands {\n                     match op {\n                         InlineAsmOperand::In { reg, expr } => {\n                             reg.hash(&mut self.s);"}, {"sha": "323d8745538859bf7e4e106bdec3ed0151d322f3", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91fe5488254360732d5116b4ccd136d50d01c25d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fe5488254360732d5116b4ccd136d50d01c25d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=91fe5488254360732d5116b4ccd136d50d01c25d", "patch": "@@ -293,7 +293,7 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n             println!(\"{}template: {}\", ind, InlineAsmTemplatePiece::to_string(asm.template));\n             println!(\"{}options: {:?}\", ind, asm.options);\n             println!(\"{}operands:\", ind);\n-            for op in asm.operands {\n+            for (op, _op_sp) in asm.operands {\n                 match op {\n                     hir::InlineAsmOperand::In { expr, .. }\n                     | hir::InlineAsmOperand::InOut { expr, .. }"}]}