{"sha": "f5f638c12434e3c277fde8f4245273c2cc3c8110", "node_id": "C_kwDOAAsO6NoAKGY1ZjYzOGMxMjQzNGUzYzI3N2ZkZThmNDI0NTI3M2MyY2MzYzgxMTA", "commit": {"author": {"name": "Andrew Xie", "email": "ndrew.xie@gmail.com", "date": "2023-06-05T04:16:20Z"}, "committer": {"name": "Andrew Xie", "email": "ndrew.xie@gmail.com", "date": "2023-06-05T04:16:20Z"}, "message": "Fixed to_sorted => to_sorted_stable_ord", "tree": {"sha": "ca122dc6e3c724608f0dd2194b42226d0b054738", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca122dc6e3c724608f0dd2194b42226d0b054738"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5f638c12434e3c277fde8f4245273c2cc3c8110", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5f638c12434e3c277fde8f4245273c2cc3c8110", "html_url": "https://github.com/rust-lang/rust/commit/f5f638c12434e3c277fde8f4245273c2cc3c8110", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5f638c12434e3c277fde8f4245273c2cc3c8110/comments", "author": {"login": "ndrewxie", "id": 32971598, "node_id": "MDQ6VXNlcjMyOTcxNTk4", "avatar_url": "https://avatars.githubusercontent.com/u/32971598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ndrewxie", "html_url": "https://github.com/ndrewxie", "followers_url": "https://api.github.com/users/ndrewxie/followers", "following_url": "https://api.github.com/users/ndrewxie/following{/other_user}", "gists_url": "https://api.github.com/users/ndrewxie/gists{/gist_id}", "starred_url": "https://api.github.com/users/ndrewxie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ndrewxie/subscriptions", "organizations_url": "https://api.github.com/users/ndrewxie/orgs", "repos_url": "https://api.github.com/users/ndrewxie/repos", "events_url": "https://api.github.com/users/ndrewxie/events{/privacy}", "received_events_url": "https://api.github.com/users/ndrewxie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ndrewxie", "id": 32971598, "node_id": "MDQ6VXNlcjMyOTcxNTk4", "avatar_url": "https://avatars.githubusercontent.com/u/32971598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ndrewxie", "html_url": "https://github.com/ndrewxie", "followers_url": "https://api.github.com/users/ndrewxie/followers", "following_url": "https://api.github.com/users/ndrewxie/following{/other_user}", "gists_url": "https://api.github.com/users/ndrewxie/gists{/gist_id}", "starred_url": "https://api.github.com/users/ndrewxie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ndrewxie/subscriptions", "organizations_url": "https://api.github.com/users/ndrewxie/orgs", "repos_url": "https://api.github.com/users/ndrewxie/repos", "events_url": "https://api.github.com/users/ndrewxie/events{/privacy}", "received_events_url": "https://api.github.com/users/ndrewxie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f2d3dee1790f8066394d1198fd1864b5fae45a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f2d3dee1790f8066394d1198fd1864b5fae45a3", "html_url": "https://github.com/rust-lang/rust/commit/6f2d3dee1790f8066394d1198fd1864b5fae45a3"}], "stats": {"total": 97, "additions": 60, "deletions": 37}, "files": [{"sha": "a895e28c822cb59b5b2a378eae205d1c96481806", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f5f638c12434e3c277fde8f4245273c2cc3c8110/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f638c12434e3c277fde8f4245273c2cc3c8110/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=f5f638c12434e3c277fde8f4245273c2cc3c8110", "patch": "@@ -339,6 +339,8 @@ impl<T1: HashStable<CTX>, T2: HashStable<CTX>, CTX> HashStable<CTX> for (T1, T2)\n     }\n }\n \n+unsafe impl<T1: StableOrd, T2: StableOrd> StableOrd for (T1, T2) {}\n+\n impl<T1, T2, T3, CTX> HashStable<CTX> for (T1, T2, T3)\n where\n     T1: HashStable<CTX>,\n@@ -353,6 +355,8 @@ where\n     }\n }\n \n+unsafe impl<T1: StableOrd, T2: StableOrd, T3: StableOrd> StableOrd for (T1, T2, T3) {}\n+\n impl<T1, T2, T3, T4, CTX> HashStable<CTX> for (T1, T2, T3, T4)\n where\n     T1: HashStable<CTX>,\n@@ -369,6 +373,11 @@ where\n     }\n }\n \n+unsafe impl<T1: StableOrd, T2: StableOrd, T3: StableOrd, T4: StableOrd> StableOrd\n+    for (T1, T2, T3, T4)\n+{\n+}\n+\n impl<T: HashStable<CTX>, CTX> HashStable<CTX> for [T] {\n     default fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n         self.len().hash_stable(ctx, hasher);\n@@ -459,6 +468,8 @@ impl<CTX> HashStable<CTX> for str {\n     }\n }\n \n+unsafe impl StableOrd for &str {}\n+\n impl<CTX> HashStable<CTX> for String {\n     #[inline]\n     fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {"}, {"sha": "3d9b1c2e7411ffbb3859f4e8f1a3b7c688d90ce5", "filename": "compiler/rustc_incremental/src/assert_module_sources.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5f638c12434e3c277fde8f4245273c2cc3c8110/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f638c12434e3c277fde8f4245273c2cc3c8110/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs?ref=f5f638c12434e3c277fde8f4245273c2cc3c8110", "patch": "@@ -118,8 +118,8 @@ impl<'tcx> AssertModuleSource<'tcx> {\n         debug!(\"mapping '{}' to cgu name '{}'\", self.field(attr, sym::module), cgu_name);\n \n         if !self.available_cgus.contains(&cgu_name) {\n-            let cgu_names: Vec<String> =\n-                self.available_cgus.items().map(|cgu| cgu.as_str().to_owned()).into_sorted(&());\n+            let cgu_names: Vec<&str> =\n+                self.available_cgus.items().map(|cgu| cgu.as_str()).into_sorted_stable_ord(true);\n             self.tcx.sess.emit_err(errors::NoModuleNamed {\n                 span: attr.span,\n                 user_path,"}, {"sha": "786a0e0d3b230b2dca6c8e62fe3b55cbd7ac30ce", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f5f638c12434e3c277fde8f4245273c2cc3c8110/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f638c12434e3c277fde8f4245273c2cc3c8110/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=f5f638c12434e3c277fde8f4245273c2cc3c8110", "patch": "@@ -198,7 +198,7 @@ impl<'tcx> DirtyCleanVisitor<'tcx> {\n         let (name, mut auto) = self.auto_labels(item_id, attr);\n         let except = self.except(attr);\n         let loaded_from_disk = self.loaded_from_disk(attr);\n-        for e in except.to_sorted(&(), false) {\n+        for e in except.items().map(|x| x.as_str()).into_sorted_stable_ord(false) {\n             if !auto.remove(e) {\n                 self.tcx.sess.emit_fatal(errors::AssertionAuto { span: attr.span, name, e });\n             }\n@@ -377,18 +377,20 @@ impl<'tcx> DirtyCleanVisitor<'tcx> {\n                 continue;\n             };\n             self.checked_attrs.insert(attr.id);\n-            assertion.clean.to_sorted(&(), false).iter().for_each(|label| {\n+            for label in assertion.clean.items().map(|x| x.as_str()).into_sorted_stable_ord(false) {\n                 let dep_node = DepNode::from_label_string(self.tcx, &label, def_path_hash).unwrap();\n                 self.assert_clean(item_span, dep_node);\n-            });\n-            assertion.dirty.to_sorted(&(), false).iter().for_each(|label| {\n+            }\n+            for label in assertion.dirty.items().map(|x| x.as_str()).into_sorted_stable_ord(false) {\n                 let dep_node = DepNode::from_label_string(self.tcx, &label, def_path_hash).unwrap();\n                 self.assert_dirty(item_span, dep_node);\n-            });\n-            assertion.loaded_from_disk.to_sorted(&(), false).iter().for_each(|label| {\n+            }\n+            for label in\n+                assertion.loaded_from_disk.items().map(|x| x.as_str()).into_sorted_stable_ord(false)\n+            {\n                 let dep_node = DepNode::from_label_string(self.tcx, &label, def_path_hash).unwrap();\n                 self.assert_loaded_from_disk(item_span, dep_node);\n-            });\n+            }\n         }\n     }\n }"}, {"sha": "550772a688121a47191707fbef36492e7ba7f682", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/f5f638c12434e3c277fde8f4245273c2cc3c8110/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f638c12434e3c277fde8f4245273c2cc3c8110/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=f5f638c12434e3c277fde8f4245273c2cc3c8110", "patch": "@@ -661,50 +661,55 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n     session_directories.sort();\n \n     // Now map from lock files to session directories\n-    let lock_file_to_session_dir: UnordMap<String, Option<String>> =\n-        UnordMap::from(lock_files.into_items().map(|lock_file_name| {\n+    let lock_file_to_session_dir: UnordMap<String, Option<String>> = lock_files\n+        .into_items()\n+        .map(|lock_file_name| {\n             assert!(lock_file_name.ends_with(LOCK_FILE_EXT));\n             let dir_prefix_end = lock_file_name.len() - LOCK_FILE_EXT.len();\n             let session_dir = {\n                 let dir_prefix = &lock_file_name[0..dir_prefix_end];\n                 session_directories.iter().find(|dir_name| dir_name.starts_with(dir_prefix))\n             };\n             (lock_file_name, session_dir.map(String::clone))\n-        }));\n+        })\n+        .into();\n \n     // Delete all lock files, that don't have an associated directory. They must\n     // be some kind of leftover\n-    lock_file_to_session_dir.to_sorted(&(), false).iter().for_each(\n-        |(lock_file_name, directory_name)| {\n-            if directory_name.is_none() {\n-                let Ok(timestamp) = extract_timestamp_from_session_dir(lock_file_name) else {\n+    let lock_file_to_session_dir_iter = lock_file_to_session_dir\n+        .items()\n+        .map(|(file, dir)| (file.as_str(), dir.as_ref().map(|y| y.as_str())));\n+    for (lock_file_name, directory_name) in\n+        lock_file_to_session_dir_iter.into_sorted_stable_ord(false)\n+    {\n+        if directory_name.is_none() {\n+            let Ok(timestamp) = extract_timestamp_from_session_dir(lock_file_name) else {\n                 debug!(\n                     \"found lock-file with malformed timestamp: {}\",\n                     crate_directory.join(&lock_file_name).display()\n                 );\n                 // Ignore it\n-                return;\n+                continue;\n             };\n \n-                let lock_file_path = crate_directory.join(&**lock_file_name);\n+            let lock_file_path = crate_directory.join(&*lock_file_name);\n \n-                if is_old_enough_to_be_collected(timestamp) {\n-                    debug!(\n-                        \"garbage_collect_session_directories() - deleting \\\n-                        garbage lock file: {}\",\n-                        lock_file_path.display()\n-                    );\n-                    delete_session_dir_lock_file(sess, &lock_file_path);\n-                } else {\n-                    debug!(\n-                        \"garbage_collect_session_directories() - lock file with \\\n-                        no session dir not old enough to be collected: {}\",\n-                        lock_file_path.display()\n-                    );\n-                }\n+            if is_old_enough_to_be_collected(timestamp) {\n+                debug!(\n+                    \"garbage_collect_session_directories() - deleting \\\n+                    garbage lock file: {}\",\n+                    lock_file_path.display()\n+                );\n+                delete_session_dir_lock_file(sess, &lock_file_path);\n+            } else {\n+                debug!(\n+                    \"garbage_collect_session_directories() - lock file with \\\n+                    no session dir not old enough to be collected: {}\",\n+                    lock_file_path.display()\n+                );\n             }\n-        },\n-    );\n+        }\n+    }\n \n     // Filter out `None` directories\n     let lock_file_to_session_dir: UnordMap<String, String> ="}, {"sha": "bb479b5bdccda51a91d145c1ca873b4613d8ff8b", "filename": "compiler/rustc_incremental/src/persist/load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5f638c12434e3c277fde8f4245273c2cc3c8110/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f638c12434e3c277fde8f4245273c2cc3c8110/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs?ref=f5f638c12434e3c277fde8f4245273c2cc3c8110", "patch": "@@ -147,7 +147,7 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n     let report_incremental_info = sess.opts.unstable_opts.incremental_info;\n     let expected_hash = sess.opts.dep_tracking_hash(false);\n \n-    let mut prev_work_products = FxIndexMap::default();\n+    let mut prev_work_products = UnordMap::default();\n \n     // If we are only building with -Zquery-dep-graph but without an actual\n     // incr. comp. session directory, we skip this. Otherwise we'd fail"}, {"sha": "ae604b2ca0be7437d2e9498cb3eaf4b2f38d9379", "filename": "compiler/rustc_incremental/src/persist/work_product.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f5f638c12434e3c277fde8f4245273c2cc3c8110/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f638c12434e3c277fde8f4245273c2cc3c8110/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs?ref=f5f638c12434e3c277fde8f4245273c2cc3c8110", "patch": "@@ -46,10 +46,15 @@ pub fn copy_cgu_workproduct_to_incr_comp_cache_dir(\n \n /// Removes files for a given work product.\n pub fn delete_workproduct_files(sess: &Session, work_product: &WorkProduct) {\n-    work_product.saved_files.to_sorted(&(), false).iter().for_each(|(_, path)| {\n+    for path in work_product\n+        .saved_files\n+        .items()\n+        .map(|(_, path)| path.as_str())\n+        .into_sorted_stable_ord(false)\n+    {\n         let path = in_incr_comp_dir_sess(sess, path);\n         if let Err(err) = std_fs::remove_file(&path) {\n             sess.emit_warning(errors::DeleteWorkProduct { path: &path, err });\n         }\n-    });\n+    }\n }"}]}