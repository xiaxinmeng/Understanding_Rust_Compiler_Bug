{"sha": "e2d3c1506f10861f9c864e3611fa41387c11546b", "node_id": "C_kwDOAAsO6NoAKGUyZDNjMTUwNmYxMDg2MWY5Yzg2NGUzNjExZmE0MTM4N2MxMTU0NmI", "commit": {"author": {"name": "btwotwo", "email": "10519967+btwotwo@users.noreply.github.com", "date": "2022-10-06T19:35:01Z"}, "committer": {"name": "btwotwo", "email": "10519967+btwotwo@users.noreply.github.com", "date": "2022-10-06T19:35:01Z"}, "message": "Restrict auto-completion for only built-in macros", "tree": {"sha": "09e6ffb54fa4d071a51df3dca388c7d1ef4a7caa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09e6ffb54fa4d071a51df3dca388c7d1ef4a7caa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2d3c1506f10861f9c864e3611fa41387c11546b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE7WZLfNy5oeDQue2p1FagNJ1zoKMFAmM/LeUACgkQ1FagNJ1z\noKPnqhAAiKz6B5kvfQogEewuQoQw+fuuvd1LIpeh1Izjygxzm0uhiyFMmm+cSbwI\nYMhRsmMqvLYhGKPu04AzFjFGgXN1afBxfyOoZ6RI/Pyyayj4jDmSpzmm1FBrY+HV\n5cdkvUtLqVvOHKowRqW2gcPayr4FNaHoQR6sG9N4uPpNEaQpw4FDYk2XWqEpHfLQ\nk8/YeL/Ii9jxb+eUUhMbz/iBTvS+wuynJ11s5fdjg5yXw8xXZMCRwu6PhMB9gC1y\n1L3JM1uBAZOqh3OM9+s65j7jqchy4nKRnCT8MbggCXLo0/mH1UcX2bcPr8h3Lgj8\nFYffRqPbQVj1418jPMzSwyxt8zlXISKmG1aWc1gAFgKTh/mq/aO//X07Y9mDV3gr\nX31bLkx8+pT6cu5USt6JraWk/71amJIq3+4G3OtENObVhBR0MQ4tOamv6CJd9ly4\nvXO7yWLYfXUpbeFs4bWeciYnn4WSjH+js2oC/FCos5Y8s9uLisAuHIEFzaocfK0F\nhRqkF29ZZeqI7Cl/rMKanttLsUO2saJiDF4gPWiwSVk5vd79sQQmBrMaLSB9stmc\nu8YKHCYEEpcUL9HKLxfsNggLS1Gjd4+9U9OKcU0cnSt+QSMYADXiC6MBJ0cMxPl8\npOxnS1jGV9DG/HQ0bwsBGYrQVOBMm2XtglgVVivHYvmLyMs26x4=\n=K6Mw\n-----END PGP SIGNATURE-----", "payload": "tree 09e6ffb54fa4d071a51df3dca388c7d1ef4a7caa\nparent f458ea15d637db94d1e95c595aab6c1d7f3937e0\nauthor btwotwo <10519967+btwotwo@users.noreply.github.com> 1665084901 +0200\ncommitter btwotwo <10519967+btwotwo@users.noreply.github.com> 1665084901 +0200\n\nRestrict auto-completion for only built-in macros\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2d3c1506f10861f9c864e3611fa41387c11546b", "html_url": "https://github.com/rust-lang/rust/commit/e2d3c1506f10861f9c864e3611fa41387c11546b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2d3c1506f10861f9c864e3611fa41387c11546b/comments", "author": {"login": "btwotwo", "id": 10519967, "node_id": "MDQ6VXNlcjEwNTE5OTY3", "avatar_url": "https://avatars.githubusercontent.com/u/10519967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/btwotwo", "html_url": "https://github.com/btwotwo", "followers_url": "https://api.github.com/users/btwotwo/followers", "following_url": "https://api.github.com/users/btwotwo/following{/other_user}", "gists_url": "https://api.github.com/users/btwotwo/gists{/gist_id}", "starred_url": "https://api.github.com/users/btwotwo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/btwotwo/subscriptions", "organizations_url": "https://api.github.com/users/btwotwo/orgs", "repos_url": "https://api.github.com/users/btwotwo/repos", "events_url": "https://api.github.com/users/btwotwo/events{/privacy}", "received_events_url": "https://api.github.com/users/btwotwo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "btwotwo", "id": 10519967, "node_id": "MDQ6VXNlcjEwNTE5OTY3", "avatar_url": "https://avatars.githubusercontent.com/u/10519967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/btwotwo", "html_url": "https://github.com/btwotwo", "followers_url": "https://api.github.com/users/btwotwo/followers", "following_url": "https://api.github.com/users/btwotwo/following{/other_user}", "gists_url": "https://api.github.com/users/btwotwo/gists{/gist_id}", "starred_url": "https://api.github.com/users/btwotwo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/btwotwo/subscriptions", "organizations_url": "https://api.github.com/users/btwotwo/orgs", "repos_url": "https://api.github.com/users/btwotwo/repos", "events_url": "https://api.github.com/users/btwotwo/events{/privacy}", "received_events_url": "https://api.github.com/users/btwotwo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f458ea15d637db94d1e95c595aab6c1d7f3937e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f458ea15d637db94d1e95c595aab6c1d7f3937e0", "html_url": "https://github.com/rust-lang/rust/commit/f458ea15d637db94d1e95c595aab6c1d7f3937e0"}], "stats": {"total": 61, "additions": 49, "deletions": 12}, "files": [{"sha": "5483fdf31a248f91b1c6bdf150fb76451fe94c34", "filename": "crates/ide-completion/src/completions/env_vars.rs", "status": "modified", "additions": 49, "deletions": 12, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/e2d3c1506f10861f9c864e3611fa41387c11546b/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fenv_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d3c1506f10861f9c864e3611fa41387c11546b/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fenv_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fenv_vars.rs?ref=e2d3c1506f10861f9c864e3611fa41387c11546b", "patch": "@@ -1,8 +1,9 @@\n //! Completes environment variables defined by Cargo (https://doc.rust-lang.org/cargo/reference/environment-variables.html)\n-use ide_db::syntax_helpers::node_ext::get_outer_macro_name;\n+use hir::Semantics;\n+use ide_db::{syntax_helpers::node_ext::get_outer_macro, RootDatabase};\n use syntax::ast::{self, IsString};\n \n-use crate::{CompletionItem, CompletionItemKind};\n+use crate::{context::CompletionContext, CompletionItem, CompletionItemKind};\n \n use super::Completions;\n const CARGO_DEFINED_VARS: &[(&str, &str)] = &[\n@@ -27,8 +28,12 @@ const CARGO_DEFINED_VARS: &[(&str, &str)] = &[\n (\"CARGO_TARGET_TMPDIR\",\"Only set when building integration test or benchmark code. This is a path to a directory inside the target directory where integration tests or benchmarks are free to put any data needed by the tests/benches. Cargo initially creates this directory but doesn't manage its content in any way, this is the responsibility of the test code\")\n ];\n \n-pub(crate) fn complete_cargo_env_vars(acc: &mut Completions, expanded: &ast::String) -> Option<()> {\n-    guard_env_macro(expanded)?;\n+pub(crate) fn complete_cargo_env_vars(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext<'_>,\n+    expanded: &ast::String,\n+) -> Option<()> {\n+    guard_env_macro(expanded, &ctx.sema, &ctx.db)?;\n     let range = expanded.text_range_between_quotes()?;\n \n     CARGO_DEFINED_VARS.iter().for_each(|(var, detail)| {\n@@ -40,13 +45,19 @@ pub(crate) fn complete_cargo_env_vars(acc: &mut Completions, expanded: &ast::Str\n     Some(())\n }\n \n-fn guard_env_macro(string: &ast::String) -> Option<()> {\n-    let name = get_outer_macro_name(string)?;\n-    if !matches!(name.text().as_str(), \"env\" | \"option_env\") {\n-        return None;\n+fn guard_env_macro(\n+    string: &ast::String,\n+    semantics: &Semantics<'_, RootDatabase>,\n+    db: &RootDatabase,\n+) -> Option<()> {\n+    let call = get_outer_macro(string)?;\n+    let name = call.path()?.segment()?.name_ref()?;\n+    let makro = semantics.resolve_macro_call(&call)?;\n+\n+    match name.text().as_str() {\n+        \"env\" | \"option_env\" if makro.kind(db) == hir::MacroKind::BuiltIn => Some(()),\n+        _ => None,\n     }\n-\n-    Some(())\n }\n \n #[cfg(test)]\n@@ -58,19 +69,29 @@ mod tests {\n             \"CARGO_BIN_NAME\",\n             &format!(\n                 r#\"\n+            #[rustc_builtin_macro]\n+            macro_rules! {} {{\n+                ($var:literal) => {{ 0 }}\n+            }}\n+\n             fn main() {{\n                 let foo = {}!(\"CAR$0\");\n             }}\n         \"#,\n-                macro_name\n+                macro_name, macro_name\n             ),\n             &format!(\n                 r#\"\n+            #[rustc_builtin_macro]\n+            macro_rules! {} {{\n+                ($var:literal) => {{ 0 }}\n+            }}\n+\n             fn main() {{\n                 let foo = {}!(\"CARGO_BIN_NAME\");\n             }}\n         \"#,\n-                macro_name\n+                macro_name, macro_name\n             ),\n         );\n     }\n@@ -112,4 +133,20 @@ mod tests {\n         let completions = completion_list(fixture);\n         assert!(completions.is_empty(), \"Completions weren't empty: {}\", completions);\n     }\n+\n+    #[test]\n+    fn doesnt_complete_for_shadowed_macro() {\n+        let fixture = r#\"\n+            macro_rules! env {\n+                ($var:literal) => { 0 }\n+            }\n+\n+            fn main() {\n+                let foo = env!(\"CA$0\");\n+            }\n+        \"#;\n+\n+        let completions = completion_list(fixture);\n+        assert!(completions.is_empty(), \"Completions weren't empty: {}\", completions)\n+    }\n }"}]}