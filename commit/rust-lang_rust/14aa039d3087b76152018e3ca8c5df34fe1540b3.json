{"sha": "14aa039d3087b76152018e3ca8c5df34fe1540b3", "node_id": "C_kwDOAAsO6NoAKDE0YWEwMzlkMzA4N2I3NjE1MjAxOGUzY2E4YzVkZjM0ZmUxNTQwYjM", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-11-22T02:38:50Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-11-22T13:45:17Z"}, "message": "Skip registers saved by calling convention", "tree": {"sha": "e6b8f3cceef12d382c5acdd2e21dfa9b7a0c609a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6b8f3cceef12d382c5acdd2e21dfa9b7a0c609a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14aa039d3087b76152018e3ca8c5df34fe1540b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14aa039d3087b76152018e3ca8c5df34fe1540b3", "html_url": "https://github.com/rust-lang/rust/commit/14aa039d3087b76152018e3ca8c5df34fe1540b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14aa039d3087b76152018e3ca8c5df34fe1540b3/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "703027f0fc5dbd47d1655f1af013e67ae7d5f974", "url": "https://api.github.com/repos/rust-lang/rust/commits/703027f0fc5dbd47d1655f1af013e67ae7d5f974", "html_url": "https://github.com/rust-lang/rust/commit/703027f0fc5dbd47d1655f1af013e67ae7d5f974"}], "stats": {"total": 30, "additions": 26, "deletions": 4}, "files": [{"sha": "8f9deeec7184908a6dcb7fe7e0af80402d9ed042", "filename": "src/inline_asm.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/14aa039d3087b76152018e3ca8c5df34fe1540b3/src%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aa039d3087b76152018e3ca8c5df34fe1540b3/src%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finline_asm.rs?ref=14aa039d3087b76152018e3ca8c5df34fe1540b3", "patch": "@@ -320,21 +320,44 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n             offset\n         };\n \n+        // Allocate stack slots for saving clobbered registers\n+        let abi_clobber =\n+            InlineAsmClobberAbi::parse(self.arch, &self.tcx.sess.target, Symbol::intern(\"C\"))\n+                .unwrap()\n+                .clobbered_regs();\n+        for (i, reg) in self.registers.iter().enumerate().filter_map(|(i, r)| r.map(|r| (i, r))) {\n+            let mut need_save = true;\n+            // If the register overlaps with a register clobbered by function call, then\n+            // we don't need to save it.\n+            for r in abi_clobber {\n+                r.overlapping_regs(|r| {\n+                    if r == reg {\n+                        need_save = false;\n+                    }\n+                });\n+\n+                if !need_save {\n+                    break;\n+                }\n+            }\n+\n+            if need_save {\n+                slots_clobber[i] = Some(new_slot(reg.reg_class()));\n+            }\n+        }\n+\n         // FIXME overlap input and output slots to save stack space\n         for (i, operand) in self.operands.iter().enumerate() {\n             match *operand {\n                 InlineAsmOperand::In { reg, .. } => {\n-                    slots_clobber[i] = Some(new_slot(reg.reg_class()));\n                     slots_input[i] = Some(new_slot(reg.reg_class()));\n                 }\n                 InlineAsmOperand::Out { reg, place, .. } => {\n-                    slots_clobber[i] = Some(new_slot(reg.reg_class()));\n                     if place.is_some() {\n                         slots_output[i] = Some(new_slot(reg.reg_class()));\n                     }\n                 }\n                 InlineAsmOperand::InOut { reg, out_place, .. } => {\n-                    slots_clobber[i] = Some(new_slot(reg.reg_class()));\n                     let slot = new_slot(reg.reg_class());\n                     slots_input[i] = Some(slot);\n                     if out_place.is_some() {\n@@ -366,7 +389,6 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n \n         // Save clobbered registers\n         if !self.options.contains(InlineAsmOptions::NORETURN) {\n-            // FIXME skip registers saved by the calling convention\n             for (reg, slot) in self\n                 .registers\n                 .iter()"}]}