{"sha": "cfa914958c5eead0d8d84e0c7b8298ef7ac5530b", "node_id": "C_kwDOAAsO6NoAKGNmYTkxNDk1OGM1ZWVhZDBkOGQ4NGUwYzdiODI5OGVmN2FjNTUzMGI", "commit": {"author": {"name": "rami3l", "email": "rami3l@outlook.com", "date": "2022-12-14T12:08:20Z"}, "committer": {"name": "rami3l", "email": "rami3l@outlook.com", "date": "2022-12-17T14:59:30Z"}, "message": "refactor: use `generate_trait_impl_text_intransitive` for `From`-like traits", "tree": {"sha": "f9deeb4d5445e3af92927f98313472af2772df80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9deeb4d5445e3af92927f98313472af2772df80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfa914958c5eead0d8d84e0c7b8298ef7ac5530b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfa914958c5eead0d8d84e0c7b8298ef7ac5530b", "html_url": "https://github.com/rust-lang/rust/commit/cfa914958c5eead0d8d84e0c7b8298ef7ac5530b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfa914958c5eead0d8d84e0c7b8298ef7ac5530b/comments", "author": {"login": "rami3l", "id": 33851577, "node_id": "MDQ6VXNlcjMzODUxNTc3", "avatar_url": "https://avatars.githubusercontent.com/u/33851577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rami3l", "html_url": "https://github.com/rami3l", "followers_url": "https://api.github.com/users/rami3l/followers", "following_url": "https://api.github.com/users/rami3l/following{/other_user}", "gists_url": "https://api.github.com/users/rami3l/gists{/gist_id}", "starred_url": "https://api.github.com/users/rami3l/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rami3l/subscriptions", "organizations_url": "https://api.github.com/users/rami3l/orgs", "repos_url": "https://api.github.com/users/rami3l/repos", "events_url": "https://api.github.com/users/rami3l/events{/privacy}", "received_events_url": "https://api.github.com/users/rami3l/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rami3l", "id": 33851577, "node_id": "MDQ6VXNlcjMzODUxNTc3", "avatar_url": "https://avatars.githubusercontent.com/u/33851577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rami3l", "html_url": "https://github.com/rami3l", "followers_url": "https://api.github.com/users/rami3l/followers", "following_url": "https://api.github.com/users/rami3l/following{/other_user}", "gists_url": "https://api.github.com/users/rami3l/gists{/gist_id}", "starred_url": "https://api.github.com/users/rami3l/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rami3l/subscriptions", "organizations_url": "https://api.github.com/users/rami3l/orgs", "repos_url": "https://api.github.com/users/rami3l/repos", "events_url": "https://api.github.com/users/rami3l/events{/privacy}", "received_events_url": "https://api.github.com/users/rami3l/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12b05d241698fb3ecb18eaebc75cdce85abb1013", "url": "https://api.github.com/repos/rust-lang/rust/commits/12b05d241698fb3ecb18eaebc75cdce85abb1013", "html_url": "https://github.com/rust-lang/rust/commit/12b05d241698fb3ecb18eaebc75cdce85abb1013"}], "stats": {"total": 72, "additions": 44, "deletions": 28}, "files": [{"sha": "742f1f78c2ec97f8e7aebba9c755b1ba78064fef", "filename": "crates/ide-assists/src/handlers/generate_from_impl_for_enum.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfa914958c5eead0d8d84e0c7b8298ef7ac5530b/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfa914958c5eead0d8d84e0c7b8298ef7ac5530b/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs?ref=cfa914958c5eead0d8d84e0c7b8298ef7ac5530b", "patch": "@@ -1,7 +1,9 @@\n use ide_db::{famous_defs::FamousDefs, RootDatabase};\n use syntax::ast::{self, AstNode, HasName};\n \n-use crate::{utils::generate_trait_impl_text, AssistContext, AssistId, AssistKind, Assists};\n+use crate::{\n+    utils::generate_trait_impl_text_intransitive, AssistContext, AssistId, AssistKind, Assists,\n+};\n \n // Assist: generate_from_impl_for_enum\n //\n@@ -70,7 +72,7 @@ pub(crate) fn generate_from_impl_for_enum(\n     }}\"#\n                 )\n             };\n-            let from_impl = generate_trait_impl_text(&enum_, &from_trait, &impl_code);\n+            let from_impl = generate_trait_impl_text_intransitive(&enum_, &from_trait, &impl_code);\n             edit.insert(start_offset, from_impl);\n         },\n     )"}, {"sha": "9ad14a819d97bc1e5aa44c40d6ff78decfa14d5c", "filename": "crates/ide-assists/src/handlers/generate_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfa914958c5eead0d8d84e0c7b8298ef7ac5530b/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfa914958c5eead0d8d84e0c7b8298ef7ac5530b/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs?ref=cfa914958c5eead0d8d84e0c7b8298ef7ac5530b", "patch": "@@ -1,7 +1,7 @@\n use syntax::ast::{self, AstNode, HasName};\n \n use crate::{\n-    utils::{generate_impl_text, generate_trait_impl_text},\n+    utils::{generate_impl_text, generate_trait_impl_text_intransitive},\n     AssistContext, AssistId, AssistKind, Assists,\n };\n \n@@ -89,11 +89,11 @@ pub(crate) fn generate_trait_impl(acc: &mut Assists, ctx: &AssistContext<'_>) ->\n             let start_offset = nominal.syntax().text_range().end();\n             match ctx.config.snippet_cap {\n                 Some(cap) => {\n-                    let snippet = generate_trait_impl_text(&nominal, \"$0\", \"\");\n+                    let snippet = generate_trait_impl_text_intransitive(&nominal, \"$0\", \"\");\n                     edit.insert_snippet(cap, start_offset, snippet);\n                 }\n                 None => {\n-                    let text = generate_trait_impl_text(&nominal, \"\", \"\");\n+                    let text = generate_trait_impl_text_intransitive(&nominal, \"\", \"\");\n                     edit.insert(start_offset, text);\n                 }\n             }"}, {"sha": "f9812741e529532a0977ea302a1b386702edd7c2", "filename": "crates/ide-assists/src/utils.rs", "status": "modified", "additions": 35, "deletions": 21, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/cfa914958c5eead0d8d84e0c7b8298ef7ac5530b/crates%2Fide-assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfa914958c5eead0d8d84e0c7b8298ef7ac5530b/crates%2Fide-assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils.rs?ref=cfa914958c5eead0d8d84e0c7b8298ef7ac5530b", "patch": "@@ -5,7 +5,6 @@ use std::ops;\n pub(crate) use gen_trait_fn_body::gen_trait_fn_body;\n use hir::{db::HirDatabase, HirDisplay, Semantics};\n use ide_db::{famous_defs::FamousDefs, path_transform::PathTransform, RootDatabase, SnippetCap};\n-use itertools::Itertools;\n use stdx::format_to;\n use syntax::{\n     ast::{\n@@ -435,52 +434,67 @@ pub(crate) fn find_impl_block_end(impl_def: ast::Impl, buf: &mut String) -> Opti\n     Some(end)\n }\n \n-// Generates the surrounding `impl Type { <code> }` including type and lifetime\n-// parameters\n+/// Generates the surrounding `impl Type { <code> }` including type and lifetime\n+/// parameters.\n pub(crate) fn generate_impl_text(adt: &ast::Adt, code: &str) -> String {\n-    generate_impl_text_inner(adt, None, code)\n+    generate_impl_text_inner(adt, None, true, code)\n }\n \n-// Generates the surrounding `impl <trait> for Type { <code> }` including type\n-// and lifetime parameters\n+/// Generates the surrounding `impl <trait> for Type { <code> }` including type\n+/// and lifetime parameters, with `<trait>` appended to `impl`'s generic parameters' bounds.\n+///\n+/// This is useful for traits like `PartialEq`, since `impl<T> PartialEq for U<T>` often requires `T: PartialEq`.\n pub(crate) fn generate_trait_impl_text(adt: &ast::Adt, trait_text: &str, code: &str) -> String {\n-    generate_impl_text_inner(adt, Some(trait_text), code)\n+    generate_impl_text_inner(adt, Some(trait_text), true, code)\n+}\n+\n+/// Generates the surrounding `impl <trait> for Type { <code> }` including type\n+/// and lifetime parameters, with `impl`'s generic parameters' bounds kept as-is.\n+///\n+/// This is useful for traits like `From<T>`, since `impl<T> From<T> for U<T>` doesn't require `T: From<T>`.\n+pub(crate) fn generate_trait_impl_text_intransitive(\n+    adt: &ast::Adt,\n+    trait_text: &str,\n+    code: &str,\n+) -> String {\n+    generate_impl_text_inner(adt, Some(trait_text), false, code)\n }\n \n-fn generate_impl_text_inner(adt: &ast::Adt, trait_text: Option<&str>, code: &str) -> String {\n+fn generate_impl_text_inner(\n+    adt: &ast::Adt,\n+    trait_text: Option<&str>,\n+    trait_is_transitive: bool,\n+    code: &str,\n+) -> String {\n     // Ensure lifetime params are before type & const params\n     let generic_params = adt.generic_param_list().map(|generic_params| {\n         let lifetime_params =\n             generic_params.lifetime_params().map(ast::GenericParam::LifetimeParam);\n-        let ty_or_const_params = generic_params.type_or_const_params().filter_map(|param| {\n+        let ty_or_const_params = generic_params.type_or_const_params().map(|param| {\n             match param {\n                 ast::TypeOrConstParam::Type(param) => {\n                     let param = param.clone_for_update();\n                     // remove defaults since they can't be specified in impls\n                     param.remove_default();\n-                    let mut bounds = param\n-                        .type_bound_list()\n-                        .map_or_else(Vec::new, |it| it.bounds().collect_vec());\n-                    // `{ty_param}: {trait_text}`\n+                    let mut bounds =\n+                        param.type_bound_list().map_or_else(Vec::new, |it| it.bounds().collect());\n                     if let Some(trait_) = trait_text {\n-                        // Defense against the following cases:\n-                        // - The trait is undetermined, e.g. `$0`.\n-                        // - The trait is a `From`, e.g. `From<T>`.\n-                        if !trait_.starts_with('$')\n-                            && !matches!(trait_.split_once('<'), Some((left, _right)) if left.trim() == \"From\")\n-                        {\n+                        // Add the current trait to `bounds` if the trait is transitive,\n+                        // meaning `impl<T> Trait for U<T>` requires `T: Trait`.\n+                        if trait_is_transitive {\n                             bounds.push(make::type_bound(trait_));\n                         }\n                     };\n+                    // `{ty_param}: {bounds}`\n                     let param =\n                         make::type_param(param.name().unwrap(), make::type_bound_list(bounds));\n-                    Some(ast::GenericParam::TypeParam(param))\n+                    ast::GenericParam::TypeParam(param)\n                 }\n                 ast::TypeOrConstParam::Const(param) => {\n                     let param = param.clone_for_update();\n                     // remove defaults since they can't be specified in impls\n                     param.remove_default();\n-                    Some(ast::GenericParam::ConstParam(param))\n+                    ast::GenericParam::ConstParam(param)\n                 }\n             }\n         });"}, {"sha": "686bb40ecd391e89ac281a278b8c0aa63c247f12", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfa914958c5eead0d8d84e0c7b8298ef7ac5530b/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfa914958c5eead0d8d84e0c7b8298ef7ac5530b/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=cfa914958c5eead0d8d84e0c7b8298ef7ac5530b", "patch": "@@ -734,8 +734,8 @@ pub fn type_bound_list(\n }\n \n pub fn type_param(name: ast::Name, bounds: Option<ast::TypeBoundList>) -> ast::TypeParam {\n-    let bound = bounds.map_or_else(String::new, |it| format!(\": {it}\"));\n-    ast_from_text(&format!(\"fn f<{name}{bound}>() {{ }}\"))\n+    let bounds = bounds.map_or_else(String::new, |it| format!(\": {it}\"));\n+    ast_from_text(&format!(\"fn f<{name}{bounds}>() {{ }}\"))\n }\n \n pub fn lifetime_param(lifetime: ast::Lifetime) -> ast::LifetimeParam {"}]}