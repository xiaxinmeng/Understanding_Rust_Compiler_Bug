{"sha": "f051e1323807b93fcb0d128a29dcdd0a0349bcf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNTFlMTMyMzgwN2I5M2ZjYjBkMTI4YTI5ZGNkZDBhMDM0OWJjZjg=", "commit": {"author": {"name": "Keegan McAllister", "email": "mcallister.keegan@gmail.com", "date": "2015-02-19T03:34:55Z"}, "committer": {"name": "Keegan McAllister", "email": "mcallister.keegan@gmail.com", "date": "2015-02-19T03:54:45Z"}, "message": "Fix references to doc.rs throughout the code", "tree": {"sha": "a2f037420639c0049a78e2397efa3989aab2ff1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2f037420639c0049a78e2397efa3989aab2ff1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f051e1323807b93fcb0d128a29dcdd0a0349bcf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f051e1323807b93fcb0d128a29dcdd0a0349bcf8", "html_url": "https://github.com/rust-lang/rust/commit/f051e1323807b93fcb0d128a29dcdd0a0349bcf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac6cab088791c497726ccdec24f6f97e709d5a62", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac6cab088791c497726ccdec24f6f97e709d5a62", "html_url": "https://github.com/rust-lang/rust/commit/ac6cab088791c497726ccdec24f6f97e709d5a62"}], "stats": {"total": 54, "additions": 28, "deletions": 26}, "files": [{"sha": "ea59446c6d5be4daf3a6dbc37abbb30c8e1c2b35", "filename": "src/librustc/middle/infer/higher_ranked/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=f051e1323807b93fcb0d128a29dcdd0a0349bcf8", "patch": "@@ -465,7 +465,8 @@ pub fn skolemize_late_bound_regions<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n      * Replace all regions bound by `binder` with skolemized regions and\n      * return a map indicating which bound-region was replaced with what\n      * skolemized region. This is the first step of checking subtyping\n-     * when higher-ranked things are involved. See `doc.rs` for more details.\n+     * when higher-ranked things are involved. See `README.md` for more\n+     * details.\n      */\n \n     let (result, map) = ty::replace_late_bound_regions(infcx.tcx, binder, |br| {\n@@ -490,7 +491,7 @@ pub fn leak_check<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,\n      * and checks to determine whether any of the skolemized regions created\n      * in `skol_map` would \"escape\" -- meaning that they are related to\n      * other regions in some way. If so, the higher-ranked subtyping doesn't\n-     * hold. See `doc.rs` for more details.\n+     * hold. See `README.md` for more details.\n      */\n \n     debug!(\"leak_check: skol_map={}\",\n@@ -533,7 +534,7 @@ pub fn leak_check<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,\n /// passed; currently, it's used in the trait matching code to create\n /// a set of nested obligations frmo an impl that matches against\n /// something higher-ranked.  More details can be found in\n-/// `middle::traits::doc.rs`.\n+/// `librustc/middle/traits/README.md`.\n ///\n /// As a brief example, consider the obligation `for<'a> Fn(&'a int)\n /// -> &'a int`, and the impl:"}, {"sha": "0a4556e0fd22bb259d790692b0edc138358fb845", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=f051e1323807b93fcb0d128a29dcdd0a0349bcf8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! See doc.rs\n+//! See README.md\n \n pub use self::Constraint::*;\n pub use self::Verify::*;"}, {"sha": "380f5d46799fa9cd1c34bc707636403352252b8b", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=f051e1323807b93fcb0d128a29dcdd0a0349bcf8", "patch": "@@ -852,7 +852,7 @@ fn resolve_expr(visitor: &mut RegionResolutionVisitor, expr: &ast::Expr) {\n                 // The idea is that call.callee_id represents *the time when\n                 // the invoked function is actually running* and call.id\n                 // represents *the time to prepare the arguments and make the\n-                // call*.  See the section \"Borrows in Calls\" borrowck/doc.rs\n+                // call*.  See the section \"Borrows in Calls\" borrowck/README.md\n                 // for an extended explanation of why this distinction is\n                 // important.\n                 //"}, {"sha": "60db9c3867a4446d39d63624841cb25d677edcbf", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=f051e1323807b93fcb0d128a29dcdd0a0349bcf8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! See `doc.rs` for high-level documentation\n+//! See `README.md` for high-level documentation\n \n use super::SelectionContext;\n use super::{Obligation, ObligationCause};"}, {"sha": "ffbd247ab83a6eab0abaa7aed6f5faf7c6d4f9b9", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=f051e1323807b93fcb0d128a29dcdd0a0349bcf8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! See `doc.rs` for high-level documentation\n+//! See `README.md` for high-level documentation\n #![allow(dead_code)] // FIXME -- just temporarily\n \n pub use self::MethodMatchResult::*;\n@@ -547,7 +547,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     //\n     // The selection process begins by examining all in-scope impls,\n     // caller obligations, and so forth and assembling a list of\n-    // candidates. See `doc.rs` and the `Candidate` type for more details.\n+    // candidates. See `README.md` and the `Candidate` type for more\n+    // details.\n \n     fn candidate_from_obligation<'o>(&mut self,\n                                      stack: &TraitObligationStack<'o, 'tcx>)\n@@ -1656,7 +1657,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     //\n     // Confirmation unifies the output type parameters of the trait\n     // with the values found in the obligation, possibly yielding a\n-    // type error.  See `doc.rs` for more details.\n+    // type error.  See `README.md` for more details.\n \n     fn confirm_candidate(&mut self,\n                          obligation: &TraitObligation<'tcx>,"}, {"sha": "06ef0e02603e7d6ac1a1cf336857ba0b6d5282e0", "filename": "src/librustc_borrowck/borrowck/fragments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs?ref=f051e1323807b93fcb0d128a29dcdd0a0349bcf8", "patch": "@@ -10,7 +10,7 @@\n \n //! Helper routines used for fragmenting structural paths due to moves for\n //! tracking drop obligations. Please see the extensive comments in the\n-//! section \"Structural fragments\" in `doc.rs`.\n+//! section \"Structural fragments\" in `README.md`.\n \n use self::Fragment::*;\n "}, {"sha": "577994c9a0bc712b1f623026e722be6c0a0002bc", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=f051e1323807b93fcb0d128a29dcdd0a0349bcf8", "patch": "@@ -173,7 +173,7 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for GatherLoanCtxt<'a, 'tcx> {\n     }\n }\n \n-/// Implements the A-* rules in doc.rs.\n+/// Implements the A-* rules in README.md.\n fn check_aliasability<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                                 borrow_span: Span,\n                                 loan_cause: euv::LoanCause,\n@@ -375,7 +375,7 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n                                       cmt: mc::cmt<'tcx>,\n                                       req_kind: ty::BorrowKind)\n                                       -> Result<(),()> {\n-            //! Implements the M-* rules in doc.rs.\n+            //! Implements the M-* rules in README.md.\n \n             match req_kind {\n                 ty::UniqueImmBorrow | ty::ImmBorrow => {"}, {"sha": "4cfd43df58f969a2a50feea3daa3763983b70f18", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=f051e1323807b93fcb0d128a29dcdd0a0349bcf8", "patch": "@@ -295,7 +295,7 @@ impl<'tcx> PartialEq for LoanPath<'tcx> {\n \n #[derive(PartialEq, Eq, Hash, Debug)]\n pub enum LoanPathKind<'tcx> {\n-    LpVar(ast::NodeId),                         // `x` in doc.rs\n+    LpVar(ast::NodeId),                         // `x` in README.md\n     LpUpvar(ty::UpvarId),                       // `x` captured by-value into closure\n     LpDowncast(Rc<LoanPath<'tcx>>, ast::DefId), // `x` downcast to particular enum variant\n     LpExtend(Rc<LoanPath<'tcx>>, mc::MutabilityCategory, LoanPathElem)\n@@ -336,8 +336,8 @@ impl ToInteriorKind for mc::InteriorKind {\n \n #[derive(Copy, PartialEq, Eq, Hash, Debug)]\n pub enum LoanPathElem {\n-    LpDeref(mc::PointerKind),    // `*LV` in doc.rs\n-    LpInterior(InteriorKind),    // `LV.f` in doc.rs\n+    LpDeref(mc::PointerKind),    // `*LV` in README.md\n+    LpInterior(InteriorKind),    // `LV.f` in README.md\n }\n \n pub fn closure_to_block(closure_id: ast::NodeId,"}, {"sha": "0f7f8e61e37e0a1788c2a20ae0d79a48fd14ff22", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=f051e1323807b93fcb0d128a29dcdd0a0349bcf8", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n //! Data structures used for tracking moves. Please see the extensive\n-//! comments in the section \"Moves and initialization\" in `doc.rs`.\n+//! comments in the section \"Moves and initialization\" in `README.md`.\n \n pub use self::MoveKind::*;\n \n@@ -33,7 +33,7 @@ use syntax::codemap::Span;\n pub mod fragments;\n \n pub struct MoveData<'tcx> {\n-    /// Move paths. See section \"Move paths\" in `doc.rs`.\n+    /// Move paths. See section \"Move paths\" in `README.md`.\n     pub paths: RefCell<Vec<MovePath<'tcx>>>,\n \n     /// Cache of loan path to move path index, for easy lookup.\n@@ -464,7 +464,7 @@ impl<'tcx> MoveData<'tcx> {\n     /// assignments into the provided data flow contexts.\n     /// Moves are generated by moves and killed by assignments and\n     /// scoping. Assignments are generated by assignment to variables and\n-    /// killed by scoping. See `doc.rs` for more details.\n+    /// killed by scoping. See `README.md` for more details.\n     fn add_gen_kills(&self,\n                      tcx: &ty::ctxt<'tcx>,\n                      dfcx_moves: &mut MoveDataFlow,"}, {"sha": "3975c4bbb8ee0d1c1d367d04914a7a01bcd15b9e", "filename": "src/librustc_trans/trans/datum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs?ref=f051e1323807b93fcb0d128a29dcdd0a0349bcf8", "patch": "@@ -122,7 +122,7 @@ use syntax::codemap::DUMMY_SP;\n /// A `Datum` encapsulates the result of evaluating an expression.  It\n /// describes where the value is stored, what Rust type the value has,\n /// whether it is addressed by reference, and so forth. Please refer\n-/// the section on datums in `doc.rs` for more details.\n+/// the section on datums in `README.md` for more details.\n #[derive(Clone, Copy)]\n pub struct Datum<'tcx, K> {\n     /// The llvm value.  This is either a pointer to the Rust value or"}, {"sha": "3c8604045a416084f52756cffdd8233308899cf9", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=f051e1323807b93fcb0d128a29dcdd0a0349bcf8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Method lookup: the secret sauce of Rust. See `doc.rs`.\n+//! Method lookup: the secret sauce of Rust. See `README.md`.\n \n use astconv::AstConv;\n use check::{FnCtxt};"}, {"sha": "9f72199c1b3208c196b203a8b6788b68a1b713f3", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=f051e1323807b93fcb0d128a29dcdd0a0349bcf8", "patch": "@@ -204,7 +204,7 @@ fn test_resize_policy() {\n // produces identical results to a linear naive reinsertion from the same\n // element.\n //\n-// FIXME(Gankro, pczarn): review the proof and put it all in a separate doc.rs\n+// FIXME(Gankro, pczarn): review the proof and put it all in a separate README.md\n \n /// A hash map implementation which uses linear probing with Robin\n /// Hood bucket stealing."}, {"sha": "d60751eddc7bc201866255cb0b129c90744be516", "filename": "src/test/compile-fail/borrowck-borrow-mut-base-ptr-in-aliasable-loc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.rs?ref=f051e1323807b93fcb0d128a29dcdd0a0349bcf8", "patch": "@@ -11,7 +11,7 @@\n // Test that attempt to reborrow an `&mut` pointer in an aliasable\n // location yields an error.\n //\n-// Example from src/middle/borrowck/doc.rs\n+// Example from src/librustc_borrowck/borrowck/README.md\n \n fn foo(t0: & &mut isize) {\n     let t1 = t0;"}, {"sha": "2fb89e6364bb1e8b24a8607cd18d46f9329fe502", "filename": "src/test/compile-fail/borrowck-move-mut-base-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Ftest%2Fcompile-fail%2Fborrowck-move-mut-base-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Ftest%2Fcompile-fail%2Fborrowck-move-mut-base-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-mut-base-ptr.rs?ref=f051e1323807b93fcb0d128a29dcdd0a0349bcf8", "patch": "@@ -11,7 +11,7 @@\n // Test that attempt to move `&mut` pointer while pointee is borrowed\n // yields an error.\n //\n-// Example from src/middle/borrowck/doc.rs\n+// Example from src/librustc_borrowck/borrowck/README.md\n \n fn foo(t0: &mut isize) {\n     let p: &isize = &*t0; // Freezes `*t0`"}, {"sha": "bdeb7ea69bdfb84d416420bc26f3474e373d6c90", "filename": "src/test/compile-fail/borrowck-mut-borrow-of-mut-base-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-borrow-of-mut-base-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-borrow-of-mut-base-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-borrow-of-mut-base-ptr.rs?ref=f051e1323807b93fcb0d128a29dcdd0a0349bcf8", "patch": "@@ -11,7 +11,7 @@\n // Test that attempt to mutably borrow `&mut` pointer while pointee is\n // borrowed yields an error.\n //\n-// Example from src/middle/borrowck/doc.rs\n+// Example from src/librustc_borrowck/borrowck/README.md\n \n fn foo<'a>(mut t0: &'a mut isize,\n            mut t1: &'a mut isize) {"}, {"sha": "552fcec8e2858e921fd6a8842b3981667986e5a0", "filename": "src/test/compile-fail/borrowck-swap-mut-base-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Ftest%2Fcompile-fail%2Fborrowck-swap-mut-base-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Ftest%2Fcompile-fail%2Fborrowck-swap-mut-base-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-swap-mut-base-ptr.rs?ref=f051e1323807b93fcb0d128a29dcdd0a0349bcf8", "patch": "@@ -11,7 +11,7 @@\n // Test that attempt to swap `&mut` pointer while pointee is borrowed\n // yields an error.\n //\n-// Example from src/middle/borrowck/doc.rs\n+// Example from src/librustc_borrowck/borrowck/README.md\n \n use std::mem::swap;\n "}, {"sha": "48129f2b6ddc3ebe2b1251bca6e41085c305bc45", "filename": "src/test/run-pass/borrowck-borrow-of-mut-base-ptr-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Ftest%2Frun-pass%2Fborrowck-borrow-of-mut-base-ptr-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f051e1323807b93fcb0d128a29dcdd0a0349bcf8/src%2Ftest%2Frun-pass%2Fborrowck-borrow-of-mut-base-ptr-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-borrow-of-mut-base-ptr-safe.rs?ref=f051e1323807b93fcb0d128a29dcdd0a0349bcf8", "patch": "@@ -11,7 +11,7 @@\n // Test that freezing an `&mut` pointer while referent is\n // frozen is legal.\n //\n-// Example from src/middle/borrowck/doc.rs\n+// Example from src/librustc_borrowck/borrowck/README.md\n \n fn foo<'a>(mut t0: &'a mut int,\n            mut t1: &'a mut int) {"}]}