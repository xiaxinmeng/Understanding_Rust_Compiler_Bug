{"sha": "4a287d25258aac0873863584e6f3d075dfb69033", "node_id": "C_kwDOAAsO6NoAKDRhMjg3ZDI1MjU4YWFjMDg3Mzg2MzU4NGU2ZjNkMDc1ZGZiNjkwMzM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-09-15T11:28:09Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-10-19T21:21:34Z"}, "message": "Implement invocation strategy config for checkOnSave\n\nNote that due to how cargo works, none of the modes currently work for r-a", "tree": {"sha": "8ece78617b9430ce507370c9a38f230b869507b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ece78617b9430ce507370c9a38f230b869507b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a287d25258aac0873863584e6f3d075dfb69033", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a287d25258aac0873863584e6f3d075dfb69033", "html_url": "https://github.com/rust-lang/rust/commit/4a287d25258aac0873863584e6f3d075dfb69033", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a287d25258aac0873863584e6f3d075dfb69033/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e2c41dbd68014acbf91c2657a975c5a4b486da9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e2c41dbd68014acbf91c2657a975c5a4b486da9", "html_url": "https://github.com/rust-lang/rust/commit/7e2c41dbd68014acbf91c2657a975c5a4b486da9"}], "stats": {"total": 161, "additions": 127, "deletions": 34}, "files": [{"sha": "c3976e6b7a865459721fcfdf82f3e41e33173010", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 45, "deletions": 8, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/4a287d25258aac0873863584e6f3d075dfb69033/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a287d25258aac0873863584e6f3d075dfb69033/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=4a287d25258aac0873863584e6f3d075dfb69033", "patch": "@@ -6,6 +6,7 @@\n \n use std::{\n     fmt, io,\n+    path::Path,\n     process::{ChildStderr, ChildStdout, Command, Stdio},\n     time::Duration,\n };\n@@ -21,6 +22,14 @@ pub use cargo_metadata::diagnostic::{\n     DiagnosticSpanMacroExpansion,\n };\n \n+#[derive(Copy, Clone, Debug, Default, PartialEq, Eq)]\n+pub enum InvocationStrategy {\n+    OnceInRoot,\n+    PerWorkspaceWithManifestPath,\n+    #[default]\n+    PerWorkspace,\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub enum FlycheckConfig {\n     CargoCommand {\n@@ -32,11 +41,13 @@ pub enum FlycheckConfig {\n         features: Vec<String>,\n         extra_args: Vec<String>,\n         extra_env: FxHashMap<String, String>,\n+        invocation_strategy: InvocationStrategy,\n     },\n     CustomCommand {\n         command: String,\n         args: Vec<String>,\n         extra_env: FxHashMap<String, String>,\n+        invocation_strategy: InvocationStrategy,\n     },\n }\n \n@@ -136,7 +147,9 @@ enum Restart {\n     No,\n }\n \n+/// A [`FlycheckActor`] is a single check instance of a workspace.\n struct FlycheckActor {\n+    /// The workspace id of this flycheck instance.\n     id: usize,\n     sender: Box<dyn Fn(Message) + Send>,\n     config: FlycheckConfig,\n@@ -164,9 +177,11 @@ impl FlycheckActor {\n         tracing::info!(%id, ?workspace_root, \"Spawning flycheck\");\n         FlycheckActor { id, sender, config, workspace_root, cargo_handle: None }\n     }\n-    fn progress(&self, progress: Progress) {\n+\n+    fn report_progress(&self, progress: Progress) {\n         self.send(Message::Progress { id: self.id, progress });\n     }\n+\n     fn next_event(&self, inbox: &Receiver<Restart>) -> Option<Event> {\n         let check_chan = self.cargo_handle.as_ref().map(|cargo| &cargo.receiver);\n         if let Ok(msg) = inbox.try_recv() {\n@@ -178,6 +193,7 @@ impl FlycheckActor {\n             recv(check_chan.unwrap_or(&never())) -> msg => Some(Event::CheckEvent(msg.ok())),\n         }\n     }\n+\n     fn run(mut self, inbox: Receiver<Restart>) {\n         'event: while let Some(event) = self.next_event(&inbox) {\n             match event {\n@@ -194,7 +210,20 @@ impl FlycheckActor {\n                         }\n                     }\n \n-                    let command = self.check_command();\n+                    let mut command = self.check_command();\n+                    let invocation_strategy = self.invocation_strategy();\n+                    match invocation_strategy {\n+                        InvocationStrategy::OnceInRoot => (),\n+                        InvocationStrategy::PerWorkspaceWithManifestPath => {\n+                            command.arg(\"--manifest-path\");\n+                            command.arg(<_ as AsRef<Path>>::as_ref(\n+                                &self.workspace_root.join(\"Cargo.toml\"),\n+                            ));\n+                        }\n+                        InvocationStrategy::PerWorkspace => {\n+                            command.current_dir(&self.workspace_root);\n+                        }\n+                    }\n                     tracing::debug!(?command, \"will restart flycheck\");\n                     match CargoHandle::spawn(command) {\n                         Ok(cargo_handle) => {\n@@ -203,10 +232,10 @@ impl FlycheckActor {\n                                 \"did  restart flycheck\"\n                             );\n                             self.cargo_handle = Some(cargo_handle);\n-                            self.progress(Progress::DidStart);\n+                            self.report_progress(Progress::DidStart);\n                         }\n                         Err(error) => {\n-                            self.progress(Progress::DidFailToRestart(format!(\n+                            self.report_progress(Progress::DidFailToRestart(format!(\n                                 \"Failed to run the following command: {:?} error={}\",\n                                 self.check_command(),\n                                 error\n@@ -226,11 +255,11 @@ impl FlycheckActor {\n                             self.check_command()\n                         );\n                     }\n-                    self.progress(Progress::DidFinish(res));\n+                    self.report_progress(Progress::DidFinish(res));\n                 }\n                 Event::CheckEvent(Some(message)) => match message {\n                     CargoMessage::CompilerArtifact(msg) => {\n-                        self.progress(Progress::DidCheckCrate(msg.target.name));\n+                        self.report_progress(Progress::DidCheckCrate(msg.target.name));\n                     }\n \n                     CargoMessage::Diagnostic(msg) => {\n@@ -254,7 +283,14 @@ impl FlycheckActor {\n                 \"did  cancel flycheck\"\n             );\n             cargo_handle.cancel();\n-            self.progress(Progress::DidCancel);\n+            self.report_progress(Progress::DidCancel);\n+        }\n+    }\n+\n+    fn invocation_strategy(&self) -> InvocationStrategy {\n+        match self.config {\n+            FlycheckConfig::CargoCommand { invocation_strategy, .. }\n+            | FlycheckConfig::CustomCommand { invocation_strategy, .. } => invocation_strategy,\n         }\n     }\n \n@@ -269,6 +305,7 @@ impl FlycheckActor {\n                 extra_args,\n                 features,\n                 extra_env,\n+                invocation_strategy: _,\n             } => {\n                 let mut cmd = Command::new(toolchain::cargo());\n                 cmd.arg(command);\n@@ -297,7 +334,7 @@ impl FlycheckActor {\n                 cmd.envs(extra_env);\n                 cmd\n             }\n-            FlycheckConfig::CustomCommand { command, args, extra_env } => {\n+            FlycheckConfig::CustomCommand { command, args, extra_env, invocation_strategy: _ } => {\n                 let mut cmd = Command::new(command);\n                 cmd.args(args);\n                 cmd.envs(extra_env);"}, {"sha": "a61e38706e504cb7a75ae9e192c35cf8a8800dcf", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4a287d25258aac0873863584e6f3d075dfb69033/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a287d25258aac0873863584e6f3d075dfb69033/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=4a287d25258aac0873863584e6f3d075dfb69033", "patch": "@@ -130,6 +130,14 @@ config_data! {\n         ///\n         /// Set to `\"all\"` to pass `--all-features` to Cargo.\n         checkOnSave_features: Option<CargoFeaturesDef>      = \"null\",\n+        /// Specifies the invocation strategy to use when running the checkOnSave command.\n+        /// If `per_workspace_with_manifest_path` is set, the command will be executed for each\n+        /// workspace, `--manifest-path {workspace-dir}` will be passed to the invoked command and\n+        /// the command will be executed from the project root.\n+        /// If `per_workspace` is set, the command will be executed for each workspace and the\n+        /// command will be executed from the corresponding workspace root.\n+        /// If `once_in_root` is set, the command will be executed once in the project root.\n+        checkOnSave_invocationStrategy: InvocationStrategy = \"\\\"per_workspace\\\"\",\n         /// Whether to pass `--no-default-features` to Cargo. Defaults to\n         /// `#rust-analyzer.cargo.noDefaultFeatures#`.\n         checkOnSave_noDefaultFeatures: Option<bool>      = \"null\",\n@@ -1094,6 +1102,13 @@ impl Config {\n         if !self.data.checkOnSave_enable {\n             return None;\n         }\n+        let invocation_strategy = match self.data.cargo_buildScripts_invocationStrategy {\n+            InvocationStrategy::OnceInRoot => flycheck::InvocationStrategy::OnceInRoot,\n+            InvocationStrategy::PerWorkspaceWithManifestPath => {\n+                flycheck::InvocationStrategy::PerWorkspaceWithManifestPath\n+            }\n+            InvocationStrategy::PerWorkspace => flycheck::InvocationStrategy::PerWorkspace,\n+        };\n         let flycheck_config = match &self.data.checkOnSave_overrideCommand {\n             Some(args) if !args.is_empty() => {\n                 let mut args = args.clone();\n@@ -1102,6 +1117,7 @@ impl Config {\n                     command,\n                     args,\n                     extra_env: self.check_on_save_extra_env(),\n+                    invocation_strategy,\n                 }\n             }\n             Some(_) | None => FlycheckConfig::CargoCommand {\n@@ -1131,6 +1147,7 @@ impl Config {\n                 },\n                 extra_args: self.data.checkOnSave_extraArgs.clone(),\n                 extra_env: self.check_on_save_extra_env(),\n+                invocation_strategy,\n             },\n         };\n         Some(flycheck_config)"}, {"sha": "5382790f6e74814a0318fbeb22f574d685acfcae", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 39, "deletions": 26, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/4a287d25258aac0873863584e6f3d075dfb69033/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a287d25258aac0873863584e6f3d075dfb69033/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=4a287d25258aac0873863584e6f3d075dfb69033", "patch": "@@ -473,32 +473,45 @@ impl GlobalState {\n         };\n \n         let sender = self.flycheck_sender.clone();\n-        self.flycheck = self\n-            .workspaces\n-            .iter()\n-            .enumerate()\n-            .filter_map(|(id, w)| match w {\n-                ProjectWorkspace::Cargo { cargo, .. } => Some((id, cargo.workspace_root())),\n-                ProjectWorkspace::Json { project, .. } => {\n-                    // Enable flychecks for json projects if a custom flycheck command was supplied\n-                    // in the workspace configuration.\n-                    match config {\n-                        FlycheckConfig::CustomCommand { .. } => Some((id, project.path())),\n-                        _ => None,\n-                    }\n-                }\n-                ProjectWorkspace::DetachedFiles { .. } => None,\n-            })\n-            .map(|(id, root)| {\n-                let sender = sender.clone();\n-                FlycheckHandle::spawn(\n-                    id,\n-                    Box::new(move |msg| sender.send(msg).unwrap()),\n-                    config.clone(),\n-                    root.to_path_buf(),\n-                )\n-            })\n-            .collect();\n+        let (FlycheckConfig::CargoCommand { invocation_strategy, .. }\n+        | FlycheckConfig::CustomCommand { invocation_strategy, .. }) = config;\n+\n+        self.flycheck = match invocation_strategy {\n+            flycheck::InvocationStrategy::OnceInRoot => vec![FlycheckHandle::spawn(\n+                0,\n+                Box::new(move |msg| sender.send(msg).unwrap()),\n+                config.clone(),\n+                self.config.root_path().clone(),\n+            )],\n+            flycheck::InvocationStrategy::PerWorkspaceWithManifestPath\n+            | flycheck::InvocationStrategy::PerWorkspace => {\n+                self.workspaces\n+                    .iter()\n+                    .enumerate()\n+                    .filter_map(|(id, w)| match w {\n+                        ProjectWorkspace::Cargo { cargo, .. } => Some((id, cargo.workspace_root())),\n+                        ProjectWorkspace::Json { project, .. } => {\n+                            // Enable flychecks for json projects if a custom flycheck command was supplied\n+                            // in the workspace configuration.\n+                            match config {\n+                                FlycheckConfig::CustomCommand { .. } => Some((id, project.path())),\n+                                _ => None,\n+                            }\n+                        }\n+                        ProjectWorkspace::DetachedFiles { .. } => None,\n+                    })\n+                    .map(|(id, root)| {\n+                        let sender = sender.clone();\n+                        FlycheckHandle::spawn(\n+                            id,\n+                            Box::new(move |msg| sender.send(msg).unwrap()),\n+                            config.clone(),\n+                            root.to_path_buf(),\n+                        )\n+                    })\n+                    .collect()\n+            }\n+        };\n     }\n }\n "}, {"sha": "3ced42ef72e3e1d33329eee1b634869f22ad02cd", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4a287d25258aac0873863584e6f3d075dfb69033/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/4a287d25258aac0873863584e6f3d075dfb69033/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=4a287d25258aac0873863584e6f3d075dfb69033", "patch": "@@ -129,6 +129,17 @@ List of features to activate. Defaults to\n \n Set to `\"all\"` to pass `--all-features` to Cargo.\n --\n+[[rust-analyzer.checkOnSave.invocationStrategy]]rust-analyzer.checkOnSave.invocationStrategy (default: `\"per_workspace\"`)::\n++\n+--\n+Specifies the invocation strategy to use when running the checkOnSave command.\n+If `per_workspace_with_manifest_path` is set, the command will be executed for each\n+workspace, `--manifest-path {workspace-dir}` will be passed to the invoked command and\n+the command will be executed from the project root.\n+If `per_workspace` is set, the command will be executed for each workspace and the\n+command will be executed from the corresponding workspace root.\n+If `once_in_root` is set, the command will be executed once in the project root.\n+--\n [[rust-analyzer.checkOnSave.noDefaultFeatures]]rust-analyzer.checkOnSave.noDefaultFeatures (default: `null`)::\n +\n --"}, {"sha": "3af32685fdaeca3144a64a48ffd3a8c96373aafa", "filename": "editors/code/package.json", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4a287d25258aac0873863584e6f3d075dfb69033/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/4a287d25258aac0873863584e6f3d075dfb69033/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=4a287d25258aac0873863584e6f3d075dfb69033", "patch": "@@ -561,6 +561,21 @@\n                         }\n                     ]\n                 },\n+                \"rust-analyzer.checkOnSave.invocationStrategy\": {\n+                    \"markdownDescription\": \"Specifies the invocation strategy to use when running the checkOnSave command.\\nIf `per_workspace_with_manifest_path` is set, the command will be executed for each\\nworkspace, `--manifest-path {workspace-dir}` will be passed to the invoked command and\\nthe command will be executed from the project root.\\nIf `per_workspace` is set, the command will be executed for each workspace and the\\ncommand will be executed from the corresponding workspace root.\\nIf `once_in_root` is set, the command will be executed once in the project root.\",\n+                    \"default\": \"per_workspace\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"per_workspace\",\n+                        \"per_workspace_with_manifest_path\",\n+                        \"once_in_root\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"The command will be executed for each workspace, `--manifest-path {workspace-dir}` will be passed to the invoked command and the command will be executed from the project root.\",\n+                        \"The command will be executed for each workspace and the command will be executed from the corresponding workspace root.\",\n+                        \"The command will be executed once in the project root.\"\n+                    ]\n+                },\n                 \"rust-analyzer.checkOnSave.noDefaultFeatures\": {\n                     \"markdownDescription\": \"Whether to pass `--no-default-features` to Cargo. Defaults to\\n`#rust-analyzer.cargo.noDefaultFeatures#`.\",\n                     \"default\": null,"}]}