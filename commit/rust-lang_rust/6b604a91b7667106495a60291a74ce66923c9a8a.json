{"sha": "6b604a91b7667106495a60291a74ce66923c9a8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNjA0YTkxYjc2NjcxMDY0OTVhNjAyOTFhNzRjZTY2OTIzYzlhOGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-27T21:30:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-27T21:30:14Z"}, "message": "Auto merge of #66824 - tmandry:rollup-kk56bte, r=tmandry\n\nRollup of 17 pull requests\n\nSuccessful merges:\n\n - #64325 (Stabilize nested self receivers in 1.41.0)\n - #66222 (Use `eq_opaque_type_and_type` when type-checking closure signatures)\n - #66305 (Add by-value arrays to `improper_ctypes` lint)\n - #66399 (rustc_metadata: simplify the interactions between Lazy and Table.)\n - #66534 (Allow global references via ForeignItem and Item for the same symbol name during LLVM codegen)\n - #66700 (Fix pointing at arg for fulfillment errors in function calls)\n - #66704 (Intra doc enum variant field)\n - #66718 (Refactor `parse_enum_item` to use `parse_delim_comma_seq`)\n - #66722 (Handle non_exhaustive in borrow checking)\n - #66744 (Fix shrink_to panic documentation)\n - #66761 (Use LLVMDisposePassManager instead of raw delete in rustllvm)\n - #66769 (Add core::{f32,f64}::consts::TAU.)\n - #66774 (Clean up error codes)\n - #66777 (Put back tidy check on error codes)\n - #66797 (Fixes small typo in array docs r? @steveklabnik)\n - #66798 (Fix spelling typos)\n - #66800 (Combine similar tests for const match)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "919997783180d1d8b671b27453a5f6489be28810", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/919997783180d1d8b671b27453a5f6489be28810"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b604a91b7667106495a60291a74ce66923c9a8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b604a91b7667106495a60291a74ce66923c9a8a", "html_url": "https://github.com/rust-lang/rust/commit/6b604a91b7667106495a60291a74ce66923c9a8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b604a91b7667106495a60291a74ce66923c9a8a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e87a205c2e117d9fb57f6cdeac0a7f6e95c88316", "url": "https://api.github.com/repos/rust-lang/rust/commits/e87a205c2e117d9fb57f6cdeac0a7f6e95c88316", "html_url": "https://github.com/rust-lang/rust/commit/e87a205c2e117d9fb57f6cdeac0a7f6e95c88316"}, {"sha": "a40494bc504d665257dc89b1144803a3bff803a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a40494bc504d665257dc89b1144803a3bff803a9", "html_url": "https://github.com/rust-lang/rust/commit/a40494bc504d665257dc89b1144803a3bff803a9"}], "stats": {"total": 1669, "additions": 930, "deletions": 739}, "files": [{"sha": "f686dfe71b93733fdb4aff7296914dc76483f51a", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -113,7 +113,7 @@ impl Step for Std {\n     }\n }\n \n-/// Copies third pary objects needed by various targets.\n+/// Copies third party objects needed by various targets.\n fn copy_third_party_objects(builder: &Builder<'_>, compiler: &Compiler, target: Interned<String>)\n     -> Vec<PathBuf>\n {"}, {"sha": "ab010b35f6ad1568eb3233f767abefc0437dde2d", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -596,7 +596,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Immut<'a>, K, V, Type> {\n             // (We might be one-past-the-end, but that is allowed by LLVM.)\n             // Getting the pointer is tricky though.  `NodeHeader` does not have a `keys`\n             // field because we want its size to not depend on the alignment of `K`\n-            // (needed becuase `as_header` should be safe).  We cannot call `as_leaf`\n+            // (needed because `as_header` should be safe).  We cannot call `as_leaf`\n             // because we might be the shared root.\n             // For this reason, `NodeHeader` has this `K2` parameter (that's usually `()`\n             // and hence just adds a size-0-align-1 field, not affecting layout)."}, {"sha": "0cc8da096f395dec1c2108d1189149761ad119aa", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -985,7 +985,7 @@ fn drain_filter_consumed_panic() {\n         };\n         let drain = data.drain_filter(filter);\n \n-        // NOTE: The DrainFilter is explictly consumed\n+        // NOTE: The DrainFilter is explicitly consumed\n         drain.for_each(drop);\n     });\n "}, {"sha": "8892e186d0a3ff4e1982521fa9ffeed67dd67933", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -629,6 +629,8 @@ impl<T> Vec<T> {\n     /// The capacity will remain at least as large as both the length\n     /// and the supplied value.\n     ///\n+    /// # Panics\n+    ///\n     /// Panics if the current capacity is smaller than the supplied\n     /// minimum capacity.\n     ///\n@@ -2837,7 +2839,7 @@ pub struct DrainFilter<'a, T, F>\n     old_len: usize,\n     /// The filter test predicate.\n     pred: F,\n-    /// A flag that indicates a panic has occured in the filter test prodicate.\n+    /// A flag that indicates a panic has occurred in the filter test prodicate.\n     /// This is used as a hint in the drop implmentation to prevent consumption\n     /// of the remainder of the `DrainFilter`. Any unprocessed items will be\n     /// backshifted in the `vec`, but no further items will be dropped or"}, {"sha": "38d248d701d4a96138aec8877b50ead1bd5fd792", "filename": "src/libcore/array/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibcore%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibcore%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray%2Fmod.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,5 +1,5 @@\n //! Implementations of things like `Eq` for fixed-length arrays\n-//! up to a certain length. Eventually we should able to generalize\n+//! up to a certain length. Eventually, we should be able to generalize\n //! to all lengths.\n //!\n //! *[See also the array primitive type](../../std/primitive.array.html).*"}, {"sha": "a295e65bb5511cb7de07e0758ac971ea0404271e", "filename": "src/libcore/hint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -113,7 +113,7 @@ pub fn spin_loop() {\n pub fn black_box<T>(dummy: T) -> T {\n     // We need to \"use\" the argument in some way LLVM can't introspect, and on\n     // targets that support it we can typically leverage inline assembly to do\n-    // this. LLVM's intepretation of inline assembly is that it's, well, a black\n+    // this. LLVM's interpretation of inline assembly is that it's, well, a black\n     // box. This isn't the greatest implementation since it probably deoptimizes\n     // more than we want, but it's so far good enough.\n     unsafe {"}, {"sha": "e3dc5630c94b4e805d0bd63232b3ebfc540d6cc5", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1279,7 +1279,7 @@ extern \"rust-intrinsic\" {\n     /// undefined behavior when `x + y > T::max_value()` or `x + y < T::min_value()`.\n     pub fn unchecked_add<T>(x: T, y: T) -> T;\n \n-    /// Returns the result of an unchecked substraction, resulting in\n+    /// Returns the result of an unchecked subtraction, resulting in\n     /// undefined behavior when `x - y > T::max_value()` or `x - y < T::min_value()`.\n     pub fn unchecked_sub<T>(x: T, y: T) -> T;\n "}, {"sha": "38b3fab6d7535d8fae77d86cc31ba75b30c005c0", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -75,6 +75,12 @@ pub mod consts {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const PI: f32 = 3.14159265358979323846264338327950288_f32;\n \n+    /// The full circle constant (\u03c4)\n+    ///\n+    /// Equal to 2\u03c0.\n+    #[unstable(feature = \"tau_constant\", issue = \"66770\")]\n+    pub const TAU: f32 = 6.28318530717958647692528676655900577_f32;\n+\n     /// \u03c0/2\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_PI_2: f32 = 1.57079632679489661923132169163975144_f32;"}, {"sha": "f093bae9590eab2939bb61e6ada2faf2ad3631a6", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -75,6 +75,12 @@ pub mod consts {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const PI: f64 = 3.14159265358979323846264338327950288_f64;\n \n+    /// The full circle constant (\u03c4)\n+    ///\n+    /// Equal to 2\u03c0.\n+    #[unstable(feature = \"tau_constant\", issue = \"66770\")]\n+    pub const TAU: f64 = 6.28318530717958647692528676655900577_f64;\n+\n     /// \u03c0/2\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_PI_2: f64 = 1.57079632679489661923132169163975144_f64;"}, {"sha": "242eb6750b3dfdb5a0f163ec009ec8d8e54c11f6", "filename": "src/libpanic_unwind/dwarf/eh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibpanic_unwind%2Fdwarf%2Feh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibpanic_unwind%2Fdwarf%2Feh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fdwarf%2Feh.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -130,7 +130,7 @@ pub unsafe fn find_eh_action(lsda: *const u8, context: &EHContext<'_>, foreign_e\n fn interpret_cs_action(cs_action: u64, lpad: usize, foreign_exception: bool) -> EHAction {\n     if cs_action == 0 {\n         // If cs_action is 0 then this is a cleanup (Drop::drop). We run these\n-        // for both Rust panics and foriegn exceptions.\n+        // for both Rust panics and foreign exceptions.\n         EHAction::Cleanup(lpad)\n     } else if foreign_exception {\n         // catch_unwind should not catch foreign exceptions, only Rust panics."}, {"sha": "7fb669314eba603ca46197aa2e2d31edc3f142a4", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -185,7 +185,7 @@ pub fn struct_error<'tcx>(tcx: TyCtxtAt<'tcx>, msg: &str) -> DiagnosticBuilder<'\n }\n \n /// Packages the kind of error we got from the const code interpreter\n-/// up with a Rust-level backtrace of where the error occured.\n+/// up with a Rust-level backtrace of where the error occurred.\n /// Thsese should always be constructed by calling `.into()` on\n /// a `InterpError`. In `librustc_mir::interpret`, we have `throw_err_*`\n /// macros for this."}, {"sha": "c745dd9444cd69640d321e19e10cb5c61d58658f", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -443,7 +443,7 @@ impl<T: Decodable> rustc_serialize::UseSpecializedDecodable for ClearCrossCrate<\n /// Grouped information about the source code origin of a MIR entity.\n /// Intended to be inspected by diagnostics and debuginfo.\n /// Most passes can work with it as a whole, within a single function.\n-// The unoffical Cranelift backend, at least as of #65828, needs `SourceInfo` to implement `Eq` and\n+// The unofficial Cranelift backend, at least as of #65828, needs `SourceInfo` to implement `Eq` and\n // `Hash`. Please ping @bjorn3 if removing them.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, RustcEncodable, RustcDecodable, Hash, HashStable)]\n pub struct SourceInfo {"}, {"sha": "a0d9f52d28ad5eaca6dc146234a84a9a67137a06", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -461,7 +461,7 @@ impl AutoTraitFinder<'tcx> {\n                                     // The old predicate has a region variable where the new\n                                     // predicate has some other kind of region. An region\n                                     // variable isn't something we can actually display to a user,\n-                                    // so we choose ther new predicate (which doesn't have a region\n+                                    // so we choose their new predicate (which doesn't have a region\n                                     // varaible).\n                                     //\n                                     // In both cases, we want to remove the old predicate,\n@@ -703,7 +703,7 @@ impl AutoTraitFinder<'tcx> {\n                     // that we could add to our ParamEnv that would 'fix' this kind\n                     // of error, as it's not caused by an unimplemented type.\n                     //\n-                    // 2. We succesfully project the predicate (Ok(Some(_))), generating\n+                    // 2. We successfully project the predicate (Ok(Some(_))), generating\n                     //  some subobligations. We then process these subobligations\n                     //  like any other generated sub-obligations.\n                     //\n@@ -770,7 +770,7 @@ impl AutoTraitFinder<'tcx> {\n                         Ok(None) => {\n                             // It's ok not to make progress when hvave no inference variables -\n                             // in that case, we were only performing unifcation to check if an\n-                            // error occured (which would indicate that it's impossible for our\n+                            // error occurred (which would indicate that it's impossible for our\n                             // type to implement the auto trait).\n                             // However, we should always make progress (either by generating\n                             // subobligations or getting an error) when we started off with"}, {"sha": "65d08ab03aaaf699bd60872ff6d53a5ec4198609", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -166,7 +166,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         body_id: Option<hir::BodyId>,\n         fallback_has_occurred: bool,\n     ) {\n-        debug!(\"report_fulfillment_errors({:?})\", error);\n+        debug!(\"report_fulfillment_error({:?})\", error);\n         match error.code {\n             FulfillmentErrorCode::CodeSelectionError(ref selection_error) => {\n                 self.report_selection_error("}, {"sha": "3a55aefe85d3d48b072c56112bb0758988ef88f1", "filename": "src/librustc/ty/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fdiagnostics.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -15,7 +15,7 @@ impl<'tcx> TyS<'tcx> {\n         }\n     }\n \n-    /// Whether the type is succinctly representable as a type instead of just refered to with a\n+    /// Whether the type is succinctly representable as a type instead of just referred to with a\n     /// description in error messages. This is used in the main error message.\n     pub fn is_simple_ty(&self) -> bool {\n         match self.kind {\n@@ -28,7 +28,7 @@ impl<'tcx> TyS<'tcx> {\n         }\n     }\n \n-    /// Whether the type is succinctly representable as a type instead of just refered to with a\n+    /// Whether the type is succinctly representable as a type instead of just referred to with a\n     /// description in error messages. This is used in the primary span label. Beyond what\n     /// `is_simple_ty` includes, it also accepts ADTs with no type arguments and references to\n     /// ADTs with no type arguments."}, {"sha": "2a311ea962424f8fba9a971cebedd2a883ad65ce", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -54,7 +54,7 @@ thread_local! {\n }\n \n /// Avoids running any queries during any prints that occur\n-/// during the closure. This may alter the apperance of some\n+/// during the closure. This may alter the appearance of some\n /// types (e.g. forcing verbose printing for opaque types).\n /// This method is used during some queries (e.g. `predicates_of`\n /// for opaque types), to ensure that any debug printing that"}, {"sha": "541b3d9476b3372657588df035fdf14025e00506", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -233,11 +233,13 @@ impl CodegenCx<'ll, 'tcx> {\n                     ref attrs, span, kind: hir::ItemKind::Static(..), ..\n                 }) => {\n                     let sym_str = sym.as_str();\n-                    if self.get_declared_value(&sym_str).is_some() {\n-                        span_bug!(span, \"Conflicting symbol names for static?\");\n+                    if let Some(g) = self.get_declared_value(&sym_str) {\n+                        if self.val_ty(g) != self.type_ptr_to(llty) {\n+                            span_bug!(span, \"Conflicting types for static\");\n+                        }\n                     }\n \n-                    let g = self.define_global(&sym_str, llty).unwrap();\n+                    let g = self.declare_global(&sym_str, llty);\n \n                     if !self.tcx.is_reachable_non_generic(def_id) {\n                         unsafe {"}, {"sha": "70492d499222fe89f547ede56f948f4dfd012369", "filename": "src/librustc_data_structures/stable_hasher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_hasher.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -149,7 +149,7 @@ impl Hasher for StableHasher {\n ///\n ///   That second condition is usually not required for hash functions\n ///   (e.g. `Hash`). In practice this means that `hash_stable` must feed any\n-///   information into the hasher that a `PartialEq` comparision takes into\n+///   information into the hasher that a `PartialEq` comparison takes into\n ///   account. See [#49300](https://github.com/rust-lang/rust/issues/49300)\n ///   for an example where violating this invariant has caused trouble in the\n ///   past."}, {"sha": "021a0219d13e2b60b8e79b49f3fb37132dc6789b", "filename": "src/librustc_error_codes/error_codes/E0015.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0015.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0015.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0015.md?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,4 +1,5 @@\n-A constant item was initialized with something that is not a constant expression.\n+A constant item was initialized with something that is not a constant\n+expression.\n \n Erroneous code example:\n "}, {"sha": "bc2c03a0220826f81558b003a18cbd71a891f04e", "filename": "src/librustc_error_codes/error_codes/E0071.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0071.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0071.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0071.md?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,5 +1,5 @@\n-You tried to use structure-literal syntax to create an item that is\n-not a structure or enum variant.\n+A structure-literal syntax was used to create an item that is not a structure\n+or enum variant.\n \n Example of erroneous code:\n \n@@ -9,8 +9,8 @@ let t = U32 { value: 4 }; // error: expected struct, variant or union type,\n                           // found builtin type `u32`\n ```\n \n-To fix this, ensure that the name was correctly spelled, and that\n-the correct form of initializer was used.\n+To fix this, ensure that the name was correctly spelled, and that the correct\n+form of initializer was used.\n \n For example, the code above can be fixed to:\n "}, {"sha": "8f7749abab1e5be25c01e7632f74b2a9a41f4cfe", "filename": "src/librustc_error_codes/error_codes/E0072.md", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0072.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0072.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0072.md?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,20 +1,23 @@\n-When defining a recursive struct or enum, any use of the type being defined\n-from inside the definition must occur behind a pointer (like `Box` or `&`).\n-This is because structs and enums must have a well-defined size, and without\n-the pointer, the size of the type would need to be unbounded.\n+A recursive type has infinite size because it doesn't have an indirection.\n \n-Consider the following erroneous definition of a type for a list of bytes:\n+Erroneous code example:\n \n ```compile_fail,E0072\n-// error, invalid recursive struct type\n struct ListNode {\n     head: u8,\n-    tail: Option<ListNode>,\n+    tail: Option<ListNode>, // error: no indirection here so impossible to\n+                            //        compute the type's size\n }\n ```\n \n-This type cannot have a well-defined size, because it needs to be arbitrarily\n-large (since we would be able to nest `ListNode`s to any depth). Specifically,\n+When defining a recursive struct or enum, any use of the type being defined\n+from inside the definition must occur behind a pointer (like `Box`, `&` or\n+`Rc`). This is because structs and enums must have a well-defined size, and\n+without the pointer, the size of the type would need to be unbounded.\n+\n+In the example, the type cannot have a well-defined size, because it needs to be\n+arbitrarily large (since we would be able to nest `ListNode`s to any depth).\n+Specifically,\n \n ```plain\n size of `ListNode` = 1 byte for `head`"}, {"sha": "969c1ee71313e8f7f132d33eab18a3e850e81f76", "filename": "src/librustc_error_codes/error_codes/E0075.md", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0075.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0075.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0075.md?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,21 +1,23 @@\n-The `#[simd]` attribute can only be applied to non empty tuple structs, because\n-it doesn't make sense to try to use SIMD operations when there are no values to\n-operate on.\n+A `#[simd]` attribute was applied to an empty tuple struct.\n \n-This will cause an error:\n+Erroneous code example:\n \n ```compile_fail,E0075\n #![feature(repr_simd)]\n \n #[repr(simd)]\n-struct Bad;\n+struct Bad; // error!\n ```\n \n-This will not:\n+The `#[simd]` attribute can only be applied to non empty tuple structs, because\n+it doesn't make sense to try to use SIMD operations when there are no values to\n+operate on.\n+\n+Fixed example:\n \n ```\n #![feature(repr_simd)]\n \n #[repr(simd)]\n-struct Good(u32);\n+struct Good(u32); // ok!\n ```"}, {"sha": "f293a2a5772db90a5c62caac983445ee1750bd78", "filename": "src/librustc_error_codes/error_codes/E0076.md", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0076.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0076.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0076.md?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,21 +1,24 @@\n-When using the `#[simd]` attribute to automatically use SIMD operations in tuple\n-struct, the types in the struct must all be of the same type, or the compiler\n-will trigger this error.\n+All types in a tuple struct aren't the same when using the `#[simd]`\n+attribute.\n \n-This will cause an error:\n+Erroneous code example:\n \n ```compile_fail,E0076\n #![feature(repr_simd)]\n \n #[repr(simd)]\n-struct Bad(u16, u32, u32);\n+struct Bad(u16, u32, u32); // error!\n ```\n \n-This will not:\n+When using the `#[simd]` attribute to automatically use SIMD operations in tuple\n+struct, the types in the struct must all be of the same type, or the compiler\n+will trigger this error.\n+\n+Fixed example:\n \n ```\n #![feature(repr_simd)]\n \n #[repr(simd)]\n-struct Good(u32, u32, u32);\n+struct Good(u32, u32, u32); // ok!\n ```"}, {"sha": "b14513c6ccf1fea776b7ce66fbbea2d92d269c8d", "filename": "src/librustc_error_codes/error_codes/E0077.md", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0077.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0077.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0077.md?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,20 +1,23 @@\n-When using the `#[simd]` attribute on a tuple struct, the elements in the tuple\n-must be machine types so SIMD operations can be applied to them.\n+A tuple struct's element isn't a machine type when using the `#[simd]`\n+attribute.\n \n-This will cause an error:\n+Erroneous code example:\n \n ```compile_fail,E0077\n #![feature(repr_simd)]\n \n #[repr(simd)]\n-struct Bad(String);\n+struct Bad(String); // error!\n ```\n \n-This will not:\n+When using the `#[simd]` attribute on a tuple struct, the elements in the tuple\n+must be machine types so SIMD operations can be applied to them.\n+\n+Fixed example:\n \n ```\n #![feature(repr_simd)]\n \n #[repr(simd)]\n-struct Good(u32, u32, u32);\n+struct Good(u32, u32, u32); // ok!\n ```"}, {"sha": "bfe0d21f3129b227862af561c5f66dd025638c7b", "filename": "src/librustc_error_codes/error_codes/E0107.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0107.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0107.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0107.md?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -25,4 +25,3 @@ fn main() {\n                     //        expected 0, found 1\n }\n ```\n-"}, {"sha": "1779e5dbb30e7dbbb68534a442f94399f2db79a1", "filename": "src/librustc_error_codes/error_codes/E0307.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0307.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0307.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0307.md?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,5 +1,5 @@\n This error indicates that the `self` parameter in a method has an invalid\n-\"reciever type\".\n+\"receiver type\".\n \n Methods take a special first parameter, of which there are three variants:\n `self`, `&self`, and `&mut self`. These are syntactic sugar for"}, {"sha": "397979e564105f51da7f12e5cde05e805ab6c0a9", "filename": "src/librustc_error_codes/error_codes/E0369.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0369.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0369.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0369.md?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -26,4 +26,3 @@ left and may require reallocation. This requires ownership of the string\n on the left. If something should be added to a string literal, move the\n literal to the heap by allocating it with `to_owned()` like in\n `\"Your text\".to_owned()`.\n-"}, {"sha": "201107c05a02c32642db633cf4f107bdc29aab3a", "filename": "src/librustc_error_codes/error_codes/E0404.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0404.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0404.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0404.md?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -41,4 +41,3 @@ trait Foo {\n \n fn bar<T: Foo>(t: T) {} // ok!\n ```\n-"}, {"sha": "385079d403d59be277a285625120c7442b77ce0a", "filename": "src/librustc_error_codes/error_codes/E0458.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0458.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0458.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0458.md?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -10,4 +10,3 @@ Please specify a valid \"kind\" value, from one of the following:\n * static\n * dylib\n * framework\n-"}, {"sha": "65cdf90036adeb044aaf7486539dbad5136e86f7", "filename": "src/librustc_error_codes/error_codes/E0633.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0633.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0633.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0633.md?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -21,4 +21,3 @@ The `#[unwind]` attribute should be used as follows:\n \n NB. The default behavior here is \"allowed\", but this is unspecified\n and likely to change in the future.\n-"}, {"sha": "a39d2be4f8f86bc61bf797d87a5d3f7ae673b1f6", "filename": "src/librustc_error_codes/error_codes/E0635.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0635.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0635.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0635.md?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -5,4 +5,3 @@ Erroneous code example:\n ```compile_fail,E0635\n #![feature(nonexistent_rust_feature)] // error: unknown feature\n ```\n-"}, {"sha": "57cf72db5568928dd43d4f5b5cc6e149dfd0c495", "filename": "src/librustc_error_codes/error_codes/E0636.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0636.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0636.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0636.md?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -7,4 +7,3 @@ Erroneous code example:\n #![feature(rust1)]\n #![feature(rust1)] // error: the feature `rust1` has already been declared\n ```\n-"}, {"sha": "e2110042c7e8dd99288aafd36c06643379e03d0f", "filename": "src/librustc_error_codes/error_codes/E0641.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0641.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0641.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0641.md?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -16,4 +16,4 @@ let a = &(String::from(\"Hello world!\")) as *const _; // Ok\n let b = 0 as *const i32; // Ok\n \n let c: *const i32 = 0 as *const _; // Ok\n-```\n\\ No newline at end of file\n+```"}, {"sha": "7a653bd2264fd4eb07145aa27ad8cb018fb123f2", "filename": "src/librustc_error_codes/error_codes/E0644.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0644.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0644.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0644.md?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -27,4 +27,3 @@ closure call itself by capturing a `&Fn()` object or `fn()` pointer\n that refers to itself. That is permitting, since the closure would be\n invoking itself via a virtual call, and hence does not directly\n reference its own *type*.\n-"}, {"sha": "d379b8a2384c675ece632d056a724438c3a5dc47", "filename": "src/librustc_error_codes/error_codes/E0706.md", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0706.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0706.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0706.md?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,4 +1,4 @@\n- `async fn`s are not yet supported in traits in Rust.\n+`async fn`s are not yet supported in traits in Rust.\n \n Erroneous code example:\n \n@@ -10,7 +10,8 @@ trait T {\n }\n ```\n \n-`async fn`s return an `impl Future`, making the following two examples equivalent:\n+`async fn`s return an `impl Future`, making the following two examples\n+equivalent:\n \n ```edition2018,ignore (example-of-desugaring-equivalence)\n async fn foo() -> User {\n@@ -23,8 +24,8 @@ fn foo(&self) -> impl Future<Output = User> + '_ {\n ```\n \n But when it comes to supporting this in traits, there are [a few implementation\n-issues][async-is-hard]. One of them is returning `impl Trait` in traits is not supported,\n-as it would require [Generic Associated Types] to be supported:\n+issues][async-is-hard]. One of them is returning `impl Trait` in traits is not\n+supported, as it would require [Generic Associated Types] to be supported:\n \n ```edition2018,ignore (example-of-desugaring-equivalence)\n impl MyDatabase {\n@@ -40,13 +41,14 @@ impl MyDatabase {\n }\n ```\n \n-Until these issues are resolved, you can use the [`async-trait` crate], allowing you to use\n-`async fn` in traits by desugaring to \"boxed futures\"\n+Until these issues are resolved, you can use the [`async-trait` crate], allowing\n+you to use `async fn` in traits by desugaring to \"boxed futures\"\n (`Pin<Box<dyn Future + Send + 'async>>`).\n \n-Note that using these trait methods will result in a heap allocation per-function-call. This is not\n-a significant cost for the vast majority of applications, but should be considered when deciding\n-whether to use this functionality in the public API of a low-level function that is expected to be\n+Note that using these trait methods will result in a heap allocation\n+per-function-call. This is not a significant cost for the vast majority of\n+applications, but should be considered when deciding whether to use this\n+functionality in the public API of a low-level function that is expected to be\n called millions of times a second.\n \n You might be interested in visiting the [async book] for further information."}, {"sha": "39bebdcd3750e1f324c8e822a7c8290cda61a72a", "filename": "src/librustc_error_codes/error_codes/E0745.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0745.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0745.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0745.md?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -11,7 +11,7 @@ fn temp_address() {\n \n To avoid the error, first bind the temporary to a named local variable.\n \n-```ignore\n+```ignore (not yet implemented)\n # #![feature(raw_ref_op)]\n fn temp_address() {\n     let val = 2;"}, {"sha": "34241b845be04882c8c9e1415831a4299eac3702", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -591,6 +591,23 @@ fn is_repr_nullable_ptr<'tcx>(\n }\n \n impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n+\n+    /// Check if the type is array and emit an unsafe type lint.\n+    fn check_for_array_ty(&mut self, sp: Span, ty: Ty<'tcx>) -> bool {\n+        if let ty::Array(..) = ty.kind {\n+            self.emit_ffi_unsafe_type_lint(\n+                ty,\n+                sp,\n+                \"passing raw arrays by value is not FFI-safe\",\n+                Some(\"consider passing a pointer to the array\"),\n+            );\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+\n+\n     /// Checks if the given type is \"ffi-safe\" (has a stable, well-defined\n     /// representation which can be exported to C code).\n     fn check_type_for_ffi(&self,\n@@ -825,7 +842,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             ty::RawPtr(ty::TypeAndMut { ty, .. }) |\n             ty::Ref(_, ty, _) => self.check_type_for_ffi(cache, ty),\n \n-            ty::Array(ty, _) => self.check_type_for_ffi(cache, ty),\n+            ty::Array(inner_ty, _) => self.check_type_for_ffi(cache, inner_ty),\n \n             ty::FnPtr(sig) => {\n                 match sig.abi() {\n@@ -937,7 +954,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn check_type_for_ffi_and_report_errors(&mut self, sp: Span, ty: Ty<'tcx>) {\n+    fn check_type_for_ffi_and_report_errors(&mut self, sp: Span, ty: Ty<'tcx>, is_static: bool) {\n         // We have to check for opaque types before `normalize_erasing_regions`,\n         // which will replace opaque types with their underlying concrete type.\n         if self.check_for_opaque_ty(sp, ty) {\n@@ -948,6 +965,13 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         // it is only OK to use this function because extern fns cannot have\n         // any generic types right now:\n         let ty = self.cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);\n+        // C doesn't really support passing arrays by value.\n+        // The only way to pass an array by value is through a struct.\n+        // So we first test that the top level isn't an array,\n+        // and then recursively check the types inside.\n+        if !is_static && self.check_for_array_ty(sp, ty) {\n+            return;\n+        }\n \n         match self.check_type_for_ffi(&mut FxHashSet::default(), ty) {\n             FfiResult::FfiSafe => {}\n@@ -966,21 +990,21 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         let sig = self.cx.tcx.erase_late_bound_regions(&sig);\n \n         for (input_ty, input_hir) in sig.inputs().iter().zip(&decl.inputs) {\n-            self.check_type_for_ffi_and_report_errors(input_hir.span, input_ty);\n+            self.check_type_for_ffi_and_report_errors(input_hir.span, input_ty, false);\n         }\n \n         if let hir::Return(ref ret_hir) = decl.output {\n             let ret_ty = sig.output();\n             if !ret_ty.is_unit() {\n-                self.check_type_for_ffi_and_report_errors(ret_hir.span, ret_ty);\n+                self.check_type_for_ffi_and_report_errors(ret_hir.span, ret_ty, false);\n             }\n         }\n     }\n \n     fn check_foreign_static(&mut self, id: hir::HirId, span: Span) {\n         let def_id = self.cx.tcx.hir().local_def_id(id);\n         let ty = self.cx.tcx.type_of(def_id);\n-        self.check_type_for_ffi_and_report_errors(span, ty);\n+        self.check_type_for_ffi_and_report_errors(span, ty, true);\n     }\n }\n "}, {"sha": "e6ccbf5c38bf3839cd1a07273b787929164d3885", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,9 +1,9 @@\n // Decoding metadata from a single crate's metadata\n \n use crate::rmeta::*;\n-use crate::rmeta::table::{FixedSizeEncoding, PerDefTable};\n+use crate::rmeta::table::{FixedSizeEncoding, Table};\n \n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::{Idx, IndexVec};\n use rustc_data_structures::sync::{Lrc, Lock, Once, AtomicCell};\n use rustc::hir::map::{DefKey, DefPath, DefPathData, DefPathHash};\n use rustc::hir::map::definitions::DefPathTable;\n@@ -32,7 +32,7 @@ use std::mem;\n use std::num::NonZeroUsize;\n use std::u32;\n \n-use rustc_serialize::{Decodable, Decoder, Encodable, SpecializedDecoder, opaque};\n+use rustc_serialize::{Decodable, Decoder, SpecializedDecoder, opaque};\n use syntax::attr;\n use syntax::ast::{self, Ident};\n use syntax::source_map::{self, respan, Spanned};\n@@ -217,15 +217,15 @@ impl<'a, 'tcx> Metadata<'a, 'tcx> for (&'a CrateMetadata, TyCtxt<'tcx>) {\n     }\n }\n \n-impl<'a, 'tcx, T: Encodable + Decodable> Lazy<T> {\n+impl<'a, 'tcx, T: Decodable> Lazy<T> {\n     fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {\n         let mut dcx = metadata.decoder(self.position.get());\n         dcx.lazy_state = LazyState::NodeStart(self.position);\n         T::decode(&mut dcx).unwrap()\n     }\n }\n \n-impl<'a: 'x, 'tcx: 'x, 'x, T: Encodable + Decodable> Lazy<[T]> {\n+impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable> Lazy<[T]> {\n     fn decode<M: Metadata<'a, 'tcx>>(\n         self,\n         metadata: M,\n@@ -324,13 +324,13 @@ impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx, T: Encodable> SpecializedDecoder<Lazy<T>> for DecodeContext<'a, 'tcx> {\n+impl<'a, 'tcx, T> SpecializedDecoder<Lazy<T>> for DecodeContext<'a, 'tcx> {\n     fn specialized_decode(&mut self) -> Result<Lazy<T>, Self::Error> {\n         self.read_lazy_with_meta(())\n     }\n }\n \n-impl<'a, 'tcx, T: Encodable> SpecializedDecoder<Lazy<[T]>> for DecodeContext<'a, 'tcx> {\n+impl<'a, 'tcx, T> SpecializedDecoder<Lazy<[T]>> for DecodeContext<'a, 'tcx> {\n     fn specialized_decode(&mut self) -> Result<Lazy<[T]>, Self::Error> {\n         let len = self.read_usize()?;\n         if len == 0 {\n@@ -341,10 +341,10 @@ impl<'a, 'tcx, T: Encodable> SpecializedDecoder<Lazy<[T]>> for DecodeContext<'a,\n     }\n }\n \n-impl<'a, 'tcx, T> SpecializedDecoder<Lazy<PerDefTable<T>>> for DecodeContext<'a, 'tcx>\n+impl<'a, 'tcx, I: Idx, T> SpecializedDecoder<Lazy<Table<I, T>>> for DecodeContext<'a, 'tcx>\n     where Option<T>: FixedSizeEncoding,\n {\n-    fn specialized_decode(&mut self) -> Result<Lazy<PerDefTable<T>>, Self::Error> {\n+    fn specialized_decode(&mut self) -> Result<Lazy<Table<I, T>>, Self::Error> {\n         let len = self.read_usize()?;\n         self.read_lazy_with_meta(len)\n     }"}, {"sha": "8074bde61237d546853fb24f021b4dccee115d5e", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 11, "deletions": 56, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,5 +1,5 @@\n use crate::rmeta::*;\n-use crate::rmeta::table::{FixedSizeEncoding, PerDefTable};\n+use crate::rmeta::table::FixedSizeEncoding;\n \n use rustc::middle::cstore::{LinkagePreference, NativeLibrary,\n                             EncodedMetadata, ForeignModule};\n@@ -8,7 +8,7 @@ use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefIndex, DefId, LocalDefId,\n use rustc::hir::{GenericParamKind, AnonConst};\n use rustc::hir::map::definitions::DefPathTable;\n use rustc_data_structures::fingerprint::Fingerprint;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::Idx;\n use rustc::middle::dependency_format::Linkage;\n use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel,\n                                       metadata_symbol_name};\n@@ -47,7 +47,7 @@ struct EncodeContext<'tcx> {\n     opaque: opaque::Encoder,\n     tcx: TyCtxt<'tcx>,\n \n-    per_def: PerDefTables<'tcx>,\n+    per_def: PerDefTableBuilders<'tcx>,\n \n     lazy_state: LazyState,\n     type_shorthands: FxHashMap<Ty<'tcx>, usize>,\n@@ -60,30 +60,6 @@ struct EncodeContext<'tcx> {\n     source_file_cache: Lrc<SourceFile>,\n }\n \n-#[derive(Default)]\n-struct PerDefTables<'tcx> {\n-    kind: PerDefTable<Lazy<EntryKind<'tcx>>>,\n-    visibility: PerDefTable<Lazy<ty::Visibility>>,\n-    span: PerDefTable<Lazy<Span>>,\n-    attributes: PerDefTable<Lazy<[ast::Attribute]>>,\n-    children: PerDefTable<Lazy<[DefIndex]>>,\n-    stability: PerDefTable<Lazy<attr::Stability>>,\n-    deprecation: PerDefTable<Lazy<attr::Deprecation>>,\n-\n-    ty: PerDefTable<Lazy<Ty<'tcx>>>,\n-    fn_sig: PerDefTable<Lazy<ty::PolyFnSig<'tcx>>>,\n-    impl_trait_ref: PerDefTable<Lazy<ty::TraitRef<'tcx>>>,\n-    inherent_impls: PerDefTable<Lazy<[DefIndex]>>,\n-    variances: PerDefTable<Lazy<[ty::Variance]>>,\n-    generics: PerDefTable<Lazy<ty::Generics>>,\n-    explicit_predicates: PerDefTable<Lazy<ty::GenericPredicates<'tcx>>>,\n-    inferred_outlives: PerDefTable<Lazy<&'tcx [(ty::Predicate<'tcx>, Span)]>>,\n-    super_predicates: PerDefTable<Lazy<ty::GenericPredicates<'tcx>>>,\n-\n-    mir: PerDefTable<Lazy<mir::Body<'tcx>>>,\n-    promoted_mir: PerDefTable<Lazy<IndexVec<mir::Promoted, mir::Body<'tcx>>>>,\n-}\n-\n macro_rules! encoder_methods {\n     ($($name:ident($ty:ty);)*) => {\n         $(fn $name(&mut self, value: $ty) -> Result<(), Self::Error> {\n@@ -122,13 +98,13 @@ impl<'tcx> Encoder for EncodeContext<'tcx> {\n     }\n }\n \n-impl<'tcx, T: Encodable> SpecializedEncoder<Lazy<T>> for EncodeContext<'tcx> {\n+impl<'tcx, T> SpecializedEncoder<Lazy<T>> for EncodeContext<'tcx> {\n     fn specialized_encode(&mut self, lazy: &Lazy<T>) -> Result<(), Self::Error> {\n         self.emit_lazy_distance(*lazy)\n     }\n }\n \n-impl<'tcx, T: Encodable> SpecializedEncoder<Lazy<[T]>> for EncodeContext<'tcx> {\n+impl<'tcx, T> SpecializedEncoder<Lazy<[T]>> for EncodeContext<'tcx> {\n     fn specialized_encode(&mut self, lazy: &Lazy<[T]>) -> Result<(), Self::Error> {\n         self.emit_usize(lazy.meta)?;\n         if lazy.meta == 0 {\n@@ -138,10 +114,10 @@ impl<'tcx, T: Encodable> SpecializedEncoder<Lazy<[T]>> for EncodeContext<'tcx> {\n     }\n }\n \n-impl<'tcx, T> SpecializedEncoder<Lazy<PerDefTable<T>>> for EncodeContext<'tcx>\n+impl<'tcx, I: Idx, T> SpecializedEncoder<Lazy<Table<I, T>>> for EncodeContext<'tcx>\n     where Option<T>: FixedSizeEncoding,\n {\n-    fn specialized_encode(&mut self, lazy: &Lazy<PerDefTable<T>>) -> Result<(), Self::Error> {\n+    fn specialized_encode(&mut self, lazy: &Lazy<Table<I, T>>) -> Result<(), Self::Error> {\n         self.emit_usize(lazy.meta)?;\n         self.emit_lazy_distance(*lazy)\n     }\n@@ -307,14 +283,14 @@ impl<I, T: Encodable> EncodeContentsForLazy<[T]> for I\n     }\n }\n \n-// Shorthand for `$self.$tables.$table.set($key, $self.lazy($value))`, which would\n+// Shorthand for `$self.$tables.$table.set($def_id.index, $self.lazy($value))`, which would\n // normally need extra variables to avoid errors about multiple mutable borrows.\n macro_rules! record {\n-    ($self:ident.$tables:ident.$table:ident[$key:expr] <- $value:expr) => {{\n+    ($self:ident.$tables:ident.$table:ident[$def_id:expr] <- $value:expr) => {{\n         {\n             let value = $value;\n             let lazy = $self.lazy(value);\n-            $self.$tables.$table.set($key, lazy);\n+            $self.$tables.$table.set($def_id.index, lazy);\n         }\n     }}\n }\n@@ -509,28 +485,7 @@ impl<'tcx> EncodeContext<'tcx> {\n \n \n         i = self.position();\n-        let per_def = LazyPerDefTables {\n-            kind: self.per_def.kind.encode(&mut self.opaque),\n-            visibility: self.per_def.visibility.encode(&mut self.opaque),\n-            span: self.per_def.span.encode(&mut self.opaque),\n-            attributes: self.per_def.attributes.encode(&mut self.opaque),\n-            children: self.per_def.children.encode(&mut self.opaque),\n-            stability: self.per_def.stability.encode(&mut self.opaque),\n-            deprecation: self.per_def.deprecation.encode(&mut self.opaque),\n-\n-            ty: self.per_def.ty.encode(&mut self.opaque),\n-            fn_sig: self.per_def.fn_sig.encode(&mut self.opaque),\n-            impl_trait_ref: self.per_def.impl_trait_ref.encode(&mut self.opaque),\n-            inherent_impls: self.per_def.inherent_impls.encode(&mut self.opaque),\n-            variances: self.per_def.variances.encode(&mut self.opaque),\n-            generics: self.per_def.generics.encode(&mut self.opaque),\n-            explicit_predicates: self.per_def.explicit_predicates.encode(&mut self.opaque),\n-            inferred_outlives: self.per_def.inferred_outlives.encode(&mut self.opaque),\n-            super_predicates: self.per_def.super_predicates.encode(&mut self.opaque),\n-\n-            mir: self.per_def.mir.encode(&mut self.opaque),\n-            promoted_mir: self.per_def.promoted_mir.encode(&mut self.opaque),\n-        };\n+        let per_def = self.per_def.encode(&mut self.opaque);\n         let per_def_bytes = self.position() - i;\n \n         // Encode the proc macro data"}, {"sha": "1bca2836a3a07c22cd7eb7be5ff5caf5f6a25cc2", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 49, "deletions": 28, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,5 +1,5 @@\n use decoder::Metadata;\n-use table::PerDefTable;\n+use table::{Table, TableBuilder};\n \n use rustc::hir;\n use rustc::hir::def::{self, CtorKind};\n@@ -15,7 +15,7 @@ use rustc_target::spec::{PanicStrategy, TargetTriple};\n use rustc_index::vec::IndexVec;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n-use rustc_serialize::Encodable;\n+use rustc_serialize::opaque::Encoder;\n use syntax::{ast, attr};\n use syntax::edition::Edition;\n use syntax::symbol::Symbol;\n@@ -59,7 +59,7 @@ trait LazyMeta {\n     fn min_size(meta: Self::Meta) -> usize;\n }\n \n-impl<T: Encodable> LazyMeta for T {\n+impl<T> LazyMeta for T {\n     type Meta = ();\n \n     fn min_size(_: ()) -> usize {\n@@ -68,7 +68,7 @@ impl<T: Encodable> LazyMeta for T {\n     }\n }\n \n-impl<T: Encodable> LazyMeta for [T] {\n+impl<T> LazyMeta for [T] {\n     type Meta = usize;\n \n     fn min_size(len: usize) -> usize {\n@@ -124,13 +124,13 @@ impl<T: ?Sized + LazyMeta> Lazy<T> {\n     }\n }\n \n-impl<T: Encodable> Lazy<T> {\n+impl<T> Lazy<T> {\n     fn from_position(position: NonZeroUsize) -> Lazy<T> {\n         Lazy::from_position_and_meta(position, ())\n     }\n }\n \n-impl<T: Encodable> Lazy<[T]> {\n+impl<T> Lazy<[T]> {\n     fn empty() -> Lazy<[T]> {\n         Lazy::from_position_and_meta(NonZeroUsize::new(1).unwrap(), 0)\n     }\n@@ -166,8 +166,7 @@ enum LazyState {\n // manually, instead of relying on the default, to get the correct variance.\n // Only needed when `T` itself contains a parameter (e.g. `'tcx`).\n macro_rules! Lazy {\n-    (Table<$T:ty>) => {Lazy<Table<$T>, usize>};\n-    (PerDefTable<$T:ty>) => {Lazy<PerDefTable<$T>, usize>};\n+    (Table<$I:ty, $T:ty>) => {Lazy<Table<$I, $T>, usize>};\n     ([$T:ty]) => {Lazy<[$T], usize>};\n     ($T:ty) => {Lazy<$T, ()>};\n }\n@@ -232,31 +231,53 @@ crate struct TraitImpls {\n     impls: Lazy<[DefIndex]>,\n }\n \n-#[derive(RustcEncodable, RustcDecodable)]\n-crate struct LazyPerDefTables<'tcx> {\n-    kind: Lazy!(PerDefTable<Lazy!(EntryKind<'tcx>)>),\n-    visibility: Lazy!(PerDefTable<Lazy<ty::Visibility>>),\n-    span: Lazy!(PerDefTable<Lazy<Span>>),\n-    attributes: Lazy!(PerDefTable<Lazy<[ast::Attribute]>>),\n-    children: Lazy!(PerDefTable<Lazy<[DefIndex]>>),\n-    stability: Lazy!(PerDefTable<Lazy<attr::Stability>>),\n-    deprecation: Lazy!(PerDefTable<Lazy<attr::Deprecation>>),\n-    ty: Lazy!(PerDefTable<Lazy!(Ty<'tcx>)>),\n-    fn_sig: Lazy!(PerDefTable<Lazy!(ty::PolyFnSig<'tcx>)>),\n-    impl_trait_ref: Lazy!(PerDefTable<Lazy!(ty::TraitRef<'tcx>)>),\n-    inherent_impls: Lazy!(PerDefTable<Lazy<[DefIndex]>>),\n-    variances: Lazy!(PerDefTable<Lazy<[ty::Variance]>>),\n-    generics: Lazy!(PerDefTable<Lazy<ty::Generics>>),\n-    explicit_predicates: Lazy!(PerDefTable<Lazy!(ty::GenericPredicates<'tcx>)>),\n+/// Define `LazyPerDefTables` and `PerDefTableBuilders` at the same time.\n+macro_rules! define_per_def_tables {\n+    ($($name:ident: Table<DefIndex, $T:ty>),+ $(,)?) => {\n+        #[derive(RustcEncodable, RustcDecodable)]\n+        crate struct LazyPerDefTables<'tcx> {\n+            $($name: Lazy!(Table<DefIndex, $T>)),+\n+        }\n+\n+        #[derive(Default)]\n+        struct PerDefTableBuilders<'tcx> {\n+            $($name: TableBuilder<DefIndex, $T>),+\n+        }\n+\n+        impl PerDefTableBuilders<'tcx> {\n+            fn encode(&self, buf: &mut Encoder) -> LazyPerDefTables<'tcx> {\n+                LazyPerDefTables {\n+                    $($name: self.$name.encode(buf)),+\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+define_per_def_tables! {\n+    kind: Table<DefIndex, Lazy!(EntryKind<'tcx>)>,\n+    visibility: Table<DefIndex, Lazy<ty::Visibility>>,\n+    span: Table<DefIndex, Lazy<Span>>,\n+    attributes: Table<DefIndex, Lazy<[ast::Attribute]>>,\n+    children: Table<DefIndex, Lazy<[DefIndex]>>,\n+    stability: Table<DefIndex, Lazy<attr::Stability>>,\n+    deprecation: Table<DefIndex, Lazy<attr::Deprecation>>,\n+    ty: Table<DefIndex, Lazy!(Ty<'tcx>)>,\n+    fn_sig: Table<DefIndex, Lazy!(ty::PolyFnSig<'tcx>)>,\n+    impl_trait_ref: Table<DefIndex, Lazy!(ty::TraitRef<'tcx>)>,\n+    inherent_impls: Table<DefIndex, Lazy<[DefIndex]>>,\n+    variances: Table<DefIndex, Lazy<[ty::Variance]>>,\n+    generics: Table<DefIndex, Lazy<ty::Generics>>,\n+    explicit_predicates: Table<DefIndex, Lazy!(ty::GenericPredicates<'tcx>)>,\n     // FIXME(eddyb) this would ideally be `Lazy<[...]>` but `ty::Predicate`\n     // doesn't handle shorthands in its own (de)serialization impls,\n     // as it's an `enum` for which we want to derive (de)serialization,\n     // so the `ty::codec` APIs handle the whole `&'tcx [...]` at once.\n     // Also, as an optimization, a missing entry indicates an empty `&[]`.\n-    inferred_outlives: Lazy!(PerDefTable<Lazy!(&'tcx [(ty::Predicate<'tcx>, Span)])>),\n-    super_predicates: Lazy!(PerDefTable<Lazy!(ty::GenericPredicates<'tcx>)>),\n-    mir: Lazy!(PerDefTable<Lazy!(mir::Body<'tcx>)>),\n-    promoted_mir: Lazy!(PerDefTable<Lazy!(IndexVec<mir::Promoted, mir::Body<'tcx>>)>),\n+    inferred_outlives: Table<DefIndex, Lazy!(&'tcx [(ty::Predicate<'tcx>, Span)])>,\n+    super_predicates: Table<DefIndex, Lazy!(ty::GenericPredicates<'tcx>)>,\n+    mir: Table<DefIndex, Lazy!(mir::Body<'tcx>)>,\n+    promoted_mir: Table<DefIndex, Lazy!(IndexVec<mir::Promoted, mir::Body<'tcx>>)>,\n }\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable)]"}, {"sha": "10122fbba1fd47f79f5b7ac56cc28d910c9603cb", "filename": "src/librustc_metadata/rmeta/table.rs", "status": "modified", "additions": 29, "deletions": 67, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_metadata%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_metadata%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Ftable.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,6 +1,6 @@\n use crate::rmeta::*;\n \n-use rustc::hir::def_id::{DefId, DefIndex};\n+use rustc_index::vec::Idx;\n use rustc_serialize::{Encodable, opaque::Encoder};\n use std::convert::TryInto;\n use std::marker::PhantomData;\n@@ -117,37 +117,46 @@ impl<T: Encodable> FixedSizeEncoding for Option<Lazy<[T]>> {\n     }\n }\n \n-/// Random-access table (i.e. offeringconstant-time `get`/`set`), similar to\n+/// Random-access table (i.e. offering constant-time `get`/`set`), similar to\n /// `Vec<Option<T>>`, but without requiring encoding or decoding all the values\n /// eagerly and in-order.\n /// A total of `(max_idx + 1) * <Option<T> as FixedSizeEncoding>::BYTE_LEN` bytes\n-/// are used for a table, where `max_idx` is the largest index passed to `set`.\n-// FIXME(eddyb) replace `Vec` with `[_]` here, such that `Box<Table<T>>` would be used\n-// when building it, and `Lazy<Table<T>>` or `&Table<T>` when reading it.\n-// (not sure if that is possible given that the `Vec` is being resized now)\n-pub(super) struct Table<T> where Option<T>: FixedSizeEncoding {\n-    // FIXME(eddyb) store `[u8; <Option<T>>::BYTE_LEN]` instead of `u8` in `Vec`,\n-    // once that starts being allowed by the compiler (i.e. lazy normalization).\n+/// are used for a table, where `max_idx` is the largest index passed to\n+/// `TableBuilder::set`.\n+pub(super) struct Table<I: Idx, T> where Option<T>: FixedSizeEncoding {\n+    _marker: PhantomData<(fn(&I), T)>,\n+    // NOTE(eddyb) this makes `Table` not implement `Sized`, but no\n+    // value of `Table` is ever created (it's always behind `Lazy`).\n+    _bytes: [u8],\n+}\n+\n+/// Helper for constructing a table's serialization (also see `Table`).\n+pub(super) struct TableBuilder<I: Idx, T> where Option<T>: FixedSizeEncoding {\n+    // FIXME(eddyb) use `IndexVec<I, [u8; <Option<T>>::BYTE_LEN]>` instead of\n+    // `Vec<u8>`, once that starts working (i.e. lazy normalization).\n+    // Then again, that has the downside of not allowing `TableBuilder::encode` to\n+    // obtain a `&[u8]` entirely in safe code, for writing the bytes out.\n     bytes: Vec<u8>,\n-    _marker: PhantomData<T>,\n+    _marker: PhantomData<(fn(&I), T)>,\n }\n \n-impl<T> Default for Table<T> where Option<T>: FixedSizeEncoding {\n+impl<I: Idx, T> Default for TableBuilder<I, T> where Option<T>: FixedSizeEncoding {\n     fn default() -> Self {\n-        Table {\n+        TableBuilder {\n             bytes: vec![],\n             _marker: PhantomData,\n         }\n     }\n }\n \n-impl<T> Table<T> where Option<T>: FixedSizeEncoding {\n-    fn set(&mut self, i: usize, value: T) {\n+impl<I: Idx, T> TableBuilder<I, T> where Option<T>: FixedSizeEncoding {\n+    pub(super) fn set(&mut self, i: I, value: T) {\n         // FIXME(eddyb) investigate more compact encodings for sparse tables.\n         // On the PR @michaelwoerister mentioned:\n         // > Space requirements could perhaps be optimized by using the HAMT `popcnt`\n         // > trick (i.e. divide things into buckets of 32 or 64 items and then\n         // > store bit-masks of which item in each bucket is actually serialized).\n+        let i = i.index();\n         let needed = (i + 1) * <Option<T>>::BYTE_LEN;\n         if self.bytes.len() < needed {\n             self.bytes.resize(needed, 0);\n@@ -156,7 +165,7 @@ impl<T> Table<T> where Option<T>: FixedSizeEncoding {\n         Some(value).write_to_bytes_at(&mut self.bytes, i);\n     }\n \n-    fn encode(&self, buf: &mut Encoder) -> Lazy<Self> {\n+    pub(super) fn encode(&self, buf: &mut Encoder) -> Lazy<Table<I, T>> {\n         let pos = buf.position();\n         buf.emit_raw_bytes(&self.bytes);\n         Lazy::from_position_and_meta(\n@@ -166,73 +175,26 @@ impl<T> Table<T> where Option<T>: FixedSizeEncoding {\n     }\n }\n \n-impl<T> LazyMeta for Table<T> where Option<T>: FixedSizeEncoding {\n+impl<I: Idx, T> LazyMeta for Table<I, T> where Option<T>: FixedSizeEncoding {\n     type Meta = usize;\n \n     fn min_size(len: usize) -> usize {\n         len\n     }\n }\n \n-impl<T> Lazy<Table<T>> where Option<T>: FixedSizeEncoding {\n+impl<I: Idx, T> Lazy<Table<I, T>> where Option<T>: FixedSizeEncoding {\n     /// Given the metadata, extract out the value at a particular index (if any).\n     #[inline(never)]\n-    fn get<'a, 'tcx, M: Metadata<'a, 'tcx>>(\n+    pub(super) fn get<'a, 'tcx, M: Metadata<'a, 'tcx>>(\n         &self,\n         metadata: M,\n-        i: usize,\n+        i: I,\n     ) -> Option<T> {\n         debug!(\"Table::lookup: index={:?} len={:?}\", i, self.meta);\n \n         let start = self.position.get();\n         let bytes = &metadata.raw_bytes()[start..start + self.meta];\n-        <Option<T>>::maybe_read_from_bytes_at(bytes, i)?\n-    }\n-}\n-\n-/// Like a `Table` but using `DefIndex` instead of `usize` as keys.\n-// FIXME(eddyb) replace by making `Table` behave like `IndexVec`,\n-// and by using `newtype_index!` to define `DefIndex`.\n-pub(super) struct PerDefTable<T>(Table<T>) where Option<T>: FixedSizeEncoding;\n-\n-impl<T> Default for PerDefTable<T> where Option<T>: FixedSizeEncoding {\n-    fn default() -> Self {\n-        PerDefTable(Table::default())\n-    }\n-}\n-\n-impl<T> PerDefTable<T> where Option<T>: FixedSizeEncoding {\n-    pub(super) fn set(&mut self, def_id: DefId, value: T) {\n-        assert!(def_id.is_local());\n-        self.0.set(def_id.index.index(), value);\n-    }\n-\n-    pub(super) fn encode(&self, buf: &mut Encoder) -> Lazy<Self> {\n-        let lazy = self.0.encode(buf);\n-        Lazy::from_position_and_meta(lazy.position, lazy.meta)\n-    }\n-}\n-\n-impl<T> LazyMeta for PerDefTable<T> where Option<T>: FixedSizeEncoding {\n-    type Meta = <Table<T> as LazyMeta>::Meta;\n-\n-    fn min_size(meta: Self::Meta) -> usize {\n-        Table::<T>::min_size(meta)\n-    }\n-}\n-\n-impl<T> Lazy<PerDefTable<T>> where Option<T>: FixedSizeEncoding {\n-    fn as_table(&self) -> Lazy<Table<T>> {\n-        Lazy::from_position_and_meta(self.position, self.meta)\n-    }\n-\n-    /// Given the metadata, extract out the value at a particular DefIndex (if any).\n-    #[inline(never)]\n-    pub(super) fn get<'a, 'tcx, M: Metadata<'a, 'tcx>>(\n-        &self,\n-        metadata: M,\n-        def_index: DefIndex,\n-    ) -> Option<T> {\n-        self.as_table().get(metadata, def_index.index())\n+        <Option<T>>::maybe_read_from_bytes_at(bytes, i.index())?\n     }\n }"}, {"sha": "649aeac12de947901258e591e2d3cc045cc3407f", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -951,7 +951,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             self.check_access_for_conflict(location, place_span, sd, rw, flow_state);\n \n         if let (Activation(_, borrow_idx), true) = (kind.1, conflict_error) {\n-            // Suppress this warning when there's an error being emited for the\n+            // Suppress this warning when there's an error being emitted for the\n             // same borrow: fixing the error is likely to fix the warning.\n             self.reservation_warnings.remove(&borrow_idx);\n         }"}, {"sha": "35fb677c053cb99ae7d5955be1144fb8d2b5e739", "filename": "src/librustc_mir/borrow_check/nll/type_check/input_output.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -134,15 +134,27 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         };\n \n         // If the user explicitly annotated the output types, enforce those.\n+        // Note that this only happens for closures.\n         if let Some(user_provided_sig) = user_provided_sig {\n             let user_provided_output_ty = user_provided_sig.output();\n             let user_provided_output_ty =\n                 self.normalize(user_provided_output_ty, Locations::All(output_span));\n-            self.equate_normalized_input_or_output(\n-                user_provided_output_ty,\n+            if let Err(err) = self.eq_opaque_type_and_type(\n                 mir_output_ty,\n-                output_span,\n-            );\n+                user_provided_output_ty,\n+                self.mir_def_id,\n+                Locations::All(output_span),\n+                ConstraintCategory::BoringNoLocation\n+            ) {\n+                span_mirbug!(\n+                    self,\n+                    Location::START,\n+                    \"equate_inputs_and_outputs: `{:?}=={:?}` failed with `{:?}`\",\n+                    mir_output_ty,\n+                    user_provided_output_ty,\n+                    err\n+                );\n+            }\n         }\n     }\n "}, {"sha": "3e71b871801d1d21a79ccf2d705e27a034cc5b36", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -164,7 +164,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         self.hir.tcx().features().exhaustive_patterns &&\n                         !v.uninhabited_from(self.hir.tcx(), substs, adt_def.adt_kind()).is_empty()\n                     }\n-                });\n+                }) && (adt_def.did.is_local() || !adt_def.is_variant_list_non_exhaustive());\n                 if irrefutable {\n                     let place = tcx.mk_place_downcast(match_pair.place, adt_def, variant_index);\n                     candidate.match_pairs.extend(self.field_match_pairs(place, subpatterns));"}, {"sha": "07c5d640a32c54bee9ba38f61018c72a86f5e62e", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -488,7 +488,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Given that we are performing `test` against `test_place`, this job\n     /// sorts out what the status of `candidate` will be after the test. See\n     /// `test_candidates` for the usage of this function. The returned index is\n-    /// the index that this candiate should be placed in the\n+    /// the index that this candidate should be placed in the\n     /// `target_candidates` vec. The candidate may be modified to update its\n     /// `match_pairs`.\n     ///"}, {"sha": "eb9d04f7d8e16f03966cb5e976906042a673669c", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -55,7 +55,7 @@ fn op_to_const<'tcx>(\n     ecx: &CompileTimeEvalContext<'_, 'tcx>,\n     op: OpTy<'tcx>,\n ) -> &'tcx ty::Const<'tcx> {\n-    // We do not have value optmizations for everything.\n+    // We do not have value optimizations for everything.\n     // Only scalars and slices, since they are very common.\n     // Note that further down we turn scalars of undefined bits back to `ByRef`. These can result\n     // from scalar unions that are initialized with one of their zero sized variants. We could"}, {"sha": "b7cde626415a7653f321868b8ce3b807a4dcb109", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -95,7 +95,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     type PointerTag: ::std::fmt::Debug + Copy + Eq + Hash + 'static;\n \n     /// Machines can define extra (non-instance) things that represent values of function pointers.\n-    /// For example, Miri uses this to return a fucntion pointer from `dlsym`\n+    /// For example, Miri uses this to return a function pointer from `dlsym`\n     /// that can later be called to execute the right thing.\n     type ExtraFnVal: ::std::fmt::Debug + Copy;\n "}, {"sha": "2c3aec103a58b4f34b9a9d5c63deac56163221e1", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -185,7 +185,7 @@ impl<'tcx> Visitor<'tcx> for Collector<'_, 'tcx> {\n \n         // Ignore drops, if the temp gets promoted,\n         // then it's constant and thus drop is noop.\n-        // Non-uses are also irrelevent.\n+        // Non-uses are also irrelevant.\n         if context.is_drop() || !context.is_use() {\n             debug!(\n                 \"visit_local: context.is_drop={:?} context.is_use={:?}\","}, {"sha": "da8bf89ebf33b4724e251e104f467ad0152bc44d", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1515,11 +1515,11 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    /// Replace duplicated recovered parameters with `_` pattern to avoid unecessary errors.\n+    /// Replace duplicated recovered parameters with `_` pattern to avoid unnecessary errors.\n     ///\n     /// This is necessary because at this point we don't know whether we parsed a function with\n     /// anonymous parameters or a function with names but no types. In order to minimize\n-    /// unecessary errors, we assume the parameters are in the shape of `fn foo(a, b, c)` where\n+    /// unnecessary errors, we assume the parameters are in the shape of `fn foo(a, b, c)` where\n     /// the parameters are *names* (so we don't emit errors about not being able to find `b` in\n     /// the local scope), but if we find the same name multiple times, like in `fn foo(i8, i8)`,\n     /// we deduplicate them to not complain about duplicated parameter names."}, {"sha": "a0669a2a1748e135f227ee5f8ee0637d0a2690cb", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 48, "deletions": 69, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -7,7 +7,7 @@ use syntax::ast::{self, DUMMY_NODE_ID, Ident, Attribute, AttrKind, AttrStyle, An\n use syntax::ast::{ItemKind, ImplItem, ImplItemKind, TraitItem, TraitItemKind, UseTree, UseTreeKind};\n use syntax::ast::{PathSegment, IsAuto, Constness, IsAsync, Unsafety, Defaultness, Extern, StrLit};\n use syntax::ast::{Visibility, VisibilityKind, Mutability, FnHeader, ForeignItem, ForeignItemKind};\n-use syntax::ast::{Ty, TyKind, Generics, TraitRef, EnumDef, VariantData, StructField};\n+use syntax::ast::{Ty, TyKind, Generics, TraitRef, EnumDef, Variant, VariantData, StructField};\n use syntax::ast::{Mac, MacDelimiter, Block, BindingMode, FnDecl, FnSig, SelfKind, Param};\n use syntax::print::pprust;\n use syntax::ptr::P;\n@@ -1329,85 +1329,65 @@ impl<'a> Parser<'a> {\n         let id = self.parse_ident()?;\n         let mut generics = self.parse_generics()?;\n         generics.where_clause = self.parse_where_clause()?;\n-        self.expect(&token::OpenDelim(token::Brace))?;\n \n-        let enum_definition = self.parse_enum_def(&generics).map_err(|e| {\n+        let (variants, _) = self.parse_delim_comma_seq(\n+            token::Brace,\n+            |p| p.parse_enum_item(),\n+        ).map_err(|e| {\n             self.recover_stmt();\n-            self.eat(&token::CloseDelim(token::Brace));\n             e\n         })?;\n+\n+        let enum_definition = EnumDef {\n+            variants: variants.into_iter().filter_map(|v| v).collect(),\n+        };\n         Ok((id, ItemKind::Enum(enum_definition, generics), None))\n     }\n \n-    /// Parses the part of an enum declaration following the `{`.\n-    fn parse_enum_def(&mut self, _generics: &Generics) -> PResult<'a, EnumDef> {\n-        let mut variants = Vec::new();\n-        // FIXME: Consider using `parse_delim_comma_seq`.\n-        // We could then remove eating comma in `recover_nested_adt_item`.\n-        while self.token != token::CloseDelim(token::Brace) {\n-            let variant_attrs = self.parse_outer_attributes()?;\n-            let vlo = self.token.span;\n-\n-            let vis = self.parse_visibility(FollowedByType::No)?;\n-            if !self.recover_nested_adt_item(kw::Enum)? {\n-                // Item already parsed, we need to skip this variant.\n-                continue\n-            }\n-            let ident = self.parse_ident()?;\n+    fn parse_enum_item(&mut self) -> PResult<'a, Option<Variant>> {\n+        let variant_attrs = self.parse_outer_attributes()?;\n+        let vlo = self.token.span;\n \n-            let struct_def = if self.check(&token::OpenDelim(token::Brace)) {\n-                // Parse a struct variant.\n-                let (fields, recovered) = self.parse_record_struct_body()?;\n-                VariantData::Struct(fields, recovered)\n-            } else if self.check(&token::OpenDelim(token::Paren)) {\n-                VariantData::Tuple(\n-                    self.parse_tuple_struct_body()?,\n-                    DUMMY_NODE_ID,\n-                )\n-            } else {\n-                VariantData::Unit(DUMMY_NODE_ID)\n-            };\n+        let vis = self.parse_visibility(FollowedByType::No)?;\n+        if !self.recover_nested_adt_item(kw::Enum)? {\n+            return Ok(None)\n+        }\n+        let ident = self.parse_ident()?;\n \n-            let disr_expr = if self.eat(&token::Eq) {\n-                Some(AnonConst {\n-                    id: DUMMY_NODE_ID,\n-                    value: self.parse_expr()?,\n-                })\n-            } else {\n-                None\n-            };\n+        let struct_def = if self.check(&token::OpenDelim(token::Brace)) {\n+            // Parse a struct variant.\n+            let (fields, recovered) = self.parse_record_struct_body()?;\n+            VariantData::Struct(fields, recovered)\n+        } else if self.check(&token::OpenDelim(token::Paren)) {\n+            VariantData::Tuple(\n+                self.parse_tuple_struct_body()?,\n+                DUMMY_NODE_ID,\n+            )\n+        } else {\n+            VariantData::Unit(DUMMY_NODE_ID)\n+        };\n \n-            let vr = ast::Variant {\n-                ident,\n-                vis,\n+        let disr_expr = if self.eat(&token::Eq) {\n+            Some(AnonConst {\n                 id: DUMMY_NODE_ID,\n-                attrs: variant_attrs,\n-                data: struct_def,\n-                disr_expr,\n-                span: vlo.to(self.prev_span),\n-                is_placeholder: false,\n-            };\n-            variants.push(vr);\n+                value: self.parse_expr()?,\n+            })\n+        } else {\n+            None\n+        };\n \n-            if !self.eat(&token::Comma) {\n-                if self.token.is_ident() && !self.token.is_reserved_ident() {\n-                    let sp = self.sess.source_map().next_point(self.prev_span);\n-                    self.struct_span_err(sp, \"missing comma\")\n-                        .span_suggestion_short(\n-                            sp,\n-                            \"missing comma\",\n-                            \",\".to_owned(),\n-                            Applicability::MaybeIncorrect,\n-                        )\n-                        .emit();\n-                } else {\n-                    break;\n-                }\n-            }\n-        }\n-        self.expect(&token::CloseDelim(token::Brace))?;\n+        let vr = ast::Variant {\n+            ident,\n+            vis,\n+            id: DUMMY_NODE_ID,\n+            attrs: variant_attrs,\n+            data: struct_def,\n+            disr_expr,\n+            span: vlo.to(self.prev_span),\n+            is_placeholder: false,\n+        };\n \n-        Ok(ast::EnumDef { variants })\n+        Ok(Some(vr))\n     }\n \n     /// Parses `struct Foo { ... }`.\n@@ -1764,7 +1744,6 @@ impl<'a> Parser<'a> {\n             let kw_token = self.token.clone();\n             let kw_str = pprust::token_to_string(&kw_token);\n             let item = self.parse_item()?;\n-            self.eat(&token::Comma);\n \n             self.struct_span_err(\n                 kw_token.span,\n@@ -2033,7 +2012,7 @@ impl<'a> Parser<'a> {\n \n         let mut params: Vec<_> = params.into_iter().filter_map(|x| x).collect();\n \n-        // Replace duplicated recovered params with `_` pattern to avoid unecessary errors.\n+        // Replace duplicated recovered params with `_` pattern to avoid unnecessary errors.\n         self.deduplicate_recovered_params_names(&mut params);\n \n         if c_variadic && params.len() <= 1 {"}, {"sha": "ea7673767d07e811e76077eff81625edae754093", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -805,21 +805,39 @@ impl<'a> Parser<'a> {\n                             recovered = true;\n                             break;\n                         }\n-                        Err(mut e) => {\n+                        Err(mut expect_err) => {\n+                            let sp = self.sess.source_map().next_point(self.prev_span);\n+                            let token_str = pprust::token_kind_to_string(t);\n+\n                             // Attempt to keep parsing if it was a similar separator.\n                             if let Some(ref tokens) = t.similar_tokens() {\n                                 if tokens.contains(&self.token.kind) {\n                                     self.bump();\n                                 }\n                             }\n-                            e.emit();\n+\n                             // Attempt to keep parsing if it was an omitted separator.\n                             match f(self) {\n                                 Ok(t) => {\n+                                    // Parsed successfully, therefore most probably the code only\n+                                    // misses a separator.\n+                                    expect_err\n+                                        .span_suggestion_short(\n+                                            sp,\n+                                            &format!(\"missing `{}`\", token_str),\n+                                            token_str,\n+                                            Applicability::MaybeIncorrect,\n+                                        )\n+                                        .emit();\n+\n                                     v.push(t);\n                                     continue;\n                                 },\n                                 Err(mut e) => {\n+                                    // Parsing failed, therefore it must be something more serious\n+                                    // than just a missing separator.\n+                                    expect_err.emit();\n+\n                                     e.cancel();\n                                     break;\n                                 }"}, {"sha": "e4b8b667ad0db6d17492bab0b880e0dcac450a5c", "filename": "src/librustc_target/spec/i686_unknown_uefi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_target%2Fspec%2Fi686_unknown_uefi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_target%2Fspec%2Fi686_unknown_uefi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_uefi.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -32,7 +32,7 @@ pub fn target() -> TargetResult {\n     // Backgound and Problem:\n     //   If we use i686-unknown-windows, the LLVM IA32 MSVC generates compiler intrinsic\n     //   _alldiv, _aulldiv, _allrem, _aullrem, _allmul, which will cause undefined symbol.\n-    //   A real issue is __aulldiv() is refered by __udivdi3() - udivmod_inner!(), from\n+    //   A real issue is __aulldiv() is referred by __udivdi3() - udivmod_inner!(), from\n     //   https://github.com/rust-lang-nursery/compiler-builtins.\n     //   As result, rust-lld generates link error finally.\n     // Root-cause:"}, {"sha": "4331d441aa0d24983f2db1bcff20750c1566eab2", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -434,7 +434,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             segment.ident.name,\n                         ) {\n                             // If this expression had a clone call when suggesting borrowing\n-                            // we want to suggest removing it because it'd now be unecessary.\n+                            // we want to suggest removing it because it'd now be unnecessary.\n                             sugg_sp = arg.span;\n                         }\n                     }"}, {"sha": "4766360c048977dc4145700b409c478cfb0120c3", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -550,7 +550,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             // Here we want to prevent struct constructors from returning unsized types.\n             // There were two cases this happened: fn pointer coercion in stable\n-            // and usual function call in presense of unsized_locals.\n+            // and usual function call in presence of unsized_locals.\n             // Also, as we just want to check sizedness, instead of introducing\n             // placeholder lifetimes with probing, we just replace higher lifetimes\n             // with fresh vars."}, {"sha": "930241262b0c17845347d48cc6c0fe46917f0c16", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -3748,7 +3748,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             formal_tys.clone()\n         };\n \n-        let mut final_arg_types: Vec<(usize, Ty<'_>)> = vec![];\n+        let mut final_arg_types: Vec<(usize, Ty<'_>, Ty<'_>)> = vec![];\n \n         // Check the arguments.\n         // We do this in a pretty awful way: first we type-check any arguments\n@@ -3816,7 +3816,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // We're processing function arguments so we definitely want to use\n                 // two-phase borrows.\n                 self.demand_coerce(&arg, checked_ty, coerce_ty, AllowTwoPhase::Yes);\n-                final_arg_types.push((i, coerce_ty));\n+                final_arg_types.push((i, checked_ty, coerce_ty));\n \n                 // 3. Relate the expected type and the formal one,\n                 //    if the expected type was used for the coercion.\n@@ -3863,14 +3863,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         vec![self.tcx.types.err; len]\n     }\n \n-    /// Given a vec of evaluated `FullfillmentError`s and an `fn` call argument expressions, we\n-    /// walk the resolved types for each argument to see if any of the `FullfillmentError`s\n-    /// reference a type argument. If they do, and there's only *one* argument that does, we point\n-    /// at the corresponding argument's expression span instead of the `fn` call path span.\n+    /// Given a vec of evaluated `FulfillmentError`s and an `fn` call argument expressions, we walk\n+    /// the checked and coerced types for each argument to see if any of the `FulfillmentError`s\n+    /// reference a type argument. The reason to walk also the checked type is that the coerced type\n+    /// can be not easily comparable with predicate type (because of coercion). If the types match\n+    /// for either checked or coerced type, and there's only *one* argument that does, we point at\n+    /// the corresponding argument's expression span instead of the `fn` call path span.\n     fn point_at_arg_instead_of_call_if_possible(\n         &self,\n         errors: &mut Vec<traits::FulfillmentError<'_>>,\n-        final_arg_types: &[(usize, Ty<'tcx>)],\n+        final_arg_types: &[(usize, Ty<'tcx>, Ty<'tcx>)],\n         call_sp: Span,\n         args: &'tcx [hir::Expr],\n     ) {\n@@ -3880,19 +3882,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             for error in errors {\n                 if let ty::Predicate::Trait(predicate) = error.obligation.predicate {\n                     // Collect the argument position for all arguments that could have caused this\n-                    // `FullfillmentError`.\n+                    // `FulfillmentError`.\n                     let mut referenced_in = final_arg_types.iter()\n+                        .map(|(i, checked_ty, _)| (i, checked_ty))\n+                        .chain(final_arg_types.iter().map(|(i, _, coerced_ty)| (i, coerced_ty)))\n                         .flat_map(|(i, ty)| {\n                             let ty = self.resolve_vars_if_possible(ty);\n                             // We walk the argument type because the argument's type could have\n-                            // been `Option<T>`, but the `FullfillmentError` references `T`.\n+                            // been `Option<T>`, but the `FulfillmentError` references `T`.\n                             ty.walk()\n                                 .filter(|&ty| ty == predicate.skip_binder().self_ty())\n                                 .map(move |_| *i)\n-                        });\n-                    if let (Some(ref_in), None) = (referenced_in.next(), referenced_in.next()) {\n+                        })\n+                        .collect::<Vec<_>>();\n+\n+                    // Both checked and coerced types could have matched, thus we need to remove\n+                    // duplicates.\n+                    referenced_in.dedup();\n+\n+                    if let (Some(ref_in), None) = (referenced_in.pop(), referenced_in.pop()) {\n                         // We make sure that only *one* argument matches the obligation failure\n-                        // and thet the obligation's span to its expression's.\n+                        // and we assign the obligation's span to its expression's.\n                         error.obligation.cause.span = args[ref_in].span;\n                         error.points_at_arg_span = true;\n                     }\n@@ -3901,8 +3911,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    /// Given a vec of evaluated `FullfillmentError`s and an `fn` call expression, we walk the\n-    /// `PathSegment`s and resolve their type parameters to see if any of the `FullfillmentError`s\n+    /// Given a vec of evaluated `FulfillmentError`s and an `fn` call expression, we walk the\n+    /// `PathSegment`s and resolve their type parameters to see if any of the `FulfillmentError`s\n     /// were caused by them. If they were, we point at the corresponding type argument's span\n     /// instead of the `fn` call path span.\n     fn point_at_type_arg_instead_of_call_if_possible("}, {"sha": "b491b103313561ef7b8cdd57a7196a87880ad92c", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 49, "deletions": 32, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -2,7 +2,7 @@ use crate::check::{Inherited, FnCtxt};\n use crate::constrained_generic_params::{identify_constrained_generic_params, Parameter};\n \n use crate::hir::def_id::DefId;\n-use rustc::traits::{self, ObligationCauseCode};\n+use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind, TypeFoldable, ToPredicate};\n use rustc::ty::subst::{Subst, InternalSubsts};\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n@@ -895,6 +895,11 @@ fn receiver_is_valid<'fcx, 'tcx>(\n     // The first type is `receiver_ty`, which we know its not equal to `self_ty`; skip it.\n     autoderef.next();\n \n+    let receiver_trait_def_id = fcx.tcx.require_lang_item(\n+        lang_items::ReceiverTraitLangItem,\n+        None,\n+    );\n+\n     // Keep dereferencing `receiver_ty` until we get to `self_ty`.\n     loop {\n         if let Some((potential_self_ty, _)) = autoderef.next() {\n@@ -911,51 +916,63 @@ fn receiver_is_valid<'fcx, 'tcx>(\n                 }\n \n                 break\n+            } else {\n+                // Without `feature(arbitrary_self_types)`, we require that each step in the\n+                // deref chain implement `receiver`\n+                if !arbitrary_self_types_enabled\n+                    && !receiver_is_implemented(\n+                        fcx,\n+                        receiver_trait_def_id,\n+                        cause.clone(),\n+                        potential_self_ty,\n+                    )\n+                {\n+                    return false\n+                }\n             }\n         } else {\n             debug!(\"receiver_is_valid: type `{:?}` does not deref to `{:?}`\",\n                 receiver_ty, self_ty);\n             // If he receiver already has errors reported due to it, consider it valid to avoid\n-            // unecessary errors (#58712).\n+            // unnecessary errors (#58712).\n             return receiver_ty.references_error();\n         }\n-\n-        // Without the `arbitrary_self_types` feature, `receiver_ty` must directly deref to\n-        // `self_ty`. Enforce this by only doing one iteration of the loop.\n-        if !arbitrary_self_types_enabled {\n-            return false\n-        }\n     }\n \n     // Without `feature(arbitrary_self_types)`, we require that `receiver_ty` implements `Receiver`.\n-    if !arbitrary_self_types_enabled {\n-        let trait_def_id = match fcx.tcx.lang_items().receiver_trait() {\n-            Some(did) => did,\n-            None => {\n-                debug!(\"receiver_is_valid: missing Receiver trait\");\n-                return false\n-            }\n-        };\n+    if !arbitrary_self_types_enabled\n+        && !receiver_is_implemented(fcx, receiver_trait_def_id, cause.clone(), receiver_ty)\n+    {\n+        return false\n+    }\n \n-        let trait_ref = ty::TraitRef{\n-            def_id: trait_def_id,\n-            substs: fcx.tcx.mk_substs_trait(receiver_ty, &[]),\n-        };\n+    true\n+}\n+\n+fn receiver_is_implemented(\n+    fcx: &FnCtxt<'_, 'tcx>,\n+    receiver_trait_def_id: DefId,\n+    cause: ObligationCause<'tcx>,\n+    receiver_ty: Ty<'tcx>,\n+) -> bool {\n+    let trait_ref = ty::TraitRef{\n+        def_id: receiver_trait_def_id,\n+        substs: fcx.tcx.mk_substs_trait(receiver_ty, &[]),\n+    };\n \n-        let obligation = traits::Obligation::new(\n-            cause,\n-            fcx.param_env,\n-            trait_ref.to_predicate()\n-        );\n+    let obligation = traits::Obligation::new(\n+        cause,\n+        fcx.param_env,\n+        trait_ref.to_predicate()\n+    );\n \n-        if !fcx.predicate_must_hold_modulo_regions(&obligation) {\n-            debug!(\"receiver_is_valid: type `{:?}` does not implement `Receiver` trait\",\n-                receiver_ty);\n-            return false\n-        }\n+    if fcx.predicate_must_hold_modulo_regions(&obligation) {\n+        true\n+    } else {\n+        debug!(\"receiver_is_implemented: type `{:?}` does not implement `Receiver` trait\",\n+            receiver_ty);\n+        false\n     }\n-\n-    true\n }\n \n fn check_variances_for_type_defn<'tcx>("}, {"sha": "d8f2dbca835d85a7f937865fc662446175dd709a", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 76, "deletions": 23, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -56,6 +56,64 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         }\n     }\n \n+    fn variant_field(\n+        &self,\n+        path_str: &str,\n+        current_item: &Option<String>,\n+        module_id: syntax::ast::NodeId,\n+    ) -> Result<(Res, Option<String>), ErrorKind> {\n+        let cx = self.cx;\n+\n+        let mut split = path_str.rsplitn(3, \"::\");\n+        let variant_field_name = split\n+            .next()\n+            .map(|f| Symbol::intern(f))\n+            .ok_or(ErrorKind::ResolutionFailure)?;\n+        let variant_name = split\n+            .next()\n+            .map(|f| Symbol::intern(f))\n+            .ok_or(ErrorKind::ResolutionFailure)?;\n+        let path = split.next().map(|f| {\n+            if f == \"self\" || f == \"Self\" {\n+                if let Some(name) = current_item.as_ref() {\n+                    return name.clone();\n+                }\n+            }\n+            f.to_owned()\n+        }).ok_or(ErrorKind::ResolutionFailure)?;\n+        let (_, ty_res) = cx.enter_resolver(|resolver| {\n+            resolver.resolve_str_path_error(DUMMY_SP, &path, TypeNS, module_id)\n+        }).map_err(|_| ErrorKind::ResolutionFailure)?;\n+        if let Res::Err = ty_res {\n+            return Err(ErrorKind::ResolutionFailure);\n+        }\n+        let ty_res = ty_res.map_id(|_| panic!(\"unexpected node_id\"));\n+        match ty_res {\n+            Res::Def(DefKind::Enum, did) => {\n+                if cx.tcx.inherent_impls(did)\n+                         .iter()\n+                         .flat_map(|imp| cx.tcx.associated_items(*imp))\n+                         .any(|item| item.ident.name == variant_name) {\n+                    return Err(ErrorKind::ResolutionFailure);\n+                }\n+                match cx.tcx.type_of(did).kind {\n+                    ty::Adt(def, _) if def.is_enum() => {\n+                        if def.all_fields()\n+                              .any(|item| item.ident.name == variant_field_name) {\n+                            Ok((ty_res,\n+                                Some(format!(\"variant.{}.field.{}\",\n+                                             variant_name, variant_field_name))))\n+                        } else {\n+                            Err(ErrorKind::ResolutionFailure)\n+                        }\n+                    }\n+                    _ => Err(ErrorKind::ResolutionFailure),\n+                }\n+            }\n+            _ => Err(ErrorKind::ResolutionFailure)\n+        }\n+    }\n+\n     /// Resolves a string as a path within a particular namespace. Also returns an optional\n     /// URL fragment in the case of variants and methods.\n     fn resolve(\n@@ -121,23 +179,18 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n \n             // Try looking for methods and associated items.\n             let mut split = path_str.rsplitn(2, \"::\");\n-            let item_name = if let Some(first) = split.next() {\n-                Symbol::intern(first)\n-            } else {\n-                return Err(ErrorKind::ResolutionFailure)\n-            };\n-\n-            let mut path = if let Some(second) = split.next() {\n-                second.to_owned()\n-            } else {\n-                return Err(ErrorKind::ResolutionFailure)\n-            };\n-\n-            if path == \"self\" || path == \"Self\" {\n-                if let Some(name) = current_item.as_ref() {\n-                    path = name.clone();\n+            let item_name = split.next()\n+                .map(|f| Symbol::intern(f))\n+                .ok_or(ErrorKind::ResolutionFailure)?;\n+            let path = split.next().map(|f| {\n+                if f == \"self\" || f == \"Self\" {\n+                    if let Some(name) = current_item.as_ref() {\n+                        return name.clone();\n+                    }\n                 }\n-            }\n+                f.to_owned()\n+            }).ok_or(ErrorKind::ResolutionFailure)?;\n+\n             if let Some(prim) = is_primitive(&path, TypeNS) {\n                 let did = primitive_impl(cx, &path).ok_or(ErrorKind::ResolutionFailure)?;\n                 return cx.tcx.associated_items(did)\n@@ -154,7 +207,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 resolver.resolve_str_path_error(DUMMY_SP, &path, TypeNS, module_id)\n             }).map_err(|_| ErrorKind::ResolutionFailure)?;\n             if let Res::Err = ty_res {\n-                return Err(ErrorKind::ResolutionFailure);\n+                return self.variant_field(path_str, current_item, module_id);\n             }\n             let ty_res = ty_res.map_id(|_| panic!(\"unexpected node_id\"));\n             match ty_res {\n@@ -170,7 +223,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         let out = match item.kind {\n                             ty::AssocKind::Method if ns == ValueNS => \"method\",\n                             ty::AssocKind::Const if ns == ValueNS => \"associatedconstant\",\n-                            _ => return Err(ErrorKind::ResolutionFailure)\n+                            _ => return self.variant_field(path_str, current_item, module_id),\n                         };\n                         if extra_fragment.is_some() {\n                             Err(ErrorKind::AnchorFailure(\n@@ -211,10 +264,10 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                                                          item.ident))))\n                                     }\n                                 } else {\n-                                    Err(ErrorKind::ResolutionFailure)\n+                                    self.variant_field(path_str, current_item, module_id)\n                                 }\n                             }\n-                            _ => Err(ErrorKind::ResolutionFailure),\n+                            _ => self.variant_field(path_str, current_item, module_id),\n                         }\n                     }\n                 }\n@@ -233,7 +286,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                                     \"tymethod\"\n                                 }\n                             }\n-                            _ => return Err(ErrorKind::ResolutionFailure)\n+                            _ => return self.variant_field(path_str, current_item, module_id),\n                         };\n \n                         if extra_fragment.is_some() {\n@@ -249,10 +302,10 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                             Ok((ty_res, Some(format!(\"{}.{}\", kind, item_name))))\n                         }\n                     } else {\n-                        Err(ErrorKind::ResolutionFailure)\n+                        self.variant_field(path_str, current_item, module_id)\n                     }\n                 }\n-                _ => Err(ErrorKind::ResolutionFailure)\n+                _ => self.variant_field(path_str, current_item, module_id),\n             }\n         } else {\n             debug!(\"attempting to resolve item without parent module: {}\", path_str);"}, {"sha": "ec1c444bcf8c80fee608b20ed02fd2a312789c3a", "filename": "src/libstd/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -206,7 +206,7 @@ pub trait Error: Debug + Display {\n         TypeId::of::<Self>()\n     }\n \n-    /// Returns a stack backtrace, if available, of where this error ocurred.\n+    /// Returns a stack backtrace, if available, of where this error occurred.\n     ///\n     /// This function allows inspecting the location, in code, of where an error\n     /// happened. The returned `Backtrace` contains information about the stack"}, {"sha": "8669c48e3bb5061566d34efe67baacd9289ee4c5", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -128,7 +128,7 @@ cfg_has_statx! {{\n                 // It is a trick to call `statx` with NULL pointers to check if the syscall\n                 // is available. According to the manual, it is expected to fail with EFAULT.\n                 // We do this mainly for performance, since it is nearly hundreds times\n-                // faster than a normal successfull call.\n+                // faster than a normal successful call.\n                 let err = cvt(statx(0, ptr::null(), 0, libc::STATX_ALL, ptr::null_mut()))\n                     .err()\n                     .and_then(|e| e.raw_os_error());\n@@ -1223,7 +1223,7 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n             // The code below ensures that `FreeOnDrop` is never a null pointer\n             unsafe {\n                 // `copyfile_state_free` returns -1 if the `to` or `from` files\n-                // cannot be closed. However, this is not considerd this an\n+                // cannot be closed. However, this is not considered this an\n                 // error.\n                 copyfile_state_free(self.0);\n             }"}, {"sha": "3b0993fdb580ea2d5419204aac258dc15ed5d172", "filename": "src/libstd/sys/wasm/fast_thread_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibstd%2Fsys%2Fwasm%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibstd%2Fsys%2Fwasm%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Ffast_thread_local.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -3,7 +3,7 @@\n pub unsafe fn register_dtor(_t: *mut u8, _dtor: unsafe extern fn(*mut u8)) {\n     // FIXME: right now there is no concept of \"thread exit\", but this is likely\n     // going to show up at some point in the form of an exported symbol that the\n-    // wasm runtime is oging to be expected to call. For now we basically just\n+    // wasm runtime is going to be expected to call. For now we basically just\n     // ignore the arguments, but if such a function starts to exist it will\n     // likely look like the OSX implementation in `unix/fast_thread_local.rs`\n }"}, {"sha": "a1d8b5a53386a06ea4980170f29da15d8357843b", "filename": "src/libsyntax_expand/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -190,7 +190,7 @@ fn generic_extension<'cx>(\n \n         // Take a snapshot of the state of pre-expansion gating at this point.\n         // This is used so that if a matcher is not `Success(..)`ful,\n-        // then the spans which became gated when parsing the unsucessful matcher\n+        // then the spans which became gated when parsing the unsuccessful matcher\n         // are not recorded. On the first `Success(..)`ful matcher, the spans are merged.\n         let mut gated_spans_snaphot = mem::take(&mut *cx.parse_sess.gated_spans.spans.borrow_mut());\n "}, {"sha": "e2bb49699e97c4e6667d5ac11e540483dd7ec6a8", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -580,7 +580,7 @@ LLVMRustWriteOutputFile(LLVMTargetMachineRef Target, LLVMPassManagerRef PMR,\n   // Apparently `addPassesToEmitFile` adds a pointer to our on-the-stack output\n   // stream (OS), so the only real safe place to delete this is here? Don't we\n   // wish this was written in Rust?\n-  delete PM;\n+  LLVMDisposePassManager(PMR);\n   return LLVMRustResult::Success;\n }\n "}, {"sha": "70bf343a9a5e5a144950de51f51e3767bce088ff", "filename": "src/test/rustdoc/intra-doc-link-enum-struct-field.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Frustdoc%2Fintra-doc-link-enum-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Frustdoc%2Fintra-doc-link-enum-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-link-enum-struct-field.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -0,0 +1,14 @@\n+#![crate_name = \"foo\"]\n+\n+pub enum Foo {\n+    X {\n+        y: u8,\n+    }\n+}\n+\n+/// Hello\n+///\n+/// I want [Foo::X::y].\n+pub fn foo() {}\n+\n+// @has foo/fn.foo.html '//a/@href' '../foo/enum.Foo.html#variant.X.field.y'"}, {"sha": "a69ba61a283d09ab2d69abdb0531e1a53df449f0", "filename": "src/test/rustdoc/issue-66159.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Frustdoc%2Fissue-66159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Frustdoc%2Fissue-66159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-66159.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -4,7 +4,7 @@\n \n // The issue was an ICE which meant that we never actually generated the docs\n // so if we have generated the docs, we're okay.\n-// Since we don't generate the docs for the auxilliary files, we can't actually\n+// Since we don't generate the docs for the auxiliary files, we can't actually\n // verify that the struct is linked correctly.\n \n // @has issue_66159/index.html"}, {"sha": "6bbbdd972a26c102b243a275b71352ed823d4815", "filename": "src/test/ui/consts/control-flow/exhaustive-c-like-enum-match.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fexhaustive-c-like-enum-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fexhaustive-c-like-enum-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fexhaustive-c-like-enum-match.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -18,4 +18,14 @@ const fn f(e: E) {\n     }\n }\n \n-fn main() {}\n+const fn g(e: E) -> usize {\n+    match e {\n+        _ => 0\n+    }\n+}\n+\n+fn main() {\n+    const X: usize = g(E::C);\n+    assert_eq!(X, 0);\n+    assert_eq!(g(E::A), 0);\n+}"}, {"sha": "fba6e3583cc2978cbb82d9ec9f0f09851b4b8e2d", "filename": "src/test/ui/consts/control-flow/single-arm-match-wild.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e87a205c2e117d9fb57f6cdeac0a7f6e95c88316/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fsingle-arm-match-wild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87a205c2e117d9fb57f6cdeac0a7f6e95c88316/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fsingle-arm-match-wild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fsingle-arm-match-wild.rs?ref=e87a205c2e117d9fb57f6cdeac0a7f6e95c88316", "patch": "@@ -1,21 +0,0 @@\n-// check-pass\n-\n-#![feature(const_if_match)]\n-\n-enum E {\n-    A,\n-    B,\n-    C\n-}\n-\n-const fn f(e: E) -> usize {\n-    match e {\n-        _ => 0\n-    }\n-}\n-\n-fn main() {\n-    const X: usize = f(E::C);\n-    assert_eq!(X, 0);\n-    assert_eq!(f(E::A), 0);\n-}"}, {"sha": "1c70624e4a2205a97a9a6b8981bc25117bd821bd", "filename": "src/test/ui/layout/homogeneous-aggr-zero-sized-c-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-c-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-c-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-c-struct.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -2,7 +2,7 @@\n \n // Show that `homogeneous_aggregate` code ignores zero-length C\n // arrays.  This matches the recent C standard, though not the\n-// behavior of all older compilers, which somtimes consider `T[0]` to\n+// behavior of all older compilers, which sometimes consider `T[0]` to\n // be a \"flexible array member\" (see discussion on #56877 for\n // details).\n "}, {"sha": "a439a1f339aea6e6521600683dc947f522232cae", "filename": "src/test/ui/lint/lint-ctypes.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -65,6 +65,10 @@ extern {\n     pub fn transparent_i128(p: TransparentI128); //~ ERROR: uses type `i128`\n     pub fn transparent_str(p: TransparentStr); //~ ERROR: uses type `str`\n     pub fn transparent_fn(p: TransparentBadFn); //~ ERROR: uses type `std::boxed::Box<u32>`\n+    pub fn raw_array(arr: [u8; 8]); //~ ERROR: uses type `[u8; 8]`\n+\n+    pub static static_u128_type: u128; //~ ERROR: uses type `u128`\n+    pub static static_u128_array_type: [u128; 16]; //~ ERROR: uses type `u128`\n \n     pub fn good3(fptr: Option<extern fn()>);\n     pub fn good4(aptr: &[u8; 4 as usize]);\n@@ -83,6 +87,9 @@ extern {\n     pub fn good17(p: TransparentCustomZst);\n     #[allow(improper_ctypes)]\n     pub fn good18(_: &String);\n+    pub fn good20(arr: *const [u8; 8]);\n+    pub static good21: [u8; 8];\n+\n }\n \n #[allow(improper_ctypes)]"}, {"sha": "e6bb49afb880f8d3cdf188b684189cc1aeae09cb", "filename": "src/test/ui/lint/lint-ctypes.stderr", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -197,5 +197,30 @@ LL |     pub fn transparent_fn(p: TransparentBadFn);\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n    = note: this struct has unspecified layout\n \n-error: aborting due to 20 previous errors\n+error: `extern` block uses type `[u8; 8]`, which is not FFI-safe\n+  --> $DIR/lint-ctypes.rs:68:27\n+   |\n+LL |     pub fn raw_array(arr: [u8; 8]);\n+   |                           ^^^^^^^ not FFI-safe\n+   |\n+   = help: consider passing a pointer to the array\n+   = note: passing raw arrays by value is not FFI-safe\n+\n+error: `extern` block uses type `u128`, which is not FFI-safe\n+  --> $DIR/lint-ctypes.rs:70:34\n+   |\n+LL |     pub static static_u128_type: u128;\n+   |                                  ^^^^ not FFI-safe\n+   |\n+   = note: 128-bit integers don't currently have a known stable ABI\n+\n+error: `extern` block uses type `u128`, which is not FFI-safe\n+  --> $DIR/lint-ctypes.rs:71:40\n+   |\n+LL |     pub static static_u128_array_type: [u128; 16];\n+   |                                        ^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: 128-bit integers don't currently have a known stable ABI\n+\n+error: aborting due to 23 previous errors\n "}, {"sha": "2e1d484e05a5a4d8fa670382efda5fee6b1531a4", "filename": "src/test/ui/on-unimplemented/expected-comma-found-token.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -2,7 +2,10 @@ error: expected one of `)` or `,`, found `label`\n   --> $DIR/expected-comma-found-token.rs:9:5\n    |\n LL |     message=\"the message\"\n-   |                          - expected one of `)` or `,`\n+   |                          -\n+   |                          |\n+   |                          expected one of `)` or `,`\n+   |                          help: missing `,`\n LL |     label=\"the label\"\n    |     ^^^^^ unexpected token\n "}, {"sha": "fe9603cb57f1f094905a57f57ec4179dece68ffb", "filename": "src/test/ui/parser/pat-lt-bracket-6.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -2,7 +2,10 @@ error: expected one of `)`, `,`, `@`, or `|`, found `[`\n   --> $DIR/pat-lt-bracket-6.rs:5:19\n    |\n LL |     let Test(&desc[..]) = x;\n-   |                   ^ expected one of `)`, `,`, `@`, or `|`\n+   |                   ^\n+   |                   |\n+   |                   expected one of `)`, `,`, `@`, or `|`\n+   |                   help: missing `,`\n \n error[E0658]: subslice patterns are unstable\n   --> $DIR/pat-lt-bracket-6.rs:5:20"}, {"sha": "004dcfb2a7b2d0a9ce63225583cf611a968d4ecf", "filename": "src/test/ui/parser/pat-lt-bracket-7.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -2,7 +2,10 @@ error: expected one of `)`, `,`, `@`, or `|`, found `[`\n   --> $DIR/pat-lt-bracket-7.rs:5:16\n    |\n LL |     for Thing(x[]) in foo {}\n-   |                ^ expected one of `)`, `,`, `@`, or `|`\n+   |                ^\n+   |                |\n+   |                expected one of `)`, `,`, `@`, or `|`\n+   |                help: missing `,`\n \n error[E0308]: mismatched types\n   --> $DIR/pat-lt-bracket-7.rs:9:30"}, {"sha": "08dd939e2c023f7f3290a796d02f4bc9e005b1cb", "filename": "src/test/ui/parser/recover-enum.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fparser%2Frecover-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fparser%2Frecover-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-enum.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,11 +1,11 @@\n fn main() {\n     enum Test {\n-        Very\n-        //~^ ERROR missing comma\n-        Bad(usize)\n-        //~^ ERROR missing comma\n-        Stuff { a: usize }\n-        //~^ ERROR missing comma\n+        Very //~ HELP missing `,`\n+        Bad(usize) //~ HELP missing `,`\n+        //~^ ERROR expected one of `(`, `,`, `=`, `{`, or `}`, found `Bad`\n+        Stuff { a: usize } //~ HELP missing `,`\n+        //~^ ERROR expected one of `,`, `=`, or `}`, found `Stuff`\n         Here\n+        //~^ ERROR expected one of `,`, `=`, or `}`, found `Here`\n     }\n }"}, {"sha": "a2b650e4f4eb7ca23d98d19a226fb8a8b90fd8ca", "filename": "src/test/ui/parser/recover-enum.stderr", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fparser%2Frecover-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fparser%2Frecover-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-enum.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,20 +1,37 @@\n-error: missing comma\n-  --> $DIR/recover-enum.rs:3:13\n+error: expected one of `(`, `,`, `=`, `{`, or `}`, found `Bad`\n+  --> $DIR/recover-enum.rs:4:9\n    |\n LL |         Very\n-   |             ^ help: missing comma\n+   |             -\n+   |             |\n+   |             expected one of `(`, `,`, `=`, `{`, or `}`\n+   |             help: missing `,`\n+LL |         Bad(usize)\n+   |         ^^^ unexpected token\n \n-error: missing comma\n-  --> $DIR/recover-enum.rs:5:19\n+error: expected one of `,`, `=`, or `}`, found `Stuff`\n+  --> $DIR/recover-enum.rs:6:9\n    |\n LL |         Bad(usize)\n-   |                   ^ help: missing comma\n+   |                   -\n+   |                   |\n+   |                   expected one of `,`, `=`, or `}`\n+   |                   help: missing `,`\n+LL |\n+LL |         Stuff { a: usize }\n+   |         ^^^^^ unexpected token\n \n-error: missing comma\n-  --> $DIR/recover-enum.rs:7:27\n+error: expected one of `,`, `=`, or `}`, found `Here`\n+  --> $DIR/recover-enum.rs:8:9\n    |\n LL |         Stuff { a: usize }\n-   |                           ^ help: missing comma\n+   |                           -\n+   |                           |\n+   |                           expected one of `,`, `=`, or `}`\n+   |                           help: missing `,`\n+LL |\n+LL |         Here\n+   |         ^^^^ unexpected token\n \n error: aborting due to 3 previous errors\n "}, {"sha": "5f86db86d4477fab4b909c0945183c7f6d048aaa", "filename": "src/test/ui/rfc-2008-non-exhaustive/auxiliary/monovariants.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fmonovariants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fmonovariants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fmonovariants.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -0,0 +1,8 @@\n+#[non_exhaustive]\n+pub enum NonExhaustiveMonovariant {\n+    Variant(u32),\n+}\n+\n+pub enum ExhaustiveMonovariant {\n+    Variant(u32),\n+}"}, {"sha": "be775b37f7b779ddf7abfcc8fcb225ed2865de7d", "filename": "src/test/ui/rfc-2008-non-exhaustive/borrowck-exhaustive.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-exhaustive.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -0,0 +1,42 @@\n+// Test that the borrow checker doesn't consider checking an exhaustive pattern\n+// as an access.\n+\n+// check-pass\n+\n+// aux-build:monovariants.rs\n+extern crate monovariants;\n+\n+use monovariants::ExhaustiveMonovariant;\n+\n+enum Local {\n+    Variant(u32),\n+}\n+\n+#[non_exhaustive]\n+enum LocalNonExhaustive {\n+    Variant(u32),\n+}\n+\n+fn main() {\n+    let mut x = ExhaustiveMonovariant::Variant(1);\n+    let y = &mut x;\n+    match x {\n+        ExhaustiveMonovariant::Variant(_) => {},\n+        _ => {},\n+    }\n+    drop(y);\n+    let mut x = Local::Variant(1);\n+    let y = &mut x;\n+    match x {\n+        Local::Variant(_) => {},\n+        _ => {},\n+    }\n+    drop(y);\n+    let mut x = LocalNonExhaustive::Variant(1);\n+    let y = &mut x;\n+    match x {\n+        LocalNonExhaustive::Variant(_) => {},\n+        _ => {},\n+    }\n+    drop(y);\n+}"}, {"sha": "00dcf89c7aa674a2d3a2b1c416e870980b30150f", "filename": "src/test/ui/rfc-2008-non-exhaustive/borrowck-non-exhaustive.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-non-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-non-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-non-exhaustive.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -0,0 +1,18 @@\n+// Test that the borrow checker considers `#[non_exhaustive]` when checking\n+// whether a match contains a discriminant read.\n+\n+// aux-build:monovariants.rs\n+extern crate monovariants;\n+\n+use monovariants::NonExhaustiveMonovariant;\n+\n+fn main() {\n+    let mut x = NonExhaustiveMonovariant::Variant(1);\n+    let y = &mut x;\n+    match x {\n+        NonExhaustiveMonovariant::Variant(_) => {},\n+        //~^ ERROR cannot use `x` because it was mutably borrowed\n+        _ => {},\n+    }\n+    drop(y);\n+}"}, {"sha": "9edfa84cbc0852c4854e1cf08f1777c33a0efc68", "filename": "src/test/ui/rfc-2008-non-exhaustive/borrowck-non-exhaustive.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-non-exhaustive.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -0,0 +1,15 @@\n+error[E0503]: cannot use `x` because it was mutably borrowed\n+  --> $DIR/borrowck-non-exhaustive.rs:13:9\n+   |\n+LL |     let y = &mut x;\n+   |             ------ borrow of `x` occurs here\n+LL |     match x {\n+LL |         NonExhaustiveMonovariant::Variant(_) => {},\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ use of borrowed `x`\n+...\n+LL |     drop(y);\n+   |          - borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0503`."}, {"sha": "653ccb9db949aceed4a80d236a12d2bc75d6986e", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.curr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,5 +1,5 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/arbitrary-self-types-not-object-safe.rs:34:32\n+  --> $DIR/arbitrary-self-types-not-object-safe.rs:33:32\n    |\n LL |     fn foo(self: &Rc<Self>) -> usize;\n    |        --- method `foo`'s `self` parameter cannot be dispatched on\n@@ -8,7 +8,7 @@ LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n    |                                ^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n \n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/arbitrary-self-types-not-object-safe.rs:34:13\n+  --> $DIR/arbitrary-self-types-not-object-safe.rs:33:13\n    |\n LL |     fn foo(self: &Rc<Self>) -> usize;\n    |        --- method `foo`'s `self` parameter cannot be dispatched on"}, {"sha": "33f1fa2e51be3545b548706a2c0f627c352075eb", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,5 +1,5 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/arbitrary-self-types-not-object-safe.rs:34:13\n+  --> $DIR/arbitrary-self-types-not-object-safe.rs:33:13\n    |\n LL |     fn foo(self: &Rc<Self>) -> usize;\n    |        --- method `foo`'s `self` parameter cannot be dispatched on"}, {"sha": "40e8df3395f6e6294cf19f1c752c784f4529b86d", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,7 +1,6 @@\n // revisions: curr object_safe_for_dispatch\n \n #![cfg_attr(object_safe_for_dispatch, feature(object_safe_for_dispatch))]\n-#![feature(arbitrary_self_types)]\n \n use std::rc::Rc;\n "}, {"sha": "353da8fd20b22131a60f2ec2c8db5184d9a9ddc6", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,5 +1,5 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/arbitrary-self-types-not-object-safe.rs:31:32\n+  --> $DIR/arbitrary-self-types-not-object-safe.rs:29:32\n    |\n LL |     fn foo(self: &Rc<Self>) -> usize;\n    |        --- method `foo`'s `self` parameter cannot be dispatched on\n@@ -8,7 +8,7 @@ LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n    |                                ^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n \n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/arbitrary-self-types-not-object-safe.rs:31:13\n+  --> $DIR/arbitrary-self-types-not-object-safe.rs:29:13\n    |\n LL |     fn foo(self: &Rc<Self>) -> usize;\n    |        --- method `foo`'s `self` parameter cannot be dispatched on"}, {"sha": "680196fbb92f644573259277bc92ade071f64398", "filename": "src/test/ui/self/arbitrary_self_types_nested.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_nested.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -0,0 +1,36 @@\n+// run-pass\n+\n+use {\n+    std::{\n+        rc::Rc,\n+        sync::Arc,\n+    },\n+};\n+\n+#[derive(Default)]\n+struct Ty;\n+\n+trait Trait {\n+    fn receive_trait(self: &Arc<Rc<Box<Self>>>) -> u32;\n+}\n+\n+const TRAIT_MAGIC: u32 = 42;\n+const INHERENT_MAGIC: u32 = 1995;\n+\n+impl Trait for Ty {\n+    fn receive_trait(self: &Arc<Rc<Box<Self>>>) -> u32 {\n+        TRAIT_MAGIC\n+    }\n+}\n+\n+impl Ty {\n+    fn receive_inherent(self: &Arc<Rc<Box<Self>>>) -> u32 {\n+        INHERENT_MAGIC\n+    }\n+}\n+\n+fn main() {\n+    let ty = <Arc<Rc<Box<Ty>>>>::default();\n+    assert_eq!(TRAIT_MAGIC, ty.receive_trait());\n+    assert_eq!(INHERENT_MAGIC, ty.receive_inherent());\n+}"}, {"sha": "905ad83b659d4fafb3efd2b05f3ba10be1d2c97d", "filename": "src/test/ui/self/arbitrary_self_types_struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_struct.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(arbitrary_self_types)]\n \n use std::rc::Rc;\n "}, {"sha": "973c7cae85a94a5168fc2a9f33dfcc850b848890", "filename": "src/test/ui/self/arbitrary_self_types_trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_trait.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(arbitrary_self_types)]\n \n use std::rc::Rc;\n "}, {"sha": "d43f3132890b5ead536e23122d48d4022185f2f2", "filename": "src/test/ui/self/arbitrary_self_types_unsized_struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_unsized_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_unsized_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_unsized_struct.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(arbitrary_self_types)]\n \n use std::rc::Rc;\n "}, {"sha": "7c0dd068623f358f5fb989f839316f221210a1d5", "filename": "src/test/ui/self/elision/alias-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Falias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Falias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Falias-async.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "0c801d7023212b0774a918d3a32be93307924a43", "filename": "src/test/ui/self/elision/alias.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Falias.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "363b7fc2aaeb23c20e43839592b945ef29c12fce", "filename": "src/test/ui/self/elision/assoc-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc-async.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "fa39a2b478b1ef2c57cac95d92a853c9cbf37072", "filename": "src/test/ui/self/elision/assoc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "3a6f8471e66423622ad1c36bd1c83ee8bf11a876", "filename": "src/test/ui/self/elision/lt-alias-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias-async.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "bbba88e4e5bb9d7e9dbcfb8cd6e02e11d1d60e88", "filename": "src/test/ui/self/elision/lt-alias.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "0d3ff630d14e7f500e490a544318b6a322dfeaa5", "filename": "src/test/ui/self/elision/lt-assoc-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc-async.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "8f3543135365c33ec1e2d37156f3292f0dbe504d", "filename": "src/test/ui/self/elision/lt-assoc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "1288759703f69f4679a3b3f023c1f9afa6887e19", "filename": "src/test/ui/self/elision/lt-ref-self-async.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:13:42\n+  --> $DIR/lt-ref-self-async.rs:12:42\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                                          ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:14:9\n+  --> $DIR/lt-ref-self-async.rs:13:9\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       -\n@@ -18,15 +18,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:19:48\n+  --> $DIR/lt-ref-self-async.rs:18:48\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                                                ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:20:9\n+  --> $DIR/lt-ref-self-async.rs:19:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             -\n@@ -37,15 +37,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:23:57\n+  --> $DIR/lt-ref-self-async.rs:22:57\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:24:9\n+  --> $DIR/lt-ref-self-async.rs:23:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     -\n@@ -56,15 +56,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:27:57\n+  --> $DIR/lt-ref-self-async.rs:26:57\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:28:9\n+  --> $DIR/lt-ref-self-async.rs:27:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     -\n@@ -75,15 +75,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:31:66\n+  --> $DIR/lt-ref-self-async.rs:30:66\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:32:9\n+  --> $DIR/lt-ref-self-async.rs:31:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             -\n@@ -94,15 +94,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:35:62\n+  --> $DIR/lt-ref-self-async.rs:34:62\n    |\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                                              ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:36:9\n+  --> $DIR/lt-ref-self-async.rs:35:9\n    |\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                         -"}, {"sha": "ef6cbe7772c276cb7960840beda83782113b09f3", "filename": "src/test/ui/self/elision/lt-ref-self-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,6 +1,5 @@\n // edition:2018\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "badd973c37f088f3437ae8f151dc7847acabaa6e", "filename": "src/test/ui/self/elision/lt-ref-self-async.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:14:9\n+  --> $DIR/lt-ref-self-async.rs:13:9\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       -----              ----\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:20:9\n+  --> $DIR/lt-ref-self-async.rs:19:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             -----              ----\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:24:9\n+  --> $DIR/lt-ref-self-async.rs:23:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ----\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:28:9\n+  --> $DIR/lt-ref-self-async.rs:27:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ----\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:32:9\n+  --> $DIR/lt-ref-self-async.rs:31:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             -----                ----\n@@ -49,7 +49,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:36:9\n+  --> $DIR/lt-ref-self-async.rs:35:9\n    |\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                         -----                ----"}, {"sha": "a0c56f2221850e50fd03b9316ae9f7edd5a21115", "filename": "src/test/ui/self/elision/lt-ref-self.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.nll.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self.rs:12:9\n+  --> $DIR/lt-ref-self.rs:11:9\n    |\n LL |     fn ref_self(&self, f: &u32) -> &u32 {\n    |                 -         - let's call the lifetime of this reference `'1`\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self.rs:18:9\n+  --> $DIR/lt-ref-self.rs:17:9\n    |\n LL |     fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                       -         - let's call the lifetime of this reference `'1`\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self.rs:22:9\n+  --> $DIR/lt-ref-self.rs:21:9\n    |\n LL |     fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                               -          - let's call the lifetime of this reference `'1`\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self.rs:26:9\n+  --> $DIR/lt-ref-self.rs:25:9\n    |\n LL |     fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                               -          - let's call the lifetime of this reference `'1`\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self.rs:30:9\n+  --> $DIR/lt-ref-self.rs:29:9\n    |\n LL |     fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                       -           - let's call the lifetime of this reference `'1`\n@@ -49,7 +49,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self.rs:34:9\n+  --> $DIR/lt-ref-self.rs:33:9\n    |\n LL |     fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                   -           - let's call the lifetime of this reference `'1`"}, {"sha": "423c7d5822df7389ba8fbf39210a39672caa30d9", "filename": "src/test/ui/self/elision/lt-ref-self.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,4 +1,3 @@\n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "f392580d422097b18960616012efaa9fa5b7af5c", "filename": "src/test/ui/self/elision/lt-ref-self.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self.rs:12:9\n+  --> $DIR/lt-ref-self.rs:11:9\n    |\n LL |     fn ref_self(&self, f: &u32) -> &u32 {\n    |                           ----     ----\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self.rs:18:9\n+  --> $DIR/lt-ref-self.rs:17:9\n    |\n LL |     fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                                 ----     ----\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self.rs:22:9\n+  --> $DIR/lt-ref-self.rs:21:9\n    |\n LL |     fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                          ----     ----\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self.rs:26:9\n+  --> $DIR/lt-ref-self.rs:25:9\n    |\n LL |     fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                          ----     ----\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self.rs:30:9\n+  --> $DIR/lt-ref-self.rs:29:9\n    |\n LL |     fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                                   ----     ----\n@@ -49,7 +49,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self.rs:34:9\n+  --> $DIR/lt-ref-self.rs:33:9\n    |\n LL |     fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                               ----     ----"}, {"sha": "4cedaf79da3a3ede3b2058a4953f370ae0d0c176", "filename": "src/test/ui/self/elision/lt-self-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self-async.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "cf74f892b8fcec57164d201a6fdad9a0a29031cb", "filename": "src/test/ui/self/elision/lt-self.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "abbee7fdfcb874e5ae3bf9a8167de4e3004f41ab", "filename": "src/test/ui/self/elision/lt-struct-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct-async.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "799c6c079b34d6051c362e8b62a8b745782e9aa7", "filename": "src/test/ui/self/elision/lt-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "15f16525b6b1c078d693d4c217e14a5f6c662e87", "filename": "src/test/ui/self/elision/ref-alias-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,7 +1,6 @@\n // edition:2018\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "341f5b52df0adfdebec2e08258fe6c2ea9dd9fb6", "filename": "src/test/ui/self/elision/ref-alias.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "ad10d8ba4f4e2b61d3856b10138d66f55c65825b", "filename": "src/test/ui/self/elision/ref-assoc-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,7 +1,6 @@\n // edition:2018\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "2f02cb5f3c8af6dce4771b4bcc3717a62b411fc4", "filename": "src/test/ui/self/elision/ref-assoc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "2c3f971d26e8b134aec48083a34ce1d445c637b9", "filename": "src/test/ui/self/elision/ref-mut-alias-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,7 +1,6 @@\n // edition:2018\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "ce1ab3ffccaba2c7ad4e11c488f8afd42b4808f1", "filename": "src/test/ui/self/elision/ref-mut-alias.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "24e3f7a098fb1e8966f4cb3bac4b2a73d8b3a97f", "filename": "src/test/ui/self/elision/ref-mut-self-async.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:13:46\n+  --> $DIR/ref-mut-self-async.rs:12:46\n    |\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                                              ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:14:9\n+  --> $DIR/ref-mut-self-async.rs:13:9\n    |\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                       -\n@@ -18,15 +18,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:19:52\n+  --> $DIR/ref-mut-self-async.rs:18:52\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                                                    ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:20:9\n+  --> $DIR/ref-mut-self-async.rs:19:9\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                             -\n@@ -37,15 +37,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:23:61\n+  --> $DIR/ref-mut-self-async.rs:22:61\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:24:9\n+  --> $DIR/ref-mut-self-async.rs:23:9\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                     -\n@@ -56,15 +56,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:27:61\n+  --> $DIR/ref-mut-self-async.rs:26:61\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:28:9\n+  --> $DIR/ref-mut-self-async.rs:27:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                     -\n@@ -75,15 +75,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:31:70\n+  --> $DIR/ref-mut-self-async.rs:30:70\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                                                      ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:32:9\n+  --> $DIR/ref-mut-self-async.rs:31:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                             -\n@@ -94,15 +94,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:35:70\n+  --> $DIR/ref-mut-self-async.rs:34:70\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                                                      ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:36:9\n+  --> $DIR/ref-mut-self-async.rs:35:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                             -"}, {"sha": "1e65605036d6f0b12ed49876184fc1886cbbb510", "filename": "src/test/ui/self/elision/ref-mut-self-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,6 +1,5 @@\n // edition:2018\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "73d942a83f89ac32d419f399d8232aefda6619c6", "filename": "src/test/ui/self/elision/ref-mut-self-async.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:14:9\n+  --> $DIR/ref-mut-self-async.rs:13:9\n    |\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                       ---------              ----\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:20:9\n+  --> $DIR/ref-mut-self-async.rs:19:9\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                             ---------              ----\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:24:9\n+  --> $DIR/ref-mut-self-async.rs:23:9\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                     ---------               ----\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:28:9\n+  --> $DIR/ref-mut-self-async.rs:27:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                     ---------               ----\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:32:9\n+  --> $DIR/ref-mut-self-async.rs:31:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                             ---------                ----\n@@ -49,7 +49,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:36:9\n+  --> $DIR/ref-mut-self-async.rs:35:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                             ---------                ----"}, {"sha": "4e7d7f521d2568045c25da8d5874ab0558babbf0", "filename": "src/test/ui/self/elision/ref-mut-self.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.nll.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self.rs:12:9\n+  --> $DIR/ref-mut-self.rs:11:9\n    |\n LL |     fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                 -             - let's call the lifetime of this reference `'1`\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self.rs:18:9\n+  --> $DIR/ref-mut-self.rs:17:9\n    |\n LL |     fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                       -             - let's call the lifetime of this reference `'1`\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self.rs:22:9\n+  --> $DIR/ref-mut-self.rs:21:9\n    |\n LL |     fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                               -              - let's call the lifetime of this reference `'1`\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self.rs:26:9\n+  --> $DIR/ref-mut-self.rs:25:9\n    |\n LL |     fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                               -              - let's call the lifetime of this reference `'1`\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self.rs:30:9\n+  --> $DIR/ref-mut-self.rs:29:9\n    |\n LL |     fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                       -               - let's call the lifetime of this reference `'1`\n@@ -49,7 +49,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self.rs:34:9\n+  --> $DIR/ref-mut-self.rs:33:9\n    |\n LL |     fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                       -               - let's call the lifetime of this reference `'1`"}, {"sha": "8d9359dbd94b571c369a8cc34c20c1df2b514b67", "filename": "src/test/ui/self/elision/ref-mut-self.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,4 +1,3 @@\n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "46d849741ebe3d9fd863c386948de406b2cd31de", "filename": "src/test/ui/self/elision/ref-mut-self.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self.rs:12:9\n+  --> $DIR/ref-mut-self.rs:11:9\n    |\n LL |     fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                               ----     ----\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self.rs:18:9\n+  --> $DIR/ref-mut-self.rs:17:9\n    |\n LL |     fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                                     ----     ----\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self.rs:22:9\n+  --> $DIR/ref-mut-self.rs:21:9\n    |\n LL |     fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                              ----     ----\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self.rs:26:9\n+  --> $DIR/ref-mut-self.rs:25:9\n    |\n LL |     fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                              ----     ----\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self.rs:30:9\n+  --> $DIR/ref-mut-self.rs:29:9\n    |\n LL |     fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                                       ----     ----\n@@ -49,7 +49,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self.rs:34:9\n+  --> $DIR/ref-mut-self.rs:33:9\n    |\n LL |     fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                                       ----     ----"}, {"sha": "c0423d1d3e6691c94ee3d87d5a2569e6eb9c3d31", "filename": "src/test/ui/self/elision/ref-mut-struct-async.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:13:56\n+  --> $DIR/ref-mut-struct-async.rs:12:56\n    |\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                                                        ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:14:9\n+  --> $DIR/ref-mut-struct-async.rs:13:9\n    |\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                               -\n@@ -18,15 +18,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:17:65\n+  --> $DIR/ref-mut-struct-async.rs:16:65\n    |\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                                                 ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:18:9\n+  --> $DIR/ref-mut-struct-async.rs:17:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                       -\n@@ -37,15 +37,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:21:65\n+  --> $DIR/ref-mut-struct-async.rs:20:65\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                                                 ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:22:9\n+  --> $DIR/ref-mut-struct-async.rs:21:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                       -\n@@ -56,15 +56,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:25:74\n+  --> $DIR/ref-mut-struct-async.rs:24:74\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                                          ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:26:9\n+  --> $DIR/ref-mut-struct-async.rs:25:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                               -\n@@ -75,15 +75,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:29:74\n+  --> $DIR/ref-mut-struct-async.rs:28:74\n    |\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                                          ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:30:9\n+  --> $DIR/ref-mut-struct-async.rs:29:9\n    |\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                               -"}, {"sha": "990f485907f8ec70cc9b534e13463af17c7b810b", "filename": "src/test/ui/self/elision/ref-mut-struct-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,6 +1,5 @@\n // edition:2018\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "7d613c574486ce2e03a48c8f7d29a7b33ef492ce", "filename": "src/test/ui/self/elision/ref-mut-struct-async.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:14:9\n+  --> $DIR/ref-mut-struct-async.rs:13:9\n    |\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                               -----------              ----\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:18:9\n+  --> $DIR/ref-mut-struct-async.rs:17:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                       -----------               ----\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:22:9\n+  --> $DIR/ref-mut-struct-async.rs:21:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                       -----------               ----\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:26:9\n+  --> $DIR/ref-mut-struct-async.rs:25:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                               -----------                ----\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:30:9\n+  --> $DIR/ref-mut-struct-async.rs:29:9\n    |\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                               -----------                ----"}, {"sha": "cec7034cd9f9d2668ed011d8ec347f1350300427", "filename": "src/test/ui/self/elision/ref-mut-struct.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.nll.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct.rs:12:9\n+  --> $DIR/ref-mut-struct.rs:11:9\n    |\n LL |     fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                         -               - let's call the lifetime of this reference `'1`\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct.rs:16:9\n+  --> $DIR/ref-mut-struct.rs:15:9\n    |\n LL |     fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                 -                - let's call the lifetime of this reference `'1`\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct.rs:20:9\n+  --> $DIR/ref-mut-struct.rs:19:9\n    |\n LL |     fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                 -                - let's call the lifetime of this reference `'1`\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct.rs:24:9\n+  --> $DIR/ref-mut-struct.rs:23:9\n    |\n LL |     fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                         -                 - let's call the lifetime of this reference `'1`\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct.rs:28:9\n+  --> $DIR/ref-mut-struct.rs:27:9\n    |\n LL |     fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                         -                 - let's call the lifetime of this reference `'1`"}, {"sha": "05e275b19e4c414d6cb422eed2a4db9ff9c769b6", "filename": "src/test/ui/self/elision/ref-mut-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,4 +1,3 @@\n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "c824f2cac983ea79ac85d7c70e7b081e27fbb0b7", "filename": "src/test/ui/self/elision/ref-mut-struct.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct.rs:12:9\n+  --> $DIR/ref-mut-struct.rs:11:9\n    |\n LL |     fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                                         ----     ----\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct.rs:16:9\n+  --> $DIR/ref-mut-struct.rs:15:9\n    |\n LL |     fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                                  ----     ----\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct.rs:20:9\n+  --> $DIR/ref-mut-struct.rs:19:9\n    |\n LL |     fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                                  ----     ----\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct.rs:24:9\n+  --> $DIR/ref-mut-struct.rs:23:9\n    |\n LL |     fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                           ----     ----\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct.rs:28:9\n+  --> $DIR/ref-mut-struct.rs:27:9\n    |\n LL |     fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                           ----     ----"}, {"sha": "46468b693ee980a964ce6421168686c445d45cb7", "filename": "src/test/ui/self/elision/ref-self-async.nll.stderr", "status": "modified", "additions": 8, "deletions": 131, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,136 +1,13 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:22:42\n-   |\n-LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n-   |                                          ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n-error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:23:9\n-   |\n-LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n-   |                       -\n-   |                       |\n-   |                       lifetime `'_` defined here\n-   |                       lifetime `'_` defined here\n-LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:28:48\n-   |\n-LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |                                                ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n-error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:29:9\n-   |\n-LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |                             -\n-   |                             |\n-   |                             lifetime `'_` defined here\n-   |                             lifetime `'_` defined here\n-LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:32:57\n-   |\n-LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |                                                         ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n-error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:33:9\n-   |\n-LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |                                     -\n-   |                                     |\n-   |                                     lifetime `'_` defined here\n-   |                                     lifetime `'_` defined here\n-LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:36:57\n-   |\n-LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |                                                         ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n-error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:37:9\n-   |\n-LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |                                     -\n-   |                                     |\n-   |                                     lifetime `'_` defined here\n-   |                                     lifetime `'_` defined here\n-LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:40:66\n-   |\n-LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |                                                                  ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n-error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:41:9\n-   |\n-LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |                                             -\n-   |                                             |\n-   |                                             lifetime `'_` defined here\n-   |                                             lifetime `'_` defined here\n-LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:44:66\n-   |\n-LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |                                                                  ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n-error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:45:9\n-   |\n-LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |                                             -\n-   |                                             |\n-   |                                             lifetime `'_` defined here\n-   |                                             lifetime `'_` defined here\n-LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:48:69\n+error[E0658]: `Wrap<&Struct, Struct>` cannot be used as the type of `self` without the `arbitrary_self_types` feature\n+  --> $DIR/ref-self-async.rs:47:39\n    |\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n-   |                                                                     ^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n-error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:49:9\n+   |                                       ^^^^^^^^^^^^^^^^^\n    |\n-LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n-   |                                            -\n-   |                                            |\n-   |                                            lifetime `'_` defined here\n-   |                                            lifetime `'_` defined here\n-LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44874\n+   = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n-error: aborting due to 14 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0700`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "6a98b79cb3bbafeb08097042597104c997492fa2", "filename": "src/test/ui/self/elision/ref-self-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,6 +1,5 @@\n // edition:2018\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::marker::PhantomData;"}, {"sha": "b73290b024f8f285f762e624de7f473cb533ed59", "filename": "src/test/ui/self/elision/ref-self-async.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:23:9\n+  --> $DIR/ref-self-async.rs:22:9\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       -----              ----\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:29:9\n+  --> $DIR/ref-self-async.rs:28:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             -----              ----\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:33:9\n+  --> $DIR/ref-self-async.rs:32:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ----\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:37:9\n+  --> $DIR/ref-self-async.rs:36:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ----\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:41:9\n+  --> $DIR/ref-self-async.rs:40:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             -----                ----\n@@ -49,7 +49,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:45:9\n+  --> $DIR/ref-self-async.rs:44:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                             -----                ----\n@@ -59,7 +59,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:49:9\n+  --> $DIR/ref-self-async.rs:48:9\n    |\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                            -----                    ---"}, {"sha": "6f413a7f49fb8db518ebbc46f1df1643a15d915a", "filename": "src/test/ui/self/elision/ref-struct-async.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:13:52\n+  --> $DIR/ref-struct-async.rs:12:52\n    |\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                                                    ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:14:9\n+  --> $DIR/ref-struct-async.rs:13:9\n    |\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                               -\n@@ -18,15 +18,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:17:61\n+  --> $DIR/ref-struct-async.rs:16:61\n    |\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:18:9\n+  --> $DIR/ref-struct-async.rs:17:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                       -\n@@ -37,15 +37,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:21:61\n+  --> $DIR/ref-struct-async.rs:20:61\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:22:9\n+  --> $DIR/ref-struct-async.rs:21:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                       -\n@@ -56,15 +56,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:25:70\n+  --> $DIR/ref-struct-async.rs:24:70\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                                                      ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:26:9\n+  --> $DIR/ref-struct-async.rs:25:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                               -\n@@ -75,15 +75,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:29:66\n+  --> $DIR/ref-struct-async.rs:28:66\n    |\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:30:9\n+  --> $DIR/ref-struct-async.rs:29:9\n    |\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                           -"}, {"sha": "e6bd5418c8d92b8b6986e41aecd277c12159ef22", "filename": "src/test/ui/self/elision/ref-struct-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,6 +1,5 @@\n // edition:2018\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "fc85450c4a7cde14668aa951960dc0913e002543", "filename": "src/test/ui/self/elision/ref-struct-async.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:14:9\n+  --> $DIR/ref-struct-async.rs:13:9\n    |\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                               -------              ----\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:18:9\n+  --> $DIR/ref-struct-async.rs:17:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                       -------               ----\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:22:9\n+  --> $DIR/ref-struct-async.rs:21:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                       -------               ----\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:26:9\n+  --> $DIR/ref-struct-async.rs:25:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                               -------                ----\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:30:9\n+  --> $DIR/ref-struct-async.rs:29:9\n    |\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                           -------                ----"}, {"sha": "31bb9f49a6c4d5dea8f5438cf6a60ae4182c4c24", "filename": "src/test/ui/self/elision/ref-struct.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.nll.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ref-struct.rs:12:9\n+  --> $DIR/ref-struct.rs:11:9\n    |\n LL |     fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                         -           - let's call the lifetime of this reference `'1`\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct.rs:16:9\n+  --> $DIR/ref-struct.rs:15:9\n    |\n LL |     fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                 -            - let's call the lifetime of this reference `'1`\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct.rs:20:9\n+  --> $DIR/ref-struct.rs:19:9\n    |\n LL |     fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                 -            - let's call the lifetime of this reference `'1`\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct.rs:24:9\n+  --> $DIR/ref-struct.rs:23:9\n    |\n LL |     fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                         -             - let's call the lifetime of this reference `'1`\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct.rs:28:9\n+  --> $DIR/ref-struct.rs:27:9\n    |\n LL |     fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                     -             - let's call the lifetime of this reference `'1`"}, {"sha": "73711a7feead3a8dfab0e6c3968c0647063b94b4", "filename": "src/test/ui/self/elision/ref-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,4 +1,3 @@\n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "a69673091431c43a6921362a8a8810441eefc37c", "filename": "src/test/ui/self/elision/ref-struct.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct.rs:12:9\n+  --> $DIR/ref-struct.rs:11:9\n    |\n LL |     fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                                     ----     ----\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct.rs:16:9\n+  --> $DIR/ref-struct.rs:15:9\n    |\n LL |     fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                              ----     ----\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct.rs:20:9\n+  --> $DIR/ref-struct.rs:19:9\n    |\n LL |     fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                              ----     ----\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct.rs:24:9\n+  --> $DIR/ref-struct.rs:23:9\n    |\n LL |     fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                                       ----     ----\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct.rs:28:9\n+  --> $DIR/ref-struct.rs:27:9\n    |\n LL |     fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                                   ----     ----"}, {"sha": "eb01cfc9768e64d06dd77b5b295be53c2206efaf", "filename": "src/test/ui/self/elision/self-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fself-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fself-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fself-async.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "574b7e7c9b3d66366053c771e44a52b20865c207", "filename": "src/test/ui/self/elision/self.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fself.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fself.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fself.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "e018e0daf9620906d71d17dbd62c2e7bfb4a7930", "filename": "src/test/ui/self/elision/struct-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct-async.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "d1ac99d13be7fa039fc6f0a0a4be9ce527427c69", "filename": "src/test/ui/self/elision/struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "35a2fe79d5e66e380eaf1f833ae1465308058d28", "filename": "src/test/ui/similar-tokens.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fsimilar-tokens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Fsimilar-tokens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimilar-tokens.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -2,7 +2,10 @@ error: expected one of `,`, `::`, `as`, or `}`, found `.`\n   --> $DIR/similar-tokens.rs:7:10\n    |\n LL | use x::{A. B};\n-   |          ^ expected one of `,`, `::`, `as`, or `}`\n+   |          ^\n+   |          |\n+   |          expected one of `,`, `::`, `as`, or `}`\n+   |          help: missing `,`\n \n error: aborting due to previous error\n "}, {"sha": "39e817168f610cc7c2291ac30333c5a7c3c8681d", "filename": "src/test/ui/traits/trait-object-with-self-in-projection-output-repeated-supertrait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-repeated-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-repeated-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-repeated-supertrait.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -4,7 +4,7 @@\n #![crate_name = \"trait_test\"]\n \n // Regression test related to #56288. Check that a supertrait projection (of\n-// `Output`) that references `Self` is ok if there is another occurence of\n+// `Output`) that references `Self` is ok if there is another occurrence of\n // the same supertrait that specifies the projection explicitly, even if\n // the projection's associated type is not explicitly specified in the object type.\n //"}, {"sha": "bfa0b32fd458ae0063871d32b819b2b02586343f", "filename": "src/test/ui/tuple/tuple-struct-fields/test.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -2,7 +2,9 @@ error: expected one of `)` or `,`, found `(`\n   --> $DIR/test.rs:4:26\n    |\n LL |     struct S2(pub((foo)) ());\n-   |                          ^ expected one of `)` or `,`\n+   |                         -^ expected one of `)` or `,`\n+   |                         |\n+   |                         help: missing `,`\n \n error[E0412]: cannot find type `foo` in this scope\n   --> $DIR/test.rs:4:20"}, {"sha": "d924c351439bd91749108bc8634598674eee7789", "filename": "src/test/ui/tuple/tuple-struct-fields/test2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -2,7 +2,9 @@ error: expected one of `)` or `,`, found `(`\n   --> $DIR/test2.rs:5:26\n    |\n LL |         struct S3(pub $t ());\n-   |                          ^ expected one of `)` or `,`\n+   |                         -^ expected one of `)` or `,`\n+   |                         |\n+   |                         help: missing `,`\n ...\n LL |     define_struct! { (foo) }\n    |     ------------------------ in this macro invocation"}, {"sha": "50cac6c179e31a29fa9f8fd22cbcac3e5f7262a3", "filename": "src/test/ui/tuple/tuple-struct-fields/test3.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -2,7 +2,9 @@ error: expected one of `)` or `,`, found `(`\n   --> $DIR/test3.rs:5:27\n    |\n LL |         struct S3(pub($t) ());\n-   |                           ^ expected one of `)` or `,`\n+   |                          -^ expected one of `)` or `,`\n+   |                          |\n+   |                          help: missing `,`\n ...\n LL |     define_struct! { foo }\n    |     ---------------------- in this macro invocation"}, {"sha": "7414611a748936fb6797b9175a04f0176ca32558", "filename": "src/test/ui/type-alias-impl-trait/issue-63263-closure-return.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -0,0 +1,13 @@\n+// Regression test for issue #63263.\n+// Tests that we properly handle closures with an explicit return type\n+// that return an opaque type.\n+\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+\n+pub type Closure = impl FnOnce();\n+\n+fn main() {\n+    || -> Closure { || () };\n+}"}, {"sha": "32efc7e17ad7e39d6e1de622777059f806158564", "filename": "src/test/ui/unsized/unsized-fn-param.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -0,0 +1,20 @@\n+use std::convert::AsRef;\n+use std::path::Path;\n+\n+fn foo11(_bar: &dyn AsRef<Path>, _baz: &str) {}\n+fn foo12(_bar: &str, _baz: &dyn AsRef<Path>) {}\n+\n+fn foo21(_bar: &dyn AsRef<str>, _baz: &str) {}\n+fn foo22(_bar: &str, _baz: &dyn AsRef<str>) {}\n+\n+fn main() {\n+    foo11(\"bar\", &\"baz\"); //~ ERROR the size for values of type\n+    foo11(&\"bar\", &\"baz\");\n+    foo12(&\"bar\", \"baz\"); //~ ERROR the size for values of type\n+    foo12(&\"bar\", &\"baz\");\n+\n+    foo21(\"bar\", &\"baz\"); //~ ERROR the size for values of type\n+    foo21(&\"bar\", &\"baz\");\n+    foo22(&\"bar\", \"baz\"); //~ ERROR the size for values of type\n+    foo22(&\"bar\", &\"baz\");\n+}"}, {"sha": "ed2c2e75cbd441f88666ffe1d93d7441ad55a87f", "filename": "src/test/ui/unsized/unsized-fn-param.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -0,0 +1,43 @@\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n+  --> $DIR/unsized-fn-param.rs:11:11\n+   |\n+LL |     foo11(\"bar\", &\"baz\");\n+   |           ^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `str`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: required for the cast to the object type `dyn std::convert::AsRef<std::path::Path>`\n+\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n+  --> $DIR/unsized-fn-param.rs:13:19\n+   |\n+LL |     foo12(&\"bar\", \"baz\");\n+   |                   ^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `str`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: required for the cast to the object type `dyn std::convert::AsRef<std::path::Path>`\n+\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n+  --> $DIR/unsized-fn-param.rs:16:11\n+   |\n+LL |     foo21(\"bar\", &\"baz\");\n+   |           ^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `str`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: required for the cast to the object type `dyn std::convert::AsRef<str>`\n+\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n+  --> $DIR/unsized-fn-param.rs:18:19\n+   |\n+LL |     foo22(&\"bar\", \"baz\");\n+   |                   ^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `str`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: required for the cast to the object type `dyn std::convert::AsRef<str>`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "20636c86e1e96fd70006c5622624f98bef68a34f", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b604a91b7667106495a60291a74ce66923c9a8a/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=6b604a91b7667106495a60291a74ce66923c9a8a", "patch": "@@ -141,17 +141,28 @@ pub fn check(path: &Path, bad: &mut bool) {\n     super::walk(path, &mut super::filter_dirs, &mut |entry, contents| {\n         let file = entry.path();\n         let filename = file.file_name().unwrap().to_string_lossy();\n-        let extensions = [\".rs\", \".py\", \".js\", \".sh\", \".c\", \".cpp\", \".h\"];\n+        let extensions = [\".rs\", \".py\", \".js\", \".sh\", \".c\", \".cpp\", \".h\", \".md\"];\n         if extensions.iter().all(|e| !filename.ends_with(e)) ||\n            filename.starts_with(\".#\") {\n             return\n         }\n \n+        if filename.ends_with(\".md\") &&\n+           file.parent()\n+               .unwrap()\n+               .file_name()\n+               .unwrap()\n+               .to_string_lossy() != \"error_codes\" {\n+            // We don't want to check all \".md\" files (almost of of them aren't compliant\n+            // currently), just the long error code explanation ones.\n+            return;\n+        }\n+\n         if contents.is_empty() {\n             tidy_error!(bad, \"{}: empty file\", file.display());\n         }\n \n-        let max_columns = if filename == \"error_codes.rs\" {\n+        let max_columns = if filename == \"error_codes.rs\" || filename.ends_with(\".md\") {\n             ERROR_CODE_COLS\n         } else {\n             COLS"}]}