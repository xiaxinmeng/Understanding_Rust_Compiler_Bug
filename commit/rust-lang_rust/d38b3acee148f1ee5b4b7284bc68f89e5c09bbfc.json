{"sha": "d38b3acee148f1ee5b4b7284bc68f89e5c09bbfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzOGIzYWNlZTE0OGYxZWU1YjRiNzI4NGJjNjhmODllNWMwOWJiZmM=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-10-07T13:14:33Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-10-07T13:45:33Z"}, "message": "Simplify wrap_str()", "tree": {"sha": "0d0efdc356888abb5328ec6b58843fcdfdd7087b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d0efdc356888abb5328ec6b58843fcdfdd7087b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d38b3acee148f1ee5b4b7284bc68f89e5c09bbfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d38b3acee148f1ee5b4b7284bc68f89e5c09bbfc", "html_url": "https://github.com/rust-lang/rust/commit/d38b3acee148f1ee5b4b7284bc68f89e5c09bbfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d38b3acee148f1ee5b4b7284bc68f89e5c09bbfc/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c046a261a80277441a59d339a3b5afb3a92d3d29", "url": "https://api.github.com/repos/rust-lang/rust/commits/c046a261a80277441a59d339a3b5afb3a92d3d29", "html_url": "https://github.com/rust-lang/rust/commit/c046a261a80277441a59d339a3b5afb3a92d3d29"}], "stats": {"total": 56, "additions": 27, "deletions": 29}, "files": [{"sha": "649a6070fd2ab3ab183fae8a3f5a877e664a7964", "filename": "src/utils.rs", "status": "modified", "additions": 27, "deletions": 29, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d38b3acee148f1ee5b4b7284bc68f89e5c09bbfc/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38b3acee148f1ee5b4b7284bc68f89e5c09bbfc/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=d38b3acee148f1ee5b4b7284bc68f89e5c09bbfc", "patch": "@@ -390,39 +390,37 @@ macro_rules! skip_out_of_file_lines_range_visitor {\n     }\n }\n \n-// Wraps string-like values in an Option. Returns Some when the string adheres\n-// to the Rewrite constraints defined for the Rewrite trait and else otherwise.\n+// Wraps String in an Option. Returns Some when the string adheres to the\n+// Rewrite constraints defined for the Rewrite trait and else otherwise.\n pub fn wrap_str(s: String, max_width: usize, shape: Shape) -> Option<String> {\n-    {\n-        let snippet = s.as_ref();\n-\n-        if !snippet.is_empty() {\n-            if !snippet.contains('\\n') && snippet.len() > shape.width {\n-                return None;\n-            } else {\n-                let mut lines = snippet.lines();\n-\n-                if lines.next().unwrap().len() > shape.width {\n-                    return None;\n-                }\n-\n-                // The other lines must fit within the maximum width.\n-                if lines.any(|line| line.len() > max_width) {\n-                    return None;\n-                }\n+    if is_valid_str(&s, max_width, shape) {\n+        Some(s)\n+    } else {\n+        None\n+    }\n+}\n \n-                // `width` is the maximum length of the last line, excluding\n-                // indentation.\n-                // A special check for the last line, since the caller may\n-                // place trailing characters on this line.\n-                if snippet.lines().rev().next().unwrap().len() > shape.used_width() + shape.width {\n-                    return None;\n-                }\n-            }\n+fn is_valid_str(snippet: &str, max_width: usize, shape: Shape) -> bool {\n+    if !snippet.is_empty() {\n+        // First line must fits with `shape.width`.\n+        if first_line_width(snippet) > shape.width {\n+            return false;\n+        }\n+        // If the snippet does not include newline, we are done.\n+        if first_line_width(snippet) == snippet.len() {\n+            return true;\n+        }\n+        // The other lines must fit within the maximum width.\n+        if snippet.lines().skip(1).any(|line| line.len() > max_width) {\n+            return false;\n+        }\n+        // A special check for the last line, since the caller may\n+        // place trailing characters on this line.\n+        if last_line_width(snippet) > shape.used_width() + shape.width {\n+            return false;\n         }\n     }\n-\n-    Some(s)\n+    true\n }\n \n #[inline]"}]}