{"sha": "7b295eea4296eedf7858a001297eadfaace253d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMjk1ZWVhNDI5NmVlZGY3ODU4YTAwMTI5N2VhZGZhYWNlMjUzZDM=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-05-18T15:43:52Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-05-28T07:43:24Z"}, "message": "add NullOp::SizeOf and BinOp::Offset", "tree": {"sha": "fb4cbb9bbeac2d6aab802a283d4a9d301638ad2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb4cbb9bbeac2d6aab802a283d4a9d301638ad2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b295eea4296eedf7858a001297eadfaace253d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b295eea4296eedf7858a001297eadfaace253d3", "html_url": "https://github.com/rust-lang/rust/commit/7b295eea4296eedf7858a001297eadfaace253d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b295eea4296eedf7858a001297eadfaace253d3/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bcd6fa5712520061fcc2504e1f0aae62c09e514", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bcd6fa5712520061fcc2504e1f0aae62c09e514", "html_url": "https://github.com/rust-lang/rust/commit/3bcd6fa5712520061fcc2504e1f0aae62c09e514"}], "stats": {"total": 105, "additions": 74, "deletions": 31}, "files": [{"sha": "3563dbe50966f0e0f9b2a3ed2a9a164305089fd1", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=7b295eea4296eedf7858a001297eadfaace253d3", "patch": "@@ -315,7 +315,8 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a, 'tcx>> for mir::Rvalue<'tcx>\n             mir::Rvalue::Discriminant(ref lvalue) => {\n                 lvalue.hash_stable(hcx, hasher);\n             }\n-            mir::Rvalue::Box(ty) => {\n+            mir::Rvalue::NullaryOp(op, ty) => {\n+                op.hash_stable(hcx, hasher);\n                 ty.hash_stable(hcx, hasher);\n             }\n             mir::Rvalue::Aggregate(ref kind, ref operands) => {\n@@ -374,14 +375,19 @@ impl_stable_hash_for!(enum mir::BinOp {\n     Le,\n     Ne,\n     Ge,\n-    Gt\n+    Gt,\n+    Offset\n });\n \n impl_stable_hash_for!(enum mir::UnOp {\n     Not,\n     Neg\n });\n \n+impl_stable_hash_for!(enum mir::NullOp {\n+    Box,\n+    SizeOf\n+});\n \n impl_stable_hash_for!(struct mir::Constant<'tcx> { span, ty, literal });\n "}, {"sha": "80c42917196dba4ce5c151ea14e4a3a3e7024455", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=7b295eea4296eedf7858a001297eadfaace253d3", "patch": "@@ -1046,6 +1046,7 @@ pub enum Rvalue<'tcx> {\n     BinaryOp(BinOp, Operand<'tcx>, Operand<'tcx>),\n     CheckedBinaryOp(BinOp, Operand<'tcx>, Operand<'tcx>),\n \n+    NullaryOp(NullOp, Ty<'tcx>),\n     UnaryOp(UnOp, Operand<'tcx>),\n \n     /// Read the discriminant of an ADT.\n@@ -1054,9 +1055,6 @@ pub enum Rvalue<'tcx> {\n     /// be defined to return, say, a 0) if ADT is not an enum.\n     Discriminant(Lvalue<'tcx>),\n \n-    /// Creates an *uninitialized* Box\n-    Box(Ty<'tcx>),\n-\n     /// Create an aggregate value, like a tuple or struct.  This is\n     /// only needed because we want to distinguish `dest = Foo { x:\n     /// ..., y: ... }` from `dest.x = ...; dest.y = ...;` in the case\n@@ -1132,6 +1130,8 @@ pub enum BinOp {\n     Ge,\n     /// The `>` operator (greater than)\n     Gt,\n+    /// The `ptr.offset` operator\n+    Offset,\n }\n \n impl BinOp {\n@@ -1144,6 +1144,14 @@ impl BinOp {\n     }\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n+pub enum NullOp {\n+    /// Return the size of a value of that type\n+    SizeOf,\n+    /// Create a new uninitialized box for a value of that type\n+    Box,\n+}\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub enum UnOp {\n     /// The `!` operator for logical inversion\n@@ -1167,7 +1175,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n             }\n             UnaryOp(ref op, ref a) => write!(fmt, \"{:?}({:?})\", op, a),\n             Discriminant(ref lval) => write!(fmt, \"discriminant({:?})\", lval),\n-            Box(ref t) => write!(fmt, \"Box({:?})\", t),\n+            NullaryOp(ref op, ref t) => write!(fmt, \"{:?}({:?})\", op, t),\n             Ref(_, borrow_kind, ref lv) => {\n                 let kind_str = match borrow_kind {\n                     BorrowKind::Shared => \"\",\n@@ -1601,7 +1609,7 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n                 CheckedBinaryOp(op, rhs.fold_with(folder), lhs.fold_with(folder)),\n             UnaryOp(op, ref val) => UnaryOp(op, val.fold_with(folder)),\n             Discriminant(ref lval) => Discriminant(lval.fold_with(folder)),\n-            Box(ty) => Box(ty.fold_with(folder)),\n+            NullaryOp(op, ty) => NullaryOp(op, ty.fold_with(folder)),\n             Aggregate(ref kind, ref fields) => {\n                 let kind = box match **kind {\n                     AggregateKind::Array(ty) => AggregateKind::Array(ty.fold_with(folder)),\n@@ -1629,7 +1637,7 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n                 rhs.visit_with(visitor) || lhs.visit_with(visitor),\n             UnaryOp(_, ref val) => val.visit_with(visitor),\n             Discriminant(ref lval) => lval.visit_with(visitor),\n-            Box(ty) => ty.visit_with(visitor),\n+            NullaryOp(_, ty) => ty.visit_with(visitor),\n             Aggregate(ref kind, ref fields) => {\n                 (match **kind {\n                     AggregateKind::Array(ty) => ty.visit_with(visitor),"}, {"sha": "6078778a61d502977940df21bf2c4d75e4752cac", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=7b295eea4296eedf7858a001297eadfaace253d3", "patch": "@@ -166,7 +166,8 @@ impl<'tcx> Rvalue<'tcx> {\n                 let ty = op.ty(tcx, lhs_ty, rhs_ty);\n                 tcx.intern_tup(&[ty, tcx.types.bool], false)\n             }\n-            Rvalue::UnaryOp(_, ref operand) => {\n+            Rvalue::UnaryOp(UnOp::Not, ref operand) |\n+            Rvalue::UnaryOp(UnOp::Neg, ref operand) => {\n                 operand.ty(mir, tcx)\n             }\n             Rvalue::Discriminant(ref lval) => {\n@@ -179,9 +180,8 @@ impl<'tcx> Rvalue<'tcx> {\n                     bug!(\"Rvalue::Discriminant on Lvalue of type {:?}\", ty);\n                 }\n             }\n-            Rvalue::Box(t) => {\n-                tcx.mk_box(t)\n-            }\n+            Rvalue::NullaryOp(NullOp::Box, t) => tcx.mk_box(t),\n+            Rvalue::NullaryOp(NullOp::SizeOf, _) => tcx.types.usize,\n             Rvalue::Aggregate(ref ak, ref ops) => {\n                 match **ak {\n                     AggregateKind::Array(ty) => {\n@@ -227,7 +227,7 @@ impl<'tcx> BinOp {\n                 assert_eq!(lhs_ty, rhs_ty);\n                 lhs_ty\n             }\n-            &BinOp::Shl | &BinOp::Shr => {\n+            &BinOp::Shl | &BinOp::Shr | &BinOp::Offset => {\n                 lhs_ty // lhs_ty can be != rhs_ty\n             }\n             &BinOp::Eq | &BinOp::Lt | &BinOp::Le |\n@@ -270,7 +270,8 @@ impl BinOp {\n             BinOp::Lt => hir::BinOp_::BiLt,\n             BinOp::Gt => hir::BinOp_::BiGt,\n             BinOp::Le => hir::BinOp_::BiLe,\n-            BinOp::Ge => hir::BinOp_::BiGe\n+            BinOp::Ge => hir::BinOp_::BiGe,\n+            BinOp::Offset => unreachable!()\n         }\n     }\n }"}, {"sha": "780ce736bfd3cd1b517b762cc34647db95b38161", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=7b295eea4296eedf7858a001297eadfaace253d3", "patch": "@@ -509,7 +509,7 @@ macro_rules! make_mir_visitor {\n                         self.visit_lvalue(lvalue, LvalueContext::Inspect, location);\n                     }\n \n-                    Rvalue::Box(ref $($mutability)* ty) => {\n+                    Rvalue::NullaryOp(_op, ref $($mutability)* ty) => {\n                         self.visit_ty(ty);\n                     }\n "}, {"sha": "b03d2a775df71de964255b3fadbe0226b189e620", "filename": "src/librustc_borrowck/borrowck/mir/gather_moves.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs?ref=7b295eea4296eedf7858a001297eadfaace253d3", "patch": "@@ -438,7 +438,8 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n             Rvalue::Ref(..) |\n             Rvalue::Discriminant(..) |\n             Rvalue::Len(..) |\n-            Rvalue::Box(..) => {\n+            Rvalue::NullaryOp(NullOp::SizeOf, _) |\n+            Rvalue::NullaryOp(NullOp::Box, _) => {\n                 // This returns an rvalue with uninitialized contents. We can't\n                 // move out of it here because it is an rvalue - assignments always\n                 // completely initialize their lvalue."}, {"sha": "2884b60fdd8a9ced6c6044e8af4e78a04afeb330", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=7b295eea4296eedf7858a001297eadfaace253d3", "patch": "@@ -97,7 +97,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let value = this.hir.mirror(value);\n                 let result = this.temp(expr.ty, expr_span);\n                 // to start, malloc some memory of suitable type (thus far, uninitialized):\n-                this.cfg.push_assign(block, source_info, &result, Rvalue::Box(value.ty));\n+                let box_ = Rvalue::NullaryOp(NullOp::Box, value.ty);\n+                this.cfg.push_assign(block, source_info, &result, box_);\n                 this.in_scope(value_extents, block, |this| {\n                     // schedule a shallow free of that memory, lest we unwind:\n                     this.schedule_box_free(expr_span, value_extents, &result, value.ty);"}, {"sha": "fa88eca6ec3f09f2cd02f1428d5e418c24dcf302", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=7b295eea4296eedf7858a001297eadfaace253d3", "patch": "@@ -53,7 +53,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegionsVisitor<'a, 'tcx> {\n             Rvalue::CheckedBinaryOp(..) |\n             Rvalue::UnaryOp(..) |\n             Rvalue::Discriminant(..) |\n-            Rvalue::Box(..) |\n+            Rvalue::NullaryOp(..) |\n             Rvalue::Aggregate(..) => {\n                 // These variants don't contain regions.\n             }"}, {"sha": "a938e5e29cd918b7dfa0f464102228c90fce0578", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=7b295eea4296eedf7858a001297eadfaace253d3", "patch": "@@ -595,7 +595,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n         match *rvalue {\n             Rvalue::Use(_) |\n             Rvalue::Repeat(..) |\n-            Rvalue::UnaryOp(..) |\n+            Rvalue::UnaryOp(UnOp::Neg, _) |\n+            Rvalue::UnaryOp(UnOp::Not, _) |\n+            Rvalue::NullaryOp(NullOp::SizeOf, _) |\n             Rvalue::CheckedBinaryOp(..) |\n             Rvalue::Cast(CastKind::ReifyFnPointer, ..) |\n             Rvalue::Cast(CastKind::UnsafeFnPointer, ..) |\n@@ -703,7 +705,8 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 if let ty::TyRawPtr(_) = lhs.ty(self.mir, self.tcx).sty {\n                     assert!(op == BinOp::Eq || op == BinOp::Ne ||\n                             op == BinOp::Le || op == BinOp::Lt ||\n-                            op == BinOp::Ge || op == BinOp::Gt);\n+                            op == BinOp::Ge || op == BinOp::Gt ||\n+                            op == BinOp::Offset);\n \n                     self.add(Qualif::NOT_CONST);\n                     if self.mode != Mode::Fn {\n@@ -719,7 +722,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 }\n             }\n \n-            Rvalue::Box(_) => {\n+            Rvalue::NullaryOp(NullOp::Box, _) => {\n                 self.add(Qualif::NOT_CONST);\n                 if self.mode != Mode::Fn {\n                     struct_span_err!(self.tcx.sess, self.span, E0010,"}, {"sha": "e29da3a6496552cc9b43bef6b449649e2f4c7a17", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=7b295eea4296eedf7858a001297eadfaace253d3", "patch": "@@ -186,7 +186,7 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n             Rvalue::CheckedBinaryOp(..) => \"Rvalue::CheckedBinaryOp\",\n             Rvalue::UnaryOp(..) => \"Rvalue::UnaryOp\",\n             Rvalue::Discriminant(..) => \"Rvalue::Discriminant\",\n-            Rvalue::Box(..) => \"Rvalue::Box\",\n+            Rvalue::NullaryOp(..) => \"Rvalue::NullaryOp\",\n             Rvalue::Aggregate(ref kind, ref _operands) => {\n                 // AggregateKind is not distinguished by visit API, so\n                 // record it. (`super_rvalue` handles `_operands`.)"}, {"sha": "dc4e947b0f61ecd0559cc36b23c100745720f0e5", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=7b295eea4296eedf7858a001297eadfaace253d3", "patch": "@@ -502,7 +502,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     _ => bug!(),\n                 }\n             }\n-            mir::Rvalue::Box(..) => {\n+            mir::Rvalue::NullaryOp(mir::NullOp::Box, _) => {\n                 let tcx = self.scx.tcx();\n                 let exchange_malloc_fn_def_id = tcx\n                     .lang_items"}, {"sha": "fa400b54d2708ed98b4d2e7f0d7df0bc54617ec9", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=7b295eea4296eedf7858a001297eadfaace253d3", "patch": "@@ -76,6 +76,7 @@ pub fn size_and_align_of_dst<'a, 'tcx>(bcx: &Builder<'a, 'tcx>, t: Ty<'tcx>, inf\n         let align = C_uint(bcx.ccx, align);\n         return (size, align);\n     }\n+    assert!(!info.is_null());\n     match t.sty {\n         ty::TyAdt(def, substs) => {\n             let ccx = bcx.ccx;"}, {"sha": "4967ef2f7908b2236ff821e6efbab6363b0e3cfd", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=7b295eea4296eedf7858a001297eadfaace253d3", "patch": "@@ -796,6 +796,12 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                 Const::new(llval, operand.ty)\n             }\n \n+            mir::Rvalue::NullaryOp(mir::NullOp::SizeOf, ty) => {\n+                assert!(self.ccx.shared().type_is_sized(ty));\n+                let llval = C_uint(self.ccx, self.ccx.size_of(ty));\n+                Const::new(llval, tcx.types.usize)\n+            }\n+\n             _ => span_bug!(span, \"{:?} in constant\", rvalue)\n         };\n \n@@ -870,6 +876,7 @@ pub fn const_scalar_binop(op: mir::BinOp,\n                     llvm::LLVMConstICmp(cmp, lhs, rhs)\n                 }\n             }\n+            mir::BinOp::Offset => unreachable!(\"BinOp::Offset in const-eval!\")\n         }\n     }\n }"}, {"sha": "a12d0fec1cdd06f31a0a00bb07562f4b06967933", "filename": "src/librustc_trans/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Foperand.rs?ref=7b295eea4296eedf7858a001297eadfaace253d3", "patch": "@@ -114,7 +114,7 @@ impl<'a, 'tcx> OperandRef<'tcx> {\n \n     pub fn deref(self) -> LvalueRef<'tcx> {\n         let projected_ty = self.ty.builtin_deref(true, ty::NoPreference)\n-            .unwrap().ty;\n+            .unwrap_or_else(|| bug!(\"deref of non-pointer {:?}\", self)).ty;\n         let (llptr, llextra) = match self.val {\n             OperandValue::Immediate(llptr) => (llptr, ptr::null_mut()),\n             OperandValue::Pair(llptr, llextra) => (llptr, llextra),"}, {"sha": "b2f44a5d89f848d054463a08f96855522da25bd8", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b295eea4296eedf7858a001297eadfaace253d3/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=7b295eea4296eedf7858a001297eadfaace253d3", "patch": "@@ -432,7 +432,17 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                 })\n             }\n \n-            mir::Rvalue::Box(content_ty) => {\n+            mir::Rvalue::NullaryOp(mir::NullOp::SizeOf, ty) => {\n+                assert!(bcx.ccx.shared().type_is_sized(ty));\n+                let val = C_uint(bcx.ccx, bcx.ccx.size_of(ty));\n+                let tcx = bcx.tcx();\n+                (bcx, OperandRef {\n+                    val: OperandValue::Immediate(val),\n+                    ty: tcx.types.usize,\n+                })\n+            }\n+\n+            mir::Rvalue::NullaryOp(mir::NullOp::Box, content_ty) => {\n                 let content_ty: Ty<'tcx> = self.monomorphize(&content_ty);\n                 let llty = type_of::type_of(bcx.ccx, content_ty);\n                 let llsize = machine::llsize_of(bcx.ccx, llty);\n@@ -515,6 +525,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n             mir::BinOp::BitOr => bcx.or(lhs, rhs),\n             mir::BinOp::BitAnd => bcx.and(lhs, rhs),\n             mir::BinOp::BitXor => bcx.xor(lhs, rhs),\n+            mir::BinOp::Offset => bcx.inbounds_gep(lhs, &[rhs]),\n             mir::BinOp::Shl => common::build_unchecked_lshift(bcx, lhs, rhs),\n             mir::BinOp::Shr => common::build_unchecked_rshift(bcx, input_ty, lhs, rhs),\n             mir::BinOp::Ne | mir::BinOp::Lt | mir::BinOp::Gt |\n@@ -660,7 +671,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n             mir::Rvalue::CheckedBinaryOp(..) |\n             mir::Rvalue::UnaryOp(..) |\n             mir::Rvalue::Discriminant(..) |\n-            mir::Rvalue::Box(..) |\n+            mir::Rvalue::NullaryOp(..) |\n             mir::Rvalue::Use(..) => // (*)\n                 true,\n             mir::Rvalue::Repeat(..) |"}, {"sha": "838c180c70b75c539f6f0c9f42031b77dc8d5855", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7b295eea4296eedf7858a001297eadfaace253d3/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7b295eea4296eedf7858a001297eadfaace253d3/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=7b295eea4296eedf7858a001297eadfaace253d3", "patch": "@@ -781,11 +781,15 @@ extern \"C\" void LLVMRustWriteTypeToString(LLVMTypeRef Ty, RustStringRef Str) {\n extern \"C\" void LLVMRustWriteValueToString(LLVMValueRef V,\n                                            RustStringRef Str) {\n   RawRustStringOstream OS(Str);\n-  OS << \"(\";\n-  unwrap<llvm::Value>(V)->getType()->print(OS);\n-  OS << \":\";\n-  unwrap<llvm::Value>(V)->print(OS);\n-  OS << \")\";\n+  if (!V) {\n+    OS << \"(null)\";\n+  } else {\n+    OS << \"(\";\n+    unwrap<llvm::Value>(V)->getType()->print(OS);\n+    OS << \":\";\n+    unwrap<llvm::Value>(V)->print(OS);\n+    OS << \")\";\n+  }\n }\n \n extern \"C\" bool LLVMRustLinkInExternalBitcode(LLVMModuleRef DstRef, char *BC,"}]}