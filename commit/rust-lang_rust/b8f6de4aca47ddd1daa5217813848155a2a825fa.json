{"sha": "b8f6de4aca47ddd1daa5217813848155a2a825fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZjZkZTRhY2E0N2RkZDFkYWE1MjE3ODEzODQ4MTU1YTJhODI1ZmE=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-04-18T21:39:03Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-04-25T17:28:09Z"}, "message": "Generalize discriminant info calls for generators and ADTs", "tree": {"sha": "9c7ea87c73cf976fcca8be1b17f2971859ef2cb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c7ea87c73cf976fcca8be1b17f2971859ef2cb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8f6de4aca47ddd1daa5217813848155a2a825fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8f6de4aca47ddd1daa5217813848155a2a825fa", "html_url": "https://github.com/rust-lang/rust/commit/b8f6de4aca47ddd1daa5217813848155a2a825fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8f6de4aca47ddd1daa5217813848155a2a825fa/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f772c39bf9fb3af982bb9a4728d4fdc7308a8bbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f772c39bf9fb3af982bb9a4728d4fdc7308a8bbd", "html_url": "https://github.com/rust-lang/rust/commit/f772c39bf9fb3af982bb9a4728d4fdc7308a8bbd"}], "stats": {"total": 146, "additions": 95, "deletions": 51}, "files": [{"sha": "82696c22a22be36eed50b336918e23d574dc0bfe", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b8f6de4aca47ddd1daa5217813848155a2a825fa/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f6de4aca47ddd1daa5217813848155a2a825fa/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=b8f6de4aca47ddd1daa5217813848155a2a825fa", "patch": "@@ -41,6 +41,7 @@ use std::ops::Deref;\n use rustc_data_structures::sync::{self, Lrc, ParallelIterator, par_iter};\n use std::slice;\n use std::{mem, ptr};\n+use std::ops::Range;\n use syntax::ast::{self, Name, Ident, NodeId};\n use syntax::attr;\n use syntax::ext::hygiene::Mark;\n@@ -2418,11 +2419,17 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n         })\n     }\n \n+    #[inline]\n+    pub fn variant_range(&self) -> Range<VariantIdx> {\n+        (VariantIdx::new(0)..VariantIdx::new(self.variants.len()))\n+    }\n+\n     /// Computes the discriminant value used by a specific variant.\n     /// Unlike `discriminants`, this is (amortized) constant-time,\n     /// only doing at most one query for evaluating an explicit\n     /// discriminant (the last one before the requested variant),\n     /// assuming there are no constant-evaluation errors there.\n+    #[inline]\n     pub fn discriminant_for_variant(&self,\n                                     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                     variant_index: VariantIdx)"}, {"sha": "331c54d1d468197411281040d7dac34b1f5fb510", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 57, "deletions": 7, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/b8f6de4aca47ddd1daa5217813848155a2a825fa/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f6de4aca47ddd1daa5217813848155a2a825fa/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=b8f6de4aca47ddd1daa5217813848155a2a825fa", "patch": "@@ -9,7 +9,7 @@ use polonius_engine::Atom;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_macros::HashStable;\n use crate::ty::subst::{InternalSubsts, Subst, SubstsRef, Kind, UnpackedKind};\n-use crate::ty::{self, AdtDef, DefIdTree, TypeFlags, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{self, AdtDef, Discr, DefIdTree, TypeFlags, Ty, TyCtxt, TypeFoldable};\n use crate::ty::{List, TyS, ParamEnvAnd, ParamEnv};\n use crate::ty::layout::VariantIdx;\n use crate::util::captures::Captures;\n@@ -18,6 +18,7 @@ use crate::mir::interpret::{Scalar, Pointer};\n use smallvec::SmallVec;\n use std::cmp::Ordering;\n use std::marker::PhantomData;\n+use std::ops::Range;\n use rustc_target::spec::abi;\n use syntax::ast::{self, Ident};\n use syntax::symbol::{keywords, InternedString};\n@@ -478,14 +479,35 @@ impl<'a, 'gcx, 'tcx> GeneratorSubsts<'tcx> {\n     const RETURNED_NAME: &'static str = \"Returned\";\n     const POISONED_NAME: &'static str = \"Panicked\";\n \n-    /// The variants of this Generator.\n+    /// The valid variant indices of this Generator.\n     #[inline]\n-    pub fn variants(&self, def_id: DefId, tcx: TyCtxt<'a, 'gcx, 'tcx>) ->\n-        impl Iterator<Item = VariantIdx>\n-    {\n+    pub fn variant_range(&self, def_id: DefId, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Range<VariantIdx> {\n         // FIXME requires optimized MIR\n         let num_variants = self.state_tys(def_id, tcx).count();\n-        (0..num_variants).map(VariantIdx::new)\n+        (VariantIdx::new(0)..VariantIdx::new(num_variants))\n+    }\n+\n+    /// The discriminant for the given variant. Panics if the variant_index is\n+    /// out of range.\n+    #[inline]\n+    pub fn discriminant_for_variant(\n+        &self, def_id: DefId, tcx: TyCtxt<'a, 'gcx, 'tcx>, variant_index: VariantIdx\n+    ) -> Discr<'tcx> {\n+        // Generators don't support explicit discriminant values, so they are\n+        // the same as the variant index.\n+        assert!(self.variant_range(def_id, tcx).contains(&variant_index));\n+        Discr { val: variant_index.as_usize() as u128, ty: self.discr_ty(tcx) }\n+    }\n+\n+    /// The set of all discriminants for the Generator, enumerated with their\n+    /// variant indices.\n+    #[inline]\n+    pub fn discriminants(\n+        &'a self, def_id: DefId, tcx: TyCtxt<'a, 'gcx, 'tcx>\n+    ) -> impl Iterator<Item=(VariantIdx, Discr<'tcx>)> + Captures<'gcx> + 'a {\n+        self.variant_range(def_id, tcx).map(move |index| {\n+            (index, Discr { val: index.as_usize() as u128, ty: self.discr_ty(tcx) })\n+        })\n     }\n \n     /// Calls `f` with a reference to the name of the enumerator for the given\n@@ -503,7 +525,7 @@ impl<'a, 'gcx, 'tcx> GeneratorSubsts<'tcx> {\n         f(name)\n     }\n \n-    /// The type of the state \"discriminant\" used in the generator type.\n+    /// The type of the state discriminant used in the generator type.\n     #[inline]\n     pub fn discr_ty(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> {\n         tcx.types.u32\n@@ -2028,6 +2050,34 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    /// If the type contains variants, returns the valid range of variant indices.\n+    /// FIXME This requires the optimized MIR in the case of generators.\n+    #[inline]\n+    pub fn variant_range(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Option<Range<VariantIdx>> {\n+        match self.sty {\n+            TyKind::Adt(adt, _) => Some(adt.variant_range()),\n+            TyKind::Generator(def_id, substs, _) => Some(substs.variant_range(def_id, tcx)),\n+            _ => None,\n+        }\n+    }\n+\n+    /// If the type contains variants, returns the variant for `variant_index`.\n+    /// Panics if `variant_index` is out of range.\n+    /// FIXME This requires the optimized MIR in the case of generators.\n+    #[inline]\n+    pub fn discriminant_for_variant(\n+        &self,\n+        tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+        variant_index: VariantIdx\n+    ) -> Option<Discr<'tcx>> {\n+        match self.sty {\n+            TyKind::Adt(adt, _) => Some(adt.discriminant_for_variant(tcx, variant_index)),\n+            TyKind::Generator(def_id, substs, _) =>\n+                Some(substs.discriminant_for_variant(def_id, tcx, variant_index)),\n+            _ => None,\n+        }\n+    }\n+\n     /// Push onto `out` the regions directly referenced from this type (but not\n     /// types reachable from this type via `walk_tys`). This ignores late-bound\n     /// regions binders."}, {"sha": "6f427f29fcc9368a1b92c0c2038be433de9d5b73", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8f6de4aca47ddd1daa5217813848155a2a825fa/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f6de4aca47ddd1daa5217813848155a2a825fa/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=b8f6de4aca47ddd1daa5217813848155a2a825fa", "patch": "@@ -1382,12 +1382,6 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                                                   variant_type_metadata,\n                                                   member_descriptions);\n \n-                    // TODO make this into a helper\n-                    let discriminant = match &self.layout.ty.sty {\n-                        ty::Adt(adt, _) => adt.discriminant_for_variant(cx.tcx, i).val as u64,\n-                        ty::Generator(..) => i.as_usize() as u64,\n-                        _ => bug!(),\n-                    }.into();\n                     MemberDescription {\n                         name: if fallback {\n                             String::new()\n@@ -1399,7 +1393,9 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         size: self.layout.size,\n                         align: self.layout.align.abi,\n                         flags: DIFlags::FlagZero,\n-                        discriminant,\n+                        discriminant: Some(\n+                            self.layout.ty.discriminant_for_variant(cx.tcx, i).unwrap().val as u64\n+                        ),\n                     }\n                 }).collect()\n             }\n@@ -1722,7 +1718,7 @@ fn prepare_enum_metadata(\n                 })\n                 .collect(),\n             ty::Generator(_, substs, _) => substs\n-                .variants(enum_def_id, cx.tcx)\n+                .variant_range(enum_def_id, cx.tcx)\n                 .map(|v| substs.map_variant_name(v, |name| {\n                     let name = SmallCStr::new(name);\n                     unsafe {"}, {"sha": "670b6c472698d23a16e0acaf05186eb04d9c4c93", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b8f6de4aca47ddd1daa5217813848155a2a825fa/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f6de4aca47ddd1daa5217813848155a2a825fa/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=b8f6de4aca47ddd1daa5217813848155a2a825fa", "patch": "@@ -218,9 +218,8 @@ impl<'a, 'tcx: 'a, V: CodegenObject> PlaceRef<'tcx, V> {\n         }\n         let (discr_scalar, discr_kind, discr_index) = match self.layout.variants {\n             layout::Variants::Single { index } => {\n-                let discr_val = self.layout.ty.ty_adt_def().map_or(\n-                    index.as_u32() as u128,\n-                    |def| def.discriminant_for_variant(bx.cx().tcx(), index).val);\n+                let discr_val = self.layout.ty.discriminant_for_variant(bx.cx().tcx(), index)\n+                    .map_or(index.as_u32() as u128, |discr| discr.val);\n                 return bx.cx().const_uint_big(cast_to, discr_val);\n             }\n             layout::Variants::Multiple { ref discr, ref discr_kind, discr_index, .. } => {\n@@ -296,15 +295,8 @@ impl<'a, 'tcx: 'a, V: CodegenObject> PlaceRef<'tcx, V> {\n                 ..\n             } => {\n                 let ptr = self.project_field(bx, discr_index);\n-                let to = match self.layout.ty.sty {\n-                    ty::TyKind::Adt(adt_def, _) => adt_def\n-                        .discriminant_for_variant(bx.tcx(), variant_index)\n-                        .val,\n-                    // Generators don't support explicit discriminant values, so\n-                    // they are the same as the variant index.\n-                    ty::TyKind::Generator(..) => variant_index.as_u32() as u128,\n-                    _ => bug!(),\n-                };\n+                let to =\n+                    self.layout.ty.discriminant_for_variant(bx.tcx(), variant_index).unwrap().val;\n                 bx.store(\n                     bx.cx().const_uint_big(bx.cx().backend_type(ptr.layout), to),\n                     ptr.llval,"}, {"sha": "8573021bef38649767d25b0299bfde0d7b039c45", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b8f6de4aca47ddd1daa5217813848155a2a825fa/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f6de4aca47ddd1daa5217813848155a2a825fa/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=b8f6de4aca47ddd1daa5217813848155a2a825fa", "patch": "@@ -271,13 +271,12 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         let ll_t_in = bx.cx().immediate_backend_type(operand.layout);\n                         match operand.layout.variants {\n                             layout::Variants::Single { index } => {\n-                                if let Some(def) = operand.layout.ty.ty_adt_def() {\n-                                    let discr_val = def\n-                                        .discriminant_for_variant(bx.cx().tcx(), index)\n-                                        .val;\n-                                    let discr = bx.cx().const_uint_big(ll_t_out, discr_val);\n+                                if let Some(discr) =\n+                                    operand.layout.ty.discriminant_for_variant(bx.tcx(), index)\n+                                {\n+                                    let discr_val = bx.cx().const_uint_big(ll_t_out, discr.val);\n                                     return (bx, OperandRef {\n-                                        val: OperandValue::Immediate(discr),\n+                                        val: OperandValue::Immediate(discr_val),\n                                         layout: cast,\n                                     });\n                                 }"}, {"sha": "58e474658ead5748000fd755df5b50deb2a9b5b9", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b8f6de4aca47ddd1daa5217813848155a2a825fa/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f6de4aca47ddd1daa5217813848155a2a825fa/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=b8f6de4aca47ddd1daa5217813848155a2a825fa", "patch": "@@ -54,14 +54,13 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                 } else {\n                     match src.layout.variants {\n                         layout::Variants::Single { index } => {\n-                            if let Some(def) = src.layout.ty.ty_adt_def() {\n+                            if let Some(discr) =\n+                                src.layout.ty.discriminant_for_variant(*self.tcx, index)\n+                            {\n                                 // Cast from a univariant enum\n                                 assert!(src.layout.is_zst());\n-                                let discr_val = def\n-                                    .discriminant_for_variant(*self.tcx, index)\n-                                    .val;\n                                 return self.write_scalar(\n-                                    Scalar::from_uint(discr_val, dest.layout.size),\n+                                    Scalar::from_uint(discr.val, dest.layout.size),\n                                     dest);\n                             }\n                         }"}, {"sha": "334b22112fb8ef0c7f4db80ef0a0185f786561f5", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b8f6de4aca47ddd1daa5217813848155a2a825fa/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f6de4aca47ddd1daa5217813848155a2a825fa/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=b8f6de4aca47ddd1daa5217813848155a2a825fa", "patch": "@@ -566,9 +566,9 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n \n         let (discr_kind, discr_index) = match rval.layout.variants {\n             layout::Variants::Single { index } => {\n-                let discr_val = rval.layout.ty.ty_adt_def().map_or(\n+                let discr_val = rval.layout.ty.discriminant_for_variant(*self.tcx, index).map_or(\n                     index.as_u32() as u128,\n-                    |def| def.discriminant_for_variant(*self.tcx, index).val);\n+                    |discr| discr.val);\n                 return Ok((discr_val, index));\n             }\n             layout::Variants::Multiple { ref discr_kind, discr_index, .. } =>\n@@ -603,12 +603,15 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                     bits_discr\n                 };\n                 // Make sure we catch invalid discriminants\n-                let index = rval.layout.ty\n-                    .ty_adt_def()\n-                    .expect(\"tagged layout for non adt\")\n-                    .discriminants(self.tcx.tcx)\n-                    .find(|(_, var)| var.val == real_discr)\n-                    .ok_or_else(|| InterpError::InvalidDiscriminant(raw_discr.erase_tag()))?;\n+                let index = match &rval.layout.ty.sty {\n+                    ty::Adt(adt, _) => adt\n+                        .discriminants(self.tcx.tcx)\n+                        .find(|(_, var)| var.val == real_discr),\n+                    ty::Generator(def_id, substs, _) => substs\n+                        .discriminants(*def_id, self.tcx.tcx)\n+                        .find(|(_, var)| var.val == real_discr),\n+                    _ => bug!(\"tagged layout for non-adt non-generator\"),\n+                }.ok_or_else(|| InterpError::InvalidDiscriminant(raw_discr.erase_tag()))?;\n                 (real_discr, index.0)\n             },\n             layout::DiscriminantKind::Niche {"}, {"sha": "0cc480028161f170dac97c2741bccd8f52688faf", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8f6de4aca47ddd1daa5217813848155a2a825fa/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f6de4aca47ddd1daa5217813848155a2a825fa/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=b8f6de4aca47ddd1daa5217813848155a2a825fa", "patch": "@@ -984,11 +984,9 @@ where\n                 discr_index,\n                 ..\n             } => {\n-                let adt_def = dest.layout.ty.ty_adt_def().unwrap();\n-                assert!(variant_index.as_usize() < adt_def.variants.len());\n-                let discr_val = adt_def\n-                    .discriminant_for_variant(*self.tcx, variant_index)\n-                    .val;\n+                assert!(dest.layout.ty.variant_range(*self.tcx).unwrap().contains(&variant_index));\n+                let discr_val =\n+                    dest.layout.ty.discriminant_for_variant(*self.tcx, variant_index).unwrap().val;\n \n                 // raw discriminants for enums are isize or bigger during\n                 // their computation, but the in-memory tag is the smallest possible"}]}