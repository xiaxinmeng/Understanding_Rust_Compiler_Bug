{"sha": "979d3a54f9e1eea483734059a2f594278787e16a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3OWQzYTU0ZjllMWVlYTQ4MzczNDA1OWEyZjU5NDI3ODc4N2UxNmE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-06-24T17:30:35Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-07-08T17:55:11Z"}, "message": "Correct merge failures", "tree": {"sha": "e385d1b804a9c3d44281570a3ac8a942b66786db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e385d1b804a9c3d44281570a3ac8a942b66786db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/979d3a54f9e1eea483734059a2f594278787e16a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/979d3a54f9e1eea483734059a2f594278787e16a", "html_url": "https://github.com/rust-lang/rust/commit/979d3a54f9e1eea483734059a2f594278787e16a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/979d3a54f9e1eea483734059a2f594278787e16a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce602c66b8ff487ca74f074120419a18c9f25871", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce602c66b8ff487ca74f074120419a18c9f25871", "html_url": "https://github.com/rust-lang/rust/commit/ce602c66b8ff487ca74f074120419a18c9f25871"}], "stats": {"total": 119, "additions": 34, "deletions": 85}, "files": [{"sha": "27c8051afac36c284b49f1f2dde04ad1a91d7a05", "filename": "src/libextra/fileinput.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/979d3a54f9e1eea483734059a2f594278787e16a/src%2Flibextra%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979d3a54f9e1eea483734059a2f594278787e16a/src%2Flibextra%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffileinput.rs?ref=979d3a54f9e1eea483734059a2f594278787e16a", "patch": "@@ -418,7 +418,7 @@ mod test {\n     fn make_file(path : &Path, contents: &[~str]) {\n         let file = io::file_writer(path, [io::Create, io::Truncate]).get();\n \n-        for contents.iter().advance |&str| {\n+        for contents.iter().advance |str| {\n             file.write_str(*str);\n             file.write_char('\\n');\n         }"}, {"sha": "5867b13f55656c9e74e9b4827490736f126f925d", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/979d3a54f9e1eea483734059a2f594278787e16a/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979d3a54f9e1eea483734059a2f594278787e16a/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=979d3a54f9e1eea483734059a2f594278787e16a", "patch": "@@ -1586,7 +1586,7 @@ mod biguint_tests {\n             let &(ref n, ref rs) = num_pair;\n             for rs.iter().advance |str_pair| {\n                 let &(ref radix, ref str) = str_pair;\n-                assert_eq!(&n, &FromStrRadix::from_str_radix(*str, *radix).get());\n+                assert_eq!(n, &FromStrRadix::from_str_radix(*str, *radix).get());\n             }\n         }\n "}, {"sha": "cd226e2ad3267ce4245638ee3d6c9efd09e99939", "filename": "src/libextra/term.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/979d3a54f9e1eea483734059a2f594278787e16a/src%2Flibextra%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979d3a54f9e1eea483734059a2f594278787e16a/src%2Flibextra%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterm.rs?ref=979d3a54f9e1eea483734059a2f594278787e16a", "patch": "@@ -119,8 +119,8 @@ impl Terminal {\n     pub fn reset(&self) {\n         let mut vars = Variables::new();\n         let s = do self.ti.strings.find_equiv(&(\"op\"))\n-                       .map_consume_default(Err(~\"can't find terminfo capability `op`\")) |&op| {\n-                           expand(op, [], &mut vars)\n+                       .map_consume_default(Err(~\"can't find terminfo capability `op`\")) |op| {\n+                           expand(copy *op, [], &mut vars)\n                        };\n         if s.is_ok() {\n             self.out.write(s.unwrap());"}, {"sha": "23451e0f36ea05de19793f8c8a18771c861f123f", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/979d3a54f9e1eea483734059a2f594278787e16a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979d3a54f9e1eea483734059a2f594278787e16a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=979d3a54f9e1eea483734059a2f594278787e16a", "patch": "@@ -617,7 +617,7 @@ impl GatherLoanCtxt {\n          */\n \n         let mc_ctxt = self.bccx.mc_ctxt();\n-        for decl.inputs.each |arg| {\n+        for decl.inputs.iter().advance |arg| {\n             let arg_ty = ty::node_id_to_type(self.tcx(), arg.pat.id);\n \n             let arg_cmt = mc_ctxt.cat_rvalue("}, {"sha": "07bdee07c0feb270ee9abef13f4c156cd19f6a32", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/979d3a54f9e1eea483734059a2f594278787e16a/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979d3a54f9e1eea483734059a2f594278787e16a/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=979d3a54f9e1eea483734059a2f594278787e16a", "patch": "@@ -190,15 +190,8 @@ enum UseMode {\n \n pub fn compute_moves(tcx: ty::ctxt,\n                      method_map: method_map,\n-<<<<<<< HEAD\n                      crate: &crate) -> MoveMaps\n {\n-||||||| merged common ancestors\n-                     crate: @crate) -> MoveMaps\n-{\n-=======\n-                     crate: @crate) -> MoveMaps {\n->>>>>>> Modify borrow checker to visit irrefutable patterns that appear in\n     let visitor = visit::mk_vt(@visit::Visitor {\n         visit_fn: compute_modes_for_fn,\n         visit_expr: compute_modes_for_expr,\n@@ -248,7 +241,7 @@ fn compute_modes_for_fn(fk: &visit::fn_kind,\n                         id: node_id,\n                         (cx, v): (VisitContext,\n                                   vt<VisitContext>)) {\n-    for decl.inputs.each |a| {\n+    for decl.inputs.iter().advance |a| {\n         cx.use_pat(a.pat);\n     }\n     visit::visit_fn(fk, decl, body, span, id, (cx, v));\n@@ -554,7 +547,7 @@ impl VisitContext {\n             }\n \n             expr_fn_block(ref decl, ref body) => {\n-                for decl.inputs.each |a| {\n+                for decl.inputs.iter().advance |a| {\n                     self.use_pat(a.pat);\n                 }\n                 let cap_vars = self.compute_captures(expr.id);"}, {"sha": "74f1e372c078f002bcd8d701d6202834722d86c8", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/979d3a54f9e1eea483734059a2f594278787e16a/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979d3a54f9e1eea483734059a2f594278787e16a/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=979d3a54f9e1eea483734059a2f594278787e16a", "patch": "@@ -1738,7 +1738,7 @@ pub fn store_local(bcx: block,\n      * Generates code for a local variable declaration like\n      * `let <pat>;` or `let <pat> = <opt_init_expr>`.\n      */\n-    let _icx = bcx.insn_ctxt(\"match::store_local\");\n+    let _icx = push_ctxt(\"match::store_local\");\n     let mut bcx = bcx;\n \n     return match opt_init_expr {\n@@ -1813,7 +1813,7 @@ pub fn store_arg(mut bcx: block,\n      *   if the argument type is `T`, then `llval` is a `T*`). In some\n      *   cases, this code may zero out the memory `llval` points at.\n      */\n-    let _icx = bcx.insn_ctxt(\"match::store_arg\");\n+    let _icx = push_ctxt(\"match::store_arg\");\n \n     // We always need to cleanup the argument as we exit the fn scope.\n     // Note that we cannot do it before for fear of a fn like\n@@ -1882,10 +1882,9 @@ fn bind_irrefutable_pat(bcx: block,\n      * - binding_mode: is this for an argument or a local variable?\n      */\n \n-    debug!(\"bind_irrefutable_pat(bcx=%s, pat=%s, val=%s, binding_mode=%?)\",\n+    debug!(\"bind_irrefutable_pat(bcx=%s, pat=%s, binding_mode=%?)\",\n            bcx.to_str(),\n            pat_to_str(pat, bcx.sess().intr()),\n-           val_str(bcx.ccx().tn, val),\n            binding_mode);\n \n     if bcx.sess().asm_comments() {\n@@ -1895,7 +1894,7 @@ fn bind_irrefutable_pat(bcx: block,\n \n     let _indenter = indenter();\n \n-    let _icx = bcx.insn_ctxt(\"alt::bind_irrefutable_pat\");\n+    let _icx = push_ctxt(\"alt::bind_irrefutable_pat\");\n     let mut bcx = bcx;\n     let tcx = bcx.tcx();\n     let ccx = bcx.ccx();"}, {"sha": "c8117ed64a73be7d53660e44abecb7c36033d9b8", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 6, "deletions": 54, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/979d3a54f9e1eea483734059a2f594278787e16a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979d3a54f9e1eea483734059a2f594278787e16a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=979d3a54f9e1eea483734059a2f594278787e16a", "patch": "@@ -112,8 +112,8 @@ impl Drop for _InsnCtxt {\n     fn drop(&self) {\n         unsafe {\n             do local_data::local_data_modify(task_local_insn_key) |c| {\n-                do c.map_consume |@ctx| {\n-                    let mut ctx = ctx;\n+                do c.map_consume |ctx| {\n+                    let mut ctx = copy *ctx;\n                     ctx.pop();\n                     @ctx\n                 }\n@@ -126,8 +126,8 @@ pub fn push_ctxt(s: &'static str) -> _InsnCtxt {\n     debug!(\"new InsnCtxt: %s\", s);\n     unsafe {\n         do local_data::local_data_modify(task_local_insn_key) |c| {\n-            do c.map_consume |@ctx| {\n-                let mut ctx = ctx;\n+            do c.map_consume |ctx| {\n+                let mut ctx = copy *ctx;\n                 ctx.push(s);\n                 @ctx\n             }\n@@ -1438,54 +1438,6 @@ pub fn block_locals(b: &ast::blk, it: &fn(@ast::local)) {\n     }\n }\n \n-<<<<<<< variant A\n-pub fn alloc_local(cx: block, local: &ast::local) -> block {\n-    let _icx = push_ctxt(\"alloc_local\");\n-    let t = node_id_type(cx, local.node.id);\n-    let simple_name = match local.node.pat.node {\n-      ast::pat_ident(_, ref pth, None) => Some(path_to_ident(pth)),\n-      _ => None\n-    };\n-    let val = alloc_ty(cx, t);\n-    if cx.sess().opts.debuginfo {\n-        for simple_name.iter().advance |name| {\n-            str::as_c_str(cx.ccx().sess.str_of(*name), |buf| {\n-                unsafe {\n-                    llvm::LLVMSetValueName(val, buf)\n-                }\n-            });\n-        }\n-    }\n-    cx.fcx.lllocals.insert(local.node.id, val);\n-    cx\n-}\n-\n-\n->>>>>>> variant B\n-####### Ancestor\n-pub fn alloc_local(cx: block, local: @ast::local) -> block {\n-    let _icx = push_ctxt(\"alloc_local\");\n-    let t = node_id_type(cx, local.node.id);\n-    let simple_name = match local.node.pat.node {\n-      ast::pat_ident(_, pth, None) => Some(path_to_ident(pth)),\n-      _ => None\n-    };\n-    let val = alloc_ty(cx, t);\n-    if cx.sess().opts.debuginfo {\n-        for simple_name.iter().advance |name| {\n-            str::as_c_str(cx.ccx().sess.str_of(*name), |buf| {\n-                unsafe {\n-                    llvm::LLVMSetValueName(val, buf)\n-                }\n-            });\n-        }\n-    }\n-    cx.fcx.lllocals.insert(local.node.id, val);\n-    cx\n-}\n-\n-\n-======= end\n pub fn with_cond(bcx: block, val: ValueRef, f: &fn(block) -> block) -> block {\n     let _icx = push_ctxt(\"with_cond\");\n     let next_cx = base::sub_block(bcx, \"next\");\n@@ -1763,7 +1715,7 @@ pub fn copy_args_to_allocas(fcx: fn_ctxt,\n             let self_val = if slf.is_copy\n                     && datum::appropriate_mode(bcx.tcx(), slf.t).is_by_value() {\n                 let tmp = BitCast(bcx, slf.v, type_of(bcx.ccx(), slf.t));\n-                let alloc = alloc_ty(bcx, slf.t);\n+                let alloc = alloc_ty(bcx, slf.t, \"__self\");\n                 Store(bcx, tmp, alloc);\n                 alloc\n             } else {\n@@ -3030,7 +2982,7 @@ pub fn trans_crate(sess: session::Session,\n         }\n     }\n     if ccx.sess.count_llvm_insns() {\n-        for ccx.stats.llvm_insns.each |k, v| {\n+        for ccx.stats.llvm_insns.iter().advance |(k, v)| {\n             io::println(fmt!(\"%-7u %s\", *v, *k));\n         }\n     }"}, {"sha": "22adc4aa24b6561f248146bbe052d9d11e0ed680", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/979d3a54f9e1eea483734059a2f594278787e16a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979d3a54f9e1eea483734059a2f594278787e16a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=979d3a54f9e1eea483734059a2f594278787e16a", "patch": "@@ -873,10 +873,10 @@ pub fn trans_arg_expr(bcx: block,\n                         //    &arg_expr.id);\n                         debug!(\"by ref arg with type %s, storing to scratch\",\n                                bcx.ty_to_str(arg_datum.ty));\n-                        let scratch = scratch_datum(bcx, arg_datum.ty, false);\n+                        let scratch = scratch_datum(bcx, arg_datum.ty,\n+                                                    \"__self\", false);\n \n                         arg_datum.store_to_datum(bcx,\n-                                                 arg_expr.id,\n                                                  INIT,\n                                                  scratch);\n \n@@ -897,7 +897,6 @@ pub fn trans_arg_expr(bcx: block,\n                                                         \"__arg\", false);\n \n                             arg_datum.store_to_datum(bcx,\n-                                                     arg_expr.id,\n                                                      INIT,\n                                                      scratch);\n "}, {"sha": "0914e61d58f33893142a15db6e0baefe681a7f5a", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/979d3a54f9e1eea483734059a2f594278787e16a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979d3a54f9e1eea483734059a2f594278787e16a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=979d3a54f9e1eea483734059a2f594278787e16a", "patch": "@@ -614,7 +614,8 @@ pub fn trans_trait_callee_from_llval(bcx: block,\n     }\n \n     llself = PointerCast(bcx, llself, Type::opaque_box(ccx).ptr_to());\n-    let scratch = scratch_datum(bcx, ty::mk_opaque_box(bcx.tcx()), false);\n+    let scratch = scratch_datum(bcx, ty::mk_opaque_box(bcx.tcx()),\n+                                \"__trait_callee\", false);\n     Store(bcx, llself, scratch.val);\n     scratch.add_clean(bcx);\n "}, {"sha": "c546be63138258c322ae4599944a5d9dcba54e61", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/979d3a54f9e1eea483734059a2f594278787e16a/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979d3a54f9e1eea483734059a2f594278787e16a/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=979d3a54f9e1eea483734059a2f594278787e16a", "patch": "@@ -1276,7 +1276,7 @@ impl<T> OwnedVector<T> for ~[T] {\n             ln => {\n                 let valptr = ptr::to_mut_unsafe_ptr(&mut self[ln - 1u]);\n                 unsafe {\n-                    raw::set_len(v, ln - 1u);\n+                    raw::set_len(self, ln - 1u);\n                     ptr::read_ptr(valptr)\n                 }\n             }\n@@ -1408,7 +1408,7 @@ impl<T> OwnedVector<T> for ~[T] {\n             unsafe {\n                 // This loop is optimized out for non-drop types.\n                 for uint::range(newlen, oldlen) |i| {\n-                    ptr::read_and_zero_ptr(ptr::mut_offset(p, i))\n+                    ptr::read_and_zero_ptr(ptr::mut_offset(p, i));\n                 }\n             }\n         }\n@@ -1556,7 +1556,7 @@ impl<T:Eq> OwnedEqVector<T> for ~[T] {\n     * Remove consecutive repeated elements from a vector; if the vector is\n     * sorted, this removes all duplicates.\n     */\n-    pub fn dedup<T:Eq>(&mut self) {\n+    pub fn dedup(&mut self) {\n         unsafe {\n             // Although we have a mutable reference to `self`, we cannot make\n             // *arbitrary* changes. There exists the possibility that this"}, {"sha": "f9504a696ce5eec9ef9bc9812d3174b3f917de03", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/979d3a54f9e1eea483734059a2f594278787e16a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979d3a54f9e1eea483734059a2f594278787e16a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=979d3a54f9e1eea483734059a2f594278787e16a", "patch": "@@ -1521,7 +1521,12 @@ pub fn print_path(s: @ps, path: &ast::Path, colons_before_params: bool) {\n     print_path_(s, path, colons_before_params, &None)\n }\n \n-pub fn print_pat(s: @ps, pat: &ast::pat) {\n+pub fn print_bounded_path(s: @ps, path: &ast::Path,\n+                          bounds: &Option<OptVec<ast::TyParamBound>>) {\n+    print_path_(s, path, false, bounds)\n+}\n+\n+pub fn print_pat(s: @ps, pat: @ast::pat) {\n     maybe_print_comment(s, pat.span.lo);\n     let ann_node = node_pat(s, pat);\n     (s.ann.pre)(ann_node);"}, {"sha": "4407329f49775876f027132e63bfc287da426620", "filename": "src/test/compile-fail/borrowck-move-out-of-struct-with-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/979d3a54f9e1eea483734059a2f594278787e16a/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-struct-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979d3a54f9e1eea483734059a2f594278787e16a/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-struct-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-struct-with-dtor.rs?ref=979d3a54f9e1eea483734059a2f594278787e16a", "patch": "@@ -1,6 +1,6 @@\n struct S {f:~str}\n impl Drop for S {\n-    fn finalize(&self) { println(self.f); }\n+    fn drop(&self) { println(self.f); }\n }\n \n fn move_in_match() {"}, {"sha": "400a4f07951fc120480feb44822f252465edb123", "filename": "src/test/compile-fail/borrowck-move-out-of-tuple-struct-with-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/979d3a54f9e1eea483734059a2f594278787e16a/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-tuple-struct-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979d3a54f9e1eea483734059a2f594278787e16a/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-tuple-struct-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-tuple-struct-with-dtor.rs?ref=979d3a54f9e1eea483734059a2f594278787e16a", "patch": "@@ -1,6 +1,6 @@\n struct S(~str);\n impl Drop for S {\n-    fn finalize(&self) { println(**self); }\n+    fn drop(&self) { println(**self); }\n }\n \n fn move_in_match() {"}, {"sha": "f8c369c2e5f7ecfd1d99e491b07edeec6ec8678b", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/979d3a54f9e1eea483734059a2f594278787e16a/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979d3a54f9e1eea483734059a2f594278787e16a/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=979d3a54f9e1eea483734059a2f594278787e16a", "patch": "@@ -163,8 +163,8 @@ pub fn main() {\n     visit_ty::<i16>(vv);\n     visit_ty::<~[int]>(vv);\n \n-    for v.types.iter().advance |&s| {\n-        println(fmt!(\"type: %s\", s));\n+    for v.types.iter().advance |s| {\n+        println(fmt!(\"type: %s\", copy *s));\n     }\n     assert_eq!((*v.types).clone(), ~[~\"bool\", ~\"int\", ~\"i8\", ~\"i16\", ~\"[\", ~\"int\", ~\"]\"]);\n }"}]}