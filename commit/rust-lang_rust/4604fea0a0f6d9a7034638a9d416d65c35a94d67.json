{"sha": "4604fea0a0f6d9a7034638a9d416d65c35a94d67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MDRmZWEwYTBmNmQ5YTcwMzQ2MzhhOWQ0MTZkNjVjMzVhOTRkNjc=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-24T15:13:59Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-24T15:13:59Z"}, "message": "Refactoring\n\n1. Cargo clippy\n2. Run 'cargo fmt' with import reordering options set to `true`.\n3. Factor out `rewrite_lifetime_param()`.", "tree": {"sha": "0d767ba713ccd32b5c3cbaf17bd0d148b1c58cab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d767ba713ccd32b5c3cbaf17bd0d148b1c58cab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4604fea0a0f6d9a7034638a9d416d65c35a94d67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4604fea0a0f6d9a7034638a9d416d65c35a94d67", "html_url": "https://github.com/rust-lang/rust/commit/4604fea0a0f6d9a7034638a9d416d65c35a94d67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4604fea0a0f6d9a7034638a9d416d65c35a94d67/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "939a6c58202f775a63e46fbde4e0d6b3b04cf8aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/939a6c58202f775a63e46fbde4e0d6b3b04cf8aa", "html_url": "https://github.com/rust-lang/rust/commit/939a6c58202f775a63e46fbde4e0d6b3b04cf8aa"}], "stats": {"total": 85, "additions": 31, "deletions": 54}, "files": [{"sha": "180c6f0abf319652d4c47d9c18a60b584b2b38a9", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4604fea0a0f6d9a7034638a9d416d65c35a94d67/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4604fea0a0f6d9a7034638a9d416d65c35a94d67/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=4604fea0a0f6d9a7034638a9d416d65c35a94d67", "patch": "@@ -17,15 +17,15 @@ extern crate cargo_metadata;\n extern crate getopts;\n extern crate serde_json as json;\n \n+use std::collections::HashSet;\n use std::env;\n use std::fs;\n use std::hash::{Hash, Hasher};\n use std::io::{self, Write};\n+use std::iter::FromIterator;\n use std::path::{Path, PathBuf};\n use std::process::{Command, ExitStatus};\n use std::str;\n-use std::collections::HashSet;\n-use std::iter::FromIterator;\n \n use getopts::{Matches, Options};\n \n@@ -125,7 +125,7 @@ pub enum Verbosity {\n fn handle_command_status(status: Result<ExitStatus, io::Error>, opts: &getopts::Options) -> i32 {\n     match status {\n         Err(e) => {\n-            print_usage_to_stderr(&opts, &e.to_string());\n+            print_usage_to_stderr(opts, &e.to_string());\n             FAILURE\n         }\n         Ok(status) => {\n@@ -139,7 +139,7 @@ fn handle_command_status(status: Result<ExitStatus, io::Error>, opts: &getopts::\n }\n \n fn get_version(verbosity: Verbosity) -> Result<ExitStatus, io::Error> {\n-    run_rustfmt(&vec![], &vec![String::from(\"--version\")], verbosity)\n+    run_rustfmt(&[], &[String::from(\"--version\")], verbosity)\n }\n \n fn format_crate("}, {"sha": "ba586e1fd913db3d6d5c82b08843c2b8af4ff936", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4604fea0a0f6d9a7034638a9d416d65c35a94d67/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4604fea0a0f6d9a7034638a9d416d65c35a94d67/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=4604fea0a0f6d9a7034638a9d416d65c35a94d67", "patch": "@@ -24,8 +24,8 @@ use std::str::FromStr;\n use getopts::{Matches, Options};\n \n use rustfmt::{run, FileName, Input, Summary};\n-use rustfmt::file_lines::FileLines;\n use rustfmt::config::{get_toml_path, Color, Config, WriteMode};\n+use rustfmt::file_lines::FileLines;\n \n type FmtError = Box<error::Error + Send + Sync>;\n type FmtResult<T> = std::result::Result<T, FmtError>;"}, {"sha": "588d9100fe6043f3d078205100653469e838dd17", "filename": "src/types.rs", "status": "modified", "additions": 25, "deletions": 48, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/4604fea0a0f6d9a7034638a9d416d65c35a94d67/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4604fea0a0f6d9a7034638a9d416d65c35a94d67/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=4604fea0a0f6d9a7034638a9d416d65c35a94d67", "patch": "@@ -422,21 +422,9 @@ impl Rewrite for ast::WherePredicate {\n \n                 let colon = type_bound_colon(context);\n \n-                if bound_generic_params\n-                    .iter()\n-                    .filter(|p| p.is_lifetime_param())\n-                    .count() > 0\n+                if let Some(lifetime_str) =\n+                    rewrite_lifetime_param(context, shape, bound_generic_params)\n                 {\n-                    let lifetime_str: String = bound_generic_params\n-                        .iter()\n-                        .filter_map(|p| match p {\n-                            &ast::GenericParam::Lifetime(ref l) => Some(l),\n-                            _ => None,\n-                        })\n-                        .map(|lt| lt.rewrite(context, shape))\n-                        .collect::<Option<Vec<_>>>()?\n-                        .join(\", \");\n-\n                     // 6 = \"for<> \".len()\n                     let used_width = lifetime_str.len() + type_str.len() + colon.len() + 6;\n                     let ty_shape = shape.offset_left(used_width)?;\n@@ -598,21 +586,9 @@ impl Rewrite for ast::TyParam {\n \n impl Rewrite for ast::PolyTraitRef {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        if self.bound_generic_params\n-            .iter()\n-            .filter(|p| p.is_lifetime_param())\n-            .count() > 0\n+        if let Some(lifetime_str) =\n+            rewrite_lifetime_param(context, shape, &self.bound_generic_params)\n         {\n-            let lifetime_str: String = self.bound_generic_params\n-                .iter()\n-                .filter_map(|p| match p {\n-                    &ast::GenericParam::Lifetime(ref l) => Some(l),\n-                    _ => None,\n-                })\n-                .map(|lt| lt.rewrite(context, shape))\n-                .collect::<Option<Vec<_>>>()?\n-                .join(\", \");\n-\n             // 6 is \"for<> \".len()\n             let extra_offset = lifetime_str.len() + 6;\n             let path_str = self.trait_ref\n@@ -762,31 +738,13 @@ fn rewrite_bare_fn(\n ) -> Option<String> {\n     let mut result = String::with_capacity(128);\n \n-    if bare_fn\n-        .generic_params\n-        .iter()\n-        .filter(|p| p.is_lifetime_param())\n-        .count() > 0\n+    if let Some(ref lifetime_str) = rewrite_lifetime_param(context, shape, &bare_fn.generic_params)\n     {\n         result.push_str(\"for<\");\n         // 6 = \"for<> \".len(), 4 = \"for<\".\n         // This doesn't work out so nicely for mutliline situation with lots of\n         // rightward drift. If that is a problem, we could use the list stuff.\n-        result.push_str(&bare_fn\n-            .generic_params\n-            .iter()\n-            .filter_map(|p| match p {\n-                &ast::GenericParam::Lifetime(ref l) => Some(l),\n-                _ => None,\n-            })\n-            .map(|l| {\n-                l.rewrite(\n-                    context,\n-                    Shape::legacy(shape.width.checked_sub(6)?, shape.indent + 4),\n-                )\n-            })\n-            .collect::<Option<Vec<_>>>()?\n-            .join(\", \"));\n+        result.push_str(lifetime_str);\n         result.push_str(\"> \");\n     }\n \n@@ -841,3 +799,22 @@ pub fn can_be_overflowed_type(context: &RewriteContext, ty: &ast::Ty, len: usize\n         _ => false,\n     }\n }\n+\n+/// Returns `None` if there is no `LifetimeDef` in the given generic parameters.\n+fn rewrite_lifetime_param(\n+    context: &RewriteContext,\n+    shape: Shape,\n+    generic_params: &[ast::GenericParam],\n+) -> Option<String> {\n+    let result = generic_params\n+        .iter()\n+        .filter(|p| p.is_lifetime_param())\n+        .map(|lt| lt.rewrite(context, shape))\n+        .collect::<Option<Vec<_>>>()?\n+        .join(\", \");\n+    if result.is_empty() {\n+        None\n+    } else {\n+        Some(result)\n+    }\n+}"}, {"sha": "4beb616dd3c27cc88475b83c9c75295efae9fdc2", "filename": "tests/system.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4604fea0a0f6d9a7034638a9d416d65c35a94d67/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4604fea0a0f6d9a7034638a9d416d65c35a94d67/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=4604fea0a0f6d9a7034638a9d416d65c35a94d67", "patch": "@@ -24,8 +24,8 @@ use std::path::{Path, PathBuf};\n use std::str::Chars;\n \n use rustfmt::*;\n-use rustfmt::filemap::{write_system_newlines, FileMap};\n use rustfmt::config::{Color, Config, ReportTactic};\n+use rustfmt::filemap::{write_system_newlines, FileMap};\n use rustfmt::rustfmt_diff::*;\n \n const DIFF_CONTEXT_SIZE: usize = 3;"}]}