{"sha": "d38f2b0cc1c58392fe9736c468e8943fc6472096", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzOGYyYjBjYzFjNTgzOTJmZTk3MzZjNDY4ZTg5NDNmYzY0NzIwOTY=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-07-15T21:51:34Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-07-15T21:57:02Z"}, "message": "Added diagnostic items to structs and traits for Clippy", "tree": {"sha": "b757220379c0a19e87aadb465a0de2b305835fbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b757220379c0a19e87aadb465a0de2b305835fbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d38f2b0cc1c58392fe9736c468e8943fc6472096", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d38f2b0cc1c58392fe9736c468e8943fc6472096", "html_url": "https://github.com/rust-lang/rust/commit/d38f2b0cc1c58392fe9736c468e8943fc6472096", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d38f2b0cc1c58392fe9736c468e8943fc6472096/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a900042abe4ee9626cd7274816816e9ca691a25", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a900042abe4ee9626cd7274816816e9ca691a25", "html_url": "https://github.com/rust-lang/rust/commit/1a900042abe4ee9626cd7274816816e9ca691a25"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "fa2afaac37509d80facef9a7efdd11d70bae986e", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d38f2b0cc1c58392fe9736c468e8943fc6472096/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38f2b0cc1c58392fe9736c468e8943fc6472096/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=d38f2b0cc1c58392fe9736c468e8943fc6472096", "patch": "@@ -122,10 +122,14 @@ symbols! {\n     // nice to have.\n     Symbols {\n         Alignment,\n+        Any,\n         Arc,\n         Argument,\n         ArgumentV1,\n         Arguments,\n+        AsMut,\n+        AsRef,\n+        BTreeEntry,\n         BTreeMap,\n         BTreeSet,\n         BinaryHeap,\n@@ -139,19 +143,25 @@ symbols! {\n         Continue,\n         Copy,\n         Count,\n+        Cow,\n         Debug,\n         DebugStruct,\n         DebugTuple,\n         Decodable,\n         Decoder,\n         Default,\n         Deref,\n+        DirBuilder,\n+        DoubleEndedIterator,\n+        Duration,\n         Encodable,\n         Encoder,\n         Eq,\n         Equal,\n         Err,\n         Error,\n+        File,\n+        FileType,\n         FormatSpec,\n         Formatter,\n         From,\n@@ -164,9 +174,12 @@ symbols! {\n         HashMap,\n         HashSet,\n         Hasher,\n+        HashMapEntry,\n         Implied,\n         Input,\n         IntoIterator,\n+        IoRead,\n+        IoWrite,\n         Is,\n         ItemContext,\n         Iterator,"}, {"sha": "482a497201de6d54fba41e8ce4876110ce80df0c", "filename": "library/alloc/src/borrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d38f2b0cc1c58392fe9736c468e8943fc6472096/library%2Falloc%2Fsrc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38f2b0cc1c58392fe9736c468e8943fc6472096/library%2Falloc%2Fsrc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fborrow.rs?ref=d38f2b0cc1c58392fe9736c468e8943fc6472096", "patch": "@@ -177,6 +177,7 @@ where\n /// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"Cow\")]\n pub enum Cow<'a, B: ?Sized + 'a>\n where\n     B: ToOwned,"}, {"sha": "5fec8dc2d13343a6b45730474d1105b83cd1ce3f", "filename": "library/alloc/src/collections/btree/map/entry.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d38f2b0cc1c58392fe9736c468e8943fc6472096/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38f2b0cc1c58392fe9736c468e8943fc6472096/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs?ref=d38f2b0cc1c58392fe9736c468e8943fc6472096", "patch": "@@ -14,6 +14,7 @@ use Entry::*;\n ///\n /// [`entry`]: BTreeMap::entry\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"BTreeEntry\")]\n pub enum Entry<'a, K: 'a, V: 'a> {\n     /// A vacant entry.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "19652106b3d01325f5f9f9266b7932447e594cd1", "filename": "library/core/src/any.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d38f2b0cc1c58392fe9736c468e8943fc6472096/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38f2b0cc1c58392fe9736c468e8943fc6472096/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=d38f2b0cc1c58392fe9736c468e8943fc6472096", "patch": "@@ -108,6 +108,7 @@ use crate::intrinsics;\n // unsafe traits and unsafe methods (i.e., `type_id` would still be safe to call,\n // but we would likely want to indicate as such in documentation).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"Any\")]\n pub trait Any: 'static {\n     /// Gets the `TypeId` of `self`.\n     ///"}, {"sha": "1e512af48051ed9dc7c5627ed29aef8b0906506f", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d38f2b0cc1c58392fe9736c468e8943fc6472096/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38f2b0cc1c58392fe9736c468e8943fc6472096/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=d38f2b0cc1c58392fe9736c468e8943fc6472096", "patch": "@@ -152,6 +152,7 @@ pub const fn identity<T>(x: T) -> T {\n /// is_hello(s);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"AsRef\")]\n pub trait AsRef<T: ?Sized> {\n     /// Performs the conversion.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -193,6 +194,7 @@ pub trait AsRef<T: ?Sized> {\n ///\n /// [`Box<T>`]: ../../std/boxed/struct.Box.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"AsMut\")]\n pub trait AsMut<T: ?Sized> {\n     /// Performs the conversion.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "9a9cf20077096d4e50cc70664d89de32fa960aed", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d38f2b0cc1c58392fe9736c468e8943fc6472096/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38f2b0cc1c58392fe9736c468e8943fc6472096/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=d38f2b0cc1c58392fe9736c468e8943fc6472096", "patch": "@@ -36,6 +36,7 @@ use crate::ops::{ControlFlow, Try};\n /// assert_eq!(None, iter.next_back());\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"DoubleEndedIterator\")]\n pub trait DoubleEndedIterator: Iterator {\n     /// Removes and returns an element from the end of the iterator.\n     ///"}, {"sha": "2d8a1cb1ab01639757cc0efc20ed062da46cdb7c", "filename": "library/core/src/time.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d38f2b0cc1c58392fe9736c468e8943fc6472096/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38f2b0cc1c58392fe9736c468e8943fc6472096/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=d38f2b0cc1c58392fe9736c468e8943fc6472096", "patch": "@@ -61,6 +61,7 @@ const MICROS_PER_SEC: u64 = 1_000_000;\n /// crate to do so.\n #[stable(feature = \"duration\", since = \"1.3.0\")]\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"Duration\")]\n pub struct Duration {\n     secs: u64,\n     nanos: u32, // Always 0 <= nanos < NANOS_PER_SEC"}, {"sha": "fac285c96f00d3f4e2212d7976ce5181933b23df", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d38f2b0cc1c58392fe9736c468e8943fc6472096/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38f2b0cc1c58392fe9736c468e8943fc6472096/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=d38f2b0cc1c58392fe9736c468e8943fc6472096", "patch": "@@ -1829,6 +1829,7 @@ impl<K, V, S> Debug for RawEntryBuilder<'_, K, V, S> {\n ///\n /// [`entry`]: HashMap::entry\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"HashMapEntry\")]\n pub enum Entry<'a, K: 'a, V: 'a> {\n     /// An occupied entry.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "997b7670ea982dce01d4336eda7af517852e2736", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d38f2b0cc1c58392fe9736c468e8943fc6472096/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38f2b0cc1c58392fe9736c468e8943fc6472096/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=d38f2b0cc1c58392fe9736c468e8943fc6472096", "patch": "@@ -88,6 +88,7 @@ use crate::time::SystemTime;\n /// [`BufReader<R>`]: io::BufReader\n /// [`sync_all`]: File::sync_all\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"File\")]\n pub struct File {\n     inner: fs_imp::File,\n }\n@@ -183,12 +184,14 @@ pub struct Permissions(fs_imp::FilePermissions);\n /// It is returned by [`Metadata::file_type`] method.\n #[stable(feature = \"file_type\", since = \"1.1.0\")]\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"FileType\")]\n pub struct FileType(fs_imp::FileType);\n \n /// A builder used to create directories in various manners.\n ///\n /// This builder also supports platform-specific options.\n #[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"DirBuilder\")]\n #[derive(Debug)]\n pub struct DirBuilder {\n     inner: fs_imp::DirBuilder,"}, {"sha": "714e4cdea0fae31f8b1c81421893c09bb3149754", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d38f2b0cc1c58392fe9736c468e8943fc6472096/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d38f2b0cc1c58392fe9736c468e8943fc6472096/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=d38f2b0cc1c58392fe9736c468e8943fc6472096", "patch": "@@ -514,6 +514,7 @@ pub(crate) fn default_read_exact<R: Read + ?Sized>(this: &mut R, mut buf: &mut [\n /// [`File`]: crate::fs::File\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(notable_trait)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"IoRead\")]\n pub trait Read {\n     /// Pull some bytes from this source into the specified buffer, returning\n     /// how many bytes were read.\n@@ -1361,6 +1362,7 @@ impl Initializer {\n /// [`write_all`]: Write::write_all\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(notable_trait)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"IoWrite\")]\n pub trait Write {\n     /// Write a buffer into this writer, returning how many bytes were written.\n     ///"}]}