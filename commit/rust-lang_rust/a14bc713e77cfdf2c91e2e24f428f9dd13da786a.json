{"sha": "a14bc713e77cfdf2c91e2e24f428f9dd13da786a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNGJjNzEzZTc3Y2ZkZjJjOTFlMmUyNGY0MjhmOWRkMTNkYTc4NmE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-07T16:44:30Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-19T19:02:34Z"}, "message": "Add Default for GenericParamCount", "tree": {"sha": "49f64fad929430b16d95db31a661e2f0310f80c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49f64fad929430b16d95db31a661e2f0310f80c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a14bc713e77cfdf2c91e2e24f428f9dd13da786a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a14bc713e77cfdf2c91e2e24f428f9dd13da786a", "html_url": "https://github.com/rust-lang/rust/commit/a14bc713e77cfdf2c91e2e24f428f9dd13da786a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a14bc713e77cfdf2c91e2e24f428f9dd13da786a/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c9f7c2fa3b48f8bfefa148dc425db68684cf953", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c9f7c2fa3b48f8bfefa148dc425db68684cf953", "html_url": "https://github.com/rust-lang/rust/commit/7c9f7c2fa3b48f8bfefa148dc425db68684cf953"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "991b80ad3e9169f8273c433cd71c67c0003670f9", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a14bc713e77cfdf2c91e2e24f428f9dd13da786a/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14bc713e77cfdf2c91e2e24f428f9dd13da786a/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=a14bc713e77cfdf2c91e2e24f428f9dd13da786a", "patch": "@@ -445,6 +445,22 @@ impl GenericArgs {\n         }\n         bug!(\"GenericArgs::inputs: not a `Fn(T) -> U`\");\n     }\n+\n+    pub fn own_counts(&self) -> GenericParamCount {\n+        // We could cache this as a property of `GenericParamCount`, but\n+        // the aim is to refactor this away entirely eventually and the\n+        // presence of this method will be a constant reminder.\n+        let mut own_counts: GenericParamCount = Default::default();\n+\n+        for arg in &self.args {\n+            match arg {\n+                GenericArg::Lifetime(_) => own_counts.lifetimes += 1,\n+                GenericArg::Type(_) => own_counts.types += 1,\n+            };\n+        }\n+\n+        own_counts\n+    }\n }\n \n /// A modifier on a bound, currently this is only used for `?Sized`, where the\n@@ -503,6 +519,7 @@ pub struct GenericParam {\n     pub kind: GenericParamKind,\n }\n \n+#[derive(Default)]\n pub struct GenericParamCount {\n     pub lifetimes: usize,\n     pub types: usize,\n@@ -533,10 +550,7 @@ impl Generics {\n         // We could cache this as a property of `GenericParamCount`, but\n         // the aim is to refactor this away entirely eventually and the\n         // presence of this method will be a constant reminder.\n-        let mut own_counts = GenericParamCount {\n-            lifetimes: 0,\n-            types: 0,\n-        };\n+        let mut own_counts: GenericParamCount = Default::default();\n \n         for param in &self.params {\n             match param.kind {"}, {"sha": "3e4527cacd4e198144c4aaa852a1529fd3e889b1", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a14bc713e77cfdf2c91e2e24f428f9dd13da786a/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14bc713e77cfdf2c91e2e24f428f9dd13da786a/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=a14bc713e77cfdf2c91e2e24f428f9dd13da786a", "patch": "@@ -881,6 +881,7 @@ impl GenericParamDef {\n     }\n }\n \n+#[derive(Default)]\n pub struct GenericParamCount {\n     pub lifetimes: usize,\n     pub types: usize,\n@@ -913,10 +914,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n         // We could cache this as a property of `GenericParamCount`, but\n         // the aim is to refactor this away entirely eventually and the\n         // presence of this method will be a constant reminder.\n-        let mut own_counts = GenericParamCount {\n-            lifetimes: 0,\n-            types: 0,\n-        };\n+        let mut own_counts: GenericParamCount = Default::default();\n \n         for param in &self.params {\n             match param.kind {"}, {"sha": "9513086667b28abf082a8a7c2f531baaff057fa0", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a14bc713e77cfdf2c91e2e24f428f9dd13da786a/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14bc713e77cfdf2c91e2e24f428f9dd13da786a/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=a14bc713e77cfdf2c91e2e24f428f9dd13da786a", "patch": "@@ -262,10 +262,7 @@ impl PrintContext {\n         let verbose = self.is_verbose;\n         let mut num_supplied_defaults = 0;\n         let mut has_self = false;\n-        let mut own_counts = GenericParamCount {\n-            lifetimes: 0,\n-            types: 0,\n-        };\n+        let mut own_counts: GenericParamCount = Default::default();\n         let mut is_value_path = false;\n         let fn_trait_kind = ty::tls::with(|tcx| {\n             // Unfortunately, some kinds of items (e.g., closures) don't have"}, {"sha": "687a606cecb69fac4332e79b4a044b60f5e48f72", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a14bc713e77cfdf2c91e2e24f428f9dd13da786a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14bc713e77cfdf2c91e2e24f428f9dd13da786a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a14bc713e77cfdf2c91e2e24f428f9dd13da786a", "patch": "@@ -2432,10 +2432,7 @@ impl Clean<Type> for hir::Ty {\n                     let mut ty_substs = FxHashMap();\n                     let mut lt_substs = FxHashMap();\n                     provided_params.with_generic_args(|generic_args| {\n-                        let mut indices = ty::GenericParamCount {\n-                            lifetimes: 0,\n-                            types: 0\n-                        };\n+                        let mut indices: GenericParamCount = Default::default();\n                         for param in generics.params.iter() {\n                             match param.kind {\n                                 hir::GenericParamKind::Lifetime { .. } => {"}]}