{"sha": "c08d004545edf1bf16ee670fd27b8d3a477341a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwOGQwMDQ1NDVlZGYxYmYxNmVlNjcwZmQyN2I4ZDNhNDc3MzQxYTU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-16T20:00:05Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-30T14:32:42Z"}, "message": "Refactor various queries out of `ty` and into `trans/common`", "tree": {"sha": "c4ed658f261b529cda62469121613cd00ada5666", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4ed658f261b529cda62469121613cd00ada5666"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c08d004545edf1bf16ee670fd27b8d3a477341a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c08d004545edf1bf16ee670fd27b8d3a477341a5", "html_url": "https://github.com/rust-lang/rust/commit/c08d004545edf1bf16ee670fd27b8d3a477341a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c08d004545edf1bf16ee670fd27b8d3a477341a5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2368c3c11ddab9d812c4ddec2e44579326ad347", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2368c3c11ddab9d812c4ddec2e44579326ad347", "html_url": "https://github.com/rust-lang/rust/commit/d2368c3c11ddab9d812c4ddec2e44579326ad347"}], "stats": {"total": 139, "additions": 75, "deletions": 64}, "files": [{"sha": "d09efb006f2636fc02d56556aa11dcad5e406e33", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c08d004545edf1bf16ee670fd27b8d3a477341a5/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08d004545edf1bf16ee670fd27b8d3a477341a5/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=c08d004545edf1bf16ee670fd27b8d3a477341a5", "patch": "@@ -682,7 +682,6 @@ pub struct ctxt<'tcx> {\n     pub tcache: RefCell<DefIdMap<Polytype<'tcx>>>,\n     pub rcache: RefCell<FnvHashMap<creader_cache_key, Ty<'tcx>>>,\n     pub short_names_cache: RefCell<FnvHashMap<Ty<'tcx>, String>>,\n-    pub needs_unwind_cleanup_cache: RefCell<FnvHashMap<Ty<'tcx>, bool>>,\n     pub tc_cache: RefCell<FnvHashMap<Ty<'tcx>, TypeContents>>,\n     pub ast_ty_to_ty_cache: RefCell<NodeMap<ast_ty_to_ty_cache_entry<'tcx>>>,\n     pub enum_var_cache: RefCell<DefIdMap<Rc<Vec<Rc<VariantInfo<'tcx>>>>>>,\n@@ -2108,7 +2107,6 @@ pub fn mk_ctxt<'tcx>(s: Session,\n         tcache: RefCell::new(DefIdMap::new()),\n         rcache: RefCell::new(FnvHashMap::new()),\n         short_names_cache: RefCell::new(FnvHashMap::new()),\n-        needs_unwind_cleanup_cache: RefCell::new(FnvHashMap::new()),\n         tc_cache: RefCell::new(FnvHashMap::new()),\n         ast_ty_to_ty_cache: RefCell::new(NodeMap::new()),\n         enum_var_cache: RefCell::new(DefIdMap::new()),\n@@ -2824,48 +2822,6 @@ pub fn type_is_floating_point(ty: Ty) -> bool {\n     }\n }\n \n-pub fn type_needs_drop<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n-    type_contents(cx, ty).needs_drop(cx)\n-}\n-\n-// Some things don't need cleanups during unwinding because the\n-// task can free them all at once later. Currently only things\n-// that only contain scalars and shared boxes can avoid unwind\n-// cleanups.\n-pub fn type_needs_unwind_cleanup<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n-    return memoized(&cx.needs_unwind_cleanup_cache, ty, |ty| {\n-        type_needs_unwind_cleanup_(cx, ty, &mut FnvHashSet::new())\n-    });\n-\n-    fn type_needs_unwind_cleanup_<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>,\n-                                        tycache: &mut FnvHashSet<Ty<'tcx>>) -> bool {\n-        // Prevent infinite recursion\n-        if !tycache.insert(ty) {\n-            return false;\n-        }\n-\n-        let mut needs_unwind_cleanup = false;\n-        maybe_walk_ty(ty, |ty| {\n-            needs_unwind_cleanup |= match ty.sty {\n-                ty_bool | ty_int(_) | ty_uint(_) |\n-                ty_float(_) | ty_tup(_) | ty_ptr(_) => false,\n-\n-                ty_enum(did, substs) =>\n-                    enum_variants(cx, did).iter().any(|v|\n-                        v.args.iter().any(|aty| {\n-                            let t = aty.subst(cx, substs);\n-                            type_needs_unwind_cleanup_(cx, t, tycache)\n-                        })\n-                    ),\n-\n-                _ => true\n-            };\n-            !needs_unwind_cleanup\n-        });\n-        needs_unwind_cleanup\n-    }\n-}\n-\n /// Type contents is how the type checker reasons about kinds.\n /// They track what kinds of things are found within a type.  You can\n /// think of them as kind of an \"anti-kind\".  They track the kinds of values"}, {"sha": "dab4c0273d07657da441fca6cdb3132664b9b79a", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c08d004545edf1bf16ee670fd27b8d3a477341a5/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08d004545edf1bf16ee670fd27b8d3a477341a5/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=c08d004545edf1bf16ee670fd27b8d3a477341a5", "patch": "@@ -722,7 +722,7 @@ pub fn trans_call_inner<'a, 'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n             };\n             if !is_rust_fn ||\n               type_of::return_uses_outptr(ccx, ret_ty) ||\n-              ty::type_needs_drop(bcx.tcx(), ret_ty) {\n+              type_needs_drop(bcx.tcx(), ret_ty) {\n                 // Push the out-pointer if we use an out-pointer for this\n                 // return type, otherwise push \"undef\".\n                 if type_is_zero_size(ccx, ret_ty) {"}, {"sha": "d02d6c1e8724f1e18fbe5e682d3121bb9ec7fc69", "filename": "src/librustc_trans/trans/cleanup.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c08d004545edf1bf16ee670fd27b8d3a477341a5/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08d004545edf1bf16ee670fd27b8d3a477341a5/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs?ref=c08d004545edf1bf16ee670fd27b8d3a477341a5", "patch": "@@ -279,10 +279,10 @@ impl<'blk, 'tcx> CleanupMethods<'blk, 'tcx> for FunctionContext<'blk, 'tcx> {\n                          cleanup_scope: ScopeId,\n                          val: ValueRef,\n                          ty: Ty<'tcx>) {\n-        if !ty::type_needs_drop(self.ccx.tcx(), ty) { return; }\n+        if !common::type_needs_drop(self.ccx.tcx(), ty) { return; }\n         let drop = box DropValue {\n             is_immediate: false,\n-            must_unwind: ty::type_needs_unwind_cleanup(self.ccx.tcx(), ty),\n+            must_unwind: common::type_needs_unwind_cleanup(self.ccx, ty),\n             val: val,\n             ty: ty,\n             zero: false\n@@ -301,10 +301,10 @@ impl<'blk, 'tcx> CleanupMethods<'blk, 'tcx> for FunctionContext<'blk, 'tcx> {\n                                   cleanup_scope: ScopeId,\n                                   val: ValueRef,\n                                   ty: Ty<'tcx>) {\n-        if !ty::type_needs_drop(self.ccx.tcx(), ty) { return; }\n+        if !common::type_needs_drop(self.ccx.tcx(), ty) { return; }\n         let drop = box DropValue {\n             is_immediate: false,\n-            must_unwind: ty::type_needs_unwind_cleanup(self.ccx.tcx(), ty),\n+            must_unwind: common::type_needs_unwind_cleanup(self.ccx, ty),\n             val: val,\n             ty: ty,\n             zero: true\n@@ -325,10 +325,10 @@ impl<'blk, 'tcx> CleanupMethods<'blk, 'tcx> for FunctionContext<'blk, 'tcx> {\n                                val: ValueRef,\n                                ty: Ty<'tcx>) {\n \n-        if !ty::type_needs_drop(self.ccx.tcx(), ty) { return; }\n+        if !common::type_needs_drop(self.ccx.tcx(), ty) { return; }\n         let drop = box DropValue {\n             is_immediate: true,\n-            must_unwind: ty::type_needs_unwind_cleanup(self.ccx.tcx(), ty),\n+            must_unwind: common::type_needs_unwind_cleanup(self.ccx, ty),\n             val: val,\n             ty: ty,\n             zero: false"}, {"sha": "7ee4be0ae56f9b338fa51bcd8b69e3395d825a2c", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c08d004545edf1bf16ee670fd27b8d3a477341a5/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08d004545edf1bf16ee670fd27b8d3a477341a5/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=c08d004545edf1bf16ee670fd27b8d3a477341a5", "patch": "@@ -53,9 +53,58 @@ use syntax::ast_map::{PathElem, PathName};\n use syntax::codemap::Span;\n use syntax::parse::token::InternedString;\n use syntax::parse::token;\n+use util::common::memoized;\n+use util::nodemap::FnvHashSet;\n \n pub use trans::context::CrateContext;\n \n+// Some things don't need cleanups during unwinding because the\n+// task can free them all at once later. Currently only things\n+// that only contain scalars and shared boxes can avoid unwind\n+// cleanups.\n+pub fn type_needs_unwind_cleanup<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n+    return memoized(ccx.needs_unwind_cleanup_cache(), ty, |ty| {\n+        type_needs_unwind_cleanup_(ccx.tcx(), ty, &mut FnvHashSet::new())\n+    });\n+\n+    fn type_needs_unwind_cleanup_<'tcx>(tcx: &ty::ctxt<'tcx>,\n+                                        ty: Ty<'tcx>,\n+                                        tycache: &mut FnvHashSet<Ty<'tcx>>)\n+                                        -> bool\n+    {\n+        // Prevent infinite recursion\n+        if !tycache.insert(ty) {\n+            return false;\n+        }\n+\n+        let mut needs_unwind_cleanup = false;\n+        ty::maybe_walk_ty(ty, |ty| {\n+            needs_unwind_cleanup |= match ty.sty {\n+                ty::ty_bool | ty::ty_int(_) | ty::ty_uint(_) |\n+                ty::ty_float(_) | ty::ty_tup(_) | ty::ty_ptr(_) => false,\n+\n+                ty::ty_enum(did, substs) =>\n+                    ty::enum_variants(tcx, did).iter().any(|v|\n+                        v.args.iter().any(|aty| {\n+                            let t = aty.subst(tcx, substs);\n+                            type_needs_unwind_cleanup_(tcx, t, tycache)\n+                        })\n+                    ),\n+\n+                _ => true\n+            };\n+            !needs_unwind_cleanup\n+        });\n+        needs_unwind_cleanup\n+    }\n+}\n+\n+pub fn type_needs_drop<'tcx>(cx: &ty::ctxt<'tcx>,\n+                             ty: Ty<'tcx>)\n+                             -> bool {\n+    ty::type_contents(cx, ty).needs_drop(cx)\n+}\n+\n fn type_is_newtype_immediate<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                        ty: Ty<'tcx>) -> bool {\n     match ty.sty {"}, {"sha": "02eaef885483ff4baad3c0ee1a4018668c888d35", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c08d004545edf1bf16ee670fd27b8d3a477341a5/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08d004545edf1bf16ee670fd27b8d3a477341a5/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=c08d004545edf1bf16ee670fd27b8d3a477341a5", "patch": "@@ -84,6 +84,7 @@ pub struct LocalCrateContext<'tcx> {\n     tn: TypeNames,\n     externs: RefCell<ExternMap>,\n     item_vals: RefCell<NodeMap<ValueRef>>,\n+    needs_unwind_cleanup_cache: RefCell<FnvHashMap<Ty<'tcx>, bool>>,\n     fn_pointer_shims: RefCell<FnvHashMap<Ty<'tcx>, ValueRef>>,\n     drop_glues: RefCell<FnvHashMap<Ty<'tcx>, ValueRef>>,\n     tydescs: RefCell<FnvHashMap<Ty<'tcx>, Rc<tydesc_info<'tcx>>>>,\n@@ -389,6 +390,7 @@ impl<'tcx> LocalCrateContext<'tcx> {\n                 tn: TypeNames::new(),\n                 externs: RefCell::new(FnvHashMap::new()),\n                 item_vals: RefCell::new(NodeMap::new()),\n+                needs_unwind_cleanup_cache: RefCell::new(FnvHashMap::new()),\n                 fn_pointer_shims: RefCell::new(FnvHashMap::new()),\n                 drop_glues: RefCell::new(FnvHashMap::new()),\n                 tydescs: RefCell::new(FnvHashMap::new()),\n@@ -569,6 +571,10 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         &self.shared.link_meta\n     }\n \n+    pub fn needs_unwind_cleanup_cache(&self) -> &RefCell<FnvHashMap<Ty<'tcx>, bool>> {\n+        &self.local.needs_unwind_cleanup_cache\n+    }\n+\n     pub fn fn_pointer_shims(&self) -> &RefCell<FnvHashMap<Ty<'tcx>, ValueRef>> {\n         &self.local.fn_pointer_shims\n     }"}, {"sha": "768de89d5935d0803c44427b6d66e2cfcc751f2e", "filename": "src/librustc_trans/trans/controlflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c08d004545edf1bf16ee670fd27b8d3a477341a5/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08d004545edf1bf16ee670fd27b8d3a477341a5/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs?ref=c08d004545edf1bf16ee670fd27b8d3a477341a5", "patch": "@@ -87,7 +87,7 @@ pub fn trans_stmt_semi<'blk, 'tcx>(cx: Block<'blk, 'tcx>, e: &ast::Expr)\n                                    -> Block<'blk, 'tcx> {\n     let _icx = push_ctxt(\"trans_stmt_semi\");\n     let ty = expr_ty(cx, e);\n-    if ty::type_needs_drop(cx.tcx(), ty) {\n+    if type_needs_drop(cx.tcx(), ty) {\n         expr::trans_to_lvalue(cx, e, \"stmt\").bcx\n     } else {\n         expr::trans_into(cx, e, expr::Ignore)"}, {"sha": "ca274ab605e7f8f18dbb1aaa0ceee0d59d1a4b06", "filename": "src/librustc_trans/trans/datum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c08d004545edf1bf16ee670fd27b8d3a477341a5/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08d004545edf1bf16ee670fd27b8d3a477341a5/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs?ref=c08d004545edf1bf16ee670fd27b8d3a477341a5", "patch": "@@ -218,7 +218,7 @@ impl KindOps for Lvalue {\n                               val: ValueRef,\n                               ty: Ty<'tcx>)\n                               -> Block<'blk, 'tcx> {\n-        if ty::type_needs_drop(bcx.tcx(), ty) {\n+        if type_needs_drop(bcx.tcx(), ty) {\n             // cancel cleanup of affine values by zeroing out\n             let () = zero_mem(bcx, val, ty);\n             bcx\n@@ -567,7 +567,7 @@ impl<'tcx, K: KindOps + fmt::Show> Datum<'tcx, K> {\n     /// scalar-ish (like an int or a pointer) which (1) does not require drop glue and (2) is\n     /// naturally passed around by value, and not by reference.\n     pub fn to_llscalarish<'blk>(self, bcx: Block<'blk, 'tcx>) -> ValueRef {\n-        assert!(!ty::type_needs_drop(bcx.tcx(), self.ty));\n+        assert!(!type_needs_drop(bcx.tcx(), self.ty));\n         assert!(self.appropriate_rvalue_mode(bcx.ccx()) == ByValue);\n         if self.kind.is_by_ref() {\n             load_ty(bcx, self.val, self.ty)"}, {"sha": "ae07e094a5c6179ee115b946531031f2ce29014c", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c08d004545edf1bf16ee670fd27b8d3a477341a5/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08d004545edf1bf16ee670fd27b8d3a477341a5/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=c08d004545edf1bf16ee670fd27b8d3a477341a5", "patch": "@@ -976,7 +976,7 @@ fn trans_rvalue_stmt_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             let src_datum = unpack_datum!(bcx, trans(bcx, &**src));\n             let dst_datum = unpack_datum!(bcx, trans_to_lvalue(bcx, &**dst, \"assign\"));\n \n-            if ty::type_needs_drop(bcx.tcx(), dst_datum.ty) {\n+            if type_needs_drop(bcx.tcx(), dst_datum.ty) {\n                 // If there are destructors involved, make sure we\n                 // are copying from an rvalue, since that cannot possible\n                 // alias an lvalue. We are concerned about code like:\n@@ -1513,7 +1513,7 @@ pub fn trans_adt<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         assert_eq!(discr, 0);\n \n         match ty::expr_kind(bcx.tcx(), &*base.expr) {\n-            ty::RvalueDpsExpr | ty::RvalueDatumExpr if !ty::type_needs_drop(bcx.tcx(), ty) => {\n+            ty::RvalueDpsExpr | ty::RvalueDatumExpr if !type_needs_drop(bcx.tcx(), ty) => {\n                 bcx = trans_into(bcx, &*base.expr, SaveIn(addr));\n             },\n             ty::RvalueStmtExpr => bcx.tcx().sess.bug(\"unexpected expr kind for struct base expr\"),\n@@ -2117,7 +2117,7 @@ fn trans_assign_op<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     // Evaluate LHS (destination), which should be an lvalue\n     let dst_datum = unpack_datum!(bcx, trans_to_lvalue(bcx, dst, \"assign_op\"));\n-    assert!(!ty::type_needs_drop(bcx.tcx(), dst_datum.ty));\n+    assert!(!type_needs_drop(bcx.tcx(), dst_datum.ty));\n     let dst_ty = dst_datum.ty;\n     let dst = load_ty(bcx, dst_datum.val, dst_datum.ty);\n "}, {"sha": "4217dd4c6718b9a32cf8bf34814d735931d7d22a", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c08d004545edf1bf16ee670fd27b8d3a477341a5/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08d004545edf1bf16ee670fd27b8d3a477341a5/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=c08d004545edf1bf16ee670fd27b8d3a477341a5", "patch": "@@ -84,11 +84,11 @@ pub fn get_drop_glue_type<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     if !ty::type_is_sized(tcx, t) {\n         return t\n     }\n-    if !ty::type_needs_drop(tcx, t) {\n+    if !type_needs_drop(tcx, t) {\n         return ty::mk_i8();\n     }\n     match t.sty {\n-        ty::ty_uniq(typ) if !ty::type_needs_drop(tcx, typ)\n+        ty::ty_uniq(typ) if !type_needs_drop(tcx, typ)\n                          && ty::type_is_sized(tcx, typ) => {\n             let llty = sizing_type_of(ccx, typ);\n             // `Box<ZeroSizeType>` does not allocate.\n@@ -110,7 +110,7 @@ pub fn drop_ty<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     // NB: v is an *alias* of type t here, not a direct value.\n     debug!(\"drop_ty(t={})\", t.repr(bcx.tcx()));\n     let _icx = push_ctxt(\"drop_ty\");\n-    if ty::type_needs_drop(bcx.tcx(), t) {\n+    if type_needs_drop(bcx.tcx(), t) {\n         let ccx = bcx.ccx();\n         let glue = get_drop_glue(ccx, t);\n         let glue_type = get_drop_glue_type(ccx, t);\n@@ -469,7 +469,7 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, t: Ty<'tcx>)\n         ty::ty_vec(ty, None) => tvec::make_drop_glue_unboxed(bcx, v0, ty, false),\n         _ => {\n             assert!(ty::type_is_sized(bcx.tcx(), t));\n-            if ty::type_needs_drop(bcx.tcx(), t) &&\n+            if type_needs_drop(bcx.tcx(), t) &&\n                 ty::type_is_structural(t) {\n                 iter_structural_ty(bcx, v0, t, |bb, vv, tt| drop_ty(bb, vv, tt, None))\n             } else {"}, {"sha": "f471a92f6c321923c9c750e728c2049d3f27ece7", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c08d004545edf1bf16ee670fd27b8d3a477341a5/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08d004545edf1bf16ee670fd27b8d3a477341a5/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=c08d004545edf1bf16ee670fd27b8d3a477341a5", "patch": "@@ -365,7 +365,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         }\n         (_, \"needs_drop\") => {\n             let tp_ty = *substs.types.get(FnSpace, 0);\n-            C_bool(ccx, ty::type_needs_drop(ccx.tcx(), tp_ty))\n+            C_bool(ccx, type_needs_drop(ccx.tcx(), tp_ty))\n         }\n         (_, \"owns_managed\") => {\n             let tp_ty = *substs.types.get(FnSpace, 0);"}, {"sha": "a937f989b3ac59f75c167dc2d84308f8616143a8", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c08d004545edf1bf16ee670fd27b8d3a477341a5/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08d004545edf1bf16ee670fd27b8d3a477341a5/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=c08d004545edf1bf16ee670fd27b8d3a477341a5", "patch": "@@ -436,7 +436,7 @@ fn trans_trait_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let self_datum = unpack_datum!(\n         bcx, expr::trans(bcx, self_expr));\n \n-    let llval = if ty::type_needs_drop(bcx.tcx(), self_datum.ty) {\n+    let llval = if type_needs_drop(bcx.tcx(), self_datum.ty) {\n         let self_datum = unpack_datum!(\n             bcx, self_datum.to_rvalue_datum(bcx, \"trait_callee\"));\n "}, {"sha": "688a0d0725058288f405673796494be319f8252a", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c08d004545edf1bf16ee670fd27b8d3a477341a5/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08d004545edf1bf16ee670fd27b8d3a477341a5/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=c08d004545edf1bf16ee670fd27b8d3a477341a5", "patch": "@@ -62,7 +62,7 @@ pub fn make_drop_glue_unboxed<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         let _icx = push_ctxt(\"tvec::make_drop_glue_unboxed\");\n \n         let dataptr = get_dataptr(bcx, vptr);\n-        let bcx = if ty::type_needs_drop(tcx, unit_ty) {\n+        let bcx = if type_needs_drop(tcx, unit_ty) {\n             let len = get_len(bcx, vptr);\n             iter_vec_raw(bcx, dataptr, unit_ty, len, |bb, vv, tt| glue::drop_ty(bb, vv, tt, None))\n         } else {"}]}