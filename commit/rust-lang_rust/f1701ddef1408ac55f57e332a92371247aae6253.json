{"sha": "f1701ddef1408ac55f57e332a92371247aae6253", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNzAxZGRlZjE0MDhhYzU1ZjU3ZTMzMmE5MjM3MTI0N2FhZTYyNTM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-24T01:44:41Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-24T07:44:55Z"}, "message": "rustc: remove rustc_hir_pretty dependency.", "tree": {"sha": "95017830d7c0e2e2bee8b27d8886a536f7ea0ff1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95017830d7c0e2e2bee8b27d8886a536f7ea0ff1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1701ddef1408ac55f57e332a92371247aae6253", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1701ddef1408ac55f57e332a92371247aae6253", "html_url": "https://github.com/rust-lang/rust/commit/f1701ddef1408ac55f57e332a92371247aae6253", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1701ddef1408ac55f57e332a92371247aae6253/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92885e3a5bc855c24e302154635107c848f8b585", "url": "https://api.github.com/repos/rust-lang/rust/commits/92885e3a5bc855c24e302154635107c848f8b585", "html_url": "https://github.com/rust-lang/rust/commit/92885e3a5bc855c24e302154635107c848f8b585"}], "stats": {"total": 200, "additions": 101, "deletions": 99}, "files": [{"sha": "4b0e78bf2b3c789b4f1261c1f29b9f17046b5907", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1701ddef1408ac55f57e332a92371247aae6253/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f1701ddef1408ac55f57e332a92371247aae6253/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f1701ddef1408ac55f57e332a92371247aae6253", "patch": "@@ -3114,7 +3114,6 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_feature\",\n  \"rustc_hir\",\n- \"rustc_hir_pretty\",\n  \"rustc_index\",\n  \"rustc_macros\",\n  \"rustc_query_system\",\n@@ -4086,6 +4085,7 @@ dependencies = [\n  \"rustc_ast_pretty\",\n  \"rustc_data_structures\",\n  \"rustc_hir\",\n+ \"rustc_hir_pretty\",\n  \"rustc_parse\",\n  \"rustc_session\",\n  \"rustc_span\","}, {"sha": "47b94a2f1a4b49947eef67613ecdd6a3de4cb3a1", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=f1701ddef1408ac55f57e332a92371247aae6253", "patch": "@@ -22,7 +22,6 @@ rustc_apfloat = { path = \"../librustc_apfloat\" }\n rustc_attr = { path = \"../librustc_attr\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_hir = { path = \"../librustc_hir\" }\n-rustc_hir_pretty = { path = \"../librustc_hir_pretty\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "221efedd1d75d7dc4eb4a6ed611d8558f66ef22a", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 24, "deletions": 41, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=f1701ddef1408ac55f57e332a92371247aae6253", "patch": "@@ -13,7 +13,6 @@ pub use rustc_hir::definitions::{Definitions, DisambiguatedDefPathData};\n use rustc_hir::intravisit;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::*;\n-use rustc_hir_pretty::Nested;\n use rustc_index::vec::IndexVec;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::Spanned;\n@@ -954,20 +953,18 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    /// Get a representation of this `id` for debugging purposes.\n+    /// NOTE: Do NOT use this in diagnostics!\n     pub fn node_to_string(&self, id: HirId) -> String {\n-        hir_id_to_string(self, id, true)\n-    }\n-\n-    pub fn hir_to_user_string(&self, id: HirId) -> String {\n-        hir_id_to_string(self, id, false)\n-    }\n-\n-    pub fn hir_to_pretty_string(&self, id: HirId) -> String {\n-        rustc_hir_pretty::to_string(self, |s| s.print_node(self.get(id)))\n+        hir_id_to_string(self, id)\n     }\n }\n \n impl<'hir> intravisit::Map<'hir> for Map<'hir> {\n+    fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {\n+        self.find(hir_id)\n+    }\n+\n     fn body(&self, id: BodyId) -> &'hir Body<'hir> {\n         self.body(id)\n     }\n@@ -1046,23 +1043,8 @@ pub(super) fn index_hir<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> &'tcx Indexe\n     tcx.arena.alloc(IndexedHir { crate_hash, map })\n }\n \n-/// Identical to the `PpAnn` implementation for `hir::Crate`,\n-/// except it avoids creating a dependency on the whole crate.\n-impl<'hir> rustc_hir_pretty::PpAnn for Map<'hir> {\n-    fn nested(&self, state: &mut rustc_hir_pretty::State<'_>, nested: rustc_hir_pretty::Nested) {\n-        match nested {\n-            Nested::Item(id) => state.print_item(self.expect_item(id.id)),\n-            Nested::TraitItem(id) => state.print_trait_item(self.trait_item(id)),\n-            Nested::ImplItem(id) => state.print_impl_item(self.impl_item(id)),\n-            Nested::Body(id) => state.print_expr(&self.body(id).value),\n-            Nested::BodyParamPat(id, i) => state.print_pat(&self.body(id).params[i].pat),\n-        }\n-    }\n-}\n-\n-fn hir_id_to_string(map: &Map<'_>, id: HirId, include_id: bool) -> String {\n+fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {\n     let id_str = format!(\" (hir_id={})\", id);\n-    let id_str = if include_id { &id_str[..] } else { \"\" };\n \n     let path_str = || {\n         // This functionality is used for debugging, try to use `TyCtxt` to get\n@@ -1083,6 +1065,9 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId, include_id: bool) -> String {\n         })\n     };\n \n+    let span_str = || map.tcx.sess.source_map().span_to_snippet(map.span(id)).unwrap_or_default();\n+    let node_str = |prefix| format!(\"{} {}{}\", prefix, span_str(), id_str);\n+\n     match map.find(id) {\n         Some(Node::Item(item)) => {\n             let item_str = match item.kind {\n@@ -1133,22 +1118,20 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId, include_id: bool) -> String {\n         Some(Node::Field(ref field)) => {\n             format!(\"field {} in {}{}\", field.ident, path_str(), id_str)\n         }\n-        Some(Node::AnonConst(_)) => format!(\"const {}{}\", map.hir_to_pretty_string(id), id_str),\n-        Some(Node::Expr(_)) => format!(\"expr {}{}\", map.hir_to_pretty_string(id), id_str),\n-        Some(Node::Stmt(_)) => format!(\"stmt {}{}\", map.hir_to_pretty_string(id), id_str),\n-        Some(Node::PathSegment(_)) => {\n-            format!(\"path segment {}{}\", map.hir_to_pretty_string(id), id_str)\n-        }\n-        Some(Node::Ty(_)) => format!(\"type {}{}\", map.hir_to_pretty_string(id), id_str),\n-        Some(Node::TraitRef(_)) => format!(\"trait_ref {}{}\", map.hir_to_pretty_string(id), id_str),\n-        Some(Node::Binding(_)) => format!(\"local {}{}\", map.hir_to_pretty_string(id), id_str),\n-        Some(Node::Pat(_)) => format!(\"pat {}{}\", map.hir_to_pretty_string(id), id_str),\n-        Some(Node::Param(_)) => format!(\"param {}{}\", map.hir_to_pretty_string(id), id_str),\n-        Some(Node::Arm(_)) => format!(\"arm {}{}\", map.hir_to_pretty_string(id), id_str),\n-        Some(Node::Block(_)) => format!(\"block {}{}\", map.hir_to_pretty_string(id), id_str),\n-        Some(Node::Local(_)) => format!(\"local {}{}\", map.hir_to_pretty_string(id), id_str),\n+        Some(Node::AnonConst(_)) => node_str(\"const\"),\n+        Some(Node::Expr(_)) => node_str(\"expr\"),\n+        Some(Node::Stmt(_)) => node_str(\"stmt\"),\n+        Some(Node::PathSegment(_)) => node_str(\"path segment\"),\n+        Some(Node::Ty(_)) => node_str(\"type\"),\n+        Some(Node::TraitRef(_)) => node_str(\"trait ref\"),\n+        Some(Node::Binding(_)) => node_str(\"local\"),\n+        Some(Node::Pat(_)) => node_str(\"pat\"),\n+        Some(Node::Param(_)) => node_str(\"param\"),\n+        Some(Node::Arm(_)) => node_str(\"arm\"),\n+        Some(Node::Block(_)) => node_str(\"block\"),\n+        Some(Node::Local(_)) => node_str(\"local\"),\n         Some(Node::Ctor(..)) => format!(\"ctor {}{}\", path_str(), id_str),\n-        Some(Node::Lifetime(_)) => format!(\"lifetime {}{}\", map.hir_to_pretty_string(id), id_str),\n+        Some(Node::Lifetime(_)) => node_str(\"lifetime\"),\n         Some(Node::GenericParam(ref param)) => format!(\"generic_param {:?}{}\", param, id_str),\n         Some(Node::Visibility(ref vis)) => format!(\"visibility {:?}{}\", vis, id_str),\n         Some(Node::MacroDef(_)) => format!(\"macro {}{}\", path_str(), id_str),"}, {"sha": "a57a70e6b8ca71be2871eb7b6982755fa124bd0c", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=f1701ddef1408ac55f57e332a92371247aae6253", "patch": "@@ -155,7 +155,7 @@ impl<'hir> pprust::PpAnn for NoAnn<'hir> {}\n impl<'hir> pprust_hir::PpAnn for NoAnn<'hir> {\n     fn nested(&self, state: &mut pprust_hir::State<'_>, nested: pprust_hir::Nested) {\n         if let Some(tcx) = self.tcx {\n-            pprust_hir::PpAnn::nested(&tcx.hir(), state, nested)\n+            pprust_hir::PpAnn::nested(&(&tcx.hir() as &dyn hir::intravisit::Map<'_>), state, nested)\n         }\n     }\n }\n@@ -228,7 +228,7 @@ impl<'hir> HirPrinterSupport<'hir> for IdentifiedAnnotation<'hir> {\n impl<'hir> pprust_hir::PpAnn for IdentifiedAnnotation<'hir> {\n     fn nested(&self, state: &mut pprust_hir::State<'_>, nested: pprust_hir::Nested) {\n         if let Some(ref tcx) = self.tcx {\n-            pprust_hir::PpAnn::nested(&tcx.hir(), state, nested)\n+            pprust_hir::PpAnn::nested(&(&tcx.hir() as &dyn hir::intravisit::Map<'_>), state, nested)\n         }\n     }\n     fn pre(&self, s: &mut pprust_hir::State<'_>, node: pprust_hir::AnnNode<'_>) {\n@@ -334,7 +334,8 @@ impl<'a, 'tcx> pprust_hir::PpAnn for TypedAnnotation<'a, 'tcx> {\n         if let pprust_hir::Nested::Body(id) = nested {\n             self.tables.set(self.tcx.body_tables(id));\n         }\n-        pprust_hir::PpAnn::nested(&self.tcx.hir(), state, nested);\n+        let pp_ann = &(&self.tcx.hir() as &dyn hir::intravisit::Map<'_>);\n+        pprust_hir::PpAnn::nested(pp_ann, state, nested);\n         self.tables.set(old_tables);\n     }\n     fn pre(&self, s: &mut pprust_hir::State<'_>, node: pprust_hir::AnnNode<'_>) {"}, {"sha": "08b4ef1b918e1afc81221f6301703ea7d30291f2", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=f1701ddef1408ac55f57e332a92371247aae6253", "patch": "@@ -121,6 +121,8 @@ impl<'a> FnKind<'a> {\n \n /// An abstract representation of the HIR `rustc::hir::map::Map`.\n pub trait Map<'hir> {\n+    /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.\n+    fn find(&self, hir_id: HirId) -> Option<Node<'hir>>;\n     fn body(&self, id: BodyId) -> &'hir Body<'hir>;\n     fn item(&self, id: HirId) -> &'hir Item<'hir>;\n     fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir>;\n@@ -132,6 +134,9 @@ pub trait Map<'hir> {\n pub struct ErasedMap<'hir>(&'hir dyn Map<'hir>);\n \n impl<'hir> Map<'hir> for ErasedMap<'hir> {\n+    fn find(&self, _: HirId) -> Option<Node<'hir>> {\n+        None\n+    }\n     fn body(&self, id: BodyId) -> &'hir Body<'hir> {\n         self.0.body(id)\n     }"}, {"sha": "06f338af9e92b982feafc8ace7c33eaceabc33a0", "filename": "src/librustc_hir_pretty/lib.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustc_hir_pretty%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustc_hir_pretty%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir_pretty%2Flib.rs?ref=f1701ddef1408ac55f57e332a92371247aae6253", "patch": "@@ -15,6 +15,10 @@ use std::borrow::Cow;\n use std::cell::Cell;\n use std::vec;\n \n+pub fn id_to_string(map: &dyn rustc_hir::intravisit::Map<'_>, hir_id: hir::HirId) -> String {\n+    to_string(&map, |s| s.print_node(map.find(hir_id).unwrap()))\n+}\n+\n pub enum AnnNode<'a> {\n     Name(&'a ast::Name),\n     Block(&'a hir::Block<'a>),\n@@ -61,6 +65,20 @@ impl PpAnn for hir::Crate<'_> {\n     }\n }\n \n+/// Identical to the `PpAnn` implementation for `hir::Crate`,\n+/// except it avoids creating a dependency on the whole crate.\n+impl PpAnn for &dyn rustc_hir::intravisit::Map<'_> {\n+    fn nested(&self, state: &mut State<'_>, nested: Nested) {\n+        match nested {\n+            Nested::Item(id) => state.print_item(self.item(id.id)),\n+            Nested::TraitItem(id) => state.print_trait_item(self.trait_item(id)),\n+            Nested::ImplItem(id) => state.print_impl_item(self.impl_item(id)),\n+            Nested::Body(id) => state.print_expr(&self.body(id).value),\n+            Nested::BodyParamPat(id, i) => state.print_pat(&self.body(id).params[i].pat),\n+        }\n+    }\n+}\n+\n pub struct State<'a> {\n     pub s: pp::Printer,\n     comments: Option<Comments<'a>>,"}, {"sha": "6c86dfe39e2a67daafec753dbdcbf1bdd49910ee", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=f1701ddef1408ac55f57e332a92371247aae6253", "patch": "@@ -829,8 +829,10 @@ impl EncodeContext<'tcx> {\n \n         record!(self.per_def.kind[def_id] <- match trait_item.kind {\n             ty::AssocKind::Const => {\n-                let rendered =\n-                    rustc_hir_pretty::to_string(&self.tcx.hir(), |s| s.print_trait_item(ast_item));\n+                let rendered = rustc_hir_pretty::to_string(\n+                    &(&self.tcx.hir() as &dyn intravisit::Map<'_>),\n+                    |s| s.print_trait_item(ast_item)\n+                );\n                 let rendered_const = self.lazy(RenderedConst(rendered));\n \n                 EntryKind::AssocConst(\n@@ -1047,8 +1049,11 @@ impl EncodeContext<'tcx> {\n     }\n \n     fn encode_rendered_const_for_body(&mut self, body_id: hir::BodyId) -> Lazy<RenderedConst> {\n-        let body = self.tcx.hir().body(body_id);\n-        let rendered = rustc_hir_pretty::to_string(&self.tcx.hir(), |s| s.print_expr(&body.value));\n+        let hir = self.tcx.hir();\n+        let body = hir.body(body_id);\n+        let rendered = rustc_hir_pretty::to_string(&(&hir as &dyn intravisit::Map<'_>), |s| {\n+            s.print_expr(&body.value)\n+        });\n         let rendered_const = &RenderedConst(rendered);\n         self.lazy(rendered_const)\n     }"}, {"sha": "e729c2d517feaeae4c9289e867be816fa508159f", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=f1701ddef1408ac55f57e332a92371247aae6253", "patch": "@@ -903,10 +903,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     }\n \n     fn compute(&mut self, body: &hir::Expr<'_>) -> LiveNode {\n-        debug!(\n-            \"compute: using id for body, {}\",\n-            self.ir.tcx.hir().hir_to_pretty_string(body.hir_id)\n-        );\n+        debug!(\"compute: using id for body, {:?}\", body);\n \n         // the fallthrough exit is only for those cases where we do not\n         // explicitly return:\n@@ -979,7 +976,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     }\n \n     fn propagate_through_expr(&mut self, expr: &Expr<'_>, succ: LiveNode) -> LiveNode {\n-        debug!(\"propagate_through_expr: {}\", self.ir.tcx.hir().hir_to_pretty_string(expr.hir_id));\n+        debug!(\"propagate_through_expr: {:?}\", expr);\n \n         match expr.kind {\n             // Interesting cases with control flow or which gen/kill\n@@ -990,10 +987,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             hir::ExprKind::Field(ref e, _) => self.propagate_through_expr(&e, succ),\n \n             hir::ExprKind::Closure(..) => {\n-                debug!(\n-                    \"{} is an ExprKind::Closure\",\n-                    self.ir.tcx.hir().hir_to_pretty_string(expr.hir_id)\n-                );\n+                debug!(\"{:?} is an ExprKind::Closure\", expr);\n \n                 // the construction of a closure itself is not important,\n                 // but we have to consider the closed over variables.\n@@ -1344,11 +1338,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         let mut first_merge = true;\n         let ln = self.live_node(expr.hir_id, expr.span);\n         self.init_empty(ln, succ);\n-        debug!(\n-            \"propagate_through_loop: using id for loop body {} {}\",\n-            expr.hir_id,\n-            self.ir.tcx.hir().hir_to_pretty_string(body.hir_id)\n-        );\n+        debug!(\"propagate_through_loop: using id for loop body {} {:?}\", expr.hir_id, body);\n \n         self.break_ln.insert(expr.hir_id, succ);\n "}, {"sha": "623da1ddcb4258971df6d12bfa6f2a012e173151", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=f1701ddef1408ac55f57e332a92371247aae6253", "patch": "@@ -11,13 +11,14 @@ path = \"lib.rs\"\n [dependencies]\n log = \"0.4\"\n rustc = { path = \"../librustc\" }\n+rustc_ast = { path = \"../librustc_ast\" }\n rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-rustc_session = { path = \"../librustc_session\" }\n rustc_hir = { path = \"../librustc_hir\" }\n+rustc_hir_pretty = { path = \"../librustc_hir_pretty\" }\n rustc_parse = { path = \"../librustc_parse\" }\n serde_json = \"1\"\n-rustc_ast = { path = \"../librustc_ast\" }\n+rustc_session = { path = \"../librustc_session\" }\n rustc_span = { path = \"../librustc_span\" }\n rls-data = \"0.19\"\n rls-span = \"0.5\""}, {"sha": "21551eeddb927b3a05554f3f7a2485f87d461bdb", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=f1701ddef1408ac55f57e332a92371247aae6253", "patch": "@@ -404,14 +404,15 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             Some(impl_id) => match self.tcx.hir().get_if_local(impl_id) {\n                 Some(Node::Item(item)) => match item.kind {\n                     hir::ItemKind::Impl { ref self_ty, .. } => {\n+                        let hir = self.tcx.hir();\n+\n                         let mut qualname = String::from(\"<\");\n-                        qualname.push_str(&self.tcx.hir().hir_to_pretty_string(self_ty.hir_id));\n+                        qualname.push_str(&rustc_hir_pretty::id_to_string(&hir, self_ty.hir_id));\n \n                         let trait_id = self.tcx.trait_id_of_impl(impl_id);\n                         let mut docs = String::new();\n                         let mut attrs = vec![];\n-                        let hir_id = self.tcx.hir().node_to_hir_id(id);\n-                        if let Some(Node::ImplItem(item)) = self.tcx.hir().find(hir_id) {\n+                        if let Some(Node::ImplItem(item)) = hir.find(hir.node_to_hir_id(id)) {\n                             docs = self.docs_for_attrs(&item.attrs);\n                             attrs = item.attrs.to_vec();\n                         }"}, {"sha": "074951684ef06c2ffc633f27463dc4293ed80841", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=f1701ddef1408ac55f57e332a92371247aae6253", "patch": "@@ -265,7 +265,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if let &ty::Adt(adt_def, ..) = t {\n                     if adt_def.is_enum() {\n                         if let hir::ExprKind::Call(ref expr, _) = call_expr.kind {\n-                            unit_variant = Some(self.tcx.hir().hir_to_pretty_string(expr.hir_id))\n+                            unit_variant =\n+                                self.tcx.sess.source_map().span_to_snippet(expr.span).ok();\n                         }\n                     }\n                 }"}, {"sha": "53a20d9e867888fe63ec3d556e5f0059b393ba15", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=f1701ddef1408ac55f57e332a92371247aae6253", "patch": "@@ -1671,20 +1671,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if let (Some(len), Ok(user_index)) =\n             (len.try_eval_usize(self.tcx, self.param_env), field.as_str().parse::<u64>())\n         {\n-            let base = self\n-                .tcx\n-                .sess\n-                .source_map()\n-                .span_to_snippet(base.span)\n-                .unwrap_or_else(|_| self.tcx.hir().hir_to_pretty_string(base.hir_id));\n-            let help = \"instead of using tuple indexing, use array indexing\";\n-            let suggestion = format!(\"{}[{}]\", base, field);\n-            let applicability = if len < user_index {\n-                Applicability::MachineApplicable\n-            } else {\n-                Applicability::MaybeIncorrect\n-            };\n-            err.span_suggestion(expr.span, help, suggestion, applicability);\n+            if let Ok(base) = self.tcx.sess.source_map().span_to_snippet(base.span) {\n+                let help = \"instead of using tuple indexing, use array indexing\";\n+                let suggestion = format!(\"{}[{}]\", base, field);\n+                let applicability = if len < user_index {\n+                    Applicability::MachineApplicable\n+                } else {\n+                    Applicability::MaybeIncorrect\n+                };\n+                err.span_suggestion(expr.span, help, suggestion, applicability);\n+            }\n         }\n     }\n \n@@ -1695,15 +1691,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         base: &hir::Expr<'_>,\n         field: ast::Ident,\n     ) {\n-        let base = self\n-            .tcx\n-            .sess\n-            .source_map()\n-            .span_to_snippet(base.span)\n-            .unwrap_or_else(|_| self.tcx.hir().hir_to_pretty_string(base.hir_id));\n-        let msg = format!(\"`{}` is a raw pointer; try dereferencing it\", base);\n-        let suggestion = format!(\"(*{}).{}\", base, field);\n-        err.span_suggestion(expr.span, &msg, suggestion, Applicability::MaybeIncorrect);\n+        if let Ok(base) = self.tcx.sess.source_map().span_to_snippet(base.span) {\n+            let msg = format!(\"`{}` is a raw pointer; try dereferencing it\", base);\n+            let suggestion = format!(\"(*{}).{}\", base, field);\n+            err.span_suggestion(expr.span, &msg, suggestion, Applicability::MaybeIncorrect);\n+        }\n     }\n \n     fn no_such_field_err<T: Display>("}, {"sha": "e602c3a30645d709b28c3e3ddad91a2874be7d0b", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f1701ddef1408ac55f57e332a92371247aae6253", "patch": "@@ -2139,13 +2139,18 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n     {\n         let check = |ast_ty: &hir::Ty<'_>, ty: Ty<'_>| {\n             if ty.is_simd() {\n+                let snip = tcx\n+                    .sess\n+                    .source_map()\n+                    .span_to_snippet(ast_ty.span)\n+                    .map_or(String::new(), |s| format!(\" `{}`\", s));\n                 tcx.sess\n                     .struct_span_err(\n                         ast_ty.span,\n                         &format!(\n-                            \"use of SIMD type `{}` in FFI is highly experimental and \\\n+                            \"use of SIMD type{} in FFI is highly experimental and \\\n                              may result in invalid code\",\n-                            tcx.hir().hir_to_pretty_string(ast_ty.hir_id)\n+                            snip\n                         ),\n                     )\n                     .help(\"add `#![feature(simd_ffi)]` to the crate attributes to enable\")"}, {"sha": "510eae82834c873d4557bcd8021066985282ada7", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=f1701ddef1408ac55f57e332a92371247aae6253", "patch": "@@ -482,8 +482,8 @@ fn build_module(cx: &DocContext<'_>, did: DefId, visited: &mut FxHashSet<DefId>)\n }\n \n pub fn print_inlined_const(cx: &DocContext<'_>, did: DefId) -> String {\n-    if let Some(node_id) = cx.tcx.hir().as_local_hir_id(did) {\n-        cx.tcx.hir().hir_to_pretty_string(node_id)\n+    if let Some(hir_id) = cx.tcx.hir().as_local_hir_id(did) {\n+        rustc_hir_pretty::id_to_string(&cx.tcx.hir(), hir_id)\n     } else {\n         cx.tcx.rendered_const(did)\n     }"}, {"sha": "b3bfb559749cb4143b9423c8c62adb9b3acbfcb0", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=f1701ddef1408ac55f57e332a92371247aae6253", "patch": "@@ -578,7 +578,7 @@ pub fn print_const_expr(cx: &DocContext<'_>, body: hir::BodyId) -> String {\n         None\n     };\n \n-    snippet.unwrap_or_else(|| cx.tcx.hir().hir_to_pretty_string(body.hir_id))\n+    snippet.unwrap_or_else(|| rustc_hir_pretty::id_to_string(&cx.tcx.hir(), body.hir_id))\n }\n \n /// Given a type Path, resolve it to a Type using the TyCtxt"}, {"sha": "3c5df0247c1e8f382d18fb3b52ae1e616eec2a3d", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=f1701ddef1408ac55f57e332a92371247aae6253", "patch": "@@ -26,6 +26,7 @@ extern crate rustc_errors;\n extern crate rustc_expand;\n extern crate rustc_feature;\n extern crate rustc_hir;\n+extern crate rustc_hir_pretty;\n extern crate rustc_index;\n extern crate rustc_infer;\n extern crate rustc_interface;"}, {"sha": "93305a1f87a16e7e079d705720932e087a85c610", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1701ddef1408ac55f57e332a92371247aae6253/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=f1701ddef1408ac55f57e332a92371247aae6253", "patch": "@@ -910,7 +910,7 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirCollector<'a, 'hir> {\n \n     fn visit_item(&mut self, item: &'hir hir::Item) {\n         let name = if let hir::ItemKind::Impl { ref self_ty, .. } = item.kind {\n-            self.map.hir_to_pretty_string(self_ty.hir_id)\n+            rustc_hir_pretty::id_to_string(&self.map, self_ty.hir_id)\n         } else {\n             item.ident.to_string()\n         };"}]}