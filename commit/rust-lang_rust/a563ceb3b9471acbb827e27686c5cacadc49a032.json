{"sha": "a563ceb3b9471acbb827e27686c5cacadc49a032", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NjNjZWIzYjk0NzFhY2JiODI3ZTI3Njg2YzVjYWNhZGM0OWEwMzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-03T02:27:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-03T02:27:15Z"}, "message": "Auto merge of #56358 - nikic:mergefunc-aliases, r=rkruppe\n\nEnable -mergefunc-use-aliases\n\nIf the Rust LLVM fork is used, enable the -mergefunc-use-aliases\nflag, which will create aliases for merged functions, rather than\ninserting a call from one to the other.\n\nA number of codegen tests needed to be adjusted, because functions\nthat previously fell below the thunk limit are now being merged.\nMerging is prevented in various ways now.\n\nI expect that this is going to break something, somewhere, because\nit isn't able to deal with aliases properly, but we won't find out\nuntil we try :)\n\nThis fixes #52651.\n\nr? @rkruppe", "tree": {"sha": "18d02d7af14c9910eb9cf1fc1c10eafdcef51333", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18d02d7af14c9910eb9cf1fc1c10eafdcef51333"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a563ceb3b9471acbb827e27686c5cacadc49a032", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a563ceb3b9471acbb827e27686c5cacadc49a032", "html_url": "https://github.com/rust-lang/rust/commit/a563ceb3b9471acbb827e27686c5cacadc49a032", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a563ceb3b9471acbb827e27686c5cacadc49a032/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b817d0b65156ab2b7c903ecce7ad16033961344e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b817d0b65156ab2b7c903ecce7ad16033961344e", "html_url": "https://github.com/rust-lang/rust/commit/b817d0b65156ab2b7c903ecce7ad16033961344e"}, {"sha": "850d2f1af0224cf1d442a66c33470791a2597888", "url": "https://api.github.com/repos/rust-lang/rust/commits/850d2f1af0224cf1d442a66c33470791a2597888", "html_url": "https://github.com/rust-lang/rust/commit/850d2f1af0224cf1d442a66c33470791a2597888"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "2ddbd0c299a92c0a1fafe9a09851e7cc555ba1a4", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a563ceb3b9471acbb827e27686c5cacadc49a032/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a563ceb3b9471acbb827e27686c5cacadc49a032/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=a563ceb3b9471acbb827e27686c5cacadc49a032", "patch": "@@ -371,15 +371,16 @@ pub(crate) unsafe fn optimize(cgcx: &CodegenContext<LlvmCodegenBackend>,\n                     .unwrap_or(llvm::CodeGenOptLevel::None);\n                 let prepare_for_thin_lto = cgcx.lto == Lto::Thin || cgcx.lto == Lto::ThinLocal ||\n                     (cgcx.lto != Lto::Fat && cgcx.opts.debugging_opts.cross_lang_lto.enabled());\n+                with_llvm_pmb(llmod, &config, opt_level, prepare_for_thin_lto, &mut |b| {\n+                    llvm::LLVMPassManagerBuilderPopulateFunctionPassManager(b, fpm);\n+                    llvm::LLVMPassManagerBuilderPopulateModulePassManager(b, mpm);\n+                });\n+\n                 have_name_anon_globals_pass = have_name_anon_globals_pass || prepare_for_thin_lto;\n                 if using_thin_buffers && !prepare_for_thin_lto {\n                     assert!(addpass(\"name-anon-globals\"));\n                     have_name_anon_globals_pass = true;\n                 }\n-                with_llvm_pmb(llmod, &config, opt_level, prepare_for_thin_lto, &mut |b| {\n-                    llvm::LLVMPassManagerBuilderPopulateFunctionPassManager(b, fpm);\n-                    llvm::LLVMPassManagerBuilderPopulateModulePassManager(b, mpm);\n-                })\n             }\n \n             for pass in &config.passes {"}, {"sha": "9eefeca70cf7a92fd483ab9dfa3bc79690a3bfcf", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a563ceb3b9471acbb827e27686c5cacadc49a032/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a563ceb3b9471acbb827e27686c5cacadc49a032/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=a563ceb3b9471acbb827e27686c5cacadc49a032", "patch": "@@ -1358,6 +1358,7 @@ extern \"C\" {\n     pub fn LLVMRustDebugMetadataVersion() -> u32;\n     pub fn LLVMRustVersionMajor() -> u32;\n     pub fn LLVMRustVersionMinor() -> u32;\n+    pub fn LLVMRustIsRustLLVM() -> bool;\n \n     pub fn LLVMRustAddModuleFlag(M: &Module, name: *const c_char, value: u32);\n "}, {"sha": "fdb6373bea1fed056e89eff3d0bad0412a97c3f4", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a563ceb3b9471acbb827e27686c5cacadc49a032/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a563ceb3b9471acbb827e27686c5cacadc49a032/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=a563ceb3b9471acbb827e27686c5cacadc49a032", "patch": "@@ -70,6 +70,9 @@ unsafe fn configure_llvm(sess: &Session) {\n         if sess.opts.debugging_opts.disable_instrumentation_preinliner {\n             add(\"-disable-preinline\");\n         }\n+        if llvm::LLVMRustIsRustLLVM() {\n+            add(\"-mergefunc-use-aliases\");\n+        }\n \n         for arg in &sess.opts.cg.llvm_args {\n             add(&(*arg));"}, {"sha": "aa420bf6100c789a9ac31201b78ac896d1c44911", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a563ceb3b9471acbb827e27686c5cacadc49a032/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a563ceb3b9471acbb827e27686c5cacadc49a032/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=a563ceb3b9471acbb827e27686c5cacadc49a032", "patch": "@@ -284,7 +284,7 @@ static Optional<Reloc::Model> fromRust(LLVMRustRelocMode RustReloc) {\n   report_fatal_error(\"Bad RelocModel.\");\n }\n \n-#if LLVM_RUSTLLVM\n+#ifdef LLVM_RUSTLLVM\n /// getLongestEntryLength - Return the length of the longest entry in the table.\n ///\n static size_t getLongestEntryLength(ArrayRef<SubtargetFeatureKV> Table) {"}, {"sha": "6dcd32fe4d7193b5dec76d42e43f1aa401ae219b", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a563ceb3b9471acbb827e27686c5cacadc49a032/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a563ceb3b9471acbb827e27686c5cacadc49a032/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=a563ceb3b9471acbb827e27686c5cacadc49a032", "patch": "@@ -533,6 +533,14 @@ extern \"C\" uint32_t LLVMRustVersionMinor() { return LLVM_VERSION_MINOR; }\n \n extern \"C\" uint32_t LLVMRustVersionMajor() { return LLVM_VERSION_MAJOR; }\n \n+extern \"C\" bool LLVMRustIsRustLLVM() {\n+#ifdef LLVM_RUSTLLVM\n+  return 1;\n+#else\n+  return 0;\n+#endif\n+}\n+\n extern \"C\" void LLVMRustAddModuleFlag(LLVMModuleRef M, const char *Name,\n                                       uint32_t Value) {\n   unwrap(M)->addModuleFlag(Module::Warning, Name, Value);"}, {"sha": "95587d9d84cf01f1ad9af4df7a6751214b47de76", "filename": "src/test/codegen/export-no-mangle.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a563ceb3b9471acbb827e27686c5cacadc49a032/src%2Ftest%2Fcodegen%2Fexport-no-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a563ceb3b9471acbb827e27686c5cacadc49a032/src%2Ftest%2Fcodegen%2Fexport-no-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fexport-no-mangle.rs?ref=a563ceb3b9471acbb827e27686c5cacadc49a032", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -C no-prepopulate-passes\n+\n #![crate_type = \"lib\"]\n \n mod private {"}, {"sha": "58232852596021081d8b7d1048eb8f3217f006e8", "filename": "src/test/codegen/external-no-mangle-fns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a563ceb3b9471acbb827e27686c5cacadc49a032/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a563ceb3b9471acbb827e27686c5cacadc49a032/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-fns.rs?ref=a563ceb3b9471acbb827e27686c5cacadc49a032", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -O\n+// compile-flags: -C no-prepopulate-passes\n // `#[no_mangle]`d functions always have external linkage, i.e. no `internal` in their `define`s\n \n #![crate_type = \"lib\"]\n@@ -43,7 +43,7 @@ const HIDDEN: () = {\n };\n \n // The surrounding item should not accidentally become external\n-// CHECK: define internal {{.*}} void @_ZN22external_no_mangle_fns1x\n+// CHECK: define internal{{.*}} void @_ZN22external_no_mangle_fns1x\n #[inline(never)]\n fn x() {\n     // CHECK: define void @g()"}, {"sha": "3544786e2e60a651990a5bd66e1659dd62b11506", "filename": "src/test/codegen/issue-45222.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a563ceb3b9471acbb827e27686c5cacadc49a032/src%2Ftest%2Fcodegen%2Fissue-45222.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a563ceb3b9471acbb827e27686c5cacadc49a032/src%2Ftest%2Fcodegen%2Fissue-45222.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-45222.rs?ref=a563ceb3b9471acbb827e27686c5cacadc49a032", "patch": "@@ -69,6 +69,6 @@ fn foo3r(n: u64) -> u64 {\n // CHECK-LABEL: @check_foo3r\n #[no_mangle]\n pub fn check_foo3r() -> u64 {\n-    // CHECK: ret i64 500005000000000\n-    foo3r(100000)\n+    // CHECK: ret i64 500050000000\n+    foo3r(10000)\n }"}, {"sha": "2136b176eac9ba64ab00f296c102bf7b2e2a828b", "filename": "src/test/codegen/match-optimizes-away.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a563ceb3b9471acbb827e27686c5cacadc49a032/src%2Ftest%2Fcodegen%2Fmatch-optimizes-away.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a563ceb3b9471acbb827e27686c5cacadc49a032/src%2Ftest%2Fcodegen%2Fmatch-optimizes-away.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmatch-optimizes-away.rs?ref=a563ceb3b9471acbb827e27686c5cacadc49a032", "patch": "@@ -14,6 +14,7 @@\n \n pub enum Three { A, B, C }\n \n+#[repr(u16)]\n pub enum Four { A, B, C, D }\n \n #[no_mangle]\n@@ -32,7 +33,7 @@ pub fn three_valued(x: Three) -> Three {\n pub fn four_valued(x: Four) -> Four {\n     // CHECK-LABEL: @four_valued\n     // CHECK-NEXT: {{^.*:$}}\n-    // CHECK-NEXT: ret i8 %0\n+    // CHECK-NEXT: ret i16 %0\n     match x {\n         Four::A => Four::A,\n         Four::B => Four::B,"}]}