{"sha": "27ccc95c60d5652d5e7ef0dd7bd50cf221385d00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3Y2NjOTVjNjBkNTY1MmQ1ZTdlZjBkZDdiZDUwY2YyMjEzODVkMDA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-18T17:31:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-18T17:36:27Z"}, "message": "Cleanup feature generation", "tree": {"sha": "7ce49ed16d73f8183f4456be2299c2dea9d36f40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ce49ed16d73f8183f4456be2299c2dea9d36f40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27ccc95c60d5652d5e7ef0dd7bd50cf221385d00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27ccc95c60d5652d5e7ef0dd7bd50cf221385d00", "html_url": "https://github.com/rust-lang/rust/commit/27ccc95c60d5652d5e7ef0dd7bd50cf221385d00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27ccc95c60d5652d5e7ef0dd7bd50cf221385d00/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f18f9da7d80c669cf14bc2e85e40d883c621262a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f18f9da7d80c669cf14bc2e85e40d883c621262a", "html_url": "https://github.com/rust-lang/rust/commit/f18f9da7d80c669cf14bc2e85e40d883c621262a"}], "stats": {"total": 210, "additions": 95, "deletions": 115}, "files": [{"sha": "25e580d809841b2bf91257132322cbafb117d292", "filename": "crates/ide/src/completion.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/27ccc95c60d5652d5e7ef0dd7bd50cf221385d00/crates%2Fide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ccc95c60d5652d5e7ef0dd7bd50cf221385d00/crates%2Fide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion.rs?ref=27ccc95c60d5652d5e7ef0dd7bd50cf221385d00", "patch": "@@ -3,6 +3,7 @@ mod completion_item;\n mod completion_context;\n mod presentation;\n mod patterns;\n+mod generated_features;\n #[cfg(test)]\n mod test_utils;\n \n@@ -18,7 +19,6 @@ mod complete_unqualified_path;\n mod complete_postfix;\n mod complete_macro_in_item_position;\n mod complete_trait_impl;\n-mod unstable_feature_descriptor;\n \n use ide_db::RootDatabase;\n \n@@ -30,11 +30,6 @@ use crate::{\n     FilePosition,\n };\n \n-//FIXME: cyclic imports caused by xtask generation, this should be better\n-use crate::completion::{\n-    complete_attribute::LintCompletion, unstable_feature_descriptor::UNSTABLE_FEATURE_DESCRIPTOR,\n-};\n-\n pub use crate::completion::{\n     completion_config::CompletionConfig,\n     completion_item::{CompletionItem, CompletionItemKind, CompletionScore, InsertTextFormat},"}, {"sha": "042c3ecefb7e29d2a11bd15deafc6dcd58384687", "filename": "crates/ide/src/completion/complete_attribute.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/27ccc95c60d5652d5e7ef0dd7bd50cf221385d00/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ccc95c60d5652d5e7ef0dd7bd50cf221385d00/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs?ref=27ccc95c60d5652d5e7ef0dd7bd50cf221385d00", "patch": "@@ -9,7 +9,7 @@ use syntax::{ast, AstNode, SyntaxKind};\n use crate::completion::{\n     completion_context::CompletionContext,\n     completion_item::{CompletionItem, CompletionItemKind, CompletionKind, Completions},\n-    UNSTABLE_FEATURE_DESCRIPTOR,\n+    generated_features::FEATURES,\n };\n \n pub(super) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n@@ -19,7 +19,7 @@ pub(super) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext)\n             complete_derive(acc, ctx, token_tree)\n         }\n         (Some(path), Some(token_tree)) if path.to_string() == \"feature\" => {\n-            complete_lint(acc, ctx, token_tree, UNSTABLE_FEATURE_DESCRIPTOR)\n+            complete_lint(acc, ctx, token_tree, FEATURES)\n         }\n         (Some(path), Some(token_tree))\n             if [\"allow\", \"warn\", \"deny\", \"forbid\"]\n@@ -237,7 +237,7 @@ fn get_derive_names_in_scope(ctx: &CompletionContext) -> FxHashSet<String> {\n     result\n }\n \n-pub(crate) struct DeriveCompletion {\n+struct DeriveCompletion {\n     label: &'static str,\n     dependencies: &'static [&'static str],\n }\n@@ -257,9 +257,9 @@ const DEFAULT_DERIVE_COMPLETIONS: &[DeriveCompletion] = &[\n     DeriveCompletion { label: \"Ord\", dependencies: &[\"PartialOrd\", \"Eq\", \"PartialEq\"] },\n ];\n \n-pub(crate) struct LintCompletion {\n-    pub(crate) label: &'static str,\n-    pub(crate) description: &'static str,\n+pub(super) struct LintCompletion {\n+    pub(super) label: &'static str,\n+    pub(super) description: &'static str,\n }\n \n #[rustfmt::skip]"}, {"sha": "24754a8cf575e5df58d47d31d996ed814d491d5f", "filename": "crates/ide/src/completion/generated_features.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27ccc95c60d5652d5e7ef0dd7bd50cf221385d00/crates%2Fide%2Fsrc%2Fcompletion%2Fgenerated_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ccc95c60d5652d5e7ef0dd7bd50cf221385d00/crates%2Fide%2Fsrc%2Fcompletion%2Fgenerated_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fgenerated_features.rs?ref=27ccc95c60d5652d5e7ef0dd7bd50cf221385d00"}, {"sha": "14cd583eaa8af084f01906a2510bd5045ba1c51f", "filename": "crates/ide/src/completion/unstable_feature_descriptor.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f18f9da7d80c669cf14bc2e85e40d883c621262a/crates%2Fide%2Fsrc%2Fcompletion%2Funstable_feature_descriptor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f18f9da7d80c669cf14bc2e85e40d883c621262a/crates%2Fide%2Fsrc%2Fcompletion%2Funstable_feature_descriptor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Funstable_feature_descriptor.rs?ref=f18f9da7d80c669cf14bc2e85e40d883c621262a"}, {"sha": "45b17bb48234663bb824d359341ed516ea5d139e", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/27ccc95c60d5652d5e7ef0dd7bd50cf221385d00/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ccc95c60d5652d5e7ef0dd7bd50cf221385d00/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=27ccc95c60d5652d5e7ef0dd7bd50cf221385d00", "patch": "@@ -9,7 +9,7 @@ mod gen_syntax;\n mod gen_parser_tests;\n mod gen_assists_docs;\n mod gen_feature_docs;\n-mod gen_unstable_future_descriptor;\n+mod gen_features;\n \n use std::{\n     fmt, mem,\n@@ -25,35 +25,35 @@ use crate::{\n pub use self::{\n     gen_assists_docs::{generate_assists_docs, generate_assists_tests},\n     gen_feature_docs::generate_feature_docs,\n+    gen_features::generate_features,\n     gen_parser_tests::generate_parser_tests,\n     gen_syntax::generate_syntax,\n-    gen_unstable_future_descriptor::generate_unstable_future_descriptor,\n };\n \n-// Directory used by xtask\n-const STORAGE: &str = \".xtask\";\n-\n-const GRAMMAR_DIR: &str = \"crates/parser/src/grammar\";\n-const OK_INLINE_TESTS_DIR: &str = \"crates/syntax/test_data/parser/inline/ok\";\n-const ERR_INLINE_TESTS_DIR: &str = \"crates/syntax/test_data/parser/inline/err\";\n-\n-const SYNTAX_KINDS: &str = \"crates/parser/src/syntax_kind/generated.rs\";\n-const AST_NODES: &str = \"crates/syntax/src/ast/generated/nodes.rs\";\n-const AST_TOKENS: &str = \"crates/syntax/src/ast/generated/tokens.rs\";\n-\n-const ASSISTS_DIR: &str = \"crates/assists/src/handlers\";\n-const ASSISTS_TESTS: &str = \"crates/assists/src/tests/generated.rs\";\n-\n-const REPOSITORY_URL: &str = \"https://github.com/rust-lang/rust\";\n-const UNSTABLE_FEATURE: &str = \"crates/ide/src/completion/unstable_feature_descriptor.rs\";\n-const REPO_PATH: &str = \"src/doc/unstable-book/src\";\n-\n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n pub enum Mode {\n     Overwrite,\n     Verify,\n }\n \n+pub struct CodegenCmd {\n+    pub features: bool,\n+}\n+\n+impl CodegenCmd {\n+    pub fn run(self) -> Result<()> {\n+        if self.features {\n+            generate_features(Mode::Overwrite)?;\n+        }\n+        generate_syntax(Mode::Overwrite)?;\n+        generate_parser_tests(Mode::Overwrite)?;\n+        generate_assists_tests(Mode::Overwrite)?;\n+        generate_assists_docs(Mode::Overwrite)?;\n+        generate_feature_docs(Mode::Overwrite)?;\n+        Ok(())\n+    }\n+}\n+\n /// A helper to update file on disk if it has changed.\n /// With verify = false,\n fn update(path: &Path, contents: &str, mode: Mode) -> Result<()> {"}, {"sha": "f0ded8b87cca946b55dafbd954e23db4785e5022", "filename": "xtask/src/codegen/gen_assists_docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27ccc95c60d5652d5e7ef0dd7bd50cf221385d00/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ccc95c60d5652d5e7ef0dd7bd50cf221385d00/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs?ref=27ccc95c60d5652d5e7ef0dd7bd50cf221385d00", "patch": "@@ -32,7 +32,7 @@ struct Assist {\n impl Assist {\n     fn collect() -> Result<Vec<Assist>> {\n         let mut res = Vec::new();\n-        for path in rust_files(&project_root().join(codegen::ASSISTS_DIR)) {\n+        for path in rust_files(&project_root().join(\"crates/assists/src/handlers\")) {\n             collect_file(&mut res, path.as_path())?;\n         }\n         res.sort_by(|lhs, rhs| lhs.id.cmp(&rhs.id));\n@@ -135,7 +135,7 @@ r#####\"\n         buf.push_str(&test)\n     }\n     let buf = reformat(buf)?;\n-    codegen::update(&project_root().join(codegen::ASSISTS_TESTS), &buf, mode)\n+    codegen::update(&project_root().join(\"crates/assists/src/tests/generated.rs\"), &buf, mode)\n }\n \n fn hide_hash_comments(text: &str) -> String {"}, {"sha": "78268308b77dcfbae39e890503b2b3d10cf747b3", "filename": "xtask/src/codegen/gen_features.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/27ccc95c60d5652d5e7ef0dd7bd50cf221385d00/xtask%2Fsrc%2Fcodegen%2Fgen_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ccc95c60d5652d5e7ef0dd7bd50cf221385d00/xtask%2Fsrc%2Fcodegen%2Fgen_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_features.rs?ref=27ccc95c60d5652d5e7ef0dd7bd50cf221385d00", "patch": "@@ -0,0 +1,50 @@\n+//! Generates descriptors structure for unstable feature from Unstable Book\n+use std::path::{Path, PathBuf};\n+\n+use quote::quote;\n+use walkdir::WalkDir;\n+\n+use crate::{\n+    codegen::{project_root, reformat, update, Mode, Result},\n+    not_bash::{fs2, run},\n+};\n+\n+pub fn generate_features(mode: Mode) -> Result<()> {\n+    if !Path::new(\"./target/rust\").exists() {\n+        run!(\"git clone https://github.com/rust-lang/rust ./target/rust\")?;\n+    }\n+\n+    let contents = generate_descriptor(\"./target/rust/src/doc/unstable-book/src\".into())?;\n+\n+    let destination = project_root().join(\"crates/ide/src/completion/generated_features.rs\");\n+    update(destination.as_path(), &contents, mode)?;\n+\n+    Ok(())\n+}\n+\n+fn generate_descriptor(src_dir: PathBuf) -> Result<String> {\n+    let definitions = [\"language-features\", \"library-features\"]\n+        .iter()\n+        .flat_map(|it| WalkDir::new(src_dir.join(it)))\n+        .filter_map(|e| e.ok())\n+        .filter(|entry| {\n+            // Get all `.md ` files\n+            entry.file_type().is_file() && entry.path().extension().unwrap_or_default() == \"md\"\n+        })\n+        .map(|entry| {\n+            let path = entry.path();\n+            let feature_ident = path.file_stem().unwrap().to_str().unwrap().replace(\"-\", \"_\");\n+            let doc = fs2::read_to_string(path).unwrap();\n+\n+            quote! { LintCompletion { label: #feature_ident, description: #doc } }\n+        });\n+\n+    let ts = quote! {\n+        use crate::completion::complete_attribute::LintCompletion;\n+\n+        pub(super) const FEATURES:  &[LintCompletion] = &[\n+            #(#definitions),*\n+        ];\n+    };\n+    reformat(ts)\n+}"}, {"sha": "96fdd921699aa13366b962f495ca9d06e5ba10c6", "filename": "xtask/src/codegen/gen_parser_tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27ccc95c60d5652d5e7ef0dd7bd50cf221385d00/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ccc95c60d5652d5e7ef0dd7bd50cf221385d00/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs?ref=27ccc95c60d5652d5e7ef0dd7bd50cf221385d00", "patch": "@@ -8,12 +8,12 @@ use std::{\n };\n \n use crate::{\n-    codegen::{self, extract_comment_blocks, update, Mode},\n+    codegen::{extract_comment_blocks, update, Mode},\n     project_root, Result,\n };\n \n pub fn generate_parser_tests(mode: Mode) -> Result<()> {\n-    let tests = tests_from_dir(&project_root().join(Path::new(codegen::GRAMMAR_DIR)))?;\n+    let tests = tests_from_dir(&project_root().join(Path::new(\"crates/parser/src/grammar\")))?;\n     fn install_tests(tests: &HashMap<String, Test>, into: &str, mode: Mode) -> Result<()> {\n         let tests_dir = project_root().join(into);\n         if !tests_dir.is_dir() {\n@@ -39,8 +39,8 @@ pub fn generate_parser_tests(mode: Mode) -> Result<()> {\n         }\n         Ok(())\n     }\n-    install_tests(&tests.ok, codegen::OK_INLINE_TESTS_DIR, mode)?;\n-    install_tests(&tests.err, codegen::ERR_INLINE_TESTS_DIR, mode)\n+    install_tests(&tests.ok, \"crates/syntax/test_data/parser/inline/ok\", mode)?;\n+    install_tests(&tests.err, \"crates/syntax/test_data/parser/inline/err\", mode)\n }\n \n #[derive(Debug)]"}, {"sha": "53ae9f11c9c1adbef15010fad2f7e11fa745aa4e", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27ccc95c60d5652d5e7ef0dd7bd50cf221385d00/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ccc95c60d5652d5e7ef0dd7bd50cf221385d00/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=27ccc95c60d5652d5e7ef0dd7bd50cf221385d00", "patch": "@@ -14,23 +14,23 @@ use ungrammar::{rust_grammar, Grammar, Rule};\n \n use crate::{\n     ast_src::{AstEnumSrc, AstNodeSrc, AstSrc, Cardinality, Field, KindsSrc, KINDS_SRC},\n-    codegen::{self, reformat, update, Mode},\n+    codegen::{reformat, update, Mode},\n     project_root, Result,\n };\n \n pub fn generate_syntax(mode: Mode) -> Result<()> {\n     let grammar = rust_grammar();\n     let ast = lower(&grammar);\n \n-    let syntax_kinds_file = project_root().join(codegen::SYNTAX_KINDS);\n+    let syntax_kinds_file = project_root().join(\"crates/parser/src/syntax_kind/generated.rs\");\n     let syntax_kinds = generate_syntax_kinds(KINDS_SRC)?;\n     update(syntax_kinds_file.as_path(), &syntax_kinds, mode)?;\n \n-    let ast_tokens_file = project_root().join(codegen::AST_TOKENS);\n+    let ast_tokens_file = project_root().join(\"crates/syntax/src/ast/generated/tokens.rs\");\n     let contents = generate_tokens(&ast)?;\n     update(ast_tokens_file.as_path(), &contents, mode)?;\n \n-    let ast_nodes_file = project_root().join(codegen::AST_NODES);\n+    let ast_nodes_file = project_root().join(\"crates/syntax/src/ast/generated/nodes.rs\");\n     let contents = generate_nodes(KINDS_SRC, &ast)?;\n     update(ast_nodes_file.as_path(), &contents, mode)?;\n "}, {"sha": "907a9afaeee90a685d63e463c11fc2475c3dd00e", "filename": "xtask/src/codegen/gen_unstable_future_descriptor.rs", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/f18f9da7d80c669cf14bc2e85e40d883c621262a/xtask%2Fsrc%2Fcodegen%2Fgen_unstable_future_descriptor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f18f9da7d80c669cf14bc2e85e40d883c621262a/xtask%2Fsrc%2Fcodegen%2Fgen_unstable_future_descriptor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_unstable_future_descriptor.rs?ref=f18f9da7d80c669cf14bc2e85e40d883c621262a", "patch": "@@ -1,61 +0,0 @@\n-//! Generates descriptors structure for unstable feature from Unstable Book\n-\n-use crate::codegen::{self, project_root, Mode, Result};\n-use crate::codegen::{reformat, update};\n-use crate::not_bash::{fs2, pushd, run};\n-use proc_macro2::TokenStream;\n-use quote::quote;\n-use std::path::PathBuf;\n-use walkdir::WalkDir;\n-\n-fn generate_descriptor(src_dir: PathBuf) -> Result<TokenStream> {\n-    let files = WalkDir::new(src_dir.join(\"language-features\"))\n-        .into_iter()\n-        .chain(WalkDir::new(src_dir.join(\"library-features\")))\n-        .filter_map(|e| e.ok())\n-        .filter(|entry| {\n-            // Get all `.md ` files\n-            entry.file_type().is_file() && entry.path().extension().unwrap_or_default() == \"md\"\n-        })\n-        .collect::<Vec<_>>();\n-\n-    let definitions = files\n-        .iter()\n-        .map(|entry| {\n-            let path = entry.path();\n-            let feature_ident =\n-                format!(\"{}\", path.file_stem().unwrap().to_str().unwrap().replace(\"-\", \"_\"));\n-            let doc = format!(\"{}\", std::fs::read_to_string(path).unwrap());\n-\n-            quote! { LintCompletion { label: #feature_ident, description: #doc } }\n-        })\n-        .collect::<Vec<_>>();\n-\n-    let ts = quote! {\n-        use crate::completion::LintCompletion;\n-\n-        pub(crate) const UNSTABLE_FEATURE_DESCRIPTOR:  &[LintCompletion] = &[\n-            #(#definitions),*\n-        ];\n-    };\n-    Ok(ts)\n-}\n-\n-pub fn generate_unstable_future_descriptor(mode: Mode) -> Result<()> {\n-    let path = project_root().join(codegen::STORAGE);\n-    fs2::create_dir_all(path.clone())?;\n-\n-    let _d = pushd(path.clone());\n-    run!(\"git init\")?;\n-    run!(\"git remote add -f origin {}\", codegen::REPOSITORY_URL)?;\n-    run!(\"git pull origin master\")?;\n-\n-    let src_dir = path.join(codegen::REPO_PATH);\n-    let content = generate_descriptor(src_dir)?.to_string();\n-\n-    let contents = reformat(content)?;\n-    let destination = project_root().join(codegen::UNSTABLE_FEATURE);\n-    update(destination.as_path(), &contents, mode)?;\n-\n-    Ok(())\n-}"}, {"sha": "3f4aa5497dc5ff704cf83eb11f5d4f6267c03f90", "filename": "xtask/src/main.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27ccc95c60d5652d5e7ef0dd7bd50cf221385d00/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ccc95c60d5652d5e7ef0dd7bd50cf221385d00/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=27ccc95c60d5652d5e7ef0dd7bd50cf221385d00", "patch": "@@ -10,6 +10,7 @@\n \n use std::env;\n \n+use codegen::CodegenCmd;\n use pico_args::Arguments;\n use xtask::{\n     codegen::{self, Mode},\n@@ -75,14 +76,9 @@ FLAGS:\n             .run()\n         }\n         \"codegen\" => {\n+            let features = args.contains(\"--features\");\n             args.finish()?;\n-            codegen::generate_syntax(Mode::Overwrite)?;\n-            codegen::generate_unstable_future_descriptor(Mode::Overwrite)?;\n-            codegen::generate_parser_tests(Mode::Overwrite)?;\n-            codegen::generate_assists_tests(Mode::Overwrite)?;\n-            codegen::generate_assists_docs(Mode::Overwrite)?;\n-            codegen::generate_feature_docs(Mode::Overwrite)?;\n-            Ok(())\n+            CodegenCmd { features }.run()\n         }\n         \"format\" => {\n             args.finish()?;"}, {"sha": "4fdff62ee39acb08ede962b42a68ccc9e0eb027a", "filename": "xtask/tests/tidy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ccc95c60d5652d5e7ef0dd7bd50cf221385d00/xtask%2Ftests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ccc95c60d5652d5e7ef0dd7bd50cf221385d00/xtask%2Ftests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy.rs?ref=27ccc95c60d5652d5e7ef0dd7bd50cf221385d00", "patch": "@@ -113,7 +113,7 @@ fn check_todo(path: &Path, text: &str) {\n         // `ast::make`.\n         \"ast/make.rs\",\n         // The documentation in string literals may contain anything for its own purposes\n-        \"completion/unstable_feature_descriptor.rs\",\n+        \"completion/generated_features.rs\",\n     ];\n     if need_todo.iter().any(|p| path.ends_with(p)) {\n         return;"}]}