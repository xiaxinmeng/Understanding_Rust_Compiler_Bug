{"sha": "497397ab4b66e40f3a772544a1bb9842869cf118", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NzM5N2FiNGI2NmU0MGYzYTc3MjU0NGExYmI5ODQyODY5Y2YxMTg=", "commit": {"author": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2017-11-02T11:58:21Z"}, "committer": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2017-11-07T18:36:10Z"}, "message": "initial implementation of arbitrary_self_types\n\nIf the feature is enabled, allow method `self` types to be any type\nthat auto-derefs to `self`.\n- Currently, this supports inherent methods as well as trait methods.\nThe plan AFAIK is to only allow this for trait methods, so I guess it\nwon\u2019t stay this way\n- Dynamic dispatch isn\u2019t implemented yet, so the compiler will ICE if\nyou define a trait method that takes `self: Rc<Self>` and try to call\nit on an `Rc<Trait>`. I will probably just make those methods\nnon-object-safe initially.", "tree": {"sha": "56553d6417b8867456b8acd3c89c4e8fff2fa2a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56553d6417b8867456b8acd3c89c4e8fff2fa2a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/497397ab4b66e40f3a772544a1bb9842869cf118", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/497397ab4b66e40f3a772544a1bb9842869cf118", "html_url": "https://github.com/rust-lang/rust/commit/497397ab4b66e40f3a772544a1bb9842869cf118", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/497397ab4b66e40f3a772544a1bb9842869cf118/comments", "author": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edc8c760e0ab7c6bd09ac041228af84668fa7620", "url": "https://api.github.com/repos/rust-lang/rust/commits/edc8c760e0ab7c6bd09ac041228af84668fa7620", "html_url": "https://github.com/rust-lang/rust/commit/edc8c760e0ab7c6bd09ac041228af84668fa7620"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "9f3fd33260e14554fa89f329568654f66209c8fd", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/497397ab4b66e40f3a772544a1bb9842869cf118/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/497397ab4b66e40f3a772544a1bb9842869cf118/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=497397ab4b66e40f3a772544a1bb9842869cf118", "patch": "@@ -469,6 +469,29 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n         debug!(\"check_method_receiver: sig={:?}\", sig);\n \n         let self_arg_ty = sig.inputs()[0];\n+\n+        if fcx.tcx.sess.features.borrow().arbitrary_self_types {\n+            let cause = fcx.cause(span, ObligationCauseCode::MethodReceiver);\n+\n+            let mut autoderef = fcx.autoderef(span, self_arg_ty);\n+            while let Some((potential_self_ty, _)) = autoderef.next() {\n+                debug!(\"check_method_receiver: potential self type `{:?}` to match `{:?}`\", potential_self_ty, self_ty);\n+\n+                // there's gotta be a more idiomatic way of checking if types are equal than this\n+                if let Some(mut err) = fcx.demand_eqtype_with_origin(&cause, self_ty, potential_self_ty) {\n+                    err.cancel();\n+                    continue;\n+                } else {\n+                    // we found a type that matches `self_ty`\n+                    autoderef.finalize();\n+                    return;\n+                }\n+            }\n+\n+            span_err!(fcx.tcx.sess, span, E0307, \"invalid `self` type: {:?}\", self_arg_ty);\n+            return;\n+        }\n+\n         let rcvr_ty = match ExplicitSelf::determine(self_ty, self_arg_ty) {\n             ExplicitSelf::ByValue => self_ty,\n             ExplicitSelf::ByReference(region, mutbl) => {"}, {"sha": "5581613afd8315b79522f0dcdc4974e4b8504041", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/497397ab4b66e40f3a772544a1bb9842869cf118/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/497397ab4b66e40f3a772544a1bb9842869cf118/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=497397ab4b66e40f3a772544a1bb9842869cf118", "patch": "@@ -4724,6 +4724,7 @@ register_diagnostics! {\n //  E0247,\n //  E0248, // value used as a type, now reported earlier during resolution as E0412\n //  E0249,\n+    E0307, // invalid method `self` type\n //  E0319, // trait impls for defaulted traits allowed just for structs/enums\n //  E0372, // coherence not object safe\n     E0377, // the trait `CoerceUnsized` may only be implemented for a coercion"}, {"sha": "b6cb3ac13081f462c731c2bc8bb1f4b1972881b2", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/497397ab4b66e40f3a772544a1bb9842869cf118/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/497397ab4b66e40f3a772544a1bb9842869cf118/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=497397ab4b66e40f3a772544a1bb9842869cf118", "patch": "@@ -409,6 +409,9 @@ declare_features! (\n \n     // extern types\n     (active, extern_types, \"1.23.0\", Some(43467)),\n+\n+    // Allow trait methods with arbitrary self types\n+    (active, arbitrary_self_types, \"1.23.0\", Some(44874)),\n );\n \n declare_features! ("}]}