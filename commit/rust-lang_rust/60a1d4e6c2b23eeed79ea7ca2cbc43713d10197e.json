{"sha": "60a1d4e6c2b23eeed79ea7ca2cbc43713d10197e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYTFkNGU2YzJiMjNlZWVkNzllYTdjYTJjYmM0MzcxM2QxMDE5N2U=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-09-18T22:01:09Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-10-05T07:40:40Z"}, "message": "resolve: Keep more precise traces for expanded macro resolutions\n\n`NameBinding`s instead of `Def`s", "tree": {"sha": "92660e050b79e5aa96b049aecd41aaa5eb45aeb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92660e050b79e5aa96b049aecd41aaa5eb45aeb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60a1d4e6c2b23eeed79ea7ca2cbc43713d10197e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60a1d4e6c2b23eeed79ea7ca2cbc43713d10197e", "html_url": "https://github.com/rust-lang/rust/commit/60a1d4e6c2b23eeed79ea7ca2cbc43713d10197e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60a1d4e6c2b23eeed79ea7ca2cbc43713d10197e/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "050bd32958dac4413bfc1de0f48073dfbc06c278", "url": "https://api.github.com/repos/rust-lang/rust/commits/050bd32958dac4413bfc1de0f48073dfbc06c278", "html_url": "https://github.com/rust-lang/rust/commit/050bd32958dac4413bfc1de0f48073dfbc06c278"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "a93cc7ad7518a7715893afef241826515a097859", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/60a1d4e6c2b23eeed79ea7ca2cbc43713d10197e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a1d4e6c2b23eeed79ea7ca2cbc43713d10197e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=60a1d4e6c2b23eeed79ea7ca2cbc43713d10197e", "patch": "@@ -1014,7 +1014,8 @@ pub struct ModuleData<'a> {\n     normal_ancestor_id: DefId,\n \n     resolutions: RefCell<FxHashMap<(Ident, Namespace), &'a RefCell<NameResolution<'a>>>>,\n-    legacy_macro_resolutions: RefCell<Vec<(Ident, MacroKind, ParentScope<'a>, Option<Def>)>>,\n+    legacy_macro_resolutions: RefCell<Vec<(Ident, MacroKind, ParentScope<'a>,\n+                                           Option<&'a NameBinding<'a>>)>>,\n     macro_resolutions: RefCell<Vec<(Box<[Ident]>, Span)>>,\n     builtin_attrs: RefCell<Vec<(Ident, ParentScope<'a>)>>,\n "}, {"sha": "e0ef286a43e9fa012577ed5df0fcee7665f05a8c", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/60a1d4e6c2b23eeed79ea7ca2cbc43713d10197e/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a1d4e6c2b23eeed79ea7ca2cbc43713d10197e/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=60a1d4e6c2b23eeed79ea7ca2cbc43713d10197e", "patch": "@@ -506,21 +506,19 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n \n             def\n         } else {\n-            let def = match self.early_resolve_ident_in_lexical_scope(path[0], MacroNS, Some(kind),\n-                                                                      parent_scope, false, force,\n-                                                                      span) {\n-                Ok(binding) => Ok(binding.def_ignoring_ambiguity()),\n+            let binding = self.early_resolve_ident_in_lexical_scope(\n+                path[0], MacroNS, Some(kind), parent_scope, false, force, span\n+            );\n+            match binding {\n+                Ok(..) => {}\n+                Err(Determinacy::Determined) => self.found_unresolved_macro = true,\n                 Err(Determinacy::Undetermined) => return Err(Determinacy::Undetermined),\n-                Err(Determinacy::Determined) => {\n-                    self.found_unresolved_macro = true;\n-                    Err(Determinacy::Determined)\n-                }\n-            };\n+            }\n \n             parent_scope.module.legacy_macro_resolutions.borrow_mut()\n-                .push((path[0], kind, parent_scope.clone(), def.ok()));\n+                .push((path[0], kind, parent_scope.clone(), binding.ok()));\n \n-            def\n+            binding.map(|binding| binding.def_ignoring_ambiguity())\n         }\n     }\n \n@@ -866,15 +864,16 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n \n         let legacy_macro_resolutions =\n             mem::replace(&mut *module.legacy_macro_resolutions.borrow_mut(), Vec::new());\n-        for (ident, kind, parent_scope, initial_def) in legacy_macro_resolutions {\n+        for (ident, kind, parent_scope, initial_binding) in legacy_macro_resolutions {\n             let binding = self.early_resolve_ident_in_lexical_scope(\n                 ident, MacroNS, Some(kind), &parent_scope, true, true, ident.span\n             );\n             match binding {\n                 Ok(binding) => {\n-                    self.record_use(ident, MacroNS, binding);\n                     let def = binding.def_ignoring_ambiguity();\n-                    if let Some(initial_def) = initial_def {\n+                    if let Some(initial_binding) = initial_binding {\n+                        self.record_use(ident, MacroNS, initial_binding);\n+                        let initial_def = initial_binding.def_ignoring_ambiguity();\n                         if self.ambiguity_errors.is_empty() &&\n                            def != initial_def && def != Def::Err {\n                             // Make sure compilation does not succeed if preferred macro resolution\n@@ -894,7 +893,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     }\n                 }\n                 Err(..) => {\n-                    assert!(initial_def.is_none());\n+                    assert!(initial_binding.is_none());\n                     let bang = if kind == MacroKind::Bang { \"!\" } else { \"\" };\n                     let msg =\n                         format!(\"cannot find {} `{}{}` in this scope\", kind.descr(), ident, bang);"}]}