{"sha": "141ce5f2ad043efdf902d0d005b7a9bfa8cb63c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MWNlNWYyYWQwNDNlZmRmOTAyZDBkMDA1YjdhOWJmYThjYjYzYzQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-22T19:45:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-22T19:45:01Z"}, "message": "Rollup merge of #72459 - yoshuawuyts:into-future, r=nikomatsakis\n\nAdd core::future::IntoFuture\n\nThis patch reintroduces the `core::future::IntoFuture` trait. However unlike earlier PRs this patch does not integrate it into the `async/.await` lowering since that lead to performance regressions. By introducing the trait separately from the integration, the integration PR can be more narrowly scoped, and people can start trying out the `IntoFuture` trait today. Thanks heaps!\n\ncc/ @rust-lang/wg-async-foundations\n\n## References\n- Original PR adding `IntoFuture` https://github.com/rust-lang/rust/pull/65244\n- Open issue to re-land `IntoFuture` (assigned to me) https://github.com/rust-lang/rust/issues/67982\n- Tracking issue for `IntoFuture` https://github.com/rust-lang/rust/issues/67644", "tree": {"sha": "19746f2ce7064656b14dd158429020b5e769cad4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19746f2ce7064656b14dd158429020b5e769cad4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/141ce5f2ad043efdf902d0d005b7a9bfa8cb63c4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeyCu+CRBK7hj4Ov3rIwAAdHIIACYc7OGtV+RxpmQakwfg0YPZ\nWh7ppqWocagrMX0FnV7JRWqvx/CIuSyY7hds/ynFXppC7ZUe3ohdNLL2fVqHoPlz\nEIlD36VGuKqmb/rz6JCwM84YlCKFwF5eMgiAC8/L3QZFJV5UHhQprFQoi6Rqo6wl\nms3+p+MUzXjXC3p/kosSy/8MmZHXpM4OIcMmr5MGAY9I/W5lQ9yjWJT7DKprd/6l\nBq8sRPT8PcxyBFgVkzZ3bFODxRJFiA8VfBimhUqt577V6A1Agu3aLMNYcJgFtIus\ny6xPe8pZ/5xJYrw2RivlHHmDWNGS4w94SsJNNSWdZCBt9pm4W1pQWyJBebj5QCo=\n=V+QG\n-----END PGP SIGNATURE-----\n", "payload": "tree 19746f2ce7064656b14dd158429020b5e769cad4\nparent 3083ce7ab127dfd1cbb453810579ca827dcfd7bb\nparent 9ff502029d379bebc50cf92a97f019fefba09d79\nauthor Dylan DPC <dylan.dpc@gmail.com> 1590176701 +0200\ncommitter GitHub <noreply@github.com> 1590176701 +0200\n\nRollup merge of #72459 - yoshuawuyts:into-future, r=nikomatsakis\n\nAdd core::future::IntoFuture\n\nThis patch reintroduces the `core::future::IntoFuture` trait. However unlike earlier PRs this patch does not integrate it into the `async/.await` lowering since that lead to performance regressions. By introducing the trait separately from the integration, the integration PR can be more narrowly scoped, and people can start trying out the `IntoFuture` trait today. Thanks heaps!\n\ncc/ @rust-lang/wg-async-foundations\n\n## References\n- Original PR adding `IntoFuture` https://github.com/rust-lang/rust/pull/65244\n- Open issue to re-land `IntoFuture` (assigned to me) https://github.com/rust-lang/rust/issues/67982\n- Tracking issue for `IntoFuture` https://github.com/rust-lang/rust/issues/67644\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/141ce5f2ad043efdf902d0d005b7a9bfa8cb63c4", "html_url": "https://github.com/rust-lang/rust/commit/141ce5f2ad043efdf902d0d005b7a9bfa8cb63c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/141ce5f2ad043efdf902d0d005b7a9bfa8cb63c4/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3083ce7ab127dfd1cbb453810579ca827dcfd7bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3083ce7ab127dfd1cbb453810579ca827dcfd7bb", "html_url": "https://github.com/rust-lang/rust/commit/3083ce7ab127dfd1cbb453810579ca827dcfd7bb"}, {"sha": "9ff502029d379bebc50cf92a97f019fefba09d79", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ff502029d379bebc50cf92a97f019fefba09d79", "html_url": "https://github.com/rust-lang/rust/commit/9ff502029d379bebc50cf92a97f019fefba09d79"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "4020c254446e3eb2c10dcf878810467df5e753c3", "filename": "src/libcore/future/into_future.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/141ce5f2ad043efdf902d0d005b7a9bfa8cb63c4/src%2Flibcore%2Ffuture%2Finto_future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141ce5f2ad043efdf902d0d005b7a9bfa8cb63c4/src%2Flibcore%2Ffuture%2Finto_future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Finto_future.rs?ref=141ce5f2ad043efdf902d0d005b7a9bfa8cb63c4", "patch": "@@ -0,0 +1,27 @@\n+use crate::future::Future;\n+\n+/// Conversion into a `Future`.\n+#[unstable(feature = \"into_future\", issue = \"67644\")]\n+pub trait IntoFuture {\n+    /// The output that the future will produce on completion.\n+    #[unstable(feature = \"into_future\", issue = \"67644\")]\n+    type Output;\n+\n+    /// Which kind of future are we turning this into?\n+    #[unstable(feature = \"into_future\", issue = \"67644\")]\n+    type Future: Future<Output = Self::Output>;\n+\n+    /// Creates a future from a value.\n+    #[unstable(feature = \"into_future\", issue = \"67644\")]\n+    fn into_future(self) -> Self::Future;\n+}\n+\n+#[unstable(feature = \"into_future\", issue = \"67644\")]\n+impl<F: Future> IntoFuture for F {\n+    type Output = F::Output;\n+    type Future = F;\n+\n+    fn into_future(self) -> Self::Future {\n+        self\n+    }\n+}"}, {"sha": "6f6009b47e67246f73740900c81f011a8609d9b1", "filename": "src/libcore/future/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/141ce5f2ad043efdf902d0d005b7a9bfa8cb63c4/src%2Flibcore%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141ce5f2ad043efdf902d0d005b7a9bfa8cb63c4/src%2Flibcore%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Fmod.rs?ref=141ce5f2ad043efdf902d0d005b7a9bfa8cb63c4", "patch": "@@ -10,12 +10,16 @@ use crate::{\n };\n \n mod future;\n+mod into_future;\n mod pending;\n mod ready;\n \n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub use self::future::Future;\n \n+#[unstable(feature = \"into_future\", issue = \"67644\")]\n+pub use into_future::IntoFuture;\n+\n #[unstable(feature = \"future_readiness_fns\", issue = \"70921\")]\n pub use pending::{pending, Pending};\n #[unstable(feature = \"future_readiness_fns\", issue = \"70921\")]"}, {"sha": "89dd9fb9b2cd56f8d19c5187d49a1f9aaf1e15ee", "filename": "src/libstd/future.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/141ce5f2ad043efdf902d0d005b7a9bfa8cb63c4/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141ce5f2ad043efdf902d0d005b7a9bfa8cb63c4/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=141ce5f2ad043efdf902d0d005b7a9bfa8cb63c4", "patch": "@@ -2,4 +2,16 @@\n \n #[doc(inline)]\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-pub use core::future::*;\n+pub use core::future::Future;\n+\n+#[doc(inline)]\n+#[unstable(feature = \"gen_future\", issue = \"50547\")]\n+pub use core::future::{from_generator, get_context, ResumeTy};\n+\n+#[doc(inline)]\n+#[unstable(feature = \"future_readiness_fns\", issue = \"70921\")]\n+pub use core::future::{pending, ready, Pending, Ready};\n+\n+#[doc(inline)]\n+#[unstable(feature = \"into_future\", issue = \"67644\")]\n+pub use core::future::IntoFuture;"}, {"sha": "cc3e613fa3d6037df1a4122f26e99b9ece3d6c03", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/141ce5f2ad043efdf902d0d005b7a9bfa8cb63c4/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141ce5f2ad043efdf902d0d005b7a9bfa8cb63c4/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=141ce5f2ad043efdf902d0d005b7a9bfa8cb63c4", "patch": "@@ -266,12 +266,15 @@\n #![feature(external_doc)]\n #![feature(fn_traits)]\n #![feature(format_args_nl)]\n+#![feature(future_readiness_fns)]\n+#![feature(gen_future)]\n #![feature(generator_trait)]\n #![feature(global_asm)]\n #![feature(hash_raw_entry)]\n #![feature(hashmap_internals)]\n #![feature(int_error_internals)]\n #![feature(int_error_matching)]\n+#![feature(into_future)]\n #![feature(integer_atomics)]\n #![feature(lang_items)]\n #![feature(libc)]"}]}