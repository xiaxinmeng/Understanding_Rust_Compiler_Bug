{"sha": "d7b9221405c7f852663a7c5bef660582cb5cd972", "node_id": "C_kwDOAAsO6NoAKGQ3YjkyMjE0MDVjN2Y4NTI2NjNhN2M1YmVmNjYwNTgyY2I1Y2Q5NzI", "commit": {"author": {"name": "Bryanskiy", "email": "ivakin.kir@gmail.com", "date": "2022-09-12T07:57:34Z"}, "committer": {"name": "Bryanskiy", "email": "ivakin.kir@gmail.com", "date": "2022-09-14T15:11:00Z"}, "message": "change AccessLevels representation", "tree": {"sha": "2c0e5c7ecca0af980049ef29fa698a15023a0492", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c0e5c7ecca0af980049ef29fa698a15023a0492"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7b9221405c7f852663a7c5bef660582cb5cd972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7b9221405c7f852663a7c5bef660582cb5cd972", "html_url": "https://github.com/rust-lang/rust/commit/d7b9221405c7f852663a7c5bef660582cb5cd972", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7b9221405c7f852663a7c5bef660582cb5cd972/comments", "author": {"login": "Bryanskiy", "id": 65131002, "node_id": "MDQ6VXNlcjY1MTMxMDAy", "avatar_url": "https://avatars.githubusercontent.com/u/65131002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bryanskiy", "html_url": "https://github.com/Bryanskiy", "followers_url": "https://api.github.com/users/Bryanskiy/followers", "following_url": "https://api.github.com/users/Bryanskiy/following{/other_user}", "gists_url": "https://api.github.com/users/Bryanskiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bryanskiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bryanskiy/subscriptions", "organizations_url": "https://api.github.com/users/Bryanskiy/orgs", "repos_url": "https://api.github.com/users/Bryanskiy/repos", "events_url": "https://api.github.com/users/Bryanskiy/events{/privacy}", "received_events_url": "https://api.github.com/users/Bryanskiy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Bryanskiy", "id": 65131002, "node_id": "MDQ6VXNlcjY1MTMxMDAy", "avatar_url": "https://avatars.githubusercontent.com/u/65131002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bryanskiy", "html_url": "https://github.com/Bryanskiy", "followers_url": "https://api.github.com/users/Bryanskiy/followers", "following_url": "https://api.github.com/users/Bryanskiy/following{/other_user}", "gists_url": "https://api.github.com/users/Bryanskiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bryanskiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bryanskiy/subscriptions", "organizations_url": "https://api.github.com/users/Bryanskiy/orgs", "repos_url": "https://api.github.com/users/Bryanskiy/repos", "events_url": "https://api.github.com/users/Bryanskiy/events{/privacy}", "received_events_url": "https://api.github.com/users/Bryanskiy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f0c4a6c5c36f1f8f433a12e10a29918f3d40a31", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f0c4a6c5c36f1f8f433a12e10a29918f3d40a31", "html_url": "https://github.com/rust-lang/rust/commit/6f0c4a6c5c36f1f8f433a12e10a29918f3d40a31"}], "stats": {"total": 404, "additions": 249, "deletions": 155}, "files": [{"sha": "a26d1b2b381e83024f1bd110aab18d0e3753821d", "filename": "compiler/rustc_error_messages/locales/en-US/privacy.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b9221405c7f852663a7c5bef660582cb5cd972/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fprivacy.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d7b9221405c7f852663a7c5bef660582cb5cd972/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fprivacy.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fprivacy.ftl?ref=d7b9221405c7f852663a7c5bef660582cb5cd972", "patch": "@@ -11,7 +11,7 @@ privacy_in_public_interface = {$vis_descr} {$kind} `{$descr}` in public interfac\n     .label = can't leak {$vis_descr} {$kind}\n     .visibility_label = `{$descr}` declared as {$vis_descr}\n \n-privacy_report_access_level = {$descr}\n+privacy_report_effective_visibility = {$descr}\n \n privacy_from_private_dep_in_public_interface =\n     {$kind} `{$descr}` from private dependency '{$krate}' in public interface"}, {"sha": "2512fbbd1b878a92c6b682afe6a8ac39154943d8", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b9221405c7f852663a7c5bef660582cb5cd972/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b9221405c7f852663a7c5bef660582cb5cd972/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=d7b9221405c7f852663a7c5bef660582cb5cd972", "patch": "@@ -756,7 +756,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Internal attributes, Testing:\n     // ==========================================================================\n \n-    rustc_attr!(TEST, rustc_access_level, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_effective_visibility, Normal, template!(Word), WarnFollowing),\n     rustc_attr!(TEST, rustc_outlives, Normal, template!(Word), WarnFollowing),\n     rustc_attr!(TEST, rustc_capture_analysis, Normal, template!(Word), WarnFollowing),\n     rustc_attr!(TEST, rustc_insignificant_dtor, Normal, template!(Word), WarnFollowing),"}, {"sha": "c595fbec0dd5c7b0d95d4356bd583d8dbed3d224", "filename": "compiler/rustc_middle/src/middle/privacy.rs", "status": "modified", "additions": 87, "deletions": 6, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/d7b9221405c7f852663a7c5bef660582cb5cd972/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b9221405c7f852663a7c5bef660582cb5cd972/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs?ref=d7b9221405c7f852663a7c5bef660582cb5cd972", "patch": "@@ -1,7 +1,7 @@\n //! A pass that checks to make sure private fields and methods aren't used\n //! outside their scopes. This pass will also generate a set of exported items\n //! which are available for use externally when compiled as a library.\n-\n+use crate::ty::Visibility;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_macros::HashStable;\n@@ -27,26 +27,107 @@ pub enum AccessLevel {\n     Public,\n }\n \n+#[derive(Clone, Copy, PartialEq, Eq, Debug, HashStable, Default)]\n+pub struct EffectiveVisibility {\n+    public: Option<Visibility>,\n+    exported: Option<Visibility>,\n+    reachable: Option<Visibility>,\n+    reachable_from_impl_trait: Option<Visibility>,\n+}\n+\n+impl EffectiveVisibility {\n+    pub fn get(&self, tag: AccessLevel) -> Option<&Visibility> {\n+        match tag {\n+            AccessLevel::Public => &self.public,\n+            AccessLevel::Exported => &self.exported,\n+            AccessLevel::Reachable => &self.reachable,\n+            AccessLevel::ReachableFromImplTrait => &self.reachable_from_impl_trait,\n+        }\n+        .as_ref()\n+    }\n+\n+    fn get_mut(&mut self, tag: AccessLevel) -> &mut Option<Visibility> {\n+        match tag {\n+            AccessLevel::Public => &mut self.public,\n+            AccessLevel::Exported => &mut self.exported,\n+            AccessLevel::Reachable => &mut self.reachable,\n+            AccessLevel::ReachableFromImplTrait => &mut self.reachable_from_impl_trait,\n+        }\n+    }\n+\n+    pub fn is_public_at_level(&self, tag: AccessLevel) -> bool {\n+        self.get(tag).map_or(false, |vis| vis.is_public())\n+    }\n+}\n+\n /// Holds a map of accessibility levels for reachable HIR nodes.\n #[derive(Debug, Clone)]\n pub struct AccessLevels<Id = LocalDefId> {\n-    pub map: FxHashMap<Id, AccessLevel>,\n+    map: FxHashMap<Id, EffectiveVisibility>,\n }\n \n-impl<Id: Hash + Eq> AccessLevels<Id> {\n+impl<Id: Hash + Eq + Copy> AccessLevels<Id> {\n+    pub fn is_public_at_level(&self, id: Id, tag: AccessLevel) -> bool {\n+        self.get_effective_vis(id)\n+            .map_or(false, |effective_vis| effective_vis.is_public_at_level(tag))\n+    }\n+\n     /// See `AccessLevel::Reachable`.\n     pub fn is_reachable(&self, id: Id) -> bool {\n-        self.map.get(&id) >= Some(&AccessLevel::Reachable)\n+        self.is_public_at_level(id, AccessLevel::Reachable)\n     }\n \n     /// See `AccessLevel::Exported`.\n     pub fn is_exported(&self, id: Id) -> bool {\n-        self.map.get(&id) >= Some(&AccessLevel::Exported)\n+        self.is_public_at_level(id, AccessLevel::Exported)\n     }\n \n     /// See `AccessLevel::Public`.\n     pub fn is_public(&self, id: Id) -> bool {\n-        self.map.get(&id) >= Some(&AccessLevel::Public)\n+        self.is_public_at_level(id, AccessLevel::Public)\n+    }\n+\n+    pub fn get_access_level(&self, id: Id) -> Option<AccessLevel> {\n+        self.get_effective_vis(id).and_then(|effective_vis| {\n+            for level in [\n+                AccessLevel::Public,\n+                AccessLevel::Exported,\n+                AccessLevel::Reachable,\n+                AccessLevel::ReachableFromImplTrait,\n+            ] {\n+                if effective_vis.is_public_at_level(level) {\n+                    return Some(level);\n+                }\n+            }\n+            None\n+        })\n+    }\n+\n+    pub fn set_access_level(&mut self, id: Id, tag: AccessLevel) {\n+        let mut effective_vis = self.get_effective_vis(id).copied().unwrap_or_default();\n+        for level in [\n+            AccessLevel::Public,\n+            AccessLevel::Exported,\n+            AccessLevel::Reachable,\n+            AccessLevel::ReachableFromImplTrait,\n+        ] {\n+            if level <= tag {\n+                *effective_vis.get_mut(level) = Some(Visibility::Public);\n+            }\n+        }\n+        self.map.insert(id, effective_vis);\n+    }\n+\n+    pub fn get_effective_vis(&self, id: Id) -> Option<&EffectiveVisibility> {\n+        self.map.get(&id)\n+    }\n+\n+    pub fn iter(&self) -> impl Iterator<Item = (&Id, &EffectiveVisibility)> {\n+        self.map.iter()\n+    }\n+\n+    pub fn map_id<OutId: Hash + Eq + Copy>(&self, f: impl Fn(Id) -> OutId) -> AccessLevels<OutId> {\n+        AccessLevels { map: self.map.iter().map(|(k, v)| (f(*k), *v)).collect() }\n     }\n }\n "}, {"sha": "57f7c379d04907d991ee2e551cc74a72381afaf8", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d7b9221405c7f852663a7c5bef660582cb5cd972/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b9221405c7f852663a7c5bef660582cb5cd972/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=d7b9221405c7f852663a7c5bef660582cb5cd972", "patch": "@@ -11,7 +11,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Node, PatKind, TyKind};\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n-use rustc_middle::middle::privacy;\n+use rustc_middle::middle::privacy::AccessLevel;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_session::lint;\n@@ -619,13 +619,10 @@ fn create_and_seed_worklist<'tcx>(\n     // see `MarkSymbolVisitor::struct_constructors`\n     let mut struct_constructors = Default::default();\n     let mut worklist = access_levels\n-        .map\n         .iter()\n-        .filter_map(\n-            |(&id, &level)| {\n-                if level >= privacy::AccessLevel::Reachable { Some(id) } else { None }\n-            },\n-        )\n+        .filter_map(|(&id, effective_vis)| {\n+            effective_vis.is_public_at_level(AccessLevel::Reachable).then_some(id)\n+        })\n         // Seed entry point\n         .chain(tcx.entry_fn(()).and_then(|(def_id, _)| def_id.as_local()))\n         .collect::<Vec<_>>();"}, {"sha": "75244124e20ef45d6dd9955c5a87ad5effc2fb28", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7b9221405c7f852663a7c5bef660582cb5cd972/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b9221405c7f852663a7c5bef660582cb5cd972/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=d7b9221405c7f852663a7c5bef660582cb5cd972", "patch": "@@ -12,7 +12,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::Node;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n-use rustc_middle::middle::privacy;\n+use rustc_middle::middle::privacy::{self, AccessLevel};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_session::config::CrateType;\n@@ -373,7 +373,13 @@ fn reachable_set<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> FxHashSet<LocalDefId> {\n     //         If other crates link to us, they're going to expect to be able to\n     //         use the lang items, so we need to be sure to mark them as\n     //         exported.\n-    reachable_context.worklist.extend(access_levels.map.keys());\n+    reachable_context.worklist = access_levels\n+        .iter()\n+        .filter_map(|(&id, effective_vis)| {\n+            effective_vis.is_public_at_level(AccessLevel::ReachableFromImplTrait).then_some(id)\n+        })\n+        .collect::<Vec<_>>();\n+\n     for item in tcx.lang_items().items().iter() {\n         if let Some(def_id) = *item {\n             if let Some(def_id) = def_id.as_local() {"}, {"sha": "705ad567aa779f945bf797ab580e8f27e8dcaf3f", "filename": "compiler/rustc_privacy/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b9221405c7f852663a7c5bef660582cb5cd972/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b9221405c7f852663a7c5bef660582cb5cd972/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs?ref=d7b9221405c7f852663a7c5bef660582cb5cd972", "patch": "@@ -76,8 +76,8 @@ pub struct InPublicInterface<'a> {\n }\n \n #[derive(SessionDiagnostic)]\n-#[diag(privacy::report_access_level)]\n-pub struct ReportAccessLevel {\n+#[diag(privacy::report_effective_visibility)]\n+pub struct ReportEffectiveVisibility {\n     #[primary_span]\n     pub span: Span,\n     pub descr: String,"}, {"sha": "9a1603fb835ee12c66d60c8c1b38c65cc43977fb", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d7b9221405c7f852663a7c5bef660582cb5cd972/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b9221405c7f852663a7c5bef660582cb5cd972/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=d7b9221405c7f852663a7c5bef660582cb5cd972", "patch": "@@ -43,7 +43,7 @@ use std::{cmp, fmt, mem};\n \n use errors::{\n     FieldIsPrivate, FieldIsPrivateLabel, FromPrivateDependencyInPublicInterface, InPublicInterface,\n-    InPublicInterfaceTraits, ItemIsPrivate, PrivateInPublicLint, ReportAccessLevel,\n+    InPublicInterfaceTraits, ItemIsPrivate, PrivateInPublicLint, ReportEffectiveVisibility,\n     UnnamedItemIsPrivate,\n };\n \n@@ -377,7 +377,7 @@ impl VisibilityLike for Option<AccessLevel> {\n     // (which require reaching the `DefId`s in them).\n     const SHALLOW: bool = true;\n     fn new_min(find: &FindMin<'_, '_, Self>, def_id: LocalDefId) -> Self {\n-        cmp::min(find.access_levels.map.get(&def_id).copied(), find.min)\n+        cmp::min(find.access_levels.get_access_level(def_id), find.min)\n     }\n }\n \n@@ -417,7 +417,7 @@ struct ReachEverythingInTheInterfaceVisitor<'a, 'tcx> {\n \n impl<'tcx> EmbargoVisitor<'tcx> {\n     fn get(&self, def_id: LocalDefId) -> Option<AccessLevel> {\n-        self.access_levels.map.get(&def_id).copied()\n+        self.access_levels.get_access_level(def_id)\n     }\n \n     fn update_with_hir_id(\n@@ -434,7 +434,7 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n         let old_level = self.get(def_id);\n         // Accessibility levels can only grow.\n         if level > old_level {\n-            self.access_levels.map.insert(def_id, level.unwrap());\n+            self.access_levels.set_access_level(def_id, level.unwrap());\n             self.changed = true;\n             level\n         } else {\n@@ -915,10 +915,31 @@ pub struct TestReachabilityVisitor<'tcx, 'a> {\n \n impl<'tcx, 'a> TestReachabilityVisitor<'tcx, 'a> {\n     fn access_level_diagnostic(&mut self, def_id: LocalDefId) {\n-        if self.tcx.has_attr(def_id.to_def_id(), sym::rustc_access_level) {\n-            let access_level = format!(\"{:?}\", self.access_levels.map.get(&def_id));\n-            let span = self.tcx.def_span(def_id.to_def_id());\n-            self.tcx.sess.emit_err(ReportAccessLevel { span, descr: access_level });\n+        let span = self.tcx.def_span(def_id.to_def_id());\n+        if self.tcx.has_attr(def_id.to_def_id(), sym::rustc_effective_visibility) {\n+            let mut error_msg = String::new();\n+\n+            let effective_vis =\n+                self.access_levels.get_effective_vis(def_id).copied().unwrap_or_default();\n+            for level in [\n+                AccessLevel::Public,\n+                AccessLevel::Exported,\n+                AccessLevel::Reachable,\n+                AccessLevel::ReachableFromImplTrait,\n+            ] {\n+                let vis_str = match effective_vis.get(level) {\n+                    Some(ty::Visibility::Restricted(restricted_id)) => {\n+                        format!(\"pub({})\", self.tcx.item_name(restricted_id.to_def_id()))\n+                    }\n+                    Some(ty::Visibility::Public) => \"pub\".to_string(),\n+                    None => \"pub(self)\".to_string(),\n+                };\n+                if level != AccessLevel::Public {\n+                    error_msg.push_str(\", \");\n+                }\n+                error_msg.push_str(&format!(\"{:?}: {}\", level, vis_str));\n+            }\n+            self.tcx.sess.emit_err(ReportEffectiveVisibility { span, descr: error_msg });\n         }\n     }\n }"}, {"sha": "9b1111c02c73f3bbf84dc1d8221f0656fdbb4f41", "filename": "compiler/rustc_resolve/src/access_levels.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7b9221405c7f852663a7c5bef660582cb5cd972/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b9221405c7f852663a7c5bef660582cb5cd972/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs?ref=d7b9221405c7f852663a7c5bef660582cb5cd972", "patch": "@@ -46,7 +46,7 @@ impl<'r, 'a> AccessLevelsVisitor<'r, 'a> {\n     /// This will also follow `use` chains (see PrivacyVisitor::set_import_binding_access_level).\n     fn set_bindings_access_level(&mut self, module_id: LocalDefId) {\n         assert!(self.r.module_map.contains_key(&&module_id.to_def_id()));\n-        let module_level = self.r.access_levels.map.get(&module_id).copied();\n+        let module_level = self.r.access_levels.get_access_level(module_id);\n         if !module_level.is_some() {\n             return;\n         }\n@@ -103,9 +103,9 @@ impl<'r, 'a> AccessLevelsVisitor<'r, 'a> {\n         def_id: LocalDefId,\n         access_level: Option<AccessLevel>,\n     ) -> Option<AccessLevel> {\n-        let old_level = self.r.access_levels.map.get(&def_id).copied();\n+        let old_level = self.r.access_levels.get_access_level(def_id);\n         if old_level < access_level {\n-            self.r.access_levels.map.insert(def_id, access_level.unwrap());\n+            self.r.access_levels.set_access_level(def_id, access_level.unwrap());\n             self.changed = true;\n             access_level\n         } else {\n@@ -131,7 +131,7 @@ impl<'r, 'ast> Visitor<'ast> for AccessLevelsVisitor<'ast, 'r> {\n             // Foreign modules inherit level from parents.\n             ast::ItemKind::ForeignMod(..) => {\n                 let parent_level =\n-                    self.r.access_levels.map.get(&self.r.local_parent(def_id)).copied();\n+                    self.r.access_levels.get_access_level(self.r.local_parent(def_id));\n                 self.set_access_level(item.id, parent_level);\n             }\n \n@@ -151,15 +151,15 @@ impl<'r, 'ast> Visitor<'ast> for AccessLevelsVisitor<'ast, 'r> {\n                 self.set_bindings_access_level(def_id);\n                 for variant in variants {\n                     let variant_def_id = self.r.local_def_id(variant.id);\n-                    let variant_level = self.r.access_levels.map.get(&variant_def_id).copied();\n+                    let variant_level = self.r.access_levels.get_access_level(variant_def_id);\n                     for field in variant.data.fields() {\n                         self.set_access_level(field.id, variant_level);\n                     }\n                 }\n             }\n \n             ast::ItemKind::Struct(ref def, _) | ast::ItemKind::Union(ref def, _) => {\n-                let inherited_level = self.r.access_levels.map.get(&def_id).copied();\n+                let inherited_level = self.r.access_levels.get_access_level(def_id);\n                 for field in def.fields() {\n                     if field.vis.kind.is_pub() {\n                         self.set_access_level(field.id, inherited_level);"}, {"sha": "530198d8ad8cf962ed6bea84ffcacbf6004d1712", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b9221405c7f852663a7c5bef660582cb5cd972/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b9221405c7f852663a7c5bef660582cb5cd972/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=d7b9221405c7f852663a7c5bef660582cb5cd972", "patch": "@@ -1211,7 +1211,6 @@ symbols! {\n         rust_eh_unregister_frames,\n         rust_oom,\n         rustc,\n-        rustc_access_level,\n         rustc_allocator,\n         rustc_allocator_nounwind,\n         rustc_allocator_zeroed,\n@@ -1239,6 +1238,7 @@ symbols! {\n         rustc_dump_program_clauses,\n         rustc_dump_user_substs,\n         rustc_dump_vtable,\n+        rustc_effective_visibility,\n         rustc_error,\n         rustc_evaluate_where_clauses,\n         rustc_expected_cgu_reuse,"}, {"sha": "76562d26a550226840eaf84aa3e7633dac248741", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7b9221405c7f852663a7c5bef660582cb5cd972/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b9221405c7f852663a7c5bef660582cb5cd972/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=d7b9221405c7f852663a7c5bef660582cb5cd972", "patch": "@@ -10,7 +10,6 @@ use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{HirId, Path, TraitCandidate};\n use rustc_interface::interface;\n use rustc_middle::hir::nested_filter;\n-use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::ty::{ParamEnv, Ty, TyCtxt};\n use rustc_resolve as resolve;\n use rustc_session::config::{self, CrateType, ErrorOutputType};\n@@ -364,9 +363,7 @@ pub(crate) fn run_global_ctxt(\n         .copied()\n         .filter(|&trait_def_id| tcx.trait_is_auto(trait_def_id))\n         .collect();\n-    let access_levels = AccessLevels {\n-        map: tcx.privacy_access_levels(()).map.iter().map(|(k, v)| (k.to_def_id(), *v)).collect(),\n-    };\n+    let access_levels = tcx.privacy_access_levels(()).map_id(Into::into);\n \n     let mut ctxt = DocContext {\n         tcx,"}, {"sha": "e6cef4a326ac0ac066723ed6f941224f56a7ba77", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b9221405c7f852663a7c5bef660582cb5cd972/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b9221405c7f852663a7c5bef660582cb5cd972/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=d7b9221405c7f852663a7c5bef660582cb5cd972", "patch": "@@ -230,7 +230,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     } else {\n                         // All items need to be handled here in case someone wishes to link\n                         // to them with intra-doc links\n-                        self.cx.cache.access_levels.map.insert(did, AccessLevel::Public);\n+                        self.cx.cache.access_levels.set_access_level(did, AccessLevel::Public);\n                     }\n                 }\n             }"}, {"sha": "8221e0998d79ad2fca11db7582d00467ed6dac09", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b9221405c7f852663a7c5bef660582cb5cd972/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b9221405c7f852663a7c5bef660582cb5cd972/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=d7b9221405c7f852663a7c5bef660582cb5cd972", "patch": "@@ -38,10 +38,10 @@ impl<'a, 'tcx> LibEmbargoVisitor<'a, 'tcx> {\n     fn update(&mut self, did: DefId, level: Option<AccessLevel>) -> Option<AccessLevel> {\n         let is_hidden = self.tcx.is_doc_hidden(did);\n \n-        let old_level = self.access_levels.map.get(&did).cloned();\n+        let old_level = self.access_levels.get_access_level(did);\n         // Accessibility levels can only grow\n         if level > old_level && !is_hidden {\n-            self.access_levels.map.insert(did, level.unwrap());\n+            self.access_levels.set_access_level(did, level.unwrap());\n             level\n         } else {\n             old_level"}, {"sha": "aa718ab9254dfb1be1e50599cbb175da4ea76ded", "filename": "src/test/ui/privacy/access_levels.rs", "status": "modified", "additions": 41, "deletions": 28, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d7b9221405c7f852663a7c5bef660582cb5cd972/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b9221405c7f852663a7c5bef660582cb5cd972/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.rs?ref=d7b9221405c7f852663a7c5bef660582cb5cd972", "patch": "@@ -1,49 +1,62 @@\n #![feature(rustc_attrs)]\n \n-#[rustc_access_level] mod outer { //~ ERROR None\n-    #[rustc_access_level] pub mod inner { //~ ERROR Some(Exported)\n-        #[rustc_access_level]\n-        extern \"C\" { //~ ERROR Some(Exported)\n-            #[rustc_access_level] static a: u8; //~ ERROR None\n-            #[rustc_access_level] pub fn b(); //~ ERROR Some(Exported)\n-        }\n-        #[rustc_access_level]\n-        pub trait Trait { //~ ERROR Some(Exported)\n-            #[rustc_access_level] const A: i32; //~ ERROR Some(Exported)\n-            #[rustc_access_level] type B; //~ ERROR Some(Exported)\n+#[rustc_effective_visibility]\n+mod outer { //~ ERROR Public: pub(self), Exported: pub(self), Reachable: pub(self), ReachableFromImplTrait: pub(self)\n+    #[rustc_effective_visibility]\n+    pub mod inner1 { //~ ERROR Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+\n+        #[rustc_effective_visibility]\n+        extern \"C\" {} //~ ERROR Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+\n+        #[rustc_effective_visibility]\n+        pub trait PubTrait { //~ ERROR Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+            #[rustc_effective_visibility]\n+            const A: i32; //~ ERROR Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+            #[rustc_effective_visibility]\n+            type B; //~ ERROR Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n         }\n \n-        #[rustc_access_level]\n-        pub struct Struct { //~ ERROR Some(Exported)\n-            #[rustc_access_level] a: u8, //~ ERROR None\n-            #[rustc_access_level] pub b: u8, //~ ERROR Some(Exported)\n-        }\n+        #[rustc_effective_visibility]\n+        struct PrivStruct; //~ ERROR Public: pub(self), Exported: pub(self), Reachable: pub(self), ReachableFromImplTrait: pub(self)\n \n-        #[rustc_access_level]\n-        pub union Union { //~ ERROR Some(Exported)\n-            #[rustc_access_level] a: u8, //~ ERROR None\n-            #[rustc_access_level] pub b: u8, //~ ERROR Some(Exported)\n+        #[rustc_effective_visibility]\n+        pub union PubUnion { //~ ERROR Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+            #[rustc_effective_visibility]\n+            a: u8, //~ ERROR Public: pub(self), Exported: pub(self), Reachable: pub(self), ReachableFromImplTrait: pub(self)\n+            #[rustc_effective_visibility]\n+            pub b: u8, //~ ERROR Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n         }\n \n-        #[rustc_access_level]\n-        pub enum Enum { //~ ERROR Some(Exported)\n-            #[rustc_access_level] A( //~ ERROR Some(Exported)\n-                #[rustc_access_level] Struct, //~ ERROR Some(Exported)\n-                #[rustc_access_level] Union,  //~ ERROR Some(Exported)\n+        #[rustc_effective_visibility]\n+        pub enum Enum { //~ ERROR Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+            #[rustc_effective_visibility]\n+            A( //~ ERROR Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+                #[rustc_effective_visibility]\n+                PubUnion,  //~ ERROR Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n             ),\n         }\n     }\n \n-    #[rustc_access_level] macro_rules! none_macro { //~ ERROR None\n+    #[rustc_effective_visibility]\n+    macro_rules! none_macro { //~ Public: pub(self), Exported: pub(self), Reachable: pub(self), ReachableFromImplTrait: pub(self)\n         () => {};\n     }\n \n     #[macro_export]\n-    #[rustc_access_level] macro_rules! public_macro { //~ ERROR Some(Public)\n+    #[rustc_effective_visibility]\n+    macro_rules! public_macro { //~ Public: pub, Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n         () => {};\n     }\n+\n+    #[rustc_effective_visibility]\n+    pub struct ReachableStruct { //~ ERROR Public: pub(self), Exported: pub(self), Reachable: pub, ReachableFromImplTrait: pub\n+        #[rustc_effective_visibility]\n+        pub a: u8, //~ ERROR Public: pub(self), Exported: pub(self), Reachable: pub, ReachableFromImplTrait: pub\n+    }\n }\n \n-pub use outer::inner;\n+pub use outer::inner1;\n+\n+pub fn foo() -> outer::ReachableStruct { outer::ReachableStruct {a: 0} }\n \n fn main() {}"}, {"sha": "2ed6c330a2f97763470de828acecc10afa87cca8", "filename": "src/test/ui/privacy/access_levels.stderr", "status": "modified", "additions": 65, "deletions": 86, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/d7b9221405c7f852663a7c5bef660582cb5cd972/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7b9221405c7f852663a7c5bef660582cb5cd972/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.stderr?ref=d7b9221405c7f852663a7c5bef660582cb5cd972", "patch": "@@ -1,125 +1,104 @@\n-error: None\n-  --> $DIR/access_levels.rs:3:23\n+error: Public: pub(self), Exported: pub(self), Reachable: pub(self), ReachableFromImplTrait: pub(self)\n+  --> $DIR/access_levels.rs:4:1\n    |\n-LL | #[rustc_access_level] mod outer {\n-   |                       ^^^^^^^^^\n+LL | mod outer {\n+   | ^^^^^^^^^\n \n-error: Some(Exported)\n-  --> $DIR/access_levels.rs:4:27\n+error: Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+  --> $DIR/access_levels.rs:6:5\n    |\n-LL |     #[rustc_access_level] pub mod inner {\n-   |                           ^^^^^^^^^^^^^\n+LL |     pub mod inner1 {\n+   |     ^^^^^^^^^^^^^^\n \n-error: Some(Exported)\n-  --> $DIR/access_levels.rs:6:9\n+error: Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+  --> $DIR/access_levels.rs:9:9\n    |\n-LL | /         extern \"C\" {\n-LL | |             #[rustc_access_level] static a: u8;\n-LL | |             #[rustc_access_level] pub fn b();\n-LL | |         }\n-   | |_________^\n+LL |         extern \"C\" {}\n+   |         ^^^^^^^^^^^^^\n \n-error: Some(Exported)\n-  --> $DIR/access_levels.rs:11:9\n+error: Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+  --> $DIR/access_levels.rs:12:9\n    |\n-LL |         pub trait Trait {\n-   |         ^^^^^^^^^^^^^^^\n+LL |         pub trait PubTrait {\n+   |         ^^^^^^^^^^^^^^^^^^\n \n-error: Some(Exported)\n-  --> $DIR/access_levels.rs:17:9\n+error: Public: pub(self), Exported: pub(self), Reachable: pub(self), ReachableFromImplTrait: pub(self)\n+  --> $DIR/access_levels.rs:20:9\n    |\n-LL |         pub struct Struct {\n+LL |         struct PrivStruct;\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: None\n-  --> $DIR/access_levels.rs:18:35\n-   |\n-LL |             #[rustc_access_level] a: u8,\n-   |                                   ^^^^^\n-\n-error: Some(Exported)\n-  --> $DIR/access_levels.rs:19:35\n-   |\n-LL |             #[rustc_access_level] pub b: u8,\n-   |                                   ^^^^^^^^^\n-\n-error: Some(Exported)\n+error: Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n   --> $DIR/access_levels.rs:23:9\n    |\n-LL |         pub union Union {\n-   |         ^^^^^^^^^^^^^^^\n+LL |         pub union PubUnion {\n+   |         ^^^^^^^^^^^^^^^^^^\n \n-error: None\n-  --> $DIR/access_levels.rs:24:35\n+error: Public: pub(self), Exported: pub(self), Reachable: pub(self), ReachableFromImplTrait: pub(self)\n+  --> $DIR/access_levels.rs:25:13\n    |\n-LL |             #[rustc_access_level] a: u8,\n-   |                                   ^^^^^\n+LL |             a: u8,\n+   |             ^^^^^\n \n-error: Some(Exported)\n-  --> $DIR/access_levels.rs:25:35\n+error: Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+  --> $DIR/access_levels.rs:27:13\n    |\n-LL |             #[rustc_access_level] pub b: u8,\n-   |                                   ^^^^^^^^^\n+LL |             pub b: u8,\n+   |             ^^^^^^^^^\n \n-error: Some(Exported)\n-  --> $DIR/access_levels.rs:29:9\n+error: Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+  --> $DIR/access_levels.rs:31:9\n    |\n LL |         pub enum Enum {\n    |         ^^^^^^^^^^^^^\n \n-error: Some(Exported)\n-  --> $DIR/access_levels.rs:30:35\n-   |\n-LL |             #[rustc_access_level] A(\n-   |                                   ^\n-\n-error: Some(Exported)\n-  --> $DIR/access_levels.rs:31:39\n+error: Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+  --> $DIR/access_levels.rs:33:13\n    |\n-LL |                 #[rustc_access_level] Struct,\n-   |                                       ^^^^^^\n+LL |             A(\n+   |             ^\n \n-error: Some(Exported)\n-  --> $DIR/access_levels.rs:32:39\n+error: Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+  --> $DIR/access_levels.rs:35:17\n    |\n-LL |                 #[rustc_access_level] Union,\n-   |                                       ^^^^^\n+LL |                 PubUnion,\n+   |                 ^^^^^^^^\n \n-error: None\n-  --> $DIR/access_levels.rs:37:27\n+error: Public: pub(self), Exported: pub(self), Reachable: pub(self), ReachableFromImplTrait: pub(self)\n+  --> $DIR/access_levels.rs:41:5\n    |\n-LL |     #[rustc_access_level] macro_rules! none_macro {\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     macro_rules! none_macro {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Some(Public)\n-  --> $DIR/access_levels.rs:42:27\n+error: Public: pub, Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+  --> $DIR/access_levels.rs:47:5\n    |\n-LL |     #[rustc_access_level] macro_rules! public_macro {\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     macro_rules! public_macro {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Some(Exported)\n-  --> $DIR/access_levels.rs:12:35\n+error: Public: pub(self), Exported: pub(self), Reachable: pub, ReachableFromImplTrait: pub\n+  --> $DIR/access_levels.rs:52:5\n    |\n-LL |             #[rustc_access_level] const A: i32;\n-   |                                   ^^^^^^^^^^^^\n+LL |     pub struct ReachableStruct {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Some(Exported)\n-  --> $DIR/access_levels.rs:13:35\n+error: Public: pub(self), Exported: pub(self), Reachable: pub, ReachableFromImplTrait: pub\n+  --> $DIR/access_levels.rs:54:9\n    |\n-LL |             #[rustc_access_level] type B;\n-   |                                   ^^^^^^\n+LL |         pub a: u8,\n+   |         ^^^^^^^^^\n \n-error: None\n-  --> $DIR/access_levels.rs:7:35\n+error: Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+  --> $DIR/access_levels.rs:14:13\n    |\n-LL |             #[rustc_access_level] static a: u8;\n-   |                                   ^^^^^^^^^^^^\n+LL |             const A: i32;\n+   |             ^^^^^^^^^^^^\n \n-error: Some(Exported)\n-  --> $DIR/access_levels.rs:8:35\n+error: Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+  --> $DIR/access_levels.rs:16:13\n    |\n-LL |             #[rustc_access_level] pub fn b();\n-   |                                   ^^^^^^^^^^\n+LL |             type B;\n+   |             ^^^^^^\n \n-error: aborting due to 20 previous errors\n+error: aborting due to 17 previous errors\n "}]}