{"sha": "ccd4bfb6ca35eac096235c8303370c87dce338eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjZDRiZmI2Y2EzNWVhYzA5NjIzNWM4MzAzMzcwYzg3ZGNlMzM4ZWI=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-06-20T14:02:16Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-29T22:41:55Z"}, "message": "std: mapped addrinfo, addr_in and uv_getaddrinfo_t as rust records", "tree": {"sha": "5af3be2e413a4111cc548bbdf0655eb4e5718933", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5af3be2e413a4111cc548bbdf0655eb4e5718933"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccd4bfb6ca35eac096235c8303370c87dce338eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccd4bfb6ca35eac096235c8303370c87dce338eb", "html_url": "https://github.com/rust-lang/rust/commit/ccd4bfb6ca35eac096235c8303370c87dce338eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccd4bfb6ca35eac096235c8303370c87dce338eb/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ef9548f2c8659b4f12624dea2b4ac63491db0a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ef9548f2c8659b4f12624dea2b4ac63491db0a6", "html_url": "https://github.com/rust-lang/rust/commit/2ef9548f2c8659b4f12624dea2b4ac63491db0a6"}], "stats": {"total": 80, "additions": 78, "deletions": 2}, "files": [{"sha": "1050d587336cfedef0429407eae35d1e7e7ef3e3", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 78, "deletions": 2, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/ccd4bfb6ca35eac096235c8303370c87dce338eb/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd4bfb6ca35eac096235c8303370c87dce338eb/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=ccd4bfb6ca35eac096235c8303370c87dce338eb", "patch": "@@ -229,6 +229,25 @@ type sockaddr_in6 = {\n     a2: *u8, a3: *u8\n };\n \n+// unix size: 28\n+// unix size: 28 .. FIXME: stuck with 32 becuse of rust padding structs?\n+type addr_in = {\n+    a0: *u8, a1: *u8,\n+    a2: *u8, a3: *u8\n+};\n+\n+// unix size: 48\n+type addrinfo = {\n+    a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n+    a04: *u8, a05: *u8\n+};\n+\n+// unix size: 72\n+type uv_getaddrinfo_t = {\n+    a00: *u8, a01: *u8, a02: *u8, a03: *u8, a04: *u8, a05: *u8,\n+    a06: *u8, a07: *u8, a08: *u8\n+};\n+\n mod uv_ll_struct_stubgen {\n     fn gen_stub_uv_tcp_t() -> uv_tcp_t {\n         ret gen_stub_os();\n@@ -474,10 +493,18 @@ mod uv_ll_struct_stubgen {\n             a12: 0 as *u8\n         };\n     }\n+    fn gen_stub_uv_getaddrinfo_t() -> uv_getaddrinfo_t {\n+        {\n+            a00: 0 as *u8, a01: 0 as *u8, a02: 0 as *u8, a03: 0 as *u8,\n+            a04: 0 as *u8, a05: 0 as *u8, a06: 0 as *u8, a07: 0 as *u8,\n+            a08: 0 as *u8\n+        }\n+    }\n }\n \n #[nolink]\n native mod rustrt {\n+    // libuv public API\n     fn rust_uv_loop_new() -> *libc::c_void;\n     fn rust_uv_loop_delete(lp: *libc::c_void);\n     fn rust_uv_loop_refcount(loop_ptr: *libc::c_void) -> libc::c_int;\n@@ -533,6 +560,14 @@ native mod rustrt {\n         repeat: libc::c_uint) -> libc::c_int;\n     fn rust_uv_timer_stop(handle: *uv_timer_t) -> libc::c_int;\n \n+    fn rust_uv_getaddrinfo(loop_ptr: *libc::c_void,\n+                           handle: *uv_getaddrinfo_t, cb: *u8,\n+                           node_name_ptr: *u8,\n+                           service_name_ptr: *u8,\n+                           // should probably only pass ptr::null()\n+                           hints: *addrinfo)\n+        -> libc::c_int;\n+\n     // data accessors/helpers for rust-mapped uv structs\n     fn rust_uv_malloc_buf_base_of(sug_size: libc::size_t) -> *u8;\n     fn rust_uv_free_base_of_buf(++buf: uv_buf_t);\n@@ -567,6 +602,9 @@ native mod rustrt {\n     fn rust_uv_helper_sockaddr_in6_size() -> libc::c_uint;\n     fn rust_uv_helper_uv_async_t_size() -> libc::c_uint;\n     fn rust_uv_helper_uv_timer_t_size() -> libc::c_uint;\n+    fn rust_uv_helper_uv_getaddrinfo_t_size() -> libc::c_uint;\n+    fn rust_uv_helper_addrinfo_size() -> libc::c_uint;\n+    fn rust_uv_helper_addr_in_size() -> libc::c_uint;\n }\n \n unsafe fn loop_new() -> *libc::c_void {\n@@ -717,7 +755,7 @@ unsafe fn ip4_name(src: &sockaddr_in) -> str {\n         // libuv will actually map a malformed input ip to INADDR_NONE,\n         // which is going to be 255.255.255.255 on most\n         // platforms.\n-        str::unsafe::from_buf(dst_buf);\n+        str::unsafe::from_buf(dst_buf)\n     }\n }\n unsafe fn ip6_name(src: &sockaddr_in6) -> str {\n@@ -772,6 +810,9 @@ unsafe fn async_t() -> uv_async_t {\n unsafe fn timer_t() -> uv_timer_t {\n     ret uv_ll_struct_stubgen::gen_stub_uv_timer_t();\n }\n+unsafe fn getaddrinfo_t() -> uv_getaddrinfo_t {\n+    ret uv_ll_struct_stubgen::gen_stub_uv_getaddrinfo_t();\n+}\n \n // data access helpers\n unsafe fn get_loop_for_uv_handle<T>(handle: *T)\n@@ -1431,12 +1472,24 @@ mod test {\n         let output = #fmt(\"sockaddr_in -- native: %u rust: %u\",\n                           native_handle_size as uint, rust_handle_size);\n         log(debug, output);\n-        // FIXME .. rust appears to pack structs to the nearest byte..?\n+        // FIXME .. rust appears to pad structs to the nearest byte..?\n         // .. can't get the uv::ll::sockaddr_in6 to == 28 :/\n         // .. so the type always appears to be 32 in size.. which is\n         // good, i guess.. better too big than too little\n         assert (4u+native_handle_size as uint) == rust_handle_size;\n     }\n+    #[test]\n+    #[ignore(cfg(target_os = \"freebsd\"))]\n+    fn test_uv_ll_struct_size_addr_in() {\n+        let native_handle_size =\n+            rustrt::rust_uv_helper_addr_in_size();\n+        let rust_handle_size = sys::size_of::<addr_in>();\n+        let output = #fmt(\"addr_in -- native: %u rust: %u\",\n+                          native_handle_size as uint, rust_handle_size);\n+        log(debug, output);\n+        // FIXME .. see note above about struct padding\n+        assert (4u+native_handle_size as uint) == rust_handle_size;\n+    }\n \n     #[test]\n     #[ignore(cfg(target_os = \"freebsd\"))]\n@@ -1461,4 +1514,27 @@ mod test {\n         log(debug, output);\n         assert foreign_handle_size as uint == rust_handle_size;\n     }\n+    \n+    #[test]\n+    #[ignore(cfg(target_os = \"freebsd\"))]\n+    fn test_uv_ll_struct_size_uv_getaddrinfo_t() {\n+        let native_handle_size =\n+            rustrt::rust_uv_helper_uv_getaddrinfo_t_size();\n+        let rust_handle_size = sys::size_of::<uv_getaddrinfo_t>();\n+        let output = #fmt(\"uv_getaddrinfo_t -- native: %u rust: %u\",\n+                          native_handle_size as uint, rust_handle_size);\n+        log(debug, output);\n+        assert native_handle_size as uint == rust_handle_size;\n+    }\n+    #[test]\n+    #[ignore(cfg(target_os = \"freebsd\"))]\n+    fn test_uv_ll_struct_size_addrinfo() {\n+        let native_handle_size =\n+            rustrt::rust_uv_helper_addrinfo_size();\n+        let rust_handle_size = sys::size_of::<addrinfo>();\n+        let output = #fmt(\"addrinfo -- native: %u rust: %u\",\n+                          native_handle_size as uint, rust_handle_size);\n+        log(debug, output);\n+        assert native_handle_size as uint == rust_handle_size;\n+    }\n }"}]}