{"sha": "13b055d5db67ab6c88d6379b7677069482db6077", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzYjA1NWQ1ZGI2N2FiNmM4OGQ2Mzc5Yjc2NzcwNjk0ODJkYjYwNzc=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-02-15T16:55:54Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-02-16T06:11:41Z"}, "message": "Rollup merge of #58429 - RalfJung:box, r=TimNN\n\nfix Box::into_unique effecitvely transmuting to a raw ptr\n\nMiri/Stacked Borrows treat `Box` specially: they assert that it is unique, and tag it appropriately. However, currently, `Box::into_inner` is not aware of that and returns a raw pointer (wrapped in a `Unique`) that carries the same tag as the box, meaning it carries a `Uniq` tag. This leads to all sorts of problems when people use the raw pointer they get out of the `Unique` type.\n\nIn the future, it'd be interesting to make `Unique` also carry some kind of uniqueness. In that case, something like this would instead be needed whenever a raw pointer is extracted from a `Unique`. However, that is out-of-scope for the current version of Stacked Borrows. So until then, this changes `into_unique` to perform a proper reference-to-raw-ptr-cast, which clears the tag.", "tree": {"sha": "c7dcd62b3c74dbf6e0a303cdbd4844ed53467d6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7dcd62b3c74dbf6e0a303cdbd4844ed53467d6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13b055d5db67ab6c88d6379b7677069482db6077", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlxnqZ0ACgkQ/vbIBR0O\nATyZSg//VeI22zq3O3grDzn0njZf92pHYe50TDAcTrb3A0pdVZNDDUhRX7/slrlN\nsjilnS3K2VFN+P8fNCls8qL/NL4M/A5G71ejdI87vcRatpcoUOjhX0qK9HcFoNzT\nR2k/i3lltE0+wxnbN5p1Ba5gwqeTecdwGo8C9OlSI5QIR3QZ68hRdrBR+0hwx2cQ\nLqrUAYOdv3111KvHSF1bYWZA5c1ABmCKGWTcZ2WVHAiK9FcMS0kL8/mUiUSte3db\nkdwOc+drbXgxldVFjhZI4n58A/DR/nQlLR3rq+6AOq3WcNuLhAZDaV/XtudzP0ta\n1bcq+dqXD/eZ7CBj6HOyT5A9Yg9rUY/gMp7c3gBrREGqUjSObVzHNqZ3t1QucZZz\njtsczEap9rIjGy91fg12PjDug0rzDdEiAP61K53b5yZ5JnkvwVrbSk5Fe6xwnmr+\nS0CoN650PqRgRw1HnHX87AGfZDEAhb0tsqPwSAHPN7K9Cl4wWsjVTJa9fzLdUvcI\n0UHelDJlqQar3mwF7+jxucH2agBI5Z51Cb0HWjWK1zgy8Zep9QEtsP5Tcw6jMnSh\nERRTQWlEYjI+Tu2P2MTtqh7dTPx0MCWAHvvjpR+yyKYiAPHdlSLo4nRHnJ2PaqtP\nx5LeVAOlBG3Ff9XvLILOWri21zshIgdBIGDfBvPBJdC//8cvnTs=\n=AUWY\n-----END PGP SIGNATURE-----", "payload": "tree c7dcd62b3c74dbf6e0a303cdbd4844ed53467d6a\nparent 092d191965597c80e01bae7029324bce5b994b8f\nparent 719be246ae708508a19436a0b8ee1be29882e21e\nauthor kennytm <kennytm@gmail.com> 1550249754 +0800\ncommitter kennytm <kennytm@gmail.com> 1550297501 +0800\n\nRollup merge of #58429 - RalfJung:box, r=TimNN\n\nfix Box::into_unique effecitvely transmuting to a raw ptr\n\nMiri/Stacked Borrows treat `Box` specially: they assert that it is unique, and tag it appropriately. However, currently, `Box::into_inner` is not aware of that and returns a raw pointer (wrapped in a `Unique`) that carries the same tag as the box, meaning it carries a `Uniq` tag. This leads to all sorts of problems when people use the raw pointer they get out of the `Unique` type.\n\nIn the future, it'd be interesting to make `Unique` also carry some kind of uniqueness. In that case, something like this would instead be needed whenever a raw pointer is extracted from a `Unique`. However, that is out-of-scope for the current version of Stacked Borrows. So until then, this changes `into_unique` to perform a proper reference-to-raw-ptr-cast, which clears the tag.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13b055d5db67ab6c88d6379b7677069482db6077", "html_url": "https://github.com/rust-lang/rust/commit/13b055d5db67ab6c88d6379b7677069482db6077", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13b055d5db67ab6c88d6379b7677069482db6077/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "092d191965597c80e01bae7029324bce5b994b8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/092d191965597c80e01bae7029324bce5b994b8f", "html_url": "https://github.com/rust-lang/rust/commit/092d191965597c80e01bae7029324bce5b994b8f"}, {"sha": "719be246ae708508a19436a0b8ee1be29882e21e", "url": "https://api.github.com/repos/rust-lang/rust/commits/719be246ae708508a19436a0b8ee1be29882e21e", "html_url": "https://github.com/rust-lang/rust/commit/719be246ae708508a19436a0b8ee1be29882e21e"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "0cd2373c7f0215c19d9924522610eac7294f3d02", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/13b055d5db67ab6c88d6379b7677069482db6077/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13b055d5db67ab6c88d6379b7677069482db6077/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=13b055d5db67ab6c88d6379b7677069482db6077", "patch": "@@ -202,10 +202,15 @@ impl<T: ?Sized> Box<T> {\n     #[unstable(feature = \"ptr_internals\", issue = \"0\", reason = \"use into_raw_non_null instead\")]\n     #[inline]\n     #[doc(hidden)]\n-    pub fn into_unique(b: Box<T>) -> Unique<T> {\n-        let unique = b.0;\n+    pub fn into_unique(mut b: Box<T>) -> Unique<T> {\n+        // Box is kind-of a library type, but recognized as a \"unique pointer\" by\n+        // Stacked Borrows.  This function here corresponds to \"reborrowing to\n+        // a raw pointer\", but there is no actual reborrow here -- so\n+        // without some care, the pointer we are returning here still carries\n+        // the `Uniq` tag.  We round-trip through a mutable reference to avoid that.\n+        let unique = unsafe { b.0.as_mut() as *mut T };\n         mem::forget(b);\n-        unique\n+        unsafe { Unique::new_unchecked(unique) }\n     }\n \n     /// Consumes and leaks the `Box`, returning a mutable reference,"}]}