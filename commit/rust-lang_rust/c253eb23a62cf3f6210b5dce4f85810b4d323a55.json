{"sha": "c253eb23a62cf3f6210b5dce4f85810b4d323a55", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNTNlYjIzYTYyY2YzZjYyMTBiNWRjZTRmODU4MTBiNGQzMjNhNTU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-03-10T22:51:26Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-03-11T00:18:28Z"}, "message": "Rollup merge of #40287 - estebank:label-overlap, r=nrc\n\nFix incorrect span label formatting\n\nFix #40157.", "tree": {"sha": "86c9422cfb3291d79b93f679b8a8ccda2c4becc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86c9422cfb3291d79b93f679b8a8ccda2c4becc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c253eb23a62cf3f6210b5dce4f85810b4d323a55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c253eb23a62cf3f6210b5dce4f85810b4d323a55", "html_url": "https://github.com/rust-lang/rust/commit/c253eb23a62cf3f6210b5dce4f85810b4d323a55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c253eb23a62cf3f6210b5dce4f85810b4d323a55/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcc24b18ca63c22d7f3867b0af4e88e631354a17", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcc24b18ca63c22d7f3867b0af4e88e631354a17", "html_url": "https://github.com/rust-lang/rust/commit/dcc24b18ca63c22d7f3867b0af4e88e631354a17"}, {"sha": "7b0dd7bdb80768684195f0175d2feecaefd1f2ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0dd7bdb80768684195f0175d2feecaefd1f2ac", "html_url": "https://github.com/rust-lang/rust/commit/7b0dd7bdb80768684195f0175d2feecaefd1f2ac"}], "stats": {"total": 89, "additions": 61, "deletions": 28}, "files": [{"sha": "431edb3c9bc4d44e828f44f2d9f2421295b6c6b7", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 34, "deletions": 28, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/c253eb23a62cf3f6210b5dce4f85810b4d323a55/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c253eb23a62cf3f6210b5dce4f85810b4d323a55/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=c253eb23a62cf3f6210b5dce4f85810b4d323a55", "patch": "@@ -358,39 +358,45 @@ impl EmitterWriter {\n         let mut annotations_position = vec![];\n         let mut line_len = 0;\n         let mut p = 0;\n-        let mut ann_iter = annotations.iter().peekable();\n-        while let Some(annotation) = ann_iter.next() {\n-            let peek = ann_iter.peek();\n-            if let Some(next) = peek {\n-                if overlaps(next, annotation) && !annotation.is_line() && !next.is_line()\n+        for (i, annotation) in annotations.iter().enumerate() {\n+            for (j, next) in annotations.iter().enumerate() {\n+                if overlaps(next, annotation, 0)  // This label overlaps with another one and both\n+                    && !annotation.is_line()      // take space (they have text and are not\n+                    && !next.is_line()            // multiline lines).\n                     && annotation.has_label()\n+                    && j > i\n+                    && p == 0  // We're currently on the first line, move the label one line down\n                 {\n                     // This annotation needs a new line in the output.\n                     p += 1;\n+                    break;\n                 }\n             }\n             annotations_position.push((p, annotation));\n-            if let Some(next) = peek {\n-                let l = if let Some(ref label) = next.label {\n-                    label.len() + 2\n-                } else {\n-                    0\n-                };\n-                if (overlaps(next, annotation)  // Do not allow two labels to be in the same line\n-                    || next.end_col + l > annotation.start_col)  // if they overlap including\n-                                                // padding, to avoid situations like:\n-                                                //\n-                                                //      fn foo(x: u32) {\n-                                                //      -------^------\n-                                                //      |      |\n-                                                //      fn_spanx_span\n-                                                //\n-                    && !annotation.is_line()    // Do not add a new line if this annotation or the\n-                    && !next.is_line()          // next are vertical line placeholders.\n-                    && annotation.has_label()   // Both labels must have some text, otherwise\n-                    && next.has_label()         // they are not overlapping.\n-                {\n-                    p += 1;\n+            for (j, next) in annotations.iter().enumerate() {\n+                if j > i  {\n+                    let l = if let Some(ref label) = next.label {\n+                        label.len() + 2\n+                    } else {\n+                        0\n+                    };\n+                    if overlaps(next, annotation, l) // Do not allow two labels to be in the same\n+                                                     // line if they overlap including padding, to\n+                                                     // avoid situations like:\n+                                                     //\n+                                                     //      fn foo(x: u32) {\n+                                                     //      -------^------\n+                                                     //      |      |\n+                                                     //      fn_spanx_span\n+                                                     //\n+                        && !annotation.is_line()     // Do not add a new line if this annotation\n+                        && !next.is_line()           // or the next are vertical line placeholders.\n+                        && annotation.has_label()    // Both labels must have some text, otherwise\n+                        && next.has_label()          // they are not overlapping.\n+                    {\n+                        p += 1;\n+                        break;\n+                    }\n                 }\n             }\n             if line_len < p {\n@@ -1088,8 +1094,8 @@ fn num_overlap(a_start: usize, a_end: usize, b_start: usize, b_end:usize, inclus\n     (b_start..b_end + extra).contains(a_start) ||\n     (a_start..a_end + extra).contains(b_start)\n }\n-fn overlaps(a1: &Annotation, a2: &Annotation) -> bool {\n-    num_overlap(a1.start_col, a1.end_col, a2.start_col, a2.end_col, false)\n+fn overlaps(a1: &Annotation, a2: &Annotation, padding: usize) -> bool {\n+    num_overlap(a1.start_col, a1.end_col + padding, a2.start_col, a2.end_col, false)\n }\n \n fn emit_to_destination(rendered_buffer: &Vec<Vec<StyledString>>,"}, {"sha": "8f3a7ae3417366fe34dad2e590d8e1f7fcbbe562", "filename": "src/test/ui/span/issue-40157.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c253eb23a62cf3f6210b5dce4f85810b4d323a55/src%2Ftest%2Fui%2Fspan%2Fissue-40157.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c253eb23a62cf3f6210b5dce4f85810b4d323a55/src%2Ftest%2Fui%2Fspan%2Fissue-40157.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-40157.rs?ref=c253eb23a62cf3f6210b5dce4f85810b4d323a55", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main () {\n+    {println!(\"{:?}\", match { let foo = vec![1, 2]; foo.get(1) } { x => x });}\n+}"}, {"sha": "ad1c149d2e56f7546a7f86cbae68e4ee6a006a3d", "filename": "src/test/ui/span/issue-40157.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c253eb23a62cf3f6210b5dce4f85810b4d323a55/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c253eb23a62cf3f6210b5dce4f85810b4d323a55/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr?ref=c253eb23a62cf3f6210b5dce4f85810b4d323a55", "patch": "@@ -0,0 +1,14 @@\n+error: `foo` does not live long enough\n+  --> $DIR/issue-40157.rs:12:64\n+   |\n+12 |     {println!(\"{:?}\", match { let foo = vec![1, 2]; foo.get(1) } { x => x });}\n+   |      ----------------------------------------------------------^-------------\n+   |      |                                              |          |\n+   |      |                                              |          `foo` dropped here while still borrowed\n+   |      |                                              borrow occurs here\n+   |      borrowed value needs to live until here\n+   |\n+   = note: this error originates in a macro outside of the current crate\n+\n+error: aborting due to previous error\n+"}]}