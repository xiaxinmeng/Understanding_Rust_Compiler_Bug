{"sha": "071f737a571c2931f9d1a338cd6eb52c5e4bc488", "node_id": "C_kwDOAAsO6NoAKDA3MWY3MzdhNTcxYzI5MzFmOWQxYTMzOGNkNmViNTJjNWU0YmM0ODg", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-26T10:38:54Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-26T10:38:54Z"}, "message": "Remove some more useless `ty::Binder::dummy` calls", "tree": {"sha": "e86421382f6d661144252b668e2d21b2047daade", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e86421382f6d661144252b668e2d21b2047daade"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/071f737a571c2931f9d1a338cd6eb52c5e4bc488", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/071f737a571c2931f9d1a338cd6eb52c5e4bc488", "html_url": "https://github.com/rust-lang/rust/commit/071f737a571c2931f9d1a338cd6eb52c5e4bc488", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/071f737a571c2931f9d1a338cd6eb52c5e4bc488/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9f842a4dca03b33403b3bdd31c13c892a123e70", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9f842a4dca03b33403b3bdd31c13c892a123e70", "html_url": "https://github.com/rust-lang/rust/commit/d9f842a4dca03b33403b3bdd31c13c892a123e70"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "17952c601d23a2cfcff34404bf8233a38bb43ee8", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/071f737a571c2931f9d1a338cd6eb52c5e4bc488/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/071f737a571c2931f9d1a338cd6eb52c5e4bc488/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=071f737a571c2931f9d1a338cd6eb52c5e4bc488", "patch": "@@ -764,11 +764,11 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             self.tcx,\n             self.cause.clone(),\n             self.param_env,\n-            ty::Binder::dummy(ty::TraitRef::from_lang_item(\n+            ty::TraitRef::from_lang_item(\n                 self.tcx.at(self.cause.span),\n                 hir::LangItem::PointerLike,\n                 [a],\n-            )),\n+            ),\n         ));\n \n         Ok(InferOk {"}, {"sha": "bc5bb2e0c48684b8906a6fe8026df10a4530aa2e", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/071f737a571c2931f9d1a338cd6eb52c5e4bc488/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/071f737a571c2931f9d1a338cd6eb52c5e4bc488/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=071f737a571c2931f9d1a338cd6eb52c5e4bc488", "patch": "@@ -334,11 +334,11 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n \n                 ty::Alias(_, _) | ty::Param(_) | ty::Placeholder(..) => {\n                     // FIXME(ptr_metadata): It would also be possible to return a `Ok(Ambig)` with no constraints.\n-                    let sized_predicate = ty::Binder::dummy(ty::TraitRef::from_lang_item(\n+                    let sized_predicate = ty::TraitRef::from_lang_item(\n                         tcx.at(DUMMY_SP),\n                         LangItem::Sized,\n                         [ty::GenericArg::from(goal.predicate.self_ty())],\n-                    ));\n+                    );\n                     ecx.add_goal(goal.with(tcx, sized_predicate));\n                     tcx.types.unit\n                 }"}, {"sha": "6604b1aceffa84604f7f4150759485e7525ad9ff", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/071f737a571c2931f9d1a338cd6eb52c5e4bc488/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/071f737a571c2931f9d1a338cd6eb52c5e4bc488/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=071f737a571c2931f9d1a338cd6eb52c5e4bc488", "patch": "@@ -646,11 +646,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             output_ty,\n             &mut nested,\n         );\n-        let tr = ty::Binder::dummy(ty::TraitRef::from_lang_item(\n-            self.tcx().at(cause.span),\n-            LangItem::Sized,\n-            [output_ty],\n-        ));\n+        let tr =\n+            ty::TraitRef::from_lang_item(self.tcx().at(cause.span), LangItem::Sized, [output_ty]);\n         nested.push(Obligation::new(self.infcx.tcx, cause, obligation.param_env, tr));\n \n         Ok(ImplSourceFnPointerData { fn_ty: self_ty, nested })"}]}