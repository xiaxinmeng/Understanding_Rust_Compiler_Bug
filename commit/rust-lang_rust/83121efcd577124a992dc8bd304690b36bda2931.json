{"sha": "83121efcd577124a992dc8bd304690b36bda2931", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMTIxZWZjZDU3NzEyNGE5OTJkYzhiZDMwNDY5MGIzNmJkYTI5MzE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-12-22T18:00:38Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-12-22T18:00:38Z"}, "message": "Reduce some more code duplication", "tree": {"sha": "7c936ea2d9ceb39192046ac5cc504a52e6dbcf79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c936ea2d9ceb39192046ac5cc504a52e6dbcf79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83121efcd577124a992dc8bd304690b36bda2931", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83121efcd577124a992dc8bd304690b36bda2931", "html_url": "https://github.com/rust-lang/rust/commit/83121efcd577124a992dc8bd304690b36bda2931", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83121efcd577124a992dc8bd304690b36bda2931/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cd2947bf8cb7abfb06ceb00804447def899d37d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cd2947bf8cb7abfb06ceb00804447def899d37d", "html_url": "https://github.com/rust-lang/rust/commit/2cd2947bf8cb7abfb06ceb00804447def899d37d"}], "stats": {"total": 170, "additions": 76, "deletions": 94}, "files": [{"sha": "eee31098d13cb57d4f269c0a9209d8ce1b28d17b", "filename": "crates/completion/src/completions/pattern.rs", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/83121efcd577124a992dc8bd304690b36bda2931/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83121efcd577124a992dc8bd304690b36bda2931/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=83121efcd577124a992dc8bd304690b36bda2931", "patch": "@@ -1,7 +1,5 @@\n //! Completes constats and paths in patterns.\n \n-use hir::StructKind;\n-\n use crate::{CompletionContext, Completions};\n \n /// Completes constants and paths in patterns.\n@@ -22,11 +20,7 @@ pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n                     acc.add_struct_pat(ctx, strukt.clone(), Some(name.clone()));\n                     true\n                 }\n-                hir::ModuleDef::Variant(variant)\n-                    if !ctx.is_irrefutable_pat_binding\n-                        // render_resolution already does some pattern completion tricks for tuple variants\n-                        && variant.kind(ctx.db) == StructKind::Record =>\n-                {\n+                hir::ModuleDef::Variant(variant) if !ctx.is_irrefutable_pat_binding => {\n                     acc.add_variant_pat(ctx, variant.clone(), Some(name.clone()));\n                     true\n                 }\n@@ -49,7 +43,10 @@ pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::{test_utils::completion_list, CompletionKind};\n+    use crate::{\n+        test_utils::{check_edit, completion_list},\n+        CompletionKind,\n+    };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n         let actual = completion_list(ra_fixture, CompletionKind::Reference);\n@@ -81,7 +78,7 @@ fn foo() {\n                 en E\n                 ct Z\n                 st Bar\n-                ev X   ()\n+                ev X\n                 md m\n             \"#]],\n         );\n@@ -238,4 +235,27 @@ fn outer() {\n             \"#]],\n         )\n     }\n+\n+    #[test]\n+    fn only_shows_ident_completion() {\n+        check_edit(\n+            \"Foo\",\n+            r#\"\n+struct Foo(i32);\n+fn main() {\n+    match Foo(92) {\n+        <|>(92) => (),\n+    }\n+}\n+\"#,\n+            r#\"\n+struct Foo(i32);\n+fn main() {\n+    match Foo(92) {\n+        Foo(92) => (),\n+    }\n+}\n+\"#,\n+        );\n+    }\n }"}, {"sha": "1ba7201a1385a0beac26cf090cce581354b4cf8e", "filename": "crates/completion/src/render.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83121efcd577124a992dc8bd304690b36bda2931/crates%2Fcompletion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83121efcd577124a992dc8bd304690b36bda2931/crates%2Fcompletion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender.rs?ref=83121efcd577124a992dc8bd304690b36bda2931", "patch": "@@ -160,6 +160,12 @@ impl<'a> Render<'a> {\n                 let item = render_fn(self.ctx, import_to_add, Some(local_name), *func);\n                 return Some(item);\n             }\n+            ScopeDef::ModuleDef(Variant(_))\n+                if self.ctx.completion.is_pat_binding_or_const\n+                    | self.ctx.completion.is_irrefutable_pat_binding =>\n+            {\n+                CompletionItemKind::EnumVariant\n+            }\n             ScopeDef::ModuleDef(Variant(var)) => {\n                 let item = render_variant(self.ctx, import_to_add, Some(local_name), *var, None);\n                 return Some(item);"}, {"sha": "d053a988bc894e0d65c033ec87c4ed939906ba47", "filename": "crates/completion/src/render/builder_ext.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/83121efcd577124a992dc8bd304690b36bda2931/crates%2Fcompletion%2Fsrc%2Frender%2Fbuilder_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83121efcd577124a992dc8bd304690b36bda2931/crates%2Fcompletion%2Fsrc%2Frender%2Fbuilder_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fbuilder_ext.rs?ref=83121efcd577124a992dc8bd304690b36bda2931", "patch": "@@ -34,7 +34,6 @@ impl Builder {\n             return false;\n         }\n         if ctx.is_pattern_call {\n-            mark::hit!(dont_duplicate_pattern_parens);\n             return false;\n         }\n         if ctx.is_call {"}, {"sha": "732e139eca25e68d19b279591221565d5c397589", "filename": "crates/completion/src/render/enum_variant.rs", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/83121efcd577124a992dc8bd304690b36bda2931/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83121efcd577124a992dc8bd304690b36bda2931/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs?ref=83121efcd577124a992dc8bd304690b36bda2931", "patch": "@@ -124,51 +124,6 @@ use Option::*;\n fn main() -> Option<i32> {\n     Some($0)\n }\n-\"#,\n-        );\n-        check_edit(\n-            \"Some\",\n-            r#\"\n-enum Option<T> { Some(T), None }\n-use Option::*;\n-fn main(value: Option<i32>) {\n-    match value {\n-        Som<|>\n-    }\n-}\n-\"#,\n-            r#\"\n-enum Option<T> { Some(T), None }\n-use Option::*;\n-fn main(value: Option<i32>) {\n-    match value {\n-        Some($0)\n-    }\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn dont_duplicate_pattern_parens() {\n-        mark::check!(dont_duplicate_pattern_parens);\n-        check_edit(\n-            \"Var\",\n-            r#\"\n-enum E { Var(i32) }\n-fn main() {\n-    match E::Var(92) {\n-        E::<|>(92) => (),\n-    }\n-}\n-\"#,\n-            r#\"\n-enum E { Var(i32) }\n-fn main() {\n-    match E::Var(92) {\n-        E::Var(92) => (),\n-    }\n-}\n \"#,\n         );\n     }"}, {"sha": "a3b6a3cac7ab45163d1ca38e2c1a213ae53f37b9", "filename": "crates/completion/src/render/pattern.rs", "status": "modified", "additions": 41, "deletions": 39, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/83121efcd577124a992dc8bd304690b36bda2931/crates%2Fcompletion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83121efcd577124a992dc8bd304690b36bda2931/crates%2Fcompletion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fpattern.rs?ref=83121efcd577124a992dc8bd304690b36bda2931", "patch": "@@ -8,42 +8,43 @@ use crate::{\n     CompletionItemKind,\n };\n \n+fn visible_fields(\n+    ctx: &RenderContext<'_>,\n+    fields: &[hir::Field],\n+    item: impl HasAttrs,\n+) -> Option<(Vec<hir::Field>, bool)> {\n+    let module = ctx.completion.scope.module()?;\n+    let n_fields = fields.len();\n+    let fields = fields\n+        .into_iter()\n+        .filter(|field| field.is_visible_from(ctx.db(), module))\n+        .copied()\n+        .collect::<Vec<_>>();\n+\n+    let fields_omitted =\n+        n_fields - fields.len() > 0 || item.attrs(ctx.db()).by_key(\"non_exhaustive\").exists();\n+    Some((fields, fields_omitted))\n+}\n+\n pub(crate) fn render_struct_pat(\n     ctx: RenderContext<'_>,\n     strukt: hir::Struct,\n     local_name: Option<Name>,\n ) -> Option<CompletionItem> {\n     let _p = profile::span(\"render_struct_pat\");\n \n-    let module = ctx.completion.scope.module()?;\n     let fields = strukt.fields(ctx.db());\n-    let n_fields = fields.len();\n-    let fields = fields\n-        .into_iter()\n-        .filter(|field| field.is_visible_from(ctx.db(), module))\n-        .collect::<Vec<_>>();\n+    let (visible_fields, fields_omitted) = visible_fields(&ctx, &fields, strukt)?;\n \n-    if fields.is_empty() {\n+    if visible_fields.is_empty() {\n         // Matching a struct without matching its fields is pointless, unlike matching a Variant without its fields\n         return None;\n     }\n-    let fields_omitted =\n-        n_fields - fields.len() > 0 || strukt.attrs(ctx.db()).by_key(\"non_exhaustive\").exists();\n \n     let name = local_name.unwrap_or_else(|| strukt.name(ctx.db())).to_string();\n-    let pat = render_pat(&ctx, &name, strukt.kind(ctx.db()), &fields, fields_omitted)?;\n+    let pat = render_pat(&ctx, &name, strukt.kind(ctx.db()), &visible_fields, fields_omitted)?;\n \n-    let mut completion = CompletionItem::new(CompletionKind::Snippet, ctx.source_range(), name)\n-        .kind(CompletionItemKind::Binding)\n-        .set_documentation(ctx.docs(strukt))\n-        .set_deprecated(ctx.is_deprecated(strukt))\n-        .detail(&pat);\n-    if let Some(snippet_cap) = ctx.snippet_cap() {\n-        completion = completion.insert_snippet(snippet_cap, pat);\n-    } else {\n-        completion = completion.insert_text(pat);\n-    }\n-    Some(completion.build())\n+    Some(build_completion(ctx, name, pat, strukt))\n }\n \n pub(crate) fn render_variant_pat(\n@@ -53,31 +54,32 @@ pub(crate) fn render_variant_pat(\n ) -> Option<CompletionItem> {\n     let _p = profile::span(\"render_variant_pat\");\n \n-    let module = ctx.completion.scope.module()?;\n     let fields = variant.fields(ctx.db());\n-    let n_fields = fields.len();\n-    let fields = fields\n-        .into_iter()\n-        .filter(|field| field.is_visible_from(ctx.db(), module))\n-        .collect::<Vec<_>>();\n-\n-    let fields_omitted =\n-        n_fields - fields.len() > 0 || variant.attrs(ctx.db()).by_key(\"non_exhaustive\").exists();\n+    let (visible_fields, fields_omitted) = visible_fields(&ctx, &fields, variant)?;\n \n     let name = local_name.unwrap_or_else(|| variant.name(ctx.db())).to_string();\n-    let pat = render_pat(&ctx, &name, variant.kind(ctx.db()), &fields, fields_omitted)?;\n+    let pat = render_pat(&ctx, &name, variant.kind(ctx.db()), &visible_fields, fields_omitted)?;\n \n-    let mut completion = CompletionItem::new(CompletionKind::Snippet, ctx.source_range(), name)\n+    Some(build_completion(ctx, name, pat, variant))\n+}\n+\n+fn build_completion(\n+    ctx: RenderContext<'_>,\n+    name: String,\n+    pat: String,\n+    item: impl HasAttrs + Copy,\n+) -> CompletionItem {\n+    let completion = CompletionItem::new(CompletionKind::Snippet, ctx.source_range(), name)\n         .kind(CompletionItemKind::Binding)\n-        .set_documentation(ctx.docs(variant))\n-        .set_deprecated(ctx.is_deprecated(variant))\n+        .set_documentation(ctx.docs(item))\n+        .set_deprecated(ctx.is_deprecated(item))\n         .detail(&pat);\n-    if let Some(snippet_cap) = ctx.snippet_cap() {\n-        completion = completion.insert_snippet(snippet_cap, pat);\n+    let completion = if let Some(snippet_cap) = ctx.snippet_cap() {\n+        completion.insert_snippet(snippet_cap, pat)\n     } else {\n-        completion = completion.insert_text(pat);\n-    }\n-    Some(completion.build())\n+        completion.insert_text(pat)\n+    };\n+    completion.build()\n }\n \n fn render_pat("}]}