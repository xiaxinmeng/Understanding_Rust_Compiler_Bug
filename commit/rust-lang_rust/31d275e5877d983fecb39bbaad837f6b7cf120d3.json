{"sha": "31d275e5877d983fecb39bbaad837f6b7cf120d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZDI3NWU1ODc3ZDk4M2ZlY2IzOWJiYWFkODM3ZjZiN2NmMTIwZDM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-09-27T22:18:09Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-10-09T18:25:44Z"}, "message": "Correctly handle \"pub use\" reexports", "tree": {"sha": "88b79ccd983dcdb7ca4a2a3c555f77af921d2e19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88b79ccd983dcdb7ca4a2a3c555f77af921d2e19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31d275e5877d983fecb39bbaad837f6b7cf120d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31d275e5877d983fecb39bbaad837f6b7cf120d3", "html_url": "https://github.com/rust-lang/rust/commit/31d275e5877d983fecb39bbaad837f6b7cf120d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31d275e5877d983fecb39bbaad837f6b7cf120d3/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c0d576c59e9429157449e617ec5607373afc642", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c0d576c59e9429157449e617ec5607373afc642", "html_url": "https://github.com/rust-lang/rust/commit/7c0d576c59e9429157449e617ec5607373afc642"}], "stats": {"total": 45, "additions": 32, "deletions": 13}, "files": [{"sha": "17f9411fca8a6f5591faad5e18cd27b3a1260a95", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d275e5877d983fecb39bbaad837f6b7cf120d3/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d275e5877d983fecb39bbaad837f6b7cf120d3/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=31d275e5877d983fecb39bbaad837f6b7cf120d3", "patch": "@@ -514,6 +514,7 @@ fn build_module(cx: &DocContext<'_>, did: DefId, visited: &mut FxHashSet<DefId>)\n                                 },\n                                 did: None,\n                             },\n+                            false,\n                         )),\n                     });\n                 } else if let Some(i) ="}, {"sha": "daa9f1df6493753b1a9a9e5f4216af4208d7fd70", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/31d275e5877d983fecb39bbaad837f6b7cf120d3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d275e5877d983fecb39bbaad837f6b7cf120d3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=31d275e5877d983fecb39bbaad837f6b7cf120d3", "patch": "@@ -2269,12 +2269,12 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n                         visibility: self.vis.clean(cx),\n                         stability: None,\n                         deprecation: None,\n-                        inner: ImportItem(Import::Glob(resolve_use_source(cx, path))),\n+                        inner: ImportItem(Import::Glob(resolve_use_source(cx, path), false)),\n                     });\n                     return items;\n                 }\n             }\n-            Import::Glob(resolve_use_source(cx, path))\n+            Import::Glob(resolve_use_source(cx, path), true)\n         } else {\n             let name = self.name;\n             if !please_inline {\n@@ -2297,6 +2297,9 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n                     Some(self.attrs),\n                     &mut visited,\n                 ) {\n+                    // In case this is a macro, we don't want to show the reexport, only the macro\n+                    // itself.\n+                    let is_macro = matches!(path.res, Res::Def(DefKind::Macro(_), _));\n                     items.push(Item {\n                         name: None,\n                         attrs: self.attrs.clean(cx),\n@@ -2308,12 +2311,13 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n                         inner: ImportItem(Import::Simple(\n                             self.name.clean(cx),\n                             resolve_use_source(cx, path),\n+                            is_macro,\n                         )),\n                     });\n                     return items;\n                 }\n             }\n-            Import::Simple(name.clean(cx), resolve_use_source(cx, path))\n+            Import::Simple(name.clean(cx), resolve_use_source(cx, path), false)\n         };\n \n         vec![Item {"}, {"sha": "8b14b3e5de24d7f54849642a0b4a6c747a275887", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/31d275e5877d983fecb39bbaad837f6b7cf120d3/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d275e5877d983fecb39bbaad837f6b7cf120d3/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=31d275e5877d983fecb39bbaad837f6b7cf120d3", "patch": "@@ -1655,9 +1655,20 @@ pub struct Impl {\n #[derive(Clone, Debug)]\n pub enum Import {\n     // use source as str;\n-    Simple(String, ImportSource),\n+    // The bool indicates wether it imports a macro or not.\n+    Simple(String, ImportSource, bool),\n     // use source::*;\n-    Glob(ImportSource),\n+    // The bool indicates wether this is from an import.\n+    Glob(ImportSource, bool),\n+}\n+\n+impl Import {\n+    pub fn should_be_displayed(&self) -> bool {\n+        match *self {\n+            Self::Simple(_, _, is_macro) => !is_macro,\n+            Self::Glob(_, is_from_import) => is_from_import,\n+        }\n+    }\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "ee217d99d2c77992ae3d0ae69d9093afdbc1add5", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d275e5877d983fecb39bbaad837f6b7cf120d3/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d275e5877d983fecb39bbaad837f6b7cf120d3/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=31d275e5877d983fecb39bbaad837f6b7cf120d3", "patch": "@@ -245,6 +245,7 @@ pub struct ExternCrate<'hir> {\n     pub span: Span,\n }\n \n+#[derive(Debug)]\n pub struct Import<'hir> {\n     pub name: Symbol,\n     pub id: hir::HirId,"}, {"sha": "ece0c247fb5e29bf94b22695fe8486e1a39afb2d", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31d275e5877d983fecb39bbaad837f6b7cf120d3/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d275e5877d983fecb39bbaad837f6b7cf120d3/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=31d275e5877d983fecb39bbaad837f6b7cf120d3", "patch": "@@ -1150,14 +1150,14 @@ impl PrintWithSpace for hir::Mutability {\n impl clean::Import {\n     crate fn print(&self) -> impl fmt::Display + '_ {\n         display_fn(move |f| match *self {\n-            clean::Import::Simple(ref name, ref src) => {\n+            clean::Import::Simple(ref name, ref src, _) => {\n                 if *name == src.path.last_name() {\n                     write!(f, \"use {};\", src.print())\n                 } else {\n                     write!(f, \"use {} as {};\", src.print(), *name)\n                 }\n             }\n-            clean::Import::Glob(ref src) => {\n+            clean::Import::Glob(ref src, _) => {\n                 if src.path.segments.is_empty() {\n                     write!(f, \"use *;\")\n                 } else {"}, {"sha": "a74e768f980d3f09e9ee9f96c572cc0adc88593e", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/31d275e5877d983fecb39bbaad837f6b7cf120d3/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d275e5877d983fecb39bbaad837f6b7cf120d3/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=31d275e5877d983fecb39bbaad837f6b7cf120d3", "patch": "@@ -2074,12 +2074,14 @@ fn item_module(w: &mut Buffer, cx: &Context, item: &clean::Item, items: &[clean:\n             }\n \n             clean::ImportItem(ref import) => {\n-                write!(\n-                    w,\n-                    \"<tr><td><code>{}{}</code></td></tr>\",\n-                    myitem.visibility.print_with_space(),\n-                    import.print()\n-                );\n+                if import.should_be_displayed() {\n+                    write!(\n+                        w,\n+                        \"<tr><td><code>{}{}</code></td></tr>\",\n+                        myitem.visibility.print_with_space(),\n+                        import.print()\n+                    );\n+                }\n             }\n \n             _ => {"}]}