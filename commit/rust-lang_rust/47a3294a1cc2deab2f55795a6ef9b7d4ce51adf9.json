{"sha": "47a3294a1cc2deab2f55795a6ef9b7d4ce51adf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3YTMyOTRhMWNjMmRlYWIyZjU1Nzk1YTZlZjliN2Q0Y2U1MWFkZjk=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-11-11T11:53:31Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-11-21T20:54:55Z"}, "message": "Readjust constant evaluation for operands", "tree": {"sha": "946c40c7751c1a3926ed2411e8d2b0c64e7645b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/946c40c7751c1a3926ed2411e8d2b0c64e7645b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47a3294a1cc2deab2f55795a6ef9b7d4ce51adf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47a3294a1cc2deab2f55795a6ef9b7d4ce51adf9", "html_url": "https://github.com/rust-lang/rust/commit/47a3294a1cc2deab2f55795a6ef9b7d4ce51adf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47a3294a1cc2deab2f55795a6ef9b7d4ce51adf9/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36006955e7c8e120f7ae9651ae23a3cd98a715e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/36006955e7c8e120f7ae9651ae23a3cd98a715e8", "html_url": "https://github.com/rust-lang/rust/commit/36006955e7c8e120f7ae9651ae23a3cd98a715e8"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "41d2baaab80353be5ae4bb0609c2933c3cf6ed67", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/47a3294a1cc2deab2f55795a6ef9b7d4ce51adf9/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47a3294a1cc2deab2f55795a6ef9b7d4ce51adf9/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=47a3294a1cc2deab2f55795a6ef9b7d4ce51adf9", "patch": "@@ -5,10 +5,33 @@ use rustc::ty::{self, Ty};\n use rustc::ty::layout::{self, HasTyCtxt};\n use syntax::source_map::Span;\n use crate::traits::*;\n+use crate::mir::operand::OperandRef;\n \n use super::FunctionCx;\n \n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n+    pub fn eval_mir_constant_to_operand(\n+        &mut self,\n+        bx: &mut Bx,\n+        constant: &mir::Constant<'tcx>,\n+    ) -> Result<OperandRef<'tcx, Bx::Value>, ErrorHandled> {\n+        match constant.literal.val {\n+            mir::interpret::ConstValue::Unevaluated(def_id, substs)\n+                if self.cx.tcx().is_static(def_id) => {\n+                    assert!(substs.is_empty(), \"we don't support generic statics yet\");\n+                    let static_ = bx.get_static(def_id);\n+                    // we treat operands referring to statics as if they were `&STATIC` instead\n+                    let ptr_ty = self.cx.tcx().mk_mut_ptr(self.monomorphize(&constant.literal.ty));\n+                    let layout = bx.layout_of(ptr_ty);\n+                    Ok(OperandRef::from_immediate_or_packed_pair(bx, static_, layout))\n+                }\n+            _ => {\n+                let val = self.eval_mir_constant(constant)?;\n+                Ok(OperandRef::from_const(bx, val))\n+            }\n+        }\n+    }\n+\n     pub fn eval_mir_constant(\n         &mut self,\n         constant: &mir::Constant<'tcx>,"}, {"sha": "de0edf82d1793a40cdf25c441aeb6e29e2d3ec8a", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/47a3294a1cc2deab2f55795a6ef9b7d4ce51adf9/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47a3294a1cc2deab2f55795a6ef9b7d4ce51adf9/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=47a3294a1cc2deab2f55795a6ef9b7d4ce51adf9", "patch": "@@ -465,8 +465,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n \n             mir::Operand::Constant(ref constant) => {\n-                self.eval_mir_constant(constant)\n-                    .map(|c| OperandRef::from_const(bx, c))\n+                self.eval_mir_constant_to_operand(bx, constant)\n                     .unwrap_or_else(|err| {\n                         match err {\n                             // errored or at least linted"}]}