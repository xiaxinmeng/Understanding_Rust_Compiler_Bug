{"sha": "bcb1c381a38f8f36a71323bbf12d55afc8627d90", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjYjFjMzgxYTM4ZjhmMzZhNzEzMjNiYmYxMmQ1NWFmYzg2MjdkOTA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-07T06:33:37Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-08T07:51:38Z"}, "message": "stdtest: Fix all leaked trait imports", "tree": {"sha": "845fbeceb532354888cb7b3cad9c184e249afc9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/845fbeceb532354888cb7b3cad9c184e249afc9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcb1c381a38f8f36a71323bbf12d55afc8627d90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcb1c381a38f8f36a71323bbf12d55afc8627d90", "html_url": "https://github.com/rust-lang/rust/commit/bcb1c381a38f8f36a71323bbf12d55afc8627d90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcb1c381a38f8f36a71323bbf12d55afc8627d90/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4d36b85a0181575319168ab080989c71b935b20", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4d36b85a0181575319168ab080989c71b935b20", "html_url": "https://github.com/rust-lang/rust/commit/c4d36b85a0181575319168ab080989c71b935b20"}], "stats": {"total": 164, "additions": 65, "deletions": 99}, "files": [{"sha": "c52ff2d088d13a767a470b043b4ccdffe1b315b6", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -478,10 +478,10 @@ static ASCII_UPPER_MAP: &'static [u8] = &[\n \n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use super::*;\n     use str::from_char;\n     use char::from_u32;\n-    use option::{Some, None};\n \n     macro_rules! v2ascii (\n         ( [$($e:expr),*]) => ( [$(Ascii{chr:$e}),*]);"}, {"sha": "a20ddc141479f456294c30d1a961c5d7cc5f9207", "filename": "src/libstd/bool.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbool.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -317,10 +317,7 @@ impl Zero for bool {\n \n #[cfg(test)]\n mod tests {\n-    use cmp::{Equal, Greater, Less, Eq, TotalOrd};\n-    use ops::{BitAnd, BitXor, BitOr};\n-    use from_str::{FromStr, from_str};\n-    use option::{Some, None};\n+    use prelude::*;\n     use super::all_values;\n \n     #[test]"}, {"sha": "b924378a0e720ccd369a18932c563a3fa5968b67", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -377,10 +377,10 @@ pub unsafe fn from_c_multistring(buf: *libc::c_char,\n \n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use super::*;\n     use libc;\n     use ptr;\n-    use option::{Some, None};\n \n     #[test]\n     fn test_str_multistring_parsing() {\n@@ -568,11 +568,10 @@ mod tests {\n \n #[cfg(test)]\n mod bench {\n-    use iter::range;\n+    use extra::test::BenchHarness;\n     use libc;\n-    use option::Some;\n+    use prelude::*;\n     use ptr;\n-    use extra::test::BenchHarness;\n \n     #[inline]\n     fn check(s: &str, c_str: *libc::c_char) {"}, {"sha": "df7111ca5109224a905ac81712d1f6e6549272e5", "filename": "src/libstd/gc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgc.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -54,6 +54,7 @@ impl<T: DeepClone + Send + 'static> DeepClone for Gc<T> {\n \n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use super::*;\n     use cell::RefCell;\n "}, {"sha": "fa85f286af7ffa0775c1f68205019eb3c3d7c9f3", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -318,9 +318,10 @@ impl<S: Stream> Decorator<S> for BufferedStream<S> {\n \n #[cfg(test)]\n mod test {\n+    use io::Decorator;\n+    use io;\n     use prelude::*;\n     use super::*;\n-    use io;\n     use super::super::mem::{MemReader, MemWriter};\n     use Harness = extra::test::BenchHarness;\n "}, {"sha": "860ff64401870f7036cc256a2b630c8f28880e9c", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -131,10 +131,11 @@ pub fn u64_from_be_bytes(data: &[u8],\n \n #[cfg(test)]\n mod test {\n-    use option::{None, Option, Some};\n+    use unstable::finally::Finally;\n+    use io::Decorator;\n+    use prelude::*;\n     use io::mem::{MemReader, MemWriter};\n-    use io::{Reader, io_error, placeholder_error};\n-    use vec::ImmutableVector;\n+    use io::{io_error, placeholder_error};\n \n     struct InitialZeroByteReader {\n         count: int,\n@@ -376,7 +377,7 @@ mod test {\n     fn push_bytes_fail_reset_len() {\n         // push_bytes unsafely sets the vector length. This is testing that\n         // upon failure the length is reset correctly.\n-        let mut reader = ErroringLaterReader {\n+        let reader = ErroringLaterReader {\n             count: 0,\n         };\n         // FIXME (#7049): Figure out some other way to do this."}, {"sha": "fe29a112262283596d6cca7bacc69a9e15f50f57", "filename": "src/libstd/io/net/addrinfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -100,8 +100,8 @@ fn lookup(hostname: Option<&str>, servname: Option<&str>, hint: Option<Hint>)\n \n #[cfg(test)]\n mod test {\n-    use option::Some;\n     use io::net::ip::Ipv4Addr;\n+    use prelude::*;\n     use super::*;\n \n     #[test]"}, {"sha": "4fb631eb3d64667e0cfc2bfe9dc20192f9f1011f", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -337,9 +337,8 @@ impl FromStr for SocketAddr {\n \n #[cfg(test)]\n mod test {\n+    use prelude::*;\n     use super::*;\n-    use from_str::FromStr;\n-    use option::{Option, Some, None};\n \n     #[test]\n     fn test_from_str_ipv4() {"}, {"sha": "eaee48dc6e0f345d80253534ad620cf661a63bf9", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -100,8 +100,6 @@ impl Writer for UdpStream {\n mod test {\n     use super::*;\n     use io::net::ip::{SocketAddr};\n-    use io::*;\n-    use prelude::*;\n \n     iotest!(fn bind_error() {\n         let mut called = false;"}, {"sha": "60e63e95dcc606ccc88c269344f3e13892b904bc", "filename": "src/libstd/io/option.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fio%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fio%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Foption.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -104,8 +104,9 @@ impl<T, A: Acceptor<T>> Acceptor<T> for Option<A> {\n \n #[cfg(test)]\n mod test {\n-    use option::*;\n+    use prelude::*;\n     use super::super::mem::*;\n+    use io::Decorator;\n     use super::super::{PreviousIoError, io_error};\n \n     #[test]"}, {"sha": "86538c37249ed325e63bc7490207f567136e0a3f", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -193,6 +193,7 @@ pub fn copy<R: Reader, W: Writer>(r: &mut R, w: &mut W) {\n \n #[cfg(test)]\n mod test {\n+    use io::Decorator;\n     use io::mem::{MemReader, MemWriter};\n     use super::*;\n     use prelude::*;"}, {"sha": "f49244a3607ef8ffdb025d39c040b2419c773159", "filename": "src/libstd/option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -457,6 +457,7 @@ pub fn collect<T, Iter: Iterator<Option<T>>, V: FromIterator<T>>(iter: Iter) ->\n #[cfg(test)]\n mod tests {\n     use super::*;\n+    use prelude::*;\n \n     use iter::range;\n     use str::StrSlice;"}, {"sha": "4042e13a592d3f67667bd18f20a577165b81c968", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -1239,16 +1239,14 @@ pub mod consts {\n \n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use c_str::ToCStr;\n-    use option::Some;\n     use option;\n     use os::{env, getcwd, getenv, make_absolute, args};\n     use os::{setenv, unsetenv};\n     use os;\n-    use path::Path;\n     use rand::Rng;\n     use rand;\n-    use str::StrSlice;\n \n \n     #[test]"}, {"sha": "354cc10f022a67adddb4adcebf0c9ce4577b8482", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -687,6 +687,7 @@ fn from_utf8_with_replacement(mut v: &[u8]) -> ~str {\n }\n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use super::{GenericPath, PosixPath, WindowsPath};\n     use c_str::ToCStr;\n "}, {"sha": "7b94de6c094d6d6a681ff0a9305adc4f07ae8e6b", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -442,11 +442,9 @@ static dot_dot_static: &'static [u8] = bytes!(\"..\");\n \n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use super::*;\n-    use option::{Option, Some, None};\n-    use iter::Iterator;\n     use str;\n-    use vec::Vector;\n \n     macro_rules! t(\n         (s: $path:expr, $exp:expr) => (\n@@ -1325,6 +1323,7 @@ mod tests {\n mod bench {\n     use extra::test::BenchHarness;\n     use super::*;\n+    use prelude::*;\n \n     #[bench]\n     fn join_home_dir(bh: &mut BenchHarness) {"}, {"sha": "09b00be7e9d61dfd52c6a220f0d7b7f49534ac9e", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -1053,11 +1053,9 @@ fn prefix_len(p: Option<PathPrefix>) -> uint {\n \n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use super::*;\n     use super::parse_prefix;\n-    use option::{Some,None};\n-    use iter::Iterator;\n-    use vec::Vector;\n \n     macro_rules! t(\n         (s: $path:expr, $exp:expr) => ("}, {"sha": "336528eeb258bbcebd57dabe830ac5673f677e9d", "filename": "src/libstd/rand/distributions/exponential.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Frand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Frand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fexponential.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -91,10 +91,10 @@ impl IndependentSample<f64> for Exp {\n \n #[cfg(test)]\n mod test {\n+    use rand::distributions::*;\n+    use prelude::*;\n     use rand::*;\n     use super::*;\n-    use iter::range;\n-    use option::{Some, None};\n \n     #[test]\n     fn test_exp() {\n@@ -120,11 +120,11 @@ mod test {\n #[cfg(test)]\n mod bench {\n     use extra::test::BenchHarness;\n+    use mem::size_of;\n+    use prelude::*;\n     use rand::{XorShiftRng, RAND_BENCH_N};\n     use super::*;\n-    use iter::range;\n-    use option::{Some, None};\n-    use mem::size_of;\n+    use rand::distributions::*;\n \n     #[bench]\n     fn rand_exp(bh: &mut BenchHarness) {"}, {"sha": "96efa948015ba35e608b370c2f11b8caccbeea52", "filename": "src/libstd/rand/distributions/gamma.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -310,10 +310,10 @@ impl IndependentSample<f64> for StudentT {\n \n #[cfg(test)]\n mod test {\n+    use rand::distributions::*;\n+    use prelude::*;\n     use rand::*;\n     use super::*;\n-    use iter::range;\n-    use option::{Some, None};\n \n     #[test]\n     fn test_chi_squared_one() {\n@@ -371,13 +371,12 @@ mod test {\n \n #[cfg(test)]\n mod bench {\n-    use super::*;\n+    use extra::test::BenchHarness;\n     use mem::size_of;\n+    use prelude::*;\n     use rand::distributions::IndependentSample;\n     use rand::{StdRng, RAND_BENCH_N};\n-    use extra::test::BenchHarness;\n-    use iter::range;\n-    use option::{Some, None};\n+    use super::*;\n \n \n     #[bench]"}, {"sha": "a996233abe3dc7ee1eae44d32af85c0f035e745c", "filename": "src/libstd/rand/distributions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -253,9 +253,9 @@ fn ziggurat<R:Rng>(\n \n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use rand::*;\n     use super::*;\n-    use option::{Some, None};\n \n     #[deriving(Eq)]\n     struct ConstRand(uint);"}, {"sha": "7a15091df9d7d3595a5ac584f9c3afc9159ba572", "filename": "src/libstd/rand/distributions/normal.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -148,10 +148,10 @@ impl IndependentSample<f64> for LogNormal {\n \n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use rand::*;\n     use super::*;\n-    use iter::range;\n-    use option::{Some, None};\n+    use rand::distributions::*;\n \n     #[test]\n     fn test_normal() {\n@@ -188,11 +188,11 @@ mod tests {\n #[cfg(test)]\n mod bench {\n     use extra::test::BenchHarness;\n+    use mem::size_of;\n+    use prelude::*;\n     use rand::{XorShiftRng, RAND_BENCH_N};\n+    use rand::distributions::*;\n     use super::*;\n-    use iter::range;\n-    use option::{Some, None};\n-    use mem::size_of;\n \n     #[bench]\n     fn rand_normal(bh: &mut BenchHarness) {"}, {"sha": "8141b3d3e896f6d400791ac4191d332921c4c0c3", "filename": "src/libstd/rand/distributions/range.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Frand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Frand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Frange.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -163,12 +163,11 @@ float_impl! { f64 }\n \n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use super::*;\n     use rand::*;\n+    use rand::distributions::*;\n     use num::Bounded;\n-    use iter::range;\n-    use option::{Some, None};\n-    use vec::ImmutableVector;\n \n     #[should_fail]\n     #[test]"}, {"sha": "6fd2cde9dfbc6ae77f738bd9490a9e28517e85b8", "filename": "src/libstd/rand/isaac.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Frand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Frand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fisaac.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -433,8 +433,7 @@ impl<'a> SeedableRng<&'a [u64]> for Isaac64Rng {\n mod test {\n     use super::*;\n     use rand::{Rng, SeedableRng, OSRng};\n-    use option::Some;\n-    use iter::range;\n+    use prelude::*;\n     use vec;\n \n     #[test]"}, {"sha": "e52a38500112f19faad192ac2b78420a5fc33ca5", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -656,8 +656,7 @@ pub struct Closed01<F>(F);\n \n #[cfg(test)]\n mod test {\n-    use iter::{Iterator, range};\n-    use option::{Option, Some};\n+    use prelude::*;\n     use vec;\n     use super::*;\n \n@@ -845,11 +844,10 @@ static RAND_BENCH_N: u64 = 100;\n \n #[cfg(test)]\n mod bench {\n+    use prelude::*;\n     use extra::test::BenchHarness;\n     use rand::{XorShiftRng, StdRng, IsaacRng, Isaac64Rng, Rng, RAND_BENCH_N};\n     use mem::size_of;\n-    use iter::range;\n-    use option::{Some, None};\n \n     #[bench]\n     fn rand_xorshift(bh: &mut BenchHarness) {"}, {"sha": "1c90ef148fc08c17b918ab7f7f5f157fd4423d7c", "filename": "src/libstd/rand/rand_impls.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Frand%2Frand_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Frand%2Frand_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Frand_impls.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -226,9 +226,8 @@ impl<T: Rand + 'static> Rand for @T {\n \n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use rand::{Rng, task_rng, Open01, Closed01};\n-    use iter::range;\n-    use option::{None, Some};\n \n     struct ConstantRng(u64);\n     impl Rng for ConstantRng {"}, {"sha": "7af98e418a811f2827b33d569c0cc4c8f6a2c460", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -78,6 +78,8 @@ mod test {\n     use super::*;\n     use io::mem::MemReader;\n     use cast;\n+    use rand::*;\n+    use prelude::*;\n \n     #[test]\n     fn test_reader_rng_u64() {"}, {"sha": "c0a7d14bf70bfa23c07dbdd4174a1306afb57068", "filename": "src/libstd/rand/reseeding.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Frand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Frand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freseeding.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -142,11 +142,9 @@ impl Default for ReseedWithDefault {\n \n #[cfg(test)]\n mod test {\n+    use prelude::*;\n     use super::*;\n     use rand::{SeedableRng, Rng};\n-    use default::Default;\n-    use iter::range;\n-    use option::{None, Some};\n \n     struct Counter {\n         i: u32"}, {"sha": "ad2305c241017c21d2ea82f5fb1444c2f74a6c4b", "filename": "src/libstd/rc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -170,6 +170,7 @@ impl<T> Drop for Rc<T> {\n \n #[cfg(test)]\n mod test_rc {\n+    use prelude::*;\n     use super::*;\n     use cell::RefCell;\n "}, {"sha": "1a4e6d5bcfde95f4ea3b0b5d214d4f65119dfba2", "filename": "src/libstd/result.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -293,10 +293,9 @@ pub fn fold_<T,E,Iter:Iterator<Result<T,E>>>(iterator: Iter) -> Result<(),E> {\n #[cfg(test)]\n mod tests {\n     use super::*;\n+    use prelude::*;\n \n     use iter::range;\n-    use to_str::ToStr;\n-    use vec::ImmutableVector;\n \n     pub fn op1() -> Result<int, ~str> { Ok(666) }\n     pub fn op2() -> Result<int, ~str> { Err(~\"sadface\") }"}, {"sha": "3a07e8c373b754a035f3a136c215c0d5de34b44d", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -77,6 +77,7 @@ mod libunwind {\n     //! Unwind library interface\n \n     #[allow(non_camel_case_types)];\n+    #[allow(dead_code)] // these are just bindings\n \n     use libc::{uintptr_t, uint64_t};\n \n@@ -262,7 +263,8 @@ fn rust_exception_class() -> uw::_Unwind_Exception_Class {\n //   This is achieved by overriding the return value in search phase to always\n //   say \"catch!\".\n \n-#[cfg(not(target_arch = \"arm\"))]\n+#[cfg(not(target_arch = \"arm\"), not(test))]\n+#[doc(hidden)]\n pub mod eabi {\n     use uw = super::libunwind;\n     use libc::c_int;\n@@ -278,8 +280,6 @@ pub mod eabi {\n \n     #[lang=\"eh_personality\"]\n     #[no_mangle] // so we can reference it by name from middle/trans/base.rs\n-    #[doc(hidden)]\n-    #[cfg(not(test))]\n     pub extern \"C\" fn rust_eh_personality(\n         version: c_int,\n         actions: uw::_Unwind_Action,\n@@ -295,8 +295,6 @@ pub mod eabi {\n     }\n \n     #[no_mangle] // referenced from rust_try.ll\n-    #[doc(hidden)]\n-    #[cfg(not(test))]\n     pub extern \"C\" fn rust_eh_personality_catch(\n         version: c_int,\n         actions: uw::_Unwind_Action,\n@@ -319,7 +317,7 @@ pub mod eabi {\n \n // ARM EHABI uses a slightly different personality routine signature,\n // but otherwise works the same.\n-#[cfg(target_arch = \"arm\")]\n+#[cfg(target_arch = \"arm\", not(test))]\n pub mod eabi {\n     use uw = super::libunwind;\n     use libc::c_int;\n@@ -333,8 +331,6 @@ pub mod eabi {\n \n     #[lang=\"eh_personality\"]\n     #[no_mangle] // so we can reference it by name from middle/trans/base.rs\n-    #[doc(hidden)]\n-    #[cfg(not(test))]\n     pub extern \"C\" fn rust_eh_personality(\n         state: uw::_Unwind_State,\n         ue_header: *uw::_Unwind_Exception,\n@@ -347,8 +343,6 @@ pub mod eabi {\n     }\n \n     #[no_mangle] // referenced from rust_try.ll\n-    #[doc(hidden)]\n-    #[cfg(not(test))]\n     pub extern \"C\" fn rust_eh_personality_catch(\n         state: uw::_Unwind_State,\n         ue_header: *uw::_Unwind_Exception,"}, {"sha": "3595a7d45aca2e8f858088be8473ef8a5ce1ec73", "filename": "src/libstd/run.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -330,16 +330,15 @@ pub fn process_output(prog: &str, args: &[~str]) -> Option<ProcessOutput> {\n \n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use libc::c_int;\n-    use option::{Option, None, Some};\n     use os;\n-    use path::Path;\n     use run;\n     use str;\n     use task::spawn;\n     use unstable::running_on_valgrind;\n     use io::pipe::PipeStream;\n-    use io::{Writer, Reader, io_error, FileNotFound};\n+    use io::{io_error, FileNotFound};\n \n     #[test]\n     #[cfg(not(target_os=\"android\"))] // FIXME(#10380)"}, {"sha": "c8143442d6e37c735cafa8b27740893fd528d4ad", "filename": "src/libstd/send_str.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fsend_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fsend_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsend_str.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -176,14 +176,8 @@ impl IterBytes for SendStr {\n \n #[cfg(test)]\n mod tests {\n-    use clone::{Clone, DeepClone};\n-    use cmp::{TotalEq, Ord, TotalOrd, Equiv};\n-    use cmp::Equal;\n-    use container::Container;\n-    use default::Default;\n+    use prelude::*;\n     use send_str::{SendStrOwned, SendStrStatic};\n-    use str::Str;\n-    use to_str::ToStr;\n \n     #[test]\n     fn test_send_str_traits() {"}, {"sha": "35e188964c101c05cb98532dfc109366866e6c2c", "filename": "src/libstd/str.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -2768,14 +2768,11 @@ impl Default for @str {\n \n #[cfg(test)]\n mod tests {\n-    use container::Container;\n-    use option::{None, Some, Option};\n+    use iter::AdditiveIterator;\n+    use prelude::*;\n     use ptr;\n     use str::*;\n-    use vec::{Vector, ImmutableVector, CopyableVector};\n-    use cmp::{TotalOrd, Less, Equal, Greater};\n     use send_str::{SendStrOwned, SendStrStatic};\n-    use from_str::from_str;\n \n     #[test]\n     fn test_eq() {"}, {"sha": "d6cd690eaa9db9b567b7e369e86be653148f2cf9", "filename": "src/libstd/unstable/stack.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Funstable%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Funstable%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fstack.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -24,8 +24,6 @@\n //! detection is not guaranteed to continue in the future. Usage of this module\n //! is discouraged unless absolutely necessary.\n \n-use str::Str;\n-\n static RED_ZONE: uint = 20 * 1024;\n \n /// This function is invoked from rust's current __morestack function. Segmented"}, {"sha": "06c7923bfeda15c36d90668ed5a2e315a36be98c", "filename": "src/libstd/util.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Futil.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -78,10 +78,7 @@ impl Void {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-\n-    use clone::Clone;\n-    use ops::Drop;\n-    use option::{None, Some};\n+    use prelude::*;\n     use mem::size_of;\n \n     #[test]"}, {"sha": "632490d62adc63925478df5df08594089e305544", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1c381a38f8f36a71323bbf12d55afc8627d90/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=bcb1c381a38f8f36a71323bbf12d55afc8627d90", "patch": "@@ -2970,10 +2970,10 @@ impl<A> Extendable<A> for ~[A] {\n \n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use mem;\n     use vec::*;\n     use cmp::*;\n-    use prelude::*;\n     use rand::{Rng, task_rng};\n \n     fn square(n: uint) -> uint { n * n }\n@@ -4454,13 +4454,11 @@ mod tests {\n #[cfg(test)]\n mod bench {\n     use extra::test::BenchHarness;\n-    use iter::range;\n-    use vec;\n-    use vec::{VectorVector, MutableTotalOrdVector};\n-    use option::*;\n+    use mem;\n+    use prelude::*;\n     use ptr;\n     use rand::{weak_rng, Rng};\n-    use mem;\n+    use vec;\n \n     #[bench]\n     fn iterator(bh: &mut BenchHarness) {"}]}