{"sha": "e804a3cf256106c097d44f6e0212cd183122da07", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MDRhM2NmMjU2MTA2YzA5N2Q0NGY2ZTAyMTJjZDE4MzEyMmRhMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-04T10:01:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-04T10:01:37Z"}, "message": "Auto merge of #35168 - scottcarr:deaggregation, r=nikomatsakis\n\n[MIR] Deaggregate structs to enable further optimizations\n\nCurrently, we generate MIR like:\n\n```\ntmp0 = ...;\ntmp1 = ...;\ntmp3 = Foo { a: ..., b: ... };\n```\n\nThis PR implements \"deaggregation,\" i.e.:\n\n```\ntmp3.0 = ...\ntmp3.1 = ...\n```\n\nCurrently, the code only deaggregates structs, not enums.  My understanding is that we do not have MIR to set the discriminant of an enum.", "tree": {"sha": "ee0c23f123fdce8f175e348b79c92e5184bf1f7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee0c23f123fdce8f175e348b79c92e5184bf1f7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e804a3cf256106c097d44f6e0212cd183122da07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e804a3cf256106c097d44f6e0212cd183122da07", "html_url": "https://github.com/rust-lang/rust/commit/e804a3cf256106c097d44f6e0212cd183122da07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e804a3cf256106c097d44f6e0212cd183122da07/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "271d048523b6c1b0e773d9e5cc76bbb997cc180c", "url": "https://api.github.com/repos/rust-lang/rust/commits/271d048523b6c1b0e773d9e5cc76bbb997cc180c", "html_url": "https://github.com/rust-lang/rust/commit/271d048523b6c1b0e773d9e5cc76bbb997cc180c"}, {"sha": "06acf16cdb23dad19b9cf816a55df24d4084823c", "url": "https://api.github.com/repos/rust-lang/rust/commits/06acf16cdb23dad19b9cf816a55df24d4084823c", "html_url": "https://github.com/rust-lang/rust/commit/06acf16cdb23dad19b9cf816a55df24d4084823c"}], "stats": {"total": 162, "additions": 162, "deletions": 0}, "files": [{"sha": "f1f5e194da4d16538418838c23725cad0f45e392", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e804a3cf256106c097d44f6e0212cd183122da07/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e804a3cf256106c097d44f6e0212cd183122da07/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=e804a3cf256106c097d44f6e0212cd183122da07", "patch": "@@ -995,6 +995,8 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         passes.push_pass(box mir::transform::no_landing_pads::NoLandingPads);\n         passes.push_pass(box mir::transform::simplify_cfg::SimplifyCfg::new(\"elaborate-drops\"));\n \n+        passes.push_pass(box mir::transform::deaggregator::Deaggregator);\n+\n         passes.push_pass(box mir::transform::add_call_guards::AddCallGuards);\n         passes.push_pass(box mir::transform::dump_mir::Marker(\"PreTrans\"));\n "}, {"sha": "fccd4a607fdcf1cd2e9a520b7ee0efe7b2d5cecb", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/e804a3cf256106c097d44f6e0212cd183122da07/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e804a3cf256106c097d44f6e0212cd183122da07/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=e804a3cf256106c097d44f6e0212cd183122da07", "patch": "@@ -0,0 +1,116 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::ty::TyCtxt;\n+use rustc::mir::repr::*;\n+use rustc::mir::transform::{MirPass, MirSource, Pass};\n+use rustc_data_structures::indexed_vec::Idx;\n+use rustc::ty::VariantKind;\n+\n+pub struct Deaggregator;\n+\n+impl Pass for Deaggregator {}\n+\n+impl<'tcx> MirPass<'tcx> for Deaggregator {\n+    fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                    source: MirSource, mir: &mut Mir<'tcx>) {\n+        let node_id = source.item_id();\n+        let node_path = tcx.item_path_str(tcx.map.local_def_id(node_id));\n+        debug!(\"running on: {:?}\", node_path);\n+        // we only run when mir_opt_level > 1\n+        match tcx.sess.opts.debugging_opts.mir_opt_level {\n+            Some(0) |\n+            Some(1) |\n+            None => { return; },\n+            _ => {}\n+        };\n+\n+        // Do not trigger on constants.  Could be revised in future\n+        if let MirSource::Fn(_) = source {} else { return; }\n+        // In fact, we might not want to trigger in other cases.\n+        // Ex: when we could use SROA.  See issue #35259\n+\n+        let mut curr: usize = 0;\n+        for bb in mir.basic_blocks_mut() {\n+            let idx = match get_aggregate_statement(curr, &bb.statements) {\n+                Some(idx) => idx,\n+                None => continue,\n+            };\n+            // do the replacement\n+            debug!(\"removing statement {:?}\", idx);\n+            let src_info = bb.statements[idx].source_info;\n+            let suffix_stmts = bb.statements.split_off(idx+1);\n+            let orig_stmt = bb.statements.pop().unwrap();\n+            let StatementKind::Assign(ref lhs, ref rhs) = orig_stmt.kind;\n+            let (agg_kind, operands) = match rhs {\n+                &Rvalue::Aggregate(ref agg_kind, ref operands) => (agg_kind, operands),\n+                _ => span_bug!(src_info.span, \"expected aggregate, not {:?}\", rhs),\n+            };\n+            let (adt_def, variant, substs) = match agg_kind {\n+                &AggregateKind::Adt(adt_def, variant, substs) => (adt_def, variant, substs),\n+                _ => span_bug!(src_info.span, \"expected struct, not {:?}\", rhs),\n+            };\n+            let n = bb.statements.len();\n+            bb.statements.reserve(n + operands.len() + suffix_stmts.len());\n+            for (i, op) in operands.iter().enumerate() {\n+                let ref variant_def = adt_def.variants[variant];\n+                let ty = variant_def.fields[i].ty(tcx, substs);\n+                let rhs = Rvalue::Use(op.clone());\n+\n+                // since we don't handle enums, we don't need a cast\n+                let lhs_cast = lhs.clone();\n+\n+                // FIXME we cannot deaggregate enums issue: #35186\n+\n+                let lhs_proj = Lvalue::Projection(Box::new(LvalueProjection {\n+                    base: lhs_cast,\n+                    elem: ProjectionElem::Field(Field::new(i), ty),\n+                }));\n+                let new_statement = Statement {\n+                    source_info: src_info,\n+                    kind: StatementKind::Assign(lhs_proj, rhs),\n+                };\n+                debug!(\"inserting: {:?} @ {:?}\", new_statement, idx + i);\n+                bb.statements.push(new_statement);\n+            }\n+            curr = bb.statements.len();\n+            bb.statements.extend(suffix_stmts);\n+        }\n+    }\n+}\n+\n+fn get_aggregate_statement<'a, 'tcx, 'b>(curr: usize,\n+                                         statements: &Vec<Statement<'tcx>>)\n+                                         -> Option<usize> {\n+    for i in curr..statements.len() {\n+        let ref statement = statements[i];\n+        let StatementKind::Assign(_, ref rhs) = statement.kind;\n+        let (kind, operands) = match rhs {\n+            &Rvalue::Aggregate(ref kind, ref operands) => (kind, operands),\n+            _ => continue,\n+        };\n+        let (adt_def, variant) = match kind {\n+            &AggregateKind::Adt(adt_def, variant, _) => (adt_def, variant),\n+            _ => continue,\n+        };\n+        if operands.len() == 0 || adt_def.variants.len() > 1 {\n+            // don't deaggregate ()\n+            // don't deaggregate enums ... for now\n+            continue;\n+        }\n+        debug!(\"getting variant {:?}\", variant);\n+        debug!(\"for adt_def {:?}\", adt_def);\n+        let variant_def = &adt_def.variants[variant];\n+        if variant_def.kind == VariantKind::Struct {\n+            return Some(i);\n+        }\n+    };\n+    None\n+}"}, {"sha": "c3485b8256da1fa0c8b1178309f5b978faf9f615", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e804a3cf256106c097d44f6e0212cd183122da07/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e804a3cf256106c097d44f6e0212cd183122da07/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=e804a3cf256106c097d44f6e0212cd183122da07", "patch": "@@ -17,3 +17,4 @@ pub mod add_call_guards;\n pub mod promote_consts;\n pub mod qualify_consts;\n pub mod dump_mir;\n+pub mod deaggregator;"}, {"sha": "e57a9674cf683d4be0421655c911bd7928076eb1", "filename": "src/test/mir-opt/deaggregator_test.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e804a3cf256106c097d44f6e0212cd183122da07/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e804a3cf256106c097d44f6e0212cd183122da07/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.rs?ref=e804a3cf256106c097d44f6e0212cd183122da07", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Baz {\n+    x: usize,\n+    y: f32,\n+    z: bool,\n+}\n+\n+fn bar(a: usize) -> Baz {\n+    Baz { x: a, y: 0.0, z: false }\n+}\n+\n+fn main() {}\n+\n+// END RUST SOURCE\n+// START rustc.node13.Deaggregator.before.mir\n+// bb0: {\n+//     var0 = arg0;                     // scope 0 at main.rs:8:8: 8:9\n+//     tmp0 = var0;                     // scope 1 at main.rs:9:14: 9:15\n+//     return = Baz { x: tmp0, y: const F32(0), z: const false }; // scope ...\n+//     goto -> bb1;                     // scope 1 at main.rs:8:1: 10:2\n+// }\n+// END rustc.node13.Deaggregator.before.mir\n+// START rustc.node13.Deaggregator.after.mir\n+// bb0: {\n+//     var0 = arg0;                     // scope 0 at main.rs:8:8: 8:9\n+//     tmp0 = var0;                     // scope 1 at main.rs:9:14: 9:15\n+//     (return.0: usize) = tmp0;        // scope 1 at main.rs:9:5: 9:34\n+//     (return.1: f32) = const F32(0);  // scope 1 at main.rs:9:5: 9:34\n+//     (return.2: bool) = const false;  // scope 1 at main.rs:9:5: 9:34\n+//     goto -> bb1;                     // scope 1 at main.rs:8:1: 10:2\n+// }\n+// END rustc.node13.Deaggregator.after.mir\n\\ No newline at end of file"}, {"sha": "6647a1a0a933d41046dc22ad79e0709a52393967", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e804a3cf256106c097d44f6e0212cd183122da07/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e804a3cf256106c097d44f6e0212cd183122da07/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=e804a3cf256106c097d44f6e0212cd183122da07", "patch": "@@ -1340,6 +1340,8 @@ actual:\\n\\\n             MirOpt => {\n                 args.extend([\"-Z\",\n                              \"dump-mir=all\",\n+                             \"-Z\",\n+                             \"mir-opt-level=3\",\n                              \"-Z\"]\n                             .iter()\n                             .map(|s| s.to_string()));"}]}