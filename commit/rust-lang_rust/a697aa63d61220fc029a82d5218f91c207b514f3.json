{"sha": "a697aa63d61220fc029a82d5218f91c207b514f3", "node_id": "C_kwDOAAsO6NoAKGE2OTdhYTYzZDYxMjIwZmMwMjlhODJkNTIxOGY5MWMyMDdiNTE0ZjM", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-10-15T13:04:23Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-10-15T13:04:51Z"}, "message": "Use more lowered spans in for loop", "tree": {"sha": "e30d426643d59b91d622412630e077b7fbde6948", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e30d426643d59b91d622412630e077b7fbde6948"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a697aa63d61220fc029a82d5218f91c207b514f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a697aa63d61220fc029a82d5218f91c207b514f3", "html_url": "https://github.com/rust-lang/rust/commit/a697aa63d61220fc029a82d5218f91c207b514f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a697aa63d61220fc029a82d5218f91c207b514f3/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd1a1e4f0d2f3fbd0788f30370437ffcbca0c777", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd1a1e4f0d2f3fbd0788f30370437ffcbca0c777", "html_url": "https://github.com/rust-lang/rust/commit/bd1a1e4f0d2f3fbd0788f30370437ffcbca0c777"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "62f1a0671b5e39fab29abfdd1e1f50bbde9cb0bf", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a697aa63d61220fc029a82d5218f91c207b514f3/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a697aa63d61220fc029a82d5218f91c207b514f3/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=a697aa63d61220fc029a82d5218f91c207b514f3", "patch": "@@ -1335,6 +1335,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let head = self.lower_expr_mut(head);\n         let desugared_span =\n             self.mark_span_with_reason(DesugaringKind::ForLoop(ForLoopLoc::Head), head.span, None);\n+        let e_span = self.lower_span(e.span);\n \n         let iter = Ident::with_dummy_span(sym::iter);\n \n@@ -1348,23 +1349,24 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // `::std::option::Option::Some(val) => __next = val`\n         let pat_arm = {\n             let val_ident = Ident::with_dummy_span(sym::val);\n-            let (val_pat, val_pat_hid) = self.pat_ident(pat.span, val_ident);\n-            let val_expr = self.expr_ident(pat.span, val_ident, val_pat_hid);\n-            let next_expr = self.expr_ident(pat.span, next_ident, next_pat_hid);\n+            let pat_span = self.lower_span(pat.span);\n+            let (val_pat, val_pat_hid) = self.pat_ident(pat_span, val_ident);\n+            let val_expr = self.expr_ident(pat_span, val_ident, val_pat_hid);\n+            let next_expr = self.expr_ident(pat_span, next_ident, next_pat_hid);\n             let assign = self.arena.alloc(self.expr(\n-                pat.span,\n-                hir::ExprKind::Assign(next_expr, val_expr, self.lower_span(pat.span)),\n+                pat_span,\n+                hir::ExprKind::Assign(next_expr, val_expr, self.lower_span(pat_span)),\n                 ThinVec::new(),\n             ));\n-            let some_pat = self.pat_some(pat.span, val_pat);\n+            let some_pat = self.pat_some(pat_span, val_pat);\n             self.arm(some_pat, assign)\n         };\n \n         // `::std::option::Option::None => break`\n         let break_arm = {\n             let break_expr =\n-                self.with_loop_scope(e.id, |this| this.expr_break_alloc(e.span, ThinVec::new()));\n-            let pat = self.pat_none(e.span);\n+                self.with_loop_scope(e.id, |this| this.expr_break_alloc(e_span, ThinVec::new()));\n+            let pat = self.pat_none(e_span);\n             self.arm(pat, break_expr)\n         };\n \n@@ -1410,10 +1412,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let body_block = self.with_loop_scope(e.id, |this| this.lower_block(body, false));\n         let body_expr = self.expr_block(body_block, ThinVec::new());\n-        let body_stmt = self.stmt_expr(body.span, body_expr);\n+        let body_stmt = self.stmt_expr(body_block.span, body_expr);\n \n         let loop_block = self.block_all(\n-            e.span,\n+            e_span,\n             arena_vec![self; next_let, match_stmt, pat_let, body_stmt],\n             None,\n         );\n@@ -1423,7 +1425,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             loop_block,\n             self.lower_label(opt_label),\n             hir::LoopSource::ForLoop,\n-            self.lower_span(e.span.with_hi(head.span.hi())),\n+            self.lower_span(e_span.with_hi(head.span.hi())),\n         );\n         let loop_expr = self.arena.alloc(hir::Expr {\n             hir_id: self.lower_node_id(e.id),\n@@ -1452,7 +1454,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // #82462: to correctly diagnose borrow errors, the block that contains\n         // the iter expr needs to have a span that covers the loop body.\n         let desugared_full_span =\n-            self.mark_span_with_reason(DesugaringKind::ForLoop(ForLoopLoc::Head), e.span, None);\n+            self.mark_span_with_reason(DesugaringKind::ForLoop(ForLoopLoc::Head), e_span, None);\n \n         let match_expr = self.arena.alloc(self.expr_match(\n             desugared_full_span,"}, {"sha": "1b96cd54c3ed01b4baf623f9a0ab0c506de9f9c3", "filename": "src/test/incremental/hashes/for_loops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a697aa63d61220fc029a82d5218f91c207b514f3/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a697aa63d61220fc029a82d5218f91c207b514f3/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs?ref=a697aa63d61220fc029a82d5218f91c207b514f3", "patch": "@@ -108,7 +108,7 @@ pub fn change_iterable() {\n #[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, promoted_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, promoted_mir, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, promoted_mir\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_iterable() {\n     let mut _x = 0;\n@@ -183,7 +183,7 @@ pub fn add_loop_label_to_break() {\n #[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;\n@@ -237,7 +237,7 @@ pub fn add_loop_label_to_continue() {\n #[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn add_loop_label_to_continue() {\n     let mut _x = 0;"}]}