{"sha": "6f18b559dfbfde2677fc2b1450fdcbc5c2a5566a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMThiNTU5ZGZiZmRlMjY3N2ZjMmIxNDUwZmRjYmM1YzJhNTU2NmE=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-12-15T10:20:49Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-01-06T11:57:47Z"}, "message": "Generate DivergingCall terminator\n\nThis simplifies CFG greatly for some cases :)", "tree": {"sha": "a2dd432b37108e5feea6006068501384c6f84b7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2dd432b37108e5feea6006068501384c6f84b7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f18b559dfbfde2677fc2b1450fdcbc5c2a5566a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f18b559dfbfde2677fc2b1450fdcbc5c2a5566a", "html_url": "https://github.com/rust-lang/rust/commit/6f18b559dfbfde2677fc2b1450fdcbc5c2a5566a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f18b559dfbfde2677fc2b1450fdcbc5c2a5566a/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "893a66d7a11150615c385a190d0140f0b8549409", "url": "https://api.github.com/repos/rust-lang/rust/commits/893a66d7a11150615c385a190d0140f0b8549409", "html_url": "https://github.com/rust-lang/rust/commit/893a66d7a11150615c385a190d0140f0b8549409"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "a173018b74fea1a4f1f4081f11fb4e8203ec7cb6", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6f18b559dfbfde2677fc2b1450fdcbc5c2a5566a/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f18b559dfbfde2677fc2b1450fdcbc5c2a5566a/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=6f18b559dfbfde2677fc2b1450fdcbc5c2a5566a", "patch": "@@ -15,6 +15,7 @@ use build::expr::category::{Category, RvalueFunc};\n use build::scope::LoopScope;\n use hair::*;\n use rustc::middle::region::CodeExtent;\n+use rustc::middle::ty;\n use rustc::mir::repr::*;\n use syntax::codemap::Span;\n \n@@ -210,22 +211,30 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 this.exit_scope(expr_span, extent, block, END_BLOCK);\n                 this.cfg.start_new_block().unit()\n             }\n-            ExprKind::Call { fun, args } => {\n+            ExprKind::Call { ty, fun, args } => {\n+                let diverges = match ty.sty {\n+                    ty::TyBareFn(_, ref f) => f.sig.0.output.diverges(),\n+                    _ => false\n+                };\n                 let fun = unpack!(block = this.as_operand(block, fun));\n                 let args: Vec<_> =\n                     args.into_iter()\n                         .map(|arg| unpack!(block = this.as_operand(block, arg)))\n                         .collect();\n+\n                 let success = this.cfg.start_new_block();\n-                let panic = this.diverge_cleanup();\n-                let targets = CallTargets::WithCleanup((success, panic));\n-                this.cfg.terminate(block,\n-                                   Terminator::Call {\n-                                       func: fun,\n-                                       args: args,\n-                                       destination: destination.clone(),\n-                                       targets: targets\n-                                   });\n+                let cleanup = this.diverge_cleanup();\n+                let term = if diverges {\n+                    Terminator::DivergingCall { func: fun, args: args, cleanup: Some(cleanup) }\n+                } else {\n+                    Terminator::Call {\n+                        func: fun,\n+                        args: args,\n+                        destination: destination.clone(),\n+                        targets: CallTargets::WithCleanup((success, cleanup))\n+                    }\n+                };\n+                this.cfg.terminate(block, term);\n                 success.unit()\n             }\n "}, {"sha": "012bd9691be5f6b28e863818ef8265370214cec6", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f18b559dfbfde2677fc2b1450fdcbc5c2a5566a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f18b559dfbfde2677fc2b1450fdcbc5c2a5566a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=6f18b559dfbfde2677fc2b1450fdcbc5c2a5566a", "patch": "@@ -41,6 +41,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                                .map(|e| e.to_ref())\n                                .collect();\n                 ExprKind::Call {\n+                    ty: expr.ty,\n                     fun: expr.to_ref(),\n                     args: args,\n                 }\n@@ -58,11 +59,17 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                     argrefs.extend(args.iter().map(|a| a.to_ref()));\n \n                     ExprKind::Call {\n+                        ty: method.ty,\n                         fun: method.to_ref(),\n                         args: argrefs,\n                     }\n                 } else {\n-                    ExprKind::Call { fun: fun.to_ref(), args: args.to_ref() }\n+                    ExprKind::Call {\n+                        ty: &cx.tcx.node_id_to_type(fun.id),\n+                        fun: fun.to_ref(),\n+                        args: args.to_ref(),\n+                    }\n+\n                 }\n             }\n \n@@ -802,6 +809,7 @@ fn overloaded_operator<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>,\n     // now create the call itself\n     let fun = method_callee(cx, expr, method_call);\n     ExprKind::Call {\n+        ty: fun.ty,\n         fun: fun.to_ref(),\n         args: argrefs,\n     }"}, {"sha": "fb81cc7e6d97a4394d65702fbf809466616046d0", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f18b559dfbfde2677fc2b1450fdcbc5c2a5566a/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f18b559dfbfde2677fc2b1450fdcbc5c2a5566a/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=6f18b559dfbfde2677fc2b1450fdcbc5c2a5566a", "patch": "@@ -19,7 +19,7 @@ use rustc::middle::const_eval::ConstVal;\n use rustc::middle::def_id::DefId;\n use rustc::middle::region::CodeExtent;\n use rustc::middle::subst::Substs;\n-use rustc::middle::ty::{AdtDef, ClosureSubsts, Region, Ty};\n+use rustc::middle::ty::{self, AdtDef, ClosureSubsts, Region, Ty};\n use rustc_front::hir;\n use syntax::ast;\n use syntax::codemap::Span;\n@@ -124,6 +124,7 @@ pub enum ExprKind<'tcx> {\n         value: ExprRef<'tcx>,\n     },\n     Call {\n+        ty: ty::Ty<'tcx>,\n         fun: ExprRef<'tcx>,\n         args: Vec<ExprRef<'tcx>>,\n     },"}]}