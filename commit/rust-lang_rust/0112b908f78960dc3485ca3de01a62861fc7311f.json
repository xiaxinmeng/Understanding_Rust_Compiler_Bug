{"sha": "0112b908f78960dc3485ca3de01a62861fc7311f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMTJiOTA4Zjc4OTYwZGMzNDg1Y2EzZGUwMWE2Mjg2MWZjNzMxMWY=", "commit": {"author": {"name": "EFanZh", "email": "efanzh@gmail.com", "date": "2021-07-03T15:42:07Z"}, "committer": {"name": "EFanZh", "email": "efanzh@gmail.com", "date": "2021-07-03T15:42:07Z"}, "message": "Support pretty printing slices using GDB", "tree": {"sha": "ad497fab372966c97d9d5638a9935c7ff4976573", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad497fab372966c97d9d5638a9935c7ff4976573"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0112b908f78960dc3485ca3de01a62861fc7311f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0112b908f78960dc3485ca3de01a62861fc7311f", "html_url": "https://github.com/rust-lang/rust/commit/0112b908f78960dc3485ca3de01a62861fc7311f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0112b908f78960dc3485ca3de01a62861fc7311f/comments", "author": {"login": "EFanZh", "id": 2160692, "node_id": "MDQ6VXNlcjIxNjA2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/2160692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EFanZh", "html_url": "https://github.com/EFanZh", "followers_url": "https://api.github.com/users/EFanZh/followers", "following_url": "https://api.github.com/users/EFanZh/following{/other_user}", "gists_url": "https://api.github.com/users/EFanZh/gists{/gist_id}", "starred_url": "https://api.github.com/users/EFanZh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EFanZh/subscriptions", "organizations_url": "https://api.github.com/users/EFanZh/orgs", "repos_url": "https://api.github.com/users/EFanZh/repos", "events_url": "https://api.github.com/users/EFanZh/events{/privacy}", "received_events_url": "https://api.github.com/users/EFanZh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "EFanZh", "id": 2160692, "node_id": "MDQ6VXNlcjIxNjA2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/2160692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EFanZh", "html_url": "https://github.com/EFanZh", "followers_url": "https://api.github.com/users/EFanZh/followers", "following_url": "https://api.github.com/users/EFanZh/following{/other_user}", "gists_url": "https://api.github.com/users/EFanZh/gists{/gist_id}", "starred_url": "https://api.github.com/users/EFanZh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EFanZh/subscriptions", "organizations_url": "https://api.github.com/users/EFanZh/orgs", "repos_url": "https://api.github.com/users/EFanZh/repos", "events_url": "https://api.github.com/users/EFanZh/events{/privacy}", "received_events_url": "https://api.github.com/users/EFanZh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8b8558f083d86247ef3260ebb4f97b276cdbf73", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8b8558f083d86247ef3260ebb4f97b276cdbf73", "html_url": "https://github.com/rust-lang/rust/commit/a8b8558f083d86247ef3260ebb4f97b276cdbf73"}], "stats": {"total": 120, "additions": 94, "deletions": 26}, "files": [{"sha": "292e91b4d5d6177817a4f830abd8441410d11a84", "filename": "src/etc/gdb_lookup.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0112b908f78960dc3485ca3de01a62861fc7311f/src%2Fetc%2Fgdb_lookup.py", "raw_url": "https://github.com/rust-lang/rust/raw/0112b908f78960dc3485ca3de01a62861fc7311f/src%2Fetc%2Fgdb_lookup.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_lookup.py?ref=0112b908f78960dc3485ca3de01a62861fc7311f", "patch": "@@ -5,7 +5,6 @@\n from rust_types import *\n \n \n-rust_enabled = 'set language rust' in gdb.execute('complete set language ru', to_string=True)\n _gdb_version_matched = re.search('([0-9]+)\\\\.([0-9]+)', gdb.VERSION)\n gdb_version = [int(num) for num in _gdb_version_matched.groups()] if _gdb_version_matched else []\n \n@@ -52,9 +51,10 @@ def lookup(valobj):\n         return StdStringProvider(valobj)\n     if rust_type == RustType.STD_OS_STRING:\n         return StdOsStringProvider(valobj)\n-    if rust_type == RustType.STD_STR and not rust_enabled:\n+    if rust_type == RustType.STD_STR:\n         return StdStrProvider(valobj)\n-\n+    if rust_type == RustType.STD_SLICE:\n+        return StdSliceProvider(valobj)\n     if rust_type == RustType.STD_VEC:\n         return StdVecProvider(valobj)\n     if rust_type == RustType.STD_VEC_DEQUE:"}, {"sha": "33d26db547efc8c2ceed8353904b81652a09bcec", "filename": "src/etc/gdb_providers.py", "status": "modified", "additions": 39, "deletions": 16, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/0112b908f78960dc3485ca3de01a62861fc7311f/src%2Fetc%2Fgdb_providers.py", "raw_url": "https://github.com/rust-lang/rust/raw/0112b908f78960dc3485ca3de01a62861fc7311f/src%2Fetc%2Fgdb_providers.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_providers.py?ref=0112b908f78960dc3485ca3de01a62861fc7311f", "patch": "@@ -85,6 +85,39 @@ def to_string(self):\n     def display_hint():\n         return \"string\"\n \n+def _enumerate_array_elements(element_ptrs):\n+    for (i, element_ptr) in enumerate(element_ptrs):\n+        key = \"[{}]\".format(i)\n+        element = element_ptr.dereference()\n+\n+        try:\n+            # rust-lang/rust#64343: passing deref expr to `str` allows\n+            # catching exception on garbage pointer\n+            str(element)\n+        except RuntimeError:\n+            yield key, \"inaccessible\"\n+\n+            break\n+\n+        yield key, element\n+\n+class StdSliceProvider:\n+    def __init__(self, valobj):\n+        self.valobj = valobj\n+        self.length = int(valobj[\"length\"])\n+        self.data_ptr = valobj[\"data_ptr\"]\n+\n+    def to_string(self):\n+        return \"{}(size={})\".format(self.valobj.type, self.length)\n+\n+    def children(self):\n+        return _enumerate_array_elements(\n+            self.data_ptr + index for index in xrange(self.length)\n+        )\n+\n+    @staticmethod\n+    def display_hint():\n+        return \"array\"\n \n class StdVecProvider:\n     def __init__(self, valobj):\n@@ -96,19 +129,9 @@ def to_string(self):\n         return \"Vec(size={})\".format(self.length)\n \n     def children(self):\n-        saw_inaccessible = False\n-        for index in xrange(self.length):\n-            element_ptr = self.data_ptr + index\n-            if saw_inaccessible:\n-                return\n-            try:\n-                # rust-lang/rust#64343: passing deref expr to `str` allows\n-                # catching exception on garbage pointer\n-                str(element_ptr.dereference())\n-                yield \"[{}]\".format(index), element_ptr.dereference()\n-            except RuntimeError:\n-                saw_inaccessible = True\n-                yield str(index), \"inaccessible\"\n+        return _enumerate_array_elements(\n+            self.data_ptr + index for index in xrange(self.length)\n+        )\n \n     @staticmethod\n     def display_hint():\n@@ -131,9 +154,9 @@ def to_string(self):\n         return \"VecDeque(size={})\".format(self.size)\n \n     def children(self):\n-        for index in xrange(0, self.size):\n-            value = (self.data_ptr + ((self.tail + index) % self.cap)).dereference()\n-            yield \"[{}]\".format(index), value\n+        return _enumerate_array_elements(\n+            (self.data_ptr + ((self.tail + index) % self.cap)) for index in xrange(self.size)\n+        )\n \n     @staticmethod\n     def display_hint():"}, {"sha": "4a1204ccc4be737d0fb009d3e053c7c731f29cf3", "filename": "src/etc/lldb_commands", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0112b908f78960dc3485ca3de01a62861fc7311f/src%2Fetc%2Flldb_commands", "raw_url": "https://github.com/rust-lang/rust/raw/0112b908f78960dc3485ca3de01a62861fc7311f/src%2Fetc%2Flldb_commands", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flldb_commands?ref=0112b908f78960dc3485ca3de01a62861fc7311f", "patch": "@@ -1,7 +1,7 @@\n type synthetic add -l lldb_lookup.synthetic_lookup -x \".*\" --category Rust\n type summary add -F lldb_lookup.summary_lookup  -e -x -h \"^(alloc::([a-z_]+::)+)String$\" --category Rust\n-type summary add -F lldb_lookup.summary_lookup  -e -x -h \"^&str$\" --category Rust\n-type summary add -F lldb_lookup.summary_lookup  -e -x -h \"^&\\\\[.+\\\\]$\" --category Rust\n+type summary add -F lldb_lookup.summary_lookup  -e -x -h \"^&(mut )?str$\" --category Rust\n+type summary add -F lldb_lookup.summary_lookup  -e -x -h \"^&(mut )?\\\\[.+\\\\]$\" --category Rust\n type summary add -F lldb_lookup.summary_lookup  -e -x -h \"^(std::ffi::([a-z_]+::)+)OsString$\" --category Rust\n type summary add -F lldb_lookup.summary_lookup  -e -x -h \"^(alloc::([a-z_]+::)+)Vec<.+>$\" --category Rust\n type summary add -F lldb_lookup.summary_lookup  -e -x -h \"^(alloc::([a-z_]+::)+)VecDeque<.+>$\" --category Rust"}, {"sha": "bbc945a7ddab0186a913f6e9402b0357b890836e", "filename": "src/etc/rust_types.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0112b908f78960dc3485ca3de01a62861fc7311f/src%2Fetc%2Frust_types.py", "raw_url": "https://github.com/rust-lang/rust/raw/0112b908f78960dc3485ca3de01a62861fc7311f/src%2Fetc%2Frust_types.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Frust_types.py?ref=0112b908f78960dc3485ca3de01a62861fc7311f", "patch": "@@ -34,8 +34,8 @@ class RustType(object):\n \n \n STD_STRING_REGEX = re.compile(r\"^(alloc::(\\w+::)+)String$\")\n-STD_STR_REGEX = re.compile(r\"^&str$\")\n-STD_SLICE_REGEX = re.compile(r\"^&\\[.+\\]$\")\n+STD_STR_REGEX = re.compile(r\"^&(mut )?str$\")\n+STD_SLICE_REGEX = re.compile(r\"^&(mut )?\\[.+\\]$\")\n STD_OS_STRING_REGEX = re.compile(r\"^(std::ffi::(\\w+::)+)OsString$\")\n STD_VEC_REGEX = re.compile(r\"^(alloc::(\\w+::)+)Vec<.+>$\")\n STD_VEC_DEQUE_REGEX = re.compile(r\"^(alloc::(\\w+::)+)VecDeque<.+>$\")"}, {"sha": "84f76ba4e6e060f47140eb75ecbd9b32a4922537", "filename": "src/test/debuginfo/pretty-huge-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0112b908f78960dc3485ca3de01a62861fc7311f/src%2Ftest%2Fdebuginfo%2Fpretty-huge-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0112b908f78960dc3485ca3de01a62861fc7311f/src%2Ftest%2Fdebuginfo%2Fpretty-huge-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-huge-vec.rs?ref=0112b908f78960dc3485ca3de01a62861fc7311f", "patch": "@@ -13,7 +13,7 @@\n // gdb-check:$1 = Vec(size=1000000000) = {[...]...}\n \n // gdb-command: print slice\n-// gdb-check:$2 = &[u8] {data_ptr: [...], length: 1000000000}\n+// gdb-check:$2 = &[u8](size=1000000000) = {[...]...}\n \n #![allow(unused_variables)]\n "}, {"sha": "4e17661dd368eb213e615f04f64192848df23238", "filename": "src/test/debuginfo/pretty-slices.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0112b908f78960dc3485ca3de01a62861fc7311f/src%2Ftest%2Fdebuginfo%2Fpretty-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0112b908f78960dc3485ca3de01a62861fc7311f/src%2Ftest%2Fdebuginfo%2Fpretty-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-slices.rs?ref=0112b908f78960dc3485ca3de01a62861fc7311f", "patch": "@@ -0,0 +1,45 @@\n+// compile-flags:-g\n+\n+// gdb-command: run\n+\n+// gdb-command: print slice\n+// gdbg-check: $1 = struct &[i32](size=3) = {0, 1, 2}\n+// gdbr-check: $1 = &[i32](size=3) = {0, 1, 2}\n+\n+// gdb-command: print mut_slice\n+// gdbg-check: $2 = struct &mut [i32](size=4) = {2, 3, 5, 7}\n+// gdbr-check: $2 = &mut [i32](size=4) = {2, 3, 5, 7}\n+\n+// gdb-command: print str_slice\n+// gdb-check: $3 = \"string slice\"\n+\n+// gdb-command: print mut_str_slice\n+// gdb-check: $4 = \"mutable string slice\"\n+\n+// lldb-command: run\n+\n+// lldb-command: print slice\n+// lldb-check: (&[i32]) $0 = size=3 { [0] = 0 [1] = 1 [2] = 2 }\n+\n+// lldb-command: print mut_slice\n+// lldb-check: (&mut [i32]) $1 = size=4 { [0] = 2 [1] = 3 [2] = 5 [3] = 7 }\n+\n+// lldb-command: print str_slice\n+// lldb-check: (&str) $2 = \"string slice\" { data_ptr = [...] length = 12 }\n+\n+// lldb-command: print mut_str_slice\n+// lldb-check: (&mut str) $3 = \"mutable string slice\" { data_ptr = [...] length = 20 }\n+\n+fn b() {}\n+\n+fn main() {\n+\n+    let slice: &[i32] = &[0, 1, 2];\n+    let mut_slice: &mut [i32] = &mut [2, 3, 5, 7];\n+\n+    let str_slice: &str = \"string slice\";\n+    let mut mut_str_slice_buffer = String::from(\"mutable string slice\");\n+    let mut_str_slice: &mut str = mut_str_slice_buffer.as_mut_str();\n+\n+    b(); // #break\n+}"}, {"sha": "181ce0f2c3de5808f483e95249f9bd70c29ab577", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0112b908f78960dc3485ca3de01a62861fc7311f/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0112b908f78960dc3485ca3de01a62861fc7311f/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=0112b908f78960dc3485ca3de01a62861fc7311f", "patch": "@@ -1133,8 +1133,8 @@ impl<'test> TestCx<'test> {\n \n         let rust_type_regexes = vec![\n             \"^(alloc::([a-z_]+::)+)String$\",\n-            \"^&str$\",\n-            \"^&\\\\[.+\\\\]$\",\n+            \"^&(mut )?str$\",\n+            \"^&(mut )?\\\\[.+\\\\]$\",\n             \"^(std::ffi::([a-z_]+::)+)OsString$\",\n             \"^(alloc::([a-z_]+::)+)Vec<.+>$\",\n             \"^(alloc::([a-z_]+::)+)VecDeque<.+>$\","}]}